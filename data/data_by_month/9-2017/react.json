[{"title": "website yarn dev throwing error node", "body": "website docs list nodejs version greater requirement however tried run using version got following error pretty sure caused fact nodejs support trailing commas function parameters couple file maybe good idea change required version node website docs either remove trailing commas error unhandled exception error syntaxerror unexpected token require runapi www gatsby www gatsby www gatsby async replenish let know solution prefer gladly open pr", "num": "10995", "d": "9/2017"}, {"title": "link download html file working page", "body": "want request feature report bug bug current behavior link download file downloading anything current behavior bug please provide steps reproduce possible minimal demo problem via similar template click link page download html file download mac chrome browser click link downloads something says file open appears like nothing downloaded expected behavior able download html file versions react browser os affected issue work previous versions react mac os chrome version react irrelevant open file version", "num": "10994", "d": "9/2017"}, {"title": "react fails rehydrate noscripts", "body": "want request feature report bug bug current behavior react properly rehydrated equivalent code works react current behavior bug please provide steps reproduce possible minimal demo problem via similar template consider following serverside code js const react require react const reactdomserver require reactdomserver class main extends reactcomponent function createapp return reactcreateelement main null consolelog reactdomserverrendertostring createapp react contents hello hello react contents hello hello consider following application jsbin html hello class main extends reactcomponent render const contents lt strong gt hello lt strong gt consolelog contents contents return reactcreateelement noscript dangerouslysetinnerhtml html contents null function createapp return reactcreateelement main null reactdomhydrate reactdomrender createapp documentgetelementbyid target consolelog initialized react displays following console swap comment blocks html react used code works fine warnings true regardless whether change contents react output react output error message confuses states server output consistent output serverside code neither contents final markup emitted html entities please note important breaks known workaround believe may specific one replaces occurrences example works fine react expected behavior rendering component rehydrating component verbatim yield error versions react browser os affected issue work previous versions react regression tested chrome", "num": "10993", "d": "9/2017"}, {"title": "website restructure docs provide paths guidance", "body": "per dan recent comments lot people still seem complaints way docs structured might worth trying restructure docs kind like choose adventure book different paths based know far want accomplish suggestions reference hypothetical paths example looking want see ready learn react know first links page discussing common js prerequisite knowledge want try react right without installing anything links page points codepen codesandbox stackblitz online playgrounds also gives copypaste html snippet links cdn libs user save edit locally want learn basic ideas react nothing new involved links page describes components rendering syntax without using jsx want learn recommended way use react links page talks createreactapp jsx syntax understand basics learn think react build something probably links current tutorial section trying build application solve realworld problems react links page addresses topics like routing state management etc like guides discussed looking advanced react usage patterns help reuse code better links page covers topics like hocs render props context etc another related idea would code samples docs multiple syntax variations could viewed switching tabs global option across site like plain syntax jsx syntax syntax", "num": "10991", "d": "9/2017"}, {"title": "webpack building react reactdom packages version", "body": "want request feature report bug would call bug webpack building react reactdom packages using version running command tells hidden modules keeping everything else works fine app launching correctly using version react reactdom running tells hidden modules machine ubuntu packagejson webpackconfigjs file running show hidden modules version gives running version gives", "num": "10990", "d": "9/2017"}, {"title": "nt work", "body": "see original report problem svg case sensitive na\u00efvely setting relying insensitivity wo nt work good news seems like valid svg attribute problem missed applies html svg think fix add back whitelist", "num": "10987", "d": "9/2017"}, {"title": "website buttons live code sections bad styling", "body": "new site button todo example looks strange nonstandard generally happens border styling overridden nice styling applied button appears case removing fixes styling", "num": "10986", "d": "9/2017"}, {"title": "website upon scroll active item side navigation remains", "body": "would call bug click sidenav items page goes part page sidenav item get active state correctly blue span front link text scroll manually parts sidenav nt refresh active state items tested browsers macos see screenshot interactive component active", "num": "10984", "d": "9/2017"}, {"title": "reduce function", "body": "change", "num": "10983", "d": "9/2017"}, {"title": "new docs site add section headers navigation element", "body": "new reactjsorg docs nav different pages makes difficult quickly find jump part docs care change would accepted create pr example life cycle events react closest thing nav quick start gt state lifecycle navigating page reading seconds becomes clear tutorial list lifecycle events sure scan whole page nt look like maybe missed repeating process scrolling entire pages time consuming instead google react lifecycle events end finding someone independent blog post", "num": "10980", "d": "9/2017"}, {"title": "rss feed", "body": "intentionally drop assume reported twitter", "num": "10978", "d": "9/2017"}, {"title": "reactorg enable tab live jsx editor", "body": "current reactorg default behavior keyboard users get code sections live editor get stuck someone configure ignoretabkey makes editor ignore tab key presses keyboard users tab past editor without getting stuck chrome windows atm edit submit fix sorry", "num": "10976", "d": "9/2017"}, {"title": "recommend using componentwillmount instead using constructor", "body": "want request feature report bug feature current behavior docs recommended use constructor componentwillmount current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior recommend using componentwillmount constructor classes react provide lifecycle hook mounting since constructors already defined however constructors generally confusing considering ways defining things react take following example tutorial written componentwillmount would look like following weird pass super props happens constructors nowhere else react also setting state different constructor nowhere else react using componentwillmount extract props like normally would method react class also setting state exactly every method react class feel like consistency componentwillmount better even though classes provide constructor componentwillmount also supports server rendering benefits performance wise using constructor componentwillmount thanks versions react browser os affected issue work previous versions react react", "num": "10972", "d": "9/2017"}, {"title": "datareactroot attribute missing", "body": "want request feature report bug bug current behavior versions prior react added datareactroot attribute generated div wrapping render rely attribute order select div css case make height fills container eg root gt datareactroot height version attribute longer appears ca nt easily select div css hack javascript lot cleaner datareactroot attribute version version", "num": "10971", "d": "9/2017"}, {"title": "website defer loading babel needed", "body": "currently load babel via cdn nice load page nice load pages actually use eg pages use", "num": "10969", "d": "9/2017"}, {"title": "website gracefully recover ad block prevents babel loading", "body": "seen reports certain ad blockers eg fair adblocker prevent babel loading causes script error breaks docs site robustly handle case probably showing error codepreview side would show script errors", "num": "10968", "d": "9/2017"}, {"title": "website docsearch improvements", "body": "current behavior docsearch new page changed design two features different previous version cursor longer separate colour visible use arrow keys select result longer algolia logo mention expected behavior slightly different background colour cursor mention search algolia logo required free plan happy open pr issues whatever colour solution choose cc bvaughn gaearon", "num": "10965", "d": "9/2017"}, {"title": "github pages", "body": "seems", "num": "10964", "d": "9/2017"}, {"title": "react summit showing conferences page", "body": "successfully added second react summit ng page via pr summit showing list please missing anything get appear conferences page", "num": "10963", "d": "9/2017"}, {"title": "detecting outside events using logic portals", "body": "surprised pleasantly read events bubble portals component tree rather dom tree obviously means detect clicks occur within component child components without worry whether happen portal hosted however another fairly common thing may want detect whether event occurred outside component child components plenty libraries afaik use dom tree nt behaviour curious whether anything new unadvertised react help part puzzle", "num": "10962", "d": "9/2017"}, {"title": "reactdom createportal behavior rendersubtreeintocontainer", "body": "want request feature report bug nt know bug feature last function reactdomunstablerendersubtreeintocontainer works like reading html code new feature reactdomcreateportal behavior bud may understand new feature create portal minimal demo problem demo reactdomcreateportal demo reactdomunstablerendersubtreeintocontainer jsx class container extends reactcomponent constructor props super props thisstate show false show consolelog show thissetstate show true close consolelog close thissetstate show false render const show thisstate class portal extends reactcomponent constructor props super props thisnode documentcreateelement div documentbodyappendchild thisnode render return reactdomcreateportal thispropschildren thisnode reactdomrender documentgetelementbyid body rendered sourcecode html click show portal content state visible close portal expected behavior portal render content body want close portal click close button trigger show action problem shadowdom rendered html container portal separate close portal child container versions react browser os affected issue work previous versions react react reactdom chrome version", "num": "10960", "d": "9/2017"}, {"title": "react bug warning update mounted mounting component", "body": "trying run snippet causes warning noticed triggers hook react hooks consoled next order previous version component mounting twice behavior also bit strange comes without data fetching everything works fine", "num": "10959", "d": "9/2017"}, {"title": "reactdom exist error", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react react reactdom reactdomdevelopmentjs line commits show measurement per method name avoid stretch commit phase measurement overhead var labelsincurrentcommit new set lt undefined var formatmarkname function markname return reactemoji markname var formatlabel function label warning var prefix warning warningemoji reactemoji var suffix warning warning warning return prefix label suffix var beginmark function markname performancemark formatmarkname markname var clearmark function markname performanceclearmarks formatmarkname markname set undefined", "num": "10958", "d": "9/2017"}, {"title": "website tutorial warning showing moves", "body": "running code locally using going well hit section see grabbed current code link get warning code typed manually text talks warning seeing", "num": "10957", "d": "9/2017"}, {"title": "reactrouter work react", "body": "baseroutersjs", "num": "10956", "d": "9/2017"}, {"title": "svg tag unrecognized react", "body": "element code similar svg paths rendered get error console right way render svg never got message like react", "num": "10955", "d": "9/2017"}, {"title": "website maintain scroll position mobile menus", "body": "going quickly pages mobile really nice scroll long menus eg docs navigating next page returning menu previous scroll position maintainedrestored could done rendering menu layout component isnt unmounted page changes storing menu scroll position layout passing page component render", "num": "10952", "d": "9/2017"}, {"title": "correct callback custom renderer repainttick", "body": "previous discussions gather way render whole tree ready eg flushsync updatecontainer however nt see way get callback completed possible via one builtin functions way dealing make sure root node higher order component put callback logic seems work far would better could little closer metal yet still entire tree definitively reconciled previous renders finished thanks", "num": "10950", "d": "9/2017"}, {"title": "correct way return custom components renderer", "body": "renderer basically working woooo way creating components nt seem way done current examples basically renderer returns nonreact objects correct seems work basic tree updates far eg going wanted make sure right", "num": "10949", "d": "9/2017"}, {"title": "react devtools update highlight screenshots", "body": "react react", "num": "10948", "d": "9/2017"}, {"title": "upgraded using units without px shows warnings like", "body": "want request feature report bug feature current behavior div style width component changing accord input like version versions effects nt add px value like warning like version took time realize react needed add unites change css fly example states inputs message react warnings react simply div dont change new width code import react component react export default class testcolors extends component constructor props super props thishandleinputchange thishandleinputchangebind thisstate width handleinputchange event render const style backgroundcolor orange width thisstatewidth", "num": "10947", "d": "9/2017"}, {"title": "production check reacttestrenderer", "body": "upgrading reacttestrenderer started failing tests message test renderer available production mode fact running unit tests using renderer production build trying understand restriction introduced saw change made could nt find explanation pull request documentation production mode disallowed renderer thanks alex", "num": "10938", "d": "9/2017"}, {"title": "reactjs generating pdf using phpwkhtmltopdf", "body": "hi new reactjs created component generate report pulling node module php application created smarty template tpl using mainversionjs mainversioncss files build passing required data component data attributes able view report problem generate pdf click print hyper link browser using wkhtmltopdf converter using able merge different pdfs generating single pdf getting blank page give text working fine working react component content failing react component please guide right direction", "num": "10937", "d": "9/2017"}, {"title": "okay use reactdomhydrate always", "body": "regarding use hydrate nextjs use render code base render initial ssred version client side generated renders user clicked link question okay use cases assume fallback hydrate sure solution see makes sense check pr", "num": "10934", "d": "9/2017"}, {"title": "add react summit nigeria conferences list", "body": "facebook developers circle lagos nigeria organizing react summit nigeria love know event added list ie guideline regard would appreciated", "num": "10932", "d": "9/2017"}, {"title": "mobile web upgrade react automation input box sendkeys got failure ios simulator", "body": "protractor seleniumwebdriver test device saucelabs iphone simulator ios mobile web build react mobile web input box build react controlled input upgrade react automation test got failure submit input box value backend used saucelabs execute automatino testing saucelabs recording video see input value presented used webdriver sendkeys function insert value input box element click submit button check backend log input box value empty try manual simulator saucelabs use soft keyboard type value click submit works also try use android emulator run test works seems sendkeys function nt trigger react properly event react component think input value nt changed saw react changelog noticed upgrade include input improvment anyone face issue know hope fix workaround thanks charles", "num": "10930", "d": "9/2017"}, {"title": "website increase contrast result headers homepage", "body": "want request feature report bug accessibility issue home page new docsite current behavior word result interactive code samples nt enough contrast background current behavior bug please provide steps reproduce possible minimal demo problem via similar template running axe accessibility audit flag issue expected behavior lowcontrast issue also look cool", "num": "10929", "d": "9/2017"}, {"title": "website highlighted lines code snippets nt enough contrast", "body": "want request feature report bug accessibility issue new documentation website clearcut problem solution pretty open ended ill defined might difficult could use design creativity current behavior using prismjs syntax highlighting styles code snippets also sometimes want highlight certain line lighten background line lighter background many font colors nt provide enough contrast current behavior bug please provide steps reproduce possible minimal demo problem via similar template verify running axe audit page expected behavior need way highlight line without losing much contrast choosing different hue without making lighter looks bad opinion would rather fiddle various font colors used syntax highlighting either collaborate prism project add highlight option enough contrast find another librarysystem use syntax highlighting", "num": "10925", "d": "9/2017"}, {"title": "website add twitter timeline support docs", "body": "want request feature report bug bug docs introduced migration gatsby current behavior empty link community gt get support page bottom past twitter timeline rendered expected behavior see twitter timeline see old version looks like script added pr script nt loaded think adding gatsby twitter plugin would fix probably need tweak gatsby twitter plugin", "num": "10924", "d": "9/2017"}, {"title": "prevent react modifying elements manipulated external code", "body": "new york times rebuilding website using react currently isomorphic app server clientside renders question best way include nonreact interactive graphic maps charts visualizations created custom code within fully react page ideal scenario serverside react renders initial html graphic using part react page clientside react never touches elements even component mounting thought react might solve method still removes nodes nt expect nodes generated clientside code none options integrating libraries seem exact match either classic use case graphic map serverside html includes text placeholder map well map js page load map immediately drawn gets erased react mounts clientside nodes included serverside output often vary based viewport device etc trivial example showing react removing clientcreated nodes one second mobile devices loading react library potentially dependencies could take seconds simplest solution think function could return false rest react components page would mount leave interactive graphic part alone probably solutions constraints need use dangerouslysetinnerhtml need deploy graphics outside site releases need render initial html serverside performance simplicity use iframes everything flexible enough rerender reattach elements causes many problems css animations restart media playback interrupted input cursors text selections lost etc guidance appreciated cc gaearon leeb", "num": "10923", "d": "9/2017"}, {"title": "document error boundaries", "body": "nt think either toplevel doc reference yet cc chantastic", "num": "10922", "d": "9/2017"}, {"title": "bla", "body": "bla github bug", "num": "10913", "d": "9/2017"}, {"title": "umd production builds define global variables", "body": "want request feature report bug bug current behavior umd production build linked announcement define global variables reactdom current behavior bug please provide steps reproduce possible minimal demo problem via similar template use build app defined function variable loaded react expected behavior react builds define global symbols versions react browser os affected issue work previous versions react worked fine betas", "num": "10909", "d": "9/2017"}, {"title": "reactos please read respond final request", "body": "issue seems closed without input noted responded strongly suggest read final post suggest new location discussion aware reactos project community reaching please nt ignore", "num": "10908", "d": "9/2017"}, {"title": "react breaks webpackhotmiddleware", "body": "output updating react seems like webpackhotmiddleware relies internal created issue webpackhotmiddleware repo", "num": "10907", "d": "9/2017"}, {"title": "react onmouseenter triggered extra time entering new child", "body": "react reactdom \u7ed9\u7236\u7ea7\u522b\u7ed1\u5b9a onmouseenter onmouseenter js import react component react class demo extends component constructor prop super prop thisenter thisenterbind thisstate flag false enter event consolelog eventnativeevent consolelog enter click thissetstate flag thisstateflag render let old height width border solid let aa height width border solid red let content border solid black display flex padding return thisstateflag amp amp", "num": "10906", "d": "9/2017"}, {"title": "return value type prepareupdate", "body": "official renderers seem generally return prepareupdate example tutorial suggests return nature return type affect", "num": "10904", "d": "9/2017"}, {"title": "schedule callbacks renderer", "body": "looking early implementation custom fiber renderer seems callback official renderers additionally callback official renderers tutorialexample lastly referenced guide begs question custom renderers meant implement best practices general sense custom renderers relationship setting proritylevels affecting scheduler", "num": "10903", "d": "9/2017"}, {"title": "website overlapping headers", "body": "cc joecritch", "num": "10901", "d": "9/2017"}, {"title": "feature request global didupdate", "body": "currently easy write global logic executes react rerendered lifecycle method works great logic isolated component found recently wanting global hook baked react simple example useful want isolated function perhaps keyboard shortcut creates element screen focuses notion written custom logic makes upgrading react difficult unstable think would useful others particularly use redux building complicated ui interactions", "num": "10900", "d": "9/2017"}, {"title": "website footer links reset scroll top", "body": "open scroll bottom click link footer eg resources gt conferences new page load scroll position remain bottom obvious new page loaded", "num": "10898", "d": "9/2017"}, {"title": "website add flow types website source www", "body": "replace flow types components make sure checks types protect regressions", "num": "10897", "d": "9/2017"}, {"title": "renamemove docs examples license files github clearly shows mit license top navigation bar", "body": "want request feature report bug feature current behavior nt show license react github repository multiple license files examples docs keep links docs examples licenses readme root directory github correctly detects mit license react current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior make even obvious project uses mit license versions react browser os affected issue work previous versions react react", "num": "10889", "d": "9/2017"}, {"title": "website side nav sometimes shows incorrect current highlight", "body": "bug active navbar item incorrect sometimes reproduction steps navigate observe synthetic event highlighted expected behavior highlighted", "num": "10888", "d": "9/2017"}, {"title": "reactcomponent render fragments docs typo example jsx tag closed prematurely", "body": "want request feature report bug bug current behavior render fragments example jsx tag closed prematurely current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react react documentation website chrome android previously array fragments nt supported", "num": "10883", "d": "9/2017"}, {"title": "tutorial text challenge unclear", "body": "want request feature report bug bug current behavior first challenge end tutorial says suggests already displaying locations moves nt specify move locations displayed either makes challenge unclear expected behavior change text challenge something similar versions react browser os affected issue work previous versions react", "num": "10880", "d": "9/2017"}, {"title": "expect server html contain text node due whitespace react", "body": "updated react application everything seems work fine instead fact error appears using reactdomhydrate app completely ssr ready found old issue stackoverflow someone wrote could problem markup send server client far see html code without markup problem", "num": "10879", "d": "9/2017"}, {"title": "detect reconciliation completed", "body": "reading fiber architecture renderers general quite sure tell reconciliation completed particularly important rendering animation targeting something dom let consider example ticker root node pushes changes children setting state every requestanimationframe react finished reconciliation quickly cascade mountain pending updates therefore reasonable strategy would skip frames set state reconciliation definitively finished naively tried practical level simply waiting root node using gate assuming called children finished render cycles children ultimately update canvas render though sure relevant sure successful simple way measure practically ideally even scenario children set state way tell whether tree whole finished reconciliation perhaps even particular node", "num": "10878", "d": "9/2017"}, {"title": "update implementation notes documentation", "body": "implementation notes still describes stack reconciler currently using resources would great updated description fiber part official docs", "num": "10877", "d": "9/2017"}, {"title": "multiple onfocus events fired single focus safari", "body": "like report possible bug brief description onfocus synthetic event fired multiple times single focus occurrence safari expected behaviour fired per focus live demo minimal steps reproduce install createreactapp create example application edit application file add input onfocus event handler javascript import react component react import logo logosvg import appcss class app extends component handleonfocus evt gt consolelog handleonfocus evt render return welcome react get started edit save reload input export default app start application open safari click input field developer console opened notice focus event fired multiple times additional info issue found following environment macos sierra version also tested found high sierra safari also tested found safari safari seems work latest safari mobile chrome firefox react js also tested found react example steps reproduce generated createreactapp version observations might come handy issue seems behave randomly extent event usually fired twice changing focus input input first click input fires two events consequential fire one changing focus different input field fires twice additional interesting behavior happens multiple input fields instance input fields first focus input generates two events onfocus input focus input sometimes generates three events onfocus input input input targets", "num": "10871", "d": "9/2017"}, {"title": "thinking react example filter correctly", "body": "want request feature report bug bug current behavior type bas nt get hits baseball basketball current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior get basketball baseball type bas versions react browser os affected issue work previous versions react version", "num": "10869", "d": "9/2017"}, {"title": "grammar mistake portals docs", "body": "want request feature report bug bug current behavior current text open browser devtools observe button child div onclick handler note child div onclick handler missing word current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior open browser devtools observe button direct child div onclick handler versions react browser os affected issue work previous versions react react", "num": "10868", "d": "9/2017"}, {"title": "async render function", "body": "since fiber react team even consider render functions like obviously changing core ways react working consequences approach every render needs promise backcompatible tho require figuring loading state shown imagine whole new way could write apps rely async api think", "num": "10867", "d": "9/2017"}, {"title": "react fiber batched updates ignores arguments", "body": "want request feature report bug bug current behavior calling reactdomunstablebatchedupdates fn b eventaully calls fn ignoring third argument current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react bug worked possible workaround", "num": "10866", "d": "9/2017"}, {"title": "documentimplementationcreatehtmldocument api requires title argument specified", "body": "want request feature report bug bug current behavior react interactivity lost react crash current behavior bug please provide steps reproduce possible minimal demo problem via similar template run reactdomdevelopmentjs sure exactly exact repo steps fix attempted simply pass empty string var normalizehtml function parent html testdocument testdocument documentimplementationcreatehtmldocument fix var testelement parentnamespaceuri htmlnamespace testdocumentcreateelement parenttagname testdocumentcreateelementns parentnamespaceuri parenttagname testelementinnerhtml html return testelementinnerhtml source mdn docs expected behavior well react crash dev mode interactively continues work versions react browser os affected issue work previous versions react", "num": "10865", "d": "9/2017"}, {"title": "unpkg latest working", "body": "following links ceased work last day top one returns find module distreactjs package react", "num": "10864", "d": "9/2017"}, {"title": "react lowercase html attributes generated html", "body": "want request feature report bug bug current behavior reactdomserver generates camelcased markup attributes example pen believe attributes canonically lowercased lowercase attributes jsx react warns using right names expected behavior attribute names would rendered lowercase versions react browser os affected issue work previous versions react prior versions react stripped attributes", "num": "10863", "d": "9/2017"}, {"title": "use returned string src tag", "body": "want request feature report bug feature want use new feature react returning string use string current behavior well render component see string displayed screen see attached screenshot goal use string code component returns strings class mycomponent extends component render switch thispropstype case text return thispropsjsondata thispropskey break case image return thispropsjsondata thispropskey break default return null break const usercomponent props gt return displays string page parent component class app extends component constructor props super props thisstate json fetching data api componentdidmount fetch response gt responsejson json gt thissetstate json json render return export default app achieve current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior want use returned string inside versions react browser os affected issue work previous versions react react browser chrome version official build work previous versions react new feature react", "num": "10859", "d": "9/2017"}, {"title": "bug eventistrusted always true onfocus event handler", "body": "want request feature report bug bug current behavior triggering focus element onfocus handler receives eventistrusted true current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior eventistrusted false focus triggered programatically versions react browser os affected issue work previous versions react far reproduced react chrome", "num": "10858", "d": "9/2017"}, {"title": "tostring classname", "body": "react used call tostring non string objects would receive packages working anymore far tell likely reason specifically anything using similar might something add docs breaking change ca nt figure else components suddenly throwing errors dont styles", "num": "10857", "d": "9/2017"}, {"title": "update authors", "body": "seems like nt run script", "num": "10854", "d": "9/2017"}, {"title": "broken links new docs", "body": "root footer inside installation inside tab react used setting production build process learn integrating react existing code links creating production build better error handling experience inside next section inside next section encapsulated stateful components inside discuss next sections next section inside one previous sections mentioned inside see syntheticevent reference create stateful component called embed expressions jsx extract component inside inside inside inside simply refer react docs inside inside inside inside inside inside inside inside inside inside inside inside inside inside inside inside none soft links work incorrect capitalization inside inside inside inside inside note nt go blog posts", "num": "10852", "d": "9/2017"}, {"title": "suggestion remove misleading docs code new react portals", "body": "want request feature report bug want suggest docs optimization mislead core idea new react portals current behavior currently docs example code uses jscreated div element referenced object thisel property used componentdidmount componentwillunmount render modal class component current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior point view mentioned implementations represent misleadingunnecessary docs boilerplate might lead confusion especially beginning new feature probably denied good possible working fork showing core idea feature nothing else versions react browser os affected issue case agree open pull request", "num": "10850", "d": "9/2017"}, {"title": "use reactos logo project name", "body": "project seems subsumed almost name logo reactos project seems rather disengenuous reactos logo close spinning atom logo globe middle project name reactos reactjs seems best confusing worst looks project treading coattails reactos edit name correction", "num": "10849", "d": "9/2017"}, {"title": "error decoder website displaying messages error codes", "body": "want request feature report bug bug current behavior visiting show error message current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react macos chrome", "num": "10838", "d": "9/2017"}, {"title": "react release checklist", "body": "ensure commits master tested facebook check part latest internal sync stable releases prefer landed week skip step really know verify npm permissions x x x x ping someone team ensure react fresh x ensure x x master green ci check recent commits x check local output matches commit list x run repo root ensure runtime dependencies match users would get x x look version range root x ensure depending specify range x x look version range root x ensure depending specify range x x look version range root x ensure depending specify range x run x might change lockfile change x commit changes local sanity checks repo root x run repo root x run repo root x run repo root stable release update error codes x run repo root x changes maybe still separate branch docs reading need cherrypick commit branch makes sure website decoder knows updated error codes ideally change docs serve master stable release write changelog x open add release notes format earlier x make sure changes easy understand friendly oneliners better pr titles x make sure contributors credited like x verify markup messed previewing online editor update version x update root x update export x update x x x x x x see packages update list x run verify changes x build x run repo root run fast packaging smoke test x open browser smoke test x say hello world run slow packaging smoke test x go run x x go repo root run x open verify every iframe shows hello world release x run x run x go x every subfolder nonstable versions run subfolder x stable versions run subfolder x run verify things published expect fixme really automate part currently atomic stable release create github release x open new release page github x choose tag version pushed dropdown says existing tag x paste new release notes x attach files except release x press publish release stable release update version reported website x open x change newly published version x maybe still separate branch docs reading need cherrypick commit branch makes sure website knows updated config ideally change docs serve master stable release update bower x clone bower repo outside main repo x make sure x delete js files bower repo copy react repo x bower repo x bower repo miss x bower repo stable release try x x x x stable release reach dom team x reach dom team nhunzaker jquense aweary case would like go dom fixtures block release", "num": "10833", "d": "9/2017"}, {"title": "warning stateless function components given refs attempts access ref failnull updating react", "body": "want request feature report bug bug current behavior page load throws console error expected behavior console error least way trace stateless component causing issue versions react browser os affected issue work previous versions react error started appear upgrading react", "num": "10831", "d": "9/2017"}, {"title": "safari input invoke callback input nonnumeric character", "body": "want request feature report bug bug current behavior safari invoke callback input keyboard nonnumeric character ie invoked input invoked input current behavior bug please provide steps reproduce possible minimal demo problem via similar template please see relevant jsfiddle expected behavior callback invoked input affects contents field versions react browser os affected issue work previous versions react reproducible safari version macos react version", "num": "10829", "d": "9/2017"}, {"title": "prevent portal unmounting using reactdomcreateportal", "body": "previous comment use implements portal control portal unmount seems impossible use parent component unmount portal unmount react", "num": "10826", "d": "9/2017"}, {"title": "write react component life cycle methods using arrowfunction syntax", "body": "hello react community getting familiar react question would like clarify react component life cycle method particularly see documents react implement react component life cycle methods example render method use syntax question problem unknown sideeffect change method use functional style method follows hope receive reply soon would like appreciate advance detailed explanation issue thank", "num": "10810", "d": "9/2017"}, {"title": "reactnative mit license week", "body": "heard react relicensing mit reason choose react reactnative reactnative mit license week", "num": "10809", "d": "9/2017"}, {"title": "update thinking react example filter products filterableproducttable component", "body": "step thinking react example component filters displays array products based user input unsure code filtering products component component question previously raised issue think responsible filtering products would improve example two reasons allow used outside better separate concerns filtering products displaying products updated example happy submit pr something changed", "num": "10808", "d": "9/2017"}, {"title": "installationmd content update", "body": "want request feature report bug bug current behavior line installatinmd file saying current behavior bug please provide steps reproduce possible minimal demo problem via similar template line installationmd file say expected behavior line installationmd file say since latest installation createreactapp using yarn versions react browser os affected issue work previous versions react na", "num": "10806", "d": "9/2017"}, {"title": "", "body": "", "num": "10801", "d": "9/2017"}, {"title": "component unmounts constructor state sets componentwillmount fire", "body": "current behavior component unmounts constructor state sets componentwillmount fire expected behavior constructor state sets componentwillmount must probably fire right correct versions react browser os affected issue work previous versions react sure", "num": "10790", "d": "9/2017"}, {"title": "thank relicensing react jest flow immutablejs", "body": "thousands developer love react really great amazing framework many company baidualibabatencentzhihu using react building products millons upon millons people thank brilliant great work thank generous noble spirit", "num": "10789", "d": "9/2017"}, {"title": "react mit license next week", "body": "days age boss asked stop react cause react bsdpatent grant license plan develop stopped choose new framework learn reat best framework heard fb relicenseing react mit license next week true till want use react also need learn framework news true make decision back react", "num": "10788", "d": "9/2017"}, {"title": "learning react problem", "body": "every time decide want learn react google find tutorial seemingly reputable sources try things google go stackoverflow quickly realize syntax different different websites api keeps changing nt know looking old tutorial new one way determining stackoverflow question going apply version react using think needed kind master list based era api talking semver lowlevel talking something like first react came things every one happy came silver age react things following way took put see thing old golden age hit bronze era split everything tiny pieces specific blah blah blah serve cheatsheet anyone new make sense going kinda similar look piece c could say yeah oh looks thanks listening", "num": "10784", "d": "9/2017"}, {"title": "webpack bundle react react dom output large file", "body": "question everyone test react reactdom preact preactcompat using js file generate bundle using different frameworks output react bundle reactdom large preact find lot difference know light version reactdom need optimization webpack big difference anyone seen talked output using preact project using react thank", "num": "10780", "d": "9/2017"}, {"title": "error component causes error thrown twice", "body": "want request feature report bug bug current behavior component throws render example click handler error thrown twice instead error boundaries stop double reporting handle errors thrown render errors handlers etc current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior one error thrown versions react browser os affected issue work previous versions react", "num": "10779", "d": "9/2017"}, {"title": "react cloudflare html minification causes isomorphic react app crash", "body": "think bug compatibility issue react serversided html rendered function contains comment tags represent null components instead tags like react really neat unfortunately app served cloudflare html minification enabled automatically removes comment tags including ones generated react behavior causes client app crash throws error x number usually null component reactid problem solved disabling html minification cloudflare question possible earn benefit html minification keep app running well reactreactdom version node version", "num": "10778", "d": "9/2017"}, {"title": "webdriver input gets partial value upgrading reactdom", "body": "want request feature report bug bug current behavior use webdriverio saucelabs run tests found automation cases consistently failed inputing strings textbox upgrade reactdom input value set partially try input input times javascript webdriverio code browsersetvalue textboxselector current behavior bug please provide steps reproduce possible minimal demo problem via similar template sure could see video expected behavior versions react browser os affected issue work previous versions react happens reactdom works reactdom", "num": "10776", "d": "9/2017"}, {"title": "testutilssimulate appear work reactcloneelement", "body": "want request feature report bug bug current behavior reacttestutilssimulate events fire dynamic children components current behavior bug please provide steps reproduce possible minimal demo problem via similar template class like class keyboardsupport extends reactcomponent render return reactcloneelement reactchildrenonly thispropschildren onkeydown thisdosomething dosomething something use within another component like class foo extends reactcomponent render return handlefocus consolelog called browser called test indicated invoked user focuses component browser attempt use something like never called expected behavior cloned element still fire synthetic focus event versions react browser os affected issue work previous versions react works expected using deprecated package react appear work using", "num": "10774", "d": "9/2017"}, {"title": "unexpected ssr difference warning svg primitives", "body": "want request feature report bug bug current behavior started recieving warning svgs using fegaussianblur expected behavior warnings difference versions react browser os affected issue work previous versions react behavior started right updating never happened", "num": "10772", "d": "9/2017"}, {"title": "toggle menu external button", "body": "different components related manner one button second one menu want openclose menu component click button inside way add class directly without setting redux state", "num": "10770", "d": "9/2017"}, {"title": "warning using development build production", "body": "hi seeing error react developer tools saying use build js file using browserify also tried luck red warning nt disappear", "num": "10768", "d": "9/2017"}, {"title": "think remove girhub star form project bacause reat license", "body": "think remove girhub start form project bacause reat license think remove girhub start form project bacause reat license think remove girhub start form project bacause reat license", "num": "10767", "d": "9/2017"}, {"title": "proptypes definition default value definition", "body": "want request feature report bug feature current behavior defining optional type components make us define well expected behavior set default value proptypes definition property required internally might generated fly based versions react browser os affected issue work previous versions react na cheers", "num": "10765", "d": "9/2017"}, {"title": "bug state updating calling setstate state variable used hidden component display none", "body": "want request feature report bug bug current behavior call setstate update state variable used prop component renders modal modal hidden display none state variable nt update modal displayed state variable update neither componentdidupdate componentwillupdate get triggered current behavior bug please provide steps reproduce possible minimal demo problem via similar template snippet code comments point issue likeuser userid event let itisamatch false let users thisstateuserstomatch let index usersfindindex user gt return useruserid userid let userfirstname users index firstname index gt full code part private repo happy share access would assist investigating issue expected behavior regardless whether modal dialog displayed state variable update versions react browser os affected issue work previous versions react react chrome windows home", "num": "10763", "d": "9/2017"}, {"title": "feature request create components componentcreate", "body": "propose function module added member constructor using syntax following confusion points eliminated vs developers wo nt need add inside components deal vs developers wo nt need remember special case assign use initialising state done inside method developers wo nt manually bind methods vs developers wo nt use syntaxes defining components stateless components transpiled function declarations better performance moreover transitioning stateless component stateful one painless", "num": "10757", "d": "9/2017"}, {"title": "react classname bemcn like libraries", "body": "hello really love new features architecture fiber new behavior nonevent attributes function values react warns ignores got issue jsx const fn gt null fntostring gt foo const render gt would nt add classname even override method object works jsx const obj tostring gt foo const render gt think ok behavior function object feature needed bemcn like library write instead", "num": "10756", "d": "9/2017"}, {"title": "typeerror undefined object evaluating sgetcall input onchange react reactdom safari", "body": "want request feature report bug bug current behavior onchange onkeyup onkeydown causes typeerror undefined object evaluating sgetcall safari current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior component get eventtargetvalue update state turn rerenders new state values versions react browser os affected issue work previous versions react works react", "num": "10755", "d": "9/2017"}, {"title": "typeerror read property createelement undefined", "body": "typeerror read property createelement undefined", "num": "10753", "d": "9/2017"}, {"title": "sorry continue make noise people really love react forced abandon", "body": "patent licence change clearly explain good morning see tomorrow thank", "num": "10748", "d": "9/2017"}, {"title": "tools", "body": "according patent patent aim protect facebook avoid legal risk think patent clearly explain means could using react make damage tools facebook could make competitive product imsoftaisoft post issue love react nt want abandon react really want using react building useful things humans", "num": "10747", "d": "9/2017"}, {"title": "change bsd licensepatent licence please", "body": "baidu already baned using react licence brings extreamly negative effects long term development hurted people love react one post issue everyday change", "num": "10744", "d": "9/2017"}, {"title": "give react cause licensed", "body": "react great framework native give react cause bsdparent licensed react keep using bsdparent licensed people give iv choose new framework project good bye", "num": "10742", "d": "9/2017"}, {"title": "add official react faq docs", "body": "wrote redux faq last year pretty helpful answering actual frequently asked questions great could add similar faq directly react docs tim arney already standalone react faq site would great starting point lot material reactredux links list also useful source info general opening place discuss possible formatting react faq well possible topics volunteers help write", "num": "10740", "d": "9/2017"}, {"title": "recent radio input onchange changes break expected behavior", "body": "background see issue thread recent changes pushed mind broken expected behavior comes firing events group radio button inputs aware conversation problem describing exactly far tell note problem describe occur react lt expectations would expect individual radio button fire two conditions among others radio input clicked state changes label radio input clicked causing indeed native elements work precisely way click radio buttons observe console output see event firing expected desired input state changed something new codepen example react expectations following react component work expected react inputs component work expect native dom elements work codepen shows working properly event seems fire another codepen showing nt work imported course entirely possible something incorrectly couple years breaking change components came recent updates", "num": "10739", "d": "9/2017"}, {"title": "adding letter e input field type number cause onchange handler fire", "body": "want request feature report bug report bug current behavior adding letter e input field type number cause onchange handler fire current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior fire event value least maybe versions react browser os affected issue work previous versions react nt know", "num": "10738", "d": "9/2017"}, {"title": "attach thirdparty tools monitor component state updates", "body": "want request feature report bug feature exists previous releases react current behavior feature implemented versions react browser os affected issue work previous versions react react worked previous versions hey would really like able use reactinstrumentation fiber found gaearon pull request work stopped would like know pick implement also asked pull request figured might get ignored since closed pull request omer", "num": "10736", "d": "9/2017"}, {"title": "rendering nan dom attribute", "body": "blog post states values ignored dom attributes tests case rendered created codesandbox using react demonstrate", "num": "10733", "d": "9/2017"}, {"title": "render list message html new line", "body": "hi new react came problem using rendering array strings html array one two three want render new line seems adding br n nt work use tag eg p start new line method using block tag hoping advice thanks", "num": "10731", "d": "9/2017"}, {"title": "trigger duplicate calls miss others", "body": "bug know deferredupdates unstable maybe known problem one tricky trigger spamming inside lot end update happening multiple times calls skipped entirely example code result mouse wheel real fast red area see console output would expect number output console unique sequence incremented every time closure captures inside new version", "num": "10729", "d": "9/2017"}, {"title": "component returns undefined outside render function", "body": "want request feature report bug bug current behavior react component imported file exports components one place returns outside function container component path components folder resolved webpack config option file structure file content js ui components export checkbox uicheckbox container file component js import react component react import checkbox components gt undefined import checkbox componentsuicheckbox gt component function returns imported indexjs file components folder returns component function imported directly folder consolelog checkbox update returns component function cases settimeout gt consolelog checkbox export default class container render returns component function cases consolelog checkbox expected behavior described code versions react browser os affected issue work previous versions react react os macos browser google chrome", "num": "10725", "d": "9/2017"}, {"title": "update react license faqupdate license", "body": "read previous discussions regarding react facebook oss license particular agree clarificatory remarks esp gaearon amp sebmarkbage facebook nt intend use license offensively however today announcement automattic wordpresscom calypso wordpress core gutenberg longer using react believe facebook efforts clarifying react license clearly fallen short least faqs need extended explained much greater detail ideally recent announcement cause facebook rework license altogether said issue tracker place discussion believe untrue though apologize causing noise growing apprehension use react undoubtedly effects line regarding react ecosystem buy wordpress core community would huge benefit react think maybe wrong issue track license issue greatest exposure perhaps automattic post implies problem license perception license problem issue react issue get worse without addressed genuinely know developers ca nt hope something done concerns funneled proper channels", "num": "10719", "d": "9/2017"}, {"title": "scrolltop changed chrome loading page", "body": "want request feature report bug bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template tried make minimal example could tried create proxy trap change scrolltop could nt figure make proxy document body tried look react source find scrolltop changed nt find anything set saved quickly click buy rent page scrolls little quickly click preferences page jumps top expected behavior quickly click buy rent page scrolls little quickly click preferences page scroll change versions react browser os affected issue work previous versions react chrome linux chrome android firefox linux test previous versions react", "num": "10717", "d": "9/2017"}, {"title": "portals container child managed react", "body": "want request feature report bug bug current behavior appends rendered component target instead replacing contents target current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior replace contents target new rendered component versions react browser os affected issue work previous versions react react reactdom note might completely misunderstood portals work gaearon encouraged open issue", "num": "10713", "d": "9/2017"}, {"title": "support string targets isomorphic createportal", "body": "proposal api addition nodes support strings second argument container could pave declarative way achieve order server side rendering js createportal container nodestring server could render portals children inplace clientside hydration process move right location clientside using container string", "num": "10711", "d": "9/2017"}, {"title": "react rc", "body": "copy pasting checklist going ensure commits master tested facebook check part latest internal sync stable releases prefer landed week skip step really know verify npm permissions x x x x ping someone team ensure react fresh x ensure x x master green ci check recent commits x check local output matches commit list x run repo root ensure runtime dependencies match users would get x x look version range root x ensure depending specify range x x look version range root x ensure depending specify range x x look version range root x ensure depending specify range x run x might change lockfile change x commit changes local sanity checks repo root x run repo root x run repo root x run repo root stable release update error codes x run repo root x changes x maybe still separate branch docs reading need cherrypick commit branch makes sure website decoder knows updated error codes ideally change docs serve master stable release write changelog open add release notes format earlier make sure changes easy understand friendly oneliners better pr titles make sure contributors credited like verify markup messed previewing online editor update version x update root x update export x update x x x x x see packages update list x run verify changes x build x run repo root run fast packaging smoke test x open browser smoke test x say hello world run slow packaging smoke test x go run x x go repo root run x open verify every iframe shows hello world release x run x run x go x every subfolder x nonstable versions run subfolder stable versions run subfolder x run verify things published expect fixme really automate part currently atomic stable release create github release open new release page github choose tag version pushed dropdown says existing tag paste new release notes attach files except release press publish release stable release update version reported website open change newly published version maybe still separate branch docs reading need cherrypick commit branch makes sure website knows updated config ideally change docs serve master stable release update bower clone bower repo outside main repo make sure delete js files bower repo copy react repo bower repo bower repo miss bower repo stable release try stable release reach dom team reach dom team nhunzaker jquense aweary case would like go dom fixtures block release", "num": "10710", "d": "9/2017"}, {"title": "question setstate", "body": "hi came doubt using react eg jsx getinitialstate return instrument row isselected false name mayday method thisstateinstrumentrowtrue thissetstate thisstate method thissetstate objectassign instrument row isselected true instrument object want change nested key value isselected method better prefer second sure works nested object method better change key value", "num": "10708", "d": "9/2017"}, {"title": "use react css framework", "body": "project bulma css done team going redesign bootstrap framework flow old screens continue use bulma new screens use bootstrap implement one one screens pages move create new mainlayout import css still affect whole pages question react", "num": "10706", "d": "9/2017"}, {"title": "faster diff algorithm", "body": "invitation discussion react pretty freaking awesome used quite bit one thing unfortunately react strong performance gave roots inferno preact although generally nonissue desktop mobile might bottleneck know many members team working improving bundle size believe rollup support talk heard asynchronous scheduling etc also aware trueadm creator inferno joined react team working improving point want bring library petitdom uses diff algorithm links explain provided readme seems score incredibly vdom performance tests fact beat technologies vanillajs surplusjs per benchmark snapshot petitdom beats inferno preact mithril vue angular etc course proper js framework however point trying make far faster major difference frameworks seems diff algorithm realize would mean rewrite good portion reactdom simply discussion unfeasible simply going wrong targetbottleneck let know discussion", "num": "10703", "d": "9/2017"}, {"title": "fetch htttp parameter increment timer setinterval", "body": "want function timer get number pages whenever timer runs parameter page code constructor super thisstate data page myfunc gt let myfetchoptions method get componentwillmount setinterval thismyfunc", "num": "10700", "d": "9/2017"}, {"title": "use javascript control router go", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "10693", "d": "9/2017"}, {"title": "warn available", "body": "imo warn foo option probably also warn specified empty option either one could also argue change handler called value yes component renders first option selected instead invalidnonexisting one", "num": "10691", "d": "9/2017"}, {"title": "click submit form", "body": "want request feature report bug bug current behavior click edit submit form expected behavior click edit submit form versions react browser os affected issue work previous versions react mac os chrome react tried also issue", "num": "10690", "d": "9/2017"}, {"title": "input value setstate onchange giving odd bug specified value f valid number value must match following regu", "body": "onchange handler settingstate react component changes state console giving errorwarning specified value ffffsaadf valid number value must match following regular expression dddd ee seen instances online people gotten similar error context errors appears different makes debugging difficult error happens adding input onchange function really appreciate insight component looks like import react component react class addmovie extends component constructor props super props handleonchange event gt const name value eventtarget thissetstate name value handleonsubmit event gt eventpreventdefault render return title export default addmovie", "num": "10689", "d": "9/2017"}, {"title": "incorrect function reference adding ref dom element example", "body": "want request feature report bug bug current behavior documentation appears incorrect first example button uses function reference function described example submit example change current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react na", "num": "10688", "d": "9/2017"}, {"title": "react greater safari onchange fire input boxes using sendkeys test automation framework selenium", "body": "want request feature report bug believe bug introduced version also exists latest tagged version current behavior running functional tests using selenium safari web driver using sendkeys method nt trigger onchange event input field appears safari however tested chrome safari result app nt see text form input fields case ca nt log running automation tests username field thinks empty even though text appears field current behavior bug please provide steps reproduce possible minimal demo problem via similar template rather complicated setup process nt already selenium working assuming selenium test set simple reproduce create clean react app edit appjs file include add method render function run selenium test types new input field notice console logs mention ontextchanged edit packagesjson file use react remove nodemodules folder rerun yarn install yarn start notice expected behavior notice console log instance ontextchanged character typed input field versions react browser os affected issue work previous versions react mentioned chrome effected issue issue appears introduced version reverting app back allows automation tests run could fixed would great wo nt upgrading resolved please let know provide useful information", "num": "10687", "d": "9/2017"}, {"title": "reactdom vs benchmark difference", "body": "want request feature report bug hey work got discussion fastest render cycle would namely functional components render functional components children would faster classbased component renders private function members class set prove simple na\u00efve way used benchmarkjs run reactdomrender components render output different existing domnodes current behavior tested react results tests cases relatively close terms opssec however react amount opssec varied heavily wanted know approach taken problem shows flaw reactdom suggesting anything wrong however results varied widely thought share since maybe someone would accurate numbers better way testing would actually highlight perf dev build reactdom results reacdom results production build reactdom results reactdom results current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react chrome node", "num": "10686", "d": "9/2017"}, {"title": "meta creation serverreact npm", "body": "hi react team creator npm website main goal library simplify nodejs development think modern middleware included default fullon plugins soon want one first ones based react like simplicity want make plugin similar functionality without needing cli something like getting started js load main library installed plugins automatically loaded const server require server const render serverreply render request using appjsx server ctx gt render appjsx user francisco running without library make react work local proof concept works great want implement react implementing first proof concept today event tokyo questions think think users might find easy use similarly would like invite react dev interested much little want keeping tabs actively helping develop plugin anyone interested", "num": "10678", "d": "9/2017"}, {"title": "wrong ssr diff warning due non lowercase attributes", "body": "want request feature report bug bug current behavior got warning client side hydratation react tree contains mixed case attributes svg ones expected behavior warnings difference server client attributes versions react browser os affected issue work previous versions react react worked seems happen attribute name put lowercase set set removal done lowercased attribute stays set got wrongly previous warning", "num": "10672", "d": "9/2017"}, {"title": "build indexhtml point static static", "body": "build indexhtml gets css js files root forward slash srchref running indexhtml local remote server nt work app root folder throws error required files correct path relative way project sub folder app grab folder content true react", "num": "10668", "d": "9/2017"}, {"title": "multiple modules names differ casing", "body": "version react rc install react cra", "num": "10667", "d": "9/2017"}, {"title": "find information react", "body": "gaearon want know beta", "num": "10663", "d": "9/2017"}, {"title": "difference yarn npm", "body": "", "num": "10662", "d": "9/2017"}, {"title": "react nt correctly rerender dynamically created components added via state", "body": "want request feature report bug believe reporting bug current behavior dynamic tag named const element attributes parsed correctly tag name wo nt resolved way react component thus wo nt rendered current behavior bug please provide steps reproduce possible minimal demo problem via similar template click svg box tag appears svg dom attributes looking like html dashes instead camelcase expected behavior change shapetag circle things work intended another circle appears versions react browser os affected issue work previous versions react bash ubuntu windows chrome", "num": "10659", "d": "9/2017"}, {"title": "bfcache ssr form elements", "body": "want request feature report bug bug current behavior let say start filling form input type text select element click link press back button browser backforward cache kick change initial value form elements get value back however react nt account component controlled tried reproducing behavior jsfiddle react latest react next luck bfcache nt kick without ssr expected behavior expect react triggering event replicate actual form value versions react browser os affected issue work previous versions react react chrome using following hack materialui comes issues instead tried simulating change event suggested stackoverflow nt work anymore going disable bfcache", "num": "10657", "d": "9/2017"}, {"title": "set property nexteffect undefined", "body": "want request feature report bug bug current behavior loading page produces error set property nexteffect undefined current behavior bug please provide steps reproduce possible minimal demo problem via similar template unable replicate bug isolation however seen live page clear without knowing react internals uses tried using etc please advise plausible test case scenario create test expected behavior error versions react browser os affected issue work previous versions react react chrome note important google chrome works otherwise fetch google work either ie pages indexed eg see discussion", "num": "10656", "d": "9/2017"}, {"title": "picture srcset error", "body": "hi idea fix error triggered srcset picture attribute component jsx import react react import link reactrouterdom import observer inject mobxreact import lpimgxlarge assetsimagesexamplejpg import assetsimagesexample inject store observer class extends reactcomponent render return lpimgxlarge alt react json react reactdom reactrouter reactrouterconfig reactrouterdom help", "num": "10651", "d": "9/2017"}, {"title": "reactchildfibercoerceref like undefined ref component", "body": "want request feature report bug bug current behavior coerceref reactchildfiber accepts refnull component typeof ref undefined borks expected ref function string current behavior bug please provide steps reproduce possible minimal demo problem via similar template could fixed either coercing ref null undefined also testing undefined expected behavior treat typeof ref undefined ref null versions react browser os affected issue work previous versions react", "num": "10649", "d": "9/2017"}, {"title": "interactive documentation jsx", "body": "interactive version jsx depth article got nice traction today hacker news interactive snippets powered klipse plugin author plugin evaluation done client side server involved would consider trying klipse plugin official react documentation", "num": "10646", "d": "9/2017"}, {"title": "eifjccgigekurdbfdijghgfbdhbhticgjvcfkjhfjcbj", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "10639", "d": "9/2017"}, {"title": "remove performwithpriority scheduler", "body": "nt actually use anywhere let remove", "num": "10637", "d": "9/2017"}, {"title": "question state object setstate", "body": "suppose objects maps different dom components following coding practice helps react setstate save work practice thisstate allobj one true two true three false four true updatestate val key var tmpobjthisstateallobj tmpobj key val thissetstate allobj tmpobj practice thisstate one true two true three false four true updatestateone val thissetstate one val updatestatetwo val thissetstate two val", "num": "10636", "d": "9/2017"}, {"title": "setstate", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "10635", "d": "9/2017"}, {"title": "warnings use consolewarn", "body": "want request feature report bug bug feature current behavior warnings logged consoleerror current behavior bug please provide steps reproduce possible minimal demo problem via similar template using react rc behavior come every warning react logged far expected behavior warnings logged consolewarn way actually filter output console distinguish real errors warnings versions react browser os affected issue work previous versions react react rc chrome", "num": "10633", "d": "9/2017"}, {"title": "pattern parent initiated fetch child data", "body": "performance reasons child element whose data stored state state instead passed hierarchal chain using callbacks passed props comes time action parent element dictates need data correct pattern fetching child use refs call childfetchdata method via saved reference change prop flag causing child call prop callback data", "num": "10632", "d": "9/2017"}, {"title": "update use new package", "body": "want request feature report bug stop throwing warnings used recent react nt tested manually seems like throw using old style getting react directly also package listing dependency current behavior probably throws warning least models outofdate syntax wo nt work deprecate current behavior bug please provide steps reproduce possible minimal demo problem via similar template todo expected behavior uses package shown docs versions react browser os affected issue work previous versions react react betarc", "num": "10625", "d": "9/2017"}, {"title": "release checklist rc", "body": "ensure commits master tested facebook check part latest internal sync stable releases prefer landed week skip step really know verify npm permissions x x x x ping someone team ensure react fresh x ensure x x master green ci check recent commits x check local output matches commit list x run repo root ensure runtime dependencies match users would get x x look version range root x ensure depending specify range x run repo root miss caret x x look version range root x ensure depending specify range x run repo root miss caret x x look version range root x ensure depending specify range x run repo root miss caret x might change lockfile change x commit changes see x edit broken branch nt block rc fixed asap sophiebits flarnie local sanity checks repo root x run repo root x run repo root x run repo root stable release update error codes x run repo root x changes x maybe still separate branch docs reading need cherrypick commit branch makes sure website decoder knows updated error codes ideally change docs serve master see update version x update export x update x x x x x see packages update list x run verify changes x build x run repo root run fast packaging smoke test x open browser smoke test x say hello world run slow packaging smoke test x go run x x go repo root run x open verify every iframe shows hello world release x run x run x go x every subfolder x nonstable versions run subfolder x stable versions run subfolder bonus try", "num": "10623", "d": "9/2017"}, {"title": "new release checklist", "body": "current release process convoluted think agreed maintaining branches release master means breaking changes land behind flag issue documenting new masterbased release process intended exhaustive let know something missing agree deleting existing documentation point issue instead issue checklist format copypasteable specific release issues ht flarnie tip ideally automate parts potentially fixing rrm work model want cut release ensure commits master tested facebook check part latest internal sync stable releases prefer landed week skip step really know verify npm permissions ping someone team ensure react fresh ensure master green ci check recent commits check local output matches commit list run repo root ensure runtime dependencies match users would get look version range root ensure depending specify range look version range root ensure depending specify range look version range root ensure depending specify range run might change lockfile change commit changes local sanity checks repo root run repo root run repo root run repo root stable release update error codes run repo root changes maybe still separate branch docs reading need cherrypick commit branch makes sure website decoder knows updated error codes ideally change docs serve master stable release write changelog open add release notes format earlier make sure changes easy understand friendly oneliners better pr titles make sure contributors credited like verify markup messed previewing online editor update version update root update export update react version see packages update list run verify changes build run repo root run fast packaging smoke test open browser smoke test say hello world run slow packaging smoke test go run go repo root run open verify every iframe shows hello world release run run go every subfolder nonstable versions run subfolder stable versions run subfolder run verify things published expect fixme really automate part currently atomic stable release create github release open new release page github choose tag version pushed dropdown says existing tag paste new release notes attach files except release press publish release stable release update version reported website open change newly published version maybe still separate branch docs reading need cherrypick commit branch makes sure website knows updated config ideally change docs serve master stable release update bower clone bower repo outside main repo make sure delete js files bower repo copy react repo bower repo bower repo miss bower repo stable release try stable release reach dom team reach dom team nhunzaker jquense aweary case would like go dom fixtures block release", "num": "10620", "d": "9/2017"}, {"title": "browser version requirements", "body": "react list supported browser version could find browser version requirements", "num": "10618", "d": "9/2017"}, {"title": "tests totree rendered array", "body": "nt know bug wrong component render returns array fiber rendered returns first element javascript const wrap children gt children describe test gt current behavior log first element expected behavior think array elements versions react browser os affected issue work previous versions react react", "num": "10616", "d": "9/2017"}, {"title": "remove cacheinvalidating codehack", "body": "want request feature report bug bug current behavior output code building hack code includes time compilation causes whole file modified codesplitting bad caching relevant output code see lastbuild current behavior bug please provide steps reproduce possible minimal demo problem via similar template build project react reactdom development production check diff two supposedly identical builds expected behavior two builds outputs identical modifications made versions react browser os affected issue work previous versions react", "num": "10615", "d": "9/2017"}, {"title": "add module build npm package", "body": "followup tweet unpkg unpkg module support fun try using inside", "num": "10613", "d": "9/2017"}, {"title": "ambiguous documentation purecomponent component", "body": "want request feature report bug bug ambiguous documentation well feature documentation update request current behavior currently documentation purecomponent says reactpurecomponent exactly like reactcomponent implements shouldcomponentupdate shallow prop state comparison note states furthermore reactpurecomponent shouldcomponentupdate skips prop updates whole component subtree make sure children components also pure question circumstances skip prop updates whole component subtree also implicitly say implement behaviour different example returns props propagation wo nt stopped word make sure children componetns also pure would handy documentation component shouldcomponentupdate says default behavior rerender every state change props returning false prevent child components rerendering state changes prevents prop propagation effectively stops rerender cycle child components sentence sounds like two events may related implemented way prevent rerender rewording something like component state changed called rerender cycle initiated regardless parrental scu returning false point past understand correctly component rerender receives new props parent component component also rerender state gets changed component change state receives new props calling outside component expected behavior expected find explicit documentation currently sentences look like apply expected find explicit mention behaviour exactly happen return articles react components found web reformulate official rules way extends ambiguity versions react browser os affected issue work previous versions react", "num": "10610", "d": "9/2017"}, {"title": "htmldivelement nt placeholder type", "body": "edit content div contenteditablebut typereact placeholder support tsx", "num": "10609", "d": "9/2017"}, {"title": "facebook", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "10607", "d": "9/2017"}, {"title": "facebook", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "10606", "d": "9/2017"}, {"title": "support importscripts web worker", "body": "hello could explain importscripts supported web worker added replace importscripts thank", "num": "10604", "d": "9/2017"}, {"title": "proptypes validation", "body": "want request feature report bug feature current behavior proptypes checking type parameters whatever component receiving parent component current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior proptypes also check values type data receiving validation feature useful specification values also want restrict component get particular values versions react browser os affected issue work previous versions react", "num": "10603", "d": "9/2017"}, {"title": "request twoway binding helpers article improved", "body": "want request feature report bug documentation update current behavior describes deprecated feature expected behavior ideally provide reader documentation nondeprecated feature least provide explanation feature heavily discusses deprecated article provide good deal informative information twoway bindings useful react works focuses heavily nowdeprecated feature requesting page top result google uk searching react twoway binding without quotes", "num": "10602", "d": "9/2017"}, {"title": "uncaught error element type invalid", "body": "loginjs import react react import link reactrouter export default class login extends reactcomponent mainjs import react react import reactdom reactdom import browserrouter router route indexroute reactrouterdom import login componentsloginjs import registration componentsregistrationjs reactdomrender documentgetelementbyid app versions react browser os affected issue work previous versions react", "num": "10601", "d": "9/2017"}, {"title": "docs better documentation purecomponent", "body": "want request feature report bug doc update current behavior currently little section current behavior bug please provide steps reproduce possible minimal demo problem via similar template lacks indepth information using refer blogposts get sense implications using expected behavior would really better reference documentation like following example usage specifically points functionality possible override clearer explanation change reference results rerender note inline functions event handlers might rerender pure components nice info history wrt problem note prevents children depending info rerender versions react browser os affected issue work previous versions react part react happy work pr change yall think issue valid", "num": "10600", "d": "9/2017"}, {"title": "returning plain string component renders collapsed text nodes server", "body": "observed react js import react react import rendertostring reactdomserver const b gt b consolelog rendertostring c renders try hydrate get error text content match server bc client b", "num": "10598", "d": "9/2017"}, {"title": "bringing reasonreact reducers reactjs", "body": "awesome reactjs reducers similar reasonreact recently introduced also decided iterate reasonreact instead core react partially reason users partially reasonreact nature new amp less used allow us iterate exciting new apis without legacy concerns since could nt find previous talk assuming discussed internally great chat open iterate core react state management reasonreact reducers example reason type actions bumpcount toggledialog bool type state count int showdialog bool let component reasonreactreducercomponent mycomponent let make classname children gt component initialstate fun gt count showdialog false reducer fun action state gt switch action bumpcount gt reasonreactupdate state count statecount toggledialog show gt reasonreactupdate state showdialog show render fun state reduce gt let message clicked stringofint statecount time stateshowdialog reasonreactnullelement", "num": "10596", "d": "9/2017"}, {"title": "document ca nt rely react ssr patching differences", "body": "ssr loaded client side various wrong behaviors server html differs client html minimal example created repository code snippet example render css background color red server green client force difference server client html property react everything works expected server renders red background client corrects green react however background stays text changes expected probably similar behaviors example found bug conditionally rendering complete component like becomes even weird additional jsx conditional rendering would render additional jsx inside becomes server side client side see behavior website open chrome dev tools lower width get mobile view reload page see list wrapped inside another component", "num": "10591", "d": "9/2017"}, {"title": "warn unknown nonlowercase attributes", "body": "seems problematic allow arbitary nonlowercase attribute html nodes server ability keep case sensitive html nt end different client probably warn attribute known one lowercase", "num": "10590", "d": "9/2017"}, {"title": "make onoff yesno boolean attributes work", "body": "pass boolean attributes eg nt work correctly actually want specific string think also attributes want let make work could use special flagwhitelist similarly probably make valid turn currently think works master", "num": "10589", "d": "9/2017"}, {"body": "referring html link broke new website need fix asap", "d": "9/2017"}, {"body": "pushed temporary fix file", "d": "9/2017"}, {"body": "markerikson like idea tabs markers code boxes variants like latest drafts current es scripttags would nt complete overhaul also nice see differences would nt throw persons flyby perhaps explanation top react adapts preferences language nt much dictate write code gateways intimidating beginner idea actually wanted would skip sites tried push around confronted paths though want find react glancing sure would leave good impression", "d": "9/2017"}, {"body": "drcmda tabs thing last comment suggesting regards code samples yes however think overall flow docs needs guided terms user trying accomplish current experience level", "d": "9/2017"}, {"body": "another related idea would code samples docs multiple syntax variations could viewed switching tabs global option across site like plain syntax jsx syntax syntax imo good idea issue", "d": "9/2017"}, {"body": "markerikson pages liked nt forgotten ones present information want need clear unobstructed manner current react docs instance quite close four code boxes front page almost teach react amazing due javascripts fragmented nature way stretches examples ways either seem verbose unfamiliar guess expect frontpage present react leanest efficient way possible allow us see could screw binding hacks script tags fear path thing would take away site perfectly right", "d": "9/2017"}, {"body": "drcmda saying put information front page right front page toplevel menu items docs tutorial center page links get started link docs tutorial docs link leads hello world page part getting started guide nav section right several entries getting started section thoughts observations advanced guides reference sections right nav start collapsed indication inside difference get started tutorial sections overlap much actual api docs sort buried reference nav subsection bottom hello world page mentions examples use syntax points mdn nt real clear flow guidance order read things going list sections docs nav sidebar per dan tweets hn thread people many different expectations docs cover somehow simultaneously show use react dropin script tag also show use latestandgreatest notyetfinal es syntax cover whole bunch javascript basics also tell build complete applications using libraries tools nt even part react suggesting docs structured way gives reader direction contents inside docs could grouped areas based rewritten better target specific knowledge levels direct reader one topic another front would point reader appropriate starting points within docs", "d": "9/2017"}, {"body": "expected intentional bundle react publishing npm helps ensure produce smaller consistent builds regardless bundler also helps webpack reducing dependency count", "d": "9/2017"}, {"body": "gaearon got thanks", "d": "9/2017"}, {"body": "simple example tabbing works amp nt work depending case note console state error mean really sure display app", "d": "9/2017"}, {"body": "hey work", "d": "9/2017"}, {"body": "really bug much incomplete feature sidenav passive rather active would nice fix though followup list nt converted wiki github issue yet", "d": "9/2017"}, {"body": "included production close", "d": "9/2017"}, {"body": "related gets implemented think nav also sort scrollspy make apparent sub section lack already noticeable tutorial section initially clicked stays highlighted matter document", "d": "9/2017"}, {"body": "slightly proposed change moment would tightly couple sidenav yaml config files markdown content changing article title markdown adding new markdown file requires someone remember also update yaml file proposed change would require edits ensure anchor tags stayed sync ideally would like actually remove yaml files entirely sidenav generated programmatically based markdown content point would possible add section headers although love hear joecritch opinion uiux", "d": "9/2017"}, {"body": "related gets implemented think nav also sort scrollspy make apparent sub section lack already noticeable tutorial section initially clicked stays highlighted matter document always roadmap tutorial nt time add yet issue fwiw", "d": "9/2017"}, {"body": "ui perspective dig think provides focus context reason introduced accordion sidebar sections similar reason think complements well yeah sidebar generated based markdown bvaughn suggested could work although articles need document outlines sanitizing", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "anyone already working glad give shot recently working gatsby personal project think integrate plugin", "d": "9/2017"}, {"body": "thanks bringing attention", "d": "9/2017"}, {"body": "intentional change implementation detail add hook root component accomplish", "d": "9/2017"}, {"body": "hey carruthe use selector match first div", "d": "9/2017"}, {"body": "even spread app component", "d": "9/2017"}, {"body": "sorry unexpectedly broke anything carruthe mentioned implementation detail nt used though understand easier said done suggestions listed hopefully good solutions gaearon maybe add note blog post sure others relying attributes", "d": "9/2017"}, {"body": "hey haroenv thanks bringing attention happy accept help issues cc joecritch cursor color suggestions", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "know", "d": "9/2017"}, {"body": "back", "d": "9/2017"}, {"body": "nt anything new specifically events portals sort work due implemented anything new event code way works nutshell react sees event top level finds component associated events manually walks component tree triggering event handlers mimicking capture bubble phases real dom events previously subtree rendering old portals different component trees react could nt see events portal parent portals properly part react component tree parent react walks fire events cross portal boundaries", "d": "9/2017"}, {"body": "thanks info code tries using existing event system leave case anyone happens find useful bit messy typescript import react react export interface idetectexternaleventsprops component string reactevents array domevents array onexternalevent event event gt void export class detectexternalevents extends reactcomponent fields private disposetoplevelevents gt void null null private lastinterceptedevent event null null javascript content maybe including portals window know internal external unfortunately needs wrapper component attach react events needs duplicate event names dom react formats", "d": "9/2017"}, {"body": "fixed version made two fixes nt trigger events bubble portals added removes end extra empty node time close portal", "d": "9/2017"}, {"body": "nice seen events bubble portals late yesterday thx", "d": "9/2017"}, {"body": "get js class timer extends reactcomponent constructor props super props thisstate secondselapsed tick thissetstate prevstate gt secondselapsed prevstatesecondselapsed componentwillmount consolelog willmount componentdidmount consolelog mount thisinterval setinterval gt thistick componentwillunmount consolelog unmount clearinterval thisinterval render return seconds elapsed thisstatesecondselapsed reactdomrender mountnode", "d": "9/2017"}, {"body": "reports bit hard understand tatomyr report nothing prints code log please provide full code including code logging preferably fiddle github project clone suhaotian explained exactly getting expect get please provide full runnable example eg fiddle description expect see actually see", "d": "9/2017"}, {"body": "gaearon copy component pasted livejsxeditor console log", "d": "9/2017"}, {"body": "suhaotian still nt understand wrong expecting see might website editor accidentally mounts component twice causing mount unmount mount nt sound like react bug please create isolated example demonstrating react bug", "d": "9/2017"}, {"body": "willmount mount log twice", "d": "9/2017"}, {"body": "provide fiddle reproduces problem ran code locally nt see printed twice react website reliable way tell many times something printed live editor", "d": "9/2017"}, {"body": "sorry dan bad test jsbin problem", "d": "9/2017"}, {"body": "sounds great worries tatomyr need complete example", "d": "9/2017"}, {"body": "hmm nt case fiddle seems problem comes webpack settings", "d": "9/2017"}, {"body": "upload project could take look", "d": "9/2017"}, {"body": "already found problem totally fault configured webpack incorrectly", "d": "9/2017"}, {"body": "curious could share happened could help next person bumps", "d": "9/2017"}, {"body": "client bundle js duplicated nt even noticed react actually latest react update revealed problem point initially recognized issue related react update pointing existing fault", "d": "9/2017"}, {"body": "warnings fixed changing link button adding keys", "d": "9/2017"}, {"body": "yes call warnings point seeing warnings guide says plus warning explicit using thought brought attention", "d": "9/2017"}, {"body": "warning browser terminal showing eslint warnings", "d": "9/2017"}, {"body": "haroen right key warning browser developer console lint warning mention terminal depends linting toolconfiguration using agree though change question", "d": "9/2017"}, {"body": "reporting inside reactrouter repo instead threescales", "d": "9/2017"}, {"body": "think right ptomasroos think cause render array", "d": "9/2017"}, {"body": "react router support react please use recent version think support", "d": "9/2017"}, {"body": "gaearon thx let try", "d": "9/2017"}, {"body": "please share complete example reproducing fiddle github project otherwise hard fix issues", "d": "9/2017"}, {"body": "reproduce example please provide full reproducing project say browser using", "d": "9/2017"}, {"body": "ah found example still working ca nt reproduce think something combination external libraries update example find time thanks", "d": "9/2017"}, {"body": "oh copy pasted snippet empty page nt help provide example would great", "d": "9/2017"}, {"body": "rendering menu layout component isnt unmounted page changes pages currently inject params nav menu storing menu scroll position layout passing page component render sounds promising", "d": "9/2017"}, {"body": "put together code sample specific seems methods called neither frame ticks stateprop updates cause called place put export const myrenderer function let container called like", "d": "9/2017"}, {"body": "sake clarity actually really const c name gt props gt reactcreateelement name props export const foo c foo export const bar c bar export const baz c baz", "d": "9/2017"}, {"body": "want say react awesome", "d": "9/2017"}, {"body": "yes works", "d": "9/2017"}, {"body": "problem number problem string use ensure stays number warning react specifically would stop working warning react passing unitless numbers string supported feature", "d": "9/2017"}, {"body": "yes mean would nice warning reac number string without px work nt add px like string width nt change", "d": "9/2017"}, {"body": "understanding warning behavior would change changed warning unnecessary context change made perhaps sophiebits tell", "d": "9/2017"}, {"body": "thanks sens nt keep old warnings thanks dan react running twice three faster", "d": "9/2017"}, {"body": "mostly never intentionally supported minor things could always break without us realising also skips important warnings generally caught testing stage curious hear use case running production accidental switch development mode tests instead", "d": "9/2017"}, {"body": "wave use case using json test renderer power searchanalytics features rather using html using server renderer", "d": "9/2017"}, {"body": "use case much less cool iamdustan simply running production build wanted test actually building end users something different react particular strips things mode doubt production mode broken hypothetically another library could written sorts code nt work outside development mode", "d": "9/2017"}, {"body": "fair enough nt mind relaxing adding support back", "d": "9/2017"}, {"body": "hey welcome react community hope enjoying far try use issue tracker bug reports feature requests recommend checking list great support resources listed doc page get support thanks", "d": "9/2017"}, {"body": "think would make sense check mostly always make intention explicit people mean hydrate get surprised wrong place hydration nt work others mean clear render would surprised hydration happened explicit api helps make always clear expected happen case seems bit unusual", "d": "9/2017"}, {"body": "okay use check thanks", "d": "9/2017"}, {"body": "hi conference meetup generally reserve page conferences edit page", "d": "9/2017"}, {"body": "react conference gaearon event page working website react conferences held nigeria qualify", "d": "9/2017"}, {"body": "also please particular branch raise pr merged gaearon", "d": "9/2017"}, {"body": "master fine thanks", "d": "9/2017"}, {"body": "pr gaearon", "d": "9/2017"}, {"body": "thanks merging pr gaearon please see conference list reasons", "d": "9/2017"}, {"body": "gaearon look sec please event added still appear", "d": "9/2017"}, {"body": "sorry middle moving new website hopefully deployed today already", "d": "9/2017"}, {"body": "thanks lot gaearon looking old website", "d": "9/2017"}, {"body": "mobile web input box build react controlled input upgrade react mean probably issue affects well", "d": "9/2017"}, {"body": "hi gaearon thank provide issue reference glad hear one issue test ran react pass upgrade fail also try build react still work thanks charles", "d": "9/2017"}, {"body": "looking issue right thanks much instruction flarnie", "d": "9/2017"}, {"body": "sorry could please tell set local environment first time contributing react", "d": "9/2017"}, {"body": "hi thomasyimgit glad help first need fork react repo clone fork main directory able follow directions wwwreadmemd context instruction contributor guide may helpful", "d": "9/2017"}, {"body": "hi flarnie issue solved pr merged thank let know means lot first time contributing start future thank", "d": "9/2017"}, {"body": "glad help thomasyimgit look forward next pr", "d": "9/2017"}, {"body": "think make actually make highlight darker rather lighter anything want contrast parts want focus pr", "d": "9/2017"}, {"body": "get started tackle issue first time contributing react try best btw mean timeline nt see difference computer looks like computer thanks time explanation flarnie", "d": "9/2017"}, {"body": "wow sorry looks like someone already fixed around time opened issue thanks anyway volunteering thomasyimgit", "d": "9/2017"}, {"body": "giratikanon throwing something close use cases mentioned could sense check would something like following pattern work js class onlyonclient extends component static proptypes placeholder proptypesnode html proptypesstring state onclient false shouldcomponentupdate return thisstateonclient componentdidmount thissetstate onclient true render thisstateonclient return thispropsplaceholder const graphics gt text rerender html graphics etc wo nt rerender gt okay rerender idea wrap key parts post need avoid rerendered client deferring serverrendering onetime client using use placeholder bestguess height appropriate loader graphic avoid reflow improve reading experience nt really tested possible overlooking something obviousdoing something dumb", "d": "9/2017"}, {"body": "hey issue freetotake give go creating doc", "d": "9/2017"}, {"body": "krizzu give go time later weekend mind ccing branch", "d": "9/2017"}, {"body": "bug probably always wrap umd bundle iife want send pr fix", "d": "9/2017"}, {"body": "tbh never built js project since clojurescript slightest clue build process fix would necessary", "d": "9/2017"}, {"body": "imagine want change something like add case umds maybe unify every bundle", "d": "9/2017"}, {"body": "sent fix realize nt help rollup umd wrapper relies think like know tool responsible toplevel variable first place would expect rollup keep everything inside wrapper uglify add option preserve toplevel wrapper", "d": "9/2017"}, {"body": "apparently gcc", "d": "9/2017"}, {"body": "let continue discussion original issue close one reopen one", "d": "9/2017"}, {"body": "sherryer mean want click button free event handler", "d": "9/2017"}, {"body": "dom renderer one currently using allows react compute new props apply separately applying diff commit useful pausing resuming work renderers compute diff reconciliation added substantially information motivation use case", "d": "9/2017"}, {"body": "animation priority callback removed remember right already expressible existing api eg flush synchronously inside coalesced raf call custom renderers nt currently need aware priorities scheduling need provide idle callback scheduling mechanism said access methods directly exposed renderer expose user example see reactdom exposes flushsync", "d": "9/2017"}, {"body": "thanks gaearon followup questions nt mind idle callback scheduling mechanism done providing something seems noop test renderers manual managing different ways art renderer uses prebuilt please explain little reason one approach taken vs cases flag would ever want turn", "d": "9/2017"}, {"body": "yes example browsers method noop test renderers run primarily node noop renderer originally built test explore fiber reconciler extent knowledge keeps reconciler synccompatibility mode definitely turn use react future asyncprio manner bugs since set features still development", "d": "9/2017"}, {"body": "yes noop test renewers used real browsers simplest thing possible dom renderer uses browser falls back polyfill available forces everything synchronous tests always synchronous simplicity browser want eventually enable async scheduling fiber architecture however ca nt enable immediately quite ready leave disabled offer way gradually opt", "d": "9/2017"}, {"body": "haha seeing similar answer reassuring kinda know talking", "d": "9/2017"}, {"body": "lol", "d": "9/2017"}, {"body": "interesting using renderer drive animation example webgl renderer outside browser manual screen repaint via sdl something would still want like would want instead force always", "d": "9/2017"}, {"body": "would make sense use deferred callback used lowpriority work example components visible might become visible future react start working idle periods", "d": "9/2017"}, {"body": "could nt meant used body posts case markdown fixed", "d": "9/2017"}, {"body": "think trueadm saw something similar optimising performance", "d": "9/2017"}, {"body": "bit tangential kinda feel like lineheight large across board inspecting body text fontsize lineheight feel somewhere range typically better enough fits screen asis imo", "d": "9/2017"}, {"body": "thank fixed fyi relay article uses multiple elements stick one per page aesthetics amp accessibility", "d": "9/2017"}, {"body": "acdlite thanks suggestion changed felt tight case due line width see think", "d": "9/2017"}, {"body": "thanks joecritch", "d": "9/2017"}, {"body": "ccorcos work done toplevel api managing render commit phases check demo explanation acdlite get idea things might headed", "d": "9/2017"}, {"body": "notion pretty cool btw say hi surganov", "d": "9/2017"}, {"body": "interesting use case suggests redux missing feature something like argument", "d": "9/2017"}, {"body": "think thing reason would need global triggers many separate updates many components nt know component schedule callback happens redux works today calls every connected component mostly implementation detail conceptually single atomic update call provider rest changes propagated via context reason nt context uh kinda sucks asis model hook asking would callback provider redux could expose like reason want callback scheduled per action future move async different actions may scheduled different priorities callbacks may fire different times depending priority", "d": "9/2017"}, {"body": "slight tangent idealized possiblefuture version react redux head store state stored component state inside provider something like would allow react scheduler abort reorder rebase redux actions according priority nt possible today though course figure means middleware enhancers maybe fix context though necessarily blocker would still work pub sub like today eh maybe would hard pub sub asyncfriendly way", "d": "9/2017"}, {"body": "course nt really reactredux redux react thing", "d": "9/2017"}, {"body": "nt reduxsplain reactsplain acemarke", "d": "9/2017"}, {"body": "thanks guys acdlite touched things example gave simplest possible example many complicated examples require feature looking application use different places stuff like scroll things view render changing user selection user manipulation focusing elements dragged dropped onscreen clicking elements created etc understand correctly getting user focus could state redux managed component living redux world buy complicated examples like clicking dom elements scrolling elements appear would challenging handle via state actions oneoff events probably live redux action async renderering reprioritizing interesting dilemma could api like called next render called render queue empty", "d": "9/2017"}, {"body": "getting user focus could state redux managed component meant suggest point callback fire right action flushed dom second parameter provides kind like fires specific update rendered every render important world different updates different priorities next render might include update scheduled using callback guarantee effect dispatched action already flushed dom future version redux could potentially expose adding second argument whether focus state stored redux nt important", "d": "9/2017"}, {"body": "ahhh see mean right waiting callbacks complete using something similar reactivemagic state management means application might responsive could least works far implementing granular callback setstate inside redux especially pure way sounds challenging nt know components need update begin rerender suppose means way granular level implement render queues within state management layer nt mean couldnt implement global reactdidupdate waits rendering flush", "d": "9/2017"}, {"body": "nt know components need update begin rerender call every component needs update response update render pass always case today work need make work future redux works react async rendering global pretty unlikely scale besides callback rootprovidertype component described provides effectively thing", "d": "9/2017"}, {"body": "want make sure part clear reason redux triggers many calls single dispatch workaround issue changes propagate component whose returns false connected redux component subscriber store ideally call provider connected components would update via context contextlike mechanism regardless implement never want situation single dispatch causes components rerender different times get tearing momentarily inconsistent ui mostly big deal today world synchronous part synchronous batch tears noticeable async world tearing problem might hundreds milliseconds update flushed depending queue", "d": "9/2017"}, {"body": "yknow excellent point nt connected dots yet tagging jimbolla timdorr fyi", "d": "9/2017"}, {"body": "acdlite research done coordinating via explicit batches especially async react render cycle would get implicitly priorities grouping occurs along priority values think would particularly helpful coordinating sections ui avoid inconsistencies async actions concretely thinking something like would group units work reconcile dom vdom fullyrendered components would way ensure synclike behavior updates component btw saw library recently describe future reactredux forget name basically try find", "d": "9/2017"}, {"body": "curious seen lib good chance seen nothing immediately coming mind", "d": "9/2017"}, {"body": "found freactal pretty sure", "d": "9/2017"}, {"body": "acdlite see point abut tearing makes sense need way ensure two components render sync going demo pretty much every library seen uses subscribers within components otherwise nt scale well could image libraries using custom render queues enqueue forceupdates committing together way could multiple render queues run animations separate queue nt happen sync cool stuff ideas land production sounding like external library feature less like react feature talk", "d": "9/2017"}, {"body": "timdorr yeah considered something like probably would nt use batch ids say batching react done priority level also moving model priorities expressed expiration times lower priority later expiration time current time advances things increase priority eventually expire point rest work flushed synchronously group likepriority updates rounding expiration time eg low priority updates scheduled within expiration time happen start scheduling whole bunch updates right edge bucket could spill next one nt even large amount updates right edge say think redux works today action dispatched store updates state call connected components need way guarantee receive expiration time maybe explicit batch api maybe nt want encourage overbatching either could get starvation every time add something new batch takes additional work updates batch flush another problem solve redux lack commit phase synchronization phase someone calls connected components nt updated yet value get store value actually rendered screen tearing think api inherently flawed async world gets back store state provider component state use updaters comment allows us leverage react rebase actions example dispatch normal priority action high priority action really want flush twice applied later order js const initialstate log function reducer state action return log statelog actionvalue dispatch value normal pri dispatch value b high pri first react flushes b higher priority state log b later react flushes b order state log b note rebased high pri action top low pri action thanks react means getting rid stores know today along things like nt think means replacing redux markerikson nt think store important part redux reducers middlewares stay patterns likely still work might need change bit unchanged essential parts redux imo store another way saying react already really good sophisticated system scheduling ui state updates redux pattern top something replaces", "d": "9/2017"}, {"body": "hello bvaughn work", "d": "9/2017"}, {"body": "sorry missed comment actually fixed response pr feedback would like work another website task several need file morning actually", "d": "9/2017"}, {"body": "fixed via", "d": "9/2017"}, {"body": "hey bvaughn yes definitely thank", "d": "9/2017"}, {"body": "great filter issues tagged component documentation amp website looking help website specifically adding new issues label today", "d": "9/2017"}, {"body": "bvaughn sounds good", "d": "9/2017"}, {"body": "hey bvaughn work also find directory replace proptypes flow types thank", "d": "9/2017"}, {"body": "find gatsby branch", "d": "9/2017"}, {"body": "hi welcome work although want either wait merged branch suggest tackling incrementally via several small focused prs", "d": "9/2017"}, {"body": "maybe move licenses docs directory since docs directory licenses", "d": "9/2017"}, {"body": "nice catch clemmy", "d": "9/2017"}, {"body": "hi bvaughn would like tackle issue would first time contributing react likely need little direction", "d": "9/2017"}, {"body": "check branch run folder open try reproduce issue try figure breaks", "d": "9/2017"}, {"body": "hi nicbonetto sounds great sure gaearon flarnie happy help questions", "d": "9/2017"}, {"body": "new pr", "d": "9/2017"}, {"body": "found problem using package dev mode sending rendered html back client prettify seems cause error shown remove prettify", "d": "9/2017"}, {"body": "sebmarkbage would say expected", "d": "9/2017"}, {"body": "infos also issues react prettify whole html string fix prettify string returned rendertostring seems react problems generated dom prettified", "d": "9/2017"}, {"body": "sending rendered html back client prettify hey timoruetten curious use case sending prettified html client typically see people taking opposite approach sending minified html client reduce payload size", "d": "9/2017"}, {"body": "hey aweary thats absolutely true production mode sometimes need take look html send server app production mode prettify happen", "d": "9/2017"}, {"body": "far thing really real bug close issue", "d": "9/2017"}, {"body": "think reasonably legit special case could support could smart cases text node whitespace would semantic meaning would nt ignore warning case believe hydration mostly fault tolerant individual extra text nodes showing look next node try hydrate however sure need unit tests verified nt think super highpri let reopen case someone feels strongly working important get semantic meaning part right expect pr come big test suite cover whitespace edge cases", "d": "9/2017"}, {"body": "always fire reconciliation completed may trigger another reconciliation calling help", "d": "9/2017"}, {"body": "thank yes answers question triggers another also fire rendering completed relate asynchronous scheduler way detect rendering completed rendering mean entire tree including whatever synchronous processing child nodes", "d": "9/2017"}, {"body": "asynchronous rendering may potentially interrupted restarted many times whole tree ready start committing write dom trigger lifecycles", "d": "9/2017"}, {"body": "ok great thanks closing", "d": "9/2017"}, {"body": "yea going tricky implementing fiberlike reconciler less trivial specific details might get way explaining core idea", "d": "9/2017"}, {"body": "never mind case sensitive", "d": "9/2017"}, {"body": "looks like big footgun component would redownload user data every single reconciliation component tree would stuck waiting component finish downloading every time", "d": "9/2017"}, {"body": "think provide something fetch request abandon redux let project store state messy", "d": "9/2017"}, {"body": "think support single argument probably call breaking changes want send pr", "d": "9/2017"}, {"body": "unfortunately bandwidth figure right way fix furthest could get realize two batches stackbatchedupdates vs fiberbatchedupdates defined differently fiber one use", "d": "9/2017"}, {"body": "yes means support one argument happy take pr notes breaking changes intentional", "d": "9/2017"}, {"body": "gaearon made pr", "d": "9/2017"}, {"body": "impacts users running development build react issue production nuisance easy work around abovementioned change would appropriate fix unfortunately support perform work know expected reasonable fix issue", "d": "9/2017"}, {"body": "provide failing unit test clear code referring", "d": "9/2017"}, {"body": "thought super clear documentimplementationcreatehtmldocument fix unless empty string passed reactdevelopmentjs wo nt function properly edit quirk nt think unit test would fail would require test run inside", "d": "9/2017"}, {"body": "want send pr change", "d": "9/2017"}, {"body": "absolutely acceptable change", "d": "9/2017"}, {"body": "sounds reasonable", "d": "9/2017"}, {"body": "fixed via", "d": "9/2017"}, {"body": "choose cjs umd build take look last slash important example production builds", "d": "9/2017"}, {"body": "yes change url mentioned changelog release notes avoid breakage future please make sure use specific version url", "d": "9/2017"}, {"body": "clear browser need use umd builds development versions production versions", "d": "9/2017"}, {"body": "thanks", "d": "9/2017"}, {"body": "since html attributes caseinsensitive work expected js var div documentcreateelement div divinnerhtml produces divcellpadding true", "d": "9/2017"}, {"body": "yes agreed though easy way make react output attributes lowercased would canonical way format currently attributes", "d": "9/2017"}, {"body": "seems like nt matter practice although open reviewing prs lowercase anything html namespace", "d": "9/2017"}, {"body": "understand expected behaviour dom renderer nt render props recall jsx simply data structure render using would need explicitly render component using something like following jsx import rendertostaticmarkup reactdomserver gt note alternative reactdom must mount dom element nt satisfy use case kind acceptable something rendering serverside definitely anything rendered browser obviously would need bundle also rerendered internal state changes though would problem exact example since internal state", "d": "9/2017"}, {"body": "trying achieve using react component returning string instead plain function", "d": "9/2017"}, {"body": "yeah supported use case rendering child others noted plain js function would appropriate component", "d": "9/2017"}, {"body": "please provide plunker", "d": "9/2017"}, {"body": "please see change intentional library see affected far way works highly unusual believe benefits change bugs easier find outweigh downside library unconventional api stops working clear stopped calling tostring functions usually source code uncommon overwrite mean something else happy take prs mentioning prominently changelog", "d": "9/2017"}, {"body": "thanks gaearon agree nt accept functions wanted make sure nt crazy p", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "thanks ton putting list together clemmy believe broken links fixed removing prefix path markdown files adding missing acknowledgements page", "d": "9/2017"}, {"body": "bvaughn took look new deploy seems fixed except following inside docstestrendererhtml none soft links work incorrect capitalization", "d": "9/2017"}, {"body": "hm clarify soft links referring ones tried seem work", "d": "9/2017"}, {"body": "chrome", "d": "9/2017"}, {"body": "ah see broken old site good catch", "d": "9/2017"}, {"body": "fixed via", "d": "9/2017"}, {"body": "haha p", "d": "9/2017"}, {"body": "whoops sorry", "d": "9/2017"}, {"body": "sure fix right nt think works would work", "d": "9/2017"}, {"body": "ah maybe works gatsby", "d": "9/2017"}, {"body": "yeah tested every link making change", "d": "9/2017"}, {"body": "actually think showing valuable gives sense use real projects probably want control order stacked dom technique gives perhaps better way explain cc acdlite", "d": "9/2017"}, {"body": "yes definitely way get control order hand nt part portal components built updated pen adding class portalroot component point mean writing portals way current docs demonstrate must make work creating showcase like would perfectly ok seems like additional boilerplate might confuse explain especially beginning cool react extension", "d": "9/2017"}, {"body": "react logo nothing reactos logo list several projects similar logos atom pun intended think overreacting ops pun intended way think even issue better place post question would websites like ps quick search google would find article", "d": "9/2017"}, {"body": "hey sorry first time since open sourcing react someone brought practice nt seen confusion two people generally know whether looking operating system javascript library overlap two agree logo similarity unfortunate pretty obvious leap react reactor often visualized something atomlike sure find bunch projects called similarly also use similar logo nt think would fair say react treading coattails reactos react installed million times week fairly confident people installed nt mean install reactos intentional users react appreciate sharing concern hope answers cheers", "d": "9/2017"}, {"body": "reactjs reactos difference one letter reactjs almost logo reactos projects reactos irc channel every day new visitors asking helping reactjs", "d": "9/2017"}, {"body": "answer concern resolve name logo confusing lead confusion future definitely issue overreaction point chosen react name atom logo obviously inspired consciously subconsciously previous exposure reactos logo otherwise much coincidence confusion started point atom logo paired react name one element might acceptable starts become mere coincidence regardless cause fact exists result combination confusing least fact react product sponsored facebook could lead serious issues reactos team definitely future rather seeing nonissue suggest start thinking solution need become argument expect discussion argument would become quite clear reactos name logo pairing existed long react prevent argument might wise think possible solution never said react treading coattails reactos said looks project treading coattails reactos certainly look way due pairing logo name unlucky would choose logo name similar certainly mistake unconscious one suggest could quite serious issue future given reactos aims de facto open source replacement windows therefore need give thought resolving projects sake think needs resolved keep civil nonadversarial would suggestion reactos team community friendly group people open ideas please aware reactos team formally raised issue people coming reactos forums commenting may simply best interests reactos project mind remind community project like trying friendly possible order deflect naturally defensive responses think need look prevent problem becomes one edit nt think close one feel like right thing seem rather arbitrary spirit friendliness discussion please reopen provide another location open discussion continue fruitful nonconfrontational sense", "d": "9/2017"}, {"body": "reactos irc channel every day new visitors asking help reactjs telegram group", "d": "9/2017"}, {"body": "reopening continue discussion since seems like answer satisfactory", "d": "9/2017"}, {"body": "regardless cause fact exists result combination confusing least trying say never experienced confusion search reactos issue tracker match two threads saying dismiss concerns much appreciate friendly attitude problem onesided context exactly people get confused could share examples happens understand tough irc chat unlike website less information convey think anybody would mistake projects looking websites single letter easier miss channel list even use irc actively anymore perhaps remove mention website would helpful perhaps could also way highlight clearly reactos channel operating system like mention pierre schweitzer represent reactos reached us years ago agreed renaming either projects realistic solution would love hear specific suggestions improve arrive mutual understanding thanks", "d": "9/2017"}, {"body": "renaming either projects realistic solution able change logo react js", "d": "9/2017"}, {"body": "able change logo react js would fair community logos share shape design logos easy recognize since describing specific issue irc channel changing logo would change something specific problem", "d": "9/2017"}, {"body": "thankyou reopening issue appreciated discussion continuing project use name logo combination affects reactos project future examples adverse affects nt really come point reactos trademark reactos user react word atom logo want assert rights namelogo combination prevent confusion ensure rights subverted another project could claim ownership combination discussion continues sure may comment let leave open moment see discussion matures reactos communityproject team side", "d": "9/2017"}, {"body": "honest first time saw mention reactjs thought typo reactos would nt surprised considering widespread reactjs usage becoming people getting website design would think opposite reactos huh must typo reactjs imo makes bigger issue reactjs reactos least people looking reactjs help finding reactos instead separate issue reactjs reactos field similarities logo name mean want reactos used name logo much longer reactjs could sue reactjs reactjs facebook project think facebook legal team made quite blunder letting reactjs published world reactos already existed personally feel reactjs change name note last paragraph personal opinion please continue civil conversation going", "d": "9/2017"}, {"body": "imo makes bigger issue reactjs reactos least people looking reactjs help finding reactos instead never saw confusion community fact first time heard reactos sure reactjs developers nt know existence reactos never saw mention least react side nt think anyone would confuse reactos reactjs separate issue reactjs reactos field similarities logo name mean want reactos used name logo much longer reactjs could sue reactjs well nt think problem said previous comments representants reactos said renaming projects realistic solution would say case logo logos different still considered coincidence base shape atom react shape highlighted color different think facebook legal team made quite blunder letting reactjs published world reactos already existed maybe know existence reactos project first place seems logical project lot popularity least common developer network github personally feel reactjs change name changing name huge popular project like reactjs something cheap would chaotic community would say even make situation worse thousands articles blog posts stackoverflow questions belong project probably kind content left fly even confusion reactos project", "d": "9/2017"}, {"body": "react side nt think anyone would confuse reactos reactjs obviously case people going reactos irc channel andor telegram group looking reactjs help already stated thread frequently regarding potential suing reactos foundation may intending would intelligent reactjs project take fact putting potentially dangerous legal situation seriously think facebook legal team made quite blunder letting reactjs published world reactos already existed maybe know existence reactos project first place seems logical project lot popularity least common developer network github facebook legal team wholly unaware reactos allowed facebook make reactjs project public failing responsibilities researching projects exists similar names outside field business especially order prevent company placing potentially bad legal situation one primary reasons departments also github presence unlikely decent legal team looks researching potential issues wikipedia hand admittedly good location legal advice would much better quick indicator regarding whether project similar name exists reactos one linked projects wikipedia react disambiguation page place people would check considering naming software project react decade personally feel reactjs change name changing name huge popular project like reactjs something cheap would chaotic community would say even make situation worse thousands articles blog posts stackoverflow questions belong project probably kind content left fly would cause even confusion reactos project stated reactjs change name personal opinion however state changing name reactjs would much less financial burden facebook changing name reactos would reactos foundation also facebook reactjs enough popular presence moment name change would visible likely leave many people confused even considering potential stragglers looking reactjs renamed change would notably cut number people looking reactjs help reactos help channels saying reactjs must change name problem changing name much younger reactjs project personally would vote", "d": "9/2017"}, {"body": "hey seeing error message page linked element ref specified string missing argument owner set may multiple copies react loaded details seeing something different", "d": "9/2017"}, {"body": "probably message bold something easy miss", "d": "9/2017"}, {"body": "gaearon good call maybe even style redbox even easier see", "d": "9/2017"}, {"body": "error message showing really filed issue though even tried refreshing clearing cache changing error code url etc maybe caught update related react release something", "d": "9/2017"}, {"body": "brief period react launched cdn urls using docs site invalid resolved probably visited site period downtime", "d": "9/2017"}, {"body": "offical site breaks", "d": "9/2017"}, {"body": "iinsta thanks report", "d": "9/2017"}, {"body": "stateless functions could given refs even react try converting function component class component", "d": "9/2017"}, {"body": "thanks reporting issue change error message show stateless component causing issue", "d": "9/2017"}, {"body": "charlesstover thanks warnings occur upgraded nt use refs application code probably coming external modules way trace moment", "d": "9/2017"}, {"body": "null end stacktrace pointing offending component seeing null seems like bug share minimal project reproducing please", "d": "9/2017"}, {"body": "see error weird part sack trace stackframeoverlayproxyconsole render srcindexjs webpackrequire bootstrap fn bootstrap lt file typejs file exports json object even imported srcindexjs file happened updated react react", "d": "9/2017"}, {"body": "please provide reproducing project nothing discuss way reproduce", "d": "9/2017"}, {"body": "gaearon found bug lib antd reproduce need click left button", "d": "9/2017"}, {"body": "ps also using ant design library bug reported", "d": "9/2017"}, {"body": "know codesandbox works sure seems duplicate bundle causing issue provide local project reproducing", "d": "9/2017"}, {"body": "experiencing error dragsource droptarget components reactdnd upgrading project react", "d": "9/2017"}, {"body": "already said earlier comment need leave comment thread nt provide project github reproduces warning legitimate points real problem fixed either app library use trying pass ref functional component since wo nt work react warns however warning also display stack instead null end see null end message development environment messed multiple versions react reactdom bundle need fix way fix check run see one react problem remove extra one file issue library brought react peer dependency dependency see one issue remove extra one file issue library brought dependency steps issue unsolved upload project github provide link look causing thanks", "d": "9/2017"}, {"body": "gaearon issue code", "d": "9/2017"}, {"body": "look later problem antd lib", "d": "9/2017"}, {"body": "example helpful thanks fact bug look fixing warning still valid though fix bug react see pointing menuitem functional component something attaches ref", "d": "9/2017"}, {"body": "ok fix thing note said warning correct", "d": "9/2017"}, {"body": "hey biril intentional tradeoff must make number inputs really frustrating chrome safari take look updated jsfiddle gist enter input changes press input reads input changes press backspace remove input changes three change events input changes input invalid reporting changing input valid reporting reason typing fire change event enter invalid input safari reports empty input fires change event invalid number safari reports looks like nothing changed struggle see value included alert box safari reports empty string invalid numbers know user backspaced clear input provided invalid data need fine grain control inputs user data recommend using pattern attribute cc jquense aweary want make sure correct nothing provided good alternative", "d": "9/2017"}, {"body": "yeah quick test confirm fires value changes text written element similar date inputs fire change parts entered valid date parsable also confirmed safari enter select cahgne get change event eg", "d": "9/2017"}, {"body": "thanks jquense updated jsfiddle include native counterpart shows similar behavior", "d": "9/2017"}, {"body": "thanks lot makes sense reason planning go force devices pop numeric keypad focus rather usual one would better fit use case oh well", "d": "9/2017"}, {"body": "unmounting parent unmount looks like feature bug perhaps something similar work use case child element removed children list actually yet removed render result react nt unmount clones last used props sets prop child ready removed calls prop callback", "d": "9/2017"}, {"body": "wo nt make difference examples use standard class methods since class fields arrow member function declarations make use made standard yet", "d": "9/2017"}, {"body": "unnecessary", "d": "9/2017"}, {"body": "ca nt use arrow function dynamic context required better use arrowfunction syntax also make debugging hard", "d": "9/2017"}, {"body": "important issue using arrow function properties properties methods exist prototype prevents browser reusing function rendering multiple copies element copy element running different render function instead function different every time makes optimization javascript engine harder least delays point engine would want optimize even arrow function properties supported typescript babel class properties plugin recommended write everything methods exist prototype methods needs given argument jsx element property recommendation constructor creating local version shared prototype method", "d": "9/2017"}, {"body": "noted commenters technically unnecessary may also hurt performance little bit", "d": "9/2017"}, {"body": "thank everyone comments", "d": "9/2017"}, {"body": "got answer", "d": "9/2017"}, {"body": "could please submit pr", "d": "9/2017"}, {"body": "readme createreactapp repo still uses probably keep consistent stick feel free use like though thanks", "d": "9/2017"}, {"body": "shame record name share company avoid hire", "d": "9/2017"}, {"body": "laitonen nt quite get mean unmount yes invoking sequence refer info", "d": "9/2017"}, {"body": "thomasyimgit componentwillunmount last lifecycle method workflow component unmounting mean exactly component removed dom calls componentwillunmount method", "d": "9/2017"}, {"body": "please nt use alpha versions react web never meant general consumption clear exactly issue please provide fiddle reproducing react", "d": "9/2017"}, {"body": "gaearon understood gets installed default initializing reactnative project reactnative init projectname something wrong reactnative part understand hard provide fiddle since figured part app causes meaning even provide fiddlelike example basically almost entire app wanted know kind behavior generally possible something must wrong app", "d": "9/2017"}, {"body": "good news", "d": "9/2017"}, {"body": "thanks hope makes easier people like react use jobs", "d": "9/2017"}, {"body": "yes read", "d": "9/2017"}, {"body": "yes true", "d": "9/2017"}, {"body": "never mind previous comment hit enter soon try learning docs tutorial documents current version also stepbystep introduction explains every concept one one agree cheatsheet like describe would nice sure official docs would better blog post would like write", "d": "9/2017"}, {"body": "like write", "d": "9/2017"}, {"body": "go darrenlittlejohn", "d": "9/2017"}, {"body": "dam upon reflection say agree complain inconsistent documentation tried using documentation comes react proper see sufficient instead go pluralsight google youtube found frustrating would start learn syntax learn wrong syntax compared see elsewhere decide correct form new old always obvious used documentation vendor insufficient point look elsewhere typically start instead looking docs come library since looked links posted think look quite excellent approachable thank", "d": "9/2017"}, {"body": "hey artgangsta happy found react documentation helpful team puts ton attention react easy get started something documentation confusing suggestions improving feel free let us know best luck welcome react community", "d": "9/2017"}, {"body": "also add would nice could host archived versions website old versions people still look apis etc might easier switch new website", "d": "9/2017"}, {"body": "gaearon providing versioned api page could switch different major versions site", "d": "9/2017"}, {"body": "hard say anything without seeing project", "d": "9/2017"}, {"body": "code appjs webpackconfigjs file appjs javascript import react react import render reactdom class app extends reactcomponent static proptypes name reactproptypesstring render return name thispropsname const comp props gt title propsnamecomp render documentgetelementbyid app javascript var webpack require webpack moduleexports entry appjs output path dirname dist filename bundlejs module loaders test js loaders babelloader exclude nodemodules query presets react plugins transformdecoratorslegacy transformclassproperties plugins new webpackoptimizemoduleconcatenationplugin javascript resolve alias react preactcompat reactdom preactcompat", "d": "9/2017"}, {"body": "please provide full project git clone npm install unfortunately lot issue reports without published projects end invalid actually reproducing problem ask publish project demonstrate thanks", "d": "9/2017"}, {"body": "cursory glance though see nt follow instructions setting production build react gives development build default see helpful warnings preact something incorrectly might find long time causing problems need explicitly switch react production mode deploying measuring app documented link going larger react rich feature set children manipulation api handles edge cases correctly event polyfills older browsers crossbrowser support controlled inputs", "d": "9/2017"}, {"body": "project github webpack command facebookgithub speaks difference little see screenshot react preact difference still huge", "d": "9/2017"}, {"body": "result kb kb like original post looks correct note gzipping react would kb lot next version days react even smaller kb kb gzipped target lowend devices bad connections app relatively simple preact might work well care supporting older desktop browsers runtime performance correctness might want consider react ultimately suggest try stick works best experience hope helps", "d": "9/2017"}, {"body": "someone need info bundle file size react amounts combined size decrease compared previous version postgzip size difference partly attributable change packaging react uses rollup create flat bundles different target formats resulting size runtime performance wins flat bundle format also means react impact bundle size roughly consistent regardless ship app whether webpack browserify prebuilt umd bundles system", "d": "9/2017"}, {"body": "error boundaries currently catch errors coming event handlers blog post goes detail error boundaries catch errors rendering lifecycle methods constructors whole tree", "d": "9/2017"}, {"body": "thats ok error still seems rethrown resulting two errors caught", "d": "9/2017"}, {"body": "seems like discussion", "d": "9/2017"}, {"body": "might wrong think react release candidate try nt use comments", "d": "9/2017"}, {"body": "gaearon thanks suggestion using react production think good idea try rc react anyway recommended try react understand solutions react", "d": "9/2017"}, {"body": "correct react relies comments react", "d": "9/2017"}, {"body": "cc sebmarkbage gaearon looks like ol svg cares casing html nt back", "d": "9/2017"}, {"body": "please provide minimal reproducing example", "d": "9/2017"}, {"body": "nhunzaker seen issue recently ignored thinking fault react case remember correctly browser would appear errors could nt tab icon would get invalid dom property mean could tab icon wanted share appears similar", "d": "9/2017"}, {"body": "sounds right react asks always use react canonical naming camelcase even lowercase version appears work", "d": "9/2017"}, {"body": "actually wait wrong nt sound right based description could bug", "d": "9/2017"}, {"body": "filed new issue problem nt think related issue still need somebody create reproducing fiddle issue", "d": "9/2017"}, {"body": "work today share ticket created", "d": "9/2017"}, {"body": "stack overflow redux best way", "d": "9/2017"}, {"body": "redux best way nt recommend defaulting redux state management great library react builtin state management api often sufficient case always move state tree shared parent button menu passes openclose state try use issue tracker bug reports feature requests usage support question recommend checking get support thanks", "d": "9/2017"}, {"body": "nt recommend defaulting redux state management great library react builtin state management api often sufficient case always move state tree shared parent button menu passes openclose state case need relevant doc describes pattern take look section react docs", "d": "9/2017"}, {"body": "point website reproducing", "d": "9/2017"}, {"body": "gaearon thanks quick reply example", "d": "9/2017"}, {"body": "look saw suggestion using certain transformations browserify config looked like using also running gulp command changed config like tried use got error guess related use could reason need use", "d": "9/2017"}, {"body": "following troubleshooting steps warning console correct react minified properly nt turned string reason browser icon shows production icon another thirdparty library using help scout also uses react block nt load library extension correctly detects development build duplicate react issue discussedsolved", "d": "9/2017"}, {"body": "ok thanks investigating think found solution us finally", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "really need provide minimal demo nt enough go guess working fine something code maybe something causing trouble", "d": "9/2017"}, {"body": "right issue lies calling multiple setstate guarantee order called use thisstate", "d": "9/2017"}, {"body": "hey pretodor module actually old api used included react moved package people nt want migrate classes could still use newer versions react prefer api get feel free continue using since would nt make sense reintegrate api explicitly removed react going close let know questions thanks", "d": "9/2017"}, {"body": "ekfn expand want use function custom method instead object want make sure possible implement dynamic behavior imo makes sense use object instead defining null returning function", "d": "9/2017"}, {"body": "aweary apparently nt best idea simplify example null returning function using function classname common want build class name dynamically example jsx import block bemcn const b block myblock const render gt classname b would return myblock classname b title would return myblocktitle etc use inner elements base block instead really nice", "d": "9/2017"}, {"body": "makes sense idea edge cases allow functions custom tostring methods maybe could done classname really sure best call would great identify want continue support use case", "d": "9/2017"}, {"body": "yeah classname attribute think works way convert value string die trying custom attributes though sure curious special objects try convert string boolean values would ignored react understands attributes browserspecific nonstandard attributes uses functions", "d": "9/2017"}, {"body": "bemcn wrapper return strings instead functions", "d": "9/2017"}, {"body": "hrkv problem return string object work instead function support feature", "d": "9/2017"}, {"body": "write seems like explicit easier understand", "d": "9/2017"}, {"body": "tool need", "d": "9/2017"}, {"body": "gaearon actually inner elements also need final call without arguments cause returns function call chaining use library returns object first call sorry misunderstanding jsx import block bemcn const b block myblock const render gt seriouslyfluffy nt use function well", "d": "9/2017"}, {"body": "question general object valid value function nt", "d": "9/2017"}, {"body": "ca nt use chainable interface attributes like anyone use similar library would need lot refactoring update react ca nt think disadvantages calling function instead ignoring gaearon aweary", "d": "9/2017"}, {"body": "even called function would still want print warning often passing function happens due mistake deliberate eg forget call silently ignoring worse usually means bug since warn libraries nt rely anyway encourage people treat warnings errors passing nt look like solution nt quite understand advantages chainable interface suggesting simpler interface accepts variable number arguments always returns string think always possible react behavior might force api change library nt see use cases would work impossible implement think close vast majority use cases new behavior better catches bugs anyone use bemcn similar library would need lot refactoring update react released rc react behavior weeks ago publicly asked people test late change behavior anyway library first use case relying custom seen pretty exotic big problem encourage build codemod new api wo nt migrate hand change apis facebook sorry nt helpful hope see unusual chaining mechanism possible expose different hopefully ergonomic way", "d": "9/2017"}, {"body": "since warn libraries nt rely anyway yeah case pretty ignoring silently nt quite understand advantages chainable interface suggesting simpler interface really need explain different interfaces good fun deffirernt cases big problem encourage build codemod new api thanks suggestion good practice nt use problem personally case still would prefer changing api thanks anyway", "d": "9/2017"}, {"body": "tried latest version react", "d": "9/2017"}, {"body": "yes tried nt work properly safari tried works wed sep dan abramov notifications githubcom wrote tried latest version react receiving authored thread reply email directly view github mute thread", "d": "9/2017"}, {"body": "safari version using please provide enough details", "d": "9/2017"}, {"body": "yes tried nt work properly safari tried works ok got confused initial report specify version broken read thinking broken understanding correct using desktop safari version error happen react error happens react", "d": "9/2017"}, {"body": "yes correct using safari thank wed sep dan abramov notifications githubcom wrote yes tried nt work properly safari tried works ok got confused initial report specify version broken read thinking broken understanding correct using desktop safari version error happen react error happens react receiving authored thread reply email directly view github mute thread", "d": "9/2017"}, {"body": "sounds lot like bug fixed work get unminified stack trace", "d": "9/2017"}, {"body": "toshisugano using packages always version even patch releases version codepen running version packages verified issue occur safari updating confirm fixes issue", "d": "9/2017"}, {"body": "yes working thank much wed sep brandon dail notifications githubcom wrote toshisugano using reactdom react packages always version even patch releases version codepen running version packages verified issue occur safari updating reactdom confirm fixes issue receiving mentioned reply email directly view github mute thread", "d": "9/2017"}, {"body": "want report bug please fill questions issue template deleted posting single line error message enough information help said sounds like importing try use issue tracker bug reports feature requests additional usage support questions please refer get support list helpful resources", "d": "9/2017"}, {"body": "sorry forced abandon react behavior counterproductive please refer answer license faq explaining react license anything add create issues already created three ban repository", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "sorry legal discussion repository please stop creating new issues see reply", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "also hurt react licence xx", "d": "9/2017"}, {"body": "please stop creating issues see reply", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "wish company small enough fb never find", "d": "9/2017"}, {"body": "react excellent js framework must give pity community also give like wordpress aweary hear something react community could leave issue open two days", "d": "9/2017"}, {"body": "wish facebook purchase alibaba feel free use react", "d": "9/2017"}, {"body": "open issue maybe could open two days", "d": "9/2017"}, {"body": "please stop creating issues see reply", "d": "9/2017"}, {"body": "good idea like reactnative provide learning materials faq answer doubts", "d": "9/2017"}, {"body": "markerikson outside redux js syntax react router common questions seem come reactiflux looking many non straight react questions think faq section could valuable looking surface right questions", "d": "9/2017"}, {"body": "drop note reactiflux later today especially see mods ideas yes lot faqs see nt necessarily react exactly come enough related enough worth trying answer top head section ajax calls make call point common libs make call constructorcwmcdm section method binding necessity approaches function passing references difference passing reference function calling pass parameter function handler faq function called whenever rerender stuff think", "d": "9/2017"}, {"body": "would love see something like directly react documentation acting quick reference need due react highly unopinionated nature great use small reference different styles approaches people building react apps component level way philosophies architecture well help people new react accomplish everyday tasksget pitfalls imparted full understanding going behind scenes ideas questions could apart faq section styling css difference inline styles css ways javascript animation react build animations using react section common performance issues regarding state updates section state exactly ordered state updates difference passing object function section architecture nt need comprehensive acts outline recent developments community found building react years without giving side certain style recommended way organize react application file structure commonly used strategies make transition react component libraries section react internals virtual dom difference shadow dom react new reconciliation algorithm react foresight answers faq future best cautious pointing one method particularly superior another unless antipattern course due many numbers ways one build react differentiating costs benefits way common antipatterns sounds like could section perhaps though could entirely wrong thought mine", "d": "9/2017"}, {"body": "satiewaltz yup totally agree basically approach tried take redux faq enough info answer question lay options pointers resources", "d": "9/2017"}, {"body": "learn academy jsreact bootcamp moment contribute writing way happy nt know expertise yet knowledgable topics certainly edit clarity forth", "d": "9/2017"}, {"body": "darrenlittlejohn would great get perspective struggled learning react anything looking back moment faq section might cover would help confusion", "d": "9/2017"}, {"body": "thanks detailed report darthcheney cc nhunzaker jquense jquense dealt clarify whether isis nt expected also noticed change events fire keep toggling stop dispatching events issue already aware", "d": "9/2017"}, {"body": "hey opr known limitation controlled number inputs check information thanks", "d": "9/2017"}, {"body": "indirection significantly slowing development builds react hooks particular missing", "d": "9/2017"}, {"body": "indirection significantly slowing development builds react could please explain hooks particular missing added custom hook onstatechanged pull request working adding correct wrong think react relies hooks display different warnings really want pick work want understand work stopped actually work", "d": "9/2017"}, {"body": "oops right think decided keep rendering always warn coerce string intentionally", "d": "9/2017"}, {"body": "gaearon thanks hint make sense update post", "d": "9/2017"}, {"body": "yes please", "d": "9/2017"}, {"body": "clear would like rendered single line multiple lines rendered single line replace tag code", "d": "9/2017"}, {"body": "rtsgit rendered multiple lines", "d": "9/2017"}, {"body": "could add css style outer div join array new line character like", "d": "9/2017"}, {"body": "cbpetersen thank nt want use css", "d": "9/2017"}, {"body": "thank nt want use css need use sort block element else would browser know render new line basic text standard always render text inline element requirements really mean additional css styling block elements could go route reason named", "d": "9/2017"}, {"body": "try use issue tracker bug reports feature requests usage support question please refer get support list helpful resources mentioned need either use css block element react special behavior around multiline text", "d": "9/2017"}, {"body": "cc acdlite case bug known checked", "d": "9/2017"}, {"body": "fixed weird bug moving section top file nt know one broken component causes problem described", "d": "9/2017"}, {"body": "question react modules difference two imports one named import default import since using named export named import works case see explanation hope helps", "d": "9/2017"}, {"body": "gaearon fact wrapper something asynchronous like reactcomponent function works cases using default named file exports component default file inside components folder exports component specified example components using additional exportfrom statements transpiled transformexportextensions understand problem one components exported file broken somehow one thing helped moving broken component export bottom file also rewrite better understanding", "d": "9/2017"}, {"body": "provide sample project", "d": "9/2017"}, {"body": "gaearon make sense problem specifically project likely made error project structure provided everything work flawlessly update nt know exactly es modules work hood probably export order file important situation", "d": "9/2017"}, {"body": "unfortunately hard say anything conclusive without seeing whole project dozens ways something misconfigured", "d": "9/2017"}, {"body": "closed issue publish project files ca nt really help problem find error causes bug definitely report", "d": "9/2017"}, {"body": "might also circular dependencies could explain imported value changes apparently case react bug", "d": "9/2017"}, {"body": "treating open source abysmal state underlines facebook continues abuse concepts invented public domain chose use preact using preactcompat anyway", "d": "9/2017"}, {"body": "response moving vuejs sooner companies sooner worries non issue", "d": "9/2017"}, {"body": "please trust area hard without legally endangering company harming future ability open source libraries like react post adam wolff manager manager clarification legally share current moment also previously worked publishing faq sure read addresses several misconceptions give sense hard publish statements took several months internal discussion analysis interested thirdparty posts personally found analysis fair helpful need make clear author represent facebook context around fb picked license time perhaps automattic post implies problem license perception license understanding well however please note first person bring get bombarded questions misunderstandings license every day getting point days actively impeding technical work spoiling weekends filing issues making worse contact adam wolff specific concerns might able help close lock github issues see previous discussions turned practice github issues persuade company need extra legal protection constantly battling meritless lawsuits potential costs going billion dollars past finally would like highlight react vanity project unlike many companies facebook open sources core pieces infrastructure comes increased legal risk many companies able facebook mostly thanks license sad people use react whether companies engage offensive patent litigation scared fud still thankful part move industry forward", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "hey jayenashar tell nt reactspecific issue react nt change behavior looks like rendering simple component couple event handlers registered since try reserve issue tracker bug reports feature requests nothing indicating react contributing issue going suggest refer get support doc page list resources get help usage questions like thanks", "d": "9/2017"}, {"body": "thanks look aweary tips trap change could chrome bug seems happen thought react saw lines code react listen save though nt know purpose saw comments future scroll position restored nt seem react yet post stackoverflow well", "d": "9/2017"}, {"body": "ah nevermind running assumption chrome bug found fix still ca nt make minimum test though change url using history api scroll page finishes loading chrome restores position even though page scrolled nt happen user scrolls scroll done js", "d": "9/2017"}, {"body": "quite understand sandbox interpret tell appending rather replacing see single child bye many", "d": "9/2017"}, {"body": "start rendering wrapping border show boundary component done render portal picks renders see rendered inside inside borderboundary hi bye expectation clear replace bye", "d": "9/2017"}, {"body": "ooh see mean think support rendering portals dom nodes already content managed react like container already react children expect work probably clear warn case sure", "d": "9/2017"}, {"body": "sure expectation honest think work similar replace content slides explore problems solved totally misusing portals", "d": "9/2017"}, {"body": "think behavior makes sense portals still mounted react application still owns container unlike case toplevel render essentially tell old application stop running consider component somewhere expect render saying expect portal child render alone parent calls rerenders render clearly says child actually child different expect overwritten win happens refs sounds like worms single react application two different components interfere dom would make sense disallow rendering portals children managed react restrictive version could look like js class parent extends component portalcontainer documentcreateelement div componentdidmount portalcontainerid hello thisdivappendchild portalcontainer render return hi function child return createportal bye documentgetelementbyid hello allow mount portals reactmanaged nodes would minimal possible implementation honest actually like clear happening bounds parent exits react data flow leaf similar dom manipulations leaf ref children benefit strict approach like never lies true leaf component leaf children explicitly managed manually problem claims render something really dom really wanted clear children explicitly threading relevant state either via props via sideways subscription system think", "d": "9/2017"}, {"body": "less restrictive version let render react node empty js class parent extends component render return hi function child return createportal bye documentgetelementbyid hello probably less annoying overall warn attempt render children let forget happen dynamically first children portal child created normal child appears might miss situation later multiple portals rendering node could become really confusing way trace one comes would prefer forced completely get reactland creating portal container", "d": "9/2017"}, {"body": "saying expect portal child render alone parent parent calls setstate parent rerenders render clearly says child hi actually child different expected using portal overwrite parent rendered even parent calls setstate nothing happens parent nt control child anymore render totally lies overwrote sounds like worms single react application two different components interfere dom would make sense disallow rendering portals children managed react absolutely agree really like example given solves problems tackling looks explicit time less restrictive version let render react node empty let forget happen dynamically first children portal child created normal child appears might miss situation later nah difficult explain works differently first time render subsequent times good would prefer forced completely get reactland creating portal container totally makes sense ps thanks taking time correct silly experiments going close issue", "d": "9/2017"}, {"body": "let keep least add warning conflict maybe get restrictive throw like hear sebmarkbage thinks", "d": "9/2017"}, {"body": "sure", "d": "9/2017"}, {"body": "little surprised issue unless misunderstanding something worry one portal rendering dom node assumed append currently sure problem pain track whether dom node already portal host probably common portal scenario rendering documentbody workaround would append new container documentcreateelement render urgh", "d": "9/2017"}, {"body": "issue two portals rendering one node portal rendering node already managed regular react component", "d": "9/2017"}, {"body": "ah gotcha thanks", "d": "9/2017"}, {"body": "see also discussion", "d": "9/2017"}, {"body": "discussions might translate nondom environments might equivalent", "d": "9/2017"}, {"body": "portal implementation agnostic pass second argument long valid container ie thing top level render dom dom node environments could anything top level render container could", "d": "9/2017"}, {"body": "reason function arg approach nt used see suggested discussed recommendation use guard", "d": "9/2017"}, {"body": "gaearon yes nodeview objects would translate naturally environments idea string argument might rely environments capabilities query view hierarchy specified selector exists dom equivalent implementations might exist outside dom might affect proposal far isomorphic solution concerned", "d": "9/2017"}, {"body": "idea string argument might rely environments capabilities query view hierarchy specified selector exists queryselector dom equivalent implementations might exist outside dom thysultan would selector dom renderer string could signify target renderers would renderer determine resolve target based string inherent coupling dom", "d": "9/2017"}, {"body": "released", "d": "9/2017"}, {"body": "nested object update like gets little tedious would recommend use object spread syntax available babel plugin enabled default create react app seems pretty readable still like use one many helpers like updeep immutabilityhelper update nested objects without mutation", "d": "9/2017"}, {"body": "general solution would recommend first approach mutation invoking setstate forceupdate alternative instead recreating new immutable object objectassign spread operator immutable approach non trivial implement deep property update dynamic deep nested objects like comments tree similar ui also regeneration ancestors objects including copying items arrays would decrease js performance compare single property assignment", "d": "9/2017"}, {"body": "way look like two way binding redundant two way binding setstate", "d": "9/2017"}, {"body": "creates dependency course loved using w react const r require ramda const newinstrument rassoc row rmerge instrumentrow isselected true instrument", "d": "9/2017"}, {"body": "seamlessimmutable", "d": "9/2017"}, {"body": "sure css thing react normally", "d": "9/2017"}, {"body": "hey congkhuong try use issue tracker bug reports feature requests usage support question recommend checking get support", "d": "9/2017"}, {"body": "aweary sorry", "d": "9/2017"}, {"body": "one thing unfortunately react strong performance gave roots inferno preact although generally nonissue desktop mobile might bottleneck point want bring library petitdom think post might conflating two different things initialization time update virtual dom time regarding initialization time yes react ships code internal testing minor improvements get slimmer libraries ymmv depends target devices bandwidth size application expect get better future browsers becomes compatible less need polyfill features like events support many large apps bit conservative removing polyfills gradually still differences initialization time bundle size anything related diffing regarding update time seen research would demonstrate considerable difference using libraries versus react real applications benchmarks similar one linked notoriously easy fool quoting author one best benchmarks kind benchmark games nobody take seriously numbers benchmarks many cases optimizations appear good benchmarks negative effect real apps since different structure sure trueadm share experience effect research vast majority time spent applications built reactlike libraries lies application code wish optimizing diffing algorithm fruitful anything winning benchmark match experience library code small fraction executed code real apps least scenarios looking code spent components rendering lifecycles abstraction cost spending efforts two areas reducing cost component abstraction experiments compilation techniques better prioritization interleaving io rendering improve perceived performance work progress share find something works well said summarize findings novel approach love hear", "d": "9/2017"}, {"body": "gaearon planning improve react performance future hope help react effective tool admire great work done react", "d": "9/2017"}, {"body": "always working perf issues seeing application code library code", "d": "9/2017"}, {"body": "thomasjeepe first benchmark really bad measuring vdom diffing overhead simple test cases easily implemented vanilla js benchmark implementations optimized make sure perform diffing little possible one thing unfortunately react strong performance gave roots inferno preact last time checked preact slower vdom diffing point want bring library petitdom uses diff algorithm links explain provided readme seems score incredibly vdom performance tests worked first vdom implementation also tried different lcs algorithms need find lcs keys unique among siblings better ways solve problem main reason faster alternative vdom implementations different feature set react features petitdom nt noticeable impact vdom diffing immutable virtual dom nodes implicit keys key namespaces children nodes deeply nested arrays wo nt key collisions component lifecycle", "d": "9/2017"}, {"body": "alright got attention fully understand difference start time updating time diffing algorithm influence whatsoever startup time handled via extensive tree shaking ways minimizing code size andor startup computation done start time localvoid reason said preact startup time yes diffing dom versus vdom disadvantages seems slower preact case larger feature set definitely large influence hover nt mean react ca nt steal optimizations libraries although curious immutable virtual dom nodes entail vdom nodes seems inefficient doubt gaearon ok let explain original intent post purposes want build web application mobile fps animations declarative library like reactmotion order handle animations ones ca nt handled via simple css means need fast patching concern react scheduling handled fiber render complex animations means little overhead possible becomes scheduling issue one thing occurring regular situation regular situation user presses button x nice animation occur nt stutter means smaller patch overhead solved something like fiber concern looked around saw inferno preact bobril vdom surplus also vdom petitdom author novel approach uses certain diff algorithm described paper scores among best vdom libraries using information considered overhead patching dom significantly lowered taking certain approaches nt react js take points obviously benchmarks easy fool nt always represent real world cases surplus skips diffing step using mobx style state compiles pure updates dom many libraries nt real world use measure incorrect statistics updating often fast however trying optimize seems much relevant benchmark todo list although still might far anyways viewpoint post regular use case rather areas diffingpatching important animation patching makes difference vdom library use course technically really really wanted best performance could go gsap nt declarative integrated reactmotion closing point reason brought petitdom library nd diff algorithm sort bottleneck diffing algorithm perhaps algorithm could increase speed whatever else bottle neck components maybe trueadm improve knows inferno bottle neck something else maybe improved end want faster react", "d": "9/2017"}, {"body": "although curious immutable virtual dom nodes entail objectfreeze vdom nodes seems inefficient doubt means reuse hoist virtual dom nodes petitdom mutates vdom nodes stores reference dom node vdom nodes", "d": "9/2017"}, {"body": "concern react scheduling handled fiber render complex animations means little overhead possible becomes scheduling issue one thing occurring regular situation interestingly become scheduling issue experience perhaps larger apps example facebook lot ajax callbacks firing interfere video player even optimize hell diffing bump problem scheduling sooner later particular animation part larger app worked many different teams use case still interesting us stress test react update model best way make something faster yes maybe diffing could faster want make use case work well might best way escape react usual model comparing leaf elements minimal work possible ie even compare things know dynamic something inferno explored templates separate static dynamic yet really make big difference dynamic applications experience component abstraction always components middle even optimize leaf node comparisons still got ta go components render optimizations host nodes work well contiguous blocks components get way looking compilation techniques like first make component inlining work end larger contiguous blocks host elements avoid diffing using bytecode similar glimmer hope makes sense sorry came across dismissing idea mean making diffing faster use cases marginal improvements important apps seems like marginal improvements beat systematic issues coming nature flexibility react allows trying address systematic issues instead basically trying cake expressive jsbased components eat efficient corner cases see goes", "d": "9/2017"}, {"body": "hi thomasjeepe author petitdom want add petitdom perf benchmark due nd algorithm even slows things case petitdom diff process split mains phases preprocessing optimizations detect common prefixsuffix simple edits find contiguous lcs linear time run nd algorithm succeed number iterations switch hashmap based approach benchmark nd phase hit create x rows called successively need replace old rows new ones means sequences totally different triggers worst case nd max value process detects nd ca nt find edit path certain threshold fixed actually switches case hit algorithm dont really use even worse process spends time trying compute edit path switching another approach petitdom perf benchmark nt really proof nd approach think due common vm oriented optimizations monomorphism avoiding prototypes picked nd observation actually virtual dom implementations seen start building hashmap old sequence optimize vnode lookup comparing old new sequences say vnodes changed say build hashmap entries start comparing nd algorithm nt use hashmaps cost terms timespace proportional much differences sequences parameter makes suitable diff potentially large sequences differences said need examine pertinence assumptions often encounter sequences elements vdom application experience typically encounter deep trees instead large sequences ie trees much children generally deeply nested building large hashmaps costly may think real impact observation measuring things vm engines really surprise doubts base assumption running time nd predictable depends output parameter difference input sequences perf vary petitdom resolved stopping nd threshold iterations illustrates tradoeffs approach tldr still lack evidence nd algorithm makes noticeable impact perf virtual dom diffing note nt mean approach bad still evidence support actually tradeoffs otoh still think preprocessing optimizations relevant enough react fully take advantage see implicit keys localvoid nt checked think well handled petitdom diff stable meaning unkeyed vnodes preserved long keep appearing order", "d": "9/2017"}, {"body": "often encounter sequences elements vdom application experience typically encounter deep trees instead large sequences ie trees much children generally deeply nested observation well wide list usually virtualize much problem practice unless need items screen time corner case happens eg stock trading common apps though whereas deep tree easy escape death thousand cuts localize solve one place often even spans across subapplications teams mentioned compiler optimizations flatten tree area much interested", "d": "9/2017"}, {"body": "gaearon interesting suppose compilation optimization comes around best way speed diffing performance critical animation paths regular use case reduce component overhead shallower tree also remember inferno attempted go approach diffing dynamic elements via blueprints unsure changed surplus js also takes similar approach cheats uses mobx like state uses compiler span generates real dom node setting text directly maps updating dom node without diffing nt seem work functional render top approach though definitely ways go hyper optimizing area seems either manually opting blue prints compiler two ways go also regarding scheduling issue cheating moving processing websocket requests indexeddb requests web worker meaning dom thread blocking yelouafi thanks coming thread looks like misunderstood exactly petitdom targeting looking article describing algorithm saw preprocessing optimizations seriously impressed meant much faster update time usual minimal computation seems like applying optimizations engaging regular diff could lead perhaps marginal increase performance issue pointed definitely point preprocessing optimizations could come play benefit removing need move many items around however nd diff algorithm wholly nt mean increase speed proven nt applied tried instead preprocessing optimizations make sufficient difference applied optimization rest react would completely separate preprocessing optimizations would likely gaearon referencing perhaps using methods inferno trueadm could help perhaps take optimizations libraries could rewrite rust jk", "d": "9/2017"}, {"body": "yelouafi nt checked think well handled petitdom diff stable meaning unkeyed vnodes preserved long keep appearing order gt part lcs probably get correct results two dom ops remove div insert new div reuse node different position lead losing internal state something even worse", "d": "9/2017"}, {"body": "add discussion mentioned bunch times spending lot time looking making react applications faster real world facebook talk earlier year back started facebook hacked together reactdom lite incomplete version react size applied optimizations inferno possible tried realworld applications saw real performance wins startup time purely bytesize vs plugged reactdom lite popular benchmarks around time numbers looked amazing realistically speaking reason applications today slow really frameworks application code benchmarks tend couple components repeated hundreds times actions applied try benchmark applications hundreds thousands lines code containing lots async network requests images loading audiovideo streamingplaying etc see real win optimizing react diff algorithm might even make slower plenty things working make react applications faster likely involve application framework compilation future might explore compiling react applications bytecode use staticdynamic aware bytecode diffing engine rather virtual dom diffing engine knows", "d": "9/2017"}, {"body": "trueadm thanks response fully agree application side applications react handle without breaking sweat react nowhere near bottleneck want example animate fps mobile using something like reactmotion reasoning little overhead patch brought preprocessing optimizations inferno etc preprocessing optimizations diffing nt right avenue improvement situation definitely makes sense target compilation time optimizations rather react vdom implementation anyways learned lot thread thanks ton hopefully react get even faster heavy diffing animation side would awesome extremely close performance gsap awesome declarative animations", "d": "9/2017"}, {"body": "issue posing speed question faster diff issue title still diff ie application generates snapshots states sequence delta reverse engineered delta info may available application level gets lost time new desired view gets compared existing one cycles spent recovering info lost sure helps longer diffing also overhead restating lot things might changed common thing data visualization huge scene graphs masses scatter points etc immutability help large glyph arrays get mapped cells similar allow efficient update points leaving large quantity unchanging points actual diffing", "d": "9/2017"}, {"body": "regarding update time seen research would demonstrate considerable difference using libraries versus react real applications benchmarks similar one linked notoriously easy fool research vast majority time spent applications built reactlike libraries lies application code let address elephant room post written nov localvoid trueadm yelouafi aware keyed unkeyed impls split since jan yet one points addition new libsimpls passed mutationobserver sanity check upon submission ensure properly categorized perform correct dom mutations correct visual output amount gaming possible today vastly smaller past current results table much better shape agree overall conclusion rendering benchmarks meaningless iff perf bottleneck elsewhere sadly typical case though battery life always notice good algo improvements example currently almost scripting page load generates total dom nodes fast desktop chrome lot scripting small dom size almost certainly react diffing inefficiencies main offender rather overall architecture swapping preact making things async nt going fix significant degree said good see fiber moving perf mem", "d": "9/2017"}, {"body": "hey looks like question generally javascript react usage bug report try keep issue tracker feature requests bug reports luckily great places get answers question better suited issue tracker check get support", "d": "9/2017"}, {"body": "use issue tracker bugs feature requests react please refer community support resources questions", "d": "9/2017"}, {"body": "warn foo option probably also warn value specified empty option either sounds good value specified nullundef uncontrolled warn one could also argue change handler called value yes component renders first option selected instead invalidnonexisting one sounds like bad idea would interpreted user interaction kinds unintended sideeffects", "d": "9/2017"}, {"body": "sounds like bad idea would interpreted user interaction kinds unintended sideeffects yeah experience leads bad consequences well inverting data flow wrong direction", "d": "9/2017"}, {"body": "browser feature react bug", "d": "9/2017"}, {"body": "yes need close issue", "d": "9/2017"}, {"body": "please notice edit button type button attribute", "d": "9/2017"}, {"body": "weird attribute without react behaves correctly even setting type late via attributeproperty idea would happening", "d": "9/2017"}, {"body": "oh wait see problem replacing button correct type essentially type checked event dispatched end changing type thus submitting form need properly key elements", "d": "9/2017"}, {"body": "actually probably better way", "d": "9/2017"}, {"body": "jquense", "d": "9/2017"}, {"body": "stephenweaver provide information test setup version using selenium chrome safari according browser extension deprecated using", "d": "9/2017"}, {"body": "aweary yes right using last supported safaridriversafariextz actually deprecated use new one safari driver apple launching browser automation mode like private mode application suport kind browser mode stephenweaver mentioned react issue react bring us", "d": "9/2017"}, {"body": "hmm experience older safari driver fairly flaky sure input changes could break anything tho running tests older safari older driver seeing issue well anyone idea narrow bit", "d": "9/2017"}, {"body": "would helpful could get repro though know difficult due selenium setup process without difficult say might happening certainty changes made inputs pretty significant resolved number important issues issue isolated deprecated driver worst case scenario acceptable tradeoff better longterm stability", "d": "9/2017"}, {"body": "appreciate responses currently really swamped rolled back version try find time next weeks send complete demo pretty sure nt planning ever addressing issue please let know allocate extra time needed finding way around issue upgrade", "d": "9/2017"}, {"body": "pretty sure nt planning ever addressing issue please let know allocate extra time needed finding way around issue upgrade ca nt definitively say wo nt accept fix since nt know would entail yet identify fix nonintrusive nt compromise fixes already made think would consider though unlikely would include fix introduced specialcased logic driver issue sorry ca nt provide concrete answer right please ping us find time send complete demo", "d": "9/2017"}, {"body": "hey mobinni looks like running benchmarks development build react using devtool option nt meant use production running benchmarks make absolutely sure using production builds development builds contain extra checks validation skew results recommend looking resources information", "d": "9/2017"}, {"body": "makes much sense let rerun", "d": "9/2017"}, {"body": "aweary ran everything production build results way better however seems reactdom render still slower could supposed results make much sense production build reactdom results reactdom results", "d": "9/2017"}, {"body": "please publish github links nt expire accidentally get deleted come back check", "d": "9/2017"}, {"body": "gaearon sorry autoupload easier share link initially repo", "d": "9/2017"}, {"body": "gaearon aweary ran tests different machine node react beat nt know issue machine sorry wasting time", "d": "9/2017"}, {"body": "hmm understanding ran tests browser would node version matter", "d": "9/2017"}, {"body": "gaearon yeah node version really nt matter made sound important reran tests work computer runs chrome still low render sample output however macbook pro runs chrome issues render speed going bump version see happens update output maybe important chrome update pending running long time without restarted memory clog process wearing chrome could also contributed buggy numbers", "d": "9/2017"}, {"body": "like advise microbenchmarks like good way decide whether use functional components classes trying pretty useless represent real apps behave practice said catch silly regressions would good know accidentally something slow mistake", "d": "9/2017"}, {"body": "thanks advice know tests represent real rendering data naive test setup pretty quickly nt think react problem end day browser problem end case sorry wasting time", "d": "9/2017"}, {"body": "also worth checking ran tests devtools open browser extensions active influence results representative real performance consistently get better results render functional component tree x opssec runs sampled render class based component tree x opssec runs sampled render class renders functional components x opssec runs sampled fastest render class based component tree render class renders functional components render functional component tree x opssec runs sampled render class based component tree x opssec runs sampled render class renders functional components x opssec runs sampled fastest render class based component tree render class renders functional components", "d": "9/2017"}, {"body": "makes sense thanks checking case closed guess", "d": "9/2017"}, {"body": "would encourage look nextjs many nontrivial pieces good server rendering even nextjs nt solve problems", "d": "9/2017"}, {"body": "close try keep issue tracker focused bugs feature requests react hope helps", "d": "9/2017"}, {"body": "gaeron sure think nextjs server making basically two sides coin nextjs react frontend plug backend backend add frontend plugin place chat react devs similar many repos gitter email list", "d": "9/2017"}, {"body": "ignore last comment found", "d": "9/2017"}, {"body": "provide full reproducing example", "d": "9/2017"}, {"body": "fix", "d": "9/2017"}, {"body": "released fix please verify", "d": "9/2017"}, {"body": "good cheers", "d": "9/2017"}, {"body": "use yes please add", "d": "9/2017"}, {"body": "right thank", "d": "9/2017"}, {"body": "nt think related react sounds like issue build tool probably trying tell issue project folder specifically happen create folder uppercase name eg lowercase name eg way around suggest create new folder lowercase move project files make sure always lowercase name well", "d": "9/2017"}, {"body": "thanks gaearon try", "d": "9/2017"}, {"body": "release notes react rc", "d": "9/2017"}, {"body": "npm registry people publish packages npm yarn two different clients mostly compatible differences features tradeoffs sure one use would recommend go npm reason nt satisfy try yarn blog post dives motivation yarn created hope helps", "d": "9/2017"}, {"body": "hey davidhatten issue setting string really want reference component remember jsx compiles calls react assumes passing string like trying create dom node like inspect dom see rendering hope clears things", "d": "9/2017"}, {"body": "happen chrome error analytics system set check happens browsers", "d": "9/2017"}, {"body": "able replicate chrome phantomjs taking apart main application component component trying find exactly causing rather slow process share update get bones", "d": "9/2017"}, {"body": "bit context stack trace development mode", "d": "9/2017"}, {"body": "step take note variable values eg whether null first whether somehow undefined etc", "d": "9/2017"}, {"body": "finally figured whats going simple case reproduce issue js import react component react import reactdom reactdom import aux reactaux import browserrouter router route switch reactrouterdom class foo extends component render return foo class bar extends component render return bar const root documentqueryselector app const modal undefined reactdomrender modal root using babelruntime react reactaux reactdom reactredux reactrouter reactrouterdom redux alternatively pull repo", "d": "9/2017"}, {"body": "gaearon anything else help", "d": "9/2017"}, {"body": "take look today repro modern chrome", "d": "9/2017"}, {"body": "repro modern chrome", "d": "9/2017"}, {"body": "download old chrome", "d": "9/2017"}, {"body": "got", "d": "9/2017"}, {"body": "tip assuming using osx best thing create new osx user installing old chrome downloaded disable wifi installed go straight settings disable auto update reason new osx user two chrome versions nt play nice userspace", "d": "9/2017"}, {"body": "helpful thanks", "d": "9/2017"}, {"body": "hmm mentioned react depends collection types map set support older browsers devices may yet provide natively eg see polyfill missing something", "d": "9/2017"}, {"body": "see polyfill missing something", "d": "9/2017"}, {"body": "bug polyfill using", "d": "9/2017"}, {"body": "gaearon course tried force reuse polyfill configuration latest chrome noticed polyfill stack trace nt give second thought good detective work thank", "d": "9/2017"}, {"body": "see value passing", "d": "9/2017"}, {"body": "hi gaearon thank answering got addendum replaced output didnt get errors result result also think wrong", "d": "9/2017"}, {"body": "ca nt really say without project reproducing", "d": "9/2017"}, {"body": "happy finally resolved issue many hours debugging googling smiley may already guessed importing images webpack works well react client side points corresponding file path application isomorphic code also ran server side since node nt support images ignore using application state error appears consolelogging appears code returns empty object looked attribute html page generated server side apparently caused react output error made realize image links html generated server side would cause many seo probelms made change variable added config file webpack use goal production could set cdn base url assets delivered throught think good solution", "d": "9/2017"}, {"body": "works case maybe", "d": "9/2017"}, {"body": "curious ending undefined ref createelement return null real ref", "d": "9/2017"}, {"body": "seems function render returns array string element render like playing type strong key props typeof symbol reactelement store", "d": "9/2017"}, {"body": "say code created array cases would", "d": "9/2017"}, {"body": "result call simplemarkdown format string react elements works fine react mixed array throwing refundefined error reactchildfiber", "d": "9/2017"}, {"body": "fixed simplemarkdown master", "d": "9/2017"}, {"body": "cases equivalent react batches setstate calls technically practice going faster memory efficient probably mutating original state object setting however also less safe recommended mutate state object inplace like would nt worry unless able measure noticeable bottleneck", "d": "9/2017"}, {"body": "react intentionally rely warnings treated errors user fact facebook show modal dialog warning may enable behaviour open source version future help", "d": "9/2017"}, {"body": "problem many developers follow advice looking fix warning see lot issue threads state something like warning development ignore fine production control display warnings least everyone board treat warning error thinking something planned handle warnings future", "d": "9/2017"}, {"body": "looking fix warning see lot issue threads state something like warning development ignore fine production library big plenty bad advice due popularity see could change except clarifying position threads like control display warnings least everyone board treat warning error thinking existing issues providing control warning display search think need get anyone board thinking ask use react disagree please frustrated app work correctly agree educate users clearly approach though", "d": "9/2017"}, {"body": "close mentioned react asks treat warnings errors emit warnings things actually need fixed code ignoring dangerous configurable warnings please track related issues linked", "d": "9/2017"}, {"body": "note eg phantomjs interprets consoleerror actual errors reasonable behavior means error happened unit tests fail due react warnings linked configurable warnings issues see months even years passed without progress front much effort logging setter ifelse whatever require particularly fair silence every react warning given fb team went conventional wisdom made nonconfigurable spend developers around world save cheers victor", "d": "9/2017"}, {"body": "unit tests fail due react warnings sounds like desirable behavior nt emit warnings things safe see warning react means bug code need fix past used consoleerror deprecation warnings listened feedback stopped deprecation warnings nt actually mean bugs code nt break tests hope rationale makes sense", "d": "9/2017"}, {"body": "spend developers around world save warnings nt exist waste time help write bugfree code particular warning noisy means poor job choosing fire give example warning causes much pain perhaps emitting wrong cases nt deduplicate instead silencing warnings let solve root problem make valuable reason nt", "d": "9/2017"}, {"body": "hi gaearon thanks answer see warning internal error react performance measurement code see something wrong normally one real bugs trigger particular warning warning error even phrase says internal error hand specimen different child array iterator unique key prop nt mean bug code something subject improvement prioritization afaict warning umbrella errors nonerrors correct categorization issues seems difficult highly subjective task meanwhile react could give developers freedom choose spend time perhaps prefix would help cheers victor", "d": "9/2017"}, {"body": "nt relevant old code repo understanding code used anywhere currently react repo source truth nt problem", "d": "9/2017"}, {"body": "longer term move source truth back ca nt expose reconciler issue", "d": "9/2017"}, {"body": "fixed", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "add note running browser fixtures well case failed review browser fixtures merging dom change", "d": "9/2017"}, {"body": "thought already ton work point much work would going dom fixtures automate publishing maybe qa people help go sophiebits ideas", "d": "9/2017"}, {"body": "aweary dan discussed bit expect changes land dom related things run dom fixtures make packaging changes test packaging fixtures agreed smoke test packaging fixtures probably good release rather redoing fixture testing hand also step sync react facebook pretty extensive manual testing internal uses react anything went sync well tested add checklist even note could point internal docs process comment search internal dexwiki", "d": "9/2017"}, {"body": "flarnie added", "d": "9/2017"}, {"body": "thought already ton work point much work would going dom fixtures would take good chunk time maybe add nonblocking defer someone else time give release sure nhunzaker jquense would happy contribute front worry since currently nothing place enforces dom fixtures checked dom changes merged mess forget could slip regression stable release automate publishing maybe qa people help go would great wonder could use something like danger watch changes domrelated files add note reminding us check published fixtures merge talk another time though", "d": "9/2017"}, {"body": "added last note reaching folks", "d": "9/2017"}, {"body": "best thanks creating excited one source truth visible place work towards automating thoughts tag clear another bug report andor want include step updating seems like may covered ensure runtime dependencies match users would get want update know ideally updating regularly since practice nt could good flag size regressions cutting release love details looks good going make clone specifically rc probably continue process lunch part done far open prs update error codes steps", "d": "9/2017"}, {"body": "want include step updating yarnlock seems like may covered ensure runtime dependencies match users would get yes thing need release rest updating dev dependencies done normal development cycle feel like updating land sync want update resultsjson know ideally updating regularly since practice nt could good flag size regressions cutting release sure although time sync usually late fix size add something", "d": "9/2017"}, {"body": "think want instead wo nt change lockfile vs bump latest version still compatible", "d": "9/2017"}, {"body": "updating based previous comment chatting gaearon sounds like want", "d": "9/2017"}, {"body": "yarn docs sounds like work right thing", "d": "9/2017"}, {"body": "note let add something verifying using", "d": "9/2017"}, {"body": "browser requirements nt changed require polyfills though general react supports compliant browsers back", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "could find past browser requirements doc could give link", "d": "9/2017"}, {"body": "react dropped support beginning last year version suggests may still work newer versions may gets unlikely new version released older code cleaned", "d": "9/2017"}, {"body": "docs link bit hidden yes", "d": "9/2017"}, {"body": "tks much", "d": "9/2017"}, {"body": "hope define definitive list supported browsers point see", "d": "9/2017"}, {"body": "familiar backstory curious eliminate merged", "d": "9/2017"}, {"body": "found lastbuild actually variable passed processenv building webpack removing solved cacheing issue least think removing hack would mitigate future bugs", "d": "9/2017"}, {"body": "ah interesting places looks like getting inlined guessing use webpack nt problem react since stack renderer going away case think htis code path stripped away uglify could confirm showing production build", "d": "9/2017"}, {"body": "yes using defineplugin processenv things inside confirm code still present production build uglifying", "d": "9/2017"}, {"body": "thanks reporting fixed master basically file wo nt shipped react already try react beta like nt think making changes", "d": "9/2017"}, {"body": "believe duplicate", "d": "9/2017"}, {"body": "ah man look thanks", "d": "9/2017"}, {"body": "circumstances skip prop updates whole component subtree next props state shallowly equal current props state treated returned also implicitly say implement shouldcomponentupdate component behaviour different example returns false props propagation wo nt stopped word make sure children componetns also pure would handy implemented today behavior exactly though may change future optimizations example call child purecomponent new state shallowly equal old state today child rerendered unless purecomponent infer child also pure future version react may skip rerendering intentionally vague nt know exactly future implementation might users avoid making specific assumptions feel existing documentation could improved please submit pr suggested fixes thanks", "d": "9/2017"}, {"body": "thank confirming findings update documentation slightly", "d": "9/2017"}, {"body": "supported react dom asking typescript support types nt owned us please try opening issue definitelytyped repo misunderstood question please respond details andor reproducible test case", "d": "9/2017"}, {"body": "acdlite thx", "d": "9/2017"}, {"body": "hi sure code means nt seem related react might want try various support channels like stackoverflowcom", "d": "9/2017"}, {"body": "sounds like asking andreoman repo bugs feature requests react library jquense mentioned recommend referring one many support resources", "d": "9/2017"}, {"body": "hi thanks issue proptypes split package please submit feature requests thanks", "d": "9/2017"}, {"body": "thankyou jquense submit provided link", "d": "9/2017"}, {"body": "please feel free submit pr", "d": "9/2017"}, {"body": "might want make shorter title", "d": "9/2017"}, {"body": "hi error message probably correct make sure link component imported defined correctly login component also try one many support avenues stackoverflowcom specific help attention try keep react issue tracker feature request focused thanks", "d": "9/2017"}, {"body": "yes please open pr suggested changes", "d": "9/2017"}, {"body": "post", "d": "9/2017"}, {"body": "let move discussion new component apis react future repo great chat open iterate core react state management context holding major additions changes component api async rendering stable many new constraints quirks created async rendering would counterproductive us introduce new apis find later apis nt resilient async behaviors trueadm also experimenting react component compiler likely also influence design new api tl dr change coming right yes constant collaboration reason team including design new reducer api", "d": "9/2017"}, {"body": "related", "d": "9/2017"}, {"body": "styles patched expected intentional breaking change idea behind sites stabilize solid ssr infra place therefore things nt happen yet would spend time validating unnecessarily know going change optimization second part happen though inserted inside another parent think able provide smaller reduced example eg jsfiddle bit difficult debug fully deployed site", "d": "9/2017"}, {"body": "development mode see warning btw seeing warning", "d": "9/2017"}, {"body": "updated repo example mean code snippet js import react react export default function renderer isserver render return render isserver amp amp documentgetelementbyid root class appview extends reactcomponent render const isserver thispropsisserver return isserver amp amp class servercomponent extends reactcomponent render const styles server backgroundcolor red return class listcomponent extends reactcomponent constructor props super props thisgetlist thisgetlistbind getlist const styles el width height margin backgroundcolor blue return arrayfrom function let lt yield render const styles client backgroundcolor green display flex flexwrap wrap return happen get removed wo nt instead stays list elements get transferred surrounding removedreplaced said styles wo nt patched optimization case replace entire nt update style wai problem website make assumptions screen size might true stable method get screen size initial server rendering use newly introduced ssr streaming method get working", "d": "9/2017"}, {"body": "ah reason happens try reuse structure much possible first item div cases try reuse retains styles different tag name would patch risky rely build little infra passes screen size server separate request might overkill nt screen size server server render wrong output could lead flashes content finally restores js client app resilient way model client render initial mount server render screen size componentdidmount read real screen size nt match guess rerender setting state", "d": "9/2017"}, {"body": "also use case intentionally server render something slightly different client render affected change react well component renders feed items server render one page items time conventional prev next pagination links client render infinitely scrollable virtualized list rendering conventional paginated list server helps improve seo giving search bots actual links follow subsequent pages also ensures clients js disabled still paginate list visible flash jscapable client hydrates list visible difference pagination links typically fold work well however react reuses certain serverrendered elements without removing even though clientrendered state nt use breaks design weird unexpected ways understand generally advisable serverrendered content differ clientrendered content conscious choice made full awareness disadvantages expected slight performance penalty nt expect broken output scenario really considered unsupported react plans allow developers opt full validation hydrating server html seems like dev mode warning outright error order prevent subtle breakage slipping production change probably also called prominently release notes since could unexpectedly break existing code relies old behavior", "d": "9/2017"}, {"body": "yea definitely need prominent release note maybe separate blog post mechanism silencing warning maybe target way inform rely pretty heavily considered actual error even rely minor versions change behavior since true error begin nt throw causes even potential problems code paths differ development production really unexpected ways yea know weird reactism note hydration nt performance optimization way preserve state things like forms animations going add way suppress diff warning individual nodes least text content differences could potentially expand direct child elements node way could work around using different tag names container element", "d": "9/2017"}, {"body": "mechanism silencing warning maybe target way inform basically close eyes put fingers ears yell supervisor took another pass list component using twophase render approach recommended works well think good enough cover use case thanks guess one gotten used ignoring warning try help get word change", "d": "9/2017"}, {"body": "case use server know authorization transitions applications quickly restore part data authorized zone case patch html story thus fast switching applications", "d": "9/2017"}, {"body": "btw relied react clear dom still explicitly automatically currently nt backwards compat", "d": "9/2017"}, {"body": "sounds like action item update docsrelease notes possibly write blog post change showing people migrate code run issue", "d": "9/2017"}, {"body": "hi sebmarkbage use ssr works find front end always sync latest version keep server side code update date avoid dom element overreuse could help something finished page wish warning console cs diff amp break warning think could hook react client side render listener cs diff trigger let reload page client side maybe already sure", "d": "9/2017"}, {"body": "sebmarkbage thanks thorough answers running comments helped us understand going said honesty nt completely see considered bug hard messy ensure rendered serverside clientside equal instance component displays something timebased client clock nt millisecondprecise equal server clock eg always case seemingly random consistent items list suddenly get child div content swapped obviously everything worked around copying every piece global state server client even ensuring eg millisecond time used entire render call nt major overkill obviously using input components nt purely functional making react completely break components nt purely functional quite stretch sure kinds singletonish data time exhibit similar dynamic honesty think screen size example tarnadas nice example", "d": "9/2017"}, {"body": "eteeselink typically time based things things like time stamps text changes order items work fine since text content patched also planning adding ability ignore warning specific special case rare plausible scenario list something depends time determine order eg something conditionally pushes something top list time elapsed changes class name based time elapsing cases theoretical though nt seen one yet probably want represent kind global data state change transition anyway eg indicate alarm fired know ignore even worse case scenario nt need send state solve time based issues use virtualized time note use current time get tearing across screen even rendering client since components render exactly time end different time stamps render prevalent async rendering time render entire update longer bigger issue would data fetching backend end points return different data systems use react server rendering seriously send data along initial request anyway eg see nextjs mechanism avoids two trips backend services avoids unnecessarily hitting services ratio already data loaded might well tack end initial request pipe agree quite complex seems like ultimately best architecture reasons theory could go back model comparing everything trying patch things would make things significantly slower everyone architecture anyway reason theory could two modes however even mode still cases state text input scroll position changes unexpectedly user result inconsistent data also nt seem ideal", "d": "9/2017"}, {"body": "problems casesensitivity pose server client one encountered hydration diffing thought corrected making sure attribute checks caseinsensitive subsequent lowercasings", "d": "9/2017"}, {"body": "use custom attributes customelements custom elements eg rdf angular stuff etc way read getattribute monitoring attribute mutation lowercased would seem like works one case would nt work case eg read lowercase render uppercase work serverhydrated view view rendered client eg due update opposite scenario also problematic also known use case camelcased custom attributes since extensions encouraged use lowercase another issue add something whitelist camelcase already used invalid attribute fixing camelcase form change behavior previous ones noticed", "d": "9/2017"}, {"body": "thank explaining makes sense", "d": "9/2017"}, {"body": "could worms autosave believe autosave expects string name want behavior crossorigin okay aliasing concern neglect types string values empty string represents default example cross origin case think need assign true omit value false pass string assign value autocapitalize harder autocapitalize deprecated trouble figuring false case empty string using browser default behavior also inheriting related form tag technically none sure maybe say flag assigns string value nothing maybe hasbooleanvalue works default behavior unknown attributes flag toggles boolean value many default empty string makes yes flag toggles boolean value still need figure attributes besides deprecated", "d": "9/2017"}, {"body": "think makes sense attributes accept boolean options like attributes like accept set values require explicit value set similarly probably make valid turn currently think works master attributes canonical cases example default default etc would normalize well cases feel like approach would require users knowledge spec behavior know value would represent confusing represents one enumerated value represents none normalize think cases users already expect work add warnings could eventually stop attributes true boolean enumerations could normalize would", "d": "9/2017"}, {"body": "nhunzaker could worms imho perhaps missed much discussion afaik seems like good reason nt straight boolean attributes default true default neither set special like mapped another value like mapping boolean values implied string seems likely cause confusion users also possibility enum values added future like expected feed etc seems far preferable require strings stringattributes expected read work true boolean attributes either gone empty string curious understand want avoid whitelist specialbehavior adopt rules removes attribute strings passed asis boolean becomes empty string optionally valueless attributes ssr simple rules understand would know exactly expect reactdom times would nt depend maybe updated whitelist would nt change versions whitelist updated would work unsupported attributes obviously would need temporary workaround reactdom emit warnings cases previously handled okayish", "d": "9/2017"}, {"body": "syranide check context realize already commented approach outlined sound like thinking", "d": "9/2017"}, {"body": "aweary oh sorry yeah seems already figured imho seems like sensible approach", "d": "9/2017"}, {"body": "taking milestone let come back time decide strategy", "d": "9/2017"}, {"body": "unfortunate react really close issue could make getters nonenumerable think sure would confusing breaking change", "d": "9/2017"}, {"body": "fix issue doubt anyone enumerating reason one think would breaking change ideally warning would fire actually use either features interception proptype fns would exact", "d": "9/2017"}, {"body": "packages export factory function react calls create package maybe could wrap exported factory result update factory accept argument could apply warning right time", "d": "9/2017"}, {"body": "sure effort fix potentially introduce issues worth given imminent", "d": "9/2017"}, {"body": "would flow encourage syntax known invalid broken real modules thinking perhaps discussion another forum", "d": "9/2017"}, {"body": "hey thanks report could please test latest version react fails react rc assuming fails way could provide reduced repro us investigate downloading building full application bit timeconsuming triage seen issues webkitforked browsers may issue js implementation since react works fine major webkit browsers", "d": "9/2017"}, {"body": "hi aweary correct also issues webkitforked browser resolved issue neither resolved react react previous issues resolved issue qtwekbit nt deal well proxy objects resolve issue definition moved proxy syntheticevent generation code temporary solution problem since syntheticevent proxy type event fails called like gives error syntheticeventcall function however able fix moving following statements code solution way around make code conditional browser type nt enter code block simply skip code example referece link issue reproducible qtwebkitbrowser runs desktop ca nt even share ipbased url sorry nt find way provide reduced repro please let know need information also find release information react since resolves webkitbrowser issues confirmed end", "d": "9/2017"}, {"body": "nt think would want include explicit check qtwebkit provide nonintrusive change like resolves happy consider going close since nt supported environment feel free ping find nonintrusive solution usecase thanks", "d": "9/2017"}, {"body": "acdlite would nt sufficient rr since reducer determines whether silent", "d": "9/2017"}, {"body": "mmm see", "d": "9/2017"}, {"body": "recall correctly rr determined return type", "d": "9/2017"}, {"body": "hey msmichellegar thanks report test renderer nt actually dictate component rendered returns representation component tree tools consume including falsy attributes since consumers might want know attribute present case component rendered jest uses package format snapshot results think expected renders falsy primitives could always refer issue tracker verify hope helps", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "thanks comment though sure closed hoping hear team prompted chip throwaway let deprecate finddomnode comments think team members nt know still general feeling ought use without wrapping elements etc edit including early april sebmarkbage", "d": "9/2017"}, {"body": "say thing anyway", "d": "9/2017"}, {"body": "hey flarnie status looks like latest rc warn instead throwing generic error closed", "d": "9/2017"}, {"body": "yes", "d": "9/2017"}, {"body": "doubleyes thanks gaearon", "d": "9/2017"}, {"body": "addressed specifically prefix case", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "yes thanks lot gaearon zpao", "d": "9/2017"}, {"body": "wonder anyone accidentally relies guess way know", "d": "9/2017"}, {"body": "yeah nt think get downloads tag thinking", "d": "9/2017"}, {"body": "way marking exceptions handled would great currently hard time testing exceptions thrown components error boundaries although assert error boundaries work correctly seems impossible prevent exception thrown test framework using tape way preventing uncaught exception fail test created minimal reproduction issue something wrong setup gladly hear error boundaries conceptually optional imho whether errors get rethrown", "d": "9/2017"}, {"body": "use error boundaries display reasonable fallback application user still consider errors development testing meant used control flow want somebody introduce bug leaf component accidentally ship tests swallowed exception boundary make sense", "d": "9/2017"}, {"body": "mweststrate could nt handle though repo nt look like wouldshould make error boundary since might toplevel invariant error like edit strange reaches error", "d": "9/2017"}, {"body": "thysultan wo nt throw exception synchronously meant used control flow want somebody introduce bug leaf component accidentally ship tests swallowed exception boundary make sense gaearon really would indicate component introducing bug nt tested regardless question problem lib author create environment anymore sandbox test exceptions using error boundaries means lib author want test failure scenarios well example component throws wrongly configured specific case context lacks expected information previously lt problem test behavior probably error thrown sync could wrap prevent exceptions escaping anymore fine new default think option influence behavior missing another strategy test exception behavior", "d": "9/2017"}, {"body": "hmm pretty sure wrapping trycatch still works us throwing still synchronous maybe difference testing environment", "d": "9/2017"}, {"body": "see test real browser dom rendering nested components test utils enzyme", "d": "9/2017"}, {"body": "ah thing nt use real browsers testing nt bumped", "d": "9/2017"}, {"body": "gaearon could also apply async operations emit errors like functioncallback pattern", "d": "9/2017"}, {"body": "yeah kind subtle differences exactly reason prefer part test suite running dom subtle differences batches etc work wanted make sure irl behavior expected regards amount renderings order etc might overcautious", "d": "9/2017"}, {"body": "going close since nt supported suggest two events orderdependent registered system native synthetic", "d": "9/2017"}, {"body": "hi aweary synthetic event simulate bubble capture phases listen events toplevel lead eventstoppropagation work simulation initialization time slower dan said also react support well synthetic event react deprecated future", "d": "9/2017"}, {"body": "license headers missing build bundlesthere right", "d": "9/2017"}, {"body": "would great could add support trying combine web components react styled components create ui elements work standalone larger react application", "d": "9/2017"}, {"body": "since update reproduction investigate going close isolate issue provide clear reproduction demonstrates issue react happy help reopen need general help figuring isolate resolve issue suggest checking resources listed get support", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "since already specdefined property reflecting attribute would make sense let users utilize api react api already propertyfocused big leap would least complex change nt breaking", "d": "9/2017"}, {"body": "issue reproduced next", "d": "9/2017"}, {"body": "since root cause going close duplicate", "d": "9/2017"}, {"body": "shallow renderer implement unstablebatchedupdates anymore issue closed", "d": "9/2017"}, {"body": "ran issue upgraded react started getting warnings nt using arrays iterators definitely related plugin refs since remove either one warning disappears see plugin injects helper source refs used falls back perhaps mixing causing issues edit string refs way issue occurs callback refs", "d": "9/2017"}, {"body": "clear expected get meaningless warnings attempt use plugins development plugins must used development using development supported documented plugins pages", "d": "9/2017"}, {"body": "yep definitely clear prefer use plugins development long work found issues production faster way fair also interpreted disclaimer makes existing warning messages cryptic causes new incorrect warning messages appear guess wrong became worried api nt change nt output warnings might new underlying incompatibility", "d": "9/2017"}, {"body": "yea still curious happens love somebody could look easy fix would nice make shipping want make impression supported", "d": "9/2017"}, {"body": "well see happens nt know good way fix happens passed child eg never passed validatechildkeys nt call obviously flag remains triggering warning validateexplicitkey later somewhere sure changed surprising something broke since bypassing internal flags babel able use guess fixed plugin page mentions wo nt intentional reason could nt find git history andor nt know enough react internals know needed", "d": "9/2017"}, {"body": "issue since updating react lots packages reacttooltip one reactgooglemaps another packagejson showing", "d": "9/2017"}, {"body": "please run find package brings wrong version react puts rather please file issue project", "d": "9/2017"}, {"body": "cool thanks dan", "d": "9/2017"}, {"body": "fix module actually included anywhere file anymore may worth adding something release notes user run check dependencies said removing package seemed fix issues instantly", "d": "9/2017"}, {"body": "going update changelog bit collapse details previous beta updates", "d": "9/2017"}, {"body": "trying got line running old android browser", "d": "9/2017"}, {"body": "thanks reporting iqbalnurhakim someone look asap would guess missing transform polyfill", "d": "9/2017"}, {"body": "iqbalnurhakim released fix confirm fixed", "d": "9/2017"}, {"body": "davidfurlong provide reproducing project please bugs like hard fix without context", "d": "9/2017"}, {"body": "apologies advance place ask playing around ca nt quite get work every time seen demo provided dan abramov errors thrown explicitly trying generate typical use case binding correctly handler fairly common mistake see demo clicking button generates nt picked errorboundary however types errors caught expected eg undefined", "d": "9/2017"}, {"body": "anderssonchristian probably caused completely different nature origin types errors types errors caught expected eg x x undefined causes synchronously ie calling method react trying generate typical use case binding correctly onclick handler fairly common mistake hand async triggered component lifecycle definitely harder capture way", "d": "9/2017"}, {"body": "andarist yup makes sense event handler trigger errorboundary thing inside trigger thanks blog actually outlines missed somehow error boundaries catch errors rendering lifecycle methods constructors whole tree", "d": "9/2017"}, {"body": "note bvaughn fyi update points interest op", "d": "9/2017"}, {"body": "pretty sure sep lee benson notifications githubcom wrote rendertostream change rendertonodestream receiving mentioned reply email directly view github mute thread", "d": "9/2017"}, {"body": "render async generator sep wrote pretty sure sep lee benson notifications githubcom wrote rendertostream change rendertonodestream receiving mentioned reply email directly view github mute thread", "d": "9/2017"}, {"body": "render async generator", "d": "9/2017"}, {"body": "leebenson node specific object use es protocol", "d": "9/2017"}, {"body": "yes methods renamed rendertonodestream rendertostaticnodestream pr issue created beta happened beta rc updated description accordingly", "d": "9/2017"}, {"body": "render async generator interesting idea certainly possible future releases fairly certain would nt hard write given current implementation said server rendering mostly done node projects userland rapscallion reactdomstream explored async rendering rendered node streams node web servers deal streams already feels like reasonable api choice course one contributors would think", "d": "9/2017"}, {"body": "aickin long supports back pressure ported interfaces", "d": "9/2017"}, {"body": "let keep thread focused issues rc would better discuss design specific apis separate issues discussion nt get lost stable version", "d": "9/2017"}, {"body": "gaearon k", "d": "9/2017"}, {"body": "async rendering address server side rendering issue want fetch data remote source server renders component fetched data able work around like removing workarounds edit gaeron answered question july might fall react roadmap future sebmarkbage looking", "d": "9/2017"}, {"body": "bit confused default behavior errorboundary component ie one implements always logging caught error console nt programmer responsibility log somehow handle error like normal trycatch block", "d": "9/2017"}, {"body": "intentional easy accidentally swallow errors already big problem react apps nt encourage using errors control flow normal situations yes please log analytics production development display errors console always indicate bug code needs fixed", "d": "9/2017"}, {"body": "portal exposed renamed mean portal unstable feature", "d": "9/2017"}, {"body": "always intended unstable prefix react intending fix bugs rc final release changes rc means team api likely change much react might slightly different", "d": "9/2017"}, {"body": "portal became stable also supported", "d": "9/2017"}, {"body": "changed minds today", "d": "9/2017"}, {"body": "switched current project react react working like charm thanks effort however noticed one thing switched webpack still get stackframe case render error hints", "d": "9/2017"}, {"body": "winterbe loading react cdn checked ensure attribute set", "d": "9/2017"}, {"body": "shame react beta still working enzyme lot errors karma console trying update downgrade", "d": "9/2017"}, {"body": "written explicitly first post popular third party libraries work yet eg enzyme folks working enzyme airbnb took opportunity rewrite solve many longstanding issues plan release rewrite alongside react please give time", "d": "9/2017"}, {"body": "fyi mobx react router work quite well react dan abramov notifications githubcom schrieb mi sep um written explicitly first post popular third party libraries work yet eg enzyme folks working enzyme airbnb took opportunity rewrite solve many longstanding issues plan release rewrite alongside react please give time receiving mentioned reply email directly view github mute thread", "d": "9/2017"}, {"body": "shame react beta still working enzyme folks working enzyme airbnb took opportunity rewrite solve many longstanding issues plan release rewrite alongside react please give time hear close", "d": "9/2017"}, {"body": "react rc fixes report bad dead code elimination react devtools gaearon fix false positive warning hydrating svg ssr gaearon add warning nonlowercase custom attributes gaearon fix memory leak gaearon remove deprecated entry point shallow renderer gaearon remove undocumented methods gaearon add official api without prefix gaearon repeat polyfill twice gaearon please test getting really close end shipping unless folks report bugs", "d": "9/2017"}, {"body": "recommended ship polyfill requestanimationframe production recommended polyfill", "d": "9/2017"}, {"body": "recommended ship polyfill requestanimationframe production depends browsers target raf pretty good support point polyfill probably still pretty good idea recommended polyfill nt official recommendation personally used raf past projects", "d": "9/2017"}, {"body": "stable enough use production", "d": "9/2017"}, {"body": "yes use production final release waiting documentation catch", "d": "9/2017"}, {"body": "cool checked facebookcom living edge", "d": "9/2017"}, {"body": "bvaughn loading react via webpack local bundle cdn", "d": "9/2017"}, {"body": "love componentdidcatch improved error messages would also like able call thisthrow error would nice way propagate async errors tree great work though", "d": "9/2017"}, {"body": "winterbe could create repro us share via new issue would helpful", "d": "9/2017"}, {"body": "fyi people would like try enzyme enzyme betas published currently", "d": "9/2017"}, {"body": "fix issue bootstrap uses returning parent component break css grid react return multiple components array without parent div", "d": "9/2017"}, {"body": "huge thanks everyone react release notes react look inside apicompatible rewrite frontend ui library", "d": "9/2017"}, {"body": "congrats release know linking page instead release notes", "d": "9/2017"}, {"body": "enzyme still working yet tried use npm savedev enzyme nothing changed", "d": "9/2017"}, {"body": "paulocesarpcfj enzyme released last night support react working file issue details enzyme project", "d": "9/2017"}, {"body": "written babel plugin babelplugintransformjsxclassnames automatically add code transform javascript import classnames classnames may need", "d": "9/2017"}, {"body": "meowtec give normal class name add classname", "d": "9/2017"}, {"body": "ianshowell deal case anything inside braces add excepted case stay", "d": "9/2017"}, {"body": "hey example without react nt actually representative react event listeners react single listener registered listeners events capture phase simulates bubblingcapture phases expect issue firefox related capture phase see issue bugzilla calling eventstoppropagation capture phase focus events prevents cursor appearing input elements jsfiddle registers capture listener reproduces issue without react since reported firefox bug working around would require major change react event system going close thanks bringing attention", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "gaearon actionable item adding warning", "d": "9/2017"}, {"body": "let wait popular libs update portal api first take months", "d": "9/2017"}, {"body": "use implement rcdialog one feature dialog unmounting instead calling call trigger animation animation finished call clear portal see example check destroy close feature seems ca nt archive using portal unmount react", "d": "9/2017"}, {"body": "yesmeck please file new issue discuss use case", "d": "9/2017"}, {"body": "interesting use callback clever think new api able handle case way react components eg something like reacttransitiongroup transition component", "d": "9/2017"}, {"body": "iv create new issue", "d": "9/2017"}, {"body": "unable reproduce desktop safari version macos maybe patch release fixed nhunzaker think likely comments related problem issue occur react nt wrap text comments version original jsfiddle running react rc verified ios issue occur anymore since likely browser bug think safe say resolved react since including fix release unlikely", "d": "9/2017"}, {"body": "aweary sorry get back late sounds good nt know nontrivial way fix patch awesome safari might fixed react nt wrap text comments around", "d": "9/2017"}, {"body": "good outcome thanks", "d": "9/2017"}, {"body": "hi created pull request demo purpose want get feedback see whether right track fixed tests linting ready merging basically managed get warning message looks like created hydrationwarningrenderer module following method setcontainer set container dom element hydrating container required organizing warnings tree structure like dom tree registerwarning instead calling old warningfor methods hydration call registerwarning method save diffs central registry flushwarnings method called prepareforcommit hydration completed two steps print warnings buildwarningtree warningtreetotext buildwarningtree starting current container dom element recursively build tree node pair curentdomnode diffs warningtreetotext recursively convert diffs info warning string print whole warning tree formatted string appreciate anyone let know approach worth keeping working", "d": "9/2017"}, {"body": "closing staleness please feel free post followup repro still relevant", "d": "9/2017"}, {"body": "hello idea released waiting controllist attribute video tag thanks", "d": "9/2017"}, {"body": "updates", "d": "9/2017"}, {"body": "still waiting guys give update much appreciated", "d": "9/2017"}, {"body": "seems like sophiebits already published see amp blogpost nt get master yet think", "d": "9/2017"}, {"body": "yep sophiebits sent changes new license last night good go", "d": "9/2017"}, {"body": "nhunzaker thanks managing release", "d": "9/2017"}, {"body": "also experience safari", "d": "9/2017"}, {"body": "help comment closed issues cases people look old problem solved start experiencing issue similar old issue please file new one maintainers keep track provide necessary details appears someone could share information versions use reproducing cases would splendid", "d": "9/2017"}, {"body": "klavs solutions works would love see fixed react release news months thanks", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "awesome", "d": "9/2017"}, {"body": "bvaughn think consider closed", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "gaearon digging bit found due edge ie work documentfragment append working children window reason nt know react provide workaround browsers would nice", "d": "9/2017"}, {"body": "working fix", "d": "9/2017"}, {"body": "quick update bug found root cause react created pr master unused apis closed one created new pr fiber reconciler code instead", "d": "9/2017"}, {"body": "hey maxsalven sorry nt respond issue sometimes issues fall cracks difficult prioritize issues ca nt reproduce since nt information error occurred nt received additional reports going assume either resolved oneoff issue still seeing issue latest version react please feel free ping example reproducing issue thanks", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "agree flaque using listener parent component control state children likely best option since event system meant implement semantics browser event system provide way listen events parent elements usage questions please refer get support thanks", "d": "9/2017"}, {"body": "since example provided going close anyone provide example reproducing issue latest version react feel free ping investigate", "d": "9/2017"}, {"body": "reopened since reverted", "d": "9/2017"}, {"body": "nt sound related issue question react please ask stackoverflow community resources linked docs", "d": "9/2017"}, {"body": "issue likely using indexes keys lists keys page documentation mentions nt usually good idea use unique ids keys instead", "d": "9/2017"}, {"body": "since reproducing example provided going assume longer issue close", "d": "9/2017"}, {"body": "gaearon created pr please review", "d": "9/2017"}, {"body": "get outlook ios mohamed h hegazy notifications githubcom sent friday september pm facebookreact cc subscribed subject facebookreact ca nt build react windows gaearon created pr please review receiving subscribed thread reply email directly view github mute thread", "d": "9/2017"}, {"body": "think fixed wrapping whole dev bundle iife inside check", "d": "9/2017"}, {"body": "fixed", "d": "9/2017"}, {"body": "coming back nt think solution proposed expanding api provide firstclass hoc support something pursued core issue difficult access refs wrapped components issue worked independently see example solution problem likely address bulk one", "d": "9/2017"}, {"body": "final plan", "d": "9/2017"}, {"body": "see react released come resolution support third party renderers", "d": "9/2017"}, {"body": "markbrocato", "d": "9/2017"}, {"body": "entirely sure would help nt able get fire button loses focus looking bit turned need focused getting blur basically would work wo nt", "d": "9/2017"}, {"body": "feedback reactfiberreconciler available public way thanks", "d": "9/2017"}, {"body": "hi mcz please read previous comments issue understand status", "d": "9/2017"}, {"body": "rollup scripts indispensable create renderer", "d": "9/2017"}, {"body": "necessarily putting code npm package work singleton modules would break shared renderers maybe ship version resilient compiling bundle reconciler entry point whole code wrapped extra factory", "d": "9/2017"}, {"body": "actually sounds really promising simple want give try", "d": "9/2017"}, {"body": "sounds way easier custom build tool still needs access reconciler somehow", "d": "9/2017"}, {"body": "iamdustan wan na try make bundle would need special postprocessing build script put closure around", "d": "9/2017"}, {"body": "gaearon putting first minutes day towards right", "d": "9/2017"}, {"body": "already similar postprocessing cases", "d": "9/2017"}, {"body": "hours", "d": "9/2017"}, {"body": "let know want hand iamdustan sounds like fun project", "d": "9/2017"}, {"body": "thought goal fiber avoid singleton modules instantiate desired little slower way", "d": "9/2017"}, {"body": "sure goal maybe places singletons practice sure reliably catch except completely forbidding module level variables also sure benefit flat bundles still wrapping trick third parties", "d": "9/2017"}, {"body": "felt strongly making things instantiable sebmarkbage felt strongly buildtime injection way go compromised making factory functions like reactfiberreconciler scheduler etc used runtime recommendation inline things build time nt think necessarily good way enumerate least fix things come", "d": "9/2017"}, {"body": "see case seems like want distribute reconciler separate entry point means needs bundle later fix places remove extra closure make sense", "d": "9/2017"}, {"body": "sure understand suggesting module export factory method modulelevel state create multiple renderers one copy code bundle entire renderer rollup run closure extra constructors disappear", "d": "9/2017"}, {"body": "fwiw wasm version would compiled singleton instantiated multiple times wrapping everything would inline model", "d": "9/2017"}, {"body": "think mostly context stack instantiated right", "d": "9/2017"}, {"body": "suggesting module export factory method modulelevel state create multiple renderers one copy code agree saying nt need prevent iamdustan working cases want bundle remove hack wrapping whole bundle wrap module level state source code level need bundle anyway", "d": "9/2017"}, {"body": "question slight tangent apologies advance wrong place raise someone please point documentation build custom renderer ground nt see react docs tricky reverse engineer looking art renderer alone fwiw rough goal build react interface pixi order address major performance issues hope caused using domrenderer", "d": "9/2017"}, {"body": "dakom nt think official documentation yet interrogation documented findings inside custom renderer source code read comments manaflairmylittledom caution things might entirely accurate good resources understand implemented customdefined functions testrenderer nooprenderer since pretty simple", "d": "9/2017"}, {"body": "oooh found total luck feel like official documentation got consolidated knowledgebase lurking somewhere", "d": "9/2017"}, {"body": "also", "d": "9/2017"}, {"body": "dakom stumble across must really bad marketing", "d": "9/2017"}, {"body": "hehe worries learning path js super weird diving decade browser first modern js things hearing like frp functional things react hoping learn array next", "d": "9/2017"}, {"body": "followup question good live forum discuss building renderer specifically feeling lots little oneliner questions issue probably nt best place post outside scope general react discussions", "d": "9/2017"}, {"body": "reactiflux reactinternals channel", "d": "9/2017"}, {"body": "also file issues happy chat renderers", "d": "9/2017"}, {"body": "hi everyone maintainer works way works right new react wish update soon possible fact idea see new fiber version repo nt apply standalone library wait issue resolved ways use react internals", "d": "9/2017"}, {"body": "please wait land issue closed", "d": "9/2017"}, {"body": "fwiw dumped various links suggested far gist case helps anyone else see one place far early seems comparingcontrasting gets lot mileage slowly filling blanks build first renderer thanks yall", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "mdoelker solution worked long removed check comparing prevpropsvalue propsvalue every componentdidupdate manually set input default value", "d": "9/2017"}, {"body": "hey maybe dumb question polyfill think appropriate place ask looking source reactdomframescheduling see using polyfill limited scope moreorless optimised worry use polyfill code could interfere test line leading suboptimal polyfill used react short anything think using polyfill code", "d": "9/2017"}, {"body": "jobleonard good observation yes polyfills way conservative meaning nt fire often enough fill available cpu cycles frames react rely use conservative polyfill get enough callbacks application performance suffer result matters async mode might want dev detection see nonnative polyfill warn acdlite item ensure used expiration never fires", "d": "9/2017"}, {"body": "cyberhck went inheritance route components large project work worked great really simple components even benefit composition via props functions much easier test case curse project year regretted decision rely much inheritance greatly moved composable model similar gaearon explains inheritance although part language easier humans grok works great relation parent child basically set stone wo nt change much composition hand awesome relationship objects changing quite often think different ui requirements adapting new designs always require components similar functionality slightly different behaviours attached quite lot discussed topic various issues different frameworks github repos highly recommend trying approaches see easiest least team tried inheritance approach composition made much sense simplified lot things us", "d": "9/2017"}, {"body": "say want create slightly different type collection overwrite checkforvalidity whatever required however using composition go collection either add list allowed child really good since collection nt want specialcollectionitem accept allowedchild prop anything want override make prop use approach facebook great success base components", "d": "9/2017"}, {"body": "javascript oncompositionupdate e gt thischinprocessingtrue onchange gt thischinprocessing thischinprocessingfalse return demo", "d": "9/2017"}, {"body": "acdlite wrote evaluates false actually new instance render parent component called happens component mounting nt get remounted right", "d": "9/2017"}, {"body": "look like typescript issue happening flow", "d": "9/2017"}, {"body": "confirm see animated gif", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "hi maybe change docs", "d": "9/2017"}, {"body": "going remove docs anyway redirect new home transition group maintaining addon anymore feel free submit pr docs though", "d": "9/2017"}, {"body": "hi folks update translation progress japanese indonesianbehasa chinese simplified portuguese brazilian french spanish greek korean russian danish german arabic bengali ukrainian czech polish turkish lt details", "d": "9/2017"}, {"body": "ericnakagawa hello korean translation progressing slower thought still working think adding glossary page even want translate hard unify expressions words least want bring korean consistent way give advice", "d": "9/2017"}, {"body": "jisupark think glossary page would help live", "d": "9/2017"}, {"body": "think would make sense create glossary page docs initial work got could help anchor translations well", "d": "9/2017"}, {"body": "ericnakagawa think glossary page docs gaearon opinion glossary help person wants read official docs language also guides people want translate react related docs use general expression", "d": "9/2017"}, {"body": "good glossary original document desirable long run think nt wait japanese translators maintain list words translate react jargon uncontrolled component consistently saying making glossary would nontrivial task forgive say found reviewing entire document original document consistent regarding word usage example referred dom component one place component refers userdefined components another place eg always start component names capital letter custom components composite components userdefined components seem redundant synonyms used elsewhere react component may may include depending context nevertheless even inconsistencies chapters fully understandable translatable basic knowledge react doubt strictly consistent documentation priority core team translators may move without sourceoftruth glossary", "d": "9/2017"}, {"body": "fix issue", "d": "9/2017"}, {"body": "nt think anyway fix selenium operating api much lower anything react even touch working selenium drivers nt firing correct native events input suggestion everyone use empty string seems stable terms right behavior", "d": "9/2017"}, {"body": "jquense though trying snarky maybe something understanding properly add changehandler actual dom element change handler triggers actual dom element changeevent triggered nt seem picked react onchange listener specific componentdidmount triggers thiselemonchange gt consolelog changing doesnt changehandler evt gt consolelog changehandler triggered thissetstate value evttargetvalue render const value thisstate return", "d": "9/2017"}, {"body": "react nt listening events cases listening would event test accurate test think js componentdidmount triggers documentaddeventlistener input e gt consolelog etarget thiselem doesnt changehandler evt gt consolelog changehandler triggered thissetstate value evttargetvalue render const value thisstate return", "d": "9/2017"}, {"body": "might understanding event documentation wrong specifically says understand actual events assumed applies listeners wel assuming correspondence dom listeners amp react listeners triggers documentation nt cover anything difference", "d": "9/2017"}, {"body": "documentation nt really cover implementation detail generally relevant using react selenium case bit special approaching react underneath usual yes may dom react events consider event react fires keystroke unlike native event fires blur input probably named event behavior actually emulating generally events pretty close imagine underlying event particularly abnormal react also handles delegating events rather listen element individually listens top level forwards events happen react traverses tree mimicking native event bubbling capturing affect selenium test tho selenium triggering correct events bubble seen react", "d": "9/2017"}, {"body": "jquense thank taking time explanation hard work around issue first time encountered took figure happening selenium tests nt working expected think threadproposal spec webdriver trigger event close issue", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "page updated sure refers close bennick asking tracked think fixed master", "d": "9/2017"}, {"body": "gaearon means thoughts exactly ref", "d": "9/2017"}, {"body": "understand usually completely useless issues spam notifications everyone give valuable insight new information wish issue using emoji reactions github available every post comment meant understand problem reported issue docs mentioning something already fixed", "d": "9/2017"}, {"body": "true spent last trying fix bug related", "d": "9/2017"}, {"body": "cc aweary", "d": "9/2017"}, {"body": "take look back town", "d": "9/2017"}, {"body": "seems fixed latest master", "d": "9/2017"}, {"body": "acdlite changes merged master since would resolved seeing issue still occurs latest rc", "d": "9/2017"}, {"body": "hi ie edge rendering required select box initial value set trying submit form input getting fail validation select value coming invalid ie edge solution", "d": "9/2017"}, {"body": "aweary using shuaiz solution works well wonder react issue", "d": "9/2017"}, {"body": "yet another use case reactrouter suggested practice ensuring pure components impure reactrouter children update pass otherwise unused prop pure component since prop used purposes would nice able use symbol guarantee name never ever conflict real props given pure component one things tried mildly surprised nt work case syntax cleaner prop injected via reactredux think useful simplifying guideline would react prop keys like object prop keys completely nails opinion", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "problem render components dom nodes content editable component", "d": "9/2017"}, {"body": "chadoh", "d": "9/2017"}, {"body": "unsubscribe sent protonmail mobile original message sep pm jonathan ankiewicz wrote microsoft ie developers use internet like rest us see constant issues ie running issues production try pushing react update first receiving subscribed thread reply email directly view github mute thread", "d": "9/2017"}, {"body": "simple way reproduce render method throw error h get uncaught promise typeerror read property replacechild null see crashed gaearon looks like new handleerror catching", "d": "9/2017"}, {"body": "similar problem large table rows rendered server nt want send data client twice html json form came solutionhack rendering table rows component first checks dom see component exists id prerendered serverside exist extracts html uses directly via js rendertable debug render table const id tablebody const html thisgetexistinghtml id getexistinghtml id typeof document undefined return const node documentgetelementbyid id return node amp amp nodeinnerhtml renderitems debug render items return thispropsitemsmap name url gt return name shouldcomponentupdate return false also coupled prevent renders initial mount", "d": "9/2017"}, {"body": "swlilike solution works understand happens error line react lib contains function error occurred case dom nodes fix added one like parent element edited party library", "d": "9/2017"}, {"body": "coming back still think accepting concession best choice limited dataevents dom provide us case enough implement desired behavior without hacky solutions absolutely need ensure invalid values entered use text input manually validate value handler said think best close possibly document behavior need think nhunzaker jquense", "d": "9/2017"}, {"body": "agree yeah endless rabbit hole think line drawn somewhere tbh real correct way handle edge case culture aware adjacent", "d": "9/2017"}, {"body": "agree jquense spot think right need spot keystroke detection least number inputs would work every language extremely hard problem design challenges move forward removing attribute syncing", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "came across issue well decided solve built hoc takes component makes performance much better implementing wiser shouldcomponentupdate take look", "d": "9/2017"}, {"body": "fixed chrome", "d": "9/2017"}, {"body": "met problem code problem remove img tag", "d": "9/2017"}, {"body": "replaced fontawesome icons get outlook android wglayner notifications githubcom sent monday september pm facebookreact cc colin dekker comment subject facebookreact react updates causing issues dom met problem code problem remove img tag logo receiving commented reply email directly view github mute thread", "d": "9/2017"}, {"body": "hi guys sorry problem trying make application themes without fortune method call componentdidmount application component valueprop valuevalue change nothings happens default theme variables root colors thanks advance nice day", "d": "9/2017"}, {"body": "hi clear providesmodule removed react still alive react native", "d": "9/2017"}, {"body": "think removed react either", "d": "9/2017"}, {"body": "thanks dan understand overall direction get rid therefore reactrn like extreme convenience see potentially confusing pattern little confused whether advocate use learners reactrn", "d": "9/2017"}, {"body": "nt matter learners internal convention advocating others use fact changes react impossible individual modules react internals anyway", "d": "9/2017"}, {"body": "chromium bug labeled fixed going assume resolved case nothing semantically wrong using would unlikely include change address bug one platform thanks", "d": "9/2017"}, {"body": "bit frustrating nobody gotten nobody going try fix rendering placed front page react website blog post least gist please cover issue forms able placed inside modals reliably multiple frameworks seem stuck", "d": "9/2017"}, {"body": "hi kielan directly fixed difficult fix come people also helps people come politely voice need particular bug fixed never otherwise nt know prioritize please also remember open source project provided free anyone like free contribute bug fixes important personally react use reactdomunstablecreateportal implements strategy timing problems", "d": "9/2017"}, {"body": "sophiebits trying rude apologize offended think really tough bug track err actually called silent failure year past actually found solution come yet another project honestly surprised one gotten itthe pull requests offered accepted much feedback given improve pr multiple broken open source projects seem waiting mode feedback willing help build lot modals react point tough exactly understand actual roadblocks outside however figure first thing needs done tests need written identify tree attributes laid", "d": "9/2017"}, {"body": "new portal api addresses issue try react rc released recently tried documented yet use method part returned tree", "d": "9/2017"}, {"body": "initial debugging work jim locate problem consensus real way fix add real first class portals react others noted landed react make point document portals documented able close issue", "d": "9/2017"}, {"body": "documented", "d": "9/2017"}, {"body": "behavior changed react see dom attributes react using result warning still render attribute decided continue recommend using existing attribute names lenient rendering dom nt believe intention move etc canonical names going close thanks", "d": "9/2017"}, {"body": "none assertions exist latest rc release", "d": "9/2017"}, {"body": "react api pure components reactpurecomponent", "d": "9/2017"}, {"body": "seasoned contributors opinions look like become feature merit event hook seems like current react bit mixture two already", "d": "9/2017"}, {"body": "known way around case nt want child mount first parent render call", "d": "9/2017"}, {"body": "surprising functional component purecomponent default although somewhat counterintuitive think actually makes sense functional components default guarantee correct wrong react functional components nt classbased nt internal state people could still mutating props wild relying components rerender making breaking change agree however way optin behavior interim", "d": "9/2017"}, {"body": "facing issue please look image code import react react interface idatatunel data semployee class semployee public firstname string public lastname string public id number public fullname string public enrollmentdate date export class employeestemplate extends reactcomponent id first name last name full name enrollment date thispropsdatamap id firstname lastname fullname enrollmentdate gt id firstname lastname fullname enrollmentdate export default employeestemplate", "d": "9/2017"}, {"body": "resolved", "d": "9/2017"}, {"body": "exactly thing trying still solution", "d": "9/2017"}, {"body": "since longer exists react new package includes clear deprecation message going close", "d": "9/2017"}, {"body": "current implementation property input element updated value changed goes managed attributes well means update dom updates made longer issue thanks", "d": "9/2017"}, {"body": "original issue reported tnlogy expected behavior since updating property attribute sounds like issues mentioned resolved going close", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "since repro provided activity almost years going close still issue latest version react please provide example reproduction issue verify thanks", "d": "9/2017"}, {"body": "verified still issue latest react rc", "d": "9/2017"}, {"body": "issue occur react rc sure exactly resolved seems resolved nonetheless", "d": "9/2017"}, {"body": "\u80fd\u4e0d\u80fd\u81ea\u5b9a\u4e49\u54ea\u4e9b\u5c5e\u6027\u4e0d\u88ab\u5ffd\u7565", "d": "9/2017"}, {"body": "going close nt think anything actionable activity year react release team maintaining detailed uptodate issue betas rc jsfiddle could easily included future issues tracking releases thanks unpkg nt think intention break current versioning practices prereleases", "d": "9/2017"}, {"body": "seriously react native make life easy yes deathmood u r right rcshow ever also rcloop item items rcmodel data really try vuejs save life time well problem nt support native apps framework weex gt weed native witch work vuejs provide alibabcom could nt understand anything documentation chinese witch need learn chinese year weex also way happy coding", "d": "9/2017"}, {"body": "hope make like", "d": "9/2017"}, {"body": "use reactnative component created welcome", "d": "9/2017"}, {"body": "like included screenshot instead js snippet", "d": "9/2017"}, {"body": "streamich like also ida screenshot seem concept behind technique see u ca nt copy", "d": "9/2017"}, {"body": "movement awhile nt seen reports going assume resolved somewhere either react flash firefox", "d": "9/2017"}, {"body": "resolved react renders unknown attributes check dom attributes react information", "d": "9/2017"}, {"body": "usually means user mixed lowercaseuppercase naming convention react experimented upgrading apps several warnings elements warning nt really affect anything making developers question sanity something broken like chime valid use cases use semantics avoid div hell eg add flexible gap flex boxes simple icon fonts nt need react components etc etc", "d": "9/2017"}, {"body": "roberttod find solution problem thanks", "d": "9/2017"}, {"body": "since followup years nt used fiber going go ahead close one", "d": "9/2017"}, {"body": "lt", "d": "9/2017"}, {"body": "year reports issue occurring anymore also clear example could use reproduce issue latest versions react going close assumption commit period resolved issue still seeing issue please provide small repro verify thanks", "d": "9/2017"}, {"body": "relicensing react jest flow immutablejs mit license hope addresses concerns", "d": "9/2017"}, {"body": "supported react", "d": "9/2017"}, {"body": "since followup issue two years old going assume longer issue close", "d": "9/2017"}, {"body": "hey cesarp sorry never responded issue sadly issues fall cracks sometimes since two years almost major releases going close since regression longer concern issue current behavior feel free open another issue updated repro happy look thanks", "d": "9/2017"}, {"body": "works like charm", "d": "9/2017"}, {"body": "xahon really works however make error passing wrong type component warning message helpful warning failed prop type call class function", "d": "9/2017"}, {"body": "benvinegar try sentry nt caught minified error need configure", "d": "9/2017"}, {"body": "firefox datatransfertypes property returns frozen array domstrings per spec rather domstringlist latest versions firefox speccompliant still consider polyfilling older versions firefox cc sophiebits", "d": "9/2017"}, {"body": "seems like may well simple check percent users still old firefox", "d": "9/2017"}, {"body": "sounds good launch would great could address less ambiguity around shouldshould nt polyfill", "d": "9/2017"}, {"body": "look forward seeing added next year common paradigm support callbacks promises usually callbacks uptodate libraries situation dependent set states exist imo antipattern callback first place tossing stuff componentdidupdate certainly get around also end cause amp effect somewhere else sprinkled react component rather right next creating bit maintenance issue least little confusing say anyone coming back looking code next week", "d": "9/2017"}, {"body": "nt think anything actionable going close still warn trying reset controlled input using still recommend syranide advice input either uncontrolled value always undefnull controlled value string empty string rather null entire lifetime", "d": "9/2017"}, {"body": "resolved", "d": "9/2017"}, {"body": "closing since nt actionable us", "d": "9/2017"}, {"body": "looks like issue either nt exist anymore nt impacted anyone almost three years since opened posterity going go ahead close", "d": "9/2017"}, {"body": "longer issue using library", "d": "9/2017"}, {"body": "since proptypes longer part react core going close opened issue repo package", "d": "9/2017"}, {"body": "anyone still interested pr", "d": "9/2017"}, {"body": "issue appears resolved firefox", "d": "9/2017"}, {"body": "actually documentation purposes case someone stumbles back fixed firefox since firefox nt think really depends react version sure whether fixed safari yet", "d": "9/2017"}, {"body": "think easiest way supporting async render method render returns promise allow root component wait children components rendering course result render promise implemented something like preact", "d": "9/2017"}, {"body": "faceyspacey thank detailed answer really like idea reduxfirst router definitely solves problems makes things much transparent clean big thanks", "d": "9/2017"}, {"body": "rarara glad like one biggest challenges nt good abstraction route level datafetching react react callbacks excellent pattern particularly package nonobvious firstclass afterthought importantly however nt live redux really first time redux users complete route level abstraction think rfr gon na see rethinking importance route level vs component level things like relay apollo created lot hype around pairing data dependencies components nt using likely going end world hurt point things lifecycle handlers said eventually rfr route level integration apollo little benefits things component level minus aforementioned rare exceptions least time perhaps app determine data need based route possible likely deriving data view layer well could rethought interpreted url even tools like apollo begin engage problematic antipatterns likely eventually cause pain letting state live nowhere else view layer ie state necessary perform datafetchings often refine exact parameters used fetch data take state props transform get params prior fetching data stuff lives view layer subject rerendering mechanisms ie lifecycle handlers called every app one point another ends data fetched fetched response unrelated props receivedchanged apps write extra code guard unrelated props changed ie props nt affect params used fetch data react native apollo problem less nt ssr therefore potential sequential datafetchings happening server however really need component level datafetching screens small generally know scene needs terms data like desktop web panel dashboard million graphs multiple tables etc one use case perhaps biggest primary place component level starts make sense even specify requirements widgets one place fetch via apollo nt given enough thought yet basic idea attach graphql datarequirements route components connect data like redux data specifically idea eliminate reactredux apollo equivalent want one want flatter using apollo requires destructuring deeply nested data gain access truly want components vision one way looks like regular redux plus graphql specifications route level bit premature talkin barely looked route level correct approach app apollo graphql nt exception lastly testing much easier datadependencies async work separated components separation concerns major productivity booster test components without worry datafetching course tests must populate store async fetchings ahead time separated components easily formalize work helper functions tests use prepopulate store testing components render", "d": "9/2017"}, {"body": "faceyspacey completely agree must admit nt tried apollo graphql definitely check see fit use cases used writing web applications using mvc pattern basically pull data dependencies controller inject data views business logic like said makes testing much easier since view nt coupled data fetching seen mvc applications view part fetching data business logic terrible clue data fetched hidden viewcomponent testing becomes harderimpossible reduxfirst router much like controller part mvc plus routes makes much sense thank", "d": "9/2017"}, {"body": "end day new stack redux v react c reduxfirst router soon renamed rudy react came particularly redux seemed want throw ancient wisdom mvc somehow meant could completely clear pains developing previous applications think ultimately nothing simply tools built yet support end day still benefit greatly mvc even reactive clientfirst applications may work bit differently new clientfirst stack vs traditional serverside mvcs basically separation concerns far difference interactionbehavior basically past controller would get models initial phase render views controller rfr immediately rendering view chosen via ui model ie redux state rerendering view second time controller finds domain models also stored redux state", "d": "9/2017"}, {"body": "agree breaking change app changes behaviour original behaviour convenient able improve radio button group selecting radio item unselected without introduce extra button unselect needed sometimes event could use unselect already selected radio group", "d": "9/2017"}, {"body": "please consider addition long documentation properly warns difference referencing vs argument think could bring valuable sugar let sum pros cons pros removes code clutter every stateful function makes super easy transform stateful pure pure stateful component imho makes api consistent lifecycle events cons decouples rendertime state current state tend agree stevetaylor would say closures pure documentation compromises docs specify clearly closures bad practice also explain difference referencing argument think would make everybody happy nt forget pareto", "d": "9/2017"}, {"body": "gaearon still warning place consider acting wait", "d": "9/2017"}, {"body": "aweary late breaking changes let look probably land soon release behind flag", "d": "9/2017"}, {"body": "bad", "d": "9/2017"}, {"body": "hi also came case invariant violation inside trying use google tag manager gtm specifically interesting nt see issue nextjs react upgrading nextjs react appeared solved though jsx import rendertostaticmarkup reactdomserver export const servergtmnoscript export const clientgtmnoscript rendertostaticmarkup servergtmnoscript layout render function error message google search ps seeing invariant warnings move react", "d": "9/2017"}, {"body": "decorator workaround generic component workaround js trigger onchange event browser autofill see example class autofillwatch extends component static proptypes autofill component like componentdidmount thislistener setinterval gt thisinput thispreviousvalue thisinputvalue return componentwillunmount clearinterval thislistener componentdidmount const ref thisprops ref consolelog ref thisinput ref thisinput refinput input gt thisinput input render const component thisprops return component thisrefinput", "d": "9/2017"}, {"body": "generic form action saves values form state changed however option save details localstorage next time user goes form prefilled however seems using reactdom prefill values storage nt trigger onchange event state nt updated thus submitting form fails blank values anyway around", "d": "9/2017"}, {"body": "stevematdavies fire react gives input new value might use case wrong would willing provide example", "d": "9/2017"}, {"body": "redux action saves user login credentials localstorage check box checked user logs returns log page values read forms state user enters fields using onchange event field way many forms basically except form name use one parent applicationform component form function avoid setting state values selected fields necessary thus use common functionality drop child forms applicationform children rendered thispropschildren thus field inside applicationform harvested onchange including items checkboxes recaptchas etc issue value entered field via storage programmatically eg getting localstorage onchange event fired mentioned thus values added state submit fired undefined course could circumvent parsing values submit however means would ensure know names fields child forms ensure unique silly replication abstract enough coding standards", "d": "9/2017"}, {"body": "actually complicated get unique id constructor props super props thisid new date gettime css selector needs first letter character prefix id render method works like charm nt wait react policy list future pending maybe never implemented", "d": "9/2017"}, {"body": "mtrabelsi approach dangerous multiple components may created millisecond time resolution nt high enough still technique assigning ids constructor approached past however used library usually prepend prefix make id contextual nt perfect still like generate id based props accomplishes task propbased identifiers fail", "d": "9/2017"}, {"body": "uuid constructors work fine nt need ssr tho likely id mismatch server client", "d": "9/2017"}, {"body": "mtabelsi nhunzaker solutions create persistent id especially certain component mountedunmounted across renders even moving tabs might unmount component say refreshes", "d": "9/2017"}, {"body": "omerts correct definitely fix issue think could really great feature unfortunately nt really understand enough fiber make happen would happily assist anyone trying figure", "d": "9/2017"}, {"body": "probably agree whether want behave considering implementations unless proof concept", "d": "9/2017"}, {"body": "sophiebits ah sorry nt get ahead love figure resolution", "d": "9/2017"}, {"body": "issue nt ids whether good idea preserve state across serialization use cases turn ca nt modeled better nt get stuck id thing serialization good idea maybe better build", "d": "9/2017"}, {"body": "", "d": "9/2017"}, {"body": "understand bug react guess cursor position manipulate input value way issue block character nt trigger setstate render react still reset position simple example blocking alphabetic characters digits allowed class application extends reactcomponent constructor props super props thisstate value change e const regex regextest etargetvalue return render consolelog render return setstaterender triggered react change dom move cursor end input think gaearon react block new value going input control blocking cursor position change well looks like bug", "d": "9/2017"}, {"body": "tibbus good point normally think filtering invalid chars make string valid rather rejecting change think right common pattern simple way implement interested", "d": "9/2017"}, {"body": "tibbus partial solution someone pastesmovesetc still fail way sure better imho serious better implementing cursor handling getting right also modifying input like clears undo history many browsers chrome even tends corrupt one way proper block characters entered via iirc", "d": "9/2017"}, {"body": "wanted point looks like bug react offer solution issue right best solution right one wrote sophiebits covers cases", "d": "9/2017"}, {"body": "used rchanou solution along addition prop checked parent component use force input take new value keyboard shortcut cause field cleared", "d": "9/2017"}, {"body": "took finally done new site", "d": "9/2017"}, {"body": "research fixed follow work ensure correctness learn new behavior react", "d": "9/2017"}, {"body": "gaearon", "d": "9/2017"}, {"body": "thanks nhunzaker work", "d": "9/2017"}]