[{"title": "collectionclone supports options deep", "body": "would handy collectionclone supported option perform deep clone shallow collection", "num": "2642", "d": "6/2013"}, {"title": "reconsider amd support", "body": "since amd support rejected back late times since think time reconsider adding support amd backbone underscore hoped backbone would right side javascript history javascript conferences recently paying attention javascript community noticed amd continue play large role especially given native modules part spec reached recommendation status pretty clear es proposals continue revised long see anything browsers reasoning provided jeremy since proved mostly invalid jquery confirmed concerns regarding backwardscompatibility wide support addressed exporting global along amd arguing whether amd viable anymore seen amd supported across web win popular javascript libraries probably notable unfortunate exceptions today backbone underscore addy said best bets spec finalization coverage amd inbrowser modules cjs server", "num": "2641", "d": "6/2013"}, {"title": "optionally update source objects model collection changes", "body": "background like expose backbone collection source data api nice handy data layer tiered node stack however changes made collection reflected source data without binding events manually updating data big deal things get complicated want expose object nested array backbone collection well would solved event bindings nesting collection original source data kind hairy common problem idea backbone collection models updated source data upon changes make life easier could simply construct appropriate collection type requested fly complexity exposing nested backbone objects becomes substantially diminished complaint heard regards backbone scenario try illustrate mess idea var data id foo bar var dataapi new backbonecollection data updatesource true consumer dataapiget set foo new value var mynewmodel bar baz dataapiadd mynewmodel dataapilast set happy true mynewmodelsad false data gt id foo new value bar baz happy true sad false probably riddled problems love discuss caveat one issue already thought updating source objects reflected case models updating source array addremove anything collection seems okay", "num": "2640", "d": "6/2013"}, {"title": "make model methods like prototype collection owns model", "body": "miss much want something like javascript var categorybackbonemodelextend addproduct function id thisget products push id var categoriesbackbonecollectionextend model category addproduct function id thisforeach function cat cataddproduct id makes cry sometimes need lot functions", "num": "2638", "d": "6/2013"}, {"title": "documentation modelget incorrectly says returns value", "body": "intended behavior return reference documentation function states otherwise get current value attribute model seems worthwhile clarify modifying result modify underlying attribute", "num": "2635", "d": "6/2013"}, {"title": "way access raw view options backbone master", "body": "previously set default options merged passed options parameter passed function raw options options passed constructor change changed set parameter object used set means way access raw options passed constructor reason behind using previous behaviour save raw options pass asis subviews without worry options object polluted eg layoutmanager", "num": "2634", "d": "6/2013"}, {"title": "model constructor override url even function already model prototype", "body": "javascript var model backbonemodel function attributes options var defaults var attrs attributes options options thiscid uniqueid c thisattributes extend pick options modeloptions optionsparse attrs thisparse attrs options defaults result defaults attrs defaults attrs defaults thisset attrs options thischanged thisinitializeapply arguments list options attached directly model provided var modeloptions url urlroot collection options url property point customization example sync method override override url model even function url detailed description", "num": "2633", "d": "6/2013"}, {"title": "collection model executed blank object scope", "body": "example even though instance method backbone executes blank object collection method forced stateindependent collection question expected instance method class run every instance method", "num": "2630", "d": "6/2013"}, {"title": "collectionindexof problems issorted true", "body": "using set true collection argument comparator work would expect ultimately think issue lies designed argument comparator related nt think works collection argument comparator think root problem thought think would great defaulted true collection defined comparator", "num": "2629", "d": "6/2013"}, {"title": "validation object construction", "body": "giving validating model would expected validation also happens demand validation object construction javascript var todo backbonemodelextend defaults completed false validate function attribs attribstitle undefined return remember set title todo initialize function consolelog model initialized thison invalid function model error consolelog error backbone creates new todo object though embedded error logs remember set title todo callback never invoked due fact constructor function first invokes set initialize perhaps preinitialize one could refactor", "num": "2628", "d": "6/2013"}, {"title": "give modelset parse option", "body": "collection counterpart set allows provide parse option run parser function processing collection object handy bootstrap data want build collection wont go fetch function reason model object nt provide option parallel collection seems inconsistent omitted edit upon inspection reset still respects parse option", "num": "2627", "d": "6/2013"}, {"title": "accept applicationjson", "body": "think backbone send accept applicationjson header fetching models inform server type content send", "num": "2626", "d": "6/2013"}, {"title": "merging models recursively", "body": "encountered issue trying update model collection partial data model collection one attributes using method options hoping nested collection merged instead completely replaced new value problem current method simply replacing attribute value considering possible merge current attr instance feel would desired behavior slightly changed check whether recursive merging desired possible passed options reason included additional option nt want break existing functionality replaces nested collection instead merging similar request reported already opinion proposed solution nt generic enough merged backbone already created patch wrote tests looks like working really well push fork minute issue pull request consider", "num": "2624", "d": "6/2013"}, {"title": "inconsistency event parameters", "body": "depending whether call different arguments passed event since behavior specified documentation appears unintended used via second parameter seems redundant also available via maybe parameter replaced something likes way event triggers would behave similar fashion", "num": "2623", "d": "6/2013"}, {"title": "surrogate interferes collectionset accepting arrays model subtypes", "body": "extend injects surrogate prototype chain place instance superclass result always returns false becomes problem collectionset attempting determine passed hash model resulting behaviour highly undesirable jsfiddle demonstrating issue code replaced instanceof check attribute check know hash contain attribute course general solution", "num": "2621", "d": "6/2013"}, {"title": "memory leak listeners stoplistening implementation", "body": "profiling code memory usage surprised come upon looks like memory leak backbone implementation looked issues appears since jashkenas original implementation might missing something since nt seem others come across yet new test case snippet showing behavior console output nt caught current test case since calling without arguments correctly clear object order clean correctly also store event name callback listeners like events going submit patch change consideration missing thanks", "num": "2619", "d": "6/2013"}, {"title": "pass results collectionwhere view", "body": "hi would like pass result collectionwhere key model passed view problem result collectionwhere array models whereas would need kind tojson call convert model objects something view code handle many thanks dan", "num": "2618", "d": "6/2013"}, {"title": "enhancement collectionadd regarding add events sent adding array models", "body": "calling array models event triggered many times models array enhancement could possible also trigger extra events implementation event triggered loop events sent index event triggered loop events sent way views example create fragment dom receive addstarted event add subfragment dom time receive add event eventually inject whole fragment document receive addended event", "num": "2617", "d": "6/2013"}, {"title": "call method undefined", "body": "uncaught typeerror call method undefined getting error console", "num": "2616", "d": "6/2013"}, {"title": "backbone model fires change event twice", "body": "started working backgridjs week ago discovered model saved twice listening calling change event view basically table user edit whenever user updates cell value want push server defined change method calling every time cell updated problem facing id model saved twice calling change event pass wait true modelsave change event fired thrice something wrong missing something obviuos help would greatly appreciated code var territory backbonemodelextend initialize function backbonemodelprototypeinitializeapply arguments thison change function model options options amp amp optionssave false return modelsave var territories backbonecollectionextend model territory url jsbookingsjson var territories new territories var columns name bookingid label id editable false cell backgridintegercellextend orderseparator name bookingtime label time cell string name bookinguser label name cell string name reservedate label date cell string name bookingemail label email cell string var grid new backgridgrid columns columns collection territories gridlistento territories change function alert territoriespluck bookingid help would greatly appreciated", "num": "2615", "d": "6/2013"}, {"title": "triggering event different callback function fails using object parameter", "body": "triggering event different callback functions fails events callbacks added object parameter test extend object backboneevents methods var extend name backboneevents var foo function consolelog foo var bar function consolelog bar aon log foo log bar works aon log foo aon log bar atrigger log logs bar nt lock foo", "num": "2614", "d": "6/2013"}, {"title": "issue collectionset going one nested level parse", "body": "real world issue came across let say top level model collection collection coffee class job extends backbonemodel constructor gt items new items super parse attrs gt itemsset attrsitems parse true omit attrs items class item extends backbonemodel constructor gt subitems new subitems super parse attrs gt subitemsset attrssubitems parse true omit attrs subitems class items extends backbonecollection model item class subitem extends backbonemodel class subitems extends backbonecollection model subitem try correct data structure place runs item identity check thing fact nt correct model setting values becomes issue depends model ultimately used feel like fairly consistent advocated pattern dealing nested modelscollections another case temporary model creation causes issues preferred solution would say anything coming parse already general model format allowing going back able assume model identity checked based need otherwise caseywebdev top head know roughly revision look get need get case working short term done way", "num": "2612", "d": "6/2013"}, {"title": "backbonemodelprototypeurl longer function", "body": "hi tried upgrading nt see anything changelog certain nt overwritten property instance behavior property changed understanding always function thanks", "num": "2610", "d": "6/2013"}, {"title": "new collectionrefresh method alias fetch reset true", "body": "wondering general interest collectionrefresh method function alias replacement collectionfetch reset true passing options object seems pretty inelegant solution", "num": "2608", "d": "6/2013"}, {"title": "collectioncreate success handler longer receives raw ajax response", "body": "prior backbone calling collectioncreate new model would receive three arguments success callback model raw response options get model seems due change create method backbone optionssuccess function resp optionswait collectionadd model options success success model resp options backbone optionssuccess function model resp options optionswait collectionadd model options success success model resp options see optionssuccess defines resp parameter hence ends sending model first two arguments collectioncreate success handler", "num": "2606", "d": "6/2013"}, {"title": "view initialize master version nt set thisoptions used", "body": "call configure removed released func exciting task pushing user options thisoptions breaking change related comment master unhelpful makes mention thisoptions longer exists options special meaning eg model collection id classname attached directly view see exhaustive list", "num": "2605", "d": "6/2013"}, {"title": "expose backboneobject backbonebaseobject use base object", "body": "think initalize extend methods pretty useful object usually baseobject like projects javascript var baseobject function options thisinitializeapply arguments extend baseobjectprototype backboneevents initialize function options selfpropagating extend function backbone classes use baseobjectextend backbonemodelextend also added events see know couple trivial lines ready using adding documentation would allow people aware useful tip think good idea accept pullrequests glad help", "num": "2601", "d": "6/2013"}, {"title": "provide consistent xcsrftoken support better backbone security", "body": "bit hiccough drupal services module suddenly decided restful services creating vulnerable xcsrf see conversation security fix drupal require modification restful clients grab token add token headers step fiddly one means multiple code changes assuming good practice always include token backbone encourage possibly facilitate setting headers solution include backbone calls wrap jqueryajax would lovely could simply something like startup think leave backbone include header ajax calls", "num": "2599", "d": "6/2013"}, {"title": "missing documentation promises", "body": "hey noting deprecation notice deprecation notice jqxhrsuccess jqxhrerror jqxhrcomplete callbacks deprecated jquery prepare code eventual removal use jqxhrdone jqxhrfail jqxhralways instead wondering plan mention promises", "num": "2597", "d": "6/2013"}, {"title": "destroying backbone model collection", "body": "hi everyone got problem app recently wen wana destroy model get amessage call method destroy undefined used methode fetch get informatio collection knowing worked wen used table delete rdv deleteentity function e consolelog deleteentity starts var var item ecurrenttarget var id itemdata id", "num": "2596", "d": "6/2013"}, {"title": "problem router namedparam", "body": "replaced escaperegexp think line change", "num": "2594", "d": "6/2013"}, {"title": "event memory leaking", "body": "seems array leaking every change collection adding array model using backbone along angularjs populate collection using ajax change selected attribute models according ui state like toggle ids also using jquery page tried see events pushed array method called", "num": "2593", "d": "6/2013"}, {"title": "fetching model api id definded", "body": "save model using post request sent api expected api returns following json console shows error id defined see id json end still work", "num": "2592", "d": "6/2013"}, {"title": "historynavigate breaks anchors inner links opera", "body": "navigating anchors link wrong page example site source repeat bug click page link back main page logic jsscriptjs file backbone history starts backbonejs v underscorejs v downloaded official sites", "num": "2588", "d": "6/2013"}, {"title": "missing request method sync events", "body": "sync events request sync error identify method currently called sent server think method create update patch read delete important thing example want generate error messages automatically create syncstatuslabel listens events displays current status request pending error success display proper status message label know method message", "num": "2586", "d": "6/2013"}, {"title": "add sync error event model", "body": "think many cases could useful event default example want display error messages something went wrong saving data server request event set pending message sync event set success message error messages workaround", "num": "2584", "d": "6/2013"}, {"title": "events section classes documentation", "body": "suggest add events section documentation every class wo nt collect code documentation event triggered example", "num": "2582", "d": "6/2013"}, {"body": "may use new operator instantiate router use stackoverflow questions like", "d": "6/2013"}, {"body": "see previous tickets plugins extensions add extra deep model features otherwise", "d": "6/2013"}, {"body": "hi timmywil use backbone underscore amd time without extra support added using backbone app include use global use shim configuration requirejs works fine requires nothing extra", "d": "6/2013"}, {"body": "thank bringing conversation brave brave man requirejs user would fantastic everyone adhered developer ideologies going happen would really nice backbone collection different modules could required separately silly twojs instance requires backbone namespace take advantage backboneevents braddunbar backboneunderscore easily shimmed problem using package manager like jam makes task completely trivial however one gets little bit trouble certain usecases compile optimize depending module dependency tree looks run loadorder problems shim shimming sham works mostly great would love backbone amd compliant end everyone going switch angular anyway amirite", "d": "6/2013"}, {"body": "would really nice backbone collection different modules could required separately silly twojs instance requires backbone namespace take advantage backboneevents one backbone rather small whole breaking bank size two backboneevents enmeshed rest source easy delete things nt want use things however one gets little bit trouble certain usecases compile optimize depending module dependency tree looks run loadorder problems shim recommend using include backbone separately either include separate file vendor code personal preference dependency rules vendor code complex way application code", "d": "6/2013"}, {"body": "like know reason supporting amd even better umd commonjs amd stay near future", "d": "6/2013"}, {"body": "instead staying way supporting amd marionette pattern building standard core file amd version core file nt see reason ca nt always amdjsbackbone amdjsunderscore", "d": "6/2013"}, {"body": "thanks discussion stated adding explicit support particular module loaders makes harder support quote jeremy javascript ever gets real module system module system deployed cross browser support meantime backbone perfectly usable amdumdetc", "d": "6/2013"}, {"body": "thanks discussion stated adding explicit support particular module loaders makes harder support first particular module loaders referring dealing javascript libraries already support amd secondly actually true anyway said exporting global along amd means behavior nt affect nonamd loaders hard support javascript ever gets real module system module system deployed cross browser support probably take years meantime amd supported best way help developers logic inherently flawed meantime backbone perfectly usable amdumdetc true either comments pointed best practice using amd production concatenate files compile together possible backbone without modification", "d": "6/2013"}, {"body": "true either comments pointed best practice using amd production concatenate files compile together possible backbone without modification assure time via option similar", "d": "6/2013"}, {"body": "braddunbar specified load jquery cdn even concatenating main concern think understand edit reiterate perfectly usable although would argue perfect enough backbone better pointed inaccuracy statement without responding points real reason nt want let leave hope like satisfied", "d": "6/2013"}, {"body": "hmm nt think loading jquery cdn affect concatenatingminifying backbone javascript", "d": "6/2013"}, {"body": "braddunbar nt think saw edit answer question loading jquery cdn using loader backbone wait load backbone first time used", "d": "6/2013"}, {"body": "timmywil yeah definitely possible know build scripts gotten little bit trouble past end got figured also imagine ton usecases broken amdbackboneunderscorejquery braddunbar regards break backbone thing think misunderstood intention idea course size negligible keeping modules separate interoperable using module system package manager figure details needs component seems number standalone products within backbone could benefit separate codebases know nt really matter argument likely change", "d": "6/2013"}, {"body": "timmywil yea missed edit sorry work fine cause appreciable performance difference use cases feel free alter source understand point splitting source entirely different worms separate conversation entirely sorry trying address one thing time", "d": "6/2013"}, {"body": "braddunbar understand cake", "d": "6/2013"}, {"body": "braddunbar recommending use script tags nt seem like best solution nt really respond arguments", "d": "6/2013"}, {"body": "timmywil think resistance futile seems backbone wo nt support amd hmmm wonder underscore forked lodash perhaps time backbone fork", "d": "6/2013"}, {"body": "zowens see official fork", "d": "6/2013"}, {"body": "philfreo nt really add anything amd right thinking like real fork la lodash", "d": "6/2013"}, {"body": "added minimal amd implementation", "d": "6/2013"}, {"body": "nt think understand questionissue", "d": "6/2013"}, {"body": "sorry js var categorybackbonemodelextend addproduct function id thisget products push id var categoriesbackbonecollectionextend model category var categoriesnew categories products products products categoriesaddproduct want model methos available collection owns model call model method collection want execute every model collection understand", "d": "6/2013"}, {"body": "best solution probably use invoke", "d": "6/2013"}, {"body": "returns javascript value behaves javascript values array object get pointer string number common case backbone get value either way expected thing javascript array object value", "d": "6/2013"}, {"body": "jblz need return copy attribute value easily override return copy attribute", "d": "6/2013"}, {"body": "wookiehangover thanks knowing expect direct assignment attribute half battle", "d": "6/2013"}, {"body": "hi nicoburns definitely many reasons change read also still reference original options argument fine give shot", "d": "6/2013"}, {"body": "seems already fixed", "d": "6/2013"}, {"body": "property needs constructor case would totally bizarre instanceofthecollectionaswell define model separately fine", "d": "6/2013"}, {"body": "hey jeremy thanks responding docs might date following since specifies using instance method little confused instance method nt running scope implied collection also contain polymorphic models overriding property function returns model var library backbonecollectionextend model function attrs options condition return new publicdocument attrs options else return new privatedocument attrs options", "d": "6/2013"}, {"body": "oh quite right nt think docs ever correct let fix em", "d": "6/2013"}, {"body": "looking docs actually correct slightly unclear fixed needs constructor function model javascript constructors allowed return objects value instance hence example code work still needs called constructor function going access rest collection breaks", "d": "6/2013"}, {"body": "makes much much sense thanks clarifying", "d": "6/2013"}, {"body": "simple test case illustrate problem perhaps misinterpreted docs functions nt expected work comparator hope helps javascript var integer backbonemodelextend defaults value var integers backbonecollectionextend model integer comparator function return value value var test function var ints new integers var lt intsadd new integer value", "d": "6/2013"}, {"body": "see previous tickets brief override create cleaner", "d": "6/2013"}, {"body": "defer caseywebdev doability think certainly reasonable api parity models collections parsing thanks opening issue etler", "d": "6/2013"}, {"body": "implementation pretty straight forward think major question reason also would happen key val provided instead attribute object", "d": "6/2013"}, {"body": "sounds good case cause snag top head notice order events love see pr implementation thoughts", "d": "6/2013"}, {"body": "great love take stab", "d": "6/2013"}, {"body": "actually going open ticket well came across though assume agree wookiehangover api parity would nice come across cases makes sense using parse handle nested data using mentioned ticket", "d": "6/2013"}, {"body": "tgriesser nt know missed issue agree discussion use case think compelling use case parsing bootstrapped data well nested parsing also also using workaround said also parity argument well", "d": "6/2013"}, {"body": "actual use case needing", "d": "6/2013"}, {"body": "want call existing model object nested data pulling model wanted functionality several occasions coffee class book extends modelsdocument constructor gt info new infomodel chapters new chapterscollection super parse attrs options gt infoset attrsinfo options chaptersset attrschapters options omit attrs info chapters work yes works simpler api parsing nested data collections models though issue works far", "d": "6/2013"}, {"body": "ajax library instance jquery accept setting depends data type however always explicitly set model fetch even backbonesync method", "d": "6/2013"}, {"body": "already sent default jquery passing option set", "d": "6/2013"}, {"body": "like idea backbone traditionally support nested attributes box done projects hijacked project level handle case works flawlessly going close issue move discussion pr", "d": "6/2013"}, {"body": "tjoekbezoer thanks opening issue made test case ca nt replicate describing event model collection signature model error options whether triggered", "d": "6/2013"}, {"body": "correct situation follows code path trigger event happens bubbles collection case however use prevents new model added collection first place validation fails situation actually trigger event sends argument instead error message change see mean", "d": "6/2013"}, {"body": "tgriesser confusion trying avoid p tjoekbezoer see specifically outdated diff comments discussion agree make consistent", "d": "6/2013"}, {"body": "caseywebdev say nt validate new models via comes first argument event debatable think confusing inconsistent argument error message one case attributes error prone especially using event listener collection listen collection model events", "d": "6/2013"}, {"body": "attributes validated line backbone position validating trying persist definitely confusing listen receive completely different parameters based situation", "d": "6/2013"}, {"body": "little offtopic perhaps appropriate", "d": "6/2013"}, {"body": "nt think necessary happens save", "d": "6/2013"}, {"body": "different effect nt prevent invalid model added collection think invalid model introduced via rejected completely default otherwise must manually removed collection event might bit tedious error prone", "d": "6/2013"}, {"body": "tbh think needs removed deal many combinations circumstances alternatives simpler clearer going", "d": "6/2013"}, {"body": "good point would nt idea remove event triggering collection well let model handle", "d": "6/2013"}, {"body": "problem case model created function scope accessible anywhere else wo nt since invalid must pseudoproxy event", "d": "6/2013"}, {"body": "hi recurse see describing nt think causing problems reason ca nt use", "d": "6/2013"}, {"body": "surrogate cause problem collectionset however correct use extend nt previously understand constructor method give exact semantics attempting achieve via traditional javascript inheritance idiom updated jsfiddle demonstrate correct way following suggestion nt think bug although might qualify documentation gap appears plenty code uses mistaken approach used aside generally preferable make call backbonemodel first last line constructor function", "d": "6/2013"}, {"body": "depends result want achieve great flexibility put much code like super call", "d": "6/2013"}, {"body": "implementation using definitely effort stay simple fast going quite expensive check every context every event see matches object agree leaky situation love see pr keeps speedy cleaning lingering objects also consider capturing various argument combinations test", "d": "6/2013"}, {"body": "thanks thoughts caseywebdev good test improvements agree paying attention performance seems like stoplistening optimized noarg case single arg two arg etc anyone else thoughts concerns", "d": "6/2013"}, {"body": "try underscore invoke method", "d": "6/2013"}, {"body": "fantastic thank much", "d": "6/2013"}, {"body": "hi loicshub thanks pointing backbone generally tries stay away type lifecycle event order let user add like nice quite easy override methods trigger events careful nested adds though", "d": "6/2013"}, {"body": "try irc google group debugging help github tickets maybe forgot require underscore", "d": "6/2013"}, {"body": "sounds like probably asking backgrid issues", "d": "6/2013"}, {"body": "tgriesser backgrid uses backbonejs events problem facing calling change event help would greatly appreciated", "d": "6/2013"}, {"body": "problem nt backbone events likely binding many listeners disposing existing listeners properly etc another application specific issue causing model change multiple times backbone events well tested without specific reproducible test case could issue backbone library much especially without familiarity backgrid likely better help tickets stackoverflow post quick fix could wrap change handler debounce", "d": "6/2013"}, {"body": "thanks tgriesser insights", "d": "6/2013"}, {"body": "another possibility server setting id attribute response save triggered second change event case issue change callback simple checking changed attribute model deciding needs resync server", "d": "6/2013"}, {"body": "uh friend ca nt object key twice javascript one keys win", "d": "6/2013"}, {"body": "ca nt one key javascript object replaces case need different way", "d": "6/2013"}, {"body": "doh sorry stupidity today course case nt write code less hours sleep", "d": "6/2013"}, {"body": "tbh causing much grief overriding take special action predefined subcollectionmodel properties agree enforcing base level object huge step forward allowing us ditch temp models way got around past attaching parent collection hash checking data cascaded ridiculous sure looking get working saw temp models used long time", "d": "6/2013"}, {"body": "mostly looking place time assumed usable existence checking see could patch together maybe getting rid temp models going back functionality regards", "d": "6/2013"}, {"body": "temporary models definitely nasty removing features good way deal handling data endpoints nt control huge feature backbone allows define small clean parse methods easily translate data model want work data model server expects regardless whether includes namespace wrapper experience much useful allows entire class applications otherwise difficult structure", "d": "6/2013"}, {"body": "definitely agree handling data variety endpoints important feature backbone convinced creating temporary models mixing data formatting alongside constructing proper nested modelscollections best possible solution might another method would better suited handle one cases creating temporary models know whether data formatted properly feels like hack static method modelcollection seems like work well would prevent need temp models", "d": "6/2013"}, {"body": "caseywebdev braddunbar either get chance want see think thinking could good solution issue temporary models issue case potentially return wrong model still providing outlet handling data endpoints plus gets rid looks like could good compromise sure cleaned decent bit get working deepnested case needing", "d": "6/2013"}, {"body": "thing wo nt currently work polymorphic models", "d": "6/2013"}, {"body": "see lines default definition problem nt set either directly one required generate model url", "d": "6/2013"}, {"body": "using edge might", "d": "6/2013"}, {"body": "sorry nt post code set property looks like must thanks", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "pretty much always pass options object choice really nt think alias option going benefit backbone community whole", "d": "6/2013"}, {"body": "well lot readable especially new devs using backbone", "d": "6/2013"}, {"body": "feel full collection refresh common task one warrants method passing options objects around manipulate method execution nt nice june casey foster notifications githubcom wrote pretty much always pass options object fetch cfetch reset true success function error function choice cfetch reset true done funciton fail function really nt think alias option going benefit backbone community whole reply email directly view github", "d": "6/2013"}, {"body": "always found jarring model could removed collection without event called case readability definitely subjective case super easy extend base class something like use projects furthermore deferred objects guaranteed implementations", "d": "6/2013"}, {"body": "yep plenty readable think introducing similarly named optionsmethods cause confusion", "d": "6/2013"}, {"body": "workaround use model new mymodel modelsave attributes success function model resp options using collectioncreate much nicer though perhaps something wrong", "d": "6/2013"}, {"body": "see method call arguments expecting please provide jsfiddlecodepen produce case true", "d": "6/2013"}, {"body": "yes look two lines see success callback passes parameters success callback highlighted takes one argument resp actually model results model resp parameters identical success handler create method finally called tried respmodel success callback yielded true try create jsfiddle would need public rest api order know could use", "d": "6/2013"}, {"body": "response vanilla backbone object think old method place using modified", "d": "6/2013"}, {"body": "nah gets wrapped pull request incoming", "d": "6/2013"}, {"body": "check fix", "d": "6/2013"}, {"body": "ah see bad likely regression went", "d": "6/2013"}, {"body": "yup thanks idea release near future would prefer maintain build", "d": "6/2013"}, {"body": "correct case master read info documented next release like add back extend base view like", "d": "6/2013"}, {"body": "thanks opening issue robvon first discussed length handful issues since secondly edge version linked cautionary use risk text accompany assure change well documented time next release cut comment go along comments tend explain going code asis rarely take time justify changes previous versions changelog issues serve understand frustrating find changes like promise worked next release", "d": "6/2013"}, {"body": "thanks yup risk thought mention found coded way works edge version looking see another issue changed compared edge decided close enough regards rob sam breed mailto notifications githubcom sent tuesday june documentcloudbackbone cc rob von nesselrode subject backbone view initialize master version nt set thisoptions used thanks opening issue robvon first discussed length handful issues since secondly edge version linked cautionary use risk text accompany assure change well documented time next release cut comment go along comments tend explain going code asis rarely take time justify changes previous versions changelog issues serve understand frustrating find changes like promise worked next release reply email directly view github", "d": "6/2013"}, {"body": "thanks opening issue opensas quick search see requested couple times similar forms short backbone nt strive class library current plans expose baseobject sort great backbone helping team grok build constructorbased javascript applications exposing functionality directly nt scope backbone seeks provide users", "d": "6/2013"}, {"body": "thanks lot reply try better search previous issues next time", "d": "6/2013"}, {"body": "guess global setting would need ridable per collectionmodel clients calling multiple services", "d": "6/2013"}, {"body": "thing application issue maybe pull request would better start conversation", "d": "6/2013"}, {"body": "sigh always amazes quick folk close issues significant vulnerability backbone docs code currently encourage folk walk right sorry think issue", "d": "6/2013"}, {"body": "erichbschulz sorry felt like rushed close optional property backbone object help security hoping would provide pr illustrating intention", "d": "6/2013"}, {"body": "well hoping conversation would last slightly longer two minutes like fixed code like probably dont time generate backbone patch leaving issue table may encourage time greater familiarity backbone code write one goal would make easy implement xcsrftoken headers hard noone tells people start getting hacked backbone gets bad security reputation reference headers main backbone dock emulatehttp guess copying fiddling function maybe good starging point", "d": "6/2013"}, {"body": "backbone tries stay agnostic persistence channel someone using socketio backbonesync postgresql nodejs backbonesync would use special case definitely think way go especially ever want send ajax request app outside backbone crud methods", "d": "6/2013"}, {"body": "csrf nt anything database persistence though argument insecure default insecure valid might useful least include note docs providing standard convention encourage basic security practice could nice addition though", "d": "6/2013"}, {"body": "going depend ajax api though setting jquery ajax going different superagent others agree tbranyen say nonissue backbone responsibility outline bazillion security holes need accounted web app", "d": "6/2013"}, {"body": "need feed trolls guys", "d": "6/2013"}, {"body": "caseywebdev oh right fair point", "d": "6/2013"}, {"body": "mmm well call fellas code secure webdevs busy folk usually scrambling tie layers rapidly changing technology usable experience default implementation methods wide open door easy close bunch devs wont thank making easy secure either find thread got hacked think issue logic one liner looking header implementation looks like need construct array header get beforesend create interate array setting one headers need", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "haha well thats ok", "d": "6/2013"}, {"body": "better handled global jqueryajax options level server requests secure backbone models", "d": "6/2013"}, {"body": "discussion going adding promises backbone core feel free chime", "d": "6/2013"}, {"body": "actually red herring backbone relies options passed methods referred issue methods question aliases methods marked deprecation success error options deprecate warnings likely application nt byproduct backbone use jquery", "d": "6/2013"}, {"body": "wookiehangover cool thanks clarification notice jquery doc nt error messages", "d": "6/2013"}, {"body": "try without removing collection automatically remove collection destroyed jaap sat jun pm ouzza notifications githubcom wrote hi everyone got problem app recently wen wana destroy model get amessage call method destroy undefined used methode fetch get informatio collection knowing worked wen used table delete rdv deleteentity function e consolelog deleteentity starts var var item ecurrenttarget var id itemdata id consolelog id var model thatcollectionget id consolelog model destroy model modeldestroy remove model collection thatcollectionremove model search row var row thatfindrow item remove row data table thatotablefndeleterow thatotablefngetposition row consolelog deleteentity end reply email directly view github", "d": "6/2013"}, {"body": "sounds like actually finding model also please use stackoverflow mailing list issues github tickets development library debugging application code", "d": "6/2013"}, {"body": "hi qiangtou right matches replaced treated named parameter run test suite regexp mention fails quite tests", "d": "6/2013"}, {"body": "nt please nt open ticket unless test case share us want help debugging app try irc channel mailing list", "d": "6/2013"}, {"body": "indeed problem method backbone query library davidgtongebackbonequery reproductible test case", "d": "6/2013"}, {"body": "run problem models nt id attribute", "d": "6/2013"}, {"body": "hi szelga pretty sure recently fixed would mind giving latest version master shot", "d": "6/2013"}, {"body": "unfortunately nt help", "d": "6/2013"}, {"body": "gotcha would mind explaining bit detail problem", "d": "6/2013"}, {"body": "ok tested issue seems affects opera checked opera firefox chromium sorry insufficient information test site backbonejs application loads static pages data apipagesindexjson displays via custom view class navigate pages binds backbonehistorynavigate function aclick event see jsscriptjs file opera could repeat bug open browser link refers click page link back main page link main page refers whereas firefox chromium application works intended opera bug grateful workaround", "d": "6/2013"}, {"body": "issue described also present page chrome", "d": "6/2013"}, {"body": "chromium version built ubuntu", "d": "6/2013"}, {"body": "szelga want help still able reproduce problem adding failing test case test suite pull request would wonderful", "d": "6/2013"}, {"body": "sorry seems failed following steps works disregard previous comment", "d": "6/2013"}, {"body": "added custom sync temporarily", "d": "6/2013"}, {"body": "hi understand use case somewhat think falls rule uses need know model state synced server rest use custom sync method used events displaying error messages quite lot method usually irrelevant", "d": "6/2013"}, {"body": "ok", "d": "6/2013"}, {"body": "echo wrapping custom sync like totally great way go fact would make great potential wiki page backbone methods may want wrap useful extension patterns", "d": "6/2013"}, {"body": "better way wrap", "d": "6/2013"}, {"body": "seems like asking already exists error event triggered case failure", "d": "6/2013"}, {"body": "yep event already included let us know think something needed", "d": "6/2013"}, {"body": "ohh thanks nt found part code", "d": "6/2013"}, {"body": "ohh found catalog builtin events section", "d": "6/2013"}, {"body": "btw nt think right place", "d": "6/2013"}, {"body": "thanks tgriesser worked", "d": "6/2013"}, {"body": "think valid event default", "d": "6/2013"}, {"body": "think valid event default sorry nt get meant please explain details", "d": "6/2013"}, {"body": "think event would nt useful validation checked frequently sending event constantly asserting model valid would annoying behavior currently model nt actually entering invalid state attempted invalid incorrect attributes nt sent server closing let lie braddunbar think", "d": "6/2013"}, {"body": "would say event already covers case passing assume would since would nt otherwise get events event triggered valid state passing probably nt care validity anyway", "d": "6/2013"}, {"body": "quite", "d": "6/2013"}, {"body": "sending event constantly asserting model valid would annoying behavior maybe would possible store previous state send event model switched state passing validate true assume would since would nt otherwise get invalid events use form validation values set without event triggered calling way know model became valid events calling passing also nt think passing valid use case defaults validate set false fighting defaults passing everywhere manually every time would strange convenient", "d": "6/2013"}, {"body": "use form validation values set without validate true invalid event triggered set calling isvalid way know model became valid events calling isvalid sure even nt use listen event check", "d": "6/2013"}, {"body": "problem", "d": "6/2013"}, {"body": "hi juliansantaana simple enough achieve one liner code nt think common enough pattern add support functionality method", "d": "6/2013"}, {"body": "poke", "d": "6/2013"}, {"body": "thanks opening ticket yamsellem read see prior discussion backbone nt expose details underlying http method details via api something need know application best bet might wrap cases nt need know underlying mechanism called", "d": "6/2013"}, {"body": "spent ages debugging issue caused please update change log", "d": "6/2013"}, {"body": "bit retro fix since couple versions ago patch pull incoming", "d": "6/2013"}, {"body": "addressed", "d": "6/2013"}, {"body": "shadowsilver way could provide boiled example behavior describing hard disentangle issue stuff going fiddle", "d": "6/2013"}, {"body": "ok simplified example posted earlier version version show briefly meaning example simple model selected property collection encloses collection onchange listener cycle model set false ones true exception item fired listener set selected property second item haschanged method says also first item changed already called handler previously hope clear", "d": "6/2013"}, {"body": "issue still valid fiddle still fails latest backbonejs repo", "d": "6/2013"}, {"body": "probably question better documentcloud room irc stack overflow issue tracker nt generic support usage questions", "d": "6/2013"}, {"body": "fyi created extension smartly replaces tojson method sync run otherwise problems templates", "d": "6/2013"}, {"body": "apply method related sync save modeldestroy issue", "d": "6/2013"}, {"body": "moving conversation", "d": "6/2013"}, {"body": "yeah collectionfindwhere nt seem work used findwhere collectionmodels function", "d": "6/2013"}, {"body": "yup using nonissue", "d": "6/2013"}, {"body": "fix problem", "d": "6/2013"}, {"body": "ticket reopened reproduced consistently leaving backbone site pressing back button following code used reproduce load page click google link back code uploaded testing click google link back button android phone wwwgooglecom windowonerror function message url linenumber alert message url linenumber return true function var router backbonerouterextend routes home home function alert home page new router backbonehistorystart pushstate true implemented silmilar fix overidding popstate refreshing page things cleared edit tested android native browser works fine chrome phone", "d": "6/2013"}, {"body": "also anyone needs fix need changing core add code window popstate function backbonehistorylocationpathname windowlocation windowlocationhref", "d": "6/2013"}, {"body": "tbranyen anything wrong passing model collection instance directly template ie without cloning attributes using template", "d": "6/2013"}, {"body": "domchristie often best way go usually defined highly useful methods model", "d": "6/2013"}, {"body": "jashkenas thanks perhaps documented way provide template model", "d": "6/2013"}, {"body": "actually nt think best way providing model encourage using methods complicated conditional statements template nt place kind logic keep simple possible advice provide attributes", "d": "6/2013"}, {"body": "quick side note using call function view context rarely need pass anything since use inside template favorite way go think elegant", "d": "6/2013"}, {"body": "try setting contenttype client request instead trying server solved problem guess correct client decide encoding sent", "d": "6/2013"}, {"body": "need model fulfillment handler promise take look singleline plugin note due save still need use either", "d": "6/2013"}, {"body": "lost hours instanceof failing issue within nodemodule tree thankfully cleared", "d": "6/2013"}, {"body": "adding reset parameter fetch", "d": "6/2013"}, {"body": "think suggestion hash parameters great way go issue taken months using backbone find technique would possible add sentence main docs", "d": "6/2013"}, {"body": "jeremy right however behavior makes possible initialize object invalid parameter later throws validate making valid changes see example var new person name ivan vashchenko age undefined metojson object name ivan vashchenko age occupation farmer meon invalid function model error consolelog error child cid attributes object changing false previousattributes object changed mesave name alter ego person age negative false seems validation could useful initialization well", "d": "6/2013"}, {"body": "know bit dated worth would find useful feature numerous libraries detecting back button presses none least none ones tried work backbone backbone rely mechanisms stack overflow thread asking party solution backbone builtin mechanism though obviously better", "d": "6/2013"}, {"body": "thanks", "d": "6/2013"}]