[{"title": "tests running", "body": "shows spec expect skip fail running tests locally spec expect skip fail looked back past days see happening strictly new problem idea benjamn", "num": "138", "d": "6/2013"}, {"title": "address emfile many open files errors clean runs", "body": "cc jeffmo", "num": "137", "d": "6/2013"}, {"title": "onclick broken ios", "body": "ios safari really nt want clicking anything tag known issue way fix putting empty onclick attribute nodes wish emit click events yep presumably emit click ios ensuring click event actually reachable ios device stack overflow link points also issue elements associated elements order behave clickable label must also include empty onclick attribute", "num": "134", "d": "6/2013"}, {"title": "consider allowing unmounting", "body": "let people invoke seems harmless currently throw theory cleared unmounting backward compatibility reasons aside get better clearing asynchronous callbacks unmount seriously consider clearing unmounting", "num": "133", "d": "6/2013"}, {"title": "jsx overwrites modules without relativize", "body": "encountered issue demoing airbnb today steps repro create dir create regular js module containing contains run build js files alongside jsx common use case tool observe reactjs gets overwritten file throws exception manifests time pass something x js require react js files get overwritten confusing think really need turn magic tool unless relativize provided includes debranching relativizing module names sort thing jsx desugaring happen", "num": "131", "d": "6/2013"}, {"title": "reactnativecomponent throw invalid property names", "body": "dompropertyoperationssetvalueforproperty complain invalid properties coworker confused silently ignored", "num": "130", "d": "6/2013"}, {"title": "maybe interpolate within jsx attributes", "body": "would cool useful compiled similar though looks like fighting uphill battle", "num": "129", "d": "6/2013"}, {"title": "write docs reactprops", "body": "", "num": "127", "d": "6/2013"}, {"title": "id selection", "body": "search nt find related issue go apparently react today still hijacks dom element id nt gotten chance try yet rendering bit unpractical css wondering rather using attribute like datareactuid performancecompatibility issue motivation behind using id internally target elements instead attribute sure still possible use classes bit think one less quirky gotcha like would make react much appealing", "num": "125", "d": "6/2013"}, {"title": "pending state updates may confusing", "body": "incremented new state stored finishes refactoring never increment twice probably confusing maybe nt bug fix behavior instead updating thisstate immediately still updating ui later right ca nt think situations thisstate sync ui problem vjeux suggested open issue probably easiest fix updating though", "num": "122", "d": "6/2013"}, {"title": "getting jsx syntax play nicely jslint", "body": "playing around library trying use jsx syntax wondering guys get play nicely jslintjshint jslint obviously like jsx syntax expected identifier instead saw lt javascript syntax error get around jshintrc file", "num": "121", "d": "6/2013"}, {"title": "remove content property", "body": "currently paths child content supporting paths makes code complicated needs really single child content using make sure single text child thought nt look like anymore", "num": "119", "d": "6/2013"}, {"title": "adding incrementally setstate gives approximate numbers", "body": "sure whether intended problem javascript fiddled around example facebookgithubioreact tried code var timer reactcreateclass getinitialstate function return secondselapsed tick reactautobind function thissetstate secondselapsed thisstatesecondselapsed componentdidmount function setinterval thistick render function return reactdomdiv seconds elapsed thisstatesecondselapsed reactrendercomponent timer mountnode result comes intended point adding give numbers hope explains well hieu", "num": "118", "d": "6/2013"}, {"title": "parens inside causes syntax error passed jsxtransformer", "body": "happens jsxtransformer something like gets transformed testdemo case think might related issue", "num": "116", "d": "6/2013"}, {"title": "stop requiring docblock jsx transformer", "body": "pretty annoying noise let stop requiring probably keep simple want make jsx generic standalone might need bit carefully", "num": "114", "d": "6/2013"}, {"title": "commoner grep providesmodule turns vim swap files", "body": "getting errors grunt maybe also causing confusion mine sure right thing perhaps filter file extension hiddenness vim swap filenames start", "num": "111", "d": "6/2013"}, {"title": "come convention forcing binjsx rebuilds without manually clearing modulecache", "body": "cc petehunt zpao", "num": "104", "d": "6/2013"}, {"title": "react throw nested tags", "body": "browsers special things selfclosing tags like react warn throw detects nested reactdomp", "num": "101", "d": "6/2013"}, {"title": "reactrendercomponent tries update components without checking constructor type", "body": "see jsfiddle reported looks like nt checking constructor type figure unmount rather receive new props may fixed master already nt checked yungsters jordow take look add test", "num": "100", "d": "6/2013"}, {"title": "react browserify module issues", "body": "hello using react combining browserify goal able use node modules react using workflow write jsx logic include require installed node modules use reacttools compile jsx js browserify said js would include node modules however compiled jsx reacttools changes something like creates stub file much breaks importing modules seems happens part compiling workflow workaround", "num": "98", "d": "6/2013"}, {"title": "scoped css", "body": "way react renders dom really interesting wondering plan include functionality sets style rendered content without css name pollution something like following initialize style beginning changing key something unique say rendered class name course concern css rule might reach anymore since class name nt actually exists see huge benefit believe worth thinking find solution", "num": "94", "d": "6/2013"}, {"title": "mocking working eventpluginregistry", "body": "since tests injecting plugins name multiple times fail nt happening since", "num": "90", "d": "6/2013"}, {"title": "add demo using coffee files implement react component", "body": "cc petehunt", "num": "83", "d": "6/2013"}, {"title": "support comments jsx", "body": "work comment nt fix actually need happen wanted get file remember call changelog", "num": "82", "d": "6/2013"}, {"title": "binjsx relativize required module ids unless relativize passed", "body": "inspired reduce number assumptions imposed considerably still use grunt tasks poison pick cc petehunt zpao", "num": "80", "d": "6/2013"}, {"title": "grunt test hangs", "body": "nt know going tried cleaning project grunt test hangs without output cpu fan starts spinning probably thinking something hard", "num": "79", "d": "6/2013"}, {"title": "preserve line numbers grunt test", "body": "line numbers reported according package output original file line number", "num": "78", "d": "6/2013"}, {"title": "ordering componentdidmount events", "body": "currently mounting two nested components componentdidmount fires outer element inner one ca nt remember frustrated earlier week expect inner component mounted completely outer component componentdidmount method runs rely children fully mounted agreedisagree", "num": "76", "d": "6/2013"}, {"title": "allow namespacing component names jsx", "body": "", "num": "74", "d": "6/2013"}, {"title": "jsx offline transform exits error code change ubuntu", "body": "basically title says install reacttools using jsx w correctly detect existing files transform upon write watched file jsx exit error code commoner tests pass exact steps followed ubuntu install nodejs via manual instructions ubuntumint install reacttools sudo npm install g reacttools create file helloworldjs described getting started tutorial new terminal jsx w edit helloworldjs add comment notice jsx exited echo prints akrieger vb www ls js helloworldjs akrieger vb www ls htmljs akrieger vb www jsx w js htmljs helloworld akrieger vb www echo akrieger vb www ls htmljs akrieger vb www", "num": "71", "d": "6/2013"}, {"title": "automatically bind scope user provided methods", "body": "common case let make default nt need wrap methods", "num": "70", "d": "6/2013"}, {"title": "jsx whitespace coalescing work like regular html", "body": "currently two escaped entities outputted space removed code expected output hello world actual output helloworld without space hello world var hello reactcreateclass render function return thispropsgreeting thispropsname reactrendercomponent documentbody link discussion google groups", "num": "65", "d": "6/2013"}, {"title": "jsx page gives linked react blog post", "body": "following url found linked", "num": "64", "d": "6/2013"}, {"title": "jsx able watch subdirs", "body": "trying run jsx build subdir seems exit error message publicjs exist however run directly public works without hitch", "num": "60", "d": "6/2013"}, {"title": "name jsx already taken use xjs instead", "body": "jsx file extension extendscript files since least extendscript supports amount syntax compatible facebookjsx syntax since least may jsx faster safer easier javascript", "num": "50", "d": "6/2013"}, {"title": "work compiletojs languages like coffeescript", "body": "jsx nice using compiletojs language change transpiler connect jsx compiler chance adding alternative dom syntax jsx break every compiletojs language something style would nice addition would nice support", "num": "47", "d": "6/2013"}, {"title": "uncaught syntaxerror unexpected token lt", "body": "even basic tutorial code unable get past error thrown error trace uncaught syntaxerror unexpected token lt exportsrun execute runscripts full source running chrome issue also appears firefox", "num": "40", "d": "6/2013"}, {"title": "required", "body": "normalizedeventlistener uses objectcreate unavailable nt added edit longer added common questions doc react site nt say also required sure docs problem good way avoid objectcreate side note little bit pain test since neither website examples include", "num": "39", "d": "6/2013"}, {"title": "docs nt even mention reconciliation", "body": "go site nothing talks synthetic events mock dom reconciliation etc think documenting would huge impact", "num": "37", "d": "6/2013"}, {"body": "recommended workaround time run due caching pick left", "d": "6/2013"}, {"body": "confirming reducing commoner file reading queue makes problem go away", "d": "6/2013"}, {"body": "issue generate markup every node affected browsers", "d": "6/2013"}, {"body": "think affects modern ios browsers well", "d": "6/2013"}, {"body": "style cursor pointer also fixes", "d": "6/2013"}, {"body": "happens onclick also ontouchstart ondblclick attaching onclick event listener dom node fixes issue christopher vjeux chedeau facebook engineer jun pm lee byron notifications githubcom wrote style cursor pointer also fixes reply email directly view github", "d": "6/2013"}, {"body": "least offensive way imo", "d": "6/2013"}, {"body": "benjamn came game plan irc opening specific actionable issues moving forward", "d": "6/2013"}, {"body": "right working problem recently close solution allow changed file plan use almost identical suggestion", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "might best think understanding much confusion seems go away pondering exact thing let read state updates immediately write even ui synchronized first thought let read update immediately realized something allowing reads state enqueueing updates interesting effect encourage aggregate entire update payload single object execute single since mutations hardest things world understand makes sense encourage squeezing small centralized parts code theory better crap one pile opposed spreading code depending feel mutations stance might apply nt thought enough feel strongly either way thought share recent thoughts gone back forth one", "d": "6/2013"}, {"body": "agree isolating mutations one place good sounds like suggesting making statesetting awkward discourage nt make sense continue think finish setstate batching gut feeling right updating immediately may simplify code well less confusing user see turns case", "d": "6/2013"}, {"body": "unfortunately looks hard change due arguments component lifecycle methods take", "d": "6/2013"}, {"body": "fyou must first pass source code jsx transform done everything work perfectly one benefit proceeded jsx preserve line numbers transforms using lint transformed work means jslint even catch variable scope complain defined customized version vim jslint plugin highlights lint errors red underline working getting windows support would something like work lint flow", "d": "6/2013"}, {"body": "jsx watch inplace transform may benefit well tool supports extension directive transform jsx files js files alongside", "d": "6/2013"}, {"body": "thanks much quick detailed response actually running sublime sublime linter obviously tries lint jsx syntax thus keeps throwing errors might take customization vim plugin try create something similar sublimelinter think quite easy extend meantime think run jslint build run jsx transform turn dev nice run background catching silly errors developing thanks hardwork find powerful alternative views backbone", "d": "6/2013"}, {"body": "problem tyronemichael experimenting idea forking jshint build jsxhint something interested please let know saying get done anytime soon try get roadmap least", "d": "6/2013"}, {"body": "would definitely something interested definitely prefer jsx syntax much easier visualize code", "d": "6/2013"}, {"body": "standard behavior javascript unrelated react expected floatingpoint numbers ca nt represented exactly binary approximation used base added got instead artifact rounding happens stack overflow question explaining phenomenon", "d": "6/2013"}, {"body": "ldhieu yea expected behavior js one common solution working decimals eg currency use whole numbers divide number need display number use would stored displaying user would", "d": "6/2013"}, {"body": "confirm works emptyxjsexpressions diff coming soon coordinate zpao pushing separate dependent repos coming day two hope", "d": "6/2013"}, {"body": "fyi safe push esprima point pull updated transform update esprima dependency rev", "d": "6/2013"}, {"body": "thinking substitute cover inbrowser transforms well something like requirejs without inbrowser transforms thought using convention went editors break", "d": "6/2013"}, {"body": "well need consider want jsx general purpose talk pulling project need think get used want keep idea generic plug namespace need keep working right transform takes uses turn also make sure support transforms eg react displayname tool specific also plug pure wrapper nt want support custom components nt concern supporting targets would say transform anything command line inbrowser transform talked something like still nt quite solve multiple transform possibilities without map namespace transforms reactdom would use react reactdisplayname could start accepting list transforms assume jsx separate package ships executable react would depend jsx react could ship set transforms needs maybe create customized executable basically alias whatever", "d": "6/2013"}, {"body": "benjamn fix commoner", "d": "6/2013"}, {"body": "inline elements allowed inside tags blocklevel elements", "d": "6/2013"}, {"body": "react idea though", "d": "6/2013"}, {"body": "react also badly case things like text nodes inside elements outside cell ends throwing error uncaught error framework attempted either insert zero multiple markup roots single location serious error fault framework please report immediately confusing nt help anyone happens setting innerhtml gives two child nodes demo work better messaging", "d": "6/2013"}, {"body": "better error messages think could get dangerous territory quickly though petehunt pretty soon want fullon child validation like xhp", "d": "6/2013"}, {"body": "react also gets confused click table produce output row row row row row row nt inserts instead jquery hardcoded list places stuff differently maybe need", "d": "6/2013"}, {"body": "think got fixed nt confirmed", "d": "6/2013"}, {"body": "confirmed working master", "d": "6/2013"}, {"body": "version commoner upgraded longer relativizes imports default nt think released version yet use install latest master things work", "d": "6/2013"}, {"body": "spicyj totally right hoping anybody hit issue since still working put monday sorry remixz", "d": "6/2013"}, {"body": "spicyj amp zpao thanks eagerly awaiting checkout master smile", "d": "6/2013"}, {"body": "great intuition several us thought opportunity thinking approaches similar suggest one benefits defining style rules css class specifications javascript use full power javascript define styles already ways model dependencies would nt need another language like sass less also mention since also renderingabstraction framework ensure nt polute css namespace also ensure components nt target nodesclass names considered implementation detail concern deeper component", "d": "6/2013"}, {"body": "fixed yungsters via", "d": "6/2013"}, {"body": "things also talked adding would transformed already following optimal handlebar following javascript comments already working within tag", "d": "6/2013"}, {"body": "update got change parser queued allows probably send tomorrow time little extensive testing first trick", "d": "6/2013"}, {"body": "commoner task", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "try grunt test debug click link pass command line gives output", "d": "6/2013"}, {"body": "hang phantom run get far", "d": "6/2013"}, {"body": "nt able reproduce machine suspect something going wrong time try sprinkling statements see far gets hangs", "d": "6/2013"}, {"body": "gets phantom run", "d": "6/2013"}, {"body": "jordow luck still ca nt reproduce happy dig deeper still problem", "d": "6/2013"}, {"body": "idea could generate browserified bundle module dynamically creates tag module source hopefully phantomjs could give right line numbers individual module files", "d": "6/2013"}, {"body": "see would cause way thinking sounds like common sense hope actually true firing callbacks wrong order agree without looking code closely", "d": "6/2013"}, {"body": "think makes sense reasoning one valid reasons wanting use besides integrating frameworks measure something container order accurately children might also want measured containers parent measurement accurate child must already completed", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "imma jump bandwagon great idea", "d": "6/2013"}, {"body": "hypothesis thing keeps commoner exiting mode right option passed means process stay alive files left watch text editors save files deleting rewriting causes fswatch unwatch file original inode inotify cared got discarded one file unwatching causes node think files need watched process exits cc jeffreylin", "d": "6/2013"}, {"body": "opened new commoner issue even though akrieger said commoner tests pass mode test coverage lacking frowning", "d": "6/2013"}, {"body": "nt seem work unless file supposed valid jsx file something transform", "d": "6/2013"}, {"body": "also nt solve issue jsx nt seem static transformation anyway even example getting started tutorial", "d": "6/2013"}, {"body": "another regrettable known issue suspect missing comment top file wo nt necessary soon currently still important cc zpao", "d": "6/2013"}, {"body": "copy pasted sample code exactly", "d": "6/2013"}, {"body": "try something else take single file name command line also show transformations try already", "d": "6/2013"}, {"body": "binjsx jshelloworldjs right thing", "d": "6/2013"}, {"body": "furthermore file named helloworldjs destination directory deleted try run jsx source dest directory either watch go mode", "d": "6/2013"}, {"body": "deletion design least files end output directory actually hardlinked master versions kept default build unlinks relinks files output directory relink fails look like file deleted sure relinking might failing case different device could try relocating cache", "d": "6/2013"}, {"body": "yeah different devices moving cache dir worked thanks", "d": "6/2013"}, {"body": "accidental close sorry still need mitigate cache dir problem", "d": "6/2013"}, {"body": "important cache behavior could disable trade perf ease use tool", "d": "6/2013"}, {"body": "thumbsup petehunt said also take defaulting cachedir srccurrent dir think sass cache", "d": "6/2013"}, {"body": "petehunt pretty important incremental speedup significant codebase size oneline change switch default location wo nt break anything anyone kicking actually considered whether commoner likely ever different device clearly guessed wrong", "d": "6/2013"}, {"body": "wonder requirements need react codebase end users think people want simple syntax transform watcher ala coffee script", "d": "6/2013"}, {"body": "also moving cache dir", "d": "6/2013"}, {"body": "petehunt true nt think pretend fullyfeatured source transform tool nt caching coffeescript sass clearly suggest caching worthwhile enough people original location cache directory moved added support printing transformed code stdin case definitely okay skipping cache logic case", "d": "6/2013"}, {"body": "looking various implementations dir watchers gaze chokidar nodejs pretty clowny pretty easy test case breaks making new directory adding files directory since someone internet wrong wrote another fs watcher last night think way stable try merge new file watcher transformer made couple days ago see happens proof concept akrieger probably something play w hour two", "d": "6/2013"}, {"body": "pretty good results makefile running make every p", "d": "6/2013"}, {"body": "petehunt trolling p", "d": "6/2013"}, {"body": "jeffreylin ca nt wait", "d": "6/2013"}, {"body": "trolling reliable easy reason comparing file mtimes determine need rebuilt bad relative module cache", "d": "6/2013"}, {"body": "akrieger give shot still workinprogress lmk goes", "d": "6/2013"}, {"body": "dear petehunt question deserves careful response know looks longwinded read know everything thinking primary virtue module cache cache filenames hashes relevant input variables source module name build steps configuration properties commoner version change one input variables get different hash find file called module cache completely certain cached file contains right contents believe useful guarantee secondary benefit old versions file nt go away file recently rebuilt revert file version ever built nt rebuild order make promise strategy find way storing distinct versions confident method would come would closely resemble hashing strategy every sensible version control system goal strategies determine whether trust contents file built time past decision completely reliable hashing strategy ever fails must additional piece information neglected incorporate hash none bugs fixed commoner anything module cache inconsistency last time wipe module cache nt qualify made sure left cache untouched background let answer orginal question comparing file determine need rebuilt bad relative module cache yes input variables considered strategy name source file source file allows avoid rebuilding file corresponding output file later know input variables changed meantime build steps configuration properties new files addedremoved whose presenceabsence affects build independent build processes racing update files output directory etc requirement strong nt necessarily rebuild source files appear newer output files see second paragraph requirement strong nt know things accounted automatically hashing strategy strategy good enough maybe know spot signs inconsistency trained predict finally necessary nt think expect new users react much likely attribute subtle problems library instead guessing build tool messed sometimes reinvent wheel know exactly wheel using works quirks guilty defense really trying get us point nt make apologies way tools work know still bugs commoner committed squashing", "d": "6/2013"}, {"body": "hating commoner excellent commonjs build system totally right choice build react jsx project uses commonjs modules transforms problem users think simple syntax transform like coffee reality nt behave way specifically assumes everything desugaring commonjs module assumes specifics implementations path resolution methods requirejs browserify haste different relativizing nt using commonjs define unrelated require function arguments get rewritten weird missing module warnings fire fake modules created actually really freaking awesome tooling commonjs projects really confusing commonjs project using different module resolver annoyances faced rjs tries clever area eval require somewhere insta codebase user since know jsx willing rewrite code find hard predict exactly transform instead jsx relativize option disabled default treated everything like file transformed either cache based mtime continue use option react perhaps even advertise commonera browser packager brigade recommended module system since likely want debranching goodies even though nt know yet", "d": "6/2013"}, {"body": "original issue still needs fixing way still working", "d": "6/2013"}, {"body": "similar closure soy templates might useful retain whitespace instance space clearly two elements single line however seems ideal delete whitespace elements separate lines would still equivalent space", "d": "6/2013"}, {"body": "ugly use following fix", "d": "6/2013"}, {"body": "adambrunner yep way right though use directly definitely something want fix", "d": "6/2013"}, {"body": "fixed rerolled site minutes thanks heads", "d": "6/2013"}, {"body": "files yet also potentially useful running os", "d": "6/2013"}, {"body": "file src builds using subdir public dir node version im os x mountain lion", "d": "6/2013"}, {"body": "installed luck reproducing try mountain lion machine tomorrow thanks report see failure empty file using empty file makes failure go away perhaps try cutting different parts file figure minimal contents trigger failure could problem mountain lion though hunch", "d": "6/2013"}, {"body": "one idea module cache might gotten bad state somehow try clearing deleting directory", "d": "6/2013"}, {"body": "file builds fine use note lack publicjs deleting directory nt work", "d": "6/2013"}, {"body": "know still broken still working fix", "d": "6/2013"}, {"body": "heart", "d": "6/2013"}, {"body": "problem ubuntu yesterday jsx watch worked fine today sshed ran jsx watch reactjs js silently nothing", "d": "6/2013"}, {"body": "hojberg hieu issues w vim file writes caught hacked together feel free try let know works nt time test ubuntu yet might use file watcher repo commoner jsx future", "d": "6/2013"}, {"body": "jeffreylin work like charm thank much", "d": "6/2013"}, {"body": "ok think know issue jsx created lockpid file output directory file still running jsx quick silently", "d": "6/2013"}, {"body": "xjs project nt gotten code since created", "d": "6/2013"}, {"body": "edc think works box jsx actually compiles fear solution parses strings performance implications include parser core bytes wire becomes easier introduce xss vulnerabilities", "d": "6/2013"}, {"body": "well really better writing jsx transform sucks otherwise would nt jsx ever decide change output transform things going fail weirdly edc proposing nice since js things like coffeescript parse choke could maybe jsx transform step look method parse contents turning reacty code additional bytes transformer nt bad", "d": "6/2013"}, {"body": "like zpao proposal could simply syntactical escape jsx transform treat argument string literal instead expression therefore bypass performance implications xss issues jsx transform simply abort argument string literal", "d": "6/2013"}, {"body": "ah get meant style sounds like pretty good idea", "d": "6/2013"}, {"body": "another way support least coffeescript could make component constructor little lenient playing little favorite syntax far something like l reactdom hellocomponent reactcreateclass render gt ldiv class myclass lp hi propsname linput type button onclick onclick value click allow props omitted allow one child since coffeescript bit weird combine multiple props objects one coffeescript turns last line may html quite readable imho", "d": "6/2013"}, {"body": "holmsand may want check coffeekup coffeekuporg pass arrays children today try avoid singlechild nodes save array allocation bet could build jsxcoffee package wraps reactnativecomponents reactdom expose interface pretty easily think approach", "d": "6/2013"}, {"body": "petehunt fond coffeekup eval evilness whatnot arrays children found confusing couple times multiple children disappeared without warning coffeescript gets little bit prettier without anyway wrapping exactly playing react ended something like code autoautobinding thrown sure would nice common humanusable api us preprocessorchallenged users coffeescript reactor reactor isprops val gt typeof val object reactisvalidcomponent val arrayisarray val copyobject gt key val key val wrapcomponent compfn gt children gt coffeescript breaks objects one syntax linput type button onclick onclick value click button combine second object first also allow props omitted class instead classname props null isprops children props copyobject childrenshift props props class props propsclassname props class delete props class childrenlength children children childrenlength compfn props children else compfn props reactordom key val reactdom reactordom key wrapcomponent val reactorcreateclass comp gt newc autobind handlers starting handle key val comp keymatch onhandle val reactautobind val newc key val wrapcomponent reactcreateclass newc", "d": "6/2013"}, {"body": "one common use case jsx embed complex javascript code within xml like javascript thispropschildrenmap function child return child would write coffeescript suggested method would code inside written javascript would nt weird mix coffeescript javascript", "d": "6/2013"}, {"body": "still prefer jsx since html quote react document easier visualize structure dom designers comfortable making changes familiar used mxml xaml imho dsl based coffeescript easily become mess mixture optional parenthesisbraces significant whitespace instance forget trailing comma instead continue compile semantic totally different", "d": "6/2013"}, {"body": "think following made work xml add think best course action make coffeescript dedicated wrapper nicer syntax constructor", "d": "6/2013"}, {"body": "means attributes means children general form name attributes children children optinal", "d": "6/2013"}, {"body": "vjeux would really nice treat coffeescript firstclass citizen csx addition jsx smiley might even able get rid use unreasonable smile", "d": "6/2013"}, {"body": "feel like making jsx work coffeescript would awesome nt think anyone working right class extension could totally nt class support raw javascript", "d": "6/2013"}, {"body": "vjeux cool try put something together topic guys attending meetup get traction", "d": "6/2013"}, {"body": "edc course would nice preprocessor coffeescript well say downsides using dsl upsides well since preprocessor essentially creating entirely new somewhat unfamiliar language gotchas", "d": "6/2013"}, {"body": "edc yes nothing books yet suggestions particular meetups let know", "d": "6/2013"}, {"body": "coffeescript grammar appears fairly welldefined extensible might even easier write transformer xml literals coffeescript implement jsx using esprima", "d": "6/2013"}, {"body": "sure ever make work valid coffeescript p ignore also xml p", "d": "6/2013"}, {"body": "following could made work nt really look like xml anymore prefer version talked earlier", "d": "6/2013"}, {"body": "realized following works fine guess could close issue", "d": "6/2013"}, {"body": "like see issue open solution looks great defeats purpose coffeescript making potentially big chunk code javascript plus kills syntax highlighting really makes designer life hard mistaken whole point jsx write htmllike code js file nt disclaimer still checking react mean fluent please point false assumption making many thoughts matter first happen written lines fully functional templating engine coffeescript long ago mostly coffeekup sweet clean syntax without eval evilness holmsand mentioned please also ignore freakish mess code successful code challenge anything else since tags functions imagine pretty easy convert current reactdom calls plus looks like cleaner html one would actually want write natural syntax highlighting code checking editors downside like many solutions proposed looks clean expense regular javascript neat solutions mind another time second like lots newcomers still bit uncomfortable idea writing markup especially markup needs compiling js files mostly mental barrier idea best worlds writing think need bit reflection open separate issue get acquainted library", "d": "6/2013"}, {"body": "wanted use directly forget jsx vjeux done check integration jsx coffeescript hard coffeescript probably chokes jsx transform works js ast ca nt parse coffeescript order work support needs added one end currently position spend time adding coffeescript support transform maybe could add support suggestion like would likely end different esprima fork would adding work around coffeescript last point reiterate nt use jsx write calls use jsx think makes life easier started thinking solutions write render function separately component markup could live separately nt gone far path happy hear thoughts", "d": "6/2013"}, {"body": "chenglou something like thin wrapper around reactdom make dsly coffeescript", "d": "6/2013"}, {"body": "yeah reply zpao want use jsx though thing makes sense designers actually thinking isolating jsx maybe even css another file way people able create react components contain js jsx css file instead compiling jsx kind insert js file maybe much appreciate guys jsx dropping completely make mustachelike template like said nt experimented react enough provide concrete examples comment get familiar short", "d": "6/2013"}, {"body": "conversation may interest", "d": "6/2013"}, {"body": "chenglou add another datapoint turns idea edc works quite well practice least ie escaping jsx coffeescript compiling resulting js file using react compiler rewritten something like lines code using method far absolute pleasure ie using code like actually like look jsx coffeescript better js since escaping clearly demarks jsx", "d": "6/2013"}, {"body": "indeed deceptive got really bad error message need fix amongst things right scripts need prefixed docblock assist transformer fact missing causing recognize converting jsx much want fix asap sorry causing issues mean time prefixing code docblock fix problem please close condensed version work", "d": "6/2013"}, {"body": "works thanks tremendously", "d": "6/2013"}, {"body": "meet problem maybe warned documentation", "d": "6/2013"}, {"body": "turns normalizedeventlistener actually causing bugs changed internally still working kinks code sync process making way master soon meantime site would help make happen", "d": "6/2013"}, {"body": "ca nt tell answer whether means used presence relied upon go away completely code sync happens shims site might help testing also general repeatedly running using examples test maybe good way loading react nt require explicit build step", "d": "6/2013"}, {"body": "might able go away nt actually know polyfills need live shim vs sham know sure need something completely support even get rid document better testing facebookcom general though making internal changes need rebuild test builds debug minified builds skip minified step run might make cycle little faster could also run automated tests browser start server hit browser nt help shim issue though probably wo nt much use nobuild way test would smart bet could maybe using requirejs maybe node server builds reactjs demand building option", "d": "6/2013"}, {"body": "fwiw builds enough stuff run jasmine specs takes lot less time", "d": "6/2013"}, {"body": "made quick attempt use react necessary parts appears functionprototypebind arrayisarray arrayprototypeindexof needed functions wonder worth including lines code react directly claiming native support edit also datenow replaced new date without hurting anyone", "d": "6/2013"}, {"body": "suppose arrayprototype methods like map functionprototypebind useful render method dying", "d": "6/2013"}, {"body": "good call", "d": "6/2013"}, {"body": "jordow ping", "d": "6/2013"}, {"body": "wondering reconciliation really works like conditions made merge dom efficiently logic behind reactroot n tracking think part reactjs really shines even would use part separate library people want functionality", "d": "6/2013"}, {"body": "find little bit lee post get deeper explanations official docs thank interest patience", "d": "6/2013"}, {"body": "think issue probably shipped defines anonymous module rather one id react unless file loaded asynchronously merged together files using optimizer mismatched anonymous define error thrown means currently file loaded via normal block amd environment example jquery define amd module", "d": "6/2013"}, {"body": "lets reopen ship something works require using browserify standalone option wraps umd build mostly compatible module like keep process simple possible might want try fix one tools", "d": "6/2013"}, {"body": "zpao mean modify browserify generates something works amd module requirejs ability load modules demand different sort philosophy monolithic package browserify produces approaches worthwhile easy support implicitly preferred monolithic package approach far", "d": "6/2013"}, {"body": "mean modify browserify generates something works amd module yea jriecken said right maybe get umd changed gets used browserify much provide name super familiar requirejs maybe need reactjs already react dependencies nt think need ship bundle modules stick single file long actually works", "d": "6/2013"}, {"body": "changed rewrite file version bumps going call good enough close", "d": "6/2013"}, {"title": "typeerror thisbindroutes function", "body": "tried use application firefox kept telling test app html test since seems work websites mine wrong", "num": "2643", "d": "6/2013"}, {"title": "collectionclone supports options deep", "body": "would handy collectionclone supported option perform deep clone shallow collection", "num": "2642", "d": "6/2013"}, {"title": "reconsider amd support", "body": "since amd support rejected back late times since think time reconsider adding support amd backbone underscore hoped backbone would right side javascript history javascript conferences recently paying attention javascript community noticed amd continue play large role especially given native modules part spec reached recommendation status pretty clear es proposals continue revised long see anything browsers reasoning provided jeremy since proved mostly invalid jquery confirmed concerns regarding backwardscompatibility wide support addressed exporting global along amd arguing whether amd viable anymore seen amd supported across web win popular javascript libraries probably notable unfortunate exceptions today backbone underscore addy said best bets spec finalization coverage amd inbrowser modules cjs server", "num": "2641", "d": "6/2013"}, {"title": "optionally update source objects model collection changes", "body": "background like expose backbone collection source data api nice handy data layer tiered node stack however changes made collection reflected source data without binding events manually updating data big deal things get complicated want expose object nested array backbone collection well would solved event bindings nesting collection original source data kind hairy common problem idea backbone collection models updated source data upon changes make life easier could simply construct appropriate collection type requested fly complexity exposing nested backbone objects becomes substantially diminished complaint heard regards backbone scenario try illustrate mess idea var data id foo bar var dataapi new backbonecollection data updatesource true consumer dataapiget set foo new value var mynewmodel bar baz dataapiadd mynewmodel dataapilast set happy true mynewmodelsad false data gt id foo new value bar baz happy true sad false probably riddled problems love discuss caveat one issue already thought updating source objects reflected case models updating source array addremove anything collection seems okay", "num": "2640", "d": "6/2013"}, {"title": "make model methods like prototype collection owns model", "body": "miss much want something like javascript var categorybackbonemodelextend addproduct function id thisget products push id var categoriesbackbonecollectionextend model category addproduct function id thisforeach function cat cataddproduct id makes cry sometimes need lot functions", "num": "2638", "d": "6/2013"}, {"title": "documentation modelget incorrectly says returns value", "body": "intended behavior return reference documentation function states otherwise get current value attribute model seems worthwhile clarify modifying result modify underlying attribute", "num": "2635", "d": "6/2013"}, {"title": "way access raw view options backbone master", "body": "previously set default options merged passed options parameter passed function raw options options passed constructor change changed set parameter object used set means way access raw options passed constructor reason behind using previous behaviour save raw options pass asis subviews without worry options object polluted eg layoutmanager", "num": "2634", "d": "6/2013"}, {"title": "model constructor override url even function already model prototype", "body": "javascript var model backbonemodel function attributes options var defaults var attrs attributes options options thiscid uniqueid c thisattributes extend pick options modeloptions optionsparse attrs thisparse attrs options defaults result defaults attrs defaults attrs defaults thisset attrs options thischanged thisinitializeapply arguments list options attached directly model provided var modeloptions url urlroot collection options url property point customization example sync method override override url model even function url detailed description", "num": "2633", "d": "6/2013"}, {"title": "collection model executed blank object scope", "body": "example even though instance method backbone executes blank object collection method forced stateindependent collection question expected instance method class run every instance method", "num": "2630", "d": "6/2013"}, {"title": "collectionindexof problems issorted true", "body": "using set true collection argument comparator work would expect ultimately think issue lies designed argument comparator related nt think works collection argument comparator think root problem thought think would great defaulted true collection defined comparator", "num": "2629", "d": "6/2013"}, {"title": "validation object construction", "body": "giving validating model would expected validation also happens demand validation object construction javascript var todo backbonemodelextend defaults completed false validate function attribs attribstitle undefined return remember set title todo initialize function consolelog model initialized thison invalid function model error consolelog error backbone creates new todo object though embedded error logs remember set title todo callback never invoked due fact constructor function first invokes set initialize perhaps preinitialize one could refactor", "num": "2628", "d": "6/2013"}, {"title": "give modelset parse option", "body": "collection counterpart set allows provide parse option run parser function processing collection object handy bootstrap data want build collection wont go fetch function reason model object nt provide option parallel collection seems inconsistent omitted edit upon inspection reset still respects parse option", "num": "2627", "d": "6/2013"}, {"title": "accept applicationjson", "body": "think backbone send accept applicationjson header fetching models inform server type content send", "num": "2626", "d": "6/2013"}, {"title": "merging models recursively", "body": "encountered issue trying update model collection partial data model collection one attributes using method options hoping nested collection merged instead completely replaced new value problem current method simply replacing attribute value considering possible merge current attr instance feel would desired behavior slightly changed check whether recursive merging desired possible passed options reason included additional option nt want break existing functionality replaces nested collection instead merging similar request reported already opinion proposed solution nt generic enough merged backbone already created patch wrote tests looks like working really well push fork minute issue pull request consider", "num": "2624", "d": "6/2013"}, {"title": "inconsistency event parameters", "body": "depending whether call different arguments passed event since behavior specified documentation appears unintended used via second parameter seems redundant also available via maybe parameter replaced something likes way event triggers would behave similar fashion", "num": "2623", "d": "6/2013"}, {"title": "surrogate interferes collectionset accepting arrays model subtypes", "body": "extend injects surrogate prototype chain place instance superclass result always returns false becomes problem collectionset attempting determine passed hash model resulting behaviour highly undesirable jsfiddle demonstrating issue code replaced instanceof check attribute check know hash contain attribute course general solution", "num": "2621", "d": "6/2013"}, {"title": "memory leak listeners stoplistening implementation", "body": "profiling code memory usage surprised come upon looks like memory leak backbone implementation looked issues appears since jashkenas original implementation might missing something since nt seem others come across yet new test case snippet showing behavior console output nt caught current test case since calling without arguments correctly clear object order clean correctly also store event name callback listeners like events going submit patch change consideration missing thanks", "num": "2619", "d": "6/2013"}, {"title": "pass results collectionwhere view", "body": "hi would like pass result collectionwhere key model passed view problem result collectionwhere array models whereas would need kind tojson call convert model objects something view code handle many thanks dan", "num": "2618", "d": "6/2013"}, {"title": "enhancement collectionadd regarding add events sent adding array models", "body": "calling array models event triggered many times models array enhancement could possible also trigger extra events implementation event triggered loop events sent index event triggered loop events sent way views example create fragment dom receive addstarted event add subfragment dom time receive add event eventually inject whole fragment document receive addended event", "num": "2617", "d": "6/2013"}, {"title": "call method undefined", "body": "uncaught typeerror call method undefined getting error console", "num": "2616", "d": "6/2013"}, {"title": "backbone model fires change event twice", "body": "started working backgridjs week ago discovered model saved twice listening calling change event view basically table user edit whenever user updates cell value want push server defined change method calling every time cell updated problem facing id model saved twice calling change event pass wait true modelsave change event fired thrice something wrong missing something obviuos help would greatly appreciated code var territory backbonemodelextend initialize function backbonemodelprototypeinitializeapply arguments thison change function model options options amp amp optionssave false return modelsave var territories backbonecollectionextend model territory url jsbookingsjson var territories new territories var columns name bookingid label id editable false cell backgridintegercellextend orderseparator name bookingtime label time cell string name bookinguser label name cell string name reservedate label date cell string name bookingemail label email cell string var grid new backgridgrid columns columns collection territories gridlistento territories change function alert territoriespluck bookingid help would greatly appreciated", "num": "2615", "d": "6/2013"}, {"title": "triggering event different callback function fails using object parameter", "body": "triggering event different callback functions fails events callbacks added object parameter test extend object backboneevents methods var extend name backboneevents var foo function consolelog foo var bar function consolelog bar aon log foo log bar works aon log foo aon log bar atrigger log logs bar nt lock foo", "num": "2614", "d": "6/2013"}, {"title": "issue collectionset going one nested level parse", "body": "real world issue came across let say top level model collection collection coffee class job extends backbonemodel constructor gt items new items super parse attrs gt itemsset attrsitems parse true omit attrs items class item extends backbonemodel constructor gt subitems new subitems super parse attrs gt subitemsset attrssubitems parse true omit attrs subitems class items extends backbonecollection model item class subitem extends backbonemodel class subitems extends backbonecollection model subitem try correct data structure place runs item identity check thing fact nt correct model setting values becomes issue depends model ultimately used feel like fairly consistent advocated pattern dealing nested modelscollections another case temporary model creation causes issues preferred solution would say anything coming parse already general model format allowing going back able assume model identity checked based need otherwise caseywebdev top head know roughly revision look get need get case working short term done way", "num": "2612", "d": "6/2013"}, {"title": "backbonemodelprototypeurl longer function", "body": "hi tried upgrading nt see anything changelog certain nt overwritten property instance behavior property changed understanding always function thanks", "num": "2610", "d": "6/2013"}, {"title": "new collectionrefresh method alias fetch reset true", "body": "wondering general interest collectionrefresh method function alias replacement collectionfetch reset true passing options object seems pretty inelegant solution", "num": "2608", "d": "6/2013"}, {"title": "collectioncreate success handler longer receives raw ajax response", "body": "prior backbone calling collectioncreate new model would receive three arguments success callback model raw response options get model seems due change create method backbone optionssuccess function resp optionswait collectionadd model options success success model resp options backbone optionssuccess function model resp options optionswait collectionadd model options success success model resp options see optionssuccess defines resp parameter hence ends sending model first two arguments collectioncreate success handler", "num": "2606", "d": "6/2013"}, {"title": "view initialize master version nt set thisoptions used", "body": "call configure removed released func exciting task pushing user options thisoptions breaking change related comment master unhelpful makes mention thisoptions longer exists options special meaning eg model collection id classname attached directly view see exhaustive list", "num": "2605", "d": "6/2013"}, {"title": "expose backboneobject backbonebaseobject use base object", "body": "think initalize extend methods pretty useful object usually baseobject like projects javascript var baseobject function options thisinitializeapply arguments extend baseobjectprototype backboneevents initialize function options selfpropagating extend function backbone classes use baseobjectextend backbonemodelextend also added events see know couple trivial lines ready using adding documentation would allow people aware useful tip think good idea accept pullrequests glad help", "num": "2601", "d": "6/2013"}, {"title": "provide consistent xcsrftoken support better backbone security", "body": "bit hiccough drupal services module suddenly decided restful services creating vulnerable xcsrf see conversation security fix drupal require modification restful clients grab token add token headers step fiddly one means multiple code changes assuming good practice always include token backbone encourage possibly facilitate setting headers solution include backbone calls wrap jqueryajax would lovely could simply something like startup think leave backbone include header ajax calls", "num": "2599", "d": "6/2013"}, {"title": "missing documentation promises", "body": "hey noting deprecation notice deprecation notice jqxhrsuccess jqxhrerror jqxhrcomplete callbacks deprecated jquery prepare code eventual removal use jqxhrdone jqxhrfail jqxhralways instead wondering plan mention promises", "num": "2597", "d": "6/2013"}, {"title": "destroying backbone model collection", "body": "hi everyone got problem app recently wen wana destroy model get amessage call method destroy undefined used methode fetch get informatio collection knowing worked wen used table delete rdv deleteentity function e consolelog deleteentity starts var var item ecurrenttarget var id itemdata id", "num": "2596", "d": "6/2013"}, {"title": "problem router namedparam", "body": "replaced escaperegexp think line change", "num": "2594", "d": "6/2013"}, {"title": "event memory leaking", "body": "seems array leaking every change collection adding array model using backbone along angularjs populate collection using ajax change selected attribute models according ui state like toggle ids also using jquery page tried see events pushed array method called", "num": "2593", "d": "6/2013"}, {"title": "fetching model api id definded", "body": "save model using post request sent api expected api returns following json console shows error id defined see id json end still work", "num": "2592", "d": "6/2013"}, {"title": "historynavigate breaks anchors inner links opera", "body": "navigating anchors link wrong page example site source repeat bug click page link back main page logic jsscriptjs file backbone history starts backbonejs v underscorejs v downloaded official sites", "num": "2588", "d": "6/2013"}, {"title": "missing request method sync events", "body": "sync events request sync error identify method currently called sent server think method create update patch read delete important thing example want generate error messages automatically create syncstatuslabel listens events displays current status request pending error success display proper status message label know method message", "num": "2586", "d": "6/2013"}, {"title": "add sync error event model", "body": "think many cases could useful event default example want display error messages something went wrong saving data server request event set pending message sync event set success message error messages workaround", "num": "2584", "d": "6/2013"}, {"title": "events section classes documentation", "body": "suggest add events section documentation every class wo nt collect code documentation event triggered example", "num": "2582", "d": "6/2013"}, {"body": "may use new operator instantiate router use stackoverflow questions like", "d": "6/2013"}, {"body": "see previous tickets plugins extensions add extra deep model features otherwise", "d": "6/2013"}, {"body": "hi timmywil use backbone underscore amd time without extra support added using backbone app include use global use shim configuration requirejs works fine requires nothing extra", "d": "6/2013"}, {"body": "thank bringing conversation brave brave man requirejs user would fantastic everyone adhered developer ideologies going happen would really nice backbone collection different modules could required separately silly twojs instance requires backbone namespace take advantage backboneevents braddunbar backboneunderscore easily shimmed problem using package manager like jam makes task completely trivial however one gets little bit trouble certain usecases compile optimize depending module dependency tree looks run loadorder problems shim shimming sham works mostly great would love backbone amd compliant end everyone going switch angular anyway amirite", "d": "6/2013"}, {"body": "would really nice backbone collection different modules could required separately silly twojs instance requires backbone namespace take advantage backboneevents one backbone rather small whole breaking bank size two backboneevents enmeshed rest source easy delete things nt want use things however one gets little bit trouble certain usecases compile optimize depending module dependency tree looks run loadorder problems shim recommend using include backbone separately either include separate file vendor code personal preference dependency rules vendor code complex way application code", "d": "6/2013"}, {"body": "like know reason supporting amd even better umd commonjs amd stay near future", "d": "6/2013"}, {"body": "instead staying way supporting amd marionette pattern building standard core file amd version core file nt see reason ca nt always amdjsbackbone amdjsunderscore", "d": "6/2013"}, {"body": "thanks discussion stated adding explicit support particular module loaders makes harder support quote jeremy javascript ever gets real module system module system deployed cross browser support meantime backbone perfectly usable amdumdetc", "d": "6/2013"}, {"body": "thanks discussion stated adding explicit support particular module loaders makes harder support first particular module loaders referring dealing javascript libraries already support amd secondly actually true anyway said exporting global along amd means behavior nt affect nonamd loaders hard support javascript ever gets real module system module system deployed cross browser support probably take years meantime amd supported best way help developers logic inherently flawed meantime backbone perfectly usable amdumdetc true either comments pointed best practice using amd production concatenate files compile together possible backbone without modification", "d": "6/2013"}, {"body": "true either comments pointed best practice using amd production concatenate files compile together possible backbone without modification assure time via option similar", "d": "6/2013"}, {"body": "braddunbar specified load jquery cdn even concatenating main concern think understand edit reiterate perfectly usable although would argue perfect enough backbone better pointed inaccuracy statement without responding points real reason nt want let leave hope like satisfied", "d": "6/2013"}, {"body": "hmm nt think loading jquery cdn affect concatenatingminifying backbone javascript", "d": "6/2013"}, {"body": "braddunbar nt think saw edit answer question loading jquery cdn using loader backbone wait load backbone first time used", "d": "6/2013"}, {"body": "timmywil yeah definitely possible know build scripts gotten little bit trouble past end got figured also imagine ton usecases broken amdbackboneunderscorejquery braddunbar regards break backbone thing think misunderstood intention idea course size negligible keeping modules separate interoperable using module system package manager figure details needs component seems number standalone products within backbone could benefit separate codebases know nt really matter argument likely change", "d": "6/2013"}, {"body": "timmywil yea missed edit sorry work fine cause appreciable performance difference use cases feel free alter source understand point splitting source entirely different worms separate conversation entirely sorry trying address one thing time", "d": "6/2013"}, {"body": "braddunbar understand cake", "d": "6/2013"}, {"body": "braddunbar recommending use script tags nt seem like best solution nt really respond arguments", "d": "6/2013"}, {"body": "timmywil think resistance futile seems backbone wo nt support amd hmmm wonder underscore forked lodash perhaps time backbone fork", "d": "6/2013"}, {"body": "zowens see official fork", "d": "6/2013"}, {"body": "philfreo nt really add anything amd right thinking like real fork la lodash", "d": "6/2013"}, {"body": "added minimal amd implementation", "d": "6/2013"}, {"body": "nt think understand questionissue", "d": "6/2013"}, {"body": "sorry js var categorybackbonemodelextend addproduct function id thisget products push id var categoriesbackbonecollectionextend model category var categoriesnew categories products products products categoriesaddproduct want model methos available collection owns model call model method collection want execute every model collection understand", "d": "6/2013"}, {"body": "best solution probably use invoke", "d": "6/2013"}, {"body": "returns javascript value behaves javascript values array object get pointer string number common case backbone get value either way expected thing javascript array object value", "d": "6/2013"}, {"body": "jblz need return copy attribute value easily override return copy attribute", "d": "6/2013"}, {"body": "wookiehangover thanks knowing expect direct assignment attribute half battle", "d": "6/2013"}, {"body": "hi nicoburns definitely many reasons change read also still reference original options argument fine give shot", "d": "6/2013"}, {"body": "seems already fixed", "d": "6/2013"}, {"body": "property needs constructor case would totally bizarre instanceofthecollectionaswell define model separately fine", "d": "6/2013"}, {"body": "hey jeremy thanks responding docs might date following since specifies using instance method little confused instance method nt running scope implied collection also contain polymorphic models overriding property function returns model var library backbonecollectionextend model function attrs options condition return new publicdocument attrs options else return new privatedocument attrs options", "d": "6/2013"}, {"body": "oh quite right nt think docs ever correct let fix em", "d": "6/2013"}, {"body": "looking docs actually correct slightly unclear fixed needs constructor function model javascript constructors allowed return objects value instance hence example code work still needs called constructor function going access rest collection breaks", "d": "6/2013"}, {"body": "makes much much sense thanks clarifying", "d": "6/2013"}, {"body": "simple test case illustrate problem perhaps misinterpreted docs functions nt expected work comparator hope helps javascript var integer backbonemodelextend defaults value var integers backbonecollectionextend model integer comparator function return value value var test function var ints new integers var lt intsadd new integer value", "d": "6/2013"}, {"body": "see previous tickets brief override create cleaner", "d": "6/2013"}, {"body": "defer caseywebdev doability think certainly reasonable api parity models collections parsing thanks opening issue etler", "d": "6/2013"}, {"body": "implementation pretty straight forward think major question reason also would happen key val provided instead attribute object", "d": "6/2013"}, {"body": "sounds good case cause snag top head notice order events love see pr implementation thoughts", "d": "6/2013"}, {"body": "great love take stab", "d": "6/2013"}, {"body": "actually going open ticket well came across though assume agree wookiehangover api parity would nice come across cases makes sense using parse handle nested data using mentioned ticket", "d": "6/2013"}, {"body": "tgriesser nt know missed issue agree discussion use case think compelling use case parsing bootstrapped data well nested parsing also also using workaround said also parity argument well", "d": "6/2013"}, {"body": "actual use case needing", "d": "6/2013"}, {"body": "want call existing model object nested data pulling model wanted functionality several occasions coffee class book extends modelsdocument constructor gt info new infomodel chapters new chapterscollection super parse attrs options gt infoset attrsinfo options chaptersset attrschapters options omit attrs info chapters work yes works simpler api parsing nested data collections models though issue works far", "d": "6/2013"}, {"body": "ajax library instance jquery accept setting depends data type however always explicitly set model fetch even backbonesync method", "d": "6/2013"}, {"body": "already sent default jquery passing option set", "d": "6/2013"}, {"body": "like idea backbone traditionally support nested attributes box done projects hijacked project level handle case works flawlessly going close issue move discussion pr", "d": "6/2013"}, {"body": "tjoekbezoer thanks opening issue made test case ca nt replicate describing event model collection signature model error options whether triggered", "d": "6/2013"}, {"body": "correct situation follows code path trigger event happens bubbles collection case however use prevents new model added collection first place validation fails situation actually trigger event sends argument instead error message change see mean", "d": "6/2013"}, {"body": "tgriesser confusion trying avoid p tjoekbezoer see specifically outdated diff comments discussion agree make consistent", "d": "6/2013"}, {"body": "caseywebdev say nt validate new models via comes first argument event debatable think confusing inconsistent argument error message one case attributes error prone especially using event listener collection listen collection model events", "d": "6/2013"}, {"body": "attributes validated line backbone position validating trying persist definitely confusing listen receive completely different parameters based situation", "d": "6/2013"}, {"body": "little offtopic perhaps appropriate", "d": "6/2013"}, {"body": "nt think necessary happens save", "d": "6/2013"}, {"body": "different effect nt prevent invalid model added collection think invalid model introduced via rejected completely default otherwise must manually removed collection event might bit tedious error prone", "d": "6/2013"}, {"body": "tbh think needs removed deal many combinations circumstances alternatives simpler clearer going", "d": "6/2013"}, {"body": "good point would nt idea remove event triggering collection well let model handle", "d": "6/2013"}, {"body": "problem case model created function scope accessible anywhere else wo nt since invalid must pseudoproxy event", "d": "6/2013"}, {"body": "hi recurse see describing nt think causing problems reason ca nt use", "d": "6/2013"}, {"body": "surrogate cause problem collectionset however correct use extend nt previously understand constructor method give exact semantics attempting achieve via traditional javascript inheritance idiom updated jsfiddle demonstrate correct way following suggestion nt think bug although might qualify documentation gap appears plenty code uses mistaken approach used aside generally preferable make call backbonemodel first last line constructor function", "d": "6/2013"}, {"body": "depends result want achieve great flexibility put much code like super call", "d": "6/2013"}, {"body": "implementation using definitely effort stay simple fast going quite expensive check every context every event see matches object agree leaky situation love see pr keeps speedy cleaning lingering objects also consider capturing various argument combinations test", "d": "6/2013"}, {"body": "thanks thoughts caseywebdev good test improvements agree paying attention performance seems like stoplistening optimized noarg case single arg two arg etc anyone else thoughts concerns", "d": "6/2013"}, {"body": "try underscore invoke method", "d": "6/2013"}, {"body": "fantastic thank much", "d": "6/2013"}, {"body": "hi loicshub thanks pointing backbone generally tries stay away type lifecycle event order let user add like nice quite easy override methods trigger events careful nested adds though", "d": "6/2013"}, {"body": "try irc google group debugging help github tickets maybe forgot require underscore", "d": "6/2013"}, {"body": "sounds like probably asking backgrid issues", "d": "6/2013"}, {"body": "tgriesser backgrid uses backbonejs events problem facing calling change event help would greatly appreciated", "d": "6/2013"}, {"body": "problem nt backbone events likely binding many listeners disposing existing listeners properly etc another application specific issue causing model change multiple times backbone events well tested without specific reproducible test case could issue backbone library much especially without familiarity backgrid likely better help tickets stackoverflow post quick fix could wrap change handler debounce", "d": "6/2013"}, {"body": "thanks tgriesser insights", "d": "6/2013"}, {"body": "another possibility server setting id attribute response save triggered second change event case issue change callback simple checking changed attribute model deciding needs resync server", "d": "6/2013"}, {"body": "uh friend ca nt object key twice javascript one keys win", "d": "6/2013"}, {"body": "ca nt one key javascript object replaces case need different way", "d": "6/2013"}, {"body": "doh sorry stupidity today course case nt write code less hours sleep", "d": "6/2013"}, {"body": "tbh causing much grief overriding take special action predefined subcollectionmodel properties agree enforcing base level object huge step forward allowing us ditch temp models way got around past attaching parent collection hash checking data cascaded ridiculous sure looking get working saw temp models used long time", "d": "6/2013"}, {"body": "mostly looking place time assumed usable existence checking see could patch together maybe getting rid temp models going back functionality regards", "d": "6/2013"}, {"body": "temporary models definitely nasty removing features good way deal handling data endpoints nt control huge feature backbone allows define small clean parse methods easily translate data model want work data model server expects regardless whether includes namespace wrapper experience much useful allows entire class applications otherwise difficult structure", "d": "6/2013"}, {"body": "definitely agree handling data variety endpoints important feature backbone convinced creating temporary models mixing data formatting alongside constructing proper nested modelscollections best possible solution might another method would better suited handle one cases creating temporary models know whether data formatted properly feels like hack static method modelcollection seems like work well would prevent need temp models", "d": "6/2013"}, {"body": "caseywebdev braddunbar either get chance want see think thinking could good solution issue temporary models issue case potentially return wrong model still providing outlet handling data endpoints plus gets rid looks like could good compromise sure cleaned decent bit get working deepnested case needing", "d": "6/2013"}, {"body": "thing wo nt currently work polymorphic models", "d": "6/2013"}, {"body": "see lines default definition problem nt set either directly one required generate model url", "d": "6/2013"}, {"body": "using edge might", "d": "6/2013"}, {"body": "sorry nt post code set property looks like must thanks", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "pretty much always pass options object choice really nt think alias option going benefit backbone community whole", "d": "6/2013"}, {"body": "well lot readable especially new devs using backbone", "d": "6/2013"}, {"body": "feel full collection refresh common task one warrants method passing options objects around manipulate method execution nt nice june casey foster notifications githubcom wrote pretty much always pass options object fetch cfetch reset true success function error function choice cfetch reset true done funciton fail function really nt think alias option going benefit backbone community whole reply email directly view github", "d": "6/2013"}, {"body": "always found jarring model could removed collection without event called case readability definitely subjective case super easy extend base class something like use projects furthermore deferred objects guaranteed implementations", "d": "6/2013"}, {"body": "yep plenty readable think introducing similarly named optionsmethods cause confusion", "d": "6/2013"}, {"body": "workaround use model new mymodel modelsave attributes success function model resp options using collectioncreate much nicer though perhaps something wrong", "d": "6/2013"}, {"body": "see method call arguments expecting please provide jsfiddlecodepen produce case true", "d": "6/2013"}, {"body": "yes look two lines see success callback passes parameters success callback highlighted takes one argument resp actually model results model resp parameters identical success handler create method finally called tried respmodel success callback yielded true try create jsfiddle would need public rest api order know could use", "d": "6/2013"}, {"body": "response vanilla backbone object think old method place using modified", "d": "6/2013"}, {"body": "nah gets wrapped pull request incoming", "d": "6/2013"}, {"body": "check fix", "d": "6/2013"}, {"body": "ah see bad likely regression went", "d": "6/2013"}, {"body": "yup thanks idea release near future would prefer maintain build", "d": "6/2013"}, {"body": "correct case master read info documented next release like add back extend base view like", "d": "6/2013"}, {"body": "thanks opening issue robvon first discussed length handful issues since secondly edge version linked cautionary use risk text accompany assure change well documented time next release cut comment go along comments tend explain going code asis rarely take time justify changes previous versions changelog issues serve understand frustrating find changes like promise worked next release", "d": "6/2013"}, {"body": "thanks yup risk thought mention found coded way works edge version looking see another issue changed compared edge decided close enough regards rob sam breed mailto notifications githubcom sent tuesday june documentcloudbackbone cc rob von nesselrode subject backbone view initialize master version nt set thisoptions used thanks opening issue robvon first discussed length handful issues since secondly edge version linked cautionary use risk text accompany assure change well documented time next release cut comment go along comments tend explain going code asis rarely take time justify changes previous versions changelog issues serve understand frustrating find changes like promise worked next release reply email directly view github", "d": "6/2013"}, {"body": "thanks opening issue opensas quick search see requested couple times similar forms short backbone nt strive class library current plans expose baseobject sort great backbone helping team grok build constructorbased javascript applications exposing functionality directly nt scope backbone seeks provide users", "d": "6/2013"}, {"body": "thanks lot reply try better search previous issues next time", "d": "6/2013"}, {"body": "guess global setting would need ridable per collectionmodel clients calling multiple services", "d": "6/2013"}, {"body": "thing application issue maybe pull request would better start conversation", "d": "6/2013"}, {"body": "sigh always amazes quick folk close issues significant vulnerability backbone docs code currently encourage folk walk right sorry think issue", "d": "6/2013"}, {"body": "erichbschulz sorry felt like rushed close optional property backbone object help security hoping would provide pr illustrating intention", "d": "6/2013"}, {"body": "well hoping conversation would last slightly longer two minutes like fixed code like probably dont time generate backbone patch leaving issue table may encourage time greater familiarity backbone code write one goal would make easy implement xcsrftoken headers hard noone tells people start getting hacked backbone gets bad security reputation reference headers main backbone dock emulatehttp guess copying fiddling function maybe good starging point", "d": "6/2013"}, {"body": "backbone tries stay agnostic persistence channel someone using socketio backbonesync postgresql nodejs backbonesync would use special case definitely think way go especially ever want send ajax request app outside backbone crud methods", "d": "6/2013"}, {"body": "csrf nt anything database persistence though argument insecure default insecure valid might useful least include note docs providing standard convention encourage basic security practice could nice addition though", "d": "6/2013"}, {"body": "going depend ajax api though setting jquery ajax going different superagent others agree tbranyen say nonissue backbone responsibility outline bazillion security holes need accounted web app", "d": "6/2013"}, {"body": "need feed trolls guys", "d": "6/2013"}, {"body": "caseywebdev oh right fair point", "d": "6/2013"}, {"body": "mmm well call fellas code secure webdevs busy folk usually scrambling tie layers rapidly changing technology usable experience default implementation methods wide open door easy close bunch devs wont thank making easy secure either find thread got hacked think issue logic one liner looking header implementation looks like need construct array header get beforesend create interate array setting one headers need", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "haha well thats ok", "d": "6/2013"}, {"body": "better handled global jqueryajax options level server requests secure backbone models", "d": "6/2013"}, {"body": "discussion going adding promises backbone core feel free chime", "d": "6/2013"}, {"body": "actually red herring backbone relies options passed methods referred issue methods question aliases methods marked deprecation success error options deprecate warnings likely application nt byproduct backbone use jquery", "d": "6/2013"}, {"body": "wookiehangover cool thanks clarification notice jquery doc nt error messages", "d": "6/2013"}, {"body": "try without removing collection automatically remove collection destroyed jaap sat jun pm ouzza notifications githubcom wrote hi everyone got problem app recently wen wana destroy model get amessage call method destroy undefined used methode fetch get informatio collection knowing worked wen used table delete rdv deleteentity function e consolelog deleteentity starts var var item ecurrenttarget var id itemdata id consolelog id var model thatcollectionget id consolelog model destroy model modeldestroy remove model collection thatcollectionremove model search row var row thatfindrow item remove row data table thatotablefndeleterow thatotablefngetposition row consolelog deleteentity end reply email directly view github", "d": "6/2013"}, {"body": "sounds like actually finding model also please use stackoverflow mailing list issues github tickets development library debugging application code", "d": "6/2013"}, {"body": "hi qiangtou right matches replaced treated named parameter run test suite regexp mention fails quite tests", "d": "6/2013"}, {"body": "nt please nt open ticket unless test case share us want help debugging app try irc channel mailing list", "d": "6/2013"}, {"body": "indeed problem method backbone query library davidgtongebackbonequery reproductible test case", "d": "6/2013"}, {"body": "run problem models nt id attribute", "d": "6/2013"}, {"body": "hi szelga pretty sure recently fixed would mind giving latest version master shot", "d": "6/2013"}, {"body": "unfortunately nt help", "d": "6/2013"}, {"body": "gotcha would mind explaining bit detail problem", "d": "6/2013"}, {"body": "ok tested issue seems affects opera checked opera firefox chromium sorry insufficient information test site backbonejs application loads static pages data apipagesindexjson displays via custom view class navigate pages binds backbonehistorynavigate function aclick event see jsscriptjs file opera could repeat bug open browser link refers click page link back main page link main page refers whereas firefox chromium application works intended opera bug grateful workaround", "d": "6/2013"}, {"body": "issue described also present page chrome", "d": "6/2013"}, {"body": "chromium version built ubuntu", "d": "6/2013"}, {"body": "szelga want help still able reproduce problem adding failing test case test suite pull request would wonderful", "d": "6/2013"}, {"body": "sorry seems failed following steps works disregard previous comment", "d": "6/2013"}, {"body": "added custom sync temporarily", "d": "6/2013"}, {"body": "hi understand use case somewhat think falls rule uses need know model state synced server rest use custom sync method used events displaying error messages quite lot method usually irrelevant", "d": "6/2013"}, {"body": "ok", "d": "6/2013"}, {"body": "echo wrapping custom sync like totally great way go fact would make great potential wiki page backbone methods may want wrap useful extension patterns", "d": "6/2013"}, {"body": "better way wrap", "d": "6/2013"}, {"body": "seems like asking already exists error event triggered case failure", "d": "6/2013"}, {"body": "yep event already included let us know think something needed", "d": "6/2013"}, {"body": "ohh thanks nt found part code", "d": "6/2013"}, {"body": "ohh found catalog builtin events section", "d": "6/2013"}, {"body": "btw nt think right place", "d": "6/2013"}, {"body": "thanks tgriesser worked", "d": "6/2013"}, {"body": "think valid event default", "d": "6/2013"}, {"body": "think valid event default sorry nt get meant please explain details", "d": "6/2013"}, {"body": "think event would nt useful validation checked frequently sending event constantly asserting model valid would annoying behavior currently model nt actually entering invalid state attempted invalid incorrect attributes nt sent server closing let lie braddunbar think", "d": "6/2013"}, {"body": "would say event already covers case passing assume would since would nt otherwise get events event triggered valid state passing probably nt care validity anyway", "d": "6/2013"}, {"body": "quite", "d": "6/2013"}, {"body": "sending event constantly asserting model valid would annoying behavior maybe would possible store previous state send event model switched state passing validate true assume would since would nt otherwise get invalid events use form validation values set without event triggered calling way know model became valid events calling passing also nt think passing valid use case defaults validate set false fighting defaults passing everywhere manually every time would strange convenient", "d": "6/2013"}, {"body": "use form validation values set without validate true invalid event triggered set calling isvalid way know model became valid events calling isvalid sure even nt use listen event check", "d": "6/2013"}, {"body": "problem", "d": "6/2013"}, {"body": "hi juliansantaana simple enough achieve one liner code nt think common enough pattern add support functionality method", "d": "6/2013"}, {"body": "poke", "d": "6/2013"}, {"body": "thanks opening ticket yamsellem read see prior discussion backbone nt expose details underlying http method details via api something need know application best bet might wrap cases nt need know underlying mechanism called", "d": "6/2013"}, {"body": "spent ages debugging issue caused please update change log", "d": "6/2013"}, {"body": "bit retro fix since couple versions ago patch pull incoming", "d": "6/2013"}, {"body": "addressed", "d": "6/2013"}, {"body": "shadowsilver way could provide boiled example behavior describing hard disentangle issue stuff going fiddle", "d": "6/2013"}, {"body": "ok simplified example posted earlier version version show briefly meaning example simple model selected property collection encloses collection onchange listener cycle model set false ones true exception item fired listener set selected property second item haschanged method says also first item changed already called handler previously hope clear", "d": "6/2013"}, {"body": "issue still valid fiddle still fails latest backbonejs repo", "d": "6/2013"}, {"body": "probably question better documentcloud room irc stack overflow issue tracker nt generic support usage questions", "d": "6/2013"}, {"body": "fyi created extension smartly replaces tojson method sync run otherwise problems templates", "d": "6/2013"}, {"body": "apply method related sync save modeldestroy issue", "d": "6/2013"}, {"body": "moving conversation", "d": "6/2013"}, {"body": "yeah collectionfindwhere nt seem work used findwhere collectionmodels function", "d": "6/2013"}, {"body": "yup using nonissue", "d": "6/2013"}, {"body": "fix problem", "d": "6/2013"}, {"body": "ticket reopened reproduced consistently leaving backbone site pressing back button following code used reproduce load page click google link back code uploaded testing click google link back button android phone wwwgooglecom windowonerror function message url linenumber alert message url linenumber return true function var router backbonerouterextend routes home home function alert home page new router backbonehistorystart pushstate true implemented silmilar fix overidding popstate refreshing page things cleared edit tested android native browser works fine chrome phone", "d": "6/2013"}, {"body": "also anyone needs fix need changing core add code window popstate function backbonehistorylocationpathname windowlocation windowlocationhref", "d": "6/2013"}, {"body": "tbranyen anything wrong passing model collection instance directly template ie without cloning attributes using template", "d": "6/2013"}, {"body": "domchristie often best way go usually defined highly useful methods model", "d": "6/2013"}, {"body": "jashkenas thanks perhaps documented way provide template model", "d": "6/2013"}, {"body": "actually nt think best way providing model encourage using methods complicated conditional statements template nt place kind logic keep simple possible advice provide attributes", "d": "6/2013"}, {"body": "quick side note using call function view context rarely need pass anything since use inside template favorite way go think elegant", "d": "6/2013"}, {"body": "try setting contenttype client request instead trying server solved problem guess correct client decide encoding sent", "d": "6/2013"}, {"body": "need model fulfillment handler promise take look singleline plugin note due save still need use either", "d": "6/2013"}, {"body": "lost hours instanceof failing issue within nodemodule tree thankfully cleared", "d": "6/2013"}, {"body": "adding reset parameter fetch", "d": "6/2013"}, {"body": "think suggestion hash parameters great way go issue taken months using backbone find technique would possible add sentence main docs", "d": "6/2013"}, {"body": "jeremy right however behavior makes possible initialize object invalid parameter later throws validate making valid changes see example var new person name ivan vashchenko age undefined metojson object name ivan vashchenko age occupation farmer meon invalid function model error consolelog error child cid attributes object changing false previousattributes object changed mesave name alter ego person age negative false seems validation could useful initialization well", "d": "6/2013"}, {"body": "know bit dated worth would find useful feature numerous libraries detecting back button presses none least none ones tried work backbone backbone rely mechanisms stack overflow thread asking party solution backbone builtin mechanism though obviously better", "d": "6/2013"}, {"body": "thanks", "d": "6/2013"}, {"title": "actions events executed incorrect handler", "body": "multiple route handlers active sharing event name would expect event belonging target controller executed however route handlers pass event always execute deeply nested route illustrate mean take look jsfiddle click link event target thus alert testroute clicked instead alerts testsomethingroute goes link would expect alert applicationroute defined thus bubble", "num": "2923", "d": "6/2013"}, {"title": "bound properties embercomponent yielded content get render updated", "body": "pass bound property component nt rendered yield example create component html yield use template like always render even set changed set jsbin demonstrates issue", "num": "2917", "d": "6/2013"}, {"title": "emberjs broke nested routes seems", "body": "updating also latest nightly buildsemberjscom simple nested routes nt seem work anymore even using simple code docs ember tells route exist accessing via switch back everything works perfectly fine seems really strange ca nt really find mistake making side edit ok found error access whereas latter accessed nt really know intended change could nt find anything changelog big deal would still interesting find intended", "num": "2915", "d": "6/2013"}, {"title": "emberdata restadapter pagination filtering", "body": "hi opinion ember strongly need one additional solution talked people also looking internet problem recurrent table like image top filter row using problem nr imagine table users system imagine users system case ember download users server unsense additional pagination parameter necessary pagination set rows download rows user user click page donwload rows propose add parametter pagination find dsrestadapter solve way ofcourse important solution problem nr pagination user fill filter field value send query server download new data also need soltion problem nr user multiselect rows click action change status blocked selected rows read query send table refresh guess best soltuion code jquery sure best technical way ember solve know really important without cant really use ember advenced software coding", "num": "2910", "d": "6/2013"}, {"title": "typical stack depth ember deep", "body": "know raise discussion site stack overflow privately please bare raised issue chrome team stack depth rendering ember views typically goes way frames causes new awesome flame chart feature lot less useful think progress made ember team needs lobby chrome team raise stack depth something typical ember apps say frames ticket move cut massive call stacks", "num": "2909", "d": "6/2013"}, {"title": "binding updating handlebars helper switching objects", "body": "brand new emberjs terminology may wrong think may issue registerboundhelper passing helper want access multiple properties object passed output html believe written correctly however switch objects type resulting output nt change initial render jsfiddle explain ca nt", "num": "2908", "d": "6/2013"}, {"title": "emberselect nt update valuebinding properly", "body": "fairly sure emberselect issue ember data issue got emberselect supposed update relationship model set first time works every subsequent time property gets set object relationship nt get updated calls fired set nt called hard explain jsbin change select grouping updated first time relationship stops working though property set say nt set properly manually set relationship following way js console works every time js appitemsget firstobject iget name appgroupsget firstobject appgroupsget lastobject iset group works iset group works also nt think ember data issue works called properly using emberselect nt replicating functionality would expect let know provide additional information thanks", "num": "2907", "d": "6/2013"}, {"title": "force fetch model route dynamic segment", "body": "understand route dynamic segment model hook executed fetch model access route directly transition another route via eg linkto helper template defined source looking find reason ask would like force always fetch model even though dynamic segment route accessed directly", "num": "2904", "d": "6/2013"}, {"title": "possible bug potential inconsistence emberview", "body": "made two code examples demonstrate code emberjs emberjs turns observers controller defined views fire time inserted dom hardly say bug intended way latter unnatural example suggestions btw start discussion forum", "num": "2903", "d": "6/2013"}, {"title": "transition parameters disappear retry", "body": "machty migrating existing login system using using embercasts authentication part encourtered following issue parameterized authenticated routes transition login route login successfully retry performed original transition parameters overridden process getmatchpoint would cause problem keep params name rather overriding oldparams name oldparams name set undefined see alternate implementation fixes problem might implications", "num": "2897", "d": "6/2013"}, {"title": "update contributingmd jsfiddle jsbin using", "body": "log transcript console", "num": "2896", "d": "6/2013"}, {"title": "confusing emberview methodon documentation", "body": "documentation confused earlier today exactly optional target passed argument set callback good way give function access object triggering event target parameter used callback becomes third argument reading documenation thought rad exactly need appcontactview emberviewextend didinsertelement function document keyup thisdocumentkeyupcallback willclearrender function document keyup documentkeyupcallback function e emberrun function var escapekeycode stated docs believe passed instance controller callback inside callback actually resulting following error uncaught typeerror object method get could nt find exactly needed ended defining variable callback anonymous function handle event reference instead nt mind using workaround like clear docs submitting pr anything wrong clear docs", "num": "2895", "d": "6/2013"}, {"title": "handlebars wo nt get loaded properly using grunt build tool rc", "body": "using grunt buildtool application running ember handlebars moment everything works like charm sake async route transitions wanted migrate app use newest ember handlebars taken ember startet kit soon replace links new libraries see following two errors raised seems initialized see grunt merging handlebars library file detailed description issue please go thread stackoverflow included whole screenshot chrome console want post whole information please let know", "num": "2894", "d": "6/2013"}, {"title": "resolver property application class uppercase", "body": "", "num": "2893", "d": "6/2013"}, {"title": "computed property setters wrapped super", "body": "fiddle demonstrating issue first alert fires second one throws error super defined broken commit see func redefined funcwrappedfunction purposes getting correct number arguments checking funclength however func called instead thisfunc wrapper hence super defined reference commit first implemented super computed properties discussion", "num": "2890", "d": "6/2013"}, {"title": "applicationroute best way handle global deserialization", "body": "project need deserialize parameters routes application asking handle deserialization applicationroute best solution exist better one", "num": "2889", "d": "6/2013"}, {"title": "proposal use events object controllers routes", "body": "emberroute event handlers inside object defined route property talking stefanpenner machty amp kselden propose thing controllers event handlers defined directly controller would continue work emit deprecation warning example", "num": "2884", "d": "6/2013"}, {"title": "arraywillchange collectionview throws exception child views removed", "body": "would appear bounds check childviews loop would fix problem state exception thrown", "num": "2881", "d": "6/2013"}, {"title": "di amp ioc container desperate need api docs guides", "body": "x container api wip guide update docs throughout utilize container di", "num": "2880", "d": "6/2013"}, {"title": "tests embermetal failures many older versions firefox", "body": "note work tests intermittently fail succeed depending perspective emberrunnext multiple calls emberrunnext share coalesce callbacks run loop callbacks coalesced run loop ember run scheduled tests end test emberrundebounce invoke timer invoke timer firefox browsers lt seem run", "num": "2878", "d": "6/2013"}, {"title": "ember outlet issue handlebars", "body": "issues outlet handlebars change version works fine ran issue earlier today found someone else twitter problem trek suggested filing issue nt know something wrong actual issue", "num": "2877", "d": "6/2013"}, {"title": "adding interpolated stringsproperties", "body": "working project using ember found tons crazy code properties concatenate strings getters place clean threw together library allows ember string interpolation automatically keeping bindingsobservers wanted see interest would eventually bringing ability ember core point implementation looks like javascript apppersoncontroller emberobjectcontrollerextend firstname bilbo lastname baggins fullname firstname lastnameinterpolate", "num": "2875", "d": "6/2013"}, {"title": "cache issue delete items todo example", "body": "test bug example tutorial page see video steps reproduce add items todo example delete items add new item deleted items appear", "num": "2871", "d": "6/2013"}, {"title": "route default model hook use resolver", "body": "default route hook model looks model current namespace seems like use resolver like controllersviewsroutestemplates unless missing something", "num": "2870", "d": "6/2013"}, {"title": "router swallow error deactivate hook", "body": "trying update recent router changes facing blank page issue debugging thanks machty turns due unexpected error deactivate hook problem error swallowed hard track sister issue", "num": "2866", "d": "6/2013"}, {"title": "move html element animationally emberjs", "body": "would like move element animationally ui bindings think thingif exists please tell move mean move element coordinates xy means change parent element element want move additonaly want add animation element moving would like follows", "num": "2861", "d": "6/2013"}, {"title": "new async router linkto helper nt seem handle routes multiple placeholders", "body": "define route one url placeholder like defining linkto helper like causes following error load jsbin illustrating issue offending code commented html block", "num": "2859", "d": "6/2013"}, {"title": "route better tearing multiple renders", "body": "currently call emberroute route saves function teardown view rendering route exits function executed however call subsequent calls simply overwrite last view rendered cleaned suggest teardown methods saved array executed exit reverse order added addition iteration occur overridable method named route wants something custom good spot", "num": "2857", "d": "6/2013"}, {"title": "getmodel regression longer accepts camelcase lookup", "body": "used work router facelift works", "num": "2854", "d": "6/2013"}, {"title": "notify breaking handlerbars release", "body": "tested ember first time today followed along getting started guide weird bug though seems like handlebars released new version nonrc compiler version suppose ember requiring states finally ran debug build run outlet get compilation error name environmentopcodes args name something without everything works fine also everything works fine would nice could stated getting started page says download handlebars website also really runtime exception production crash handlebars trying escape quotes around outlet name whatever tested chromium firefox latest thanks", "num": "2849", "d": "6/2013"}, {"title": "embermutablearray pushobjects update passed single object", "body": "documentation seems indicate supported however appear update iteration template work jsfiddle", "num": "2848", "d": "6/2013"}, {"title": "templates nt work svg elements", "body": "might simply unsupported may good idea anyway may better idea render eg something filing issue least wycats seemed think work wanted make sure tracked somewhere result get uncaught error notsupportederror dom exception chrome safari least see js bin demo error", "num": "2847", "d": "6/2013"}, {"title": "document rendering considerations overriding template", "body": "favor", "num": "2846", "d": "6/2013"}, {"title": "facelift router errors thrown error hook swallowed", "body": "scumbag machty reports issues provides jsfiddle general reminder event gets fired hooks return rejecting promise throw error throws error currently gobbled promise one hears thinking good solution would case invoke default error handler installed logs error throws settimeout seem good", "num": "2844", "d": "6/2013"}, {"title": "uncaught error object path mai could found destroyed", "body": "jsfiddle nested resources javascript approutermap function fooroute barroute bazroute use rendertemplate render template say html outlet going foobar works fine transitioning foobaz render bazindex transitioning back foobar produces error object path mai could found destroyed making clones template w different names eg outletfoo outletbar outletbaz route rendering clone fixes issue", "num": "2842", "d": "6/2013"}, {"title": "textfield binding issue set null", "body": "seeing issue similar latest ember jquery set content controller model containing null one attributes textfield view clear note works correctly textarea view", "num": "2840", "d": "6/2013"}, {"title": "emberrunsync fails typeerror", "body": "advice website call method anytime need changed state propagate throughout app immediately without repainting ui lot emberrunsync statements application code regretfully updating latest version get lot errors call sunsync typeerror read property queues null obviously code emberrunsync function backburnercurrentinstancequeuessyncflush backburnercurrentinstance null advices remove runsyn statements code hope everything ok proper way call synchronization", "num": "2838", "d": "6/2013"}, {"title": "firefox emberjs working", "body": "firefox autoupgraded allow emberjs version elements app function get error firefox console javascript tries load ember template everything works fine chrome safari new version firefox raises particular error really hard diagnose exact issue predictions leads guesses welcome desperate get fixed", "num": "2836", "d": "6/2013"}, {"title": "ie bug", "body": "getting error line character running website ie error going finally try catch added comment line breaks end function var onend thisoptions amp amp thisoptionsonend currentinstance thiscurrentinstance nextinstance null", "num": "2826", "d": "6/2013"}, {"title": "bower install fails", "body": "installs fine find handlebarjs bower cloning git githubcomcomponentsember bower cached git githubcomcomponentsember bower fetching ember bower checking ember bower copying c bower error componentshandlebarsjs found errors summary componentshandlebarsjs found nt know whether ember bower win problem packages working fine hope posting right thread change thing", "num": "2823", "d": "6/2013"}, {"title": "unable pass string handlebars helper", "body": "jsbin variable undefined", "num": "2820", "d": "6/2013"}, {"title": "debugging run loop stacktraces dev friendly", "body": "get better stack traces something goes wrong emberjs issue facing great let dig stack trace couple questions want answer event caused happen code exploded context let click first line chrome debugger see forth error really tell run loop fired error generated somewhere finally handled onerror method answer questions", "num": "2817", "d": "6/2013"}, {"title": "registerboundhelper causing issues update uncaught ca nt use appendchild outside rendering process", "body": "experiencing bugs registerboundhelper specifically dealing passing properties model belongsto properties parent parent updated isdirty state changing created jsbin recreates issue code contains bound helper bound helper calls view helper view view dynamically select template determine property display bug happens link helper used belongsto property like parent model updated like updating parent causes rerender think appendchild called ember handlebarsboundview throws error appendchild called outside render state reported issue earlier also rerender ember handlebarsboundview view update called destroyed view registerboundhelper uncaught ca nt use appendchild outside rendering process", "num": "2816", "d": "6/2013"}, {"title": "registerboundhelper causing issues update", "body": "tried creating jsbin recreate behaviour think bug happens things truly async bug appears connected bound helper use emberhandlebarsregisterboundhelper avatar person options style optionshashstyle optionshashsize small fixme implement avatars url imagesdefaultavatars style png new handlebarssafestring helper might referenced like contact property another object bug happens contact null object contact property changes isdirty object committed bug get uncaught typeerror call method html null followed code best bug happens simplehandlebarsview happens rerender called thisstate destroying rerender function switch thisstate case prerender case destroying break case inbuffer throw new embererror something tried replace expression inserted dom case haselement case indom thisupdateid emberrunscheduleonce render update break code goes various run loop queues runloop calls rerenderifneeded emberhandlebarsboundview ending back simplehandlebarsview update called problem thismorph null set null destroy method think nt know source code well enough say sure could queues run loop sync update appearing destroy could recreate jsbin unfortunately experiencing problems registerboundhelper happen using fixtureadapter", "num": "2815", "d": "6/2013"}, {"title": "return promise model hook route block ui rendering", "body": "return promise model hook ember handle return wrapped value setupcontroller directly content property controller problem ember nt render anything promise resolved show example make jsfiddle would plaisant user display view data loading", "num": "2814", "d": "6/2013"}, {"title": "inconsistent usage vs template name resolution via container", "body": "using helper name template immediately stripped replaced template looked container looks dotseparated version using helper name template passed asserts name contain looks slashseparated version container container used register template used via call must registered otherwise used must registered exhibited following jsbin container versions registered issue applies cases template looked container resolved via embertemplates believe correct fix would container normalize function always convert template name passes tests wonder would breaking change", "num": "2813", "d": "6/2013"}, {"title": "inconsistency currentpath route name", "body": "may may bug think inconsistency would nice addressed nested resources route resets resource example approutermap match resource parent path filterid reports resource child route child parent child would child route child however number places shows parent child instead one logtransitions output another currentpath applicationcontroller biggest problem want transition current route different model rather difficult wo nt work get error route parent child existing seems either currentpath match actual route meaning reset path resource transitionto able handle full path top nesting workaround", "num": "2812", "d": "6/2013"}, {"title": "helper broken view insidegroup", "body": "view includes use helper causes exception thrown specifically provided function within emberhandlebars called helper jsbin demonstrates bug note uses experimental group helper turn flag remove helper template example works alternately remove helper prepend properties also works", "num": "2809", "d": "6/2013"}, {"title": "provide access itemcontrollers", "body": "reopened project using provide css classes removes ton overhead required figure index item especially list large would use", "num": "2808", "d": "6/2013"}, {"title": "bind view property breaks view rendering", "body": "view class property binding sub fields causes view rendered null context example enough cause associated template render null context result data problem appears instantiation binding attempts access property time neither view controller parentview set null point appears cached way rendering view simple jsbin showing issue note template render list names comment line following uncomment one example works expected", "num": "2807", "d": "6/2013"}, {"title": "document happens route defines model hook", "body": "odd issue bindings working errors eventually figured due wrong controller type used behavior automatically picking controller type correct lead pretty hard debug situation route define model hook instead defines model setupcontroller fiddle shows issue pretty well wondering route code coffeescript appactionsnewroute emberrouteextend setupcontroller controller model set transaction get store transaction model get transaction createrecord appaction summary test set currentmodel model controllerset model model better way uses model hook adds transaction setupcontroller hook would happy change code told downfalls method either way perhaps kind assertion setupcontroller attempt set controller type trade could longer use variable name although suspect anyway thoughts", "num": "2804", "d": "6/2013"}, {"title": "change attribute name using viewattributes property", "body": "want make views facebook xfbml tags problem tag take care attribute reserved property name emberview bind layout attribute emberview attributes property something like javascript xfbmlviewextend tagname fb like layoutattr buttoncount example attributebindings width href name layout property layoutattr showfaces action colorscheme", "num": "2803", "d": "6/2013"}, {"title": "containerview deprecation warnings", "body": "seems simply creating view inside trigger deprecation warning created jsbin demonstrate note nt use templatename error goes away like see fixed use pattern discourse thanks cc stefanpenner", "num": "2799", "d": "6/2013"}, {"title": "bound helper throws exception unrendered template block", "body": "following template throws uncaught typeerror call method html null full example actual code less silly able work around referencing property controller", "num": "2795", "d": "6/2013"}, {"title": "emberview disabled attribute binding updating", "body": "bug updating attribute disabled emberview following fiddle shows order demonstrate console please check save button disabled disabled still removes disabled disabled attribute however put disabled disabled back", "num": "2794", "d": "6/2013"}, {"title": "add views containerview template containing linkto custom controller wo nt work", "body": "use case need add custom views container view using specific template controller unfortunately works nt linkto helper template soon add ca nt set custom controller anymore html lt remove line work gt linkto go page linkto lt p gt link template lt p gt always get following exception following part ember code emberlinkview somehow container set case created fiddle showing issue", "num": "2790", "d": "6/2013"}, {"title": "proper way get view instance except using emberviewviews", "body": "afaik way get view instance using obviously debugging use production code really hope public api let different views communicate others typical use case suppose two views called involved models state transition management ui componants stay application entire lifecycle button placed button trigger action whenever users click method show hidden initially one way use using jquery directly method nt like showhide behaviors handled method defined inform act behavior another way using emberviewviews let viewb job also try solution ideal think really want elegant solution make independent views communicate others good example property controllers like way much use code like truly helpful make sense", "num": "2787", "d": "6/2013"}, {"title": "return promise model hook", "body": "understanding could return promise model hook template would get rendered model hook resolved understanding clearly wrong illustrated jsbin returning model hook deferred object gets returned model hook navigate another route execution continues ember wait promise resolved resolves correctly come url ie resolved model available template bug understanding model hook work incorrect", "num": "2785", "d": "6/2013"}, {"title": "registerboundhelper dependentkeys bindings nt seem work time", "body": "following helper defined use thusly template content correctly rerendered whenever voters change dependentkeys work undefined binding established remove dependent key works fine summing seems like eitheror option either dynamic bindings dependentkeys work time way", "num": "2784", "d": "6/2013"}, {"title": "support un loading inlined css rules emberview", "body": "tl dr want add ability define custom css rules particular loaded unloaded automatically view insertedremoved dom understanding emberview short term solution towards web components ability inline template required view practically speaking pretty close goal selfcontained reusable components dropped project one key thing miss web component shadow dom ability load additional css rules custom element currently created reusable component wrapped minimum supply file contains subclass well user would manually drop css pipeline component work correctly proposal add concatenated property perhaps subclass concatenated injected document style rules view element inserted dom removed view element destroyed concatenated property either supply string containing multiple rules array rules implemented prototype project currently working seems work quite well basically involves overriding append something along lines section remove alternative insert element inside view element means cleaned ember automatically tears element believe invalid html seems work browsers tested course property empty means little performance impact majority views use feature like said put subclass considerations browser compatibility trick work across supported browsers browsers remove associated rules element removed dom better via api performance impact performance scoping web components using shadow dom components supplied css rules scoped component care scoping okay rules applied globally leave user scope rules properly adding class viewrules example really want scoping always prepend css rule view html id might edge case comes styling root element view hybrid approach introduce keyword replace view html id agree put together pr", "num": "2781", "d": "6/2013"}, {"title": "ember release emberdata unable load data", "body": "latest version ember unable load data api following result seen js console v appverticalfind class type function store class isloaded true isupdating true constructor vobjectat class id null store class reference object changestosync object transaction appverticalfind class id store class reference object statemanager class changestosync please help", "num": "2780", "d": "6/2013"}, {"title": "linkto could work around", "body": "usual case business application table show entities link row see detail entity course wrap tr tag tag impossible could cool linkto helper add onclick contained tr handle click row", "num": "2779", "d": "6/2013"}, {"body": "specific route handler never target controller default target controller router starts leafmost deeply nested active route gives chance handle route handle event router gives parent chance forth reaches applicationroute fiddle shared behaving exactly expected documentation confusing please post link issue", "d": "6/2013"}, {"body": "ah well case controller implement method name event event sent template route actually true probably updated guess kind unexpected see scenarios would useful well route handler actually target though fiddle call inside reason would alert testsomethingroute quite clearly want", "d": "6/2013"}, {"body": "eltehupkes thanks created pr general idea firing semantic event router without necessarily knowing caller route handle eg keyboard shortcut firing event handled differently depending current route", "d": "6/2013"}, {"body": "think bug yield version context component selectedval known used comonents yet reading inline docs seems works like expected cc wycats", "d": "6/2013"}, {"body": "actually discovered ember nyc training given last week time wycats tomdale seemed think bug reported saw nobody else opened issue yet", "d": "6/2013"}, {"body": "seems like bug think desiredexpected behavior would outer context default context rendering block", "d": "6/2013"}, {"body": "ok bad needs changed also doc though case nt get difference view helper", "d": "6/2013"}, {"body": "important block contents component retain original context inherit context view purely abstraction perspective code inside block knows nothing view context may want eventually provide ways block arguments component send information back explicitly way work think template contextcontroller layout contextcontroller helper would switch template context component template internally called layout would use layout contextcontroller", "d": "6/2013"}, {"body": "bug obviously nt want breaking apps links omit slash fix shortly", "d": "6/2013"}, {"body": "actually globegitter discover bug existing app href slashless urls code generate kinds urls somehow perhaps nt worthwhile fix since encourages style url naming nt consistent history locations work", "d": "6/2013"}, {"body": "feels mostly like emberdata point likely move", "d": "6/2013"}, {"body": "could rewrite use recursion walk view tree rendering already done places rendering", "d": "6/2013"}, {"body": "one nice ui paradigm things like closedbydefault elide ember frames leaving application ones allow ember frames expanded would require cooperation chrome team", "d": "6/2013"}, {"body": "kselden likely", "d": "6/2013"}, {"body": "looked last night discovered bug adding dependent keys registerboundhelper using argument properly handling case kselden also requested support global dk paths", "d": "6/2013"}, {"body": "would possible tell route reload data maybe inside activate method something trying problem seems got ta get renderer wait run right tries render breaks nt told wait operation done", "d": "6/2013"}, {"body": "use case assuming using code uses code routerjs repo bit dense since handles many use cases url transitions named transitions retry etc basically find route within transition wo nt call", "d": "6/2013"}, {"body": "seems like bug perhaps miss documentation change kselden idea", "d": "6/2013"}, {"body": "nightire information suspected setup view controller set see result legit observer fired think implies boilerplate code view catch case setupview code didnt change since looks like something different dependency chain", "d": "6/2013"}, {"body": "yes piece setup code committed nt think reason cause issue thanks explanation useful", "d": "6/2013"}, {"body": "ybart thanks reporting mean parameterized authenticated routes mean url transition page reload authenticated route redirects login nt work retries would work originally tried auth route", "d": "6/2013"}, {"body": "authenticated route means route inherits custom appauthenticatedroute redirecting login page overriding beforemodel parameterized means route like user userid yes url transition redirects login fails retry redirects userundefined original url reload authenticated route logged works expected make transition route via linkto transitionto work expected sure understand mean originally tried auth route", "d": "6/2013"}, {"body": "answered questions try fix hours", "d": "6/2013"}, {"body": "machty many thanks left comment old router facelift guide gist earlier please ignore yup seeing issue", "d": "6/2013"}, {"body": "thanks", "d": "6/2013"}, {"body": "requires updated handlebars use works fine could verify ybart", "d": "6/2013"}, {"body": "version handlebars updated works fine maybe contributing documentation updated well admit compilerrevision message confused confused compilerrevision nt thought updating handlebars", "d": "6/2013"}, {"body": "nt believe parameter jquery scope binding passed function thus called dom node ember view use proxy bind method view", "d": "6/2013"}, {"body": "hard coded work revision handlebars ember works handlebars need jump master cherry pick commit", "d": "6/2013"}, {"body": "stefanpenner would nt worth update starter kit emberjscom avoid people run issue said took files actual available starter kit therefore expected work box thanks anyway answer try update master suggested", "d": "6/2013"}, {"body": "starter kit works correctly grunt based template compiler using newer version handlebars", "d": "6/2013"}, {"body": "need improve keep projects sync", "d": "6/2013"}, {"body": "stefanpenner wrote things original post instead posting link stackoverflow nt use precompiler wit grunt need precompile templates stated using buildscript along without problems usage precompiler change paths include files starter kit fails try blank project post result ok", "d": "6/2013"}, {"body": "mbreton good question stackoverflow ask sure tag emberjs provide details example emberjs community uses github issues bugs feature proposals", "d": "6/2013"}, {"body": "ok find stackoverflow question", "d": "6/2013"}, {"body": "guess make controllers consistent routes also perhaps code readability seems fair breaking change could bring able call wherever code think call controllersend save", "d": "6/2013"}, {"body": "note mixed feelings continue let sink", "d": "6/2013"}, {"body": "rather see go route get rid events hash route consistency nt see benefits change would however probably missing something rationale behind", "d": "6/2013"}, {"body": "jonnii obliterate controller", "d": "6/2013"}, {"body": "machty almost hilarious sideeffect", "d": "6/2013"}, {"body": "certainly nt ideal destroy method calling nt see one", "d": "6/2013"}, {"body": "emberobject destroy sent mailbox iphone tue jun jonathan goldman notifications githubcom wrote certainly nt ideal destroy method calling nt see one reply email directly view github", "d": "6/2013"}, {"body": "lukemelia event handlers defined directly controller would continue work emit deprecation warning seems kinda bad reason suggests eg perhaps nt deprecated", "d": "6/2013"}, {"body": "addition side effects already mentioned also forces organize code differently way personally feel undesirable prefer properties functions observers grouped purpose change would force group actions together example currently javascript apprankingcontroller embercontrollerextend image support property top voted images topimages function property imageslength action vote image imagevote function image blog post support property top voted blog posts topposts function property postslength action vote blog post postvote function blogpost example javascript apprankingcontroller embercontrollerextend image support property top voted images topimages function property imageslength blog post support property top voted blog posts topposts function property postslength actions events action vote blog post postvote function blogpost sure huge deal sticks also probably good point likely break every app cause frustation users force everyone evaluate refactor every controller well many routes templates edit said opposed sucker code consistency", "d": "6/2013"}, {"body": "throwing maybe intermediate mark controller actions respond events nt really thought would probably confusing newbies thoughts js apprankingcontroller embercontrollerextend image support property top voted images topimages function property imageslength imagevote function image event blog post support property top voted blog posts topposts function property postslength postvote function blogpost event", "d": "6/2013"}, {"body": "always slightly confused inconsistency defining events routes vs controllers agree using events object controllers jun pm bradley priest notifications githubcom wrote throwing maybe intermediate mark controller actions respond events nt really thought would probably confusing newbies thoughts apprankingcontroller embercontrollerextend image support property top voted images topimages function property imageslength imagevote function image event blog post support property top voted blog posts topposts function property postslength postvote function blogpost event reply email directly view github", "d": "6/2013"}, {"body": "bradleypriest guess alternative make inline mixins groupings since mergedproperties javascript apprankingcontroller embercontrollerextend image support property top voted images topimages function property imageslength events action vote image imagevote function blogpost blog post support new mixin property top voted blog posts topposts function property postslength actions events action vote blog post postvote function blogpost", "d": "6/2013"}, {"body": "vote direction deprecate events hash views also valid targets events consistent", "d": "6/2013"}, {"body": "always mixed feelings events hash useful avoid namespace collision however arguably better job distinguishing private internal methods avoid issues instead first place adds level indirection entirely obvious within event hash containing object people need figure get placing event hash routes implies favoritism toward event handling routes controllers many times appropriate handle events controllers consistency important preference events hash remains undeprecated routes target including views require going required controllers views prefer see gone routes", "d": "6/2013"}, {"body": "think coming around wanting deprecate events hash particularly since options avoid api collisions partly adopt underscoring solution dgeb suggesting perhaps enhance logic within fire methods deemed events via logic nt thought hard potentially walk hierarchy see method defined say marked nonresponder via internal apimixin requested method would fired thought", "d": "6/2013"}, {"body": "fivetanley ya tests brittle test browsers scheduler rather utilize tests improved", "d": "6/2013"}, {"body": "jayphelps nt believe belongs core someone else opinion speak said looks useful least looks like might make useful addon", "d": "6/2013"}, {"body": "could part", "d": "6/2013"}, {"body": "lukemelia good idea", "d": "6/2013"}, {"body": "fyi added believe closed", "d": "6/2013"}, {"body": "core welcome close obviously bias think provides daily benefit ember devs provides unique feature would set ember apart even still like hear opinions foragainst possible", "d": "6/2013"}, {"body": "likely issue", "d": "6/2013"}, {"body": "yes", "d": "6/2013"}, {"body": "good catch thomasboyt going take crack fix", "d": "6/2013"}, {"body": "sure give look weekend", "d": "6/2013"}, {"body": "unclear behavior instance fire error", "d": "6/2013"}, {"body": "would possible rethrow errors handler error handler bubble default application error handler considering one", "d": "6/2013"}, {"body": "bloats things error handler able handle started handling errors within hooks handling added still seemed make semblance sense within deactivate seems really weird even bubble happen transition awkwardly stop leaving routes halfexited state continue onward still crappy state", "d": "6/2013"}, {"body": "tp honest nt know right solution problem particular use case unexpected error coming error code error message landing console would right assume error never occur deactivate production idea think must least leave app working state letting user beeing able continue use", "d": "6/2013"}, {"body": "hi use issue tracker bugs feature proposals stackoverflow better place get answers questions", "d": "6/2013"}, {"body": "route multiple placeholders still single model passed linkto need define serialize method route take model turn object like foo bar framework knows update url sent mailbox iphone wed jun pm tom carter notifications githubcom wrote define route one url placeholder like defining linkto helper like causes following error load jsbin illustrating issue offending code commented html block reply email directly view github", "d": "6/2013"}, {"body": "makes perfect sense thank", "d": "6/2013"}, {"body": "lukemelia think may dup happy close mine favor bump mind taking peak confirm", "d": "6/2013"}, {"body": "workmanw yep looks like thing", "d": "6/2013"}, {"body": "lukemelia thanks going close mine favor think basically identified problem proposed solution", "d": "6/2013"}, {"body": "workmanw want collaborate pr", "d": "6/2013"}, {"body": "lukemelia yea would love current thought property route array probably called invoked result append array rather set property lastly would invoked would instead variable names could probably use little thought general idea head", "d": "6/2013"}, {"body": "workmanw agree proposed approach two notes result prepend array teardowns run reverse order appends would like encapsulate method called easily overridden necessary would necessitate different name array property suggested", "d": "6/2013"}, {"body": "lukemelia yea sounds good sorry go dark hours nt already started happy code open pull go", "d": "6/2013"}, {"body": "sounds good workmanw comments machty kselden wycats stefanpenner others", "d": "6/2013"}, {"body": "seems like good plan", "d": "6/2013"}, {"body": "swamped last two days promise get tonight banish community p", "d": "6/2013"}, {"body": "later look forward reviewing", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "closing favor pr", "d": "6/2013"}, {"body": "fixed next release ember come shortly", "d": "6/2013"}, {"body": "suspect documentation wrong tried", "d": "6/2013"}, {"body": "bug specific using single object array pushobjects plural form appear add object array documentation states correctly propagate change view", "d": "6/2013"}, {"body": "looks like documentation error pretty sure takes arrays", "d": "6/2013"}, {"body": "true takes arrays seems like raise exception receives object otherwise leads subtle bug object added leaves application outofsync state thu jun pm peter wagenet notifications githubcomwrote looks like documentation error pretty sure pushobjects takes arrays reply email directly view github", "d": "6/2013"}, {"body": "investigation say probably bug however workaround simple make sure always pass array", "d": "6/2013"}, {"body": "consensus correct behavior happy submit pr strikes options either fully support behavior documentation specifies functionally equivalent raise exception something array passed amp correct documentation", "d": "6/2013"}, {"body": "think correct behaviour array object api easier understand enforce always passing outer array function", "d": "6/2013"}, {"body": "alexspeller thumbsup", "d": "6/2013"}, {"body": "kselden advice might useful", "d": "6/2013"}, {"body": "used work seems like context range svganimatedstring range createcontextualfragment failing cc wycats used app things nt work inline svg xmlns like xlink href using def path easier create emberview custom render update", "d": "6/2013"}, {"body": "imo least better error message rather obtuse failure", "d": "6/2013"}, {"body": "browser error message unfortunately", "d": "6/2013"}, {"body": "seem like browser parser changed would think context range would svgelement viewportelement given example svganimatedstring", "d": "6/2013"}, {"body": "machty yes add something like catch rsvp make simpler finalize chains", "d": "6/2013"}, {"body": "might reservedwordy method name sounds good", "d": "6/2013"}, {"body": "think actually promises spec works theory supposed chain yet another failure callback catch cases", "d": "6/2013"}, {"body": "wagenet yes act saying terminal node chain via public api method would useful would help communicate intent", "d": "6/2013"}, {"body": "nt set template also creates controller instance case parent child using generated outlet controller causes weird recursive case could probably put better warning", "d": "6/2013"}, {"body": "wagenet sure one seems router activeviews identified templatename situation going baz bar route effect one activeview problem start want change route disconnect current one activeviews reference one view removes appendview find parentview see mainly code peter maybe discuss handle issue", "d": "6/2013"}, {"body": "facing bug narrowed appears property view destroyed something else time gets looping set tried setting loop gave error solution return early probably hack nt know side effects may things appear work fine change javascript finishdisconnections function var outlets get outlets var pendingdisconnections thispendingdisconnections thispendingdisconnections null", "d": "6/2013"}, {"body": "provide failing test jsbin", "d": "6/2013"}, {"body": "trying believe fairly easy reproduce ca nt get jsbin work ember example trying create", "d": "6/2013"}, {"body": "working jsbin note however cause error inside run loop would need call outside run loop error occur anyway fix", "d": "6/2013"}, {"body": "strange code call right set values objset propertyname value possible run loop point thanks fast response way second time helped", "d": "6/2013"}, {"body": "welcome trigger run loop probably means bindings property makes useless anyway", "d": "6/2013"}, {"body": "closed fixed", "d": "6/2013"}, {"body": "possibly fix something simple create jsbin jsfiddle demonstrates error point think unlikely still offer support prerelease revision year ago turns something simple uncover fix let us know reopen issue apply fix", "d": "6/2013"}, {"body": "jquery fixed", "d": "6/2013"}, {"body": "add try finally", "d": "6/2013"}, {"body": "actually bug incompatibility backburnerjs", "d": "6/2013"}, {"body": "verified pr", "d": "6/2013"}, {"body": "superseded", "d": "6/2013"}, {"body": "foxgit bower issue ember compontent problem bower installing wrong handlebars version ember fixed run clear bower cache run reinstall ember correct handlebars version see fix details", "d": "6/2013"}, {"body": "command equivalent deleting cache folder manually running command help mentioned deleted manually nonetheless finding windows clear folder structure c userssomeuserappdataroamingbowercache error persists realized bower package npm update anything although update packages running error still persists", "d": "6/2013"}, {"body": "foxgit forgot running windows tried wife laptop running windows successfully installed ember bower command clear cache safe would try creating brand new project see get ember installed bower steps took successfully install node bower windows install nodejs nodejsorg website install bower install msysgit requirement bower see details bottom bower website looks like already git installed nt issue command line open close restart make sure recognized command command line create new folder use test installing ember bower folder must git repo run initialize folder git repository install ember output look something like still nt work may want open issue componentsember repo", "d": "6/2013"}, {"body": "thx extensive answer took liberty skip step certain everything installed properly thx nonetheless clear howto created new folder voila works two questions remain folder git repo test worked fine without git init work project bowerconfigfiles besides bowerrc componentjson edit realized deleting bowerrc install ember via bower project shall investigate tomorrow thx far help", "d": "6/2013"}, {"body": "ember core team managing componentsember repo please report issues", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "huzzah thank referenced well", "d": "6/2013"}, {"body": "teddyzeenny docs need updated", "d": "6/2013"}, {"body": "emberhandlebarshelper registers bound helper want pass property use either want pass string like case", "d": "6/2013"}, {"body": "github issues great place ask questions much better venue stackoverflowcom please remember tag question emberjs said believe identified specific issue way consolemethod works makes quite annoying debug developer ergonomics", "d": "6/2013"}, {"body": "ill go ask nt consider question issue run loop makes emberjs hard debug fix would either documentation explaining solve technical fix like munging stack trace include information make sense jun stefan penner notifications githubcom wrote github issues great place ask questions much better venue stackoverflowcom please remember tag question emberjs said believe identified specific issue way consolemethod works makes quite annoying debug developer ergonomics reply email directly view github", "d": "6/2013"}, {"body": "fwiw also lately feeling debugging experience weakest aspect ember right", "d": "6/2013"}, {"body": "lukemelia confirm", "d": "6/2013"}, {"body": "closing since closed let us know still issues master", "d": "6/2013"}, {"body": "closing since closed let us know still issues master", "d": "6/2013"}, {"body": "ember enter route waiting promise resolve state may render ui prefer actually enter route render route ui immediately instead waiting model load nt return promise instead make controller view aware using approach like", "d": "6/2013"}, {"body": "thank best workaround found return model hook object completely filled url paramaters call internally promise order resolve self fill missing fields example see ps tell goal block ui promise resolution", "d": "6/2013"}, {"body": "goal allow alternate loading ui displayed instead eventually router gain support perroute loading states make even powerful cc machty ebryn kselden", "d": "6/2013"}, {"body": "emberjs handles promises resolves really cool feature recurrent boring task emberjs block ui resolving let developper deal loading state framework could expose property says yes promise waiting resolving", "d": "6/2013"}, {"body": "mbreton believe default situations want router exactly complex common case allow developer opt feel want handle situation", "d": "6/2013"}, {"body": "stefanpenner look like magic behaviour really wanted idea toggle automatic handling good emberjs works normaly default", "d": "6/2013"}, {"body": "kselden expressed interest resolving issues", "d": "6/2013"}, {"body": "ran issue use case guess bottom line returns something ca nt route nested resources thanks including workaround working perfectly hopefully way works gets updated", "d": "6/2013"}, {"body": "note moment property depends list computed property dependencies adding dependent keys related property fixes binding issue breaks view test cases short term work around use possible", "d": "6/2013"}, {"body": "downfalls approach mentioned seems make sense certainly make enhancements documentation nt seem like red flag defining method called accepts argument end immediately overriding make even clear said right around corner pretty powerful router api addition things preserved wo nt specificallydirectly address brought extremely well documented try introduce way obviates would nt want skip hook", "d": "6/2013"}, {"body": "course seem find article reading found pattern mention downfall creating model transaction model hook although chances would longer apply changes made last months switch code operate within model hook point still stands someone decide use setupcontroller something sets model controller automatically created ember stumped sure even correct way place model hook someone like surely try way around hit nice brick wall things nt working expected kind error message things would different fact combination simply fails silently caused much grief", "d": "6/2013"}, {"body": "going close happy consider documentation pr suggestion help others avoid pain went", "d": "6/2013"}, {"body": "indeed possible appxfbmlview emberviewextend attributebindings layoutattr layout layoutattr function return thevalueforlayoutproperty property relevant guide future please ask answerable questions like stackoverflow", "d": "6/2013"}, {"body": "also bumping issue particularly bad lots child views console logging slows dom rendering quite bit found manually assign container reference child view allocate warning goes away", "d": "6/2013"}, {"body": "zackangelo might worth read update document make improvements evening", "d": "6/2013"}, {"body": "fix", "d": "6/2013"}, {"body": "stefanpenner thanks bunch switched using subclass fix also took care deprecation warnings getting result using helper", "d": "6/2013"}, {"body": "seen similar errors threw extra check function moved obviously smartest move try add another example help", "d": "6/2013"}, {"body": "bit upgrading huge change previous versions trying trace source problem difficult given seems involve ember backburner handlebars etc short please let know find kind error also raises interesting problem ember runloop aborts processing queued actions things start randomly failing user encounters error better faulttolerance errors within specific actions would nice least interpretation happens could wrong", "d": "6/2013"}, {"body": "debugging fiddle seems though render queue gets flushed cancel javascript simplehandlebarsviewprototype isvirtual true isview true destroy function thisupdateid emberruncancel thisupdateid thisupdateid null thismorph null gets called flush happens property changed therefore handlebars causes child views destroyed guess like bradleypriest saying check state function might best fix anyone ideas", "d": "6/2013"}, {"body": "backburner bug cancel flush triage would check isdestroyed update", "d": "6/2013"}, {"body": "got issue similar code except var trying display controller ca nt seem work around seeing familiar method views stack trace see though todo seems like good idea", "d": "6/2013"}, {"body": "fixed please reopen", "d": "6/2013"}, {"body": "workaround disable element enable element workaround might good enough differs api docs scroll last section html attributes", "d": "6/2013"}, {"body": "nt work tag nt tag supports property bind boolean attribute use jquery setter supports properties supported element tag nt property wo nt work use instead apply class", "d": "6/2013"}, {"body": "doh thanks fiddle shows working button", "d": "6/2013"}, {"body": "thanks quick response", "d": "6/2013"}, {"body": "ripcurlx order ember objects reference container need given one usually happens container instantiates object first time general avoid using instead create controller container also creating views programattically best use", "d": "6/2013"}, {"body": "find strange linkview asks controller container rather using container think bit", "d": "6/2013"}, {"body": "thanks responses lukemelia exactly mean creating controller container adding container manually also nt happen automatically using createchildview create view nt expect manually try get better understanding stuff works internally able provide pull request hopefully soon right still scratching surface framework", "d": "6/2013"}, {"body": "hi ripcurlx set container pass view class instance see example creating controller container would application load want use controller instance get back container container set properly", "d": "6/2013"}, {"body": "seems closed although documentation guides clearly needed opened focused", "d": "6/2013"}, {"body": "generally speaking would approach either making view action modify controller property view b bound making parent view view view b coordinate two child views solution asking would increase coupling views generally undesirable would contribute poorly designed apps imo", "d": "6/2013"}, {"body": "lukemelia thanks information think agree coupling issue emberjs provide public api design purpose live also interesting solution sure whether bounding properties solve problem see bind property use change want animation state changing well proemberist ca nt see binding property help anyone guidance examples solution suitable case thank anyway", "d": "6/2013"}, {"body": "nightire one solution viewlevel animations use transitions use toggle css class view another observer view observes property want trigger animation eg", "d": "6/2013"}, {"body": "fixed machty async transitions merged", "d": "6/2013"}, {"body": "teddyzeenny think merged", "d": "6/2013"}, {"body": "plan", "d": "6/2013"}, {"body": "fixed reopen", "d": "6/2013"}, {"body": "confused going nt look passing anywhere ca nt see used clarify also possible make jsfiddle jsbin demonstrates problem", "d": "6/2013"}, {"body": "sorry confusion line printed console count snippet make jsbin demonstrate", "d": "6/2013"}, {"body": "set two simple examples hopefully demonstrate point first one dependentkeys keys defined function registerboundhelper namebindings works fine available second one two added dependentkeys difference first one longer works undefined", "d": "6/2013"}, {"body": "balinterdi thanks js fiddle see trying seems like work intended would consider improvement issue retagged improvement", "d": "6/2013"}, {"body": "intriguing idea another consideration would works multiple instances view rendered sent mailbox iphone sat jun pm godfrey chan notifications githubcom wrote tl dr want add ability define custom css rules particular loaded unloaded automatically view insertedremoved dom understanding emberview short term solution towards web components ability inline template required view practically speaking pretty close goal selfcontained reusable components dropped project one key thing miss web component shadow dom ability load additional css rules custom element currently created reusable component wrapped minimum supply file contains subclass well user would manually drop css pipeline component work correctly proposal add concatenated property perhaps subclass concatenated injected document style rules view element inserted dom removed view element destroyed concatenated property either supply string containing multiple rules array rules implemented prototype project currently working seems work quite well basically involves overriding append something along lines section remove alternative insert", "d": "6/2013"}, {"body": "lukemelia right go unscoped route multiple copies rules loaded problem besides bit wasteful case probably optimize checking already inserted rules class instead instance avoid making browser waste time parsing rules problem becomes track last instance clean properly go unscoped route leaning towards inserting rules per instance optimize later turned problem go scoped route problem since set rules supposedly scoped specific instance via elementid prefixes boosts priority rule though would make trickier override user stylesheet without resorting", "d": "6/2013"}, {"body": "totally boned trying basic youtube tutorial shonsaoji go grab libs get finally work", "d": "6/2013"}, {"body": "using ruby rails includerootinjson set true response format json handle change line function extractmany method lt changed pass method fixed", "d": "6/2013"}, {"body": "seems like emberdata bug reopen", "d": "6/2013"}, {"body": "works trick nt run linkto navigation row executing actions", "d": "6/2013"}, {"body": "expects name singleton controller according naming convention routes since use hood see think makes sense expected since cases controllers looked lookup examples see source code resolver", "d": "6/2013"}, {"body": "well right word documentation still something fix documentation fix checking implementation throw", "d": "6/2013"}, {"body": "additionally think would beneficial ember clarified naming convention versions gone different string representations returned different classes example following would return different instances controller seem return instance still seems wrong always stayed away camelcase version suppose good question whether ember outline naming convention whether entirely user consistent naming", "d": "6/2013"}, {"body": "agree throw error needed controller exist could trickier sounds assume since ember generate controllers based routes guess feasible afaik core team wants improve error handling general see eg wildhoney think ember outline naming convention tries flexible see source code resolver properly documented yet", "d": "6/2013"}, {"body": "believe issue proposed solutions quite valid expose series quite valid issues education around naming conventions poor naming conventions feel messy believe contexts make sense composed become confusing education around needs underlying ioc container poor nonexistent", "d": "6/2013"}, {"body": "kselden expressed interest standardizing naming", "d": "6/2013"}, {"body": "uploaded application without fix go select one article another unminified source quiet big may take load may want set breakpoints line applicationjs thanks investigating", "d": "6/2013"}, {"body": "problem computed properties depend routes meant private api internal routing logic supposed use var articleroute emberrouteextend metatitle function return thisget contextquestion property contextquestion metadescription function return thisget contextanswer ncheck original article information property contextanswer definitely red flag seems better way trying would fire event routes perform looping logic way nt involve manually reaching internals handler probably fine use would probably ideal either way nt really binding depending value", "d": "6/2013"}, {"body": "actually kind think support observingwatching oneliner change stefanpenner thoughts", "d": "6/2013"}, {"body": "oh correct somehow completely overlooked bindings meant kind poor attempt generate meta tags based separate module hooks routers ultraprivate stuff guess asks every route currently available meta information", "d": "6/2013"}, {"body": "handling context probably done controller instead machty would want support observingwatching good use case nt better handled controller", "d": "6/2013"}, {"body": "wagenet ca nt really think specific use case mostly wanted answer write computed property route depends currentmodel true nt think use cases strong even existent retract suggestion close issue", "d": "6/2013"}, {"body": "going close strong case stuff route controller let know revisit", "d": "6/2013"}, {"body": "imo realm undefined behavior would suggest warning fired transition progress", "d": "6/2013"}, {"body": "rykov goal looking share code triggered event well called", "d": "6/2013"}, {"body": "lukemelia yes original intent although router might transition phase gets called fact defined within makes easy assume route handle event longer need feature think developers aware router internals might expectation", "d": "6/2013"}, {"body": "dealing use case would simpler event handlers methods route could happen one ways event eventhandler something use style function prototype extension disabled myterrificaction emberrouteaction function actioncontext", "d": "6/2013"}, {"body": "makes sense would avoid semantic discrepancy controllers routes event handlers controllers methods whereas route needs hash", "d": "6/2013"}, {"body": "lukemelia rykov stab decided bubbling handled usecase originally suggesting may worth revisiting", "d": "6/2013"}, {"body": "resolved", "d": "6/2013"}, {"body": "joefiorini want individual object added collection use emberset instead array", "d": "6/2013"}, {"body": "verified please remove unverified label", "d": "6/2013"}, {"body": "closing ticket tangible workaround provided someone feels strongly nt addressed gladly reopen", "d": "6/2013"}, {"body": "ultimately need figure async put together simple example works today relies synchronous xhr running", "d": "6/2013"}, {"body": "ebryn", "d": "6/2013"}, {"body": "ebryn currently using great success dev purposes figure async way javascript var app emberapplicationcreate resolver emberdefaultresolverextend resolvetemplate function parsedname var template thissuper parsedname var templatename parsednamefullnamewithouttypereplace g", "d": "6/2013"}, {"body": "actually pretty awesome stuff love see something like baked development least meanwhile modified version jayphelps snippet works rails asset pipeline", "d": "6/2013"}, {"body": "really easy upcoming async routing facelift live example", "d": "6/2013"}, {"body": "dynamic template loading great used development think worth noting production application application code including templates statically compiled anyway meaning aggressively cache loading large amounts templates issue first visit cache clear subsequent visits would snappy since server simply respond", "d": "6/2013"}, {"body": "see point totally agree would necessary compile templates demand grunt whatever one using buildstep would willing send client whole bunch precompiled templates going need anyhow would big overhead least project working transform functionality existing desktop application web applications loading time short possible caching also big issue personally would rely heavily caching since believe templates wo nt change much used production see behaviour nt make sense talking blogwebsite etc main working field emberjs guess since slogan ember framework creating ambitious web applications applications provide desktop like behaviour mentioned machty really looking forward async routing facelift", "d": "6/2013"}, {"body": "even slimmer async example", "d": "6/2013"}, {"body": "forgot close figured problem giving invalid html embersafestring ended eating closing tag one metamorph tags result", "d": "6/2013"}, {"body": "verifying", "d": "6/2013"}, {"body": "huafu could implement js fiddle bug implement route catchall path catches undefined version", "d": "6/2013"}, {"body": "ok try asap might tomorrow also check first happening latest ember somehow fixed thanks feedback tho inform asap huafu gandon friday june chandler abraham wrote huafu could implement js fiddle bug implement route catchall path catches undefined reply email directly view github", "d": "6/2013"}, {"body": "looking", "d": "6/2013"}, {"body": "sherb please let know run problems find explanation unclear amp c", "d": "6/2013"}, {"body": "spoke wycats seems clear would nice work retagging improvement request", "d": "6/2013"}, {"body": "lukemelia seems like docsblogguide worthy think nt really regression though closing reopen wrong", "d": "6/2013"}, {"body": "jamesarosen release prefer wait make available nt know time get core would also good test ability manage external libs", "d": "6/2013"}, {"body": "jamesarosen emberaddonscom would love extended cp addon", "d": "6/2013"}, {"body": "stefanpenner traveling right get early next week", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "jamesarosen nice wan na also add", "d": "6/2013"}, {"body": "stefanpenner waiting merged proposed", "d": "6/2013"}, {"body": "think mark done thanks help folks", "d": "6/2013"}, {"body": "outlet render see exactly behavior rendered page messages console time logging", "d": "6/2013"}, {"body": "taking look", "d": "6/2013"}, {"body": "rlivsey seems like api moved expect error handling done events hash perhaps placed applicationroute updated fiddle", "d": "6/2013"}, {"body": "looks like defined javascript function defaulterrorhandler error transition emberloggererror error loading route error using settimeout allows us escape promise trycatch block settimeout function throw error looks like gets two arguments object whatever looks like machty took failureroute could either put back document event place handle found thoughts machty", "d": "6/2013"}, {"body": "little known ember router supports wildcard routes eg best way define handler catchall routes never used handler like suddenly without functionality", "d": "6/2013"}, {"body": "work one", "d": "6/2013"}, {"body": "new component stuff supports explicitly feature request bug", "d": "6/2013"}, {"body": "bit snarly issue somewhat related container instantiates views lookup directly related short container instantiates view nt opportunity pass style properties viewcreation time bindings hooked noted issue would apply helper views looked container thinking submitting pr either allows hash properties used object creation passed allows passed lookup helper anywhere else needs control object instantiation sake createtime bindings case lookup probably return subclass view injected properties intact would also allow unblocked wagenet feedback would much appreciated happy implementation", "d": "6/2013"}, {"body": "nt see different referenced stackoverflow question linked one closed reason given bound block helpers supported could elaborate", "d": "6/2013"}, {"body": "also believe similar closing kristianmandrup elaborate point closed gladly reopen", "d": "6/2013"}, {"body": "trying thing workaround using handlebars helper wraps linkto", "d": "6/2013"}, {"body": "got similar helpers app native support would clean things", "d": "6/2013"}, {"body": "working developing simple cms ember similar helper link pages dynamic menu", "d": "6/2013"}, {"body": "machty let well", "d": "6/2013"}, {"body": "seems fixed", "d": "6/2013"}, {"body": "superseded", "d": "6/2013"}, {"body": "seems like still issue updated fiddle dragging changes view parent trigger event nt", "d": "6/2013"}, {"body": "closing favor", "d": "6/2013"}, {"body": "case treated finally pr", "d": "6/2013"}, {"body": "taking look", "d": "6/2013"}, {"body": "bug documentation updated", "d": "6/2013"}, {"body": "verified referenced issue", "d": "6/2013"}, {"body": "superseded", "d": "6/2013"}, {"body": "say page much improved thanks everyone", "d": "6/2013"}, {"body": "worked around issue phantomjs issue note using coffeescript coffee function bind thisp gt fn gt fnapply thisp arguments windownavigatoruseragentmatch phantomjs history windowhistory oldpushstate historypushstatebind history oldreplacestate historyreplacestatebind history historypushstate state title url gt historystate state oldpushstate state title url historyreplacestate state title url gt historystate state oldreplacestate state title url", "d": "6/2013"}, {"body": "working", "d": "6/2013"}, {"body": "documentation page specifies argument template rendering thus says replace main informer make work please close bug render performance matches spec", "d": "6/2013"}, {"body": "could useful warning agree", "d": "6/2013"}, {"body": "emberbugfest attempting reverify", "d": "6/2013"}, {"body": "bug verified certain cases updated jsfiddle case observers fire date case date observers fire", "d": "6/2013"}, {"body": "kselden seem like functionality want support", "d": "6/2013"}, {"body": "believe functionality available using thanks stefanpenner sha eg", "d": "6/2013"}, {"body": "added comments build tools guides", "d": "6/2013"}, {"body": "wagenet issue maxkazar tried suggestion working", "d": "6/2013"}, {"body": "richieb provide jsbin jsfiddle also likely stackoverflow question issue", "d": "6/2013"}, {"body": "jsfiddle example", "d": "6/2013"}, {"body": "richieb", "d": "6/2013"}, {"body": "stefanpenner excellent mate saved ton time could nt find solution problem stackoverflow emberjs site even googling bit perhaps nt looked thoroughly enough thanks much great day", "d": "6/2013"}, {"body": "needed already injected controller", "d": "6/2013"}, {"body": "kselden thanks thought removed good catch", "d": "6/2013"}, {"body": "kselden needed remove always get error call method null", "d": "6/2013"}, {"body": "richieb fiddle showing fiddle works without", "d": "6/2013"}, {"body": "nt seem reproducible ever get reproduction let revisit", "d": "6/2013"}, {"body": "wiktors sure still running issues pushed enhancements router api implications redirects might fixclarify issues running change described resources linked within api guide examples", "d": "6/2013"}, {"body": "wiktors going close cut number active issues need tackle please reopen find remains issue", "d": "6/2013"}, {"body": "recall kselden talking", "d": "6/2013"}, {"body": "meetup verifying", "d": "6/2013"}, {"body": "still happening latest master", "d": "6/2013"}, {"body": "work around demonstrated fiddle please note comment bit tedious set flag jsfiddle user code runs late issue expects second argument default leave unspecified installs observer error probably tolerate cases without", "d": "6/2013"}, {"body": "previous comment perfectly clear tl dr", "d": "6/2013"}, {"body": "ember bugfest verifying", "d": "6/2013"}, {"body": "definitely bug uptodate jsbin shows issue investigating could cause", "d": "6/2013"}, {"body": "sebastianseilund success tracking", "d": "6/2013"}, {"body": "wow many thanks suspected already never get heared", "d": "6/2013"}, {"body": "wycats nt find exact cause problem rerendered last thing investigated binding somehow got disconnected something", "d": "6/2013"}, {"body": "recommending close want keep templates oblivious routes kind stuff set control route entryexit desired", "d": "6/2013"}, {"body": "kselden expressed interest standardizing naming", "d": "6/2013"}, {"body": "ever find solution running problem", "d": "6/2013"}, {"body": "able switch observes property everything worked however property items seem live bind ever accessed via template binding note add template since nt returning anything nothing rendered template observer works project code ended looking something like hack using property instead observes function observes nt firing bound properties someobserver function logic return null property somepropertya somepropertyb template since returning null nothing rendered binding properly fired", "d": "6/2013"}, {"body": "wow thanks explanation really bad requires hack work hopefully fixed thanks", "d": "6/2013"}, {"body": "duplicate issue bindings use global path self mess wiring fiddle working without observer bug deleting global path", "d": "6/2013"}, {"body": "yes bug moving away global path bindings reason ever bind via global", "d": "6/2013"}, {"body": "teddyzeeny interest helping one", "d": "6/2013"}, {"body": "apologize taken long get back thank reply supported nt work getting id accurate observers assume internal mechanism works slightly different way makes work observers getters seems little convoluted case seems like work getters reason consistency usage developer nt remember case x use method case use method b etc", "d": "6/2013"}, {"body": "might expected resets namespace would use logged transition keeping nesting seems useful", "d": "6/2013"}, {"body": "jsbin example", "d": "6/2013"}, {"body": "transitions seeing showing full route name transitioned use dsl name stored toplevel name routing system using inherit parent route name therefore routes stored router library added named would path called example seeing full transitions router identifying substate look router mappings might see tree representing states application looking output perspective makes sense show full path route according routes application agree logging bit confusing would including class name route addition transition helpful debugging purposes", "d": "6/2013"}, {"body": "emberbugfest looks like verified fix updated jsbin", "d": "6/2013"}, {"body": "sohara may interest among things offers flexible strategy things like sorting ifwhen gets would likely deprecate believe suffer problem", "d": "6/2013"}, {"body": "believe machty router facelift specifically addresses please reopen mistaken", "d": "6/2013"}, {"body": "verifying", "d": "6/2013"}, {"body": "kaspertidemann still reproduce error", "d": "6/2013"}, {"body": "ca nt verify given months old wycats may want close issue", "d": "6/2013"}, {"body": "looks like warning behind flag", "d": "6/2013"}, {"body": "maybe aside would possible add hook like one could clear outlet route left feeling clearing outlet would happen lot route transitions away page using particular outlet", "d": "6/2013"}, {"body": "gevious already check", "d": "6/2013"}, {"body": "related lukemelia workmanw", "d": "6/2013"}, {"body": "jonnii nt think seems related memory actual object destruction related removing non default outlets", "d": "6/2013"}, {"body": "investigating seem current behavior latest", "d": "6/2013"}, {"body": "seems fixed ember master since router facelift confirm link navigating back forth longer seems rerender view", "d": "6/2013"}, {"body": "confirm", "d": "6/2013"}, {"body": "looks like resolved", "d": "6/2013"}, {"body": "ran one really think get event object action callback scenario list ulli would like highlight one item list item click action define action click allowedkeys shift ctrl need know user pressed ctrl shift based key pressed may change result selection example clicking item yet selected select ctrlclick selected item unselect event object click call back write way much code implementing collectionview itemview listen click even wrap itemview content event object invoke collection controller deal", "d": "6/2013"}, {"body": "ffaubry creating custom view list set click handler whole element within method passed determine element clicked store information within array need separate", "d": "6/2013"}, {"body": "machty additional comments router facelift", "d": "6/2013"}, {"body": "following facelift nt really documented yet since going probably officially solution let transition route without url updated end thing keep mind might surprise people even transitioning urlless route nt render anything ember automatically clear tear templates exiting route handler want might need override behavior nt tried beware", "d": "6/2013"}, {"body": "let leave open discussion", "d": "6/2013"}, {"body": "experimenting putting full fledge ember state manager leaves routes works mostly hacks continues work mature upstream hacks pr", "d": "6/2013"}, {"body": "basically amounts exact usecase guys one models viewable different contexts ie nested different routes much prefer use single routecontrollertemplateview alternative write bunch repetitive code explicit route paths would quite helpful would mechanism route know parent op example taskroute know whether activated projectroute", "d": "6/2013"}, {"body": "crofty discourse move discussion", "d": "6/2013"}, {"body": "super required keep state within url example session tooldraw amp themesomething amp redirecturisomething anyone taking crack yet pull request", "d": "6/2013"}, {"body": "jayphelps tried library", "d": "6/2013"}, {"body": "alexspeller indeed require history hash support currently using pr autolocation adding support library indeed something core team wants mainline hoping get pr rolling", "d": "6/2013"}, {"body": "ah ok well problem implementation complete however unlikely officially adopted one nt worked matrix params unlikely near future although willing point time", "d": "6/2013"}, {"body": "also like able create reusable componentswidgets view controller", "d": "6/2013"}, {"body": "pharcosyle check new stuff", "d": "6/2013"}, {"body": "nice ah set view controller view clever one thing get access router components without proper controller", "d": "6/2013"}, {"body": "closing favor adding section guides docs", "d": "6/2013"}, {"body": "believe machty router facelift specifically addresses please reopen mistaken", "d": "6/2013"}, {"body": "believe machty router facelift specifically addresses please reopen mistaken", "d": "6/2013"}, {"body": "pivotalmedici still occur", "d": "6/2013"}, {"body": "ended refactoring longer problem app similar thing would probably use render helper hopefully would nt problem ak", "d": "6/2013"}, {"body": "going close since could nt isolate may better solutions", "d": "6/2013"}, {"body": "updated jsbin ember confirm still issue", "d": "6/2013"}, {"body": "machty ping", "d": "6/2013"}, {"body": "trek yeap believe might actually covered least half certainly covered two cases invalid model correct route invalid route eg routedoesnotexist", "d": "6/2013"}, {"body": "support wildcard routes eg facelift api whether want redirect route model failed load error nonexistent believe handle workmanw cases close issue", "d": "6/2013"}, {"body": "machty oh awesome guess missed addition thanks", "d": "6/2013"}, {"body": "still issue going tackle today", "d": "6/2013"}, {"body": "trek commit done corrected problem nt see ember latest know", "d": "6/2013"}, {"body": "mega weird sha pr totally different commit closed pr showing ebryn merged commits github bug code around anywherecan open new pr", "d": "6/2013"}, {"body": "trek recreating pr think things changed ember emberassert instead throwing error tests exception important break flow think create wip pr", "d": "6/2013"}, {"body": "marcioj yes please make wip like see", "d": "6/2013"}, {"body": "trek solved problem tests changed pr merged", "d": "6/2013"}, {"body": "awesome thanks close favor pr tomdale review", "d": "6/2013"}, {"body": "minor performance thing track outside gh issues", "d": "6/2013"}, {"body": "though metakey speculative running multiple instances ember page sharing object doubts much scenario works outside metakey", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "", "d": "6/2013"}, {"body": "vote pagination addon", "d": "6/2013"}, {"body": "put together jsbin showing paginate agree addon think people happy least show jun pm stefan penner notifications githubcom wrote vote pagination addon reply email directly view github", "d": "6/2013"}, {"body": "ideally would also show way make requests backend one page time opposed loading whole dataset paging client", "d": "6/2013"}, {"body": "want see example pagination ember jsfiddle shows pure client side pagination mixin use vanilla arraycontroller full blown project github pagination mixin unit tested jasmine interested issue changed stance nt think core emberjs think core ember focused pagination mixin makes great add thanks stefanpenner link", "d": "6/2013"}, {"body": "benhalll still issue know tricknotes devoting significant attention ie issues lately going close please reopen nt fixed", "d": "6/2013"}, {"body": "appears working", "d": "6/2013"}, {"body": "jsbin nt reproduce issue correctly unfortunately tested still seems happen", "d": "6/2013"}, {"body": "looks like fixed", "d": "6/2013"}, {"body": "oh world open source able assign tasks cto luke assigned", "d": "6/2013"}, {"body": "still issue know tricknotes done quite bit ie work last months", "d": "6/2013"}, {"body": "verified currently works", "d": "6/2013"}, {"body": "experiencing problem loop think ember needs support included specification ownsmall library make changes work ember comes large libraries expect default behavior work nt want change might include lot work introduce new bugs", "d": "6/2013"}, {"body": "although canwillshould mark methods nonenumerable mdn resources actually suggest idea use enumerating arrays really enumerating object properties marked enumerable turns array indexes enumerable properties excluding scenario brought issue still seems like legit method iterating array except potential ordering caveat turns order enumeration implementation specific especially post modification array given susceptible enumerating prototype additions accidentally left enumerable continue enumerate properties older browsers concept enumerable potential cross implementation ordering caveats would seem least painful route always enumerate arrays traditional way additionally might worth bringing issue libraries rely array enumeration", "d": "6/2013"}, {"body": "certainly good practice use iterate array indices given standard mark nonenumerable properties would consider good practice use least modern browsers would able use ember combination popular libraries like jquery", "d": "6/2013"}, {"body": "example workaround demonstrating nested", "d": "6/2013"}, {"body": "believe position set nt feel like rendering layer responsibility think could used simple situations correct course action likely ordering information controller item controller level sorting filter pagination could taken account", "d": "6/2013"}, {"body": "putting cents seems like super reasonable feature request set view using attributebindings computed property seems heavy would nice allow concatenation bindattr", "d": "6/2013"}, {"body": "bennidhamma intention handlebars stay logicless said type functionality coming eventually check", "d": "6/2013"}, {"body": "nt consider following contain logic bindattr support string concatenation bandaid see less desirable still nt consider string concatenation form logic maybe pragmatic handlebars supports conditional looping constructs certainly form logic string concat ended building underlying view described works well impressed ember seems play well go take time build nested views templates etc need rapid development needs would nice model things little permissive example lots time absolutely care twoway dynamic data binding run template const data source know templatized html never change least const enough fine purging higher stack prototyping kind work often find even hitting refresh browser fine", "d": "6/2013"}, {"body": "bennidhamma example pretty sure work fine", "d": "6/2013"}, {"body": "oh perfect luke thanks million jun pm luke melia notifications githubcom wrote bennidhamma example pretty sure work fine reply email directly view github", "d": "6/2013"}]