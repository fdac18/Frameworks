[{"title": "typeerror syntheticeventcall function development mode webkit browser", "body": "want request feature report bug bug current behavior using webpack built react based app app runs two modes desktop aka runtime mode opens webkit browser server mode opens browsers chrome firefox etc getting error app built using webpack development flag enabled works fine production mode current behavior bug please provide steps reproduce possible minimal demo problem via similar template since app run webkit browser possible provide test environment however anyone wants build using steps provided readme blog post expected behavior react base app run without error dev mode versions react browser os affected issue work previous versions react react os mac os x yosemite browser annulen browser qt version please let know need details", "num": "10582", "d": "8/2017"}, {"title": "accept ref objects refs", "body": "reason react uses first class ocaml refs store mutable values instead instances basically object mutable property updated callback refs would nice convenience feature builtin could also make first class objects isomorphic react basically implementation would something needs implemented core runtime part particular component api since refs cross boundary cc adamjernst", "num": "10581", "d": "8/2017"}, {"title": "implement silent updates state update queue", "body": "reason react silent updates meaning normal update state queue reverted difference nt need rerender props changed rerender unclear expose existing classcomponent api make feature new apis", "num": "10580", "d": "8/2017"}, {"title": "wrong warning", "body": "want request feature report bug bug current behavior shows warning following react documentation using classes validate items array shows warning current behavior bug please provide steps reproduce looking jsfiddle warning shown expected behavior warning shown code follows react documentation proptypes versions react browser os affected issue work previous versions react chrome version official build macos sierra", "num": "10577", "d": "8/2017"}, {"title": "apparent slow bytes per render memory leak react reactdom", "body": "want request feature report bug bug current behavior longrunning react application finding slow memory leak looks bytes per render eliminate virtually everything wrote simplest possible examples end issue test methodology note also disabled chrome extensions testing ran production build createreactapp eliminate possible source leaks pause execution early force multiple garbage collections using dev gt performance record starting javascript memory live using google chrome task manager run execution iterations pause record memory start memory end difference eliminate browser ran test simple loop also end issue memory start memory end difference note really account maybe consolelog current behavior bug please provide steps reproduce possible minimal demo problem via similar template see code snippets bottom wanted eliminate sources leaks use jsfiddle expected behavior expect memory usage simple test loop really memory growth cleaned garbage collection versions react browser os affected issue work previous versions react browser chrome version official build linux react reactdom createreactapp reactscripts sure previous versions react sample react application import react component react import reactdom reactdom class app extends component componentdidmount windowsetinterval gt thissetstate test test render windowconsolelog test return test sample baseline application", "num": "10576", "d": "8/2017"}, {"title": "reacttestrenderer renders attributes value undefined", "body": "want request feature report bug bug current behavior appears render attributes way inconsistent react browser rendering react attributes value truthy omitted render attribute value still renders current behaviour bug please provide steps reproduce possible minimal demo problem via similar template component like rendering react rendering react expected behavior would expect behaviour react browser case undefined attribute would rendered versions react browser os affected issue work previous versions react using version react chrome macbook testing jest snapshots version", "num": "10573", "d": "8/2017"}, {"title": "performance issue react", "body": "currently using reactjs version web application one feature need keep pooling information continuously seconds receive response list object items list update show react web application problem time application becomes unresponsive takes much time operation profiling found render batch updates dispatch event react takes longest time recommended way get away performance issue react feature needs refreshed every seconds list size items time performance issue observed ie chrome browser", "num": "10566", "d": "8/2017"}, {"title": "react performs insertbefore operations move one item list", "body": "list contains items move one item bottom top react performs insertbefore operations sucks take look infernojs example perform one insertbefore operation one move cases", "num": "10565", "d": "8/2017"}, {"title": "bug", "body": "hi use reactrouterdom npmyarn package different routes use react component show route changing component nt rerender bug", "num": "10557", "d": "8/2017"}, {"title": "typeerror read property currentelement null", "body": "want request feature report bug bug version error", "num": "10556", "d": "8/2017"}, {"title": "import external lib error", "body": "import thirdparty javascript library reactjs searched lot internet think downloaded free theme however author makes custom settings js file would like include file component effects work thank current behavior undefined typeof jquery throw new error bootstrap javascript requires jquery function error bootstrap javascript requires jquery expected behavior", "num": "10555", "d": "8/2017"}, {"title": "documentation add reference oninvalid form event", "body": "want request feature report bug bug current behavior react form event nt documented current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior added list form events versions react browser os affected issue work previous versions react documentation error around since event added", "num": "10553", "d": "8/2017"}, {"title": "bad effect company", "body": "consider relicensing al rocksdb done forgive ask", "num": "10552", "d": "8/2017"}, {"title": "question using nextstate shouldcomponentupdate", "body": "consider following shouldcomponentupdate nextprops nextstate return thisstatevalue nextstatevalue nextprops wasted used way use shouldcomponentupdate nextstate comes argument shouldcomponentupdate", "num": "10551", "d": "8/2017"}, {"title": "reacttestrenderer mock react native animated", "body": "want request feature report bug bug current behavior animated mocked using implement component make snapshot test return log error const wrapper thisenvironmentrunscript transformedfilescript typeerror read property object null runtimeexecmodule runtimerequiremodule runtimerequiremoduleormock functionbezier ease timinganimationeasing timinganimationonupdate ontimeout tryontimeout timerlistontimeout expected behavior mock properly like components nt break", "num": "10542", "d": "8/2017"}, {"title": "reactjs aspnet core", "body": "hello could anyone link good template start hacking react aspnet interested jsx tsx thanks", "num": "10541", "d": "8/2017"}, {"title": "inforamtion internet react", "body": "hi know user internet conection react js native javascipt windowaddeventlistener online gt alert navigatoronline use react", "num": "10540", "d": "8/2017"}, {"title": "buggy controlled number input", "body": "want request feature report bug bug current behavior following code example works well input type allows inputs like entered using input type line always runs shows right value app state also correct checked react developer tools controlled input controlled somehow class app extends component constructor super thisstate value handlechange e gt const value etargetvalue const num parseint value consolelog num thissetstate value isnan num num render return present latest create react app jsfiddle present jsfiddle expected behavior input reflect state thus allowing strings like etc displayed versions react browser os affected issue work previous versions react latest react reactdom reactscripts browser chrome os x present latest create react app jsfiddle present jsfiddle", "num": "10539", "d": "8/2017"}, {"title": "descriptive error null proptype", "body": "want request feature report bug feature current behavior specify invalid proptype common mistakes misspelling instead get error one bothered expected behavior useful error message could", "num": "10538", "d": "8/2017"}, {"title": "add topics categorize react repository make discoverable", "body": "want request feature report bug feature current behavior topics repo current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior popular frameworks github page topics though really popular project would nt better add topics make discoverable versions react browser os affected issue work previous versions react", "num": "10537", "d": "8/2017"}, {"title": "redux", "body": "objects valid react child found object keys counter meant render collection children use array instead wrap object using createfragment object react addons check render method", "num": "10534", "d": "8/2017"}, {"title": "avoiding finddomnode", "body": "read comments potentially dropped least usage strongly discouraged curious alternative ones seen nowhere near flexible let say funky wrapper component adds context menu component jsx class contextmenu extends reactcomponent render const children menu thisprops const child reactchildrenonly children const childwithevents reactcloneelement child oncontextmenu gt someapitoopenmenu menu return childwithevents right click menu far good except needs child dom element prop assign handler inner dom element wo nt work jsx const mylabel children gt children right click menu unless intentionally forward event props mylabel span must ensure props using alternatively wrap children adding element unnecessarily use inline element wrapped block element hand work anything eventually renders dom element matter deep whether components forward props nt see downsides apart impurity poking around dom see workarounds using none good actually using", "num": "10532", "d": "8/2017"}, {"title": "react expects global document object breaks parallel dom testing", "body": "want request feature report bug feature current behavior react expectes document global variable current behavior bug please provide steps reproduce possible minimal demo problem via similar template run enzymejest tests parallel using parallel test runner avajs together jsdom node javascript dom implementations headless browsers expected behavior react allow pass dom instance constructor initial render initialization versions react browser os affected issue work previous versions react windows", "num": "10525", "d": "8/2017"}, {"title": "bug argument eventtargetdispatchevent implement interface event", "body": "applyed event onmousedown element firefox osx catch error title debug see occurs function execute code react reactdom os details os x yousemite version processor ghz intel core memory gb mhz graphics intel iris pro mb", "num": "10523", "d": "8/2017"}, {"title": "decide desired behavior boolean value passed unknown prop", "body": "moving discussion comments issue", "num": "10521", "d": "8/2017"}, {"title": "onmousemove outside window mousedown", "body": "syntheticevent onmousemove stop triggering mouse moved outside window instead browser event chrome continue trigger mousemove mousedown active behavior implemented syntheticevent", "num": "10519", "d": "8/2017"}, {"title": "fiber calling reactnativefindnodehandle render crashes dev", "body": "found working see details know fixed whole story even fixed stackassuming call still ca nt put arbitrary fields fiber reference work around problem reactdom", "num": "10518", "d": "8/2017"}, {"title": "rendering elements inside dynamic parent without child remounting", "body": "possible change element parent element moved current parent new using code parentrenderer children changed parent rerendered perfect change parent actually changed new children children componentwillmount updating store sets required parent happen old children unmounting new children mounting old parent unmounting current children unmounting new parent mounting current children mounting simplest way solve see change children parent time would like know options changing children parent time breaking app also lack information internet similar cases googling skills broken", "num": "10516", "d": "8/2017"}, {"title": "ctrl enter keypress works firefox", "body": "nt work chrome ie edge chrome ubuntu browsers report charcode event dispatcher dismisses made pull request unobtrusive fix", "num": "10515", "d": "8/2017"}, {"title": "reliable way measure painted dom elements", "body": "apologize know frequent question struggling find proper way accomplish trying creating menu simple animated underline transition selected element list requires knowing width element positioning underline div selected element click currently getting width componentdidmount way refs finddomnode works initial load get slightly incorrect measurement refreshing correct every time open page new tab see incorrect behavior componentdidmount code something fundamentally wrong good way know dom fully painted measurements things like far way able get work nesting within requestanimationframe nested within settimeout seems wrong thanks help", "num": "10513", "d": "8/2017"}, {"title": "warn remove known attribute dom component receives symbol value", "body": "want request feature report bug possibly incorrect corner case correct finalizing new behavior unknown attributes see context changes behavior unknown attributes happens unknown attributes want warn remove attribute behavior consistent known unknown attributes current behavior currently throw generic error symbol passed known attribute expects string current behavior bug please provide steps reproduce possible minimal demo problem via similar template example also happens spreading objects props expected behavior warn remove attribute since valid value versions react browser os affected issue work previous versions react recent react well", "num": "10512", "d": "8/2017"}, {"title": "confuse reactdomserver doc", "body": "load react tag toplevel apis available global mean use tag node server", "num": "10508", "d": "8/2017"}, {"title": "consider happens xss surface area whitelist", "body": "consider case let say fix special casing use symbol consider url event name current future gets passed plain old string xss vulnerability tricky part one plain old strings potentially infinite long list since also includes future event names think safe strategy might hard blacklist meaning nt get added dom attribute starts cover everything cc nhunzaker", "num": "10507", "d": "8/2017"}, {"title": "symbol tagging dangerouslysetinnerhtml help prevent xss", "body": "spreading props user provided source xss eg js var data jsonparse decodeuri locationsearchsubstr function foo props return propscontent reactdomrender container already true today url xss hole uncommon many different ways screw getting user data however also spreading unusual decided react add extra layer protection types mistakes one much uncommon one though already pretty centralized way sanitizing objects seems adding symbol object nt big deal though either", "num": "10506", "d": "8/2017"}, {"title": "issue functional components classical components", "body": "problems functional components classical components detail code follow jsbin part problem code js function usergreeting props return welcome back function guestgreeting props return please sign js class usergreeting extends reactcomponent render return welcome back class guestgreeting extends reactcomponent render return please sign also run page jsbin classical component nt feature function component simple ca nt run report error please tell wrong whatever newer", "num": "10503", "d": "8/2017"}, {"title": "packaging js big", "body": "webpack packagedjavascript original javascript contain idea packaging js big packagejson webpackconfigjs javascript var webpack require webpack var path require path var publicdir pathresolve dirname srcclientbuild var appdir pathresolve dirname srcclientapp var config entry appdir indexjs output path publicdir filename indexjs module loaders test js loader babelloader exclude pathresolve dirname nodemodules include pathresolve dirname src query presets react test use urlloader amp nameimg name ext imgloader resolve extensions js jsx modules pathresolve dirname appdir nodemodules moduleexports config javascript name helloworld version description des private true dependencies babelcore babelloader babelpresetreact htmlwithimgloader materialui proptypes react reactdom reactrouter reacttapeventplugin reacttimer webpack whatwgfetch devdependencies cssloader fileloader imgloader styleloader urlloader scripts test echo error test specified amp amp exit dev webpack watch author yanlj license mit new webpack could give routine configuration", "num": "10502", "d": "8/2017"}, {"title": "react component rendering ie rendering properly chrome mozilla", "body": "react components rendering ie rendering properly chrome mozilla using ie showing error access denied ie browser browserminjs reactjs image", "num": "10501", "d": "8/2017"}, {"title": "patent issue raised patent react", "body": "hey guys first thank great framework started learning react mindblowing comparing frameworks like maybe angular raised yesterday gt bsd patents essentially means code open everyone see use always copyrighted facebook grant patent license long nice never suing facebook patent infringement instant sue facebook patent rights react facebook open source technology happen use automatically revoked far understand example started startup maybe next facebook makes sense used react coding part frontend development startup got popular became next competitor facebook somehow got problem facebook inc doesnt anything react open source matter sue facebook due reasons even dont anything codes license react revoked ca nt use react trouble one example time post avoid react startup building startup assuming investors hoping land milliondollar worth exit point right want keep door open acquirers especially large ones apple microsoft google amazon etc companies likely hold patent arsenals facebook even want surrender rights sue facebook time came product built react acquiring means losing rights something probably prepared", "num": "10500", "d": "8/2017"}, {"title": "keep discussion patent clause going", "body": "biggest issue patent clause closed statement close let keep broader discussion going yet link suggestion discussion might take place puts users react position weakness since central place articulate issuesproblems clause thus would like ask either always keep one issue topic open people speak provide maintained link discussion thread platform understand best place discussions topic important users businesses work single place continue discussion interpreted unfortunately silencing tactic edit far understand actually close issue still leave open adding comments yet adding comments issue patent clause turned sebmarkbage could elaborate necessary since leave comments option closed issues relates let keep broader discussion going", "num": "10497", "d": "8/2017"}, {"title": "npm packages could able use reactnative project", "body": "new reactnative project created new react native project reactnative init sample tried adding npm package npm install save isreachable installation tried run react native project reactnative runios got error like unable resolve module os followed steps mentioned still facing issue reactnative version cli versions react browser os affected issue work previous versions react", "num": "10496", "d": "8/2017"}, {"title": "input element type isnumber meet expectations", "body": "example chrome type nonnumber character safari firefox type nonnumber character moment value change empty string solve problem", "num": "10489", "d": "8/2017"}, {"title": "element variables nt work codepen", "body": "want request feature report bug bug current behavior code nt work current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior displaying result nothing showed versions react browser os affected issue work previous versions react browser version official build os ubuntu react codepen uses follows", "num": "10486", "d": "8/2017"}, {"title": "image loading failure", "body": "", "num": "10485", "d": "8/2017"}, {"title": "componentwillreceiveprops called twice renders", "body": "want request feature report bug bug current behavior componentwillreceiveprops called twice row without render call shouldcomponentupdate importantly value calls object passed different specifically code like noticed redux action xhr request performed twice calls also calls defined second call also passed results first xhr call stored redux store passed component via reactreduxconnect also confirmed called second time versions react browser os affected issue work previous versions react react google chrome windows", "num": "10482", "d": "8/2017"}, {"title": "solve reactdom defined react webpack", "body": "download react devtools use http server instead file url better development experience appjs uncaught referenceerror reactdom defined eval appjs object webpackrequire anonymous appjs anonymous webpackrequire anonymous anonymous react reactdom", "num": "10480", "d": "8/2017"}, {"title": "window object virtual dom", "body": "hi question use javascript window object jsx file dom manipulation changing virtual dom best place use window object jsx file", "num": "10479", "d": "8/2017"}, {"title": "remove old disttags", "body": "want request feature report bug bug guess current behavior tags npm think used anymore see registry current behavior bug please provide steps reproduce possible minimal demo problem via similar template tags removed see docs expected behavior supported tags existing versions react browser os affected issue work previous versions react", "num": "10478", "d": "8/2017"}, {"title": "object spreads nested children gives unwanted key error", "body": "believe following case result key error would like know correct behaviour bug produced following case render component spreads attributes top element children children nested least one child object spread situation produces following key error warning child array iterator unique key prop check render method passed child parent component see information reproduction added basic code reproduce issue jsfiddle however nt see key error displayed jsfiddle component renders children spreads attributes top element render component nested children least one object spread function component children return function app return foo variations first nested child given component component component receives object spread key warning also thrown object spread removed inside component key warning thrown object spread remove first nested child given component key warning thrown expectation would expect key errors arrays children rendered background build react reactdom started getting problem since started using airbnbreactwithstyles aphrodite styling generates objects possibly style classname properties spread jsx elements however issue persists reactwithstyles used behaviour seems come react correct behaviour", "num": "10477", "d": "8/2017"}, {"title": "circular reference bound method", "body": "want request feature report bug unclear lean towards bug current behavior certain bound functions create circular reference makes traversing objects problematic current behavior bug please provide steps reproduce possible minimal demo problem via similar template sure produce small test case issue expected behavior unsure versions react browser os affected issue work previous versions react react react native jest happening test attempt use jsonpath query results see link attempted address circular reference jsonpath library problem persists managed track circular property defined apparently still used native components snippet code function bindautobindmethod component method var boundmethod methodbind component boundmethodreactboundcontext component boundmethodreactboundmethod method boundmethodreactboundarguments null unfortunately yet narrow precise place occurs source method definition repeated several modules however confirm issue case isolated single file circular reference particular value example changing line regular enumerable property one defined nonenumerable issue goes away eg function bindautobindmethod component method var boundmethod methodbind component objectdefineproperty boundmethod reactboundcontext value component boundmethodreactboundmethod method boundmethodreactboundarguments null value contains circular reference components reference value becomes problem traversing object tree based keys key enumerated see attempt avoiding circular references however unfortunately still nt addressing issue particular property perhaps fix naive otherwise missing case yet reproduce isolation thank much hard work attention particularly gritty issue must apologize anything said nt make clear sense beginning get familiar js development", "num": "10476", "d": "8/2017"}, {"title": "fake event trick rethrowing errors dev fires unexpected global error handlers makes testing harder", "body": "trying make use componentdidcatch react beta already global window error handler working fine unexpectedly catches errors would expect componentdidcatch handled componentlocal errors treated windowglobal errors dev builds problem seems stem think entire block code problematic stated rational misguided pausing exceptions pause uncaught exceptions however makes exceptions caught rather switching prod vs dev using trycatch prod window error handler dev react always use trycatch rethrow reach root without hitting componentdidcatch handler would preserve correct pause uncaught exceptions behavior without messing global error handlers", "num": "10474", "d": "8/2017"}, {"title": "react synthetic mouseenter event fires dom mouseleave event", "body": "want request feature report bug bug think current behavior two elements next two mouse moves element element registered event listeners mouseenter gt mouseleave gt mouseenter gt mouseleave gt see mouseleave event always fired mouse enter event true react component follows mouse enter events fire mouse leave events elements sharing boundary however mix events use synthetic react events mouse enter dom events mouse leave find mouse enter event handler triggered mouse leave event handler elements sharing boundary current behavior bug please provide steps reproduce possible minimal demo problem via similar template codepen expected behavior mouse enter always fire mouse leave even using mixture synthetic dom events versions react browser os affected issue work previous versions react react os windows broken chrome ie", "num": "10471", "d": "8/2017"}, {"title": "excessive duplicative variable assignments commonjs build", "body": "followup looks like commonjs build saving short variable name references long property names however bunch places net output larger build referenced names like duplicated quite bit example umd build tokens cjs build nt crush names either later build things like duplicates lot look cjs build something along lines dhostnode shows like places true tokens beautified version reference", "num": "10469", "d": "8/2017"}, {"title": "dom fixture form coverage restored state autofill", "body": "follow presently nt manual fixture ensures form state captured browser provides input behalf user restored form state autocomplete state notes reference point like find documentation around restored state works think might using wrong search terms anyone link handy", "num": "10468", "d": "8/2017"}, {"title": "reactdomminjs unpkg cdn returning", "body": "want request feature report bug bug current behavior requests returning found redirect current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior minimized version reactdom success versions react browser os affected issue work previous versions react unpkg nt seem status page also unminified version returns message response occurs less second though", "num": "10465", "d": "8/2017"}, {"title": "react website code textareas broken", "body": "want request feature report bug bug current behavior code react website seem broken inspection reveals url used website current behavior bug please provide steps reproduce possible minimal demo problem via similar template visit react website expected behavior code inputs function expected", "num": "10464", "d": "8/2017"}, {"title": "componentdidcatch document amp decompose info parameter", "body": "quick googling nt show explanation parameter key object seen far useful already composed want custom rendering information parse love see become general string broken array frames something like", "num": "10461", "d": "8/2017"}, {"title": "looking clarification deprecation warnings reactdomfactories", "body": "hello looks use mandatory versions use information correct also wondering going deprecation warnings use versions thanks lot", "num": "10460", "d": "8/2017"}, {"title": "sname", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "10459", "d": "8/2017"}, {"title": "license headers missing built bundles", "body": "built files missing license headers cjs headers umd headers identifying bundle name license license headers similar likely need change code getbanner scriptsrollupbuildjs test running looking buildpackages cc trueadm", "num": "10458", "d": "8/2017"}, {"title": "distreactdomserverminjs bug", "body": "think bug use reactdomserver like typeerror read property reactcurrentowner undefined occurs find reason reactdomdistreactdomserverminjs requires react like moduleexportse require react shoule moduleexportse require reactdistreactminjs try works react version reactdom version", "num": "10455", "d": "8/2017"}, {"title": "doc handling events gt binding event class", "body": "tutorial nt binding yet written careful meaning jsx callbacks javascript class methods bound default forget bind thishandleclick pass onclick undefined function actually called additionally example comments code pertaining bind", "num": "10454", "d": "8/2017"}, {"title": "error reactperf failed execute measure performance mark unmount exist", "body": "want request feature report bug bug current behavior hi using reactperf getting error seems crash render domexception failed execute measure performance mark unmount exist markend webpack nodemodulesreactdomlibreactdebugtooljs objectonunmountcomponent webpack nodemodulesreactdomlibreactdebugtooljs eval webpack nodemodulesreactdomlibreactserverrenderingjs reactserverrenderingtransactionperform webpack nodemodulesreactdomlibtransactionjs rendertostringimpl webpack nodemodulesreactdomlibreactserverrenderingjs rendertostring webpack nodemodulesreactdomlibreactserverrenderingjs modify get errors per page refresh however flame graph looks working current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior error versions react browser os affected issue work previous versions react chrome react reactdom", "num": "10450", "d": "8/2017"}, {"title": "error beta undefined function evaluating ownergetname", "body": "line wrong fiber crashes changed use getcomponentname owner", "num": "10443", "d": "8/2017"}, {"title": "componentdidcatch nt work react rendertostring", "body": "tried simple test case new error handling code react ssr following code javascript import react react import rendertostring reactdomserver class errorboundary extends reactcomponent constructor props super props thisstate haserror false componentdidcatch error info display fallback ui consolelog componentdidcatch thissetstate haserror true render thisstatehaserror render custom fallback ui return something went wrong return thispropschildren class throwingcomponent extends reactcomponent render throw new error ooooops consolelog rendertostring result users throw new error ooooops error ooooops throwingcomponentrender users resolve users reactdomserverrendererrender users reactdomserverrendererread users rendertostring users object users modulecompile loader users objectrequireextensions anonymous function js users moduleload far tell code throw rather output afraid maybe nt add new server renderer", "num": "10442", "d": "8/2017"}, {"title": "crossorigin error passed componentdidcatch incorrectly", "body": "tl dr react passing crossorigin error thrown crossorigin scripts see discussion thread repro case able confirm behavior quick look showed null", "num": "10441", "d": "8/2017"}, {"title": "love react way beautiful designed", "body": "", "num": "10440", "d": "8/2017"}, {"title": "callback lifecycle", "body": "react good templating engine making animation sometime horrible use greensock animation library animation since react animation library like impressed solve design task nt problem need animation unlike animation apply hack last situation example wrapping component extends react lifecycle another hack general want ask possible add callback lifecycle easily animate components", "num": "10439", "d": "8/2017"}, {"title": "reactcomponent docs displayname", "body": "following statement displayname string used debugging messages jsx sets value automatically see jsx depth almost sure incorrect neither react jsx sets automatically another error docs jsx depth nt even mention maybe could change something like displayname string used debugging messages usually nt need set explicitly inferred function class name creates component might want set explicitly want display different name debugging purposes create higherorder component see wrap display name easy debugging details makes sense", "num": "10438", "d": "8/2017"}, {"title": "reactdom docs confusing sentence", "body": "following statement reactdomrender modify container node modifies children container may possible insert component existing dom node without overwriting existing children think replaced wrong", "num": "10435", "d": "8/2017"}, {"title": "tutorial nonsense sentence run", "body": "want request feature report bug bug current behavior note onclick dom component special meaning react could called onclick prop square handleclick board something else current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior verb handleclick board part part first clause versions react browser os affected issue work previous versions react", "num": "10433", "d": "8/2017"}, {"title": "referencing within defined", "body": "nt necessarily bug feature asking implemented currently inside component undefined however defined value within realize point different instances demonstrating difference example javascript class example extends reactcomponent render consolelog thiskey undefined return reactchildrenmap thispropschildren child gt consolelog childkey defined return child expect readablewriteable within however seems counterintuitive idea undefined within component", "num": "10432", "d": "8/2017"}, {"title": "change reactcreatclass property getdefaultprops callback object like proptypes", "body": "think proptypes object getdefaultprops callback uncomfortable change know", "num": "10423", "d": "8/2017"}, {"title": "events registered inside shadow dom", "body": "want request feature report bug bug current behavior render react component inside shadow dom events dispatched react ie something like javascript alert clicked gt foo bar nothing happens someone investigated already got bottom wrote work around current behavior bug please provide steps reproduce possible minimal demo problem following official docs expected behavior events dispatched even react app rendered shadow dom versions react browser os affected issue work previous versions react browsers tested react", "num": "10422", "d": "8/2017"}, {"title": "onchange event fires incorrect selectedindex value", "body": "want request feature report bug report bug current behavior element event fired incorrect like nt actually changed happens element rendered another react dom root see example link current behavior bug please provide steps reproduce possible minimal demo problem expected behavior callback handlers receive events values user actually selected test case example choosing two expect following console output versions react browser os affected issue work previous versions react bug observed packages version latest stable version works fine", "num": "10420", "d": "8/2017"}, {"title": "dynamic names snapshot files jest", "body": "hi using snapshot testing application application theme based parameter passed component theme changes look n feel app adding classes elements want generate snapshots components themes want duplicate code keep two separate testspec files way generate snapshot files based theme passed one spec file expected behaviour two theme values dark light one componentspecjs file generate componentdarkspecjssnap componentlightspecjssnap based theme passed way separate separate snapshots based theme one source spec file", "num": "10419", "d": "8/2017"}, {"title": "documentation style numeric values treated pixels missing", "body": "used exist react documentation tips section mentions support missing entirely old documentation page removed commit", "num": "10418", "d": "8/2017"}, {"title": "server side rendering warning using uppercase html always use lowercase html tags react", "body": "want request feature report bug report bug current behavior whenever render svg elements camel cased eg server side get following warning expected behavior warnings consistent client side rendering possible case expect warning since using camel cased svg element names pretty standard client side rendering seems check current namespace server side rendering seems currently check place versions react browser os affected issue work previous versions react hitting hitting version previously thanks advance", "num": "10415", "d": "8/2017"}, {"title": "unexpected rerender different nodeenv", "body": "hi want request feature report bug reporting bug gets crazy current behavior found strange behavior development version production one nt know production build redirect happens entire tree switch component rerendered scratch nodeenv development nodeenv production noticed production env keys generated every time route changes opened issue reactrouter repos also tried also nt minify anything result someone knows happening may causing versions react browser os affected issue work previous versions react react reactrouterdom os macos sierra version browser google chrome version official build", "num": "10413", "d": "8/2017"}, {"title": "two steps server side rendering", "body": "want request feature report bug feature current behavior imagine component triggers api request method updates internal state want render version component operation call twice expected behavior many ways achieve static methods component etc way seem tricks proper api would better", "num": "10411", "d": "8/2017"}, {"title": "broken date inputs test dom fixture", "body": "open date inputs test harness click little x clear input rangeerror invalid time value fixture broken beta", "num": "10408", "d": "8/2017"}, {"title": "warn early event listener function", "body": "used throw event listener function stack fiber silently ignores think throw would let us add support objects eg passive listener configuration want minor rather major", "num": "10407", "d": "8/2017"}, {"title": "show better message react loaded", "body": "currently react loaded reactdom shows throw nicer error message entry point think", "num": "10406", "d": "8/2017"}, {"title": "reactdom removes server rendered content rendering", "body": "want request feature report bug bug current behavior react reactdom removes server rendered content rendering tested applications big component tree perceivable user current behavior bug please provide steps reproduce possible minimal demo problem reproduced bug tiny app box component rendered server sent client client loads bundlejs contains component added debugger box component show open dev tools react react code expected behavior reactdom perform reconciliation without removing content react behavior versions react browser os affected issue work previous versions react browser chrome current version previous version", "num": "10405", "d": "8/2017"}, {"title": "outstanding work custom attributes pr", "body": "final work land x add attributes need boolean values back whitelist x data aria attributes accept booleans x warn nan x test coverage unknown booleans done sufficient x aria camel casing verify nt regressions existing attribute support manual test page x need pass objects warn otherwise warn html x missing warning bad type second use attribute x change warning wrong casing specific", "num": "10404", "d": "8/2017"}, {"title": "add tests gt transition", "body": "deleted testing public api hard say tested path code actually took either add similar test public api equivalent test manual fixtures see details", "num": "10401", "d": "8/2017"}, {"title": "noshade attribute working element", "body": "want request feature report bug bug current behavior passing element nt work current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior attribute added rendered dom versions react browser os affected issue work previous versions react", "num": "10400", "d": "8/2017"}, {"title": "rfc plan attributes react", "body": "note final plan changed refer details ends react formal conclusion discussion mostly yet fully implemented meant address wrote doc mostly based discussion nhunzaker decided write attempt formalize behavior want bugs refer back current behavior react lets use approved camelcase properties look organic javascript js warning gt gt gt warns gt gt gt two downsides problem custom attributes pass custom nonstandard libraryspecific notyetstandardized attributes popular feature request problem maintaining whitelist currently maintain whitelist allowed attributes use even production build permissive drop reactdom size postmingzip without changes app code guiding principles change current behavior existing principles want preserve code behave identically development production one pretty obvious constraints whitelist existing applications keep working okay getting permissive passing attributes dom want change react dom apis point one obviously valid way supply property component example allowing would ambiguous confusing component authors maintain spirit javascriptcentric api users already bought idea important props consistent used javascript match htmlsvg specs want change think compromise lets us solve problems without deviating principles proposed behavior overview drop large part whitelist make behavior less strict used ignored due wrong casing passed instead omitted emit warning however still pass attributes differ casing react version lets us drop reactdom bundle size keep whitelist development proposed behavior depth let say attribute name use react name htmlsvg specs whitelist map react might look like proposed changes whitelist remove attributes special behavior words delete attributes work regular html get size savings still keep full attribute whitelist dev mode warnings proposed changes algorithm let say attribute user jsx follow steps step check exists whitelist equal match use corresponding name whitelist exit example matches behavior match continue step check exists whitelist trying determine user using dom version attribute sufficiently different one suggested react casing case render anything warn exit far matches behavior note catch cases sufficiently similar excluded whitelist example keep whitelist anymore hit case continue step value type valid write dom warning deviates react canonical api deviate reached stage render dom anyway may may successful render strings numbers value different type skip warn numbers also warn still render value coerced string success depends whether dom accepts attribute however still warn words warn canonical react api differs casing cases step also captures new requirement completely unknown attributes happily pass considerations aria data attributes still pass validation aria attributes moved developmentonly allow warn unexpected aria attributes attributes seem like aria attributes eg minor deviation pass everything approach seems sensible handling custom element attributes changed handling special attributes eg changed note approach adding support new dom attribute still possible minor version long different casing people would get warning new canonical name least old name might using would still work unlike case completely disallow second name known attributes allow custom attributes general", "num": "10399", "d": "8/2017"}, {"title": "reactnativefbsdk setup", "body": "bug report trying setup reactnativefbsdk fails followed steps given link get following error want installation go successfully currently using version react trying first time way found reactnativefbsdk raise issue hence raising please help", "num": "10398", "d": "8/2017"}, {"title": "onmouseleave strange behaver disabled child element", "body": "bug report demo contains disabled button react trigger correctly div trigger mouse button move div tried amp chrome issue sure whether appear", "num": "10396", "d": "8/2017"}, {"title": "nonissue need advise adding authentication react app", "body": "fact would like integrate facebook authentication react app save user credentials database along additional data used authenticate api idea handle authentication authorization react app went books none touched aspect point book tutorial link whatever think point right direction thanks advance", "num": "10395", "d": "8/2017"}, {"title": "issue", "body": "want request feature report bug bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "10392", "d": "8/2017"}, {"title": "request exports htmldompropertyconfig svgdompropertyconfig ariadompropertyconfig", "body": "feature request react htmldompropertyconfig svgdompropertyconfig ariadompropertyconfig available directly eg however longer available think public parts reactdom inevitable implement library build react dom html text see use", "num": "10391", "d": "8/2017"}, {"title": "reacttestrenderer shallow api mismatch", "body": "want request feature report bug feature currently different apis reason would helpful switching shallow supported put together pr interest reacttestrenderer javascript import testrenderer reacttestrenderer renders gt const result testrenderercreate expect result tomatchsnapshot shallow javascript import shallowrenderer reacttestrenderershallow renders gt const renderer new shallowrenderer const result rendererrender expect result tomatchsnapshot", "num": "10390", "d": "8/2017"}, {"title": "attribute needed guaranteed react", "body": "gaearon mentioned react guarantee attribute set probably bug understand well react ensure property set anyway current behaviour react renders html element without attribute explicitly passed demo time pen made simple example setting element obtaining result actually property set well since original medial file audio track pen result muted point think specific need expected behaviour functionality pov absolutely ok component renders muted requested browsers policies specifically related issue webkit new policies ios updated one year ago interesting changes element part interested elements also allowed autoplay without user gesture specific need explicit tell browser video could ed similar issue", "num": "10389", "d": "8/2017"}, {"title": "consider renaming rendertostream rendertonodestream", "body": "checkin code render stream looks like import rendertostream reactdomserver rendertostream text pipe response great however little concerned taking word node mix thinking may eventually want render browser streams really neat feature used concert serviceworkerside rendering would propose renaming would give room future make pr would chance accepted cc gaearon amp sebmarkbage", "num": "10388", "d": "8/2017"}, {"title": "unhandled error displayed twice", "body": "bit weird look last log notice internal error supposed give error boundary said uncaught wonder nt look like intentional", "num": "10384", "d": "8/2017"}, {"title": "array length read", "body": "hello new react trying run piece code following function use iterrate array run gives error uncaught typeerror read property length undefined someone help understand wrong thanks movimentionclick function idselected var itemsel null", "num": "10383", "d": "8/2017"}, {"title": "much unnecessary updates child element moved front", "body": "want request feature report bug sure bug accepted behavior affect performance situations even break expectations others eg animating moved elements ie simple moves current behavior child element moves end list front react actually moves elements movedlast element instead simply inserting moved element front list also stated generally element block elements moving backward significant shift current behavior bug please provide steps reproduce possible minimal demo problem via similar template demo shows dom operations performed dom nodes moves amp insertions reconciliation reproduce issue type input field click type move last x front click output instead moving x front react actually moves elements x note demo uses mutationobserver api find operations also verify behavior directly commenting code activates dom observer componentdidmount watch dom operations manually devtools element inspector expected behavior react perform minimal number operations know minimum vary situation trivial infer general case common cases like one feasible info use case handled virtual dom libs like preact snabbdom inferno remarkable case always infer minimum number operations uses algorithm find longest increasing subsequence array containing indexes old elements found behavior working demo find vdom libs rearrange nodes children reconciliation example output libs demo versions react browser os affected issue work previous versions react demo uses version tried behavior", "num": "10382", "d": "8/2017"}, {"title": "better explanation component nt imported", "body": "want request feature report bug feature current behavior console expected behavior", "num": "10381", "d": "8/2017"}, {"title": "dispatch blur event siblings", "body": "two elements level onblur handler one element loses focus callback try dispatch blur event second element maximum call stack size exceeded error console try example jsfiddle click second element press tab button lose focus example link version", "num": "10380", "d": "8/2017"}, {"title": "\u7ec4\u4ef6\u5b9e\u4f8b\u5316\u7684\u95ee\u9898", "body": "", "num": "10379", "d": "8/2017"}, {"title": "number input firing onchange", "body": "know bug feature since put input type number two minuses stop calling callback value inside input change react browser version official build", "num": "10370", "d": "8/2017"}, {"title": "dynamically created element unable load dangerouslysetinnerhtml", "body": "dangerouslysetinnerhtml getting loaded component rerenders sample declaration dynamic component sample usage", "num": "10367", "d": "8/2017"}, {"title": "async toplevel hook commit", "body": "nt needed think missing toplevel api want integrate nonreact code around async way probably parents around always case want show parents react done maybe hide show callback time however would better could start building tree async react get callback trigger lifecycles insert tree actual dom whatever manipulation need trigger lifecycles way css layout information available virtue document already see two possible routes call hook commit immediately b invoke callback pass another function function invoked actual commit approach precedence dom append async offscreen canvas second option probably preferable efficiently cleanly", "num": "10366", "d": "8/2017"}, {"title": "make google chrome devtool play well reactjs", "body": "hi usually difficult debug reactjs site know react redux work many projects nt follow official document write bunch code customize make project difficult understand easiest way know whole working flow follow debugging chrome devtool nt play well reactjs example breakpoint nt hit print nt hit breakpoint want know error come find familiar node package need debug lines ca nt set breakpoint wrong scope see scope shows googled nothing helpfuli really want working debug solution would help much", "num": "10365", "d": "8/2017"}, {"title": "adding image tag inside react component throws error", "body": "working app trying use image tag thought something setup stripped everything zero indexhtml indexjs import react react import reactdom reactdom reactdomrender documentgetelementbyid app image renders properly get error console reads digging source error thrown following function inside given dom node return closest reactdomcomponent reactdomtextcomponent instance ancestor function getclosestinstancefromnode node node internalinstancekey return node internalinstancekey walk tree find ancestor whose instance cached var parents node internalinstancekey parentspush node nodeparentnode node nodeparentnode else top tree node must part react tree unmounted potentially return null var closest var inst node amp amp inst node internalinstancekey node parentspop closest inst parentslength precachechildnodes inst node return closest nt matter put image inside component surrounded divs siblings alone nothing gets rid error", "num": "10363", "d": "8/2017"}, {"title": "throw host component function child", "body": "surprised throw neither stack fiber always indicative mistake", "num": "10360", "d": "8/2017"}, {"title": "reactdomfactories peerdep", "body": "want request feature report bug bug current behavior reactdomfactories peerdep react seems though work react current behavior bug please provide steps reproduce possible minimal demo problem via similar template na expected behavior reactdomfactories works react versions react browser os affected issue work previous versions react react", "num": "10358", "d": "8/2017"}, {"title": "react shallow renderer batched updates discussion", "body": "react comes new completely rewritten shallow renderer new renderer nt currently provide method issue discussion whether implement method cc flarnie lelandrichardson recently discussed wrt potential impact enzyme cc initially added integration enzyme also provided example implementation", "num": "10355", "d": "8/2017"}, {"title": "docs add note checkboxesradios preventdefault", "body": "want request feature report bug add note docs preventdefault causing issues change handlers checkboxesradios current behavior note issue docs made pr merged got lost removed new docs helping someone exact issue asked nt covered docs expected behavior explanatory note docs", "num": "10354", "d": "8/2017"}, {"title": "wrong child key prop warning babelplugintransformreactinlineelements", "body": "want request feature report bug feature bug current behavior warning seems say inside inside component incorrect key props actual fact element inside inside component causing problem looking things add key prop warning disappears warning also disappears remove ref string know deprecated nt get warnings seems like string refs key prop warnings might combining somehow another reason confusing component array inside children iterate anything think keys actually really required component looks like svganimation looking things expected behavior targeted warning either problem key props problem string refs clearly separated also targeted correct element case instead versions react browser os affected issue work previous versions react react", "num": "10352", "d": "8/2017"}, {"title": "onchange event nt fire trying type value input using appium ios", "body": "want request feature report bug bug current behavior onchange event nt fire trying type value input using appium type value programmatically current behavior bug please provide steps reproduce possible minimal demo problem via similar template also tried android work fine relates ios expected behavior onchange event fired trying type value input using appium versions react browser os affected issue work previous versions react react since works fine iphone ios appium", "num": "10347", "d": "8/2017"}, {"title": "permissive rehydration logic", "body": "last little pursuing idea called react snapshot instead running code node environment generate static html run virtual browser jsdom chrome headless take snapshot dom particularly moment time host snapshots like static file technique also known prerendering tossing around different api choices order handle components async data fetching requirements already starting see real promise approach snapshot environment similar client one far fewer changes needed get performance amp accessibility benefits serving real html users example react snapshot async api make component snapshottable diff import snapshot reactsnapshot class home extends reactcomponent state quotes null componentwillmount snapshot gt fetch apiquotes response gt responsejson quotes gt thissetstate quotes render const quotes thisstate return quotes amp amp quotesmap quote gt idea async parts app wrapped call caches responses rehydrates client however hit walls think means need changes react take logical conclusion hence wanted start discussion whether changes would compatible react future direction rehydration far tell experimentation reading code two criteria reusing existing dom elements prerendered html page hash initial clientrendered markup match present instance render tree needs match dom element two criteria enforced structure content dom kinda see checksum cheapest way confirm structure id element needed actually wire everything also attribute could calculated something longer present html however generating exact right checksum way existing ssr api turns pretty difficult htmlescaping woes hit problem rendering react app like normal taking root container passing addchecksumtomarkup getting checksum first realised needed add element along way nt hard still nt working figured due escapetextcontentforbrowser converting things like meaning content appears rendered precise string therefore checksum rehydration takes place understand reading code react always sanitises html content generating markup server client fact injected dom nt resanitise things like quotes nt technically need discussed issue changed particular problem would disappear may well nt hit yet real issue needing content byteforbyte equivalent rather functionally structurally equivalent interim solution moment realised easier boot app entirety wait async processes take place effectively reboot app using splice markup place sideeffects relying like css injection meta tags head affect dom outside react app preserved markup checksum reactrendered html guaranteed correct works ideal still understand components running two different modes run different lifecycle methods one generates final snapshot think adds unreasonable conceptual burden much way serverrendering really problem see status quo started looking problem first place snapshotserver rendering requires much overhead people wo nt exactly createreactapp nt include none options simple enough broad enough applicability official react router docs warn agains combining serverrendering codesplitting serverrendering boilerplates include fairly specific webpack hacks provide environment server client etc result people ever clientrendering serve blank page amp render everything clientside code splitting service worker caching offer useful advantages imo enough snapshot rendering could solution offer big benefits small changes application code dream solution architecturally like arbitrary react app launched one browser executed ready async resources complete snapshotted serialised html resumed another browser snapshots would generated cached edge cdn deployment periodically depending often content changes practically think would require two changes react architecture first weaker check fingerprint hash escaped html method snapshot indicate react reuse much existing dom possible second would parts tree rehydrated rather whole thing component sideeffect say snapshotted html would include result sideeffect app boots client side render method generate initial behaviour moment react would replace rendered might preferable leave dom unchanged first render wire things later nt know exact specifics solution know enough internals react become wanted start discussion see interest react team amp wider community use case direction look forward hearing thoughts", "num": "10338", "d": "8/2017"}, {"title": "delete raf reactdomframescheduling", "body": "nt use raf scheduling anything anymore yet still enable reactdomframescheduling probably simplified bit exposing", "num": "10336", "d": "8/2017"}, {"title": "move benchmark dependencies main packagejson", "body": "nt require working react let move similar take time space regular installs", "num": "10335", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "thing special ocaml already firstclass language feature would bypass use also syntax sugar accessing value", "d": "8/2017"}, {"body": "ref object allocated separately great refs perhaps prevalent enough really concern practice would probably even end faster people use inline fatarrow syntax currently inefficient could one imagine form would work arrays elements ie want keep ref items list otherwise seems problematic users achieve react prefer style", "d": "8/2017"}, {"body": "guessing would nt unthinkable native support refs either would act exactly value referencing except way updating ref eg", "d": "8/2017"}, {"body": "suppose one issue nt actually compile bucklescript compiles opaque object like would nt know data structure signature anyway maybe indeed use ref callbacks interop layer cc chenglou", "d": "8/2017"}, {"body": "record compiles array single item internal representation though unlikely change bit torn", "d": "8/2017"}, {"body": "thanks followup strong opinion since poweruser feature sake reactjs js users let keep api minimal always cc jordwalke", "d": "8/2017"}, {"body": "like idea introducing new component type serves target reason react compiler experiments trueadm mark unstable let us try new apis faster pace usual release cycle ongoing async investigations could also benefit", "d": "8/2017"}, {"body": "short introducing whole new component type could sufficient case seems like several projects could benefit experimental component api surface", "d": "8/2017"}, {"body": "seeing warning proptypes think may seeing warning place", "d": "8/2017"}, {"body": "issue happens proptype definition sorry updated description accordingly fiddle", "d": "8/2017"}, {"body": "see expects proptype function class want instead", "d": "8/2017"}, {"body": "thanks jquense", "d": "8/2017"}, {"body": "small suggestion update documentation might handy given pretty common use case using thanks", "d": "8/2017"}, {"body": "try beta", "d": "8/2017"}, {"body": "try beta would nice back using react really like btw nt copy last line code obviously", "d": "8/2017"}, {"body": "downloaded react ran yarn install yarn build copied project copies project note realized cra easy button strategy overwrite real files using procedures using production build got following results ran twice sure memory start memory end difference memory start memory end difference note also particularly careful verify using newest version testing looking chrome gt sources gt gt static gt nodemodules gt react gt reactjs reactdom gt indexjs confirmed using right files looking source let know anything assist", "d": "8/2017"}, {"body": "look objects retained", "d": "8/2017"}, {"body": "nevermind appears testing methodology broken look like problem react rather problem chrome happened testing actual application noticed chrome tab developer tools insanely large mb closed noticed chrome task manager stopped showing steady growth application troubleshooting seeing growth like mb per hour application developer tools open went back react test time left chrome developer tools closed watched task manager originally left developer tools open could trigger gc without developer tools open saw automatic gc process get triggered every often memory would regularly drop way kinda reminds quantum physics day something schrodinger cat going close ticket", "d": "8/2017"}, {"body": "hi piu issue uncommon one pretty frustrating performance bottleneck big lists web react generally lists large want save browser extra work actually rendering lists items visible maybe like items time user scrolls render remove previous ones technique generally called windowing virtualizing lists good libraries exist building sorts lists including reactvirtualized reactlist addition perhaps instead try make use list item components ones change actually update well making sure probably better luck getting feedback well using one many excellenet support avenues issue tracker generally reserved bug reports feature requests", "d": "8/2017"}, {"body": "also figured performs insertbefore performs insertbefore depends direction think", "d": "8/2017"}, {"body": "thanks report bgnx essentially duplicate please direct feedback issue thanks", "d": "8/2017"}, {"body": "hi looks like issue reactrouter react probably bug unfortunately give support packages use react would try rr repository various support avenues stackoverflowcom discord", "d": "8/2017"}, {"body": "please see", "d": "8/2017"}, {"body": "hey marcusmann definately import use external javascript react see error nt related react using libraries seems like trying use twitter bootstrap without including jquery requires try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms listed get support doc page might also want try bootstrap support options", "d": "8/2017"}, {"body": "unless us patents plan sue facebook patent infringement lawsuit costs lot money even prepare case way license affects plan sue facebook patent infringement suggest consult lawyer rather github hope helps", "d": "8/2017"}, {"body": "nt would nt worry nt cost using props javascript engines smart enough waste resources react would nt save work nt pass function", "d": "8/2017"}, {"body": "hey sospedra test renderer mock components react react native according jest docs react native provides default mocks jest would recommend referring react native support resources issue tracker help thanks", "d": "8/2017"}, {"body": "hey welcome try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms listed get support doc page", "d": "8/2017"}, {"body": "still difference would add event listeners component lifecycle hooks like way need render component server wo nt complain missing object", "d": "8/2017"}, {"body": "add report looks like react updating field triggered update event first place see visual explanation", "d": "8/2017"}, {"body": "tested works well broken starting", "d": "8/2017"}, {"body": "jsfiddle jsfiddle", "d": "8/2017"}, {"body": "broken tested via createreactapp", "d": "8/2017"}, {"body": "sure got introduced via", "d": "8/2017"}, {"body": "btmpl code example working", "d": "8/2017"}, {"body": "cc nhunzaker", "d": "8/2017"}, {"body": "people ask web devs keep writing ui input libraries instead using native inputs stuff", "d": "8/2017"}, {"body": "checked present firefox safari well chrome related introduced chrome related pr", "d": "8/2017"}, {"body": "duplicate happening react parses number input value number comparison check call parses comparison new incoming value decide update input value since already parsing input number values end decides nt need update input one solution might compare values strings well", "d": "8/2017"}, {"body": "thanks aweary thought close stick", "d": "8/2017"}, {"body": "yup closing duplicate", "d": "8/2017"}, {"body": "care submit pr think dev usage proxy might work may ecosystems concerns approach folks weird things give shot want send", "d": "8/2017"}, {"body": "could direct request proptypes repo warning longer part core react library thanks", "d": "8/2017"}, {"body": "thanks suggestion nt see problem cc gaearon probably add knows", "d": "8/2017"}, {"body": "hey try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms listed get support doc page", "d": "8/2017"}, {"body": "ca nt speak team think plently cases ok choice example case think better choice function ref especially nt control components need add ref maybe gaearon speak bit potential deprecation initial issue seems like worked around reasons wanting remove unless gone missed something huge p", "d": "8/2017"}, {"body": "hi passing browser globals would really tough change make would involve substantial rewrite huge swatches codebase allow ca nt speak core team hunch nt going think worth luckily however ways around issue node vm module creating new isolated js contexts hunch would test runners surface option allow test run new context may good reasons sort thought jest already cc cpojer", "d": "8/2017"}, {"body": "yeah unfortunately possible however could create test file per test", "d": "8/2017"}, {"body": "fix problem removed works fine", "d": "8/2017"}, {"body": "cc aweary nhunzaker properties expect true false values know aria boolean attributes cursory look boolean attributes default grep page matches compare means could true true omit attribute false think might compatible almost every case html string treated boolean value true valid attribute know whose behavior different already special case guess keep", "d": "8/2017"}, {"body": "attempting summarize proposals proscons far option stringify pass booleans pros consistent way react currently treats known attributes already implemented cons probably engineer wants expects code could create bugs foo false may get treated foo true browsers option render implicit boolean attribute either adding value passed removing passed pros consistent spec probably closest desired behavior would fix cons needs implemented change behavior known attributes well order consistent introduces inconsistency introduces another flavor behavior attributes react could confusing maybe problem option remove booleans warn pros consistent treat invalid values like functions behavior master could achieved minor updates cons would require minor updates nt totally consistent spec boolean attributes might unexpected users edit please correct anything missed thanks everyone chimed", "d": "8/2017"}, {"body": "also wanted share let try keep behavior consistent known attributes unknown attributes possible limit number colors used simpler users fewer variation react deals property values", "d": "8/2017"}, {"body": "iiuc far know option downsides never cause wrong behavior know right sounds compelling", "d": "8/2017"}, {"body": "means could true true omit attribute false spicyj setting boolean attributes true nt valid according html spec section boolean attributes attribute present value must either empty string value ascii caseinsensitive match attribute canonical name leading trailing whitespace values true false allowed boolean attributes especially problem custom elements outlined download true attribute know whose behavior different another enumerable attribute accepts suggesting known attribute expects stringified boolean stringify calling unknown attribute treat false boolean attributes according spec setting attribute empty string caseinsensitive match attribute name removing attribute otherwise call stringified value", "d": "8/2017"}, {"body": "spicyj actually prior version custom attributes feature gaearon dug spec found attributes expected truefalse strings html svg", "d": "8/2017"}, {"body": "aweary correct behavior though right practice would test hasattribute since common checked common checked nhunzaker ah like autocomplete false would need become autocomplete false good find", "d": "8/2017"}, {"body": "spicyj existing behavior nt correct renders spec also explicitly states valid value boolean attributes suspect may implications extending past whether returns right value example custom elements", "d": "8/2017"}, {"body": "think aweary suggesting makes sense already stringy boolean attributes list still allow boolean values filter change way boolean attribute actually written", "d": "8/2017"}, {"body": "aweary still curious behavior assign string nt match spec", "d": "8/2017"}, {"body": "nhunzaker weird know boolean attributes kind spec exist nt using remove boolean attribute nt make sense given api setting attributes spec states use boolean attributes value least interpretation ca nt speak motives spec authors", "d": "8/2017"}, {"body": "still allow boolean values filter change way boolean attribute actually written dompropertyoperations dommarkupoperations maybe could coerce known enumerable attributes expecting booleans strings earlier code path coerce call maybe pass flag either way think implementing behavior nt complex", "d": "8/2017"}, {"body": "sebmarkbage pointed nt actually consistent behavior booleans sometimes get stringified sometimes maybe let add context thought stringifying default", "d": "8/2017"}, {"body": "clarify position mostly advocating following spec unknown boolean attributes compatibility concerns set knownpreviouslyknown attributes totally makes sense get behind special casing behavior think default approach attributes information consistent spec possible", "d": "8/2017"}, {"body": "arguing conformance spec case like nt matter far tell attributes described spec behave attribute present even though spec says truefalse nt correct interpret warning writing true html would liable think false would work false nt case writing true manually refactoring hazard html argument nt translate react true behaves browsers nt see downside passing true", "d": "8/2017"}, {"body": "arguing safer conform spec unknown attributes accept booleans especially context future boolean attributes may depend behavior defined spec also concern custom elements outlined maybe robdodson provide insight importantly matter boolean attributes value since browsers definitely nt treat absent attribute think would confusing stringified nt makes sense follow spec cases downsides already whitelist boolean attributes special case stringify compatibility concerns next major treat truly unknown attributes spec describes", "d": "8/2017"}, {"body": "advantage true vsomit use logic", "d": "8/2017"}, {"body": "spicyj aweary different implementations whether translate vs unknown attributes", "d": "8/2017"}, {"body": "want support enumerated attributes boolean values renders need include branching logic think reused aria attributes nhunzaker removing attribute instead stringifying unless agreement", "d": "8/2017"}, {"body": "also arguing false omit attribute unknown attributes", "d": "8/2017"}, {"body": "spicyj said means could true true omit attribute false empty string think could remove every entry htmlpropertyconfig need like exceptions string values design standpoint like removes code", "d": "8/2017"}, {"body": "spicyj hah sorry spoke", "d": "8/2017"}, {"body": "spicyj somehow skimmed part even quoted thanks clarifying nhunzaker want keep stringifying boolean attributes already stringified probably need keep whitelist right sure point clear though concerned even able remove following major would nice", "d": "8/2017"}, {"body": "oh wait implements behavior advocating nevermind point", "d": "8/2017"}, {"body": "right think safely remove could nonbreaking", "d": "8/2017"}, {"body": "sure following exactly discussing think removing hasbooleanvalue breaking since changes happens pass nonboolean values", "d": "8/2017"}, {"body": "ah correct context happens breaking change would could technically assign string value one attributes need pass boolean get expected behavior empty string assuming go aweary approach maybe fine would nt spec compliant spicyj suggested earlier maybe presence enough would still remove value taking example hasbooleanvalue prop using string coerces true assigns attribute best spec compliant worst everything works expected right breaking change markup whatever string pass gets used like instead nt think breaking change functionally unless course consistent beyond example", "d": "8/2017"}, {"body": "think meaningful difference today hasbooleanvalue counted false would nt count attribute unknown everything else probably nt matter practice", "d": "8/2017"}, {"body": "note list incorrect example use probably one two believe nt use either rather attribute exists vs exists", "d": "8/2017"}, {"body": "note list incorrect autocomplete example use true false autocorrect probably one two thank sent pr addresses believe hidden nt use truefalse either rather attribute exists vs exists yep boolean property assigning set property however setting truefalse react result addingremoving attribute really convenient boolean properties avoid things like made default behavior could add flag said always stringify property would target attributes", "d": "8/2017"}, {"body": "yep hidden boolean property assigning ie exist guess point properties expect attribute attribute different falsetrue even nt conflated eg imho spellcheck really take string imagine spellcheck getting another enum value future signify different behavior assuming reason considered boolean attribute true default really serializing perhaps never done want keep consistent prefer avoid whitelist seem weird specify value spellcheck opposed", "d": "8/2017"}, {"body": "canonical way expressing easy find simply use property instead attribute read attribute preference keeping attribute consistent get using property", "d": "8/2017"}, {"body": "highlevel approach sound maintain current whitelist enumerated attributes rely coercion right add warning booleans used would warn advise use attributes currently whitelisted add warning use value would semantically different treated boolean attributes would warn advise use unknown boolean attributes call would keep attribute consistent get assigning property alternatively keep setting full string value concerns move using remove warnings whitelist assume boolean value means boolean attribute", "d": "8/2017"}, {"body": "enumerated attributes rely coercion right add warning booleans used spellcheck true would warn advise use spellcheck true makes sense feels unfortunate dom dang wonky p would silently fail tho", "d": "8/2017"}, {"body": "maybe could keep warning indefinitely nt costly devonly check", "d": "8/2017"}, {"body": "plan described aweary sounds good", "d": "8/2017"}, {"body": "hi upanicon never noticed behavior hunch actually chrome bug nt believe mounts events keep firing outside window honestly bit surprised tho react nt behavior well since using native events know fire synthetic events maybe aweary nhunzaker insight quirk playground", "d": "8/2017"}, {"body": "hi jquense dont see bug chrome guess behavior workaround break drag events noticed dragging popup window handler inside synthetic event motion stop mouse moved fast addeventlistener mousemove keeps moving", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "currently supported existing issue", "d": "8/2017"}, {"body": "currently getting width componentdidmount way refs finddomnode works initial load get slightly incorrect measurement refreshing correct every time open page new tab see incorrect behavior visual changes delayed various reasons special fonts loaded rendering images loaded rendering styles applied rendering etc common problem afaik reliably listen usually shows mention fails first render works refresh everything cached", "d": "8/2017"}, {"body": "node would usually however technically nothing prevents using reason browser client note refers probably nt need though", "d": "8/2017"}, {"body": "gaearon thank much helps lot", "d": "8/2017"}, {"body": "think checking attributes start best approach preact inferno already preact inferno related conversation customfuture event support depending timeline might possible would adding custom event support require major release going investigate event prototype gives us anything handler string guessing looks like correct maybe might nice guard even long shot", "d": "8/2017"}, {"body": "checking spec nt found anything yet less says events start believe safe disallowing anything outside boundary allowing functions would reasonable address issue", "d": "8/2017"}, {"body": "even events start might others another fun xss example js else used", "d": "8/2017"}, {"body": "still provide protection right really apples apples seems like far common mistake easily overlooked always edgecases hugely problematic spreading onto aformstylescriptobjectembed objectembed could probably huge values objects anywhere spread problematic style vulnerable neither forget spreading usersupplied values onto component theoretically anything thirdparty scripts site could also imagine quite complex attacks react simply defend wonder would nt preferable address sense spreading props manner obviously exploitable likely someone lololtroll fun quickly rather someone intentionally malicious finding complex edgecase future would catastrophic spreading usersupplied props bad time imho makes sense add blacklist would straight throw strongly worded error hopefully shows error tracking", "d": "8/2017"}, {"body": "hey lanseria looks like issue related jsbin compiling javascript jsfiddle code see running fine pausing exceptions jsbin example found failing due utility method failing exit loop nothing wrong code looks issue jsbin", "d": "8/2017"}, {"body": "hey gitfortress try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms listed get support doc page", "d": "8/2017"}, {"body": "would add comfortable configuring webpack consider using officially supported create react app instead", "d": "8/2017"}, {"body": "highlighted line presumably causes error react search find coming please file issue corresponding project", "d": "8/2017"}, {"body": "gaearon suggest need react component rendering ie properly rendering browser", "d": "8/2017"}, {"body": "believe commented nt seem related react find code coming try figure bundle use forum like stackoverflow minimal example maybe somebody help", "d": "8/2017"}, {"body": "want know guys take gave example personally think right open source creating communities build better software together facebook dignity license good risky open source shall ask really open source", "d": "8/2017"}, {"body": "cc zpao gaearon sir please would great reply", "d": "8/2017"}, {"body": "somehow got problem facebook inc doesnt anything react open source matter sue facebook due reasons even dont anything codes additional patent grant revoked sue facebook patent infringement something else explicitly said clause also called faq unless filed us patents bought decided sue facebook violation patents would alone cost lot money preparing lawsuits way clause affects clause nothing whether compete facebook fact twitter arguably facebook competitor happily using react ca nt offer legal advice hope helps", "d": "8/2017"}, {"body": "hey dang nothing like legal advice creating startup atleast right sure asking simply open source good open source gaearon ps standing open source rights startuplegal advice", "d": "8/2017"}, {"body": "open source yes", "d": "8/2017"}, {"body": "ok provided links reddit forums comment closing comment sorry closing issue personally still believe reason close github issue", "d": "8/2017"}, {"body": "issue tracker react react native please ask question react native repository instead said error message seems like module trying use depends node apis nt exist react native probably need use rnspecific apis", "d": "8/2017"}, {"body": "actually react issue try open mdn specs safari firefox similar behavior first check wan na number validation check example", "d": "8/2017"}, {"body": "hey mrerhu known issue duplicate mentioned mostly browserdependent easy way react prevent since browser nt triggering event data need detect prevent please refer information thanks", "d": "8/2017"}, {"body": "duplicate", "d": "8/2017"}, {"body": "aweary thank much", "d": "8/2017"}, {"body": "necmttn demo provided suitable need type call virtual keyboards mobile phone", "d": "8/2017"}, {"body": "make wo nt change effect tough need play css bit hide spin toolbox check", "d": "8/2017"}, {"body": "link codepen", "d": "8/2017"}, {"body": "working pen settings need add current versions codepen uses", "d": "8/2017"}, {"body": "since response closing assuming tsmvision figured issue", "d": "8/2017"}, {"body": "directory structure nt known jzjpg loading failure", "d": "8/2017"}, {"body": "github repo look", "d": "8/2017"}, {"body": "gitfortress nt enough information us help think issue react please provide information requested issue template deleted said seems like usagesupport question would check build setup make sure image loading setup correctly since nt think bug react going close please check one many great community support resources help questions like", "d": "8/2017"}, {"body": "please provide minimal example reproducing issue", "d": "8/2017"}, {"body": "working wanted make sure nt something obvious missing", "d": "8/2017"}, {"body": "probably trying reference use reactdom without importing requiring file want check line number referenced stack trace see problem", "d": "8/2017"}, {"body": "hard mecan solve released github try say thank", "d": "8/2017"}, {"body": "would put together reproduction bug try better support avenue like much easier get help vs bug tracker", "d": "8/2017"}, {"body": "yes use object react code run browser access normal browser dom api objects term virtual dom misleading react nt replace alter dom instead keeps description component tree compares next version something updates react components updates dom smallest set changes necessary think objects react change dom nodes manually without going react update cycle may confuse react break things suggest working guides react website get better understanding things interact one specifically using dom directly", "d": "8/2017"}, {"body": "hey bonjowi added basic code reproduce issue jsfiddle however nt see key error displayed jsfiddle unfortunately hard help ca nt reproduce issue occurring jsfiddle means likely reason key warning triggered sounds like passed array elements child could try write minimal example reproducing issue could look", "d": "8/2017"}, {"body": "aweary thanks time adding case createreactapp project cause error presumably something else react causing problem currently trying figure wrong get touch found problem", "d": "8/2017"}, {"body": "wild guess maybe productiononly transform like preset including accidentally enabled development", "d": "8/2017"}, {"body": "thanks gaearon confirm babelplugintransforminlineelements causing problem started stripping webpack configs etc found causing problem also reproduced issue createreactapp ejecting adding custom babelrc containing presetreact plugin transformreactinlineelements interested upload repository reproduce issue way issue repository mistake thanks help", "d": "8/2017"}, {"body": "expected babel doc page plugins says going cause confusing warnings used development", "d": "8/2017"}, {"body": "curious path leads component instance first place assume json output test renderer nt expose might wrong maybe using ref something like case nt sound like bug nothing wrong per se circular references ca nt say sure fix working nt appear something need fix side case describe circular reference component method component instance seems expected", "d": "8/2017"}, {"body": "gaearon thanks reply sure understand question trying locate deeply nested values results called testrendered component certainly suggesting circular reference bug however might make introspection objects little easier properties enumerable read included regardless able come another solution particular case seems working alright feel free ponder merits making properties nonenumerable wo nt press changes time thanks", "d": "8/2017"}, {"body": "code path hot defining properties sufficiently slower simple assignment wo nt", "d": "8/2017"}, {"body": "til reference found", "d": "8/2017"}, {"body": "workaround", "d": "8/2017"}, {"body": "way use button pause exception try use whenever possible whenever trying debug unexpected exception code pause caught exception use think exception might get caught trycatch also tends include lots feature tests nt care react nt recommend use exceptions except programmer errors prefer react user always show pause exception despite error boundary error boundaries failsafe check nt expect hit normal operation sure folks different perspective", "d": "8/2017"}, {"body": "honestly would love annotate individual trycatch blocks source feature test vs error handling real errors latter always stop former stop special mode", "d": "8/2017"}, {"body": "whatever preference plenty libraries internally use exceptions never found pause caught exception ever useful since produces incredible number false positives still react grain browser provided exception debugging tools agree inadequate", "d": "8/2017"}, {"body": "one reason chose way expect best practice react apps always toplevel error boundary nt whole app unmount whenever uncaught error disable feature inside error boundaries effectively disable errors originate inside react lifecycle render method", "d": "8/2017"}, {"body": "would nice get actual data often people rely feature personally number times used small zero", "d": "8/2017"}, {"body": "toplevel component error boundary fine errors occur rendering lifecycle callbacks address code responds network toplevel events need hook precisely ran problem", "d": "8/2017"}, {"body": "brandonbloom right mean say decide always use trycatch inside error boundaries effectively deciding use trycatch everywhere case remove entirely use trycatch directly might right thing tradeoff either way", "d": "8/2017"}, {"body": "think right thing let discuss tradeoff one hand removing logic replacing standard trycatch behavior less code better match standard pause caught exception behavior wonkiness necessary dev vs prod respect workaround quite kludgey even provided way better distinguish sorts error events hand debugging caught exceptions slightly annoying although annoying general outside react workaround annoyance simply disable error boundary components either configuration flag commenting like commenting block moreover stacktrace rendering boundary component gets popular workaround unlikely necessary want actively debuginspect error object case adding statement trick get stack trace either browser console boundary component rendering overlooking things favor keeping logic", "d": "8/2017"}, {"body": "think right another benefit removes problem crossorigin errors obscured error event dev sebmarkbage strongest feelings preserving feature recall correctly could additional factors forgotten", "d": "8/2017"}, {"body": "noticed voodoo nt immediately affected nt want comment general feels like one situations complications sufficient justify less interest avoiding compounding complexity", "d": "8/2017"}, {"body": "clear nt affect error boundaries errors caught preserve consistency effectively builtin boundary root even rethrow still considered caught common practice outside react would significant downside ecosystem full things cause noise eg open pause caught exception could possibly find fix callsites takes popular libraries agree change momentum everyone game theory plays pausing uncaught exceptions winning strategy therefore think proposal effectively becomes pausing exception viable default react apps flag turn would technically work discoverable scalable every lib know previous versions people get confused subsequent errors happens due inconsistencies ca nt properly clean would make debugging experience worse things every developer affected meanwhile top level handling relatively rare deal explicitly deal site usually one person deals implementation details error boundaries typically log errors anyway dev mode case someone forgets handling turns way easy silence errors make debugging silent ones pain part happens anyway similar unhandled promises maybe always raise top level events even prod", "d": "8/2017"}, {"body": "brandonbloom elaborate set would nt want handle error including boundaries eg logging expect anything treated error logged somewhere", "d": "8/2017"}, {"body": "even rethrow still considered caught huh tried individually various options firefox chrome behavior matches expectations rethrowing considered uncaught meanwhile top level onerror handling relatively rare deal explicitly deal site usually one person deals implementation details freely admit person pretty much every project ever work", "d": "8/2017"}, {"body": "rethrowing considered uncaught yea meant rethrow callsite break point happens would somewhere react internals way later source error happened case nt provide value log", "d": "8/2017"}, {"body": "sebmarkbage system bunch background processing fails future event handlers sync system cascading failures could wrap every callback every subsystem trycatch asynchrony makes practical hook windowonerror want log error server course also want display fatal error screen dev would show trace prod would akin browser tab", "d": "8/2017"}, {"body": "yea meant rethrow callsite break point happens ah ok understood compelling argument heard thus far think proposal effectively becomes pausing exception viable default react apps experience pausing exceptions viable javascript scenario ever encountered admit atypical probably unnecessary aside javascript indeed exception handling mechanisms semantically broken go contrast runs deferrecover logic prior unwinding stack context point original throw would available point last uncaught rethrow short fixing every major browser debuggers nt better solution propose however say still think disease worse cure long get stack trace add conditional debugger statement site original throw", "d": "8/2017"}, {"body": "tangentially related problem lot responsibility put users trycatch async promises error boundaries ensure error gets propagated centralized handler properly logged server message displayed dev people mess time added even error caught error boundary seems rationale extends use case ideally want log show dialog even error handled poorly constructed third party error boundary render fallback view would argue us issuing global event prod hand local error boundaries designed play nicely global error dialog screen logging want explicitly state properly handled error poorly constructed thirdparty error boundary maybe solution could api tags errors handled js class foo extends reactcomponent componentdidcatch error serverlogerror error thissetstate diderror true markashandled error", "d": "8/2017"}, {"body": "ideally want log show dialog even error handled poorly constructed third party error boundary render fallback view consider bug party library would suppressed errors calls maybe solution could api tags errors handled code posted depends subtle order execution callbacks tried suspect wo nt work handler installed startup run handler react installs uninstalls rendering lifecycle method execution", "d": "8/2017"}, {"body": "consider bug party library issue bugs like unhandled promises common find happen users nt log server code posted depends subtle order execution callbacks true thinking prod case use trycatch dispatchevent could control ordering dev mode case like issue talking would nt work", "d": "8/2017"}, {"body": "thanks taking time write issue johnjesse far know interleaving native events react synthetic events nt something support listen events toplevel simulate bubble capture phases ordering events likely always sync native events", "d": "8/2017"}, {"body": "fair enough nt sure supported even supported although would nice able interleave native synthetic events without worrying potential ordering issues something really expecting took figure causing", "d": "8/2017"}, {"body": "available graphiql died", "d": "8/2017"}, {"body": "nothing side problem unpkg nt manage let track", "d": "8/2017"}, {"body": "fixed", "d": "8/2017"}, {"body": "cc mjackson file seems work known unpkg issue", "d": "8/2017"}, {"body": "nothing side problem unpkg nt manage let track unpkgunpkgwebsite hopeful solved soon wo nt need change cdn", "d": "8/2017"}, {"body": "thanks ping gaearon looking", "d": "8/2017"}, {"body": "new feature introduced final add documentation soon probably release rc nt expect parameter one containing change shortterm worth went named parameter gives us option add information backwardscompatible way", "d": "8/2017"}, {"body": "proposing change object keys proposing addrename keys include trace decomposable data javascript example call framework component thatcomponentdidcatch err text something bad happenednat foo bar n componentstack component foo createdby bar", "d": "8/2017"}, {"body": "understood offering explanation used namedparameter single param nt docs entry yet since available beta info mention would nt hard pass along think issue great keep around one us followup", "d": "8/2017"}, {"body": "related", "d": "8/2017"}, {"body": "given thought thinking following change might nice js type source filename string linenumber number type stackframe name string null ownername string null source source null passed function injected via reactfibererrorloggerinjectioninjectdialog injectedfunction capturederror capturederror type capturederror componentname string componentstack string componentstackframes array error mixed errorboundary object errorboundaryfound boolean errorboundaryname string null willretry boolean passed componentdidcatch lifecycle hook componentdidcatch error error info errorinfo type errorinfo componentstack string componentstackframes array since proposal backwards compatible beta method signature going take stab", "d": "8/2017"}, {"body": "already deprecation warnings definitely welcome use forever split react proper deprecated nt problem using external pacakge", "d": "8/2017"}, {"body": "include fbme link like lodash think consciously nt add whole block seemed like build product source wording seems assume looking source code", "d": "8/2017"}, {"body": "take one spicyj gaearon", "d": "8/2017"}, {"body": "nt quite decided let wait hear back lawyers", "d": "8/2017"}, {"body": "let keep old headers time maybe condense future gzhappysky still interested", "d": "8/2017"}, {"body": "yes still interested complete today spicyj", "d": "8/2017"}, {"body": "supported use umd bundle node environment please either use node entry point precompile whole node app case alias umd bundles sure performance good news react everything bundle default wo nt need hack beta try hope helps", "d": "8/2017"}, {"body": "found react ssr executes takes want optimize version would release", "d": "8/2017"}, {"body": "month hopefully already try beta report issues", "d": "8/2017"}, {"body": "much", "d": "8/2017"}, {"body": "also nt follow onhandle convention activatelasers intro", "d": "8/2017"}, {"body": "like take issue", "d": "8/2017"}, {"body": "iansu cool help us release stable", "d": "8/2017"}, {"body": "cool would like arrived late", "d": "8/2017"}, {"body": "ahh iansu looks like skipped claimed really sorry iansu gabrielamazonas one interested writing test would caught added try trigger warning verify consoleerror called tests use checking warning example", "d": "8/2017"}, {"body": "iansu oh sorry nt realize different person paid closer attention bad", "d": "8/2017"}, {"body": "acdlite yes totally make pr directly", "d": "8/2017"}, {"body": "intentional known limitation streaming rendering impossible call back markup already sent opted keep rendertostring rendertonodestream output identical sebmarkbage ideas could potentially support something along lines one day small client runtime ex outputting script tags remove previouslysent content", "d": "8/2017"}, {"body": "intentional next next outoforder server renderer error boundaries nt really make sense inorder streaming server rendering since could already flushed boundary could buffer inside error boundaries would mean nt actually streaming rendering since best practice error boundary root could support rendertostring api easyish implement around high pri would likely go work outoforder renderer", "d": "8/2017"}, {"body": "ah got fault thanks closing issue", "d": "8/2017"}, {"body": "cc acdlite gaearon leidegre", "d": "8/2017"}, {"body": "could something funky caused eg eval", "d": "8/2017"}, {"body": "sure understand asking usercode maybe using repro accessing prop null value", "d": "8/2017"}, {"body": "looks like repro case starting tessinmini repo reduced jsx import react component react export default class app extends component state doerror false render return thisstatedoerror class errorboundary extends component state error null componentdidcatch error thissetstate error render thisstateerror return thisstateerrormessage return thispropschildren class componentthatfails extends component render const data null return datafoo console log uncaught typeerror read property foo null error pass crossorigin error thrown", "d": "8/2017"}, {"body": "think something bundling code tessinmini repo code cracreated app works expected maybe ssr logic", "d": "8/2017"}, {"body": "creating small standalone project ssrwebpacketc able reproduce unexpected behavior chrome loading content via seeing browser standalone standalone tessinmini dev tessinmini prod chrome firefox safari believe chrome considers files loaded always different domain launch chrome flag standalone file works loaded via protocol well also worth adding tessinmini example works expected production mode bc use regular trycatch unexpected crossorigin error affects devmode", "d": "8/2017"}, {"body": "eval meant webpack setting commonly used turns every module eval call shown separately devtools despite sourcemaps seems like determined nt issue", "d": "8/2017"}, {"body": "thanks clarifying absolutely right cause removing property webpack config clears issue project", "d": "8/2017"}, {"body": "probably encourage people stop using use instead fast afaik nt issues", "d": "8/2017"}, {"body": "interesting use setting reactvirtualized webpack config also nt show error super familiar webpack edit working rv project bc", "d": "8/2017"}, {"body": "worth ran devtools settings found devtool works default eval cheapevalsourcemap cheapsourcemap cheapmoduleevalsourcemap cheapmodulesourcemap evalsourcemap sourcemap inlinesourcemap hiddensourcemap nosourcessourcemap looks like default setting eval ones cause problems", "d": "8/2017"}, {"body": "put pr adds addition verbiage crossorigin devmode error mention", "d": "8/2017"}, {"body": "fyi leidegre solution issue replace webpack config", "d": "8/2017"}, {"body": "team chatted band briefly agreedupon solution change wording error message passed crossorigin error thrown react nt access actual error object development see details specified url blurb explains technique using devmode mentions tag attribute cdns webpack setting", "d": "8/2017"}, {"body": "bvaughn gaearon super happy could root cause thanks hard work enjoy weekend", "d": "8/2017"}, {"body": "welcome leidegre close loop added new docs page information crossorigin error causes", "d": "8/2017"}, {"body": "lgtm", "d": "8/2017"}, {"body": "thanks think react pretty cool", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "kepro thanks read article long time ago prefer js animation css animation reason use like gsap library anyway author article recommend use addons would like native realisation mean lifecycle method", "d": "8/2017"}, {"body": "could also work promises react supported promise return type would tell ifwhen wait resolve unmounting promise resolved proof concept action", "d": "8/2017"}, {"body": "making unmounting controllable component likely feature near future bunch reasources options tho dealing limitation though reacttransitiongroup lower level components help manage specifically component used animation libraries like greensock", "d": "8/2017"}, {"body": "makes sense think suggestion improvement would like open pr", "d": "8/2017"}, {"body": "flarnie sure thanks", "d": "8/2017"}, {"body": "flarnie created pull request", "d": "8/2017"}, {"body": "sure right nt know cases right wouldcould insert component existing dom node without overwriting existing children even could statement pretty vague edit spicyj earliest diff touching line kevin lacker big docs update context note referring", "d": "8/2017"}, {"body": "sorry confusing meaning become clearer think onclick prop square handleclick board two things eg b intended meaning note onclick dom component special meaning react could called b something else suggestions split sentence make clearer please let know thanks", "d": "8/2017"}, {"body": "note onclick dom component special meaning react could called onclick prop square handleclick board something else however common convention react apps use names handler prop names handle implementations", "d": "8/2017"}, {"body": "yes realize means controlled components controller components whatever nt introduced say onclick dom use references titles comparative things think component dom component ought go dom used", "d": "8/2017"}, {"body": "use word key make whole thing shorter without reference board square", "d": "8/2017"}, {"body": "would like make pr updating sentence sure understand specifically propose changing agree could probably clearer thanks flagging", "d": "8/2017"}, {"body": "english nt thing", "d": "8/2017"}, {"body": "someone community wants brainstorm better phrasing would great would review pr otherwise try come back help focused shipping stuff thanks patience", "d": "8/2017"}, {"body": "one else already edited write think best instead requesting pull note use onclick within tag either command react listen event user defined component abide naming convention designates property prop event emit propagator handle handleclick designates event consumer ps avoided using handler explaining instead using propagator", "d": "8/2017"}, {"body": "throwing hat ring note dom element attribute special meaning react could named square prop board method differently however conventional react apps use names event propagation event consumption observations addresses concern use word component confusing context using term element term widely understood referent used html spec e g root element placing names parent elementcomponent attributepropmethod emphasizes reason first term treated differently second third applied necessarily clear prior wording differently still ambiguous technical setting might either mean going told later finite range acceptable nomenclature arbitrary name would acceptable mistaken latter case might consider replacing differently anything want common convention redundant practice becomes convention commonality hence conventional think suggestion use propagation consumption sound seems unlikely intended readership would understand consumption context case viable alternatives might processing execution", "d": "8/2017"}, {"body": "usefulnecessary something external inspect key child element reacttransitiongroup instance reasons react needs key identify elements refer thing conceptually key function element component instance useful context elements terms parent instance nt concerned suspect though main reason key accessible element needs somewhere react identify elements needs reorder move p", "d": "8/2017"}, {"body": "thanks answer curious antipattern could considered one use mapping children use cases tinkering around accordion initially using store state section child open decided change specific prop however felt like generalized pattern follow", "d": "8/2017"}, {"body": "class takes static property object", "d": "8/2017"}, {"body": "use property name work", "d": "8/2017"}, {"body": "published workaround npm package", "d": "8/2017"}, {"body": "workaround properly work onchange writing onchange triggered blur makes sense since normal behavior anyone point react implement workaround", "d": "8/2017"}, {"body": "hey thanks issue first inclination say probably intended behavior event bubbling always sort iffy encapsulation prospect think goal shadowdom allow strict encapsulation events feeling falls sort category interop say jqueries event system react ca nt wonder others think aweary nhunzaker terms react onchange implemented integrated react event system changeeventplugin", "d": "8/2017"}, {"body": "yeah integrating shadow dom events hard problem event system registers listeners toplevel relying bubbling know handle event since shadow dom events nt bubble toplevel ca nt see assuming want render isolated react application inside shadow dom might able add check detecting whether element shadow dom could register toplevel listeners shadow root instead suspect easier said done", "d": "8/2017"}, {"body": "cc sebmarkbage reactcontrolledcomponent stuff probably", "d": "8/2017"}, {"body": "great bug report btw thank much", "d": "8/2017"}, {"body": "think workaround like problem use portal instead take look see something fix without portals definitely way go use cases", "d": "8/2017"}, {"body": "nt think jest supports intends better ask jest repository react repository working jest", "d": "8/2017"}, {"body": "gaearon thank", "d": "8/2017"}, {"body": "looks like server side missing namespace check", "d": "8/2017"}, {"body": "could please provide full example enough information help", "d": "8/2017"}, {"body": "hi gaearon thanks support created repo structure project ca nt pass entire project ca nt reproduce issue project could something project think could component mounting every time fetch user redirect nt behavior dev", "d": "8/2017"}, {"body": "suspect wanted say called server side thing probably api request lifecycle server side rendering otherwise request thing twice server client reason static methods used instead time works really depends intend use server side rendering react environment ex reactrouter helmet head management etc instance use reactrouter static configuration nt actually need anything reactrelated get data really sure good improvement possible inside react today", "d": "8/2017"}, {"body": "hi thanks advice mistake meant thing probably api request lifecycle server side rendering otherwise request thing twice server client nt make api requests serve side think nt even need ssr version app always need seo purposes need print product list wo nt double round trips client serve default state redux really think tricks interesting", "d": "8/2017"}, {"body": "said api request lifecycle static methods allow make without lifecycle reactrouter could even completely separated components instance simple async action creators route configuration personally might something react side yet see proposal would really help domain", "d": "8/2017"}, {"body": "cc aweary", "d": "8/2017"}, {"body": "super highpri happy fix later nt want derail betasync work filed follow", "d": "8/2017"}, {"body": "bvaughn easy fix pr open", "d": "8/2017"}, {"body": "rock", "d": "8/2017"}, {"body": "take one", "d": "8/2017"}, {"body": "got", "d": "8/2017"}, {"body": "gaearon looks like fiber throw error lazily try click element trigger invariant invariant currently lives eventpluginhubgetlistener could move somewhere else like throw early", "d": "8/2017"}, {"body": "would prefer", "d": "8/2017"}, {"body": "worth double checking sebmarkbage intentional", "d": "8/2017"}, {"body": "indeed intentional could warn early throw able lazily deal event listeners looking properties event triggered currently loop optimizable path", "d": "8/2017"}, {"body": "warning early sounds sensible", "d": "8/2017"}, {"body": "hi wondering status", "d": "8/2017"}, {"body": "flarnie great timing opened", "d": "8/2017"}, {"body": "gaearon throws also usedreexported include invariant provide rendereragnostic error message try include error earlier", "d": "8/2017"}, {"body": "sure one hand throwing specific place would prevent specific confusing error hand guarantee throw first renderer might use apis react object earlier", "d": "8/2017"}, {"body": "way determine order rollup load modules explicitly include snippet code top bundle add invariant entry point bundle still fails cryptic error since imported modules hoisted top bundle", "d": "8/2017"}, {"body": "add module like checkreact make first import renderer guaranteed execute first", "d": "8/2017"}, {"body": "please try generally support versions except react native expected many bugs", "d": "8/2017"}, {"body": "gaeron thanks works sorry wasting time think makes sense change installation instructions shared reactblog points right update looks like points sure ended alpha bad", "d": "8/2017"}, {"body": "probablyup deprecated nt use", "d": "8/2017"}, {"body": "plenty deprecated properties react supports still widely available sure else get effect well tue aug andreas svensson notifications githubcom wrote probablyup deprecated nt use receiving mentioned reply email directly view github mute thread", "d": "8/2017"}, {"body": "nt recommend using deprecated attributes simply still exist merged able set attributes nt whitelist including deprecated attributes meantime use css get effect use manually set attribute really need", "d": "8/2017"}, {"body": "one thing quite worked yet pass numbers booleans benefits drop things whitelist matches intuitive behavior based experience standard props allow downsides booleans might interpreted truthy browser cases", "d": "8/2017"}, {"body": "mostly settled tradeoff pass strings numbers pass booleans warn coerce numbers strings passing value number coerced string warn development still set sebmarkbage wants look corner cases likely last tweak", "d": "8/2017"}, {"body": "pass strings numbers pass booleans warn clarify mean passing booleans warning", "d": "8/2017"}, {"body": "would render dom would display warning string number concern browser apis consistent means coercing string might work future boolean attributes react pass aware could potentially render value browser would interpret truthy actually add support would flip people already relying wrong behavior breaking change affect known boolean attributes still keep whitelist keep passing", "d": "8/2017"}, {"body": "affect known boolean attributes still keep whitelist confused thanks", "d": "8/2017"}, {"body": "thoughts special casing custom elements property element name use property instead attribute", "d": "8/2017"}, {"body": "love see let discuss separately since already lot take nhunzaker probably close exhaustion working", "d": "8/2017"}, {"body": "although would nice get changes custom elements chance", "d": "8/2017"}, {"body": "custom elements let follow preact property defined use property otherwise use attribute objectsarrays always use properties", "d": "8/2017"}, {"body": "even objectsarrays use properties one exist warn set none exist problem detecting properties catch native property super class eg elementprototype could prevent browsers adding properties names later ca nt detect since many gettersetters", "d": "8/2017"}, {"body": "objects custom methods still passed", "d": "8/2017"}, {"body": "objects custom tostring methods still passed talking custom elements regular elements focus issue let keep issue focused regular elements one block want bikeshedding custom elements black landing", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "think ever let called custom elements expect pass objects property exists pass otherwise want attribute imo explicitly call express intention regular elements pass always warn since could accidentally spreading something parent component could dangerous eg expensive throws", "d": "8/2017"}, {"body": "problem detecting properties catch native property super class eg elementprototype could prevent browsers adding properties names later ca nt detect hasownproperty since many gettersetters think ok use check custom element property spec authors decide add property htmlelement custom element continue work originally overrides base class existing sites would continue work future would custom element author revision element renames property understanding kind dilemma comes lot specs sorts libraries might use particular property function become super popular spec authors audit web see proposed name already use popular library owns name spec authors use different one", "d": "8/2017"}, {"body": "robdodson difference attribute common way component uses attributes property shadow base class pick base class start using instead attribute nt usually happen specs common case things shadow eg global scope shadow existing promise preserve invariant must use properties never fallback attributes", "d": "8/2017"}, {"body": "difference attribute common way mean common way sure follow component uses attributes property shadow base class true general encourage folks always create corresponding property writing best practices docs cover pick base class start using instead attribute think see saying custom element might work attribute specific behavior instead setting attribute set inherited property htmlelement causes different behavior close wild nt seen many custom elements use attributes fwiw developer uses polymer create element create corresponding properties attributes preserve invariant must use properties never fallback attributes think probably fine personally prefer properties everything custom element author really concerned pattern use capture properties set unupgraded instances", "d": "8/2017"}, {"body": "gaearon nice writeup though feels like middleoftheroad approach inherit naming convention dom properties dom attributes obvious user supposed use one like say understood correctly still means whitelist live limited way think already lot confusion regarding eg everything needs considered incl legacy ca nt say know better way forward put forth gone back forth past trying wrap head around smile reactdom two things consider dom attributes dom properties reactdom fundamentally ignores dom properties supports dom attributes today naming convention aside ie support things rendered html ssr however proposed naming convention uses dom property naming convention falls back dom attribute naming convention unknown attributes nonwhitelist essentially reactdom takes two different concepts attributes properties mixes namespace ignoring legacy seems confusing jquery committed mistake early life seems like becomes even confusing eg svg camelcase hyphenated property names coexist custom components adds core simple problem solve react would transplant dom property naming convention dom attributes mix two tbh entirely sure going would interesting know highlevel longterm goal reactdom dumb renderer much controlled inputs implemented reactdom vs userspace means simply dumb renderer reactdom extend courtesy video able largely copypaste svg html nt get wrong things considered proposing causes least friction probably right way forward given legacy seems like replacing whitelist special behavior nt seem much better perspective bundle size longterm goal towards stableconsistent behavior idea keep current specialcase legacy reasons perhaps even see right longterm approach ps work around annoying end world", "d": "8/2017"}, {"body": "already inconsistent anyway custom elements attributes experience talking people think attributes spent time react land argue average developer actually knows less dom difference used wrote html manipulated dom jquery apis take consideration seems like distinction properties attributes one useful explain public api whether reactdom uses attribute property particular prop implementation detail conceptually mental model propose every prop reactdom decides set property attribute know think unless reactdom knows better get attribute people would expect react offers canonical names known browser apis awkward use javascript last point important calling mirror properties specifically suggesting means using properties whenever possible something like offering canonical apis less awkward declare pass around read javascript similar xamarin would offer c style apis around underlying ios apis different naming convention mental model agree ideal seems like best compromise could find tbh entirely sure going would interesting know highlevel longterm goal solve two problems large whitelist custom attributes minimal friction highlevel goal really ones reactdom moment works well cases mostly working core days argue change brings reactdom closer community expects work libraries done write applications five years reactdom know maybe higher intentionally designed layer like displace maybe advent custom renderers might even somebody fork reactdomlite opposite think point choose highlevel goal like throwing things wall see sticks haha", "d": "8/2017"}, {"body": "take consideration seems like distinction properties attributes one useful explain public api whether reactdom uses attribute property particular prop implementation detail conceptually mental model propose every prop reactdom decides set property attribute know think downside requires speciallogic react opposed plain adds mental burden sure prop works named expect looking mdn react currently imho pretty poorly documented regard opposed mdn hard know expect intimate familiar react version dom unless reactdom knows better get attribute people would expect feel saying nice feature beginners far less experienced people experienced want know expect detail upfront currently basically trialanderror either attribute property even know current behavior even correct simply overlooked whereas mirror exactly know happen mdn significant details every part advent custom renderers might even somebody fork reactdomlite opposite first though concern compatibility custom renderers obviously overhead bundling different ones even asis suspect would nt really work considering event handling implemented also hurts community fragments everyone using slightly different version hypothetical reactdomlite think point choose highlevel goal like throwing things wall see sticks haha yeah gotten feeling fully understand anyway nt mean hold pr interesting discussion thanks answer", "d": "8/2017"}, {"body": "think discussion whether move closer mirror attributes orthogonal haha used word proposal already case sometimes use one thing cases keep changing stance future likely seems like block ability set arbitrary attributes properties exist first place similarly agree point experienced users seem proposal either makes worse better", "d": "8/2017"}, {"body": "hi unfortunately provide support repository none us working according please post questions sdk set stackoverflow quicker response besides easier others searching similar questions report bugs issues encourage report bug cheers", "d": "8/2017"}, {"body": "hi gaearon could pls take look", "d": "8/2017"}, {"body": "hi yes mouse events nt work disabled elements generally browser implementation detail something easily addressable already issues events mouse events prs attempting make behavior consistent likelihood though future react defer behavior native events behavior means wo nt fire disabled elements way", "d": "8/2017"}, {"body": "jquense example zombiej provided events registered div containing disabled button button case think dispatching event since dispatches event works expected regular event listeners", "d": "8/2017"}, {"body": "yeah enterleave traversal logic implemented terms fromto elements yeah unlike native event react drop events odd places one elements moved disabled pair ca nt accurately calculated fiddle leave works exit right button missing directions surrounding div dimension around button nt firing mouseovermouseout events button fires nothing meant close refs previous issues various prs least bring behavior line native events", "d": "8/2017"}, {"body": "acmoune best technique right use jason web token jwt sure find decent amount information online", "d": "8/2017"}, {"body": "thanks reply fine api authentication opted hawk hapijs include hawk credentials request header fetch data api want achieve user try access route react router require authentication idea set user redirected login component allow facebook login upon successful login authentication facebook credentials saved database along hawk credentials stored cookie user authenticate api using credentials cookie fetch data know jwt hawk concerned step problem steps possible getting something wrong thanks", "d": "8/2017"}, {"body": "nt think plan expose directly format sometimes changes want able make hood changes future bit annoying encourage copy paste update notice changes side", "d": "8/2017"}, {"body": "property live like inputs reflects current value attribute reflects initial state component think current behavior wrong force always muted like forces always one way resolve start scratch introduce property maps attribute property controlled like input needs callback go eg however mute equal volume zero dom exposes event perhaps domtruthful minimal implementation would attribute reflect initial mute state react take also support specialproperty corresponding event slippery slope tons properties added increasingly mixing behaviors react much larger discussion elsewhere recommend people simply manually set properties via js control elements think general recommendation works best manually set properties expose fancy video player react component want reuse tl dr imho yes set attribute sets initial state element", "d": "8/2017"}, {"body": "facing issue android according new year ago attribute needs present", "d": "8/2017"}, {"body": "gaearon easy fix ok direction making set attribute instead although potential break existing code someone decided implement mute button rely prop", "d": "8/2017"}, {"body": "think", "d": "8/2017"}, {"body": "maybe another option export directly browser streams ready leaving server part node streams", "d": "8/2017"}, {"body": "thing like node stream naming people know google node streams find documentation nt obvious kind api stream provides", "d": "8/2017"}, {"body": "good point makes sense think explicitness wins case", "d": "8/2017"}, {"body": "think clear mean accept pr name change fine either way want understand work", "d": "8/2017"}, {"body": "take pr", "d": "8/2017"}, {"body": "environments claimed word stream mostly fine expected mix use one notion opaque stream thing one get different one likely leak environments though electron react native apps one going favor spreads node stream bit misnomer browser promise considered legacy might make sense though", "d": "8/2017"}, {"body": "environments claimed word stream mostly fine expected mix use one notion opaque stream thing one get different sure mean suggesting method would return two different types objects depending environment seems counterintuitive sample code using method would confusing would work right environment electron react native apps one going favor spreads node stream bit misnomer mean still came node electron interesting example believe includes chromium node apis web streams node streams available think", "d": "8/2017"}, {"body": "think acceptable risk minor misnomer case target audience understand node streams refer stream api implemented popularized node even utilized environments", "d": "8/2017"}, {"body": "think rendertostreamnode instead rendertonodestream makes wonder node stream else would stream dom node markup", "d": "8/2017"}, {"body": "makes wonder kind dom node supports streams think potential confusion either way maybe worth asking community think clearer", "d": "8/2017"}, {"body": "think rendertostreamnode instead worry seems like stream adjective modifying noun node method would expected return node sigh nt enough words", "d": "8/2017"}, {"body": "fixed thanks", "d": "8/2017"}, {"body": "hmm see testing swallowing promise case specifically", "d": "8/2017"}, {"body": "annoying thing even set cors still see error twice unless swallowing thrown inner event time rethrown scheduler avoid rethrowing would change flow dev prod wish way silence second one", "d": "8/2017"}, {"body": "sure nt typo thismovimenti see movementi inside loop maybe wanted access variable state component type thisstatemovimenti instead anyway think nt anything react provide code whole component", "d": "8/2017"}, {"body": "oh fixed typo new error says read property movimenti undefined think error use react syntax", "d": "8/2017"}, {"body": "please provide code whole component moquita", "d": "8/2017"}, {"body": "think want access variable state component bind event handler function constructor class based component", "d": "8/2017"}, {"body": "please refer", "d": "8/2017"}, {"body": "thanks corrected modifying bit code movimentionclick function idselected var itemsel null var movimenti", "d": "8/2017"}, {"body": "problem please use stackoverflow next time kind issues discuss topics related react development good luck learning issue closed", "d": "8/2017"}, {"body": "reference get support find additional support resources", "d": "8/2017"}, {"body": "info use case handled virtual dom libs like preact snabbdom inferno remarkable case always infer minimum number operations uses algorithm find longest increasing subsequence array containing indexes old elements worth noting longest increasing subsequence theoretically slower react means inferno faster fast case slower slow case bad although realistically unlikely encounter anyway known sure internal discussions moment perspective problematic moves html sideeffects expensive means want make possible would also like deterministic way resulting behavior dependable ideally adding deleting move existing nodes react fails universally right approach moving information currently available pick direction run deterministic reactdom moving stuff end always behaves correctly performs poorly direction something intelligent like longest increasing subsequence slower give guarantee nodes moved mostly make right decision mostly edit minimal moves actually preferable metric test note moving audiovideoiframe cause resetpause iirc moving nodes currently animating clears animation etc expecting nodes sideeffects move erratically best solution would probably use flexbox reordered independently dom order cheaper", "d": "8/2017"}, {"body": "worth noting longest increasing subsequence n logn theoretically slower react n case simple moves like handled linear time trimming common prefixessuffixes old new sequences handling inversions example also preprocessing optimizations could handle cases simples edits linear time described also see vdom impl good reference cases preprocessing suffices find minimum number edits inferno uses preprocessing steps think also faster common case worth noting also keys numeric internal keymap used track moves likely end array vm much faster also big measuring could misleading cost computations primitives likely arrays amp numbers nt magnitude dom operations esp reflows style recalculations ideally adding deleting move existing nodes react fails universally right approach moving information currently available pick direction run deterministic reactdom moving stuff end always behaves correctly performs poorly direction well known approach similar domains text diffs adn sequence alignement find longest common subsequence longest increasing subsequence used inferno variation finding lcs finding minimum edit script sequences finding lcs known mn cost general case problematic preprocessing optimizations help reduce overall cost said worth trying preprocessing optimizations first likely reduce length problem even solves entirely thus need go costlynon optimal hashmap based diff non trivial solutions although sure could applicable case react example vdom implementation used another algorithm found interesting algorithm described paper also excellent article algorithm nd cost number edits insertions amp deletions go old new sequence worst case one sequences totally different however cases little differences sequences impl fix max number algo find lcs range fallback traditional hashmap approach note moving audiovideoiframe cause resetpause iirc moving nodes currently animating clears animation think react least handle case simple moves unnecessary moves likely trigger weird issues one loses browser transcient state example see issue", "d": "8/2017"}, {"body": "worth noting longest increasing subsequence n logn theoretically slower react n dont think react reconciliation n using hashmap tracking moves", "d": "8/2017"}, {"body": "inferno remarkable case always infer minimum number operations uses algorithm find longest increasing subsequence array containing indexes old elements nt always minimum number ops example move node prefixsuffix step remove insert", "d": "8/2017"}, {"body": "worth noting also keys numeric internal keymap used track moves likely end array vm much faster also big measuring could misleading cost computations primitives likely arrays amp numbers nt magnitude dom operations esp reflows style recalculations react never uses numeric keys move map next version iirc dont think react reconciliation n using hashmap tracking moves hashmaps asymptotic anyway sidetrack well known approach similar domains text diffs adn sequence alignement find longest common subsequence textdiffs often bad git example often coming conclusion illogical changes rather human actually makes logical sense problem minimal changes illogical conclusion bad sideeffects worst case one sequences totally different however cases little differences sequences also worth noting react largely favors fast enough worst case faster one would really care much takes vs takes vs worst case huge problem think react least handle case simple moves unnecessary moves likely trigger weird issues one loses browser transcient state example see issue hyperapphyperapp well matter perspective list always append move bottom eg kind activity tracker pushes updated articles bottom react actually always exhibit correct behavior others wrong react move elements actually moved direction whereas others behave somewhat randomly however since directionalgorithm configurable current state reconciliation react still poor avoiding sideeffects general unfortunately general solution making algorithm configurable optionally tagging elements eg kind incrementing move priority id moved elements singled sideeffects important however cases sideeffects unimportant lcs something similar likely best approach yes moves dom unreasonably expensive", "d": "8/2017"}, {"body": "problem diffing greatly simplified case virtual dom since assume keys unique anyway advocating react use lcs reconciliation one way among many solve problem sure tradeoffs saying react support cases simple edits like one multiple reasons perf one cases could supported efficiently linear timespace", "d": "8/2017"}, {"body": "hey kud provide example throws error along version react using throw errors component constructor example reactcreateelement type invalid expected string builtin components classfunction composite components got undefined likely forgot export component file defined check render method app", "d": "8/2017"}, {"body": "hello aweary yes asap thank", "d": "8/2017"}, {"body": "sorry fat fingers button nt mean close", "d": "8/2017"}, {"body": "hey event happens onblur makes event blur happens input every time blur blur blurs browser crashes could dispatch event windowblur instead inputblur fires", "d": "8/2017"}, {"body": "might nt noticed one case input variable input element update link renamed variable", "d": "8/2017"}, {"body": "react uses syntheticevents wrap native ones maybe calling native event causing issues small test included reacttestutils lib people use testing making fake events add code fiddle add reactdom script works replace event trigger sure really helps maybe find ideas", "d": "8/2017"}, {"body": "guess custom event nt set completely eg event target react ca nt tell component trigger would instead want right behavior onblur rather trying recreate valid blur event", "d": "8/2017"}, {"body": "call inputblur invoke onblur callback input nt work", "d": "8/2017"}, {"body": "provide reproduction jsfiddle similar tool cc nhunzaker", "d": "8/2017"}, {"body": "tried jsfiddle works strange", "d": "8/2017"}, {"body": "js onchange value const value parsefloat value", "d": "8/2017"}, {"body": "odd would work jsfiddle locally typenumber may work html doctype specify html thing think without seeing code", "d": "8/2017"}, {"body": "yes specified html", "d": "8/2017"}, {"body": "elements codepen click one two one two first two events fired expected behaviour value changing everytime tested several html elements working checkboxes example reproducible since working previous versions kind big deal breaking app surely many others", "d": "8/2017"}, {"body": "yup already aware issue unrelated one though", "d": "8/2017"}, {"body": "bad saw appropriate ticket keep good work", "d": "8/2017"}, {"body": "mostly duplicate example reproduce issue type start typing numbers value appears change react nt firing change events value invalid thing happens accepted nonnumerical characters like", "d": "8/2017"}, {"body": "codepen great example issue made minor fork pinned highlight issue hopes others looking solution find thread", "d": "8/2017"}, {"body": "look console says uncaught error set one supply passing three arguments react know one use change thus removing third argument child works", "d": "8/2017"}, {"body": "yeah got thing want add dynamic content component seems react ca nt handle", "d": "8/2017"}, {"body": "nt think understand benefits option b could explain sentence means approach precedence dom append async offscreen canvas", "d": "8/2017"}, {"body": "relevant mount correct perhaps consider feature part holistic redesign toplevel mountupdateunmount api discussed previously", "d": "8/2017"}, {"body": "probably relevant toplevel updates well benefit option b delay commit still stuff example render multiple react trees wait complete finalize tree commit regarding offscreen canvas etc see thread similar problem space ca nt find proposal dom api inserting dom asynchronously show later commit point", "d": "8/2017"}, {"body": "would nice need container exist yet something like nt work revivinghydration obviously", "d": "8/2017"}, {"body": "still need figure updates happen complete commit updates always result prefetching data inside async priority think fine wait initial commit work get high priority update probably throw", "d": "8/2017"}, {"body": "issue breakpoints related react bundler using webpack fixed bugs past try updating nt help try changing webpack setting recall works well breakpoints general looks like maintain webpack configuration recommend unless know webpack really really well caveats like one mentioned really obvious spend lot time debugging broken setup instead recommend using tool like create react app manages configuration ensures working setup readme also provides list alternatives case need different feature set reproduce problem create react app please file issue take look otherwise could combination factors old webpack bad webpack configuration etc causing impossible us guess went wrong", "d": "8/2017"}, {"body": "create minimal reproducing case ready run exclude bundling issues etc", "d": "8/2017"}, {"body": "ok go created two files indexhtml scriptsjs started server image renders error using react react dom chrome version osx old setup webpack following babel loader look next", "d": "8/2017"}, {"body": "would suggest posting webpack bundle somewhere look", "d": "8/2017"}, {"body": "webpackconfigjs const path require path const htmlwebpackplugin require htmlwebpackplugin const webpack require webpack const config entry clientindexjs output path pathresolve dirname dist filename indexbundlejs publicpath devtool inlinesourcemap module loaders test js loader babelloader exclude nodemodules query presets react test css loaders styleloader cssloader module amp localidentname local test scss use styleloader cssloader sassloader plugins new htmlwebpackplugin template clientindexhtml processenvnodeenv production configpluginspush new webpackdefineplugin processenv nodeenv jsonstringify processenvnodeenv new webpackoptimizeuglifyjsplugin beautify false mangle true keepfnames true compress true comments false moduleexports config", "d": "8/2017"}, {"body": "mind creating repo pull", "d": "8/2017"}, {"body": "gaearon added collaborator repo able fork work progress bit messy right", "d": "8/2017"}, {"body": "add file repo clone env", "d": "8/2017"}, {"body": "also post exact instructions reproduce", "d": "8/2017"}, {"body": "project nt build", "d": "8/2017"}, {"body": "error come console open browser let check messed packagesjson file install everything run", "d": "8/2017"}, {"body": "ok gaearon messed postinstall stuff fix even though breaks able run run application open browser check console", "d": "8/2017"}, {"body": "reproduce tag bug", "d": "8/2017"}, {"body": "checked dropping beta project fixes issue since part crashes clear bug solved close", "d": "8/2017"}, {"body": "ok thanks gaearon wait get released", "d": "8/2017"}, {"body": "hi gaearon similar issue suggest workaround wait ca nt adopt new version due company constraints", "d": "8/2017"}, {"body": "qlwentt could provide reproduction issue using jsfiddle starting point try verify see potential workaround", "d": "8/2017"}, {"body": "could nt figure repro error jsfiddle looked fine simply put img tag component anyone finds page similar problem hacky workaround replace img tag div style give background image", "d": "8/2017"}, {"body": "workaround", "d": "8/2017"}, {"body": "qlwentt could clarify sort company constraints referring since even fix still release new version fix would able adopt", "d": "8/2017"}, {"body": "gaearon thanks following meant ca nt unilaterally decide adopt another version would discussions would process would nt quick thing plus dependencies nt compatible yet honestly fixed adopt probably immediately especially since workaround projects need attention", "d": "8/2017"}, {"body": "fair enough victorbello could let aweary look example shared would great vacation ca nt look would nt say priority us fix aweary finds time ca nt stop p", "d": "8/2017"}, {"body": "aweary sent invite repo issue fixed repo upgrading beta checkout repo build one able see issue commit issue postinstall referenced gaearon fine run uglifyjs error still run", "d": "8/2017"}, {"body": "thanks victorbello able reproduce issue intermittently looks like kind race condition load event image dom tree appended container attempts find container element finds root element yet connected false exactly sure happens yet gaearon mentioned nt high priority right unfortunately nt much time investigate", "d": "8/2017"}, {"body": "fix probably fix", "d": "8/2017"}, {"body": "let discuss", "d": "8/2017"}, {"body": "think remove peer dependency helpful keep bumping every release rather leave package alone", "d": "8/2017"}, {"body": "maybe instead removing set", "d": "8/2017"}, {"body": "works", "d": "8/2017"}, {"body": "hmm match prereleases pretty annoying cases want people try beta", "d": "8/2017"}, {"body": "rc got way say match anything error react", "d": "8/2017"}, {"body": "fixed removed got way say match anything error react afaik could direct dep control prerelease opt peer", "d": "8/2017"}, {"body": "oh well thanks fix released soon", "d": "8/2017"}, {"body": "already released", "d": "8/2017"}, {"body": "amazing thanks", "d": "8/2017"}, {"body": "thanks quick release", "d": "8/2017"}, {"body": "thank creating issue added emulate batchedupdates lifecycle methods event handlers motivation support following case guess supporting batched updates hard work ca nt support case calling directly sure might able support case using wonder support consistent behaviors shallow renderer fiber renderers currently shallow renderer nt supporting ref lifecycle methods shallow renderer support componentdidcatch reactdomactiveupdates think keeping consistent behaviors renderers become harder released fiber nt think support might possible could implement shallow renderer based test renderer test renderer based fiberreconciler seems able support features fiber provides easily enzyme also works like batched updates supporting lifecycle methods many developers use shallow renderer enzyme provides makes sense expose backward compatibilities enzyme", "d": "8/2017"}, {"body": "topic like add lifecycle methods support future release even though breaking change", "d": "8/2017"}, {"body": "thanks feedback ca nt support case calling directly little confused mention renderer shallow renderer totally decoupled dom renderer wonder support consistent behaviors shallow renderer fiber renderers currently shallow renderer nt supporting ref lifecycle methods nt make sense shallow renderer support things like refs since nothing actually mounted underlying views created shallow renderer narrower usecase shallow renderer support reactdomactiveupdates shallow renderer renders one level deep applies errors thrown lifecycle methods children means noop shallow renderer test good job illustrating might possible could implement shallow renderer based test renderer test renderer based fiberreconciler seems able support features fiber provides easily think prohibitively difficult make fiber reconciler behave shallow tried initially writing shallow renderer standalone implementation topic like add lifecycle methods support future release even though breaking change think may cause harm good calling likely trigger code expects able use things like refs neither work new shallow renderer better call lifecycle method avoid adding potential pitfalls complication user component code", "d": "8/2017"}, {"body": "wish consistency though odd call call calling either would make sense", "d": "8/2017"}, {"body": "nt think call componentdidupdate", "d": "8/2017"}, {"body": "still time break", "d": "8/2017"}, {"body": "sent pr", "d": "8/2017"}, {"body": "bvaughn thank reply agree wish consistency though odd call componentdidupdate call componentdidmount calling either would make sense makes sense think add documentation gon na work updating documentation release already test renderer use need ref lifecycle methods good way use shallow renderer narrower usecase shallow renderer already convenient testing behaviors render function component shallow renderer released way test components without dom depended heavy use test renderer case think would nice section test renderer documentation well shallow renderer", "d": "8/2017"}, {"body": "little confused mention reactdom renderer shallow renderer totally decoupled dom renderer misunderstanding right", "d": "8/2017"}, {"body": "goes may inadvertently fix underlying problem since switching radioscheckboxes use onchange real", "d": "8/2017"}, {"body": "oh sweet would lot better", "d": "8/2017"}, {"body": "merged take care concern believe", "d": "8/2017"}, {"body": "provide isolated example reproducing bit hard guess went wrong without running code", "d": "8/2017"}, {"body": "sure put together quick actually whittled cause problem seems babel plugin causing warning pop rebuild without warning showing making use plugins supposed performance benefits still applicable react fiber", "d": "8/2017"}, {"body": "still applicable react fiber part changed encourage measure performance application rather rely intuition plugins guarantees help case seems babel plugin transformreactinlineelements causing warning pop rebuild without babelrc warning showing might might bug either case plugins used development meant used production mode react emit warnings page transform enabled production eg minifying code although improves runtime performance makes warning messages cryptic skips important checks happen development mode including proptypes page transform enabled production eg minifying code although improves runtime performance makes warning messages cryptic seems like expected bug", "d": "8/2017"}, {"body": "thanks much feedback work project much appreciated", "d": "8/2017"}, {"body": "thanks reporting issues one thing curious reproduce issue believe made cryptic case", "d": "8/2017"}, {"body": "downgraded test project reporting errors using main project first noticed warning ca nt remember seeing always trying squash warnings come along pretty sure project running without warnings upgrade test project case would say somehow clashed way things", "d": "8/2017"}, {"body": "interesting let keep open low priority investigation find time investigate", "d": "8/2017"}, {"body": "cool keep eye next releases though seem pretty low priority nt using babel plugins first place dev probably also looked whoever working babel plugin might changes nt playing nice causing warnings crop kind makes wonder productionfit moment", "d": "8/2017"}, {"body": "nt related api changes react compatible", "d": "8/2017"}, {"body": "hey ikhilko thanks issue appium probably setting value setting property input element wo nt work react controlled input implementation would recommend referring appium documentation see way ensure actual keyboard events dispatched opening issue issue tracker", "d": "8/2017"}, {"body": "hi aweary thanks response appium selenium use complex logic input value inputs try investigate execute case strange logic works fine android chrome nt work ios using react refer information react works controlled inputs helpful research problem", "d": "8/2017"}, {"body": "looks like reason issues", "d": "8/2017"}, {"body": "far tell experimentation reading code two criteria reusing existing dom elements prerendered html page hash initial clientrendered markup match datareactchecksum present rootelement domid instance render tree needs match datareactid dom element tried beta yet think either restrictions", "d": "8/2017"}, {"body": "interesting nt yet give try morning maybe bit malleable use case deliberate change consequence fiber changes", "d": "8/2017"}, {"body": "deliberate wanted streaming incompatible checksum strategy also likely going explicit hydration api", "d": "8/2017"}, {"body": "interesting nt yet give try morning maybe bit malleable use case deliberate change consequence fiber changes", "d": "8/2017"}, {"body": "sure mean saying added packages strictly necessary building testing react moved something like installed necessary", "d": "8/2017"}, {"body": "merged pr", "d": "8/2017"}, {"body": "looks like issue already discussed react team aware thanks links spicyj go ahead close virgofx like follow add api support unpkg let discuss", "d": "8/2017"}, {"body": "answering questions calling returns instance instance rendered freshly created dom element represents detached tree also reference instance reactdom internal map even remove references instance every call get detached tree hanging memory instance react component props available garbage collection", "d": "8/2017"}, {"body": "variations error messages missing anyway looks like script nt run prior build verified running build remove error messages", "d": "8/2017"}, {"body": "closer inspection something strange seems happening script runs new errors added file reverted seems happen repeatedly possibly every build produced end result ends state started new errors added believe worked earlier terminated script point reverted new error messages present build", "d": "8/2017"}, {"body": "wrote post explain conclusion issue hope help others similar question", "d": "8/2017"}, {"body": "closing since marked wontfix", "d": "8/2017"}, {"body": "fixed", "d": "8/2017"}, {"body": "similarly official benchmarks purely swapping resulting page load times faster combined effects server side rendering clientside", "d": "8/2017"}, {"body": "way enable async rendering manually", "d": "8/2017"}, {"body": "kononenkoam technically ready missing much logic would make work well let say", "d": "8/2017"}, {"body": "gaearon know early ask maybe tell could expect least available experimental purpose", "d": "8/2017"}, {"body": "time year hopefully", "d": "8/2017"}, {"body": "thanks lot follow updates excited try technology", "d": "8/2017"}, {"body": "bvaughn shallow renderer nt implement unstablebatchedupdates tbd sure shallowrenderer implement issue mean shallowrenderer support implement means latter sure use case afaik reactdomserver nt implement", "d": "8/2017"}, {"body": "bumped enzyme relies internally investigated whether want support yet", "d": "8/2017"}, {"body": "gaearon thanks makes sense added emulate batchedupdates lifecycle methods event handlers", "d": "8/2017"}, {"body": "thanks makes sense might better place moment terms deciding whether worth adding batched updates support shallow renderer team chatted briefly weekly sync yesterday resolution try learn required use cases determine easier solutions", "d": "8/2017"}, {"body": "jlongster gaearon able resolve modal issue getting similar error using reactbootstrap modals error error block fails undefined", "d": "8/2017"}, {"body": "reactmodal doesntt work gaearon andyjd", "d": "8/2017"}, {"body": "use reactdomlibeventpluginutils specifically monkey patch executedispatchesinorder see model changed event handler since use single state atom something like executedispatchesinorder function originalexecutedispatchesinorder change rerender anyway still get access", "d": "8/2017"}, {"body": "tomasztomys andyjd modal issues might related please see return called inside lifecycle method work around either use new portal api refs something else causing please create small reproducing example run take look", "d": "8/2017"}, {"body": "tolmasky think exposing event system think people wanted wrap event handlers purposes eg error handling please open new issue details use case", "d": "8/2017"}, {"body": "tolmasky curious could wrap dom instead also curious could use requestanimationframe requestidlecallback ensure batched across async cycles let discuss another issue", "d": "8/2017"}, {"body": "anyone else getting reactdom seems like using strict mode makes browser chrome client requirement know like function recomputepluginordering line inside statement block odd enough newer browsers seem ignore second part clues workaround older browsers", "d": "8/2017"}, {"body": "bvaughn team chatted briefly weekly sync yesterday resolution try learn required use cases determine easier solutions makes sense let know need help starting investigate let discuss another issue following rough implementation shallowrenderer", "d": "8/2017"}, {"body": "regarding hallaathrad comment use strict error older chrome versions verified chromium lt chromium show error unfortunately unable get chromium versions run locally without instacrashing sure behaves seem couple ways could address remove outer ifdev condition removed check react native well address problems android jsc see remove use strict directive bundles use rollup plugin convert floating functions wrap contents ifdev conditional iife believe outer ifdev conditional added help weak dead code elimination presumably case projects accidentally included dev production builds reactreactdom see cc gaearon trueadm verify share thoughts cc sebmarkbage", "d": "8/2017"}, {"body": "wrap contents ifdev conditional iife would make sense solution", "d": "8/2017"}, {"body": "coming respectful humbly uninformed point view use rollup plugin convert floating functions function foo var foo function bvaughn seems idea ifdev testing purposes would backwards compatible legal workaround keeping strict mode anyway good enough least beta stages gaearon might enquire prefer option still surprised find current browser versions decided outright ignore part specs though", "d": "8/2017"}, {"body": "hallaathrad might enquire prefer option easy string level without messing ast", "d": "8/2017"}, {"body": "quick note released couple improvements bugfixes things reported thread including fix strictmode function scope problem better error log messaging crossorigin handling shallow renderer improvements edgecase context bugfix single point entry server rendering support returning strings arrays server render attributes server markup anymore like install list breaking changes top post updated", "d": "8/2017"}, {"body": "mapset corejs polyfills weigh gzipped end world would specify exact features builtins u expect besides probably basic interface corejs follows spec really closely probably loosesmaller equivalents could created", "d": "8/2017"}, {"body": "exact features builtins u expect bit tricky give specifics limits ability change code give idea methods use ones differ basic support according mdn", "d": "8/2017"}, {"body": "simpler polyfill could developed alongside react tests could run way wouldnt limit might actually exactly need configure thing properly run test suite", "d": "8/2017"}, {"body": "tomasztomys andyjd materialui use custom fork modal reactbootstrap facing issue endedup using new portal api react old find abstraction portaljs component", "d": "8/2017"}, {"body": "get access beta nt work anymore removed", "d": "8/2017"}, {"body": "coldi way beta tracking exposing way currently published repo available tag npm", "d": "8/2017"}, {"body": "thanks dan clearification need looking learn custom renderer fiber would really happy could make available public react soonish awesome feature looking forward anyway thanks guys great support", "d": "8/2017"}, {"body": "gaearon looks like confirmed beta google bug anymore", "d": "8/2017"}, {"body": "thanks letting us know", "d": "8/2017"}, {"body": "coldi use fork export diff asrcrenderersdomfiberreactdomfiberentryjs bsrcrenderersdomfiberreactdomfiberentryjs var reactdomfiber finddomnode finddomnode reactfiberreconciler reactfiberreconciler unstablecreateportal children reactnodelist container domcontainer", "d": "8/2017"}, {"body": "gaearon might really stupid question return array elements keep getting error bash error srccomponentshomeviewjs module build failed syntaxerror adjacent jsx elements must wrapped enclosing tag return test work react srccomponentshomecontainerjs srccomponentsappviewjs srccomponentsappcontainerjs srccomponentsrootcontainerjs srcindexjs multi reacthotloaderpatch webpackdevserverclient webpackhotonlydevserver srcindex webpack failed compile config option", "d": "8/2017"}, {"body": "hribb think forgot comma since array items regular js rules apply future might consider adding firstclass support fragments jsx could look like related react per se though blocking release", "d": "8/2017"}, {"body": "based example gaearon arrays returned render require keyed elements played around beta nt think get warnings omit", "d": "8/2017"}, {"body": "yes need keys special syntax like mentioned need moment", "d": "8/2017"}, {"body": "quick note released couple small improvements warn unresolved function child remove datareactid datareactchecksum whitelist new test renderer api features disabled via feature flag minor updates slightly reduce bundle size like install", "d": "8/2017"}, {"body": "discussion decided enable new apis available mo betas mo betta fix bugs related unmounting error boundaries enable new fiber reacttestrenderer api methods previously disabled behind feature flag like install", "d": "8/2017"}, {"body": "popular third party libraries work yet eg enzyme last major obstacle blocking release", "d": "8/2017"}, {"body": "popular third party libraries work yet eg enzyme last major obstacle blocking release nt exactly release blocker enzyme also seems pretty close based recent chat flarnie lelandrichardson", "d": "8/2017"}, {"body": "warnings migrate react code replace usages proptypes createclass react format warnings npm packages understand modules needs changes", "d": "8/2017"}, {"body": "iromio hit little caret next warning view stack able tell library causing warning many actively maintained libraries updated fix deprecations might need forkfixpr edit bvaughn said haha ps cc bvaughn far know warning show one violation time say ten libraries causing warning find one one fixing", "d": "8/2017"}, {"body": "click little triangle left warning expand see stack trace tell npm module presumably triggering warning screencap describing", "d": "8/2017"}, {"body": "bvaughn andyjd hm see printwarning eslint reactscripts", "d": "8/2017"}, {"body": "hm could try overriding see calling", "d": "8/2017"}, {"body": "guess consolewarn nt show trace", "d": "8/2017"}, {"body": "experience looks like nt always though", "d": "8/2017"}, {"body": "using uptodate chrome iromio could browser thing", "d": "8/2017"}, {"body": "insert indexjs warnings shown", "d": "8/2017"}, {"body": "andyjd opera based chrome", "d": "8/2017"}, {"body": "bvaughn andyjd push example app collapsable warnings want try reproduce", "d": "8/2017"}, {"body": "sure understand problem point looks like seeing stack trace", "d": "8/2017"}, {"body": "maybe seeing stack trace nt know create simple app based app errors shown correct problems code node modules project broken consolewarn", "d": "8/2017"}, {"body": "running locally chrome see warning coming looks like using version older deprecation think fixed warning version update", "d": "8/2017"}, {"body": "react router fix current", "d": "8/2017"}, {"body": "bvaughn andyjd thanks update update problem problem exactly update", "d": "8/2017"}, {"body": "guess learned chrome better job reporting warning stack opera", "d": "8/2017"}, {"body": "fyi added issue server renderer respecting eta spicyj sebmarkbage helpfully let know intentional sorry distraction", "d": "8/2017"}, {"body": "im getting library im attempting fork fix since parent dead idea begin track error seems bit vague could anyone give tips would cause", "d": "8/2017"}, {"body": "looks like mixing react reactdom guessing based fact shows stack trace shown expect see", "d": "8/2017"}, {"body": "bvaughn augh right another lib required let drop report back thanks", "d": "8/2017"}, {"body": "yep exactly facepalm thanks", "d": "8/2017"}, {"body": "problem glad easy fix", "d": "8/2017"}, {"body": "hi trying beta react version little confused expected error handling behavior componentdidcatch lifecycle hook fired error children children errorboundary ie error errorcomponent see component stacktraces lifecyclehook componentdidcatch triggered errorboundary error direct children seems work expected behavior", "d": "8/2017"}, {"body": "shkrishms intend closing errorboundary last line ie", "d": "8/2017"}, {"body": "yes sorry typo close properly original code", "d": "8/2017"}, {"body": "shkrishms error boundaries catch errors descendants direct children example", "d": "8/2017"}, {"body": "thanks clarification tried troubleshoot working found itis flyout ie open new panelflyout inside main component guess different dom cases works said", "d": "8/2017"}, {"body": "shkrishms think going need provide repro hard speculate", "d": "8/2017"}, {"body": "hello thank work using react render xml blockly warning every blockly specific tag also app works expected though way tell react expecting render thank", "d": "8/2017"}, {"body": "hey html xml element verify running following console browsers treat tags would treat unknown elements creating instance catchall htmlunknownelement react warns since usually indicates typo misunderstanding", "d": "8/2017"}, {"body": "react warns since usually indicates typo misunderstanding possible disable warning way eg add list expected unkown tags know xml tag unkown something blockly uses", "d": "8/2017"}, {"body": "currently api disabling warning important note react nt arbitrary xml renderer meant render valid html rendering xml technically supported use case", "d": "8/2017"}, {"body": "possible disable warning way eg add list expected unkown tags configurable list expected tags way currently disable warnings would override check whitelisted warnings eg js const error consoleerror consoleerror args gt args startswith warning tag unrecognized return error args hope work better story whitelistingblacklisting warnings near future", "d": "8/2017"}, {"body": "sure recommend blacklisting warning particular use case though things react dom htmlspecific may work generic xml expose way build custom renderers pretty easy build xml renderer though blacklisting warning works wo nt stop", "d": "8/2017"}, {"body": "blockly xml static assume nt include user generated content bypass react using put xmlish stuff least based understanding blockly works fine", "d": "8/2017"}, {"body": "make sure understand right way component stack traces intended development enable sourcemap production wont get componeent stack traces see note article component stack traces intended dev", "d": "8/2017"}, {"body": "shkrishms error boundaries work production difference gets logged console take fiddle example production development display text depending minification settings production component stack may contain component names like b different things logged developer console development uncaught error goodcomponent nothing returned render usually means return statement missing render nothing return null invariant reconcilechildfibers reconcilechildrenatpriority reconcilechildren finishclasscomponent updateclasscomponent beginwork performunitofwork workloop htmlunknownelementcallcallback error occurred component goodcomponent errorboundary react try recreate component tree scratch using error boundary provided errorboundary production", "d": "8/2017"}, {"body": "bvaughn see error production see minified stack trace sourcemap production react know component names right", "d": "8/2017"}, {"body": "comment referred depending minification settings production component stack may contain component names like b", "d": "8/2017"}, {"body": "thanks bvaughn makes sense", "d": "8/2017"}, {"body": "got error log error caused error thrown uncaught typeerror disabledindexof function eval arraymap new buttontoggle eval instantiate buttontoggle eval proxyclass createclassproxyjs nan mountindeterminatecomponent beginwork performunitofwork workloop anonymous buttontoggle anonymous instantiate buttontoggle mountindeterminatecomponent beginwork performunitofwork workloop callcallback invokeguardedcallbackdev invokeguardedcallback performwork batchedupdates performfiberbatchedupdates stackbatchedupdates batchedupdates batchedupdateswithcontrolledcomponents dispatchevent error occurred component buttontoggle created buttontoggleinput div created buttontoggleinput buttontoggleinput created unknown div created unknown div created unknown unknown created connectedfield connectedfield created connect connectedfield connect connectedfield created field field created renderroles li created renderroles ul created renderroles renderroles created connectedfieldarray connectedfieldarray created connect connectedfieldarray connect connectedfieldarray created fieldarray fieldarray created eventapplicationform form created eventapplicationform eventapplicationform created form eventapplicationform form eventapplicationform created connect form eventapplicationform connect form eventapplicationform created reduxform reduxform localtranslationprovider created eventpage div created eventpage div created eventpage div created modal div created modalportal div created modalportal modalportal consider adding error boundary tree customize error handling behavior learn error boundaries different thing error think rendering dom elements outside dom component render thats dom land react component tree land nt see could cause error caught also react component rendering dom element outside root rendered dom element feels like nt work nt good idea", "d": "8/2017"}, {"body": "davidfurlong look react component tree modal open see outside main tree app portal super basic test app initial thought handling make generic wrapper around reactmodal error boundary something like could make reusable bounded modal something like", "d": "8/2017"}, {"body": "errors event handlers thrown logged twice development", "d": "8/2017"}, {"body": "find adding classnames multiple elements single component might good indicator split smaller components using small components visual primitives make app composable road smile", "d": "8/2017"}, {"body": "perhaps generic way configured global scale thinking maybe api looks something like causes scan apply function prop element called value sent component constructor would seem satisfy backwards compatibility requirements components would receive translated class name string rather nonstandard forms may passed argument classnames module everything would continue working way today component perspective component creator would need aware translation happening", "d": "8/2017"}, {"body": "closing since use uncontrolled inputs want input respect attribute manually manage max length value controlled inputs", "d": "8/2017"}, {"body": "react use data property composition events probably react trust msmania known react trust eg ime data property incorrect", "d": "8/2017"}, {"body": "robbertbrak yes mentioned beforeinputeventpluginjs seems japanese character one case sure cases", "d": "8/2017"}, {"body": "recently investigating ime problems slate editor uses react manage contenteditable listen events wanted share created riff keyboard events viewer shows native ui events ones emitted react found helps lot debugging imes nt tested ie yet unfortunately ymmv also plan include comprehensive writeup ime scenarios taking cue excellent page vscode team input methods test suite sorts sorry inviting issue p", "d": "8/2017"}, {"body": "danburzo pointers fantastic ui events viewer seems work pretty well ie thanks inviting", "d": "8/2017"}, {"body": "cc top contributors zpao spicyj sebmarkbage gaearon multiple projects asf couchdb cordova superset limbo many us would like facebook communicate clarify whether stance patents clause firm change people debating internally fb come clarification eta would great things moving direction standard asf approved license personally react asf open source software please allow us share things built top react", "d": "8/2017"}, {"body": "waiting two weeks felt disappointed change nothing go away goodbye react amp amp hello angular", "d": "8/2017"}, {"body": "pretty sure public decision august corporationenterprise etiquette", "d": "8/2017"}, {"body": "calm least facebook legal team looking considered almost nothing short divine intervention past going waiting game expected anything related legal work much anyone us right sit wait ca nt sit wait go learn vue something meantime going kill complaining going make things worse point already know nt like things right get sure sick listening thread pointless comments thread bet ass thread locked shoved attic collect dust", "d": "8/2017"}, {"body": "share mistercrunch oleglustenko thoughtsconcerns likely need wait august hear something facebook", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "hi thanks waiting patiently still nt anything announce right update", "d": "8/2017"}, {"body": "come facebook right thing", "d": "8/2017"}, {"body": "come facebook right thing", "d": "8/2017"}, {"body": "please stop", "d": "8/2017"}, {"body": "ca nt sit wait go learn vue something meantime going kill", "d": "8/2017"}, {"body": "sure people sit wait production code time money company could become expensive rewrite code simply change framework imagine hired react js developers keep hope could learn another framework look staff", "d": "8/2017"}, {"body": "use use preact preactcompat fully compatible react", "d": "8/2017"}, {"body": "agree spicyj please stop discussions certainly place eg forum misplaced github issue deals specific request furthermore reached point waiting specific response comments wellintentioned impatiently awaiting result discussed somewhere else eg also preact mentioned twice repetitions contribute anything", "d": "8/2017"}, {"body": "adam mentioned today want able open source technology part successful products rethink could approach licensing practice without opening frivolous lawsuits remain place sorry caused much churn community even feel like stop using ui frameworks understand organizations may choose policies type license principle like clearly include patent license repo imo would nice companies would choose route surprised asf decision since license nt changed years think unfortunate works companies trying open protecting business also creates lot churn people building combining great technologies wish normalized like keep working giving protection ideas many diverse implementations let create environment happen close let keep broader discussion going", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "end app gaearon seems result correct", "d": "8/2017"}, {"body": "sure mean", "d": "8/2017"}, {"body": "going close nt think polyfill force change events standardized", "d": "8/2017"}, {"body": "aweary released yet", "d": "8/2017"}, {"body": "vebjorni yet included release", "d": "8/2017"}, {"body": "fixed", "d": "8/2017"}, {"body": "like add vote cause playing around inbrowser es modules today currently installation page download html file code html hello world", "d": "8/2017"}, {"body": "think issue slightly different thing one looking", "d": "8/2017"}, {"body": "nt think nt want untranspiled source want bundle flattened like normal es modules exports ps thought holiday dan", "d": "8/2017"}, {"body": "think way around modules issue untranspiled source going back vacation", "d": "8/2017"}, {"body": "lukasbombach happy jump one give shot ok create pull request examples aweary", "d": "8/2017"}, {"body": "mrbenj fwiw currently creating createreactwebcomponent fork creates web component wan na compare notes happy chat", "d": "8/2017"}, {"body": "oh btw found creating web component like actually work problem events shadow dom registered react work around ugly think going file issue", "d": "8/2017"}, {"body": "created issue", "d": "8/2017"}, {"body": "sassanh luck fixing react like see feature", "d": "8/2017"}, {"body": "trejgun exactly doesnt work", "d": "8/2017"}, {"body": "error dealing around year ago happens react seems like fixed react clearly remember asked somewhere ca nt remember stackoverflow comment github thread react repository owner answered support inheritance limited inheriting directly cleaner code old asked kindly support deeper inheritance least purpose cleaner code nothing else tried convince use functional programming glad one year later react mature enough nt enforce inheritance composition", "d": "8/2017"}, {"body": "sorry confusing reply somebody team sure mine assure stance react team changed since react first came recommending inheritance especially beginners yet understand composition possible solves common use cases also fact technically prevent using inheritance language way react library could forbid using bin linking errors exist added see changelog error question come react look gets thrown inside code babel creates component happens inheriting exist mentioned added later version super expression thing inherit sorry somebody team interpreted specific message bug react provide details bin time", "d": "8/2017"}, {"body": "sure mine nt unless avatar time green elements github avatar green elements recommending inheritance especially beginners yet understand composition possible solves common use cases cool try introduce composition beginners think separate react js library teaching things based taste beginners different projects way people using react library wo nt annoyed hints willing get point even though totally respect desire teach appreciate work library think better avoid combining two together provide library opinionated provide teaching materials separately nt use framework tool boost opinion better community also fact technically prevent using inheritance language way react library could forbid using glad nt fact technically prevent inheritance simple checking super class component directly inheriting render prevention technically easily possible though never said prevent intention another way prevent intentionally fixing bugs related deeper inheritance bin linking errors reactpurecomponent yeah wrote simple inheritance example went back react versions find version raises error sorry misleading bin investigated project git history found issue issue solved yet inherit class inherits displayname super class shows reactdevtools moment problem combined conversation talked made conclude deep inheritance nt supported first class citizen reactjs may receive performance optimizations planning arrow functions later optimizations fiber specially heard inheritance solely cleaner code time changed mind reactjs serious problems rendering deep inherited classes", "d": "8/2017"}, {"body": "simple checking super class component good point actually forgot one could thanks correcting issue solved yet inherit class inherits reactcomponent displayname super class shows reactdevtools remember one yes gets bit fuzzy support inheritance react sometimes harder seem worth projects around think find good fix happy take high priority since less used case", "d": "8/2017"}, {"body": "performance react remember reading somewhere different optimizations arrow functions classes inherited think react nt deal different type components internally different codes handles components created different method arrow function inherited classes using deeply inherited classes introduce performance issues aware", "d": "8/2017"}, {"body": "nt think optimizations based whether inherit aware optimizations related arrow functions either thing gets special optimization inheriting works deeply puts special field flag prototype react reads", "d": "8/2017"}, {"body": "trysound last time checked problem hot reloading something like apparently issue", "d": "8/2017"}, {"body": "yeah good point time problems livereactload deeply inherited components", "d": "8/2017"}, {"body": "ngokevin would great get thoughts guys ngokevin one authors library aframereact tool exactly trick passing nonstring values aframe custom elements may needed make aframereact react would simply fix oneliner note also using instance properties pass nonstring data nowhere near standard like setattribute might able convince libraries use instance properties every library already used setattribute hence best allow custom elements authors like ngokevin pass nonstrings another way look nt api blocker let react interface dom api nothing let authors full decision power use dom api beneath react", "d": "8/2017"}, {"body": "hi gaearon nhunzaker update release waiting fix released resolve issues facing thanks", "d": "8/2017"}, {"body": "colebowl sorry test patience got pretty nuked custom attribute stuff begin preparing release right edit sorry hope nt sound snarky gladly", "d": "8/2017"}, {"body": "nhunzaker apologies necessary thanks million getting us let know help", "d": "8/2017"}, {"body": "ever come conclusion", "d": "8/2017"}, {"body": "also snarky sure preparing release right translates terms release dates", "d": "8/2017"}, {"body": "merged next path release", "d": "8/2017"}, {"body": "minified version working anything missing", "d": "8/2017"}, {"body": "yes unrelated react cdn question unpkg seems issues hope able resolve soon", "d": "8/2017"}, {"body": "experience error replicate safari react version", "d": "8/2017"}, {"body": "thought would better make new pr suite refactored might pretty little try combine ok make separate pr", "d": "8/2017"}, {"body": "separate prs would easier review", "d": "8/2017"}, {"body": "zhangqibupt question answered would mind closing issue helps keeps issue tracker clean react core team", "d": "8/2017"}, {"body": "estimate also know solved beta", "d": "8/2017"}, {"body": "talking trueadm sounds like probably wo nt problem look tomorrow sure reproduce issue though", "d": "8/2017"}, {"body": "believe happens apply uglify first replace", "d": "8/2017"}, {"body": "detect might function references inspects source code value production source code nt contain production word nt envified correctly", "d": "8/2017"}, {"body": "thanks gaearon try reproduce whenever get chance today", "d": "8/2017"}, {"body": "could add kind runtime warning help users suffer sure right way", "d": "8/2017"}, {"body": "worst problematic case opinion fact case typical development environment would usually empty problematic case set applied dead code elimination bundler realize statically accessible leaves calls resolve runtime exactly case slack week ago catch could something like js function testminification testminificationname testminification minified might node environment dce expected anyway return processenvnodeenv production processenvnodeenv development throw new error unreachable try const source testtostring sourceindexof tostring know fact line exists therefore browser gave us invalid source return sourceindexof unreachable dead code elimination would stripped branch impossible reach production settimeout gt ensure gets reported production logging throw new error react running production mode dead code elimination applied testminification note code would need directly commonjs entry point rather bundles run uglify", "d": "8/2017"}, {"body": "gaearon awesome stuff kind getting well intention would try beta see feedback", "d": "8/2017"}, {"body": "sounds reasonable yes", "d": "8/2017"}, {"body": "confirmed browserify fixture actually demonstrates issue ships versions react outputjs bundle since nt use browserify uglify plugin thing dead code elimination use test case initially adding warning later might consider adding deadcode elimination plugin browserify fixture build case people use demo simple browserify setup react could since fixtures meant used models users anyway", "d": "8/2017"}, {"body": "nit forgot browserify example minifying gaearon pointed earlier problem would really happen ran uglify envify deadcode elimination nt catch prod conditionals probably nt worry changing browserify fixture since really trying demonstrate proper way", "d": "8/2017"}, {"body": "hunderlinek wrap effect", "d": "8/2017"}, {"body": "made list different things think dis allow return values based added support numbersstringsarrays return value child string yes yes number yes yes element yes yes array yes yes iterable yes yes null yes ignored yes ignored false yes ignored yes ignored true yes ignored undefined yes ignored function yes ignored symbol yes ignored object ones asterisk ones currently silently skip used error ones two asterisks ones always skipped imo least warn need evaluate many conditions would add probably need start warnings anyway might already happen rely fb since enabled new features ago feel strongly really common one example misunderstand components return rather", "d": "8/2017"}, {"body": "since seems harmless seems rare looks like actionable item warn whether host child eg return value", "d": "8/2017"}, {"body": "", "d": "8/2017"}, {"body": "since added link blog post explaining error boundaries", "d": "8/2017"}, {"body": "specific proposal pr attempting implement close follow", "d": "8/2017"}, {"body": "done yet take", "d": "8/2017"}, {"body": "problem solved still problem", "d": "8/2017"}, {"body": "posted issue search good first bug started beast happens trying improve one thing amp later doubt existence whole thing", "d": "8/2017"}, {"body": "haha sorry think close removed usage modern part codebase delete legacy one soon", "d": "8/2017"}, {"body": "looked preact think solution pretty decent value boolean add remove attribute value string set attribute string example js let val val true output val false output val true output val false output seems like would allow support boolean attributes enumerable attributes", "d": "8/2017"}, {"body": "glad one worried feature deprecated currently using party webcam component found component uses finddomnode see refs used replace functionality note see refs used look short source code srcreactwebcamjs also using finddomnode simple example use component class webcamcapture extends reactcomponent setref webcam gt thiswebcam webcam capture gt const imagesrc thiswebcamgetscreenshot render return think wanted change use refs thenthe example code would require user party library understand dom structure webcam component using video dom element getusermedia api requiring party component user understand dom structure component ideal say least please let know missing simpler way using refs", "d": "8/2017"}, {"body": "hi experienced issue well digging found issue related strange behavior case produce component uses update app state set current section subroutes state reset issue entering section get callbacks almost immediately eg entering section render component children js import react component react import proptypes proptypes import route switch redirect reactrouter import connect reactredux import notfound componentnotfound import routesnestedupdate routesnestedreset action import withrouter reactrouterdom updates nested routes entering subsection menu expanded renders nested routes perform inner switch param routegen routes generator const subsectionfactory routegen gt class subsection extends component routes const mapstatetoprops const mapdispatchtoprops return withrouter connect mapstatetoprops mapdispatchtoprops subsection export default subsectionfactory notice red border enter section index route rendered inside red border code called code modifies state reducer noticed immediately called resets state get menu section everything rendered screen inside red border still component unmounted children visible expected called text rendered index component inside current section happen first render url happens navigate url via dispatching action click menu item link dispatch case one subsection element replaced another later dispatches broken well also must notice root routing implemented using code js lt subsectionfactory result mounted dispatching location change worked ok react", "d": "8/2017"}, {"body": "get chance read comment believe explained exactly case", "d": "8/2017"}, {"body": "yes sorry thought figured wrong suggestions solve case remove complete solution since reset called navigating away section wrapped factory standalone section without factory", "d": "8/2017"}, {"body": "bit hard understand exactly trying maybe moving logic willmount didmount would help", "d": "8/2017"}, {"body": "well yes calc routes render separating logic two methods everything fine js thanks", "d": "8/2017"}, {"body": "gaearon got problem draftjs would help fixed", "d": "8/2017"}, {"body": "acdlite thanks works perfectly", "d": "8/2017"}, {"body": "gaearon iamdustan chatted quick recap please feel free correct missing inaccurate info overall direction react rollup build scripts likely become new npm package consumed third party renderers eg fiber reconciler may directly accessible module eg bit controversial dan nt see value exposing directly concerned increased complexity brian thought exposing reconciler flow types directly would give users way ejecting using build scripts instead rollup script dustin mentioned use case creating custom renderer internal use hooked directly larger application build tooling thus would nt require separate rollup build step would nice reconcile flow types exposed third party renderers use thoughts art renderer might make nice initial test case since least coupled internals react git repo react core renderers eg dom native consume new script way virtual requires eg would rerouted consume local source would enable us dogfooding open questions handle reactspecific stuff eg error codes resultsjson bundle sizes etc next steps one us create either proofofconcept pr indepth proposal proceed group review", "d": "8/2017"}, {"body": "thought still convinced need expose reconciler directly importable even import fake approach makes sense instead making magic import work actually exposing npm inject let say renderer enforce module exports factory reconciler function argument return value real export example reactdom would like js export default function reconciler const domrenderer reconciler host config return render element container imo solves problems magic imports way import reconciler directly intentionally unsupported unsafe people abuse bump issues let lets export anything practice build facade around renderer nt preclude us exposing reconciler directly future use cases prove important far seem necessary renderers get feedback micro babel precedents kind api micro asks export function takes request response babel asks export function takes babel helpers", "d": "8/2017"}, {"body": "nt know got proposal right explain custom renderer outside react package would receive injection custom renderers something maybe get enabled evaluation future", "d": "8/2017"}, {"body": "three would build command looks entry point links together reconciler source compiles rollup", "d": "8/2017"}, {"body": "would great way working reconciler far could see atm ca nt write custom renderers react unless maintain fork sucks edit downgrade lib directory hence export", "d": "8/2017"}, {"body": "issue agree would great see issue work needs done make possible", "d": "8/2017"}, {"body": "fyi started working teeny bit currently planning hacking react rally days", "d": "8/2017"}, {"body": "python somthing called deprecation warning", "d": "8/2017"}, {"body": "rbyers much better apply appropriate touchaction disable scrolling desired yes nt provide flexibility achieve using preventdefault working app instance allows scrolling around list touch move gesture switches dragging single item touch hold move waiting see whether move arrives adding touchaction style nt seem work reliably think ignores touch action entire gesture first movement gesture direction cause scrolling accepts first movement direction nt cause scrolling", "d": "8/2017"}, {"body": "yes absolutely true proposal think exact use case love feedback get developers saying need agree design would work sure something could ship sooner rather later", "d": "8/2017"}, {"body": "gaearon think mutating state directly performance coding practice issue really cause error ie react chrome developer tool see mutated state component still renders previous state definitely invoked mutating statei error happen consistently sometimes see pattern think related react work internally case suppose documentation provide big error prevent mutating state loudly rather saying good practice", "d": "8/2017"}, {"body": "tried solution mdoelker unfortunately nt luck clear button still nt work defaultvalue input element page", "d": "8/2017"}, {"body": "gaearon propose got something like jsx class button extends reactcomponent getbuttonstyle return backgroundcolor blue render return class successbutton extends button getbuttonstyle return backgroundcolor green class dangerbutton extends button getbuttonstyle return backgroundcolor red nt little easy test test getbuttonstyle example less code know accept style prop example bad bad say got collection component allows collectionitems child say want create slightly different type collection overwrite checkforvalidity whatever required however using composition go collection either add list allowed child really good since collection nt want specialcollectionitem accept allowedchild prop thoughts", "d": "8/2017"}, {"body": "reference implementation changed simpler fix introduced", "d": "8/2017"}, {"body": "hey prasannavl issue looks bit stale think still open", "d": "8/2017"}, {"body": "yes using either minified un minified version", "d": "8/2017"}, {"body": "close since error happen master clear solution mix minified unminified files", "d": "8/2017"}, {"body": "detect", "d": "8/2017"}, {"body": "intuitive way check", "d": "8/2017"}, {"body": "thanks suggestion fixed react", "d": "8/2017"}, {"body": "example error appeared right using", "d": "8/2017"}, {"body": "gaearon progress kept updating chinese version docs ready catch react updates would official localization plan accept languages translation", "d": "8/2017"}, {"body": "bvaughn working website revamp likely combine localization setup effort might something month stay tuned", "d": "8/2017"}, {"body": "hi folks react documentation localization effort ready contributions documentation primed localization far great efforts indonesian japanese portuguese brazilian communities please direct interested members community official crowdin project repo discountry would interested helping manage chinese ryouaki please sign leocabeza happy accept folks help gbezyuk folks able help lead russian translation jisupark still able help korean questions please message thread crowdin twitter ericnakagawa", "d": "8/2017"}, {"body": "cc past translations contributors ivanzotov alexzherdev dotu marocchino zhangjg koheitakata camsong interested helping official translations", "d": "8/2017"}, {"body": "help russian translation happy review etc", "d": "8/2017"}, {"body": "gaearon review help identify someone help manage reviewing help effort take time reach high", "d": "8/2017"}, {"body": "generally recommend quality start lower quality translations iterate set high bar beginning", "d": "8/2017"}, {"body": "gaearon aiming high quality initially best", "d": "8/2017"}, {"body": "low quality translation wait someone contribute better one reject somehow", "d": "8/2017"}, {"body": "ericnakagawa help manage reviewing chinese translation", "d": "8/2017"}, {"body": "ericnakagawa love part chinese simplified translation discountry love current chinese docs believe make official one even better concise prefer contact coordinate", "d": "8/2017"}, {"body": "fateriddle submit crowdin pull request chinese doc repo fine already group members find us reactchina", "d": "8/2017"}, {"body": "discountry work leading chinese react translation project added reviewer", "d": "8/2017"}, {"body": "finished translation warnings readme others crowdin discountry really members", "d": "8/2017"}, {"body": "ericnakagawa would mind also adding reviewer simplified chinese thanks", "d": "8/2017"}, {"body": "gaearon deployed chinese version doc server china react chinese doc would mind adding link official react doc website later network issues china slow amp inconvenient chinese users visit github pages site", "d": "8/2017"}, {"body": "ericnakagawa convenient way translators testpreview localized version published seeing button crowdin translations pushed nowhere github right able check online ideal install local environment build docs", "d": "8/2017"}, {"body": "discountry sites use cloudflare ex yarnpkgcom babeljsio accessible easily would great together", "d": "8/2017"}, {"body": "sophiebits actually cloudflare slow visiting china", "d": "8/2017"}, {"body": "smikitky hi new website currently developed nt preview site configured yet new site design live working allow live previews", "d": "8/2017"}, {"body": "keyanzhang added please check email", "d": "8/2017"}, {"body": "came across problem workarounds", "d": "8/2017"}, {"body": "gaearon first beta releases fiber going wondering custom renderer api documented somewhere already place track progress much quoted tweet gave great outlook already seems somewhat outdated sufficient actually start digging topic", "d": "8/2017"}, {"body": "leoselig related", "d": "8/2017"}, {"body": "bennick thing", "d": "8/2017"}, {"body": "podrivo yea ended using", "d": "8/2017"}, {"body": "use case class example extends reactpurecomponent componentwillmount const fetchaction fetchstatus dispatch thisprops fetchstatus fetchstatusesloading amp amp fetchstatus fetchstatusesloaded dispatch fetchaction render another component renders multiple components happens expected component utilizes called twice perhaps better way apologize already covered skimmed comments nt seem completely relevant", "d": "8/2017"}, {"body": "jpdesigndev sure would ever called like", "d": "8/2017"}, {"body": "sorry ljharb nt clear enough component renders example component twice real use case apologize generic examples result dispatching actions twice results action dispatched expected certain perfectly reasonable explanation syncasync timing reason prefer conditional data fetching time perhaps antipattern perhaps someone suggest move data fetching parent would break nice encapsulation edit clarity hopefully js class example extends reactpurecomponent componentwillmount const fetchaction fetchstatus dispatch thisprops notice conditional code componentdidmount fetchstatus would null renders utilizing componentwillmount second componentwillmount call new fetchstatus updated synchronously dispatched action first rendered fetchstatus fetchstatusesloading amp amp fetchstatus fetchstatusesloaded dispatch fetchaction render const someparent props gt", "d": "8/2017"}, {"body": "makes sense two elements invoke two willmounts", "d": "8/2017"}, {"body": "jpdesigndev would suggest move data fetching away components keeping data fetching request dispatching see reduxsaga", "d": "8/2017"}, {"body": "jpdesigndev sorry meant logic checking fetch progress ignoring request", "d": "8/2017"}, {"body": "jpdesigndev example difference points next props nt rendered yet whereas point props rendered fires react commit phase call inside react nt apply update end current commit phase even though fired first update nt applied yet time call second one solution would read directly store since mutated synchronously upon dispatch rather rely react propsstate updated asynchronously", "d": "8/2017"}, {"body": "ljharb sompylasar acdlite thank thoughtsrecommendations sompylasar leaving logic component level sometimes make sense example component really control fetchrefetch without param action creator simple enough conditionally call fetch component instead action creator saga observable epic controlling fetch acdlite thank explanation really helps clarify thoughts works better vs sure loveunderstand idea reading store directly case fact ed component utilizes get props really chiming lay use case seems valid still convinced better way thus far proposed betteralternative ways delegate control action creators side effect middleware read directly store instead relying perfectly willing change mind perhaps forced deprecated folks agree either approaches desirable example also missed point entirely already devising way migrate away", "d": "8/2017"}, {"body": "sompylasar leaving logic component level sometimes make sense example component really control fetchrefetch without force param action creator simple enough conditionally call fetch component instead action creator saga observable epic controlling fetch jpdesigndev two actions fetch leads autocache refetch refetch leads resetting cache stopping previous requests refetching", "d": "8/2017"}, {"body": "mocking refs canvas easy using", "d": "8/2017"}, {"body": "error project uses reactart stack trace points lines sure seems caused calling inside", "d": "8/2017"}, {"body": "suggest trying prevent native event handler synthetic event handler vice versa possible attach synthetic event handler cancelable react event handler", "d": "8/2017"}, {"body": "bbarnell upgrading fix issue", "d": "8/2017"}, {"body": "programmist site working without changing code version", "d": "8/2017"}, {"body": "please read comment", "d": "8/2017"}, {"body": "anyone interested working hoc implementation distributed library interesting pattern seems option paralysis actually implementing convention configuration library could handy understanding correctly", "d": "8/2017"}, {"body": "nickmccurdy humble attempt", "d": "8/2017"}, {"body": "difference either components would implement mechanism custom callbacks somehow devs would always remember bind custom callbacks maybe react could set eg component created current component could used calling nt seem straightforward also normally nt create thousands react elements", "d": "8/2017"}, {"body": "warning casting value solves problem put everywhere checkboxes", "d": "8/2017"}, {"body": "resolved", "d": "8/2017"}, {"body": "nhunzaker sorry nt think issue addressed still quite clearly type e controlled number input appear even though updated value see try typing e nt appear updating value yet think browser chrome version doenst seem firing onchange event value invalid still bit hazy whether browser react either way still issue suggest gets reopened", "d": "8/2017"}, {"body": "looks like happens chrome reports value empty string react sees value nt changed nt assign value property unfortunately react avoid touching value avoid input validations cause nasty sideeffects like dropping decimal places expanding things like nt know bug cc jquense aweary discussion", "d": "8/2017"}, {"body": "point almost think acceptable concession controlled inputs far tell introduce lot logic using key events manually determine need remove numerical characters decimal dropping bug huge pain need avoid introducing changes may compromise fix", "d": "8/2017"}, {"body": "still happening chrome version official build react windows duplicate react afaik uncaught typeerror read property reactinternalinstance particular example culprit tags remove src attribute images error goes away firefox fine machine osx chrome seems browser os specific issue", "d": "8/2017"}, {"body": "reproduce please attach reproducible example saying helpful help us understand problem guarantee excluded known causes duplicate react", "d": "8/2017"}, {"body": "issue bare bones spfx project including react draftjs wysiwyg component works fine chrome edge load fails run load spfx workbench loads click little plus top page select rteeditor add component workbench fail project", "d": "8/2017"}, {"body": "fyi started going passive false path prevent body scrolling mobile scrolling div little heavy use preventdefault block scrolling could add remove handler depending div present fall back bodyheight approach bodyheight fix feels little hacky would nt need passive false", "d": "8/2017"}, {"body": "also need method implemented", "d": "8/2017"}, {"body": "btw documentation currently inaccurate apis exported directly available since beta fix docs release", "d": "8/2017"}, {"body": "title maybe bug chrome input id name nodename override nodename parent form wo nt affect render outermost layer element form react check nodename throw error", "d": "8/2017"}, {"body": "nt use ids anymore probably close change part react", "d": "8/2017"}, {"body": "seems explain reason bug", "d": "8/2017"}, {"body": "similar issue still seems persist react although exactly cause", "d": "8/2017"}, {"body": "ca nt guess anything problem single sentence report like also issue want see fixed please provide project small example reproducing would let us look see indeed bug lock issue prevent happy receive new issue report reproducing example thank", "d": "8/2017"}, {"body": "yeah think seeing problem react ie edge update nevermind seeing bug edge ie", "d": "8/2017"}, {"body": "thanks mnpenner solution worked mentioned stackoverflow credited solution", "d": "8/2017"}, {"body": "walkaround way force set string value capture attribute really important mobile browsers specify camera use capturing image front rear since webrtc supported safari ios seems way get camera image user see example upd seems simply adding attribute element solves issue example found solution", "d": "8/2017"}, {"body": "met problem friday believe issue already attached bug tag still year need create certain amount ul make autoslider every state update need ref get ul change visibility etc turned works every componentdidmount ul ref return array children return array children first null perfect matchs fatman talked every state update even reset ref method every rerender debugged two days tried put animation methods different life cycles none help thank god found issue filter null values work maybe wrong way using react new user sometimes really prefer use refs instance need send request child component server waiting response received parent component child component rerender data received receive new props mess child state updating expecting way sharing componentdidupdate certainly shouldcomponentupdate take care need think carefully define return value shouldcomponentupdate keep child component rerendering state updating avoid new parent props", "d": "8/2017"}, {"body": "believe issue already attached bug tag still year said bug despite mistaken label sometimes really prefer use refs instance need send request child component server waiting response received parent component child component rerender data received receive new props mess child state updating expecting way quite hard understand saying without example intuition using refs data flow intended usage please check documentation lifting state thinking react explanation react data flow", "d": "8/2017"}, {"body": "thanks reply gaearon trying build child component shows persons names first names certain amount person names seconds page turns show next names shows last couple names depending many names received parent component start make splitperson method split persons different ul pages group instance receive person names ul pages method returns ul elements another turnpage method use refs thispagerefs get ul iterate across every seconds reset classes hidden visible render static part render animate mount update maybe wrong way every time get double times pages every update half null refs sorry take problem looks like problem shown stackoverflow", "d": "8/2017"}, {"body": "would recommend try replace dom manipulations refs normal react rendering possible using react animation libraries like transitiongroup react motion want keep using refs need change ref function instead pushing array put object like always values much dom manipulation generally seems suspicious often unnecessary", "d": "8/2017"}, {"body": "thanks time yes nt feel good using react way either trying set state represents pageindex update pageindex thissetstate settimeout need call settimeout componentdidupdate time need receive new data via props parent mess state updating progress new props call componentdidupdate also thus call settimeout problem pattern props changing call componentdidupdate mess child state updating really bugs two weeks anyway way props changing update child react designed way know else head stack overflow case wasting time thank", "d": "8/2017"}, {"body": "looks like using transitiongroup best option trying", "d": "8/2017"}, {"body": "also troubles event tested chrome firefox stable edge worked fine firefox nightly fires onmouseenter fine almost never works onmouseleave event way use synthetic event", "d": "8/2017"}, {"body": "probably wo nt like solution especially browser thinking using yoga particular use case issue react ca nt deal reparenting fine put parentchild tree inside yoga ask compute everything put stuff single parent react absolute positions sizes entire app mind parts need parent order solve issue see goes might suggest solutions example maybe could tell react virtual parent defined could use find node moved thinking loud", "d": "8/2017"}, {"body": "another note autofill events least chromeosx trigger want capture change event input might filled using chrome autofill feature need bind detect keystrokes autofill placate react warning failed form proptype provided prop form field without handler render readonly field field mutable use otherwise set either check render method", "d": "8/2017"}, {"body": "workaround works thx lot", "d": "8/2017"}, {"body": "somehow permeated angular application installing dev tool platform nt even use nt want", "d": "8/2017"}, {"body": "life saver total life saver thanks", "d": "8/2017"}, {"body": "fairly certain confirmed issues fixed yes", "d": "8/2017"}, {"body": "bunch accepts empty string empty object etc selectors cause waiting api calls finish perfect thing tell component data coming wait bit ca nt good work around make utility function use across codebase since looks like issue nt getting reopened time soon sigh", "d": "8/2017"}, {"body": "also agree standard way accept value reasons findiglay stated place continue discussion anymore issue closed belongs facebookproptypes following pull request facebookproptypes", "d": "8/2017"}, {"body": "implemented works beta later try beta", "d": "8/2017"}, {"body": "similar issue class javascript component definition export default class point constructor coords thisx coordsx thisy coordsy static init x return new point x react component javascript thirdparty dependencies import react react import proptypes proptypes app dependencies import polyline polyline import point point component definition class line extends reactpurecomponent getpoints return thispropsstart thispropsend render return linedefaultprops color black specifies type values props lineproptypes start proptypesinstanceof point isrequired lt warning end proptypesinstanceof point isrequired lt warning export component export default line get rid warning thanks", "d": "8/2017"}, {"body": "hi using navigator problem executed ref navigator executed thus ca nt access found issue answers far idea address would highly appreciated thank", "d": "8/2017"}, {"body": "nt use ids anymore probably close change part react", "d": "8/2017"}, {"body": "nt use ids anymore probably close", "d": "8/2017"}, {"body": "may ask supposed work hoping would allow us render adjacent xjs elements something useful get expected feature way surround real list extraneous element", "d": "8/2017"}, {"body": "feature way surround real list extraneous element yes way provide several elements one render information see initial issue post array items known strings join return single string either eat warning work wrap elements keyed improve dom reconciliation would included array strings inside another element jsx", "d": "8/2017"}, {"body": "diligiant returning relevant issue never could still ca nt child array key prop whether internal jsx tag like returned removes big limitation react btw returning gives warning error remove warning easily join strings jsx tags strings add key prop limitation returning arrays", "d": "8/2017"}, {"body": "jespertreetop thank sassanh example seems shy use keys avoid surrounding semantically useless mean go ahead real performance penalty would indeed real improvement", "d": "8/2017"}, {"body": "diligiant doubt introduces performance penalty nt need surrounding useless unless surrounding strings surrounding strings avoid array join strings strings add key component example two components return nt need surround neither components like always array thanks new release needed surround array", "d": "8/2017"}, {"body": "sassanh cool course use case multiple components happy", "d": "8/2017"}, {"body": "actually seems odd warn missing keys items strings would nt expect us existing behavior strings inside div fix toplevel strings since impossible give keys", "d": "8/2017"}, {"body": "gaearon sorry example misleading meant components checked react nt issue warning rendering array multiple strings nonetheless puzzled requirement rendering array sake avoiding surrounding component understand nothing probably raise tons questions nothing better offer finally thank", "d": "8/2017"}, {"body": "warning exact every usage arrays components boils exact extra work reconciler thus exact potential optimization setting surprise would arrays components treated differently depending imagine would prompt stack overflow questions mention think would involve overhead keep track first place", "d": "8/2017"}, {"body": "time returning array function want warning place seems times would nt want warning minority way react know appropriate warn", "d": "8/2017"}, {"body": "warning necessary lack keys cause correctness issues performance problems explained many issues asking keys necessary encourage search read discussions agree docs could clearer something likely look next time docs change sprint conceptual differences arrays directly returned render arrays inside div reason would key warning one case need work way affected problems keys missing said understand annoying specify keys static content like nt specify keys write jsx structure children statically known thus never reorder would nice way arrays future might solve adding explicit support fragments jsx syntax like could produce array implicitly assign numeric indexes children case know never reorder guarantee given jsx child expression exactly lets us get away without specifying keys normal jsx code div might multiple children nt syntax yet known limitation", "d": "8/2017"}, {"body": "jespertreetop amp zwily gaearon explained way better know big deal want react thrive", "d": "8/2017"}, {"body": "gaearon another issue syntax proposal watch instead discussion issue searched around nt able find one", "d": "8/2017"}, {"body": "smrq question follow everything awkward limitations onetoone result keys jsx syntax fragments ticket know also suppose fibers gon na fix issue keys looks like unfulfilled dream", "d": "8/2017"}, {"body": "keys nt issue fundamental necessary part view framework allows create dynamic lists see detailed explanation", "d": "8/2017"}, {"body": "spicyj actually issue since cause extended energy spendings developers fundamental possibility program view framework without requirement example", "d": "8/2017"}, {"body": "fundamental possibility program view framework without requirement example vidom use keys collections though might technically work without would likely much slower react could also technically work without keys quite unexpected find half components update remove single item list keys one item unmounted", "d": "8/2017"}, {"body": "gotobusstop vidom use keys required without really big cases lot updates cause real performance problems consider part possible optional example used ferformance tweaks individual cases", "d": "8/2017"}, {"body": "veged example vidom struggling without keys idea supposed reorder elements discards instances render root component", "d": "8/2017"}, {"body": "someone quite familiar virtualdom space say keys necessary predictable dom amp state updates amongst similar siblings keys typically optimization fact usually opposite", "d": "8/2017"}, {"body": "however unambiguous issue gaearon described fully static usage arrays difference static arrays static jsx fragments", "d": "8/2017"}, {"body": "brigand doubt reordering statefull components may cause issues force every cases opinion struggle looks controversial", "d": "8/2017"}, {"body": "keys important react even nt seem matter case eg components stateless nothing preventing someone else team add stateful component even plain dom input somewhere levels months might forget nt keys thus reorders may cause state input value associated wrong item encourage specify keys everywhere dynamic lists leads hardtotrace bugs think better spend extra ten seconds specifying key ten hours debugging state component several levels gets messed corner case fully agree inconvenient specify keys list known static never reorders welcome discuss jsx repo ca nt find issue welcome create new one since thread lot subscribers feature implemented would like lock avoid spamming lot people notifications hope clarifications address concerns welcome create new issue discussion specific topic", "d": "8/2017"}, {"body": "smrq created proposal issue syntax jsx repo", "d": "8/2017"}, {"body": "dantman thank solution getting value callback one discussed worked crossbrowser including phantomjs edit still nt solution safari nt get set button", "d": "8/2017"}, {"body": "nice async component interface timurtu hey everyone wanted chime various things relate directly thread tracking thread long time one considering ssr think routelevel datafetching makes sense reduxfirst router datafetching solving use case async middleware server rendering redux stupid simple step step guide reduxfirst router like never seen done serverrender like pro w reduxfirst router steps lastly codesplitting right also ie ssr splitting turns simultaneously major pain point successfully achieved never general package help community react universal component webpackflushchunks extractcsschunkswebpackplugin family packages really solve matter first time basically allows render components synchronously server importantly transports exact chunks rendered client initial synchronous render client well even get css chunk stylesheets via webpack plugin different timurtu shared many components require loading parsing evaluating rendering finally seconds later requesting dynamic imports solutions solve flash unstyled content fouc embed page exact chunks rendered server universal name family packages allows far faster time till interactive tti synchronous way operates like traditional webapps learn article react universal component amp babelpluginuniversalimport know nt address route level vs component level proscons first link focuses primarily basically boils component level bad ssr nested components whose data must fetched sequence rather parallel correctly one fetch make per route well better formalizing contract attaching data dependencies route entity instead many others came conclusion reduxfirst router formalizes nicely along lines sort contracts make redux pleasant work reduxfirst router makes lot old paradigms new surprisingly fits right missing piece redux ecosystem ever wanted router native redux workflow give reduxfirst router try relatively new newcomer open source something worked basically year gotten lot traction months people lovin really hope check give shot also launch article explains far better solution redux react router gets vision right way also excellent reduxlittle router missed unfortunately pre release reduxfirst router step beyond reduxlittlerouter primary difference rlr rfr rfr dispatches different action type per route ie url change instead always lets switch url changes unique types reducers like actions may seem small makes huge difference nt require components something unnecessary redux land also huge laundry list features reduxfirst router supports datafetching route react native react navigation code splitting prefetching would love hear people thoughts", "d": "8/2017"}, {"body": "faceyspacey thank think addresses problem want set props based async data example return icon promise definitely different way looking things reduces redux action boilerplate tie async components state really want make request one time render component things like polling data stateful using redux probably makes sense", "d": "8/2017"}, {"body": "faceyspacey see saying route level would nt better smaller components rely fetching data need rendering everything else around synchronously", "d": "8/2017"}, {"body": "better react native large organizations like facebook react native apps maybe react native ssr view debate want simply possible without multiple fetches per request unless u limit one component fetch point better formalizing contract route entities react native spas sure testing components data deps built pain apollo stuff last checked long todo list get datapaired component testing really right ie seamless prefer setup one store easy setup mock reuse u tests testing components simple synchronous rendering snapshot taking add data deps components testing react becomes less intuitive people automate less standard closer custom adhoc code productive store populated asynchronously obvious way rather potentially different strategies every async component needs populated component level ssr u testing strategy seamless way u mega corp makes sense every developer nt need touch top route level potentially break others fb pioneered route relay graphql fact matter like companies world truly boat view colocation hype reality peopleappscompanies get hang route level thing package really well like reduxfirst router far less tangled easier develop approach teams whose members allowed touch route level check demo homepage codesandbox basically see done love hear opinion keep mind spa u review demo repo boilerplate ssr example good start", "d": "8/2017"}, {"body": "way add space css", "d": "8/2017"}, {"body": "jordanbtucker css level use horizontal margins bear lot problems reserved emergency cases", "d": "8/2017"}, {"body": "kind seems like might breaking change people especially since behavior versions react waited", "d": "8/2017"}, {"body": "ljharb specifically concerned seems like maybe nit issue meant comment", "d": "8/2017"}, {"body": "jquense correct issue new react longer fire clicksactivations alreadyselected radio buttons someone relying log activations including keyboard activations alreadyselected radio buttons would code broken understanding correctly", "d": "8/2017"}, {"body": "ah ok onchange firing twice double clicks already selected radios bug nt ever intended behavior place category issues fixed pr range inputs firing consistently inputs missing events ie", "d": "8/2017"}, {"body": "adding think missed case old behavior correct sense use case glad chat might better open another issue since one ton history point also sorry inadvertently moved cheese input events code hairy tension semver breaking changes bug fixes particularly tough navigate", "d": "8/2017"}, {"body": "jquense perhaps bug fifteen major versions react definitely agree change ends correctbetter behavior make changes airbnb codebase account preupgrade would broken upgrade worked think probably would better consider semvermajor hope future react err side caution nonmajor releases", "d": "8/2017"}, {"body": "still facing problem ios chrome autofill works fills field nt change state", "d": "8/2017"}, {"body": "problem instead value use defaultvalue input type text name mokedvalue defaultvalue thismyvalue onblur thisupdatemyvaluebind onwheel thisonwheel", "d": "8/2017"}]