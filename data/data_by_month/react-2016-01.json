[{"title": "docs make stateless functions prominent", "body": "way bottom reusable components page section stateless functions section note ideal world components would stateless functions future also able make performance optimizations specific components avoiding unnecessary checks memory allocations recommended pattern possible emphasis mine indeed recommended pattern made much much prominent example using section homepage component visitor first example react component function qualifies stateless function component bonus much much simpler postpones introduction later examples go indepth let start teaching people right patterns", "num": "5949", "d": "1/2016"}, {"title": "node value setter called many times", "body": "background see good first bug", "num": "5944", "d": "1/2016"}, {"title": "cascading props", "body": "using react came strange idea support kind cascading props parent component child component call parent component following prop would render going would propse use csslike traversal selectors props ie gt firstchild know looks much like kind mad antipattern would like hear besides obvious performance isssues main reason behind lot times change little bit insides component one particular place implement new methodsprops declare parent component anyways", "num": "5943", "d": "1/2016"}, {"title": "react expose prop types validator", "body": "potential feature could react expose method like", "num": "5942", "d": "1/2016"}, {"title": "provide way register lastchance exception handler", "body": "react provide way us register lastchance exception handler errors thrown react event handlers lastchance exception handlers registered eventhandling frameworks proved extremely useful making us aware unexpected error conditions", "num": "5941", "d": "1/2016"}, {"title": "warn reading event returned pool", "body": "title assumption based experience upgrading example seeing js const app reactcreateclass getinitialstate return clicked handleclick e consolelog etarget callback null etarget null etarget null thissetstate clicked thisstateclicked gt consolelog etarget callback null etarget null etarget null render return reactdomrender documentgetelementbyid root jsbin demonstrates behavior jsbin notice console log inside callback logging evaluates app passing handler utilizes update breaks situation may may bug may necessary avoiding memory leak case support request smile handle passing another callback want event references things like", "num": "5939", "d": "1/2016"}, {"title": "rendering form nt work safari", "body": "", "num": "5938", "d": "1/2016"}, {"title": "wrong highlight code react docs", "body": "example", "num": "5937", "d": "1/2016"}, {"title": "eslint related error", "body": "npm install npm err found npm err npm err eslintpluginreactinternal npm registry npm err bug author publish npm err specified dependency reactbuild installed eslint eslintpluginreact locally well globally yet error persists", "num": "5936", "d": "1/2016"}, {"title": "modularity", "body": "work going make react bit modular laugh suggesting react based thousands microlibs things never used nt need server side rendering use react non seo critical projects also absolutely convinced socalled performance benefits nt use node begin support older browsers fast moving target people drop support ie lt completely nowadays especially rich apps would complete bother anyway synthetic events patch old browsers quirks proptypes runtime type checks impossible remove production nowadays use typescript flow quicker compilation feedback without size overhead thoughts meant critic wondering design direction react know might remove dozens kbytes grand scheme things hugely important like think every little detail count", "num": "5935", "d": "1/2016"}, {"title": "bug value never updated unit test", "body": "say component renders try unit test using component gets updated value attribute dom nt get update see", "num": "5934", "d": "1/2016"}, {"title": "reactcloneelement handles props differently reactcreateelement", "body": "sure expected caught earlier without clone function mycomponent mycomponentdefaultprops foo foo let element reactcreateelement mycomponent foo undefined consolelog elementpropsfoo foo clone function mycomponent mycomponentdefaultprops foo foo let element reactcreateelement mycomponent element reactcloneelement element foo undefined consolelog elementpropsfoo undefined", "num": "5929", "d": "1/2016"}, {"title": "invariant violation element type invalid expected string builtin components classfunction composite components got object", "body": "simple react component fail instant react component exmaplejs js import react component react import exampleactions actionsexampleactions import styles cssappcss class example extends component render const title dispatch thisprops const actions bindactioncreators exampleactions dispatch return exampletestjs js jestdontmock example import react react import reactdom reactdom import renderintodocument simulate findrendereddomcomponentwithtag reactaddonstestutils const example require example describe example gt rendering gt var example renderintodocument jest output", "num": "5927", "d": "1/2016"}, {"title": "classname class inconsistency", "body": "standard elements custom elements diverging api case attribute consistent aid developer use would suggest customelement naming better solution keywords obviously mitigated fact used object properties", "num": "5926", "d": "1/2016"}, {"title": "save flag someplace checksum invalid", "body": "tests insure prerendering client rendering right real cludge override consolewarn watch see checksum warnings output instead adding datachecksuminvalid outer element", "num": "5924", "d": "1/2016"}, {"title": "syntheticevents leaking dom nodes", "body": "nulled event put events instance pool reuse unmounting instance pool events remains nodes pointed target property become detached nodes example click header times generate events seconds component removed via open chrome dev tools take heap snapshot notice detached nodes held syntheticevents screenshot attached", "num": "5921", "d": "1/2016"}, {"title": "getting called google chrome", "body": "getting errors console attempting render components errors get thrown methods run legacy ie browsers correct issue google chrome mac", "num": "5920", "d": "1/2016"}, {"title": "add reactdefaultperfanalysisjs export reactaddonsperf", "body": "would like submit pr adding export source located", "num": "5919", "d": "1/2016"}, {"title": "reactdom npm install production error", "body": "specific reason need bundle reactdom browserify however faced problem installing dependencies check steps download reactdom file npm registry unpack go reactdom folder run results error bash reactdom dmitri npm install production npm err darwin npm err argv node usrlocalbinnpm install production npm err node npm err npm npm err read property react undefined npm err npm err need help may report error npm err npm err please include following file support request npm err usersdmitrigithubbrowserifycdntestnodemodulesreactdomnpmdebuglog interesting fact run without flag gets peer dependencies without errors though issue peer deps returns weird error maybe related reactdom packaging ask need check url service", "num": "5918", "d": "1/2016"}, {"title": "optional required values proptypesshape", "body": "sure already good way would nice able instead latter get quite big multiple optional values", "num": "5916", "d": "1/2016"}, {"title": "reactcsstransitiongroup add transition lifecycle hooks", "body": "using reactcsstransitiongroup implement simple nested expandcollapse ui since animating element height ca nt animate auto value css need get auto height dom set explicit height nesting child expands collapses need communicate height change child ancestors also using iscroll library implement scrolling height transition completes need refresh iscroll component easy implement css transitions reactcsstransitiongroup require reactcsstransitiongroup notify child component transitions begin end much way lowlevel reacttransitiongroup calls lifecycle hooks child propose reactcsstransitiongroup call following functions child component animationtype appear enter leave componentwilltransition called first css transition class eg exampleenter exampleleave added element componentdidtransition called css transition classes removed element implemented simple code changes reactcsstransitiongroupchildjs please see pull request feedback welcome", "num": "5914", "d": "1/2016"}, {"title": "escaped equal server side id rendering", "body": "hello got strange problem server side rendering react add slash make checksum invalid", "num": "5913", "d": "1/2016"}, {"title": "htmltojsx convert curly brackets", "body": "hi experiencing problem htmltojsx converter converter officially displayed htmlcode compiled following jsxcode jsx jsx code fails following error javascript uncaught syntaxerror embedded unexpected token var hello reactcreateclass render function return test anyone know solution problem best regards jan jaap", "num": "5910", "d": "1/2016"}, {"title": "question update parentless component outside", "body": "copy stackoverflow question properly update component nt parent found two ways first method update component changing component state var hello reactcreateclass render function thisstate return null return hello thisstatename var component reactdomrender documentgetelementbyid container componentsetstate name world settimeout function componentsetstate name stackoverflow second method update component method var hello reactcreateclass render function return hello thispropsname reactdomrender documentgetelementbyid container settimeout function reactdomrender documentgetelementbyid container method correct maybe third correct way know flux etc want know simplest way simplest example", "num": "5906", "d": "1/2016"}, {"title": "render every element different render function", "body": "need element html need datareactid nt except render two element different function eg rendertostaticmarkup rendertostring combine element could include many element render split combine could cause mistake element much could set attribute compoment new pure html compoment javascript class defaultlayout extends reactpurehtmlcomponent render return export default defaultlayout write render function auto swap render function render elements graceful solution", "num": "5902", "d": "1/2016"}, {"title": "testutils render stateless function components", "body": "using react babel react test utils addon jasmine testing framework choice seems though stateless function component tested testutilsrenderintocomponent testutilscreaterenderer render either returns null rendering function component test stateless function component yield result component test error expected null truthy", "num": "5901", "d": "1/2016"}, {"title": "reactcsstransitiongroup inline styles", "body": "possible use react inline styles reactcsstransitiongroup tried nt seem work react v render", "num": "5898", "d": "1/2016"}, {"title": "bound function reused across multiple instance react component", "body": "hi met problem event handler binding react class syntax javascript render parent component render const trades contracts thisprops const allid objectkeys trades return allidmap id gt return child component class class tradepanel extends component e const id thisprops problem happens create instance child component incorrectly bounded instance props pass properly problems event handlers render called binding reevaluate parent component rerender destroy old children reconstruct new one regards", "num": "5897", "d": "1/2016"}, {"title": "legal licence ghpages site facebook opensource", "body": "willing use facebook gihubio templates mit licensed project ghpages site licence main repository asked twitter luck far cc vjeux", "num": "5896", "d": "1/2016"}, {"title": "getinitialstate reactcreateclass warning", "body": "hi migrated react encounter warning switching reactminjs sample component const testcomponent reactcreateclass getinitialstate return number render return hello world export default testcomponent using reactminjs receive using reactjs warning tried refactor everything state becomes null thanks", "num": "5893", "d": "1/2016"}, {"title": "react support svg attributes", "body": "svg attributes support lacking noticed mask filter missing mozilla list svg core attributes", "num": "5889", "d": "1/2016"}, {"title": "props undefined getinitialstate", "body": "first know antipattern please forgive something like recently noticed first render eventually get populated available next render however ever called always going fixed issue setting however wonder bug nt always available", "num": "5888", "d": "1/2016"}, {"title": "react rendertostaticmarkup customcomponent", "body": "hi rendertostaticmarkup outputs classname markup customcomponent hyphenated tagnames jsx reactrendertostaticmarkup reactcreateelement mydiv classname bobi outputs expected", "num": "5883", "d": "1/2016"}, {"title": "request supporting element", "body": "hi plan support lt noindex gt tag even better valid type necessary every seo needs type feature request component dom general issues", "num": "5882", "d": "1/2016"}, {"title": "atouppercase function", "body": "using smallgrid gives error typeerror atouppercase function ion return ocreateclass tagname atouppercase render function return library built grunt babelify works fine examples", "num": "5881", "d": "1/2016"}, {"title": "react inline styles blocked csp policy stylesrc", "body": "working application strict csp policy including stylesrc prevents possibility using inline styles attempt use react builtin css templater following component styling blocked error class somecomponent extends reactcomponent constructor super domrender documentgetelementbyid main get around manually manipulating dom style object every react render class somecomponent extends reactcomponent constructor super domrender documentgetelementbyid main wondering react dom engine set style object instead serializing string inserting style attribute markup would make react adhere tightly csp would pull request welcomed", "num": "5878", "d": "1/2016"}, {"title": "simulatefocus classes component", "body": "hi try use input wrapped inside class nt work maybe limitation nt find anything subject reproduce issue", "num": "5876", "d": "1/2016"}, {"title": "onclick change render", "body": "hi new reactif want click button dom change rendered class commentbox commenttext using simple onclick function something like btnclick reactdomrender documentgetelementbyid content else reactdomrender documentgetelementbyid content var commentbox reactcreateclass render function return comments var commenttext reactcreateclass render function return text", "num": "5875", "d": "1/2016"}, {"title": "csstransitiongroup inconsistency fallback behaviour warning message", "body": "minor issue deprecation warning shown property transitiontimeout null undefined behaviour falls back deprecated behaviour falsey value following use deprecated behaviour without printing warning", "num": "5873", "d": "1/2016"}, {"title": "assertions left production mode", "body": "assertions left production output using webpack p matters located inside block could squeeze bytes examples", "num": "5871", "d": "1/2016"}, {"title": "datareactid alternative", "body": "know longer uses keys part issue however like bring forward different way link dom initial render keep text nodes regular nodes separate implemented something like simple virtual dom sure react works way essentially recursively mounts nodes top splits text nodes using ensure server produced dom matches virtual structure curious something like feasible react since allowed implement bootstrapping server side code producing clean html output without checksums ids", "num": "5869", "d": "1/2016"}, {"title": "generating unique id ssr", "body": "howdy ya tl dr please provide way coordinate pseudorandom identifiers across client server issue discussed bit continually run issue trying build libraries provide accessible components default react component model generally speaking offers big opportunity raise often low bar accessibility library widget world see experiments like ryanflorence better worse aria api browser heavily based using id link components together need id different world would generate ids needed move however serverside rendering makes complicated generated id going cause mismatch clientserver tried different approaches address one making id required props components need gets kinda ugly components need id moreso annoys users unfortunate could generate deterministic id could provide accessible components default frustrating part component generally information needs set various aria info necessary make component usable screen reader stymied user provide bunch globally unique ids far really reasonable approaches seen syranide solution root id store using latter obviously problems former nt scale well library authors everyones root app component already wrapped router provider etc every library use root level id provider probably super feasible annoying users seems like best way would react react addon could provide consistent first class way get unique identifier component even node rootid thanks hard work everyone", "num": "5867", "d": "1/2016"}, {"title": "render static html clientside", "body": "way get string plain html react component client side app design editor lets click elements edit style nothing new remaking ground using react app templates edited inside iframe rendered elsewhere attaching click handlers every editable element conditionally eg view rendered inside iframe editor would nightmare ca nt use jquery iseditable click like used virtual dom taking account seems solution rendering wouldbeedited view plain html use iseditable click approach inside editor insights similar experiences", "num": "5863", "d": "1/2016"}, {"title": "binding event inside onclick prop", "body": "ref jsx alert windowaddeventlistener click gt alert thisrefsfilepaneltoggle gt \u53d1\u9001\u6587\u4ef6 react alerted reactlite alerted case wrap second binding make work react", "num": "5862", "d": "1/2016"}, {"title": "move devtool warnings standalone test", "body": "talked jimfb hopefully lead clearer distinction tested move towards integrating devtools api throughout", "num": "5860", "d": "1/2016"}, {"title": "callback method nt refer right", "body": "let say component add listener componentwillmount method callback method declared component listener gets kicked method executed inside method nt refer component want heres full component javascript import react component proptypes react import emptyfunction fbjslibemptyfunction import appscss import header header import feedback feedback import footer footer import mediaquery reactresponsive import sidebar reactsidebar import canusedom fbjslibexecutionenvironment import nodemodulesbootstrapdistcssbootstrapmincss import bootstrap style whole project import publicmybootstrapdistcssmybootstrapcss class app extends component constructor props super props thisstate sidebaropen false sidebardocked false static proptypes context proptypesshape insertcss proptypesfunc onsettitle proptypesfunc onsetmeta proptypesfunc onpagenotfound proptypesfunc children proptypeselementisrequired error proptypesobject static childcontexttypes insertcss proptypesfuncisrequired onsettitle proptypesfuncisrequired onsetmeta proptypesfuncisrequired onpagenotfound proptypesfuncisrequired getchildcontext const context thispropscontext return insertcss contextinsertcss emptyfunction onsettitle contextonsettitle emptyfunction onsetmeta contextonsetmeta emptyfunction onpagenotfound contextonpagenotfound emptyfunction componentwillmount consolelog component app mount thisremovecss thispropscontextinsertcss componentwillunmount thisremovecss open side bar onsetsidebaropen open consolelog set sidebar open thissetstate sidebaropen open media query changed ie mobile version comes changes state sidebar mediaquerychanged canusedom thissetstate sidebardocked thisstatemqlmatches consolelog media query changed sidebardocked thisstatemqlmatches render var sidebarcontent sidebar content export default app componentwillmount trigger mediaquerychanged mediaquerychanged trigger set state nt refer app component supposed set state component thanks", "num": "5858", "d": "1/2016"}, {"title": "controlled components value reflected dom", "body": "noticed input value updated dom implementing controlled component normal expected behavior thissetstate term eventtargetvalue link example jsbin first loads press run js button output section", "num": "5857", "d": "1/2016"}, {"title": "consider applying html namespace default", "body": "currently creating elements react checks various namespaces like svg uses html apply namespace least checks places without checking firefox starting use react xul pages trying get xul fast need migration path using react xul page create xul elements default default namespace xul different html chance could apply html namespace creating elements would look like instead normal call possible anything react help us going fork react change calls nt hard already done wanted ask first fork fine forking mostly html drop fork", "num": "5856", "d": "1/2016"}, {"title": "issue reactcsstransitiongroup", "body": "getting error uncaught invariant violation addcomponentasrefto reactowner refs might adding ref component created inside component method multiple copies react loaded details installing reactcsstransitiongroup seems one copy react running using gulp browserify package app babelpresetreact babelplugintransformreactdisplayname babelplugintransformreactjsx babelplugintransformreactjsxsource eslintpluginreact formsyreact react reactaddonscsstransitiongroup reactdom reactrouter", "num": "5855", "d": "1/2016"}, {"title": "allow propsstate types object", "body": "hello author scalajsreact facilitates using react staticallytyped scala language use immutable scala values components props state react requires js objects wrap propsvalues singlekey object example instead setting component state wrap also understand react performs additional work objects receives like component state receiving actually merge two create new object feature useful developing js useless consumers library perhaps others om maybe maybe reason case merging propsstate done via scala static types invariants checked compiler would much efficient us use react via languages allow components use types object propsstate even simple check like newstate object mergestates else blindlyreplacestate would sufficient wdyt", "num": "5854", "d": "1/2016"}, {"title": "seal pooled events", "body": "kind related old anyone trying smart adding properties pooled nonpersisted event cause properties remain pool causing memory leak sorts could make sense events way ensure users ca nt mess event object bad unsupported ways probably instead", "num": "5853", "d": "1/2016"}, {"title": "scryrendereddomcomponentswithclass allow assert props found components scryrenderedcomponentswithtype", "body": "trivial example assume component render code helper method makes test pass helper makes fail seem like expected behavior expected think probably explicitly mentioned docs", "num": "5852", "d": "1/2016"}, {"title": "tips documentation accessing props children", "body": "eg something avoid", "num": "5850", "d": "1/2016"}, {"title": "scryrendereddomcomponentswithtag throws error ff", "body": "name input field props test fails anything else seems fine ff though failed form test find button htmlformelement nt named property setter props reactdomcomponentmixingetpublicinstance findallinrenderedtreeinternal findallinrenderedtreeinternal reacttestutilsfindallinrenderedtree reacttestutilsscryrendereddomcomponentswithtag test case jsx import react dom component react import reactdom reactdom import expect expect import renderintodocument scryrenderedcomponentswithtype withtype scryrendereddomcomponentswithtag withtag reactaddonstestutils function node debug debug documentcreateelement div documentbodyappendchild debug return reactdomrender node debug class app extends component render return hello describe form test function", "num": "5848", "d": "1/2016"}, {"title": "issues installing master npm", "body": "installer tries run build script folder inside using flat structure c repo npm install save facebookreact npm warn install could nt install optional dependency unsupported reactbuild postinstall c reponodemodulesreactbuild node nodemodulesfbjsscriptsnodecheckdevenginesjs packagejson throw err error find module c reponodemodulesreactbuildnodemodulesfbjsscriptsnodecheckdevenginesjs functionmoduleresolvefilename functionmoduleload functionmodulerunmain startup additional info npm nodejs windows ruru trying check resolution question", "num": "5847", "d": "1/2016"}, {"title": "enormous datareactid", "body": "developing big gui application chrome developer tools lagging reaching hundred kilobytes size small example wrong computed roughly could create paragraph somewhere performance manual issue", "num": "5846", "d": "1/2016"}, {"title": "onwheel stop bubbling happening", "body": "target div scrolls coming top bottom scrolling div scrolling starts happening entire page nt want think happening due event propagation trying stop following manner implementation using extends component way create components put onwheel event listener consoling scrolling fine able stop propagating event parent sure stoppropagation happening exactly whether issue happening propagation nt want use libraries used mixins please nt suggest way", "num": "5845", "d": "1/2016"}, {"title": "unhelpful error caught typeerror read property refs null", "body": "adding child element stateless component yields caught typeerror read property refs null see really hard debug could better error message", "num": "5841", "d": "1/2016"}, {"title": "", "body": "error event elements nt work looking seems like ca nt tell supposed work error event useful deduce format browser using", "num": "5839", "d": "1/2016"}, {"title": "way disable contenteditable warnings", "body": "react warns component contains managed react responsibility guarantee none nodes unexpectedly modified duplicated probably intentional writing rich text editor using react written ensure nodes modified browser capturing input events performing modifications internal document format rerendering using react however render react still warns would awesome able disable warning somehow specific value contenteditable prop another name something sure best approach take thought create issue discussion around", "num": "5837", "d": "1/2016"}, {"title": "componentdidmount called render completly done", "body": "hi much understand react component lifecycle fire done found today case sure bug lack understanding side call function return inside always run setup always finish jsx export default class table extends reactcomponent componentdidmount render const content thispropsvalid thisrendertable thisrendermessage return content rendertable rendermessage missing something bug thanks", "num": "5828", "d": "1/2016"}, {"title": "using immutable state breaks testutilssimulate", "body": "simple react component checkbox inputs table component managing state using immutable library like described simple handlechange listener updates state component looks like handlechange e consolelog handling change attempting simulate onchange event component using testutilssimulatechange like import react react import testutils reactlibreacttestutils import channelstable appcomponentschannelstableindexjsx describe channesltable gt let channelstablecomponent let inputs let testonchange sinonspy gt channelstablecomponent testutilsrenderintodocument inputs testutils scryrendereddomcomponentswithtag channelstablecomponent input max audience size increase channel selected gt testutilssimulatechange inputs testutilssimulatechange inputs running test handlechange called handling change logged one time remove either line line setting state changes simulating successfully handling change logged twice simplified version code brought attention produces results none less racking brain day trying figure causing unfortunately success remedying issue", "num": "5827", "d": "1/2016"}, {"title": "selects lot default values nt running efficiently", "body": "app building requires lot checked default appears issue react performance situation jsfiddle builds options selected takes second run computer remove see runs almost instantly set options takes minutes run problem appears get exponentially worse selected options realize edge case also seems like bug", "num": "5825", "d": "1/2016"}, {"title": "ca nt seem update name attribute", "body": "using rerendering element new value attribute keeps old value still returns know old versions ie considered readonly new browsers however works fine react", "num": "5824", "d": "1/2016"}, {"title": "warn input switches controlled uncontrolled", "body": "component either using uncontrolled inputs controlled inputs pick single paradigm lifetime component result instance input never switch controlled uncontrolled vice versa warn input previously controlled becomes uncontrolled vice versa", "num": "5821", "d": "1/2016"}, {"title": "warn specified", "body": "illegal users need decide using controlled uncontrolled inputs warn properties specified", "num": "5819", "d": "1/2016"}, {"title": "ontouchstart fire extremely slow", "body": "ontouchstart fire extremely slow onclick bug", "num": "5817", "d": "1/2016"}, {"title": "event handlers arguments", "body": "page mention events may receive foreign arguments unexpected normal browser events example event handler like function handlethis e somethingelse browser lt img onerror handlethis argument somethingelse always undefined react lt img onerror handlethis argument somethingelse things nt expect like string content would possible add property event like eventsecretdomdonotaddrandomunexpectedargumentstoeventsoryouwillbefired", "num": "5815", "d": "1/2016"}, {"title": "stuck", "body": "number inputs react nt follow normal html conventions seems though number inputs set value stuck set value case demo issue", "num": "5812", "d": "1/2016"}, {"title": "improve documentation translation management", "body": "really ad hoc right make better huge deal since shitty job exposing translations groups people actively contributing best make easier thejameskyle great success using crowdin set project work next days get syncing gh based article go thanks inspiration james", "num": "5810", "d": "1/2016"}, {"title": "synthetic keyboard event spacebar press improper eventkey value", "body": "made pen react translating spacebar press instead per listing mdn look like many characters nt detected though wondering reliable use actually", "num": "5809", "d": "1/2016"}, {"title": "ctrlz broken asynchronous setstate", "body": "example simple page one element typing goes fine however ctrlz undo broken chrome ie chrome nt remove first typed letter ie actually adds stuff javascript var react require react var myinput reactcreateclass render function var return reactcreateelement input onchange function event var value eventtargetvalue settimeout function thissetstate value value type text value thisstatevalue reactdomrender reactcreateelement myinput null documentgetelementbyid allcontent culprit asynchronous setstate call remove settimeout works properly however react breaks browsers handle async updates fine without react example works fine even settimeout present simplified examples actual use case fluxlike store framework sends updates asynchronously animation frame reactaddonsbatchedupdates able condense change events improve performance", "num": "5807", "d": "1/2016"}, {"title": "drag n drop elements sorting", "body": "hello need advice drag n drop sorting react start data rendered dom html one two three manual sorting drag n drop data rendered dom html three one two changing data data react apply changes array dom html two three one reason refund dom element place html three one two problem deep nesting components html one two react full rerender longer needed left falls error longer exist whether normal way dnd sorting react", "num": "5805", "d": "1/2016"}, {"title": "testutilssimulate propagate click events labels change events associated inputs", "body": "using click event trigger change event associated action browser trigger change event javascript import react react import reactdom reactdom import simulate reactaddonstestutils const id foo let changed false const onchange gt changed true let clicked false const onclick gt clicked true reactdomrender documentbodyappendchild documentcreateelement div const labelnode documentqueryselector label simulateclick labelnode consolelog clicked clicked true consolelog changed changed false true", "num": "5804", "d": "1/2016"}, {"title": "babel semicolons arrow functions class", "body": "would like share diff everyone nt seen babel post transpile broke today change spec compliancy throw parse error class properties semicolon practise means class constructor needs semicolon arrow functions well used arrow functions fall changed normal functions add bind call needed using node coding style", "num": "5802", "d": "1/2016"}, {"title": "componentwillreceiveprops happening immediately loading mobile browsers", "body": "seeing issue load component componentwillreceiveprops called almost immediately happening mobile browsers desktop seeing issue anyone else experiencing", "num": "5800", "d": "1/2016"}, {"title": "starter kit link readme points version", "body": "starter kit link readme file points version instead make change hasnt done yet", "num": "5798", "d": "1/2016"}, {"title": "react transition removing leave classes removal", "body": "came accross issue reactcsstransitiongroup component classes removed component removed dom situation caused flicker due styles briefly changed element removed wondering behaviour purpose leave classes kept way dom removal never removing", "num": "5796", "d": "1/2016"}, {"title": "really need write call", "body": "discovered excitingly last release stateless functional components think unleash react power js functional programming realm accordingly found fact write use components since long stick stateless functional components need call stateless functional components normal js way importantly avoiding write legacy way write like js var childnumbercomponent number gt child number var gt var mount reactdomrender documentgetelementbyid container js var childnumbercomponent number gt child number var gt var mount reactdomrender documentgetelementbyid container although often encounter warning says warning child array iterator unique key prop check toplevel render call using see information think another issue obvious express use components vanilla js function wrapping expression appears potentially much powerful write js legacy functional way rather write html way jsx simpler straightforward call receive args less rules react need follow although nt intention deny still wide option legacy html tag way thought using anymore stateless functional components another discovery using anymore stateful components major reason stateless functional components recently fact need deal state real world wrote little helper component event system time engine js react state life cycle stateless sequence var seqcomponent seq gt helper component hidden place write react system special component deal stateful mutable component pure functional components js var physicscomponent gt var mount reactrender physicscomponent documentgetelementbyid container working live demo code hopefully could show potential new stateful components help others want seek way write stateful components stateless functional components overall would like hear thought thanks", "num": "5794", "d": "1/2016"}, {"title": "rendering style tag selectors", "body": "trying dynamically inject tag dynamically style inline svg element render directly react renders converts gt breaks css dangeroslysetinnerhtml style tag causes error", "num": "5792", "d": "1/2016"}, {"title": "eventtargetselectedoptions ie bug", "body": "currently synthetic event fired select element onchange prop selectedoptions property likely earlier versions well eventnativeeventsrcelementvalue appears work browsers works chrome ie polyfilled consistent across browsers assumption developers use eventnativeeventsrcelementvalue", "num": "5791", "d": "1/2016"}, {"title": "forceupdate nt cause rerender", "body": "bail rerender props object tripleequalsequal lead unintuitive results user dropped references string yet old data still visible renderforceupdate example invoking insufficient need call seems like api violation already issue tracking would fix sebmarkbage spicyj zpao", "num": "5789", "d": "1/2016"}, {"title": "purerender static property", "body": "majority components purerendermixinlike behavior classes function components easy way use mixins common use case think part core react think encourage people use pure render lot simpler add good compromise requests make pure render default behavior js class x extends reactcomponent static purerender true render", "num": "5788", "d": "1/2016"}, {"title": "shallow rendering broken", "body": "upgrading find test cases failing looking see reads document object defined globally fixed issue fixes issue problem however test case passes running individually running bunch test cases even defined", "num": "5786", "d": "1/2016"}, {"title": "event", "body": "event fire user dragging mouse release would nice event fired immediately whenever selection changed including dragging mouse useful example syncing selections multiple collaborators ala google docs native selectionchange event supported cross browser way back ie chrome safari recently firefox something react could polyfill expose components", "num": "5785", "d": "1/2016"}, {"title": "inline styles browserspecific values", "body": "would nice could define inline style array parser would expand duplicate styles props example let mystyles display webkitflex msflexbox flex specifying style mystyles component would expand style display webkitflex display msflexbox display flex thanks", "num": "5783", "d": "1/2016"}, {"title": "deprecate immutability helpers", "body": "thought getting rid api pretty complicated probably better idea cases either use immutable js powerful complete proposal object spread syntax simpler eventually built js long continue immutability helper addon docs feel steering people new react towards solution know bad tradeoff", "num": "5780", "d": "1/2016"}, {"title": "react setstate nt work shallow render", "body": "use gist reproducing issue test want make async request component going mounted use result request updating state see test report nt happen test believe issue fixed recently shallow render ca nt recognize sync state updates please tell see mistakes code trying fix problems many ways hope example code simple enough", "num": "5779", "d": "1/2016"}, {"title": "testutilssimulateblur reset documentactiveelement", "body": "title describes simulating blur event reset probably way aware get element caused blur event context", "num": "5778", "d": "1/2016"}, {"title": "dom rendered different virtual dom", "body": "happened virtual dom inspected react devtool html rendered dom got html real react code javascript render let slides thispropsstoremap slide gt section inserted section using warning error console", "num": "5777", "d": "1/2016"}, {"title": "warn style value nan", "body": "passing value nan value css style seems indicate error turns nt warn initial render give confusing error update per spec discovered anyway probably warn someone passes initial render warn update previousnext values nan", "num": "5773", "d": "1/2016"}, {"title": "props constructor match props render", "body": "expected actual code js class helloworldcomponent extends reactcomponent constructor props super merge foo bar props consolelog constructor thisprops render consolelog render thisprops return hello thispropsname reactrender documentgetelementbyid reactexample", "num": "5772", "d": "1/2016"}, {"title": "please tag", "body": "latest version npm latest tag github really scary get untagged version library idea commit released", "num": "5771", "d": "1/2016"}, {"title": "composing containers", "body": "building apps found containers plays major roll apps course relay redux make easy create data sources caches manages state apps clean clear way compose containers important created reactkomposer see let compose react containers basically could compose new kind data source including promises rxjs observables amp even meteor tracker based data sources check demos looking forward feedback", "num": "5770", "d": "1/2016"}, {"title": "import scope available child class", "body": "base class import scopes available inherited class basejs import react react import export default class base extends reactcomponent testjs import base base export default class test extends base const need reexport default modules every component used next component", "num": "5769", "d": "1/2016"}, {"title": "using two different renderers script", "body": "hello react team due way injects dependencies notably component one one use two different renderers nodejs scripts let say instance need use reactblessed display nice cli interface render html http request crash second renderer override first one dependencies solution would overlooked related yomguitherealreactblessed", "num": "5768", "d": "1/2016"}, {"title": "external jsx files executed synchronously", "body": "following code html reactdomrender documentbody throwing error app component defined seems inline script executed external appjsx file loaded however used work html reactrender documentbody", "num": "5766", "d": "1/2016"}, {"title": "dynamically added unmount handlers", "body": "react components could use way dynamically add handler called unmount either event handler like way way register destructordestroy method object component holding exists scale well every time hold something maintain two sections code cleanup code separate rest code try cleanup code using helpers adding cleanup code could done function nt allow sometimes end adding component would nt normally need hold destructor use ca nt add cleanup code closure set one sample use case mine unmount handlers react discouraging use mixins trying move towards alternative patterns new code helpers make sense component wont work special component higherorder component needs come pattern involves passing component helper function mutate component provide sort service linked component two examples codebase provides component version internal api scoped component component unmounted api requests http requests aborted adds key pending state set returns unset intended passed handler pattern provides buttons etc pending text spinners waiting http requests email resendconfirmation problem helpers often need cleanup unmount needs abort requests unmount needs break references nt called nt prevent gc require call cleanup function placed unnecessary boilerplate easy forget would much preferable helpers able register unmount handler component instance implicitly clean", "num": "5765", "d": "1/2016"}, {"title": "svg attributes getting ignored", "body": "input output missing properties", "num": "5763", "d": "1/2016"}, {"body": "problem updating examples home page second two examples stateful want three homepage examples feel like simplenatural progression need introduce stateful syntax second two examples point using different syntax first example would make harder follow progression personally would open upgraded use stateless functions", "d": "1/2016"}, {"body": "actually think making first example simple would good thing saying needs complex necessary complexity needed later seems strange add complexity bit bit problem updating examples home page second two examples stateful fix whole class components build without state mind reasonable thing would hello world example stateless function actually use props discuss jsx syntax general expand hello world introducing first example show props passed jsx component discuss advantages stateless components recommended way talk stateful components introduce syntax building stateful components basically would introduce first example making component optionally reference externalizing state eg flux stores point", "d": "1/2016"}, {"body": "open could walk walk preparing pr let know", "d": "1/2016"}, {"body": "probably unless already know cause solution", "d": "1/2016"}, {"body": "sounds like context", "d": "1/2016"}, {"body": "nt explicitly use context variables like", "d": "1/2016"}, {"body": "check default props", "d": "1/2016"}, {"body": "proposing make special kind prop traverses sets matched component props like css selectors", "d": "1/2016"}, {"body": "ok use case provided detail covered default props something bigger want control child components props grandparent components big picture right know looks much like kind mad antipattern would like hear besides obvious performance isssues think propose antipattern let take example let assume make call component requires implicit knowledge component works structured via components component property type string kind knowledge component used encapsulated within component implementation detail component implementation details subject change eg want refactor use instead get trouble really fast nt kind problems react let say implementation looks like nt problem refactoring switch without modifications component crucial point component know interface props case react turn know interface long interface props wo nt change free change implementation component convenience strive simplicity main reason behind lot times change little bit insides component one particular place implement new methodsprops declare parent component anyways api design ie interface components appears brittle really hard get right", "d": "1/2016"}, {"body": "texttechne thnx thoughtful answer requires implicit knowledge parent component works actually kind nt want know works want set props occur likewise nt know make selector css good example great expose guts components part exposed use context global theme settings kind wacky even though seems reliable switch child nephew without modifications component yes overall usability point view likely change grandparent calls parent parent handles props anyway nephew props probably differ bothers makes components seem less isolated context used especially tend make reusable universal like many ui parts", "d": "1/2016"}, {"body": "yes overall usability point view likely change grandparent calls parent parent handles props anyway nephew props probably differ said interface api design hard part open challenge general changing implementation nt affect interface think really hard design furthermore think occurs quite often challenge assumptions component need change interface really isolated single component one purpose serve one purpose would ideal api look like yes changing interface always hurts challenge comes component design framework use challenge recurring api programming language webservice framework imagine want change implementation specific language feature make needed api change backwards compatibility reasons revolves around interface api design nt specific react think close issue", "d": "1/2016"}, {"body": "purpose use case", "d": "1/2016"}, {"body": "yeah could see fitting error boundaries stuff", "d": "1/2016"}, {"body": "clarify error boundaries stuff seems talking exclusively errors render stack talking errors thrown event handler reason focused event handlers tend root whole lot code thus good place consider lastchance exception handling", "d": "1/2016"}, {"body": "actually couple days think seeing issues nt see real benefit would want feature would allow beyond already allows", "d": "1/2016"}, {"body": "may wrong think design equivalent worked couple versions back grab stuff need event object", "d": "1/2016"}, {"body": "thanks comment gaearon updated issue specific rather avoid app passing event onchange handler utilizes target update breaks situation simple enough monkeypatch back onto callback callback following nonnull keys remain nonnull could definitely keep reference monkey patch back love find another solution", "d": "1/2016"}, {"body": "point specific code working fork racktreactautocomplete specifically lines imagine anyone utilizing properties going bump upgrade", "d": "1/2016"}, {"body": "shallow clone event want keep around", "d": "1/2016"}, {"body": "maybe missing something seems like want call right", "d": "1/2016"}, {"body": "gaearon guess felt hacky looking blessed way deal think might check thanks jimfb", "d": "1/2016"}, {"body": "know existed made day", "d": "1/2016"}, {"body": "totally worked pr racktreactautocomplete thanks jimfb", "d": "1/2016"}, {"body": "warn accessing properties pooled events used", "d": "1/2016"}, {"body": "sure know suggesting maybe mean maybe development mode could replace getters throw clear error indicating properties removed initial handlers called need access find another way trying use", "d": "1/2016"}, {"body": "maybe development mode could replace getters throw clear error indicating properties removed initial handlers called need access find another way trying use persist yeah meant", "d": "1/2016"}, {"body": "yeah probably good thing", "d": "1/2016"}, {"body": "love make first contribution nt mind holding bit work smile", "d": "1/2016"}, {"body": "unable reproduce inside react repository went fine also also went fine exactly get error", "d": "1/2016"}, {"body": "usually happens old versions npm eg package question actually eslintpluginreactinternal installed via file reference packagejson needs npm looking contribute react need build need using node npm", "d": "1/2016"}, {"body": "alexgalays made tool get rid proptypes interested use release build browserify bundling flow agree ssr bit would nice could separate treeshaking build tools like exclude internal modules though nt make use", "d": "1/2016"}, {"body": "yes already migrating toward configuration react built features needed chosen renderer one main points upgrade path migrate system synthetic events required whole host reasons including performance event listeners registered top instead element along dom tree proptypes checked production build", "d": "1/2016"}, {"body": "expected behaviour read controlled components docs better explanation", "d": "1/2016"}, {"body": "apologies thought meant value hard coded rather inserted via state", "d": "1/2016"}, {"body": "cool reread controlled components say nt thing smile", "d": "1/2016"}, {"body": "react guarantee change markup long rendered value within input box correct ie user sees correct react job correctly markup irrelevant fwiw behavior probably closer want merges", "d": "1/2016"}, {"body": "clarify jimfb saying react updates currently via property nt affect super simplified example show react currently", "d": "1/2016"}, {"body": "oh wow nt know difference rather thought dynamic reflection tag nonevent properties surprised learn thanks jimfb amp zpao", "d": "1/2016"}, {"body": "ooh interesting afaict respected element creation whether intended aware good question curious know answer", "d": "1/2016"}, {"body": "thinking cloneelement probably nt aware defaultprops could make check createelement typeof undefined determine whether new prop gets copied way undefined null would semantics createelement", "d": "1/2016"}, {"body": "almost certainly usage error probably passing null noncomponent value somewhere likely component based code snippet required properly believe bug react please create simple jsfiddle demonstrates problem reinvestigate fiddle", "d": "1/2016"}, {"body": "seems like fix issue case please close", "d": "1/2016"}, {"body": "yes fix marked grab another release", "d": "1/2016"}, {"body": "please release pray", "d": "1/2016"}, {"body": "version react give chrome", "d": "1/2016"}, {"body": "react version thought narrowed problem regular chrome window opposed incognito window problem seems intermittent determines methods run", "d": "1/2016"}, {"body": "part hard requirement property set ie maybe extension piece code setting", "d": "1/2016"}, {"body": "investigating later evening thanks quick responses", "d": "1/2016"}, {"body": "would doctype anything rendering modal component inside using inspect source doctype content within getting errors", "d": "1/2016"}, {"body": "doctype might matter documentmode set sure even doctypeless iframes chrome wo nt set could make simplified test case would helpful", "d": "1/2016"}, {"body": "details comments also available", "d": "1/2016"}, {"body": "looks like npm bug stepping code referencing log reactdom production flag looks like fill empty object dev mode explicitly sets production lines first link things happen add packagejson somebody fix npm bug nt know present nt looked", "d": "1/2016"}, {"body": "looks like might cover missing critical piece happens missing", "d": "1/2016"}, {"body": "zpao super helpful add packagejson nt know present nt looked looks like npm bug thanks", "d": "1/2016"}, {"body": "zpao consider release quick patch", "d": "1/2016"}, {"body": "pr marked get picked another release branch think hard timeline", "d": "1/2016"}, {"body": "fyi shipped fix good", "d": "1/2016"}, {"body": "zpao thanks lot", "d": "1/2016"}, {"body": "file code lives thanks cc sees", "d": "1/2016"}, {"body": "good catch thanks reporting zpao mentioned please file reactmagic repo remember fix", "d": "1/2016"}, {"body": "thanks fast replies wanted post issue reactmagic however read reply would like issues related html jsx conversion general reactjs repository issues html jsx conversion go general reactjs repository", "d": "1/2016"}, {"body": "old comment html jsx converter used react repo moved reactmagic one back sent phone jan jan jaap hakvoort notifications githubcom wrote thanks fast replies wanted post issue reactmagic however read reply would like issues related html jsx conversion general reactjs repository issues html jsx conversion go general reactjs repository reactjsreactmagic comment reply email directly view github", "d": "1/2016"}, {"body": "looking shouldcomponentupdate returns false tells react component nt need rerender future reference usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "1/2016"}, {"body": "thanks reply server side render useing rendertostring call move topic stackoverflow many thanks", "d": "1/2016"}, {"body": "duplicate", "d": "1/2016"}, {"body": "currently possible might open making work would likely say use prop need consider make coexist peacefully current expectaion classes interested please propose complete solution putting pr hammer", "d": "1/2016"}, {"body": "additional findings problem happens text input works properly", "d": "1/2016"}, {"body": "autobinding classes binding issues likely happening transform level binding syntax standard point reproduce test case jsfiddle using supported syntaxes easier see maybe bug react", "d": "1/2016"}, {"body": "ok gon na take sometime occupied thanks", "d": "1/2016"}, {"body": "unreproducible", "d": "1/2016"}, {"body": "help footer documentation pages", "d": "1/2016"}, {"body": "correct textcontent page licensed cc ask nt rip styles htmlcss want allow people easily see official facebookgithubio domain like", "d": "1/2016"}, {"body": "jimfb indeed fear fully understand reason however project wo nt strike public headed maximal people reuse css html base suffisant modifications font color logo width column ect nt look facebook project strictly impossible nt worry would serach ccol template vitrine site anyway thanks answering", "d": "1/2016"}, {"body": "sure get warning would expected way around warnings nt fire production set state constructor saying", "d": "1/2016"}, {"body": "nt class code nt even warning regardless min build", "d": "1/2016"}, {"body": "hi thank reply created sample project demonstrate im experiencing", "d": "1/2016"}, {"body": "jasonvillalon tried running example nt work box gulp failed import syntax among things nt time debug errors example still complex got gulp babel jspm god knows else please simplify minimal hello world example ideally running jsfiddle demonstrates bug", "d": "1/2016"}, {"body": "yeah tried jsfiddle working without warning maybe im using jspm ill close", "d": "1/2016"}, {"body": "think fixed create fiddle using latest demonstrates problem reinvestigate", "d": "1/2016"}, {"body": "jimfb get included one point releases", "d": "1/2016"}, {"body": "according comment", "d": "1/2016"}, {"body": "thanks vlinder correct part", "d": "1/2016"}, {"body": "confirm fixed tried recreate problem fiddle worked", "d": "1/2016"}, {"body": "appears work provide fiddle demonstrates otherwise reinvestigate", "d": "1/2016"}, {"body": "apparently happens arrays data example tell lie could nt recreate issue", "d": "1/2016"}, {"body": "use prop instead custom elements custom elements allowed arbitrary processing props order support full range attributes viable option pass directly", "d": "1/2016"}, {"body": "appears work master syntax appears duplicate", "d": "1/2016"}, {"body": "really nt much go sounds like usage error might one dependencies missconfigured passing incorrect parameters either way looks like probably bug react core since happening userland", "d": "1/2016"}, {"body": "get error nt actual component maybe maybe object etc believe newer react master least provides better warning", "d": "1/2016"}, {"body": "syranide correct creating library incorrectly sorry taking time", "d": "1/2016"}, {"body": "current form react generates string markup single pass inserts ultimately single dom operation historically faster goes style well updates applied individually next version using createelement instead innerhtml think still set initial style together sure matters csp since element already created point try build master see works also cc spicyj case knows actually set style property individually initial render nt currently", "d": "1/2016"}, {"body": "sure matters csp since element already created point nah way bypass stuff use style props dom element directly api also works gut definitely slower usually insignificant amount perhaps good thing able configure bypass thus far get around fan solutions allow write inlinelooking css still end generating class name pushing styles external file works well unless dynamic variable values like modify fly", "d": "1/2016"}, {"body": "set styles individually master suppose need add", "d": "1/2016"}, {"body": "note server rendering still generate markup necessity", "d": "1/2016"}, {"body": "works use change last line", "d": "1/2016"}, {"body": "cody correct simulate utilities take dom node component", "d": "1/2016"}, {"body": "cody jimfb oops bad thx quick reply actually exemple really bad tried simplify real issue ca nt test call inside callback trigger idea reproduce issue let know open new issue", "d": "1/2016"}, {"body": "usage questions like better addressed stackoverflow try reserve github issues bugs core regards specific question events nt fire rendering disconnected dom node like render document fixed example", "d": "1/2016"}, {"body": "usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "1/2016"}, {"body": "second message fixed first third probably cleaned part suppose keep issue open happens", "d": "1/2016"}, {"body": "currently solve generating uid components constructor used basis dom ids seen pass uid along children via contexts allows stay consistent would end ids like imo kind functionality nt really need part react", "d": "1/2016"}, {"body": "think solution still suffers exact problem talking code seems depend generateuid function would break server rendering since uid generated server going one generated client random numbers", "d": "1/2016"}, {"body": "pulling bit long believe major criteria unique consistent client amp server consistent time baked encapsulated dependent knowledge access full tree less cumbersome presently demonstrated solutions nt require users manually manage amp pass try avoid adding functionality react easily replicated component code seems gotten bit beyond", "d": "1/2016"}, {"body": "jquense simply write uid generator function returns value server client", "d": "1/2016"}, {"body": "milesj thanks suggestions tho case helpful one instance component page rileyjshaw think sums issue succinctly thank best solution root store passes id via context bit cumbersome library invent provide unless consensus community", "d": "1/2016"}, {"body": "overthinking bit reasons keep stating easily fixable assuming server client render everything order sure would nt separate function module generates keeps track things let idcounter export default function generateuid inst return btoa instconstructorname idcounter component import generateuid generateuid class foo extends reactcomponent constructor super thisuid generateuid reason want individually incrementing counters per component use function module", "d": "1/2016"}, {"body": "milesj appreciate suggestions efforts solution may familiar enough problem simple incrementing counter nt work ppl nt usually render exactly thing client server think might want read linked issues specifically well aware issues possible solutions simple straightforward solution worked would nt", "d": "1/2016"}, {"body": "think jquense makes valid point us needing good solution currently overly painful coordinate psudorandom identifiers component problem exacerbated different components choose different solutions solving coordination problem see exact problem components use clock instance print relative times also see similar use cases things like sharing flux stores across component libraries anyway think would good find realsupported solution use case", "d": "1/2016"}, {"body": "makes id based key path incrementing counter key path reactdomserverrendertostring could reset hash paths counter ids", "d": "1/2016"}, {"body": "entirely sure asking want render react component string use client demonstrated fiddle want get component otherwise work dom node attach ref component either way looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "1/2016"}, {"body": "nt understand makes think behavior incorrect seems like perfectly reasonable behavior regardless react uses synthetic event system interaction native events synthetic events strictly undefined sebastian wrote post onceuponatime native synthetic event systems large inherently interoperable going close nt see anything actionable", "d": "1/2016"}, {"body": "thanks jimfb checkout post", "d": "1/2016"}, {"body": "zpao hello think following approach add file named module folder tests example names sound weird concatenated path easy find without guessing group tests like javascript describe reactclientdomrenderers function module name lot tests different files components need different beforeeach tests describe reactdom function component name describe rendertostring function tests group needed function test describe reactmount function component name describe rendering react components document function tests group needed function single component describe rendering react components document function tests group function works separate tests way", "d": "1/2016"}, {"body": "goal nt pull warning tests ones specifically provided devtool integration inprogress effort think right see diff moved tests move tests moved commit new file testing explicitly devtool works", "d": "1/2016"}, {"body": "oh see confused devtools move check kind use described approach naming amp grouping tests", "d": "1/2016"}, {"body": "handle moving warnings integrated sort tooling ones commit", "d": "1/2016"}, {"body": "ok one", "d": "1/2016"}, {"body": "refactor missing", "d": "1/2016"}, {"body": "please see builtin magic feature bound methods automatically little confusing javascript developers used feature classes confusing move react classes therefore decided builtin react class model still explicitly prebind methods constructor want however future property initializers neat trick use accomplish syntactically alternatively keep using much nuisance", "d": "1/2016"}, {"body": "perfect thx", "d": "1/2016"}, {"body": "seen", "d": "1/2016"}, {"body": "drizko read", "d": "1/2016"}, {"body": "thank resources issue closed", "d": "1/2016"}, {"body": "zpao know", "d": "1/2016"}, {"body": "fwiw fork commit specific issue understand probably worth everybody else would great someone validate though", "d": "1/2016"}, {"body": "mostly fine long nt impact nt benchmark check", "d": "1/2016"}, {"body": "benchmarks repo run", "d": "1/2016"}, {"body": "could look particularly testcreate chromesafarifirefox", "d": "1/2016"}, {"body": "created basic jsperf case sure accurate though ask around see reason perf would different", "d": "1/2016"}, {"body": "numbers firefox wcreateelement benchhtml testfntesthtml ci benchhtml testfntestcreate ci benchhtml ci benchhtml testfntestclone ci firefox wcreateelementns benchhtml testfntesthtml ci benchhtml testfntestcreate ci benchhtml ci benchhtml testfntestclone ci chrome wcreateelement benchhtml testfntesthtml ci benchhtml testfntestcreate ci benchhtml ci benchhtml testfntestclone ci chrome wcreateelementns benchhtml testfntesthtml ci benchhtml testfntestcreate ci benchhtml ci benchhtml testfntestclone ci seem slightly slower consistently probably enough warrant worrying ways hoping faster explicit could avoid checks sure btw near end test see server sure", "d": "1/2016"}, {"body": "wonder instead like made injectible point instead fork anything larger would change default injection one point goal file really important keep small perf assuming counteract wins could look something like js default whateverinjectcreateelement function doc type ns ns return doccreateelementns ns type return doccreateelement type mozilla fork whateverinjectcreateelement function doc type ns ns ns xhtml ns return doccreateelementns ns type", "d": "1/2016"}, {"body": "zpao would help yep although really hard patch function calls going push hard make happen understand complexity maintain found though additional modules need patched example uses module going pain coordinate patches individual modules sure advice manage guess looks like stuff inside module might fork well", "d": "1/2016"}, {"body": "think going delete fork manually patch generated js file confusing patch unbuilt source sure calls end actually used much easier grep built reactjs file already upgrade instructions part upgrade process hoping fork could rebase likely cause conflicts anyway doubt going upgrade soon big deal hopefully next upgrade switched documents html nt need anymore", "d": "1/2016"}, {"body": "nt enough information us reproduce bug really nt actionable furthermore error occurred installing npm module nt anything fancy refs would strongly suspect something somehow screwed npm dependencies npm seems get confused often think going blame npm case try reading comments see help going close usage question provide jsfiddle demonstrates issue core reinvestigate", "d": "1/2016"}, {"body": "admit confused intrigued time people writing components scala presumably gets transpiled component fed react right would nt scala components wrapper around react component like possible support purelyscala interface setstate semantics want wrapping new object calling actual react implementation usability perspective completely transparent right complaint setting state requires object allocation ie performance complaint root issue", "d": "1/2016"}, {"body": "hey jim people writing components scala presumably gets transpiled component fed react right bingo would nt scala components wrapper around react component like bingo possible support purelyscala interface completely transparent right trifecta complaint setting state requires object allocation ie performance complaint yes exactly right sorry nt clear enough purely efficiency performance plumbing two libraries functionality working fine additional cost unnecessary objects allocated object comparisonmerging every invocation like avoid possible", "d": "1/2016"}, {"body": "even measurable though setstate going cause rerender going cause whole bunch element objects allocated entire trees potentially react needs run reconciler calculate diff two element trees single object allocation shallow compare object single key nt even detectable comparison", "d": "1/2016"}, {"body": "nt measured page components display thinking change requesting would easy low impact would save least objects per component plus unnecessary object comparisonmerge work would add something significant complex page building every little bit counts complexity scales", "d": "1/2016"}, {"body": "comparisonmerge work singlekey object happens per cost beyond negligible ideally components stateless anyway means wo nt ever state object allocated reasonably sure practical intents purposes overhead small hard time even measuring going close much lower hanging fruits worth api change evidence actually problem anybody", "d": "1/2016"}, {"body": "ca nt unseal user persist object right suggesting users never allowed add properties synthetic events", "d": "1/2016"}, {"body": "jimfb yeah obviously issue would call bad practice modify events like personally would nt mind preventing might still something want support could also clone instead persisting events number allocations would obviously affect api", "d": "1/2016"}, {"body": "would sufficient detect problem warn could check verify extraneous properties event object event handler completed right could wrap event proxy object dev mode supported firefox edge chromecanary etc warn someone mutates event persisting", "d": "1/2016"}, {"body": "would sufficient detect problem warn could check verify extraneous properties event object event handler completed right yeah fine ultimately messing pooled events really error could nt devonly bad could wrap event proxy object dev mode supported firefox edge chromecanary etc warn someone mutates event persisting tangentially could even use warn accessing event returned pool", "d": "1/2016"}, {"body": "yeah fine ultimately messing pooled events really error could nt devonly bad lots things believe errors javascript community seems like things fail soft one biggest culture shocks coming java background community believes things always fail super hard given fight need choose battles p tangentially could even use warn accessing event returned pool could anyway right since know properties exist events anyway overall agree seems like useful feature implement", "d": "1/2016"}, {"body": "lots things believe errors javascript community seems like things fail soft one biggest culture shocks coming java background community believes things always fail super hard given fight need choose battles p agree nt want perf hit production would say could anyway objectdefineproperty right since know properties exist events yeah guess probably little involved technically changes runtime behavior getterssetters instead values doubt anyone would notice still imho fine devwarnings coding practices work modern browsers ps hmm nt something like perhaps already remember spicyj working something like perhaps never shipped", "d": "1/2016"}, {"body": "jimfb good first bug", "d": "1/2016"}, {"body": "yep", "d": "1/2016"}, {"body": "work", "d": "1/2016"}, {"body": "jimfb hi trying work issue mentioned would sufficient detect problem warn could check verify extraneous properties event object event handler completed right tried figure hooks finding event handler completed navigated react source found method called firing event associated call backs however could nt able make synthetic events getting created also event handler execution complete help", "d": "1/2016"}, {"body": "current behavior expected consistent understanding react prior react would returned dom component release methods return dom node akin change refs return dom node instead wrapper component neither cases would props composite component accessible composite component concept css class since another prop invariably gets placed somewhere rendered dom component nt placed root element thus unclear would even retrieve custom composite component css class behavior extend selfdocumented method name notice distinction vs", "d": "1/2016"}, {"body": "thanks reply ghiblian expected behavior suggest docs updated specify difference expected behavior someone new react like difference nt clear let alone difference expected behavior think", "d": "1/2016"}, {"body": "think documentation pretty clear two functions fwiw allow assert props found component component happens dom component thus consistent finds dom components also fwiw could make props private ie visible outside world including test utils would", "d": "1/2016"}, {"body": "jimfb could point documentation difference dom component regular component specified might missed section think source confusion thanks", "d": "1/2016"}, {"body": "dom components anything built browser composite components anything write import", "d": "1/2016"}, {"body": "gotcha thanks", "d": "1/2016"}, {"body": "looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "1/2016"}, {"body": "guess asking whether something supported future versions maybe section docs clarify access props children nt found use case could nt supported giving parent element props although provide nice separation props example question", "d": "1/2016"}, {"body": "think nt want encourage pattern documenting also nt want prohibit people use sometimes especially cloning element personally thought top answer stack overflow pretty good", "d": "1/2016"}, {"body": "installing react github supported checkout repo build work npm team nt use want build master instructions building readme build artifacts get shipped npm", "d": "1/2016"}, {"body": "probably really long prop specified one elements passing arbitrary data key probably hash data passing limit length ensure value alphanumeric fixed react master react longer use keys generating reactid", "d": "1/2016"}, {"body": "appears working looks like usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow provide fiddle demonstrates bug core reinvestigate", "d": "1/2016"}, {"body": "hi jimfb jsfiddle code nt seem implement asked link asked question thought would bug anyways asked question stackoverflow also thanks", "d": "1/2016"}, {"body": "fiddle demonstrating stoppropagation work childparent relationship think might confused nt prevent browser responding event might able something entirely obvious logic would maybe scrolled bottom child prevent default regardless clearly usage question react bug point", "d": "1/2016"}, {"body": "saying thing stoppropagation prevent browser responding event exactly stoppropagation needed stopping think stoppropagation avoid event bubbling parent fact code remove estoppropagation really wo nt make difference think wrote code nt demonstrated anything please clarify particular usage trying things thanks jimfb", "d": "1/2016"}, {"body": "second fiddle provided use react exhibits behavior nt think react core issue follow spec nothing nothing less case think right thing behavior different chrome without react let us know reinvestigate generally nt help usage questions github since wrong medium use github issues tracking bugs react core every minute spend debugging usage questions one fewer minutes spend fixing react make better everyone generally redirect usage questions stackoverflow stackoverflow much better place questions clarifications etc sorry hope sympathize reasoning good luck project", "d": "1/2016"}, {"body": "duplicate fixed demo", "d": "1/2016"}, {"body": "actually think may missread issue trying provide fiddle far tell adding ref child stateless component work", "d": "1/2016"}, {"body": "actually right behaves properly fiddle must something code thanks", "d": "1/2016"}, {"body": "fiddle using futureexperimental version react possible issue fixed yet released either way glad hear works latest fiddle", "d": "1/2016"}, {"body": "error events bubble might attach listeners directly video amp audio elements", "d": "1/2016"}, {"body": "zpao nt bubble attaching listeners directly seems like proper way", "d": "1/2016"}, {"body": "great source events quick research shows error suspect load well probably nonbubbling basically img element try testing pointers specs whatnot would helpful", "d": "1/2016"}, {"body": "hey guys add onerror", "d": "1/2016"}, {"body": "zpao spec says follow resource selection algorithm specified also support least", "d": "1/2016"}, {"body": "fact support", "d": "1/2016"}, {"body": "gets called sounds like bug fairly skeptical actually happening provide jsfiddle using consolelogs demonstrates issue investigate", "d": "1/2016"}, {"body": "hey thanks reply jsfiddle shows talking check console see logs found today trying call library html table find table find everything else coded directly function copy content suppose return found table ended moving table message separate components call required functions include one parent component hope either confusion bug get resolved love react", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "ooops thanks lot really sorry", "d": "1/2016"}, {"body": "good find really weird would exhibit running cost something intuitively ps perhaps accessing elements linear cost", "d": "1/2016"}, {"body": "apparently cost well", "d": "1/2016"}, {"body": "testing entirely unavoidable cost near identical simply setting options pre native cost selecting option apparently reason nt see could possibly fixed cc jimfb", "d": "1/2016"}, {"body": "true browsers file tickets appropriate browsers close react issue", "d": "1/2016"}, {"body": "jimfb primarily chrome ie lot faster nt blow fast nt ff however something else fishy try locally chrome lot faster less second starts blowing using virtually code react html var select documentgetelementbyid select var html var lt html var start datenow selectinnerhtml html consolelog datenow start var l var lt l true var start datenow var options selectoptions lt optionslength var value lhasownproperty options selected value var options oselected true consolelog datenow start", "d": "1/2016"}, {"body": "thanks looking gave go firefox ran milliseconds weird might bug chrome instead react seeing chrome dev tools little purple lines recalculate style seems like possible update nodes recalculate style one time instead every node also says recalculating style elements one might solution also gives warning forced synchronous layout possible performance bottleneck relatively new hope helpful", "d": "1/2016"}, {"body": "syranide check nearly identical fiddle updates take longer fiddle", "d": "1/2016"}, {"body": "jimfb uuuuh hell thanks sorting fast makes sense take browser weirdness least react blame", "d": "1/2016"}, {"body": "liamgray also thanks yeah obviously chrome something great", "d": "1/2016"}, {"body": "yeah seeing fiddle build select defaults time react builds one chrome mac kind thing get fix within react submitting bug google fiddle show nt browser bug exactly since chrome runs raw html fast react", "d": "1/2016"}, {"body": "yeah think need submit chrome bug repro fast slow two fiddles perform virtually identical operations performance difference discovered even larger performance difference realworld react applications due bug discovered case helpful additional contextinformation liamgray want honors submit chrome bug also crosspost links two issues track progress", "d": "1/2016"}, {"body": "submitted issue thanks helping hopefully resolved quickly", "d": "1/2016"}, {"body": "great thanks going close react repository since bug chrome let googlechrome bug take", "d": "1/2016"}, {"body": "actually supported attribute form elements eg case property react updates", "d": "1/2016"}, {"body": "ok fair enough thanks", "d": "1/2016"}, {"body": "jimfb could provide code controlled input becomes uncontrolled vice versa", "d": "1/2016"}, {"body": "yangshun", "d": "1/2016"}, {"body": "run trip new react developers", "d": "1/2016"}, {"body": "jimfb might reading wrong nt make valid use although html defaultvalue really separate react defaultvalue right", "d": "1/2016"}, {"body": "syranide afaik trying fix using uncontrolled components always meaningless controlled components add unit test includes element complained hopefully gets fixed gets merged seeing pr reason created issue", "d": "1/2016"}, {"body": "jimfb ah ok see hmm nt advocate pr meant fix would nt make sense support resets hit reset rather value already anyway wrong issue discussion", "d": "1/2016"}, {"body": "provide two jsfiddles one demonstrate fast without react another demonstrate slow react", "d": "1/2016"}, {"body": "response two weeks reexamine issue op demo problem", "d": "1/2016"}, {"body": "sorry busy days provide jsfiddles soon possible could simply describe test methodjust really easy example like alert show slow touch div element screen browser like chrome perform normally", "d": "1/2016"}, {"body": "nt think pass second argument anymore react master", "d": "1/2016"}, {"body": "wonderful thank", "d": "1/2016"}, {"body": "bug intended behaviour", "d": "1/2016"}, {"body": "looking", "d": "1/2016"}, {"body": "thanks yangshun andrewgrewell tnrich said correct read docs forms although probably initially prefer uncontrolled inputs use react discover controlled inputs really better imho", "d": "1/2016"}, {"body": "awesome thanks everyone educational link", "d": "1/2016"}, {"body": "want already syncing service setup add react like mins biggest part figuring want translations live", "d": "1/2016"}, {"body": "awesome might take right live alongside english eg might change ever get back differently think need little bit playing see best us", "d": "1/2016"}, {"body": "sure thing need bot push access repo order update understand hesitant though", "d": "1/2016"}, {"body": "actually normalization nt getting differences platform shown table looks like older browsers return newer ones return looks like firefox ieedge claim support draft spec would say might reliable thing normalization spec expecting tldr expected also cc syranide case wrong", "d": "1/2016"}, {"body": "relevant section current draft spec holds key value key pressed value printed representation must nonempty unicode character string value control key printed representation must one key values defined key values set implementations unable identify key must use key value case spacebar printed representation value", "d": "1/2016"}, {"body": "fair enough normal letter characters testing coming though spec says makes look like pressing letter set eventkey", "d": "1/2016"}, {"body": "zpao correct old draft yaycmyk impossible polyfill characters virtual key codes reported way reliably translate virtual key code character polyfill possible ie mostly iirc however polyfill characters report character codes spent significant time polyfill far aware time everything reliably reported except esoteric keys worth added bytes", "d": "1/2016"}, {"body": "little surprised works fine without react fails react rogierschouten syranide spicyj thoughts", "d": "1/2016"}, {"body": "jimfb played around little bit earlier intuitively probably specific events used react chrome probably broken setting value events anyway rogierschouten definitely want defer setting value break selection introduces subtle issues controlled inputs work idea setting value would normally become actually update value native behavior kept selection intact deviate react update value knowledge selection defer effectively break explicitly tell restore previous value later set new information selection", "d": "1/2016"}, {"body": "syranide totally agree synchronous rock hard place architecturally speaking typical flux architecture synchronous change events suffers maintainability issues larger systems store interdependencies queueing events solves lot would ideally like flush event queue end every dom event effect making value updates synchronous hoping hook react accomplish far nt worked second bet animation frame approach actually flush events every dom event handler", "d": "1/2016"}, {"body": "help", "d": "1/2016"}, {"body": "yangshun may try soon thanks", "d": "1/2016"}, {"body": "good question going redirect stack overflow discussreactjsorg hard enough time keeping actual issues prs really try keep github focused bugsimprovements usage", "d": "1/2016"}, {"body": "unfortunately testutilssimulate behave identically browsers creates event fired react event system like simulate real browser would", "d": "1/2016"}, {"body": "try use github issues tracking bugs react core reason going close issue feel free continue conversation thread post another site feel like stackoverflow post exact text error message people search tagged react babel likely findable github posting would recommendation", "d": "1/2016"}, {"body": "version react using master branch mobile phone android using browser version create jsfiddle demonstrates issue", "d": "1/2016"}, {"body": "link looking looks correct", "d": "1/2016"}, {"body": "readme like said need cherrypick couple commits master including change readme shortly", "d": "1/2016"}, {"body": "guess see confusion readme starter kit website references readme repo referencing starter kit regardless cherrypicked commits master date", "d": "1/2016"}, {"body": "zpao", "d": "1/2016"}, {"body": "thanks post discussionsposts better held sites like facebook irc medium discussreactjsorg try use github issues tracking bugs react core since nt actually bug react core going close issue feel free continue conversation thread move one mediums", "d": "1/2016"}, {"body": "right thanks showing appropriate places discuss jimfb know opened new thread identical post find issue interesting please join thread thank", "d": "1/2016"}, {"body": "nevermind right dangerouslysetinnerhtml syntax", "d": "1/2016"}, {"body": "nt think synthetic wrapper target real dom node right surprised behaves differently unless pointing different elements jsfiddle", "d": "1/2016"}, {"body": "cc spicyj syranide provide synthetic events", "d": "1/2016"}, {"body": "probably match always nt sounds like bug support synthetic events ieism", "d": "1/2016"}, {"body": "spicyj ic ieism also works chrome threw travisbloom provide jsfiddle demonstrates", "d": "1/2016"}, {"body": "jimfb work right ca nt check windows testing laptop third consolelog return undefined select option", "d": "1/2016"}, {"body": "ok ran fiddle best tell dom node looks like longer supports select dom node odd appears supported edge life part spec even nt think want polyfilling actual dom nodes anyway think nothing synthetic events problem occurring browser reads directly dom node unless missing something action necessary", "d": "1/2016"}, {"body": "sounds like want", "d": "1/2016"}, {"body": "known issue solution create elements render lot bunch work outside component bad practice per blog post expected move towards centralized renderers solve scaled problem would move component create viable scenario concerned receive component would either use global mutable state render bad practice breaks pure contract together manually hoisted element common b use local mutable component state frowned upon put react elements state bad practice factors make unlikely scenario years nt caused outrage known issues time important default optimization", "d": "1/2016"}, {"body": "yeah probably nonissue b idk descriptor caching elements take mutable data really nt inconceivable", "d": "1/2016"}, {"body": "brigand majority components purerendermixinlike behavior true assume immutable data true general immutable data great generally recommend using immutable data possible largely makes relatively trivial implement unlike rust javascript language assumes mutability default ca nt presume user immutable data source anyway said idea discussed considered however think become convinced correct solution importrequire purerender function use example pattern fully generalizable could use function want purerender already supported today nt magical nt magical important point imo", "d": "1/2016"}, {"body": "jimfb thoughts simple function components regard", "d": "1/2016"}, {"body": "cc sebmarkbage know talked past nt see anything reactfuture amp sure come", "d": "1/2016"}, {"body": "brigand take generalized path perhaps stateless function would participate lifecycles honestly nt top priority list people always use classes need access lifecycles trivial components purerender actually detrimental performance end spending time shallow compare expensive render ultimately update component anyway zpao came well inperson design discussions sebastian", "d": "1/2016"}, {"body": "alternatives flag existing behavior proposal flag would nt guarantee bailout react allowed us heuristic compare problem pure render nt actually assume anything render renders idempotent says render becomes pure due properties parent components component kind fragile start system effectively subscribing notion immutable data subtle breaks b alternative would flag provider props ie parent would declare output render immutable therefore transitive child safely bail children track flag reconciliation c another alternative thought recently always render everything eventually basically idea always bail equality checks spare cycles keep rendering branches previously cut means immutable data becomes preferred fast option however mutable data still automatically eventually consistent screw big deal question many intermediate apis release get go first pick name b know naming makes sense", "d": "1/2016"}, {"body": "sebmarkbage flagging props pure raises another interesting question components need know able pass likely pass props without explicit knowledge props pure long passing descendants also props flagged nonpure essentially become recurring pattern theory seems perhaps mean therefore transitive child safely bail children track flag reconciliation", "d": "1/2016"}, {"body": "known issue moment sorry see issue browser builds npm build due way things packaged ship likely", "d": "1/2016"}, {"body": "though one browser needs specific version style seems like basic browser detect somewhere code using appropriate prefix necessary better solution", "d": "1/2016"}, {"body": "sure one flawed browser detection may might surmise request nt think best approach would let browser make choices alacss rock jan pm evan jacobs notifications githubcom wrote though one browser needs specific version prop seems like basic browser detect somewhere code using appropriate prefix necessary better solution reply email directly view github", "d": "1/2016"}, {"body": "yaycmyk browser detection would nt solution besides fact browser detection nt done unless way nature css would normally specify style like browser picks first one work would make much easier reactjs component inline styles", "d": "1/2016"}, {"body": "one fundamental issue react needs update styles using usual css trickery trying achieve nt think anyone denying want bad thing far trivial actually accomplish sustainable fashion things considered edit includes updates serverrendering", "d": "1/2016"}, {"body": "thanks clarification cmpis syranide hear deal breaker indeed nt realize react nodestylekey value thingie thought parsetime kind thing said must another way accomplish alternative think would addremove classes jquery fashion ouch", "d": "1/2016"}, {"body": "mentioned browser detection use css classes react nt trying complete solution problem want break complicated inlinestyles processors actually generate stylesheets could also work see radium example sure mean manually addingremoving classes able write inline let react handle like would styles eg", "d": "1/2016"}, {"body": "yea come think value people powerful object spread see push api people might familiar working mongo agree people nt useful nt shipped react though somebody came better name split tomorrow filed long time ago let sit closing somebody oss wanted take ship version fine came another issue ca nt find atm still use places internally ca nt kill completely without work", "d": "1/2016"}, {"body": "sound like usage questions rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "1/2016"}, {"body": "okay logs react master \u03bb npm install react npm warn packagejson issue repository field npm warn packagejson issue license field react nodemodulesreact envify jstransform fbjs whatwgfetch uaparserjs looseenvify promise corejs master \u03bb npm test issue test mocha compilers js babelregister indexjs react shallow render issues update state promise resolved update state immediately passing failing react shallow render issues update state immediately typeerror read property currentelement null object object reactcompositecomponentmixinupdaterenderedcomponent object object reactcompositecomponentmixinperformcomponentupdate object object reactcompositecomponentmixinupdatecomponent object object wrapper updatecomponent object object reactcompositecomponentmixinperformupdateifnecessary objectreactreconcilerperformupdateifnecessary runbatchedupdates reactreconciletransactionmixinperform reactupdatesflushtransactionmixinperform reactupdatesflushtransactionassignperform objectflushbatchedupdates objectwrapper flushbatchedupdates reactdefaultbatchingstrategytransactionmixincloseall reactdefaultbatchingstrategytransactionmixinperform objectreactdefaultbatchingstrategybatchedupdates objectenqueueupdate enqueueupdate objectreactupdatequeueenqueuesetstate testcomponentreactcomponentsetstate testcomponentupdate testcomponentcomponentwillmount object object reactcompositecomponentmixinmountcomponent object object wrapper mountcomponent object object reactshallowrendererrender object object reactshallowrendererrender context npm err test failed see details react master \u03bb npm install react npm warn packagejson issue repository field npm warn packagejson issue license field react nodemodulesreact envify jstransform fbjs whatwgfetch uaparserjs looseenvify promise corejs master \u03bb npm test issue test mocha compilers js babelregister indexjs react shallow render issues update state promise resolved update state immediately passing failing react shallow render issues update state immediately typeerror read property currentelement null object object reactcompositecomponentmixinupdaterenderedcomponent object object reactcompositecomponentmixinperformcomponentupdate object object reactcompositecomponentmixinupdatecomponent object object wrapper updatecomponent object object reactcompositecomponentmixinperformupdateifnecessary objectreactreconcilerperformupdateifnecessary runbatchedupdates reactreconciletransactionmixinperform reactupdatesflushtransactionmixinperform reactupdatesflushtransactionassignperform objectflushbatchedupdates objectwrapper flushbatchedupdates reactdefaultbatchingstrategytransactionmixincloseall reactdefaultbatchingstrategytransactionmixinperform objectreactdefaultbatchingstrategybatchedupdates objectenqueueupdate enqueueupdate objectreactupdatequeueenqueuesetstate testcomponentreactcomponentsetstate testcomponentupdate testcomponentcomponentwillmount object object reactcompositecomponentmixinmountcomponent object object wrapper mountcomponent object object reactshallowrendererrender object object reactshallowrendererrender context npm err test failed see details react master \u03bb npm install react npm warn packagejson issue repository field npm warn packagejson issue license field react nodemodulesreact envify jstransform fbjs whatwgfetch uaparserjs looseenvify promise corejs master \u03bb npm test issue test mocha compilers js babelregister indexjs react shallow render issues update state promise resolved update state immediately passing failing react shallow render issues update state promise resolved react shallow render issues update state immediately referenceerror document defined getactiveelement reactreconciletransactionreactinputselectiongetselectioninformation reactreconciletransactionmixininitializeall reactreconciletransactionmixinperform reactupdatesflushtransactionmixinperform reactupdatesflushtransactionassignperform objectflushbatchedupdates objectwrapper flushbatchedupdates reactdefaultbatchingstrategytransactionmixincloseall reactdefaultbatchingstrategytransactionmixinperform objectreactdefaultbatchingstrategybatchedupdates objectenqueueupdate enqueueupdate objectreactupdatequeueenqueuesetstate testcomponentreactcomponentsetstate testcomponentupdate testcomponentcomponentwillmount object object reactcompositecomponentmixinmountcomponent object object wrapper mountcomponent object object reactshallowrendererrender object object reactshallowrendererrender context npm err test failed see details see first test promise works second test known issue fixed pr merged guess happens tests become broken", "d": "1/2016"}, {"body": "also see error message test different", "d": "1/2016"}, {"body": "might care sync update test well know practice bet someone else get broken tests upgrade", "d": "1/2016"}, {"body": "case using version range got red build soon newest version released", "d": "1/2016"}, {"body": "looking changes react versions think problem used", "d": "1/2016"}, {"body": "usage question yea getting fixed fbjs publish something", "d": "1/2016"}, {"body": "potentially related confirm change fixed error landed master month ago idea nt peppered", "d": "1/2016"}, {"body": "saw alexeyraspopov commented also confirmed code present present master", "d": "1/2016"}, {"body": "mikemcelroy nt related merged release issue accidental change dependency got picked fix deciding right way version fix", "d": "1/2016"}, {"body": "shipped get us back behavior", "d": "1/2016"}, {"body": "master \u03bb npm install save react npm warn packagejson issue repository field npm warn packagejson issue license field react nodemodulesreact envify jstransform fbjs whatwgfetch looseenvify uaparserjs promise corejs master \u03bb npm test issue test mocha compilers js babelregister indexjs react shallow render issues update state promise resolved update state immediately passing failing react shallow render issues update state immediately typeerror read property currentelement null object object reactcompositecomponentmixinupdaterenderedcomponent object object reactcompositecomponentmixinperformcomponentupdate object object reactcompositecomponentmixinupdatecomponent object object wrapper updatecomponent object object reactcompositecomponentmixinperformupdateifnecessary objectreactreconcilerperformupdateifnecessary runbatchedupdates reactreconciletransactionmixinperform reactupdatesflushtransactionmixinperform reactupdatesflushtransactionassignperform objectflushbatchedupdates objectwrapper flushbatchedupdates reactdefaultbatchingstrategytransactionmixincloseall reactdefaultbatchingstrategytransactionmixinperform objectreactdefaultbatchingstrategybatchedupdates objectenqueueupdate enqueueupdate objectreactupdatequeueenqueuesetstate testcomponentreactcomponentsetstate testcomponentupdate testcomponentcomponentwillmount object object reactcompositecomponentmixinmountcomponent object object wrapper mountcomponent object object reactshallowrendererrender object object reactshallowrendererrender context npm err test failed see details sounds right particular bug", "d": "1/2016"}, {"body": "alexeyraspopov kind error get nt apply version react could try applying see works", "d": "1/2016"}, {"body": "mikemcelroy understood nt included see tests pr really fixes problem fix needs included next release", "d": "1/2016"}, {"body": "sure fixed since team create branch based", "d": "1/2016"}, {"body": "eta particular reason ca nt moved", "d": "1/2016"}, {"body": "ship ready probably month shipped nobody thought asked bug really broken solves rest issue concerns please discuss conversation correlated", "d": "1/2016"}, {"body": "nt meant browser would far side effects go even nt actually work want think create actual event dispatches internal system nt think bug per se misconception scope test utils may want fire event test", "d": "1/2016"}, {"body": "ok thanks clarification", "d": "1/2016"}, {"body": "provide simple jsfiddle demonstrates issue", "d": "1/2016"}, {"body": "jimfb love get little complicated since mixing revealjs absolutely related issue considered dont know provide clean simple issue actually", "d": "1/2016"}, {"body": "might case using array indices keys comes back bite since note actually stable loops might assigning key different slide next pass confuse react update optimizations rather working exactly like supposed confusing output use id something instead array index might help narrow issue continues", "d": "1/2016"}, {"body": "zpao said inspired lot thanks seeing sections totally react views idea work arount yet", "d": "1/2016"}, {"body": "hack seems ok try makes html ugly still problems states update considered worse concat html string firstly inject one time lose performance react diff", "d": "1/2016"}, {"body": "nan fine weird value pass probably handle explicitly like props", "d": "1/2016"}, {"body": "per team discussion offline warn initial render nan indicates error also zpao mentioned avoid mutation warning update", "d": "1/2016"}, {"body": "submitted fix thanks", "d": "1/2016"}, {"body": "actually mutating creating new passing one fact apparent reason work", "d": "1/2016"}, {"body": "see another discussion slightly different angle namely sebmarkbage first comment initialization vs updates note pr merged backed discussion like use default values props use api", "d": "1/2016"}, {"body": "zpao guess still little unclear saying constructor intentionally different value thanks advance", "d": "1/2016"}, {"body": "dbkaplun correct passed constructor convince easy access within constructor component props controlled react constructor reasons discussed using modern release react get warning passed modified props", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "done thanks catching", "d": "1/2016"}, {"body": "please keep github bugs react places posting related projects like", "d": "1/2016"}, {"body": "oh sorry", "d": "1/2016"}, {"body": "react question general js question encourage learn js modules relates scope trying use modules tldr module new scope nothing available file available testjs unless import", "d": "1/2016"}, {"body": "thank zpao", "d": "1/2016"}, {"body": "appears calling part react dom think root problem erroneous dependency whereby relying global state within core renderer ultimately rendering dom therefore calling dom code renderer using things think sebmarkbage would say cc also cc spicyj comments", "d": "1/2016"}, {"body": "true ca nt currently two renderers sharing core react modules global state reactinjection nothing would like resolve longerterm either encouraging flat builds renderer copy react bundled perhaps changing react core make modules instantiable store global state may able work around problem loading two completely independent copies react hope work though nt probably wo nt making significant changes support alternate backends active priority us right time constraints hopefully support better one day though", "d": "1/2016"}, {"body": "ickata use babel first example use example transpile jsx least different nt explanation problem", "d": "1/2016"}, {"body": "second example use jsxtransformer distributed react also stated official documentation need include source code order transpile jsx markup version jsxtransformer distributed official download page moreover official documentation stated use babel transpile jsx markup trace old jsxtransformer answer question rickbeerendonk", "d": "1/2016"}, {"body": "ickata use two different tools different behavior might caused difference tools render directly documentbody recommended scripts part body jsx transpiled js", "d": "1/2016"}, {"body": "look rickbeerendonk using tool specified documentation one tool jsx transpile guys better list official documentation pros amp cons differences scripts part body behavior use dedicated container rendering used simplicity guess jsx transpiled ondomready html html hello react", "d": "1/2016"}, {"body": "hi ickata try reproduce like used babel jsx transpilers consumer aware internals differences hope help btw part react team work facebook", "d": "1/2016"}, {"body": "oh sorry thought part dev team", "d": "1/2016"}, {"body": "issue babel report ickata identify core members collaborator owner label top right corner message", "d": "1/2016"}, {"body": "babel removed support browser version recently doubt support unless changed mind try currently recommend though nt script tag stuff looking exists nt anything us outside linked issue going close sorry issues recommendation really rely inbrowser transform anything beyond quick prototype handy anything serious require build step nt sending babel js transform run", "d": "1/2016"}, {"body": "fwiw think handled correctly unofficialunsupported transform use testing locally thought share", "d": "1/2016"}, {"body": "jimfb also work", "d": "1/2016"}, {"body": "ickata appears work demo shows otherwise", "d": "1/2016"}, {"body": "ickata btw made tool use proptotype jsx include jsx files normal scripts nt support inline scripts though", "d": "1/2016"}, {"body": "jimfb go unfortunately need something inline external jsx scripts need executed order", "d": "1/2016"}, {"body": "ickata execution order correct problem scoping use instead indicate want variable accessible global scope ie outside local file let know nt work", "d": "1/2016"}, {"body": "jimfb think used work like accessible outside file unless protected inside function think something nt right script original source straight babelbrowser", "d": "1/2016"}, {"body": "tested quickly execution order correct transformed script nt run right read expected scope nt available outside file boundary going suggest anybody probably fix work review since probably going support way time", "d": "1/2016"}, {"body": "speaking react team personally enjoy using disposables concept borrowed rx composing cleanup logic js import disposable compositedisposable disposables class mycomponent extends component constructor props super props thisdisposable new compositedisposable dosomething const xhr doxhr thisdisposableadd new disposable gt xhrabort dosomethingelse const xhr doanotherxhr thisdisposableadd new disposable gt xhrabort componentwillunmount thisdisposabledispose also lets switch disposables go killing old one set new one useful disposing resources response prop changes", "d": "1/2016"}, {"body": "time even keep array fill functions called componentwillunmount using allows fairly easy add dynamic cleanup code keep close code starts listener pretty much dan example nt use separate library may easier grasp used disposables although different know trying help class mycomponent extends component constructor props super props thisdisposable dosomething const xhr doxhr thisdisposablepush gt xhrabort dosomethingelse const xhr doanotherxhr thisdisposablepush gt xhrabort componentwillunmount thisdisposablesforeach fn gt fn", "d": "1/2016"}, {"body": "dralletje side note probably want complexity disposable xhr disposable closure going keep completed xhr instance around component unmounted since xhr disposable removed dereferenced finished", "d": "1/2016"}, {"body": "dantman stateofart way handle disposables know used make alternative using disposable library think time xhr objects whatever object memory wo nt result even minor problem", "d": "1/2016"}, {"body": "dralletje depends iirc xhr object contains reference whole response body maybe partial duplicate case response xml json theory component makes pile periodic http requests say polling data updates accepting lot user interactions array holding references combined uncompressed content length every single xhr request component ever made", "d": "1/2016"}, {"body": "marker tag also misses", "d": "1/2016"}, {"body": "attributes passed svg next release landed wo nt adding anymore individual attributes", "d": "1/2016"}, {"body": "next release sat jan paul shannessy notifications githubcom wrote closed reply email directly view github regards tushar mathur wwwtusharmcom", "d": "1/2016"}, {"body": "ship ready rough estimate probably january", "d": "1/2016"}, {"body": "alternative drawing graphs svg using react simply impossible right", "d": "1/2016"}, {"body": "using seems pretty dangerous", "d": "1/2016"}, {"body": "manually calling setattribute svg node alternatives escape hatches obviously unfortunate situation better soon", "d": "1/2016"}, {"body": "first need decide actually needs get done sebmarkbage thoughts best practices toast whole example nt seem like super valuable page especially given shortcomings mentioned", "d": "1/2016"}, {"body": "fwiw documentation page hints interact server beginners reasonable pattern adopt learning flux lot value", "d": "1/2016"}, {"body": "yea keep entry level example sometimes difficult strike balance best practice easy examples especially since fairly complex thing get right atm imo fix example abort unmount", "d": "1/2016"}, {"body": "components ajax bit antipattern anyway use something like flux ensure consistency across page deduplicate requests data may true big apps beginners repeatedly expressed concerns jump overengineered solutions want talk api show list things exercise unless see component ajax request docs feel use flux complex data fetching solution nt quite true useful show least possible hmkay official docs", "d": "1/2016"}, {"body": "would antipattern ajax data gets shown inside component live global application state data relevant component children rest app ca nt considered application state nt component able fetch store", "d": "1/2016"}, {"body": "irfuel approach nt scalable several reasons thousand different components ca nt reasonably making thousand different requests need implement batching sort component multiple times want share single value memory avoid duplicate requests consistency data mutable etc also difficult subscribe updates case underlying resource server changes would need hold open connection every component instead single shared connection sideways data loading makes difficult developers reason application since components longer pure function propsstate reading outside data source list goes truncate interest time bottom line flux exists reason bad style component make ajax request directly usage question interested topic feel free discuss appropriate usagequestion medium like stackoverflow", "d": "1/2016"}, {"body": "course advocating bypassing state props entirely favour ajax calls issue going extreme state object littered kinds variables make sense component class app hundreds end state containing hundreds properties small scope even life time imagine rendering popup shows useful information registering account really want application state property info inside popup polluting code used one time entire lifecycle app popup spend time simply glad discuss usage questions especially practical examples apps glad discuss discover best practices however want github clearly bugs stackoverflow technical issues openended questions answers depend people opinions technically correct solution given problem closed quite quickly moderators channel would best kind discussion", "d": "1/2016"}, {"body": "irfuel recommend stackoverflow discussreactjsorg reactifluxcom quora order", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "pretty sure expected behavior unless missing something event fires event trapped react react calls event handler multiple setstates within cycle batched together react stack able process eventhandler completed invoked result react stack batch completes soon finishes ie effectively executed synchronously talks using similar solution like perform operations asynchronously part much wider conversation new reconciler actionable shortterm task issue going close", "d": "1/2016"}, {"body": "yes state updates event handlers batched together", "d": "1/2016"}, {"body": "info high batched updates setstates calls location event handlers priority list", "d": "1/2016"}, {"body": "high talks might happen part reconciler rewrite nothing planned short term", "d": "1/2016"}, {"body": "ok thanks", "d": "1/2016"}, {"body": "perfect example working correctly added console log statement every lifecycle method child tested following jsx markup import carousel uicomponentscarousel const log function e args consolelog econstructorname etype edetail e args console output initial load order events match order elements jsx however look closely notice triggers level children none first level children trigger output cycle next item list syntheticmouseevent click object dispatchconfig object dispatchmarker nativeevent click target currenttarget type click eventphase bubbles true cancelable true timestamp array itemlist shouldcomponentupdate itemlist componentwillupdate item componentwillreceiveprops item shouldcomponentupdate item componentwillupdate item componentwillreceiveprops item shouldcomponentupdate item componentwillupdate item componentwillmount tablist shouldcomponentupdate tablist componentwillupdate tab componentwillreceiveprops tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab shouldcomponentupdate tab componentwillupdate next shouldcomponentupdate next componentwillupdate prev shouldcomponentupdate prev componentwillupdate start shouldcomponentupdate start componentwillupdate stop shouldcomponentupdate stop componentwillupdate item componentdidupdate item componentdidmount itemlist componentdidupdate tab componentdidupdate tablist componentdidupdate next componentdidupdate prev componentdidupdate start componentdidupdate stop componentdidupdate carousel cycling carousel cycled thing happens called level children level try debug really sure begin", "d": "1/2016"}, {"body": "tested using pull request output cycle next item list syntheticmouseevent click object dispatchconfig object dispatchmarker nativeevent click target currenttarget type click eventphase bubbles true cancelable true timestamp array itemlist componentwillreceivecontext itemlist shouldcomponentupdate itemlist componentwillupdate item componentwillreceiveprops item componentwillreceivecontext item shouldcomponentupdate item componentwillupdate item componentwillreceiveprops item componentwillreceivecontext item shouldcomponentupdate item componentwillupdate item componentwillmount tablist componentwillreceivecontext tablist shouldcomponentupdate tablist componentwillupdate tab componentwillreceiveprops tab componentwillreceivecontext tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab componentwillreceivecontext tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab componentwillreceivecontext tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab componentwillreceivecontext tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab componentwillreceivecontext tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab componentwillreceivecontext tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab componentwillreceivecontext tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab componentwillreceivecontext tab shouldcomponentupdate tab componentwillupdate tab componentwillreceiveprops tab componentwillreceivecontext tab shouldcomponentupdate tab componentwillupdate next componentwillreceivecontext next shouldcomponentupdate next componentwillupdate prev componentwillreceivecontext prev shouldcomponentupdate prev componentwillupdate start componentwillreceivecontext start shouldcomponentupdate start componentwillupdate stop componentwillreceivecontext stop shouldcomponentupdate stop componentwillupdate item componentdidupdate item componentdidmount itemlist componentdidupdate tab componentdidupdate tablist componentdidupdate next componentdidupdate prev componentdidupdate start componentdidupdate stop componentdidupdate carousel cycling carousel cycled far works correctly still trying find nt", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "changed call windowopen open instead still nt work sure related markup inside popup first render", "d": "1/2016"}, {"body": "actually already hit chromium", "d": "1/2016"}, {"body": "opinions sebmarkbage inclined live bit longer let versions get improve box especially since chrome update uptake good", "d": "1/2016"}, {"body": "agree zpao run benchmark looks like native bind slower custom implementations canary difference native faster custom faster realistically time get door chromes fast anyway wo nt matter", "d": "1/2016"}, {"body": "reason us use native implementation incentive browsers work sacrifice little perf short term get long term greater wins case nt expect matter much since autobound methods mostly callbacks single action case matters lot call helper lot really using local module scope function instead call much interesting optimize call produced function", "d": "1/2016"}, {"body": "hi interested working looking forward contribute kindly show way thanks advance", "d": "1/2016"}, {"body": "alayek take look give good start good idea would looking", "d": "1/2016"}, {"body": "thanks jimfb checking right away", "d": "1/2016"}, {"body": "jimfb taken look pull request associated code review comments seems warnonce policy required implemented sure fully understand module achieves reading per code review comments using urls instead stackoverflow urls comments also mentioned pr might break test cases sure edge cases feel like could use help understanding instead using github issue comments possible use chatplatform irc slack room gitter", "d": "1/2016"}, {"body": "alayek module achieves deduplication setting boolean already warned comments breaking tests referring failing unit tests run verify everything working pushing changes many places discuss including irc channel andor reactiflux also github issues core team predominantly uses well several channels community pretty big nothing quite good reading code github issues imho", "d": "1/2016"}, {"body": "sorry away ready reviewed", "d": "1/2016"}, {"body": "gaearon said true child mount events fire parents lifecycle seen", "d": "1/2016"}, {"body": "yeah understand thank", "d": "1/2016"}, {"body": "problem element", "d": "1/2016"}, {"body": "maxmykhailenko provide jsfiddle demonstrates issue appears work fiddle", "d": "1/2016"}, {"body": "feel free join us discord see want discuss potential implementations", "d": "1/2016"}, {"body": "reference currently use karma browserify babelify plugins jasmine enzyme run react unit tests solves bundling process source tests files left updating jest work browser implementation found", "d": "1/2016"}, {"body": "test components listening fluxbased stores without componentdidmount really like use approach test components also use flux tests quite useless use componentdidmount order listener store", "d": "1/2016"}, {"body": "interesting read assumed functional components would pure render default seeing syntax reading blog post", "d": "1/2016"}, {"body": "going close since mostly discussion thread nothing actionable", "d": "1/2016"}, {"body": "hi action think memoization default stateless functions react example manually notice diffs consolelog", "d": "1/2016"}, {"body": "gaearon correct duplicate", "d": "1/2016"}, {"body": "correct wrong currently works way method triggers props changed seen line seems unnecessary see following lines generated passed still required either statepropscontext may changed however could logic additional check whether call could test current pull request", "d": "1/2016"}, {"body": "milesj incorrect guarantee props changed already mentioned diff volfied approach seems pretty reasonable background understand little bit boilerplate order two lifecycles switched users would opposite problem calculating new state need know state changed order decide going update even worse might return false component might still need know new props save internal state therefore order could nt switched original question cleaner way approaching resources wasted unnecessary state calculations nt know cleaner way hand perhaps someone else ideas solution seemed fine tangential note keep mind ideally state function props try keep separate independent info keeping propsstate separate also lifecycle methods intended escape hatch rather recurring pattern code question usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason issue closed welcomed continue conversation move site intended sort questions like stackoverflow anyway hopefully find info useful happy coding", "d": "1/2016"}, {"body": "right right specific reason called even though nothing changed seems rather odd related note docs probably changed invoked component receiving new props bit misleading", "d": "1/2016"}, {"body": "right right specific reason componentwillreceiveprops called even though nothing changed seems rather odd expensive deep compare every time easiest way call every time", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "found issue latest chrome work around", "d": "1/2016"}, {"body": "like name method component course could name something else seems odd react continue warn since perfectly valid method name class", "d": "1/2016"}, {"body": "aldendaniels warn time mistake user upgrading class class benefit warning greatly outweighs downside reserving one function name create class officially deprecatedgone nearterm future unlock function name", "d": "1/2016"}, {"body": "jimfb idea warned constructor finished exist instance satisfy problems", "d": "1/2016"}, {"body": "syranide sure super low priority low sure deserves open issue someone feels strongly wants submit pr nt see reason accept solution side note using inheritance within react component hierarchy bit antipattern anyway nt directly extend ie extend base implementation calls think linters wo nt give warnings bugs also sure wise reusing names lifecycles sounds like nt technical reason would nt work fine allowing", "d": "1/2016"}, {"body": "using inheritance within react component hierarchy bit antipattern anyway jimfb agreed personally see sense allowing constructor would allow reset uncontrolled components something similar nt really care much either feel like bad uses", "d": "1/2016"}, {"body": "issue appears user duplicate copy react mentioned url given warning comments days closing", "d": "1/2016"}, {"body": "kind harsh close week inactivity end holiday week especially since comment answer knew might multiple react asked reliable way find anyway tried saw build output two bundled js files webpack produces reactjs even one react dependency listed npm l find normaly first bundle provides react second one alias react module webpack configuration second module apparently ignored webpack building module end second react loaded start second module use webpack tricky configurations lead duplicated files build outputs even npm dependecies sane search build output find", "d": "1/2016"}, {"body": "kind harsh close week inactivity end holiday week always happy reopen points legitimate bug unfortunately post nt offer specific instructions reproduce actionable closing nonactionable issues helps put focus issues actionable find issue caused duplicate react please let us know provide way reproduce asked reliable way find usually grep build output repeated several times probably two reacts thanks publishing details investigation", "d": "1/2016"}, {"body": "add handler", "d": "1/2016"}, {"body": "solved react still need manually change fbjs getmarkupwrap make work", "d": "1/2016"}, {"body": "point releases small bug fixes react fix", "d": "1/2016"}, {"body": "wbabel works presume babel locates preset cwd installed package thanks", "d": "1/2016"}, {"body": "instructions example updated nt update starter kit updated pr another release get updated thanks reminder", "d": "1/2016"}, {"body": "andersekdahl mentioned able include individual addons configuration correct addonscomponentswhatever share single copy react case would run issue components use also depend react andersekdahl also mentioned temporary configuration addons completely pulled addons frequently need interact react many may retain references react imported components references react response month going close additional details provide reinvestigate", "d": "1/2016"}, {"body": "sorry responding mange solve recently bundling addons use react bundle critical anymore case would run issue components use also depend react components easily extracted addons require specific file paths really imported manner anyone else paths predictable without insight react code temporary configuration addons completely pulled addons frequently need interact react many may retain references react temporary like react adopted many libs critical speed progress strategy taken nt like decided go certain way complete act already done red error messages old way think bad consequences hard predict hope consider faced similar decision future", "d": "1/2016"}, {"body": "theludd maintain backwards compatibility major versions migration became possible likely become required releases tend occur roughly every sixish months idea always fix red warnings able safely migrate next version strategy take breaking changes", "d": "1/2016"}, {"body": "still experiencing issue internally create internal task details repro steps assign oncall cc react team internal configuration bit different nt want discuss internal codedetailsconfigurations github going close help debug using internal tools still running problems", "d": "1/2016"}, {"body": "documentation bit corrected link inbrowser tool leads deprecated also alternative babelbrowser works lot like used important lot users able develop various machinesenv used great tool development period nt understand use babelstandalone tool appjs file bunch react classes jsx alternative right using old browserjs", "d": "1/2016"}, {"body": "otoinsa unofficialunsupported use testing locally thought share works pretty well needs", "d": "1/2016"}, {"body": "thank jimfb helpful test first chance tommorow think essential addition dev workflow", "d": "1/2016"}, {"body": "andrewheppner generally recommend testing end behaviors internals button gets clicked call callback handler test pass callback assert gets called function getting called test result button click happened verify categories cleared generally imho nt testing something nt observable outside unit otherwise implementation test instead unit test anyway far tell usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core also activity thread month reasons going close feel free continue discussion move another site like stackoverflow", "d": "1/2016"}, {"body": "also ran error trying update codebase make use serverside rendering counter using initialised constructor reason ended trying call trouble tracking problem error pretty confusing case sort warning called would certainly help pinpoint actual problem feel like relatively easy mistake make us new ssr", "d": "1/2016"}, {"body": "dev mode could mark component rendered using ssr ever called component print intelligent warning", "d": "1/2016"}, {"body": "hello first attempts dive react sources took look similar issues still wonder reactenough way concerned condition particular right track convenient way mark amp check thanks", "d": "1/2016"}, {"body": "mdolbin looks reasonable", "d": "1/2016"}, {"body": "zpao interested contributing react issue still needs worked", "d": "1/2016"}, {"body": "iampeekay looks like one nearly done looking good gettingstarted issue relatively easy nt think anyone started yet", "d": "1/2016"}, {"body": "jimfb thanks take look", "d": "1/2016"}, {"body": "since new react reading docs throw load initial data via ajax tip uses website disagrees website would great see complete tip cancel initial load maybe using istarkov pattern", "d": "1/2016"}, {"body": "dtertman fixed online docs get cherrypicked", "d": "1/2016"}, {"body": "jimfb thanks sure missed search", "d": "1/2016"}, {"body": "found page since also cleanly solves vendor prefixing variety edge cases want render inline css serverside object representation solve issue speaking wrong direction think like standing complex ecosystem browser vendors way anything like react", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "current behavior required contexttypes optional proptypes currently expecteddesired behavior reasons listed result nt anything actionable issue moment feel free continue discussion thread reopen thinking matter changes substantially", "d": "1/2016"}, {"body": "ok mostly discussion thread since sebastian agreement within constructor probably something want support going close issue per feel free continue discussion reopen thinking matter changes substantially", "d": "1/2016"}, {"body": "hit similar issue around getting prop type validation warnings mocha reran tests file system changes resetting state would fine solution would strongly prefer get programatic access prop type validation failures real thing believe glenjamin want write tests assert prop type validations failed ability clear still would mess find validation errors", "d": "1/2016"}, {"body": "nt work using", "d": "1/2016"}, {"body": "think fixed different variant", "d": "1/2016"}, {"body": "weirdly enough exact issue upgrade onclicks stopped working luciofranco could share issue case", "d": "1/2016"}, {"body": "madrabbit problem dev build events fired ie edge make sure latest", "d": "1/2016"}, {"body": "hmm wicked tried result either way thanks quick answer jan pm christoph hermann notifications githubcom wrote madrabbit problem dev build events fired ie edge make sure latest reply email directly view github", "d": "1/2016"}, {"body": "ok case someone runs similar thing problem rendering directly apparently version something changed regard app still renders events handling somehow scrambled fixed rendering reinserting back document kind ugly works", "d": "1/2016"}, {"body": "also annoying always rerender counter parent rerenders guess hard problem solve js though least binding one solutions proposed bind one nt implement suitable shouldcomponentupdate base class mixin handles equality comparisons reactboundfunction things otherwise like pure render mixin need core react changes unless missing something without shouldcomponentupdate react always rerender regardless reconciliation since nt know nt mutated props jimfb mentions updating callbacks render happened fast enough already since nt manipulate dom place optimize preventing render happening particularly large subtree", "d": "1/2016"}, {"body": "great discussion seeing actionable reactcore bugs thread unless missed something let know reopen reason going close issue since actionable bug react core however encourage guys continue discussion thread move stackoverflow discussreactjsorg reactifluxcom whatever", "d": "1/2016"}, {"body": "jimfb certainly bug feature tomwidmer finally someone feeling pain haha could definitely implement shouldcomponentupdate end create sort bind function works one solution recently discovered elmredux pattern effectively gain performance deal directly streams rather pushing edges dealing lists counters proves little annoying could totally pattern", "d": "1/2016"}, {"body": "ccorcos actionable feature far tell nothing actionable within core anything could done external addon adding addons repository eventually like get separate repositories anyway let know something canshould core make better otherwise let solve outside core", "d": "1/2016"}, {"body": "added reactdomserverjs bower", "d": "1/2016"}, {"body": "stumbled upon issue vote warning even development mode", "d": "1/2016"}, {"body": "another report confusing internally", "d": "1/2016"}, {"body": "wanted add thread sake anyone else finds google like still running error even using solution similar seekshiva declaration turns building two different webpack bundles file import thirdparty plugins set globals file import react components expose globals parts codebase yet webpack needs refer problem setting bundle dealing situation migrating big codebase webpackmodules time parts still need refer react global make sure set global webpack bundle using", "d": "1/2016"}, {"body": "zacqary yes also", "d": "1/2016"}, {"body": "moved directly importing react jsx files started linting", "d": "1/2016"}, {"body": "think helpful error message prop set stateless component would good way fix issue", "d": "1/2016"}, {"body": "fabiomcosta", "d": "1/2016"}, {"body": "fix got similar issue react warning passed style object previously mutated mutating deprecated consider cloning beforehand check previous style display block width height marginleft nan margintop mutated style display block width height marginleft nan margintop", "d": "1/2016"}, {"body": "programnext warning caused", "d": "1/2016"}, {"body": "see thanks cody anyway workaround issue since access marginleft prop directly", "d": "1/2016"}, {"body": "thanzen could probably make error message bit informative specifying margin nan seems like always errorwarning elaborate mean access marginleft prop directly mean using thirdparty component sets property incorrectly component author fix issue", "d": "1/2016"}, {"body": "jimfb tangential perhaps explicitly warn whenever passed style wrong obviously user error always easily spotted", "d": "1/2016"}, {"body": "syranide", "d": "1/2016"}, {"body": "jimfb yes third party component log issue repo instead", "d": "1/2016"}, {"body": "still seeing exact error", "d": "1/2016"}, {"body": "fixed issue knew post small example repros problem see else causing", "d": "1/2016"}, {"body": "weird one seems happen occasionally page loads nt happen others happens multiple times try create jsfiddle reproduce", "d": "1/2016"}, {"body": "spicyj sure good idea unless plan drop keys ssr way serialize symbols want components isomorphic possible would break good reason", "d": "1/2016"}, {"body": "jimfb keys nt appear dom fine", "d": "1/2016"}, {"body": "spicyj nt nt part reactdataid ssr", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "still use internally though strings guess", "d": "1/2016"}, {"body": "well hankey fire", "d": "1/2016"}, {"body": "using doesnt appear fixed", "d": "1/2016"}, {"body": "ccorcos per appears code simple jsfiddle demonstrates issue", "d": "1/2016"}, {"body": "turns", "d": "1/2016"}, {"body": "according spec capture boolean attribute sources places specify string values capture attribute browsers appear honor nt look like part spec furthermore spec seems indicate users specify using attribute far tell supporting string value capture goes specification provides value abovebeyond already provided accept attribute know situation attribute string value meaningful attribute viable alternative", "d": "1/2016"}, {"body": "trying deal quirks old android browsers stackoverflow questions pointed toward need work", "d": "1/2016"}, {"body": "zpao harm specifying takes string seems like would allow us support legacy browsers booleanattribute logic really useful using properties instead attributes right", "d": "1/2016"}, {"body": "harm syranide pending dom removeattribute pull request change everything use attributes", "d": "1/2016"}, {"body": "unrealistic support quirks old browsers would helpful know ones support harm quite true least based understand jimfb saying boolean logic currently allows us specify output correct thing markup either empty string values nt valid remove output invalid could make spec attr requires handle truefalse correctly pass string gets", "d": "1/2016"}, {"body": "djyde", "d": "1/2016"}, {"body": "cheapsteak \u6211\u89c9\u5f97\u8981\u5410\u69fd virtual dom issue suck \u53ef\u4ee5\u6307 somewhere virtual dom suck maintainers please ignore comment", "d": "1/2016"}, {"body": "may misunderstood \u5410\u69fd means means open issues complain bugs imperfections done without flippant rude possible nt mean come way would great reason \u80fd\u4e3a\u81ea\u5df1\u8a00\u8bed\u4e0d\u656c\u7684\u7a0b\u5ea6\u8d1f\u8d23 replying egoist djyde egoist djyde \u5982\u679c\u5149\u662f asking", "d": "1/2016"}, {"body": "cheapsteak \u8bf7\u4e0d\u8981\u7ee7\u7eed\u6c61\u67d3\u8fd9\u4e2a maintainers please ignore comment", "d": "1/2016"}, {"body": "cheapsteak opened issue asking solution complaining", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "issue mismtach caused character encoding vlinder attribute ordering changed objectassign mridgway seeing similar issue mridgway cases props key ordering changed objectassign using spread operator specify causes server client render attributes different order since spec nt specify ordering keys object seems pretty fragile take attribute ordering account determining mismatch way spread operator returns consistent ordering sure except sort keys pretty costly", "d": "1/2016"}, {"body": "ktslwy always character encoding original message pointed time create minimal test case though nt seeing error prabably newer version corrected problem", "d": "1/2016"}, {"body": "wrote reactfalcor integration recently wanted represent data fetches react components using childfunction rendercallback pattern render results works fairly elegantly downside one ca nt statically analyze data dependencies anymore serverside rendering worked around first rendering string keeping cache falcor queries could prime falcor model data corresponding queries render string implementation example quite pleased really realized nt really want see state tree really want see react component tree alternately need way partially render tree gives opportunity fetch data etc etc using lifecycle hooks register queries etc example api mean jsx changes browser reactrender el server let queries let tree reacttotree could completely opaque though would nice able analyze typepropschildren structure preventing need type callback expect getinitialstate componentwillmount trigger point fetch data let prefetched await fetch queries finally render string reactrendertostring", "d": "1/2016"}, {"body": "brandonbloom wrote interceding requests react diff engine state service effectively substitute state service local state global concerns something like possible using js", "d": "1/2016"}, {"body": "little notice better use", "d": "1/2016"}, {"body": "nt expect rereading part spec right precedence two prerelease versions major minor patch version must determined comparing dot separated identifier left right difference found follows identifiers consisting digits compared numerically identifiers letters hyphens compared lexically ascii sort order backed semver module tested caret ranges since default ssatisfies true ssatisfies false ssatisfies true ssatisfies true ssatisfies true ssatisfies false ssatisfies true ssatisfies true", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "know long easy way fix set individual property true call yor handler thats got around issue", "d": "1/2016"}, {"body": "might similar problem wondering access component methods child component composite javascript consider function var stub reactcreateclass dosomething function consolelog whoohoo render function return null nt see references stub element second spec access function", "d": "1/2016"}, {"body": "adjavaherian trying access method rendered child ca nt access directly could attach ref render contextwrapper stub put getter contextwrapper access ref exposes method", "d": "1/2016"}, {"body": "zpao awesome got thanks javascript consider context function var stub reactcreateclass contexttypes location reactproptypesobject dosomething function consolelog whoohoo thiscontextlocationpathname render function return null", "d": "1/2016"}, {"body": "wondering thing mikkoh solution", "d": "1/2016"}, {"body": "react essentially removes problems problem", "d": "1/2016"}, {"body": "sends w ok fillter gt", "d": "1/2016"}, {"body": "useless error message way turn useful message actually points problem", "d": "1/2016"}, {"body": "child component helper function prevented render completing probably force render top get actual error show", "d": "1/2016"}, {"body": "tracking errors killing productivity nt even know component causing blairanderson get proper error message mean force render top anything could wrap trycatch get cause error", "d": "1/2016"}, {"body": "changed couple weeks ago allow null document nothing else assumes presence dom might fixed", "d": "1/2016"}, {"body": "good call robertknight looks like fixed rcs broken fix accidentally reverted upstream fbjs fixed tried glenjamin example working prints baz", "d": "1/2016"}, {"body": "graue nt think close regression test might able look", "d": "1/2016"}, {"body": "yeah let least test", "d": "1/2016"}, {"body": "sebmarkbage couldshould sythentic event system modified opposite hoist scope", "d": "1/2016"}, {"body": "cc gaearon petehunt", "d": "1/2016"}, {"body": "deprecation notice applied npm blog post posted think done", "d": "1/2016"}, {"body": "heh thanks coming back closing long done", "d": "1/2016"}, {"body": "landed google search prefer encapsulate code default props set using computed properties like", "d": "1/2016"}, {"body": "jhabdas given syntax guess babel throws unexpected token use static props however guys work like working stuff js import react react export default class extends reactcomponent static get defaultprops return stuff want update installing zpao link use static properties", "d": "1/2016"}, {"body": "would need enable another babel plugin implements class properties proprosal", "d": "1/2016"}, {"body": "zpao ooh another new stuff today try thanks lot", "d": "1/2016"}, {"body": "nt look like anything ever changed plans bump even better make configurable depth low purposes exception throws incorrect", "d": "1/2016"}, {"body": "greeze bumped sufficient use cases elaborate bit use case", "d": "1/2016"}, {"body": "jimfb sorry mistake looks like stuck prebump version react still limit set think way override without forking without updating version react working trees somewhat deeper levels", "d": "1/2016"}, {"body": "greeze official recommendation update recommend always stay latest version react oneoff hack get chance upgrade could always open file project tweak number manually arguably worse forking source p", "d": "1/2016"}, {"body": "another silly hack assuming babel write local babel plugin change compile time benefit need much node modules whole team gets downfall writing custom plugin change react source", "d": "1/2016"}, {"body": "thank replies ideally love using latest version react unfortunately us moment give thought flattening tree avoid problem altogether nt work give babel plugin idea shot see goes thanks", "d": "1/2016"}, {"body": "curious preventing upgrading", "d": "1/2016"}, {"body": "nothing team current project multiple teams working multiple shared components across org need keep versions react sync moment upgrading eventually hopefully soon option yet", "d": "1/2016"}, {"body": "alternatively may use autobind decorator pattern stage function using unlike function binding approach suggested myboon use decorator require use experimental strawman stage proposal downside using functionlevel may end using several times decorate class methods require use class context seems favorable approach would use classlevel autobind found coredecorators anything", "d": "1/2016"}, {"body": "simply raises valid point files containing nt valid javascript runtime files many platforms unless first transpiled possibly named rather however debatable point platforms run syntax without needing transpilation infuture unless actually using files runtime people consider naming source files runtime javascript debatable file containing jsx work intended first transformedtranspiled fitforpurpose interpret standard js spec runtime might lint become usable react component perform intended convert point future situation change nt let complexities transpilation distract reality jsx run transpiled ever run transpiled deserves kind clear unmistakeable convention indicating options available fileextension interpreter flag like comments might another approach illogical unhelpful pretend jsx js force tooling engineers make inferences something need least bit ambiguous much need convention make distinction explicit love see community make recommendation", "d": "1/2016"}, {"body": "also interested kind feature currently trying access prop instance get warning nt access props way", "d": "1/2016"}, {"body": "camspiers sample code works well bravo thank extended reactcomponent put version code extended classes nt need worry binding issue enhancement made handling exception unexpected reason key ca nt bound thanks", "d": "1/2016"}, {"body": "oops spoke soon inherited classes camspiers helpful technique stopped working however able get working using different technique get method names", "d": "1/2016"}, {"body": "spicyj jordansexton still experiencing problem see red herring messages related data attributes required vs required generally problem somewhere else vicinity would great somehow improve error messaging provide sort robust debugging tools server rendering painful enough without mismatch issues maybe someone give advice best practices running issues mismatch client server components change props coming flux bindings based upon initial query params andor browser storage data seems mismatch issues would wait update flux state didmount feels little engineered efficient since data available client mounting component also prone issues race conditions maybe component data depends upon data retrieved http request cookie present unknown data return component mounting", "d": "1/2016"}, {"body": "guys created universal api compose containers check reactkomposer could create containers higher order function reactkomposer create component display time const time time gt time create composer function tell fetch data const composerfunction props ondata gt const handler setinterval gt const time new date tostring ondata null time const cleanup gt clearinterval handler return cleanup compose container const clock compose composerfunction time render container reactdomrender documentgetelementbyid reactroot live version also easy ways compose containers promises rxjs observables meteor tracker also check article let compose react containers", "d": "1/2016"}, {"body": "arunoda wound something similar one thing wondering prevent composerfunction called every prop change", "d": "1/2016"}, {"body": "oztune actually run use lokka meteor local caches hit server even call composerfunction multiple times think could something like ideas", "d": "1/2016"}, {"body": "arunoda tried creates bit disconnect action dependencies something similar reactasync instead immediately performing given action composerfunction would return function key key different previous key returned composerfunction new function performed sure tangent github thread glad continue twitter username", "d": "1/2016"}, {"body": "oztune created new gh issue let continue chat much better twitter guess", "d": "1/2016"}, {"body": "let jsx understand render observables directly pass observable props eg thispropstodo embed jsx would nt need api rest managed outside react hoc used fill observables nt matter props contain plain data observable hence special thisdata needed thispropstodo additionally react render could able render oservable jsx would allow design described links without additional library", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "think official answer use controlled components techniques like using keys imperative dom api escape hatches rather officially endorsed solutions documenting beyond github issues would give much legitimacy confusion mostly solved gives official reacty answer nt much confusionpressure since pr merged think close issue", "d": "1/2016"}, {"body": "meandre chance prepare ranking analysis interested hearing believe strengths weaknesses opportunities current api", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "sebmarkbage instead use hidden class object reference dynamic rather static ones easily able loop props upon patch could go one step would affect backwards compatibility make original reactelement return dynamic props plus hidden class reference hidden class would reference static props furthermore work static compile time depending much computation time want spend compilation stage example following would return static given plenty easy ones find ast", "d": "1/2016"}, {"body": "trueadm think sebmarkbage mentioned originally bonus points determine properties constant", "d": "1/2016"}, {"body": "spicyj nt referring hidden class referencing props constantstatic sorry maybe misunderstood point mine referencing", "d": "1/2016"}, {"body": "oh totally misread right apologies", "d": "1/2016"}, {"body": "thellimist look", "d": "1/2016"}, {"body": "pfraze tried transferrable objects simply use jsonstringify perf actually pretty good continues stay way better reactdom even number objects increase currently running tests machines post results thanks suggestion", "d": "1/2016"}, {"body": "axemclion good deal given thought using reactworkers plugin sandbox", "d": "1/2016"}, {"body": "sebmarkbage sorry stupid question possible react look component instance associated element triggered event handler component instance nt really breaking change handler wired would bound still take precedence arrow functions seem support though course value passed override lexical exists arrow function created imagine would boil difficult looking appropriate component instance given dom node feasible react", "d": "1/2016"}, {"body": "arackaf imagine something like created component pass foo currently intercept clone whatever technically could track magic owner property refs work deemed magical breaks number optimizations use cases subtle ways hoped get away magic semantics", "d": "1/2016"}, {"body": "sebmarkbage thanks replying glad chose perf convenience question deemed undesirable simply onclick called exists created sort vaguely bound creation time foo intercepts div clones onclick value would change sorry stupid question still relatively new react", "d": "1/2016"}, {"body": "hi updates", "d": "1/2016"}, {"body": "update issues updates nt see anything us safe assume updates", "d": "1/2016"}, {"body": "bit snarky many people interested nt want risk getting deferred due presumed lack interest three months probably reasonable amount time wait checking see whether still worked least nt", "d": "1/2016"}, {"body": "least nt haha true smile team popularity weight would respond meant critizing parties suspect would also similar response zpao shoes", "d": "1/2016"}, {"body": "three months probably reasonable amount time wait checking see whether still worked nowhere thread anybody react team say worked reactdomstream third party project aickin feel free try assess stability performance great people explore space want clarify streaming currently worked anyone react team best knowledge core react team limited resources issues currently bigger priority facebook subscribe issue interested updates please consider people subscribed issue want receive kind backandforth talk definitely post updates meantime please feel free contribute relevant discussion thread thank", "d": "1/2016"}, {"body": "gaearon thank dan appreciate truth hope find time someone writes good pr things different hope announce changes issue", "d": "1/2016"}, {"body": "faced issue building custom component supposed automatically call form submission seems right solution try hack passing page component component via prop edit seems concept wo nt work anywhere deep inside etc seems way go explicitly pass property function returning array react components call form submission edit done resulting code javascript import react component proptypes react export default class form extends component static proptypes action proptypesfuncisrequired inputs proptypesfunc classname proptypesstring style proptypesobject js", "d": "1/2016"}, {"body": "could someone update babel issue link moved", "d": "1/2016"}, {"body": "reasonably sure", "d": "1/2016"}, {"body": "sorry dupe maybe first subtask deemphasize addon documentation thinking rewrite first suggest using array spreadobject spread syntax easily replaced array spread btw tell people use babel right getting started guide suggesting feature needs transpilation seems reasonable second mention immutablejs advanced scenarios need make deeplynested updates experience wellwritten react code rarely needs update state nested one level deep disagree current doc implication deep nesting common natural think lastly document note explaining historic artifact existed may removed future version react", "d": "1/2016"}, {"body": "immutablejs update addon different update addon keep plain js objects immutablejs custom wrapper objects update addon useful components nt want make assumptions immutablejs good situations make assumptions valid tools use", "d": "1/2016"}, {"body": "yup aware suggested arrayobject spread recommended replacement people sticks plain javascript data structures simpler api see remarks", "d": "1/2016"}, {"body": "issue many times bunch solutions read either way donabrams gave great response romancliqr issue best answer problem seen far", "d": "1/2016"}, {"body": "thanks feedback opinions guys followed solution provided gaearon", "d": "1/2016"}, {"body": "agree chrislaughlin supporting use two props valid userdefined props would detrimental anyone using jsx since currently way specifying reason probably nt going support near future feel free continue discussion thread reopen thinking matter changes substantially", "d": "1/2016"}, {"body": "setstatemixin using bluebird creates thissetstateasync current context wanted run promisifyall react prototype seems reactcreateclass hides prototypes sad javascript import promise bluebird export default componentwillmount thissetstateasync promisepromisify thissetstate javascript import react react import promise bluebird class tested example wrote comment work export default class test extends reactcomponent constructor super thissetstateasync promisepromisify thissetstate far worked fine situation eg really dirty promisify current context functions includes reacts use lazy production javascript import promise bluebird export default componentwillmount promisepromisifyall", "d": "1/2016"}, {"body": "kicking around jquense bit reactiflux would useful super concept general seems context updates propagate past returning least would make use cases simpler also think special cases eg require parent able block updates descendants purposes like freezing subtree transitioning example consider without ability block context updates children would nt easily able prevent updates link active state transitioningout route component agreement behavior returning block context updates ought sort sentinel keep working asis", "d": "1/2016"}, {"body": "taion would nt easily able prevent updates link active state transitioningout route component confused desired use case general used block updates would result ui changes hint intended purely optimization mechanism allow avoid unnecessary reconciliation work", "d": "1/2016"}, {"body": "jimfb already using exactly relay though namely block updates loading new data", "d": "1/2016"}, {"body": "think use case user clicks link triggering new route loadedswapped happening idea block interactionsupdates old route going swapped new one finishes loading sounds like currently accomplished always returning new router state loading", "d": "1/2016"}, {"body": "taion go talk relay folks figure going definitive answer would nt recommend applying technique code cc sebmarkbage", "d": "1/2016"}, {"body": "jimfb probably easier understanding idea triggering new data loaded default want keep rendering old data new data ready returning relay root containerrenderer easy way keeping rendering whatever blocking interactions per se blocking upstream data fetching updates transient state", "d": "1/2016"}, {"body": "taion yeah understand skeptical pattern want support talk sebastian relay people guess answer going yeah hack nt normally way accomplish behavior put old values state new values show arrive render old values state", "d": "1/2016"}, {"body": "jimfb pattern possible immutable data something similar nonclonable stateful objects may able follow pattern suspect relay may issue current implementation react router problem general async data libraries seems like reasonably general convenient pattern", "d": "1/2016"}, {"body": "taion approach considering seems even error prone especially case mutable data data mutable going race conditions children sometimes randomly update due event handler context change force update etc code becomes unpredictable let sync people figure ping couple days nt posted outcome discussion", "d": "1/2016"}, {"body": "nt think staticcontainer use case something dealt pattern sounds like unstable way try get effect side effects another feature would much better explicit support actually requested case seems request would lowlevel react libraries want way intercept unmount divorce dom resulting component react tree cutting connection deferring unmount lifecycle finished think lowlevel feature support explicit interface way unmounting intercepting unmount component breaks link allows caller mess underlying context awhile returns function resume unmount livecycle flow called may need special form fragment placeholder api use explicitly tell react dom node disconnected react kept specific location nt without super special internal node idea special lowlevel type react node renders noscript typical react hack null returns etc declares nextsibling dom node kept location otherwise ignored react would really interesting node type could useful fixing variety bugs", "d": "1/2016"}, {"body": "taion ok talked one person relay team couple react people agreement good pattern please nt using state store data waiting update official solution come better apirecommendation use case", "d": "1/2016"}, {"body": "deal think cleaned things react router side move away using pattern anyway thanks", "d": "1/2016"}, {"body": "also want add one question something like var blogposts reactcreateclass getchildcontext function return currentblogpost thispropscurrentblogpost currentuser thispropscurrentuser childcontexttypes currentblogpost reactproptypesobject currentuser reactproptypesobject render function return function select state const blogposts currentuser currentblogid state consolelog stateblogs currentblogid first time undefined blogs get populated object return blogposts currentuser currentblogpost stateblogs currentblogid export default connect select blogposts blogposts component blogposttext blogpostimage podcast depending whether blogposts index type text image audio one components checked owner like always get error bloguserid blog undefined change condition like delete icon never shows instead using contexttype wrap blogposttext component redux select use thispropscurrentblogpost works fine change context nt trigger rerender something like using wrong", "d": "1/2016"}, {"body": "think context change trigger rerender possible missed edge case could create simple jsfiddle demonstrates issue would help us investigate also please post new issue want keep github issues topic extent possible", "d": "1/2016"}, {"body": "jimfb ok recheck code see missed something create new thread ca nt resolve started react actually hard find quality help thanks feedback appreciate", "d": "1/2016"}, {"body": "zpao ca nt ignore shouting face outputting error console", "d": "1/2016"}, {"body": "halthammerzeit rope react render empty tag using react attach ref add contenteditable child fwiw recommendation build use react component implements editable semantics want unfortunate forced implement browsers already builtin better end experience end editable component plays nice declarative framework like react worth reading", "d": "1/2016"}, {"body": "jimfb oh thanks good thoughts read", "d": "1/2016"}, {"body": "got bit", "d": "1/2016"}, {"body": "well reacttransformcatcherrors using babel still like see fixed directly react", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "issue webpack reactjs loading manually", "d": "1/2016"}, {"body": "year comments think means people nt really feel strongly changing names stuff internal api forgot issue part name least consistent lifecycle methods fwiw anyway going close nt think worth keeping issue open indefinitely submit pr know would nt block someone feels strongly speak forever hold peace p", "d": "1/2016"}, {"body": "basically legacy hassle deal various renderers safely different repos refactor like recent changes try make sure make renames time", "d": "1/2016"}, {"body": "still broken", "d": "1/2016"}, {"body": "null value treated defined", "d": "1/2016"}, {"body": "would nt expect changes proptypes flow become much mature recently heard react team longer term solution type checking puts proptypes compatibility bucket terms createclass react addons still supported bugfixes performance improvements without adding new features changing api note official position impression based conversations threads", "d": "1/2016"}, {"body": "interesting current alternative getdefaultprops based flow types", "d": "1/2016"}, {"body": "need feature alreadystated reasons tried implementing container implementation nt really pretty works people submit pr let react devs tear apart", "d": "1/2016"}, {"body": "mwiencek looks like implementation nt work number children fragment changes update nestedchildcount set mountcomponent little trickiness make work well looks like got good start though actually thinking recently may figured robust way make happen report back find success", "d": "1/2016"}, {"body": "spicyj yup right need look super stoked might see proper implementation soon though feel free copy tests branch use", "d": "1/2016"}, {"body": "spicyj nt way forward use jsx transform really want fragments elements", "d": "1/2016"}, {"body": "build expand last comment syranide seems need extra fragment api render allows arrays return value jsx could transform multiple root elements array would also work return values function instead introducing additional api surface requires documentation learning one react limitations could removed would least affect implementation also removing parse error adjacent root elements changing former seems fairly safe nt know scope usage latter impact proposed change would projects", "d": "1/2016"}, {"body": "still nt cover use case conditional multiple elements nt consider use array manually add arbitrary element proper long term solution", "d": "1/2016"}, {"body": "agree dantman", "d": "1/2016"}, {"body": "yup good point automatic key generation built via transform using array index key suffice since items changing conditionals could also built transform alternatively could use jsxcontrolstatements implemented way hence idea", "d": "1/2016"}, {"body": "handle updates correctly figured solution spicyj thought might work fragments wrapping contents something like yeah comments bit ugly way reliable trying approach used", "d": "1/2016"}, {"body": "think support", "d": "1/2016"}, {"body": "jimfb waited long time issue open since say thank adding support video audio tags", "d": "1/2016"}, {"body": "hi updates", "d": "1/2016"}, {"body": "old agreeing lettertwo wrote could look like get exposed api javascript const chainableproptype predicate gt const proptype props propname componentname gt nt validation empty props propname null return proptypeisrequired props propname componentname gt warn empty props propname null return new error propname specified componentname return proptype later case still might helpful somebody", "d": "1/2016"}, {"body": "dataidyou mouse mine another plugin tools copy dom example swiper loop paramit copy dom doc \u5751", "d": "1/2016"}, {"body": "danawoodman wrote refs ref", "d": "1/2016"}, {"body": "could probably ios nt know browsers use similar heuristics hopefully minimal performance impact planning benchmarking soon significant figure way speed spicyj able perform benchmarks merged", "d": "1/2016"}, {"body": "yang moved react", "d": "1/2016"}, {"body": "chance core support case input change selection think pretty common edge case user types invalid character reject change currently results cursor jumping end instead nice cursor move", "d": "1/2016"}, {"body": "last example posted nov keeps cursor place reject change least", "d": "1/2016"}, {"body": "think ended going different direction right longer wrappers return dom nodes nt think want expando dom nodes", "d": "1/2016"}, {"body": "yeah", "d": "1/2016"}, {"body": "ask closed far number one bottleneck us serverside change code example leaky abstraction unnodelike", "d": "1/2016"}, {"body": "mhart technically fix problem code converting live object calls plain js object get performance benefits downside code relying live edits env anyone really fail", "d": "1/2016"}, {"body": "strml cool good know neat idea still massively leaky abstraction right like suddenly react pollutes entire nodejs app", "d": "1/2016"}, {"body": "yeah working requires change uglifyjs allow marking statements annotation eg knows wo nt change safe eliminate dead code", "d": "1/2016"}, {"body": "strml killer little hack btw immediately increased server throughput still love issue reopened tracked elsewhere improve things react code nodejs work speeding well believe made improvements littered throughout hot code ideal nodejs practice imo able hoist cache memoize whatever prevented build tools let fix build tools", "d": "1/2016"}, {"body": "stuck meant live", "d": "1/2016"}, {"body": "strml oh sure completely agree nt think cached node either current implementation room improvement", "d": "1/2016"}, {"body": "mention ticket main problem annotation uglifyjs fix", "d": "1/2016"}, {"body": "seems like decent solution personally fan use global everywhere react code feels really buildtool specific prefer imported config file declared module something similar principle least surprise", "d": "1/2016"}, {"body": "mhart would happy important way eliminate devonly code prod builds users react npm way obviously use whatever tools want stack easily npm currently suggest envifywebpackdefineplugin inherently opposed changing need good proposal reason", "d": "1/2016"}, {"body": "spicyj yeah hear ya lot code react depends behaviour sure fully understand comment npm currently suggest envifywebpackdefineplugin mean npm react code compiled published npm right general feeling would great fbreactspecific idioms code treated though engines features needed could run code nodejs without even needing compiler currently really case sure could sort trick something requiring react modules still would polluting hack way required declared per module code elimination still worked builds would amenable pr along lines", "d": "1/2016"}, {"body": "mean use webpack browserify conjunction react npm able eliminate react devonly code prod builds envify lets us easily browserify copies nodeenv make build webpackdefineplugin lets configure build replace constant get constantfolded minified use case important way required declared per module code elimination still worked builds would amenable pr along lines yes works case react devs using browserifywebpack premade builds", "d": "1/2016"}, {"body": "spicyj aside looking code aside global nt seen anything supported box nodejs right reason aside non code even compiled transformed different structure publishing npm", "d": "1/2016"}, {"body": "well set team move important near future submitted pr see accepted solve problem", "d": "1/2016"}, {"body": "strml still need everyone using react upgrade version uglifyjs ca nt promise take", "d": "1/2016"}, {"body": "everyone using react combination webpack browserify using build alternatively could use defineplugin set false get dead code elimination", "d": "1/2016"}, {"body": "spicyj clarify mean everyone using react also currently uses uglifyjs", "d": "1/2016"}, {"body": "clear users think browser using everywhere already global using browserifywebpack envifydefineplugin using browserifywebpack envifydefineplugin uglifyjs using browserifywebpack plugin transform taken care compilation main reason even supporting things like", "d": "1/2016"}, {"body": "natural many people using browserify envify gets used automatically config packagejson almost everyone minifies code prod true could recommend instead many cases fall apart case requiring submodules nt support external users consider modules private addons packages use pattern various thirdparty projects unsupported us also make use", "d": "1/2016"}, {"body": "think reason natural used everywhere use something get even work box would equally easy setup config packagejson use whatever use whenever complicated normal usage guess pity users encouraged reach various addons thanks clarification expecting current uglifyjs setup eliminate code using concerned", "d": "1/2016"}, {"body": "guess pity users encouraged reach various addons clarify recommend users require similar currently reaches react implementation detail expecting current uglifyjs setup eliminate code using concerned yes", "d": "1/2016"}, {"body": "recommend users require reactaddonstransitiongroup similar ah cool good know", "d": "1/2016"}, {"body": "anyone interested yet another solution conditional rendering", "d": "1/2016"}, {"body": "gfdev et al statements implemented react component reasons alex done great job maintaining transform implements various control statements", "d": "1/2016"}, {"body": "think react official starter kit like polymer team provided us polymer starter kit think provided day one one simple let us start hacking react apparently new react easy find template start obviously starting scratch option many developers like confused please provide us official starter kit", "d": "1/2016"}, {"body": "could least document react events handled native dom events handled", "d": "1/2016"}, {"body": "polkovnikovph necessarily true depends listeners added", "d": "1/2016"}, {"body": "comment trying use without full nodejs stack next impossible without manual rewriting", "d": "1/2016"}, {"body": "api like would handy well imperative millions articles currently suggest use simple hook case one needs one clarifies things done event delegation least helpers like could prevent redundant memory consumption react plugins box", "d": "1/2016"}, {"body": "make use current jsx event handlers extend anything bound window document global simply prefixed like approach require lifecycle events decorators new syntax new external apis easy use understand clean straightforward etc akin appending existing events personally would better idea improve react internal event system providing new event types instead moving logic component layer", "d": "1/2016"}, {"body": "decorators nt feel like right pattern though", "d": "1/2016"}, {"body": "ever fixed still issue nbsp", "d": "1/2016"}, {"body": "danvoyce issue closed almost two years ago also related fbtransform deprecated long time running issue believe bug latest version react please open new issue simple jsfiddle demonstrates issue", "d": "1/2016"}, {"body": "hi might worth taking look supporting googles rich snippet possible idea", "d": "1/2016"}, {"body": "might worth taking look supporting googles rich snippet microdata rdfa script tags already supported", "d": "1/2016"}, {"body": "dantman yeah read embed say itemscope others like prints something applying dom likely misunderstanding clarity would lovely thanks", "d": "1/2016"}, {"body": "reactjsx html converted html react nt rest attributes need convert html examples reactjsx html something becomes jsx something", "d": "1/2016"}, {"body": "ah sorry worked thank", "d": "1/2016"}, {"body": "really nt understand library restrict application architecture", "d": "1/2016"}, {"body": "spicyj sebmarkbage syranide far read looks like real problem feature perk downside react ideal solution provided supply intermediate one like understand wisest thing api introduce temporary interface consider issue years old even best apis know change time however completely disagree could react documentation changed includes workaround superuseful", "d": "1/2016"}, {"body": "ps aside usecases given others things like using attributes something people call heretic simply clear way styling ie combining attributes values proven way readable throwing classes dryer classnames simply repeats properties time purpose using simple decorator js import reactdom reactdom export function customattributes attrs return function component var originalcomponentdidmount componentprototypecomponentdidmount componentprototypecomponentdidmount function originalcomponentdidmount originalcomponentdidmountapply arguments var rootdom reactdomfinddomnode attrsmap attr gt thispropshasownproperty attr return thisprops attr false amp amp rootdomhasattribute attr rootdomremoveattribute attr return rootdomsetattribute attr thisprops attr return component js import react react import customattributes decorators customattributes color size export class button extends reactcomponent ot looks like clean approach something terribly akward reccomended approach", "d": "1/2016"}]