[{"title": "internal variables static properties builtin classes", "body": "ie js var methods collectionmethods var viewoptions viewviewoptions var optionalparam g routeroptionalparam g example use case would new application class creating marionette need copies routing params right done copying pasting directly backbone source would nt change existing behavior potential argument would allow monkeypatching although someone going monkey patch piece backbone least use clones values instead copy pasting source", "num": "3167", "d": "5/2014"}, {"title": "backbone view constructor adding call thisdelegateevents min version dev version", "body": "var view backboneview function options thiscid uniqueid view options options extend pick options viewoptions thisensureelement thisinitializeapply arguments var w eview function thiscid iuniqueid view iextend ipick e thisensureelement thisinitializeapply arguments thisdelegateevents", "num": "3166", "d": "5/2014"}, {"title": "modelcid ca nt loaded json", "body": "loaded jsonparse loadedsubjects subjects new subjects loaded put models collection subjectsmodels cid subjects new subjects loaded subjectsmodels cid wat", "num": "3164", "d": "5/2014"}, {"title": "emulatehttp overrides jquery beforesend", "body": "hi seems current implementation emulatehttp overrides jqueryajaxsetup beforesend seems bit destructive especially since parts app nt using backbone atm relay trigger add various properties need send server", "num": "3163", "d": "5/2014"}, {"title": "unable clear earlier rendered view even replacing element", "body": "rendering table data using jquery tabledata plugin within common container however rendering table container id table changes next time rendering every load container replaced newly built table using view cases different data try access table container using el receiving earlier table data try fetch using jquery javascript working fine could please let know thanks suggestion advance", "num": "3162", "d": "5/2014"}, {"title": "modelprototypechain", "body": "still method model prototype like done collection supposed take model attributes like collection takes models like javascript model backbonemodelextend defaults function return b c model new model modelchain pick b c values compact value could implemented", "num": "3161", "d": "5/2014"}, {"title": "need help parse responce", "body": "anyone help write parse method response tried days able fyi response sharepoint response response model response collection", "num": "3159", "d": "5/2014"}, {"title": "collectionsort always trigger event", "body": "call model change collection example emit event even order nt change nt think event trigger order nt change sending pr would like understand could use full keep event could improvement", "num": "3158", "d": "5/2014"}, {"title": "collectionset takes long amount time high number models", "body": "working cordova based mobile app utilising backbone employers choice personal collection could contain models stored websql using backbonesync adapter load attributes websql function takes long amount time process older mobile devices anyway improve function simply quickly add models collection", "num": "3157", "d": "5/2014"}, {"title": "backbone initialized firefox addons", "body": "backbone require mainjs file firefox addon jquery property set writeable firefox addon sdk defines method similar cjs environments except objects required frozen written workaround suggested work setting permitted moreover writing global object permitted set use changing bbjs umd section explicitly require jquery would resolve issue though understand creating hard dependency jquery would desirable unfortunately using workaround solely project feasible mozilla amo review process discourages packaging modified versions libraries sure issue resolved happy discuss options", "num": "3156", "d": "5/2014"}, {"title": "add property model shallow rails routes", "body": "currently method model uses rules pick property use base order model urlroot collection url common rails case shallow api maybe trello would look like boards member collection routes index create actions nested board member member routes top level index create actions nested list member nice given id card nt need care id list lists board long urls like ugly rails even syntactic sugar propose new check top model url check shallowapi property use shallowurl method calculate url return method would require putting collection model would provide easily interacting shallow apis rails routes look like send pull request showing might add feature", "num": "3154", "d": "5/2014"}, {"title": "amd support breaks non amd applications using global windowbackbone", "body": "tried updating latest backbone version today sadly seems break legacy code using amd least every part application global reference windowbackbone seems missing uncaught referenceerror backbone defined think due fact backbone attached window amd factorycallback one executed first least using almondjs similar perspective makes sense since nt want execute factory unless module really required", "num": "3151", "d": "5/2014"}, {"title": "use version throw error", "body": "typeerror invalid instanceof operand backbone line", "num": "3150", "d": "5/2014"}, {"title": "access huge json coming spring restful service spring mvc app using resttemplate", "body": "spring restful web service returning json form spring mvc app try access show jsp exception occurs sayingno suitable httpmessageconverter found please help going wronghere code inside controller class spring mvc app calling restful service comsongscontrollersfrontsongcontrollerjava requestmapping value alls methodrequestmethodpost public string getallsongs modelmap md httpheaders headers new httpheaders headerssetcontenttype mediatypeapplicationjson headerssetaccept arraysaslist mediatypeapplicationjson httpentity entity new httpentity headers string url resttemplate rtnew resttemplate songresourceclass representation incoming json see code line see browser logs responseentity listofallsongsrtexchange url httpmethodget entity songresourceclass mdaddattribute listname songs available repository systemoutprintln response entity object listofallsongs systemoutprintln response entity body listofallsongsgetbody tostring return sucess inside configservletxml spring mvc app calling restful service context annotationconfig inside songresourcejava spring mvc app trying use converting coming json songresourceclass object spring mvc app use jsp comsongsserviceresourcesongresourcejava public class songresource private string name private string film private string singer public songresource string name string film string singer thisnamename thisfilmfilm thissingersinger setter amp getters calling spring rest service spring mvc app browser saying error internal server error orgspringframeworkwebclientrestclientexception could extract response suitable httpmessageconverter found response type comsongsserviceresourcesongresource content type applicationjson orgspringframeworkwebclienthttpmessageconverterextractorextractdata httpmessageconverterextractorjava orgspringframeworkwebclientresttemplate responseentityresponseextractorextractdata orgspringframeworkwebclientresttemplate responseentityresponseextractorextractdata orgspringframeworkwebclientresttemplatedoexecute orgspringframeworkwebclientresttemplateexecute orgspringframeworkwebclientresttemplateexchange comsongscontrollersfrontsongcontrollergetallsongs", "num": "3149", "d": "5/2014"}, {"title": "using idattribute nested id object", "body": "sure common usecase rest services working return id literal json object support allowing nested id value extracted favor id attribute", "num": "3147", "d": "5/2014"}, {"title": "collection set handle deduplicating models idattribute nested", "body": "maybe call idattribute function use case objects nested key model type basically rails default little patch helps wrapunwrap places model collection change advanced function javascript model backbonemodelextend constructor function attrs options attrs amp amp attrs folder return new doppiomodelsfolder attrs options else return new doppiomodelsfile attrs options still limited backbone going use string notation attributes object case object looks like way using notation get id something nt work perhaps function receives attrs", "num": "3145", "d": "5/2014"}, {"title": "router callback params trailing null", "body": "writing jasmine tests router routes foo bar fooroute fooroute function bar test takes argument function var routespy spyon thisrouter fooroute var bar fails following error seems odd check browser outside jasmine visit route outputs curious trailing null appended arguments passed route callback realize really harming anyone means write janky garbage tests", "num": "3143", "d": "5/2014"}, {"title": "backbone collection get returns undefined even model exists", "body": "hi", "num": "3142", "d": "5/2014"}, {"title": "minified nt correspond source", "body": "hello found method minified version exactly code pos nt correspond full source version case called three arguments also check return value present override method using minified version undefined argument", "num": "3141", "d": "5/2014"}, {"title": "collection model field optionally function", "body": "reason model nt obtained via result collection preparemodel goal collection models base class different specializations example coffeescript class book extends backbonemodel class ebook extends book class books extends backbonecollection model attrs gt booksfactorygetclass attrs", "num": "3139", "d": "5/2014"}, {"body": "yes change added master yet current release therefore minified version issues see change behavior", "d": "5/2014"}, {"body": "recently inherited codebase using views abstract classes example js var abstractview backboneviewextend initialize function extend selfevents selfevents click element handler var myview abstractviewextend initialize function abstractviewprototypeinitializeapply abstractview events get attached min version dev version", "d": "5/2014"}, {"body": "better set method abstractview js var abstractview backboneviewextend events function return click element handler var myview abstractviewextend events function return extend abstractviewprototypeeventscall looks even nicer coffeescript coffeescript class abstractview extends backboneview events gt click element handler class myview extends abstractview events gt extend super click otherelement handler", "d": "5/2014"}, {"body": "yep example good strategy", "d": "5/2014"}, {"body": "agree solution better way handle attaching events abstract view however think guys missing point dev min version begs question many things different two indeed bug result different behavior based example despite suggested work around", "d": "5/2014"}, {"body": "dev min version minified file updated releases keep commit noise minimum", "d": "5/2014"}, {"body": "assume dev version correct thisdelegateevents removed backboneview constructor", "d": "5/2014"}, {"body": "markwise right already called found redundant call twice sorry breakage need call anyway always add override constructor migrate", "d": "5/2014"}, {"body": "right thanks", "d": "5/2014"}, {"body": "model cid nt attribute clientside id uniquely generated every time model created persisting standard model save prevents expect populated response instead using model id standard practice model id generated server possibly autoincrement database returned client", "d": "5/2014"}, {"body": "unique identifier model instance nothing contents model", "d": "5/2014"}, {"body": "case could probably wrapping beforesend instead patching right", "d": "5/2014"}, {"body": "sound reasonable nt difficult nt really played jqxhr object preferred use workaround", "d": "5/2014"}, {"body": "already wrap option passed suppose overrides version though looks like options stored though ca nt find documentation may part public api", "d": "5/2014"}, {"body": "sounds like jquery thing quote docs note global callback functions set respective global ajax event handler ajaxstop ajaxcomplete ajaxerror ajaxsuccess ajaxsend rather within options object ajaxsetup try see fixes problem", "d": "5/2014"}, {"body": "changing view element generally use setelement change reference", "d": "5/2014"}, {"body": "yep possible original pull included dropped jashkenas think original concept still holds allow chain means accessing advanced underscore methods like", "d": "5/2014"}, {"body": "ok feel free put back include decent tests might useful realworld models please", "d": "5/2014"}, {"body": "real world nt need test chain works access underscore methods use underscore methods whitelistblacklist params keep url model attributes sync ok feel free put back include decent tests might useful realworld models please reply email directly view github", "d": "5/2014"}, {"body": "collection parse method model parse method", "d": "5/2014"}, {"body": "model method first case parsing response model otherwise parsing item collection response js parse function response responsed return responsedmetadata return responsemetadata collection method", "d": "5/2014"}, {"body": "hi yethee thanks reply please look response message metadata one attribute still attribute", "d": "5/2014"}, {"body": "see need change method model like js parse function response responsed return responsed return response", "d": "5/2014"}, {"body": "hi yethee thank working fine", "d": "5/2014"}, {"body": "seem inconsistent model event wo nt fire unless model attributes change", "d": "5/2014"}, {"body": "totally agree", "d": "5/2014"}, {"body": "makes sense would even cooler every time collection reordered model fired model sort event model new index passed arguments since use case pretty much always going synchronise something else changes total resort might sound heavy events silentsort true could used also recommended strategy would queue debouce resulting updates view worried performance lots fun", "d": "5/2014"}, {"body": "similar issue collectionfetch sort event triggerd even models changed addremove", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "probably better keeping anything simpler data structure creating fullblown modelscollections whatever subset working time probably could get little faster functionality modelscollections provide nt designed super performant many records", "d": "5/2014"}, {"body": "supposed fast possibly make specific section code think needs looking specific patch like suggest feel free suggest see previous tickets said really want get metal javascript stop using external libraries write things hand reusable arrays full strings integers loops", "d": "5/2014"}, {"body": "sure issue resolved sounds like ca nt really resolve easily suggest making small modification version backbone including big note comment top explaining line changed pointing ticket justification hopefully review process reasonable", "d": "5/2014"}, {"body": "hi jashkenas thanks response appear something resolved bbjs broadly speaking party lib seems ff addons support using party libs way solution restructure ff addon code backbone loaded contentscript context mainjs addon context", "d": "5/2014"}, {"body": "revert setting jquery commonjs dependency wrapped trycatch node enviros already automatically import jquery amd pattern apply browserify using backbone browser likely using jquery tell build tool require node gracefully handle case present", "d": "5/2014"}, {"body": "seem reasonable creating small reusable ui components eg parcelify cartero feels weird verbose write stand alone components using jquery replacement edge case unreasonable require extra config optimize would however nice common case worked expected", "d": "5/2014"}, {"body": "sure need set backbone gotcha needs happen use anywhere become hairy wed may david beck notifications githubcomwrote seem reasonable creating small reusable ui components eg parcelify cartero feels weird verbose write require backbone stand alone components require jquery backbone require backbone backbone backbone careful write whatever app done using jquery replacement edge case unreasonable require extra config optimize would however nice common case worked expected reply email directly view github", "d": "5/2014"}, {"body": "also trusting host application set properly needed little widget seem quite right maybe host app even using backbone", "d": "5/2014"}, {"body": "another gotcha scenario multiple copies backbone running around due different dependency version requirements neglecting npm dedupe app sets main one modules may using another", "d": "5/2014"}, {"body": "revert setting jquery commonjs dependency node require server backbone usually nt want require jquery server browserify popular hack nt breaking making inconvenient actual use case node designed favor parasitic use case mean without value judgement connotes", "d": "5/2014"}, {"body": "many many people using commonjs client side whether foreseen spec created fact backbone decidedly client side lib almost certain people using backbone commonjs client side using backbone server side get clean solution one dismissing browserify client side commonjs implementations hack solve issue felt ground nt breaking making inconvenient actual use case node designed favor parasitic use case inconvenience maybe missing something seem like problem inconvenience extra jquery module installed server side use", "d": "5/2014"}, {"body": "interested see goes got bitten trying implement something like recently worse starting thought might backbone compatible way write api think problem using flat relational database structure server believe object database db wide unique id member unique id member group would make sense comes seamlessly synchronising collection server side relational mapping backbone claims approach agnostic generally positive want plug architecture would nice section website common persistence strategies backbone plugin least customisation", "d": "5/2014"}, {"body": "reference try plugin custom app logic first hairy specialcased merge master moment", "d": "5/2014"}, {"body": "think already able implement defining model collection urls pretty easily done backbone similar scheme backbone come railsspecific option box nt think", "d": "5/2014"}, {"body": "great points thanks taking look", "d": "5/2014"}, {"body": "ah yeah using amd need load via amd still available global loading need", "d": "5/2014"}, {"body": "several components nt use amd rely global reference windowbackbone available even though backbone nt required via amd point otherwise forced load amd modules first least one module requires backbone nonamd modules think whole point attaching window available even using amd throughout application missing something", "d": "5/2014"}, {"body": "yeah unfortunately way amd designed globally accessible required app even via amd whole notion amd asynchronous means ca nt guarantee backbone dependencies jquery underscore set time individual application parts need without using module system amd guys might better solution sat may dominik siebel notifications githubcomwrote several components nt use amd rely global reference windowbackbone available even though backbone nt required via amd point otherwise forced load amd modules first least one module requires backbone nonamd modules think whole point attaching window available even using amd throughout application missing something reply email directly view github", "d": "5/2014"}, {"body": "take look option requirejs", "d": "5/2014"}, {"body": "aware asynchronous nature amd philfreo using requirejs think stick thanks input guys", "d": "5/2014"}, {"body": "nt jquery exposed global amd module set", "d": "5/2014"}, {"body": "thanks much", "d": "5/2014"}, {"body": "try mailing list stackoverflow irc channel questions github issues maintaining framework", "d": "5/2014"}, {"body": "git hub posting questions", "d": "5/2014"}, {"body": "nope would get hand everyone posted questions try avenues first", "d": "5/2014"}, {"body": "suggest spring restful related post really need figure", "d": "5/2014"}, {"body": "best bet stackoverflow mailing list project", "d": "5/2014"}, {"body": "check merged would handle use case need create artificial attribute function", "d": "5/2014"}, {"body": "setting method results duplicate models calling see jsfiddle looked totally clear solution provides explain", "d": "5/2014"}, {"body": "little workaround js var model backbonemodelextend set model id property nested object parse function response responseid responsenestedid return response var collection backbonecollectionextend model model preparse response data using model parse method parse function response return responsemap thismodelprototypeparse solves duplicate models problem calling option imperfect workaround limitation must instance model factory thing method must reference model instance calls without context model yet created provide context called twice collection every model created could cause performance issues probably possible side effects nt yet thought", "d": "5/2014"}, {"body": "eschwartz example using js var videocollection backbonecollectionextend generateid attrs return attrsidunique var videos new videocollection id unique abc id unique def videosget abc first video videosget def second video", "d": "5/2014"}, {"body": "thanks example see comments", "d": "5/2014"}, {"body": "looks like addressed issue commit master", "d": "5/2014"}, {"body": "master came compare view nt show disappearing", "d": "5/2014"}, {"body": "previous fix issue reverted may want take look alternate solution cover use case might want look well", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "hi drmanitoba since last release route callbacks include argument query string seem odd would ever though seems like pass absence query string similar", "d": "5/2014"}, {"body": "ah ha ok perfectly reasonable explanation really confused nt know api change ca nt find mention docs probably looking hard enough feel free close changes going made thanks", "d": "5/2014"}, {"body": "glad could help smiley", "d": "5/2014"}, {"body": "github tickets nt helping debugging application friend", "d": "5/2014"}, {"body": "correct version looking repository current edge version look source still execute two arguments need minify current master wish use", "d": "5/2014"}, {"body": "oh thanks found argument usefull plans keep future versions", "d": "5/2014"}, {"body": "course would something worth adding opinion shoot pull request updated", "d": "5/2014"}, {"body": "right simple originally appreciated", "d": "5/2014"}, {"body": "polymorphic models", "d": "5/2014"}, {"body": "much coffeescript recently suppose lost focus real thing going underneath beauty thanks", "d": "5/2014"}, {"body": "worth wrote short summaryremainder covering topic", "d": "5/2014"}, {"body": "also using model function factory key known factory would nice preparemodel handled undefined return cancelled model creation edit kind patch suffisent", "d": "5/2014"}, {"body": "access creating model via need mess context", "d": "5/2014"}, {"body": "aware access collection way stated original post point behavior obvious documented would assume without read source code defining model function would context function collection class would least open pr attempts clarify documentation", "d": "5/2014"}, {"body": "would least open pr attempts clarify documentation feel free jashkenas decide whether extra documentation appropriate", "d": "5/2014"}, {"body": "would least open pr attempts clarify documentation sure", "d": "5/2014"}, {"body": "also following purpose additional client validation saving data validated saving presumably server server returns client validation fails response client could end nonworkable state also less impactful inconsistency created one adds promise listeners returned jqxhr done handler invoked otherwise synonymous success callback", "d": "5/2014"}, {"body": "also following purpose additional client validation saving data validated saving presumably server server returns client validation fails response client could end nonworkable state bit funny server returns client accepts data considered client delaying screwed next time modify save data making bug application harder find time state model changes validated defined validate function simple", "d": "5/2014"}, {"body": "guys somebody example thanks", "d": "5/2014"}, {"body": "maybe could valid solution", "d": "5/2014"}, {"body": "others wanted code snippet handle global jquery level", "d": "5/2014"}, {"body": "used form included mainjs global ajaxsetup beforesend function xhr settings function getcookie name var cookievalue null documentcookie amp amp documentcookie var cookies documentcookiesplit var lt cookieslength var cookie jquerytrim cookies cookie string begin name want cookiesubstring namelength name cookievalue decodeuricomponent cookiesubstring namelength break return cookievalue send token relative urls ie locally xhrsetrequestheader xcsrftoken getcookie csrftoken working fine thanks support", "d": "5/2014"}, {"body": "saw google bc searching way silent sync event using backbonesave way current version checked source code seems possible true add sync false option", "d": "5/2014"}, {"body": "afaik passing save fix stackoverflow irc question", "d": "5/2014"}, {"body": "saw google bc searching way silent sync event using backbonesave know experience nearly always bad idea want particular handler fire nt mean event handler fire instead check option handler want silence", "d": "5/2014"}, {"body": "thanks lot guysreally helpful", "d": "5/2014"}, {"body": "adding reset option model fetch", "d": "5/2014"}, {"body": "curiosity wrong leading slashes spent time googling found several statements eg jashkenas official docs note want avoid using leading slash route definitions word", "d": "5/2014"}, {"body": "well think leading slashes stripped routes handling takes place nothing else superfluous backbone routes", "d": "5/2014"}, {"body": "technical reason using hashchange ugly trendy brief period leading slashes make sense using pushstate", "d": "5/2014"}, {"body": "got thanks", "d": "5/2014"}, {"body": "different", "d": "5/2014"}, {"body": "hi fengdi right using recommended instead use parent directly", "d": "5/2014"}]