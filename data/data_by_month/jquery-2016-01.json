[{"title": "browser support", "body": "seen milestone set would love know planned browser support developed umbrella js jquery alternative fun learning would love contribute jquery things learned one jquery main advantage opinion handicaps browser support since makes source code much bigger alpha released july beta jan assume version would nt ready least years case seeing browser usage halves every year microsoft dropped support browsers recently propose make jquery release support way lot modern features could brought reduce greatly browserspecific code hacks simple example possible benefits seen modern browsers umbrella js reduced js uprototypeaddclass function loop combination node argument return thiseacharg arguments function el name right jquery handled manually avoiding repeating classes js addclass function value var classes elem cur curvalue clazz j finalvalue jqueryisfunction value return thiseach function j jquery addclass valuecall j getclass typeof value string amp amp value classes valuematch rnotwhite return", "num": "2887", "d": "1/2016"}, {"title": "consider increasing modularization test entities", "body": "see", "num": "2886", "d": "1/2016"}, {"title": "syntax error unrecognized expression href href", "body": "used selectior somewhere code like worked without issue jquery jquery migrate get error message try use jquery jquery migrate error syntax error unrecognized expression href href using firefox suggestion", "num": "2885", "d": "1/2016"}, {"title": "upgrade breaks smooth scrolling page jumps", "body": "using following code one create smooth scrolling page jump using jquery version works fine upon upgrading version following error shown javascript console", "num": "2884", "d": "1/2016"}, {"title": "difference attr dom getattribute", "body": "div id item selected gt text div gt consolelog item attr selected consolelog documentgetelementbyid item getattribute selected jquery method attr getattribute", "num": "2883", "d": "1/2016"}, {"title": "tooltip nt show another popup eg autocomplete open", "body": "popup eg autocomplete window open putting cursor adjacent object tooltip show tooltip obscuring popup popup open tooltip show trigger element child popup current hack also class shared autocomplete popup items perhaps another bug report", "num": "2882", "d": "1/2016"}, {"title": "limit test suite selection operations qunitfixture", "body": "explicitly documentscope wrap cf", "num": "2880", "d": "1/2016"}, {"title": "consider emitting named event dom manipulations occur", "body": "apologies proper forum submit potential feature request older browsers support someall mutation events would helpful jquery core emitted event dom manipulated way subscribe event react dom structures addedremoved might similar functionality deprecated also understand performance concerns related thoughts", "num": "2879", "d": "1/2016"}, {"title": "update npm dependencies", "body": "many dependencies got pretty date time bump", "num": "2877", "d": "1/2016"}, {"title": "breaking change", "body": "sure bug per se think technically syntax error release notes jquery say expected breaking changes thought would report case line line works fine throws error quoting values attribute selectors fixes ie said sure intended fix regression", "num": "2876", "d": "1/2016"}, {"title": "new feature reattach", "body": "hi creating methode change nothing easier cancel operation eg drag drop use everytime like accelerate traitement faster avoid bug save next sibling use native parent case next element deleted allow usecase like", "num": "2873", "d": "1/2016"}, {"title": "jsdom eventtrigger trigger keyboard events", "body": "hello would seem working jsdom unable trigger keyboard events however trigger using furthermore trigger mouse events like jsdom setup followed var doc jsdomjsdom globaldoc doc globalwindow docdefaultview globalnavigator docdefaultviewnavigator global jquery docdefaultview get issue running jsdom jquery node hope nt missing something simple thanks", "num": "2872", "d": "1/2016"}, {"title": "consider adding support passive event listeners", "body": "blink shipped support eventlisteneroptions expect soon ship support passive option ideally jquery users would able mark event listeners passive get performance benefits also scottgonzalez mentions would good jquery polyfill capturing api well thoughts feel free file issues questions spec", "num": "2871", "d": "1/2016"}, {"title": "document foo append documentcreatetextnode bar supported use case", "body": "documentation says append accepts string element jquery collection problem official way append text node jquery using append text node works fine text instance element instance parent prototype node echoes tools definitions like definitely typed jquery typescript dts definition typescript compiler throws error appending text node please fix documentation trickle downstream tooling thanks", "num": "2870", "d": "1/2016"}, {"title": "remove code legacy browsers tests", "body": "legacy code tests kept mostly keep amp branches sync one branch high time clean probably support comments various ancient browsers", "num": "2868", "d": "1/2016"}, {"title": "since read property opener null parsehtml get css style", "body": "upgraded jquery problem appeared could reproduce following case parse html using parsehtml already parsed html wrap jquery container try get css style jquery element results jsbin", "num": "2866", "d": "1/2016"}, {"title": "commit disconnected elements toggle", "body": "ref uses newlyrenamed determine whether called effects methods use determine invoke preliminary since yet perform exactly advertised disconnected elements treated hidden code locks inline values elements counterintuitive especially comes element descendants like propose updating use inline display values evaluating disconnected elements possibilities include treating elements differently parent document element vs document fragment null b keeping everything asis matter either add unit tests asserting consensus decision document disconnected elements invalid context methods", "num": "2863", "d": "1/2016"}, {"title": "jquery yui compressor results syntax errors", "body": "yui compressor reports syntax errors processing official uncompressed file works fine ideas issue", "num": "2862", "d": "1/2016"}, {"title": "element longer getting added", "body": "nt autoinsert tbody longer inserts element nt one consequence breaks bootstrap layout tables modern browsers relied jquery adding tbody element see demonstration tried firefox safari version chrome version top table broken three see demonstration used work fine jquery", "num": "2861", "d": "1/2016"}, {"title": "right alt key also triggers ctrl event windows", "body": "hello found windows ie firefox chrome problem right alt key seems detected ctrl alt key left alt key works like suspected keyboard layout polish programmers linux right alt never works os x alt keys work expected window keydown function event eventwhich alert ctrl eventwhich alert alt", "num": "2859", "d": "1/2016"}, {"title": "call fntrigger value eventcurrenttarget changed timing", "body": "correct behavior enter value press ok button confirm currenttarget console enter value inserted enter confirm currenttarget console html document", "num": "2858", "d": "1/2016"}, {"title": "remove righthand side specificity recommendation", "body": "say specific righthand side selector less specific left opened thread done benchmarks basically modern browsers supporting queryselectorall far aware sizzle engine used processing selector way modern browsers unlike sizzle evaluate selectors lefttoright thus specific righthand side hurt rather help performance righthand side treated rules lefthand side less specificity correct wrong", "num": "2856", "d": "1/2016"}, {"title": "discuss new showhide logic mostly detached element", "body": "started", "num": "2854", "d": "1/2016"}, {"title": "email selector", "body": "javascript var domselector xxx yyycom dom domselector jquery error uncaught error syntax error unrecognized expression xxx yyycom", "num": "2853", "d": "1/2016"}, {"title": "hide shadow dom element broken", "body": "may related following code works fine throw error however post throws latest chrome breaks rails ujs stuff try create form hide one stroke appending document error appears come way though jquery expert thus really sure changed post", "num": "2852", "d": "1/2016"}, {"title": "hover throws error jquery jquery worked fine", "body": "declaring hover events functions declared later properties object jquery fails version lower worked fine example var controls button hover controlsbover controlsbout declarations controlsbover controlsbout moved top script works hover replaced mouseenter mouseleave separately without moving declarations works well example also works fine jquery versions without changing anything ps looks like happens chrome firefox", "num": "2851", "d": "1/2016"}, {"title": "access global firefox extension signing issues", "body": "getting number high severity warnings jquery submitting extension mozilla addons site signing validation resultspdf text summary eval global warning evaluation strings code lead security vulnerabilities performance issues even innocuous circumstances please avoid using constructor possible alternatives available use cases see information severity automated signing high suggestions passing automated signing please try avoid evaluating strings code wherever possible read linked document suggested alternatives referencing constructor without calling avoid continuing consider alternatives calling existing function object var script indirect eval called potentially dangerous manner warning order prevent vulnerabilities functions called function expressions first argument severity automated signing high suggestions passing automated signing please ever call string arguments passing function correctly detected please consider passing closure arrow function turn calls original function handle asynchronously allow scripts opportunity delay ready windowsettimeout jqueryready called potentially dangerous manner warning order prevent vulnerabilities functions called function expressions first argument severity automated signing high suggestions passing automated signing please ever call string arguments passing function correctly detected please consider passing closure arrow function turn calls original function timerid timerid windowsetinterval jqueryfxtick jqueryfxinterval called potentially dangerous manner warning order prevent vulnerabilities functions called function expressions first argument severity automated signing high suggestions passing automated signing please ever call string arguments passing function correctly detected please consider passing closure arrow function turn calls original function return thisqueue type function next hooks var timeout windowsettimeout next time hooksstop function createelement used create script tag warning dynamic creation script nodes unsafe contents static otherwise unsafe remote severity automated signing medium suggestions passing automated signing please avoid using", "num": "2847", "d": "1/2016"}, {"title": "restore chainable noop behavior", "body": "see", "num": "2846", "d": "1/2016"}, {"title": "ajax progress handler", "body": "simple extension jquery attach function progress usefull integrated library", "num": "2845", "d": "1/2016"}, {"title": "crashes require jquery", "body": "hello product best js library widely used developing recently problem discovered similar connect jquery library using requirejs browser crashes error full source code screenshots error source ie version error repository", "num": "2844", "d": "1/2016"}, {"title": "ajax amd module requires serialize module", "body": "noticed loading jquery separate amd modules ajax module depends serialize module jqueryparam function however listed dependency define call reason like bug", "num": "2842", "d": "1/2016"}, {"title": "drop support jsdom node lt completely", "body": "currently wonky logic installing new jsdom testing version manually installed older nodejs amp problem jsdom bug makes whole dom manipulation basically completely broken see nt make much sense test even manually especially easy miss release imo drop support old jsdom versions", "num": "2841", "d": "1/2016"}, {"title": "parsehtml fails zombiejsjsdom", "body": "hi automated tests zombiejs tests failed since upgrade stripped code code chromefirefox browser nothing goes wrong using zombiejs based jsdom wrongdocumenterror code node var browser require zombie var browser new browser browseron error function err consolelog err consolelog errstack processexit browservisit function err err processexit stack trace based answer issue seems jquery side creates another document context moving node document another disallowed jsdom follow browser behavior issue first happens versions", "num": "2839", "d": "1/2016"}, {"title": "close require jquerytinymce", "body": "page element empty name attribute require jquerytinymce browser close error examples try also js libraries working good", "num": "2838", "d": "1/2016"}, {"title": "elem css property value important fails without feedback", "body": "bug previously reported closed wontfix however stack overflow question comment demonstrates recommended workaround bug ticket nt actually work test case used incorrect furthermore per comment bug documentation incorrect stack overflow question numerous answers allow used context either verbose hacky well important feature natively supported jquery function", "num": "2837", "d": "1/2016"}, {"title": "position gives different result top chromefirefox", "body": "example using example using view console compare results says whereas says chrome firefox os x give results appears broken scaffolding one bootstrap unit tests xref perhaps related", "num": "2836", "d": "1/2016"}, {"title": "new showhide logic fails disconnected elements firefox", "body": "", "num": "2833", "d": "1/2016"}, {"title": "calling val set radioscheckboxes return value checked element", "body": "examples radio buttons current behaviour proposed behaviour checkboxes current behaviour proposed behaviour rationale makes sense unify way value form elements accessed would allow get value form element without knowing type element interim solution function used instead add handling checkboxes radio buttons per description js fnvalue function val var", "num": "2831", "d": "1/2016"}, {"title": "jquery requires quotes around anchors", "body": "upgrading rewrite selectors keep working could write href someanchor need write like single quotes around href value href someanchor", "num": "2829", "d": "1/2016"}, {"title": "upgrade breaks jquery ui tooltip ies", "body": "reported bug tracker jquery ui might bug jquery reporting well bug report summary ie placement tooltips wrong correct jsbin wwwjsbincommenoxo edit tested new release jquery error", "num": "2828", "d": "1/2016"}, {"title": "vs selectors broken", "body": "following perfectly valid selector class href anchor fails requires quotes class href anchor likely related", "num": "2824", "d": "1/2016"}, {"title": "inconsistent regards interactive state", "body": "included support interactive excluding old ie consistent see", "num": "2822", "d": "1/2016"}, {"title": "ajax request large content fails sometiems", "body": "hi guys ca nt replicate bug exactly yet however certain circumstances ajax request large files fails safari mobile request gets send never comes back reduce requested text works request works fine using xmlhttprequest object", "num": "2820", "d": "1/2016"}, {"title": "introjs source incomplete", "body": "hai guys contents introjs look incomplete purpose bug project build js syntax error caused introjs best regards micha", "num": "2819", "d": "1/2016"}, {"title": "jquery breaks jqueryui slider", "body": "upgraded jquery breaks jqueryui slider error uncaught typeerror read property opener null firefox chrome ie tried upgrading jquery slider still works expected issue affects also tried upgrading slider jqueryui jquery still fails error", "num": "2817", "d": "1/2016"}, {"title": "firefox nt set erelatedtarget null focusout", "body": "event object property tells element obtaining focus chrome element obtains focus click page background firefox nt focusout event faked jquery well set jquery always set better solution would set know element obtains focus ca nt know element obtains focus way either old browser complete implementation event like safari faked event tell element obtains focus certain event happened element obtaining focus jsfiddle test values jquery bug focusout relatedtargetset null", "num": "2815", "d": "1/2016"}, {"title": "jquery error jquery ui", "body": "web app jquery jquery ui working fine updated jquery started getting errors like datepicker function tabs function stepping thru browser found original javascript error elem tag defaultview null viewopener gives error unable get property opener undefined null reference looking callstack top call towards beginning jqueryuijs none web app code directly involved changes made jquery ui jquery migrate libraries rolling back jquery got rid error duplicate error simple jsfiddle example unable get property error happens chrome", "num": "2814", "d": "1/2016"}, {"title": "nt use detached tags amp nt add built files tags", "body": "use jquerydist repo publish jqueries proper build artifacts update release script longer include artifacts tag main repo tag commit main branch create detached one first point important future dmethvin pointed build artifacts eg transpiling modules second one confusing users nt fetch detached tags default visible case eslint changed release script avoid detached tags used add build artifacts since longer needed tag nt detached well", "num": "2813", "d": "1/2016"}, {"title": "chaining broken null handlers jquery inconsistency", "body": "looks like bug introduced jquery function code registers bunch handlers chain one callbacks null function return window object callback null causes chaining fail works jquery little investigation looks like method refactored global within jquery scope returns used jquery object window example jquery impromptu plugin selector keydown keydowneventhandler impromptu loaded optsloaded impromptu close optsclose impromptu statechanging optsstatechanging impromptu statechanged optsstatechanged", "num": "2812", "d": "1/2016"}, {"title": "unquoted attr selector throws error", "body": "line throwing error updating due attribute selector encased quotes ie fixes error sure expected supposed nonbreaking release realize first example throws error correct syntax based jquery docs sure supposed throw error assuming graceful degradation preferred error ultimately stops javascript execution", "num": "2811", "d": "1/2016"}, {"title": "tripple negation text nodes", "body": "back awolff found inconsistency jquery posted stackoverflow thought awolff would submit issue ca nt find short nonelement eg text nodes recursive probably pseudoselectors treated differently dug issue found cause sure whether consider bug easy fix answer make atleast consistent cost fix quite low", "num": "2808", "d": "1/2016"}, {"title": "zombie last node version jquery", "body": "jquery load zombie caused nt body set fix would make sure body sure indicates purposeful big matrix tests new old versions jquery along build tools need work lot different versions node would nt able use zombie verify canjs jquery node environment yeah odd situation please let know think thanks", "num": "2806", "d": "1/2016"}, {"title": "missing bowerjson jquery", "body": "installed jquery looks like file missing release", "num": "2805", "d": "1/2016"}, {"title": "typeerror elemgetclientrects function", "body": "ran issue jquery installed unit test build typeerror elemgetclientrects function arrayjqueryexprfiltersvisible supermatcher sizzleselect sizzle functionsizzlematches functionjqueryfilter winnow object object jqueryfnextendfilter objectkickoffmethod note internal package masked path install jquery unit tests pass poked around source see trying use filter like seems failing", "num": "2804", "d": "1/2016"}, {"title": "filter methods behaves inconsistently text comment nodes", "body": "jquery version test thread stackoverflow using method elements nodetype different gives inconsistent result check jsfiddle eg markup would expect methods regarding pasted selector behave seems related filtering elements nodetype using complex selector passed method method result seems consistent martijn suggested edit internal method javascript implement identical functionality filter function winnow elements qualifier jquery methods designed work dom nodes sure qualified bug", "num": "2803", "d": "1/2016"}, {"title": "window offset fails exception", "body": "breaks tested behaviors jquery ui wise man said core ai nt done till ui wo nt run", "num": "2802", "d": "1/2016"}, {"title": "window scroll function vs window scroll function equivalent", "body": "contrary jquery scroll documentation states method shortcut first second variations directly equivalent seen jsfiddle documentation updated info edge case", "num": "2801", "d": "1/2016"}, {"title": "deprecate jqueryparsejson", "body": "needed ie lt amp android apart kept branches mostly apicompatible reasons longer valid imo deprecate method switch internal uses could remove", "num": "2800", "d": "1/2016"}, {"title": "spam", "body": "spam", "num": "2799", "d": "1/2016"}, {"title": "val nt update value attribute", "body": "function nt seem updating attribute get value set using different expected behavior value attributes api examples nt update either running firefox chromium", "num": "2798", "d": "1/2016"}, {"title": "mutationobserver fiering twice using html", "body": "found html method firing two mutationobserver events think cleandata andor empty causing first event removal second event occures due append andor innerhtml beeing called think undermining mutationobserver basic idea one event bunch domchanges take place right technically possible actions one go architectural considerations well inbetween two chairs personally need hook add removal event certain container currently replaced html method expection one mutationobserver event think technically would nice distigusih actions current way reliable plans make jquery distingush dom add removal events based mutationobservers far see mutationobservers used jquery regards ob", "num": "2797", "d": "1/2016"}, {"title": "closest remove exception pos selectors", "body": "discussion documentation closest states context passed context jquery set used instead however seems often case see illustrated context passed explicitly closest works expected finds element within context element however jquery set context closest called without explicitly passing context context used contradicting documentation however selector passed closest contains noncss selectors gt eq etc set context used believe fix change loop condition follows cur cur amp amp cur context cur curparentnode become cur cur amp amp cur context thiscontext cur curparentnode would line noncss code similar thing context pos rneedscontexttest selectors typeof selectors string jquery selectors context thiscontext", "num": "2796", "d": "1/2016"}, {"body": "thanks proposals nt yet know release jquery time took us get long expect releasing frequently least try get closer decide browser support strategy data way early need guess landscape observations ember angular even still support conservative dropping support older browsers less even dropped ie amp still would nt able use supported svg ie versions support svg class manipulation drop ie surely wo nt happen many years come also snippets posted little misleading switching us would nt remove much code see would result jqueryclasslist plugin eg js addclass function value var classes elem var var len thislength var proceed typeof value string amp amp value nt think able decrease library size lot dropping", "d": "1/2016"}, {"body": "one thing referring developed umbrella js jquery alternative fun learning would love contribute jquery things learned open ideas improve jquery code base ideas please report issues", "d": "1/2016"}, {"body": "nt know svg support completely true pity since problem thing many small things add however might trouble worth manypeople community jquery try compile list later today able analyze indepth see particular example part could improved best would codepattern reuse check fn x otherwise loop spread three different functions even looped two different ways could easily generalized generic function eacharg looping nodeargument pair js definition uprototypeeacharg function args callback return thiseach function node thisargs args node foreach function arg callbackcall node arg usage b c could also b c b c function return b c u b c eacharg b c function minor major b c b b b b c c c b c c consolelog minor major inside args parse arguments make array valid strings finally str make functions string reuse parts becomes much smaller", "d": "1/2016"}, {"body": "instance code js addclass function value var classes elem var var len thislength var proceed typeof value string amp amp value could reduce something like untested multiple add parameter compatible right js addclass function value var name value", "d": "1/2016"}, {"body": "think sure nt use additional function call potentially hot path good benchmarks though possible could generalize patterns amp reuse find something could submit prs correction since resolved early assert browser support yet going close issue continue discussion though thanks", "d": "1/2016"}, {"body": "see mostly tradeoff initial load smaller vs performance faster sure add performance benchmark pr however found highly relative browser", "d": "1/2016"}, {"body": "agree could use better correspondence modules better focus test markup lot project still use big messy global document really hard change risks breaking tests elsewhere would great pr someone wanted learn jquery project structure mostly rearranging code learn lot process", "d": "1/2016"}, {"body": "like improve showhide tests approach would acceptable consider writing tests like", "d": "1/2016"}, {"body": "already concerned highly related tests span lines sure separating help things however qunit supports nested modules via callback module would assuage concerns", "d": "1/2016"}, {"body": "already concerned highly related tests span lines sure separating help things every project according many books subject well projects code also nt think matters many lines code spans think matters well could understood supported would like note ticket proposes rewrite bad parts also suggests write manner every new test", "d": "1/2016"}, {"body": "would like refer distinct counterexample fine sufficiently dry nightmare problem highly related tests without sufficient abstraction guilty recently tests question defense nt yet upgraded version qunit encourages", "d": "1/2016"}, {"body": "selector valid special char needs escaped like see", "d": "1/2016"}, {"body": "yes another duplicate", "d": "1/2016"}, {"body": "duplicate", "d": "1/2016"}, {"body": "hi looks standard attribute standard attributes global attributes discussion says avoid nonstandard attributes furthermore afaik second logging property dom javascript object might wrong thing attribute difference attributes propperties general suggest reading stackoverflow", "d": "1/2016"}, {"body": "works please make sure using latest version jquery suitable environment currently either", "d": "1/2016"}, {"body": "also makes good point valid attribute", "d": "1/2016"}, {"body": "like clarify bit yeah correct almost actually basically sideeffect attribute check whenever boolean simple regexp jquery return name bottom line guarantee kind behaviour incorrect markup furthermore afaik second consolelog logging property dom javascript object might wrong thing attribute case actually property concept really hard grasp sometimes always return content property aka dom element property would return idl property aka js representation dom element would idl properties sync content properties defined spec like expandos properties aka undefined spec old ie lt whole different story though main reason division", "d": "1/2016"}, {"body": "nt want confuse even spec actually uses word attribute property either content attribute idl attribute started referring content attributes attributes idl attributes properties make easier differentiate idl ones retrieved property access", "d": "1/2016"}, {"body": "good overview spec markelog talking", "d": "1/2016"}, {"body": "sounds like wanted open issue repo", "d": "1/2016"}, {"body": "believe fixed might causing issues moment see note done sizzle", "d": "1/2016"}, {"body": "close general hygiene ticket stay open reasonably confident others", "d": "1/2016"}, {"body": "believe addressed comment mentioned ticket description aside resolved cases proof tests even exist might determined think reached reasonable criteria otherwise nt understand want determine selectors also think bad hygiene also tickets open forever without possibility closing except subjective feeling confidence however strongly feel please feel free reopen", "d": "1/2016"}, {"body": "nt understand want determine selectors looking unit tests think bad hygiene also tickets open forever without possibility closing except subjective feeling confidence agree closing indistinguishable wontfix point avoid reoccurrence looking objective characterization go someone comments issue certifying examined unit tests found selections scoped broadly could match qunit output commit lands branch claiming correct selections", "d": "1/2016"}, {"body": "someone comments issue certifying examined unit tests found selections scoped broadly could match qunit output commit lands branch claiming correct selections first discounted already found offending examples attributesjs attributesjs attributesjs corejs corejs cssjs cssjs stop get point", "d": "1/2016"}, {"body": "thank opening issue even wanted add support think remain plugin limited support android nt support mutation observers also event delegation reason deprecated usually unnecessary add event handlers checked elements way scope could almost always limited hence switch later could handled recommended method words features lost deprecation", "d": "1/2016"}, {"body": "understood request fire events dom manipulation done jquery apps via jquery mutationobserver support necessary might nice plugin would still hooks inside jquery make possible", "d": "1/2016"}, {"body": "see new might somewhat related depending trying", "d": "1/2016"}, {"body": "usecase hate pecking around looking javascript block binds things particular dom structure would nice use hardcoded name data attribute relate corresponding block javascript started developing code dom wrote javascript would fire callback encountered dom structures particular dataattribute var dommodule dommoduleregister function name callback pageload dommanip check see new dom dataattribute matches name parameter call callback possible link block code corresponding dom like want find javascript binds particular chunk dom look value search name javascript thus able quickly find corresponding javascript update smile trouble part able handle pageload need way asynchronously rechecking dom manipulated postpageload direction heading sort pubsub dom manip publishing via jquery dom structures change subscribing block asynchronously fire callback added", "d": "1/2016"}, {"body": "timmywil thanks link plugin help use case thought thought support mutation observers older browsers could something jquery could provide understand would rather keep plugin thanks", "d": "1/2016"}, {"body": "afreidz sounds like may trying something like custom elements want definitely recommend trying use emerging standards shims needed try polymer rather rolling implementation", "d": "1/2016"}, {"body": "dmethvin yea probably always like going thru process rolling implementation first way choices truely needdriven rather popularitydriven seems like im running need developer happiness anyway opposed business need polymer may bit heavyhanded anyway thanks suggestions", "d": "1/2016"}, {"body": "leobalter wanted update qunit latest well managed use versions amp introducing race conditions tests making fail randomly every full test run could look seeing things like", "d": "1/2016"}, {"body": "hmmm sure race conditions looks like kind thing would pop response failures ultimately stems test results html appearing document used test fixture thought never really come good approach think best way leveraging assertions rely upon document context eg selector child adjacent grandchildren something like", "d": "1/2016"}, {"body": "failures like start somewhere nt something changed qunit", "d": "1/2016"}, {"body": "pretty sure changed output format jquery broad selection picking new elements qunit html reporter", "d": "1/2016"}, {"body": "thanks report duplicate technically speaking breaking change means something allowed documentation broke new release breaking unofficial apis supported edge cases etc breaking change never asserted supporting invalid css selectors working accident allowed change behavior nonmajor release said aware might break code put minor release patch try patch releases break even undocumented stuff possible", "d": "1/2016"}, {"body": "thanks clearing sorry finding dupe feeling would case breaking undocumented working syntax would considered breaking change thought would better report unsure", "d": "1/2016"}, {"body": "sure nothing wrong reporting good idea always search existing bugs reporting always trivial find worries", "d": "1/2016"}, {"body": "expect would break easily collections go transformations eg also code block nt going anything soon detach element going return empty set run elements", "d": "1/2016"}, {"body": "oh bad wrote example without testing thanks reviewing idea nt understand problem imagined save next parent element collection entire collection", "d": "1/2016"}, {"body": "difference appending remembering parent", "d": "1/2016"}, {"body": "curently detach collection remembering element suppose write something like javascript detach jqcollection function var jqthis jqthisdata tmpnodeparent jqthisparent tmpnodenext jqthisnext detach reattach jqcollectioneach function var data data jqthis thinking maybe jquery propose shortcut faster least two advantages use something like cancelling drag possibility accelerate changes", "d": "1/2016"}, {"body": "thanks request think likely introduce unexpected behaviors comes implementing convinced usefulness outweighs cost prefer let start plugin", "d": "1/2016"}, {"body": "first jquery example passing argument triggering documented constructing setting argument resulting object general good idea avoid shortcut methods need set event data instead create data want trigger via either code snippets nt showing using triggered event clear mean trigger keyboard events keydown event happening even first case probably nt contain data expect due error mentioned", "d": "1/2016"}, {"body": "hello sorry yes mistake issue still stands example rendered react component jsdom document component registers event handler want test first attempt actually use like event trigger keydown event see nothing console however triggers see output console wondering issue using jquery register event handler however triggered click event using jquery executes handlers registered using react full test example something function setup var doc jsdomjsdom thanks", "d": "1/2016"}, {"body": "wondering issue using jquery register event handler yes general use dom use dom since api level jquery method runs handlers attached jquery jquery also listens dom events however triggered click event using jquery executes handlers registered using react nt see code ca nt say sure whether expected using attribute element would expected jquery looks", "d": "1/2016"}, {"body": "hello makes sense triggering events registered react led believe jquery something else hood however side effect react implementation closing issue thanks", "d": "1/2016"}, {"body": "kind support looking think would really hard expose either via classic api built assumption us users single multiplexed native event handler special event hooks take advantage able capture events bubbling jquery handlers see jquery dom manipulation knows jquery events clone andor teardown elements go away could create new api several hard issues solve want foundation use cases limited scroll scenarios seems like plugin might best approach way avoid solving problems nt yet exist general case also reliable way check support non implementations reliably throw exception see object instead boolean might future implementations support ignore options nt understand", "d": "1/2016"}, {"body": "kind support looking nt presume know enough event handling jquery typical usage patterns valuable opinion right design highlevel thing want maximizing scroll performance way code attaching listener disable use could even syntax event name list eg knob lets developers optin passivebydefault events currently harder due lack equivalent escape hatch necessary like maybe developers resort want optin performance benefits talked developers one popular library already want perf benefit ok thrilled changing usage order get reached scottgonzalez couple weeks ago part discussions past year problem api pointer events working group suggested worth filing issue discuss also reliable way check passive support explainer shows typical obscure pattern featuredetecting dictionary members", "d": "1/2016"}, {"body": "realize api tricky option already exists like team start discussing embrace future native apis much favor adding general requests embracing new apis quickly met lot pushback andor bikeshedding far actual usable api ideal solution would drop silly add useful native api could easily mimic since deprecating probably wo nt happen could implement yes suck parse options perhaps reach new level parameter hockey within jquery doable since required acts delimiter two optional object parameters let start limiting discussion right whether feature make jquery", "d": "1/2016"}, {"body": "could even syntax event name list eg knob lets developers optin passivebydefault touchstart touchmove events wheel currently harder due lack equivalent touchaction escape hatch necessary like touchstart withpreventdefault handler get pretty close today special events caveat events attached specific element behave like first event whether provide class works fine elements one touchstart handler per element", "d": "1/2016"}, {"body": "realize api tricky option already exists extra arg public api messy least problems nt even mention solving architectural issues legacy expectations would much harder shoehorn capture passive existing api define interacts existing plumbing worrying much break create new api start empty slate say example want events never cloned internally tracked manipulation also subject special events system jquery special triggering logic", "d": "1/2016"}, {"body": "get pretty close today special events interesting thanks anyway leave jquery experts figure anything want let know questions feedback api browser behavior ship passive support chrome currently targeting upcoming release expect see bunch evangelism hard data performance benefits seen practice believe premature worry much given early adopters ok options working around jquery", "d": "1/2016"}, {"body": "thanks opening like see numbers performance benefits implementing tho", "d": "1/2016"}, {"body": "plumbingwise seems feasible extra data pass extra code jqueryeventprototypepreventdefault degrades gracefully worse performance successful effects calls promised make porcelainwise five arguments ugly scottgonzalez suggestion works extending events selector data handler signature however nt work well events selector data signature butnot bound handlers instead look like explicitly undefined still think work", "d": "1/2016"}, {"body": "plumbingwise seems feasible extra data pass addeventlistener lot plumbing support capture let consider capture proposal extra code jqueryeventprototypepreventdefault way understood rbyers document attach ignored perhaps message goes console saying made mistake pass let browser yell user also since passive seems strictly performance optimization probably let people set flag even supported porcelainwise probably relatively rare need correct whatever api convey new data nt necessarily support signatures options could object position could check eliminate ambiguity", "d": "1/2016"}, {"body": "might want consider polyfilling visible effect passive browsers nt support reduce chance code working fine old browsers failing newer ones see example probably nt critical", "d": "1/2016"}, {"body": "lot plumbing support capture let consider capture proposal yes make absolutely explicit ticket purely limited attach ignored perhaps message goes console saying made mistake pass let browser yell user pretty sure also need skip preventdefault avoid lying also since passive seems strictly performance optimization probably let people set flag even supported yes nt work would visible people call flag explicit promise avoid probably relatively rare need correct whatever api convey new data nt necessarily support signatures options could object position could check eliminate ambiguity please let would clumsy us users introduction inheritancebased pattern decidedly unjquery", "d": "1/2016"}, {"body": "thanks opening issue however documentation issues go perhaps change element node", "d": "1/2016"}, {"body": "found problem comes function change error disappears getting css style done properly", "d": "1/2016"}, {"body": "hm seems issue relevant beta", "d": "1/2016"}, {"body": "caused right", "d": "1/2016"}, {"body": "must implying nt worth current solution default current window might even alright building appendable elements iframes", "d": "1/2016"}, {"body": "implying trying establish blast radius fix proposed seems fine", "d": "1/2016"}, {"body": "nt think case elements element parents unless inline display none eg working years complaints fast small clear suddenly need reverse logic", "d": "1/2016"}, {"body": "matter either add unit tests asserting consensus decision document disconnected elements invalid context methods concision decision removed tests", "d": "1/2016"}, {"body": "yes likely yui compressor still thinks reserved word even though implementation took workaround release fixed years ago since reported back none jquery supported browsers required quoting several years", "d": "1/2016"}, {"body": "getting syntax errors even worse", "d": "1/2016"}, {"body": "fiatux syntax error file found error seems like even running jquery", "d": "1/2016"}, {"body": "thanks opening issue reason autoinserting nt thought element old ie required manipulation tables work given currently supported browsers require tbody table elements thought better users add elements actually need nevertheless mean want keep behavior jquery probably behavior", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "thanks report however microsoft implemented polish programmers keyboard opposed systems beyond scope jquery details interested story problem may read", "d": "1/2016"}, {"body": "thanks clarification sorry bothering", "d": "1/2016"}, {"body": "handlers called specific event occurrence share object example bubbling phase see change property creating fully independent deep copy object per handler order avoid would incredibly expensive object accessed period event handler called need values object save variables rather holding reference entire object browsers native event object ceases exist code like example tries access would throw error", "d": "1/2016"}, {"body": "actually browsers parse selectors righttoleft well best place issue actually learnjquerycom repo", "d": "1/2016"}, {"body": "context note logically first containment check added gecko reports disconnected elements computed display none whereas webkit blink report empty whereas means case expect user know want append newly created element case nt new concept detached elements considered shown counterintuitive inconsistent opinion disagree summary behavior always respects inline display else changed respect disconnected elements longer make assumptions cascaded display without inline display treated visible believe previous behaviour correct expected since never seen complaints complaints locking default display case user nt call improved performance case user call performance worse nt think fair assume ing cascadehidden elements fast think fair assume ing elements wo nt break site responsive layout like cases reversed believe behaviour performance would nt suffer would improved seem focusing microcosm showhide behavior even could easily convert work contains work firefox contains unchanged elsewhere introducing support test consensus desiring put pr", "d": "1/2016"}, {"body": "even could easily convert work contains work firefox contains unchanged elsewhere introducing support test consensus desiring put pr related would checking faster use places place checking element disconnected", "d": "1/2016"}, {"body": "answers different question essentially conflates detachment computed might able replace code performance boost could nt replace would fact require browsers instead firefox", "d": "1/2016"}, {"body": "also would characterize inline toggling preferred mode operation cascadeoverriding legacy behavior performance truly matters users utilizing former wo nt ever hit", "d": "1/2016"}, {"body": "note logically first containment check added gecko reports disconnected elements computed display none whereas webkit blink report empty nt really matter added matters disagree summary behavior always respects inline display else changed respect disconnected elements longer make assumptions cascaded display without inline display treated visible understand rational guess see would interpreted point view yes elements without display treated visible truth detached elements visible complaints locking default display tickets nothing detached elements tickets still actual nt think fair assume show ing cascadehidden elements fast users wanted faster sure fast think fair assume show ing elements wo nt break site responsive layout sure trying say seem focusing microcosm showhide behavior care logic worsen expected behaviour improving incorrect one even could easily convert work contains work firefox contains unchanged elsewhere increasing size already increased size using could nt replace contains would fact require browsers instead firefox already checking element attached getclientrects replace method tests good sure opinion", "d": "1/2016"}, {"body": "two main concerns perf compat think established code faster least important cases one goals maybe play blog post graphs going spoonful sugar helps medicine go plus makes paul irish happy compat concern best answered looking cases break proposing reasonable solutions people use get around tried earlier purist approach kept reaching points nt anything offer breaks people fix hide detached elements fails cases totally okay asking people change example need explain", "d": "1/2016"}, {"body": "understand rational guess see would interpreted point view yes elements without display treated visible truth detached elements visible except inline eg previous complaints locking default display tickets nothing detached elements tickets still actual caused lines code question nt think fair assume show ing cascadehidden elements fast users wanted faster sure fast first run repeats really want speed nt relying us detect cascaded using classes inline display even still made things faster many cases think fair assume show ing elements wo nt break site responsive layout sure trying say dude care logic worsen expected behaviour improving incorrect one say overriding css cascade guess already least border incorrect even could easily convert work contains work firefox contains unchanged elsewhere increasing size already increased size using wrong tool job breaks already checking element attached getclientrects replace method tests good sure opinion nt map attached maps layout implies attached vice versa perfect wrong", "d": "1/2016"}, {"body": "except inline display none eg previous hide yeah explicit desire user make hidden point still holds caused lines code question tickets nt resolved new logic actually code tries correct still relevant like display value cemented inline style still true even still made things faster many cases yes goodie changed logic worsen improving stuff said repeatedly whereas yet still improve perf make logic dude meant tickets still relevant say overriding css cascade guess already least border incorrect nono confusing incorrect user incorrect behaviour one might argue nt overriding css cascade guess best user hand nt call already hidden element ishidden wrong tool job breaks detachedshow saying would improve break disturbing yet still nt saw justification reversing logic disconnected nodes three years nt receive complaints getclientrects nt map attached maps layout implies attached vice versa perfect ishidden hidden wrong whatever gets job done personally nt care method called use dom methods unconventional ways broken unconventional ways discussion", "d": "1/2016"}, {"body": "dmethvin hide detached elements fails cases totally okay asking people change elem hide appendto body elem appendto body hide example need explain really hard make arguments situation clear participants ie works perfectly detached elements nt need discussing tried explain couple times guess ca nt clear", "d": "1/2016"}, {"body": "need escape character please ask help stackoverflow jquery forum", "d": "1/2016"}, {"body": "thanks opening issue please provide test case help assess issue", "d": "1/2016"}, {"body": "disregard moron old version jqmigrate along", "d": "1/2016"}, {"body": "oh shoot recognized reported", "d": "1/2016"}, {"body": "please take look jsfiddle jquery seems work contrary saying firefox however move function declarations call works", "d": "1/2016"}, {"body": "one line equivalent since two properties defined call jquery silently nothing jquery throws error since seems lot code expects able attach undefined event handlers added behavior back see sure coming next weeks", "d": "1/2016"}, {"body": "many seem like would reported jquery well saying change firefox tool static analysis tool easily confused code fine example complains line may string always function defined lines need animation module could build custom jquery without modules complaining", "d": "1/2016"}, {"body": "seem new us introduced jquery adding extensions using jquery never saw errors firefox tool static analysis tool easily confused code fine example complains line jqueryfxtick may string always function defined lines things like fix trivially would prefer see jquery plugin fix static code analysis issues popular library extensions include jquery extension see warnings", "d": "1/2016"}, {"body": "would like propose pr ideally test coverage otherwise regress next time someone makes changes would require adding tool scan part build possible", "d": "1/2016"}, {"body": "surprised nt see warnings code using instead regardless think safely say firefox extension generating warnings errors good reasons nt think fact extension ca nt tell jqueryfxtick always function problem wrapping closure may prevent warning programmatic reason shut warnings given nt think change anything source warnings ok long deemed", "d": "1/2016"}, {"body": "understood prequalification tool mozilla runs firefox extensions see dangerous code perhaps mozilla could whitelist unchanged copies jquery situations like agree tool misguided dangerous", "d": "1/2016"}, {"body": "thanks opening issue hesitant add new features jquery especially ones already covered plugins plugin popular get requests feature might consider making part core", "d": "1/2016"}, {"body": "forgot add problem occurs element page blank tag example tag name", "d": "1/2016"}, {"body": "thanks bug report confirmed crash appears caused calling document containing elements empty name attribute note document valid html particular valid attribute div elements b attribute form controls must empty nt look like anything", "d": "1/2016"}, {"body": "could definitely make good case adding another example problems big method bunch internal processing logic need case someone passes nonstring property seems like shame always pull whole module", "d": "1/2016"}, {"body": "need case someone passes nonstring data property seems like shame always pull whole module case get separate module depend instead full", "d": "1/2016"}, {"body": "terms lines half module subdividing probably nt useful someone wants functions like probably calling send data", "d": "1/2016"}, {"body": "agreed let add serialize dependency thanks", "d": "1/2016"}, {"body": "makes sense think talking small community anyway logistical reasons stuck old versions", "d": "1/2016"}, {"body": "approved mgol", "d": "1/2016"}, {"body": "thanks opening issue going change implementation suit jsdom dom standard browsers support jsdom sure jsdom comparing points spec prohibit nodes switching documents tell throw calling appending node", "d": "1/2016"}, {"body": "jeremyvignelles commented jsdom issue looked like jsdom adopting nodes browsers", "d": "1/2016"}, {"body": "fixed next jsdom release", "d": "1/2016"}, {"body": "thanks great work dmethvin waiting next jsdom release", "d": "1/2016"}, {"body": "link tinymce bug report", "d": "1/2016"}, {"body": "thanks opening issue checked url ensure jsfiddle issue worked looks like crash happens trying edit jsfiddle way see figure cause keep taking outadding back code narrow causing crash jquery alone combination jsfiddle jquerytinymce means jsfiddle something combination libraries nt like unfortunately nt think team members time figure jsfiddle turn issue jquery would welcome patch", "d": "1/2016"}, {"body": "link tinymce bug report", "d": "1/2016"}, {"body": "wrong plugin defined rare use case adding much code library loaded millions times day seems like wrong way solve", "d": "1/2016"}, {"body": "rare use case rare stack overflow question linked ranked questions number views nearly two dozen answers protected popularity despite asked half decade ago active last month rarity lack thereof correctness standard css supports overriding jquery pretty major omission", "d": "1/2016"}, {"body": "wrong plugin defined though want", "d": "1/2016"}, {"body": "true documentation misleading looks like said long time wonder finally give", "d": "1/2016"}, {"body": "still think pretty rare case law large numbers may mean thousands people gone looking millions people writing jquery small percentage seems working plugin solution omission far ability jquery concerned careful adding new functionality nt know people looking solution whether best one use case also remember law large numbers applies file size even percent jquery devs actually need loading many terabytes per day across whole internet make percent load plugin really important suggest adopt supported plugin something", "d": "1/2016"}, {"body": "fine leaving plugin nt least remove note docs", "d": "1/2016"}, {"body": "yeah looks like docs need freshening anyway setter section talks internet explorer without qualifying ie lt", "d": "1/2016"}, {"body": "ported docs issue", "d": "1/2016"}, {"body": "also", "d": "1/2016"}, {"body": "planning release really soon fix one included well", "d": "1/2016"}, {"body": "pretty sure dup caused fix ticket invalid fix incorrect", "d": "1/2016"}, {"body": "agreed looks like dup", "d": "1/2016"}, {"body": "would pretty big breaking change right current code would expecting see string instead get array someone wanted value checkbox element way get today", "d": "1/2016"}, {"body": "yes breaking change current behaviour makes little sense often select set radioscheckboxes call get first one value regardless whether checked would use case", "d": "1/2016"}, {"body": "thanks opening issue nt think change first way way long second value unchecked checkbox still valid value may retrieve often still value retrievable written something similar method apps included special value retrieval checkboxes radios kind thing would never perfect suitable everyone applications think best left plugin users", "d": "1/2016"}, {"body": "timmywil understand point breaking change consider second point unchecked values valid retrievable return possible values first one selected one implementing proposal would bring behaviour line could still retrieve unchecked values", "d": "1/2016"}, {"body": "opposed breaking changes still need changes think done jquery exceptions getter gets information first element set today sure point gets value would get first element set submitted", "d": "1/2016"}, {"body": "background simple plugin want see thread", "d": "1/2016"}, {"body": "nt job function call away serialize serializearray js rsvpmaybe namersvp serialize name rsvp value maybe namersvp serializearray contacttext amp contactcall namecontact serialize name contact value text name contact value call namecontact serializearray", "d": "1/2016"}, {"body": "dmethvin jquery exceptions getter gets information first element set val today may documentation says real world actually used get selected entered value field sure point select val gets value would get first element set submitted point like control selecting value set predefined values behaviour consistent return selected value understand single element parent whereas represents option think relevant think jquery job abstract away underlying html structure provide consistent way getting form control selected entered value", "d": "1/2016"}, {"body": "nt job val disagree exactly form elements radio buttons checkboxes function call away serialize serializearray sure point point form elements returns currently selected entered value radios checkboxes inconsistent", "d": "1/2016"}, {"body": "inconsistent returns value first element asking essentially serlialized value shown way follow forum link yet another solution asking make breaking change better ways want without breaking people code", "d": "1/2016"}, {"body": "inconsistent val returns value first element like said understand documentation says real world usage get current selected entered value element yeah consistent documentation opinion wrong would make much sense able get value form element without knowing type like types elements well asking essentially serialized value definitely asking current selected values nothing serialization serialization transforms form element query string array representation understand use achieve want little extra code point point makes sense able get current value form element using except radios checkboxes shown way first comment point asking solution know saying would make sense implement core jquery asking make breaking change sure understand introduce alternative method sure come better name maybe default jquery given plenty reasons would make sense", "d": "1/2016"}, {"body": "introduce alternative method someone already stackoverflow use plugin need jquery code run repository", "d": "1/2016"}, {"body": "dmethvin giving reasons think least considered core answer arguments replies generic go away answer specific points", "d": "1/2016"}, {"body": "others support let speak think already provide enough ways get including short plugin mentioned forum post", "d": "1/2016"}, {"body": "paweldecowski appear confused form element value form submission process uses value skips elements nt contribute form data make mistake value control unaffected disabledness checkedness participation form submission real world usage get current selected entered value element logic describe really right methods happens radio buttons checkboxes skipped direct user interaction instead disabled case text inputs selects textareas definitely asking current selected values nothing serialization serialization transforms form element query string array representation true also skips unchecked elements exactly behavior looking", "d": "1/2016"}, {"body": "duplicate", "d": "1/2016"}, {"body": "would suspect remove two lines see gives correct results seems work correctly edge btw", "d": "1/2016"}, {"body": "dmethvin yeah works changing fixes every ie edit reverting commit task yeah", "d": "1/2016"}, {"body": "ok thanks good know must quirk ie offsetparent accounting", "d": "1/2016"}, {"body": "yes never valid standard css selector anything special characters spaces quoted selector accepting previous versions bug attribute values must css identifiers strings", "d": "1/2016"}, {"body": "whether regard previous bug breaking change", "d": "1/2016"}, {"body": "fixing bug almost always breaks something", "d": "1/2016"}, {"body": "release notes specify nonbreaking change changing way selector syntax works worked long time lot code wild uses construct test suite previous proved accepted syntax update work new syntax yet nowhere indicate selector syntax changed issue bug release note stating change behaviour", "d": "1/2016"}, {"body": "cosmicnet every behavior change may break code relies unspecified behavior treated breaking changes could nt nonmajor releases semver applies documented ie never promised selector works hence definition changing breaking change think might break incorrect code though nt introduce change patch release minor one even though semver permits us patch release", "d": "1/2016"}, {"body": "cosmicnet specifically think need advocating revert change nt think trying parse valid css selectors per spec allowing kind exceptions even undocumented makes difficult impossible also causes selector rejected path results performance degradation saying frustrated breaking change code sorry several undocumented features mention release notes hard know ones world may depending upon always glad take feedback wip builds note committed long ago using wip build would revealed compatibility issue", "d": "1/2016"}, {"body": "dmethvin fact test suite proving unspecified behaviour indicates common usage also see documenting feature test suite definitive definition valid proving undocumented features erroneous indicates serious problem tests fail see mentioning release notes anything omission instead least note explanation given would far appropriate", "d": "1/2016"}, {"body": "cosmicnet specifically think need", "d": "1/2016"}, {"body": "dmethvin fail see mentioning release notes anything omission instead least note explanation given would far appropriate", "d": "1/2016"}, {"body": "thanks agree try track better future", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "definitely need test case sure comparing apples apples look xhr vs ajax example ajax call request would fail response valid json", "d": "1/2016"}, {"body": "datatype text", "d": "1/2016"}, {"body": "datatype text testcase though still need one", "d": "1/2016"}, {"body": "happening object large json text length char failed deserialize model net mvc controller method argument would get null reference exception back end", "d": "1/2016"}, {"body": "even sure talking problem say happening mean like op page failing mobile safari fails randomly request retrieve large amount text server indicated server encountering error seem like situation two comments nt yet even know nature failure silently nothing throw error lock phone etc test case would help us investigate", "d": "1/2016"}, {"body": "sorry trying create test case right easy create test object big one see production came fact knockout kotojson obj producing json string deserializable controller side could entirely knockout nothing ajax call switch kotojson using jsonstringify working fine", "d": "1/2016"}, {"body": "apologies got resolved problem due something else related localstorage max certain limit jquery works", "d": "1/2016"}, {"body": "introjs combined outrojs build process complete file", "d": "1/2016"}, {"body": "thank dmethvin means better get complete jquery version dist folder let stuff aside", "d": "1/2016"}, {"body": "duplicate", "d": "1/2016"}, {"body": "provide pull request", "d": "1/2016"}, {"body": "thanks opening issue given inconsistent across browsers regardless inclined leave asis seems like asking property act featuredetect effectively using signify focusout nt native started change lot properties consistent something trivial time", "d": "1/2016"}, {"body": "said willing review pr reopen", "d": "1/2016"}, {"body": "looking jquery code found jquery nt change property well seems could change jquery nt investigate current jquery updated jsfiddle show jquery bug focusout relatedtargetset null see jquery nt modify jquery firefox sets null conclusion probably nothing use instead thanks sorry opening issue", "d": "1/2016"}, {"body": "issue jquery migrate actually fixed", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "turned much involved expected code create detached head tags deep within jqueryrelease", "d": "1/2016"}, {"body": "afraid still think worthwhile try decouple", "d": "1/2016"}, {"body": "callback ca nt documented input previously silently nothing seems like makes harder find bug causing null input", "d": "1/2016"}, {"body": "weird though brought check back test event edit ah misread report throwing returns instead original element", "d": "1/2016"}, {"body": "correct callback nt necessarily null function window returned", "d": "1/2016"}, {"body": "looking source code seems like reverted commit culprit function broken different meaning", "d": "1/2016"}, {"body": "function treated specially dmethvin mentioned supported input technically want like see really happening nt immediately see leaks global object since functions appears supposed bound proper elements thanks report", "d": "1/2016"}, {"body": "looking source code seems like reverted commit culprit function broken different meaning good point note removed check using throw jquery restored amp nt throw consistent even though unsupported input fix buggy seems fix branch nt seem important enough warrant release unless find something important patch likely stay thoughts jquerycore", "d": "1/2016"}, {"body": "code refactored nonmethod function hide private arg changed meanings nt think critical enough force immediate either especially since documented unit test seems like saying want non falsy handler chainable noop really dislike kind behavior lets mistakes happen lot easier decide want make sure testing documenting right", "d": "1/2016"}, {"body": "issue encountered somewhat similar relates event refactoring think warrants featurebug report fine happened upgrading jquery hoverintent uitabs threw error epreventdefault function user defined event handler callback function even though quick test showed typeof epreventdefault returned function code using updated version important change code line changed bind unbind reverted bind unbind bug triaging made difference error unsuccessfully trying pin point problem found jqueryui example using code uitabs hoverintent hoverintent general works although made refactoring using instead bind unbind giving events namespace since issue shows using special event handlers might effect plugins hope report helps save people spending lot time fix similar issues probably needs fixing jquery altough fixed version less performant using jqueryeventdispatch directly nt work done trigger function seems special event", "d": "1/2016"}, {"body": "yeah agree probably critical enough quick release could potentially break plugins chain like one options always set though might worth fixing compatibility though plugins nt anyways", "d": "1/2016"}, {"body": "would like submit patch branch judging might need release anyway good candidate make branches consistent", "d": "1/2016"}, {"body": "added milestone", "d": "1/2016"}, {"body": "yeah", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "current breaks jquery mobile selectmenu datanativemenu false see", "d": "1/2016"}, {"body": "vankampenp related issue already fixed released", "d": "1/2016"}, {"body": "thanks opening issue issue breaking documented behavior want revert change pointed former valid selector yes used work another thing broke qsa path handled manually sizzle anyway latter go qsa fine given inclined leave bug fix", "d": "1/2016"}, {"body": "fiddle", "d": "1/2016"}, {"body": "last jsdom version supporting node lt upgrade jsdom amp try", "d": "1/2016"}, {"body": "mgol using zombie bundles suppose could make custom zombie points", "d": "1/2016"}, {"body": "upgrading zombe seems work node closing", "d": "1/2016"}, {"body": "glad know working perhaps could submit pr zombie tgat update copy jsdom", "d": "1/2016"}, {"body": "sorry nt notice mentioned upgrading zombie jsdom fine thanks info", "d": "1/2016"}, {"body": "thanks opening issue works might something bower version think remember time bower would remove definitely repo", "d": "1/2016"}, {"body": "possible bower looking jquery instead jquerydist need info looking", "d": "1/2016"}, {"body": "change registered location bower maybe need", "d": "1/2016"}, {"body": "bower install different computer seems ok must cache ps c usersvmlfdesktopteste gt bower install jquery save bower jquery notcached git githubcomjqueryjquerydistgit bower jquery resolve git githubcomjqueryjquerydistgit bower jquery download bower jquery extract archivetargz bower jquery resolved git githubcomjqueryjquerydistgit bower jquery install jquery jquery bowercomponentsjquery thanks", "d": "1/2016"}, {"body": "good know thanks", "d": "1/2016"}, {"body": "thanks opening issue environment testing", "d": "1/2016"}, {"body": "node also using jsdom", "d": "1/2016"}, {"body": "see sounds like jsdom nt support however supported browsers wonder works jsdom", "d": "1/2016"}, {"body": "thanks looking quickly timmywil left comment closed ticket jsdom", "d": "1/2016"}, {"body": "also running wondering way change reverted hopefully patch quickly pinning jquery version work", "d": "1/2016"}, {"body": "xjamundx hellatan installing jquery jsdom direct npm dependencies able give specific version via file edit ok see mentioned", "d": "1/2016"}, {"body": "yeah solution stick packagejson", "d": "1/2016"}, {"body": "ya dmethvin pegging jquery works standard", "d": "1/2016"}, {"body": "one report jsdom post link bug report implement api current maintainer said willing implement things needed break jquery edit nvm see reported", "d": "1/2016"}, {"body": "jquery methods designed work dom nodes sure qualified bug gist although possible get text comment node collection via method forcing one collection methods designed anything please note although pass text nodes comment nodes jquery collection way operations nt support explicit note api documentation page contents children methods similar except former includes text nodes comment nodes well html elements resulting jquery object please note jquery operations nt support text nodes comment nodes explicit note api documentation page think better place put information people nt try manipulate text comment nodes could submit pull request notice one answers someone saw docs found answer also suggests inconsistency could solved explicitly ever returning nodetype nodes winnow function code change could consider ensure textcomment nodes consistently wiped collections", "d": "1/2016"}, {"body": "closing issue dup one pr pointing", "d": "1/2016"}, {"body": "thought fixed master though", "d": "1/2016"}, {"body": "looks like thing reporting reading looks like plan ui either push support wait official support nt find searched looks like already addressed closing", "d": "1/2016"}, {"body": "take look console jquery released years ago", "d": "1/2016"}, {"body": "dmethvin beat kand check", "d": "1/2016"}, {"body": "ah dumb mistake thanks", "d": "1/2016"}, {"body": "favor", "d": "1/2016"}, {"body": "", "d": "1/2016"}, {"body": "makes sense", "d": "1/2016"}, {"body": "yepsies", "d": "1/2016"}, {"body": "one concern would bad implementation environment like android really able fix seems pretty improbable", "d": "1/2016"}, {"body": "think makes sense nudge people towards native methods nothing add add warningshim migrate bad missing implementation environment people always shim use older version jquery", "d": "1/2016"}, {"body": "assigning", "d": "1/2016"}, {"body": "btw nt think wait like semver requires bumping minor deprecate imo follow", "d": "1/2016"}, {"body": "please nt spam jquery bug tracker", "d": "1/2016"}, {"body": "setter updates property input element attribute attribute used browsers initialize property get sync changes works correctly", "d": "1/2016"}, {"body": "mgol thanks clarifying", "d": "1/2016"}, {"body": "go please provide test case hosted jsbincom jsfiddlenet thanks", "d": "1/2016"}, {"body": "firing twice see console contrast empty container nothing remove see fire", "d": "1/2016"}, {"body": "see one mutationrecord console fiddles using recent firefox", "d": "1/2016"}, {"body": "see one mutationrecord latest chrome safari see two records edge clear two records would considered wrong something jquery controls", "d": "1/2016"}, {"body": "could edge bug reported sure anything jquery work around", "d": "1/2016"}, {"body": "clear nt see browser called observer callback twice op seemed claiming edge calls observer callback like others two records nt seem spec far tell first record results second synchronous logic standpoint nt seem like two records vs one make difference processing deletes appends", "d": "1/2016"}, {"body": "confirmed edge bug sorry", "d": "1/2016"}, {"body": "hmmm property deprecated removed see looks like docs need changed respect even property still present nt take string selectors passed context would nt rooted context way could cause incorrect results place use arg positional selectors think would best document leave implementation asis", "d": "1/2016"}, {"body": "deprecation aside would nt need able pass context matchesselector work documented rather update loop condition mentioned documentation implies thiscontext used place context context passed since passing context works expected could certainly thiscontext said think people would confused actually working documented since generally nt work documented nt many releases ever would think would better remove thiscontext portion pos creation remove line documentation inconsistent using first selector use context without wo nt etc sure matters end works releases familiar current release schedule obviously thiscontext removed entirely need removed anyway", "d": "1/2016"}, {"body": "discussed meeting today since nt exist anymore need update docs remove mention bug wo nt fixed property disappeared also need make clear arg used positional selectors", "d": "1/2016"}, {"body": "currently context parameter used selectors loop condition loop ends context element reached thereby continuing dom possible issue see context parameter context ancestor element basically used non positional selectors", "d": "1/2016"}, {"body": "yeah true docs need clear used means thinking terms root tree selector strings evaluated agree currently point stop trying match different thing example start closest div div div inner returns start wrong", "d": "1/2016"}, {"body": "context parameter two effects cap upward traversal root positional selectors nonstring selectors another latent bug way first arguable value noted fails element collection descend second seems utterly pointless really nt even tested closest assertions positional selectors without context yield nothing prefer drop parameter completely minimum think positional selector interaction removed", "d": "1/2016"}, {"body": "see cap upward traversal useful context component page could embedded arbitrary markup still cases personally wanted use programming error inside whatever expected find limiting traversal ensures nothing happens nt always best thing debugging smilecat really yeah tried think reason using positional selector without context got nothing possible someone using going break code seems like would good time come agreement put together pr minimum need remove removing whole positional selector exception would nice well would leave limiting upward traversal", "d": "1/2016"}, {"body": "yeah think return empty whenever selector positional rather try get clever second argument feels like underpowered parentsuntil alias eg similar requires wrapping guess okay method also ignores nonancestor halting conditions", "d": "1/2016"}, {"body": "see point making nested div example want point context parameter dom element passing jquery object example effect nonpositional selectors suppose could consider another bug documentation define dom element really bug", "d": "1/2016"}, {"body": "agree error example kingjiv even corrected result", "d": "1/2016"}, {"body": "think already deprecated context argument docs even say removed still around perhaps need actually remove", "d": "1/2016"}, {"body": "nevermind different signature", "d": "1/2016"}, {"body": "per meeting closing favor docs clarification", "d": "1/2016"}, {"body": "well aside removing pos exception", "d": "1/2016"}, {"body": "next step see pr probably", "d": "1/2016"}, {"body": "markelog label nt similarly", "d": "1/2016"}, {"body": "added thank", "d": "1/2016"}, {"body": "updated failures looking green also verified api additions gon na rub eyes", "d": "1/2016"}, {"body": "opened docs issue", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "thank", "d": "1/2016"}, {"body": "misunderstanding docs think docs clear enough part closing change made core", "d": "1/2016"}, {"body": "closing due inactivity", "d": "1/2016"}, {"body": "thanks opening issue works us", "d": "1/2016"}, {"body": "thanks opening issue looks right looks like correctly subtracting negative margin effectively adding margin right", "d": "1/2016"}, {"body": "closing due inactivity", "d": "1/2016"}, {"body": "also seen rather mysterious errors error reporting system luck debugging suspicious may browser extension shenanigans", "d": "1/2016"}, {"body": "getting error reporting system seems stem jquerys find function cc pifantastic dmethvin mgol", "d": "1/2016"}, {"body": "yes indication yet caused jquery code present latest version jquery fact reports stack trace usage inside jquery go search plugins code usages see call immediately afterwards plus reported using jquery released years ago need debug show bug inside current version jquery misuse api ca nt even help given meager amount information provided", "d": "1/2016"}, {"body": "dmethvin queryselectorall afterwards get method code could find get found searched js associated selecting elements jqueryjs", "d": "1/2016"}, {"body": "likely jquery used browser extension found use inside jquery proper could cause stack", "d": "1/2016"}, {"body": "ok suspected extension thanks help", "d": "1/2016"}, {"body": "find system fails take look extensions folder search subfolders likely based direct use afterwards", "d": "1/2016"}, {"body": "hi still fixed example working checked came negative number returned calculation add px em instead subtract number misunderstood ignore", "d": "1/2016"}, {"body": "sounds like counting browsers update nt think going apply global fix sizzle least", "d": "1/2016"}, {"body": "see nt make longer needed milestone cleared amp issue marked", "d": "1/2016"}, {"body": "cleaner approach made failing tests guess big deal", "d": "1/2016"}, {"body": "yeah tests passing clearing milestone", "d": "1/2016"}, {"body": "test added nothing needed fixed adding label", "d": "1/2016"}, {"body": "interested helping please let know changes required stuff new", "d": "1/2016"}, {"body": "markelog mean alias seems alias since event object get fixed whether use", "d": "1/2016"}, {"body": "hey commit makes sure linters run new files commit uses husky gruntnewer smoke tests run gruntnewer seem handle task aliases please tell changes needed new stuff glad chip", "d": "1/2016"}, {"body": "jhanaman thanks help", "d": "1/2016"}, {"body": "jhanaman would mind sending us pr", "d": "1/2016"}, {"body": "unfortunately nt think possible without changing behavior effects slightly different definition hidden selector instance make sure display set none even hidden parent makes sense animations said willing review pr", "d": "1/2016"}, {"body": "timmywil already described exactly source change disagree part", "d": "1/2016"}, {"body": "tried found behavior differences", "d": "1/2016"}, {"body": "effects treating hidden little differently hiddenvisible think valid hiddenvisible technical asking element actually visible page effects really wants check really hidden asking set display none depends slightly different behavior", "d": "1/2016"}, {"body": "intentional whole point consistent visibility ie layout returns nonempty", "d": "1/2016"}, {"body": "timmywil specific customerfacing calls change ways consider detrimental", "d": "1/2016"}, {"body": "specific customerfacing calls detrimental strong animated vs nonanimated hide element hidden parent nonanimated sets regardless effects sets yet set", "d": "1/2016"}, {"body": "makes sense effects would nt care displays parents case parent simultaneously animated parent display changes midanimation think okay animations work differently selections nt really reason changing consistency prefer let animations thing", "d": "1/2016"}, {"body": "ran cases see even nonanimated look computed display ignoring inheritance ancestors whereas check layout boxes still think little bit work rename make clear ignores ancestry therefore distinct clarify disconnected elements right treated hidden csseffects methods nt think case elements element parents unless inline eg former seems part thread sure latter want open new issue specific", "d": "1/2016"}, {"body": "great knock first real quick", "d": "1/2016"}, {"body": "name suggestion maybe", "d": "1/2016"}, {"body": "best three seems describe functionality pretty well", "d": "1/2016"}, {"body": "trust jdalton thoroughly bugged added note roadmap keeping touch edge focusinout closing issue", "d": "1/2016"}, {"body": "cool cool", "d": "1/2016"}, {"body": "discussed meeting investigate might possible picture", "d": "1/2016"}, {"body": "cc jaubourg", "d": "1/2016"}, {"body": "fixed sizzle", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "justinbmeyer canjs still using dommanip since undocumented method planning remove extend hear next day", "d": "1/2016"}, {"body": "yes still using months finally dropping support browsers nt support mutationeventsobservers point wo nt need exposed anymore thank much keeping around", "d": "1/2016"}, {"body": "reopening reminder", "d": "1/2016"}, {"body": "milestone little misleading planning drop ok good reminder bump milestone back later", "d": "1/2016"}, {"body": "expose tickets may need reexposed figured discuss rather reverting commits would easier simply reexpose via something like comment method deprecated removed", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "changed milestone back still going privatized", "d": "1/2016"}, {"body": "dmethvin noticed earlier today need overwrite get hook anytime jquery modifies dom simply exposing method nt work changing nt effect jquery calls anyway get changed called eveywhere hook far important supports inserted removed custom events", "d": "1/2016"}, {"body": "think would need discussed team temporary reprieve need feature hook dom changes well planning anything patch releases nt expecting expose", "d": "1/2016"}, {"body": "temporary reprieve canjs start using mutationobservers able support inserted removed events without hijacking jquery could work around overwriting jquery modifier methods however need able convert arguments fragment", "d": "1/2016"}, {"body": "dmethvin able work around need add back", "d": "1/2016"}, {"body": "dmethvin removed using list somewhere privatized methods", "d": "1/2016"}, {"body": "ones documented apijquerycom fair game search expose find list came earlier dir sibling dommanip buildfragment access swap", "d": "1/2016"}, {"body": "dmethvin yeah get remove semver thanks list", "d": "1/2016"}, {"body": "encourage use ariahidden ties directly actual state element also means element hidden accessible manner hidden gt ariahiddentrue hidden attribute used intention showhide fact hide completely view thus accessibility api intention keep line showhide always used correct choice hide gt display none essentially setting hidden attribute means accessibility api takes ariahiddentrue regards problem responsive perhaps nt want hide certain contexts use showhide well say designed application poorly attempting hide hidden certain scenarios toggling class name something similar control whether visible css makes sense showhide removeset hidden attribute respectively modern equivalent showhidetoggle along force correct usage scenarios used wrong combination responsive css jquery creating inline css modern browsers already support hidden attribute natively front end web developer respect already using resetnormalize css setup includes hidden style rule literally one line css anyway due compatibility zzzzbov example spec citing scenario based allowing hidden tabbed content accessible directly screen readers instead setting interactive manner hidden content relayed screen reader hiding tabbed content content accessible screen readers either use css hides without removing accessibility api hide also provide interactive ariabased controls expose content authoring choice bears direct relevance whether hidden attribute used general", "d": "1/2016"}, {"body": "nettsentrisk front end web developer respect already using resetnormalize css setup includes hidden style rule literally one line css anyway due compatibility except css used normalizecss overridden rule happens higher specificity foo display block brought issue back closed wo nt fix", "d": "1/2016"}, {"body": "yeah think emulates native browser stylesheets also according spec includes note attribute typically implemented using css also possible override using css instance rule applies display block elements cancel effects hidden attribute authors therefore take care writing style sheets make sure attribute still styled expected also suggests user agent style use attribute according inevitably leads using display none important", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "investigate", "d": "1/2016"}, {"body": "removed pos exception think time give another look", "d": "1/2016"}, {"body": "oh yeah awesome good call removing positional selectors", "d": "1/2016"}, {"body": "closing per op evaluation see info", "d": "1/2016"}, {"body": "record breaking change affecting layout table modern browsers", "d": "1/2016"}, {"body": "fdlk open new issue includes test case", "d": "1/2016"}, {"body": "dmethvin created jsfiddle demonstrate", "d": "1/2016"}, {"body": "moved docs issue", "d": "1/2016"}, {"body": "review nt think want break ability promote requests may want document set contenttype avoid", "d": "1/2016"}, {"body": "opened docs issue", "d": "1/2016"}, {"body": "jquerycore added needs review label since releasing soon need decide think wontfix point least blacklist tests android make build pass thoughts", "d": "1/2016"}, {"body": "know stand", "d": "1/2016"}, {"body": "tests blacklisted amp amp closing issue", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "timmywil eta actually appear jquery release right leave unselected people keep reporting browser bug every often", "d": "1/2016"}, {"body": "bzbarsky different issue set dynamic selected state use property instead attribute selected attribute used set default state page loads", "d": "1/2016"}, {"body": "nt see difference behavior though", "d": "1/2016"}, {"body": "dmethvin set default state like element nt interacted yet", "d": "1/2016"}, {"body": "timmywil issue code quoted sets default state dynamic state sets default state option ends selected fact sets dynamic state precisly issue", "d": "1/2016"}, {"body": "bzbarsky expected behavior browsers may differ consider element longer fresh nt checked element still fresh setting default state set dynamic state well tell proper way set dynamic state property", "d": "1/2016"}, {"body": "tell already know point view proper way set state without even involving jquery problem people keep running inconsistency filing bugs browsers even sure arguing fix issue makes change think made asking planned ship", "d": "1/2016"}, {"body": "shipped release", "d": "1/2016"}, {"body": "moving roadmap", "d": "1/2016"}, {"body": "fixed", "d": "1/2016"}, {"body": "commitplease components may perfectly align qunit modules seems error prone currently besides seems working alright unless think specific solution better currently inclined close", "d": "1/2016"}, {"body": "yeah one things nt often enough get right first time nt add modules often", "d": "1/2016"}, {"body": "closing favor tracking roadmap", "d": "1/2016"}, {"body": "moving roadmap sure get", "d": "1/2016"}, {"body": "timmywil closing issue fixing please always make sure remove milestone otherwise get picked changelog totally incorrectly", "d": "1/2016"}, {"body": "mgol good call thanks reminder", "d": "1/2016"}]