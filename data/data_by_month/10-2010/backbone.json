[{"title": "empty string attributes reseted null", "body": "backbonemodel set function overwrites empty string attributes null value reason empty string null backbonejs line val val null", "num": "44", "d": "10/2010"}, {"title": "idea use json default post put sync", "body": "current default implemenation uses jquery ajax call post put objects body model param seems bit hokey send json stringified without parameter name nt rest styled json endpoints expect post put data jquery call option set option set body set jsonstringified text submit pull request agreement big deal override backbonesync easily course", "num": "42", "d": "10/2010"}, {"title": "collection sorting updating view", "body": "started playing backbone wondering best approach sorting updating view put together little demo sure better way alphasort function var alphabetical contactssortby function contact return contactget firstname tolowercase contactlist html", "num": "41", "d": "10/2010"}, {"title": "relations models", "body": "specify relations models query take simple tagging application example one model representing main entity source code snippet photo comment etc one model representing tag query main entities certain tag assigned entities without tag", "num": "40", "d": "10/2010"}, {"title": "backbonesync default looking models property", "body": "online documentation says default rest styled api providers return collections property true could nt find supporting code backbonejs rather seems backbone default expects array top level object returned collections perhaps case pass method overridden added", "num": "39", "d": "10/2010"}, {"title": "validation datatypes properties", "body": "one aspect currently missing backbonejs easy way property validation declare required properties model datatypes trigger error data view nt pass validation etc", "num": "38", "d": "10/2010"}, {"title": "configurable id field name", "body": "orms mongoid example use id instead id would accept patch support configurable id field name", "num": "37", "d": "10/2010"}, {"title": "ability circumvent models namespacing requirement backbonecollectionfetch", "body": "hi like idea use models namespace sometimes want integrate existing json api either uses another key plain array would nice ability somehow specify propertyfunction collection creating eg declaring responsekey propertyfunction used determine response model data much like current urlproperty current solution monkeypatch fetchmethod specifically successcallback nt pretty example var c backbonecollectionextend responsekey data var backbonecollectionextend responsekey function response return response array could also go deeper eg responsedatadocuments simple fix implement guys think", "num": "36", "d": "10/2010"}, {"title": "single page web applications view features", "body": "recently working making singlepage web application spwa writing js framework found backbone love way works short able spwa default views hide destroy ability subviews something interested backbone supporting happy brunt maybe creating addon module", "num": "35", "d": "10/2010"}, {"title": "thisel existing elements", "body": "even specify el one still gets created ie var myview backboneviewextend el body myview new myview myviewrender alert says object htmldivelement instead expected jquery object think way views instantiated change backboneview look thisel defined rather thisoptionsel works expected", "num": "33", "d": "10/2010"}, {"title": "specific reason filtermaprejectetc nt return new collections", "body": "would expect methods return new collections generally map something return new type something example would expect collection design aside really wish github would make mailing lists forums projects types issues would nt clog issues page", "num": "32", "d": "10/2010"}, {"title": "nt thishandleevents called backboneviewprototypeinitialize", "body": "even constructor render ca nt think use case would nt want bind event handlers creation render feel like forced write little stubs look like time nothing else initialize", "num": "28", "d": "10/2010"}, {"title": "collectionfetch sends models server", "body": "noticed collection many models collectionfetch run sends models server params reason large collections get request gets large", "num": "27", "d": "10/2010"}, {"title": "better validation failure handling", "body": "right save model way display validation error bind error handler model object inconvenient say least able modify instance model two places page two views would nt want views show error whenever error occurs want bindunbind error handlers model object whenever switch contexts two views local version backbonejs added simple line allows something like mymodelsave alert mymodelerror error binding way would rather difficult thoughts", "num": "26", "d": "10/2010"}, {"title": "urlhandling enhancements saving models", "body": "collection model associated neither specify url property however try save model uses url property collection get url resembling put something expecting obviously collection ca nt infer name think underscorejs throw error docs mention url property required order model save correctly side note source much confusion url link collection actually links model url collection url summary saving model component generated url undefined error thrown update docs accurately characterize importance collection url update docs collection url link left navigation points collection url one would expect thanks", "num": "24", "d": "10/2010"}, {"title": "app specific base classes", "body": "questionproblem probably due complete deficiency javascript skills hopefully know answer want create base model sets conventions application create individual models base simply overrides needed appviewmybase backbonemodelextend want appviewnewmodel appviewmybaseextend get error extend nt method appviewmybase simple way achieve thanks time", "num": "22", "d": "10/2010"}, {"title": "models direct access views", "body": "like see separation application layers looking documentation seems like models directly access views even insert content problem want swap view components also need make changes model code imo models know little possible rest system changes occur solely events dispatched data changed ps nt much chance seriously investigate framework thoughts based reading documentation initial discoveries creating couple extremely simple hello world apps possible misunderstanding something", "num": "21", "d": "10/2010"}, {"title": "nested setters", "body": "removed", "num": "17", "d": "10/2010"}, {"title": "nt business logic controller data model", "body": "trying understand thinking behind project structured part really likes seems exactly looking another part ca nt get fact nt seem clean separation model controller maybe valid js framework sure could clarify thought thanks", "num": "16", "d": "10/2010"}, {"title": "create separate modules syncnetwork code eventdata binding code", "body": "like propose break functionality models collections modules event handling data binding modules network access synchronization would allows us potentially make databinding capabilities model available objects framework think following modules might make sense backboneobject base object includes event binding capabilities backbonemodel backbonecollection includes event binding collection management capabilities current bacbonecollection backbonenetwork includes network synchronization serialization code backbonemodel composed backboneobject backbonenetwork backbonestore composed backbonecollection backbonenetwork would allow databinding become lower level concept framework allowing us potentially utilize viewscontrollers well models via including backboneobject thoughts structure", "num": "15", "d": "10/2010"}, {"title": "documentation update", "body": "introduction begins working web application involved lot javascript one first things learn involves rather involved thanks work level documentation much appreciated", "num": "14", "d": "10/2010"}, {"title": "thistemplate undefined", "body": "hi testing docs examples browser always get thistemplate undefined calling render view var bookmark backboneviewextend render function thisel html thistemplaterender thismodeltojson return thought template come underscorejs", "num": "10", "d": "10/2010"}, {"title": "make comparator method behave like arraysort", "body": "congrats backbonejs looks promising one point critism tough backbonecollectioncomparator method looks bit weird would appreciate comparator method defined backbonemodel works like javascript array sort gets model instances b comparison returns gt b b lt b would allow elaborate comparison functions eg take multiple properties account", "num": "9", "d": "10/2010"}, {"title": "docs rendering suggestion", "body": "picked backbone tonight working applying basic concepts existing project line code appears twice docs particular inside method example question pattern used achieve rendering example class nt implement attribute method made couple assumptions hacked together working solution created object literal variable storing erbstyle underscore template method receives attributes model particular template renders using underscore method similar pattern documentcloud uses also html exist inside js files pulled partials via ruby pattern html delivered browser would contain markup task instead would delivery json javascript object would render element add event triggered mention bootstrapping page docs wondering refers rendering markup generating javascript delivering model data html tag similar way bind element preexists dom existing project using backbone yet render markup existing objects manipulate model corresponding views via event triggers would happy publish full sample app get clarity bestpractice patterns developed around great library", "num": "8", "d": "10/2010"}, {"title": "simple example app would helpful", "body": "realize exposes stupidity comes clientside programming bit hard time figuring fit pieces together think shipping small example showing one might put pieces together would help quite people example good practice create global instance collection models reference collection instance seems bad better pass collection parameter every model method seems tedious recommended way kicking whole process populating initial collections bunch questions like seeing simple example would probably quickly answer", "num": "7", "d": "10/2010"}, {"title": "typo docs", "body": "question frequently asked three projects apply general modelviewcontroller principles javascript applications however nt much basis comparsion besides looks like great project", "num": "4", "d": "10/2010"}, {"title": "backboneview call init method exists", "body": "hi adding line thisinit amp amp thisinitapply end backboneview able declare run init function template like var taskview backboneviewextend tagname li classname task render function thisdomtext text thismodelget text thismodelget isfinished thisdomcompletelink hide thisdomincompletelink show else thisdomcompletelink show thisdomincompletelink hide return init function thisdom completelink thismake classname complete href complete incompletelink thismake classname incomplete href complete removelink thismake classname remove href remove text thismake span classname tasktext thisel append thisdomtext append thisdomcompletelink append thisdomincompletelink append thisdomremovelink thishandleevents events click complete setfinished click incomplete setunfinished click remove remove setfinished function thismodelset isfinished true return false setunfinished function thismodelset isfinished false return false remove function return false way nt need dom creation render function could called multiple times guess could use templating framework instead thismake would still useful function callback place run logic needs run think idea brian", "num": "3", "d": "10/2010"}, {"title": "inside viewrender set model", "body": "must something wrong trying make little demo see backbone basing sample code get uncaught typeerror call method tojson undefined see bind change taskviewrender call setting context model alert confirms seems like least argument render function get access view maybe going wrong way see sample code thanks brian var task backbonemodelextend text isfinished false var taskview backboneviewextend tagname li classname task render function model alert model model ca nt call render referencing view thisel html thistemplaterender thismodeltojson return init function init var tasks new backbonecollection tasksbind add function task var taskview new taskview model task id task taskcid taskbind change taskviewrender tasksadd new task text task new task text task taskseach function task taskset isfinished false", "num": "2", "d": "10/2010"}, {"title": "backbonemodeltojson nt actually convert json", "body": "function name misleading would expect jsonstringify thisattributes rather clone awesome work btw", "num": "1", "d": "10/2010"}, {"body": "think great idea initially concerned compatible would send fulljson requests language like php ca nt even handle http put configurations likely backends able accept bodied requests", "d": "10/2010"}, {"body": "good point guess nt realize rare clean rest endpoints really trying play java framework nice clean rails like web framework perfect almost every way nt support json body mappings java pojos maps params since ghandi said change want see world really nt use quote keep projects", "d": "10/2010"}, {"body": "ok gist overrides backbonesync want", "d": "10/2010"}, {"body": "hold minute reopening ticket like servers nt put delete nt think would nice let correct default provide fallback legacy servers", "d": "10/2010"}, {"body": "perfect want submit pull also get rid placing model property called model imo confusing nt function", "d": "10/2010"}, {"body": "working send post put delete set param send model param json string setting either send body otherwise body sent applicationjson right", "d": "10/2010"}, {"body": "think need change name existing option match would look wacky plan sounds good except option sets right", "d": "10/2010"}, {"body": "right affects encoding pull request sent nt modify rails example nt quite sure look", "d": "10/2010"}, {"body": "patch looks gorgeous nicely done still want investigateexperiment bit merging things like nt instill great confidence especially bottom page", "d": "10/2010"}, {"body": "think ok default approach backbone easily supported rails rails clean restful route agreed verified creating sample rails project put body applicationjson works expected rails issue referenced bug occurs emulating http put post param sending body applicationjson backbone would equate setting flags correct backbone default put json approach work fine rails rails emulatehttp flag work well however setting flags rails instance would route correctly without patch seems pretty good", "d": "10/2010"}, {"body": "couple things could help emulators add httpxhttpmethodoverride header whenever flag set solves rails routing bug might help servers flags set stringify whole body json including method param instead model param today pass jquery ajax call formurl encoded believe rails expects contenttype json requests make tweaks agree", "d": "10/2010"}, {"body": "querying logic part interface application number ways handle change collection returns include current search query next time models replaced models match current search useful collections contain search results run regular jquery ajax call collection results happen method add collection like want include tags nested response photos model pull turn tag objects thoughts", "d": "10/2010"}, {"body": "yes got quite right added instead assuming namespace point bit documentation needs updated", "d": "10/2010"}, {"body": "thanks jeremy", "d": "10/2010"}, {"body": "cheers", "d": "10/2010"}, {"body": "spot method handles aborting save triggering event observed model collection level hopefully works specifics best validate models left define nt want clutterupstraightjacket core backbone bunch static typing attributes considering enforced schema particular mode attributes begin said think enhanced validation usual suspects etc would make great backbone plugin", "d": "10/2010"}, {"body": "thanks pointing method schema looking way define expectedrequired attributes backbone model explicitely looking todo example app spot comments see attributes method expects comments often outofsync actual code prefer model signature eg required attributes listed would also nice specify default values missing attributes", "d": "10/2010"}, {"body": "yes couple caveats would awfully nice see jsperfcom tests change make sure instead nt hurt performance much would configurable globally per collection per model sure easier map implementation", "d": "10/2010"}, {"body": "last point good one maybe config option default backbonesync implementation", "d": "10/2010"}, {"body": "mongoid otherwise work seamlessly existing yes making configurable backbonesync sounds nice wrapping function also pretty easy var oldsync backbonesync backbonesync function method model success error modelid modelattributesid modelid success var oldsuccess success success function resp respid respid oldsuccess resp oldsync method model success error could similar mapping entirely serverside", "d": "10/2010"}, {"body": "sure easy point general interest default implementation really sure common enough issue bother know mongid one couchdb orms issue", "d": "10/2010"}, {"body": "alright let leave open see folks say", "d": "10/2010"}, {"body": "really like think going support functions perhaps implement method overridable perhaps also remove prefix default originally added futureproofing safety definitely common case need thoughts", "d": "10/2010"}, {"body": "yeah sounds like good solution another idea would able somehow perhaps backbonesync define collections models parsed retrieved getting multiple models one response could actually parse time thus using one ajaxrequest something like whenever request documents fired mydocumentsmodel well mytags would get refreshed idea would need better api work practice think could neat feature think", "d": "10/2010"}, {"body": "patch addresses implemented model collection assumes server returns direct attributes direct array models instead namespaced closing ticket documented released part backbone", "d": "10/2010"}, {"body": "terrific", "d": "10/2010"}, {"body": "possibly probably great place start would design backbone plugin feel free extend views much see fit way able start using see merging seems like good fit", "d": "10/2010"}, {"body": "awesome start repository get work obviously input anyone would greatly appreciated", "d": "10/2010"}, {"body": "leave ticket open post examples code snippets like go along folks able comment", "d": "10/2010"}, {"body": "subviews willing guess continue writing view classes wrap presentation elements going want stay dry", "d": "10/2010"}, {"body": "would mind giving idea like see implemented", "d": "10/2010"}, {"body": "afraid sure mind view enhancements mentioned top ticket first two pretty easy hide function thisel hide destroy function thisel remove subviews whole nother worms nt know much could look like sorry", "d": "10/2010"}, {"body": "cool wanted make sure gave people plenty room input probably start working let people critique thanks", "d": "10/2010"}, {"body": "actually think subviews rather simple idiom wise sure implementation thoughts", "d": "10/2010"}, {"body": "think talking nested child views subclasses general views something already example currently heirarchy backboneview dcuidialog dcuiaccountdialog dcuiuploaddialog dcuiembeddialog dcuitimelinedialog", "d": "10/2010"}, {"body": "sorry sure nt working thought rather silly nt", "d": "10/2010"}, {"body": "yeah intended would probably better called childviews subviews views attached controlled toplevel views working couple days repository fully working example application application simple contact manager working getting github page try online always clone run locally child views implemented controller class think covers ground childviews would step right direction", "d": "10/2010"}, {"body": "working example", "d": "10/2010"}, {"body": "nice could even persist changes address book using localstorage backbonesync nice refreshcapable demonstration also would really neat search box filtered contacts type spwa project seems like main component notion controller routes hashurls actions via events something considered adding backbone initial release decided include one hand urlrouting usually quite small part clientside application plenty existing modules given success sammyjs people expect urlrouting provided folks think would make sense add capabilities similar chris", "d": "10/2010"}, {"body": "bunchesofdonald awesome including something like backbone personally would prefer defining routes via regexp specifying parameters interpolation foo name project called pineapple similar things backbone ultimately backbone came found prefer backbone experimenting ideas project one thing think pineapple pretty well basically define routes event event think event nice gets overlooked lot looks like define route routes defined strings get coerced regexp easier escape backslashes time appdefineroute foo w function course backbone would probably use oo approach rather closure style pineapple think two important things want get across awesomeness regexp routes using regexp groups rather foobar param style well entrance exit hooks ben alman jquery hashchange good choice opinons come get chance really look code", "d": "10/2010"}, {"body": "also able something like must", "d": "10/2010"}, {"body": "exactly looking played around view manager framework found backbone complemented nicely jquery mobile seems nice way dealing spwa currently evaluating may worth taking ideas well sub views found views nt leave history state usually required annoying using hash change event navigation agree hash change logical semantically correct method dealing nav enter exit methods would useful allow setupcleanup animations", "d": "10/2010"}, {"body": "nice demo really fills holes far common use cases documentation also excellent especially like backbonespwacontroller hashevent router xejs templates could definitely see something like useful apps however like see backbone handling handleevent delegation behind scenes", "d": "10/2010"}, {"body": "fitzgen definitely think regex way go routes stands get running things way gotten put together really like exit idea would much better thishideall view could decide wanted lost focus also need redirect rather locationhash owz really looked jquery mobile quick glance looks like trying aim somewhere inbetween something like cappuccino sproutcore cheaproc thanks bit kludgy parts", "d": "10/2010"}, {"body": "jashkenas great ideas example course would big backbone something like", "d": "10/2010"}, {"body": "backbone controller would useful", "d": "10/2010"}, {"body": "example updated suggestions jashkenas much better way thanks thinking routerenterexit thing think come elegant solution early stages would think dropping controller class favor router class make views subscribe router events via regex get event hash subscribed entered well exited router class would similar backbone events saves us nasty code controller thishideall thisgetview etc think also helps complexity child views view would know current state application could respond accordingly", "d": "10/2010"}, {"body": "make views subscribe router events via regex get event hash subscribed entered well exited feels much natural routes manage views based enterexit events rather views subscribe certain route events think would make views much think views fine others feel", "d": "10/2010"}, {"body": "worth look way sammyjs handles issues also useful snippet posted back jashkenas", "d": "10/2010"}, {"body": "poking around bit think still pretty skeptical including router core backbone dealing fauxurls important part clientside app small one documentcloud probably models views urlroutes singlepage apps like todo list example nt benefit routes example check wild section sammy wiki one three sites actually seems use hashurls fashion one effectively static html site start might make sense plugin starters see many folks find useful", "d": "10/2010"}, {"body": "probably good way handling right simple applications page reload ok probably would nt benefit time probably sites also think single page applications way web going go makes much desktoplike application also sammy nt really provide data modeling really views backbone would consider huge roadblock spwa", "d": "10/2010"}, {"body": "started work mostly lots code borrowed based modular without http verbs stuff found mor disturbung helpful client side try add tests docs real example application week end tchakbackboneplugins moment routes handling actions filters plan add views integration lately", "d": "10/2010"}, {"body": "thanks reporting patch fix problem refactor constructor little nicer test closing ticket", "d": "10/2010"}, {"body": "figured series underscore functions return different types things useful return naked array filter reject models actually methods would make sense return collection map collection books expect array strings collection models containing single attribute finally collection constructor function might sort important side effect ajax call performs ca nt call willynilly", "d": "10/2010"}, {"body": "makes perfect sense clears lot thanks", "d": "10/2010"}, {"body": "good question handleevents used use bind delegate wait html rendered thisel calling current situation barring change events ie could otherwise always call constructor assigned hmm folks think safety desirability", "d": "10/2010"}, {"body": "one way get around creating class called say var handledview backboneviewextend initialize function thishandleevents return var handledviewsubclass handledviewextend render function render el knowing events bound kind think keeping explicit good sometimes want bind events model saves like example progress bar confirmationclose model saved", "d": "10/2010"}, {"body": "play devil advocate could easily create subclass example calling handleevents could default think really easy common case binding event handlers immediately", "d": "10/2010"}, {"body": "would say would nice convenience automatically call long called thisinitialize nt see calling immediately problem nt want someone custom event handlers added removed inside handleevents would nt chance added constructor", "d": "10/2010"}, {"body": "nevermind last comment deleted bgrins good point currently way add constructor unless repeat whole constructor call initialize question would custom event handled object", "d": "10/2010"}, {"body": "internet explorer always stickler ie nt ever bubble change events means bound directly element question instead delegated change event call handleevents render element available initialize sure edit ticket bunch confusion reference", "d": "10/2010"}, {"body": "problems missing calling", "d": "10/2010"}, {"body": "yall think limiting use exclusively documenting trouble ie events bound manually call automatically defined", "d": "10/2010"}, {"body": "meant bring earlier think ie issues submit events ran one months ago sure jquery solved issue suspect think rather say ie sucks change events know work around would better provide consistent interface browsers declare documentation change submit events supported browsers thisevents want bind type event render time last thing want start worrying making high level js app cross browser compatibility would rather go lowest common denominator mental overhead frequently rebinding ie share knowledge necessary", "d": "10/2010"}, {"body": "full list events need deprecate ie delegation perhaps name function renamed", "d": "10/2010"}, {"body": "heading bikeshedding territory quick digress decided would like call method whatever named constructor", "d": "10/2010"}, {"body": "patch rarely call removed places used call manually documentcloud workspace everything working smoothly closing ticket go part backbone", "d": "10/2010"}, {"body": "awesome work", "d": "10/2010"}, {"body": "bug fixed latest version backbone grab homepage data ever sent requests", "d": "10/2010"}, {"body": "oh awesome nt realize updated since last night thanks quick reply", "d": "10/2010"}, {"body": "completely agree take good look patch ideally add event listener model entire collection way provide general catchall case failed validations server requests particular view better display error able override suppress event specific cases ideal patch standardizes arguments callbacks makes pass error callback callback used instead general event example look like sound like plan", "d": "10/2010"}, {"body": "means bind different signature validation errors callback eventname argument unless validation error model error argument little skeptical guess expecting one two anything long backwards compatible existing bind method changing signature event type bad idea still sort prefer setting error property model solution provided sufficient well error property way little simpler imo downside polluting model object ever check save set failed returned false anyway nt see actual problems lastly model passed error callback example nt error callback already getting called context model perhaps consistency binderror version", "d": "10/2010"}, {"body": "nope signatures roughly error objects may differ modelbind error function model error modelsave null error function model error better agree slightly verbose solution nt think setting magic property sticks around fact clutter things really acceptable api models first argument error callbacks may generic error handler bound specific model", "d": "10/2010"}, {"body": "alright buy modelshouldbepassedin argument meant differing callback signatures modelbind error function model error also modelbind change function eventname want say arguments callback depend event", "d": "10/2010"}, {"body": "arguments callback get passed depending event trigger subsequent arguments forwarded along however terms builtin backbone events argument signatures relatively similar never passed first argument always every event second argument passed two cases error events second argument error object change key events second argument new value key", "d": "10/2010"}, {"body": "hmm okay withdraw statement", "d": "10/2010"}, {"body": "still prefer setting toplevel attribute model instance example extra attribute model instance would set validation accessible via since stored internal attribute accessible doubt would considered polluting model object plus side filter objects collection easily say sending persistence layer", "d": "10/2010"}, {"body": "thanks excellent ticket patch addresses three counts let know think", "d": "10/2010"}, {"body": "great looks good", "d": "10/2010"}, {"body": "backbone properly sets prototype chain able extend subclasses model view collection far see fit nt working something screwy going example hope helps check typos code", "d": "10/2010"}, {"body": "yep bug sorry interruption thanks fast response", "d": "10/2010"}, {"body": "entirely much like model view layers connected disconnected models reference specific view default although certainly pass one choose one end extreme models views separated entirely controller creating data object view render inside controller var data title modelget title author modelauthorfullname viewrender data model reference view corresponds onetoone backbone tries provide minimal set groundlevel functionality undogmatic possible respect structure clientside code", "d": "10/2010"}, {"body": "agree frameworks nt completely prescribe structure code think whole point extent like application frameworks instead using custom mvc implementation provide common structure applications allowing developers quickly get speed projects mention another ticket mvc vague implementations vary wildly however key concept pattern decouple code allow modular approach development creating concrete references views inside model layer makes extremely difficult imo least discouraged framework architecture", "d": "10/2010"}, {"body": "agree frequent pattern onetomany model views cases often model rendered partially represented many different pieces ui model knows nothing views naturally contain references model serves data source particular piece documentation like see changed clarified make point clear", "d": "10/2010"}, {"body": "cancel", "d": "10/2010"}, {"body": "empty", "d": "10/2010"}, {"body": "sorry accidently committed without text fixed", "d": "10/2010"}, {"body": "notion mvc muddy muddy water original guicentric idea contorted fit structure htmlgenerating web applications data access object model layer divided remerged django view rails controller backbone applies general modelviewcontroller style javascript projects precise terminology nt dogmatic general outline models contain data business logic operates data controllers specified backbone arbitrary js objects created orchestrate interactions models views views tied specific dom elements handle updates html well interactions coming dom events make change either alter model directly go controller function templates hold actual html sound good", "d": "10/2010"}, {"body": "answer original poster question absolutely model data business logic properly belongs controller job coordinate view model", "d": "10/2010"}, {"body": "backbonecollection model would considered controller frameworks behavior similar cocoa arraycontroller facilitates event forwarding set data inform views membership changes partly like see data binding concept separated concept model mvc sense see issue", "d": "10/2010"}, {"body": "ah opposite impression think important emphasize functionality labeling almost called traditional gui mvc controllers handle input events views display ui means javascript templates would view get different people commenting ticket probably slightly different takes concept", "d": "10/2010"}, {"body": "let talk goals custom events indeed separate module already mixed collection views bind fire events see fit talking notion attributes set get previous changedattributes goodies entail point things effectively model accomplish composition instead mixing view model property prefer would need concrete use case set clear examples backboneobject would improvement two options addition would nt make sense outside notion model simple convention passing along attributes object method choosing without model attributes much meat alternative choosing composition instead mixing seems logical", "d": "10/2010"}, {"body": "main goal mind make functionality key value binding objects collections separate concept data network sync layers application point building event binding functionality objects via composition valid solution although still wonder would nt handy base level object provided functionality classes framework also use backbonemodel provide event binding another object via composition network synchronization code included seems unnecessary state involved purely clientside overall like idea separating lower level modules function building complex classes composition modules", "d": "10/2010"}, {"body": "problems specific case separating databinding idea model idea databinding function intimately tied model function uses determine attributes valid also special case properties model concern certainly makes sense models make sense arbitrary objects special property figure way solve issues kvo case build mixing kvo module think would nice think current network code stay model entirely modelspecific", "d": "10/2010"}, {"body": "yes separating kvo behavior really desirable part separating network code model probably premature point although road could envision advantageous framework used different types contexts different types backends", "d": "10/2010"}, {"body": "ticket around bit going close time let reopen patch cooked accomplishes separation along clear usecase want mix something nt represent", "d": "10/2010"}, {"body": "fixed thanks", "d": "10/2010"}, {"body": "ok sorry thought template already implemented implement", "d": "10/2010"}, {"body": "use template underscorejs", "d": "10/2010"}, {"body": "added information documentation hope clears things", "d": "10/2010"}, {"body": "added note documentation explains rationale current behavior think much nicer api sort commonly referred certainly use arbitrary comparison functions take multiple properties account comparator function return thisget lastname thisget firstname comparator function return thisget posy thisget posx", "d": "10/2010"}, {"body": "thanks detailed ticket things mentioned omissions documentation tried fix patches take look andor homepage let know questions nt answered", "d": "10/2010"}, {"body": "thanks additions docs updates clarify things especially templates views html live partials usual pulled js context via jammit similar library example using passing js array makes sense curious however would tie model updated gist created function named initializes new model renders view appends whatever selector also event instance model resulting code event callbacks performing operation independently example callback calls task similarly bind callback collection pattern could call would perform operations callback albeit implementation sparse contrived point feel comfortable enough moving forward creating small app throw github learning exercise gist", "d": "10/2010"}, {"body": "usually create view particular model tracks pass create view yes intended optimized rendering large list items added changed many efficiently call touch dom item instead get single event single dom update bring everything date perhaps understanding question", "d": "10/2010"}, {"body": "think hovering around answer vague look callbacks gist performing essentially operation callback touching dom item rather performing single dom update updated version callback perform single dom update tasksbind refresh function tasks var els taskseach function task var view new taskview model task viewrender tasksbind change viewrender elspush viewel body append els nt like approach callback would contain near identical implementation callback difference collecting objects array performing single dom update vs touching dom item dry example tasksbind add function task var view new taskview model task id listtask taskcid taskbind change viewrender body append viewel viewrender tasksbind refresh function tasks var els taskseach function task duplicate var view new taskview model task id listtask taskcid body append els perhaps dry approach function viewfortask task return new taskview model task id listtask taskcid tasksbind add function task var view viewfortask task render body append viewel still duplicate taskbind change viewrender tasksbind refresh function tasks var els taskseach function task var view viewfortask task render body append els last example still duplicating handle scenario need initialize sense new instance model via adhoc vs bulk insertion", "d": "10/2010"}, {"body": "initialize view using function way nt bind model way two places var taskview backboneviewextend initialize function thismodelbind change thisrender new taskview model task render bound task change event ideally functionality view model collection set regulated within class definition injected outside", "d": "10/2010"}, {"body": "hmm going back history see demos removed particular reasoning behind", "d": "10/2010"}, {"body": "nice getting started example big missing piece working one actively let leave ticket open get released answer specific questions global versus specific collections depends using documentcloud global collection called contains documents currently present page however document collection notes lazy loaded retrieve titles notes first document could write recommended way initially populating collections bootstrap json models know need initial page load lazyload rest ondemand perhaps using application rails partial called bootstraphtmlerb includes lines like one projectsrefresh lt projectstojson gt", "d": "10/2010"}, {"body": "also default models added automatically linked collection", "d": "10/2010"}, {"body": "great info thanks working demo", "d": "10/2010"}, {"body": "agree really want give backbone try client side webgame nt know start initial html homepage display short presentation forms sign insign forms created attach event handlers instantiate player sign playersession sign object top page happened submit form change interface display map yes getting started way things would useful backbone seems cool host example apps supposed built ones creating tool", "d": "10/2010"}, {"body": "saw link sample app using backbone sinatra", "d": "10/2010"}, {"body": "sample app would awesome took look sinatra one bgrins posted pretty simple something involving many views multiple collections models would great figuring things go love see best practice type tips showing documentcloud uses backbone", "d": "10/2010"}, {"body": "solid example app building something already want see approach lines intended used", "d": "10/2010"}, {"body": "know substitute links real example apps meantime added quick example models homepage hopefully least little helpful", "d": "10/2010"}, {"body": "also interested relationships handled eg restresponse follows thus document would tagsproperty also want collection tags currently loaded documents contain eg showing list tags could used filtering documents would require either manually parse entire json response populating collections map documents refresh create tags imagine tags would tens thousands loading certainly nt good choice due memory bandwidthlatency best way solve types nn relationships", "d": "10/2010"}, {"body": "one nice way solve things lazyloading nt need render tags documents defer loading open document need show initialize function thistags new tags ensuretags function callback thistagslength return callback thistagsfetch success callback callback actually renders tags approaches small number distinct tags large number documents many taggings nice model top level collection document refer tags nt map documents possible tags readytohand alternatively tens thousands distinct tags probably better download client instead autocomplete filtering tag names ajax request like would autocomplete words dictionary webapp example tag names come server turn real find useful course probably nt want show items paginating use represent current page tags documentcloud collection works searching entire archive tens thousands potential results stores displays ten time expanded mode thumbnail mode summarize best way solve relationships depends data good choices nested objects attributes containing arrays json objects referencing external collection databasestyle lazyloading collections upon first request caching data clientside using collection transparent proxy thin slice giant set models server", "d": "10/2010"}, {"body": "frekw something like sure would scale fit needs working well far", "d": "10/2010"}, {"body": "jashkenas well think first option need still would nt able way pretty without refresh callbacks etc collection tags exist loaded documents apptagsfind tags documentsfirst tags find referencing tagsinstance kyleslattery quite liking solution look", "d": "10/2010"}, {"body": "sure model one collection like either direct reference making copy", "d": "10/2010"}, {"body": "happy say finally really nice example app good tinkering might discussion afternoon closing ticket", "d": "10/2010"}, {"body": "awesome thanks", "d": "10/2010"}, {"body": "closed small typo", "d": "10/2010"}, {"body": "glad like thanks reporting issue", "d": "10/2010"}, {"body": "thanks note fixed master", "d": "10/2010"}, {"body": "yes absolutely issue talked internally want address currently specify function call become constructor subclass problem need call order things continue work example would look like course calling like really nasty alternative would propose convention method called model collection view think preferable function called", "d": "10/2010"}, {"body": "definitely like declare initialize function using call seems much simpler keeps users library needing understand internals used always use type thing real reason taking close look naming conventions may preferable since use instead instead best keep things consistent", "d": "10/2010"}, {"body": "think unless every member function like basejs find typing whole lot anyway may better hide nature javascript behind method first principles argument anyhow little framework work method like convenient majority time get inheritance chain gets little messy line example parent class sets method later child class nt need use functionality pain reconcile guess comes constructor initialize behavior stick state even view interested answers bc sure", "d": "10/2010"}, {"body": "yeah nt really consider issue inheritance guess pattern would handle gracefully exactly would handle case describe run constructors starting child class really sure best answer last question either long documented override constructor least way get around first thing wanted could nt", "d": "10/2010"}, {"body": "pushed patches add function called end constructor functions model collection view take look code docs looks groovy push point release evening ps overridden like called way would", "d": "10/2010"}, {"body": "realized came little strongly really meant point edge case watch pretty great idea thinking something like really kinda wrong something initialize anyhow would probably better go mixins anyway like backboneevents looks good", "d": "10/2010"}, {"body": "awesome pulled code works like charm understand inheritance bit correctly wanted superclass initialization code run likely would would need call inside nt want code run could either declare childclass would declare include call superclass seems like good tradeoff get rid boilerplate common case require uncommon complicated case already example project help docs working something nt know good example", "d": "10/2010"}, {"body": "yeah add initialize method nt call super class initialize method would inherited superclass otherwise", "d": "10/2010"}, {"body": "hi brian edit question format code correctly drop gist take look thanks", "d": "10/2010"}, {"body": "yeah updated", "d": "10/2010"}, {"body": "going wrong way render function refers probably want bind passing callback try changing line correct perhaps implement convenience binding functions beyond underscore provides", "d": "10/2010"}, {"body": "ah yeah never used underscore nt even think suggest change docs search modelbind change viewrender include bind call would really nice viewrender always called view context since unlikely would want anything else also docs search render handleevents section render function thanks quick response keep going demo let know else fail", "d": "10/2010"}, {"body": "thanks tips patch", "d": "10/2010"}, {"body": "afraid way native api works agree name less ideal patch improves documentation", "d": "10/2010"}, {"body": "ah course doc makes clear", "d": "10/2010"}]