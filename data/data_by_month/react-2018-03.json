[{"title": "possible regression dev mode", "body": "example presents huge performance drop react react investigated noticed several things perfomance drop visible using development bundle related styledcomponents simple div presents problem tried investigate performance tab chrome dev tools noticed get react measures even without reactperf react tree reconciliation seems long know big problem looks weird decided share twitter gaearon invited submit issue", "num": "12502", "d": "3/2018"}, {"title": "warning ie using reactfragment", "body": "want request feature report bug bug current behavior react using ie gives following warning steps reproduce use create new react app add example import react component react import logo logosvg import appcss class app extends component render return welcome react get started edit save reload export default app open app ie open ie dev tools refresh browser see mentioned warning message console window warnings chrome firefox edge expected behavior warnings shown versions react browser os affected issue work previous versions react react browser ie os windows", "num": "12500", "d": "3/2018"}, {"title": "exactly new context api flow typed", "body": "", "num": "12499", "d": "3/2018"}, {"title": "uncaught error unexpected object passed reacttestinstance constructor tag probably bug react", "body": "hello testing getting warning use case wanted render react test renderer ex component another reactdom renderer seem work wanted use provider containers thought create objects state could shared across renderers fiber containers workaround thoughts definite behaviour following warning eventually get error message believe related warning thank guidance", "num": "12498", "d": "3/2018"}, {"title": "error boundary bug", "body": "want request feature report bug bug current behavior internal error raised error tries propagate uncaught typeerror read property return null uncaught typeerror read property return null renderroot performworkonroot performwork performsyncwork requestwork scheduleworkimpl schedulework schedulerootupdate updatecontaineratexpirationtime objectupdatecontainer expected behavior error propagate error boundary versions react browser os affected issue work previous versions react", "num": "12497", "d": "3/2018"}, {"title": "react deprecated componentwillmount ssr", "body": "hi help understand refactoring deprecated componentwillmount recommended replace componentdidmount method called serverside static getderivedstatefromprops access particular instance put code must running sides initialization instance", "num": "12495", "d": "3/2018"}, {"title": "invalid dom property mean", "body": "using reactsafehtml render html editor website thing renders causes invalid dom property mean error use component nt affect rendered iframe border however throws warning", "num": "12494", "d": "3/2018"}, {"title": "bug new context api work reactdomunstablerendersubtreeintocontainer", "body": "want request feature report bug bug current behavior consumer rendered invokes reactdomunstablerendersubtreeintocontainer invokes render function default context value ignoring value provider current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example open example codesandboxio click increment statecontextvalue gt state change childcomponent rendered directly show click render placeholder gt childcomponent rendered unstablerendersubtreeintocontainer show actual result childcomponent rendered unstablerendersubtreeintocontainer show default value specified createcontext expected behavior unstablerendersubtreeintocontainer pass context consumer versions react browser os affected issue work previous versions react react chrome windows", "num": "12493", "d": "3/2018"}, {"title": "new ref api reactreconciler", "body": "implement use new ref api custom renderer eg reconciler almost simple nothing tutorial thanks", "num": "12492", "d": "3/2018"}, {"title": "provide better error reactcloneelement nullundefined", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12491", "d": "3/2018"}, {"title": "use hook intercept dom ref etarget safety", "body": "use hook intercept dom ref etarget tripartite want check style someone write position fixed plans things", "num": "12490", "d": "3/2018"}, {"title": "use", "body": "would like use remove usage reactkomposer library unfortunately peer dependency uses wonder use specify wider range react peer dependency ideally like keep supporting react", "num": "12489", "d": "3/2018"}, {"title": "error still logged console caught error boundary testing", "body": "want request feature report bug quite sure featurebug error boundary want test works correctly produces big nt seem great way get around current behavior error captured error boundary still logs console tests making look like something failed expected testing error boundary case consoleerror error occurred component child errorboundary created wrappercomponent wrappercomponent current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example error boundary jsx import react react import proptypes proptypes export default class errorboundary extends reactcomponent static proptypes children proptypesoneoftype proptypesnode proptypesarrayof proptypesnode isrequired render proptypesfuncisrequired state haserror false error null errorinfo null componentdidcatch error errorinfo thissetstate haserror true error errorinfo render thisstatehaserror return thispropsrender thisstateerror thisstateerrorinfo return thispropschildren errorboundarytestjsx jsx import errorboundary errorboundary const child gt throw error catches error renders message gt const wrapper mount error occurred gt expect wrappertext toequal error occurred expected behavior sure exactly way sort temporarily pause logging course test seems messy error boundaries tested hacky solution jsx import errorboundary errorboundary const child gt throw error const pauseerrorlogging codetorun gt const logger consoleerror consoleerror gt codetorun consoleerror logger catches error renders message gt pauseerrorlogging gt const wrapper mount error occurred gt versions react browser os affected issue work previous versions react enzyme", "num": "12485", "d": "3/2018"}, {"title": "problem multi instance component", "body": "hello problem app parent component tables component children components game example two component game number components dynamic value component game state property test children component gameui test value transfer gameui mind components children isolated components want change state test transfer new value new value sending last renderer component gameui reactjs", "num": "12484", "d": "3/2018"}, {"title": "request feature add api aftersetstate", "body": "want request feature could add api named class sometimes something update state codes use better api etc javascript componentwillmount thisinit async setpageloading isloading return thisaftersetstate isloading async update await thissetpageloading true let data await fetch data url await thisaftersetstate data business await thissetpageloading false async init await thisupdate thisadjustsomthingdomrelated wish added reactjs future version question", "num": "12482", "d": "3/2018"}, {"title": "svg enable focusable accept boolean values", "body": "moved discussion situation focusable attribute svg specifications enumerated attribute accepting values technically boolean attribute although certainly somehow looks like react expects value passed string see following example thing attribute often used conjunction elements aria specification attributes booleans enumerated attributes values ariahidden attribute good example instance following good practice iconbuttons authoring perspective snippet would likely written like jsx problem authored boolean otherwise printed dom hand perfectly fine written boolean gets coerced react proposal given default value attribute likely attribute gets authored change value regard confusing specified string attributes accepting booleans authored suggestion would make possible specified either boolean string like similar attributes words following work authoring perspective believe would straightforward less confusing", "num": "12481", "d": "3/2018"}, {"title": "issues reactcontrolledvalueproptypes", "body": "want request feature report bug see current behavior bug inconsistency warning feature request bug warning expected behavior passing falsy attribute trigger warning truthy value onchange passed undefined null considered acknowledgement silence warning case split render method component use preview component interactive use component preview pass undefined change handler warning shown tell forgot intended way going along pass according definitelytyped nt valid attribute select ca nt use disabled changes appearance field versions react browser os affected issue work previous versions react chrome proposed fix would change", "num": "12477", "d": "3/2018"}, {"title": "eventbutton sent testutilssimulateclick undefined default", "body": "want request feature report bug report bug current behavior default sends event undefined current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior think default means left click libraries like reactrouter rely maybe default react reacttrainingreactrouter versions react browser os affected issue work previous versions react sure earlier versions getting behavior", "num": "12476", "d": "3/2018"}, {"title": "uncaught error working root error likely caused bug react", "body": "got debugging another error filing reference original code", "num": "12474", "d": "3/2018"}, {"title": "allow call onchange callback even notavaliddate values", "body": "want request feature report bug feature request use case want show custom validation message use materialui style floating label necessary know actual value input current behavior currently manual date entry incorrect onchange called null expected behavior allow exposing current display value callback options think provide bool flag allowinvalidincallback return object let say feasible", "num": "12472", "d": "3/2018"}, {"title": "backspacing word boundary causes cursor jump input type email", "body": "want request feature report bug bug current behavior input cursor jumps beginning upon backspacing final character word follows space input type reproduced jsfiddle steps enduser must take repeated enter word space character eg test input backspace remove last character word following space observe cursor jump beginning input box issue occur nt tried every type input yet expected behavior cursor jump even someone mistakenly enters space email input box tries backspace confuse person jumbling input versions react browser os affected issue work previous versions react observed latest version react following ios safari macos chrome safari windows chrome problem occur windows firefox", "num": "12467", "d": "3/2018"}, {"title": "future react proptypes", "body": "future react dynamic runtime type checker shifted static type checkers like typescript flow deprecated future need migrate actual react projects typescript flow longterm perspective", "num": "12465", "d": "3/2018"}, {"title": "selfclosing component nt considered children", "body": "want request feature report bug bug possibly current behavior component validates inputs inside like works fine go children inputs validate let see another case inserting selfclosing component inside lib implementation look children verify input match validation case form library nt find input inside expected behavior want validate inputs inside selfclosing components versions react browser os affected issue work previous versions react react", "num": "12463", "d": "3/2018"}, {"title": "itemprop itemtype incorrectly rendered using reactdomserver", "body": "want request feature report bug bug current behavior server side rendering elements microdata props outputed html attributes remain camel case current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior html attributes lowecase reactdom renderer suffer issue microdata attribute suffer issue versions react browser os affected issue work previous versions react least react affected react appear browser related issue", "num": "12462", "d": "3/2018"}, {"title": "change unmounting timing react", "body": "want request feature report bug question could bug current behavior react replace component another one old component called new component called however changed react new component called old component called expected behavior would expected react behaviour would maintained seems strange new components starting mounted old component unmounted react example react example", "num": "12461", "d": "3/2018"}, {"title": "bug react website", "body": "", "num": "12460", "d": "3/2018"}, {"title": "custom property names containing get removed custom components", "body": "could considered bug feature request say know react checking valid attribute property names check run inconsistently normal components custom components makes behavior confusing means could feature explicit behavior particular use case needs improved upon trying render custom properties like belonging amphtml particularly ampbind api requires property names think check valid attribute property names throw warnings option prevent removal custom properties example js jsx js test test resulting html html test test throws warning try codesandbox", "num": "12455", "d": "3/2018"}, {"title": "elements loose focus moving portal", "body": "want request feature report bug perhaps bug could also seen feature current behavior move element portal element looses focus focus element gains focus portal moving portal looses focus expected behavior would expected react maintain focus element moving portal versions react browser os affected issue work previous versions react tested react version browsers latest chrome firefox test others expect behaviour os tested mac high sierra", "num": "12454", "d": "3/2018"}, {"title": "function breaking thirdparty libs", "body": "want request feature report bug bug possibly current behavior new feature returns object function point stateless components class components react expose utility check whether given value valid passed result thirdparty library authors wish prevalidate component type commonly use test whether type valid return value despite valid component type fail naive test library authors order provide better errors would otherwise provided react invalid component type passed perfect world fault would fall squarely thirdparty library developers using imprecise check developers could rightfully point react given little ability precise preemptive checks one nt break internet bugs bug thirdparty developers taken reasonableyetillegal dependencies react internals order provide better experience users difficult may good idea chane return instead object versions react browser os affected issue work previous versions react react", "num": "12453", "d": "3/2018"}, {"title": "mistake found docs", "body": "chapter jsx depth pic first parameter string peer quotation marks", "num": "12450", "d": "3/2018"}, {"title": "read property return null", "body": "running strange issue reproduce happens running tests karma using issue test throwing error missing handler rendering checkbox handler appears happening misses first branch run null nt exist access fails tried reproduce following codesandbox simplified version code throwing error nt present", "num": "12449", "d": "3/2018"}, {"title": "feature add reactdomrendersync method", "body": "want request feature report bug feature current behavior async operation expected behavior would nice something like method would interrupt pending operations render put immediately critical current use case willing explain need versions react browser os affected issue work previous versions react", "num": "12447", "d": "3/2018"}, {"title": "thissetstate function componentdidmount", "body": "constructor super thisstate isuserlogged false loggeduser ca nt assign value return fbapi thisstateloggeduser getting error thissetstate function tried bind solve", "num": "12443", "d": "3/2018"}, {"title": "dangerous strings reach browser builtins", "body": "want request feature report bug bug well known workedaround one current behavior produces link alerts current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example load code codepen repl repl loads click run button top left see blue link bottomright pane click alert popup alert pop simple string reaches attribute cause arbitrary code execution even user interaction expected behavior string reaches browser builtin like setter cause code execution discussion polymer resin uses hooks another webcomponents framework intercept value reach browser builtins vetted similar approach could work react allows values reach browser builtins innocuous runtime type indicates author intentionally marked safe kind browser builtin example would allowed reach would string relative url one whitelisted protocol many developers know risky link implementation detail custom react element developers nt context know attributes need careful nt either since implementation detail versions react browser os affected issue work previous versions react believe widespread across versions earlier repl tried showed worked version nt know version jsfiddle uses", "num": "12441", "d": "3/2018"}, {"title": "next context api rerender children", "body": "npm node modules versions react reactdom question component z rerendered every time click button component b maincontainerjs javascript const testcontext createcontext null export testcontext export default class maincontainer extends component constructor props super props thisstate h w render consolelog render main container return createelement testcontextprovider value thisstateh thispropschildren thispropschildren null javascript import testcontext maincontainermjs export default class buttoncontainer extends component constructor props super props render consolelog render button container return createelement testcontextconsumer test gt consolelog test context consumer value changed test return createelement z test class z extends component constructor props super props render consolelog render z thispropstest return createelement test thispropstest class extends component constructor props super props thisstate thisincr thisincrbind render consolelog render thispropstest return createelement b incr thisincr test thispropstest incr consolelog increment thissetstate const b props gt consolelog render b return createelement button onclick e gt consolelog click propsincr button jsonstringify jsonstringify propstest log", "num": "12439", "d": "3/2018"}, {"title": "iphone right sliding function", "body": "iphone right back last page screen flickeredit first skip page back last page", "num": "12438", "d": "3/2018"}, {"title": "bad cohabitation ref state component", "body": "want request feature report bug want report looks like bug current behavior unknown reason attribute nt seem get well together bit background trying recreate following codepen managed recreate bug codesandbox link unknown reason returns null want see consolelog however remove everything related constructor props lines change props line something else everything works fine actually returns wanted value expected behavior expect able get value even though state previously defined used versions react browser os affected issue work previous versions react react chrome nt know used work never use", "num": "12437", "d": "3/2018"}, {"title": "functional components lifecycle methods state", "body": "could functional components turned components state problem needs changes need apply local state must change function class use prototype function reuse function js function button value countdown return value countdown buttonprototypeconstructor props gt buttonprototypeshouldcomponentupdate gt benefits approach educate people use functional components first place also avoid rewrite much code adding features app course downsides change lot style code learned react also much verbose opinion code much elegant remove need using classes personally nt like thoughts crazy add optionfeature", "num": "12436", "d": "3/2018"}, {"title": "minified react error object object", "body": "building locally produces errors whereas production build serves following unsure debug seem precedent receiving error code object ideas proceed", "num": "12434", "d": "3/2018"}, {"title": "remove devonly warnings shallow renderer", "body": "consideration warnings already covered renderers based reactreconciler maybe nt gain much mirroring shallow renderer maybe worth added complexity particularly complicated warnings like ones added", "num": "12432", "d": "3/2018"}, {"title": "nt assert warnings tests throw", "body": "think nt pass", "num": "12428", "d": "3/2018"}, {"title": "jestdiff call towarndev returns null making test failure confusing", "body": "caused line calling two different strings returns", "num": "12427", "d": "3/2018"}, {"title": "reacttestrenderr", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12423", "d": "3/2018"}, {"title": "ca nt set value selects programatically react", "body": "set selects using pure js plain simple effective myselect value react approach reason nt work react select values updated react usual dom button click default browser behavior clear form fields ca nt set select onreset ev first update state dom updated want set selects programatically using refs thissetstate state props gt return birthday moment thispropsuserbirthday error null foo thispropsfoo gt render return nt advice use controlled components know want set without rolling back controlled components", "num": "12422", "d": "3/2018"}, {"title": "password field causes memory leak production builds", "body": "want request feature report bug bug current behavior noticing passwordtype input fields well wrapping parents remain detached dom elements conditionally rendered removed dom issue seems occurring across several applications using react include newly created app able produce chrome memory heap snapshots environments demonstrate issue observe following example button addsremoves input field dom reproduce problem stated issue repeatedly click button say times take memory heap snapshot see multiple detached dom elements password field wrapping div note issue happen types input fields class app extends component state show false toggle gt thissetstate show thisstateshow render return thisstateshow amp amp versions react browser os affected issue work previous versions react tried issue react react chrome canary browsers tested particular", "num": "12420", "d": "3/2018"}, {"title": "wrong value changing valid invalid color", "body": "want request feature report bug bug current behavior changing backgroundcolor valid color valid color persists steps reproduce expected behavior changing backgroundcolor invalid format backgroundcolor set css going ignore value due invalid value versions react browser os affected issue work previous versions react react chrome official build", "num": "12418", "d": "3/2018"}, {"title": "change ag nt enough make component rerender", "body": "bug amp amp question current behavior bug code thanks find way fix would like explanation behavior made form reduxform using bulma css wanted add icon right input tag like bulma doc show us focus visual validation green fontawesome icon input valid another one red first rerender right icon ok invalid field write something icon nt change even see props trigger new icon changing trying debug make work without changing logic replacing tag right behavior dunno make example work fiddle state nt work uncomment comment working javascript import react react const inputitem spec input meta touched error gt const successiconright color const erroriconright color const label type placeholder iconleft iconright spec const rendericon gt return label amp amp label rendericon export default inputitem posting someone ring bell two component two close react interpret change tag render span ok manually add props parent make work like func javascript const rendericon gt question enough react render tag change", "num": "12417", "d": "3/2018"}, {"title": "dangerouslysetinnerhtml wrap ssr client editing invalid html", "body": "currently need use dangerouslysetinnerhtml tag special case case need split string several need render could look like looks dirty yes case need smth like found better solution problem ssr match client error problem seems ssr react wrapping dangerouslyinnerhtml client general problem react wrapping wondering could avoid somehow first html part valid valid second part problem second problem seems react making part valid server client react closing first part maybe wondering problem load html data database need replace special words real react components plan something like html markup text text split html get array items want render first part dangerouslysetinnerhtml render real reactcomponent last part dangerouslysetinnerhtml", "num": "12415", "d": "3/2018"}, {"title": "refs immutable object extensible", "body": "set immutable constructor props context super props context thisrefs bar null set ref thisrefsfoo node gt throws works well js react nt work", "num": "12413", "d": "3/2018"}, {"title": "unsafe lifecycle hooks nt run getderivedstatefromprops present", "body": "sure intended longer term existence hooks suggested purposes still might needed conjunction gdsfp particular usecase caused discover migrating document focus needs checked prior update flushing update changes visual state drops focus could move react traditionally yelled ref stuff admittedly migrated code nt need fine", "num": "12411", "d": "3/2018"}, {"title": "controlling radio input checked onclick props gives warning", "body": "want request feature report bug bug current behavior type control props handler event still receive warning form field needs handler suppress warning pass useless inline function props expected behavior give warning control component event ca nt assure possibilities common control inputs handlers versions react browser os affected issue work previous versions react nt test behavior input wonder behavior would desirable", "num": "12410", "d": "3/2018"}, {"title": "passing elements function requires manual keys present", "body": "want request feature report bug bugfeature current behavior react requires manual keys present tag passing element via function render gives key warning passing element created jsx via mobx store element requires manual keys present child tag even simple example incredibly hard nt allow using child component thus severely limiting functionality passed jsx considered static key requirement nt apply possible tell react consider element static codesandbox minimal case export class overlaystore observable activepopup null action setpopup element thisactivepopup element observer export class app extends reactcomponent render return overlaystoreactivepopup const overlaystore new overlaystore render documentgetelementbyid root overlaystoresetpopup long text link expected behavior require manually setting keys values like etc versions react browser os affected issue work previous versions react latest stable dependencies via codesandbox chrome macos nt matter", "num": "12409", "d": "3/2018"}, {"title": "circle ci failing test", "body": "want request feature report bug bug current behavior broken build process due invalid response current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example new pr facebookopensourcebot post something similar error also cause circleci tests fail expected behavior valid json response", "num": "12406", "d": "3/2018"}, {"title": "server side reactdom render hreflang hreflang", "body": "want request feature report bug bug current behavior reactdomserver render hreflang hreflang current behavior bug please provide steps reproduce possible minimal demo problem expected behavior render hreflang attribute hreflang serverside versions react browser os affected issue work previous versions react works", "num": "12403", "d": "3/2018"}, {"title": "react able get application environment ui defineplugin", "body": "working react application showcase different functionality based whether app running dev mode production query get application environment react code tried code work also tried webpack got error could anyone help tia cc", "num": "12400", "d": "3/2018"}, {"title": "unhandled rejection syntaxerror unexpected token lt json position", "body": "hello new react want import datas file datajson code portfoliojs import react component react class portfolio extends component constructor super thisstate websites componentwillmount fetch datajson response gt responsejson websites gt thissetstates websites render let websites thisstatewebsites return portfolio latest portfolio list websitesmap item gt itemdescription export default portfolio datajson error unhandled rejection syntaxerror unexpected token lt json position anonymous function componentwillmount fetch datajson response gt responsejson websites gt thissetstates websites render please need help", "num": "12398", "d": "3/2018"}, {"title": "way access new context api within componentdidmount", "body": "building react mapbox gl module use clone inject props today looking using context api saw new one seem find way read context details componentdidmount lifecycle makes sense use map implementation way around", "num": "12397", "d": "3/2018"}, {"title": "proposal allow void elements children override property", "body": "want request feature report bug feature current behavior creating one whitelisted void elements error thrown javascript reactcreateelement link null invariant violation link void element tag must neither use correct assumption make browser frontends proposed new behavior exceptional case generating sgmllike code likely server rendered may become necessary override default behaviour whitelisted html void elements example rss uses tag denote site root url url individual entries actual value tag cause error trying generate via react component proposed solution would add new lengthily named property bypasses void element check allows items rendered example implementation javascript reactcreateelement link allowinvalidvoidelementchildren true much vein property named likely avoids name collisions existing consumer code makes explicit setting flag causes nonstandard potentially undesirable effects usual use cases feature implemented way existing unit tests pass without alteration new unit tests would added ensure new functionality works intended following files identified places implement feature work previous versions react worked previous versions react likely bug", "num": "12396", "d": "3/2018"}, {"title": "im getting key iterator warnings", "body": "put back keys form stops working please refer", "num": "12395", "d": "3/2018"}, {"title": "keep children mounted replace parent", "body": "hi trying something like const container props gt propssomecondition propschildren propschildren const app props gt basically want situation app rerendering changing boolean prop imagine somecondition actual changing value different container render depending value maintaining children inside problem children async fetches didmount remount lose state containers change idea achieve children still mounted even parent changed thanks advance", "num": "12393", "d": "3/2018"}, {"title": "could get friendly error stack errorboudary", "body": "want request feature report bug maybe feature current behavior currently error component stack ie something like production would formatted almost useless debugging expected behavior want request feature allow us define static componentname field reason nt use used reactdevtools others libs use static field components everyone could see componentsproject structure maybe others potential risk expect react could support custom static componentname field eg could set field components reactdevtools ca nt inspect react read field rather get component name insert error stack string call know implement still could get componentsproject structure using libs like babel decompile make reactdevtools support field increase cost", "num": "12390", "d": "3/2018"}, {"title": "propagatecontextchange stuck infinite loop", "body": "want request feature report bug bug current behavior process converting navigation router new context api found sometimes gets stuck infinite loop created jsfiddle problem click name sort hyperlink two times second click enters infinite loop jsfiddle simple could make example get rid date birth column problem happen current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior get stuck infinite loop versions react browser os affected issue work previous versions react react version new context api introduced", "num": "12389", "d": "3/2018"}, {"title": "gitter room", "body": "please make react room gitter", "num": "12388", "d": "3/2018"}, {"title": "asyncsafe way reading thisstate", "body": "want request feature report bug feature request question problem sure people though feel like much solvable suppose component receives state updates many sources example javascript class counter extends reactcomponent constructor props thisstate number onbuttonaclicked thissetstate prevstate gt prevstatenumber onbuttonbclicked thissetstate prevstate gt prevstatenumber somewhere outside method need read since asynchronous safe way read number nt know sequence clicks since last actual update thisstate one safe way seems using empty callback things requirement method reads thisstate must synchronous also form seems bit odd nt actually intend set state seems asynchronous forcing application make reads asynchronous well could instead keep track state entirely ignore means keep replace calls solves problem bypassing react entirely question way force immediate setting state read recommended solution something like", "num": "12381", "d": "3/2018"}, {"title": "different behavior updating dom using ternary operator vs inline approaches", "body": "want request feature report bug sure bug feature current behavior similar cases often chosen matter preferences work dom different first case icon updated dom second case icon mountedunmouted const expandable expanded gt const expandedicon const collapsedicon return expanded amp amp expandedicon expanded amp amp collapsedicon current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior expected update cases might wrong versions react browser os affected issue work previous versions react windows chrome", "num": "12378", "d": "3/2018"}, {"title": "setstate rerenders even state stays", "body": "know define check check default goes props", "num": "12376", "d": "3/2018"}, {"title": "use bundle react app error like", "body": "error nodemodulesreact reactcjsreactproductionminjs module found error ca nt resolve fbjslibemptyfunction userszrworkreactfamilyinknodemodulesreact reactcjs nodemodulesreact reactcjsreactproductionminjs nodemodulesreact reactindexjs srcappjs multi srcappjs error nodemodulesreact reactcjsreactproductionminjs module found error ca nt resolve fbjslibemptyobject userszrworkreactfamilyinknodemodulesreact reactcjs nodemodulesreact reactcjsreactproductionminjs nodemodulesreact reactindexjs srcappjs multi srcappjs error nodemodulesreact reactcjsreactproductionminjs module found error ca nt resolve objectassign userszrworkreactfamilyinknodemodulesreact reactcjs nodemodulesreact reactcjsreactproductionminjs nodemodulesreact reactindexjs srcappjs multi srcappjs", "num": "12374", "d": "3/2018"}, {"title": "formatting numbers tolocalstring controlled input", "body": "want request feature report bug bug suspected current behavior trying use controlled input text tel field either numbers removed entered get nan possibly related expected behavior number formatted using versions react browser os affected issue work previous versions react chrome mac os", "num": "12373", "d": "3/2018"}, {"title": "react new context api basic intent", "body": "want request feature report bug misunderstanding current behavior impossible render component provider furnished createcontext function trying follow articles whats new react react new context api current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example code sandbox example sourcecode codesandbox import react component createcontext react import render reactdom const cartstate createcontext open false class cartstateprovider extends component state open false render return class app extends component render return open gt return open open closed render documentgetelementbyid root expected behavior render closed versions react browser os affected issue work previous versions react testing react new feature work previous releases", "num": "12372", "d": "3/2018"}, {"title": "add toplevel api detecting whether element html element", "body": "want request feature report bug feature current behavior react toplevel api function detecting whether object valid react element official way detect html element specifically expected behavior would make sense another function checking whether object reacthtmlelement would use cases typescript would useful type guard apart typescript would cool eg needed component add class children decide whether add class directly whether wrap child implementation draft typescript const listofhtmlelements readonly export function ishtmlelement elem elem reactreacthtmlelement return reactisvalidelement elem amp amp typeof elemtype string amp amp listofhtmlelementsindexof elemtype gt versions react browser os affected issue work previous versions react", "num": "12369", "d": "3/2018"}, {"title": "reservedprops optimized away google closure compiler", "body": "testing running react closure optimizations clojurescript hit problem eg property gets included output using foo way children value converted string could due cljs due google closure removes properties objects nt statically accessed banga already fix reactelement reactdom server another place problem unfortunately looks like nt fixable externs means user would nice fixed mostly react already works closure optimizations cljs testsuite uses", "num": "12368", "d": "3/2018"}, {"title": "increase code coverage", "body": "hello want start contributing react nt know start took look think help increasing code coverage think taking look coverage report nt know best place start give recommendation thanks", "num": "12367", "d": "3/2018"}, {"title": "impossible change classname", "body": "would like change class name invoke simple animation effect classname attribute must string run render appears simply update class animation nt run even keys set also ca nt render change class props readonly", "num": "12366", "d": "3/2018"}, {"title": "porting libraries preact question", "body": "hi want ask question im preact user never tryed react course couple months ago use react project trying port one libraries library aims easy form setup jsx email contrase\u00f1a submit code works perfecly preact im facing issues react example input loosing focus everytime time form rather update field value react example preact working library keeps internal state manage field values events im wrong help appreciated", "num": "12364", "d": "3/2018"}, {"title": "react onblur events firing unmount", "body": "want request feature report bug bug current behavior dom element rendered react component focus react component unmounts react event fire parent dom elements current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior would expect like browser fires event removing dom node react would fire events parent nodes focused node removed unmounted versions react browser os affected issue work previous versions react react mac os x browser chrome chrome idea worked earlier versions react", "num": "12363", "d": "3/2018"}, {"title": "reactdom minified development build error misleadingly says development build react rather reactdom", "body": "want request feature report bug bugish error clarification current behavior including minified development build reactdom error reads expected behavior error correctly notified using minfied development copy took realize meant reactdom core react feel accurately read", "num": "12362", "d": "3/2018"}, {"title": "question settimeout effect two react demo", "body": "react learner counfuse two react demo js import react react let num export default class hello extends reactcomponent state loading false data componentdidmount settimeout gt const button documentgetelementbyid button const button thisbutton consolelog button first click buttonclick consolelog button second click buttonclick delay gt const count num consolelog count thissetstate loading true render const loading data thisstate loading return loading return js import react react let num export default class hello extends reactcomponent state loading false data componentdidmount settimeout gt const button documentgetelementbyid button const button thisbutton consolelog button first click buttonclick consolelog button second click buttonclick delay gt const count num consolelog count thissetstate loading true render const loading data thisstate loading return loading return different code componentdidmount console message aslo different two demo result result", "num": "12361", "d": "3/2018"}, {"title": "addeventlistener working properly componentdidupdate", "body": "want request feature report bug bug current behavior update event listeners removing old listeners adding new ones element obtained react ref react alpha handlers nt register properly take part remove listeners put whole thing inside works fine worked fine componentwillreceiveprops moved part componentdidupdate react code kind like jsx work componentdidupdate prevprops const eventtype prevpropseventhandlers thisaudioremoveeventlistener eventtype prevpropseventhandlers eventtype const eventtype thispropseventhandlers thisaudioaddeventlistener eventtype thispropseventhandlers eventtype work componentdidupdate prevprops const eventtype prevpropseventhandlers thisaudioremoveeventlistener eventtype prevpropseventhandlers eventtype const eventtype thispropseventhandlers thisaudioaddeventlistener eventtype thispropseventhandlers eventtype work componentdidupdate prevprops settimeout gt const eventtype prevpropseventhandlers thisaudioremoveeventlistener eventtype prevpropseventhandlers eventtype const eventtype thispropseventhandlers thisaudioaddeventlistener eventtype thispropseventhandlers eventtype render return current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example unfortunately ca nt reproduce simple example check build next branch reactresponsiveaudioplayer run see behavior examplehtml adds listener run volume toggles muted unmuted componentdidupdate expected behavior listener adding work fine versions react browser os affected issue work previous versions react tested react think issue also exists react able reproduce problem locally react make manual tweaks createreactcontext make backward compatible published polyfill make sort thing easier", "num": "12360", "d": "3/2018"}, {"title": "potential future bug geteventkey edge synthetic event normalization", "body": "bug current behavior react currently normalizes keyboard events crossbrowser falling back native keyboardeventkeycode property using dictionary object normalize key noted source geteventkey used normalization deprecated values edge currently implement correct key values normalization fall back keyboardeventkeycode keyboardeventkeycode deprecated may dropped time microsoft per fixed issue yet released insider preview releases means potential keyboardeventkeycode removed edge fix made public may good idea rely keycode instance refer line versions react browser os affected issue work previous versions react reactdom version potentially affects future versions edge", "num": "12356", "d": "3/2018"}, {"title": "possible bug reactdomcreateportal used new window", "body": "want request feature report bug bug current behavior used conjunction container another window components respond user input called parent component portal produced codepen demonstrating issue click open portal new window appears pair buttons click either button new window nothing happens click hack button parent window simply calls parent note buttons new window work expected expected behavior expect components new window interactive versions react browser os affected issue work previous versions react react reactdom tested safari chrome mac", "num": "12355", "d": "3/2018"}, {"title": "setstate callback fire", "body": "want request feature report bug bug current behavior following piece code fairly simple component works perfectly react callback fire investigated saw reactdevelopmentjs clearly marks callback one accepted arguments enqueuesetstate however go function called reactupdatequeuejs see argument ommited nt know helps anyway callback fired whatever try current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example simple example reproduction expected behavior versions react browser os affected issue work previous versions react react tested react", "num": "12354", "d": "3/2018"}, {"title": "react adds classname dom instead class", "body": "want request feature report bug bug current behavior react adds classname dom instead class property current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example open link inspect dom following link test repo expected behavior add class dom element property classname versions react browser os affected issue work previous versions react react internet explorer version works expected react", "num": "12349", "d": "3/2018"}, {"title": "cloned element using component created render nt trigger onclick", "body": "want request feature report bug bug probably current behavior rerendering cloned element using component created render event triggered clicking cause onclick triggered simplest implementation causes expected behavior onclick gets triggered cloning element using component created render fix versions react browser os affected issue work previous versions react react version", "num": "12348", "d": "3/2018"}, {"title": "mac os install problem", "body": "npm warn deprecated express express series deprecated npm warn deprecated wrench wrenchjs deprecated check fsextra operations using wrench thanks usage years npm err code etarget npm err notarget matching version found rimraf gt npm err notarget cases one dependencies requesting npm err notarget package version nt exist npm err notarget npm err notarget specified dependency mojito npm err notarget npm err complete log run found npm err futingdemacbookpro www futing vim packagejson futingdemacbookpro www futing sudo npm install g createreactapp createreactapp demo npm warn deprecated express express series deprecated npm warn deprecated wrench wrenchjs deprecated check fsextra operations using wrench thanks usage years npm err code etarget npm err notarget matching version found rimraf gt npm err notarget cases one dependencies requesting npm err notarget package version nt exist npm err notarget npm err notarget specified dependency mojito npm err notarget npm err complete log run found npm err", "num": "12345", "d": "3/2018"}, {"title": "dispatchevent longer effect latest react version", "body": "want request feature report bug bug latest react current behavior listen programatically generated key events react older react job current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example find link codesandbox basic react app trying dispatchevent fill input field click inject button react version sandbox react check console logging current state react component expected behavior change version sandbox latest fills expected value textbox get recognised react internal state console log blank means id even trigger internal state change want fill input textbox programatically setting internal test framework would want generate events manually observe entire app behaviour versions react browser os affected issue work previous versions react works react latest", "num": "12344", "d": "3/2018"}, {"title": "use case", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "12343", "d": "3/2018"}, {"title": "jsx close tag name may optional", "body": "want request feature report bug feature current behavior html text expected behavior html tag always pairs simple write better", "num": "12340", "d": "3/2018"}, {"title": "feature new api make html scope", "body": "html nt concept scope use concept like variable many like add scope html maybe say label wrap input label changes html structure many scene using html variable like spectre add api whatever others make html scope", "num": "12339", "d": "3/2018"}, {"title": "jest test fails onchange missing onclick", "body": "seeing warning running jest tests cjsx code onclick app specific purposes works fine onchange yet fbjs warns onchange improved warn onclick detected well using", "num": "12338", "d": "3/2018"}, {"title": "refs final ref different output getelementbyid", "body": "want request feature report bug bugquestion current behavior react react application redux need use ref html pre want copy paste text button callback ref callback looks like pre ref gt thispreref ref button onclick event noticed final value thispreref equal final output documentgetelementid id html pre fine ref callback called many times since design react someone explain final ref equal final dom element finally showing page want avoid getelementbyid works returned value returned value equal first thispreref last current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example see expected behavior see versions react browser os affected issue work previous versions react react", "num": "12336", "d": "3/2018"}, {"title": "getderivedstatefromprops requestanimationframe problem", "body": "thanks hard work react incredible new static lifecycle methods work well common usage animation pattern approach popularised reactmotion add inside function update state keep adding new animation finishes way runs work add new start animation stopped way reliably translate pattern new static lifecycle move access static function move run forever even work way knowing whether update new props run always add new even animation finished rerunning check inside always possible", "num": "12335", "d": "3/2018"}, {"title": "controlled input step work expected unless initialized null", "body": "bug current behavior input type number step work expected initial value set step seems get honored initial value null example example uses controlled input binding value step step value edit value textbox increment using stepper increment ie initial value current step edit code initial value null edit textbox step value goes expected expected behavior possible render number input honors step without initialize input component value null first seems initial value provided write value attribute dom eg value initial value null value attribute written dom assignment eg value versions react browser os affected issue work previous versions react ported version confirm still issue originally found version seems affect chrome confirmed windows mac versions bug appear safari mac least", "num": "12334", "d": "3/2018"}, {"title": "uncaught typeerror assign function", "body": "react reactdom cause problem", "num": "12333", "d": "3/2018"}, {"title": "production reconciler instrumentation", "body": "apologies documented somewhere unable find anything related pretty exhaustive search docs code production instrumentation hooks reconciler specifically looking callbacksevents would allow track overall reconciliation time spans nothing granular eg equivalent span best tell spans reported fiber prior enabled development mode", "num": "12331", "d": "3/2018"}, {"title": "reactaddonstestutils requires peer reactdom none installed", "body": "install nodemodules scratch npm generates warning react latest verified removing reactaddonstestutils alter tests npm node possum commit current master", "num": "12330", "d": "3/2018"}, {"title": "reactcreateelement type invalid", "body": "want request feature report bug bug current behavior import react react import rendertostring reactdomserver import staticrouter route indexroute link reactrouter class dashboard extends reactcomponent render return dashboard class app extends reactcomponent render return dashboard const html rendertostring warning reactcreateelement type invalid expected string builtin components classfunction composite components got undefined likely forgot export component file defined might mixed default named imports app router staticrouter typeerror read property tolowercase undefined reactdomserverrendererrenderdom reactdomserverrendererrender reactdomserverrendererread rendertostring expected behavior rendered dashboard component versions react browser os affected issue work previous versions react react reactdom reactrouter", "num": "12329", "d": "3/2018"}, {"title": "capturing events trigger vanilla bubbling events", "body": "want request feature report bug bug current behavior subscribing dom events possible use capturing however seems capturing takes place vanilla javascript bubbling phase results incorrect order events unless events subscribed via react nt always possible example mimicks one use cases expected behavior capturing event subscribed within react take place bubbling events subscribed via vanilla javascript versions react browser os affected issue development edition chrome", "num": "12328", "d": "3/2018"}, {"title": "simple slide show", "body": "trying make slide show reactjs slide show next button work perfectly previous button problem show demo next button handler works perfectly prev button handler works perfectly slide nt arrive first arraywhen slide arrive first array slide show work perfectly please help solve problem state functions next button handler pre next button handler render function map array list element like render let numslist thisstatenumbersmap num index gt consolelog index thisstatecurrent index lt thisstatecurrent return num else index gt thisstatecurrent return num else return num return numslist lt", "num": "12327", "d": "3/2018"}, {"title": "got white screen react", "body": "hey fe developer met big problem try use latest react reactdom situation got white screen huawei honor phone android browser show whether create app official createreactapp script make config webpack note use eruda look mistake bowser got nothing app created official createreactapp got white screen happen android vender browser display properly lastest chrome mobile react version react reactdom works fine bowser way solve tell please thanks", "num": "12324", "d": "3/2018"}, {"title": "reactelement reactnode types used flow undefined", "body": "use flow project started get message console flowruntime could reference given type try ttypeof value instead got undefined search found reason reactnode undefined types described flow docs something wrong", "num": "12322", "d": "3/2018"}, {"title": "react crashing error using component inside recursively", "body": "want request feature report bug bug current behavior react throw errorwarning using component inside recursively know edge case nevertheless mistakenly caught javascript import react react import hello bug hello export default gt bug component expected behavior sure error would good possible", "num": "12321", "d": "3/2018"}, {"title": "filter json working", "body": "filter data one json call using console says typeerror read property tolowercase undefined import react component react import browserrouter router route link reactrouterdom import data datosjson filter function searchingdata product return function x return xfirsttolowercase includes producttolowercase product class app extends component constructor props super props thisstate items product bind object componentwillmount method setstate working thiscomponentwillmount thiscomponentwillmountbind componentwillmount fetch res gt resjson data gt thissetstate items data searchword event thissetstate product eventtargetvalue view render export default app", "num": "12320", "d": "3/2018"}, {"title": "regarding new context api", "body": "want request feature report bug neither feature bug hope mind asking question maybe others also interested question examples seen regarding new context api context values relevant virtual element tree means relevant render function context values relevant view side effects recommended way use higher order components example let say component requires sideeffect handler shall passed explicitly props passed implicitly using context gt let name somemgr assume somemgr object needed componentdidmount like maybe also componentwillunmount old days componentdidmount looked like follows need hoc edit course reasonable programmer would used directly way saying possible old api like already asked shall use hoc handle use cases new context api trick recommendation maybe use case even considered antipattern many thanks advance answer versions react browser os affected issue work previous versions react lt versus", "num": "12319", "d": "3/2018"}, {"title": "validatedomnesting appear descendant", "body": "", "num": "12318", "d": "3/2018"}, {"title": "mit license gpl dependency", "body": "bug report current behavior license stated mit gpl dependency think either license wrong one gpl dependency changed test use package result dependency indirect gt gt devs say dependencies matter others say sarcastically code gpl lawyer lawyer department please feel free close nonissue think gpl dependency nogo many companies expected behavior dependency gpl licensed since would make user code gpl gpl code bundled distributed react users code potentially every react project included dependency gpl versions react browser os affected issue work previous versions react current version affects also affects course know note feel free close open repository could find linked fbjs repository npm clearly original one since npm states dependencies repository tells totally different story even private strange reminds horror story course legit reason right", "num": "12317", "d": "3/2018"}, {"title": "reactdomrender return null", "body": "question component componentdidmount function perform reactdomrender return null reactdomrender render page normally settimeout added componentdidmount function execute settimeout reactdomrender returns normally object nt know bug expectations reactdomrender return object correctly code js import react component react export default class extends component", "num": "12315", "d": "3/2018"}, {"title": "ios controlled input type date onchange triggered pressing clear", "body": "bug current behavior controlled input type date nt trigger onchange pressing clear button ios datepicker keyboard happens controlled input uncontrolled works fine reproduced iphone ios safari demo react jsfiddle demo react jsfiddle expected behavior controlled input date trigger onchange pressing clear button versions react browser os affected issue work previous versions react react amp reactdom amp os ios browser safari device iphone iphone se", "num": "12313", "d": "3/2018"}, {"title": "setstate executes settimeout become", "body": "componentdidmount settimeout gt lemen print behind banana", "num": "12312", "d": "3/2018"}, {"body": "turn smaller selfcontained example without third party libs", "d": "3/2018"}, {"body": "try right time think setstate every components parallel sufficient make slow", "d": "3/2018"}, {"body": "note using strictmode component expected since double renders expected probably bug", "d": "3/2018"}, {"body": "fairly simple comparison exactly code different react versions per frame per frame", "d": "3/2018"}, {"body": "profile example provided alshakero looks like scheduling somehow leaves idle gaps", "d": "3/2018"}, {"body": "spending quite bit time hottest path think line might culprit want try commenting line bundle see helps", "d": "3/2018"}, {"body": "gaearon yep", "d": "3/2018"}, {"body": "good wonder allocation enumeration fiber changing hidden class target try set instead instead see still bad", "d": "3/2018"}, {"body": "undefined errors edit oh see want check gim sec", "d": "3/2018"}, {"body": "want look happens", "d": "3/2018"}, {"body": "ie statement size zero following function outputs warning function validatefragmentprops fragment currentlyvalidatingelement fragment const keys objectkeys fragmentprops let lt keyslength const key keys validfragmentpropshas key warning false invalid prop supplied reactfragment props key getstackaddendum break", "d": "3/2018"}, {"body": "polyfilling map seems like maybe issue phone ca nt find issue problem map broken ctor arguments like", "d": "3/2018"}, {"body": "ugh right first time bumping maybe time add internal rule mapset constructor argument want send fix", "d": "3/2018"}, {"body": "thing require map polyfilled already exists need avoid constructor arguments code", "d": "3/2018"}, {"body": "could also quick test check broken map implementations avoiding ctor argument easy enough react might nicer ecosystem insist valid map since libraries using mapset assuming react env baseline", "d": "3/2018"}, {"body": "browser compatibility table shows supported ie tried following code makes warning go away", "d": "3/2018"}, {"body": "let replace two string literal comparisons see map useful", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "brings broader question handle bad native implementations cases easy enough refactor happens really want use mapsetetc feature nt available native implementations make sense ask users polyfill bad native behavior", "d": "3/2018"}, {"body": "steida take look", "d": "3/2018"}, {"body": "see thank", "d": "3/2018"}, {"body": "yeeesss repro", "d": "3/2018"}, {"body": "budarin mention blog post supporting server rendering currently necessary provide data synchronously componentwillmount often used purpose constructor used replacement upcoming suspense apis make async data fetching cleanly possible client server rendering", "d": "3/2018"}, {"body": "trysound sorry nt need fetch data imagine component like loadable initialization check loading component initialize loading sides browser server constructor suitable place access components instance componentdidmount called server side", "d": "3/2018"}, {"body": "constructor access instance mean constructor suitable place access components instance", "d": "3/2018"}, {"body": "trysound thanks pointing sorry mistaken bug code", "d": "3/2018"}, {"body": "trysound given change docs updated react api essentially says sideeffects constructor anything developers watch cc bvaughn", "d": "3/2018"}, {"body": "setting initial state side effect", "d": "3/2018"}, {"body": "gaearon clarify suggesting clarifying answer following question lifecycle method one use server fetch data say redux action xhr given going away nt execute server", "d": "3/2018"}, {"body": "think implement new context api support effectively superseded portals react encourage migrate using portal propagate new legacy context correctly deprecate future minor release", "d": "3/2018"}, {"body": "see unfortunately cool party components still use like goldenlayout javascript react component integration react triggers docking panel rendering react following way class reactcomponenthandler extends goldenlayout lm utilsreactcomponenthandler render var reactcontainer thiscontainerlayoutmanagerreactcontainer thisreactcomponent reactcontainer reactdomunstablerendersubtreeintocontainer reactcontainer thisgetreactcomponent thiscontainergetelement reactdomrender thisgetreactcomponent thiscontainergetelement sure migrate createportal approach since javascript component triggers rendering docking react panel parent react component", "d": "3/2018"}, {"body": "update reconciler package latest version work", "d": "3/2018"}, {"body": "please provide information answer questions", "d": "3/2018"}, {"body": "hi hypnosphi anticipated used primarily application code assumed library authors would either fork manually implement subscription techniques described within libraries since would offer finergrained control like optimizing specific type subscription rather generic case since library seems lot focus subscriptions wonder option considered said idea library code using seem unreasonable would complicate release process slightly roughly double size package although big thing makes slightly uneasy though would limit options future versions may want make use newer react features might polyfillable maybe could fork relax peer dependency pull etc see goes keep eye direct people fork enough people request maybe make change main package well", "d": "3/2018"}, {"body": "ok think got idea", "d": "3/2018"}, {"body": "drop code components post", "d": "3/2018"}, {"body": "u try write u example description want see u code possibly wrong somewhere", "d": "3/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "3/2018"}, {"body": "see", "d": "3/2018"}, {"body": "accepts callback function could", "d": "3/2018"}, {"body": "nt return meaning make api promisify callback mode", "d": "3/2018"}, {"body": "think setstate async function maybe promisify think awsome okay awsome react awsome contributor", "d": "3/2018"}, {"body": "never ran synchronization problems setstate algorithm rendering changing sure stay way use synchronize actions really nt see good reason hide fact setstate async", "d": "3/2018"}, {"body": "could see could useful class function though might require context state change occurred depending might even tag state update operations like actions check state change performed potentially definition looks something like aftersetstate prevstate partialstate prevstate entire previous state object setstate partialstate partial state object sent setstate likely tag partial state objects type managing lot different state changes remove need callback however callback sent defined decide wanted", "d": "3/2018"}, {"body": "consultwithmike already", "d": "3/2018"}, {"body": "note happy provide pr feel something like explore good point however thinking fundamentally different example canceled nt guaranteed run furthermore diving typing state changes embedded idea even ie consumer nt add native could really good way cherrypicking want based change take example component leverages dragndrop heavily component like lot state changes occurring specific state changes require reactive state changes eg adding css class something others state changes could typed could really clean statement deal enumerable needs revise idea implementation could something like setstate partialstate type callback partialstate partial state apply type optional state type identifier callback optional callback execute setstate completes clearly callback sent second parameter easily type checked aftersetstate prevstate partialstate type prevstate entire previous state object setstate partialstate partial state object sent setstate type optional state type identifier", "d": "3/2018"}, {"body": "consultwithmike want make reducer current state model implemented user land without effort js const reducer prevstate type payload gt thissetstate state gt reducer state type payload gt", "d": "3/2018"}, {"body": "trysound abstract answer yes however thought one use case would nt provided potential reactbased framework think request components built past respond state changes think broader use case reducer model loose right add action object check parameter injected reducer second iteration realized could embedded useful way fundamentally believe usecase different ways managing components change state lot ways frequently like dragndrop component mentioned never seen use case think wrong thanks feedback", "d": "3/2018"}, {"body": "apologies missing misunderstanding proposed nt think proposed feature adds anything component api nt already achievable using either componentdidupdate setstate callback js class example extends reactcomponent updatestate thissetstate foo bar gt side effects response particular state update componentdidupdate prevprops prevstate side effects response state update compare thisstate prevstate want narrow things said react rfcs repo proposal like would need go like champion specific process follow", "d": "3/2018"}, {"body": "bvaughn implying ca nt used determine reactive state changes saying components get complex state gets much larger embedded could really create cleaner code therefore much like pieces api useful maybe include discussion rather discuss benefits much complex components", "d": "3/2018"}, {"body": "describing sounds like candidate callback also shown example either way mentioned previous comment rfcs repo appropriate place discuss proposals like", "d": "3/2018"}, {"body": "oh bvaughn missed reference rfcs repo previous comment apparently furthermore nt even know existed please excuse ignorance likely migrate last proposal post rfcs repo sir apologies trying get community make meaningful change", "d": "3/2018"}, {"body": "problem going close issue personally convinced necessary addition solves problems already solved componentdidupdate setstate callback anyone would like make case please open pr rfcs repo let see people think", "d": "3/2018"}, {"body": "please compare behavior tag npm changed point", "d": "3/2018"}, {"body": "checked behavior nt discover hit field initial truthy state radios select boxes application user builds form use stateless render function preview call function within class component usable field would like avoid using readonly would valid preview case adds bit confusion developers also nt seem supported selects least typescript type def", "d": "3/2018"}, {"body": "think wrong repo want airbnb reactdates one", "d": "3/2018"}, {"body": "jquense long day sorry confusion", "d": "3/2018"}, {"body": "hey waynebloss known issue please see thanks", "d": "3/2018"}, {"body": "plans deprecate proptypes actively promoting flowts usually better job use cases choose better fits project team", "d": "3/2018"}, {"body": "show form implementation", "d": "3/2018"}, {"body": "nt look like issue self closing inputs work presuming form inspecting first case children second case form ca nt see inputs case nt think bug react try one many support avenues help thanks", "d": "3/2018"}, {"body": "bug", "d": "3/2018"}, {"body": "also confirm new component created mounted rendered old component componentwillunmount called", "d": "3/2018"}, {"body": "pointed replacing always happens previously could fire first cases explains seeing however would expected new descendant rendered old one unmounted", "d": "3/2018"}, {"body": "according react docs indeed considered bug made changes initial see called make sense mounting new component react prepare new one edit also recommend make api calls called multiple times fiber suspend tasks prioritise others", "d": "3/2018"}, {"body": "cheers", "d": "3/2018"}, {"body": "explains seeing however would expected new descendant rendered old one unmounted check talk future react think behavior make sense consider way start rendering update background ca nt create new tree unmount old one", "d": "3/2018"}, {"body": "cheers gaearon makes sense looking like intuition led expect otherwise", "d": "3/2018"}, {"body": "google translate changes markup structure translate reactjsorg sites maybe issue happens react site ca nt find right dom translations", "d": "3/2018"}, {"body": "issue", "d": "3/2018"}, {"body": "hey dfrankland duplicate", "d": "3/2018"}, {"body": "going attempt replicate issue jsfiddle looking make first contribution actual bug like take try fix", "d": "3/2018"}, {"body": "focus loss bug react currently cased focus loss bug firstly react currently ability move something rendered react one parent another even involving portals unless move portal container result currently experiencing element losing focus element destroyed completely completely different element created course nt focus however even react support reparenting used appendchild move portal move container element react rendered would still see focus lost bug library basic fundamental level use move focused input one part dom tree another part dom tree input loose focus chrome firefox safari even consistently follow behaviour ultimately want focus retained moving things parents going manage focus upcoming getsnapshotbeforeupdate lifecycle hook may help though fundamental reparenting issue also need solved", "d": "3/2018"}, {"body": "thanks detail dantman agreed bug however could feature react maintain focus across portal guess would extremely common retain focus portal transition even underlying dom operations cause focus lost feels like similar concern react maintains scroll position even dom updates thanks looking", "d": "3/2018"}, {"body": "cc bvaughn implemented api api described rfc finally encountered issue using react nextjs see", "d": "3/2018"}, {"body": "react expose utility check whether given value valid passed reactcreateelement think opposed exposing utility like already releasing package called brand checking utilities along think could add something like may good idea change forwardref return function instead object look special field every single functionclass pass react think want go strategy since introduces extra cost majority cases ultimately think problem blocker unfortunate react widening supported types semver major change library author choose depend fact react supports defining components classes functions eg objects kind committing closely tracking exactly react supports course better solution would way check maintained said think open providing", "d": "3/2018"}, {"body": "one nt break internet bugs aside prefer reserved terminology original meaning ship something breaks existing websites without direct action behalf example chrome interventions arrayprototypecontains etc using phrase refer change opt bumping version react later bumping library new forwardref public api seem entirely fair makes break internet sound cheaper commonplace", "d": "3/2018"}, {"body": "releasing package dan mentioned along exposes function called could used although function expects react elements return type rather naked type nextjs validation check seems expecting put another way", "d": "3/2018"}, {"body": "already releasing package called reactis brand checking utilities along think could add something like isvalidelementtype sounds like perfect solution nt aware creation reactis great idea aside prefer reserved terminology original meaning sure thing sorry hyperbole meant express react fully within rights add behavior minor change may cause consternation amongst taken illegal yet reasonable dependencies upon react internals personally nt horse race wanted raise problem witnessed wild using new api whose design considered rfc process suggest solution two", "d": "3/2018"}, {"body": "bvaughn although function expects react elements return type reactcreateelement rather naked component type nextjs validation check seems expecting checking type element instantiation seems like fairly awkward developer experience unintuitive would expect react throw call received invalid element type even though today appears check deferred renderer begins mounting element realize hocs going style right compelling value able check hoc instantiation time component wrapping hoc valid component type fact see checks popular libraries today including redux react native styledcomponents fine nt want change implemented think would good idea breakages start rolling", "d": "3/2018"}, {"body": "unintuitive would expect react throw createelement call received invalid element type even though today appears check deferred renderer begins mounting element intentionally throw easily inline function replace compiler output compelling value able check hoc instantiation time component wrapping hoc valid component type agree useful hocs", "d": "3/2018"}, {"body": "fair enough pointing difference next works", "d": "3/2018"}, {"body": "cool open pr add element type validity check", "d": "3/2018"}, {"body": "opened pr", "d": "3/2018"}, {"body": "new method added go upcoming release thanks", "d": "3/2018"}, {"body": "see nothing wrong mybutton react component jsx compiles reactcreateelement read docs carefully import component named use different component compiled something like picture cmiiw", "d": "3/2018"}, {"body": "hmm concerned might happen assume idempotent looks like found case take look", "d": "3/2018"}, {"body": "changing line nt sufficient fix equal means stack misaligned one option add invariant throws usually avoid devonly invariants since possible error case anyway maybe get away", "d": "3/2018"}, {"body": "yep use case described", "d": "3/2018"}, {"body": "currently working text editor like vscode chrome devtools nicer replacement panel editor allows custom file handlers register file extensions matching file opened return object like imagine three tabs open editor workspace host mounts views directly inside render function like every time user switches wo nt user switches back react mounts unmounts remounts counter manually rendering views using views components type share single dom node manually swap another dom node hosting another group views happens without react unmounting node ie components stay virtually mounted hosting dom nodes swapped state preserved components never get unmounted component abstracts mechanism watches performs magic since async changes expected former action take effect synchronously causes parent components wait things move forward footnotes one might say views visual state saved like snapshot trust also concept give access returned file handlers controllers might mounted unmounted tab literally closed user", "d": "3/2018"}, {"body": "honorable mentions", "d": "3/2018"}, {"body": "please create small reproducing example shows trying simplified way still quite clear constraints reason using portals instead toplevel calls portals would flushed together rest update", "d": "3/2018"}, {"body": "introduction developing allinone editor web devs means able openedit many kinds files kind file requires unique component view file example text files image files keyword many components play implementation renders render function looks like look like look like problem imagine user switching tabs assume switching tab given current implementation know react first unmount mount way around user switches back tab exactly undesirable tab opened want stay mounted literally closed user switching tabs want temporarily taken dom inserted back user switches back solution afaik native way get react want hoping could take control component given dom node take care injectingswapping dom node tab closed cleanup happy consider possible solutions tackle problem really kind help would appreciated", "d": "3/2018"}, {"body": "issues similar issues reactdomrender longer works synchronously nested rendering context reactdomrender return null bringbacksynchronousrender p", "d": "3/2018"}, {"body": "seems like createportal exactly want", "d": "3/2018"}, {"body": "yes asked small isolated code example sounds like portal would solve problem hard say without running code", "d": "3/2018"}, {"body": "far understand portals guess rerouteproxy react output react reconciler still applies diffing usual means mounting unmounting remounting even use two different dom nodes two different components minimal repro open devtools console click see message components triggered hooks", "d": "3/2018"}, {"body": "rendering components outside hierarchical dom tree something portals solve nt want get unmounted temporarily taken dom switching tabs", "d": "3/2018"}, {"body": "nt want get unmounted temporarily taken dom switching tabs bit confusing clear using achieves put together example using current approach clearer trying currently accomplishing intuition nt need achieve trying hard recommend anything without seeing", "d": "3/2018"}, {"body": "think approach flawed given current implementation know react first unmount mount way around user switches back appjs tab exactly undesirable reactfriendly solution keep mounted toggle visibility current one something like hoping could take control reactdomrendersync component given dom node take care injectingswapping dom node strongly recommend solution like pretty hard implement correctly nt propagate context general nt buy anything reactfriendly solution described far see", "d": "3/2018"}, {"body": "jquense allocate freshdedicated node component way isolated react vdom tree never encounter component type manually show active view gaeron problem might become apparent tabs open imagine extra dom nodes document performance hit scared", "d": "3/2018"}, {"body": "tabs open imagine extra dom nodes document performance hit scared tried browsers pretty smart imagine performance see hidden dom nodes going detached ones perf concern would around layout calculation something nt need done hidden nodes guess tho reactdomrender allocate freshdedicated htmlelement node component way isolated react vdom tree never encounter component type unclear ca nt thing really necessary createportal helpful put together code sandbox otherwise think keep talking past", "d": "3/2018"}, {"body": "neeksandhu agree gaearon jquense browsers pretty smart probably handle pretty efficiently toggle visibility also likely get better user experience result hidden nodes would naturally retain inner container scroll positions", "d": "3/2018"}, {"body": "verified removing document actually gives performance improvements given viable strategy create divs demand render bunch portals direct output use refs add remove divs necessary hope helps", "d": "3/2018"}, {"body": "might take performance claimargument back tested agree guys premise argument fact perf centered libsapps use removingadding elements approach guys look internals text editor like codemirror monaco editor vscode wo nt see rendering lines dom set ones outside viewport instead addremove lines scroll another example made think way reactvirtualized also nt hide items visible literally removes dom maybe bvaughn shed light", "d": "3/2018"}, {"body": "look internals text editor like codemirror monaco editor vscode wo nt see rendering lines dom set ones outside viewport display none instead addremove lines scroll sure expect thousands tabs open case optimization indeed relevant cases less clear still implement logic keeps last n opened files truly open unmounts older nodes would still require rendering scratch next time open ultimate optimization described portals nt much different attempted attempt use portals looks incorrect trying imperatively render portals work instead suggesting returning array render wanted render directing detached nodes manage attachment detachment hope helps", "d": "3/2018"}, {"body": "big thanks gon na go rendering hide others except one active jrylan sold also likely get better user experience result hidden nodes would naturally retain inner container scroll positions", "d": "3/2018"}, {"body": "looks like using instead related could use anonymous functions instead closed functions easily access use variable like", "d": "3/2018"}, {"body": "milesj u mean anonymous functions instead closed functions new react first application using react", "d": "3/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "3/2018"}, {"body": "past discussion", "d": "3/2018"}, {"body": "looking safe html parsing xss protection offer pen tested ignore failed build working changing environment", "d": "3/2018"}, {"body": "gaearon thanks pointers summarize mentions similar mechanism explicit jsx explicitly reactcreateelement pojo trust stringorelement similar perl untaint like tainting binary decision decision trust specific set contexts la themes thread proposed new syntax allow authors specify sinks known receive trusted values dislike approach pushes xss safety onto application developer recognition script element bodies style attributes risky value sinks respond particular ones mentioned comment brigand already evaluated decided protecting invalid styles simple fix last evaluated found prohibitively expensive automatically given value requiring values simple numbers keywords explicitly wrapped type specifies makes things easier ambiguity strings used eg urls fontfaces problematic backwards compatible injection urls whitelist safe patterns would massively huge actively want move away whitelists react fallback underlying dom blacklist could come would likely incomplete anyway agreed x comment eg dangers user supplied href javascript one applies protocols true webcomponents frameworks complicate things see ends used url clicked execute script true user writing defined fact reaches instead implementation detail security consequences custom components give developers great new ways decompose application simpler part implementation hiding otherwise strength make harder use code review techniques avoid xss would rather copy responses miesj iiuc interweave treats interpolated values tags specified jsx level trust right preinterpolation hooks worked polymer resin treat template trusted suspicious interpolated values", "d": "3/2018"}, {"body": "clear conclusion implemented brandchecking react elements cause xss solve scenario", "d": "3/2018"}, {"body": "gaearon thanks explaining iiuc change prevented crafted json objects massassigned getting level trust output jsx expression produces component", "d": "3/2018"}, {"body": "mikesamuel sorry got bit ahead right markup would need string safely parsed filtered interweave like said could possibly bubble xss filter functions easy reuse", "d": "3/2018"}, {"body": "think likely alpha buggy unstable mean try latest alpha instead", "d": "3/2018"}, {"body": "gaearon thank ok", "d": "3/2018"}, {"body": "hey try keep issue tracker focused bugs support try one many available avenues thanks", "d": "3/2018"}, {"body": "problem rendering element sets ref nonnull component first renders component nt rendered ref never set undefined refactor component return fragment even see ref set correctly second problem run trying read ref even though setting ref component set ref component ref set reference component instance dom element renders see trying forward ref element rendered react nt let components access component nt work want forward ref use different prop name like also new api coming solves read information refs general see fork codesandbox fixes outlined finally use issue tracker bug reports feature requests question future please check community support resources thanks", "d": "3/2018"}, {"body": "gon na lie stared wondering wrong", "d": "3/2018"}, {"body": "thank lot taking time answer lot clearer", "d": "3/2018"}, {"body": "hey josema something considered may may make way future api right concrete answer whether happen component api changes considered since feature request team aware nothing actionable right going close thanks", "d": "3/2018"}, {"body": "looks odd figure minimal reproducing case", "d": "3/2018"}, {"body": "reason test fails check pr mentions writing tests unsafe async warnings noticed certain cases errors swallowed matcher resulted confusing test failures example error prevented code tested logging expected warning test would fail saying warning nt logged rather reporting unexpected error think better approach always treat caught errors highestpriority reason failing test sure best way handle way detect nesting combination inside could explicitly error saying supported nt think possible", "d": "3/2018"}, {"body": "maybe could add lint rule warn combo update might trickier thought since seems like tests nt work nesting order reversed replay failed work warning logged second time even though expect", "d": "3/2018"}, {"body": "nt think bug description correct calling two different strings returns documentation jestdiff says generate string highlight difference two values green red similar github code diffing problem seem seeing caused line looks like fails handle singleline strings sure check case like looks like return value cases", "d": "3/2018"}, {"body": "related jest issue", "d": "3/2018"}, {"body": "html usa canada admin user rest function onreset windowcountryvalue ca windowrolevalue user ca nt even without react", "d": "3/2018"}, {"body": "liximomo lol option unfortunately", "d": "3/2018"}, {"body": "pure js jquery version using cant find onreset event synthetic events docs react whats wrong using onchange select selecte value", "d": "3/2018"}, {"body": "wzup callback equal asynchronous actually changed value get reset browser reset event handler noreact demo make work way", "d": "3/2018"}, {"body": "jburghardt pure js jquery serious chrome console test page nt jquery surprised actually pseudo code though works chrome wo jquery cant find onreset event synthetic events whats wrong using onchange select quite big form heavy data iterations ineffective rerender form every state update nt use redux inherited code developer nt care productivity like use instead", "d": "3/2018"}, {"body": "liximomo genius thanks clarification works sound logical indeed finally found real life practical use case could answer question could accept", "d": "3/2018"}, {"body": "hey catching wzup able sort everything", "d": "3/2018"}, {"body": "wzup thats reference documentqueryselector", "d": "3/2018"}, {"body": "nhunzaker used liximomo suggestion works well far", "d": "3/2018"}, {"body": "sounds good", "d": "3/2018"}, {"body": "interesting wonder going know holds true firefox another browser knowledge password inputs receive special treatment aweary jquense think anything", "d": "3/2018"}, {"body": "nhunzaker unfortunately fid way check detached dom nodes firefox safari fyi ran tests disabled disabled", "d": "3/2018"}, {"body": "tried similar test without react", "d": "3/2018"}, {"body": "similar vanilla example ca nt see detached element memory snapshot", "d": "3/2018"}, {"body": "tried debugging little bit nt see problems password inputs specifically using example posted detached nodes referenced fiber instance example fiber component references old fiber div element fiber div longer document suspect effect eventually cleared reference dropped sure gaearon nt see behavior would indicate memory leak though taking profile performing gc looks like detached nodes eventually get cleaned possible could efficient storing references detached elements", "d": "3/2018"}, {"body": "related", "d": "3/2018"}, {"body": "realized javascript behavior", "d": "3/2018"}, {"body": "gaearon please could double check one react keep behavior", "d": "3/2018"}, {"body": "react rerender element types props change possible nt passing correct icon element provide example reproducing issue investigate suspect nt bug questions please check community support resources", "d": "3/2018"}, {"body": "turn failing test suite", "d": "3/2018"}, {"body": "dont upset gaearon sure mean comment familiar github", "d": "3/2018"}, {"body": "timoruetten think asking existing tests reactdomserverintegration updated fail accurately testing happening serverclient identical behavior gaearon update tests want pr fix", "d": "3/2018"}, {"body": "yes fix", "d": "3/2018"}, {"body": "writeprotected reserved api stores string longer usedrecommended likely want constructor props context super props context removed thisrefs thisonebutton", "d": "3/2018"}, {"body": "yep intentional existing react api put refs instance instead", "d": "3/2018"}, {"body": "gaearon put refs instance instead stored toplevel component instance want namespace possible previously react placed placed toplevel thanks", "d": "3/2018"}, {"body": "could add something like instead nt like instance whatever reason", "d": "3/2018"}, {"body": "jquense believe intentional support package though maybe intention avoid calling unprefixed versions seem like methods still called", "d": "3/2018"}, {"body": "particular usecase caused discover migrating document focus needs checked prior update flushing update changes visual state drops focus sounds like use case cc bvaughn", "d": "3/2018"}, {"body": "thanks cc gaearon fwiw jquense checking really better different checking far timing goes problematic async though created love know thoughts although think probably changing slightly soon hopefully simplify intentional none unsafe lifecycles regardless alias invoked could argued suppose unsafe ones run think existence new lifecycle implies old ones removed think reasonable us treat case warn rather support", "d": "3/2018"}, {"body": "suppose unsafe ones run think existence new lifecycle implies old ones removed makes sense call unprefixed versions methods permanent seems like called regardless new lifecycle methods rationale behind calling components use feels like might force users still rely method avoid using keep using long possible", "d": "3/2018"}, {"body": "sounds like use case reactjsrfcs read yes seems like exactly right thing p ya one step ahead unsafe methods permanent seems like called regardless new lifecycle methods intuition cases appropriate ideal opt unsafe everything feel like scope work specific things feel safeish said tho getsnapshot case one think encountered nt feel like easy enough migrate added seems cover bases anyway", "d": "3/2018"}, {"body": "unsafe methods permanent seems like called regardless new lifecycle methods hm guess still seems weird though could component eg case would called could run lifecycle codemod get called anyone else object change", "d": "3/2018"}, {"body": "think two versions legacy unsafe consistent one way another decide change current behavior maybe change back approach used skip willlifecycle special surpress attribute set", "d": "3/2018"}, {"body": "unsafe methods permanent seems like called regardless new lifecycle methods nt quite agree think presence unsafe method works like opt legacy mode thus turns new hooks see surprising confusing warn though", "d": "3/2018"}, {"body": "warn though seen warning gdsfp mixed cwrp actually current behavior nice folks supporting right hooks let react ignore gdsfp new old versions", "d": "3/2018"}, {"body": "seen warning gdsfp mixed cwrp mean nt warn combinations sounds like bug actually current behavior nice folks supporting write hooks let react ignore gdsfp new old versions easy mess intentionally wrote polyfill suggest using instead trying implement correct semantics every library", "d": "3/2018"}, {"body": "actually current behavior nice folks supporting write hooks let react ignore gdsfp new old versions way done using reactlifecyclescompat polyfill defining old new lifecycles latter approach problematic couple reasons twice much work update state since would logic lifecycles deprecated unsafe keeping around depending increases likelihood shared component actually async problems also triggering strictmode dev warnings seen warning gdsfp mixed cwrp warn particular combination indicates potential serious misunderstanding two lifecycles strictmode warnings one specific see good enough though nt execute methods explicitly warn combinations well take away issue either always execute gdsfp new lifecycles unless special polyfill flag detected broaden dev warning gdsfp old lifecycles component also include cwm cwu", "d": "3/2018"}, {"body": "broaden dev warning gdsfp old lifecycles component also include cwm cwu makes sense warning fire whenever methods nt get called explain using new apis lose ability use old ones", "d": "3/2018"}, {"body": "go broadened warning approach message like unsafe legacy lifecycles called components using new getderivedstatefromprops api uses getderivedstatefromprops also contains following legacy lifecycles componentwillmount componentwillreceiveprops componentwillupdate specific list dynamic based legacy lifecycles component actually contains", "d": "3/2018"}, {"body": "think messaging around methods need explained carefully intuitive introduce lifecycle methods new legacy especially since precedence conditional lifecycle method calls behavior also nt mentioned rfc think presence unsafe method works like opt legacy mode thus turns new hooks reasonable release minor would expect new methods coexist new lifecycles unless explicitly opt strict mode using", "d": "3/2018"}, {"body": "especially since precedence conditional lifecycle method calls form conditional lifecycle necessary order polyfill work whether driven presence new behavior also nt mentioned rfc polyfill discussions happened rfc closed generally probably possible encompass aspects feature rfc best effort attempt made honest think fan option always execute gdsfp new lifecycles unless special polyfill flag detected open feedback took fact dan comment suggest minority opinion", "d": "3/2018"}, {"body": "polyfill discussions happened rfc closed generally probably possible encompass aspects feature rfc best effort attempt made definitely saying people participated discussions around feature nt aware behavior since nt part public feedback process yall probably thought think behavior look like call deprecated methods except component defines call warn components defined offer way enforce upcoming conditional lifecycle logic get rid deprecated lifecycle methods warn using deprecated lifecyles get rid deprecated lifecycle methods stop calling methods components new lifecycle methods honest think fan option agree", "d": "3/2018"}, {"body": "regarding note wo nt get rid deprecated lifecyles release since would backwards breaking", "d": "3/2018"}, {"body": "oh yeah mistake wires got crossed warning", "d": "3/2018"}, {"body": "sebastian chatted length going proceed broadening dev warnings prefer option one cases sebastian concerned less safe case people forked polyfill source codemodded case would end eg muddied upgrade behavior", "d": "3/2018"}, {"body": "expected controlling handler inputs use one provide noop function onchange silence warning side tho react onchange radiocheckbox uses onclick internally nt really gain anything using onclick code admittedly though behavior likely change future versions", "d": "3/2018"}, {"body": "hey hyperknot react nt require keys rendering constant elements like problem mobx wrapping children assume internal mobx class means returned render actually array key required", "d": "3/2018"}, {"body": "ok bring mobx issue react side one workaround found rendertostring dangerouslysetinnerhtml guess looks super ugly least making react handle element static node something worry one question though safe mean rendertostring needed sanitisations etc dangerouslysetinnerhtml nt actually dangerous", "d": "3/2018"}, {"body": "think fine rebase broken builds master caused upload fail", "d": "3/2018"}, {"body": "html caseinsensitive agree bit surprising practical difference browser might bit faster us avoid lowercasing", "d": "3/2018"}, {"body": "issues board mostly used bug reports feature requests better shot getting help community board nonetheless ca nt new webpackdefineplugin processenvappenv jsonstringify dev consolelog processenvappenv dev worked past", "d": "3/2018"}, {"body": "question please check community support resources", "d": "3/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "3/2018"}, {"body": "adding example trying working edit following guidelines", "d": "3/2018"}, {"body": "achieved new api js class basemapelement extends reactcomponent componentdidmount consolelog thispropscontext render return null const mapelement gt context gt", "d": "3/2018"}, {"body": "way access redirect props edit changed", "d": "3/2018"}, {"body": "higher order component redirecs props good pattern cases nt want extra component usually wat store context value component instance like access life cycle hooks bit ugly ok generally think since opting nicer hoc pattern optimization", "d": "3/2018"}, {"body": "facing dilemma easy way access call context lifecycle methods might need initialize stuff check fetch data even cleanup unmount people current supposedly broken context yes solved wrapping component another component feels like workaround solution", "d": "3/2018"}, {"body": "store context value component instance like thiscontextvalue value access life cycle hooks pretty sure unsafe async mode please cc acdlite", "d": "3/2018"}, {"body": "yes solved wrapping component another component feels like workaround solution agree would nice natively access able initializecleanup things", "d": "3/2018"}, {"body": "general using instance vars clever cheat normal data flow going cause problems async bit confusing today instance vars way certain things like timers release async publish clearer recommendations one day new component api rely much instances tl dr use props indirection worry much extra component", "d": "3/2018"}, {"body": "pretty sure unsafe async mode please would unsafe way faily unclear talk async mode unsafe means starting feel like boogyman behavior irrational unpredictable nt fill folks lot assurance system generally liked straightforward easily understandable data flow model feels like components back pre land magic objects also easy say add another component often onerous introduces category bugs challenges starts feel like folks invent abstractions react api order safe", "d": "3/2018"}, {"body": "sorry sounds annoyedangry nt intend tone phhhhooone", "d": "3/2018"}, {"body": "sound angry haha get point share questions howwhy unsafe", "d": "3/2018"}, {"body": "starting feel like boogyman behavior irrational unpredictable sorry working guidance specific suggestions month please give us time collect publish blog post also difficult discuss without actual alphas play also something working hard either say anything warn advance things work well err side warning see look like making difficult sure code play see mean make sense would unsafe way get chance watch talk bit hard explain seen second part clear asking watch hope talk convince aiming solve broad class problems plagued react since beginning features worth revisiting assumptions might gotten used assuming seen talk specific explanation particular case order able suspend rendering like showed demo react needs able call point time potentially different props example may set props new screen loaded call set old rendering response interaction current version tree eg press something new screen loading async rule thumb lifecycles like ref callbacks execute welldefined points time props state correspond screen luckily lifecycles neatly fit picture introducing better alternatives gradual migration going blog post root issue async mode react make guarantees order calls method really something react never guaranteed first happened order every time storing field reading lifecycle safe might store field time react called different props suspended tree ready yet", "d": "3/2018"}, {"body": "easy way access call context lifecycle methods yes solved wrapping component another component feels like workaround solution understand feels like extra wrapper makes new context fast explicit wrapper nodes tree able quickly find components need update need access context lifecycle take prop js class button extends reactcomponent componentdidmount alert thispropstheme render const theme children thisprops return export default reactforwardref props ref gt theme gt almost amount lines definition", "d": "3/2018"}, {"body": "yes solved wrapping component another component feels like workaround solution wanted second dan said child function render prop approach official api new context please use let react worry making sure fast would unsafe way draft strict mode docs also touch mutating instance another type side effect dangerous async mode", "d": "3/2018"}, {"body": "experimental branch following guidelines proposed anyone look see make sense", "d": "3/2018"}, {"body": "familiar library nt know people ever make use refs components mixin pr might good use case new forwardref api", "d": "3/2018"}, {"body": "make sense thanks reference going close issue", "d": "3/2018"}, {"body": "exceptional case generating sgmllike code likely server rendered may become necessary override default behaviour whitelisted html void elements example rss uses link tag denote site root url url individual item entries nt meant generic sgmlxmllike renderers sole purpose rendering dom outputting html respectively adding escape hatches get around would run contrary intended purpose renderers open worms xmllike formats users might want output want use react render format could consider using reactreconciler create renderer api currently experimental suitable longterm solution cases hope helps", "d": "3/2018"}, {"body": "hunch might case thanks reviewing heads", "d": "3/2018"}, {"body": "already stated issue tracker bug reports feature requests question please check community support resources recommend reactjs irc channel want look deeper react keys", "d": "3/2018"}, {"body": "nice", "d": "3/2018"}, {"body": "hi orelc could solved two different ways data children receive could placed parent component passed via props children make changes still keep data available data components stored completely different way like redux", "d": "3/2018"}, {"body": "use static field components everyone could see componentsproject structure maybe others potential risk think concern probably unfounded anyone already looking js code added name field necessarily visible source code since stack traces built running runtime mention name give component far less interesting anyone component already open code say making harder tooling see component names nt going thing protect make debugging productions pretty terrible", "d": "3/2018"}, {"body": "thanks response said know implement still could get componentsproject structure using libs like babel decompile make reactdevtools support field increase cost agree like deceiving acknowledge make less people get results directly nt want look think enough ca nt say better way solve question post wen store sourcemap server makes users ca nt see analyze error thrown client combining sourcemap scenario like question post ca nt something like sourcemap", "d": "3/2018"}, {"body": "acknowledge make less people get results directly nt want look nt think agree already easy adding another property nt improve situation substantially hit browser click button components already see identifier names used heart issue tho knowing component names nt security risk effort obfuscate nt think worth code even minified obfuscate names purely practical approach making code smaller", "d": "3/2018"}, {"body": "hit browser click pretty print button components already see identifier names used see many things get answer lib automatically look whole src code write lib hand many people open reactdevtools nt see correct component name wo nt think get src code even searchwrite lib heart issue tho knowing component names nt security risk effort obfuscate nt think worth know want people ca nt get make sense us purely practical approach making code smaller yep debugging something like add static components something else like tradeoffs", "d": "3/2018"}, {"body": "core problem still clear want prevent people seeing component names unclear problem would solve since nt seem anyone seeing component names via development tooling problem", "d": "3/2018"}, {"body": "expanding api surface minor security obscurity nt great tradeoff agree everything jquense said well name defined anywhere component accessible anyone inspect page also security application depends access component names may want reconsider whatever security architecture implemented reasons going close recommend use", "d": "3/2018"}, {"body": "core problem still clear want prevent people seeing component names nt prevented everyone analyze get whole project structure fetch data ssr use redux write posts criticize copy etc nt mean need everyone ca nt see component name like form verification frontend developers directly fetch ie bypass verification reason nt verification", "d": "3/2018"}, {"body": "try turn test similar tests", "d": "3/2018"}, {"body": "ok dependencyfree jsfiddle bug click name hyperlink twice enter infinite loop", "d": "3/2018"}, {"body": "made reduced case js var context reactcreatecontext null class app extends reactcomponent constructor props super props thisstate reverse false handleclick thissetstate reverse gt return reverse reverse renderitem id return update gt oops renderlist var list map id gt thisrenderitem id thisstatereverse listreverse return list render return reactdomrender documentgetelementbyid content seems like oops node essential reproduce", "d": "3/2018"}, {"body": "may run similar case nt able reproduce specifically yet know goes away remove nt reason think related figured least share quickly case provides context ha folks understand works p", "d": "3/2018"}, {"body": "jquense mean combination new context", "d": "3/2018"}, {"body": "directly least like said nt sense related case maybe share common internal path something mentioning open separate issue reproduce simply", "d": "3/2018"}, {"body": "probably unrelated problem issue localized loop happens inside context path", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "thanks gaearon give retest next alphabeta release", "d": "3/2018"}, {"body": "gaearon like test know bug might worth renaming test adding assert something like", "d": "3/2018"}, {"body": "thought bit ca nt really come good name name like would tied implementation details want regression test add similar tests rename something like think fine", "d": "3/2018"}, {"body": "got shouldnt put work fiber test name", "d": "3/2018"}, {"body": "nt care test names strongly issue link useful anyway", "d": "3/2018"}, {"body": "works latest alpha thanks fix", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "know gitter room would also better doesnt cost thing also closely integrated github", "d": "3/2018"}, {"body": "thanks request think existing community chat support groups listed website sufficient great resources support driven strong community opening gitter channel would potentially weaken community fragmenting nobody wants sit bunch different chat services would also imply level official support react team nt currently time reactiflux great highly recommend", "d": "3/2018"}, {"body": "explain use case need read pending state rather one user sees screen", "d": "3/2018"}, {"body": "thanks quick response implementing game longerterm intend render game something complex meantime wrapping react component problem appears general particularities game though state world represented grid w represents wall gt represents player character represents ground etc world roughly thought game bit special players write scripts execute sequence actions order however problem general game makes appear whether players scripts otherwise necessary able perform checks must able correctly return new state player writes script know seems particular game seems able handle state transitions speed without know actions cause transitions ahead time something able solved react point calling read world state nt know three times turned left right seems weird calls means lose consistency unknown amount time method force data consistent reading means call one go know changes happen please let know missing something critical thanks", "d": "3/2018"}, {"body": "called result calling get previous state chain potentially pending one argument updater function use calculations like explain sufficient", "d": "3/2018"}, {"body": "words js runplayerscriptsfortick thissetstate runscripts function runscripts state run scripts return next state", "d": "3/2018"}, {"body": "thanks response hmm think work requires custom transformations player commands correctly execute context use state keep solution mind implement right seems bit fragile leaning towards keeping state outside instead happy close issue solutions really wanted discuss higherlevel issue whether easily force consistency issue ever come guys reference promise resolves state consistent would incredibly helpful situation something found similar", "d": "3/2018"}, {"body": "hmm think work requires custom transformations player commands correctly execute context use state bit hard discuss without specific full example force synchronous bad perf practice though good reasons react flush state immediately encourage check resources went depth happy continue discussion full code example preferably long anchor", "d": "3/2018"}, {"body": "thanks let take look resources see whether work performance hit nt tested yet may bad since might want execute player commands one line time anyways animate moves mind continue implementing get back", "d": "3/2018"}, {"body": "sure", "d": "3/2018"}, {"body": "able solve issue via means closing record realized specific use case necessary separate rendered state world calculated state world player scripts able run immediately calculated state world rendered state world updated delay afterwards therefore decided keep two states world update rendered state ie order animate state changes delay also kept history intermediate state changes necessary reach calculated state rendered state unsure best way approach seems reasonable since indeed need two types state different various times thanks support", "d": "3/2018"}, {"body": "hey pavel second second case react able match component original tree one subsequent tree solve using keys", "d": "3/2018"}, {"body": "yeah cases look similar nt second case react sees two children depending expanded value instead swapping two elements unmounted first mounting second could tell react element prop still end work want eg moving element index back use ternary inline well fyi jsx const expandable expanded gt const expandedicon const collapsedicon return expanded expandedicon collapsedicon", "d": "3/2018"}, {"body": "jquense hejld thanks answers guys", "d": "3/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "3/2018"}, {"body": "ok sorry thank", "d": "3/2018"}, {"body": "working", "d": "3/2018"}, {"body": "code correct reactdom date", "d": "3/2018"}, {"body": "one example use case would help uses pick child uses attach need verify child element fact html element something else", "d": "3/2018"}, {"body": "reactis package built specifically validating react elements anything might option enhance package although nt see api needs related react could use helper function internally application instead", "d": "3/2018"}, {"body": "raunofreiberg yes could code helper function making list html elements nt exactly call efficient comfort mostly relies undefined behavior needed look source code make function specs nt enough furthermore package nt visibly mentioned specs tutorials add package needs referenced visibly else nt going help anyone", "d": "3/2018"}, {"body": "nt think good fit react api reactdom trying harder less whitelists like generally nt even know something valid element type heck rd try render string type element gathering want think enough check type", "d": "3/2018"}, {"body": "jquense said want less whitelisting using along package like htmltags likely sufficient userspace solution though inclined think inspecting reactelement runtime nt good idea anways", "d": "3/2018"}, {"body": "alopezsanchez nt directed efforts increasing code coverage find opportunity add useful tests feel free open pr", "d": "3/2018"}, {"body": "hey please provide reproduction issue seeing using template provided issue template seen opened issue possible diagnose problem description especially since things describing possible common react", "d": "3/2018"}, {"body": "response reproduction closing", "d": "3/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "3/2018"}, {"body": "aweary please answer react example remove keys cloned elements reactformgroupjs fg formgroupgetreactkey let newprops props code works get warnings children iterators", "d": "3/2018"}, {"body": "array elements explicit unique value", "d": "3/2018"}, {"body": "put keys code nt work lol trysound", "d": "3/2018"}, {"body": "suspect result react handles events occur reconciliation currently react disables synthetic event system committing means events occur result node removal nt actually handled talked event queue gets processed commit phase right current plan", "d": "3/2018"}, {"body": "think applications run minification bundling specifying react reactdom would nt make difference case new error think new wording link helpful enough", "d": "3/2018"}, {"body": "confused settimeout change run result react", "d": "3/2018"}, {"body": "tracker used bugs features questiones ask look said could reproduce error code provided", "d": "3/2018"}, {"body": "copy question place jburghardt otherwise dont understand line could reproduce error code provided save two demo codesandbox really different console message", "d": "3/2018"}, {"body": "mentioned please refer community support resources usage questions thanks", "d": "3/2018"}, {"body": "axnyff event handler behavior may changed props updated", "d": "3/2018"}, {"body": "axnyff please reread code snippet description prop update remove listener previous props add listener new props could possibly optimized addingremoving function identity changed make sense", "d": "3/2018"}, {"body": "bad read fast sorry look bit tricky nt know really react bug something normal looks like removing event listener listen event adding new one firing event think remove old event listeners instead replacing listener work", "d": "3/2018"}, {"body": "add logging within loops code running expected handlers please try using latest alpha latest stable release thanks", "d": "3/2018"}, {"body": "thanks heads think fairly unlikely edge since probably break lot websites deprecated things web rarely ever actually get removed p said maybe try fallback almost support right", "d": "3/2018"}, {"body": "jquense well right deprecated stuff typically removed impossible say whether wo nt obviously wo nt older general support browsers like ie lt security patch support unlikely dropped either edge hand edge case hah proud line active development maintenance real chance anyways perhaps map deprecated key values standards compliant ones mitigate risk oh god blind close spotted line", "d": "3/2018"}, {"body": "also weird form event handler nt work within portal new window jsx class mycomponent extends reactcomponent constructor props super props thisonbuttonclicked thisonbuttonclickedbind render jsx class mycomponent extends reactcomponent constructor props super props render", "d": "3/2018"}, {"body": "also appears chrome firefox windows", "d": "3/2018"}, {"body": "wojtekmaj please provide steps reproduce issue seems work fine", "d": "3/2018"}, {"body": "wojtekmaj trying reproduce example trouble saving value date state function called", "d": "3/2018"}, {"body": "exactly facing look hood line called calendar component thinks call onchange look state see value indeed changed callback called fragment calendar component exact step setstate called see next step updating state callback line called put breakpoint inside function yet never reaches", "d": "3/2018"}, {"body": "honestly mind blown change minimal reproduction copy whole calendarjsx straight newest version code works difference though call thissetstate line thissetstate calling different function setstate first example work setstate second example work hmm looks like actually two different versions react somehow reactcalendar library version imported", "d": "3/2018"}, {"body": "okay point sure version conflict cause invalid dependencies installed npm closing clearly react side way anyone would like help defining packagejson file package publishing uses react dev unit tests etc react dependencies compatible react gt install react side react users help much appreciated", "d": "3/2018"}, {"body": "thanks report reproduction vydimitrov investigated turns specifically lines native map implementation nt support initializing map iterable maps ends empty means props map missed treated unknown attributes opened fix", "d": "3/2018"}, {"body": "ok", "d": "3/2018"}, {"body": "thank detailed answer aweary makes sense", "d": "3/2018"}, {"body": "thanks reporting", "d": "3/2018"}, {"body": "nt recommend creating components render behavior seem unexpected calling mouse looks like causing problem since removing call fixes issue", "d": "3/2018"}, {"body": "aweary standin something triggers rerender like calling also usecases creating component within render valid jsx import styled styledcomponents const styledelement styleddiv const mycomponent type props gt const dynamicallycreatedelement styledelementwithcomponent type return", "d": "3/2018"}, {"body": "tobilen problem pattern creating new component function every render problematic need dynamically create components render phase recommend implementing kind cache nt keep recreating semantically identical functions version joshuajacobowitz demo see nt issue joshuajacobowitz root cause problem creating new component every render also creating new element using react reconciliation heuristics identify entirely new component throw old one normally react would update mounted component case unmount old component mount new one every render reason breaks click event called handler forces rerender causes component unmounted remounted click event would propagate means component click event originated unmounted click event processed synthetic event system nt get processed expected behavior see example nt use components defined render hope explains things well enough would recommend trying rearchitecture component avoid recreating component render try caching solution outlined", "d": "3/2018"}, {"body": "npm vdersion", "d": "3/2018"}, {"body": "sudo npm install g createreactapp createreactapp demo problem demo package", "d": "3/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "3/2018"}, {"body": "following function solved problem function setnativevalue element value const valuesetter objectgetownpropertydescriptor element value set const prototype objectgetprototypeof element const prototypevaluesetter objectgetownpropertydescriptor prototype value set valuesetter amp amp valuesetter prototypevaluesetter prototypevaluesettercall element value else valuesettercall element value issue thread leave owners close issue still sure bug", "d": "3/2018"}, {"body": "solution outlined recommended solution", "d": "3/2018"}, {"body": "already used syntax sugar", "d": "3/2018"}, {"body": "definitely try use ides solve problem", "d": "3/2018"}, {"body": "trysound nt matter pair like nested one open tag vs one closed tag", "d": "3/2018"}, {"body": "optional would point using jsx well function calls also use name repeating twice intentional see nesting sides case feel strongly please suggest instead", "d": "3/2018"}, {"body": "", "d": "3/2018"}, {"body": "use onchange like variable true give selectall whatever want react warning checkbox supposed onchange", "d": "3/2018"}, {"body": "problem using click handler checkbox users wo nt able update checkbox ways like keyboard events warn default general case nt great pattern accessibility specific need requires use click events follow advice warning use instead hope helps", "d": "3/2018"}, {"body": "aweary worked thanks", "d": "3/2018"}, {"body": "please provide runnable example demonstrating issue really difficult someone troublshoot seeing static code snippet", "d": "3/2018"}, {"body": "could manage courage create codepen react redux let us wait maybe people theoretically consider case final ref equal really ends page returned getelementbyid github issues interesting issuesquestions react regarding refs lots comments learnt ref sset null first clear memory class reactcomponent suspect ref equal dom element framework see need update put something content think useless render maybe react renders still virtual dom clever create new dom element mounted page something like little confused ref supposed real dom element virtual one htat remounted suspect expected behaviour would like understand seems refs used exactly one would element extracted getelementbyid old way", "d": "3/2018"}, {"body": "warning far likely get attention example runnable readable", "d": "3/2018"}, {"body": "codepen reactredux template reuse", "d": "3/2018"}, {"body": "magicpoulp codesandbox used quite frequently setting reproducable test case issue try getting started", "d": "3/2018"}, {"body": "false alert found reason logic certain element present several places page reptition purpose forgot thispreref overwritting one variable sevral elements", "d": "3/2018"}, {"body": "hey bit confused need looks like never runs always starts loop assuming maybe simplifed case illustrate problem think still use believe allowed fire frequency cwrps also finally hacky js constructor super static getderivedstatefromprops nextprops prevstate let id prevstateid thisid id requestanimationframe prevstateanimate return prevstate id", "d": "3/2018"}, {"body": "restarts stopped animation imagine animation triggered button click button clicked call rerenders animation component want start run animation good already mounted adds animation plays idea work sure bug new context api acdlite show mean built minimal jsfiddle displays problem make sure open console run see get maximum update depth exceeded error problem new context api remove context example works fine new context api gets stuck infinite loop completes react throws certain depth javascript var testcontext reactcreatecontext null class animation extends reactcomponent constructor props super props thisanimate thisanimatebind thisstate componentdidmount thisid requestanimationframe thisanimate static getderivedstatefromprops consolelog getderivedstatefromprops return needsanimate true componentdidupdate consolelog componentdidupdate thisstateneedsanimate thisid requestanimationframe thisanimate thissetstate needsanimate false animate tick thissetstate render return gt thispropschildren reactdomrender gt gt documentgetelementbyid content", "d": "3/2018"}, {"body": "example linked causes cycle calls made processed synchronously react example leads cycle always requests another update rather checking kind conditional see appropriate", "d": "3/2018"}, {"body": "jquense correct suggesting correct lifecycles use case assume would nt want start animation render paused interrupted higherpriority render unfortunately original example provide glosses criteria ca nt make specific suggestions say checks comparing comparing", "d": "3/2018"}, {"body": "jsfiddle new context api removed one get stuck infinite loop think must bug new context api javascript class animation extends reactcomponent constructor props super props thisanimate thisanimatebind thisstate componentdidmount thisid requestanimationframe thisanimate static getderivedstatefromprops consolelog getderivedstatefromprops return needsanimate true componentdidupdate consolelog componentdidupdate thisstateneedsanimate thisid requestanimationframe thisanimate thissetstate needsanimate false animate tick thissetstate render return thispropschildren reactdomrender gt gt documentgetelementbyid content", "d": "3/2018"}, {"body": "first example gets caught synchronous cycle outermost lifecycle react processes calls synchronously mentioned second example nt get caught cycle outermost invoked sure top head behavioral difference exists acdlite would know maybe problem logic problem pointed problematic probably fixed regardless potential cycle like component really need animate every time rerenders even external nt changed", "d": "3/2018"}, {"body": "quick update known bug latest alpha already fixed released causes context consumers render unnecessary might causing gdsfp reinvoked", "d": "3/2018"}, {"body": "cool ta update", "d": "3/2018"}, {"body": "ok pretty sure problems context api bug fixed safe move works moment runs forever retest next alpha comes check stops running animation completes close issue", "d": "3/2018"}, {"body": "ok pretty sure problems context api bug fixed safe move raf componentdidupdate go ahead close issue since tracking context bug", "d": "3/2018"}, {"body": "seeing particular behavior fiddle chrome windows firefox debian type input immediately click arrow get type input click elsewhere document click arrow get", "d": "3/2018"}, {"body": "nt need change value click arrow multiple times starts change numbers nt make sense", "d": "3/2018"}, {"body": "thanks report andyboyne problem stems fact nt update attribute number inputs field blurred avoid bunch unwanted behavior related browser validation cc nhunzaker resolved finally stop syncing attribute controlled inputs", "d": "3/2018"}, {"body": "yes actually wonder get timeline together", "d": "3/2018"}, {"body": "official way manually compile react something like main file use open source", "d": "3/2018"}, {"body": "bug nt exist react use instead", "d": "3/2018"}, {"body": "dkfiresky bug code reactrouter export", "d": "3/2018"}, {"body": "trysound thanks even use instead error", "d": "3/2018"}, {"body": "trysound thanks help seems used old tutorial exported well", "d": "3/2018"}, {"body": "yeah expected synthetic event system simulates capturing bubbling phases react component tree nt rely dom event propagation part reason implement consistent behavior across events browsers events natively listening capture like focus instance interoperability handlers attached via react attached natively always going messy full gotchas like recommended need interact native events suggest using encapsulated component mix", "d": "3/2018"}, {"body": "thanks response jquense documented somewhere surprise us", "d": "3/2018"}, {"body": "pr adding note official docs feedback welcome", "d": "3/2018"}, {"body": "mdeljavan u plz elaborate problem facing able figure exact problem fiddle working fine expected", "d": "3/2018"}, {"body": "click lt transform work", "d": "3/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "3/2018"}, {"body": "please read hope helps", "d": "3/2018"}, {"body": "thanks works gaearon", "d": "3/2018"}, {"body": "looks like using flowruntime library distinct core flow library flow executes compiletime getting runtime error types defined react abstract meaning nt correspond actual values export looks like flowruntime trying resolve abstract types actual values incorrect suggest take flowruntime authors thanks", "d": "3/2018"}, {"body": "haikyuu looks like infinite recursion aka stack overflow component component clearly states render nonnull prop render prop condition terminate recursion clearly react fault sure anything detect warn", "d": "3/2018"}, {"body": "yeah expected behavior going use component recursively needs base case halt recursion like recursive function", "d": "3/2018"}, {"body": "hey try keep issuer tracker bug reports try one follow avenues support requests thanks", "d": "3/2018"}, {"body": "thanks", "d": "3/2018"}, {"body": "use component around provides context value via props probably sometimes expressive solved problems api important maybe time reconsider composition", "d": "3/2018"}, {"body": "trysound thanks answer use compent around privides context value via props exactly meant saying use hoc", "d": "3/2018"}, {"body": "probably explicitly via normal parent component nt use hocs anymore stuck problems lot props collisions hard typing bad maintenance", "d": "3/2018"}, {"body": "trysound thanks comment think completley answers question issue closed muchas gracias", "d": "3/2018"}, {"body": "specific question form element inside another formbelement element nt valid html getting warning", "d": "3/2018"}, {"body": "never mind saw duallicensed package reported correctly nt see", "d": "3/2018"}, {"body": "nested calls inside component longer guaranteed synchronous see per return relied upon top level used instead", "d": "3/2018"}, {"body": "hey thanks report already tracking thank providing test cases going close however relayed findings issue", "d": "3/2018"}, {"body": "gaearon explanation stackoverflow recently ca nt find comment remember correctly think async batched called inside react event handler otherwise sync calling therefore sync confirm behavior experience bug probably change future also mentioned issue base answer part react team correct wrote something stupid", "d": "3/2018"}, {"body": "link explanation", "d": "3/2018"}, {"body": "fyi far understand plan continue reason removal somehow nt know smile related need components asynccompatible default even particular shared component dev nt developing async mind", "d": "3/2018"}, {"body": "thanks see would method sticking around course using something prefixed expected valid use react nt feel quite right", "d": "3/2018"}, {"body": "instead guess would cause extra rerender might seen talk react rendering might time sliced suspended period time mutations final dom changes flushed make screen inconsistent react solves queueing state updates applying immediately", "d": "3/2018"}, {"body": "cc mweststrate", "d": "3/2018"}, {"body": "gaearon seen used cases waiting till componentdidupdate made things fall sync visually ca nt remember example used ignore optimize component props used iirc like react native animations", "d": "3/2018"}, {"body": "bit hard discuss without specific examples", "d": "3/2018"}, {"body": "sadly nt remember ran using delaying things much nt remember could find example uses example react native animation handling component actually could optimized way describe used ignore would work would unnecessarily call whenever component un focused made valid require imperative calls however would mean would run also imagine thing done props need act imperatively dom components especially part heavy component", "d": "3/2018"}, {"body": "related issue mobxreact repo honestly nt dive problem sample repo yet give days investigate first sight indeed seem make hard get notified new props react lol especially storing stuff state relevant mobx state irrelevant render per best practice sure official one saw conference talks blog posts least hence stored example timeout handles resources", "d": "3/2018"}, {"body": "hi dantman code example linked seems like one could easily converted asyncsafe slow mobile devices delay two nt big safe sort thing context async rendering case would even require additional render bit explanation might find helpful shortened version probably safe start animating view render might paused interrupted replaced higher priority render", "d": "3/2018"}, {"body": "gaearon suppose could use said would result another render also makes much sense handle type operation semantic point view possible yes possible nt great litmus test api design", "d": "3/2018"}, {"body": "mweststrate dantman might also find recipes draft blog post worth reading", "d": "3/2018"}, {"body": "bvaughn great thanks nb mobx nt use pattern see frequently code base mobx based projects including", "d": "3/2018"}, {"body": "also makes much sense handle type operation componentwillreceiveprops componentdidupdate semantic point view possible yes possible nt great litmus test api design semantic point view runs render phase potentially split across multiple idle callbacks even suspended seconds unlike runs commit phase together dom changes wrong place side effects affect rendering please see talk get idea features mean enable hope provides context onto recommendation", "d": "3/2018"}, {"body": "gaearon thanks take look definitely see introduced push people better direction nt mean suggest stick around would great however designed way could play nicely libraries like mobx sure best way make happen would nice", "d": "3/2018"}, {"body": "dantman understand right issue ca nt use componentdidupdate want shouldcomponentupdate return false great solution one option return exact reference earlier render case rendering bail children componentdidupdate still run", "d": "3/2018"}, {"body": "sophiebits rightclose proper answer want element render part props changed would probably move element separate make original component pass relevant props onto component element render think would best thing long term however like results needing multiple components similar names job one component lots react element boilerplate moves part logic component another part file less logically connected code belongs direction going would like see pattern react would enable pattern separate components logic element render keep code class definition nested classesfunctions could work key move element rendering", "d": "3/2018"}, {"body": "caching described would also nt need two classes", "d": "3/2018"}, {"body": "sophiebits correct said essentially hack essentially write equivalent instead wrapper suppose one could write decorator still think proper reactway would using separate purecomponent instead faking", "d": "3/2018"}, {"body": "sorry missing something probably big deal run twice case provided returns elementtypes props nt cached treated special way cost render relatively small optimization nt always necessary", "d": "3/2018"}, {"body": "since ca nt call reactdomunmountcomponentatnode change rendering lost container element seems like although nt know supported note unmounted get printed console first instance even though unmounted element already manually detached document", "d": "3/2018"}, {"body": "make sure call detaching root node document set nt actually destroy node detaches ca nt unmount detached try store reference node setting still use hope helps", "d": "3/2018"}, {"body": "hey rayeeskm could provide information hard tell would happening", "d": "3/2018"}, {"body": "hey asmockler thanks response please see screenshots two codes working code state change happening inside textbox within td failing code state change td price displayed row currently updated price rows goes hiding", "d": "3/2018"}, {"body": "looks like might blowing away state price column update could post code try help find bug", "d": "3/2018"}, {"body": "goes last two lines commented part state change done directly td state changes done correctly behaved way cases may react keep track td elements updating state", "d": "3/2018"}, {"body": "hey rayeeskm could reproduce issue using jsfiddle template would make lot easier us debug end thanks", "d": "3/2018"}, {"body": "think issue set state prices setting single id code looks like needs look something like way nt wipe away state cells setting state cell want updated post fiddle would happy post copy working together would help", "d": "3/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "3/2018"}, {"body": "nhunzaker asmockler thanks lot suggestion updated fiddle see price column displays current row updated", "d": "3/2018"}, {"body": "rayeeskm fiddle updated solution suggested", "d": "3/2018"}, {"body": "hey asmockler thanks state gives expected output using prevstate still wondering react behaves differently require use prevstate whereas requires", "d": "3/2018"}, {"body": "gaearon check current code nt run", "d": "3/2018"}, {"body": "fixed", "d": "3/2018"}, {"body": "may bug jasmine sure", "d": "3/2018"}, {"body": "would double check sufficient sometimes symlinks nt work expected try setting breakpoints seeing running correct code branch defined", "d": "3/2018"}, {"body": "without actual reproduction going difficult us help", "d": "3/2018"}, {"body": "since follow enable reproduce going go ahead close", "d": "3/2018"}, {"body": "since follow reproducible example going go ahead close", "d": "3/2018"}, {"body": "also hitting issue", "d": "3/2018"}, {"body": "found moving component portal especially lots children significant performance penalty", "d": "3/2018"}, {"body": "alexreardon describe detail trying moving portals entirely clear maybe examples tree", "d": "3/2018"}, {"body": "sounds like issue react general want move things one parent another presence portals makes novelly interesting dom element one react created one user gave react fact sounds exact portal interface nt one something like dom node reactelement tree new every single createportal call course key way react knows modifymove things render scratch issue reparenting issue nearly years recently started rfc possible reparenting api api work portals well class create reparent use changes contents reparent moved new dom node would moved another parent react tree", "d": "3/2018"}, {"body": "give bit context gaearon user starts drag interaction use dragging item control position currently leave element spot component tree however style issues play well parents part react upgrade hoping move dragging item react portal matter styles parents including js shoulduseportal purpose testing kept structure render paths return child null dragging put draggable portal const inportal portal reactdomcreateportal child simply gets portal dom element getportal return inportal component rendered portal unmounts component mounts new location finding quite large cost cost extremely high dragging item portal lot children", "d": "3/2018"}, {"body": "think related concern reparenting discussion dantman", "d": "3/2018"}, {"body": "course container key way react knows modifymove things render scratch mistaken third optional argument used reason understand react reason two elements differing types ie replace behavior suggested danielran looks like reasonable way solve pattern albeit might breaking change current heuristic expecteddocumented behavior", "d": "3/2018"}, {"body": "mistaken createportal third optional argument key used createportal element container key reason understand react reason two elements differing types ie replace correct well documented key argument createportal simply passed key prop resulting react element likely use array ie used term key refer globally unique identity react understands two portals though suppose case react bit information child container portal normal react element local key rendered parent react way normal would react knows whether portal slot would enough information know previous portal slot identify value changed rather separate portal another part react tree although true one could argue saying somewhat similar saying nt actually try reuse state tree possibly unrelated portals fact think possible deoptimization side effect current likely behaviour going isa notisa react unmounts removes contents react renders mounts b behaviour createportal calls without use undocumented arg making changing moves tree instead replacing react unmounts react moves containerb react virtual diff dom queues bunch dom mutations change classname div mutate elements react thinks look similar enough addremove elements individually part either react mounts b could technically handle specific case render portal change container portal sure useful implement covers single use case nt help imho likely common desire able move things inout portal unlike use cases nt solve trivial workaround userspace op suggestion seems optimize general idea js html render reactcreateportal condition roota rootb js html mount thissetstate container documentcreateelement div update condition roota rootb appendchild statecontainer render reactcreateportal statecontainer requires work react possible negative side effects order get things working focus larger scope reparenting issues", "d": "3/2018"}, {"body": "fixed", "d": "3/2018"}, {"body": "acdlite wrong link", "d": "3/2018"}, {"body": "oops sorry meant", "d": "3/2018"}, {"body": "stack passed consumer like argument", "d": "3/2018"}, {"body": "going expensive operation want make sure implicitly optin b ideally extracted render pass", "d": "3/2018"}, {"body": "think unfit feature similar debugging features might implemented devtools", "d": "3/2018"}, {"body": "closed", "d": "3/2018"}, {"body": "gaearon aweary seems pr stalled pick", "d": "3/2018"}, {"body": "wuweiweiwu stalled nt provide feedback requested changes let give swieckowski time address requests handing", "d": "3/2018"}, {"body": "sounds good thanks letting know", "d": "3/2018"}, {"body": "issure component warning message react version", "d": "3/2018"}, {"body": "done", "d": "3/2018"}, {"body": "use case like difference passing object function setstate prevstatethisstate updating return count prevstatecount handlesomething let say starts thisincrementcount thisincrementcount thisincrementcount read would still react rerenders component yeah function ok fact change use rather much consistency purer purpose get state get state use state set state gaearon", "d": "3/2018"}, {"body": "new function really weird see reasons passing argument find confusing way well whatever store inside state something like unneedlessly verbose bloated library authors gave us another way js constructor props super props needs store initial first call thisstate props static getderivedstatefromprops props state propscountry statepropscountry return props derivedvalue", "d": "3/2018"}, {"body": "catamphetamine verbose previous props passed reason pass props state constructor actually way wo nt work first call countries equal usually use default values js state prevcountry null static getderivedstatefromprops props state propscountry stateprevcountry return prevcountry propscountry derivedvalue yep bit verbose simple code less conditions nt need null checks prevprops actually verbose", "d": "3/2018"}, {"body": "trysound verbose part verbose js constructor props super props needs store initial first call thisstate props library authors given bit thought would added third argument everyone would nt add bulky constructor state hack work around inconvenience actually way wo nt work first call work first call countries equal simply enter condition completely fine new function really implemented third argument first call simply inside whatever else", "d": "3/2018"}, {"body": "yep considered", "d": "3/2018"}, {"body": "trysound ok take word nt read thread mean yeah would perfectly sane approach given even official docs explicitly state note parent component causes component rerender method called even props changed may want compare new previous values want handle changes ie says new props nt neccessarily different old ones would nt illegal way would nt contradict already cemented behaviour new function whatever take way put done move", "d": "3/2018"}, {"body": "going lock issue nt seem like rehashing discussion productive point rfc lot useful info uncertainty decision made suggest reading know lengthy big change", "d": "3/2018"}, {"body": "still issue persist launching event onchnage getting event name value passed event parameter", "d": "3/2018"}, {"body": "sound like something focused implementation specific usecase want information inside specific closure already offers boundless ways listed seems like baking usecase tools solve already", "d": "3/2018"}, {"body": "maintainers care chime", "d": "3/2018"}, {"body": "hello gaearon issue react website nt displaying internet explorer browser help", "d": "3/2018"}, {"body": "public wiki editing turned gt", "d": "3/2018"}, {"body": "actually quite interesting styles handled strictly react apparently building virtualdom equivalent browser dom style data structure browser dom classes also data structure elementclasslistadd elementclasslistremove since react seems mirror dom nt classlist added property html elements", "d": "3/2018"}, {"body": "danieljozsef mirrors property element", "d": "3/2018"}, {"body": "trysound aware saying maybe adding classlist alternative route set classes might nice option keeping react philosophy virtual dom design maintains backwards compatibility comfortable clean use quite unlike classname", "d": "3/2018"}, {"body": "gaearon please reviewhelp pr", "d": "3/2018"}, {"body": "sure stick playing gdsfp reactbootstrap one thing tripped us nt spread state derived props otherwise drop state updates inadvertantly worth mentioning docs intended provided repro", "d": "3/2018"}, {"body": "could provide repro nt think understand spreading would drop updates", "d": "3/2018"}, {"body": "sure", "d": "3/2018"}, {"body": "much dropped overridden", "d": "3/2018"}, {"body": "cool thanks repro", "d": "3/2018"}, {"body": "think saying expect work like js state local updated outer thispropsouter componentwillreceiveprops nextprops thissetstate prevstate gt prevstate outer nextpropsouter works like js state local updated outer thispropsouter componentwillreceiveprops nextprops thissetstate thisstate outer nextpropsouter", "d": "3/2018"}, {"body": "jason sandbox looks like bug nt chance dig yet middle something queue look soonish", "d": "3/2018"}, {"body": "gaearon yeah provided bug less intuitive anyway could stale actually thought return prevstate signature method feels like straight reducer state assumption lose nt spread", "d": "3/2018"}, {"body": "jquense fair bug discussion part obvious unfortunate already case api people taught spread redux ca nt give habit", "d": "3/2018"}, {"body": "assumption lose local nt spread nt case welcome suggestions inprogress docs make clear realize nt yet pushed reference api page yet though heh", "d": "3/2018"}, {"body": "looks like behavior specific updates triggered within react event batched updates js let childinstance class child extends reactcomponent state local static getderivedstatefromprops nextprops prevstate return prevstate outer nextpropsouter updatestate gt thissetstate state gt local statelocal thispropsonchange thisstateouter render childinstance return outer thisstateouter local thisstatelocal class parent extends reactcomponent state outer handlechange outer gt thissetstate outer render return const instance reacttestutilsrenderintodocument const element reactdomfinddomnode instance expect elementtextcontent tobe regular setstate childinstanceupdatestate expect elementtextcontent tobe batched setstate reacttestutilssimulateclick element expect elementtextcontent tobe second update simulated click demonstrates unexpected behavior", "d": "3/2018"}, {"body": "second example nt batch updates therefore two calls treated separately synchronous nt encounter issue issue specific happens multiple updates queue ca nt without batching", "d": "3/2018"}, {"body": "going go ahead close issue since pretty well cover even though ca nt merge yet", "d": "3/2018"}, {"body": "ssr using fragment might help avoiding invalid html ssr removed solution used however fragment support browsers seems clever enough make fonts loads async", "d": "3/2018"}, {"body": "thanks", "d": "3/2018"}, {"body": "problem code react try delete node kevinzwhuang workaround use unique keys", "d": "3/2018"}, {"body": "something similar safari copy strings warning python run returns", "d": "3/2018"}, {"body": "note per problem solved", "d": "3/2018"}, {"body": "looking make first contribution take look issue", "d": "3/2018"}, {"body": "status one nt seem like resolved since warnings assigning symbols functions prop even found todos reactdominput test", "d": "3/2018"}, {"body": "also faced issue fix", "d": "3/2018"}, {"body": "hey nope looks like still issue sent pr", "d": "3/2018"}, {"body": "gaearon jquense way elements using mechanism nt trigger change callback trigger react", "d": "3/2018"}, {"body": "hi see issue taken seems still swyx veekas taking finish want", "d": "3/2018"}, {"body": "oh wow completely forgot thanks ping diegoborda done asap", "d": "3/2018"}, {"body": "something else works mocking portals top test file like obviously package needed", "d": "3/2018"}, {"body": "created simple selectoption html file clicked select box following browsers chrome extensions got warning message nonpassive event listener versions chrome official build official build chrome canary official build official build chromium official build html file checked nt care problem think report chrome team react issues", "d": "3/2018"}, {"body": "way gave talk future react async features case missed", "d": "3/2018"}, {"body": "hey gaearon great presentation future react im wondering new api addressing issue nicer way although nt demo using new api errorboundaries understood play nicely together", "d": "3/2018"}, {"body": "sebmarkbage immediate question slots api would able insert multiple one time uncommon interface multiple popups modals open simultaneously perfect world api would look something like tsx import app app import popupslot popups let root reactdomrender root documentqueryselector root tsx dark corner app import popup popups export function somanypopups return lt gt entire interface popups", "d": "3/2018"}, {"body": "new issue completely unable find workaround using event trap approach suggested react synthetic events blocked bubbling portal native events still bubble since react code hosted inside mostlyjquery application global jquery keydown handler still gets event attempted add eventstoppropagation listener native container element inside portal via ref like completely neuters synthetic events within portal incorrectly assumed react toplevel listener watching capture phase sure possibly done changes react typescript const alltheevents string click contextmenu doubleclick drag dragend dragenter dragexit dragleave dragover dragstart drop mousedown mouseenter mouseleave mousemove mouseover mouseout mouseup keydown keypress keyup focus blur change input invalid submitsplit const stop e reactsyntheticevent void gt estoppropagation const nativestop e event void gt estoppropagation const handleref ref htmldivelement null void gt ref return alltheeventsforeach eventname gt refaddeventlistener eventname nativestop prevents export function portaleventtrap children reactreactnode jsxelement return", "d": "3/2018"}, {"body": "depends order reactdom jquery initialized jquery initializes first jquery top level event handlers installed first run reactdom synthetic handlers get run reactdom jquery prefer single top level listener simulates bubbling internally unless event browser wo nt bubble", "d": "3/2018"}, {"body": "kovensky understanding jquery synthetic bubbling way react thus single toplevel listener dom inspector nt reveal one either would love see referencing mistaken", "d": "3/2018"}, {"body": "case delegated events example", "d": "3/2018"}, {"body": "look solved react someone convinces solved proposed design requires restructuring code seen reason done trying find quick fix workaround", "d": "3/2018"}, {"body": "sebmarkbage proposal solves case events propagating immediate owner rest tree", "d": "3/2018"}, {"body": "pr stale closed pick planning replicate follow pr suggestions tips idea", "d": "3/2018"}, {"body": "gaearon hey pls tel path refers path", "d": "3/2018"}, {"body": "using patch mentioned react able identity many different checksum errors production would nt able otherwise usually checksum errors browsers ca nt test locally happen edge case nt catch testing locally example today discovered checksum error ie edge happens js math calculations different node vs ieedge leading different values inline style would never discovered without error reporting production way report errors real blocker us upgrading need able monitor errors happen inevitably issue sounds like alone needing anyone react team could suggest might work react happy work put together rfc", "d": "3/2018"}, {"body": "redonkulus curious achieved using attribute afaics datareactchecksum attribute always regardless mismatch oliverjash checksum attribute present know dom reused lt react gone know client rerendered whole app simple worked well us years seen issues ie based locale strings video autoplaying starts server rendered markup gets reinited react client starts checksum mismatch ads get rerendered doubling impression count markup mismatch major things require solution hook library think trouble find react team facebook use react server side priority issues lower list efforts team solving believe rfc would correct approach need know solution would look like sebmarkbage gaearon help provide direction approach would acceptable know ins outs react codebase like information helps", "d": "3/2018"}, {"body": "still getting error", "d": "3/2018"}, {"body": "still getting error react setstate called componentwillupdate componentdidupdate nestedupdatecount incremented error since nestedupdatelimit set nestedupdatecount never reset error throws using cra", "d": "3/2018"}, {"body": "hello issue react used html escape code inside render function", "d": "3/2018"}, {"body": "temporary hack kind solution prevents errors printing using js beforeeach gt jestspyon console error globalconsoleerrormockimplementation gt aftereach gt globalconsoleerrormockrestore test throw pass log error gt expect gt testutilsrenderintodocument tothrow bad developer still see consoleerrors test modules", "d": "3/2018"}, {"body": "like try helping cause still need figure part like work first figure start saying hi fyi sauce labs offers free plan opensource projects would nt need worry monthlyyearly license reach customer support edit browserstack also free plans opensource projects note netlify staticsite server similar github pages may useful hosting fixtures pages also free opensource plan cc giltayar", "d": "3/2018"}, {"body": "nhunzaker fyi copied nightwatchjs example modified use webdriverio check benefits webdriverio nightwatchjs webdriverio provide builtin services connect tools like browserstack chromedriver also provides flexibility write tests would love get thoughts direction time keep plugging away writing browser automation dom fixtures", "d": "3/2018"}, {"body": "noticed remove advantage", "d": "3/2018"}, {"body": "clarify const inserttoast toastcomponent gt const toastcontainer documentgetelementbyid toastcontainer const toastfoo gt foo const toastbar gt bar inserttoast toastfoo inserttoast toastbar would contain would replace would react throw error saying already exists", "d": "3/2018"}, {"body": "use case still interesting us stress test react update model best way make something faster yes maybe diffing could faster want make use case work well might best way escape react usual model comparing leaf elements minimal work possible ie even compare things know dynamic something inferno explored templates separate static dynamic yet really make big difference dynamic applications experience component abstraction always components middle even optimize leaf node comparisons still got ta go components render optimizations host nodes work well contiguous blocks components get way looking compilation techniques like first make component inlining work end larger contiguous blocks host elements avoid diffing using bytecode similar glimmer idea leafs nodes escaped perked ears sounded like could awesome animated charts graphs sure follow nt work inferno would interesting bumping anybody fill us nt work inferno whether anybody tried react", "d": "3/2018"}, {"body": "fwiw perf experiments spotted results look promising somewhat reminiscent opcodes presumably vm rather function calls cc trueadm", "d": "3/2018"}, {"body": "leeoniya ah saw research work back true looking performance characteristics compile lightweight bytecode representation model via aheadoftime tool like prepack big thing looking compiling application code optimized bytecode essentially compiling away react paradigms abstraction userland components including virtual dom classes etc making microoptimizations react gave us realworld wins expect wins compiling large complex apps may contain bottleneck implementations would gamechanger possible still nt know approach work compiling optimizing idiomatic js far complicated template language see though", "d": "3/2018"}, {"body": "aweary nhunzaker work", "d": "3/2018"}, {"body": "looks like dirty much needed hack overcome intentional limitation would nice something like builtin", "d": "3/2018"}, {"body": "depending implementation details cooptive scheduling react common prefix suffix optimization archive might hard sell react intentionally trying maintain heuristic visiting nodes direction opposed", "d": "3/2018"}, {"body": "add confusion still add attributes square brackets noncustom components example js jsx js test test resulting html html test test throws warning", "d": "3/2018"}, {"body": "performance difference bind arrows big max jsperf remake also variant hoc ignore functions skip rerenders agree methods go prototype without even since saves significant performance", "d": "3/2018"}, {"body": "another related post ending debate inline functions react", "d": "3/2018"}, {"body": "antoaravinth background change december last year parsing removed nt need loose equality check guards sufficient parses string values numbers comparison", "d": "3/2018"}, {"body": "nhunzaker thanks found way fix issue block code looks like following would say handles case fix issue test cases got failed issue resolved yes sounds bit hacky saw similar check added handling changes etc may aweary answer thanks time", "d": "3/2018"}, {"body": "interesting might bit hacky given browsers give us work situation might unit testable like take next steps attempt create unit test create dom test fixture browser testing turns browser behavior consistent probably remove manual fixture", "d": "3/2018"}, {"body": "nhunzaker sure actually done browser testing change ran build used dist version reactjs seems working fine chrome may test browsers also updatecreate new test cases", "d": "3/2018"}, {"body": "awesome make sure surfaced dom test fixtures section specifically number inputs helps testing move forward fix plan test fixtures antoaravinth mind assign issue", "d": "3/2018"}, {"body": "nhunzaker never mind assign issue get done", "d": "3/2018"}, {"body": "ah ca nt assign formally consider", "d": "3/2018"}, {"body": "nhunzaker sure thanks", "d": "3/2018"}, {"body": "checking rush progress anything help move things along", "d": "3/2018"}, {"body": "nhuzaker hey update create dom test fixture browser testing turns browser behavior consistent probably remove manual fixture two points guess taken care change ran sample app build issue fixed tested chrome firefox write unit test case test place use case raise pr say sorry delay btw mostly close weekend", "d": "3/2018"}, {"body": "need apologize thanks update", "d": "3/2018"}, {"body": "antoaravinth fix definitely addresses concern issue however nt fully understand ramifications change tried change behavior number inputs respect values parse numeric value maintaining existing leading zeros ui number inputs always use reduced value typed number input would reduce text value concerns change makes easier control absolute value sent number input concerned results confusing user experience key strokes user enters text box align see screen additionally number inputs give us text selection api causing text selection jump easily example deleting leading zero causes cursor jump type delete leading zero cursor jumps end input value replaced inserting character inserting number decimal place causes cursor jump type move text selection first cursor deleting character personally think optimize avoiding character deletion user typing might possible could apply behavior number input focus would allow greater control value changing outside user text entry avoiding confusion typing think", "d": "3/2018"}, {"body": "future way rfc new createref api ref objects", "d": "3/2018"}, {"body": "progress one using react behaviour onchange triggered first time subsequent clicks nt trigger would say quite high priority issue", "d": "3/2018"}, {"body": "received new issue additional test cases migrated issuer findings issue reproduced iphone ios safari controlled input type date nt trigger onchange pressing clear button ios datepicker keyboard happens controlled input uncontrolled works fine demo react jsfiddle demo react jsfiddle thanks smollweide time preparing", "d": "3/2018"}, {"body": "running issues dangerouslysetinnerhtml property need embed tweets script tags need run order way around make work use image onload property run scripts know best solution way go around limitations", "d": "3/2018"}, {"body": "even using approach react gave undefined called right thoughts", "d": "3/2018"}, {"body": "ackvf instance reference changed type key still underlying dom element needs update component remains mounted", "d": "3/2018"}, {"body": "instance reference changes single lifecycle method called new object even constructor missing nt gone code yet find difficult start", "d": "3/2018"}, {"body": "ackvf even constructor since react works lightweight nodes points functiontagclass invokednewed diffing decide new element", "d": "3/2018"}, {"body": "output means new element instance used instances internally point class instance lifecycle methods constructor need called words pseudotranspiled understanding correct functions refer class children object internally may call operator", "d": "3/2018"}, {"body": "still issue react", "d": "3/2018"}, {"body": "attempting look need help aweary best practices debugging older versions ie currently running vm mac parallels however jsfiddle wo nt load react debugging starter code keep getting syntax error first line html doctype html line think babel transpiling working jsfiddle tips", "d": "3/2018"}, {"body": "tried another approach put bug empty react app made createreactapp ran server mac logged onto parallels vm used emulation feature emulate could nt replicate bug react investigate actual access disk space vms far luck replicating bug", "d": "3/2018"}, {"body": "nothing worked either changing order polyfill anything else worked adding js link indexhtml adding successfully able run react app ie", "d": "3/2018"}, {"body": "update bitten gotcha know fault rtfm warning sure would helped case smile", "d": "3/2018"}, {"body": "roastlechon wait elaborate hydration blow everything away ad renders server side render client render would client hydration honor ad keep gaearon makes sense case want suppress react client hydration totally example html updated server amp client render", "d": "3/2018"}, {"body": "reywright keep react renders exactly thing sides example js const id thisprops return lt div id id gt lt div gt gt browser renders ad even code loads clientrenderphase happens nt touch previouslycreated dom nodes since react div properties", "d": "3/2018"}, {"body": "rfc something equivalent landed", "d": "3/2018"}, {"body": "problem input removing prop fixed", "d": "3/2018"}, {"body": "bug still present ie edge", "d": "3/2018"}, {"body": "confirm still issue seems rightclick correctly recorded left click pressing anything seems always yield", "d": "3/2018"}, {"body": "confirm problem case need know user left clicking simple workaround event return user clicking left clicking safari chrome ff right clicking return chrome ff safari", "d": "3/2018"}, {"body": "hi gaearon could find event delegation explanation referred post latest react documentation docs change approach could direct link find info", "d": "3/2018"}, {"body": "addressed", "d": "3/2018"}, {"body": "syranide css ignoring color color updated please check issue change backgroundcolor color still dom react updating color", "d": "3/2018"}, {"body": "need well", "d": "3/2018"}, {"body": "gaearon use case want render big component represents page couple id within page inject party obviously break page component like different disparate components inject separately much worse experience hello world welcome page essentially server prerenders react gives us party javascript executes putting ads ad divs react hydrates blows ads away would nice able mark divs sort update sort flag ignore differences want ability manage html react control first server side render want ignore spots client render almost like shouldcomponentupdate noifclient", "d": "3/2018"}, {"body": "rowclick e epreventdefault alert row clicked consolelog row clicked thisstateitemsmap function item key thisstateitemsmap function item key able call function table giving error uncaught typeerror read property rowclick undefined", "d": "3/2018"}, {"body": "hey rajeshhegde issue closed thought take quick stab checking following line using value callback nt component try passing second argument map specify scope callback beyond nt appear issue react try keep issue board focused issues react library checkout chat community might able get rapid turn troubleshooting good luck", "d": "3/2018"}, {"body": "becoming issue since safari ios also defaults passive classical workaround supported", "d": "3/2018"}, {"body": "proposed rfc would allow creating custom ref handlers work like props ie use properties like would instead use computed property syntax handler gets ref prop value info updates used create libraries advanced use case passive explicitly nonpassive capturing events easy things even advanced event handler registration done user perspective simple use pass library gives computed property element eg think way register events however instead coming complex ways handle registering possible types events capturing passive etc recommend deciding default behaviour events passive nonpassive using registered props handle advanced use cases", "d": "3/2018"}, {"body": "touch events passive default ios thus calling eventpreventdefault touch event handler noneffective", "d": "3/2018"}, {"body": "without able force nonpassive event handlers hard time working around ios changes", "d": "3/2018"}, {"body": "hey seems needs passed string boolean react renders dom expected behaviour find rather surprising considering boolean attributes appear behave differently passing boolean properly renders dom maybe missed something", "d": "3/2018"}, {"body": "afaik expected string attribute values per spec boolean attribute yes spec confusing", "d": "3/2018"}, {"body": "yes ca nt remember achieved consensus best way handle boolean attributes remember follows attributes require string html attribute values like passed strings attributes either present absent like accept react addsremoves attribute based boolean believe inconsistency retain backwards compatibility though sure specific example offhand attributes react treats boolean", "d": "3/2018"}, {"body": "looks like booleanish section svg make sense add focusable", "d": "3/2018"}, {"body": "afaik expected string attribute values per spec boolean attribute yes spec confusing makes sense sure accepting string boolean would dramatically better would certainly make things less confusing authoring stand point introduces bit code smell expecting multiple types attributes either present absent like accept react addsremoves attribute based boolean attributes require string html attribute values like passed strings confused work way instance per specifications passed string present like react completely fine passed without value boolean seems opportunity make things bit consistent maybe making behave like similar props especially since usually used together accepting boolean value well back first comment different types", "d": "3/2018"}, {"body": "think open changes case want write proposal", "d": "3/2018"}, {"body": "yes colleagues surely come something specific format expecting shall think would good improvement current implementation", "d": "3/2018"}, {"body": "file issue free form description work", "d": "3/2018"}, {"body": "kind messy situation since dealing three separate specifications html svg aria nt always use consistent terms describing attribute behavior ideally every specification would define attributes either boolean attributes enumerated attributes could conform specs allow boolean attributes would easiest approach implementation standpoint think value making work user expects attribute enumerated attribute keywords really unfortunate design taking pitofsuccess approach making work feels like better user experience nt think attributes polymorphic bad code smell results simple coercion react anyways", "d": "3/2018"}, {"body": "moved", "d": "3/2018"}, {"body": "sophiebits suppose need add unfortunately would make reactpowered sites vulnerable clever attacksinjections cssonly keylogger believe proposed solution good one seems thanks", "d": "3/2018"}, {"body": "problem solution work browsers probably need different csp configs based user agent least worked great firefox", "d": "3/2018"}, {"body": "progress made get uuid working using ssr always end conflicting id using", "d": "3/2018"}, {"body": "working rfc today", "d": "3/2018"}, {"body": "jquense submitted first draft rfc would love get feedback", "d": "3/2018"}, {"body": "came across pr noticed nt linked yet documentation sake looks like attempt made comment gaearon mentioned may best expose event add polyfill", "d": "3/2018"}, {"body": "late party sophiebits comment componentdidmount brought end hours debugging thank", "d": "3/2018"}, {"body": "syranide tell store ref", "d": "3/2018"}, {"body": "sophiebits bhabi hai tumhari mastrolindus", "d": "3/2018"}, {"body": "mnpenner preserving original html structure matters wrapping around children desired figured another uglier way js let uniqnumber const prefix ugly inside component constructor thisid uniqnumber uniqnumber fnthatusedomnode const dom documentqueryselector render return cloneelement thispropschildren classname wo nt work nondocument environments wish give stateless component refs really useful imperative apis like resizeobserver needs invoked arbitrary children", "d": "3/2018"}, {"body": "react introduces reactforwardref use transfer ref prop stateless component use appropriate jsx const usesrefx innerref children gt const usesref reactforwardref props ref gt const usage gt", "d": "3/2018"}, {"body": "flattened composite keys example example key could might end key collision sure example specific argue common use case names come user might happen matter delimiter use symbol least kind reference", "d": "3/2018"}, {"body": "caused defining default class props js class foobar extends component wrong props foo bar correct static defaultprops foo bar", "d": "3/2018"}, {"body": "still workinprogress drafting rfc", "d": "3/2018"}, {"body": "api added react released today", "d": "3/2018"}, {"body": "future reference also get error proptype left incomplete ie country proptypes", "d": "3/2018"}, {"body": "opened rfc proposal api allows reparenting", "d": "3/2018"}, {"body": "successfully deprecated long time", "d": "3/2018"}, {"body": "bump still running today would great builtin support something like myobj proptypeobjectisrequiredornull", "d": "3/2018"}, {"body": "think priority super low flow recommended way tog go", "d": "3/2018"}, {"body": "marujah snippet correct try passing null component see get warning touble isrequired gets evaluated first never let null undefined values pr proptypes fix issue linked interested", "d": "3/2018"}, {"body": "oh indeed retested right", "d": "3/2018"}, {"body": "custom events anything along lines ever implemented react", "d": "3/2018"}, {"body": "andreypopp said doc says", "d": "3/2018"}, {"body": "could nt get solution work either dominictobias multiple layers problems first always came back blank however discovered use loop get value back nt solve issue least get autofilled value stuff example calling controlled input handler", "d": "3/2018"}, {"body": "wlingke good know strange go route nt fix bug time release", "d": "3/2018"}, {"body": "wlingke setting demo chrome guys realised something nt issue chrome read comments carefully particular oscarb comment synthetic event react nt actually use event seems pretty weird even see demo behaves differently like listening event use real event works properly ios chrome would suggest getting ref element listening real change event well event seems event need update state user typing demo", "d": "3/2018"}, {"body": "dominictobias previously tried events separately well decorator nt able get work app also sure changes things difference autofilling one field versus autofilling multiple fields event worked fine autofilling one field however mobile chrome actually autofill set fields keyboard like firstname lastname email one tap second scenario decorator allows first field autofills properly first field meaning field currently focus however decorator attached fields nt seem work fields", "d": "3/2018"}, {"body": "wlingke interesting added fields autofilling three ios chrome correctly receiving change events natively react version screenshot desktop browser getting result phone", "d": "3/2018"}, {"body": "dominictobias think use event previously used work fully desktop work first input mobile event closest react event files element loses focus understand", "d": "3/2018"}, {"body": "yep react reason bound onchange event keep things simple also call component actual change events well normal input ones working ios chrome try let know js componentdidmount thisinputrefaddeventlistener change thisonchange onchange event gt react actually uses input even onchange causes autofill break ios chrome fires change event thispropsonchange thispropsonchange event componentwillunount thisinputrefremoveeventlistener change thisonchange edit chrome supposed fixed people reporting still nt work thank explanation dominic fix behavior back december fire keydown change input keyup events also fix react fix autofill behavior still invoke onchange handler also raised issue dev sure going fixed", "d": "3/2018"}, {"body": "also listening native event like dominictobias works ios chrome triggering reduxform native event listener attached mount also using selector styling see result bottom contact form", "d": "3/2018"}, {"body": "seems like fix finally way chrome ios sure version though since seems merged december", "d": "3/2018"}, {"body": "nt convert warning yellow notice since onchange every input valid rely event bubbling warning end hiding warnings since always appear makes warnings less visible", "d": "3/2018"}, {"body": "firefox shipped support pointer events enabled mainstream support every browser except safari", "d": "3/2018"}, {"body": "sounds right", "d": "3/2018"}, {"body": "anyone would like add support pretty straightforward add native events take look native events supported question whether react polyfill behave old browsers think safe start allowing native events anyone wants give shot", "d": "3/2018"}, {"body": "actually none solutions mentioned sufficient thought pretty general case needed simple global hotkeys binding natively document worked course like solutions using mousetrap keymaster problem like philippspiess illustrated input field receiving synthetic keydowns called still fired native document keydown listener especially annoying hotkeys nt prefixed meta alt ctrl like q v gt anytime user inputs key input field global hot key would called anyone problem neat little solutiontrick came might help offered thread anywhere matter bind twice document top react tree document handler checks whatever fits needs fires ones caught one bound react root way global key events trigger hotkeys local key events use prevent event bubbling top react tree hot key fires course applied events like clicks etc simple mockup idea javascript function onkeydown e handle global keydowns warning may receive native synthetic events function onkeydownnative e whatever assertion works usecase whatever outside react tree etarget documentbody onkeydown e wrap around entire app class hotkeylistener extends reactcomponent componentdidmount documentaddeventlistener keydown onkeydownnative componentwillunmount documentremoveeventlistener keydown onkeydownnative render listens propagated synthetic keydown events return reactdomrender input propagate trigger global key event synthetic event handler one documentgetelementbyid app working demo codepen", "d": "3/2018"}, {"body": "wow progress five years nt facebook support keyboard shortcuts dismissing popups clicking outside got bitten today refactored something listening keypresses react event using native event calling lot suddenly batching made everything lot laggier recover performance using", "d": "3/2018"}]