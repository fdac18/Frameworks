[{"title": "request event fired sync model fetching async false options", "body": "extend backbonemodelprototype initialize function thison request thisstart thison sync thisstop thison error thisstop start function consolelog show expected result show userfetch success hide userfetch complete real result userfetch success hide userfetch complete show best regards", "num": "2703", "d": "7/2013"}, {"title": "suddenly backbonejs collections nt work chrome code minified", "body": "suddenly backbonejs collections nt work chrome code minified searching bug code fix bugs application continue breaking use collections change collection array application works next collection execution cut execution say application really big model lots information nested collections models example model collection usually ones fails var mycollection backbonecollectionextend model vinculacionesgrafo works allways firefox internet explorer sometimes fails chrome code ready production mean code minified beggining thought syncronoussly problem change collections arrays continues fail collections depends loadding data allways line error something like thatget mycollec add model stack next additem method next related text error allways error related data null stack related error text code obfuscate detected first time error something like really strange thing change collections arrays code mycollec push instead add bug appear anymore execution go comes another similar collection instruction really afraid like backbone collections broken works well sometimes rest application never fail sames section load lot data add lot html breaks backbone maybe memory leak really lost sorry lack information first time wrote question thanks lot advance really need help", "num": "2701", "d": "7/2013"}, {"title": "manage multi dialogs", "body": "hi guys newbiei question howto manage multi dialogsfor example multi views every view contain button trigger dialog showshould create multi view hold dialog render multi veiws event thanks help", "num": "2699", "d": "7/2013"}, {"title": "validation wo nt stop set", "body": "backbone validate stop set setting attribute make isvalid shows correct result false var person backbonemodelextend defaults name john doe age occupation worker validate function attrs attrsage lt return age must positive work function return thisget name working", "num": "2698", "d": "7/2013"}, {"title": "know model exists attributes nt changed fetch merge", "body": "anyone suggestions around knowing model exists fetch happens attributes changed merge originally thought might fired matching nt", "num": "2697", "d": "7/2013"}, {"title": "catching json parse errors", "body": "due flakey web service requests json data sometimes return incompletemalformed json chrome throws following error pointers catchhandle exception backbone sync looked backbone source ca nt even work actual server response parsing happening help appreciated", "num": "2696", "d": "7/2013"}, {"title": "models added collection initialize called", "body": "reason backbonecollection initialize method called initial reset called could line read", "num": "2695", "d": "7/2013"}, {"title": "eventswhen events may may fired already", "body": "idea often times want execute task something happens happened already eg view loaded image assets example event handling jquery offloads burden figuring whether event fired already client code event emitter essentially semantics would event fired earlier schedule handler fire asynchronously eg would call arguments passed arguments passed event preserved think due high probability significant memory leaks caused", "num": "2694", "d": "7/2013"}, {"title": "sync events confusion", "body": "hello found way identify backbonesync finished request one centralized place request event applies request made response requestend event bind know request finished know sync error events maped success error callbacks duplication code needs done get desired effect think would much natural event mapped complete callback good example would wanted show loading indicator model starts request hide finishes need bind request event show indicator bind error sync events hide nt really care status request came back sort requestend would fit perfectly binding request event collection triggered collection model starts request know part events delegation mechanism way distinguish object collection model initialized request without instanceof check inside callback handler would nt also feel natural bind events correct objects nt mix really easy solve first issue would happy pull request accepted though second one needs discussed think edit also one event identifies crud operations sync way tell apart operation completed ie bind sync event fired times fetch save model would much better additional saved updated fetched events rather single one sync would accepted pull request add additional events", "num": "2693", "d": "7/2013"}, {"title": "model destroy persisted model trigger sync collection", "body": "piece code along lines js var model collectionget id modeldestroy note model persisted id following backbone code apparent trigger collection however trigger reaching following line line debug build returned nothing triggered collection relevant backbone", "num": "2692", "d": "7/2013"}, {"title": "views longer options property", "body": "annotated source shows views call constructor turn sets options property view version repository longer line instances views longer options property bit confused claim version sure someone knowledgeable shed light issue", "num": "2691", "d": "7/2013"}, {"title": "documentation add digg reader examples section", "body": "looks like digg reader using backbone", "num": "2690", "d": "7/2013"}, {"title": "missed line uncompressed backbonejs", "body": "hello guys found interesting bug uncompressed backbonejs missed one line see patch min version fine used documentation site version also looks good problem shows trying pass url parameter collection creation example var tabs new tabset var spaces new backbonecollection model space url spaces example documentation url collection never set way include bug maybe fix future versions annoying try figure best wishes", "num": "2689", "d": "7/2013"}, {"title": "undesired proxying events collection models", "body": "know backbonecollection listens models events onmodelevent updating internals however got undesired event propagation knowing proxying events collection good developers wants extend backbone functionalities", "num": "2688", "d": "7/2013"}, {"title": "discussion breaking backwards compatibility", "body": "reason upgrading version backbonejs requires one change code keep things working way arewere previous version add new feature new functionality makes sense would need change code get new benefit however almost always see reverse situation two instances breaking changes cases wanted fixes order upgrade maintain current functionality code updated account new options cases seems default settings set break existing users instead allow people optin new hotness intend continually break backwards compatibility even", "num": "2685", "d": "7/2013"}, {"title": "addition documentation", "body": "right shows examples maybe mentioned underscore methods return arrays collections way use proxies actual collection would colreset colfilter item thanks lasseee documentcloud would nice addition could made underscore proxy documentation unfortunately documentation nt seem wiki add", "num": "2680", "d": "7/2013"}, {"title": "attributes model constructor misleading", "body": "sure whether bug feature found really misleading var model backbonemodelextend initialize function attr opts consolelog unexpected attrname consolelog expected thisget name parse function res return name rescrazynamedname var collection backbonecollectionextend model model var new model name neo works expected var new model crazynamedname neo parse true entirely know used still feel like use attr already parsed fact assume reading docs case attributes wo nt set model", "num": "2679", "d": "7/2013"}, {"title": "deferred event triggering", "body": "reason eventstrigger calls handlers inline rather deferring ran performance issues wondering reasoning", "num": "2678", "d": "7/2013"}, {"title": "merging partial models collectionset attributes default value reseted back default value", "body": "default values model want update collection calling collectionset array partial model objects like existing models merged ok attributes default value reseted overwritten back default value may related", "num": "2677", "d": "7/2013"}, {"title": "inherit events setelement jqueryobj", "body": "mixing bootstrap backbone one things use bootstrap modal dialogue events wrap content modal backbone want able listen events emits following work javascript var myview backboneviewextend events show hidden clear initialize function thissetelement mymodal inherit events pass jquery object clear function input val", "num": "2675", "d": "7/2013"}, {"title": "version bump", "body": "desirability patch level version bump first mentioned months ago particular issue tripped apparently others couple times nt following issues prs religiously nt recall anything making master would necessitate minor version bump", "num": "2673", "d": "7/2013"}, {"title": "incorrect callback parameters listed route event docs", "body": "catalog builtin events route router route params fired history router route matched route route params fired history router route matched passed", "num": "2670", "d": "7/2013"}, {"title": "default model parameters enforced collectionfetch", "body": "upgrading fetching collection server enforces default properties response would expected first time model initialized second property set changed worked examples identical except different backbone versions working working also asked stackoverflow convinced bug", "num": "2667", "d": "7/2013"}, {"title": "route expression", "body": "greetings specified calling routerroute expression causes different behaviour browsers depending browser encodes current url passing backbonejs", "num": "2666", "d": "7/2013"}, {"title": "bind events conditionally back bone", "body": "one issue backbone events want add one event say change certain condition tried different ways tried like delegateevents unbinds already bound events check issue finally added one class dynamically based condition attaching events class better way handle situation", "num": "2664", "d": "7/2013"}, {"title": "work focus events", "body": "html controls like input etc would like update status based focus made control example would like find input id gets focus tries thing like keeps calling method events focus input updatecurrentcell wrong", "num": "2663", "d": "7/2013"}, {"title": "routerroute method update routes hash", "body": "reason routerinstanceroute method create update routes hash set passing routes object extend method parameter instantiation router object ie extendedrouter routes code explain question reason help route updated myrouterroutes object", "num": "2662", "d": "7/2013"}, {"title": "change event registration order honoured", "body": "backbone events triggered order registered events triggered first negative side affects example javascript var mymodel backbonemodelextend initialize function thissetup thison change thissetup setup function var attr thisget attr var myview backboneviewextend initialize function thislistento thismodel change attr thisrender render function var classname hide thismodelisfoo classname foo else thismodelisbar classname bar attribute changed view rerendered reevaluated model obviously could fixed ensuring events match eg model view listen either never simplified scenario problem currently working code using pattern deriving transient properties many different attributes model declaring attributes explicitly event type string within model nt seem right time views dependant properties derived subset attributes rerender matter attribute changed nt feel like good solution either ideally would want fire time ie attributes changed honouring order events registered", "num": "2661", "d": "7/2013"}, {"title": "make ajax local method modelscollections", "body": "currently looks like models use backboneajax syncing overridden global would great could manipulate ajax request modelbymodel basis example one model connects api requires csrf token another model requests different api chokes unnecessary parameters ca nt use ajaxoptions set csrf everywhere currently forced review request string beforesend would feel cleanermore oo able override ajax method models please let know making sense drum examples would nice overlooking better way currently thanks", "num": "2660", "d": "7/2013"}, {"title": "model fetch clean nonmodel attributes", "body": "model field exists database used flag gem carrierwave knows remove image rails added attraccessible removeimage model backbone want remove image call modelset call modelsave call modelfetch attibute removeimage cleared attributes hash server responding atrribute json response think would better backbone model fetch cleared attributes setting values returned server nt know good idea", "num": "2657", "d": "7/2013"}, {"title": "optional trailing slash", "body": "defining root route pushing history onto stack removing trailing slash left desirable would great optional flag starting history origin appears reside code example opening page pushing onto history stack works result examplecommyrootpagename desired result closing page passing blank value remove page url creates trailing slash result examplecommyroot desired result examplecommyroot trailing slash", "num": "2656", "d": "7/2013"}, {"title": "nt load underscore backbone libraries", "body": "sitesalllibrariesunderscoreunderscorejs sitesalllibrariesbackbonebackbonejs wrong", "num": "2654", "d": "7/2013"}, {"title": "backbonehistorystart find route", "body": "suppose web page called want capable handling routes like also written sth like visit nothing happens particular however triggers route", "num": "2653", "d": "7/2013"}, {"title": "shuffle pluck collection", "body": "hey guys running code like following consolelog somecollectionshuffle pluck description error typeerror somecollectionshuffle pluck function tring use chaning consolelog somecollectionchain shuffle pluck description weird result wrapped void void void void chain true ideas use shuffle pluck methods", "num": "2651", "d": "7/2013"}, {"title": "modelsave success called sync events", "body": "behavior described topic line desired suggest adding complete callback fired change sync etc particular model sub collections rebuilt sync success fired sync data state inconsistency problems arise", "num": "2649", "d": "7/2013"}, {"title": "ne layoutmanage", "body": "", "num": "2645", "d": "7/2013"}, {"body": "async false make ajax blocking hence request get triggered ajax completed sync event triggered within success callback expect otherwise", "d": "7/2013"}, {"body": "yep backbone assumes request asynchronous see information", "d": "7/2013"}, {"body": "great example inappropriate use backbone tickets please ask help debugging app mailing list irc room stackoverflow narrowed", "d": "7/2013"}, {"body": "sorry mistake written google group nt know thanks", "d": "7/2013"}, {"body": "\u5e9f\u8bdd\u521a\u53d1\u73b0\u4fee\u4ed9\u4f20 \u5e9f\u8bdd\u521a\u53d1\u73b0\u4fee\u4ed9\u4f20", "d": "7/2013"}, {"body": "typically would nt posted problem like either since ticket open experienced exact issue error message line code patrixd problem chrome backbone minified using appears bug chrome stable beta problem instantly goes away one things use unminified backbone source use chrome canary firefox safari etc apply noop nt commit source minifying could nt find related bug chromium bug trackers content figuring working patch well chromium fixes issue possibly worth noting error occurred pageloads could due loading order various ajax requests also tried various options uglifyjs since seems js engine problem chromeium much", "d": "7/2013"}, {"body": "fairly sure hit exact issue philfreo describes minified code causing scripts intermittently break crash tab chrome nt much time spend currently running app uncompressed assets looked tickets chrome could nt find anything seemed match glad nt one wonder paulirish ideas might happening", "d": "7/2013"}, {"body": "nt bug tho", "d": "7/2013"}, {"body": "nt bug tho nt think since minified code looked legit seems logically equivalent source runs fine browsersversions patch referenced nt logically affect behavior fixed issue", "d": "7/2013"}, {"body": "thanks lot philfreo try patch tomorrow let know fixed issue seen patch really weird right nt logically affect works happy hope next version chrome fix minified code issue", "d": "7/2013"}, {"body": "applied patch minifying works error horror nt notice last week nt imagine could current version thank much", "d": "7/2013"}, {"body": "tgriesser get crashed tab behavior super helpful get reference crash id going little tricky without smaller repro philfreo start ticket tracker demos hopefully start widdle issue meanwhile team might come across already", "d": "7/2013"}, {"body": "hi paulirish case chrome tab never crashed enabled crash reports able get crash id case crash happens got javascript error stack uncaught typeerror read property null hextendget hextendset hextendadd suggest see code fix problem anything help please let know", "d": "7/2013"}, {"body": "share difference two minified versions well repro canary chrome wed jul pm patricia notifications githubcom wrote hi paulirish tried get crash id posible javascript error stack error nt generate crash report uncaught typeerror read property null hextendget hextendset hextendadd suggest see code fix problem elasticsales anything else thanks reply email directly view github", "d": "7/2013"}, {"body": "used minified version backbone replaced next works apply google closure compilation level simpleoptimizations join code generated require rjs libraries compared two versions final code one use app main difference next code work arbitrary chrome differences name variables next function allways works hope helps nt installed chrome going install philfreo said works fine going try code anyway thanks", "d": "7/2013"}, {"body": "tried app chrome two versions worked correctly philfreo said maybe already fixed problem anything else help", "d": "7/2013"}, {"body": "try mailing list irc channel", "d": "7/2013"}, {"body": "mentioned validate section passing trick defaulted", "d": "7/2013"}, {"body": "nt default validate attr option option validate true", "d": "7/2013"}, {"body": "defaulted true otherwise need say changed", "d": "7/2013"}, {"body": "thanks fast response", "d": "7/2013"}, {"body": "model exists already clientside changes made state nt changed feature getting incorrect event care fetch finished listen request state change", "d": "7/2013"}, {"body": "happening inside jquery precise native used available handle error listening errors either jquery backbone level regardless better ask questions like mailing list irc channel instead opening ticket", "d": "7/2013"}, {"body": "yes reason tried searching opening new ticket learned", "d": "7/2013"}, {"body": "okay tried nothing broke thing happened models loaded collection instantiation already place initialize function called application desirable ticket raised way learn would desirable way seems difference", "d": "7/2013"}, {"body": "looking promise whereas backbone events useful event yet happen promises good code waiting task either already completed yet complete flawed adequate implementation baked jquery called might also look q jquery ajax object returns promise backbonesync bubbles call etc chain", "d": "7/2013"}, {"body": "yep mentions sounds like described pretty much fits definition promises sidenote neat plugin put together cases want trigger backbone events may may async triggerthen need initialize promise lib like whenjs qjs enables promise returned handler method error thrown handler specific event queued using promise lib use traditional promise typically would needed could use backbone events handle lifecycle events bookshelfjs server side orm using backbone patterns foundation allows evented style handle things like validations preinsertdeleteupdate prep etc event handlers may may async maybe someone else find useful", "d": "7/2013"}, {"body": "tgriesser oh cool nt know triggerthen use project bookshelf awesome btw", "d": "7/2013"}, {"body": "tgriesser cool pattern indeed", "d": "7/2013"}, {"body": "hi bytasv thanks bringing stuff let see answer questions complete event right nt explicit event however spell everything want using tactic quite awhile without issue instanceof checks run several times well understand frustration however think small price pay transparent event propagation benefits far outweigh think instead crud events cases want know model synced method generally important ui standpoint callback probably best bet backbone providing common case certainly trigger crud events custom want", "d": "7/2013"}, {"body": "hello braddunbar avoid instanceof check maybe would nice separate event emmiter models object ie believe would nice events separation difficult implement either simply models object could extend backboneevents object route events traffic object instead collection talking crud events recently jumped issues instead binding saved event use jquery ajax success callback passed modelsave method want navigate another application state successful model save could write right bind sync event triggered also fetch model server way distinguish kind operation finished events really help decouple application sometimes could really without sacrifice learn ability framework", "d": "7/2013"}, {"body": "hi gerev reason collection nt receive event time triggered model already removed since model longer member collection events longer propagated context also discussed generally listen cases since handler probably different anyway", "d": "7/2013"}, {"body": "makes sense worked around nt event triggered anyway proper cycle occur found somewhat unexpected surprising", "d": "7/2013"}, {"body": "still fired event triggered model since longer part collection conceivable could fake fairly certain would cause problems fixed", "d": "7/2013"}, {"body": "think brad money clientside code perspective calling model optimistically going want assume lose references model therefore events immediately course still listen potential error backbone pessimisticbydefault might different ai nt", "d": "7/2013"}, {"body": "agree strong point working backbone recently occur endofrequest event counter could lot help models well example server nt respond content call wo nt fired iirc case forced rely callbacks bit limiting hole nt cover makes less convenient centralize code like adding loading indicators necessary hopefully makes sense", "d": "7/2013"}, {"body": "example server nt respond content modelsave call sync wo nt fired iirc case forced rely success callbacks empty json response valid instead triggers see details bit limiting hole sync error nt cover makes less convenient centralize code like adding loading indicators necessary triggered model operations consistently also collections consistently proxy events models contain happens model destroyed nt member collection always listen model instead", "d": "7/2013"}, {"body": "version master wip options removed edge use found last official release", "d": "7/2013"}, {"body": "please remember search opening issue addressed several times", "d": "7/2013"}, {"body": "hi eggbeard options longer attached view backbone though like info please see", "d": "7/2013"}, {"body": "many thanks quick useful responses interesting reading yes part git education search better next time", "d": "7/2013"}, {"body": "sweet want email ask send description", "d": "7/2013"}, {"body": "sent message support desk", "d": "7/2013"}, {"body": "sure mean see line backbonejsorg official source change master since probably intentional disagree feel free send pull request wait next stable release", "d": "7/2013"}, {"body": "yes see post wrote line present backbonejsorg setting url collection creation works fine also find minimized version line backboneminjs repository line absent backbonejs really breaks feature described using uncompressed version also mentioned missing current master version already pointed previous post", "d": "7/2013"}, {"body": "afraid listening events collection level extremely core bit backbone functionality nt want listen events collection simply nt listen", "d": "7/2013"}, {"body": "gon na guess breaking changes probably going slow jashkenas speak iirc warning site said backbone alpha would breaking changes good thing usually read change log get good idea changed get around example change note passing old functionality", "d": "7/2013"}, {"body": "intend continually break backwards compatibility even necessary yes semantics important new defaults said backbone nt often maybe ever critical security fixes anything need jump immediately feel free use version like take time upgrading", "d": "7/2013"}, {"body": "hi neojski original arguments passed unchanged access current value whichever works best discussion interested rationale hope helps", "d": "7/2013"}, {"body": "nt cause performance problems code inside make defer instead breaking ideal simplistic nature backbone synchronous event execution", "d": "7/2013"}, {"body": "deferring solution wondering mechanism set way makes sense thanks tue jul tim branyen notifications githubcomwrote trigger nt cause performance problems code inside make defer instead breaking ideal simplistic nature backbone synchronous event execution reply email directly view github", "d": "7/2013"}, {"body": "ah fixed released yet sorry", "d": "7/2013"}, {"body": "hi naddiseo certain looks like using unsupported syntax keys hash single event name event name followed selector delegation using delegates events elements nt think intention check docs source information", "d": "7/2013"}, {"body": "plan another release backboneconf end month leave open til happens", "d": "7/2013"}, {"body": "addressed", "d": "7/2013"}, {"body": "recallfx recall correctly issues merging defaults caseywebdev addressed master try latest see fixes issues seeing", "d": "7/2013"}, {"body": "tgriesser verified current master issue fixed thanks", "d": "7/2013"}, {"body": "great", "d": "7/2013"}, {"body": "reading right bug potentially caused chrome following according rfc octets must encoded corresponding graphic character within usascii coded character set use corresponding character unsafe corresponding character reserved interpretation within particular url scheme therefore imo backbonejs router needs support usascii would suggest changing links code conform", "d": "7/2013"}, {"body": "hi ambeer generally best accomplished conditionals handler hope helps js var view backboneviewextend events", "d": "7/2013"}, {"body": "see change bind string try", "d": "7/2013"}, {"body": "hi codylindley used read initial routes actually store responsibility lies history route hope helps", "d": "7/2013"}, {"body": "sorry clear code example demonstrate myrouterroutes contains object routes manually add routes object updated console see log object myrouterroutes contains routes suppose private value", "d": "7/2013"}, {"body": "right try logging instead routes added calling", "d": "7/2013"}, {"body": "hi neocotic order change events case intentional unlikely change comes one event may many events would recommend make function event order important relying usually end debugging js var mymodel backbonemodelextend isfoo function return thisget attr foo isbar function return thisget attr bar var myview backboneviewextend initialize function thislistento thismodel change attr thisrender render function var classname hide thismodelisfoo classname foo else thismodelisbar classname bar", "d": "7/2013"}, {"body": "interesting nice use case still feels little bit edge overriding wrapping model question adding removing whichever rare case app csrf token ajax options", "d": "7/2013"}, {"body": "yep overriding works also override model model basis also handle calls", "d": "7/2013"}, {"body": "righto would even better way", "d": "7/2013"}, {"body": "sorry might misunderstanding possible override sync method without rewriting function able capture ajax request ie want create pool ajax requests modelcollection abort modelcollection disposed would", "d": "7/2013"}, {"body": "certainly might look something like", "d": "7/2013"}, {"body": "ah ton", "d": "7/2013"}, {"body": "hi fabioperrella setting attributes returned server intentional decision backbone server set many attributes likes several issues concerning longer explanations eg want make sure attribute removed fetching listen event clear", "d": "7/2013"}, {"body": "pinging braddunbar particular two lines definite opinion time change made root urls without additional components needing include trailing slash side effect assuming roots usually prefix additional url components", "d": "7/2013"}, {"body": "definitely latter nt strong opinion trailing slashes root though aware problems joshpangell problem trailing slash causing purely aesthetic cause technical issue", "d": "7/2013"}, {"body": "let assume pure root urls never trailing slash put us although perhaps allow one slash manually resourcewise best us assume oldschool apacheslashmeansindexhtml idiom", "d": "7/2013"}, {"body": "sounds good patch incoming", "d": "7/2013"}, {"body": "braddunbar trailing slash causing technical issue per say aesthetics important", "d": "7/2013"}, {"body": "addressed sure like solution one uncomfortable fiddling finicky portion code something currently causing problems two caveats described pull could possibly addressed seems like lot trouble trailing slash", "d": "7/2013"}, {"body": "potential caveat cache many people cache based url especially varnish slashes url looked different locations fact", "d": "7/2013"}, {"body": "sure like solution righto instead fiddling simply normalize never include slash directly root", "d": "7/2013"}, {"body": "sure thing updated", "d": "7/2013"}, {"body": "false alarm figured want libs pages add wildcard char textarea adminconfigdevelopmentbackbone probably default behaviour though opinion course cheers", "d": "7/2013"}, {"body": "hi neojski backbone routers ignore query string entirely favor using path name similar check want gory details", "d": "7/2013"}, {"body": "sad thanks reference", "d": "7/2013"}, {"body": "collection methods return array new collections need wrap result another call said generally get better response type question mailing list documentcloud irc channel freenode", "d": "7/2013"}, {"body": "unfortunately work returns also tried following returns seems like big bug", "d": "7/2013"}, {"body": "whoops gave bad information teach post without testing first reason returns array models objects try size instead", "d": "7/2013"}, {"body": "yes works thanks however according supported backbonejs assume could chained", "d": "7/2013"}, {"body": "sure", "d": "7/2013"}, {"body": "oo work return value seems like bug try", "d": "7/2013"}, {"body": "fear enter mode nt get shortcuts underscore methods proxied directly onto collection prototype provide work better slightly performant going nonchained version", "d": "7/2013"}, {"body": "bah strike two morning tested instead mirrors property model thanks assist caseywebdev", "d": "7/2013"}, {"body": "prob makes crave dot path resolving underscore", "d": "7/2013"}, {"body": "sure would resolve issue events fired asynchronously imo fire custom event rebuilt models listen one sure model state stable", "d": "7/2013"}, {"body": "hi cthielen current order definitely intended think agree sboudrias sounds like good spot custom event", "d": "7/2013"}, {"body": "wow idea happened sorry", "d": "7/2013"}, {"body": "hi adamterlson understand motivation comes actually gone path done tell nt pretty ending using new values leaving old objects alone desirable prevents driven crazy would suggest periodically syncing data via benefit handling caveat mentioned well hope helps", "d": "7/2013"}, {"body": "according docs collection comparator function allowed models arguments distinguishes respectively nt believe misinterpreted tell appear spot conclusion designed situations two argument comparators also looks like issue briefly come past additionally since ends referring passed option breaks run lastly final line test case crashes made small mistake passing model nonexistent comparator method think meant however would give call method get undefined error collection comparator passed default anyways line", "d": "7/2013"}, {"body": "looking bit appears either documentation issue would need written order allow two argument comparators think docs collection comparator could provide caveat better explains two scenarios v arguments one argument comparator delegate allows use whereas two argument comparator delegate native optimal larger collections removes preprocessing step work default happy submit pull request potentially even work fix methods account two argument comparators want make sure everyone board", "d": "7/2013"}, {"body": "jashkenas see commit potential fix could small documentation fix see would happy submit pull request either make sense", "d": "7/2013"}, {"body": "ok started adding test stuck evaluating check link contains correct href", "d": "7/2013"}, {"body": "think bug opera also angular edit think elaborate bit basically nothing historynavigate problem read href property link opera incorrectly resolve baseuri", "d": "7/2013"}, {"body": "ok guess backbone fault obsolete soon since opera migrating webkit close", "d": "7/2013"}, {"body": "two views view contenteditable element views observe model one contenteditable elements dom event focuses element related view know set state related view view know currently edited model fires change event view ignores event currently edited hand view currently edited updates contenteditable element current model data", "d": "7/2013"}, {"body": "sure right way use backbone probably appropriate open bug ticket try mailing list irc channel instead", "d": "7/2013"}, {"body": "nt make copy object like source also mutation options mutated model constructor collectionreset javascript defaults options options emulatehttp backboneemulatehttp emulatejson backboneemulatejson later optionsbeforesend function xhr xhrsetrequestheader xhttpmethodoverride type beforesend return beforesendapply arguments even later var xhr optionsxhr backboneajax extend params options", "d": "7/2013"}, {"body": "already fixed bug removing reference collection option object", "d": "7/2013"}, {"body": "hi molily chaplinjs team chaplinjs framework sits top backbone discussed query string support decided write viewpoint knuton published article talks general use urls amp javascriptbackbonejs apps particular also try join discussion respond comments several issues including one", "d": "7/2013"}, {"body": "heyo reading chaplinjschaplin article one bit like correct jeremy argues clientside apps encode query params paths like directionascsortcreatedstateopen point querystrings effectively opaque strings browser continue use opaque querystring choosing design putting actual querystring part url segment works fine use json serialization ordered path components whatever like importantly would fine entertain support query strings needs work transparently hashes well feel free send pull request although looks like nt gotten quite far chaplin yet finally bit shame write advocacy article instead making request via email understand gets results let hope nt cause many misconceptions", "d": "7/2013"}, {"body": "would agree molily bug resolved message clientside apps encode query params paths added support query strings works transparently hashes along failover url length constraints ie jashkenas perhaps advocacy article representative others historical experiences filing feature requestsbugs", "d": "7/2013"}, {"body": "jashkenas sorry misrepresented opinion issue mentioned urls alternative query strings said chaplin issue agree query strings avoided transformed cases finally bit shame write advocacy article instead making request via email goal article discuss topic general want web sites work difference apps traditional sites regard deduce backbone least allow assumed fundamental controversy point even google using hash urls lot backbone beginners wondering whether pick hash urls history choose aware implications get using pushstate least spending lot time explain basics chaplin users article tries explain background clearly recommend one practice raise question directly already several closed prs contributors explicitly spoke feature glad see discussion starting good starting point try restore changes make pr write tests makes sense ignore qs routing would match line routing frameworks moment one needs write spec support different query strings chaplin router puts pattern matches query string parameters hash like rails love see something similar bigger change deprecating chaplin chose override break core backbone logic know lot plugins monkeypatching weakens maintainability interoperability imho chaplin router totally relies backbonehistory query string extraction something top works fine since particular ignore query part handlers called switching problems mentioned comment assume tough case already query string apart switch lt quite easy moviepilotcom vizgedprojectde solved early redirect nonpushstate browsers appends backbone could add locationsearch interestingly already works way around redirecting hash pushstate locationsearch appended case", "d": "7/2013"}, {"body": "realized nonpushstate browsers latest backbone redirects guess reason query string processed server side client read using usual makes sense first glance order support qs backbone routing well could insert qs twice ugly indeed sites redirect posted early redirection code make sense pull apart remix process qs server handling qs meaningful context root assuming opposite qs processed serverside regardless path make sense send twice use case understand qs breaks scripts rely standard behavior scripts work hash urls anyway unrealiable example analytics scripts need feed something like manually otherwise nonpushstate browsers always track proposal mapping lt gt send qs server another context guaranteed qs even hit server imagine two users nonpushstate browsers sharing url qs sent using hash urls deceiving qs part use property disallow qs never worked anyway pushstate backbone would produce urls like", "d": "7/2013"}, {"body": "points latest proposal sound good except last one nt able support qs way support paths fact semantically unordered screw entirely", "d": "7/2013"}, {"body": "collectioncreate also use promises instead pass successerror callbacks", "d": "7/2013"}, {"body": "regardless underlying library used backboneajax response server means operation case destroy success nt server returns http status indicates http success however response data interpreted json server return json failure next logical level http transport words http status indicates success placed additional constraints type response expect actual data server returning header says response body empty string returning invalid json truly content appropriate http response would although cases may generally may blind delete request server care response code provides option caller add handlers via promises could make use information returned additional validation show status messages confirming server action code nt care value returned server returns unpredictably inconsistent responses eg html json plain text depending circumstances unable correct server code use interpretation response based string returned ignore completely", "d": "7/2013"}, {"body": "thank issue overwritten remove function", "d": "7/2013"}, {"body": "", "d": "7/2013"}, {"body": "urlroot gives free", "d": "7/2013"}, {"body": "caseywebdev really thanks", "d": "7/2013"}]