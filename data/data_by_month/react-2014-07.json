[{"title": "nt add toplevel events uncontrolled inputs", "body": "documentwide handlers native events perform synthetic event dispatch execute milliseconds machine realize nt seem like much time really trying shave nonessential source latency typing cursor movement atom every little bit helps disabling synthetic events saving latency keystroke fork added ability add property native event opt synthetic dispatch interested official mechanism opting feature certain event types even better perhaps react could maintain cache event types actually listened bail soon possible handling event", "num": "1964", "d": "7/2014"}, {"title": "reacttextcomponent string props clashes clonewithprops", "body": "effect seen gist uses reactbootstrap relevant excerpts source trying fix boostrap lib seem like bit gotcha anyway documented way decide safe supposed work current descriptor scheme things", "num": "1962", "d": "7/2014"}, {"title": "transitiongroup nt call willenter correctly child callback immediate", "body": "code outputted instead one missing works correctly uncomment", "num": "1959", "d": "7/2014"}, {"title": "error thrown definemanymerged duplicates sucks", "body": "mergeobjectswithnoduplicatekeys tried merge two objects key understandably general given used merge couple things actual use case shh used mixin component return object key make error mention something methods people idea look instead coming irc rightfully confused", "num": "1957", "d": "7/2014"}, {"title": "key event issues", "body": "documents things confusing seemingly broken around key events let fixclarify things cc syranide salier", "num": "1955", "d": "7/2014"}, {"title": "nit jsx command adds trailing whitespaces compiled files", "body": "happens using least possibly others js jsx reactdom var trailing space compiles js jsx reactdom var foo p bar trailing space added qux null please ignore invalid comment syntax added highlight issue unwanted trailing spaces easily mess use vcs probably good practice version compiled files sometimes nt option could use another tool chain cleanup tbh seem obvious jsx compiler nt add trailing spaces compiled files", "num": "1954", "d": "7/2014"}, {"title": "transitiongroup wrapper interferes component refs", "body": "hello encountered unexpected behaviour wrapping list items refs eg refs longer found component unless wrap item extra element eg problem seems occur works fine created test wrapper component also worked please see attached fiddle contrived example focus new list item click button many thanks brendan", "num": "1950", "d": "7/2014"}, {"title": "transitiongroup buggy null children", "body": "feel like million issues seems like switching nt perform exit animation two components probably", "num": "1949", "d": "7/2014"}, {"title": "functions statics get chained duplicate keys", "body": "logs js var statics moo function consolelog var x reactcreateclass mixins statics moo function consolelog b render function xmoo seems weird inconsistent behavior nonstatic functions change give error", "num": "1947", "d": "7/2014"}, {"title": "iscomponentoftype missing", "body": "reactaddonstestutils seems missing iscomponentoftype still documented alternative", "num": "1946", "d": "7/2014"}, {"title": "investigate returning arrays flattenchildren small lists children", "body": "transitjs map implementation uses arrays store mappings small numbers keys sounds like give performance benefits cases swannodette transit map set faster object set probably worth investigating whether performance gains get adopting similar strategies related transit source", "num": "1945", "d": "7/2014"}, {"title": "unnecessary reflow due setstate componentwillreceiveprops", "body": "see mailing list post reproduced convenience following reduced test case jsfiddle unnecessary reflow javascript var input reactcreateclass getinitialstate function return text thispropstext componentwillreceiveprops function nextprops thissetstate text nextpropstext render function return reactdomdiv null thisstatetext var app reactcreateclass getinitialstate function return value foo render function var return reactdomdiv null reactdominput value thisstatevalue onchange function e thatsetstate value etargetvalue input text thisstatevalue reactrendercomponent app null documentbody screenshot timeline tab chrome dev tools showing reflow equivalent implementation jsfiddle using reflow javascript var input reactcreateclass render function return reactdomdiv null thispropstext var app reactcreateclass getinitialstate function return value foo render function var return reactdomdiv null reactdominput value thisstatevalue onchange function e thatsetstate value etargetvalue input text thisstatevalue reactrendercomponent app null documentbody", "num": "1940", "d": "7/2014"}, {"title": "running two copies react page give errors use id", "body": "maybe something smarter root index generation client side seems like work", "num": "1939", "d": "7/2014"}, {"title": "jsxtransformer provide event script fully loaded", "body": "page mixed jsx script use jsxtransformerjs js script jsx script get loaded js script refer react classes created inside componentjsx appjs workaround rename appjs appjsx jsxtransformer kind even callback called jsx script loaded ready used", "num": "1938", "d": "7/2014"}, {"title": "objectassign polyfill included", "body": "see commit introduced method however nt appear anywhere latest release version result unable glob jsx attributes following", "num": "1935", "d": "7/2014"}, {"title": "speed min builds", "body": "minifiying twice thanks need remove dead requires also nt minify way still need well nt actually looked see better way", "num": "1933", "d": "7/2014"}, {"title": "perfprintwasted prints newly inserted dom nodes list waste time", "body": "first attempt show bug found weird behavior show time wasted user click action nt know one show wasted time use shouldcomponentupdatetrue see time waste grows list size well number instances table finally demonstrate problem see implemented correctly shouldcomponentupdate time add new element list considered waste time table always show instance one got inserted problem app dealing paginated list loading items server user scrolls nt think newly inserted node printed", "num": "1931", "d": "7/2014"}, {"title": "checkedlink documented", "body": "checkedlink seems used data binding checkboxes really documented except release note makes hard find useful information using checkboxes quite common", "num": "1930", "d": "7/2014"}, {"title": "support element svg", "body": "could really useful order perform animations svg elements based reactive state updates plan support", "num": "1928", "d": "7/2014"}, {"title": "repo components", "body": "hello love react sometimes difficult search readyforuse components built react want share community new supercool component possible make package manager components cool jquery tonns plugins nt place searching installing etc people try reinventing wheel already exists job better", "num": "1927", "d": "7/2014"}, {"title": "docs better body font choice", "body": "issues make docs hard read high color contrast lack contrast exacerbated thin sansserif font choice body thin sansserifs used fancy headings still ca nt see shit even zoom cause font god damn thin lack typography choices sansserifs everywhere everywhere like looking bowl oats use serif font body text georgia acceptable palatino linotype exceptional afford", "num": "1926", "d": "7/2014"}, {"title": "reactaddonsupdate return input object replace value", "body": "code shows problem var root prop propvalue nested nestedprop nestedpropvalue var rootcopy reactaddonsupdate root nested set rootnested var reactaddonsupdate root nested nestedprop set rootnested consoledebug root rootcopy root rootcopy consoledebug rootprop rootcopyprop rootprop rootcopyprop consoledebug rootnested rootcopynested rootnested rootcopynested consoledebug root root rootcopy consoledebug rootprop rootprop consoledebug rootnested rootnested root rootcopy false rootprop rootcopyprop true rootnested rootcopynested true root false rootprop true rootnested false woould expect equality true think point immutabilitystructural sharing create useless objects inner properties equally call makes sense object returned object arguments ensuring help avoid unexpected behavior shouldcomponentupdate prevent useless renderings encountered user clicks twice menu element exemple", "num": "1923", "d": "7/2014"}, {"title": "nt bundle reacttestutils nodeenv production", "body": "using reactaddons webpack compile production version bundles test helpers along production code helpers appear small moment big issue test helpers added production build", "num": "1921", "d": "7/2014"}, {"title": "unexpected behaviour input element onkeypress event", "body": "element reactdominput onkeypress thisonkeypress onkeypress function event eventkeycode enter key eventpreventdefault react preventdefault working focus input pressing enter form submit reloads page also tried preventdefault onkeydown event luck", "num": "1920", "d": "7/2014"}, {"title": "proptypesoneof warning include expected types", "body": "proptype warnings oneof say instead actual expected type example proptype get following warning example react", "num": "1919", "d": "7/2014"}, {"title": "react jsx error", "body": "open chrome official build page show hello world nothing shown page got error", "num": "1917", "d": "7/2014"}, {"title": "isvalidcomponent returns false component instances", "body": "returns passed component instance descriptor sure intended behaviour seems counter intuitive intended perhaps could mentioned docs fiddle showing behaviour fiddle showing previous behaviour", "num": "1916", "d": "7/2014"}, {"title": "ship", "body": "needs cherrypicked x x x aka cleanup x x x x activities x update changelogblog post mention descriptors see change proptypes validation x blog post also refer missed items blog changelog x everything else", "num": "1915", "d": "7/2014"}, {"title": "lifecycle methods naming", "body": "take look api component get things like fine however lifecycle methods named like component talking using third person ca nt use normal method names gain space consistency", "num": "1914", "d": "7/2014"}, {"title": "notify application jsxtransformer completed processing jsx", "body": "first discussed use case application code react code file development included along way reliably reference components defined production jsx first translated js files combinedcompiled together issue noted comment workarounds", "num": "1913", "d": "7/2014"}, {"title": "setstate working", "body": "following component renders expected use setstate version however upgrade jsfiddle use setstate longer works says undefined missed something bug", "num": "1911", "d": "7/2014"}, {"title": "custom validators run twice error", "body": "updating code react ran something took time track root issue used consolewarn custom proptypes validation usually wants error returned nt appear documented part docs changes also appear additional sideeffect proptypes appear initialised multiple times see fiddle turn console run bit contrived excerpt dynamic form generator hence multiple mixins interesting thing note testproperty function props propname componentname validator logs twice without testproperty fails validation time testproperty props original code consolewarn meant second run validator never happened resulting property set suspect something catches error retries validation different setup clear intended behaviour fiddle seems good test case start tracking", "num": "1910", "d": "7/2014"}, {"title": "expose reactlib plugins", "body": "currently difficult impossible create plugins react use stuff without using crazy hacks best way separate modules", "num": "1906", "d": "7/2014"}, {"title": "mutating content throws", "body": "execute goes boom throws away children render violently screams way try add children afterwards mutating nt imagine reality quite simple could look something like count items error ever changes practically though content useless clientside see reason nt discard children passed clientside performance gains children left serverrendering stay asis removed dom later time could easily done adding simple component returns serverrendering could whip pr guys think good idea zpao", "num": "1905", "d": "7/2014"}, {"title": "rerender entire dom key property value changes", "body": "using lodash uniqueid function key property value experiencing bug would rerender entire dom scrollable window checkboxes checkbox change entire dom would rerender causing window scroll top using purerendermixin treated state components immutably changed key property use value andor removed key property completely bug longer persisted", "num": "1904", "d": "7/2014"}, {"title": "reactrendercomponent fails svg nodes firefox ie", "body": "trying mount component node react nothing internet explorer firefox appends elements without proper svg namespace", "num": "1900", "d": "7/2014"}, {"title": "array references", "body": "eg generate list buttons want assign every button array accessible perform operation every button easily something like square bracket syntax html", "num": "1899", "d": "7/2014"}, {"title": "keypress event broken", "body": "hello troubles using latest version handler functions keyboard synthetic events receive seem broken check type anything input watch result console something wrong", "num": "1898", "d": "7/2014"}, {"title": "enable safe use elements", "body": "reduced absolute minimum enables use semantic elements currently breaks react nothing none older browsers issues elements nt necessarily proper styles like would bring game without use shiv nt actually injectmodify browser environment corrects behavior reason think worth considering would totally understand prefer keep external", "num": "1897", "d": "7/2014"}, {"title": "expose mixin method created classes", "body": "would helpful static variant accessible returned descriptor way components need defined giving someone ability mixin someone else component wish limited experience stuff also really helpful using react larger app framework context instance dependency injection emberesque way would really easy allowing inject propsmethods typeclasses basis stead current albeit undocumented global injection functionality react also seems like unnecessary restriction keeping dynamic nature language embrace prototypal nature js bless redefiningreopening classes rudimentary experiments gone well enough fits nicely compositionfocused abstractions react admittedly knowing ultimate plan makes hard guess possible conflicts approach one escape hatch might additional ability seal classes strong reason fro exposing methods descriptor", "num": "1896", "d": "7/2014"}, {"title": "jsx watch nt autogenerate file change", "body": "versions os x node jsx shell zsh set destination source directory builds initial files changes source ignored tried changing destination different dir nt fix", "num": "1890", "d": "7/2014"}, {"title": "test component methods right way", "body": "component calls another method testing jest want replace method called mock verify called correct way tried replacing method nt seem effect autobinding react resorted replacing method course ideal since uses react internals better way currently missing update path question persists though", "num": "1887", "d": "7/2014"}, {"title": "fyi regenerate entire style instead diffing", "body": "zpao brought idea using instead diffing styles day nt think would good idea apparently much wrong cost seems identically properties style styles really takes performance also seems consistent across browsers messed test buuuuuut significant benefit persistent styles even emphasized slower browsers thing sticks lot uniform performance whereas using properties significantly worse worstcase however persistent styles inplace loses bigtime seems much depends want suck every last piece performance could implement fast routine good thresholds probably biggest issue could intelligently use properties could quite big win though real nt think different paths good thing would applicable certain cases perhaps rather common still persistent styles persistent styles", "num": "1886", "d": "7/2014"}, {"title": "docs stateful children typo", "body": "", "num": "1884", "d": "7/2014"}, {"title": "docs confusing explanation go state", "body": "end confusing explanation duplicated data props section go state duplicated data props try use props source truth possible props change time appropriate store props state able know previous values perhaps trying said something like duplicated data props try use props source truth possible one valid use store props state able know previous values props change time", "num": "1883", "d": "7/2014"}, {"title": "support important styles", "body": "currently nt support set using trivially easy implement something want support although sure performance implications edit although ca nt imagine would measurable would string test cheap ok apparently nt support might still worth implementing future nt care experimentation apparently priority part value apparently wrong well way set seems acceptable workaround may use detect style seldom enough performance nonissue important consideration already support initial render subsequent updates fail nt recognized properties", "num": "1881", "d": "7/2014"}, {"title": "transferpropsto deprecation codemod", "body": "release package like jsx whitespace changes", "num": "1878", "d": "7/2014"}, {"title": "remove functionality appends px unitless numbers style prop", "body": "dangerous assume number distance unit omitted pixelbased working within svg user space sometimes required number values left unitless proportionate userdefined matrix also additional overhead maintaining property accepts unitless number value whitelist instead allowing passthrough", "num": "1873", "d": "7/2014"}, {"title": "list react addons modules", "body": "know talks set guidelines building reusable components react think central place maintains list know react utilities addons extensions reusable modules", "num": "1868", "d": "7/2014"}, {"title": "referenceerror document defined", "body": "upgrading react handler fires serverside rendering ends requires access dom ie redacted stack trace", "num": "1866", "d": "7/2014"}, {"title": "tag", "body": "apparently nt tag", "num": "1861", "d": "7/2014"}, {"title": "add warning passing root node unmountcomponentatnode", "body": "tricky could actually use react root element cc dylanvee", "num": "1858", "d": "7/2014"}, {"title": "svg elements created proper namespace firefox", "body": "reproduce following complete minimal example javascript var bar reactcreateclass render function return reactdomrect width height thispropsi x fill rgb stroke rgb strokewidth var barchart reactcreateclass render function var paths map function return bar key render fails firefox function render var svg documentcreateelementns svg svgsetattributens null width svgsetattributens null height documentbodyappendchild svg works fine function rendersvg var div documentcreateelement div documentbodyappendchild div work google chrome", "num": "1857", "d": "7/2014"}, {"title": "add immutability helpers", "body": "hello like idea immutability helpers react find incomplete still time time switch underscore complex operations data make sense add helpers like map filter fold set like operations uniondifferenceintersection course implemented terms fold think guys thanks", "num": "1856", "d": "7/2014"}, {"title": "minify jsxtransformerjs", "body": "jsxtransformerjs build directory minify provide jsxtransformerminjs", "num": "1855", "d": "7/2014"}, {"title": "parent refs empty child componentwillunmount", "body": "believe repro bug ran child component called passedin handler clean triggered parent unmounting well handler belonging parent tries pause parent audio node already empty worth inserted breakpoint dom node still mentioned irc zpao suggested might bug", "num": "1853", "d": "7/2014"}, {"title": "initialize state empty object getinitialstate specified", "body": "hareth sometime feel adding mixin component getinitialstate return vjeux hareth surprised already case hareth vjeux hareth see already github issue opened itcreate one curious see people say would avoid force wen need state object need initialize content", "num": "1851", "d": "7/2014"}, {"title": "add key warning transitiongroup single child", "body": "wrapping item giving upon addingremoving item nothing happens item removed normally warning missing key output bit confusing could warning key missing edit clarify item removed transition performed due classes added", "num": "1850", "d": "7/2014"}, {"title": "problem highchart implementation", "body": "big problem highchart tried add reactjs highchart error said mast return right type reactcomponent need add link small proj repository roman ivanov ps may wrong way please add example using reactjs highchart", "num": "1849", "d": "7/2014"}, {"title": "dynamic key support reactlibcx", "body": "although reactlibcx handy shame based object syntax whereby key must static think would handy allow dynamic keys reactlibcx helper class could work using nested array syntax made quick improvement see think", "num": "1847", "d": "7/2014"}, {"title": "rfc observables minimal dom changes", "body": "nt really thought extensively yet figured could worth discussion must currently run entire function every change happens regardless insignificant change animating often want change position color single element still run entire every frame give idea mean could look something like code imagine also fancy ways could instead get observable variable stateprops avoiding creation mutable observables state making react edit clear nt replace render function meant feature really need squeeze every last bit performance animations performance intensive individually simple updates food thought", "num": "1846", "d": "7/2014"}, {"title": "array state using input ca nt reset defaultvalue", "body": "state value array item using children children change state value change see", "num": "1845", "d": "7/2014"}, {"title": "inline float style update firefox", "body": "jsfiddle demonstrating issue works chrome firefox", "num": "1841", "d": "7/2014"}, {"title": "updates componentdidmount batched initial render", "body": "spicyj knows reminder crappy code reproduce performancewise generally minor issue additional updates properly batched demonstrated gist", "num": "1839", "d": "7/2014"}, {"title": "rfc introduce dom property definitions", "body": "integer positive negative add integers nonnegative assume would necessitate boolean third indeterminate state would need added map indeterminate expects regular boolean attribute except defaults explicitly set disable expects default redundant add something like thoughts missed something also yes lots new properties sadly worth discussion least", "num": "1838", "d": "7/2014"}, {"title": "proptypes define children component type", "body": "looking something like however nt work course could nt find another way would nice supported", "num": "1836", "d": "7/2014"}, {"title": "quoting props keys", "body": "hi really love react jsx one big problem using google closure compiler advancedmode production script causes errors sice gcc renames props keys jsx compiler product scripts quoted props keys course could use react without jsx like work fine jsx like form writing component structure would possible add option jsx compiler quoting props keys solution overlooked", "num": "1834", "d": "7/2014"}, {"title": "unhelpful proptypes warning invalid prop supplied", "body": "use pattern often javascript jsx reactdom var hello reactcreateclass proptypes modifiers reactproptypesarrayof reactproptypesoneof large colored fill render function return hello thispropsname useful flags change often go straight css without imposing logic onto component say pass unsupported modifier react spits unhelpful warning unhelpful idea string index corresponds look code would save lot time hassle see actual array value failed check reason nt show value may serializable workarounds", "num": "1833", "d": "7/2014"}, {"title": "simple line comments jsx", "body": "would possible add syntax line comments jsx something along lines moment little clunky", "num": "1831", "d": "7/2014"}, {"title": "avoid unnecessary object allocation classset", "body": "get rid save one allocation potentially commonly used function except guys running internal transform yes", "num": "1830", "d": "7/2014"}, {"title": "ca nt insert html tag svg", "body": "run react gives uncaught error invariant violation danger expected markup render nodes rendered idea", "num": "1829", "d": "7/2014"}, {"title": "put states using several components", "body": "make tiny app tower hanoi run problem repotiyemereacthanoi drag disks different stacks hovering stack give feedbacks like dimming background color add class stack remove tha class disks leave stacks need know state disks need reference state change dragging finished ondragend means put components find last put state model holds three stacks refers stack dragging event started refers stack dragging disk hovering still bad idea put state model better solution case", "num": "1828", "d": "7/2014"}, {"title": "update recast amp constantsjs", "body": "recast breaking changes let update fix going give thedekel right first refusal", "num": "1824", "d": "7/2014"}, {"title": "jsxtransformer download execute async scripts async", "body": "changed actually use async xhr continue execute scripts order script specifies attribute allow break ordered execution super low priority anybody interested feel free go", "num": "1823", "d": "7/2014"}, {"title": "warning unknown dom property mean htmlfor", "body": "get warning whenever attempt use property element see description attribute", "num": "1819", "d": "7/2014"}, {"title": "document reactaddonspurerendermixin", "body": "", "num": "1816", "d": "7/2014"}, {"title": "document reactaddonsupdate apply command", "body": "needs bullet point though would great actually examples page whole cc brandonbloom", "num": "1815", "d": "7/2014"}, {"title": "reactaddonsperf documentation", "body": "let chenglou write would nice get spot checked petehunt andor joshduck", "num": "1814", "d": "7/2014"}, {"title": "missed opportunity rename flux stores flux capacitors", "body": "early days generating good amount interest pattern surely still time get name right paint dry", "num": "1811", "d": "7/2014"}, {"title": "improve reacttools readme", "body": "splitting readme reacttools npm package look less clowny npm however really poor job making readme good make better ship like real soon let make sure document actually available command line api protip hidden ones api since pass options object sourcemap api", "num": "1810", "d": "7/2014"}, {"title": "refs always exist", "body": "always object component without currentlyrendered refs empty object currently guard dynamic refs example searchable component search input appears contents reach certain length", "num": "1808", "d": "7/2014"}, {"title": "addonsupdatejs work expected prototypes", "body": "able use prototype seems goal addon according line since use object constructor instead updating object prototype prototype kept expected copypropertiesjs include prototype methods object properties probably loop see think loop instead would nice pollute object attributes unnecessary methods keep prototype", "num": "1807", "d": "7/2014"}, {"title": "structure package allow single dependency", "body": "possible depend react every single reactrelated thing across entire stack call react code also able require jsx files everywhere pull unnecessary code client bundle eg jsx transformer okay slashes requires mainly want avoid confusing mysterybugs like one seems errorprone pull different tooling utils may slightly different versions react", "num": "1806", "d": "7/2014"}, {"title": "tips navigation titles run together", "body": "hard tell tip title starts ends since padding ideally would small amount padding set apart", "num": "1805", "d": "7/2014"}, {"title": "transformer cdn trouble compiling local files running file protocols", "body": "sure worth fixing hard debug filing posterity setup open browser file pathtoindexhtml result cautious solved downloading transformer local folder", "num": "1804", "d": "7/2014"}, {"title": "proptypes could set default values", "body": "find typing time sadly pokemon javascript var pokemon reactcreateclass proptypes type reactproptypesoneof normal fire water bird really like frame data schema component could skip step something like", "num": "1800", "d": "7/2014"}, {"title": "add way specify indeterminate checkboxes", "body": "way similar right attribute ignored need figure interacts though", "num": "1798", "d": "7/2014"}, {"title": "keyboard events dont fire unless focussed form input", "body": "binding keyup events fire form input focus prevents various scenarios like keyboard navigation list grid also things like keyboard shortcuts fiddle demo understand may performance reasons couldnt see code caused great change happy submit pr someone points choice bind focussed happening", "num": "1795", "d": "7/2014"}, {"title": "onpaste working", "body": "onpaste event appear firing since jsfiddle nt play nice create simple demo page shows issue", "num": "1794", "d": "7/2014"}, {"title": "testing react components wrapping componentdidupdate", "body": "working library generative testing well testing state system feeding series commands seeing breaks one key issue asynchronous obviously test system needs use promisescallbacks step test order make work gist used following function wrap react components componentdidupdate one shot part question part feature request acceptable way listen act upon dom update intention modify component test b worth putting function testutils module cover use case obviously bunch error checking", "num": "1792", "d": "7/2014"}, {"title": "add api focus management", "body": "currently couple problems focus management react current problems guarantee node documentvisible visibility hard detect due components firing render guarantee x finished pending renders renders focus lost fires child nodes parents case ca nt focus want show focus button component focusing componentdidupdate affect still hidden discussion looks like prs react using raf timeouts achieve fixes problems listed cause race conditions fixed lifecycle addition hidden lifecycle purely focus management issue comes lifecycle able fire function rendering done individual component would suggest add simple api componentblur componentfocus queues requests fires rendering done fix fairly simple wonder people feel", "num": "1791", "d": "7/2014"}, {"title": "disabled input still clickable", "body": "", "num": "1790", "d": "7/2014"}, {"title": "ca nt move different position", "body": "heya seems move one div another get error contains react components since already mounted intuitively feels like something work use raw strings behaves expected jsfiddle demonstrating remove tag children works expected tried using get around since nt clone children nests problem one level deeper works nt", "num": "1789", "d": "7/2014"}, {"title": "consider warning get nonbool values hasbooleanvalue attributes", "body": "saw case somebody making use conditionally disable button clever necessary think warning might prove useful", "num": "1785", "d": "7/2014"}, {"title": "react nt handle duplicate refs well", "body": "presumably accidentally use ref two components remove second one would expect ref point first one nt either test pass javascript work removing ref duplicate name function var component reactcreateclass render function return thispropsshowb amp amp b var instance reacttestutilsrenderintodocument second tramples first expect instancerefsduprefgetdomnode innerhtml tobe b instancesetprops showb false first child exists ref point expect instancerefsduprefgetdomnode innerhtml tobe throw error upon first render trying use single ref two places", "num": "1782", "d": "7/2014"}, {"title": "add component api", "body": "could please expose instance variable method component currently get via component class use case like prefix error messages thrown component without repeating dry eg found issue believe covers request", "num": "1781", "d": "7/2014"}, {"title": "documentation inaccuracy component specs", "body": "component spec reads occur mount occur mounting reality occurs accurate state may depend props wording reflect", "num": "1778", "d": "7/2014"}, {"title": "help jsx js transform without nodejs", "body": "like convert jsx files js files linux machine direct internet access examples talk running npm obviously wo nt work case alternatives ideally would like use watch method jsx executable heacy lifting behind scenes maven task builds web app", "num": "1777", "d": "7/2014"}, {"title": "sourcemaps external file", "body": "looking source looks like source maps supported onwards thats great news looking source seems like version supported inline source maps based implementation wondering hard would add option would allow select inline vs sidebyside file", "num": "1775", "d": "7/2014"}, {"title": "regression statics convenience constructor", "body": "refer convenience constructor especially useful mixins longer valid master seems", "num": "1773", "d": "7/2014"}, {"title": "mention docs nodeenvproduction envify uglify browserify users", "body": "downloads page mentions npm package mention without nodeenvproduction envify uglify missing free performance gain sources say many packages make distinction dev production mode unusual big difference development production builds newer users browserify may know dance may naively expect use react browserify equivalent use one provided builds", "num": "1772", "d": "7/2014"}, {"title": "ship", "body": "time x update x update authors list x release notes x blog post x update dependencies x update supported attributes x update polyfill list incl reactjs warning x document anything new addons perf tap plugin makes x document change getdefaultprops cached ca nt inspect thisprops x write better reacttools readme x make sure examples work x make sure samples website work x exclude todomvcflux starter kit many dependencies x merge x update commoner update dep packagejson x x update versions readme x update changelog rc blog post x destructuring harmony x details react perf postrelease x prs cdns x cdnjs x jsdelivr x update version master x push gem even postrelease x update todomvcflux example update reactart x update reactrails", "num": "1771", "d": "7/2014"}, {"body": "imagine way react binds event handlers document react provides overloaded synthetic event dispatcher correctly stops propagation likely take separate mount roots consideration another argument binding event handlers mount roots perhaps chenglou", "d": "7/2014"}, {"body": "thanks dupe", "d": "7/2014"}, {"body": "react attach toplevel handlers events using components seeing otherwise", "d": "7/2014"}, {"body": "nathansobo curious whether simulated dispatcher ie capturing bubbling etc initialization synthetic event costly assume simulated dispatcher currently lot ugly string hacking thing chenglou working believe lot polyfills simple nt imagine issue perhaps browsers", "d": "7/2014"}, {"body": "also easily optout react event dispatcher using calling inside instead pay slight upfront cost though ps imagine since operating single modern fast environment react entire event dispatcher quite redundant could probably replace internally immediate calls", "d": "7/2014"}, {"body": "sure attaching event handlers events via react properties anywhere code perhaps attached dom component flame chart keystroke events processed react upon consideration probably events never reach handler reason indeed handled nontrivial amount time quite intrigued idea using native apis directly skipping global handling assuming would require logic fork interpret event handler properties dom components", "d": "7/2014"}, {"body": "nathansobo ah explains yeah overloaded always attaches handler behave like html implemented listens quite number events using controlled inputs obviously required seems like possible discard uncontrolled inputs sure without examination code using uncontrolled inputs probably something look see avoided using controlled inputs best bet probably implement controlled inputs ontop uncontrolled inputs look change handler avoided however remove right get raw input component instead could use implement controlled inputs using native events want using native apis directly super familiar event system code react apart different equivalent believe events represent equivalent events simply discardingignoring entire synthetic react event system updating necessary look etc perhaps could update instead add native event listeners directly piece cake hack pay higher upfront cost event listener though may preferable case probably want remove etc regardless decide switch reactdom native events", "d": "7/2014"}, {"body": "thanks thoughtful explanation yeah input definitely uncontrolled even visible exists receive input render editor stopping propagation events seems eliminate expensive handling flame graph hesitant remove controlled inputs entirely case users want use elsewhere exporting copy react users multipleinstance issue addressed like inputs work expected sure disabling synthetic event system warranted yet see costing us time elsewhere definitely take crack going close thanks conversation", "d": "7/2014"}, {"body": "pretty sure nt need attach event handlers uncontrolled components check let know", "d": "7/2014"}, {"body": "nathansobo stopping propagation removed controlled inputs broken instead edit perhaps true read seems preventing events tree easily reimplement controlled inputs raw input component something want expose users nt want replace synthetic event system entirely real harm done said synthetic event system react exists two reasons afaik normalize browser inconsistencies lots especially old browsers drop upfront n addeventlistener cost slightly expensive event handling irrelevant probably important faster modern environment also dropping frames far noticeable say popup taking frames longer open worstcase food thought definitely see atom becoming oneandonly editor future happy help", "d": "7/2014"}, {"body": "simple example outside bootstrap reacttextcomponent supposed implementation detail shortcut use string props perf since internal perhaps need make object work sebmarkbage alternatively make clonewithprops skip reacttextcomponents", "d": "7/2014"}, {"body": "interesting nt supposed strictly internal ie children stringsnumberswhatever passed rather would thought", "d": "7/2014"}, {"body": "yes syranide right think converted legacy reasons shared code path traverseallchildren need fixed part effort hide internal implementation detail jul andreas svensson notifications githubcom wrote interesting nt reacttextcomponent supposed strictly internal ie children stringsnumberswhatever passed rather reacttextcomponent would thought reply email directly view github", "d": "7/2014"}, {"body": "need investigate polyfill intentional shortcoming something fully polyfill although work significantly better reason differs browsers use native whenever available polyfill nonprintable keys reliably keydownup difference keypress ff largely intentional although check enter got caught crossfire", "d": "7/2014"}, {"body": "pushed fix missing enter ff far understand concerns everything else support seriously crappy browsers even available stay away everything nonprintable keys long since authored pr iirc even using onkeypress disaster believe polyfilled browsers nt support fall back native implementation broken evergreen browsers memory serves right work numeric keys odd things like iirc moral story take lot years use crossbrowser accurately unless mistaken ca nt use predicting key going end input anyway practical use quite questionable documenting works nt", "d": "7/2014"}, {"body": "weighing whether jsx generally accepted common practice always leave empty line end text files editors default said unless good technical reason nt see jsx nt mirror got", "d": "7/2014"}, {"body": "always leave empty line end text files leaving trailing spaces end every transformed line", "d": "7/2014"}, {"body": "bad looked end file saw empty line anyway intentional shortcoming currently result pr improved whitespace behavior jsx output fixing tailing whitespace technically quite nonintuitive due way works postponed time personally really keen digging code moment someone else feeling adventurous", "d": "7/2014"}, {"body": "syranide start looking", "d": "7/2014"}, {"body": "reactvendorfbtransformtransformsreactjs xjsjs find bunch problem easy way know next actually going newline think since esprimaterritory like step back remove whitespace fact", "d": "7/2014"}, {"body": "longer term going switch away using jstransform use recast jstransform ast assisted string string transforms recast ast ast allow us use consistent printing hand insert whitespace characters", "d": "7/2014"}, {"body": "zpao although necessarily mean nt care whitespace", "d": "7/2014"}, {"body": "transitiongroup clones children ref hold actually used cloning onelevel deep wrap random wrapper inner indeed kept intact outer cloned check console warning", "d": "7/2014"}, {"body": "recent descriptor change made change name nt updated docs yet sebmarkbage", "d": "7/2014"}, {"body": "right would make sense close issue leave reminder", "d": "7/2014"}, {"body": "faster opposite true chrome talking millions operations per second map preform equally well comes around sincerely doubt anything gain cost setting traversing map definitely nonissue bigger picture", "d": "7/2014"}, {"body": "see also", "d": "7/2014"}, {"body": "use version number prefix could work would nt version react twice else nt dedupe correctly", "d": "7/2014"}, {"body": "could solve drop ids dom somewhat supported would use internal map translating node instance fallback property could randomly generated run marker compromise want support multiple versions would also randomly generated however multiple versions really play nice would probably optionally need attach event listeners root nodes instead document suggested playing nice frameworks", "d": "7/2014"}, {"body": "planning implement atom workspace views react packages provide react components panels pane items ideally different packages could rely independent versions atom packages would nt break upgraded react core correct thinking might little unrealistic nt imagine guys plan supporting interoperation components written different versions react thought would awesome instead plan export instance react use core use package authors building views everything interoperates downside upgrading react core could break packages may need supply shim old packages happens ease transition hopefully wo nt difficult thought share use case case shapes design decisions change api moving forward", "d": "7/2014"}, {"body": "nathansobo atom plugins prompted issue going support using multiple versions react seamlessly together near term though possible work far future best approach may plugins populate iframes plugin contents scripts run isolated window", "d": "7/2014"}, {"body": "think give everyone reference react instance iframe approach unfortunately isolated kinds things people packages hopefully shim api changes guys planning bunch", "d": "7/2014"}, {"body": "multiple versions react cooperating technically advanced think biggest issue events handlers always bound document events would playing nice shimming probably going viable strategy unless referring maintaining separate branch even could probably turn major headache changes come nathansobo one possibility maintain separate atombranches major react releases play well multiple versions generally complex think would probably realistic approach think although targeting different jsx versions interesting problem applies", "d": "7/2014"}, {"body": "syranide interesting mean multiple numeric versions react multiple instances talking component version embedded component tree version something could possible would amazing", "d": "7/2014"}, {"body": "nathansobo multiple numeric versions react library matter mistaken two parts react dom currently prevents event system dom reactids fixing dom reactids simple simplest solution suffixing randomunique string startup react version sees dom managed event system little complicated problem event listeners bound document play nice libraries event handlers proposed moving event listeners mount root preferable would also play nice event handlerslibraries theoretically simple require lines code set listeners tracked per mount root instead prevent event acted multiple times instance unless missed something needed support multiple numeric versions react require maintaining separate atomcompatible branch react version possible rebase fix onto new version react without complications nt know devs feel rather simple fixes nt see would nt want apply one way another future mentioned nt know ifhow use jsx today something would also available different versions one breaking jsx update back seems like one two future", "d": "7/2014"}, {"body": "sorry one clarifying question saying makes sense regard multiple root components coexisting still clear scenario parent composite component one version react owns child component another version say example implemented atom workspace react also want implement atom treeview package react imagining treeview component would referred directly workspace method end getting owned workspace nt contract components bit involved react id missing", "d": "7/2014"}, {"body": "regarding react ids random suffixes wo nt break reconciliation server side prerendered react markup nt looked internals wanted make sure", "d": "7/2014"}, {"body": "nathansobo fire away nt really full picture intending nt take word anything idea one would use bridge rendering component versions could simply custom generic component calls roughly equivalent render works internally something visualize mean assume required react version stored statically component class rendered would allow composition components different react versions instance bridge actual component meat component preferably depend react version everything behave would expect updates callbacks etc however descriptors version specific could nt pass unwrapped component classes descriptors bridge expect work props provide component reactspecific nature depending tightly integrating react could significant issue batching would nt happen default across bridgesboundaries definitely imagineable one could rip virtual domtransactions react versions react cooperate nt know practical certainly neat using single react version top bottom think merit something like implementation ultimately becomes independent whatever side react comes around modules would simply adopt new versions please rather abandoned also sounds like might integrating quite deeply react never able improve api react would support react version indefinitely could equally horrible perhaps applicable mind said makes sense guys interesting problem hands think lot comes long far willing support old addons", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "object spread syntax nt supported yet probably use note commits cherrypicked direct cut master quite ready release yet", "d": "7/2014"}, {"body": "ahh good know thanks", "d": "7/2014"}, {"body": "believe webpack smart enough strip unneeded requires even uglification might faster", "d": "7/2014"}, {"body": "spicyj nt actually checked use apply shim working really doubt stripped unless really smart knows module sideeffects", "d": "7/2014"}, {"body": "meant webpack wo nt include module", "d": "7/2014"}, {"body": "zpao similar problem dead requires put together unreachablebranch browserify transform jstransform visitor underthehood comment unreachable branches ternaries logical operations", "d": "7/2014"}, {"body": "petehunt vacation right hopefully chance chime gets back josh might able help around", "d": "7/2014"}, {"body": "probably joshduck", "d": "7/2014"}, {"body": "oops sorry josh want send gh staff help debug", "d": "7/2014"}, {"body": "curiously seems inconsistent leave third page open watch update", "d": "7/2014"}, {"body": "yes seen something like spicyj real app seems print table constantly maybe inserted node considered waste sometimes works fine", "d": "7/2014"}, {"body": "agreed want write docs", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "hi zimok look future svg support", "d": "7/2014"}, {"body": "thanks pointing sorry nt read", "d": "7/2014"}, {"body": "probably leverage npm rather reinventing wheel happen also need asset bundling solution css images unsolved problem afaik petehunt", "d": "7/2014"}, {"body": "may solution like componentjson help", "d": "7/2014"}, {"body": "put reactcomponent keyword packagejson fine future component registry", "d": "7/2014"}, {"body": "think aetet talk premoderated catalog good react components style like kendoui dojo", "d": "7/2014"}, {"body": "oatmeal", "d": "7/2014"}, {"body": "fixed", "d": "7/2014"}, {"body": "respectfully disagree serif often prefer body typefaces wo nt change point consider redesign colors contrast ratio normal body text actually well wcag aaa level font weights bit light fact light variant could probably drop bit normal", "d": "7/2014"}, {"body": "well ofcourse easy ca nt change body palatino need fix menus navigation use font everywhere something definitely wrong could explain design choices instead respectfully disagreeing ignoring feedback might ways improve readability", "d": "7/2014"}, {"body": "disagreeing disrespecting ignoring edit", "d": "7/2014"}, {"body": "nt need reply ticket nt time explain like one expects take action argument disagreement otherwise disrespectful disregard feedback would nt workplace would saying would nt called nt fake respectfully disagree sugarcoating response", "d": "7/2014"}, {"body": "job handle issues could closed issue entirely without sort response rude instead told would would given multitude constraints working really appreciate feedback disregard going make change based design personal amp difficult thing everybody agrees looks right rarely objective right wrong example nt like text shadows website find screenshot harder read bumping fontweight proxima nova make wrong apple wrong changing system font lucida helvetica google probably using wrong shade blue honestly design decisions came mockup designer made spare time months ago outgrown nt spent much time really deviating big picture level things way time redesign pretty low priority actionable incremental improvements make meantime great constructive criticism keep coming", "d": "7/2014"}, {"body": "thanks elaborating nt necessarily want exactly like screenshot darker color body fonts nt weight unless another font name looks quite different pure black would keep roughly looks improved contrast", "d": "7/2014"}, {"body": "currently see removed see maybe make text darker though probably nt want go way right looks noticeably nonblack presumably intentionally definitely highercontrast looks almost black eyes note almost one uses black text example google search results white", "d": "7/2014"}, {"body": "well yes nt use thin fonts white background solve user styles really wanted fixed people", "d": "7/2014"}, {"body": "second screenshot shows nonthin fonts disagree", "d": "7/2014"}, {"body": "quite good change thanks ionel fri jul ben alpert notifications githubcom wrote second screenshot shows nonthin fonts disagree reply email directly view github", "d": "7/2014"}, {"body": "mistaken might typo fairly positive intentional lightweight meant used primary data structure apps fine tuning petehunt thus nt try smart structural sharing nt supposed able use like manually comparing fields mori looking perhaps", "d": "7/2014"}, {"body": "chenglou sure agree structural sharing simply detecting equivalence oldnew properties mutating nt many lines code mori library structural sharing vastly complex problem sincerely doubt reasonably common js app usecase could turn overhead benefit", "d": "7/2014"}, {"body": "yes syranide oi nt want use full structural sharing library like mori unless deal large lists things like yes really easy implement code fixed behavior", "d": "7/2014"}, {"body": "minifying code assume reacttestutils would stripped nt used", "d": "7/2014"}, {"body": "syranide sure case react addons requires require reacttestutils still included production builds using uglify defaults set webpack perhaps alternative options", "d": "7/2014"}, {"body": "using defineplugin webpack need something like make webpack inline nodeenv properly believe smart enough require test utils also write explicitly nt want specify command line", "d": "7/2014"}, {"body": "spicyj excellent looking thanks", "d": "7/2014"}, {"body": "see enter key using keydown event still ca nt get work onkeydown post jsfiddle showing problem note also write instead want", "d": "7/2014"}, {"body": "tried onkeydown already let jsfiddle", "d": "7/2014"}, {"body": "marcbelmont need use onkeypress however polyfilled lot use instead", "d": "7/2014"}, {"body": "quick example problem test var myinput reactcreateclass handlekeydown function event eventpreventdefault press enter form submitted submitted render function return reactdomform reactdominput onkeydown thishandlekeydown reactrendercomponent myinput documentgetelementbyid react tested ubuntu linux adding onsubmit handler form element prevent form submit", "d": "7/2014"}, {"body": "marcbelmont seems work fine", "d": "7/2014"}, {"body": "syranide problem ubuntu linux chrome fine", "d": "7/2014"}, {"body": "marcbelmont weird tested saucelabs browser got incorrect behavior refreshed nt get anymore ca nt reproduce", "d": "7/2014"}, {"body": "wanted oneoftype probably make message better", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "ca nt repro fixed might released soon", "d": "7/2014"}, {"body": "cc sebmarkbage come couple times terminology around component vs descriptor vs class gotten hazy think work like js would need revert current behavior reactisvalidcomponent reactrendercomponent comp true reactisvalidcomponent comp false reactisvalidcomponent comp false would need add api reactisvaliddescriptor reactrendercomponent comp false reactisvaliddescriptor comp true reactisvaliddescriptor comp false actually work like already reactisvalidclass reactrendercomponent comp false reactisvalidclass comp false reactisvalidclass comp true", "d": "7/2014"}, {"body": "direction heading actually thing component statically verified internal discussion direct many different signatures valid components needs precise instanceof particularcomponenttype certain categories like xhp anything getdomnode method jul pm paul shannessy notifications githubcom wrote cc sebmarkbage come couple times terminology around component vs descriptor vs class gotten hazy think work like would need revert current behavior reactisvalidcomponent reactrendercomponent comp true reactisvalidcomponent comp false reactisvalidcomponent comp false would need add api reactisvaliddescriptor reactrendercomponent comp false reactisvaliddescriptor comp true reactisvaliddescriptor comp false actually work like already reactisvalidclass reactrendercomponent comp false reactisvalidclass comp false reactisvalidclass comp true reply email directly view github", "d": "7/2014"}, {"body": "warn make upgrade path clear", "d": "7/2014"}, {"body": "need document change custom prop types api", "d": "7/2014"}, {"body": "mentioned like recommend quite serious issue affected targetting", "d": "7/2014"}, {"body": "spicyj returning error already updated made pr back unless talking something else maybe note say new api", "d": "7/2014"}, {"body": "mention blog post", "d": "7/2014"}, {"body": "blog post text changes put pr soon", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "brought ca nt find issue nt think anything happened personally really sure prefer always instinctively drawn short methods really clarity trumps concise opinion use excellent reminder less common magic methods makes stand would never include naming methods instinctively assume getinitialstaterenderetc every component always put topbottom willmount could easy miss obvious place always put top though always relative unfamiliar code would prefer author spent another second wrote rather carefully scan methods make sure nt overlook anything also official jsx styleguide would awesome zpao opinion", "d": "7/2014"}, {"body": "nt really get point could argue every methods every objects ever object onto methods attached provides context nt know want prefix methods nature object maybe symptom something else like stuffing many things pointer component method named component crystal clear component update attached updatelike methods precise names component one going follow rule methods component somewhere sounds suboptimal stands naming follows rule methods framework methodshooks called react", "d": "7/2014"}, {"body": "disparity naming various component methods provides clear indication functions intrinsically linked stateful retainedmode dom react tries abstract away logical notify end user methods hooks react internals opposed preparing component rendering virtual dom create component one needs pure function takes props returns descriptor without special measures mounting unmounting treating methods level co would signify prove equally important regards virtual dom simply ring true", "d": "7/2014"}, {"body": "sidenote really recommend use util instead jsxtransformer inherently flawed respect script loading use jsxtool identical behavior dev prod also correct sources errors browsers", "d": "7/2014"}, {"body": "see breaking change missed", "d": "7/2014"}, {"body": "sorry gotten warnings development build probably", "d": "7/2014"}, {"body": "cc zpao", "d": "7/2014"}, {"body": "made minor change fiddle issue seems slightly different error red herring seems validators always run twice setup warning printed always rendered obvious case clear validator run twice though actual issue guess", "d": "7/2014"}, {"body": "yeah believe run proptypes validation silently upon descriptor creation emit error mounting master run descriptor creation returning error object indeed correct api change new oversight release notes fix sorry", "d": "7/2014"}, {"body": "ah indeed totally missed warningerror change release notes", "d": "7/2014"}, {"body": "eh bad seems far away thought", "d": "7/2014"}, {"body": "much agree issue way reactbootstrap project able support amdbower cjsnpm environments whilst using stuff copying react files project", "d": "7/2014"}, {"body": "everyone interested list specific modulesfunctions interested intentionally ship small public api feel free make internal changes", "d": "7/2014"}, {"body": "guess main ones using right also use would pretty trivial implement", "d": "7/2014"}, {"body": "big one us nightmare configure across amdbower cjsnpm really option also use could understand need keep private", "d": "7/2014"}, {"body": "cx public reactaddonsclassset falls almost category clonewithprops using eventlistener", "d": "7/2014"}, {"body": "use eventlistener bind global events support", "d": "7/2014"}, {"body": "okay going count feature request vote", "d": "7/2014"}, {"body": "yes would prefect also longer needed rely", "d": "7/2014"}, {"body": "key property works using random id key almost always anti pattern instead try use sort id data set like array index db primary key", "d": "7/2014"}, {"body": "petehunt discussion irc motivation issue scrolls top believe code inplace prevent get wrong apparently nt work case", "d": "7/2014"}, {"body": "example reproduces issue firefox innerhtml createelement fail second expected chrome createelement fails expected ca nt test ie right someone would greate end solution think best since nt know specify namespaceuri attribute tried xmlns node nt work make work react think check setting innerhtml svg node case instead ussing innerthtml use domparser importnodeadoptnode afaik works ie gt better nothing", "d": "7/2014"}, {"body": "added cases static xmlns nt work ff chrome static xmlns attr node works dynamic xmlns attr node nt work ff opera ones work static domparser importnode static xmlns attr node", "d": "7/2014"}, {"body": "someone helped ie thanks mguillech ones nt work innerhtml createelement createelementns text dynamic xmlns", "d": "7/2014"}, {"body": "currently possible though could access", "d": "7/2014"}, {"body": "well giving ref unique name chenglou said access components refs something like trying call method perhaps check name begins button etc agree array references would also useful though wishing", "d": "7/2014"}, {"body": "likely possible", "d": "7/2014"}, {"body": "going close try open issues even currently failing let make explicit goalnongoal", "d": "7/2014"}, {"body": "assume referring keycode wrong mdn docs keypress event unicode value key pressed stored either keycode charcode property never access keycode via reference", "d": "7/2014"}, {"body": "yeah normalized corrected receives receives receive aliased quite useless code relies however unless specific needs new polyfilled property preferred whenever possible", "d": "7/2014"}, {"body": "nt know property thanks browniefed syranide exactly need closing issue", "d": "7/2014"}, {"body": "nt think react job make sure react works properly included see like react nt ship polyfills nt ship also nt need code unless app uses new elements", "d": "7/2014"}, {"body": "agreed thought worth checking given noninvasive nature minimal size", "d": "7/2014"}, {"body": "seems react moving away current magic features relying instead new ecmascript classesmodulesetc mixins feature react probably going go away infavor users using whatever utilities want handling extend also focusing heavily making sure code statically analyzable personally seems like dependency injection wrong solution especially context react strengths react simplicity props state render component extendable reason ca nt via props instead anyway summary best understanding heading devs authority obviously", "d": "7/2014"}, {"body": "nt see mixins magical anyway looks like simple functionobject composition sure magical mixin method creates prototype chain relying user call super anyway would much rather composition based approach inheritance general note also left feedback components classes issue regard always case made di larger applications especially want view layer behave integrate nicely rest application abstractions injecting store instances controllerviews good example rather rely users including mixin fluxxor style needed admit di overused looking angular mitigate advantages react way place managing complicated apps think larger case made aside di reasonable might able willing finish class single go would use component lib mixin application specific behaviors etc would want extend subclass component nt think request making components extendable way nt open continued composition p", "d": "7/2014"}, {"body": "theporchrat mixins magical mixins classes currently implemented react really nt concern proposal commented effectively removes react custom magic classesmixins relies ecmascript proposals instead seems favorable free use much di want given technically possible think react say matter", "d": "7/2014"}, {"body": "hear though actually get language support mixinstraitswhatever react picking sort mixin system nt spec whether via function creates prototype chain mixins current magic want blessed path addingoverridingmerging methods class prototype initial class declaration wo nt let shoot foot break component going mean extending via class syntax exposed fine tho abandon nice composition stuff sugar pseudo classical inheritance different issue expectation wait hits browsers going expected transpile years away full support would love expose mixin method", "d": "7/2014"}, {"body": "theporchrat jsx already includes number static transforms es harmony proposals look reactjsfuture might even go way classes bad modules functions decided shove module transform jsx done wait browser adoption anyway devs authority nt think demand di devs remember developedused facebook instagram pete mentioned irc day fb number components might nearing figures di necessary scale would pushed made work perhaps doubt", "d": "7/2014"}, {"body": "sort wish never brought di example sole reason issue fact relatively small one perhaps ignore fact brought p larger issue found seemingly unnecessarily restrictive trying integrate react view layer applications exposing said methods would keeping nature javascript one generally expectation accessible prototypes", "d": "7/2014"}, {"body": "huh source destination want", "d": "7/2014"}, {"body": "want ideal need way get around build problems spent bunch time trying get different jsx grunt tasks properly work browserify lineman long story short nt work ended putting watch directory jsx file changes triggers jsx command watch js changes triggers js concatminifying single appjs also gitignore entry js files generated jsx hacky works longer relying jsx watch still wanted file bug like said first post nt work even source dest different michael jul andreas svensson notifications githubcom wrote huh source destination want reply email directly view github", "d": "7/2014"}, {"body": "currently simple way seen nt guarantee stableness", "d": "7/2014"}, {"body": "ah ok thank checked code method testing also utilizes internal autobind map looks like approach stay time sent iphone jul cheng lou notifications githubcom wrote currently simple way seen nt guarantee stableness reply email directly view github", "d": "7/2014"}, {"body": "yeah unfortunately hard right changes making classes make simpler", "d": "7/2014"}, {"body": "spicyj elaborate mean using autobindmap nt super complex comfortable could", "d": "7/2014"}, {"body": "sorry nt anything point right come back update issue something", "d": "7/2014"}, {"body": "think docs correct outer braces tell jsx everything inside javasript could write also like javascript var mystyle display none paragraph", "d": "7/2014"}, {"body": "yes docs correct case thanks looking though", "d": "7/2014"}, {"body": "appropriate store props state able know previous values ah perhaps really referring basically edit pages might want diff send changed variables really reads quite weirdly especially beginners", "d": "7/2014"}, {"body": "horribly abused css people write css properly never need said nt think included people use bad practices apps styles personally inline styling react bad enough", "d": "7/2014"}, {"body": "jsx syntax implemented yet", "d": "7/2014"}, {"body": "yup", "d": "7/2014"}, {"body": "oh awesome although curious actually safely codemod number specialcases nt spread operator ps guess could codemod safe leaves unsafe ones", "d": "7/2014"}, {"body": "discussed bit implicit super nice also walks quite slippery road nothing decided either way far afaik something nt feel quite right implicit", "d": "7/2014"}, {"body": "agree current workaround specifying unit less numbers nt great also hard keep track user might unfrequent nice nt extra number string since number certainly nice rather might live latter", "d": "7/2014"}, {"body": "someone working looks around meanwhile put stuff", "d": "7/2014"}, {"body": "problem", "d": "7/2014"}, {"body": "problem happy see finally added hreflang attribute support tried upgrade immediately unfortunately problem keeping upgrading", "d": "7/2014"}, {"body": "fyi worked around using might work case depending use case", "d": "7/2014"}, {"body": "wow sounds like big regression construct simple repro case", "d": "7/2014"}, {"body": "try probably able sunday earliest frankly error happen every handler might something wrong", "d": "7/2014"}, {"body": "might happen always setstate within componentwillmount agree need fix", "d": "7/2014"}, {"body": "happens setstate componentwillmount try come simplest repro case", "d": "7/2014"}, {"body": "oh setstate probably going reactupdates using browserspecific reactreconciletransaction think", "d": "7/2014"}, {"body": "yes using failing handler bad practice", "d": "7/2014"}, {"body": "gasl maybe vs", "d": "7/2014"}, {"body": "part stack trace offending handler", "d": "7/2014"}, {"body": "simple example reproduces problem javascript var react require react var hellomessage reactcreateclass displayname hellomessage componentwillmount function thissetstate name pete render function return reactdomdiv null hello thispropsname consolelog reactrendercomponenttostring hellomessage name john", "d": "7/2014"}, {"body": "trying figure right move fix instead forbid favor thoughts spicyj", "d": "7/2014"}, {"body": "former always said supported", "d": "7/2014"}, {"body": "support seems like one way", "d": "7/2014"}, {"body": "one use case computing something based props componentwillmount componentwillreceiveprops make helper call places", "d": "7/2014"}, {"body": "js getinitialstate return helper thisprops componentwillreceiveprops nextprops thissetstate helper nextprops thing", "d": "7/2014"}, {"body": "petehunt way method written reusable vs return values use also understanding called dom environment based example see calling elegant disallowing would breaking change based current documentation ok breaking change releases long documented \u00e0 la change", "d": "7/2014"}, {"body": "going put couple ridealongs thanks bringing attention", "d": "7/2014"}, {"body": "thanks smile", "d": "7/2014"}, {"body": "good call always forget", "d": "7/2014"}, {"body": "longer issue", "d": "7/2014"}, {"body": "never mind see", "d": "7/2014"}, {"body": "personally run much simplified helper instead supports equivalent allows work immutable data mutable regular functions mutating something like simply shallow clones", "d": "7/2014"}, {"body": "immutate implementation looks like", "d": "7/2014"}, {"body": "nt really vetted yet work fine nextobject immutate prevobject keystomutateormutator var prev value permissions ids var next immutate prev function user username next userpermissions immutate objpermissions ids function ids idspush idsshift prev name previous permissions ids prev name previous permissions ids next name next permissions ids also thought getting rid redundancy mutating providing second argument callback could look like nt thought much yet ps always use risk", "d": "7/2014"}, {"body": "well still would love complete helpers react need rich api immutable data operations course adopt underscore integrate mori react question need helpers react incomplete", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "spicyj oooh interesting use spread operator whatever called", "d": "7/2014"}, {"body": "supposed used production precompile jsx purpose", "d": "7/2014"}, {"body": "okay thank looking", "d": "7/2014"}, {"body": "assuming refs cleaned opposed life cycle methods current transaction called parent apparently notified children touches another interesting question imho nt notification unmounting occur child parent ie reverse mounting", "d": "7/2014"}, {"body": "ah realize parents get notified unmount children agree order reversed since child may prop dependencies parent eg parent refs also since sense child components ultimately get unmounted parent esp since parent nt always unmounted notifying order seems make sense", "d": "7/2014"}, {"body": "well think parent needs notified unmount child actually gets unmounted clean event handlers etc rendered child component might work notify children first wait parents notified actually unmounting children", "d": "7/2014"}, {"body": "spicyj yeah would expect notifications flow children parents affected instances notified unmounted unspecifiedundefined way", "d": "7/2014"}, {"body": "problem accessing uninitialized state properties", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "nt integrated highcharts react app integrated approaches well jquery another library manipulates dom generally create little island tells react leave component alone library manipulate section dom using great example stack overflow example highcharts code may replace code dom manipulation", "d": "7/2014"}, {"body": "please nt use gh issues debugging find bug react behavior implementation reopen stack overflow mailing list irc great places get help specific integration point questions specific use", "d": "7/2014"}, {"body": "previously mentioned statically transformed facebook series string concatenations planning change course make helper works however want also note syntax able write cx block true block active thisstateactive transform nt supported yet though", "d": "7/2014"}, {"body": "expressions keys sounds great originally supported trees arrays objects strings got transform converted string concats avoid allocations seems worth tradeoff constrained api joecritch feel free publish npm module others use", "d": "7/2014"}, {"body": "aha makes sense great learn something anyway jordwalke might", "d": "7/2014"}, {"body": "already subscribing boundwidth inside calling thisforceupdate goal high perf subset app keep track update need make imperative action occurred think would make sense", "d": "7/2014"}, {"body": "petehunt yeah forgot mention intention unboxed react could use prop component far insight seems quite intuitive also seems kind lowlevel mistake would make rendered dom fall sync would nt dangerous least anyway curious go instead guess upside version error even element disappears animation unless want", "d": "7/2014"}, {"body": "would equivalent basically perhaps allow owner returns false would basically flip react initialrenderwithimperativeupdatemode", "d": "7/2014"}, {"body": "petehunt hmm actually sounds interesting life cycle method would call seems like must happen life cycle method right need new one", "d": "7/2014"}, {"body": "believe would called event handler xhr timer maybe key component spec", "d": "7/2014"}, {"body": "petehunt perhaps fell train thought would come picture intuition proposed component could choose avoid full could still choose act lesser differences update specific rendered component could look something like would still stateful could even mount component midanimation really want ie becomes strictly optimization nt stateful would deal render animation would nt overwrite props animated perhaps even something like removed code edit stratch really nt good idea", "d": "7/2014"}, {"body": "animated charts pairing easing function fair amount success ended moving direction way faster clearer dom animation svg paths think produces lot garbage used trigger many fps animations mixin using demo works really well clearly see chrome timeline tool animation frames firing sequentially single write dom beautiful", "d": "7/2014"}, {"body": "nhunzaker definitely invokes potentially really quite costly want animate single attribute unless isolate animating node separate component quite cumbersome", "d": "7/2014"}, {"body": "use set value resolve problem", "d": "7/2014"}, {"body": "yes firefox inline style float debatable react suppose fix anyway better use two classes like twbs", "d": "7/2014"}, {"body": "apparently needs hurtrealbad", "d": "7/2014"}, {"body": "ping", "d": "7/2014"}, {"body": "practical advantage would checks give nt feel like existing numeric checks much us", "d": "7/2014"}, {"body": "spicyj right nt think major benefit browser throws error invalid values throws errors ie versions say correctness output junk dom really clear currently turn assuming actually leaves enabled thing would nice able send boolean values work expected currently really really use depending attribute", "d": "7/2014"}, {"body": "personally also wondering perhaps good idea warnerror user supplies invalid values providing invalid values hardly something intentionally alerted fact could really good thing", "d": "7/2014"}, {"body": "used work longer work upcoming descriptor changes sebmarkbage ideas", "d": "7/2014"}, {"body": "two pieces simple one expecting single component special proptype simple someone send pullrequest second part want accept one several unknown components considered compatible xhp hack use something called categories third part want combine two types checks set items want allow union type want first item certain type remaining items another type azich ideas around", "d": "7/2014"}, {"body": "another case want accept composite renders example sure covered xhp categories", "d": "7/2014"}, {"body": "jsx react gcc compatible afaik intentionally quote keys meaning nt use quoted strings either way benefit key mangling gcc", "d": "7/2014"}, {"body": "believe react quite closure compatible happily take pull requests fix small issues missed", "d": "7/2014"}, {"body": "actually stopping working today understanding gcc would crush keys value accessed component would work wrong understanding gcc works", "d": "7/2014"}, {"body": "believe possible use react appropriate gcc externs file listing properties though nt currently one ideally could compile react gcc believe wo nt work properly right", "d": "7/2014"}, {"body": "already good one externs file react dom element react properties sufficient talking components created react users example simplecomponent anothercomponent know jsx compiler transform simplecomponent anothercomponent comes trouble gcc compilation produce something like used react externs file simple component render function renaming simplecomponent ba ok gcc rename also simplecomponent reactcreateclass ba reactcreateclass ba x null anothercomponent render funcion reactdomdiv null reactdomspan null thispropsk reactdomspan null thispropsc see names props properties doesnt match isnt way tell gcc pojo passed simpecomponent available anothercomponent nt pair names could solve problem would quoting keys like using props name bracket notation anothercomponent unfortunatelly second control first automated compilation process", "d": "7/2014"}, {"body": "isnt way tell gcc pojo passed simpecomponent available anothercomponent nt pair names impression gcc would always munge property key way appears even two objects unrelated base compiling advanced optimizations selected gives looks like mapping cases", "d": "7/2014"}, {"body": "right case rule bigger amount code project understand gcc right call gcc determine react externs file called third party method doesnt care happening inside nt know object use key aliases acessing", "d": "7/2014"}, {"body": "understanding gcc wo nt munge property keys appear externs file regardless whether specific callsite refers thirdparty library", "d": "7/2014"}, {"body": "suggest list names components app specific externs file true didnt tried solution nt sound like correct way using externs file however im going try", "d": "7/2014"}, {"body": "include externs file react build app js together gcc munge appspecific properties leave ones react cares alone", "d": "7/2014"}, {"body": "earlier already probably found problem key prop named looks gcc recognize standard keyword nt munge object key object munge choose different name prop key quoting neccessary many thanks participation hunt", "d": "7/2014"}, {"body": "seems straight wrong prop name actually probably need proper error message nt see truncated value could nt shown", "d": "7/2014"}, {"body": "haha pending change internally already", "d": "7/2014"}, {"body": "said irc personally kind favor sure really like idea jsx tags working part js syntax special parser state issues see intended occurence text would invalid would quoted etc common occurence really nt think", "d": "7/2014"}, {"body": "perhaps parser could taught understand line comment sortof logically follows currently", "d": "7/2014"}, {"body": "glenjamin nt really understand comments today simply escapes js comments understood simple fix rewritten sake messing output would nice jscomments could used anywhere sounds intuitive", "d": "7/2014"}, {"body": "ah quite meant one could expand fairly consistent usual jsx expansion rules think", "d": "7/2014"}, {"body": "looks quite magic nt think anything suggest whether would consistent entirely different beast comes longer jsx anything closing think actually make sense written assume actually works today perhaps due jsx intricasies would ever want use syntax anyway closing suggesting comes comment actually jsx closing actually part comment well still affects parser seems like odd feature alternatively could make sense positive would common inside comments make practical sense also mess nonjsxaware highlighters sidestepping intuitively seems kind weird valid whereas invalid cc jeffmo opinion", "d": "7/2014"}, {"body": "though process behind usual jsx rules thought treat following js essentially gets extra meaning jsx transform still stops parsing js appears comment", "d": "7/2014"}, {"body": "glenjamin right practice nt basically void entire purpose could nt use line comments even following line occurs nt want stop", "d": "7/2014"}, {"body": "hrm think explaining reasoning well currently produces mental model interprets start javascript means stop javascript suggesting currently errors produce something similar basically line comment currently seems override suggesting nt", "d": "7/2014"}, {"body": "would like see flexible version classset something allows dynamic class names var myclassname bar classsetex foo true myclassname true baz false implementation function classsetex var args arrayprototypeslicecall arguments classes", "d": "7/2014"}, {"body": "twobit free implement version see fit think idea behind classset fixed classnames mangledminified use considerably less space", "d": "7/2014"}, {"body": "quite straightforward support apparently", "d": "7/2014"}, {"body": "state needs shared among multiple children live parent child needs update state done using callbacks parent provides child calls information flow parent child uses props information flow child parent uses callbacks", "d": "7/2014"}, {"body": "thx parent child ok putting special state model", "d": "7/2014"}, {"body": "feel free keep discussing closing bug", "d": "7/2014"}, {"body": "practically actually work understand correctly script wait previous non script load non scripts consider scripts continuing", "d": "7/2014"}, {"body": "also perhaps revert script loading async simply set async flag xhr accordingly way get proper browser behavior slow use async becomes fast right really makes sense jsxscripts since otherwise syncasync executing independently jsjsx overthinking", "d": "7/2014"}, {"body": "perhaps revert script loading async none scripts downloaded page loaded already getting proper browser behavior since never able get real proper behavior l think probably overthinking p honestly super unimportant could support somebody wanted", "d": "7/2014"}, {"body": "well could always", "d": "7/2014"}, {"body": "spicyj oh wow interesting hack sounds kind fragile though may interfere expected lowlevel behavior zpao ah right yeah first question stands expected behavior async wait previous sibling sync script finish right sync scripts nt wait async", "d": "7/2014"}, {"body": "syranide yea think right since nonasync scripts block async scripts would nt reached", "d": "7/2014"}, {"body": "using jsx suppose use instead", "d": "7/2014"}, {"body": "find docs", "d": "7/2014"}, {"body": "thanks update reactjade fix", "d": "7/2014"}, {"body": "sorry confusion hope docs cleared reasoning would linked note part docs", "d": "7/2014"}, {"body": "cool clear reasoning surprised applies jsx well react library would also seem simpler encourage quoted attributes generated code looked like nt suffer problems warning thing mention given warning would expect still output attribute even though recommends renaming htmlfor", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "awesome guys love support see collaborator badges cpojer petehunt yungsters jbonta aside clear win dr brown capacitor fits beautifully think enough store electrostatic charge considered also primary example reactive electronic component would like put together pr docs", "d": "7/2014"}, {"body": "downer flux capacitor sound intuitive sounds like bufferflush batching already people questioning legitimacy flux sincerely nt think would benefit naming obviously tries cute rather descriptive", "d": "7/2014"}, {"body": "think funny point actually pretty fitting idea internet points dansowter agree syranide nt think actually", "d": "7/2014"}, {"body": "fair enough ca nt say nt worth shot", "d": "7/2014"}, {"body": "gets done time want make sure makes readme", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "always empty object since upcoming", "d": "7/2014"}, {"body": "perhaps supposed use mergeinto instead copyproperties", "d": "7/2014"}, {"body": "using mergeinto seems like sane option think want kill copyproperties anyway cc petehunt", "d": "7/2014"}, {"body": "seems fine mergeinto yes way would nice document fact use update function prototyped object really related nt know worth opening issue wonder unset operator way current operators delete attribute tree tried sets undefined remove element", "d": "7/2014"}, {"body": "slorber disagreeing idea generally preferable set rather delete per handles objects", "d": "7/2014"}, {"body": "problem packager react nt yes indeed problem module depends react b depends making depend likely produce even confusing errors even guarantee work think best right keep modules update always possible thirdparty stuff dedupe browserifywhatever use", "d": "7/2014"}, {"body": "well nt really problem packager problem multiple versions different modules depending different versions going get worse pile plugins components depend different version end copies react blessing curse package managers local version scoping versions doubt dedupes different packages incompatible dependency listing nt know going solve nt really sound like helps love hear suggestions nothing jumping holy grail", "d": "7/2014"}, {"body": "make common tools utils accessible via npm package port core things repo currently foreign packages like require ids like pull react clientside bundle currently pull addons client bundle currently dropin substitute dropin substitute directly access transformer stuff probably naive nt see would nt work would solve immediate concerns example would prevented anyhow idea", "d": "7/2014"}, {"body": "greim intuitively question end modules nt part core modules really maintained devs less common sugarspackagers also really weird tools would tied release schedule react using standalone bundles react kind also goes whole idea npmdecentralizing see duping react versions may issue npm edgecases nt sound like invitation bring things react package rather create tool add necessary code react ensures one version react throws error nt", "d": "7/2014"}, {"body": "end maybe enough stuff cover use cases usage patterns fragmented impossible maybe nt right path take goes whole idea npmdecentralizing npm folks seem struggling find general solution problem guess raises question even one true npm way things would offer guidance create tool add necessary code react ensures one version react throws error nt sort failfast mechanism seems acceptable least error happens nose obvious reasons rather obscurely later production", "d": "7/2014"}, {"body": "use cases mine ruby rails developer packaging like would solved browserify users problem people using webpack requirejs owned every single reactrelated tool component would never chance improve draw line somewhere supporting coffeescript nongoal happy let people figure make work going continue changing jsx desugars characters react escapes needed might cases like work messaging ensure downstream developers test things stay date way buildmaintain everything definitely need figure public api parts plan plugins probably reach npm team see thinking know problem talking projects issue goes though think close feel free carry discussion reopen get actionable place", "d": "7/2014"}, {"body": "oh looks like already fixed master", "d": "7/2014"}, {"body": "never mind think pebkac due misnamed file closing embarrassed", "d": "7/2014"}, {"body": "used actually nt look prod also making optimizations around getdefaultprops going go back like thinking though", "d": "7/2014"}, {"body": "general consensus fix unfortunate fact javascript nt static type system similar type annotations unfortunately checked runtime instead statically since fulfill role static types like static types completely separate values two become entangled harder separate systems like typescript", "d": "7/2014"}, {"body": "zpao interesting documented anywhere dev", "d": "7/2014"}, {"body": "nhunzaker yep second paragraph", "d": "7/2014"}, {"body": "additionally nice property allocates new objects version user decided mutate prop hey happens since default props would share reference get mutated", "d": "7/2014"}, {"body": "zpao nt see caching assume referring would exclude possibility since would static values well added default props object freezing proptypes could less empty shells prod like already assume agree decision", "d": "7/2014"}, {"body": "petehunt getdefaultprops called cached master", "d": "7/2014"}, {"body": "fun play impossible support annoying", "d": "7/2014"}, {"body": "sorry annoying", "d": "7/2014"}, {"body": "correct combination indeterminate checked eg indeterminatetrue checkedtrue impossible indeterminatetrue checkedfalse ok edit even explicitly say checkedfalse", "d": "7/2014"}, {"body": "yes key events work js want bind key events window nt currently way closing dupe", "d": "7/2014"}, {"body": "want sort thing wiki complementary tools links able easily bind window keypress events class context expect", "d": "7/2014"}, {"body": "spicyj thanks quick reply key events adding tab index make html element valid js key events rather using window working example hence thinking may possible without full solution browniefed cheers seen plugin happy using plugin workaround nice react way reactevents plugin also keen avoid people falling back bad habbits using react backboneesque way thats probably stylistic thing anything else", "d": "7/2014"}, {"body": "bakesteve setting react effect", "d": "7/2014"}, {"body": "eh sure tried anyways updated jsfiddle prove wrong", "d": "7/2014"}, {"body": "add list events nt bubble assume priority work around manually installing event listener input instead", "d": "7/2014"}, {"body": "syranide correct onpaste event nt bubble updated example demo already using listener obviously add remove listener fine shall close", "d": "7/2014"}, {"body": "brendanmoore keep open probably fixed core nonbubbling events believe nt think remove safe", "d": "7/2014"}, {"body": "going close favor believe would solve issue", "d": "7/2014"}, {"body": "yep perfect figured would nt first issue testing", "d": "7/2014"}, {"body": "thought thought using prevent updates happening form element focused would guess might prevent issues focus lost component gets updated", "d": "7/2014"}, {"body": "volkanunsal complex approach would need still check problems listed still cover manage example since button would component focused component completely separate maybe nt understand use", "d": "7/2014"}, {"body": "suggesting making component rather grabbing reference ref way pass props would checked callback say whether node rerendered", "d": "7/2014"}, {"body": "volkanunsal delaying focus next requestanimationframesettimeout probably safest bet seems even though elements finished rendering attached dom guarantee focus succeeding personally would nt mind adding focus method base domcomponent could incorporate fix tricky decision think since lot features could considered equally necessary nt really supported react external focushelper makes sense keep required features part react core anything optional core", "d": "7/2014"}, {"body": "volkanunsal took bit grok said add properties like component accessed ref example move focus tracking outside react keep data layer ensuring aptly named alternative occurs right place works well enough data layer wants track transient ui state events occur however would like bring basic reason really want able use focus management really handles major actions activation describe basically simply gives focus keyboard event handling node delegation describes used provide means activate child action occurs usually things like dialog opening accordion opening rich text area activating screen change etc ignoring pretty simple ignores request mostly used things like containing focus modal dialog activation works fine well depending want wrap reactdom components flatten components get odd cases delegation needs able delegate child unsure would work without setting component may relate component could setting state child components since ca nt change child components render occurs child props changed every child delegates want sure handle property state transition uniform way mixin seems possible however means nothing component actually cause focus change see property occurs updates means events need callback data layer data layer track current focus preserved really problem delegation present since activation use singleton binds ui state data rather direction unsure people feel feel right tracking transient ui state data layer ignoring works fine well long data layer filter components would valid targets focus means need use result reactrendercomponent fire methods based upon current bit odd works", "d": "7/2014"}, {"body": "chrome ok chrome canary canary", "d": "7/2014"}, {"body": "actually added workarounds make sure disabled actually behave correctly holds disabled inputs seems", "d": "7/2014"}, {"body": "one main motivators recent changes separate component instances descriptors specifying works correctly master work released hopefully soon", "d": "7/2014"}, {"body": "wonderful thanks", "d": "7/2014"}, {"body": "perhaps mentioned moving children like causes unmounted mounted retain state reuse dom preferable move around rather addremove css classes achieve desired effect", "d": "7/2014"}, {"body": "true believe chenglou actually working solution preserve state case", "d": "7/2014"}, {"body": "syranide right believe nt possible case trying use important keep mind", "d": "7/2014"}, {"body": "humbly disagree javascript anything boolean many pass around numbersstringsobjects use booleans also feeling hesitant towards issue encourage good practices whenever programmatic cure basic misunderstandings worms imho warning likely emitted perfectly valid cases", "d": "7/2014"}, {"body": "perhaps strings lucky empty string falsey could quite confusing nt feel strongly figured quick discussion would nt complete waste time", "d": "7/2014"}, {"body": "fun jsfiddle last element ref one recognized element seems", "d": "7/2014"}, {"body": "think error first place though perhaps expensive cc sebmarkbage jordwalke could good bug thedekel chenglou jump know expected behavior", "d": "7/2014"}, {"body": "solution reactowner reactcomponent anyone feeling strongly one side another think looks ugly kind reaches reactowner scope ears edit implemented", "d": "7/2014"}, {"body": "would probably make sense reactowner addcomponentasrefto attachref would sort analogous existing check removecomponentasreffrom", "d": "7/2014"}, {"body": "said pr conflict trying enforce ref uniqueness way way ref hopping supported since public release git blame nt go thoughts keeping validation tossing", "d": "7/2014"}, {"body": "realize could define constant module eg reuse later rather first class api smile", "d": "7/2014"}, {"body": "available perhaps never remember", "d": "7/2014"}, {"body": "syranide thanks tip indeed works closing issue", "d": "7/2014"}, {"body": "talking page easy change invoked invoked something else hoping already says method invoked getinitialstate therefore rely thisstate use thissetstate", "d": "7/2014"}, {"body": "specifically referring", "d": "7/2014"}, {"body": "perhaps install jsx machine internet tar nodemodules folder send", "d": "7/2014"}, {"body": "willing give try novice node npm repository files get saved", "d": "7/2014"}, {"body": "something like mkdir throwaway cd throwaway npm install reacttools tar czvf nodemodulestgz nodemodules tar xzvf nodemodules nodemodulesbinjsx work", "d": "7/2014"}, {"body": "many thanks assumed went somewhere central", "d": "7/2014"}, {"body": "think want tar whole reacttools directory send still depend available uses ruby python package capable transforming jsx js based asset pipelines eg ruby rails make use jsxtransformer ship browser loading js environment eg directly assuming java nashorn doable well really anything else actionable moment going close", "d": "7/2014"}, {"body": "cc zpao", "d": "7/2014"}, {"body": "almost certainly caused sebmarkbage expected behavior sebastian let add test ensure least know change", "d": "7/2014"}, {"body": "statics defined twice constructor convenience constructor previously got two different constructors called would get two different values consistently constructor inline reactfuture proposal get rid convenience constructor around components case would able access statics real constructor", "d": "7/2014"}, {"body": "sebmarkbage would expect yield result perhaps wrongly nt inside static method true second one errors", "d": "7/2014"}, {"body": "refers class convenience constructor aka descriptor factory new work create component instance master able reactcreatedescriptor create descriptor class change introduced previously possible call static methods two different also preparing move descriptor factory createclass consumer jul andreas svensson notifications githubcom wrote sebmarkbage var comp reactcreateclass render function return reactdomspan var descr comp var comp reactcreateclass statics create function return render function return reactdomspan var descr compcreate would expect yield result second one fails reply email directly view github", "d": "7/2014"}, {"body": "sebmarkbage interpreted previous post changing gives trying project gives sure difference add empty object like stays quiet try render get code produces error", "d": "7/2014"}, {"body": "sebmarkbage assume createdescriptor meant used errors createdescriptor cut everything else brevity anyway gives", "d": "7/2014"}, {"body": "yea suppose return instance ca nt rendered accessed unit testing whatever currently also call construct weird always broken basically temporary place holder newer jsx transforms work older versions react accepts descriptor factory type argument newer one landed internally nt synced yet accepts either descriptor factory constructor type argument ca nt pull everything else work next version nt think necessarily need fix since earlier behavior undefined ambiguous unfortunate alternative solution mixins right though curious using pattern could give details seen similar patterns used internally upgraded switched descriptors using instance methods belive", "d": "7/2014"}, {"body": "sebmarkbage pattern pretty much boils code temporary artifact transition crappier frameworks depending fix would fix call sites rather later primarily floating seems weird way create descriptor within static method seems good standing way", "d": "7/2014"}, {"body": "thumbsup also put interested adding note", "d": "7/2014"}, {"body": "zpao sure add note need sign cla", "d": "7/2014"}, {"body": "awesome planning shipping asap sooner better yes need cla signed changes", "d": "7/2014"}, {"body": "fixed", "d": "7/2014"}, {"body": "petehunt want expose reactperf addons time", "d": "7/2014"}, {"body": "oh hey document", "d": "7/2014"}, {"body": "wondering sourcemaps release tell confirming", "d": "7/2014"}, {"body": "would possible add hook packagejson get added package npm right downloadable zip file people using built file directly npm package server side react however one wants avoid using one must use npm package either generate add packaged version app well", "d": "7/2014"}, {"body": "wvl care move discussion going block", "d": "7/2014"}, {"body": "would nice get dispatcher addons well cc jingchen", "d": "7/2014"}, {"body": "vjeux general nt move addons nt touch core separate npmpackages believe plan", "d": "7/2014"}, {"body": "dispatcher unless somebody going actually support checked tests even rather", "d": "7/2014"}, {"body": "static functions autobound class instance breaks code js var buttons reactcreateclass statics buttonsetstype reactproptypesarrayof basic trig prealgebra proptypes buttonsets buttonsbuttonsetstypeisrequired longer defined function sebmarkbage suck rearrange code instead", "d": "7/2014"}, {"body": "hm crap nt rearrange code pattern begin work remove convenience constructors descriptor factories around classes maybe also copy properties function bind", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "think actually broken right sure", "d": "7/2014"}, {"body": "chenglou merge internally status", "d": "7/2014"}, {"body": "going regression deferring sebmarkbage sounds like noop going", "d": "7/2014"}, {"body": "fix could unless frequently used think punt coming soon", "d": "7/2014"}, {"body": "fyi objections pushing ignoring", "d": "7/2014"}, {"body": "shipped", "d": "7/2014"}, {"body": "sent iphone", "d": "7/2014"}, {"body": "nice spicyj also thought react used props state set nt seem case like seen syranide irc failfast strict mode dev would nice freeze props deeply state sure component actually updated place drawback really enable failfast requires user add mode everywhere mutable updated simply ignored without error thrown", "d": "7/2014"}, {"body": "slorber arguable bad practice change state inplace react enforce immutability strongly encourages", "d": "7/2014"}, {"body": "spicyj failing fast default able disable behavior per file basis like suggested syranide", "d": "7/2014"}, {"body": "mean react would rather simplify always use array chenglou btw troubles following var useraction reactcreateclass var userpicturewithcontent reactcreateclass client code gives strange warning bu works fine anyway nt warning modify client code client code one children issue warning idea", "d": "7/2014"}, {"body": "proptypes checks always warn let proceed anyways strict type system children warning precisely js thispropschildren array array whose first item array children whose second element component proper one point say extreme fine sure warning could happen", "d": "7/2014"}, {"body": "thanks chenglou understand maybe would make sense react simplify always inject array components children maybe react could flatten structure case array array something similar may useful validate childrens failfast mode see see", "d": "7/2014"}, {"body": "flatten making child always array warning docs extensively discussed array nt think reconsidering anytime soon unfortunately anyways particular issue resolved closed", "d": "7/2014"}, {"body": "yes thanks ok", "d": "7/2014"}, {"body": "code update come separately", "d": "7/2014"}, {"body": "spicyj actually machinereadable translation would refer react id perfectly appropriate use purpose example utilizes simplicity sake could also appropriately use attribute point element bind given view data something application find useful related contentview data case useful something would react id point tag attributes allow application developers utilize way best suites application purpose browser outside applications search engine crawlers read attempt interpret syranide absolutely agree however still causes issues using focussed css selectors without form identification like id class eg following selector thanks considering improvement zpao totally understand love contribute project someday unfortunately nt believe familiar comfortable enough project yet attempt contribute though playing around things love contribute near future however", "d": "7/2014"}, {"body": "nt think going use tag suggest going close hope eliminate extra spans entirely later version", "d": "7/2014"}, {"body": "add tags manually components spans created", "d": "7/2014"}, {"body": "would also easy build version react swap tags really want could probably quite easily search replace prebuilt files", "d": "7/2014"}, {"body": "indeed however updating newer version react would prove bit tedious though one make personal modifications library already active development thanks considering change though", "d": "7/2014"}, {"body": "figured ca nt decide firefox issue something wrong problem seems pass urls eg firefox chokes pass filename eg examplejs sourcemap usable short term going pull actual filename use inline scripts nt appear problem supporting url theory cc fitzgen firefox devtools team might worth looking end well ca nt remember filed bug", "d": "7/2014"}, {"body": "zpao keep full path drop domainpart perhaps", "d": "7/2014"}, {"body": "syranide good idea changed", "d": "7/2014"}, {"body": "zpao would love minimal test case repro mozillasourcemap using devtools", "d": "7/2014"}, {"body": "file similar issue main reason duplicate error handling isrequired changed example documented led issues code migration separately nice ux error messages stay consistent code looks something like really duplication code createchainabletypecheckerchecktype", "d": "7/2014"}, {"body": "cc zpao blocker would nice could merged", "d": "7/2014"}, {"body": "binaries actually mean prebuilt versions react include web page react nt really binary components", "d": "7/2014"}, {"body": "yep mean", "d": "7/2014"}, {"body": "using project would love able include react way last conversation ended", "d": "7/2014"}, {"body": "yeah one confused minutes seems like behavior syranide described would make sense least warning current behavior desired", "d": "7/2014"}, {"body": "hi marker attributes added thanks cassus stated adding related svg element", "d": "7/2014"}, {"body": "realized need good overview", "d": "7/2014"}, {"body": "add random element attribute person needs approach gotten hand either need support everything nothing alternatively add reasonable set things freeze scraped almost everything counting namespaced attributes came however adds minified build though would crush well closure compiler nt want take size increase right talked separate svg build shipping separately addon", "d": "7/2014"}, {"body": "zpao right full svg support could addon depreciation warning need set inform example reactdomcircle become reactsvgcircle", "d": "7/2014"}, {"body": "reactsvgcircle", "d": "7/2014"}, {"body": "zpao full svg addon sounds like good approach many projects nt need svg nt weigh code projects need nt make sense go halfway support", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "also seen works however would nice document reading doc took assumption supported first spicyj tried update using splice read source understand finally arrays supported indices regular properties edit saw documented", "d": "7/2014"}, {"body": "pedroteixeira agree build similar path mecanism instead using object path", "d": "7/2014"}, {"body": "note change made sebmarkbage made change cache result getdefaultprops across instances ca nt refer current instance proper solution js handlemouseover function e thispropsonmouseover return thispropsonmouseover e default behavior", "d": "7/2014"}, {"body": "nt understand show example involving getdefaultprops amp transferpropsto changed way", "d": "7/2014"}, {"body": "getdefaultprops ca nt access called refers class instead new instance created default props looked shared instead twice way original example aiming using transferpropsto specify handler explicitly rendering", "d": "7/2014"}, {"body": "hmmm ok kind breaking change seen lot people use pattern share properties behaviour components would recommend architecting first code example wanted share highlight mixin two different components could say specify handlers actual components case dry like components sharing behaviour adding new event handler mixin require edit components instead mixin", "d": "7/2014"}, {"body": "breaking change telling mentioned prominently release notes mixins generally preferred way share functionality nt know exact use case might able something similar composition like js var highlight reactcreateclass highlight function unhighlight function render function return var paragraph reactcreateclass render function return hello", "d": "7/2014"}, {"body": "jameslong another idea could also strict config jsx compiler refuse compile jsx files use components without passing declared proptypes would work jsx components however affect react runtime dev prod way like guaranteeing component used typesafe way clients nt know something like would easy suppose could complicated things like", "d": "7/2014"}, {"body": "slorber since set props nt necessarily static ca nt resolved compiletime especially consider must also verify type prop", "d": "7/2014"}, {"body": "yes compilation time best effort try find obvious component misusages really typesafe props static parent string props passed child least verified type passed parent child could issue warning parent proptype child string casting may unsafe", "d": "7/2014"}, {"body": "slorber ca nt guarantee something compiletime still pay full cost runtime dev agree though may potential basic checks static types compiletime also doubtful would really worth nt even bother testing dev would throw error face going prod bigger issues deal end", "d": "7/2014"}, {"body": "like chime say love feature always start best intentions documenting props develop proptypes inevitably get forgotten mind proptypes contractinterface nondocumented props treated violation even error preferable warning mismatch would better currently", "d": "7/2014"}, {"body": "called apply map update probably single element got sorry", "d": "7/2014"}, {"body": "applying function see would make sense though closing since exists", "d": "7/2014"}, {"body": "onchange triggered change true false", "d": "7/2014"}, {"body": "spicyj ca nt add method", "d": "7/2014"}, {"body": "itrelease point handlechange called value already changed want fire onchange event radio button becomes checked", "d": "7/2014"}, {"body": "accessible npm build javascript var reactlink require reactlibreactlink proptypes valuelink reactlinkproptypeslinkisrequired maybe", "d": "7/2014"}, {"body": "perhaps drop addons add put mixin", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "remove default value argument require users pass type link value jgebhardt", "d": "7/2014"}, {"body": "petehunt people could still pass goal make explicit forcing specified", "d": "7/2014"}, {"body": "yeah thinking may saner default sent iphone jul jonas gebhardt notifications githubcom wrote petehunt people could still pass goal make explicit forcing specified reply email directly view github", "d": "7/2014"}, {"body": "general arguments passing props state render function", "d": "7/2014"}, {"body": "ctaggart place anyway help get faster eg issues would need resolved create pull requests", "d": "7/2014"}, {"body": "possibility something less inheritence based seems like something la traits would compositionally focused approach worry makes rubyesque problem clever module ordering order get right combination super calls also means need know overriding method mixin makes mixins less reusable alternative would require class definer resolve conflicts non lifestyle methodsprops provide utility functions making really easy admittedly nt know limitations class syntax current one var comp reactcreateclass", "d": "7/2014"}, {"body": "theporchrat code op based ecmascript proposals although changing day day seems", "d": "7/2014"}, {"body": "syranide class syntax proposals method react language solid approach mixinsmodulestraitswhatever react providing mechanism flattening bunch object literalsprototypes adding derived component prototype sure one mixin however want since component constructor prototype great except destroys interoperability mixins definitely possible mixin system works took goal needed class syntax function returns func object strikes method nt seem keeping language progressing current methods also unreactlike mixins nt inheritence based concept seems odd try push way", "d": "7/2014"}, {"body": "theporchrat showed sebmarkbage would probably exposed react would simple way tied react core likely react wo nt go way classes", "d": "7/2014"}, {"body": "ooo interesting thanks link", "d": "7/2014"}, {"body": "react core opinionated build classes generally prefer composition already possible using components proposal providing feature parity current react classes encouraged pattern native trait features ecmascript language likely similar feature sets jul pm theporchrat notifications githubcom wrote ooo interesting thanks link reply email directly view github", "d": "7/2014"}, {"body": "making syntax less awkward issuing warning default time used unless waiver set reactacceptfullconsequencesofdangerouslysettinginnerhtml true disable warning", "d": "7/2014"}, {"body": "noble thought play well party components sent iphone", "d": "7/2014"}, {"body": "addition point cumbersome name make think time use setting global config option wo nt effect", "d": "7/2014"}, {"body": "old issue btw sure stand right nobody seemed opposed guess really want enlighten people could put warning console first use details dangers pitfalls way people would unlikely miss perhaps would add console spam", "d": "7/2014"}, {"body": "sebmarkbage expressed concern making easier came arrangement could remember", "d": "7/2014"}, {"body": "wrapping object pass result blessed interfaces unblessed interfaces could however also introduce innerhtml takes string would linted facebook would nt allow anyone manual string manipulation without going appropriate security channels", "d": "7/2014"}, {"body": "ah right leave current interface also add innerhtmlstring", "d": "7/2014"}, {"body": "nt see advantage adding innerhtml people invariably use introduce xss holes", "d": "7/2014"}, {"body": "perhaps", "d": "7/2014"}, {"body": "wrong sounds scary", "d": "7/2014"}, {"body": "sounded like wanted different name also namingwise uses quite weird implied props", "d": "7/2014"}, {"body": "question likely related", "d": "7/2014"}, {"body": "also", "d": "7/2014"}, {"body": "able work around changing following grunttasksjsxjs obviously change windowsonly provide possible workaround", "d": "7/2014"}, {"body": "changing", "d": "7/2014"}, {"body": "yes verify worked machine sorry used leftover code executing batch files requires going cmd", "d": "7/2014"}, {"body": "cool put pr unless time jbrantly", "d": "7/2014"}, {"body": "sure thanks help", "d": "7/2014"}, {"body": "also rerequire libraries call tests make sure test completely separate see example jest", "d": "7/2014"}, {"body": "still issue android least samsung galaxy android however changing webkittransition transition order suggested marcins fixes issue", "d": "7/2014"}, {"body": "frikille transitionevent defined undefined browser unprefixed version exists better use general forwardscompatible", "d": "7/2014"}, {"body": "syranide fixed", "d": "7/2014"}, {"body": "clearing old old issues seemed like fixed apparently", "d": "7/2014"}, {"body": "would nice always async callbacks sometimes synchronous tends lead confusing behavior bugs", "d": "7/2014"}, {"body": "tested think might fixed fixed believe idea setstate become always async soon afaik", "d": "7/2014"}, {"body": "nt kind hard know without digging code though always async", "d": "7/2014"}, {"body": "reverted", "d": "7/2014"}, {"body": "issue well using cursor pointer ca nt work several case since set cursor helpzoomin place would nice react include awesome fix", "d": "7/2014"}, {"body": "mentionned documented somwhere", "d": "7/2014"}, {"body": "slorber", "d": "7/2014"}, {"body": "syranide whenever need display information relative current time commonly also want keep current passage time hence likely store age value component state keep date timer rather calculate age rendertime generally think want wedge people place render methods depend component state props much possible componentexternalglobal state little possible preferably thoughts", "d": "7/2014"}, {"body": "steveluscher sounds kind fragile think time ubiquitous enough exported react rendering inside react takes place time frozen subsequent calls returns time frozen time would also added root element next checksum would used initial rendering client reusing dom aside fixing mismatches client server rendering would also prevent edgecase inconsistencies rendering two identical timer components currently show slightly varying times say item could show expired one place expired another timing right would prevent entirely petehunt spontaneous reaction", "d": "7/2014"}, {"body": "syranide intrigued idea frozen renderpass timestamp idea let explore might certainly help catch edgecases mentioned useful sync clientserver rendering specific example age aside general point wanted make depending external state like time render methods means renders wo nt behave like pure functions pure renders bit easier reason optimize test respect storing agedisplayage state like able surgically update display age using timer lets vary update frequency commented x minutes ago gt set timer go result minutes beats call whole component calculate fresh relative timestamp", "d": "7/2014"}, {"body": "sounds like super confusing one component uses reactnow another one messes uses datenow would prefer monkeypatched datenow mathrandom friends log friendly warning called reconcile", "d": "7/2014"}, {"body": "petehunt see point unless mistaken would confusingbroken component uses sure understand intention monkeypatching datenow mathrandom warn user agree part nt time ubiquitous enough provide utility rather everyone invent especially since far know way user know freeze thaw time appropriately react", "d": "7/2014"}, {"body": "think monkey patch add warning good idea never want call nonpure function inside personally would thread specific moment possibly date instance props appreciate many find cumbersome people maybe something based context would enough", "d": "7/2014"}, {"body": "samwgoldman propagating time hierarchy make sense theoretically every component instance update every microsecond time ubiqutious ui goes back time time would still continue forward simply belong props imho", "d": "7/2014"}, {"body": "syranide opinion surprises considering react frames components functions props state official docs even say render method pure depending current time inherently impure also nt agree component instances update every microsecond would want could see component needed update second rendering subsecond worst nt problem rerender new moment props second", "d": "7/2014"}, {"body": "also nt agree component instances update every microsecond would want could see component needed update second rendering subsecond worst nt problem rerender new moment props second making precision timer animations would want update every screen refresh would would consider unacceptable entire app rerender settle significantly less optimal timer precision full rerender reasonably large app take significantly long time simply unacceptable rerender entire app also object idea chosing inferior implementation accommodate interpretation someone subjective recommendation fact make significant sacrifices fidelity valuetime accommodate propagating hierarchy means flawed see merits sending props root convinced endall beall treating components isolated instances access circumstancially relevant data fantastic many reasons entail transport irrelevant data perspective component inherently fantastic food thought want show image following put prop url resource identifier impure b raw image data pure", "d": "7/2014"}, {"body": "curious hear others think seem fundamental disagreement regarding food thought disagree passing url impure sure resource end url may changed nothing purity pure output must depend input long nt actually dereference url produce output still pure", "d": "7/2014"}, {"body": "progress bringing doctypes react", "d": "7/2014"}, {"body": "balanceiskey react ca nt mount higher clientside doubt much pressure get done sure understand issue ca nt prepend fixed doctype react output", "d": "7/2014"}, {"body": "syranide prepending doctype feels touch hacky said right probably huge issue", "d": "7/2014"}, {"body": "anyone interested created demo using force layout rendering react using quite completely new react might better ways example using react actually visibly slower using manipulate dom directly used slashdotdash excellent examples template", "d": "7/2014"}, {"body": "jmstewart quick thought probably already aware react example creating complex hierarchy objects used determine required dom mutations tick whereas example operation already almost optimal directly mutates dom via existing selection almost optimal typical force layout simulation almost nodes actually require update tick mutate state existing react components instead starting scratch time expect improved performance", "d": "7/2014"}, {"body": "pretty much worst case react mutating entire dom every tick nt gain anything diffing personally find react example easier reason even simple example like hundreds nodes updating frame may find better dom manipulations hand", "d": "7/2014"}, {"body": "spicyj mind explaining worst case react slower using predefined selections direct dom manipulation could improved immutable data structures andor raf batching started building app lots charts transitioning every action similar dcjs basically worstcase scenario", "d": "7/2014"}, {"body": "wondering happening sourcemap support", "d": "7/2014"}, {"body": "still open nt merged yet", "d": "7/2014"}, {"body": "spicyj thanks pointing missed wondering shooting release", "d": "7/2014"}, {"body": "probably sorry looks like still several unaddressed comments", "d": "7/2014"}, {"body": "spicyj thanks letting know get better understanding things done different looks like go besides support inline vs external files etc", "d": "7/2014"}, {"body": "one option produce source map files bit complicated needs integrate properly file watching system currently nt expect multiple outputs single input added support returning source map used node library nt change command line tool", "d": "7/2014"}, {"body": "spicyj ok using uses comes able inline source maps putting aside baked option external source maps carried would see different unit work trying put pieces together head", "d": "7/2014"}, {"body": "familiar gulpreact particular possible support source maps new version", "d": "7/2014"}, {"body": "question baked option external source maps carried would see different unit work", "d": "7/2014"}, {"body": "would probably make sense separate pr probably nt want transform api actual file writing instead need return source map somehow perhaps object containing transformed source source map since would nt able return single string", "d": "7/2014"}, {"body": "eteeselink could get using arrow functions", "d": "7/2014"}, {"body": "wow hidden feature thanks", "d": "7/2014"}, {"body": "best way integrate jsx typescript create typecript compiler fork support natively jsx syntax started work repo wait typescript internal stabilize resuming work fact think jsx easiest part typescript type system incompatible react multiple reason private type see discussion mixins make working react typescript painful experience yes planned support might help wo nt resolve every problems", "d": "7/2014"}, {"body": "fdecampredon mixins handy tool fundamental part react free substitute anything like nothing nt good fit typescript ofc could potentially conflict thirdparty helpers choose use assuming would nt work box regardless", "d": "7/2014"}, {"body": "syranide yes agree however quite used every third party library anyway main problem private type see codeplex discussion pointed", "d": "7/2014"}, {"body": "hey guys ts developer guy wrote current parser nt read entire thread however looking examples asking seems like would easy add fork typescript parser one willing algorithm would pretty darn simple first prescan file looking xml close tag candidates ie regexp would match strings like allowing spaces things table mapping potential end tags locations file need augment scanner parser parser would updated hit potential opentag would need speculatively parse ahead see actually xml cast endtag table would helpful would allow even decide worthwhile speculative parse ie saw never seen doc would point speculatively parsing hand tag later would worth going forward never find end tag rewind parsing go ahead parsing entity type assertion expression approach similar one already need take today deal ambiguity type assertion expressions generic arrow function expressions speculative lookahead necessary already done stretch augment support xml little trick get end tags ensure nt speculatively parse every time time going fruitful", "d": "7/2014"}, {"body": "documented somewhere", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "oh thanks renamed guess", "d": "7/2014"}, {"body": "sorry clarify onlychild internal name reactchildrenonly public one", "d": "7/2014"}, {"body": "hey guys something helps today still case jsx", "d": "7/2014"}, {"body": "also got bit problem reactcsstransitiongroup gets unmounted middle transition prints warning message console transition happened would expect reactcsstransitiongroup unmounted would consider active animations canceled would show warning message", "d": "7/2014"}, {"body": "meh", "d": "7/2014"}, {"body": "think documentation cssgroup pretty good think lower level transition group additions would really help example fact callbacks asynchronous wo nt work etc", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "nt think right solution problem exists much flexible simple solutions would also applicable events click", "d": "7/2014"}, {"body": "yes yes ftw future", "d": "7/2014"}, {"body": "maybe help grunt server compiles haml html puts folder usage relies compiled html files use approach angular project may help react", "d": "7/2014"}, {"body": "since react nt allow specify dom element since attribute works conjunction attribute make work", "d": "7/2014"}, {"body": "react definitely allows specify element", "d": "7/2014"}, {"body": "ahh mistake error code well", "d": "7/2014"}, {"body": "ever track docsets", "d": "7/2014"}, {"body": "nt think annotated source helpful thing could done pretty good set comments code right public api small lot code makes work backbone underscore code file smaller expose lot code public apis", "d": "7/2014"}, {"body": "year ago pretty sure sync setstate happening going direction workaround fine", "d": "7/2014"}, {"body": "syranide definitely option consider imo whatever worth p would certainly contribute making much less ambiguous esoteric new users", "d": "7/2014"}, {"body": "syranide said referring using standard properties react js properties might good idea especially users nt familiar reactjs use something like properties suffixed reactspecific attributes sure big change talking though could getting much larger discussion regarding react js essentially works core introduces developers certainly something trying instigate", "d": "7/2014"}, {"body": "swivelgames sure understand intention rather align coming would translate directly attributes node would yield", "d": "7/2014"}, {"body": "oh see saying apologize misunderstood", "d": "7/2014"}, {"body": "anyone paying attention improved cursor example consider idiomatic double setstate problem uses implement shouldcomponentupdate", "d": "7/2014"}, {"body": "tried new version seems fix version missing something", "d": "7/2014"}, {"body": "nsakhan supposed work right trying return multiple components root return one edit oh wait docblock need add top files", "d": "7/2014"}]