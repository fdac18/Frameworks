[{"title": "question determine parentchild relationship react host amp composite components", "body": "want request feature report bug feature current behavior nt seem anyway able access react tree current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior way able see elements nested parentchild relationship versions react browser os affected issue work previous versions react sure right place inquire sort functionalityfeature appreciate point right direction need able know child nodes associated parents able reference example js hello world one two see inherent tree structure components composite host like able know minimum nested throughout entire react application tried naive solution following js hello world one two obviously optimal approach user would define entire tree structure addition order components mount dom linear would hard reconstruct tree able perform logic relationship one another ideas go thank time assistance", "num": "9563", "d": "4/2017"}, {"title": "controlled input allows dot", "body": "want request feature report bug bug current behavior react allows dot controlled input nt allow changing value value set prop number string issue present current behavior bug please provide steps reproduce possible minimal demo problem via similar template example first input allows dot even though code nt allow changes second input nt allow dot expected behavior dot nt allowed versions react browser os affected issue work previous versions react version chrome firefox see jsfiddle example", "num": "9561", "d": "4/2017"}, {"title": "warn purecomponent renders impure ones children", "body": "want request feature report bug feature current behavior purecomponent renders impure one child warning console devtool expected behavior could better get warning message cases may related since react disallow purecomponent custom implement pure component customized efficient method must inherit base class add property order prevent warning message appear versions react browser os affected issue work previous versions react", "num": "9559", "d": "4/2017"}, {"title": "provide better error error objects valid react child found object keys", "body": "want request feature report bug bug current behavior currently mistake pass js object jsx instead string get following error error objects valid react child found object keys current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior show better error helps solve issue like solution versions react browser os affected issue work previous versions react", "num": "9552", "d": "4/2017"}, {"title": "using node module react native", "body": "mentioned modules pure javascript run within nodejsiojs perfectly ok run reactnative need resize crop image react native trying nodejs sharp image processing library think work reactnative pure node working io things installing throws errors fix whats missing also stackoverflow", "num": "9551", "d": "4/2017"}, {"title": "react examples accessible screen reader", "body": "hello would like start using react concerned examples seeing would like use react interact lots data screen reader user facebook put lots articles react accessibility great strangely examples read react developers put accessible tutorial several problems first codepen accessible seeing examples really difficult second huge number buttons text tictactoe game third seem use table remember correctly tictactoe board square set table boxes would really help making beautiful layout screen reader users datatable table think table div elements css says table make accessible one needs use table tag th tag tr tag td tag fantastic article make html tables really scary developers looking examples learning code learning code inaccessible manor mean learn use react official tutorial developer goes official tutorial exposed app supposed model apps look like apps look like tutorial basically able use app made react best practices really confused react actual rendering rendered elements perfect html accessibility use api fact accessibility api makes things difficult everyone adding complexity something super easy best way making screen reader accessible apps using html tags including div span react done amazing thing controlling html rendering needs done make renderer output proper html accessible facebook developers writing accessible apps default think reinforcement good coding practices could warning button missing text opening closing tags could warning images alt text could warning links text opening closing tags could app throw error input boxes coupled label element could errors warnings please given react app follow good coding practices would help react team make accessible examples help insure accessible web screen reader users world please let know help thank", "num": "9549", "d": "4/2017"}, {"title": "hostcontainerinfo always null edge", "body": "react application working perfectly fine browsers except react application wo nt even load reactdomlibreactdomcomponentjs line hostcontainerinfo always null chrome firefox always gets proper value hostcontainerinfo error getting versions used reactreactdom tried downgrading react upgrading problem still exists guidance approach problem would helpful thanks", "num": "9546", "d": "4/2017"}, {"title": "react app compatible facebook browser", "body": "shared react site facebook link work facebook mobile app works nonfacebook browser though safari chrome etc error says ca nt connect link working proper og meta tags og url og title og image etc something wrong site configuration ideas thanks lot knowledgeable group would appreciate insight", "num": "9543", "d": "4/2017"}, {"title": "marking external rollup nt include unused modules", "body": "see details", "num": "9542", "d": "4/2017"}, {"title": "demand", "body": "want request feature report bug bug current behavior react warns add even child options also enough current behavior bug please provide steps reproduce possible minimal demo problem expected behavior following warning warning failed form proptype provided prop form field without handler render readonly field field mutable use otherwise set either check render method versions react browser os affected issue work previous versions react observed assuming versions react affected", "num": "9541", "d": "4/2017"}, {"title": "ca nt contribute react windows", "body": "want request feature report bug sure maybe question current behavior fork lasted master branch react execute root directorybut get errors webstormworkspacereact npm run build reactbuild build webstormworkspacereact npm run versioncheck amp amp node scriptsrollupbuildjs reactbuild build webstormworkspacereact npm run versioncheck amp amp node scriptsrollupbuildjs reactbuild versioncheck webstormworkspacereact node scriptstasksversioncheckjs starting reactdevelopmentjs umddev parseerror undefined unterminated string constant file webstormworkspacereactsrcisomorphicreactjs line column undefined npm err windowsnt npm err argv nodejsnodeexe nodejsnodemodulesnpmbinnpmclijs run build npm err node npm err npm npm err code elifecycle npm err reactbuild build npm err exit status npm err npm err failed reactbuild build script npm run versioncheck amp amp node scriptsrollupbuildjs npm err make sure latest version nodejs npm installed npm err likely problem reactbuild package npm err npm npm err tell author fails system npm err npm run versioncheck amp amp node scriptsrollupbuildjs npm err get information open issue project npm err npm bugs reactbuild npm err nt available get info via npm err npm owner ls reactbuild npm err likely additional logging output npm err please include following file support request npm err webstormworkspacereactnpmdebuglog current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior build successfully versions react browser os affected issue work previous versions react windowsi sure whether fine previous versions react first build", "num": "9540", "d": "4/2017"}, {"title": "nodehaste status", "body": "codebase overview still reference haste however see elsewhere unsupportedarchived several months already migrated commonjs es modules like pick open issue wanted validate first thanks", "num": "9535", "d": "4/2017"}, {"title": "child component render sync", "body": "wrote tree component parent node child node array parent node update child node shouldcomponentupdate compute sync cost total way compute shouldcomponentupdate asyc avoid waste time", "num": "9533", "d": "4/2017"}, {"title": "doc state lifecycle", "body": "doc state lifecycle class class clock extends reactcomponent constructor props super props thisstate date new date componentdidmount thistimerid setinterval gt thistick componentwillunmount clearinterval thistimerid tick thissetstate date new date render return hello world thisstatedatetolocaletimestring reactdomrender documentgetelementbyid root question since setstate asynch ca nt happen calls setstate inside tick function get pending state example three seconds update wo nt applied state case could get three seconds missing ui nt applied delay wrong", "num": "9529", "d": "4/2017"}, {"title": "add unreleased section changelog", "body": "let make releases bit fastereasier keeping changelog updated incrementally whoever release new react version must manually read recent git history write changelog update incrementally add changelog unreleased header make prs release new version updating unreleased new version number adding blank section unreleased see info idea", "num": "9527", "d": "4/2017"}, {"title": "total time mean console log total time less sum time print printinclude function", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "9524", "d": "4/2017"}, {"title": "wrong repo", "body": "wrong repo", "num": "9522", "d": "4/2017"}, {"title": "question close reactjs widget outside click", "body": "search widget website standalone react component user puts script site box rendered see search performed eg test results shown right input box want close search results user clicks outside widget anywhere else page nt know achieve react component nt know anything rest page also hide div jquery right ruin react virtual dom mechanism", "num": "9521", "d": "4/2017"}, {"title": "provide different value keyword onchange event handler event handlers like onblur onclick etc", "body": "react binds keyword event handler functions null explicitly noticed calls function associated onchange event undefined events onclick onblur value bound null usual extra call make undefined associated handler function could reason bug although null undefined use developer bind explicitly link code jsfiddle", "num": "9520", "d": "4/2017"}, {"title": "remove shouldcomponentupdate property functional components", "body": "want request feature report bug feature current behavior shouldcomponentupdate functional components feature already implemented fiber alpha release comment written removed final release current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior allow optional shouldcomponentupdate property functional component versions react browser os affected issue react work previous versions react today planning add shouldcomponentupdate property functional component open issue github adding shouldcomponentupdate send patch saw shouldcomponentupdate already implemented functional components comment written code todo disable release since part public api use testing compare relative overhead classes typeof fnshouldcomponentupdate function amp amp fnshouldcomponentupdate memoizedprops nextprops think useful feature part public api nt need use class based pure component idea going final release", "num": "9513", "d": "4/2017"}, {"title": "updaterenderedcomponent error rendered child components repeatedly throw", "body": "apologies advance already reported best thoroughly search existing issues posting could find something specific happy moveclose needed hopefully nuanced issue render method threw react blew mostly encountered want request feature report bug bug minimal test cases uncaught typeerror read property currentelement null uncaught typeerror read property getnativenode null current behavior child component throws method attempts rendered react throws uncaught error inside internal method depending context error either let say problematic component renders throws runtime error parent component renders first render see error threw rendering expected userland error attempt render parent therefore render get different exception see react one referring difference exceptions happens component render happens component swapped second render another component also happens throw rendering latter likely move loaded error handler view error view may unfortunately also throw would render broken twice well consider something simple js class apploaded extends reactcomponent render throw new error throw supposed gracefully render error happens throw class gracefulerror extends reactcomponent render throw new error dang also throw class main extends reactcomponent constructor props ctx super props ctx thisstate loaded false error null componentdidmount async work note living inside promise vital reproduction originally caused go path discovering issue see minimal test cases examples wo promises return promiseresolve async work gt thissetstate loaded true yes really valid scenarios code like exist demonstrate issue see explanations catch err gt thissetstate error true render thisstateerror return thisstateloaded return return loading led discovery bug promise handling technically incorrect since really meant use nt implicitly catch synchronous render errors caused call callback however believe valid scenarios occurs manually handling render error recovering component rendered place also unfortunately throws consequently leads untraceable error expected behavior react blow internaluntraceable error second render even sure possible minimum like better understand occurs versions react browser os affected issue work previous versions react browser google chrome version react versions tested evidence works versions posted worked previous version knowledge thank advance help", "num": "9511", "d": "4/2017"}, {"title": "debug issue reactnative android app crash befor landing activity", "body": "using reactnativecli reactnative two issues reactnative app launch work properly befor landing screen paypal app got crash try debug app give error", "num": "9509", "d": "4/2017"}, {"title": "possible alias routes reactrouter like way done vuejs", "body": "want request feature alias routes example const router new vuerouter routes path component alias b vuejs say path application understands internally one link components using browser perspective one hit b resolves internally asked react", "num": "9507", "d": "4/2017"}, {"title": "rfc add traversal utility reacttestutils matching totree shape", "body": "problem supports new api totree returns easily traversed tree representing internal state instance rendered nodes existing solution traverses root lets provide test function call reduce tree based predicate predicate function passed public instance node issue makes predicate function polymorphic requires every consuming utility check passed component instance dom node solution propose implement new api similar calls predicate function result calling internal instance instead public instance would mean predicate function always called data structure tree node thirdparty traversal utilities shared since would operate tree structure could actually assert functional components currently instance call predicate new api could pure traversal utility leaving consumer accumulate results implementation brief review looks like could export function currently inlined provide way change cc gaearon bvaughn lelandrichardson", "num": "9505", "d": "4/2017"}, {"title": "reacttestutils event dispatched workinprogress statenode set", "body": "following using latest alpha js const reacttestutils require reactdomtestutils const foo gt reactcreateelement div null reactcreateelement img src foojpg reacttestutilsrenderintodocument reactcreateelement foo following error thrown issue completework calls finalizeinitialchildren sets statenode eventually calls image tag sets property causes jsdom trigger event top level event listener grabs instance eventually triggers error likely used frequently jsdom think important support something addressed fiber", "num": "9504", "d": "4/2017"}, {"title": "keys working element loses css transition", "body": "swap position two react elements positioned css transition triggered elements rendered order change order render position swap still renders css transition triggered looks like react deleting dom element recreating even react keys set called simple jsfiddle problem", "num": "9501", "d": "4/2017"}, {"title": "yarn prettier runs long command os windows", "body": "cli return error long command problem windows os checked windows cli cmd", "num": "9500", "d": "4/2017"}, {"title": "documentaddeventlistener callback update component", "body": "may bug simple reactapp inside component however callback event listener update component even calling inside confirm indeed callback fired update component bug would work around", "num": "9498", "d": "4/2017"}, {"title": "class app extends reactcomponent render return hello thispropsname reactdomrender documentgetelementbyid container", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "9496", "d": "4/2017"}, {"title": "props register name", "body": "fetchdata let data method post body jsonstringify token languageid headers accept applicationjson contenttype applicationjson fetch data reactdemoreactsupplementlist thissetstate datasource thisstatedatasourceclonewithrows reactdemo loaded true render return back gt cart gt click reactdemoquantity appears error msg like", "num": "9492", "d": "4/2017"}, {"title": "feature request dangerouslysetinnerhtml return value", "body": "fully thought yet hoping feedback whether viable breaks many assumptions goal create escape hatch would support rendering conditional comments alternative method web components unknown probably bad ideas something along lines reactdomserverrendertostring lte ie gt lt endif lt dangerouscomment gt first example one interested point time benefit could work dom server renderer without userland hacks like ref replacement client believe couple initial problems see may may solvableavoidable slight tweaks returning arbitrary object supported unmounting work alternative proposal introduce new domrenderer primitive follow similar approach clearly indicating caveats come rendering comments alternative solution solves conditional comment issue", "num": "9483", "d": "4/2017"}, {"title": "change github issue labeling show issues already claimed", "body": "issue react workflow issue github issue tracking workflow example plenty issues labeled looking issues many already claimed someone work many cases pr already submitted digging half dozen issues like one tends give would helpful able see issues still truly looking contributors", "num": "9482", "d": "4/2017"}, {"title": "calling function another component", "body": "hi need call method component another component code need call toggle method different component onclick tried finding solution successful suggestions thank js class extends reactcomponent constructor super render const toggle gt return thissetstate", "num": "9481", "d": "4/2017"}, {"title": "resolve defaultprops reactcreateelement", "body": "hi want request feature report bug feature request guess current behavior currently component resolved super early called makes shallow rendering purposes snapshot tests see problematic component appear snapshots components use component makes testing fragile every change affect tests component currently affect many tests example component uses without props would expect snapshot getting expected behavior resolve defaultprops later stage actually needed snapshots appear actually passed props appreciate feedback thoughts workarounds possible alternative solutions great day everyone", "num": "9480", "d": "4/2017"}, {"title": "prettyprint error react website", "body": "noticed since switched babel compile error ugly make mistake interactive examples fix preserve newlines easy fix need follow instructions folder get running figure fix send pr please comment plan work two people work thing update tsriram looking", "num": "9479", "d": "4/2017"}, {"title": "reordering arrays proper keys triggers rerender dom", "body": "hi ran across weird behavior implementing autoplaying video recent project video part array modules array reordered video would stop safari mac rendered eventually able reproduce resetting behaviour consistently browsers css animations transitions simple example shows issue quite well numbers animation runs animates element right back see page loads animation never replayed unless completely misunderstood something number also set key buttons reorders array clicking resets animation clicking resets animation happening expect behaviour never reset animation otherwise cause browser remove element insert new one pointers chrome dom inspector dragging one element node reset animation changing items react component logging unmount proves unmounting seems outside component lifecycle first encountered issue react fiddle using thanks reading looking forward hear thoughts learn something ps amazed every browser besides safari able continue video behaviour suspect something safari using quicktime", "num": "9478", "d": "4/2017"}, {"title": "implement setting unknown attributes", "body": "currently warning unknown properties dom example render going see warning react actually turn dom people wanted support custom attributes since forever actually warning whole release think good time flip behavior set unknown attributes dom instead skipping goal would actually see dom one caveat still nt updated fb callsites fix warning ideally want stay synced open source version react nt want react delayed want delaying change react think bite bullet introduce internal feature flag differ fb builds enable new behavior open source version time react finish updating code remove conditional code path think anybody team time work right love community contribution requirements see introduce new feature flag something like set keep warning unknown dom props enable make sure tests still cover case override feature flag existing tests concerning feature flags add new behavior falling back unknown properties rather skipping like add tests tests need touch feature flag since new default behavior make sure works svg html make sure fiber tests pass create pr instructions running might affect server rendering test suite previously added aickin might need change tests verify new behavior fine verify new behavior flag set since use server rendering good point syranide still warn known attributes miscapitalized fine different warning message one behind flag send pr please let know like take could turn little complicated lot guidance us probably coach completely new contributor task sent pr two react able update nhunzaker already started pr back might able rebase let discuss plan specifics", "num": "9477", "d": "4/2017"}, {"title": "seb deprecation wishlist umbrella", "body": "list breaking changes like see think strictly necessary features often replaced apis existence makes implementations constrained even used list meant anything planning actively drop point add things think shallow freeze object make property nonconfigurablenonwritable first call enables inliningresolution defaults statically treat separate namespace jsx meaning objects spread onto jsx nt transfer enables inlining props object even spread type unknown eg drop support string refs drop support slower fiber requires tree materializedstatefulintrospectable arbitrary timesthreads even know ever get called less automatic cleanup could possibly alternative api works like refs however ref forwarding probably solves legit use cases better make private ca nt introspected like bound functionsclosures makes optimizations like automatic making components asynchronoussynchronous safe inlining components several levels deep", "num": "9475", "d": "4/2017"}, {"title": "react multi threading issues nashorn", "body": "want request feature report bug bug sure react current behavior using react nashorn engine jdk request threads per second throws errors saying error error transactioncloseall close transaction none open reactdomfbjslibinvariantjs error error transactionperform initialize transaction already outstanding transaction reactdomfbjslibinvariantjs current behavior bug please provide steps reproduce possible minimal demo problem via similar template sure bug expected behavior requests fails server side rendering versions react browser os affected issue work previous versions react tried amp basically server ride rendering fails multiple thread scenario java attached exception trace", "num": "9470", "d": "4/2017"}, {"title": "feature better warningerror message attempting require export", "body": "want request feature report bug feature current behavior converted old component however forgot change including component received following error source expected behavior love see helpful error message possible error provided line super helpful amp would awesome replicate likely forgot export component file defined versions react browser os affected issue work previous versions react react tested chrome mac", "num": "9469", "d": "4/2017"}, {"title": "render object custom tostring", "body": "implementing library would like render object custom tostring like got error uncaught error objects valid react child found xxx meant render collection children use array instead wrap object using createfragment object react addons check render method invariant anyone know method", "num": "9468", "d": "4/2017"}, {"title": "add proptypes docs back", "body": "proptypes doc live confusing still react object inaccessible website search table contents let either reinstantiate move fully standalone repo also confusing deprecating createclass still lives docs react without whereas moving proptypes gone docs", "num": "9467", "d": "4/2017"}, {"title": "supporting without warnings", "body": "coming twitters behest gaearon meant discussion really counts breaking change interpret semver instead want share usecase situation hasis causing pain using react situation app stuck unknown dom prop warning yes old yes upgrade nt always time bandwidth business case spend time quieting warnings everyone updating libraries apps use instead problem nt work get nt call proptypes warnings two issues perspective situation app author options chose warning want flooding console unknown prop nt call pts libraries nt considering change major bump reasonable feature patch updates getting rolled fix avoid warnings need pin react component libraries miss bug fixes deal warnaggedon bandwidth upgrade everything react latest library maintainer covered length pressure fix deprecation warnings libraries immediately real stressful case upgrade path super easy thanks codemod release without realizing though actually upped minimal required peer library since anything gt warn forever tough spot swap dep breaking change changing minimal react version required feels like one even nt know hard problem tho think reasonable rule thumb might library using public apis able support entire major version react without unfixable deprecation warnings react major versions happened faster introduce warnings major bumps remove next major bump reactbootstrap annoying impatient strategy worked well users system feels fair one gets new warnings introduced accidentally fresh npm install thanks ya overall warnings great always appreciated much care time react takes tell going need fix", "num": "9466", "d": "4/2017"}, {"title": "reactfiber officially released", "body": "want start new project poc month choice frameworks chose react building application plan officially releasing reactfiber dont want doomed", "num": "9463", "d": "4/2017"}, {"title": "default props set multiple inheritance", "body": "belongs somewhere else like babel issues close repost want request feature report bug possible bug current behavior extending class extends default props set ie causing party components throw errors case made using specific issue one props set default object error thrown setting prop manually empty object fixes error link line default props set javascript import react react import select reactselect import tethercomponent reacttether select component created reactcreateclass export class tetherselect extends select also tried without expected behavior default props set versions react browser os affected issue work previous versions react tested react effects ie lt would ideally working ie", "num": "9460", "d": "4/2017"}, {"title": "react proptypes warnings", "body": "hey getting errors migrating react chance add indication error comes file name maybe cleaned entire project reactproptypes use proptype validators thanks", "num": "9450", "d": "4/2017"}, {"title": "audio src attribute updates recognized", "body": "want request feature report bug bug searched issues could nt find anything discussing using tags within tags think browser problem react problem updates dom fine thought discussion solutionsnext steps current behavior source example audio example browser recognising changes react makes prop change prop directly tag browser rerendersresets audio tag expected expected behavior source example match behaviour audio example happens browsers", "num": "9447", "d": "4/2017"}, {"title": "show warning value provided checkbox input", "body": "want request feature report bug feature current behavior checkbox input prop likely ignored expected behavior think throw warning user provides instead", "num": "9446", "d": "4/2017"}, {"title": "tag update docs", "body": "looks like git tags missed followup releases website still says latest case things happen days let handle", "num": "9443", "d": "4/2017"}, {"title": "spitball help tutorial", "body": "talking new react user irc trouble understanding docs think using docs good idea giving reader ability understand code concept maybe take text babel guide modify bit fit surrounding content could done across site important tutorial", "num": "9440", "d": "4/2017"}, {"title": "clear setstate case works", "body": "docs nt make following clear imagine thissetstate thissetstate prevstate props gt consolelog prevstatecounter thissetstate thissetstate prevstate props gt consolelog prevstatecounter output also case output", "num": "9439", "d": "4/2017"}, {"title": "change rendered html component outside component", "body": "method override rendered html component outside component class", "num": "9438", "d": "4/2017"}, {"title": "beginner guide exploring source code", "body": "using react want able contribute project ca nt seem figure start file read first etc great could incorporate beginner guide right issue could later sent docs special section docs", "num": "9430", "d": "4/2017"}, {"title": "server use function rendertostring images link changedhow resolve", "body": "use server rendering output string image befor link changed hash link source client source js import logoenblack distimgtextlogoblackpng html string different hope someone problem already resolved tell resolve bug thanks", "num": "9428", "d": "4/2017"}, {"title": "docs new tabs installation page nt work link", "body": "opening link displays try react tab", "num": "9421", "d": "4/2017"}, {"title": "please stay proptypes lib", "body": "subj vary many packages use many dependencies create symlink lib proptypes package", "num": "9418", "d": "4/2017"}, {"title": "event plugins names mungled closure compiler advanced optimizations", "body": "want request feature report bug bug current behavior react compiled closure compiler advanced optimizations names injected event plugins mungled current behavior bug please provide steps reproduce possible minimal demo problem via similar template compile react closure compiler directly npm expected behavior names injected event plugins mungled versions react browser os affected issue work previous versions react react nt work previous versions react closure compiler renames object properties unless strings explicitly happens way event plugins injected later used", "num": "9417", "d": "4/2017"}, {"title": "releases changelogs andor tags patches", "body": "currently see releases github changelog entries tags major minor version bumps curious developer also like see changes patch versions npm nt know see", "num": "9413", "d": "4/2017"}, {"title": "make context formal find alternative", "body": "moving react surprised zero change context remains experimental possibly break future libraries like reactredux reactrouter heavily depends using context experimental shouldcompomentupdate purecomponent check context causes extra work done make reactrouter working reactredux like wrap every component withrouter map context props beautiful formally accept context solution let api take consideration find better solution next version react", "num": "9411", "d": "4/2017"}, {"title": "get ci passing branch", "body": "important get docs updated", "num": "9410", "d": "4/2017"}, {"title": "comments reactjs", "body": "use many way comments code js file run comment code website still see comments code show code like text see comment website", "num": "9405", "d": "4/2017"}, {"title": "number input always left pad though parsefloat value onchange", "body": "want request feature report bug bug current behavior number input defalut value onchange function parse value float avoid invalid input always get left pad input ui previouse version code works current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior left pad versions react browser os affected issue work previous versions react react browser os works", "num": "9402", "d": "4/2017"}, {"title": "infinite loop dispatching event event listener", "body": "want request feature report bug bug current behavior normally event dispatched place fakenode created event attached node event dispatched removed happen synchronously goes event listener eventlistener removed fakenode second event dispatched within event listener get stuck infinite loop time dispatch called event listeners get called first one dispatches second event goes specifically bubblestrue though nt fully able understand current behavior bug please provide steps reproduce possible minimal demo problem via similar template click hello world look console expected behavior infinite loop versions react browser os affected issue work previous versions react sure previous versions version use repro jsfiddle problem well", "num": "9400", "d": "4/2017"}, {"title": "react umbrella", "body": "update shipped amp still ongoing x fixes release modules x followup work fixes x create build step umd builds addons x update deprecation proptypes library check addons deprecation warnings release new versions transitiongroup deprecation warning let add forgot make sure wording says moved since moving happened note point specific version separate module make futureproof api changes transition group modules fixed x update addon versions master branches x fix fixed x merge x x release new versions addons x cherrypick changes related items document process deprecating api react moved x remove junk code proptypes prod build nt use bundlecollapser ships method names eg fbjslibinvariant fixable add p bundlecollapserplugin browserify call additionally seems junk invariant code easy fix turn inlined error x make sure deprecations master followup issues find solution merge unblocks adding tests depend inputvaluetracking improvements react warnings general specifically adress steps went react preparing rc done rc released x write proper changelog releases x cherrypick reactcreatemixin deprecation cherrypick x maybe cherrypick needs confirmation right way x cherrypick merged x cherrypick fix x cherrypick deduplicate unknown dom property warning people nt stay react see discussion reached consensus instead revisit whole warning system future x make sure using rather inlining like x deprecate reactdom factories merge cherrypick x include codemod x mergecherrypick x downgrade deprecation notices x create deprecation warning helper x update deprecation warnings master branch sync master branch flarnie moved prepping final release section update deprecation proptypes library check addons deprecation warnings release new versions flarnie moved addons section x update deprecation warnings branch update addon versions master branches flarnie moved addons section x add specific version numbers deprecation messages react x add link warning messages make clear broken code something removed react link dedicated page gist blog post gists nice comments make sure page touches common confusion points x lib maintainers dependency peer x mean context api x warning firing code dependency know x exactly happen react x automatically migrate code x encouraging people stop using createclass proptypes deprecating bad nope moving yes make clearer x use fbme links like always deprecations lets us update links future x cherrypick x verify changes landed also cherrypicked cherrypick fix gaearon nt think need make sure deprecations master flarnie moved prepping final release section x change package named consistently avoid x cherry pick double check nhunzaker x release npm testing rc done react x inspect umd builds x share rc proposed release date library authors several weeks advance x publish release notes early preparing final release done react x update x share rc library authors get folks try x post target date release x triage issues reported rc x x sync master branch test deprecation downgrade internally fb release x release monthur day", "num": "9398", "d": "4/2017"}, {"title": "stub component methods use property initializer syntax", "body": "finally updating components reactcreateclass classes seeing deprecations first error seeing tests running calls failing component methods property initializer syntax ie question stub using new syntax tests looks like longer works assuming nt prototype anymore imagine standard method syntax bunch calls constructor would trick fan approach love know solution syntax thanks ps posted stackoverflow seems like lots discussion happening days sorry xpost", "num": "9396", "d": "4/2017"}, {"title": "deprecation warnings use consolewarn instead consoleerror", "body": "historically react logged warnings rather believe done variety reasons certain types warnings may indicate serious problem even always fatal past stack trace available calls deprecation warnings intended provide users headsup features changingbreaking next major release also logged warnings makes noticeable comes cost potentially overemphasizing urgency addressing eg address upgrading next major nt need address potentially causing ci test failures certain runners treat unexpected calls fatal discussion react team decided replace calls deprecation warnings intend release change upcoming release", "num": "9395", "d": "4/2017"}, {"title": "caret misplaced preventdefault onbeforeinput", "body": "want request feature report bug bug current behavior using epreventdefault omit emoji input macos emoji picker caret still moving character already input current behavior bug please provide steps reproduce possible minimal demo problem see gif prevent everything onbeforeinput trying insert emoji using macos emoji picker caret moved wrong position issue happen contenteditable element also apply input element well expected behavior caret stay still input blocked onbeforeinput versions react browser os affected issue work previous versions react tested react chrome macos affected", "num": "9390", "d": "4/2017"}, {"title": "addon bugs", "body": "release bit rocky keeping track known issues fix together next patch x expose shallow renderer needed enzyme x create fragment commonjs entry point messed x crc package misses dependency x commonjs addons inline fbjs unnecessary x umd files contain shim x umd files nt envified x linkedinput umd broken x release x proptypes missing license patent file x fix release tagging acdlite add rest us regarding add docs link main docs currently says documentation wip add peer deps react callback issue currently peer deps dev deps release update npm", "num": "9384", "d": "4/2017"}, {"title": "incorrect export reactaddonscreatefragment package", "body": "reactaddonscreatefragment npm package exporting function intended instead exporting function returns reproduce javascript var createfragment require reactaddonscreatefragment var hello reactcreateclass var fragment createfragment hello hello world world render function return fragment reactdomrender documentgetelementbyid container actual render expected render helloworld reactaddonscreatefragmentreactwithaddonsjs working expected bug affects npm package", "num": "9381", "d": "4/2017"}, {"title": "bug render componentdidmount", "body": "reproduce chrome source ubuntu chrome react", "num": "9380", "d": "4/2017"}, {"title": "question proptype deprecation warning", "body": "want request feature report bug saw package proptypes newsfeed morning package required shut warning way disable using proptypes initial render component designed received following warning current behavior versions react browser os affected issue work previous versions react", "num": "9379", "d": "4/2017"}, {"title": "reactdomrender asynchronous catch exceptions", "body": "want request feature report bug want request feature current behavior callback called nt pass error one occurred expected behavior error occurs rendering would want handle error callback right using jsx return new promise resolve gt const routerprops routes history onupdate would like use jsx return new promise resolve gt const routerprops routes history onupdate versions react browser os affected issue work previous versions react using major version checked versions", "num": "9378", "d": "4/2017"}, {"title": "facebookmessenger", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "9377", "d": "4/2017"}, {"title": "find module reactreconciletransaction reactshallowrendererjs", "body": "want request feature report bug bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template js componenttestjs const reactshallowrenderer require reacttestrenderershallow find module error expected behavior module included package versions react browser os affected issue work previous versions react something relatively simple would nt mind making first pr react given nudge right direction looked already grunt tasks building packages nothing stood", "num": "9372", "d": "4/2017"}, {"title": "package declare dep peer dep", "body": "per dependency however list either makes implicit dependency one whose version compatibility unchecked could add peer dependency ideally entire range react versions works particularly interested works want react peer dep example acdlite kentcdodds", "num": "9371", "d": "4/2017"}, {"title": "proptypes", "body": "want request feature report bug bug proptypes contains untranspiled sure code lives", "num": "9370", "d": "4/2017"}, {"title": "onclick handler default parameter value set proxy", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "9367", "d": "4/2017"}, {"title": "componentwillreceiveprops work", "body": "trying create apps app function like maps app google app scene first scene mapview search input top scene user click search input app navigate second scene search scene second scene implemented module reactnativegoogleplacesautocomplete user input text component give suggestion autocomplete place get place info description coordinate pass props actionspop method reactnativerouterflux get props trigger componentwillreceiveprops update region object mapview component first scene seemly componentwillreceiveprops work stuck know solve know way please help first scene code mapview componet import react component react import appregistry dimensions stylesheet text textinput touchablehighlight image view reactnative import actions reactnativerouterflux import mapview reactnativemaps var googleplacesautocomplete require reactnativegoogleplacesautocomplete const width height dimensionsget window const aspectratio width height const latitude const longitude const latitudedelta const longitudedelta latitudedelta aspectratio export default class hub extends component constructor props super props thisstate textquery searh place region markers mapstyle null componentwillmount thisinitial initial navigatorgeolocationgetcurrentposition position gt consolelog position thissetstate region latitude positioncoordslatitude longitude positioncoordslongitude latitudedelta latitudedelta longitudedelta longitudedelta error gt consolelog error thissetstate region latitude latitude longitude longitude latitudedelta latitudedelta longitudedelta longitudedelta componentwillreceiveprops nextprops thisupdateplace updateplace props thisprops gt something props consolelog running thissetstate textquery propsaddress region latitude propslatitude longitude propslongitude latitudedelta latitudedelta longitudedelta longitudedelta onregionchange region gt thissetstate region render import react component react import appregistry stylesheet text view reactnative import actions reactnativerouterflux var googleplacesautocomplete require reactnativegoogleplacesautocomplete export default class placesearch extends component constructor props super props thisstate setlocation data details var da var da data var details actionspop latitude dgeometrylocationlat longitude dgeometrylocationlng address dadescription render return", "num": "9362", "d": "4/2017"}, {"title": "react bundle correctly project using rollup", "body": "want request feature report bug bug current behavior using rollup project imports latest react bundle ends containing file size unnecessarily large guess happening entry point react changed recently rollup apparently eliminate exports dead branches even replacing production uglify also remove dead code rollup seems hoist stuff top level online demo try building using tool uses rollup report package sizes compare searching current behavior bug please provide steps reproduce possible minimal demo problem steps reproduce import react project uses rollup bundle use rolluppluginreplace replace production use plugins rollup understands commonjs exports minifies stuff check bundle size expected behavior size much smaller versions react browser os affected issue work previous versions react size fine using entry point reads js use strict moduleexports require libreact", "num": "9361", "d": "4/2017"}, {"title": "link web components docs", "body": "bottom web components docs page link", "num": "9357", "d": "4/2017"}, {"title": "avoid adding inlined styles unnecessary", "body": "want request feature report bug sounds like feature causing problem server side generated html payload pass htmlminifier current behavior stated serialization function properties ended current behavior bug please provide steps reproduce possible minimal demo problem via similar template na expected behavior properties ended except last one versions react browser os affected issue work previous versions react na referenced issue", "num": "9353", "d": "4/2017"}, {"title": "get parent dom attributes children refs", "body": "want add event listener parent resize push state pass prop childanimated want give parent parent document getelementbyid queryselector want get refs example jsx import react react import finddomnode reactdom import reacttransitiongroup reactaddonstransitiongroup class parent extends reactcomponent state ismounted false componentdidmount thissetstate ismounted true activechild false render const childarr b c f j return child index onclick e gt thissetstate activechild index gt child class childanimated extends reactcomponent componentwillappear callback componentdidmount const parent child thispropsnode consolelog parent child console return parent div child null render return", "num": "9352", "d": "4/2017"}, {"title": "typeerror read property firstchild null precachechildnodes", "body": "get", "num": "9351", "d": "4/2017"}, {"title": "build error found fbjslibwarning", "body": "npm run build reactbuild build githubreact npm run versioncheck amp amp node scriptsrollupbuildjs reactbuild versioncheck githubreact node scriptstasksversioncheckjs starting reactdevelopmentjs umddev error could load githubreactnodemodulesfbjslibwarning imported githubreactsrcisomorphicmodernclassreactnoopupdatequeuejs enoent file directory open githubreactnodemodulesfbjslibwarning found package nodemodules", "num": "9350", "d": "4/2017"}, {"title": "ref passed hoc", "body": "want request feature report bug feature current behavior parent component child component wrapped hoc assign ref attribute child component ref attribute instead refers hoc order parent component reference child component must use popular workarounds onref prop innerref prop getinstance func expected behavior accordance decorator pattern child wrapped hoc less accessible child wrapped hoc expected ref attribute pass hoc", "num": "9348", "d": "4/2017"}, {"title": "offer opinionated helper hoc creation authors", "body": "hocs great think agree great however react opinion people implement hocs users authors alike guideline comes implementing consistent api using multiple hocs especially hocs get chained think opportunity make lives developers work react well hoc maintainers make sure hocs work variety code bases easier react slightly opinionated write hoc describe problem right established way ask hoc component class es put established way access real element hoc wraps hoc either settle bad users invent api many gone second route fair different ways access implemented different hocs fix like suggest establishing best practice guided react adding mechanism corresponding next version react users authors longer need guess apis suggestion would reacthoc class define constructor takes arbitrary number component classes getclasses function returns list component class es passed getinstances function returns list element hoc actually builds knows access based component class names example following code public domain unfortunately need point unable sign cla necessary file prs ca nt file pr conjunction issue following code lacks much implementation possible allow prs others class hoc extends component constructor componentclasses thiscomponentclasses componentclasses getclasses passed component might hocs function needs perform iteration check build valid list contained classes getinstances holds order make work naming convention needs declared around refs use reacthoc name refs component class pushed lets react solve problem standardizing barebones functionality users authors able rely work without interfering hocs currently work dictating people write hocs keep writing hocs plain components wrap one components extending hoc offers zeroeffort option impart functionality free users appreciate interesting suggestion instead relies rebinding might good enough would also expose refs used hoc internal purposes user able fiddle anyway mostly issue filed get ball rolling much standardizing hocs made feels like react stay unopinionated react offer helping opinion one way write hoc promise using means compatible hoc uses suggestion", "num": "9345", "d": "4/2017"}, {"title": "post form proper json", "body": "possible automatically transform html form proper json document react contrast old fashion form encoded data would wishful get whole json document unchecked booleans false etc finally files could included aswell base string would great bonus", "num": "9343", "d": "4/2017"}, {"title": "expanding render method behaviour", "body": "regular method behaviour everytime render component place within elementwrapper let say element css class import react component react class rregularrenderbehaviour extends component render return hi hi hi extended method behaviour maybe better pass method two parametres element wrap jsx code returned css class assigned elementwrapper example trying say method didnt receive parametres wrap jsx code default think enhancement save time bit dont worry u didnt wrap jsx code", "num": "9338", "d": "4/2017"}, {"title": "bug value change null input show value change", "body": "demo set value null input keep last value rather show empty value", "num": "9335", "d": "4/2017"}, {"title": "bug ref function gets called twice update first mount first call null value", "body": "want request feature report bug bug current behavior functions get called twice update first mount current behavior bug please provide steps reproduce possible minimal demo problem via similar template code like jsx render const frames frameslength thispropstotalframes let lframeslength thisframes return framesmap frame gt verify contains however length double first half items means subsequent calls first first passing function element followed correct nonnull values example observe jsx componentdidmount consolelog thisframes output div div div componentdidupdate consolelog thisframes output null null null div div div always twice expected expected behavior array contain null values divs note called setting new array inside shows double length first half values seems like react calling ref functions one time many frame element first call value second call expected value versions react browser os affected issue work previous versions react react workaround workaround simply consistently null values interacting array", "num": "9328", "d": "4/2017"}, {"title": "change state one component affect component", "body": "hi problem using multiple component one reducer action trying reuse data grid modal sample originally data grid behind record showed modal data grid pass data data grid behind data also selectcheck item data grid modal also selectcheck one using react reactredux please help thanks lot", "num": "9326", "d": "4/2017"}, {"title": "remove usage pooledclass", "body": "pooledclassjs static poolers based number arguments amp comment specifies questions issue using arguments noticed using place reference going reduce duplicate code ca nt use spread syntax like", "num": "9325", "d": "4/2017"}, {"title": "unable find element id", "body": "trying use jquery datatable creating react component force rerender component using componentobjectforceupdate getting error unable find element id jquery datatable create three div reactid want know get rid error moduleexports jtable reactcreateclass getinitialstate function props props props thisprops return columns propscolumns data propsdata moduleexports dttable reactcreateclass render function return moduleexports dttablehead reactcreateclass render function var content thispropscolumnsmap function column return moduleexports dttablebody reactcreateclass render function way make work error sorting function working", "num": "9322", "d": "4/2017"}, {"title": "flat bundle followup umbrella", "body": "flat bundles mostly done separating followup work separate issue x isomorphic package x fully work update file still seeing sync console spam rebuilds x happens user forgets envify webpack use dead code elimination would bundle bundles sounds like even worse happens would user see warnings x wrap commonjs bundles conditions x add way see bundle size change x address internal fb issue think wanted ignored used verbatim x figure rn rollout strategy x go fiber switch flat bundles x see possible workaround circular injection x flat reactnative bundle would require flat react bundle shipped npm x make sure error codes transform still works x add fixture reactart x make final decision bundle server renderer x remove source x maybe reduce duplication umd bundles eg put react internals x convert source modules x update release documentation extract shared state npm package x use named imports places eg event system x figure static injection mechanism www rn investigate mangling gcc optimizations figure share build process third party renderers eg art starters simplify default build process run fb bundle builds come better strategy fb builds maybe", "num": "9321", "d": "4/2017"}, {"title": "filtering valid mathml properties", "body": "want request feature report bug bug current behavior react filtering attributes valid mathml elements current behavior bug please provide steps reproduce possible minimal demo problem via similar template open firefox full mathml support see attributes filtered although valid mathml expected behavior html rendered mathvariant notation linebreak versions react browser os affected issue work previous versions react firefox supposed support mathml websites running mathjax also affected", "num": "9320", "d": "4/2017"}, {"title": "async event handlder ca nt use preventdefault well", "body": "create jsfiddle demo class app extends reactcomponent constructor props super props work fine handleclick event eventpreventdefault work bad still trigger page refresh means default behaviour nt prevented handleclick event eventpersist make sure get event async function render return mean maybe sometimes need encapsulate handler encapsulation transparent user responsibility ca nt advance adding like first way abovebut second way ca nt work apparentlyof course add options encapsulation provide user looks like perfect way want ask good way solve thanks", "num": "9319", "d": "4/2017"}, {"title": "improving doc", "body": "says beware pattern effectively forks props lead bugs nice would better docs explains bugs lead", "num": "9317", "d": "4/2017"}, {"title": "reactaddonscreatefragment destructuring assignment remains distributed code", "body": "want request feature report bug bug current behavior running get following error creating optimized production build failed compile uglifyjs syntaxerror name expected error command failed exit code info visit documentation command line destructuring assignment think code distributable current behavior bug please provide steps reproduce possible minimal demo problem via similar template using createreactapp create app add materialui import drawer expected behavior build properly versions react browser os affected issue work previous versions react unknown", "num": "9315", "d": "4/2017"}, {"body": "provide information need react tree generally considered opaque opening parent components introspection modification lead issues hard debug", "d": "4/2017"}, {"body": "thanks quick response gaearon essentially trying build scene graph able animate right sorts components needed hence needing know parentchild relationship tried building scene graph however ran issues first user still needs build relationship approach mentioned since needing reference nodes animations need create node add scene graph component mounted causes issues order may mount parent would require good amount hacks build tree needed going way also understand may something suitable custom renderer however would bit absurd still need functionality behind extended ability able access tree build augmented scene graph", "d": "4/2017"}, {"body": "interesting reason also allowed equals casting value string first comparison could fix problem however could also intended behavior", "d": "4/2017"}, {"body": "note type input text input always give string means equal either number also different", "d": "4/2017"}, {"body": "sure mean casting value string since input type text always gives string", "d": "4/2017"}, {"body": "think actual problem caused check gets skipped value equals gets changed trick", "d": "4/2017"}, {"body": "yes explicitly converted string comparing", "d": "4/2017"}, {"body": "sure mean casting value string since input type text always gives string give via props actual input value", "d": "4/2017"}, {"body": "sure inside could nt something actually want situation would mean want parent child rerender whenever parent props state change", "d": "4/2017"}, {"body": "let get rid base class first pure component means one renders element given props state contrast impure one means may render different result even props ant state stays unmodified case impure characteristic spreading component contains impure component impure impure component parent assume render result stable props state remains unmodified rather propose warning message react mark component pure setting property even extend base class one remaining issue current party component react ecosystem mark pure warning message may appear unexpected think could solution better backward compatibility", "d": "4/2017"}, {"body": "propose specific wording would better", "d": "4/2017"}, {"body": "looks like uses libvips native cc module could problem also issue tracker react core react native issue tracker since sounds like usage question recommend checking one great communitydriven platforms like reactiflux discussreactjsorg", "d": "4/2017"}, {"body": "tutorial several problems first codepen accessible seeing examples really difficult thanks raising know another online js environment accessible would help provided code github project could download run locally", "d": "4/2017"}, {"body": "react issue tracker convinced problem specific react", "d": "4/2017"}, {"body": "hi gaearon thanks quick response sure far know way debug issue facebook browser console print simple reactreduxwebpack app much could causing issue wondering react developers issue suggestions would appreciated", "d": "4/2017"}, {"body": "fixed nt react issue", "d": "4/2017"}, {"body": "cool mind sharing causing secret", "d": "4/2017"}, {"body": "real way fix avoid putting things externals know may stripped later hack around warning thrown rollup something external list nt show warningerror continue normal means essentially handling externals rather rollup hopefully prevent rollup adding rogue requires richharris told another hacky way get around given amount running would good rollup could check external used codebase used require nt added", "d": "4/2017"}, {"body": "means essentially handling externals rather rollup hopefully prevent rollup adding rogue requires unfortunately nt work way rollup nt know resolve module id basically add list difference specifying whether get warning specifying way saying chill rollup know far rollup concerned externals never unused might sideeffects err side caution fixing rollup level would basically entail adding new option allowed specify external modules sideeffects therefore safely omitted none exports used bundle", "d": "4/2017"}, {"body": "richharris something could added feature would massively help us last hurdle", "d": "4/2017"}, {"body": "could add issue please issue tracker dumpster fire moment get soon", "d": "4/2017"}, {"body": "support selecting options keyboard btw fiddle link leads hello world example probably press update", "d": "4/2017"}, {"body": "agree hypnosphi enough cover since changes come interacting mouse", "d": "4/2017"}, {"body": "yes build likely broken windows right probably duplicate look breaks file issues rollup bug", "d": "4/2017"}, {"body": "thanks replyi try solutions issues pr involve merged unfortunately still ca nt work", "d": "4/2017"}, {"body": "hi know repo still use haste convention specific tool really plan migrate es modules waiting internal fixes get first close another issue dropping haste", "d": "4/2017"}, {"body": "still sounds bit high implementation like make sure shallow comparison deep comparisons worse also make sure measuring production build react help would need see run code", "d": "4/2017"}, {"body": "gaearon", "d": "4/2017"}, {"body": "filetree parent component filetreenode child component props node like node immutable", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "function nodes immutable able compare directly reference", "d": "4/2017"}, {"body": "yea clear", "d": "4/2017"}, {"body": "import immutable immutable compare value reference", "d": "4/2017"}, {"body": "need example ready run see", "d": "4/2017"}, {"body": "giorgim use functional setstate new date set without delays", "d": "4/2017"}, {"body": "trysound well maybe example official doc flawed maybe someone want correct trysound say also functional form immediately applies changes state", "d": "4/2017"}, {"body": "trysound entirely correct functional form ensures get fresh props state updater function set state based previous state incrementing counter safely multiple times row without worrying whether updates batched however functional form cause anything updated synchronously case ensures capture time update applied rather time called stil need highlight makes zero difference react likely react currently updates inside timeout handlers batched likely change future though giorgim react currently batches changes inside event handlers inside event handler called multiple components changes would applied one pass event handler run rather individual call example async talking delay couple something like three seconds future versions react may batch changes conditions including within intervals goal always stay responsive user input definitely seeing three second delay unless specifically tell react update low priority currently way may add future help", "d": "4/2017"}, {"body": "gaearon helps point correct answer practice delay wo nt long correct cases absolutely difference functional object form using functional form implications react updates dom contradict statement functional form gives fresh copy state pending setstate applied yet state get pending one old one finally think still nt address concerns see last three comments", "d": "4/2017"}, {"body": "edited answer precise answer question", "d": "4/2017"}, {"body": "contradict statement functional form gives fresh copy state think using functional form gives another chance choosing new state value time update applied solves problem state depends previous state want schedule multiple independent updates applied yet react lets say okay react know current state need calculate next one give function call ready functional form object form equivalent using functional form constant return value functional form cause updates happen earlier later gives chance adjust state based previous state", "d": "4/2017"}, {"body": "gaearon mean answer shows last edit april understood answer thread second delay following still cases absolutely difference functional object form using functional form implications react updates dom contradict statement functional form gives fresh copy state pending setstate applied yet state get previousstate calling functional setstate pending one old one", "d": "4/2017"}, {"body": "also addressed comment two event handlers still get batched", "d": "4/2017"}, {"body": "pending setstate applied yet state get previousstate calling functional setstate pending one old one get pending get applied flushed dom yet whole reason functional api takes function react call later knows think queue functions ready call next function know result previous one call many functions queue feeding results use final return value next gets flushed dom mean answer shows last edit april sorry meant comment edited time posting removed sentence quoting could indeed confusing replaced hopefully clearer explanation also added note answer", "d": "4/2017"}, {"body": "gaearon thanks responses think things clear especially question would harm imo someone could comprehensively address setstate functional form works put somewhere blog maybe etc", "d": "4/2017"}, {"body": "bit transitional period right exactly aspect working changing future releases like avoid diving details much figure plan see works best product code", "d": "4/2017"}, {"body": "gaearon ok nice fundamental aspect would nice covered details possible people confused anymore", "d": "4/2017"}, {"body": "gaearon still sure understand setstate functional form works closing issue anyway come back issue later maybe", "d": "4/2017"}, {"body": "giorgim happy answer formulate question specific way works vague question ranging api implementation details practical usage etc since clear exactly like learn find difficult give specific reply", "d": "4/2017"}, {"body": "api contract next state depends current state props example incrementing counter use functional form otherwise matter use either form functional form works giving callback use calculate next state return way see specific questions like exactly updates applied implementation details may change future rely even today think give enough information use api please ask questions happy explain", "d": "4/2017"}, {"body": "gaearon ok come specific question get back tag hopefully get response", "d": "4/2017"}, {"body": "sounds good", "d": "4/2017"}, {"body": "getting rolling tricky initially think important order help us keep track features present master vs branches also related", "d": "4/2017"}, {"body": "relevant issue edit seems like big divergence branch master really commits present branch writing changelog going serious chunk work", "d": "4/2017"}, {"body": "wnee think answer sure yet please send screenshot total time console log waiting screenshot soon want gaearon review goodbye", "d": "4/2017"}, {"body": "use react perf start react perf stop printinclude found total time less first component time understand relationship cost time components total time", "d": "4/2017"}, {"body": "jquense maybe help", "d": "4/2017"}, {"body": "react nt easily lend adding event possible component reactoverlays rootclosewrapper responds clicks outside use overlays dropdown menu reactbootstrap", "d": "4/2017"}, {"body": "see look thanks", "d": "4/2017"}, {"body": "confused example expect want follow stacktrace look happens might bug even though important", "d": "4/2017"}, {"body": "yes followed stacktrace every handler function called bind null corresponding file happens reacterrorutilsjs line onwards case onchange addition reacterrorutilsjs another file involved named linkedvalueutilsjs checks explicitly onchange props calls undefined providing corresponding code snippets files reacterrorutilsjs linkedvalueutilsjs explicitly checks onchange input props last line call undefined event point value keyword implemented different way onchange nt behaviour uniform event handler functions", "d": "4/2017"}, {"body": "see think actually makes sense supposed specified confusing gave seem like fixed master though", "d": "4/2017"}, {"body": "react binds keyword null first place event handlers could clarify", "d": "4/2017"}, {"body": "really think saying surprised like said seem master", "d": "4/2017"}, {"body": "behaviour still seems latest version react", "d": "4/2017"}, {"body": "master released yet try like confirm", "d": "4/2017"}, {"body": "use class need features nt available stateless functional components", "d": "4/2017"}, {"body": "\u03b5\u03c7\u03c9 \u03c0\u03c1\u03bf\u03b2\u03bb\u03b7\u03bc\u03b1 \u03b5\u03b2\u03b1\u03bb\u03b1 \u03b1\u03c5\u03c4\u03bf \u03c4\u03bf\u03bd\u03bb\u03bf\u03b3\u03b9\u03c3\u03bc\u03b9\u03ba\u03bf \u03b3 \u03bd\u03b1 \u03b2\u03bb\u03b5\u03c0\u03c9 \u03c4\u03bf\u03c5\u03c2 \u03ba\u03c9\u03b4\u03b9\u03ba\u03bf\u03c5\u03c2 \u03ba \u03bb\u03b5\u03be\u03b5\u03b9\u03c2 \u03b1\u03bb\u03bb\u03b1 \u03b4\u03bd \u03be\u03b5\u03c1\u03c9 \u03c0\u03c9\u03c2 \u03bd\u03b1 \u03c4\u03bf \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b7\u03c3\u03c9 \u03c0\u03bf\u03c5 \u03bd\u03b1 \u03c0\u03b1\u03c9 \u03ba \u03bd\u03b1 \u03b4\u03c9 \u03c4\u03b9 \u03bf\u03c1\u03b1\u03bd \u03b4\u03c5\u03bd\u03b4\u03b5\u03bf\u03bc\u03b1\u03b9 \u03b1\u03bb\u03bb\u03b1 \u03c4\u03bf \u03bb\u03bf\u03b3\u03b9\u03c3\u03bc\u03b9\u03ba\u03bf \u03c4\u03bf \u03c7\u03c9 \u03c3\u03b5 \u03b1\u03bb\u03bb\u03b7 \u03c3\u03c5\u03c3\u03ba\u03b5\u03c5\u03b7 \u03b2\u03bf\u03b7\u03b8\u03b5\u03b9\u03b1", "d": "4/2017"}, {"body": "functional components nt need instantiated lightweight class components hence potentially performant class components write code humans write functional component conveying reader code nt want use state inside component write class component nt convey idea well created class component reader code may get wrong message may future class components might state lifecycle methods logic functional components class components everything functional component adding shouldcomponentupdate functional components costly operation putting single check need worry instance complexity significant size functional component subtree benefit shouldcomponentupdate potentially save cpu cycles people measure use shouldcomponentupdate need code still remains refactoring functional components class components probably great idea opinion", "d": "4/2017"}, {"body": "think fiber release great opportunity add shouldcomponentupdate functional components let users decide want use unless reason nt know clear already use defaultprops property functional components add another one shouldcomponentupdate sure several people requested feature past recommending users use class components instead could potentially make component less efficient right way solve problem opinion specific reason react nt want probably makes sense reason provide flexibility know several people nt want use class components state force use class components shouldcomponentupdate", "d": "4/2017"}, {"body": "might decision yet add another one shouldcomponentupdate plan full fledged api stateful functional components future may implemented different way eg component could object static methods avoid introducing apis might scrap future favor complete solution understand ideal sure good api long term rather avoid churn expose much sugar change later", "d": "4/2017"}, {"body": "makes sense one thing even planning add support stateful functional components functional components still exist means users already return large codebase using functional components might refactor stateful functional components able use benefits shouldcomponentupdate think simple functions remain simple unless someone wants performance benefits sometimes nt harms nt see harm adding shouldcomponentupdate performance cost except single check api backward compatible get choose want use yeah agree solution work long term wanted express concern wanted understand reasoning behind adding shouldcomponentupdate sure guys come best possible solution thanks", "d": "4/2017"}, {"body": "yea totally understand desire think approach stateful functional component api make feel like natural progression stateless functional components instead something completely different", "d": "4/2017"}, {"body": "hey hamzadevzubair repository react react native repository issue tracker", "d": "4/2017"}, {"body": "thanks reply found solution", "d": "4/2017"}, {"body": "hey shwetacode issue tracker react reactrouter separate project driven community since looks like looking support recommend checking one great communitydriven platforms like reactiflux discussreactjsorg stackoverflow", "d": "4/2017"}, {"body": "happy implement get feedback idea", "d": "4/2017"}, {"body": "crazy idea lets maintain completely separate implementation react reconciliation specifically tests way expose entire internals introspection tools build harder maintain optimizations throw away state fiber like able completely remove fibers internal tree functional components ability inspect would need separate path anyway reacttestutils ca nt share exact implementation reactdom anyway", "d": "4/2017"}, {"body": "crazy idea let maintain completely separate implementation react reconciliation specifically tests way expose entire internals would look like much reconciliation code could reused providing lowlevel apis testing utilities consume sounds useful", "d": "4/2017"}, {"body": "also sounds like longterm goal hoping improve testing story react current api third party utilities like enzyme still rely accessing internal properties support traversal api", "d": "4/2017"}, {"body": "create vanilla js version verify issue still reproduces could bug browser runs transitions", "d": "4/2017"}, {"body": "thanks reporting sure fix", "d": "4/2017"}, {"body": "use node api instead cli api", "d": "4/2017"}, {"body": "good point want send pr", "d": "4/2017"}, {"body": "hi nt see problem could give example maybe check context function call", "d": "4/2017"}, {"body": "hi nt work since addeventlistener context keyword bound document receive error way around use arrow function callback bind automatically use bind bind value keyword", "d": "4/2017"}, {"body": "class app extends reactcomponent render return hello thispropsname reactdomrender documentgetelementbyid container", "d": "4/2017"}, {"body": "try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms like reactiflux discussreactjsorg stackoverflow also looks like using react native repo specifically react core", "d": "4/2017"}, {"body": "using builtin assignee feature github filter assigned issues", "d": "4/2017"}, {"body": "calyhre good suggestion theory something nt know unfortunately looking first three issues shows people already volunteered opened prs cases maybe matter better discipline assigning people issues soon volunteer", "d": "4/2017"}, {"body": "using builtin assignee feature github filter assigned issues unfortunately github nt let assign issues noncollaborators could add two additional labels babel repo would solve issue gaearon think", "d": "4/2017"}, {"body": "yes wanted also think beginner misnomer based discussion twitter stopped using repos favor starter issue even something good place start beginner implies beginner always able universally case", "d": "4/2017"}, {"body": "section docs called refs dom probably helpful suggest much declaratively props need call method instance another component use", "d": "4/2017"}, {"body": "child call parent method passing method parent child prop js class parent extends reactcomponent toggle gt update state render return class child extends reactcomponent render parent toggle method available thispropsonclick return need go reverse direction call child method parent refs one option bvaughn said try avoid refs try use props data flow whenever possible", "d": "4/2017"}, {"body": "directly affect component instance actual turn affect component behavioroutput given think makes sense influence snapshots way described think pretty easy visually scan snapshots diffs changing batchupdate", "d": "4/2017"}, {"body": "see disagree update component used components want update test go diffs make sure everything fine anyways current implementation supports way testing like way testing like question way defaultprops resolved later perhaps api call executed maybe could worlds beginning would defaultsfree tree api call defaults would resolved would get tree defaults perhaps could flag would turn resolution could set easily context testing", "d": "4/2017"}, {"body": "update component used places potentially change component behavior places seems like snapshot tests reflect", "d": "4/2017"}, {"body": "one components used components button used menu menu used header affected headers behaviour well nt snapshot reflect well p answer unit tests called unit test one element separation mocks exists tests write test class mock dependencies want test one class behaves", "d": "4/2017"}, {"body": "sorry nt understand component renders renders would change impact shallow snapshot output nt even rendered element would nt even created", "d": "4/2017"}, {"body": "ok maybe differently change reflect shallow render first place double standard actual tree returned affect", "d": "4/2017"}, {"body": "let say component required prop component rendered couple snapshot may look something like jsx later changed props required property instead want tests fail right unless updated would longer configuring correctly however stripped snapshot output never know snapshot would remain jsx case runtime behavior component would broken would show bunch click buttons", "d": "4/2017"}, {"body": "hm ok actually sounds reasonable consider convinced believe issue closed ok thanks", "d": "4/2017"}, {"body": "thanks discussion go ahead close honest decision could continue discussing enzyme team though pretty sure plan implement fromscratch shallow renderer next major enzyme release would give option whitelisting", "d": "4/2017"}, {"body": "like take", "d": "4/2017"}, {"body": "sounds good", "d": "4/2017"}, {"body": "worst part fixed ideally would nice think get around need horizontal scrollbar", "d": "4/2017"}, {"body": "yeah agree horizontal scrollbar annoying let see find way get rid", "d": "4/2017"}, {"body": "wonder way show error live editor let figure", "d": "4/2017"}, {"body": "probably complicated would cool", "d": "4/2017"}, {"body": "also frustrating runtime errors formatted poorly probably enable new behavior compile errors", "d": "4/2017"}, {"body": "created fixing runtime error formatting", "d": "4/2017"}, {"body": "thanks would still nice investigate inline compile errors big deal", "d": "4/2017"}, {"body": "sure codemirror lint look good solution", "d": "4/2017"}, {"body": "gaearon look poc probably remove syntax error message output box amp polishing", "d": "4/2017"}, {"body": "tried create similar example plain dom", "d": "4/2017"}, {"body": "gaearon ask realize would quite challenge ask ask like give shot think could help", "d": "4/2017"}, {"body": "ask ask tell issue react browser bug ask realize would quite challenge think necessarily would create three dom nodes write code reorders button click react", "d": "4/2017"}, {"body": "quite sure another instance reordering iframes resets time move element dom basically removed added causes iframes reset video stop audio stop etc probably also animations reset unless shown otherwise would assume browsers intentionally quirky", "d": "4/2017"}, {"body": "wrong chrome element devtools drag n drop triggering behaviour sorry confusion also already implemented workaround video pausing ie chrome talking syranide payed attention might understood issue earlier indeed behaviour gearon simple demo right browser issue kind confused reacts logic moving elements dom pretty clear maybe simply put appends nodes browsers exhibit behaviour thank help related question without much knowledge react actually moves elements around possible intelligent way limits number elements moved limit sideeffect thinking different combinations append prepend insertbefore insertafter etc would feasible", "d": "4/2017"}, {"body": "might sure performance general case might something", "d": "4/2017"}, {"body": "please make sure leave comment want take", "d": "4/2017"}, {"body": "cc aweary case looking something fun", "d": "4/2017"}, {"body": "hey gaearon would like work", "d": "4/2017"}, {"body": "give hand", "d": "4/2017"}, {"body": "take vs", "d": "4/2017"}, {"body": "think bad idea pretty easy let props pass without wanting good example imho custom syntax like prop prefix would much better", "d": "4/2017"}, {"body": "take onclick vs onclick think still warn casing typos hardly imagine ever intentional", "d": "4/2017"}, {"body": "think rendered html comply", "d": "4/2017"}, {"body": "think important everyone commenting also reads plenty use cases nonstandard attributes biggest motivation enabling dropping need whitelist production happy debate details approach want turn thread bikeshed whether useful", "d": "4/2017"}, {"body": "islautin mean disrespect would really prefer whoever jumps contributed react fairly involved change shepherding prs new contributors takes lot team time currently running short use label issues appropriate firsttime contributors", "d": "4/2017"}, {"body": "update nhunzaker already pr got stale nhunzaker much time think take circle back pr outstanding prs feel blocking working", "d": "4/2017"}, {"body": "scrolljank pr needs bit testing approval planning write dom fixtures media elements could wait dom factories pr complete work needs integrated new build system master old build system want get fast possible could definitely switch gears", "d": "4/2017"}, {"body": "misspellings longer caught perhaps disabled default since edge case", "d": "4/2017"}, {"body": "misspellings longer caught see still warn misspelling things react aware like please see discussion", "d": "4/2017"}, {"body": "scrolljank pr needs bit testing approval planning write dom fixtures media elements could wait perhaps spicyj could take dom factories pr complete work needs integrated new build system master old build system perhaps flarnie could take pressure either noticed seems like work done approval cherrypicking stage would make team jump", "d": "4/2017"}, {"body": "gaearon amp nhunzaker take integrating dom factories pr oldnew build systems way nhunzaker free either focus help issue thanks asking", "d": "4/2017"}, {"body": "sounds good thanks flarnie", "d": "4/2017"}, {"body": "might affect server rendering test suite previously added aickin might need change tests verify new behavior fine verify new behavior flag set true since use server rendering pointer implementors think tests affected unknown attributes suite think pretty self explanatory feel free ping", "d": "4/2017"}, {"body": "also one weird quirk occurs patch think still wo nt able add attributes names rendered html almost certainly fine perhaps worth noting", "d": "4/2017"}, {"body": "use label issues appropriate firsttime contributors gaearon first issues list already taken someone cases pr submitted lot reading digging come empty handed efficient way finding issues one claimed yet", "d": "4/2017"}, {"body": "many bugs react also add ton features quickly get taken contribution opportunities ecosystem libraries related tooling course appreciate people helping provide support people make honest mistakes issues stackoverflow chats", "d": "4/2017"}, {"body": "side note want slightly change label system claimed issues separate discussion please file new issue reply", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "gaearon agree really useful meant could automatically append custom attributes turns unless official attribute like etc ofcourse", "d": "4/2017"}, {"body": "make type props private reactelements understanding correctly longer allowed way introspect elements", "d": "4/2017"}, {"body": "syranide think use cases typically solved coroutines feature allowing render public api could object props object", "d": "4/2017"}, {"body": "sebmarkbage ah nt know coroutines makes lot sense sidenote curious means jsx something eventually work jsxspec assume would include runtime features unpackingtraversing elements renderers reasonable endgoal keep jsx generic might eventually go direction somehow tagging elements react implementation would implementations ie", "d": "4/2017"}, {"body": "maybe like key needs go somewhere though", "d": "4/2017"}, {"body": "slower fiber could explain details", "d": "4/2017"}, {"body": "something stopping ability drop support string refs react maybe worthwhile print warning provide clear upgrade path fully drop support react", "d": "4/2017"}, {"body": "javascript singlethreaded imagine concurrency problems since even host multithreaded expect environments isolated", "d": "4/2017"}, {"body": "error message already part assume running able update latest patch number", "d": "4/2017"}, {"body": "time need wrap option similar eg react able return value directly though eg", "d": "4/2017"}, {"body": "many write many time would like", "d": "4/2017"}, {"body": "implicitly calling would mean allowing arbitrary objects react tree lead countless app bugs since easy accidentally pass object instead string actually supported passing objects although keyed fragments rather printing strings turned confusing leading buggy apps concerned create custom component something like component could read children assert output call js function props ensure one child const onlychild reactchildrenonly propschildren ensure localization object onlychild implementation throw new error expected localization object child return onlychildtostring later render return hope helps", "d": "4/2017"}, {"body": "unfortunately second example react see incoming values assume intended pass something else looking slightly shorter syntax could something like anyway writing component maybe could encapsulate behavior somewhat nt write many calls later upgrade react remove wrappers single place jsx function data return data later become return datatostring render return hi object", "d": "4/2017"}, {"body": "yea way simpler suggestion", "d": "4/2017"}, {"body": "wow responses within minute window helpful community edit aweary since removed response making seem like ca nt count", "d": "4/2017"}, {"body": "thought fast enough go unnoticed nt want overload cwtuan answers", "d": "4/2017"}, {"body": "thanks everyone trying chain setter methods utility method return object nt want write end every time", "d": "4/2017"}, {"body": "cwtuan long object returned methods method bvaughn gaearon solution still work jsx hi values common pattern could try building component provides abstraction calling setters rough implementation give idea might look like", "d": "4/2017"}, {"body": "long object returned methods method unfortunately would nt work unless explicitly called since still type component suggestion though alternately could go overloaded method signature function returned string type instead object", "d": "4/2017"}, {"body": "unfortunately would nt work unless explicitly called tostring since still object type mean works returns another object method continue work implicitly called try concat object string", "d": "4/2017"}, {"body": "works okay example bc returns string object implicitly called try concat object string yes true react nt concatenate string except displaying invariant error heh see", "d": "4/2017"}, {"body": "hi object works okay example bc returns string object right saying work since coercing object string wrapping span yes true react nt concatenate string except displaying invariant error heh see saying concatenates string calls react internally", "d": "4/2017"}, {"body": "oh nt notice edit made thought still talking chained approach eg correct", "d": "4/2017"}, {"body": "thanks suggestion", "d": "4/2017"}, {"body": "proptypes doc live let either reinstantiate move fully standalone repo hm well proptypes github repo duplicated npm module page though also link section react docs well section react docs nt seem picked site search though", "d": "4/2017"}, {"body": "section react docs nt seem picked site search though yes think linked nt hidden sections stuff nt outright deprecate either keep visible part react website imo reasonable way go fully split seeing reference doc guide think reinstantiate guide advanced section react docs add full api reference readme guide focus using proptypes react like api doc focus api reference remove toplevel reference doc probably worth keeping link meantime", "d": "4/2017"}, {"body": "like suggested separation", "d": "4/2017"}, {"body": "sounds good", "d": "4/2017"}, {"body": "situation app stuck unknown dom prop warning yes old yes upgrade nt always time bandwidth business case spend time quieting warnings would deduplicating unknown prop warning showing first detected callsite solve issue feels like omission fixed right added warning bit silly reason people nt update past spammy warning think fix tho think reasonable rule thumb might library using public apis able support entire major version react without unfixable deprecation warnings agree reasonable guideline future line hard manage internal implicit dependencies untangling one one figured better sacrifice pain order avoid dragging issues beyond nt expect similar issues future take guideline seriously react major versions happened faster introduce warnings major bumps remove next major bump also something considering far impression people hate major releases even nt contain lot see angular addition everyone update peer deps annoying across ecosystem maybe revisit tough spot swap dep breaking change changing minimal react version required feels like one could bump major case ie react bootstrap emits warnings react lineup react bootstrap completely fixes requires compatible react versions please note even released update even people stuck previous major still upgrade long happy using latest minor major real barrier see people avoid updating minors noisy warnings like dom property one fix see make sure printed react think reasonable compromise wdyt", "d": "4/2017"}, {"body": "also something considering far impression people hate major releases even nt contain lot see angular agree generally think react may avoid problem already pretty used think angular crowd probably coming different place well major bumps sacred react nt really ever mystique versions could bump major case ie react bootstrap emits warnings react lineup yeah reason cases probably preferable unlikely app perspective tho every library author plus concern folks liking major bumps applies also case peer bump implicit hidden half way proptypes readme real barrier see people avoid updating minors noisy warnings like dom property one fix see make sure printed react think reasonable compromise wdyt yes definitely fine app maintainer dealing one warning reminding easier convince dev team warning fine users libraries maintain p", "d": "4/2017"}, {"body": "flarnie look deduping dom property warning part getting", "d": "4/2017"}, {"body": "situation app stuck unknown dom prop warning yes old yes upgrade nt always time bandwidth business case spend time quieting warnings would deduplicating unknown prop warning showing first detected callsite solve issue feels like omission fixed right added warning bit silly reason people nt update past spammy warning think fix curious use case causes warning get logged many times nuisance passing nonstandard props div span seems like would come parent spreads props noncustom component like missing common situation happens imagine application authors might prefer everywhere distant leaf receives data root tree data format changes nt make changes components part problem redux relay etc address even case places rendering noncustom components like div span could still pick specific props need still going work pr hoping understand root cause issue think concern library authors makes sense issue adding warnings minor versions react may show libraries use react", "d": "4/2017"}, {"body": "third party component libraries used often spread everything less typing caused literally hundreds warnings people using eg react bootstrap want people fix really overwhelming scary especially control library causes panic issue trackers libraries", "d": "4/2017"}, {"body": "boat would love specific date know stand", "d": "4/2017"}, {"body": "also waiting reactfiber optional right version react fiber right", "d": "4/2017"}, {"body": "start release wo nt notable breaking changes api except async setstate need follow recomentation", "d": "4/2017"}, {"body": "hey wonder specific place concerns coming blog post raising panic like know reactfiber optional right version react fiber yes react using fiber compatibility mode async features disabled better compatibility wo nt notable breaking changes api except async setstate incorrect way react operates compatibility mode changes plan officially releasing reactfiber dont want doomed fiber new react api internals changed api stays virtually breaking changes react associated fiber breaking changes react moving another package completely unrelated fiber part regular deprecation cycle described blog post provide automatic scripts codemods update code deprecating apis give time migrate see warnings using means code ready react comes plan officially releasing reactfiber dont want doomed doomed fiber works box existing components facebook codebase likely work codebase start react fix deprecation warnings see wait third party components fix ready jump ahead react app work would love specific date know stand specific date likely going released summer know exactly point waiting like point waiting react react regular version update works way reading design principles stability new versioning scheme hope addresses concerns", "d": "4/2017"}, {"body": "far tell using react since core api always stable underlying principles remained time except breaking changes mostly due language evolutions like createclassmixins gt class probably start react n migrate react without much pain expect remain true future well bonus codemods provided help sometimes migration done minutes", "d": "4/2017"}, {"body": "attest using react almost two years never breaking change old features deprecated next release continue work removed release usually least months later always upgrade latest version couple months gradually update code relatively simple thanks codemods warnings tell exactly change compare example angular major releases require update entire app stuck old version", "d": "4/2017"}, {"body": "question gaearon yes react using fiber compatibility mode async features disabled better compatibility way enable async features even forward leaning codebases theytheir documentation incomplete react", "d": "4/2017"}, {"body": "way enable async features even forward leaning codebases still figuring codebases likely unstable api track discussion known bugs async mode", "d": "4/2017"}, {"body": "adding fixed issue final", "d": "4/2017"}, {"body": "note really encourage inheritance components", "d": "4/2017"}, {"body": "basically using private api overriding internal method break patch version please avoid unless okay fragile code need customization could send pr add customizations need props get fork customize use case manually", "d": "4/2017"}, {"body": "versions packages exactly using specific message could false positive described", "d": "4/2017"}, {"body": "react version proptypes yarn upgrade getting abit different warnings ignore dang reactrouter outdated fixed issue think ill update", "d": "4/2017"}, {"body": "publish project reproducing really help even see old library version maybe still bug side", "d": "4/2017"}, {"body": "well kinda trying fix project since everything broken currently reduxasyncconnect deprecated using old libs old react version screams find reactasyncconnect bah hope fix", "d": "4/2017"}, {"body": "going close since clear whether issues react particular error message looks might react bundle somewhere make sure update fixes false positive warning", "d": "4/2017"}, {"body": "perhaps warning used instead causes scripts running exit error code failing tests", "d": "4/2017"}, {"body": "thanks feedback plan use deprecation warnings future", "d": "4/2017"}, {"body": "awesome thanks response sorry hasty angry comment frustrating afternoon debugging integration tests casperjs phantomjs apparently bail stderr gets consoleerror april dan abramov notifications githubcom mailto notifications githubcom wrote thanks feedback plan use consolewarn deprecation warnings future receiving commented reply email directly view github mute thread", "d": "4/2017"}, {"body": "know cases people choose treat failures explicitly familiar tools automatically fwiw using deprecations since react something new time provide stack trace ready revisit since chrome", "d": "4/2017"}, {"body": "nt aware tools either issue came seems strange thing honestly frustratingly real behavioural failure consoleerror causing error code going watch warnings issue thread keep date undoubtedly way change headless browser test runner fastest thing get tests pass freeze react version", "d": "4/2017"}, {"body": "also try overriding maybe works maybe nt", "d": "4/2017"}, {"body": "possible try might unintended consequences though need proceed cautiously thanks help", "d": "4/2017"}, {"body": "thanks report danbovey appears expected behavior example shows setting element update update parent media element consistent firefox chrome look ways around use elements force react create new dom elements seems provide behavior looking", "d": "4/2017"}, {"body": "cool like said thought browser issue nt know much submitting bugsfeature request browser vendors hopefully existing conversation means closed react problem", "d": "4/2017"}, {"body": "yeah close since apparently expected easy workaround", "d": "4/2017"}, {"body": "thanks request srph think good idea currently use instead controlled checkbox looks like working input remains uncontrolled value updated state elsewhere wo nt update dom would like submit pr", "d": "4/2017"}, {"body": "prop helpful use native form sending data server responsible actual value gets sent server checkbox checked form submitted example would get submitted checked could exactly server expects default behavior submit could possibly exactly want course using native forms submitting data nt really common singlepage apps far know react nt enforce apps using singlepage understand issue pseudocontrolled checkboxes though maybe warning arise handler attached prop provided regardless presence", "d": "4/2017"}, {"body": "understand issue pseudocontrolled checkboxes though maybe warning arise onchange handler attached checked prop provided regardless presence value think exactly warning", "d": "4/2017"}, {"body": "ok think make pr kind warning apply controllable elements text inputs selects etc", "d": "4/2017"}, {"body": "really sure handler uncontrolled component antipattern one docs say write uncontrolled component instead writing event handler every state update use ref get form values dom explanation", "d": "4/2017"}, {"body": "oh nt notice already open pr issue questions still discussed though", "d": "4/2017"}, {"body": "really rocky release iirc anything flawed broken way ever skip bad versions changelogs nt want give people impression updating eg safe would handle additionally different addons different breakages different patch versions lined even sure matters used sync main version anymore", "d": "4/2017"}, {"body": "would still ensure git tags would probably add changelog include version broken even go step make sure versions personally say embrace brokenness open happened fixed yea avoided getting sync much possible long happen move outofsync monorepos though time like present figure started fbjs make tags sure best thing", "d": "4/2017"}, {"body": "want add note yanked see", "d": "4/2017"}, {"body": "think ok broken releases tagged github working one release github otherwise people using download get", "d": "4/2017"}, {"body": "draft changelogs soon stof right could probably skip broken versions imagining anyone whatever reason ended downloading broken versions could useful see info version falls timeline would ok us skip annotating versions like add notes case someone finds helpful", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "one symptom broader problem tutorial unlike docs section written scratch tutorial adapted internal tutorial use facebook representative teach react js engineers include important information like prerequisites compile code get running locally regular docs section tutorial section prerequisites section installation think least link tutorial slightly duplicate would like work", "d": "4/2017"}, {"body": "yeah", "d": "4/2017"}, {"body": "honest would great somebody could pass tutorial fill assumed bit explanations links confusion points context way still think reasonable middle ground hope could help us find", "d": "4/2017"}, {"body": "starting tutorial type coming vanilla nodejs experience post anything similar arises", "d": "4/2017"}, {"body": "gaearon want tackle one pr split", "d": "4/2017"}, {"body": "brigand whichever way works best think make controversial batched change easier review", "d": "4/2017"}, {"body": "gaearon know super unusual tutorials read issues inclined add nonlinear information feel like repeating things adding logical connection useful beginners advanced readers annoying helpful side simple elaborate button expands extra paragraph walks going section nt clear reader give option giving got ignore button guessing nt going happen bring", "d": "4/2017"}, {"body": "think partly got fixed nt mind seeing experiment nonlinear fragments make proof concept", "d": "4/2017"}, {"body": "think important fix issues overall flow like could look addressing first", "d": "4/2017"}, {"body": "giorgim think setstate request rather immediate command update component better perceived performance react may delay update several components single pass react guarantee state changes applied immediately assuming react enqueuing state changes executing executed order example output example output", "d": "4/2017"}, {"body": "hanumanthan want ensure always keep track latest value state followed read operation like also maybe time react puts doc explaining pitfalls one encounter managing state", "d": "4/2017"}, {"body": "need keep track latest value state would easier answer explained use case detail right confusing call read generally ever need read state like since one set already value", "d": "4/2017"}, {"body": "words sounds like abstract question hard answer without confusing would much easier answer provided snippet real product code trying solve specific problem", "d": "4/2017"}, {"body": "simplest answer question want keep track latest value state log", "d": "4/2017"}, {"body": "gaearon thanks think btw asynchronicity setstate seen confused many developers making setstate async worth maybe better synchronous example would grateful respond question", "d": "4/2017"}, {"body": "asynchronicity setstate seen confused many developers making setstate async worth yes totally worth especially bigger apps improve api make less confusing future definitely go back synchronous updates example would grateful respond question looked question way schedule timeout inside updater function confusing updater functions pure describe state changes supposed trigger side effects like setting timeouts mutate parts state like long exited callback way keep track async operation also confusing event fires soon several cells set flag think code show bugs case react apis relies wrong assumptions eg two cells clicked faster one second would easier answer question created small example eg codepen jsbin explained exactly code supposed likely simpler way satisfy requirements model state different way hard help code example abstract line original requirements implementation clear", "d": "4/2017"}, {"body": "ah see yes sorry missed guess confused overall flow code would really help know want work could write reacty version", "d": "4/2017"}, {"body": "gaearon dan many cells set inprocess flag beginning function see checking quiting function set", "d": "4/2017"}, {"body": "see reply", "d": "4/2017"}, {"body": "gaearon think okay ps code project timeout need ui effect", "d": "4/2017"}, {"body": "think confusing part setting state want set timeout based state timeout set state think split timeoutrelated part logic lifecycle hook code could easier understand might also better way model state matching game seems like state machine different valid states nothing selected one item selected waiting two right items selected two wrong items selected might worth encoding possible game states directly component state think carefully represent objects example might instead array cell values easier think explicit state like implement conditional logic eg js handleclick e waiting timeout reset thisresettimeout cleartimeout thisresettimeout const id get target node bind event handler id render thissetstate prevstate gt prevstatefirstselectedcell null amp amp prevstatesecondselectedcell null one selected cell clicked second one return secondselectedcell id selecting first cell either clicked reset none selected return firstselectedcell id secondselectedcell null componentdidupdate prevstate prevstatesecondselectedcell thisstatesecondselectedcell picked second cell issamepicture thisstatesecondselectedcell thisstatefirstselectedcell picture keep open thissetstate prevstate gt add opened cells reset return firstselectedcell null secondselectedcell null openedcells prevstateopenedcells prevstatefirstselectedcell prevstatesecondselectedcell else clear second thisresettimeout settimeout gt thissetstate firstselectedcell null secondselectedcell null method show cells either omitted details hope gives something get started hopefully provides view idiomatic react approach", "d": "4/2017"}, {"body": "gaearon thanks think suggestion think since code works nt obvious bugs least may leave incorporate suggestion maybe future projects", "d": "4/2017"}, {"body": "yea sure original code looks okay started using updater form least current version react work fine way using updater form wrong said nt trigger side effects also nt reference parts state later mutate independently suggest sticking simpler version objects case today version react difference matters called multiple times event handler updater form works better case triggered would nt bother using decide use please make sure function pass pure hope approach suggested shows", "d": "4/2017"}, {"body": "gaearon started using updater form setstate mean dan got confused last message times part code refer psi think time facebook puts official doc named smth like state management react explains pitfalls best practices state management given much confusion net", "d": "4/2017"}, {"body": "meant code github project calls object made sense one stackoveflow question using function version generally preferred use right must pure otherwise complicates code without benefits ps everything say topic already docs please check state lifecycle wink functional overload little confusing working solved better apis rather documentation keep mind", "d": "4/2017"}, {"body": "gaearon look question two versions say makes sense case ca nt theoretically run case clone state third fourth statement clickhandler get old state previous setstates pending", "d": "4/2017"}, {"body": "current version react inside event handler current state call wo nt get updated immediately", "d": "4/2017"}, {"body": "call setstate thisstate wo nt get updated immediately could ps endorse first version code included question give answer stack overflow accept may also help others", "d": "4/2017"}, {"body": "answered", "d": "4/2017"}, {"body": "gaearon dan explain first code snippet click first show code snippet author inside reads state reads old state value gets incremented even though eventhandler seems contradict put answer least react earlier reading thisstate first setstate call event handler give current state expect updated immediately setstate", "d": "4/2017"}, {"body": "reading thisstate first setstate call event handler give current state code snippet event handlers called simultaneously thisstate event handler gets correct value whereas thisstate event handler read setstate called inline answer says thisstate first setstate correct value giorgim", "d": "4/2017"}, {"body": "hanumanthan gaearon really citing time reply react earlier versions thisstate event handler safe read second time event handler called entering brand new event handler dan said hold course read state event handler point modify event handler called dan said nt hold question answer also nt make much sense case appears safe read event handler nt", "d": "4/2017"}, {"body": "hanumanthan gaearon another citation form dan makes us doubt meant quote call setstate event handler timeout happens later pitfall multiple consecutive calls apply however saw code snippet clicked button despite two independent event handlers called state went sync eg nt called consecutively dan says event handler still went sync would nice dan clear", "d": "4/2017"}, {"body": "components intentionally encapsulated want modify dom generate quite html clear need pass different props teach return different elements response use case", "d": "4/2017"}, {"body": "hi link react documentation might help think really helpful provides lot informations resources help start opinion reason separate issue", "d": "4/2017"}, {"body": "yea think exactly doc looking also implementation notes doc next rewriting react right bit confusing implementations checked soon delete old one", "d": "4/2017"}, {"body": "pavelsuraba thanks responding citing link gaearon wait react land", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "right tada fri apr pm dan abramov notifications githubcom wrote receiving authored thread reply email directly view github mute thread", "d": "4/2017"}, {"body": "ok find plugin resolve problem smallassetrequirehook source", "d": "4/2017"}, {"body": "fixed thanks", "d": "4/2017"}, {"body": "hi splitting intentional decision libraries time migrate react put move notice rather later also automated codemod use update apps libraries read blog happy answer specific concerns look actionable closing explained motivation behind change detail", "d": "4/2017"}, {"body": "yea really compatible gcc right also places went clear code rather gcc compat nt think makes sense fix gcc compat oneoffs keep breaking instead probably investigate enabling default build process switching flat bundles trueadm interested", "d": "4/2017"}, {"body": "gaearon makes sense want note since clojurescript allows build js deps directly npm means potentially issue blocks transition new build pipeline trueadm help somehow please let know thanks", "d": "4/2017"}, {"body": "releasing flurry versions due newly discovered bugs deprecations package split cut four packages seven patch versions week catch push changelog confident stable tldr use latest patch version available", "d": "4/2017"}, {"body": "real curious change", "d": "4/2017"}, {"body": "much interesting stuff mostly botched packages publish mistakes", "d": "4/2017"}, {"body": "bit information available going done deprecate broken builds", "d": "4/2017"}, {"body": "hi well aware problems context however react focused getting completely rewritten engine fiber door much backwards compatibility know libraries depend context api fundamental flaws flaws exactly called experimental unlike apis know need change solve future releases provide migration path libraries like need migration path code sum wo nt might wo nt remove experimental label api actually like fundamental flaws solved", "d": "4/2017"}, {"body": "try way still like error use type comments", "d": "4/2017"}, {"body": "using jsx need wrap comments around curly braces", "d": "4/2017"}, {"body": "forgetaboutme exactly right using work fine example hope helps", "d": "4/2017"}, {"body": "thank guys last day use say define", "d": "4/2017"}, {"body": "please provide full code example issues", "d": "4/2017"}, {"body": "cc aweary", "d": "4/2017"}, {"body": "thanks report haydnchen verified bug issue found root cause", "d": "4/2017"}, {"body": "give insight issue caused reactdominputjs input default example number entered updated since parsed considered differnet never updated check meant prevent issues values like sure address yet may stringbased comparisons top existing check determine cases like updated", "d": "4/2017"}, {"body": "really tricky looks like standard browser behavior allow value need careful make users feel like control taken away code aweary points also addresses case typing number input technically reports type another number chrome number input reports values follows like type negative number tough think something string comparison lefthand zeroes aweary happy help dig least please let know answer questions", "d": "4/2017"}, {"body": "nhunzaker got work towards locally happy keep working hoping could avoid relying string comparisons looking like way fix soundly", "d": "4/2017"}, {"body": "happen development environment simulating real browser event execute event listener another event type dispatched event listener shown reacterrorutils race condition execution removal event listener maybe avoid reuse generate different event type every time also tried removing event listener real event listener executed nt work ie", "d": "4/2017"}, {"body": "status issue", "d": "4/2017"}, {"body": "deprecate reactdom factories reference existing work remove junk code proptypes prod build nt use bundlecollapser ships method names eg fbjslibinvariant fixable add p bundlecollapserplugin browserify call additionally seems junk invariant code easy fix turn inlined error created issue new repo", "d": "4/2017"}, {"body": "encouraging people stop using createclass proptypes deprecating bad nope moving yes make clearer want crystal clear projects removed stuff like usually means death sentence features responders rails come mind important part noting features nt going away access changing maybe drop depreciation wording replace moving deprecating imports kind message want send", "d": "4/2017"}, {"body": "calling deprecation common intuition deprecated stuff longer maintaining keeping around avoid api incompatibilities nt use anymore see moving sounds bit better", "d": "4/2017"}, {"body": "awesome suggestions flarnie happy see bullet points touch communication topics way difficult embrace technical stuff sometimes managing library lot people uses though like warnings nt know prefer red error look deprecation catch better developer attention", "d": "4/2017"}, {"body": "awesome suggestions flarnie happy see bullet points touch communication topics way difficult embrace technical stuff sometimes managing library lot people uses completely agree think especially difficult since react team core decisions made via internal discussions fb nt sustained effort communicate oss community would love see work towards making less opaque maybe start publishing meeting notes consumers library maintainers contributors project", "d": "4/2017"}, {"body": "though like warnings nt know prefer red error look deprecation catch better developer attention complete hack totally actually done sorta console message styles silly could idea pursue make visually distinct", "d": "4/2017"}, {"body": "unfortunately wo nt work browsers node afaik", "d": "4/2017"}, {"body": "proptypes doc live confusing still react object inaccessible website search table contents let either reinstantiate move fully standalone repo also confusing deprecating createclass still lives docs react without whereas moving proptypes gone docs splitting separate issue", "d": "4/2017"}, {"body": "question running issue", "d": "4/2017"}, {"body": "looking transpiled code assumption correct gets attached stubbing method creating component instance possible workaround stub action creator actually data fetching gets called", "d": "4/2017"}, {"body": "try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms like reactiflux discussreactjsorg stackoverflow know said tried stackoverflow reactiflux may best option somewhat active channel testing", "d": "4/2017"}, {"body": "super helpful forgot testing channel reactiflux thanks aweary", "d": "4/2017"}, {"body": "paste link question anyone opens thread find", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "means see stack trace", "d": "4/2017"}, {"body": "sorry turned longer post expected thinking warnings stuff like time seems recall correctly ago react used use warnings changed get stack traces mentioned always warning messages pretty sure module produces called currently currently public api users hook warnings react generates sort thing useful number reasons one giving users control warnings generated test suites converting test suite warnings errors pretty widespread suggested core change change messages different type core team quite reasonably thinks messages different category others nt fail build number users upgraded warnings react produces default even stronger think fail build think using make distinction categorising done inside core suboptimal solution api changes cost aforementioned widespread hooking consoleerror think change unfortunately api change unclear exactly impact ecosystem ecosystem impact users decide want handle new types warning test suites elsewhere perhaps good time make larger arguably better futureproof change one things mentioned number issues link pluggable errorswarnings api api would able classify warning react produces cause allow user decide action take based default behaviour could match suggested op extension point would provide control example might want configure test suite fail proptype warnings fail general dev warnings fail missing key warnings record deprecation warnings file moment way something like matching strings suggested change think moves us away rather closer", "d": "4/2017"}, {"body": "api changes cost aforementioned widespread hooking consoleerror think change unfortunately api change unclear exactly impact ecosystem whatever impact likely lower us adding new minors would nt worry much better future moment way something like matching strings suggested change think moves us away rather closer fwiw matching strings exactly fb worked fairly well", "d": "4/2017"}, {"body": "means see stack trace montogeek stack trace available least chrome", "d": "4/2017"}, {"body": "whatever impact likely lower us adding new consoleerrors minors would nt worry much better future think make less builds fail sure anyone monkeypatching consoleerror cause failures probably wanted fail assuming know happening need expand monkey patching obviously opposite case newcomers put load warnings caused dependencies nt control appreciate balance priorities importance stuff fwiw matching strings exactly fb worked fairly well right seems pretty error prone manageable case fb control output matching code like text changes warning messages guaranteed get called release notes clearly used api pleeeeeeeease make explicit one", "d": "4/2017"}, {"body": "kind api propose previous attempt building extension points failed even exposed overabstracted introduced much ceremony slow need able quickly add change remove warnings explicit api opting different kinds warnings likely slow us release process already slow error prone might experienced feel like ability whitelist blacklist based substring matches might best tradeoff like explore doubts sophisticated techniques like text changes warning messages guaranteed get called release notes well internally added script prints warning messages run every sync see diff might well commit file repo would able see changes versions", "d": "4/2017"}, {"body": "least would nice access warnings via constants would make blacklist whitelist easier", "d": "4/2017"}, {"body": "well internally added script prints warning messages run every sync see diff might well commit file repo would able see changes versions sounds like great idea kind api propose strawman start discussion order make change described op think warnings lib would need take param errorwarning perhaps building new warning lib might expose signature like category could free string perhaps flow enum set categories nt change often messages would probably fairly straightforward consumer manage keeping consumerfacing api trickier prospect starting point discussion something really specific category mentioned would keep default behaviour perhaps guarantees warnings raised could similar api error boundaries handleerror used clearly suggestions nt likely quick easy put practice current state problem proposed solutions existed years something special means quick change needs dropped", "d": "4/2017"}, {"body": "came propose exactly warning use appropriate consolewarn api error people using unit tests fail consoleerrors doomed using", "d": "4/2017"}, {"body": "digging code found root problem chrome bug sure workaround", "d": "4/2017"}, {"body": "ouchxp great find nt think need address react case thanks looking", "d": "4/2017"}, {"body": "packages misses dependency package right", "d": "4/2017"}, {"body": "yep", "d": "4/2017"}, {"body": "fwiw proptypes list license think one files going tag acdlite since looks like made changes proptypes nt pushed branches", "d": "4/2017"}, {"body": "going tag acdlite since looks like made changes proptypes nt pushed branches source truth move maybe delete folder branches", "d": "4/2017"}, {"body": "oh right andrew mentioned one point forgot add license patents file point release proptypes", "d": "4/2017"}, {"body": "think couple additional things need createreactclass add docs least link main docs currently says documentation wip add peer deps react callback issue currently peer deps release peer deps recentlyadded dep", "d": "4/2017"}, {"body": "formerly would set default seems omitted intentional thanks", "d": "4/2017"}, {"body": "createreactclass still dev mode", "d": "4/2017"}, {"body": "think jdickson referring babel inferring automatically case call afaik waiting babel release acdlite clarify codemod providing see blog post adds manually existing classes", "d": "4/2017"}, {"body": "oh", "d": "4/2017"}, {"body": "fixed reactaddonscreatefragment thanks", "d": "4/2017"}, {"body": "misreading something console screenshot attached shows render logged componentdidmount maybe referring line numbers rather order consolelog statements line declare log call source", "d": "4/2017"}, {"body": "see warning component using third party one accesses please look stack trace find component causing file issue relevant library send pr warning disappear packages use updated rely gone react use standalone package instead hope helps", "d": "4/2017"}, {"body": "gaearon appreciate quick response", "d": "4/2017"}, {"body": "warnings always disabled production builds missing something", "d": "4/2017"}, {"body": "would imagine promise chain returned render may even elegant something effect", "d": "4/2017"}, {"body": "well yeah even better decision needs made whether let returned promise completely replace callback breaking change wrap callback nonbreaking change", "d": "4/2017"}, {"body": "nt think callback promise chain would need breaking change could give deprecation warning used break later", "d": "4/2017"}, {"body": "seem like something went wrong packaging need take closer look", "d": "4/2017"}, {"body": "fixed based initial testing making another release", "d": "4/2017"}, {"body": "reacttestrenderer released fix", "d": "4/2017"}, {"body": "thank quick fix", "d": "4/2017"}, {"body": "inline isvalidelement nt", "d": "4/2017"}, {"body": "would much better remaining reason airbnbproptypes depends react isvalidelement", "d": "4/2017"}, {"body": "done", "d": "4/2017"}, {"body": "btw proptypes lives", "d": "4/2017"}, {"body": "omg separate repo may want update repo field still points one", "d": "4/2017"}, {"body": "fixing", "d": "4/2017"}, {"body": "hmm perhaps need karma phantomjs test check kind thing future", "d": "4/2017"}, {"body": "fixed want give another try", "d": "4/2017"}, {"body": "projects mkdir projects cd yarn add react yarn add info lockfile found resolving packages fetching packages linking dependencies building fresh packages success saved lockfile success saved new dependencies asap corejs encoding fbjs iconvlite isstream isomorphicfetch jstokens looseenvify nodefetch objectassign promise proptypes react setimmediate uaparserjs whatwgfetch done cat nodemodulesproptypeslibreactproptypessecretjs copyright facebook inc rights reserved source code licensed bsdstyle license found license file root directory source tree additional grant patent rights found patents file directory use strict const reactproptypessecret secretdonotpassthisoryouwillbefired moduleexports reactproptypessecret", "d": "4/2017"}, {"body": "looks like dependency correct", "d": "4/2017"}, {"body": "ahhh see problem yep", "d": "4/2017"}, {"body": "fixing", "d": "4/2017"}, {"body": "released", "d": "4/2017"}, {"body": "usual procedure longawaited release", "d": "4/2017"}, {"body": "fixed locally", "d": "4/2017"}, {"body": "awesome sorry trouble thanks quick report", "d": "4/2017"}, {"body": "strange actually still", "d": "4/2017"}, {"body": "manuelbertelli yep fixed", "d": "4/2017"}, {"body": "expected behavior dev proxy synthetic event", "d": "4/2017"}, {"body": "guys may know already calling onclick handler like passed function written default parameter like showcreateacctformone caonedisplaymsg compiled code key showcreateacctformone value function showcreateacctformone var caonedisplaymsg argumentslength lt arguments undefined arguments proxy assigned instead default", "d": "4/2017"}, {"body": "saw closed glad know yes dev yes workaround obvious", "d": "4/2017"}, {"body": "problem likely js componentwillreceiveprops nextprops thisupdateplace updateplace props thisprops gt ignoring uses current props next props received probably fix replacing said fact trying sync props state looks like code smell recommend use react something already props need duplicate state instead use directly wherever need lift state necessary", "d": "4/2017"}, {"body": "also try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms like reactiflux discussreactjsorg stackoverflow", "d": "4/2017"}, {"body": "provide full project please", "d": "4/2017"}, {"body": "using rolluppluginreplace rollupplugincommonjs commonjs plugin eliminates dead branches solve exactly problem depends replaced commonjs transformation takes place", "d": "4/2017"}, {"body": "trueadm suggested chat could wrap whole dev bundle condition opposite prod bundle way would nt affected incorrect setup", "d": "4/2017"}, {"body": "well using seems worked apologies come webpack world order plugins hardly matter uglifyjs mainly responsible removing development code richharris document somewhere since people may get caught nt find mention cjs plugin dead code elimination docs issue linked earlier slightly misleading", "d": "4/2017"}, {"body": "fwiw mentioned docs think might better protect bad configs side", "d": "4/2017"}, {"body": "open issue plugin order generally truthfully kind hard problem goes territory time plugin system getting plugins interact well going tricky nt found solution completely happy open ideas added line rolluppluginreplace readme hopefully reduce potential confusion", "d": "4/2017"}, {"body": "yep thanks actually deleted link content synced docs yet curious nothing interesting html file content doc", "d": "4/2017"}, {"body": "problem", "d": "4/2017"}, {"body": "sounds like feature causing problem server side generated html payload pass htmlminifier problem exactly", "d": "4/2017"}, {"body": "minify html rendered react last inline styles stripped client performs reconciliation react sees difference warn removing last inline styles would prevent spare bandwidth users relying solution using style injection", "d": "4/2017"}, {"body": "minify html rendered react last inline styles stripped client performs reconciliation react sees difference warn reconciliation works moment computes hash client checks however error message highlight semicolon possible culprit nt know sure server generated tries make best guess worked would nt allowed run minifier code change would trip react tl dr semicolon actually problem", "d": "4/2017"}, {"body": "removing last would least spare bandwidth", "d": "4/2017"}, {"body": "problem nt work example posted", "d": "4/2017"}, {"body": "sorry example work fine try generate similar example later worked", "d": "4/2017"}, {"body": "think describing work long take account child render parent refs set initially unless explicitly prevent example variable going close since actionable item question", "d": "4/2017"}, {"body": "also another code path", "d": "4/2017"}, {"body": "please create minimal reproducing example otherwise ca nt really help way diagnose happened", "d": "4/2017"}, {"body": "yes trying figure goes wrong suspect something detached dom trees least", "d": "4/2017"}, {"body": "see actually ca nt get work select still says selected works fine though", "d": "4/2017"}, {"body": "yeah react seems totally broken breaks update state way even without selectelement nt codepen breaking", "d": "4/2017"}, {"body": "looks like bug rc", "d": "4/2017"}, {"body": "created jsfiddle using contains controlled text input controlled counter seeing error reported codepen basic state updates appear working fine", "d": "4/2017"}, {"body": "codepen comparing string value numeric value makes appear fail edit actually masking another error one acdlite flarnie discussing last night uncaught typeerror read property nodetype undefined functioninserttreebefore noticed error running reactvirtualized unit tests nt yet tracked cause though", "d": "4/2017"}, {"body": "appears related reconciliation render output different specifically remove two lines conditionally render works fine add lines jsfiddle break node removed readded", "d": "4/2017"}, {"body": "aweary suspicious made significant change controlled inputs think related", "d": "4/2017"}, {"body": "nhunzaker nt think looks like lazy tree updates expect update actual node passed string", "d": "4/2017"}, {"body": "nhunzaker caused breaks without", "d": "4/2017"}, {"body": "nhunzaker aweary fwiw cherrypicked commits branch rest changes deprecations small relocations cherrypicked commits fix chrome number input backspace invalid input issue add component stack invalid element type warning fix test renderer unmount delete nosideeffect annotation change order function declaration object assignment bump fbjs", "d": "4/2017"}, {"body": "afaict issue stems fact insertmarkup update sets string update handled handled domlazytree method expects node tree sure relates commits yet", "d": "4/2017"}, {"body": "might properly set would cause string markup nt appropriate checks place use false could throw error seeing screenshot usecreateelement undefined screenshot mountimage", "d": "4/2017"}, {"body": "adding looks like due wrong transaction type getting injected nt track nt used production", "d": "4/2017"}, {"body": "code shallow renderer included parsed cc gaearon trueadm looks like probably related new build process go search see shallow renderer code included causing problem", "d": "4/2017"}, {"body": "new build process react master good investigation though", "d": "4/2017"}, {"body": "nice find aweary dan right build process bit oneoff", "d": "4/2017"}, {"body": "code shallow renderer included parsed changes", "d": "4/2017"}, {"body": "fixed fix go next rc release moments", "d": "4/2017"}, {"body": "sorry inconvenience thanks reporting jochenberger help identifying cause aweary rock", "d": "4/2017"}, {"body": "took us bit longer anticipated rc released fixes issue thanks reporting", "d": "4/2017"}, {"body": "quite possible build process broken windows rewrote would like help fix", "d": "4/2017"}, {"body": "seems like warningjs resolved githubreactnodemodulesfbjslibwarning lack extension like js", "d": "4/2017"}, {"body": "itt due rolluppluginalias isfilepath work windows see issue", "d": "4/2017"}, {"body": "thanks request existing issue tracking additional input please share", "d": "4/2017"}, {"body": "hey pomax taking time write hocs great think agree great however react opinion people implement hocs users authors alike guideline comes implementing consistent api using multiple hocs especially hocs get chained doc page higherorder components official react docs suggestions could add make clearer robust better documentation discussions focusing best practices might better expanding public api describe problem right established way ask hoc component class es put established way access real element hoc wraps nt hoc typically function takes single component class returns another composing expand hocs multiple classes passed referring utilities like take multiple hocs compose component class think offering classbased hoc solution would probably moving wrong direction existing hocs typically functions composed using functional patterns order make work naming convention needs declared around refs use reacthoc name refs component class pushed standardizing access elements recommended naming pattern nt likely work either since string refs legacy api gaearon makes good points problem thread linked well acdlite worked hocs extensively others love hear thoughts", "d": "4/2017"}, {"body": "mostly trying think good solution hoc functions return object api accessing actual content wrapped even share nothing else admit seen hocs take one component class input wild sure seem technically nothing docs code prevent writing hoc like admit writing feels super weird react happily run write hoc way hocs wrap single component could thing point main thing looking docs authority saying million ways add functionality hoc users get original component class elementasrendered way code able interoperate hocs follow suggested pattern course half step away following nt want copypaste code time purely functional hoc hoc return custom component make component extend reacthoc instead reactcomponent use reactcreatehoc rather reactcreateclass might misnomers guess technically would reacthocclass reactcreatehocclass first admit super inconvenient read write purely functional hocs right solution falls short think aspect bit harder hoc composes full class needs hook lifecycle methods made come fully qualified component perspective love hear thoughts ensure way get original component classelement hoc chain fully qualified component hocs purely functional hocs though problem seems come time never quite big enough boil really need fix everyone rolling solutions probably come something better", "d": "4/2017"}, {"body": "referring utilities like compose take multiple hocs compose component class original problem described linked comment thread starter post standard way b geting access c ref scenario think offering classbased hoc solution would probably moving wrong direction existing hocs typically functions composed using functional patterns agree moving things direction heading nowadays perspective much need new apis best practices documented kinda protocol might applied make hocs interoperable standardizing access elements recommended ref naming pattern nt likely work either since string refs legacy api standard name doesnt contain string value would work functions well hoc doesnt know stop possible leak special example name prop wrapped component call directly exposing ref hocs might worst thing world probably would allow extra patterns emerge like wrapped component finally calling function something else would enforce wrapped component aware wrapped sounds right", "d": "4/2017"}, {"body": "aweary gaearon acdlite thoughts would love push issue forward include documentation section", "d": "4/2017"}, {"body": "hey using controlled components could potentially serialize state using submit post request library like try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms like reactiflux discussreactjsorg stackoverflow", "d": "4/2017"}, {"body": "better problem solving", "d": "4/2017"}, {"body": "vijaybritto think second option saves time u dont worry nt place jsx code inside element updated description bit thank important comment", "d": "4/2017"}, {"body": "method definition function call receives parameters called place ca nt pass values definition like method class similar function object like may clear", "d": "4/2017"}, {"body": "sure understand utility particular suggestion react allow returning arrays fragments render method think satisfy use case", "d": "4/2017"}, {"body": "use development version react like see warning reason planning change behavior match clearing field used mean something else namely switching component uncontrolled warn nt recommend setting clear input set value empty string instead", "d": "4/2017"}, {"body": "please see", "d": "4/2017"}, {"body": "gaearon instead fixing solution document bad behavior", "d": "4/2017"}, {"body": "mean fixing behavior intentional pass arrow function referentially different every time react way know function code clean old ref set new ref case turn truly different functions cleaning necessary avoid stale references memory leaks code matter avoid make ref callback class property something change every render running case matter please describe generally recommend setting field ref callback something sophisticated might better move logic lifecycle hook", "d": "4/2017"}, {"body": "mean fixing behavior intentional pass arrow function referentially different every time react way know function code clean old ref set new ref case turn truly different functions cleaning necessary avoid stale references memory leaks nt know implemented end user probably nt need know saying bug function nt need called actual value however implement fix nt matter outside perspective sure way implementation call proper value running case matter please describe passing props directly props nt desiring write extra class method time nt want write extra class method pass along prop also outer component using component nt necessarily know component use function outer component author nt worry passed function possibly awkwardly called twice expected values render", "d": "4/2017"}, {"body": "documented still bug", "d": "4/2017"}, {"body": "behavior intentional desire behavior ref functions called twice update proper values benefit bring", "d": "4/2017"}, {"body": "believe explained intentional comment pass arrow function referentially different every time react way know function code clean old ref set new ref case turn truly different functions cleaning necessary avoid stale references memory leaks repeating bug productive way frame discussion bug even behavior little confusing mentioned happens technically passing new function every time react clean avoid memory leaks stale refs case really different function code unfortunately javascript give us way tell certainty play safe want call function every time ref update hooks component expose detail api parent keeps reference node might memory leak unless call unmounting react also point see code able handle unmounting might well updates understand surprising believe explained happens referentially functions different", "d": "4/2017"}, {"body": "pass arrow function referentially different every time react way know function code clean old ref set new ref case turn truly different functions cleaning necessary avoid stale references memory leaks mentioned happens technically passing new function every time react clean avoid memory leaks stale refs case really different function code unfortunately javascript give us way tell certainty play safe understand correctly describing implementation detail supposedly reason ref functions called twice however saying outerapi enduser perspective nt care implementation reason behavior bug outerapi design perspective read correctly saying reason passes implementation behind api designed try prevent endusers react api creating memory leaks implementation detail describing nt necessarily stop leaks example take following ref function jsx el return thisel el gt notice passing userdefined ref function prevent memory leaks top caused enduser write extra conditional check believe saying passing likely set enduser component property forcing old value collected assumption always correct showed last example general ca nt really guarantee api makes enduser code memoryleak free least current implementation api surface vast majority javascript libraries framework existence preventing memory leaks job app developer writing app library author library internals library used app developer lines nt blend library authors ca nt really prevent app developers writing memory leaks implementation prevents memory leaks fraction use cases library implementation prevent outerapiside appdeveloper leaks needs prevent leaks possible use cases outerapi guarantee memoryleak prevention areas outside api control currently react ref function api nt control goes inside ref function therefore nt necessary call ref functions reduces possible enduser memoryleaks unknown percentage want prevent memory leaks refs certain way go back deprecated string method refs make readonly fe freeze object clean internally provide api accepts userdefined function ca nt possibly assume know prevent enduser memory leaks ca nt guarantee user wo nt create leak something different expect honestly novice programmer going make leaks nt going react simply nt need pass ref functions", "d": "4/2017"}, {"body": "top willing bet garbage collection really good days ref function react loses reference whatever also cleaned way nt possible enduser storing somewhere else persists outside react react keeping references internally simple cases like elements collected fine", "d": "4/2017"}, {"body": "never seen api like explicitly passes value every call reason outerapi enduser perspective like value every needs used meaningful way end user like give function called accepts number calls back async result except guard callback always call first answer would strange like ref function behavior", "d": "4/2017"}, {"body": "hey serboy try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms like reactiflux discussreactjsorg stackoverflow", "d": "4/2017"}, {"body": "person wrote code several years ago likely worried js engine deoptimizations caused using honest think whole abstraction needs go might necessary anymore modern browsers discussed think really reached decision would like send pr remove rewrite code relies could experiment result see effect performance", "d": "4/2017"}, {"body": "worth noting modern browsers may optimize access support older browsers would need profile performance well big deal small performance regression limited number limited use browsers anything would probably worth considering carefully", "d": "4/2017"}, {"body": "aweary would go profiling something could add fixture data go somewhere else", "d": "4/2017"}, {"body": "maybe would less clear passing failing behavior imagine write app taxed something allocates lot maybe compare performance changes", "d": "4/2017"}, {"body": "used also uses pooling maybe could used benchmark instead worth noting modern browsers may optimize arguments access support older browsers would need profile performance well whole issue moot remove altogether clear suggesting rather changing pooling code first comment also general okay slight performance regressions older browsers helps drop bundle size", "d": "4/2017"}, {"body": "okay works far know object pooling done limit object allocations possible case benchmark lowmemory devices see removing negatively affects performance", "d": "4/2017"}, {"body": "really sure kind benchmark could show used hot paths stack fiber nt use reconciliation anymore left using relatively uncommon path would really get many events per second cause gc trash imagine meaningful react native though low end devices web let also keep mind shipping bytes means slower init time", "d": "4/2017"}, {"body": "proposal let remove pooling since hot path fiber let rewrite event pooling code hand specifically case possible make shorter hope anyone wants try", "d": "4/2017"}, {"body": "handle unless someone else really wants take", "d": "4/2017"}, {"body": "renamed issue focused thanks aweary", "d": "4/2017"}, {"body": "aweary gaearon consider removing usage pooledclass work investigate whether pooledclass needed work progress branch commit tests passes", "d": "4/2017"}, {"body": "regarding challenged time ago team insisting necessary gain even considering api impact especially witness gc thrashing even modern browsers info may changed since though like suggested elsewhere multiple events type never really inflight time keeping single event enough pooling necessary", "d": "4/2017"}, {"body": "approach would like try use pooling traversal hardcode pooling implementation event system less dynamic indirection think would make sense start single event object per type since type might different fields later look reduce one object overall", "d": "4/2017"}, {"body": "picked files depending pooledclass following files dependencies stack reconciler seems able remove fiber landed reactreconciletransaction reactserverrenderingtransaction callbackqueue reactupdates reacttestreconciletransaction remove pooledclass would need consider following files fallbackcompositionstate reacteventlistener reactnativereconciletransaction syntheticevent reactchildren pr", "d": "4/2017"}, {"body": "gaearon handle removing stack renderer still utilizing", "d": "4/2017"}, {"body": "ping gaearon hoping could provide guidance", "d": "4/2017"}, {"body": "mostly interested looking removing occurrences fiber stack would deleted soon anyway", "d": "4/2017"}, {"body": "gaearon case probably nt make sense go remove stackspecific code paths suppose depends many releases intend cut whether making changes would worth risk", "d": "4/2017"}, {"body": "oh definitely nt want right", "d": "4/2017"}, {"body": "hey hariskhaliquecs try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms like reactiflux discussreactjsorg stackoverflow", "d": "4/2017"}, {"body": "bundle size analysis could done dangerfile jest uses build job variety arbitrary tasks like scanning use strict example", "d": "4/2017"}, {"body": "preventdefault needs called synchronously effect true even without react picture browserdomlevel behavior", "d": "4/2017"}, {"body": "jwbay correct event system synchronous must called synchronously even outside react hope helps", "d": "4/2017"}, {"body": "thank guysi know browserdomlevel behaviorand know solve like say abovethe reason file issue want discussexplore convenientmagic ways solve thismaybe someday digging busy days", "d": "4/2017"}, {"body": "clear exactly proposing way react dom could something browser browsers let us prevent something already happened", "d": "4/2017"}, {"body": "thanks would great somebody could contribute problem since set state based initial props wo nt get updates props props state sync", "d": "4/2017"}, {"body": "gaearon yup nice thought since docs saying lead bugs enough imo ps hope someone working previous two issues", "d": "4/2017"}, {"body": "middle rewrite right issues somewhat neglected get ship", "d": "4/2017"}, {"body": "interested contributing anything specific want mention props state left sync behavior", "d": "4/2017"}, {"body": "gaearon made doc update mentioned issue pr first contribution repo missed anything please let know submitted cla", "d": "4/2017"}, {"body": "thanks looks good ideally also detailed example troubleshooting doc suggested nobody wrote yet maybe interested start working", "d": "4/2017"}, {"body": "yes would like contribute first understand discussions get back case doubts gaearon", "d": "4/2017"}, {"body": "gaearon close issue", "d": "4/2017"}, {"body": "bug indeed appears untranspiled said ask using version package says alpha latest stable version", "d": "4/2017"}, {"body": "unintentional see reference", "d": "4/2017"}, {"body": "inferred line number error message seem reference file dan says though version nt installed default using specified dev tag installing eg", "d": "4/2017"}, {"body": "appears coming materialui dependencies create issue project asking targeting alpha release", "d": "4/2017"}, {"body": "need fault friday prereleased addons tagged part upcoming react release nt consider tag would nt prevent semver dependencies pulling hindsight pretty silly quick fix one particular", "d": "4/2017"}, {"body": "tmacdonald try pull hopefully work let know", "d": "4/2017"}, {"body": "build successful thanks bvaughn", "d": "4/2017"}, {"body": "quick audit addons think destructuring statement createfragment thing slipped thanks reporting tmacdonald sorry inconvenience", "d": "4/2017"}, {"body": "skip", "d": "4/2017"}, {"body": "suggest running people aware issues", "d": "4/2017"}, {"body": "bad release deprecated", "d": "4/2017"}, {"body": "hey saadaouad sorry entirely sure asking sounds like related translations internalization react try use issue tracker bug reports feature requests usage support question recommend checking one great communitydriven platforms like reactiflux discussreactjsorg stackoverflow thanks", "d": "4/2017"}, {"body": "sure thanks help aweary", "d": "4/2017"}, {"body": "nt worked tutorial quick read believe change", "d": "4/2017"}, {"body": "thanks comment vigneshwerv closed already issue accompanying pr jeffrey wan kind enough submit pr wil clearer instructions still waiting merged linked pr please go give run issues version repo", "d": "4/2017"}, {"body": "lacker look keep getting issues tutorial would great dedicate time improving community", "d": "4/2017"}, {"body": "merge pr invested time already", "d": "4/2017"}, {"body": "yay sun apr scott spence notifications githubcom wrote merge pr invested time already receiving mentioned reply email directly view github mute thread jeffrey wan blue apron engineering w st floor new york ny", "d": "4/2017"}, {"body": "assuming asynchronous action finishes time component mounts sure yea add tip needing set state instead direct people actions component mounts componentdidmount except ssr yesi mean make doc accurate description", "d": "4/2017"}, {"body": "synchronous code run first render occurs might clear", "d": "4/2017"}, {"body": "happy review pr making clearer synchronous class trigger rerender avoid mentioning batching implementation detail focus usage instead", "d": "4/2017"}, {"body": "try write something next week bug incessantly week forgotten please", "d": "4/2017"}, {"body": "spicyj could selfassign issue make habit check things forgotten suggestion", "d": "4/2017"}, {"body": "spicyj incessant bugging slated begin moment", "d": "4/2017"}, {"body": "okay ca nt wait", "d": "4/2017"}, {"body": "spicyj", "d": "4/2017"}, {"body": "sorry maybe next week", "d": "4/2017"}, {"body": "owever reactchildren docs discuss dealing thispropschildren opaque data structure emphasis mine technically code assumption could break future cc bvaughn gaearon guys think chance future", "d": "4/2017"}, {"body": "get property instead children seems like reason getting text children would like looks never good idea perhaps missing something another note could easily write implementation using standard helpers want way stay future compatible sure", "d": "4/2017"}, {"body": "think need clarify opaque really need chance react ever use different data structure represent string children instead string makes sense add helper nt think likely maybe gaearon chime", "d": "4/2017"}, {"body": "nt think test utilities page good guide testing imo linking confusing", "d": "4/2017"}, {"body": "linking react guide jest site instead", "d": "4/2017"}, {"body": "honest nt think react beginners bother unit testing generally unit testing components fragile useful might good somebody specifically looking testing probably first thing tutorial time better spent writing components one thing needs contributions though shallow rendering documentation see nt really explain anything one would like contribute make testing docs useful would great move shallow rendering section top remove self referential links add intro paragraph small example", "d": "4/2017"}, {"body": "close particular issue feel free open different one interested making shallow rendering docs better", "d": "4/2017"}, {"body": "honest nt think react beginners bother unit testing generally unit testing components fragile useful might good somebody specifically looking testing probably first thing tutorial time better spent writing components adding bullet point wrapping section provides exactly entry point users want learn testing nt add requirements tutorial potential lead want add tests think adds value without adding confusion assuming worded correctly", "d": "4/2017"}, {"body": "feel like place tutorial example whole tutorial happens codepen suddenly say way test components person reading may even project set locally also clear test testing method use think particular pointer useful particular document reference testing particular seems arbitrary link performance optimizations refs forms many useful topics generally encounter testing", "d": "4/2017"}, {"body": "maybe symptom bigger issue tutorial provide base users build practice develop advanced concepts using codepen limits limits ca nt include reconsider whether good idea use web ide understand makes easier follow along cost least link end provides repo zip copy game run locally reference testing particular seems arbitrary link performance optimizations refs forms many useful topics generally encounter testing agree performance optimizations linked inline tutorial touches topic immutability important section refs mentioned passing forms nt seem applicable since game nt use every game application tests nt documentation writing tests react docs think valuable provide entry point imo wrapping section tutorial reasonable place right", "d": "4/2017"}, {"body": "maybe symptom bigger issue tutorial way yes see comment solving prerequisite diving advanced topics nt documentation writing tests react docs imo real problem solved new toplevel advanced guide", "d": "4/2017"}, {"body": "gaearon think advanced guide would great idea add list", "d": "4/2017"}, {"body": "yea", "d": "4/2017"}, {"body": "take look shallow rendering docs curiosity envision advanced guide looking like would still based tic tac toe would primary difference testing local setup see things covered well", "d": "4/2017"}, {"body": "oh mean adding another toplevel guide testing components advanced section sidebar already optimizing performance react without jsx etc", "d": "4/2017"}, {"body": "deanbdean right using chrome investigate event bubbling issue months ago gave us access eventpath property using webcomponentsjs polyfill make shadow dom available browsers today polyfill shadydom provides us composedpath function maybe change following", "d": "4/2017"}, {"body": "aweary issue open since days would like contribute", "d": "4/2017"}, {"body": "gaearon help understand expected behavior work adding two warnings misoguy almost completed warning extending purecomponent", "d": "4/2017"}, {"body": "ping spicyj think", "d": "4/2017"}, {"body": "hi aweary would like work one else working", "d": "4/2017"}, {"body": "also pass callback via attach reference callback invoked javascript class extends reactcomponent render return content class b extends reactcomponent render return refrefrefrefreactdomfinddomnode", "d": "4/2017"}, {"body": "thing try using packages components nt implement flow described left two options recreate actual component implementing ref passdown use problem experience lot", "d": "4/2017"}, {"body": "well use escape hatch still available discouraged", "d": "4/2017"}, {"body": "fixed", "d": "4/2017"}, {"body": "proptypes removed react core exist separate package future feature requests bug reports changes directed new repo", "d": "4/2017"}, {"body": "came across deopt well deopting named argument reassigned may affect fiber similar patterns", "d": "4/2017"}, {"body": "think might confusing also afaik deopting sometimes using loop either case nt think fixing gave meaningful effect testing ago fiber code structured bit differently welcome check deopts though alphas published", "d": "4/2017"}, {"body": "gaearon regarding propsal addons packages specifically understanding proposal test utils everything shallow renderer tl dr move add new toplevel testutils import eg upcoming release today release except method add onetimewarning people using instead use new target shallow renderer tl dr move add new toplevel shallow import eg upcoming release add onetimewarning people using importing instead use seem reasonable cc acdlite", "d": "4/2017"}, {"body": "syranide status reactaddonscreatefragment still considered feature rely phased addition ben said nt really necessary support arrays return type", "d": "4/2017"}, {"body": "addition ben said reactaddonscreatefragment nt really necessary support arrays return type acdlite ok assumed reason feel like kind nonanswer well could used purpose arraysasreturntype makeshift fragments creating component simply renders children yes opaque data structure also one comes lot overhead nt seem like future fragments either question basically means actual fragments syntax fragments simply addon scrapped mean react distancing idea fragments well story", "d": "4/2017"}, {"body": "sure consider actual fragments", "d": "4/2017"}, {"body": "oops finger slipped continue comment consider arrays actual fragments ca nt keyed without wrapping composite component", "d": "4/2017"}, {"body": "api keyed fragments possibility special syntax jsx meantime wrapping arrays functional component achieves essentially exact thing terms implementation overhead one additional fiber", "d": "4/2017"}, {"body": "api keyed fragments possibility special syntax jsx meantime wrapping arrays functional component achieves essentially exact thing terms implementation overhead acdlite yep except opaque structure yes good enough least answers concern thanks arrays nt really good job ca nt keyed always emit nonkeyed warning even nt care eg conditionally rendering elements wrapping domelement possibility understand correctly makeshift fragments mention obviously keyed case improves syntax rendering array still require elements keyed avoid warning jsx foo cond doodle null bar nt nice jsx foo cond doodle null bar works really well nt emit nonkeyed array warning myfragment simply renders asis", "d": "4/2017"}, {"body": "ideally syntax standalone fragments eg js foo cond lt gt doodle null bar make sense addons core feature also make sense opaque data structure already everything need need new syntax use cases", "d": "4/2017"}, {"body": "make sense addons core feature also make sense opaque data structure already everything need need new syntax use cases gaearon awesome exactly hoping thanks fyi concern seen discussions notes suddenly seemed like fragments labeled fix forget ie deprecated", "d": "4/2017"}, {"body": "yea fair enough really written anything fiber yet still working first class support fragments first checkins", "d": "4/2017"}, {"body": "need official react way animating component way unmountville rather lifecycle hooks make possibility", "d": "4/2017"}, {"body": "long discussion encourage search issues participate", "d": "4/2017"}, {"body": "seems like everything done", "d": "4/2017"}, {"body": "gaearon going entry point get alpha release available", "d": "4/2017"}, {"body": "bvaughn plan include latest alpha sure fully remember", "d": "4/2017"}, {"body": "building locally see file included may matter publishing", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "oh great nt know published look version dropdown unpkg nt show assumed unpublished nevermind thanks cc mjackson know showing", "d": "4/2017"}, {"body": "maybe show somebody requested usually look url like takes latest alpha", "d": "4/2017"}, {"body": "think bug unpkg load wo nt show dropdown load previous next version shows", "d": "4/2017"}, {"body": "glad figured totally missed note weekend sorry", "d": "4/2017"}, {"body": "aweary may caching index pages aggressively thanks ping look", "d": "4/2017"}, {"body": "see reactfiberreconciler reactdomframescheduling longer exported reactdom way get currently able get public api exposed upcoming prerelease react love able stay top testing future prereleases guarantee compatibility react lands", "d": "4/2017"}, {"body": "currently easy way except forking repo plan provide something cutting", "d": "4/2017"}, {"body": "forking repo ok fwiw get things working export two classes members reactdom maybe end end publishing srcsharedfiber additional reactfiber package multiple renderers could reuse fiber internals please nt hesitate reach need help feedback bringing api public", "d": "4/2017"}, {"body": "maybe end end publishing srcsharedfiber additional reactfiber package multiple renderers could reuse fiber internals something like potentially build tool renderers reuses build toolchain", "d": "4/2017"}, {"body": "proptypes removed react core exist separate package future feature requests bug reports changes directed new repo", "d": "4/2017"}, {"body": "one lead nvda developers reason occurs entire text nt removed deleted rather changed thus number replace hear text new similarly number replace get new text nt change note firefox calculating changed text nvda handle events firefox sends us behaviour incorrect nt reading content nt changed firefox nt sending us events covering content nt changed controversial issue whether firefox treat changing nodevalue text node update removeinsert entire text latter perhaps intuitive behaviour case may cases furthermore see would nt easy internally text nodes would need special cased chrome misbehaves well differently causes information spoken multiple times seems strip common characters start text however fact browsers issues serve illustrate trivial case get right actually chrome misbehaves setting textcontent cases solution set ariaatomic true indicate entire node reported whenever changes unfortunately result double speaking right multiple events still fired detail nvaccessnvda", "d": "4/2017"}, {"body": "jcsteh thanks chiming", "d": "4/2017"}, {"body": "fixed", "d": "4/2017"}, {"body": "gaearon means swallowed exceptions", "d": "4/2017"}, {"body": "chance read link posted earlier", "d": "4/2017"}, {"body": "thanks read also facing issue try explain component render method event event adds class like normally want remove video call function normally behaves correctly case reconnecting fire event adds try remove element using function throws error guess would try update div detect child anymore may react behaviour something wrong tried method also also working", "d": "4/2017"}, {"body": "intended way use react react like trying dom mutations hand later tries reconcile dom repeats already done causing failures instead let react take care updating dom example instead calling would call render function would either return element depending current state described conditional rendering docs", "d": "4/2017"}, {"body": "got remove function party library causing problem provide config override function thank", "d": "4/2017"}, {"body": "glad could help", "d": "4/2017"}, {"body": "fixes fixes way closing", "d": "4/2017"}, {"body": "aweary part changes element value works onchange handler invoked actually nt work ie solution depends trying achieve please check answer", "d": "4/2017"}, {"body": "would work wanted still use reactdom internals switch things little fork", "d": "4/2017"}, {"body": "yea", "d": "4/2017"}, {"body": "gaearon nt caught unit test also importantly nt requiring running server antipattern components must avoid hooks run server", "d": "4/2017"}, {"body": "also importantly nt requiring reactdom running finddomnode server antipattern components must avoid hooks run server nt run server importing fine otherwise would write component uses client still works server nt caught unit test test catch set global raf polyfill part testing environment", "d": "4/2017"}, {"body": "edit pr illustration ran unit tests linting prettier run yet opened pr put idea code moved check inside reactfiberscheduler lost ability throw polyfilled right place lazy check mentioned", "d": "4/2017"}, {"body": "try arguments clone react repository reduce got last commit", "d": "4/2017"}, {"body": "would prefer split team members agree though nt think would help git history delete folder history still", "d": "4/2017"}, {"body": "hahaha thanks reply try clone repository doc folder git sparse checkout unfortunately ca nt work maybe use wrong way take look update issue new discovery", "d": "4/2017"}, {"body": "conclusion using git sparse checkout reduce config sparse checkout mkdir sparsed amp cd sparsed git init git config coresparsecheckout true add config means exclude docs gitinfosparsecheckout file git remote add origin git pull origin master depth result follows", "d": "4/2017"}, {"body": "close since moving docs solve issue git history unless misunderstand git works", "d": "4/2017"}, {"body": "proptypes removed react core exist separate package future feature requests bug reports changes directed new repo", "d": "4/2017"}, {"body": "proptypes removed react core exist separate package future feature requests bug reports changes directed new repo opened corresponding issue anyone looking continue discussing", "d": "4/2017"}, {"body": "proptypes removed react core exist separate package future feature requests bug reports changes directed new repo", "d": "4/2017"}, {"body": "opened new issue anyone wanting continue discussion", "d": "4/2017"}, {"body": "gaearon progress still waiting fixed", "d": "4/2017"}, {"body": "shipping react timeline integration still recommended way debug perf issues", "d": "4/2017"}, {"body": "prints warning using maybe reconsider", "d": "4/2017"}, {"body": "also one used unfortunately location information printed along warning able trace guess warnings appear use reactwithaddons umd package addons package also deprecated maybe warning file loaded", "d": "4/2017"}, {"body": "maybe best solution would somehow suppress warnings within addons build need use addons build eg want use really alternative", "d": "4/2017"}, {"body": "good point indeed confusing warn build agree suppress warnings uses addons build deprecated individual addon either deprecated unmaintained testutils moving reactdom reactperf available instead use component profiling browser devtools timeline addons want keep using need switch npm packages include browser builds sure makes sense additional warning build", "d": "4/2017"}, {"body": "would probably make sense show individual warnings deprecated addons people use", "d": "4/2017"}, {"body": "looks like serious bug rc", "d": "4/2017"}, {"body": "nt come umd build", "d": "4/2017"}, {"body": "also think makes sense move doc readme cc acdlite flarnie", "d": "4/2017"}, {"body": "topic confusing least docs link nt tags last commit year ago however links shows latest releases", "d": "4/2017"}, {"body": "yea nt understand either yet clear release", "d": "4/2017"}, {"body": "fyi serious bug resolved release yesterday evening docs link nt tags last commit year ago jochenberger sorry overlooking something docs link project however links shows latest releases react team recently took package using going forward links docs point one happy correct", "d": "4/2017"}, {"body": "links docs point one happy correct think line related", "d": "4/2017"}, {"body": "react team recently took proptypes package plan source truth", "d": "4/2017"}, {"body": "ya still want need worry transferring anymore", "d": "4/2017"}, {"body": "ended guess since react specific could potentially used preact inferno something else", "d": "4/2017"}, {"body": "jquense using source truth one scenario worried folks installing without realizing official package example addition also point users correct package", "d": "4/2017"}, {"body": "acdlite source code live manage repository", "d": "4/2017"}, {"body": "gaearon right branch nt decided live cool either leaving react repo moving repo preference", "d": "4/2017"}, {"body": "think continue maintain since proptypes remain popular great alternative yet flow typescript think agree viable option every team", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "reason like move stop flooding react issue tracker proptypes feature requests get lost nt get necessary discussion", "d": "4/2017"}, {"body": "sounds good", "d": "4/2017"}, {"body": "reactjsproptypes", "d": "4/2017"}, {"body": "update optimizations functional component since right corner", "d": "4/2017"}, {"body": "topic wrote notes problems migrating flat react using web responder nontrivial dependencies react internals nt exposed public release", "d": "4/2017"}, {"body": "gaearon nt proptypes error try use outside react context", "d": "4/2017"}, {"body": "probablyup use supported api checking", "d": "4/2017"}, {"body": "update optimizations stateless functional component since right corner take separate path fiber slightly less overhead nothing dramatic though", "d": "4/2017"}, {"body": "nt think react issue setting innerhtml works", "d": "4/2017"}, {"body": "makes think react devtools extension could leveraged display notification something obvious opening page using react dev mode maybe like idea put together set proposed icons devtools see need decide detect dev vs prod react way backwards future safe added monday meeting agenda", "d": "4/2017"}, {"body": "similarly aodev interested use testing process building module renders two trees using diffs take snapshots differences eg shows diffs single components equal different props gt expect diffreact tomatchsnapshot yields diff like idea rather snapshotting entire rendered tree snapshot changes two states eg button button disabled also helps assert something otherwise difficult test component tree structured minimize mutations keys critical see context keys critical performing virtualdom diffs sure gain exposing least option expose", "d": "4/2017"}, {"body": "hi like add also wish key exposed mainly able unit test components key since wrong missing key break ui key exposed needs element find useful unit test component rendering list get render output eg shallow renderer look elements array process building module renders two trees using reacttestrenderer sure gain exposing least option expose separate issue sounds unrelated issue proposing specific test renderer think could easily expose would like file new issue send pr", "d": "4/2017"}, {"body": "hmm opposed per se exposing keys test renderer though would default assumption renderer including test renderer even aware keys applicationlevel concept guess test renderer already special since planning expose composites tree traversal methods nt think fully understand use case though need keys order output textual diff trees", "d": "4/2017"}, {"body": "gaearon oh geez bad see happened different tabs open requests expose keys react react test renderer repo also actually wanted reacttestrenderer expose keys react think coming back lunch saw title issue mistook one renderer sorry confusion", "d": "4/2017"}, {"body": "going close wontfix come back later", "d": "4/2017"}, {"body": "probably going fix react react similar hooks altogether closing", "d": "4/2017"}, {"body": "gaearon good way traverse component tree walking following references purely educational building personal dev tools learning process react internals highlighting renders visually outlining ancestry paths etc", "d": "4/2017"}, {"body": "via official apis fiber traverse parents internal data structure stack way jump owners", "d": "4/2017"}, {"body": "closing nt specific issue", "d": "4/2017"}, {"body": "reference occur react alpha", "d": "4/2017"}, {"body": "aweary think issue closed right", "d": "4/2017"}, {"body": "closing stale since followup", "d": "4/2017"}, {"body": "found problem came following work around using refs following refs components componentdidmount const ischrome windowchrome amp amp windowchromewebstore obviously put whatever want addeventlisterner callback working really well far", "d": "4/2017"}, {"body": "fixed", "d": "4/2017"}, {"body": "confused documentation adding description reliable way access rendered dom would much appreciated", "d": "4/2017"}, {"body": "gaearon thank worked perfectly", "d": "4/2017"}, {"body": "facing issue reproduced", "d": "4/2017"}, {"body": "dont find issue current docs still issue would like work else close samueleartuso lacker", "d": "4/2017"}, {"body": "fixed indeed", "d": "4/2017"}, {"body": "case somebody else comes across using commons chunk plugin loading react poly get around ended sure right way way commons found worked", "d": "4/2017"}, {"body": "correct behaviour would passing functional components rather throwing error explaining going", "d": "4/2017"}, {"body": "printing warning master part react", "d": "4/2017"}, {"body": "proptypes removed react core exist separate package future feature requests bug reports changes directed new repo", "d": "4/2017"}, {"body": "months reason firing simulate disabled inputbutton actually fires event came enzyme repo issue turns shallow rendered components still call onclick even disabled attribute", "d": "4/2017"}, {"body": "many issues months popular repository team small low priority issue actively breaking apps specific suggestions fix please propose read past discussions research motivation behind previous changes present proposal handle instead maybe even send pr best position actively invested solving actually context know affects apps", "d": "4/2017"}, {"body": "mind clarification whether problem actually bug intended imagine scenarios want mouse event firing disabled input element expect fix released immediately short wanted answer immediate fix months", "d": "4/2017"}, {"body": "let ask nhunzaker context", "d": "4/2017"}, {"body": "reference additional changes made code path", "d": "4/2017"}, {"body": "anyone assigned snapshot testing yet think crucial guide help take new react devs hello world react production love take doc one yet looking outline give conceptual intro snapshot testing followed simple reacttestrenderer example particular using components react docs forms lists example follow simple example testing refs callback issue maybe example components seems first thing people hang snapshot tests illustrate realworld snapshot test example mocks using jest would area address reactdom issue also point people direction jest test framework happy cover shallowrender example enzyme reacttestutils could point jest docs inclination include info react docs shallowrendering already documented jest supported fb missing anything", "d": "4/2017"}, {"body": "could also contribute section accessibility anyone busy already plans yet topic docs site accessibility issues could corrected easily start submitted", "d": "4/2017"}, {"body": "still open", "d": "4/2017"}, {"body": "thamaranth based activity seen probably anything first comment checked nt name next", "d": "4/2017"}, {"body": "help good resources still open", "d": "4/2017"}, {"body": "andersekdahl jrmartin chanced upon issue trying debug similar error wanted share figured started hiding application error disappeared slowly toggled back one one found one component made error appear would dive deeper repeat process found source error case code supposed normalize props called props nt normalized correctly hope helps", "d": "4/2017"}, {"body": "regarding comment never mutate props lifecycle methods ca nt normalize props coming parent component considered immutable", "d": "4/2017"}, {"body": "scsherwood found solution exactly issue dfp ad disappears react client app loaded", "d": "4/2017"}, {"body": "closing since nt appear issue react follow", "d": "4/2017"}, {"body": "related problem invoke methods shallow renderer without blowing ref usage seems like currently nt call call shallow quite inconsistent correct wrong", "d": "4/2017"}, {"body": "seems like currently nt call call shallow quite inconsistent correct wrong think correct see enzyme compat tests componentdidmount componentdidupdate although looks like enzyme also thing called causes componentdidmount called test mention passing though guess really relevant", "d": "4/2017"}, {"body": "mostly use componentwillrecieveprops hook need something particular transition performance external communication reasons otherwise everything pure render function particularly nt like following code run test transitions interest component lifecycle ie amp amp got thinking instead trying name life cycle methods alternative could make system declarative roll whole thing subscription type pattern published list allowable transitions would like able declare interested subscribing particular lifecyclestate transition change eg registerlifecyclestatetransitioncallback fromlifecyclestate tolifecyclestate state props gt intention priority intention list flags like update dom update state etc could help scheduling callback strict want looser construct registerlifecyclestatechangecallback beforeafter lifecyclestate state props gt intention priority similar current lifecycle methods without proliferation method names similarly like callback registering interest individual property transitions eg registerpropertytransitioncallback frompropvalue topropvalue props state gt intention priority strict need looser construct registerpropertychangecallback beforeafter propname state props gt intention priority could extended specification set transitions andor property changes interest", "d": "4/2017"}, {"body": "think likely go ahead babili still suffers correctness issues babel architecture makes hard fix looking minification options though", "d": "4/2017"}, {"body": "proptypes separate package issues feature requests directed new repository", "d": "4/2017"}, {"body": "another use case", "d": "4/2017"}, {"body": "fixed via", "d": "4/2017"}, {"body": "yep thank", "d": "4/2017"}, {"body": "nosideeffects annotation still showing current createreactclass npm package thus still breaking build", "d": "4/2017"}, {"body": "thank", "d": "4/2017"}, {"body": "nosideeffects annotation still showing current createreactclass npm package thus still breaking build sorry want send pr branch remove", "d": "4/2017"}, {"body": "gaearon", "d": "4/2017"}, {"body": "thank guys prompt attention gaearon little star struck admirer ever since original redux presentation fwiw appears createreactclass needs republished current class though clear package generated", "d": "4/2017"}, {"body": "elijahsmith little confusing since addon nt live master branch anymore find branch addons folder", "d": "4/2017"}, {"body": "closing since followup nt sound like react issue", "d": "4/2017"}, {"body": "maintaining transitiongroup anymore repo issues please file", "d": "4/2017"}, {"body": "zpao nt think investigating anymore close", "d": "4/2017"}, {"body": "closing since unlikely react implement api easily solvable spread operator third party utilities", "d": "4/2017"}, {"body": "reference anyone watching dan abramov tweeted becoming default fri apr pm brandon dail notifications githubcom wrote closed receiving mentioned reply email directly view github mute thread", "d": "4/2017"}, {"body": "specifically default pass unknown props dom warn want avoid rendering useless dom attributes still need aware passing dom elements", "d": "4/2017"}, {"body": "yea also probably make warnings less obnoxious react console least usable", "d": "4/2017"}, {"body": "closing since already implemented next major wo nt added release", "d": "4/2017"}, {"body": "anyone still seeing new versions react tests jasmine let save debugging testing hoc creating component wrap test calling jasmine callback component turns start running tests right away nt wait next tick event loop components tested containing even exited shortcoming jasmine part fix use", "d": "4/2017"}, {"body": "using react still get warning also appears send details", "d": "4/2017"}, {"body": "might getting code throws somewhere check console might also swallowing exceptions code nt see issue try break exceptions debugger see find legitimate false positive could file issue likely wo nt fix code already removed master working release diverged much", "d": "4/2017"}, {"body": "indeed cause error code componentwillunmount", "d": "4/2017"}, {"body": "cool nt get displayed console make sure swallowing exceptions generally bad go unnoticed", "d": "4/2017"}, {"body": "jmullo able fix also facing similar issue would help solution posted", "d": "4/2017"}, {"body": "removed epreventdefault call nt completely necessary functionality", "d": "4/2017"}, {"body": "thanks able fix changing onchange oninput similar discussion posted could helpful", "d": "4/2017"}, {"body": "fixed thanks hard work nhunzaker", "d": "4/2017"}, {"body": "possible proposal ce authors always use properties pattern blasten shown although nt know want encourage everyone put everything single object instead might want something like custom element author could use approach properties element exposes jsbin illustrates technique ht sjmiles believe ce authors use technique reactpreact able always set properties worry attributes avoid situations someone ends events still think preferable use discussed maybe adding additional syntax heuristic make bit nicer", "d": "4/2017"}, {"body": "cases e g text input react assigns property sets corresponding attribute maybe option could helpful well", "d": "4/2017"}, {"body": "think issue setting ca nt assign object array attribute stringify first setting time may create extra work element behalf depending order set things likely need process change twice working teammate produce custom element examples use pattern previously mentioned follow thread publish come see others think", "d": "4/2017"}, {"body": "robdodson one property vs many properties personal choice one property eg several advantages later namespace remember polymer users tried properties realized properties collide ones inherited causing inconsistencies check becomes properties also boilerplate code grows number properties increases unless lib defines properties dynamically via also slow fpttti getter returns exact current state element making easier transition new state could potential map attribute way maps", "d": "4/2017"}, {"body": "yeah agree advantages using maybe everyone eventually goes direction nt want assert specific pattern since still pretty unexplored territory first wanted see could encourage react libraries always set properties time encouraging custom element authors adhere pattern grabbing properties instance already set worlds start gel next step would explore ways optimize possibly using pattern", "d": "4/2017"}, {"body": "objectively discussing props single entry point properties orthogonal issue highly contentious perf opt probably best leave ce libs implement see fit prescriptive nature places higher level abstraction lower level browser apis nt fall line elements expose api several top level props still feel consumer react component authors full control want want set attribute add event listener able without workaround react setting props inadequate custom element implementation everything always properties ideal live imperfect world", "d": "4/2017"}, {"body": "still feel consumer react component authors full control want want set attribute add event listener able without workaround react setting props inadequate custom element implementation yeah cool well", "d": "4/2017"}, {"body": "agree scope thread nt discussing patterns brought found useful intention nt ask react team implement ce integration way support spec showing potential pattern could called property user instead props", "d": "4/2017"}, {"body": "showing potential pattern could called property user instead props interesting pattern definitely something ce authors consider", "d": "4/2017"}, {"body": "seem issue fix chrome get following error using input type color reason fix seems removing value please see related stackoverflow post error pointed towards particular issue number github", "d": "4/2017"}, {"body": "news one seems still present also happens typing fast input characters get lost along way fix tanoemon mentioned ideal solution", "d": "4/2017"}, {"body": "workaround using onpaste conjunction onchange catch rightclick pastes note need use settimeout handler run input text updated may result handler running multiple times careful approach expensive idempotent", "d": "4/2017"}, {"body": "problem case caused nested anchor tags invalid many problems solved checking invalid markup fixing", "d": "4/2017"}, {"body": "trueadm new build system handle", "d": "4/2017"}, {"body": "aweary believe bundles bundles though save bytes", "d": "4/2017"}, {"body": "problem solved using similar solution mackentoch suggested using combined however end needed remove onchange method make work ie", "d": "4/2017"}, {"body": "heyo workaround basically removed onfocus multiple select box put state change within onchange event focus occurs time selection option think actually came across similar issues frameworks dealing multiple select boxes ffox guess ffox one triggering event stops propagation thru therefore requires double time click probably cause select box actual children options", "d": "4/2017"}, {"body": "swpdsgn thank workaround working well eg select line click somewhere else multiselect loose focus click already selected line multiselect receive focus represented state", "d": "4/2017"}, {"body": "skleeschulte sry error state nt change click option selected expected cause value nt change selectable options works ok added additional onclick set focus back selected option clicked check", "d": "4/2017"}, {"body": "swpdsgn ok getting closer still working least windows focus normally already set mousedown full click", "d": "4/2017"}, {"body": "swlilike thanks solved issue wrapping component div like probably error dom nodes generated modal component appended body instead parent element", "d": "4/2017"}, {"body": "guess done", "d": "4/2017"}, {"body": "work merged pr", "d": "4/2017"}, {"body": "sure think open areas add watching fast rebuild test changes browser move shared tooling back fbjs babel plugin custom lint rule", "d": "4/2017"}, {"body": "imo need something react like event prop type child component may listen like regular prop types mosesoak thanks good advise using integer prop incremented parent monitored child componentwillreceiveprops", "d": "4/2017"}, {"body": "begrudgingly working around issue using issue absolutely reopened", "d": "4/2017"}, {"body": "quite odd regular jsx syntax templatestring version posted kohlmannj seeing attribute stripped node attributes kept tact ideas going seems work ok however android seems drop attribute play try invoke play ie get error emulated pixel android mobile chrome", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "got error dont know happen code import react react import logo stylesimageslogosvg import stylesstylesscss const app props gt beleaf export default app uncaught typeerror read property reactinternalinstance null objectgetclosestinstancefromnode findparent handletoplevelimpl reactdefaultbatchingstrategytransactionperform objectbatchedupdates objectbatchedupdates dispatchevent react removed image everything ok anyone know happen", "d": "4/2017"}, {"body": "lyhoanglong dont use image directly inside something like", "d": "4/2017"}, {"body": "sometime reuse image wrong use image way", "d": "4/2017"}, {"body": "lyhoanglong resolve issue getting exact error appears every time try render image", "d": "4/2017"}, {"body": "didnt dont know fix", "d": "4/2017"}, {"body": "hi lyhoanglong remove try pass image using parent component parent component try load image db pass src", "d": "4/2017"}, {"body": "got error navigate another page app clicking link fix changing root node classname nt possible case", "d": "4/2017"}, {"body": "closing since working removing grunt anyway see", "d": "4/2017"}, {"body": "looked reckon still issue variables scoped isolated parent set variable one child want use fine child imports react component using variable name would affected well web components solve issue cause isolated default way get react create custom elements needed", "d": "4/2017"}, {"body": "solve isolation styles", "d": "4/2017"}, {"body": "child imports react component using variable name would affected well different name collisions example imported react component provides overwriting issue also hard namespace obfuscate la css modules css variables string eg", "d": "4/2017"}, {"body": "maybe obfuscate could way really standard", "d": "4/2017"}, {"body": "lucacolonnello way works issue components classnames nt make sure classname obfuscated could suffer components use classnames reason enable webstandard react really standard wait read", "d": "4/2017"}, {"body": "standard using web components order isolated scoped style using going obfuscate variables component using would hard change outside variable value component packed compiled node modules obfuscation good technique use example cssmodules standard coming build solution foe conflict scoped css trying say solution already exists browser although prefer sensitive us correct wrong anyway", "d": "4/2017"}, {"body": "nt think related actual feature request simply allow usage request feature talking scoped styles webcomponents", "d": "4/2017"}, {"body": "yeah yeah true say everything need css variables also feature feature like anyway", "d": "4/2017"}, {"body": "seems like issue stalled let weigh summary two separate features focusblur event handler provide bubbling focusblur event fires descendant node handler gets called encapsulation focus passes two descendant nodes handler get called understand correctly think current handlers defined implementation focus handler blur handler bubbles encapsulated react yes native yes native yes two changes discussed issue bringing react event spec inline dom seems like simply adding check would enough turn bubbling event nonbubbling one sure whether needs work error handling something whether approach would work react native seems like impetus behind change consistency dom creating variant focus event encapsulated done dom world requires querying dom sure possible rn change adding new behavior react spec explicitly describe behavior implied requirements also confirmed fiddle", "d": "4/2017"}, {"body": "maintaining transitiongroup repo anymore still issues encourage file", "d": "4/2017"}, {"body": "filed", "d": "4/2017"}, {"body": "done", "d": "4/2017"}, {"body": "compile react flat bundles likely one next steps", "d": "4/2017"}, {"body": "gaearon clarify issue get rid haste system together use module syntax relative paths trueadm soon get done looking forward resolving issue would like explorerun project fav ide webstorm nt work current module system", "d": "4/2017"}, {"body": "probably switch es modules first get rid haste weeks hopefully", "d": "4/2017"}, {"body": "rovolution issue react componentjsx toolbarbutton name name button const ischecked thisstatechecked const currenttitle title ischecked html click checkbox changed checked property internally checked attribute checkbox element displayed chrome inspector", "d": "4/2017"}, {"body": "seeing problem browsers unfortunately difficult extract smaller example reproducing issue workaround assign different key based value really hate", "d": "4/2017"}, {"body": "please helpe seeing problem browsers unfortunately difficult extract smaller example reproducing issue workaround assign different key based value really hate receiving subscribed thread reply email directly view github mute thread", "d": "4/2017"}, {"body": "\u03b5\u03b3\u03ba\u03b1\u03c4\u03b5\u03c3\u03c4\u03b7\u03c3\u03b1 \u03b1\u03c5\u03c4\u03bf \u03c4\u03bf \u03c0\u03c1\u03bf\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u03b3 \u03bd\u03b1 \u03b2\u03bb\u03b5\u03c0\u03c9 \u03ba\u03c9\u03b4\u03b9\u03ba\u03bf\u03c5\u03c2 \u03ba \u03b4\u03b9\u03b1\u03c6\u03bf\u03c1\u03b1 \u03b1\u03bb\u03bb\u03b1 \u03b4\u03bd \u03be\u03b5\u03c1\u03c9 \u03c4\u03b9 \u03bd\u03b1 \u03ba\u03b1\u03bd \u03b1\u03c0\u03bf \u03b4\u03c9 \u03ba \u03c0\u03b5\u03c1\u03b1\u03b5\u03c7\u03c9 \u03ba\u03b1\u03bd\u03b5\u03b9 \u03c0\u03c1\u03bf\u03c6\u03b9\u03bb \u03b2\u03bb\u03b5\u03c0\u03c9 \u03c4\u03bf \u03c0\u03bb\u03b1\u03b9\u03c3\u03b9\u03bf \u03ba\u03c9\u03b4\u03b9\u03ba\u03bf \u03b8\u03b5\u03bc\u03b1\u03c4\u03b1 \u03b1\u03c0\u03bf\u03b8\u03b5\u03c4\u03b7\u03c1\u03b9\u03b1 \u03ba \u03bf\u03bb\u03b1 \u03c4\u03b1 \u03c5\u03c0\u03bf\u03bb\u03bf\u03b9\u03c0\u03b1 \u03b1\u03bb\u03bb\u03b1 \u03b5\u03b3\u03c9 \u03b4\u03bd \u03be\u03b5\u03c1\u03c9 \u03c4\u03b9\u03c0\u03bf\u03c4\u03b1 \u03c0\u03bf\u03c5 \u03bd\u03b1 \u03c0\u03b1\u03c9 \u03ba \u03c0\u03c9\u03c2 \u03bd\u03b1 \u03b4\u03c9 \u03c4\u03bf\u03c5\u03c2 \u03ba\u03c9\u03b4\u03b9\u03ba\u03bf\u03c5\u03c2 \u03ba \u03bf\u03bb\u03b1 \u03c4\u03b1 \u03b1\u03bb\u03bb\u03b1 \u03b5\u03b9\u03bc\u03b1\u03b9 \u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03b4\u03b1 \u03ba \u03bc\u03bf\u03c5 \u03b5\u03b9\u03bd\u03b1\u03b9 \u03b4\u03c5\u03c3\u03ba\u03bf\u03bb\u03bf \u03c4\u03bf \u03c0\u03c1\u03bf\u03b3\u03b3\u03c1\u03b1\u03bc\u03bc\u03b1 \u03b5\u03b9\u03bd\u03b1\u03b9 \u03c3\u03c4\u03b1 \u03b1\u03b3\u03b3\u03bb\u03b9\u03ba\u03b1 \u03bc\u03c0\u03bf\u03c1\u03b5\u03b9\u03c2 \u03bd\u03b1 \u03bc\u03b5 \u03b2\u03bf\u03b7\u03b8\u03b7\u03c3\u03b5\u03b9\u03c2 seeing problem browsers unfortunately difficult extract smaller example reproducing issue workaround assign different key based value really hate receiving subscribed thread reply email directly view github mute thread", "d": "4/2017"}, {"body": "hey u find solution", "d": "4/2017"}, {"body": "currently using polyfill overwrites know engine made changes tested without using polyfill mathrandom react uses server side rendering snapshots", "d": "4/2017"}, {"body": "cool tried new date gettime random number safe server side", "d": "4/2017"}, {"body": "well issue react uses sure switched", "d": "4/2017"}, {"body": "think closed proptypes removed core", "d": "4/2017"}, {"body": "good point brigand discussion feature directed", "d": "4/2017"}, {"body": "feels bit odd lose discussion though nt least recreate issue possibly care closing otherwise starting scratch", "d": "4/2017"}, {"body": "gaearon opened new issues reactjsproptypes ones closed", "d": "4/2017"}, {"body": "thank", "d": "4/2017"}, {"body": "started working small library may helpful situations definitely start may many optimizations", "d": "4/2017"}, {"body": "closed", "d": "4/2017"}, {"body": "fixed pull request", "d": "4/2017"}, {"body": "spicyj ok issue version", "d": "4/2017"}, {"body": "spicyj bad getting new error", "d": "4/2017"}, {"body": "spicyj warning exist", "d": "4/2017"}, {"body": "way debug problem", "d": "4/2017"}, {"body": "press pause icon scripts tab devtools stuck see callstack help get idea code running loop", "d": "4/2017"}, {"body": "could instead passing immutable collections maps lists react components pass normal js objects arrays respectively thay way easier read understand remove dependencyboilerplate immutable react components better easier tests components remember immutable map keys values method return iterator converted array using spread operator inside brackets way using normalized state todos demo app eg suggest mapstatetoprops function like javascript code const getprojectsarray state gt const todos stateget todos const todosarray todosvalues return todosarray const mapstatetoprops state gt projects getprojectsarray state code notes makes easier use tools like normalizr reselect", "d": "4/2017"}, {"body": "see bugs react please file new issue track issue bugs feature request comments issues get lost", "d": "4/2017"}, {"body": "going close since think super important primarily misunderstanding disagree let know", "d": "4/2017"}, {"body": "thanks maxdeviant work build system definitely could benefit improvement gaearon trueadm working rewriting eliminate gulp grunt favor rollup close issue", "d": "4/2017"}, {"body": "grunt gulp gone missed", "d": "4/2017"}, {"body": "created test case found would great know expected behavior bug", "d": "4/2017"}, {"body": "amazing love react", "d": "4/2017"}, {"body": "taking another approach instead wrapping createelement wrap component functions classes way output functions plain objects big trees elements significantly reduce function calls component handle adding signatures generated objects", "d": "4/2017"}, {"body": "following worked way highlight keyword within string text without dangerously setting html find highlight relevant keywords within block text param string label text parse param string value search keyword highlight return object jsx object containing array alternating strings jsx const formatlabel label value gt value return label return labelsplit value reduce prev current gt return current return prevconcat current formatlabel lorem ipsum dolor sit amet dolor lorem ipsum dolor sit amet", "d": "4/2017"}, {"body": "use instead", "d": "4/2017"}, {"body": "appears work box fiber", "d": "4/2017"}, {"body": "working endtoend test suite need manually simulate events testing tools provide appropriate methods simulate user input dispatch necessary events phantomjs idiomatic way perform input sendevent quite lowlevel instead use phantomjs together selenium casperjs nightmare another option tools include methods simulating keyboard mouse input way react synthetic events triggered appropriate unit integration tests run browser generally sufficient find writing unit tests production bundle chances high writing endtoend tests using tools listed instead still need trigger react synthetic change events directly reason bundle built production take look reacttriggerchange package", "d": "4/2017"}, {"body": "trying either null object possible right", "d": "4/2017"}, {"body": "going close since nothing actionable issue stale", "d": "4/2017"}, {"body": "aweary left comment something supposed already therefore issue solved still seems actionable", "d": "4/2017"}, {"body": "sebmarkbage longer listen nt seem actionable sure would make sense go back order support thirdparty polyfill browser far support", "d": "4/2017"}, {"body": "jaygood ran issue looks like fixed react source", "d": "4/2017"}, {"body": "hi recently came across issue local patch could help us waiting public fix apparently react", "d": "4/2017"}, {"body": "figure done", "d": "4/2017"}, {"body": "think close since working moving grunt anyway see", "d": "4/2017"}, {"body": "", "d": "4/2017"}, {"body": "react actually case setstate componentwillupdate triggering rerender", "d": "4/2017"}, {"body": "mosch ever able find solution edit created test case found", "d": "4/2017"}, {"body": "whats best practice handling uncaught runtime errors react lifecycle methods one uncaught error production breaks entire react component tree serves blank page must better solution add statements everywhere package seems like good idea deprecated amp recommended used production cheers", "d": "4/2017"}, {"body": "davidfurlong deprecated also nt work function components afaik better way monkeypatch may sound scary works reliable nt overhead check library used several production apps months already nice bonus allows capture component props amp state excerpt reallife bug captured sentry", "d": "4/2017"}, {"body": "btw got white screen death production nt even recommend use happened suppressing exceptions development exception happened initial render fixed following one nt notice deployed wild", "d": "4/2017"}, {"body": "kossnocorp looks awesome simple exactly looking thanks", "d": "4/2017"}, {"body": "project use following base class components outputs error box rendering fails ugly works js class basecomponent extends reactcomponent constructor props super props", "d": "4/2017"}, {"body": "fixed", "d": "4/2017"}, {"body": "kinda new react using", "d": "4/2017"}, {"body": "react clean solution vendor prefixing keyvalue inline style clear solution something works server side rendering hacky works always first render things clean solutions supposed browsers accept css lines key different values fallback values wonder nt react support simple accepting handling array value inline styles understand react better automatically detect prefixes provide way fallback values inline style key quite sure wo nt add compiled library curious issue closed resolved clean workaround even dirty workaround provided", "d": "4/2017"}, {"body": "nonprefix related issues", "d": "4/2017"}, {"body": "aweary tested seems working expected mac osx firefox chrome", "d": "4/2017"}, {"body": "made silly mistake confused error message spicyj comment pointed solution though", "d": "4/2017"}, {"body": "proptypes removed react core exist separate package future feature requests bug reports changes directed new repo", "d": "4/2017"}, {"body": "opened new issue anyone looking continue discussion", "d": "4/2017"}, {"body": "seems duplicated", "d": "4/2017"}, {"body": "reopening new docs nt info confusing readd", "d": "4/2017"}, {"body": "looking make first contribution would like fix issue", "d": "4/2017"}, {"body": "also opened pr last week restoring original note added notes discussion thorough example pr like current example done much beyond think example would beneficial almost think since difference treating array curious hear everyone else thoughts", "d": "4/2017"}, {"body": "proptypes removed react core exist separate package future feature requests bug reports changes directed new repo", "d": "4/2017"}, {"body": "opened new issue anyone looking continue discussion", "d": "4/2017"}, {"body": "nt currently working proper use prop", "d": "4/2017"}, {"body": "guess ship sailed", "d": "4/2017"}, {"body": "add version warning message behavior removed", "d": "4/2017"}, {"body": "clarify passing number value string type thing longer appended passing plain number la still supported also intent remove well", "d": "4/2017"}, {"body": "seapunk understood string type example gave still supported", "d": "4/2017"}, {"body": "restricting set prefer local listeners probably good start events block scrolling edgesafarietc done globally fwiw case nt want go trouble buying mouse wheel found twofingered scrolling touchpad usually exhibits identical behavior", "d": "4/2017"}, {"body": "nolanlawson thank guidance mouse wheel thank goodness conference swag nt sure twofingered scrolling really good know sebmarkbage hiccup hitting tostring rendering least running tests feature flag throws error node attach listener nt exist yet runs make sure toplevel event listener attached document looks something like function ensurelisteningto inst registrationname transaction transaction instanceof reactserverrenderingtransaction return listento registrationname getdocument inst getnode inst problem fails times feature flag set false see warning questionsideas setting still best way test serverside rendering enqueuing event listener attachment post mount like think moving local listener logic example section possibly could eliminate unmount work", "d": "4/2017"}, {"body": "happens render server rendered tree client need imminently rewriting whole algorithm likely need switch strategies fiber anyway", "d": "4/2017"}, {"body": "took another pass diff moves event listener location handling browsereventemitter works runs postmount hook attach listeners runs less like normal responsible figuring listener attached locally globally fiber tests fail probably tests write fail stack renderer attaching event listeners invalid nested markup means reactdomcomponenttree ca nt find example html goes precache nodes tags ca nt found div seem get stripped causes following validation error looking good check run see node associated reactdomcomponent instance actually mountable complicated tag inside element attempts either fail test family tests even need listener attachment set", "d": "4/2017"}, {"body": "even need listener attachment createelement set false used validating server markup client result thrown away", "d": "4/2017"}, {"body": "solves problem", "d": "4/2017"}, {"body": "okay pr soon test page associated code thanks nolanlawson believe fixes issues wheel touchstart touchmove events need test touchstart touchmove edge outside capabilities something someone else could take beyond generally would others able help verify", "d": "4/2017"}, {"body": "createelement false used validating server markup client result thrown away wait nt think true use rendering top server markup called client need attach event handlers like seb said though server rendering attaching code needs get rewritten soon fiber sure happen", "d": "4/2017"}, {"body": "spicyj well shoot okay ideas best way handle invalidly nested tags never get created react still tracking would discussion better want close keep talking", "d": "4/2017"}, {"body": "sorry nt following whole thread saw one comment seemed wrong div gt tr example anything event listeners must missing something would assumed skip events code test public messenger room everyone welcome participate usually responsive close real time happy answer questions", "d": "4/2017"}, {"body": "perfect hop", "d": "4/2017"}, {"body": "use rendering top server markup called client need attach event handlers oops right thanks correcting still learning sorry nhunzaker confusing", "d": "4/2017"}, {"body": "still issue", "d": "4/2017"}, {"body": "yeah issue think way turn warning remove helpful message error represented console", "d": "4/2017"}, {"body": "spicyj think still makes sense worth changing", "d": "4/2017"}, {"body": "would using css flexbox boxordinalgroup rearrange iframes help way nt need remove either iframe dom course would work newer browsers would something one would write top react able find success using flexbox order property hack general solution really seems working well enough purposes trick example order elements dom never truly changes visually reordered styling", "d": "4/2017"}, {"body": "already gone master update docs release since update use issue track", "d": "4/2017"}, {"body": "nt provide polyfill add support simpleeventplugin implementation relatively straightforward right still allow people use popular polyfill need pointer events different platforms react would simply handle another type native events similar something want implement love give shot", "d": "4/2017"}, {"body": "philippspiess even pointer event support added react integrating pep still require manually settingremoving touchaction attribute since nonstandard workaround required pep supporting safariios seems fairly important would still pain point said pointer events added react update pointable handles allows react rest", "d": "4/2017"}, {"body": "milllertime thank input agree api inconvenient idea simply make react understand pointer events pool like touch mouse events since support safari ios vital could write small guide somewhere well explain user set polyfill either using package adding property manually outofthebox support polyfill desired could also whitelist property html elements", "d": "4/2017"}, {"body": "would make sense recommended approach officially documented somewhere thread quite baffling", "d": "4/2017"}, {"body": "found approach work best cases", "d": "4/2017"}, {"body": "think ready think anybody team time right somebody wants contribute big feature react opportunity", "d": "4/2017"}, {"body": "dug back happy see chewing outstanding pull requests right someone would like pick work otherwise could circle back close pull requests", "d": "4/2017"}, {"body": "ok think rebasing reasonable way forward since already bunch work sorry forgot leave note let discuss specifics", "d": "4/2017"}]