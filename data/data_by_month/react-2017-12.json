[{"title": "facebook engineers thank", "body": "facebook engineers working open source like last year reactiflux wanted take moment thank hard work another big year much anticipation react released september react native moved fixing countless bugs adding new features jest releases year yarn relay modern released new engineers joined hey calebmer thesavior axemclion moved miss mkonicek tiny snapshot talking know dealing licensing issues year incredibly difficult frustrating yet handled situation mature humble manner continuing iterate innovate thank happy continue focusing work hand especially chapter finally closed guillermo rauch recently tweeted wraps believe ever react good idea spend rest decade continuing explore implications applications echo sentiment wraps also believe ever embody spirit open source humility servant leadership true focus community driven progress continues astound us thank qualities heart community thank time taken join ama answer questions twitter time taken respond issues merge pr thank going beyond always like invite react community reply thread thank comments team facebook let show grateful feel free include experiences team react ecosystem helped developer sincerely behalf reactiflux community gabegreenberg markerikson kyleamathews taion jquense vcarl benigeri phoenixmatrix btmpl kyleshevlin slightlytyler totaldis", "num": "11940", "d": "12/2017"}, {"title": "fibertriangle fixture working", "body": "see difference async onoff using chrome macbook pro", "num": "11937", "d": "12/2017"}, {"title": "remove legacy todos reactelementcreatefactory reactelementvalidatorcreatefactorywithvalidation", "body": "came across line interested taking first pullrequest please let know required adding warning related tests thank", "num": "11936", "d": "12/2017"}, {"title": "consider specific warning key undefined", "body": "proposed comment changed casing id response forgot commit aaaaaand ended happening basically key undefined could react warn user happens something like looks like tried supply key value supplied undefined check render think might make sense give specific warning case open suggestions specific wording case would used", "num": "11935", "d": "12/2017"}, {"title": "react call onblur callback", "body": "see u", "num": "11934", "d": "12/2017"}, {"title": "issue createreactapp", "body": "os windows bit c usersbharat mogerreact node v c usersbharat mogerreact npm v c usersbharat mogerreact createreactapp version issue createreactapp myapp c usersbharat mogerreact createreactapp myapps creating new react app c usersbharat mogerreactmyapps installing packages might take couple minutes installing react reactdom reactscripts npm err unexpected end json input parsing near luginflowtype dist npm err complete log run found npm err c usersbharat aborting installation npm install save saveexact loglevel error react reactdom reactscripts failed deleting generated file packagejson deleting myapps c usersbharat mogerreact done issue createreactapp myapp issue command npm c usersbharat mogerreact npx createreactapp error eperm operation permitted mkdir c usersbharat typeerror read property get undefined errorhandler c program c program cb c program c program c program arrayforeach c program f c program afterextras c program c program c program npmconfigget json typeerror read property get undefined processerrorhandler c program emitone processemit processfatalexception install prefix latest failed code c usersbharat mogerappdataroamingnpmnodemodulescreatereactappindexjs creating new react app c usersbharat installing packages might take couple minutes installing react reactdom reactscripts npm err unexpected end json input parsing near luginflowtype dist npm err complete log run found npm err c usersbharat aborting installation npm install save saveexact loglevel error react reactdom reactscripts failed deleting generated file packagejson deleting c usersbharat mogerreact done unsolved", "num": "11933", "d": "12/2017"}, {"title": "markojs faster react react become fast markojs", "body": "resources marko vs react indepth look isomorphicuibenchmarks", "num": "11932", "d": "12/2017"}, {"title": "r", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react", "num": "11931", "d": "12/2017"}, {"title": "default value element", "body": "want request feature report bug bug current behavior jsfiddle reset button clicked input value test select value grapefruit expected behavior reset button clicked input value test select value lime", "num": "11929", "d": "12/2017"}, {"title": "point production build unminified file", "body": "want request feature report bug feature current behavior react reactdom point respective minified production builds context included larger bundle undesirable minifying entire bundle produces slightly smaller output constituent pieces already minified expected behavior understand desire keep react small default clearly gate devprod builds would consider pointing unminified production build instead sorry discussed elsewhere could nt find issues versions react browser os affected issue work previous versions react introduced nodeenv check simplified point separate builds", "num": "11928", "d": "12/2017"}, {"title": "enable fiber stable version", "body": "searched lot ca nt find messages enable feature stable version", "num": "11926", "d": "12/2017"}, {"title": "auto refresh another taps react js", "body": "open login page two tabs browser login click another tab also refresh reload react js anyone help", "num": "11925", "d": "12/2017"}, {"title": "featreq render method could receive currentstate currentprops arguments", "body": "want request feature report bug feature current behavior method nt receive expected behavior method called would receive arguments instance could allow destructure arguments get needed properties example versions react browser os affected issue work previous versions react react nt work react version", "num": "11923", "d": "12/2017"}, {"title": "namespace constants inlined production build", "body": "poking umd build noticed namespaces exported domnamespaces inlined string literals first example second example nt great since sort long strings sure bug expected behavior component build system thought report case something configured", "num": "11920", "d": "12/2017"}, {"title": "redacted", "body": "redacted", "num": "11919", "d": "12/2017"}, {"title": "click events nt bubble portal content mobile safari", "body": "want request feature report bug bug current behavior mobile safari dom events originating elements rendered portal bubble propagate react component tree current behavior bug please provide steps reproduce please see following jsfiddle jsfiddle expected behavior seen desktop browser clicking portal content appearing modal including backdrop toggle indicator rendered main content however mobile safari ios click events propagate expected behavior click events propagate react component tree versions react browser os affected issue work previous versions react affected react ios", "num": "11918", "d": "12/2017"}, {"title": "wed\u0142ug projektu", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react", "num": "11917", "d": "12/2017"}, {"title": "react art crashes ssr", "body": "want request feature report bug bug current behavior react art crashes components rendered node expected behavior crash issue lies upstream art fork proposed fix pr needs attention cross posting hope ok", "num": "11916", "d": "12/2017"}, {"title": "props read", "body": "react docs say props read come mobx directly modifies eg onrename gt const todo thispropstodo todotask prompt task name todotask todotask", "num": "11913", "d": "12/2017"}, {"title": "react dom crashes contains three interpolated value one conditional", "body": "want request feature report bug bug current behavior react dom crashes contains three interpolated value one conditional reproduction change value react crashes tell conditional value necessary must three interpolated values expected behavior react crash versions react browser os affected issue work previous versions react react dom think worked crash", "num": "11911", "d": "12/2017"}, {"title": "qq browers show", "body": "webapp work qq browers ok browers react reactdom help please", "num": "11910", "d": "12/2017"}, {"title": "accessing testinstancestate reacttestrenderer package", "body": "want request feature report bug feature current behavior behavior listed docs current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior change state test object shown versions react browser os affected issue work previous versions react would affect browsers", "num": "11909", "d": "12/2017"}, {"title": "html tag property download ca nt work firefox", "body": "jsfiddle os windows browser firefox quantum want use property download download image ca nt work work chrome", "num": "11908", "d": "12/2017"}, {"title": "rendertostaticmarkup escapes amp amp", "body": "want request feature report bug bug current behavior output encoded current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react react expected behavior output versions react browser os affected issue work previous versions react react", "num": "11907", "d": "12/2017"}, {"title": "proposal destructure proptypes import statement standard", "body": "like propose following importing components instead ie javascript import proptypes proptypes class mycomponent extends component static proptypes fetchdata proptypesfunc javascript import func proptypes class mycomponent extends component static proptypes fetchdata func small improvement makes easier see type prop component glance reason nt chosen standard please give opinion reasoning", "num": "11906", "d": "12/2017"}, {"title": "lol", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react", "num": "11905", "d": "12/2017"}, {"title": "feature append component", "body": "way appending components like append nodes function list listref return class parent extends reactcomponent handleclick data gt appendchild thislistappendcomponent render return know easily handled state", "num": "11904", "d": "12/2017"}, {"title": "caret position onchange event ios safari incorrect", "body": "want request feature report bug bug current behavior simple controlled input onchange event also renders output span consistently reproducible caret positioning problems current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react included example setstate wrapped raf fixes issue causes different problem desktop safari expected behavior caret position consistently correspond internal cursor position actually versions react browser os affected issue work previous versions react tested reproducible react ios simulator ios actual device edit investigation seems like might issue safari underlying rendering engine close noop react team", "num": "11903", "d": "12/2017"}, {"title": "provide better message component type undefined ssr", "body": "might reference one problem still exist trying render server side got error nt notation code might problem dependencies thx help", "num": "11902", "d": "12/2017"}, {"title": "tspan text tags working", "body": "want request feature report bug bug current behavior chrome see following errors traced issue persisted seen tags capitalized already rendered inside svg sure else using library well current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react code snippet expected behavior expected behavior charts work without errors console related versions react browser os affected issue work previous versions react react issue occurred updated well", "num": "11899", "d": "12/2017"}, {"title": "reconciler trytoclaimnexthydratableinstance nextnextinstance heuristic creating duplicative elements", "body": "want request feature report bug bug though react code working intended current behavior hydrating serverrendered dom reactreconciler encounters unexpected node peek ahead next dom node test expected node reactreconciler delete unexpected node continue using second node hydrate second node match instance reconciler gives begins inserting dom nodes without trying reconcile case serverside rendering entire document serverside rehydrating level party analytics scripts injected top hydrate call happens causing entire application injected body instead reconciled existing nodes current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react force happen app injecting two empty tags top able reproduce via jsfiddle unsure exact combination flags force specific code path expected behavior ideally reconciler would look sibling nodes find matching element comment code relevant location says hacked together change prove inspecting sibling elements seems working unintended consequences modified nextinstance either hydratable sibling null using mac book pro observe n change measurable situation versions react browser os affected issue work previous versions react introduced react new hydration approach take invariant fullstop error thanks building new approach", "num": "11897", "d": "12/2017"}, {"title": "stop syncing value attribute controlled inputs", "body": "opening follow quick discussions syncing attribute consistent source bugs us benefits seem minimal previous discussion topic issues ca nt remember right would breaking change would done major release reasons keep syncing prevents putting controlled form inputs weird state browser extensions sure read attribute cases sure useful querying inputs specific value using attribute selector reasons stop syncing reduce complexity nontrivial way turn likely reduce bundle size well remove whole class bugs fighting browsers want helpful input values syncing input value attribute potentially exposes sensitive data third party tools think reasons good enough keep syncing attribute critical reasons keep cc nhunzaker jquense gaearon", "num": "11896", "d": "12/2017"}, {"title": "typeerror indexed property setter firefox quantum", "body": "react reactdom v report bug component uses inline styles fails firefox quantum bit percent use classnames everything works expected even wrapping styles objectassign shown fix issue code fails reactdom following function inspect line style name stylevalue fine matching values passed however inspect line stylename undefined also inspect line first argument stylename absolutely fine contains values look second argument styles stylename stylename undefined quantum clearly something screwy basically react app run quantum curreblt breaks quantum console exception output would expect function work quantum chrome safari edge looks like quantum issue function coded check way look whatever needs write style like width directly", "num": "11895", "d": "12/2017"}, {"title": "include component props stack componentdidcatch", "body": "second argument contains componentstack like data nt contain helpful error data user send ticket bugtracker info contain props every component", "num": "11893", "d": "12/2017"}, {"title": "write", "body": "current null null fiber reactdebugcurrentframegetcurrentstack null null gt string null use flow null", "num": "11892", "d": "12/2017"}, {"title": "render quora embedded links react", "body": "site quora offers easy way embed links instance offers quick code snippet works normal html page normally renders like however place code render function like looks like general way fix seeing problem practically every embedded functionality ever used google maps social media install special library handle google maps happening every single embed functionality", "num": "11891", "d": "12/2017"}, {"title": "fbme cdn links redirecting facebook home page", "body": "seems fbme cdn links changed links page seem simply redirect facebookcom previously loading react library noticed app suddenly started giving us error", "num": "11890", "d": "12/2017"}, {"title": "reactchildren take functions children consideration", "body": "component multiple children components different types strings jsx components functions wanted render using reactchildrenmap helper function unwraps children opaque data structure problem children defined functions seem ignored reactchildrenmap reactchildrencount helper functions see example access render directly propschildren wrapper convenient way one never know sure type", "num": "11888", "d": "12/2017"}, {"title": "uncaught typeerror super expression must either null function undefined", "body": "hi getting error browser packagejson appjs import react react import relay reactrelayclassic import create mutationscreate import babelpolyfill class app extends reactcomponent constructor props super props render consolelog thispropsstore return reactjs export default relaycreatecontainer app fragments store gt relayql presets react plugins buildbabelrelayplugin believe relay reactjs getting error even install beta version alpha tried commenting relay code also idea wrong", "num": "11887", "d": "12/2017"}, {"title": "still need check opera beforeinputplugin", "body": "came specific browser check opera opera used blink version opera uses presto still browser support matrix could remove check nt official official guideline opera sophiebits thoughts far back facebook go opera", "num": "11886", "d": "12/2017"}, {"title": "backspace fails clear values input typeemail", "body": "want request feature report bug bug current behavior email input nt control whitespace possible variation issue however shows bug shows current behavior bug demo bug react bug react bug react fiddle bug react fiddle expected behavior user presses backspace key holds values input removed including whitespaces versions react browser os affected issue work previous versions react works bug gt testing chrome macos sierra", "num": "11881", "d": "12/2017"}, {"title": "onclick nt fire components change position", "body": "want request feature report bug bug current behavior list components change height based internal state openclose close user clicks outside component one open time possible toggle component onclicks currently open component ones seems onclick nt fire components different position initially rendered current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior components component open clicked expected behavior achieved using addeventlistener versions react browser os affected issue work previous versions react react tested firefoxchromesafari", "num": "11878", "d": "12/2017"}, {"title": "number input gets cleared typing period decimal mark", "body": "want request feature report bug bug current behavior os browser configured locale uses comma decimal mark finland interested codepen accidentally type period number whole input gets cleared somehow related parent component state updated prop removed component input nt get cleared current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior input retain visible value even would invalid ca nt converted number versions react browser os affected issue work previous versions react react chrome macos tested safari typing period kinda works typing first number period gets converted comma cursor jumps beginning also tested firefox seems think period correct decimal mark", "num": "11877", "d": "12/2017"}, {"title": "problem api", "body": "encountered problem try conditionally render content screen print media types using api latest google chrome windows content intended print media type displayed incorrectly printout preview created minimal demo shows issue first case please open page press ctrl p keys open printout preview console see function called two times one printout preview second main page overlapped printout preview guess case everything working correctly printout see print word main screen screen word displayed even closing preview second case please try open printout preview clicking screen label see functions called nt force component rerendering hence see screen printout preview print label displayed please take look time", "num": "11876", "d": "12/2017"}, {"title": "checkbox updating", "body": "example three seconds check box unchecked class hello extends reactcomponent constructor props componentdidmount render reactdomrender documentgetelementbyid container", "num": "11875", "d": "12/2017"}, {"title": "move jsorg", "body": "maybe move docs", "num": "11874", "d": "12/2017"}, {"title": "unexpected token function jest test component async function expressions", "body": "bug current behavior react component async function calls like var getparameter async function getparameter receive error syntaxerror unexpected token function error resolves remove async babelrc file looks like presets react please advise", "num": "11869", "d": "12/2017"}, {"title": "improve accidental return render props", "body": "know easy accidentally forget return functions arrow functions nt allow returning render functions think children position harder disallow difficult detect undefined return errorwarning also come implementation wonder improve somehow", "num": "11866", "d": "12/2017"}, {"title": "generator component reactdomdevelopmentjs bug", "body": "want request feature report bug bug current behavior reactdomdevelopmentjs behavior different behavior reactdomproductionminjs current behavior bug please provide steps reproduce possible minimal demo problem example nt work replace work expected behavior generators work reactdomdevelopmentjs see given example versions react browser os affected issue work previous versions react", "num": "11864", "d": "12/2017"}, {"title": "react nt rerender dom manual dom tree key prop changes", "body": "want request feature report bug bug current behavior real world used sort array items dn item send new sorting state server ok server responds data sent server rejects sorting sends data beginning array items nt sort back current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react simulated dn sorting programmatically flipping dom nodes via dom interface dom rendered using given state b flip dom nodes seconds b set new state first step b nt help expected behavior sort nodes back b versions react browser os affected issue work previous versions react react issue also appears react", "num": "11863", "d": "12/2017"}, {"title": "shallowrenderer considering contexttypes rendering children", "body": "want request feature report bug bug current behavior shallowrenderer considering contexttypes note able easily include reacttestrenderer fiddle include unit test context used shallow normal rendering const context appname abc mode def expected behavior would expect rendering shallowrenderer render method would check mask property specified like function getmaskedcontext workinprogress unmaskedcontext reactdom library fixed behavior changing render method like inpired getmaskedcontext const oldrender shallowrendererprototyperender shallowrendererprototyperender function render element versions react browser os affected issue work previous versions react bug version upgrading react using enzyme shallow rendering nt behavior difficult say part code changed react enzyme point code sample includes code react libraries", "num": "11862", "d": "12/2017"}, {"title": "consider making lt gt pure unwrapped fragment", "body": "feature request currently pass fragment children custom component component gets fragment child javascript const app props gt const mycomponent props gt childrencount propschildren childrenmap propschildren item gt consolelog itemtype fragment true means components children altered cloned need check first item fragment first take children instead little unexpected reading documentation impression fragment pure abstraction caller side fragment nt propagate components children time understandable fragment might supported props future receiving component might want read fragment shortcut props always mean pure abstraction group children show condition instance maybe react could unwrap children right away elements created pass set children merge another children level react", "num": "11859", "d": "12/2017"}, {"title": "add support nomodule attribute script tag", "body": "want request feature report bug feature add support nomodule attribute script tag current behavior get attribute removed current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior attribute respected versions react browser os affected issue work previous versions react react chrome osx regression nt think ever worked nt intentional oversight open pr add seems like change", "num": "11858", "d": "12/2017"}, {"title": "bug read property isreactcomponent undefined", "body": "ca nt seem find root cause random failure emzyme jest test helps would appreciated n shallowcomponentwrappermountcomponent objectmountcomponent reactshallowrendererrender batchedrender objectbatchedupdates objectbatchedupdates reactshallowrendererrender reactshallowrendererrender reactdefaultbatchingstrategytransactionperform objectbatchedupdates objectbatchedupdates reactshallowrendererunstablebatchedupdates performbatchedupdates withsetstateallowed new shallowwrapper shallowwrapperwrap shallowwrapper shallowwrappersingle shallowwrapperdive processtickcallback", "num": "11857", "d": "12/2017"}, {"title": "able build basic file", "body": "hi error get invariant violation element type invalid expected string builtin components got object likely forgot export component file defined error located rctview view rctview view appcontainer renderapplicationjs appjs like sure wrong would grateful pointers thank import react react import appregistry view text reactnative class app extends reactcomponent render return sierra tanner appregistryregistercomponent sampleapp gt app", "num": "11856", "d": "12/2017"}, {"title": "bug scryrenderedcomponentswithtype", "body": "spits following findallinrenderedtree instance must composite component test case class accordion extends reactcomponent render return thispropschildren const tree reacttestutilsrenderintodocument hello const elements reacttestutilsscryrenderedcomponentswithtype tree accordion expect elements clientheight tobeequal", "num": "11855", "d": "12/2017"}, {"title": "windowopera null problem", "body": "want report bug var named opera value null window loading react react app crashes steps reproduce create new app using createreactapp myapp cd myapp amp amp yarn start add one line windowoperanull closing body tag file publicindexhtml app crashes could nt reproduce jsfiddlenet think problem appears execute windowoperanull loading react expected behavior crash react google chrome version official build info problematic behavior previous versions react", "num": "11853", "d": "12/2017"}, {"title": "listeners leak increasing nodes unmountcomponentatnode", "body": "want request feature report bug possible bug current behavior render simple react app using several times get following chart looks like increasing number listeners nodes application fiddle expected behavior think graph flat versions react browser os affected issue work previous versions react using latest createreactapp react", "num": "11852", "d": "12/2017"}, {"title": "autofocus attr included button element rendered", "body": "want request feature report bug bug current behavior prop component rendered dom according mdn autofocus valid attr button element current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior autofocus attr rendered dom provided prop button component versions react browser os affected issue work previous versions react react chrome", "num": "11851", "d": "12/2017"}, {"title": "reactformwithconstraints unable find node unmounted component", "body": "using reactformwithconstraints form validation version createcompany file extends form submit click calling superhandlesubmit validation throws error package built formwithconstaints file looks like ca nt switch higher version higher version breaks code could someone help packagejson looks like companyform file looks like parent component looks like", "num": "11850", "d": "12/2017"}, {"title": "lifecycle method build initial state classes", "body": "feature request need way build initial state reactcomponent case usage classes current behavior warning case thisstate modified willcomponentmount access partially constructed object case somewhat complex state building logic constructor example hierarchy classes buildstate method called constructor generate initial state derived class overrides buildstate method richer state result part object related derived class wo nt constructed yet ca nt accessed buildstate buildstate approach currently used resub framework expected behavior rather warning case thisstate modification new lifecycle method called right constructor call returns state versions react browser os affected issue work previous versions react react affected", "num": "11847", "d": "12/2017"}, {"title": "react new error handling functionality seems harm good", "body": "nt sure report problem new feature finished upgrading team react overall think upgrade great using fragments relaxed constraints return render overall happy issue error boundaries feature seems wellintended help quite bit improved error reporting especially beautiful make debugging dream problem believe leaving users worse state display fallback uis perfect world would client side errors none would even discussion unfortunately deal clientside errors agree leaving ui unpredictable state less desired would argue still better taking away ui completely user triggers clientside error ui still continue use site littletono issue case errors react new functionality even smallest errors unmount ui options go easy route implement toplevel error boundary unmount whole ui replacing fallback nothing user take significant developer time implement finegrained error boundaries still leave ui untouched replacing components error overall still taking functionality away user either way new functionality need least toplevel error boundary display something user toplevel boundary still displays navigation bar user still navigate away page use parts site alternative need refresh page everything unmounted agree displaying fallback ui useful instances expect error cases example loading image third party cdn something cases bug producing unexpected error still able keep ui previous state envision working error boundaries still exactly today except error thrown inside render component component either mounted nt yet mounted left prior state already successfully mounted parent offending component parent children still rendered error thrown inside lifecycle method offending component tree left children parent still updated error boundaries still display fallback ui want componentdidmount still ability set state handling expected error display fallback ui handling unexpected error try leave ui unbroken state possible user error still reported caught toplevel error boundary logged ui need replaced instances perhaps missing standard process handling problems talking happy hear people get around believe feature exists today means work developers poor functionality users", "num": "11846", "d": "12/2017"}, {"title": "incorrect error tag", "body": "want request feature report bug bug current behavior currently gives error tag current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior tag end tag per spec react report errors versions react browser os affected issue work previous versions react react writing sure previous version dependent browser version", "num": "11845", "d": "12/2017"}, {"title": "redirect home login react redux", "body": "new working react try redirect another page something like home page user authenticate getting problems nested routes tried solution one documentation nt work way need basic code login github repository thanks advance help", "num": "11844", "d": "12/2017"}, {"title": "question need help react new lifecycle", "body": "hi update react read create fiddle example codesandbox understand worked hot reload component inside hoc component updated error jsx const connect composed props gt class connect extends component getchildcontext return gt one subscriptions unmout thissubscriptionssome return connect import connect child grandchild connect connect class app extends component render return try use without hoc okay jsx class connect extends component getchildcontext return gt one subscriptions unmout thissubscriptionssome render return jsx class child extends component componentwillmount consolelog child willmount thissubscribe componentwillunmount consolelog child willunmount thisunsubscribe class grandchild extends component componentdidmount thiscontextsome consolelog child didmount one idea put connect component inside connect decorator render return composed inside parent work fine hope bug jsx const connect composed props gt class connect extends component render return thispropschildren return class extends component render return", "num": "11843", "d": "12/2017"}, {"title": "possible declare class variable component class", "body": "possible declare class variable component class example js class app entends reactcomponent myvariable true render consolelog thismyvariable possible return return dom element used declare variables earlier using clientside rendering using webpackdevserver recently moved serverside rendering using express webpackmiddleware declare class variables going wrong", "num": "11842", "d": "12/2017"}, {"title": "map defined", "body": "use project mobile error map defined", "num": "11841", "d": "12/2017"}, {"title": "better use three definitions variables react", "body": "one const arr class watchstore extends component constructor props super props two class watchstore extends component constructor props super props thisstate arr three class watchstore extends component constructor props super props componentdidmount thisarr best way use three defined methods arr need rendered make temporary cache comparison new data", "num": "11839", "d": "12/2017"}, {"title": "hydration warning code splitting server side rendering", "body": "want request feature report bug bug maybe current behavior server side rendering enabled server side along code splitting client side app throws warning code splitting disabled warning goes away expected behavior error message shown servermarkupjs javascript const markup reactdomserverrendertostring appjs javascript import route switch reactrouterdom import pagesaboutpage import homepage pageshomepage import learnmorepage pageslearnmorepage class app extends component lt gt render return moving client side indexjs javascript import hydrate reactdom import clientapp clientapp hydrate documentgetelementbyid root clientappjs javascript type asynccomponentstate component function asynccomponent importcomponent function class asynccomponent extends component lt asynccomponentstate constructor props super props return asynccomponent const asynccomponent gt import pagesabout const homepage asynccomponent gt import pageshomepage const learnmorepage asynccomponent gt import pageslearnmorepage class clientapp extends component lt gt render return export default clientapp change include instead ie disable code splitting dont get warning missing something versions react browser os affected issue work previous versions react react found similar qn stackoverflow unfortunately reply", "num": "11838", "d": "12/2017"}, {"title": "react preserves duplicates dom node rerender", "body": "hi guys getting really weird behavior latest project assume bug react want override default browser context menu subscribed events right click context menu want show custom div left click div hide event listeners oncontextmenu e gt etarget id contextmenuid const offsetx offsety e const contextmenu isactive true position x offsetx offsety thissetstate contextmenu epreventdefault onclick e gt const contextmenu isactive false position x thissetstate contextmenu thisstatecontextmenuisactive amp amp add new note assume everybody imagine expected behavior real behavior right click gt context menu shows gt left click gt context menu still gt right click gt another context menu shows literally see dom nodes duplicated elements tab devtools try code file try rightleft click somewhere blue area environment ms windows chrome react", "num": "11836", "d": "12/2017"}, {"title": "cursor jumps backspacing number input shadowdom", "body": "want request feature report bug bug current behavior number inputs decimal values chrome shadowdom maintain cursor position user backspaces input field super lowquality gif sorry issue appears similar problem case custom elements shadow root exhibit problem current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react react component render number input attach react component part shadowdom node custom element enter decimal value eg input slowly backspace input soon decimal point would last character decimal point removed cursor position jumps beginning input demo expected behavior shadowdom case behaves like cases backspacing input cursor jump beginning input decimal point unexpectedly deleted versions react browser os affected issue work previous versions react react chrome osx", "num": "11827", "d": "12/2017"}, {"title": "react call onblur callback", "body": "want request feature report bug bug current behavior input control becomes disabled react call onblur callback current behavior bug please provide steps reproduce possible minimal expected behavior focus input element press enter button makes input disabled equal", "num": "11826", "d": "12/2017"}, {"title": "anchor text content mismatch causes unwanted focus page scroll", "body": "want request feature report bug bug current behavior serversiderendered text content anchor match anchor focused causing page scroll browsers current behavior bug please provide steps reproduce possible minimal demo problem issue isolated ssr necessary expected behavior button focused versions react browser os affected issue work previous versions react react ok react broken reproducible latest safari chrome firefox probably others", "num": "11824", "d": "12/2017"}, {"title": "development env check friendly bundlertools except webpack", "body": "nt like use lots coders nt use china easetouse tool called problem parse filedependencies checking keywords like right react added codes like get result current file rely files need one u guys please make agnostic environment let tools work", "num": "11820", "d": "12/2017"}, {"title": "mousedown mouseup abandoned chrome", "body": "see mousedown mouseup possibly others anything chrome possible shim pointervents somehow", "num": "11817", "d": "12/2017"}, {"title": "devan criego", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react", "num": "11816", "d": "12/2017"}, {"title": "enable synchronously toggling experimental addusertiminglistener", "body": "currently reactinternalsaddusertiminglistener enables logging user timing api inside however use case building profiling tool instrumentation turned time avoid overhead randomly turned period take sample would ideal able enable logging synchronously eg turn start callstack turn end synchronous stack complicated fact enabled state logging toggled inside react callstack profiler would control toggling happens think would fine throw errorreturn falsesomething like logging toggled inside react stack allowing profiler try later fact toggling synchronous profiler cp avoid error toggling start end event handlersettimeoutreqanimframe etc would ensure inside synchronous call react though quite sure implications fiber would react async rendering mean could reenter event loop time toggling happen alternatively toggling could happen async later react stack like setstate case code requesting toggling would probably need kind callback know toggling happened keep track whether react logging however variant seems like would complicated implement use case nt think useful toggling fail recoverable way cc gaearon", "num": "11812", "d": "12/2017"}, {"title": "virtual dom replacement template literals hyperhtml", "body": "want request feature report bug feature current behavior usage virtual dom prevents console errors direct dom manipulation meanwhile slower suggestedexample api makes obsolete altogether real world terms expected behavior ability use libraries expect manipulate dom styling frameworks hyperhtml server side also experimental native implementation", "num": "11810", "d": "12/2017"}, {"title": "feature request global state renderhydrate level", "body": "feature request relates pain point sure better issue state available components without passing everything props component tree speaking global state use context couple issue root component job receive disseminate state root component component nt care root maybe example using express page might well components composed however like nt care depth talking multipage app thinking around react seems skewed toward special case single page app spa sometimes right choice google maps clearly right something broader scope like amazoncom clearly general case much interesting solve every root component wrapped publishes context downwards every nonroot component wrapped receiver higher level component declares context boilerplate expressive bookkeeping alternatives nt far know component knows props possibly context passed nt handle data current render call simply importing global state commonjs modules impossible serverside anything request scoped like query params route params cookies headers anything generated middleware based things proposal handle global state higher level props passed component component extend reactdomrender take argument global context would make everyone life easier nt even worry changes firing componentwillreceiveprops least first version think analogous express req object passed around one always access per request object many things would useful put authenticated user geolocation store redux query route params etc etc would look like request specific data might things truly request specific also things across requests latter done imports bit messy end code like global data available components tree simplifies things lot nt think", "num": "11809", "d": "12/2017"}, {"title": "reacttestrenderer include fragments", "body": "want request feature report bug bug current behavior docs result current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react see expected behavior somehow lost sure would make sense somewhere versions react browser os affected issue work previous versions react", "num": "11808", "d": "12/2017"}, {"title": "false positive warning style mismatch hydrating server markup", "body": "want request feature report bug bug biggy sure support development current behavior seems always throw warning hydration failures eg warning prop match server textdecoration none client textdecoration none note space colon none server client space current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react ssr rendered component using inline styles hydrate doesnt occur either chrome firefox expected behavior warning versions react browser os affected issue work previous versions react react browser", "num": "11807", "d": "12/2017"}, {"title": "remove selectionstart polyfill", "body": "looking code would exist according might wrong though would nice check remove relevant code supported everywhere else", "num": "11806", "d": "12/2017"}, {"title": "run benchmark trials random order", "body": "current benchmark script runs trials specific order try running note takes looong time finish think running trials deterministic order like may actually introduce issues process starts grabbing cpu middle trials specific set trials eg hn benchmark base repo affected results skewed ran trials random order would expect temporary changes evenly distributed random runs thus favor particular version benchmark would nt better make sense tagging good issue look nt promise would easy", "num": "11805", "d": "12/2017"}, {"title": "consider removing xml compatibility ssr hiding behind option", "body": "see sure important seems suboptimal send extra markup people nt need xml", "num": "11799", "d": "12/2017"}, {"title": "select warning fires repeatedly", "body": "want request feature report bug bug current behavior see fiddle warning related select fires repeatedly gaearon tells dedupe bug current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react see expected behavior see versions react browser os affected issue work previous versions react", "num": "11795", "d": "12/2017"}, {"title": "understanding reconciliation", "body": "one tutorial mentioned thisstateshowwarning return return instance maintained renders understand however let consider transition means became react checks previously first child div nt unmount instead seems compare keys find nt change question related comparison logic order based components different renders first compared based keys tutorial author goes example thisstateshowwarning return return says showwarning goes false true react check say hey component let unmount example previous keys explicitly provided based react compare based position tree fact first childs div found code seems react uses name property first instance compare previous next children fail see name", "num": "11793", "d": "12/2017"}, {"title": "hydrating component causes warning component render", "body": "want request feature report bug bug current behavior hydrating prerendered component uses object method get warning component also appear blank noteworthy since markup returned appears correct meaning markup ssr server returns correct markup appears page use client without ssr correct get errors current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react code posterity js import react react import hydrate reactdom const helloobj tostring gt bonjour const mycomponent gt hydrate documentgetelementbyid app expected behavior component blank error outputted console versions react browser os affected issue work previous versions react reactreactdom worked lt confirmed working use method chrome version os x", "num": "11789", "d": "12/2017"}, {"title": "synthetic event breaks", "body": "want request feature report bug bug current behavior breaks current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react explicitly used extend prototype expected behavior work versions react browser os affected issue work previous versions react broken react used work react recommended approach use babel polyfill open new issue", "num": "11788", "d": "12/2017"}, {"title": "input attribute readonly triggers warning prevents attr passed component", "body": "came across warning attempting pass attribute input rendered within party component warning unknown dom property readonly mean readonly valid input attribute sure error coming assuming react error seems pretty generic would nice get past error component wo nt get attribute trying pass", "num": "11785", "d": "12/2017"}, {"title": "refactor packagessharedreactdomframeschedulingjs", "body": "found code format good packagessharedreactdomframeschedulingjs js ide always give warn follows think refactor", "num": "11784", "d": "12/2017"}, {"title": "rfc remove vars follow", "body": "removed pr thanks raphamorim merged could lint developers use bit tricky files use way override lint configuration subset files discuss solutions", "num": "11783", "d": "12/2017"}, {"title": "component unmounts directly mount", "body": "wrapper components get state mountedfalse directly mounting componentwillunmount nt fire components still mounted dom state changes fired component context eg onclick listeners result errors unmounting reproduce issue jsfiddle possibly due differences environment currently nt much time explain two gists components together break gist breaking component usage one issues found literally directly mounting prints false environment ff beta react babel plugins env ff gt chrome last versions safari last versions react using reacthotloader happens page reload well", "num": "11781", "d": "12/2017"}, {"title": "access react object within page js", "body": "reactvr object rendering code react initialised periodically receiving server updates want pass react props props react object set normal js server updates coming via websockets connection within react messages received normal js normal js returns data server use within react connection gets opened message never received however messages sent within react js socketaddeventlistener message function event consolelog message server eventdata", "num": "11777", "d": "12/2017"}, {"title": "testing asynchronous setstate react", "body": "hello read article dave ceddia snapshot testing react components jest useful got big doubt jest works one nt understand jest manage asynchronous process called instance example article function calls increments value perfect test assure called calls ended second call strongly believe got misconception process one help well received thanks lot advance ps redirected", "num": "11775", "d": "12/2017"}, {"title": "chrome extensions mutate dom notfounderror", "body": "want request feature report bug bug maybe question current behavior chrome sure browsers chrome extensions mutate dom willynilly turn react goes update node get critical error notfounderror nt error boundary place whole app blows reproduce fiddle simple phone number counter work install google voice chrome extension reload fiddle enable extension expected behavior sure honestly annoying entire page crashes rather maybe throwing warning type error skipping corrupt node afraid cascading effect type change might maybe react nt cater type error case added error boundaries help track issues amount places getting bit absurd making tricky new feature development rate might well setting user input text nt seem like good solution common enough since added react project fixed different instances find one two week right seem slowing though fear ongoing fightmaintenance issue versions react browser os affected issue work previous versions react react previous version react also similar issues nt seem crash like react thankfully react error boundaries predictable handles chrome latest", "num": "11774", "d": "12/2017"}, {"title": "smarter autofocus", "body": "believe autofocus improved better dx browsernative autofocus nice work component updated sure fine pretty common need focus component updated yep declaratively immutable data ftw least works use wrapper component check componentdidupdate method hope makes sense", "num": "11773", "d": "12/2017"}, {"title": "pressing tab text input moves input bug", "body": "want request feature report bug report bug current behavior pressing tab inside text input physically moves input page demo expected behavior either nothing switch inputs versions react browser os affected issue work previous versions react react version os mac osx browser chrome happen firefox nt know post ca nt figure react bug something else implementation simple", "num": "11772", "d": "12/2017"}, {"title": "error rendering inputs separate window using portals", "body": "want request feature report bug bug current behavior using react portals render react elements completely separate popup window attempt render popout window following error occurs react fails render window turns white reactdomdevelopmentjs expected behavior renders correctly popout window steps reproduce created repo clone recreate issue use service like jsfiddle accesscontrolalloworigin error main browser window popout window separate domains popout machine local use jsfiddle repo modified clone createareactapp steps reproduce included repo readmemd files interest repo appjs popoutportaljs repo kgorgireactpopoutbug versions react browser os affected issue work previous versions react bug occurs edge ie popout window renders correctly chrome firefox tested bug react os windows", "num": "11768", "d": "12/2017"}, {"title": "figure better fix memory leak", "body": "see filing follow", "num": "11763", "d": "12/2017"}, {"title": "fix misleading error message production", "body": "see test case pretty sure different message production nt intentional consequence set production functional components need see possible emit useful message development production possible need change production message ambiguous instead suggesting wrong reason problem", "num": "11761", "d": "12/2017"}, {"title": "reactcreateelement type invalid warning using reactfragment", "body": "react shows warning console use reactfragment", "num": "11759", "d": "12/2017"}, {"title": "testing react", "body": "hi using jest trying write test jsxfragments something new need order jsxfragments testable currently getting issue error seems coming babel", "num": "11758", "d": "12/2017"}, {"title": "make state independent", "body": "component javascript import react component react class inputtest extends component constructor props super props export default inputtest use component like javascript import react component react import inputtest bbb class componentname extends component constructor props super props export default componentname use twice make every state independent", "num": "11755", "d": "12/2017"}, {"title": "inline style currentcolor support", "body": "complied", "num": "11753", "d": "12/2017"}, {"title": "investigate foreach iterations showing init time profiling", "body": "sure real chrome profiler highlights places init time hot paths taking need good look", "num": "11748", "d": "12/2017"}, {"title": "elements rendering import usage", "body": "react attempting render soon imported regardless whether used component imported zero information highly worrysome stopped production componentajs path called router things saved session storage c rendered const item sessionstoragegetitem things saved export default const componenta props gt componentcjs import componenta componenta used yet import componentb componentb const componentc props gt error item null", "num": "11743", "d": "12/2017"}, {"title": "react complains use constructor", "body": "code gives following warning nt happen variable acceptable call constructor", "num": "11738", "d": "12/2017"}, {"title": "still need stringify attributes assigning", "body": "react manually stringifies attributes assigning appears however possible behavior see get rid dompropertyoperations", "num": "11735", "d": "12/2017"}, {"title": "valuedefaultvalue symbolfunction ignored stringified", "body": "regression master found thanks attribute fixture snapshots", "num": "11734", "d": "12/2017"}, {"body": "really appreciate let keep great vibes", "d": "12/2017"}, {"body": "thank react team opensource contributors", "d": "12/2017"}, {"body": "thanks bunch keep awesome everyone", "d": "12/2017"}, {"body": "thanks hard work fellows make life hell lot easier", "d": "12/2017"}, {"body": "thank react one first javascript frameworks looked incredibly helpful let learn stay cool", "d": "12/2017"}, {"body": "thank keep good job", "d": "12/2017"}, {"body": "thank fostered community happy part keep", "d": "12/2017"}, {"body": "thank much work", "d": "12/2017"}, {"body": "keep", "d": "12/2017"}, {"body": "thank hard work keep", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "thank keep student france learning something else php great allowed grow little bit dev even ideas make", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "thank changed way view ui programming open source lt", "d": "12/2017"}, {"body": "starting company part facebook hard work open source thank", "d": "12/2017"}, {"body": "js const thankyou gt thanks lot react team const issue await githubgetissue facebookreact issuedomrender issue", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "thank much react provided ability built best webapps web keep going", "d": "12/2017"}, {"body": "thank everything done keep", "d": "12/2017"}, {"body": "thank react great success", "d": "12/2017"}, {"body": "thanks lot great honour use react native", "d": "12/2017"}, {"body": "thank effort put make react awesome", "d": "12/2017"}, {"body": "thank works", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "thank much", "d": "12/2017"}, {"body": "appreciate investment fb engineers made react ecosystem thank contributedmaintained projects ecosystem understand first hand prior experience open source difficultstressfultime consuming deep appreciation maintained passion keep effort", "d": "12/2017"}, {"body": "thank guys new react tell helps lot building new stuff", "d": "12/2017"}, {"body": "react repo documentation seen many great improvements huge thanks team facebook everyone else contributed year fun even great work clinkingglasses", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "thank much hope great new year", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "thankyou lt", "d": "12/2017"}, {"body": "lot us would probably even jobs nt amazing open source projects built amazing developers like facebook team thank", "d": "12/2017"}, {"body": "u changed life guys thank much", "d": "12/2017"}, {"body": "love react thank happy new year", "d": "12/2017"}, {"body": "import react react import reactdom reactdom const thankyoumessage thank effort put making react awesome thankyoumessagemap message gt const message message gt message reactdomrender documentgetelementbyid root", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "used many frameworks amp libraries past really appreciate thought design put react love using tool find great teaching good javascript design skills", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "thank making web development world better place", "d": "12/2017"}, {"body": "thank making webnative development joy", "d": "12/2017"}, {"body": "amazing work ca nt wait see store react", "d": "12/2017"}, {"body": "thank putting much love efforts wonderful library react wish great new year", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "thanks team making web mobile development lot fun lt", "d": "12/2017"}, {"body": "big thank react team devs contributed", "d": "12/2017"}, {"body": "thanks creating perceive best frontend solution adaptive view management stay frosty", "d": "12/2017"}, {"body": "thanks great year development react onward upward", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "thank much guys appreciative people dedicate time open source much success new year", "d": "12/2017"}, {"body": "thanks guys thanks dan", "d": "12/2017"}, {"body": "thank guys work impressive", "d": "12/2017"}, {"body": "thx supporting community", "d": "12/2017"}, {"body": "thank team using react well year constantly ever day work landed job dedicated react apps looks forward development", "d": "12/2017"}, {"body": "thanks folks keep great work", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "thank keep great work", "d": "12/2017"}, {"body": "thanks impeccable release decision relicense react mit use react reactdom immutablejs jest daily basis make opensource work possible", "d": "12/2017"}, {"body": "tank guys lt", "d": "12/2017"}, {"body": "thanks work looking forward future react", "d": "12/2017"}, {"body": "thank maintainers contributors make possible", "d": "12/2017"}, {"body": "thank open source contributors", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "thank much hard work make web development experience enjoyable", "d": "12/2017"}, {"body": "keep good work", "d": "12/2017"}, {"body": "thank guys keep", "d": "12/2017"}, {"body": "thank keep great work", "d": "12/2017"}, {"body": "react extremely amazing abundant ecosystem breeze develop react yarn lock files ensure packages throughout board npm wants bring npm yarn fast never think using npm sincerely thank developers facebook maintaining libraries appreciate efforts keep good work", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "react framework key keeping really excited front end developer thank helping make development days pleasant", "d": "12/2017"}, {"body": "thank team infinite red large chunk software built year enabled work grateful", "d": "12/2017"}, {"body": "thank much", "d": "12/2017"}, {"body": "thanks making love frontend development", "d": "12/2017"}, {"body": "thanks awesome code", "d": "12/2017"}, {"body": "thank everybody react team", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "thank guys making programming accessible months ago could nt make anything build web apps android apps ios apps desktop apps thanks react love paris", "d": "12/2017"}, {"body": "gracias totales desde paraguay", "d": "12/2017"}, {"body": "graphql flow react native great stuff", "d": "12/2017"}, {"body": "thanks everyone fb open source senegal", "d": "12/2017"}, {"body": "thank react changed life", "d": "12/2017"}, {"body": "thank london", "d": "12/2017"}, {"body": "thanks awesome work year guys felizz navidad happy new year boddom hearth", "d": "12/2017"}, {"body": "thank much", "d": "12/2017"}, {"body": "thank guys work amazing thank making developing fun thing instead boring", "d": "12/2017"}, {"body": "thank lt lt lt lt", "d": "12/2017"}, {"body": "thank open source teams facebook large projects react jest yarn buck also smaller projects nt get quite much recognition", "d": "12/2017"}, {"body": "thanks", "d": "12/2017"}, {"body": "thank happy new year everyone much health good code", "d": "12/2017"}, {"body": "yeah really useful right people also started making clones libraries without really understanding works demonstrates probably fix better replace examples easier understand future matter async rendering ready show anything useful anyway demos done early stage still need finish feature properly", "d": "12/2017"}, {"body": "think would better display comments html red color anyway close issue", "d": "12/2017"}, {"body": "hey onstash believe actually already implemented used place development build todo comment probably removed since date assuming understood correctly", "d": "12/2017"}, {"body": "think probably raise tiny pullrequest removing todos outdated thanks quick update aweary", "d": "12/2017"}, {"body": "doubt directly accessible user yes might need replicate warning present snippet linked probably todos present module might need remove todos outdated missed anything", "d": "12/2017"}, {"body": "onstash exposed looking back git history todo comment added current warning implemented think outdated comment needs removed", "d": "12/2017"}, {"body": "hi gaearon would like take issue first pull request complex wait discussions specific wording come conclusion", "d": "12/2017"}, {"body": "feel free propose behavior think would reasonable", "d": "12/2017"}, {"body": "approach warning could modified present sure foolproof solution hack please let know thoughts", "d": "12/2017"}, {"body": "values simply wrong objects empty strings booleans null undefined miss", "d": "12/2017"}, {"body": "ah nt think invalid values thanks pointing wait gaearon reply comments", "d": "12/2017"}, {"body": "yes know", "d": "12/2017"}, {"body": "looks like createreactapp probrem would better create issue createreactapp issues", "d": "12/2017"}, {"body": "error occurred npm package installing try still resolved", "d": "12/2017"}, {"body": "bro still issue going c usersbharat mogerreact npm cache clean force npm warn using force sure hope know c usersbharat mogerreact createreactapp myapp creating new react app c usersbharat mogerreactmyapp installing packages might take couple minutes installing react reactdom reactscripts npm err code enotfound npm err errno enotfound npm err network request failed reason getaddrinfo enotfound registrynpmjsorg npm err network problem related network connectivity npm err network cases behind proxy bad network settings npm err network npm err network behind proxy please make sure npm err network proxy config set properly see npm help config npm err complete log run found npm err c usersbharat aborting installation npm install save saveexact loglevel error react reactdom reactscripts failed deleting generated file packagejson deleting myapp c usersbharat mogerreact done", "d": "12/2017"}, {"body": "let see error message network connectivity error reason npm package fetching typically network environment unstable using proxy server anyway please try command times fortunately network environment improved seems succeed", "d": "12/2017"}, {"body": "resolved c usersbharat mogerreact npm cache clean force npm warn using force sure hope know c usersbharat mogerreact npm cache clean force npm warn using force sure hope know c usersbharat mogerreact npm cache clean force npm warn using force sure hope know c usersbharat mogerreact createreactapp myappdg gon na ready creating new react app c usersbharat mogerreactmyappdg installing packages might take couple minutes installing react reactdom reactscripts npm err code eintegrity npm err integrity checksum failed using wanted got npm err complete log run found npm err c usersbharat aborting installation npm install save saveexact loglevel error react reactdom reactscripts failed deleting generated file nodemodules deleting generated file packagejson deleting myappdg c usersbharat mogerreact done may need install yarn", "d": "12/2017"}, {"body": "may need install yarn yeah try switch", "d": "12/2017"}, {"body": "yep seems solved yarn thanks ryotamurakami meet u instructions npm install g yarn yarn global add createreactapp createreactapp myapp solved", "d": "12/2017"}, {"body": "quick glance seems like using development build react measurements going pretty slow state many times documentation nt think productive us spend time reaching authors libraries publish inaccurate benchmarks interested correct measurements rather promoting library would surely reach us first confirm benchmark set correctly", "d": "12/2017"}, {"body": "also made improvements ssr performance react added streaming mode article content also outdated results synthetic benchmark", "d": "12/2017"}, {"body": "nt look like actual issuebug accident please close issue", "d": "12/2017"}, {"body": "looks like spam going close feel free clarify later reopen", "d": "12/2017"}, {"body": "context included larger bundle undesirable minifying entire bundle produces slightly smaller output constituent pieces already minified explain sure following technically bundler make another renaming pass anyway see matters", "d": "12/2017"}, {"body": "lnwu react fiber reconciler already enabled react version need specify flag enable", "d": "12/2017"}, {"body": "vikramcse correct fiber something enabled disabled description reconciler architectured", "d": "12/2017"}, {"body": "mean async rendering actually see change way rendering version", "d": "12/2017"}, {"body": "lnwu async rendering still work progress", "d": "12/2017"}, {"body": "hey sathiyamm try use issue tracker bug reports feature requests recommend checking list great support resources listed doc page get support case nothing react specific sending messages tabs recommend referring stackoverflow general resources communication tabs windows might useful thanks", "d": "12/2017"}, {"body": "eddyw proposal", "d": "12/2017"}, {"body": "oh cool used search box duplicate nt found one", "d": "12/2017"}, {"body": "little hard find via search please direct feedback rfc thanks", "d": "12/2017"}, {"body": "intentional gzip algorithm works trying alias sequences bytes optimal way aliasing strings manually almost always makes compressed code size bigger subverts gzip algorithm aliasing closure compiler almost always inline strings make compressed code smaller", "d": "12/2017"}, {"body": "gaearon interestingly enough manually removed inlined namespace string aliased resulting file size bytes compared original bytes according huge difference wonder compressing better curiosity also aliased inlined strings appear often example got size bytes", "d": "12/2017"}, {"body": "clue issue resolved noop click handler containing dom element see", "d": "12/2017"}, {"body": "clue issue resolved noop click handler containing dom element already attach empty listeners elements click handlers behavior ios safari could element passed", "d": "12/2017"}, {"body": "hey aweary would like take add empty listener element passed well", "d": "12/2017"}, {"body": "props object readonly ca nt mobx lets modify individual objects passed props different currently supported although hard right manually avoid unless using wellmaintained library like mobx", "d": "12/2017"}, {"body": "tagging good first issue", "d": "12/2017"}, {"body": "gaearon take", "d": "12/2017"}, {"body": "could related", "d": "12/2017"}, {"body": "know runtime environment provided qq browser likely need add polyfills check react requirements react also assumes browser supports might need shim qq browser full support hope helps", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "react issue reproducible plain html well firefox allow download attribute crossorigin links see", "d": "12/2017"}, {"body": "thanks", "d": "12/2017"}, {"body": "correct behavior attribute values htmldecoded browser escaping security issue", "d": "12/2017"}, {"body": "main reason written published commonjs module yet certain whether able named import commonjs module real native modules overwhelmingly likely already guaranteed node able import commonjs module default export one common point confusion even happens work things transpiled", "d": "12/2017"}, {"body": "sounds right revisit node supports esm either choice broken way think ideally switch named exports eventually either way right place file would", "d": "12/2017"}, {"body": "update state render item needed", "d": "12/2017"}, {"body": "think cases components nt need reflect state notifications instance", "d": "12/2017"}, {"body": "jvitoroc notification state driven event timeout", "d": "12/2017"}, {"body": "jvitoroc state hold data rendered simple structures maybe boolean used decide render jsx const item data gt data class parent extends component state items handleclick data gt thissetstate items thisstateitems data render thisstateitemslength return null", "d": "12/2017"}, {"body": "edit investigation seems like might issue safari underlying rendering engine close noop react team expand found", "d": "12/2017"}, {"body": "expand found yeah sorry vagueness simple pure js example using event", "d": "12/2017"}, {"body": "lukasborawski running versions using two different versions especially minor major versions lead unexpected behavior try updating see issue persists otherwise need example reproduces issue investigate thanks", "d": "12/2017"}, {"body": "issue first argument passed kind object versions updated nothing changed diff react react reactdom reactdom", "d": "12/2017"}, {"body": "please provide reproducing project help otherwise", "d": "12/2017"}, {"body": "best guess imported component incorrectly thus ended type change throw better error happens", "d": "12/2017"}, {"body": "gaearon project reproduce issue tryed versions node amp", "d": "12/2017"}, {"body": "aweary gaearon trebushuk updated react version still issue looked components imports looks fine typical normal ca nt share project bc one customers private ideas", "d": "12/2017"}, {"body": "project reproduce issue text error version text error", "d": "12/2017"}, {"body": "problem changed everything fine close issue", "d": "12/2017"}, {"body": "mentioned verify possibly rendering tag outside parent element tried reproducing issue appears working fine could please provide reduced test case reproduces issue thanks", "d": "12/2017"}, {"body": "insert scripts hydration render server", "d": "12/2017"}, {"body": "scripts parties injected google tag manager script one ssred initial gtm script part ssr dom race condition script injection application startup small addendum also affecting elements update head via react page navigation happens party scripts inject top head ever happened best practices causes issue duplicated title meta link etc elements frustrating duplication css loads applies stylesheet twice work around right calling remove amp reappend elements direct children head body bottom nodes", "d": "12/2017"}, {"body": "constraints would easier hydrate element inside body use regular template parts outside", "d": "12/2017"}, {"body": "aware relying edge case nt well supported mostly due browser differences case party scripts causes react team headaches roadmap move application single container body figure something different updating head difficult justify time modify systems change something already works course longer already works bandaid top support think reasons support different fallback method reconciler currently comment block code could read agreeing however definitely understand much edge case consider supporting full", "d": "12/2017"}, {"body": "think really try make happen many bugs intractable frameworks try keep sync seems like something react sense would nt hard benefit nt case hard browser extensions sure read value attribute cases sure nt think able verify case even tho say extensions problem fix admit tho stance tenable nt big problem extensions formreset case seems compelling keeping behavior strike folks probably using formreset controlled components compelling reasons done lot work forms react never used form reset controlled components idk", "d": "12/2017"}, {"body": "using controlled components means state kept somewhere form controller component want able use component owns listen reset state stopping syncing seem anything enable antipatterns although curious helpful browser case edit looks like confuse attribute property", "d": "12/2017"}, {"body": "think original justification lot people felt mismatch value attribute property counterintuitive time many people learned react dom apis aware distinction felt wrong attribute browser devtools looks like html match attribute see jsx looks like html agree poor justification hindsight probably solved educating users instead eg documentation blog posts unfortunately fixed likely people rely behavior ultimately agree give change back", "d": "12/2017"}, {"body": "prevents formreset putting controlled form inputs weird state think could neat stuff value attribute synchronized could allow controlled inputs control form reset could fire synthetic change event associated inputs matching effectively controlling browser extensions sure read value attribute cases sure possible forgotten already feel like every time comes noone able answer question really love nail one useful querying inputs specific value using attribute selector nice think unique react okay dropping conforming way standard html manages value propertyattribute natively definitely simpler", "d": "12/2017"}, {"body": "codeuniquely tried reproducing jsfiddle firefox macos seems work fine could please provide runnable example reproduces error use jsfiddle template assuming error reproducible would better report bug bugzilla", "d": "12/2017"}, {"body": "aweary looked jsfiddle set couple things nt understand fiddle use react seems running version using styles directly elements prior works app works prior react versions started using jsfiddle put point try attach object jsx element using style property appear test error described sure proceed build demonstrable jsfiddle specifically running react advice", "d": "12/2017"}, {"body": "codeuniquely sure looking jsfiddles running jsfiddle put point try attach object jsx element using style property appear test error described first link posted exactly jsfiddle attempting reproduce issue empty jsfiddle use starting point", "d": "12/2017"}, {"body": "issue caused reactclonecomponent call another class file related progress bar way never rendered page progress bar rewrote glass gridtile removed issues setting styles quantum", "d": "12/2017"}, {"body": "sorry", "d": "12/2017"}, {"body": "nt understand two lines code write meaning", "d": "12/2017"}, {"body": "setting values null casting specific type general issuer tracker nt place ask general questions code base reserved bug reports features thanks", "d": "12/2017"}, {"body": "think appropriate ask questions codebase one looking contribute better done specific issues working", "d": "12/2017"}, {"body": "yes sorry come dismissive wrote phone", "d": "12/2017"}, {"body": "jsx html please read moreover script probably mutates dom use react anyway would suggest using putting static markup careful include user content produce security hole", "d": "12/2017"}, {"body": "particular mean careful html always trusted dynamic", "d": "12/2017"}, {"body": "see programming logic nt help larger picture say quora social media sites popular trusted dismissing features nt good approach framework popularity", "d": "12/2017"}, {"body": "would nt say react problem popularity good technical reasons nt allow dom mutation react ca nt keep track dom nodes need updated dom changes nose escape hatch sufficient cases really need", "d": "12/2017"}, {"body": "sorry sure happening find suggest using unpkg example development production", "d": "12/2017"}, {"body": "fixed sorry trouble", "d": "12/2017"}, {"body": "think intentional intended work children actually renderable react rather arbitrary objects functions explain use case detail", "d": "12/2017"}, {"body": "fair enough although clear child component rendered maybe warning reactchildren child component omitted use case function child component render table needed size works fine like somewere widget render method wanted add additional child component widget need change render method widget handle children wanted use map something like would convenient widget component diferent children depending uscase suprised nt work", "d": "12/2017"}, {"body": "instead nt need count children", "d": "12/2017"}, {"body": "hey thanks stopping try keep react repo focused bugs feature requests support requests place place get prompt help one support avenues noted think may react bug please put together reproduction according issue template quick glance issue mostly likely build setup problem react bug thanks", "d": "12/2017"}, {"body": "could remove checks presto verify works expected latest opera version list supported versions considering opera included textevent window first released believe safe remove unless course another benefit still using textevent event", "d": "12/2017"}, {"body": "fine remove long verify nt affect opera mini nt anticipate bugs current opera nt also exist current chrome let make decision oneoff ever come", "d": "12/2017"}, {"body": "gaearon bug newbie react contributing take would like take", "d": "12/2017"}, {"body": "binygal probably newbie friendly bug bug welcome take look lets identify going first try fix anything", "d": "12/2017"}, {"body": "reason worked used use nt update value property unless value changed since email inputs always trim input value would reported would updated state handler would nt update mutation method value updating attribute regardless whether value changed forces input trimmed value breaks cursor position see strange behavior master longer use mutation methods rely setting testing build master problem since match trimmed value hard problem mentioned since email input trying helpful trim considers invalid characters could possibly add exceptions updating email inputs might messy", "d": "12/2017"}, {"body": "could also stop trying attribute match properties would solve issue", "d": "12/2017"}, {"body": "yeah believe talked next major times probably open issue centralize discussion", "d": "12/2017"}, {"body": "sure bug outside mousedown moving everything around item click happens item mousedown nt mouseup click event nt fire could definitely wrong hunch thing would happen implemented behavior natively well", "d": "12/2017"}, {"body": "correct hides mousedown click happens mouseup event listener mouseup everything works correctly thanks helping feel stupid lol", "d": "12/2017"}, {"body": "cc nhunzaker", "d": "12/2017"}, {"body": "check older react versions also problem", "d": "12/2017"}, {"body": "ported example react fiddle behaviour seems identical chrome safari firefox", "d": "12/2017"}, {"body": "ah super fun best way compare equality number one sourced string floating point number background number inputs support text selection api try avoid touching property number inputs much possible setting new value means cursor jumps end someone typing ca nt restore user text position value changes since number inputs fussy particularly chrome use loose equality checks like check usually controlled number inputs stored numeric values component state problem loose type coercion nt appear locale sensitive benefit would great could confirm following behavior input set browsers report using input set browsers report using ask chrome really bad reporting considers invalid numbers localized environment result ideas solution assuming reports expected maybe use could consider comparison based locale seems errorfraught", "d": "12/2017"}, {"body": "aweary jquense wonder best way test simulate locales unit test steps manually testing fixtures", "d": "12/2017"}, {"body": "also associated issue", "d": "12/2017"}, {"body": "use issue tracker bugs react makes think react problem use either apis", "d": "12/2017"}, {"body": "gaearon please look first example side dependencies react posted link repo document issue appeared first time", "d": "12/2017"}, {"body": "still understand example meant demonstrate issue specific api assure react anything special would break question would easier answer without react create reactless example demonstrates hand question react eg lifecycle order please remove browser api calls would relevant", "d": "12/2017"}, {"body": "took another look problem nt guaranteed flush synchronously inside react event handler button click event react waits components handle event processes updates together single pass cases good performance optimization usually nt matter exactly update happens however case actually important update flushed still inside change event handler since otherwise browser would snapshot wrong state page tell react force flushing using new currently undocumented api verified sandbox using works intended think get around documenting api future figure batchingasync changes react hope helpful meantime", "d": "12/2017"}, {"body": "great thank much gaearon", "d": "12/2017"}, {"body": "ok warning apparently cause", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "consistent js libs reduxjsorg telegrafjsorg mobxjsorg", "d": "12/2017"}, {"body": "makes sense", "d": "12/2017"}, {"body": "may confuse people future", "d": "12/2017"}, {"body": "seriouslyfluffy", "d": "12/2017"}, {"body": "facebookgithubioreact already redirect reactjsorg", "d": "12/2017"}, {"body": "really good idea", "d": "12/2017"}, {"body": "oh forgot redirect", "d": "12/2017"}, {"body": "thanks happy toplevel domain really see us moving different one", "d": "12/2017"}, {"body": "hey repo focused issues purely related react think might later standard javascript jest uses babel transform javascript code format nodejs understands instead preset recommend giving babelpresetenv preset shot keeps date latest language features however may want consult documentation hit additional issues checkout stack overflow", "d": "12/2017"}, {"body": "sebmarkbage try looking", "d": "12/2017"}, {"body": "believe bug somewhat confusing intentional behavior see explanation", "d": "12/2017"}, {"body": "react support code messing dom nodes manages checking possible things external code would kill performance exceptions rule operations intentionally safe described details general guideline want change something dom managed react make sure react never reason try update node either know bit fuzzy good example adding extra attribute react nt know changing dom children node react considers leaf safe reordering items via dom manipulation telling react rerender nodes neither safe supported", "d": "12/2017"}, {"body": "yeah looks like minor bug happy accept fix probably wo nt priority working new context api anyway", "d": "12/2017"}, {"body": "stumbled across exactly issue work need render function like js render const children thisprops const resolvedchildren childrentype fragment childrenpropschildren children const enhancedchildren childrenmap resolvedchildren child gt reactcloneelement child onclick thisonclick render enhancedchildren sure check safe access also expecting fragment resolved using friends would nt check", "d": "12/2017"}, {"body": "far understand part patched also consider fragments work case submit pr", "d": "12/2017"}, {"body": "understanding intentional decision paging acdlite", "d": "12/2017"}, {"body": "thanks", "d": "12/2017"}, {"body": "please provide reproducing project", "d": "12/2017"}, {"body": "happens jenkins reproduce locally clues puzzled", "d": "12/2017"}, {"body": "overseepublic could please share test case randomly failing component testing preferably simplified example bug probably issue enzyme", "d": "12/2017"}, {"body": "please upload sample project demonstrating obvious versions packages using etc would also suggest filing instead nt provide support rn repository", "d": "12/2017"}, {"body": "thank gaearon delete thread open new one link", "d": "12/2017"}, {"body": "would probably best nt receive response please feel free ping try help case need reproducing project look", "d": "12/2017"}, {"body": "thank", "d": "12/2017"}, {"body": "nt tell us much please provide full reproducing project", "d": "12/2017"}, {"body": "kind component inherits updated test wonder none internal react tests failed either nt understand documentation none works", "d": "12/2017"}, {"body": "closed", "d": "12/2017"}, {"body": "testing production version", "d": "12/2017"}, {"body": "gaearon thank quick response first screenshot using dev version fiddle using provided template tried looks much smoother thank know causing closed", "d": "12/2017"}, {"body": "nt think leak even dev wait gc get collected", "d": "12/2017"}, {"body": "right takes longer", "d": "12/2017"}, {"body": "intentional works differently different browsers instead actually setting dom attribute polyfill behavior javascript", "d": "12/2017"}, {"body": "oh nt aware cross browser behavior polly fill would recommend support native autofocus buttons", "d": "12/2017"}, {"body": "already include polyfill give react calls initial mount really sure understand example two things ca nt focused time react focuses input example remove input focus button like expect", "d": "12/2017"}, {"body": "ahh see example demonstrate presence autofocus attr rendered dom element real world example started research rendering button element dialog focusing rendered however using input element instead dialog would become focused trying make sure button dialog focused default improved user experience wanted rely browser implementation possible often better handling accessibility concerns intent react call focus way browser would see prepare comprehensive example appearing component nt receive focus properly", "d": "12/2017"}, {"body": "react calls browsers inconsistent focusing surprised implementation somehow better happy proven wrong though", "d": "12/2017"}, {"body": "see last investigation", "d": "12/2017"}, {"body": "hi problem library using package using react version higher migrate version using using previous version package see version using try ever think issue github issue stackoverflow repositories", "d": "12/2017"}, {"body": "aywa tried changing version nt help", "d": "12/2017"}, {"body": "support request use issue tracker issues react close please refer appropriate community resources support believe error message says exactly problem call unmounted component believe unmounted react error bug react please file new issue minimal reproducing example could run thanks", "d": "12/2017"}, {"body": "need set state supported way assign constructor mentioned documentation nt encourage using inheritance react components precisely annoying cascade issues things depend weird ways however clear asking take lot time dig library uses react perhaps rephrase question way nt involve third party libraries showed complete isolated components problem encounter would helpful", "d": "12/2017"}, {"body": "one resub creators automated subscription system makes developers need understand multiple state changes manual subscriptions componentwillreceiveprops etc single buildstate function builds initial state updated state think reactstyle render function building state need build initial thisstate however constructor component thisstate thisbuildstate private member variables component nt initialized since wo nt initialized super call comes buildstate causes bunch unexpected bugs people years done thisstate thisbuildstate inside componentwillmount worked great recently errorwarning react huge problem us going end fork react work around warning unless something goes master allows us keep using pattern", "d": "12/2017"}, {"body": "clear components use componentbase class inherit handles intermediate buildstate handling component call super constructor even private variables needs initialize", "d": "12/2017"}, {"body": "give tiny example inheriting base classes even maybe grossly simplified version still struggling understand problem nt really use inheritance chains react also clear talking purely ts perspective problem exists js well going end fork react work around warning sounds like ton technical effort maintain fork would nt easier us figure restructure resub api break react expectations understand reassigning technically worked never intentionally supported", "d": "12/2017"}, {"body": "react perspective like c field assignable constructor anywhere else course ca nt enforce js design intention hope consider reasonable react written c built resub top would design api unfortunately ca nt use ts analogy nt know", "d": "12/2017"}, {"body": "well simple lifecycle method build initial state would enable classes usage think react benefit", "d": "12/2017"}, {"body": "componentbase fairly simple fundamentally pretty empty constructor componentwillmount thisstate thisbuildstate problem actually change state props matter line treating readonly constructor awkward reason need thisstate immutable componentwillmount runs feels like much understand mounting starts nt really get nuance inheritancebased language since idea super class nt rely state subclass typescript happens give nice sugar variables define class definition stuff top constructor super still means anything happens superclass constructor nt apply subclass solved past always two lines auto x new someclass xinitstate workaround since always need complete constructor hierarchy run call statebuilding function react nicely gives one already componentwillmount pattern mapped perfectly usage problem seeing call thissetstate thisbuildstate componentwillmount sometimes appears queuing setstate later design sure end multiple lifecycle resolutions", "d": "12/2017"}, {"body": "example code issue example switch putting thisstate thisbuildstate constructor state set somevar undefined obviously stupid contrived version dozens bugs based around issues like moved initial buildstate call constructor componentwillmount function long ago", "d": "12/2017"}, {"body": "rigdern pointed existing lifecycle method getinitialstate though reason nt work typescriptes classes called warning use createclass think would ideal method called set thisstate class correctly instantiated could remove recommendation nt use classes case doc could warn developer case state set constructor method return nullundefined value think gaearon", "d": "12/2017"}, {"body": "problem actually change state props matter line treating readonly constructor awkward react provides method called changing line mutating object intentionally supported", "d": "12/2017"}, {"body": "sometimes appears queuing setstate later design sure quite sure mean issues might start pointing people use methods future calling equivalent setting state constructor provide example behaves differently", "d": "12/2017"}, {"body": "nt work us well plenty places codebase need initial state componentwillmount use setstate instead assigning directly thisstate defined componentwillmount derived classes possible fix assigning nextstate class field quite confusing pattern", "d": "12/2017"}, {"body": "believe blog post error boundaries mentions experience leaving ui broken state yes sometimes okay unfortunately cases leaving place really bad sending message wrong person displaying wrong price etc thinking behind error boundaries informed cases common severe discovered feedback received deploying behavior scale facebook little annoying first different ui elements disappeared uncovered many dormant bugs net win end take significant developer time implement finegrained error boundaries still leave ui untouched replacing components error sure significant time investment would definitely yes explicitly mention release notes upgrade react need pick components place boundaries strategically around please consider important part update process afterthought would start top level boundary single boundary layout content areas eg sidebar navbar main content components high confidence quick dirty solution create error boundary renders null error state pretty ui elements disappear nowhere gives migration path invest time designing error states intentionally understand might helpful bit like asking add visual basic javascript reason seems sensible us status quo js libraries including react lt associated cost migration path however experience get humps new behavior actually quite nice makes sense", "d": "12/2017"}, {"body": "also worth keeping mind boundaries react components get creative example keeping ui place important add retry button boundary would reset error state make attempt render children error transient eg related state got reset user see component otherwise render error state", "d": "12/2017"}, {"body": "actually interesting idea start thinking little outside box primary reasoning suggestion finetune exactly need error boundaries leaving bad user experience errors longer silent suggesting fallback ui concept optin feature add error boundaries start taking advantage error reportinghandling features still behaving like react lt default unmounting time goes start add fallback uis see needed feedback received deploying behavior scale facebook little annoying first different ui elements disappeared uncovered many dormant bugs net win end actually lining experience far regression testing migration started running errors migration much easier debug understand really easy migration try think creative ways leave good user experience responding quickly error reports see said done robust app", "d": "12/2017"}, {"body": "primary reasoning suggestion finetune exactly need error boundaries leaving bad user experience errors longer silent arguably ui update wrong thing also bad user experience less obviously visible one gradual migration running code new engine subset users gradually ramping fraction much harder pull final releases since differences sorry give better suggestion suggesting fallback ui concept optin feature understand proposal something considered early however turned hard implement without introducing fragility decided worth initial migration period", "d": "12/2017"}, {"body": "sounds good well context additional suggestions proceed close", "d": "12/2017"}, {"body": "ok rewriting tag jsx emits correct tag html think react smarts etc tags nonissue feel free close nothing adddiscuss", "d": "12/2017"}, {"body": "wbr tag end tag per spec react report errors jsx specification diverges htmlxml specs jsx need provide closing tag use selfclosing tag think react smarts wbr br etc tags nonissue feel free close nothing adddiscuss", "d": "12/2017"}, {"body": "found smarts could research upfront smile", "d": "12/2017"}, {"body": "think talking inside repository post issue guess stack overflow better", "d": "12/2017"}, {"body": "lot code get bug report support question support question please use appropriate resources bug report please create minimal example external dependencies extra components hot reloading enough reproduce issue", "d": "12/2017"}, {"body": "sure bug last example worked fine simplify code maximum real implementation npm module try create repo git hub examples better understanding", "d": "12/2017"}, {"body": "gh repo exact instructions reproduce explanation expected vs actual behavior would help", "d": "12/2017"}, {"body": "gaearon gh repo please uncomment try set changes see error hack fixed error react badconnect worked fine", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "need babelplugintransformclassproperties probably client side setup", "d": "12/2017"}, {"body": "exactly mobile", "d": "12/2017"}, {"body": "mobile information samsung galaxy use browser information uc browser", "d": "12/2017"}, {"body": "", "d": "12/2017"}, {"body": "thanks", "d": "12/2017"}, {"body": "hi need depends want end particular method two stores array state setting state trigger rerender whereas two methods gave involve mutating array without rerendering component question opinioncode style suitable issue raise github repo please look appropriate venues community support thanks", "d": "12/2017"}, {"body": "agree swyx cents option nt allow mutation go want enforce option allows mutation triggers rerendering mutation option allows mutation rerendering mutation specific use case option best choice", "d": "12/2017"}, {"body": "swyx mrchief pointed option best choice use case issues related react library go appropriate channels", "d": "12/2017"}, {"body": "please provide minimal example without react router hocs neither essential problem hard tell going multiple indirections", "d": "12/2017"}, {"body": "make small repo case work", "d": "12/2017"}, {"body": "create minimal example without typescript please preferably jsfiddle", "d": "12/2017"}, {"body": "actually already tried isolate case failed freshnew react app file works fine must something deeper obvious", "d": "12/2017"}, {"body": "found wanted able use immutable console exported immutable window experimented assigned forgot seems cause bug know entirely fault would expected kind warning message override builtin objects though", "d": "12/2017"}, {"body": "oh see thanks explaining really warn might intentionally using polyfill", "d": "12/2017"}, {"body": "oooh boy wonder happening line assign value attribute number input nt currently focused element designed specifically avoid issue chrome reformats number inputs dropping decimal places assign value attribute number input keep similar inputs possible wonder input never active element case shadow dom", "d": "12/2017"}, {"body": "wonder input never active element case shadow dom yeah line seemed little suspect nt done much digging react codebase simple function walk shadowdom case shadow root", "d": "12/2017"}, {"body": "think bug chrome tried firefox safari could nt reproduce", "d": "12/2017"}, {"body": "bug seem exist chrome well however happens press enter field focused focusing field clicking outside field correctly triggers react native blur events firefox safari pressing enter field focused nt trigger either blur events sure bug chrome long behaviour present", "d": "12/2017"}, {"body": "petrhanak issue solved", "d": "12/2017"}, {"body": "closing", "d": "12/2017"}, {"body": "saying specific webpack fair perfectly valid commonjs works webpack browserify rollup metro brunch parcel major bundler dead code elimination uglify something supports encourage file issue find instructions supported bundlers figure please send pr get production build need apply minification step uglify remove falsy conditions strip unnecessary requires hope helps", "d": "12/2017"}, {"body": "also note always use precompiled build cdn issues bundler", "d": "12/2017"}, {"body": "thanks make touch fis team", "d": "12/2017"}, {"body": "help way eg explaining works please let know happy chat see plugin system typically uglify plugin runs modules bundler interprets solution", "d": "12/2017"}, {"body": "though quite sure implications fiber would react async rendering mean could reenter event loop time toggling happen think could reenter depends implement polyfill", "d": "12/2017"}, {"body": "hard understand proposing ability create react elements probably calling virtual dom pass around fundamental design decision react ui firstclass value like function object anything may explore advanced compilation techniques automatically reduce creation unnecessary elements see us abandoning concept elements make react components expressive prevents console errors react preventing console errors mean meanwhile slower suggestedexample api makes obsolete altogether real world terms understand slower makes obsolete react fast enough vast majority use cases offers escape hatches minority cases speed virtual dom diffing might looking often irrelevant real applications majority time spent application code hope helpful close hard understand actionable takeaway specific issues react problem console please file bug report example fails like propose new apis welcome contribute rfc process thanks", "d": "12/2017"}, {"body": "hyperhtml hyperhtml view library replaces virtual dom virtual dom vue may cause error stack trace consist nothing remotely related user generated code nt actually know todomvc benchmark one beats react otherwise library regards performnce links list stuff updates fast suppose match virtual dom speed", "d": "12/2017"}, {"body": "sorry think discussion going productive would suggest learn profile apps chrome discuss specific performance issues react vue repository show specific examples slow todomvc never meant benchmark stated multiple times authors apps also larger todomvc face different kinds performance problems reorder list many many times", "d": "12/2017"}, {"body": "mean virtual dom preventing console errors useless experience vue point making virtual dom slower nonvirtual dom implementation hyperhtml point detracts bad errors making difficult use libraries want nothing manipulate dom", "d": "12/2017"}, {"body": "worked vue speak error reporting abilities definitely something care react find unhelpful errors coming react love take look fix react work libraries manipulate dom abide rules read nuances might react best library use case fine glad found library works well", "d": "12/2017"}, {"body": "add one thing occurred use global variable like components read global variable globalstate seem hacky though pretty sure wo nt work streaming", "d": "12/2017"}, {"body": "hey johnnysprinkles looked redux connected react provides store variables accessible components choosing", "d": "12/2017"}, {"body": "pretty sure looked redux one common thread new context rfc", "d": "12/2017"}, {"body": "yeah adding redux issue someone already using redux though sure could put global state reformulate rfc new style feature requests", "d": "12/2017"}, {"body": "need part react put shared state module import files need contrived example js globalsjs export default class statemachine static css bluecolor darkbluecolor darkgreencolor componentjs import statemachine globals statemachinecss modules evaluated cached first load everything needs complicated part libraryframework", "d": "12/2017"}, {"body": "totally things non request specific works fine issue request specific data share among components things like user authenticated current route params etc way aware serverside aside current context api", "d": "12/2017"}, {"body": "want send pr fix", "d": "12/2017"}, {"body": "sure got pointer look would key", "d": "12/2017"}, {"body": "maybe reacttestrendererjs gut feeling switch fragment case specify keys", "d": "12/2017"}, {"body": "meant output currently fragment array fragment children edit prop fragment seems much purpose rendered sure makes sense include except looks odd jest snapshots gone maybe nt write react sadly found weird gone tested fragments jest snapshots", "d": "12/2017"}, {"body": "completely transparent render tree reconciler use resulting tree essentially fragments flattened like arrays maybe could helpful stay tree test renderer result would probably require fun changes inside fiber", "d": "12/2017"}, {"body": "include keys regular nodes intuition seems unnecessary keys hint reconciler content changes time however snapshots static", "d": "12/2017"}, {"body": "share complete example could quickly run", "d": "12/2017"}, {"body": "go", "d": "12/2017"}, {"body": "tagging good first outcome report browsers support feature", "d": "12/2017"}, {"body": "fairly sure inputstext areas removed equivalent code bunch libraries observable issues far imagine tho story different contenteditable maybe draftjs folks insight", "d": "12/2017"}, {"body": "tagging flarnie", "d": "12/2017"}, {"body": "thought ce might right", "d": "12/2017"}, {"body": "also checked caniuse seems support starts", "d": "12/2017"}, {"body": "mdn also reports support", "d": "12/2017"}, {"body": "comment concern rely draftjs let look bit", "d": "12/2017"}, {"body": "example shows unlike inputs textarea selectionstart available contenteditable div let keep polyfill also add test somewhere would love draftjs fixture maybe contenteditable fixture test playing latest firefox", "d": "12/2017"}, {"body": "anyone interested info defined text field selection api draft rely similar different selection interface wrap immutable record", "d": "12/2017"}, {"body": "flarnie would test suffice mainly checking selection start working expect showing nt work ce case way supported aware remove backwards support something else mind", "d": "12/2017"}, {"body": "xxblakefailxx glad see test clear recommend keeping polyfill place test would verify work contenteditable reverse expectation last test suite wrote looks good remove polyfill would breaking change would remove support selection text editing libraries may relying looks like draft relies entirely selection api different imagine adding support based part potential use cases draftjs sophiebits confirm whether removing polyfill would also break draftjs", "d": "12/2017"}, {"body": "know contenteditable inputs nt work properly without maybe something user space draft ca nt removed", "d": "12/2017"}, {"body": "flarnie sophiebits know way manual test shows contenteditables working without polyfill", "d": "12/2017"}, {"body": "sure think comment code try use draft editor probably see problem obvious typing directly try cuttingpasting complex cursor movements", "d": "12/2017"}, {"body": "someone working issue would love work issue", "d": "12/2017"}, {"body": "gaearon pick", "d": "12/2017"}, {"body": "sounds great", "d": "12/2017"}, {"body": "gaearon please look pr let know randomisation introduced would meet requirement cheers", "d": "12/2017"}, {"body": "perhaps far much overlap logical solution otherwise separate readdom reacthtmldom reactxhtmldomreactxmldom right considering xhtml considered dead point iirc perhaps would nt bad unlikely someone would ever try use time overlap irrelevant long shared", "d": "12/2017"}, {"body": "concerns ssr implementation case passing option seems easier creating another one scratch think want separate top level namespace since use case uncommon", "d": "12/2017"}, {"body": "deduplicate warning like many warnings", "d": "12/2017"}, {"body": "gaearon hi dan take imagine similar", "d": "12/2017"}, {"body": "yep sounds good", "d": "12/2017"}, {"body": "gaearon hi dan wanted check right track try writing code warning sure writing test reactdomsrctestsreactdomselecttestjs reactdomsrctestsreactdomoptiontestjs nt see test already tests warning missing something write entirely new test one files nt worked test suite sure supposed organized", "d": "12/2017"}, {"body": "nt think matters file write verify existing tests comment warning run nothing fails well yeah nt tests", "d": "12/2017"}, {"body": "thanks", "d": "12/2017"}, {"body": "wow incredibly fast great work", "d": "12/2017"}, {"body": "arackaf problem could nt done without dan super fast support swear human answering tweets github comments instantly", "d": "12/2017"}, {"body": "omg dan weekend", "d": "12/2017"}, {"body": "really cold outside bored go something else", "d": "12/2017"}, {"body": "lol dan nt leave us", "d": "12/2017"}, {"body": "keys react assigns implicit keys equal indices answer question code want look file", "d": "12/2017"}, {"body": "gaearon second code snippet going showwarningfalse true compare keys", "d": "12/2017"}, {"body": "yes default keys become indices key", "d": "12/2017"}, {"body": "practice people want preserve state usually write like case state would preserved would nt explicitly specify keys", "d": "12/2017"}, {"body": "gaearon first case similar situation react first makes query like hey child key since answer postivie leaves avoids comparing", "d": "12/2017"}, {"body": "yes", "d": "12/2017"}, {"body": "gaearon think hey key old children item key since moving showwarningfalse true create withhey key hey also old children item key modify think correct wrote previously", "d": "12/2017"}, {"body": "first example keys second example example", "d": "12/2017"}, {"body": "think table would make sense used key key", "d": "12/2017"}, {"body": "first example second example example", "d": "12/2017"}, {"body": "gaearon think grasped table using case going showwarningtrue false initially referring case go showwarningfalse showwarningtrue case would first example second example", "d": "12/2017"}, {"body": "gaearon confirm table", "d": "12/2017"}, {"body": "think looks almost right actually exposes issue wrote table originally much clearer going use key row instead", "d": "12/2017"}, {"body": "full version first example js thisstateshowwarning return return second example js thisstateshowwarning return return example", "d": "12/2017"}, {"body": "gaearon think got table correctly ca nt see different wrt latest post thanks input help", "d": "12/2017"}, {"body": "would really like take going take look deeply hourstomorrow anyone care point anything would great first contribution", "d": "12/2017"}, {"body": "nubunto good luck", "d": "12/2017"}, {"body": "think rest code uses package submit quick pr", "d": "12/2017"}, {"body": "oh seems files use dev environments", "d": "12/2017"}, {"body": "objectassign transpiled already see package code objectassign specific issue helpful know error getting way reproduce", "d": "12/2017"}, {"body": "oh interesting getting fairly complex part application see come minimal repro steps", "d": "12/2017"}, {"body": "found hint actually another library closing", "d": "12/2017"}, {"body": "hm bad attribute passed", "d": "12/2017"}, {"body": "react differs html uses builtin attributes dom apis also rarely use directly forget", "d": "12/2017"}, {"body": "please file issue ide code fine", "d": "12/2017"}, {"body": "gaearon js file error warn one think main problem js code encapsulated method placed js file ignore error warn ide", "d": "12/2017"}, {"body": "gaearon ide using daily work", "d": "12/2017"}, {"body": "sublime", "d": "12/2017"}, {"body": "prettier separate configurations files need extract paths shared config split eslint task two runs one would assume code another", "d": "12/2017"}, {"body": "hi gaearon could write custom eslint preprocessor var files override rule", "d": "12/2017"}, {"body": "separate configs prettier since call eslint node api imagine would use similar strategy divide two calls override rules one calls", "d": "12/2017"}, {"body": "hi gaearon want work give instructions like kind file permit use", "d": "12/2017"}, {"body": "files need use thus files use help", "d": "12/2017"}, {"body": "ok thanks helps", "d": "12/2017"}, {"body": "ctxhou think done fast otherwise add", "d": "12/2017"}, {"body": "one thing want discuss currently prettier files pattern eslint lint pattern means shared pattern prettier eslint config correct", "d": "12/2017"}, {"body": "understand would different files files listed separately", "d": "12/2017"}, {"body": "sorry misunderstand pattern create pr fix issue", "d": "12/2017"}, {"body": "fixed", "d": "12/2017"}, {"body": "updated description reflect findings added environment", "d": "12/2017"}, {"body": "create standalone example jsbin jsfiddle please", "d": "12/2017"}, {"body": "seem encountering something like issue entirely sure exactly issue though whether might root cause etc unfortunately hard reproduce nt yet got good idea cause though weak suspicion related things fiberspecific component two fibers associated first component seemingly called immediately component mounted op describes interestingly component methods bound constructor instances component class eg changed behavior using decorator binds methods instances first access rather constructor particular issue went away point however issues cropped one example component appeared mounted printed warnings console effect called unmounted component whenever clicked instance component created anywhere else application nt know yet component react thinks interacting click button component screen definitely thinks interacting unmounted one leads suspicion related way two fibers potentially associated component brief investigating discover instance returned component constructor component created react method different instance referenced react component click handler click button react creates calling component constructor entity referenced inside component click handler method although latter method still pointing different instance component class created somehow internally react suspecting fiber stuff mostly ignorant details keep looking seeing whether produce helpful information time allows thanks", "d": "12/2017"}, {"body": "quick way trying confirm something react going case downgraded react rebuilt application issue persists think comment likely distraction current issue apologies suspect issue may related interaction parts stack possibly reactredux reactrouter something else still investigating", "d": "12/2017"}, {"body": "behaviour seems much like experiencing description may perfect experiencing reports component unmounted next week probably time put minimal breaking project", "d": "12/2017"}, {"body": "mmeent agree issues sound similar case also discovered issue seems happen development builds works production best guess problem actually related something using development possibly reacthotloader situation complicated still fact case involves electron application bundled webpack using highly specific build configuration doubt problem directly related react helpful way likely bow discussion nt pollute thread good luck edit confirmed removed development build process issue went away probably something wrong related last topic discussed saw also using reacthotloader could worth investigating", "d": "12/2017"}, {"body": "please use triple backticks formatting blocks code see edit message clear asking react nt anything sockets way react prevent messages getting received clear definitely api provided react suggest ask maintainers question clear related react vr nt see api either normally react render something call update top level call could make stateful component calls updates hope helps close nt look like react issue", "d": "12/2017"}, {"body": "asynchronous way usually mean javascript say calls nt actually happen another tick event loop outside react tree everything looks synchronous mean setstate calls may batched together call enqueues update update nt processed components turn may actually changing changed fibers async rendering actually async way usually mean think need top level hooks catch component done rendering realz", "d": "12/2017"}, {"body": "thanks lot jquense quicks answer understood properly means example work react maybe fail react nt", "d": "12/2017"}, {"body": "react uses synchronous rendering default wo nt fail also afaik plans enable async rendering tests optimization real rendering nt think would valuable testing context", "d": "12/2017"}, {"body": "maybe particular kinds mutations could resilient general react nt support something else modifying dom nodes", "d": "12/2017"}, {"body": "could look kind mutations google voice extension performing", "d": "12/2017"}, {"body": "google voice easiest example beyond example assume could type mutation sure types mutations looking case seems wrap text span tag replaces target node html updated version example actually going help realize nt need nt need use case react nt need update specific node within instances ring central nt update containing node replace containing node together seems safest use cover grounds seen extensions removed dom nodes well seems rare appreciate feedback nt seen much information discussion around topic least wanted voice issue see something could thankfully react nicely logs server catch pretty quick always sucks user ca nt use product implicit chrome extension", "d": "12/2017"}, {"body": "might related sure users express concern point specific mutations like us resilient take look", "d": "12/2017"}, {"body": "also please post quick demo jsfiddle something", "d": "12/2017"}, {"body": "problem nt face issue text inputs react means hard reproduce", "d": "12/2017"}, {"body": "aarongillbraun hard figure next step without ability reproduce issue able provide context would help greatly record example within existing application isolated example", "d": "12/2017"}, {"body": "unable reproduce issue anywhere application thus closing obviously react issue still life figure one", "d": "12/2017"}, {"body": "worries best luck", "d": "12/2017"}, {"body": "tagging needing investigation", "d": "12/2017"}, {"body": "hey dan help investigation", "d": "12/2017"}, {"body": "sure try reproduce see causes", "d": "12/2017"}, {"body": "gaearon reproduced tried solve check pr see implementation expecting", "d": "12/2017"}, {"body": "warning stateless function components given refsattempts access ref failnncheck render method similar warn given string ref test spec", "d": "12/2017"}, {"body": "nt see problem one", "d": "12/2017"}, {"body": "would nt mind checking extwiii want", "d": "12/2017"}, {"body": "skiritsis got", "d": "12/2017"}, {"body": "yeah false positive warning appears use polyfill think happens validate types symbol however polyfilled wo nt condition wo nt true get around think compare directly concluding invalid", "d": "12/2017"}, {"body": "would like work possible", "d": "12/2017"}, {"body": "sure", "d": "12/2017"}, {"body": "aywa nt get pr submitter fixed issue", "d": "12/2017"}, {"body": "gaearon yeah saw yesterday pr already made sadly planed work week anyway hope find soon", "d": "12/2017"}, {"body": "mentioned different projects support syntax time goes least want wait babel come beta use jest version supports think latest beta close since question react please ask individual projects jsx fragment support status", "d": "12/2017"}, {"body": "use bug tracker bugs support questions please use appropriate support resources documentation page might helpful recommend fully going example code nt look right component either control state let parent component manage state receive props trying slice state behaves confusingly also passing inputs", "d": "12/2017"}, {"body": "thanks", "d": "12/2017"}, {"body": "wrong please delete", "d": "12/2017"}, {"body": "wonder gzipped difference would inlined", "d": "12/2017"}, {"body": "gc pause happens trigger function running chrome counts time", "d": "12/2017"}, {"body": "hi sorry clear issue error put together working example using maybe emulate env bit closer jsfiddle", "d": "12/2017"}, {"body": "sorry post made stackexchange mistake many tabs open however found issue basic mistake part", "d": "12/2017"}, {"body": "js works special arraylike object pass single argument probably mean instead", "d": "12/2017"}, {"body": "would nt trust compatibility mode much maybe old ff problem still support", "d": "12/2017"}, {"body": "clarity correct behavior symbols change never pass property sanitation layer react tries stringify symbols throws error functions get turned", "d": "12/2017"}, {"body": "looked update codepath already broken made initial code path match actually improvement still get completion consistent sane behavior imo urgent thought first", "d": "12/2017"}, {"body": "gaearon yes agree bug thanks redirect ask question agree using two versions react dubious decision need otherwise projectcontainer forced always work old version react", "d": "12/2017"}, {"body": "businessnumbertwo try putting breakpoint line inspect error occurs sounds like something rendered child nt", "d": "12/2017"}, {"body": "close need info investigate additional info provided react defines property like see nt know ends readonly something environment application code nt see bug react need reproducing case look", "d": "12/2017"}, {"body": "dan bit snowed getting release together interim found workaround come back try recreate soon find info send thank time phil dec dan abramov notifications githubcom wrote close need info investigate additional info provided react defines validated property like see writable nt know ends readonly something environment application code nt see bug react need reproducing case look receiving mentioned reply email directly view github mute thread", "d": "12/2017"}, {"body": "thanks suggest look closely polyfills using maybe something messes", "d": "12/2017"}, {"body": "imo also bug label current behavior expected either case", "d": "12/2017"}, {"body": "paste link specific lines inlined take link specific lines clicking start line file source view shiftclicking choose end line", "d": "12/2017"}, {"body": "gaearon forget ref issue close octocat", "d": "12/2017"}, {"body": "close nt enough information help", "d": "12/2017"}, {"body": "seems problem past apparently fixed still experiencing radio inputs though react doubleclick", "d": "12/2017"}, {"body": "first draft react ssr cache hooks api api design goals ssr caching performed level reactpartialrenderer frame represents react element completeclosed frames cached greatly simplifies ssr cache api ssr caching performed implementation cache strategies passed cache strategies capable using either react components configuration enable caching beyond supporting simple percomponent caching cache strategy able support component rendered become cached template templates content injected potential drastically improve ssr performance cachestrategy api js interface cachestrategy gets cache strategy state component reactpartialrenderer hook resolveelement called every resolveelement invocation param component param props param context returns undefined returned cache strategy render method invoked component getcachestate component reactnode props object context object renders element using cache strategy reactpartialrenderer hook renderframe called rendering frame assigned cachestate param element render param context use rendering param cachestate state returned getcachestate method param renderutils simplify rendering cached component returns string rendered component render element reactelement context object cachestate mixed renderutils cacherenderutils string cache strategy notes getcachestate determines component supports caching returns component specific cache state hook must called every time element resolved returning indicates component support caching render handles rendering component supports caching hook must called rendering frame receives returned receives utility methods rendering cached components abstracts renderer internals template example rendered template allows prop injected render prevents need render request approach could applied complex components component greatly reducing ssr time used simplify support cacherendererutils js utility methods rendering abstract renderer internals type cacherenderutils renders current frame element children allowing props overridden param props param context returns string rendered element output rendercurrentelement props object context object gt string renders provided element children param element param context param domnamespace returns string rendered element output renderelement element reactelement context object domnamespace string gt string logs warning base context modified provided render function note logs warning messages development param basecontext expected context throughout entire render method param render method param messagesuffix string message log returns string render output warnifrendermodifiescontext basecontext object render ctx object gt string messagesuffix string gt string render util notes rendercurrentelement renders current element allowing props context modified renderelement renders provided element allows arbitrary elements rendered cache strategies enables cache strategies created supports injecting element cached content aka template method used render element injected template warnifrendermodifiescontext enables cache strategy determine modified rendering element children useful cache strategy supports injecting element cached content aka template context changed rendering template injected elements may render consistently server client method used wrap log warning rendering serverclient risk inconsistent hook usage example js import rendertostring reactdomserver cache strategies rendertostring using cache strategy rendertostring cachestrategy new examplecachestrategy created proof concept view forked branch includes example implementation basic app ssr plugins fixture proof concept app includes approaches caching using method component using component using component create templates components support injecting content cached template sure many questions let know think adam", "d": "12/2017"}, {"body": "header rendered template allows avatar prop injected render prevents need render header request sure understand mean could describe detailed thanks", "d": "12/2017"}, {"body": "nesmalltown detail clear template example cache strategy implementation part cache hooks api simply example possible using cache hooks api using headeravatar example convert cached template using cache strategy implementation supports implementation might look like first render given cache key component rendered template template tokenized string using replaces injectedprops see example acts token replaced injected content future renders utilizing cached template template output cached used render future components cache key template replaced rendered output injectedprops prevents processed lifecycle methods server still able accept props change render side note injectedprops could also use cache strategies rendering minimizes cpu bound activity server render reduces server render time proof concept linked render time reduced gt conservative measure basic comparisons using template approach component comprised small number child components number component children increase time saved even greater instead rendering component cached string used work consistently render important middle components components component injectedprops change context used render template context changed template renders consistent used ensure additional props applied injectedprops within template component method defined cacherenderutils method needed guarantee template renders consistent could taken even cached templates could written cache server memcache redis etc reused across server instances hope clear let know need info", "d": "12/2017"}, {"body": "thanks clarification imo code comments component uses component cache content component templates allow content injected useful complex component mostly static many requests requires small amount dynamic content individual request think means plugin apply statelessfunctional component mean complexhuge logic component ie include many methodsevents hocs ca nt use cache plugin also use hand even simple component also need distinguish carefully nt work expected way think need time understand comment example possibly need clone run anyway thanks", "d": "12/2017"}, {"body": "nesmalltown response question think means plugin apply statelessfunctional component mean complexhuge logic component ie include many methodsevents hocs ca nt use cache plugin also use easier use plugin statelessfunctional components cache plugin used complex components however sideeffects need managed example component createspopulates application state redux store data application state would also need cached future renders hand even simple component also need distinguish carefully templateprops injectedprops nt work expected yes true caching generally requires type configuration", "d": "12/2017"}, {"body": "next blocker", "d": "12/2017"}, {"body": "nhunzaker correct wrong means unable control state invalid input entered example try enter triggering event update actually valid state still triggering event", "d": "12/2017"}, {"body": "svagi triggering change event tested ff chrome however edit example correctly triggering testing", "d": "12/2017"}, {"body": "nhunzaker chrome", "d": "12/2017"}, {"body": "update actually valid state still triggering onchange event possible typo mean unable type commas number input osx windows chrome short correct chrome ca nt control invalid values number inputs chrome reports empty string matter input reports regardless number need level control recommend using text input also supports text selection api preventing issues selection jumping", "d": "12/2017"}, {"body": "also possible displayed american ignorance using commas decimal places apologize", "d": "12/2017"}, {"body": "afraid different opinion example created without react video fire click events autoplaying inline case shows iphone even create video navtive html bind events addeventlistener click event fire tap video detail series touch event fired click event fired except tap long time may touch click fired quickly troubled problem would appreciated issue solve problem way", "d": "12/2017"}, {"body": "another weeks issue still going anyone review proposed solution fix anything wrong", "d": "12/2017"}, {"body": "html case sensitive right point jsx html think message could include something like jsx standard different html standard case sensitive", "d": "12/2017"}, {"body": "would like work", "d": "12/2017"}, {"body": "trying get open source community would like find simple issue fix get started anyone still working issue would like work", "d": "12/2017"}, {"body": "esturcke alansouzati gist sample mock snapshot test gaearon probably better ideaplan supporting createportal reacttestrenderer", "d": "12/2017"}, {"body": "esturcke", "d": "12/2017"}, {"body": "hi yossijacob sort pushing trying deal moved working things hopes gaearon others might point wrong add support", "d": "12/2017"}, {"body": "encountered problem error dig little found case portal instance htmlcollection testrenderer expects array instance type textinstance type appendchild method work need little guidance gaearon", "d": "12/2017"}, {"body": "fixed app users running disabling chrome translation using method underlying issue fixed", "d": "12/2017"}, {"body": "issue", "d": "12/2017"}, {"body": "turns bug chrome contents document changed processing touch events user agent may dispatch mouse events different target touch events although personally find behavior confusing apparently", "d": "12/2017"}, {"body": "suggested workaround feasible though bit problematic real application difficulty use make sure adding removing event listener right component feasible painful generated html code ugly due uuids still confuses react code call touch start mouse event fire vanilla js code indeed stops bug react bug bug chrome worked synthetic events way works vanilla js native events believe issue would go away", "d": "12/2017"}, {"body": "personally seen developers confusion subject gaearon great get explanation time", "d": "12/2017"}, {"body": "sorry end year bit behind github etc trying wrap everything working holidays intend come back thread discuss also bit moving target currently working async react features directly relate updated nt want spend lot time writing something rewrite underlying assumptions changed like keep open nt know yet able give definitive answer", "d": "12/2017"}, {"body": "gaearon closed", "d": "12/2017"}, {"body": "encourage people import better tree shaking thanks alexlamsl eliminated penalty common scenarios js rollup mainjs f es silent tee bundlejs var mod foo bar square x gt x x cube x gt x x x consolelog modfoo modcube modbar uglifyjs v uglifyes js cat bundlejs uglifyjs toplevel bc var modfoo modbar modcube x gt x x x consolelog modfoo modcube modbar js cat bundlejs uglifyjs toplevel mc consolelog", "d": "12/2017"}, {"body": "wow great new considered stable recall mentioning months back nt quite yet remember incorrectly ai nt sure anyway nice rollup world considering bundled mostly apps use mostly scope hoisting default still say exporting object default avoided aid tools efforts produce smaller bundle sizes also semantically better avoid libs actually cases providing namespace better represented using", "d": "12/2017"}, {"body": "uglifyes considered stable stable anything else js ecosystem downloads per week nice rollup world considering react bundled mostly apps use mostly webpack scope hoisting default anyway option webpack defaults ideal anyway use know", "d": "12/2017"}, {"body": "adding cents totally agree richharris semantically named exports right choice really like either able use jsx syntax eyes design clearly violating interface segregation principle forces users import react able use part though admittedly namespace export bundler like rollup strip unneeded exports point might make breakingchange decisions would advise change jsx depends single global imported function would called opinion describes even better longer needs react context make sense world every byte counts probably ok would also last decouple jsx react way libraries choose support jsx using transformation supplying different function course lot responsibility guiding countless established applications transformation architectural point view think react jsx heading using babel heavy lifting transformation sounds like great idea", "d": "12/2017"}, {"body": "personally see much gain migrating helper default imho babel plugin importing package name actual helper nt really matter rest matter configurable", "d": "12/2017"}, {"body": "probably slightly tangential main discussion curious well es modules work checking conditionally export devprod bundles example may missing something obvious struggling see translate pattern es modules", "d": "12/2017"}, {"body": "nminhnguyen conditional exports nt possible es modules", "d": "12/2017"}, {"body": "checks granular code level though ready replaced bundler appropriate values", "d": "12/2017"}, {"body": "andarist milesj thanks confirming suspicion checks granular code level though ready replaced bundler appropriate values react blog post thought checks pulled top purpose opposed granular source mistaken help performance nodejs better serverside rendering react includes completely rewritten server renderer really fast supports streaming start sending bytes client faster thanks new packaging strategy compiles away checks believe reading node really slow longer need bundle react get good serverrendering performance like sure one could use field differentiate devprod esm keeping es bundles flat affecting nodejs perf", "d": "12/2017"}, {"body": "like sure one could use module field packagejson differentiate devprod esm keeping es bundles flat affecting nodejs perf sure drawback standard way moment otoh matter tooling possible rather easy compile build steps application even today ofc would easier package could expose devprod builds resolver would know one pick maybe matter pushing idea tooling authors", "d": "12/2017"}, {"body": "one working would certainly like take", "d": "12/2017"}, {"body": "think found decent workaround posting anyone interested using pretty easy implement boundary component captures failures callbacks rejected promises idea recursively loop children check props wrap functions closure works nature async await probably efficient solution large component tree inside component quick proof concept", "d": "12/2017"}, {"body": "recommended larger apps perfsensitive code indeed going slow", "d": "12/2017"}, {"body": "gareon think issue could go could elaborate taking account comments different proposals think hampusohlsson solution beside drawbacks would like see supported react thanks", "d": "12/2017"}, {"body": "yep good way", "d": "12/2017"}, {"body": "idhard happy assist writing rfc", "d": "12/2017"}, {"body": "hampusohlsson yeah sure done first steps rfc creation fork nt much time fill think users passing async functions event handlers nt complicated wrap trycatch blocks inside react bubble error passing normal functions async react handle", "d": "12/2017"}, {"body": "thanks kreba pointing reference relevant part spec seems like supported", "d": "12/2017"}, {"body": "running error tag inside svg fixed correct running react nextjs let know need information", "d": "12/2017"}, {"body": "friendly ping gaearon sophiebits yall thoughts effulgentsia latest proposal curious ballpark nonstarter", "d": "12/2017"}, {"body": "opened rfc process could ask either submit rfc", "d": "12/2017"}, {"body": "would rather add props equivalent within ref object makes using custom elements unnatural unlike react components component user going need acutely know difference properties attributes etc would rather reactdomcreatecustomelementtypestyle solution use component exactly comparable amount work specifying configuration using use component many times nt need think configuration object every time requiring configuration specified every time seems defeat goals clean custom elements integration unless missing something", "d": "12/2017"}, {"body": "sophiebits ok could attempt write rfc something like think idea floated back october going properties first client side also allowing folks write reactdomcreatecustomelementtype ssr andor want really fine grained control client maps attrsproperties", "d": "12/2017"}, {"body": "least style libraries easily map apis ie skatejsrendererreact could easily take configure custom element react sort leaves vanilla folks high dry without abstraction performing bit work though like rob suggestion safe default allowing finegrained control something would work", "d": "12/2017"}, {"body": "robdodson think board ca nt promise concerns come think feels like good balance", "d": "12/2017"}, {"body": "hey work could take look wwwillchen work turn usable npm module", "d": "12/2017"}, {"body": "totes", "d": "12/2017"}, {"body": "stumbled issue got internal project generate powerpoint decks code powerpoint files pptx zip files containing folders xml files embedded assets wanted use react way generate xml files ca nt nt support xml", "d": "12/2017"}, {"body": "paulbjensen next babel version support namespaced tags see", "d": "12/2017"}, {"body": "seem done great job sorry nt time start working today really glad able complete test gaearon next make sure great availability", "d": "12/2017"}, {"body": "gaearon quick update begun refactoringcombining tests got good handle test implementation public api working creating test cases exercise different code paths dependent upon different execution environmentsbrowser engines expect first pr towards end week dec updated need bit time looking dec", "d": "12/2017"}, {"body": "nice thanks update", "d": "12/2017"}, {"body": "gaearon quick update end already started working rewriting tests able push pr thursday ok", "d": "12/2017"}, {"body": "sounds good", "d": "12/2017"}, {"body": "one reznord nt heard start anything busy maybe better give someone else chance try", "d": "12/2017"}, {"body": "ping reznord", "d": "12/2017"}, {"body": "hi gaearon take first contribution", "d": "12/2017"}, {"body": "thanks gaearon ran project resolved issue", "d": "12/2017"}, {"body": "something like inside render method bound method class autobind decorator constructor payload core prop", "d": "12/2017"}, {"body": "fixed", "d": "12/2017"}, {"body": "removed antd library build js decrease megas definitely advise dont use antd library much big", "d": "12/2017"}, {"body": "lot folks reported happy might want check", "d": "12/2017"}, {"body": "gaearon thanks complete already project reduxform like fieldarray going try formik advise important thanks", "d": "12/2017"}, {"body": "heroprotagonist gaearon still willing work needed guidance nt see reactfiberchild anywhere codebase seeking guidance start looking", "d": "12/2017"}, {"body": "patrickmcdougle trying reproduce issue possible since article written fixed", "d": "12/2017"}, {"body": "referring file string filename article author meant error file reproduce would try render something check message would get", "d": "12/2017"}, {"body": "gaearon got time look believe setting make ref check however one makes object matches react element set ref property cause error made summarize found believe error described blog go ahead update message reactchildfiber would resolve issue", "d": "12/2017"}, {"body": "sorry delayed response clarify mean stub react warnings need fixed order test suite pass stubs place warning triggered elevated error error gets picked error boundary suggestion hiding actual warning example error error error occurred component consider adding error boundary tree customize error handling behavior visit learn error boundaries instead warning unknown event handler property ignored hopefully helps explain situation bit better", "d": "12/2017"}, {"body": "yes first issue described agree need fix obvious browser shows errors thrown like jsdom file issue jsdom", "d": "12/2017"}, {"body": "work space spent lot time fighting closure compiler last years questions feel free ask one big piece aware two main ways property renaming work advanced mode controlled usetypesforoptimization flag relies correct type annotations know rename think maybe nonstarter honest nt know nt type annotations might fall back state turn flag renaming works globally given property name known one mangle eg getelementbyid dom api closure never mangle instance getelementbyid anywhere app one approach might work rather adding quotes done make single externsjs references known properties fake object see example file forgive wacky code test suite code generator stuffs foo property long namespace never occur real code causes foo properties preserved course best thing careful never treat properties strings otherwise use quotes indexing stringkeyed maps makes safe rename everything sometimes possible depends code style", "d": "12/2017"}, {"body": "makes sense would interested send pr try converting react package advanved mode externs file small package easy experiment tried flipping advanced mode compile errors proceed", "d": "12/2017"}, {"body": "possible resource extern files react helps ht mihaip finding", "d": "12/2017"}, {"body": "nice issue would still much benefit someone motivated try bundle tests great time play", "d": "12/2017"}, {"body": "love take stab couple days ok", "d": "12/2017"}, {"body": "sounds good", "d": "12/2017"}, {"body": "quick update attempts far approach using externs works pretty well preventing property renaming exact contents externs vary across bundles expose expect different things gcc still complains couple things defined clsjs externs file something looking added complains redefined renamed change get default browser externs bundle modified use production builds seeing minified error seemed occurring trying access property getting renamed turned also added externs saw similar errors getting renamed available added properties externs success fixture started trying pass realizing compiled node bundle files nt export anything think need properly setup externs maybe use gcc parameter get work correctly let know notice anything troubling main concern attempt hidden property name accesses react reactdom broken renaming compiled separately hope catch", "d": "12/2017"}, {"body": "run well nt believe related react found several bugs bugzilla sure maintain like months years old currently adding handler fixes issue though seems like extra overhead", "d": "12/2017"}, {"body": "curious adding would fix issue nooperation handler reason ask focus blur get attached time think important know different onfocus handler applied", "d": "12/2017"}, {"body": "gah sorry getting testing another pr stumbled upon via google ca nt get ie edge load svg image event period using following test ca nt find solution researching googling online either recommendation suggested use proxy comfortable closing one writing browser bug lame super hacking image tag svg worried edge cases used general solution gaearon jquense think", "d": "12/2017"}, {"body": "yeah think cost workaround much comfortable wo nt fix ya", "d": "12/2017"}, {"body": "okay", "d": "12/2017"}, {"body": "indeed nhunzaker class workaround", "d": "12/2017"}, {"body": "updated suggested still issue find tags silenced", "d": "12/2017"}, {"body": "please provide reproducing example maybe accidentally rendering outside svg", "d": "12/2017"}, {"body": "also nt track closed issues problem please create new one", "d": "12/2017"}, {"body": "hi make codemod issue may would help someone", "d": "12/2017"}, {"body": "matter react handles error printing console calling error boundary rethrowing top level exception etc main dx causality feeling system ca nt access stack environment conditions caused exception originally thrown really appreciate pause uncaught exception debugger flag would pause exactly original throw entire context available understand may impossible support case also supporting error boundaries unless flag turn build react completely disable error boundaries", "d": "12/2017"}, {"body": "thing thespyke eval much faster alternatives project react work correctly suggest workarounds even work hoping get fixed", "d": "12/2017"}, {"body": "noticed issue chrome devtools open change anything works fine firefox open developer tools", "d": "12/2017"}, {"body": "receiving errors production build expected configure react nt emit warnings", "d": "12/2017"}, {"body": "see warnings using production build verify use production build", "d": "12/2017"}, {"body": "hey folks bumping sure leave something guidance appreciated know isnt highest priorrity", "d": "12/2017"}, {"body": "case view renders tabs already ask childrens key since going match header results value changed method would really useful edit solution use lodash would really nice already method", "d": "12/2017"}, {"body": "trying wrap head around new concept things find difficult understand say server side client side react mean separate react project deployed server separate one client development environment files express files react files reside project correct perceiving wrong fashion find difficult understand work production deployment thank", "d": "12/2017"}, {"body": "hey selbekk appjs following code import react react import appregistry view text reactnative class app extends reactcomponent render return sierra tanner appregistryregistercomponent sampleapp gt app similar nt see sure exportingimporting incorrectly thank", "d": "12/2017"}, {"body": "see anything wrong code tbh", "d": "12/2017"}, {"body": "lock issue similar problems necessarily related particular problem issue describing closed issues usually get responses please file new issue experience problem along reproducing project", "d": "12/2017"}, {"body": "quick gotcha happening side routes inside blocking component see happens container turn child router since appcontainer inside route would nt rerender url changed solution render app inside path route way always rendered url changes triggering update inner routes", "d": "12/2017"}, {"body": "still encountering tapping clear field restore", "d": "12/2017"}, {"body": "work property child props implementation detail documented anywhere rely", "d": "12/2017"}, {"body": "work ref property child props nt behave like prop component ca nt read ref design like reactspecific property nt become part props rely yes", "d": "12/2017"}, {"body": "run scripts nt know many people want react could add used rather", "d": "12/2017"}, {"body": "nice sorry kept meaning respond dom parsingserialization really neat stuff still sure much steam would behind adding something like nt want kill anyone enthusiasm anyone particularly interested making case react formal rfc repo personally want know advantages exist dedicated property using lifecycle hook safe help users avoid injecting live script tags unintentionally behave consistently across every browser behavior intentional support okay", "d": "12/2017"}, {"body": "thanks report felipeochoa duplicate see comment thread fiddle show cursor position affected event stopped vanillajs environment reason works using capture listener react synthetic event system since known issue firefox easy workaround going close", "d": "12/2017"}, {"body": "prevent unnecessary rerender one child components define key property must used detect changes static value property must meaning never update working expected mean working", "d": "12/2017"}, {"body": "fixed", "d": "12/2017"}, {"body": "ref stateless componenents use storage js import react component react import stylesheet view text touchableopacity reactnative import color fontsize common const optionlabels b c e f g h const quizansweroptioncomponent props gt let text null const handlepressed e gt textsetnativeprops style color iscorrectanswer colorgreen colorred const styles stylesheetcreate optiontext fontsize fontsizedefault export default quizansweroptioncomponent", "d": "12/2017"}, {"body": "rfc", "d": "12/2017"}, {"body": "rfc", "d": "12/2017"}, {"body": "please report problems redux form repository", "d": "12/2017"}, {"body": "ie specific issue resolved edge well", "d": "12/2017"}, {"body": "another use case create nonenumerable props take instance component wrapped container injects additional props reactredux good example common react convention use spread operator select specific props pass rest like would inadvertently pass something rarely deliberate symbols however inherently nonenumerable symbol necessarily default behavior certainly one could configured uses prop would explicit would certainly much natural use symbol imported would use randomly generated identifier avoid collisions", "d": "12/2017"}, {"body": "hi gaearon could find event delegation explanation referred post latest react documentation docs change approach could direct link find info", "d": "12/2017"}, {"body": "second question possible attach synthetic event handler documentbody possible create synthetic event native event want make use crossbrowser wrapper around browser native event benefit use case related keyboard shortcuts handling originally use specific containers need move higher dom tree cover cases eg keys pressed inside help text popovers actually rendered outside app root", "d": "12/2017"}, {"body": "still top hit google neither tickets seem address original question create custom synthetic events eg want replace element custom component without changing api would create synthetic change event object structure would nt problem brand new components define api although sticking standard would still preferable trying replace old components without breaking existing change handlers becomes tricky", "d": "12/2017"}, {"body": "note code earlier comments work react also needed react passes custom attributes including amp long values strings numbers works amp attributes take values many attributes nt correctly pass amp validation example html element needs attribute react strips attribute unless string passed amp valid gaearon open raise new issue", "d": "12/2017"}, {"body": "misscs work though work iirc afaik unless changed react never renders attributes valueless xmlcompatibility valueless empty string unless amp unreasonably strict validation", "d": "12/2017"}, {"body": "believe unabbreviated form valid html", "d": "12/2017"}, {"body": "yes work afaik unless changed react never renders attributes valueless xmlcompatibility oops actually change cc aweary nt released yet important use case clear", "d": "12/2017"}, {"body": "gaearon someone complained xmlcompatibility way back changed never render valueless attributes new renderer guess less issue since affect ssr", "d": "12/2017"}, {"body": "gaearon", "d": "12/2017"}, {"body": "oh okay thanks digging guess prefer drop support popular definitely breaking change ca nt", "d": "12/2017"}, {"body": "romulof lencioni radubrehar aware fact passive flag meant usage scroll event listeners used events like etc interfere browser scrolling performance examples highly confusing setting passive nt important basic scroll event canceled listener ca nt block page rendering anyway source additional info", "d": "12/2017"}, {"body": "yes aware misinformed wrote earlier comments thanks clarifying wed dec martin hofmann notifications githubcom wrote romulof lencioni radubrehar aware fact passive flag meant usage scroll event listeners used events like touchmove etc interfere browser scrolling performance examples highly confusing setting passive nt important basic scroll event canceled listener ca nt block page rendering anyway source additional info receiving mentioned reply email directly view github mute thread", "d": "12/2017"}, {"body": "elmoaloloco pretty sure read documentation google developers site using passive listeners scroll events improve performance must misread something changed along way anyway thanks lot clarification", "d": "12/2017"}, {"body": "think found hacky way abusing ref prop ref prop passed function calls function passing ref dom element mount passing null unmount hijacking function able build wrapper component renders children div extra spandiv element immediately children extra spandiv ref prop set function bubble parent called null meaning element unmounted use wrapper sit parent children components using onunmount event parent let know children gone cleanup need link example code import react react class componentchild extends reactcomponent componentwillunmount consolelog child props thisprops const label thisprops consolelog unmonuting label render const label thisprops return label class unloadwrapper extends reactcomponent constructor props super props thisonunload thisonunloadbind onunload c c consolelog children unloaded const onunload thisprops onunload onunload render const children thisprops return children class componentparent extends reactcomponent constructor props super props thisstate haschildren false render return thisstatehaschildren null class root extends reactcomponent render return export default root example code parent renders button wrapped set children mounted unmounted click unmount happens see console three children componentwillunmount called unload wrapper calls back parent thus letting parent know children fully removed far works tested fully concern order unmount sequence react assuming unmount react processes element loops children order sequentially allows unload wrapper work anything parallel might run issues anybody see major flaws please let know", "d": "12/2017"}, {"body": "awreccan time might able use following workaround", "d": "12/2017"}, {"body": "fucking idiots", "d": "12/2017"}, {"body": "sorry feel way sort behavior unacceptable locking thread", "d": "12/2017"}, {"body": "flarnie word love slatejs well fwiw propose implemented different existing worry backwards compatibility since fires much less frequently kind like pseudo way people opt using way takes throttling account nt know much react events passthroughs complex compatibility logic might fairly easy implement", "d": "12/2017"}, {"body": "still experiencing issue using radio inputs version fixed", "d": "12/2017"}, {"body": "solution add wrapper component uses local state user editing value triggers function focus lost equivalent example npm rcslider component import rcslider rcslider export class slider extends component lt min number max number step number value number delaychangetilldefocus boolean onchange val number gt void editedvalue number gt slider rcslider render let value delaychangetilldefocus onchange rest thisprops let editedvalue thisstate return", "d": "12/2017"}, {"body": "meet problem sholud install add babelrc", "d": "12/2017"}, {"body": "closed still working", "d": "12/2017"}, {"body": "needed something like mentions matching pattern wrap multiple values changes richardwestenra solution maybe useful someone find highlight mention given matching pattern within block text param string text text parse param array values values highlight param regexp regex search pattern highlight return object jsx object containing array alternating strings jsx const formatmentiontext text values regex gt valueslength return text const text lorem ipsum dolor sit amet jonh doe jane doe const values jonh doe jane doe const reg new regexp match text inside two square brackets formatmentiontext text values reg lorem ipsum dolor sit amet jonh doe jane doe", "d": "12/2017"}, {"body": "make slight change xahon solution get past warning small utility wrote generate jsx import proptypes proptypes generates correct proptype trying ensure specific component param class component react component expect children returns proptype export default function componentproptype component const componentshape proptypesshape type proptypesoneof component need accept class false conditional rendering combination array form return proptypesoneoftype componentshape proptypesoneof false", "d": "12/2017"}, {"body": "use code get error read property undefined componentdidmount firebaseappdatabase ref users value snap gt var items snapforeach child gt itemspush name childval username thissetstate users items gt thisstateusersmap item gt item pls help", "d": "12/2017"}, {"body": "far know return promise ca nt chain unless promisify better using second argument callback function", "d": "12/2017"}, {"body": "tnxi following instructions", "d": "12/2017"}, {"body": "question regarding setstate end using callback function often understanding setstate asyncronous product lot async ajax calls call happening setstate isfetching true value used determine user sees spinner fetched data request complete data parsed value changed false tells render function display data spinner within fetch function submits request refreshes data typically scheme like seems common use case using callback setstate know seen people things like instead thissetstate isfetching true ajax url data done data gt thissetstate isfetching false data async nature setstate ever truly sure first setstate wo nt finalize second yes theory almost never happen still possible", "d": "12/2017"}, {"body": "look forward seeing added next year adding next year said said consider feedback think next apis make return promise tossing stuff componentdidupdate certainly get around also end cause amp effect somewhere else sprinkled react component rather right next creating bit maintenance issue least little confusing say anyone coming back looking code next week experience opposite pattern becomes maintenance burden somebody adds callback one place state gets set somebody else calls another place realize component correctness depends callback code running state change putting code turns component something closer state machine component behaves predictably side effects based explicit conditions eg prop state field changed rather code happened call understand little bit frustrating programming model used encourage give try situation dependent set states exist imo antipattern callback first place yes exists rare eg setting focus triggering animation however case necessary want flexibility promises flexible force execution happen next tick could return thenable object looks like promise issue proposing recently set rfc process proposing changes react welcome propose async nature setstate ever truly sure first setstate wo nt finalize second yes theory almost never happen still possible ever possible react keeps internal queue calls prevent exactly problems later calls always override earlier calls always safe show second example nt need wait flush start api call going lock issue discussing closed issues productive mentioned earlier comment feel strongly valuable proposal despite drawbacks welcome submit rfc thank", "d": "12/2017"}, {"body": "considering props passed constructors could merging calling apply whatever logic desirable relying proptypes looks good approach implementing functionality separate library looks reasonable putting core", "d": "12/2017"}, {"body": "know thread existing solution pretty fundamentally broken fix current api without making apps slower like avoid therefore propose new api handles use cases design flaws plan apis exist side side later phase old api people migrated check discussion", "d": "12/2017"}, {"body": "work", "d": "12/2017"}, {"body": "bootrino solution still best date coupled react fragment syntax embed styles sidealong tags need edited cobble together kind solution particularly useful fighting semanticui uses everywhere", "d": "12/2017"}, {"body": "added pr feature", "d": "12/2017"}, {"body": "changes released react solutions work", "d": "12/2017"}, {"body": "think current approach use redux tooling like redux observable redux thunk", "d": "12/2017"}, {"body": "case use problem know rendering app kind components", "d": "12/2017"}, {"body": "download datacontent instead component curious", "d": "12/2017"}, {"body": "dynamic pages component may may", "d": "12/2017"}, {"body": "sounds like want conditional rendering", "d": "12/2017"}, {"body": "think routing problem react render page manage request render data", "d": "12/2017"}, {"body": "first comment snippet suggested use case api sure would work idea would internal react code developers still able use inside render rather argument right think good idea assume first argument developer accessing inside documentation could strongly recommend still seems like odd restriction place example code app code though never mind", "d": "12/2017"}, {"body": "snippet meant example app code three years old though think reflects thinking", "d": "12/2017"}, {"body": "thanks clarification gaearon v", "d": "12/2017"}, {"body": "input connected redux action value store good solution", "d": "12/2017"}, {"body": "still seeing unusual behavior autofill ios reactautofill decorator seems work well simple autofill autofill shortcuts provided keyboard", "d": "12/2017"}, {"body": "fixed chrome ios sure patch included released version though", "d": "12/2017"}, {"body": "\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u7528 onchange use onchange change event", "d": "12/2017"}, {"body": "react still nt support jsx foo authors nt want open pr", "d": "12/2017"}]