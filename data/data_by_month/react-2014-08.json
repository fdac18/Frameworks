[{"title": "switch context use parent tree instead owner tree", "body": "pretty convinced point contexts useful parent tree owner tree also opens new use cases parent child communication nt possible", "num": "2112", "d": "8/2014"}, {"title": "project page update", "body": "hey wandering project page updated specifically wandering classes make", "num": "2111", "d": "8/2014"}, {"title": "tutorial causes warning hook data model section", "body": "finish hook data model bit react tutorial get warning data model nt unique key maybe big deal happy pull request docs let user know expect error problematic maybe another step could added account additional complexity also entirely possible missed something obvious mainly copypasting tutorial code point jsx reactdom var commentlist reactcreateclass render function var commentnodes thispropsdatamap function comment return return commentnodes var commentform reactcreateclass render function return hello world commentform var commentbox reactcreateclass render function return comments var comment reactcreateclass render function return thispropsauthor thispropschildren var data author pete hunt text one comment author jordan walke text another comment reactrendercomponent documentgetelementbyid content nothing special copy pasted examples", "num": "2109", "d": "8/2014"}, {"title": "add support chrome app node type", "body": "using react chrome app seems like nt support tag know pretty specialized scenario nt know belongs core way manually add support tag least single project", "num": "2108", "d": "8/2014"}, {"title": "perf tool incorrectly reports wasted time", "body": "bug difficult describe noticing perf tool incorrectly reporting wasted time even though dom change reproduce visit make sure focused page press start perf recording click gray area press stop perf recording javascript console notice wasted time reported even though time wasted continue play around notice inconsistencies may click several times recording get wasted time original fiddle", "num": "2105", "d": "8/2014"}, {"title": "csstransitiongroup transitions nt fire reliably unless set active class", "body": "example explained readme works example except added method focuses button within component transitioned notice transition fails animate possibly browser bug thought let know anyway also worth noting bug worked around moving like hope helps improve react", "num": "2104", "d": "8/2014"}, {"title": "support svg strokelinejoin attribute", "body": "currently support attribute svg elements implemented line join important see difference", "num": "2103", "d": "8/2014"}, {"title": "rendering instance component nt throw anymore", "body": "app unit tests assuming try render component instance twice throw upgrading nt seem case intentional regression see reduced test cases works fine errors throws error", "num": "2102", "d": "8/2014"}, {"title": "called root component returned render changes", "body": "convoluted hopefully good enough example root node returned render function changes value going change breaks binding unbinding via whenever value going change would nice fired change fired change essentially remounting", "num": "2100", "d": "8/2014"}, {"title": "keep empty string select option value", "body": "provide empty string value attribute using plain js jsx generated markup drops value attribute entirely think value attribute dropped explicitly provided use case select", "num": "2098", "d": "8/2014"}, {"title": "react chrome dev tools unavailable browserified", "body": "use react wo browserify dev tools available use npm react require app using browserify dev tools available solution thanks loving react way", "num": "2096", "d": "8/2014"}, {"title": "react perf set property totaltime undefined", "body": "disclamer low priority enhancement request simply cryptic error message bad react usage could enhanced internal framework always keep full state outside react always rerender top bit like om without local state react template engine code mistakenly triggered rendering rendering componentwillupdate phase internal framework forbid anyway avoid infinite rendering loops mesure renderings somehow lead following code permits easily reproduce error jsx reactdom var hello reactcreateclass componentwillupdate function reactaddonsperfstart reactaddonsperfstop reactaddonsperfprintwasted render function return hello thispropsname var component reactaddonsperfstart reactrendercomponent component documentbody reactaddonsperfstop reactaddonsperfprintwasted reactaddonsperfstart reactrendercomponent component documentbody reactaddonsperfstop reactaddonsperfprintwasted yes probably bad usage react cryptic error message could made explicit wrong", "num": "2095", "d": "8/2014"}, {"title": "forms mishandle submit enter key", "body": "react seems executing first event handler attached elements form rather executing onsubmit handler hitting enter key jsfiddle", "num": "2093", "d": "8/2014"}, {"title": "support media events", "body": "currently media events supported makes working audio video tags react pain ass also still many missing attributes audio video tags find strange tags completely unsupported probably removed list documentation reduce confusion properly supported", "num": "2090", "d": "8/2014"}, {"title": "html space special code became broken characters precompiling", "body": "precompile jsx found html space special code become broken characters avoid anyone meet thanks", "num": "2089", "d": "8/2014"}, {"title": "work even precompiled", "body": "use jsx tool linux precompile code still work error message shows problem happens line around codes javascript var invariant require invariant constructs enumeration keys equal value example var colors keymirror blue null red null var mycolor colorsblue var iscolorvalid colors mycolor last line could performed values generated enum equal keys input output param object obj return object var keymirror function obj var ret var key production processenvnodeenv invariant obj instanceof object amp amp arrayisarray obj keymirror argument must object invariant obj instanceof object amp amp arrayisarray obj key obj objhasownproperty key continue ret key key return ret moduleexports keymirror also use browserify manage codes sure related anyone help thanks", "num": "2088", "d": "8/2014"}, {"title": "document callback", "body": "callback reactrendercomponent called set toplevel component see nt documented probably case someone relies behavior", "num": "2087", "d": "8/2014"}, {"title": "bootstrap model example nt work bootstrap", "body": "bootstrap model example nt work bootstrap update bootstrap modal nt open button nt show properly click text fade black stops way app seizes", "num": "2085", "d": "8/2014"}, {"title": "error unmountcomponentatnode receives nonnode eg array", "body": "rendercomponent throws passed nonnode unmountcomponentatnode", "num": "2079", "d": "8/2014"}, {"title": "image src image object", "body": "nt see way vanilla js something along lines var image new image imagesrc heavyimagefilejpg documentqueryselector img src image great able pass object concretely using file upload previews", "num": "2077", "d": "8/2014"}, {"title": "unify mount update component lifecycle methods", "body": "kind related seems natural correlation mount update methods many situations want code mountupdate put shared method call places hardly common enough issue seems common enough strikes bit odd perhaps idea could make sense eg get rid mount altogether instead following extreme perhaps example mounting getinitialstate componentwillreceiveprops update false componentwillupdate update false componentdidupdate update false updating componentwillreceiveprops update true shouldcomponentupdate componentwillupdate update true componentdidupdate update true would unify lifecycle move away mounting treated entirely separate updating would seen exception would less potential inconsistencies causes mistakeneglect nt thought extensively bring mainly start discussion know many others wondered nt lifecycle method mountupdate", "num": "2074", "d": "8/2014"}, {"title": "component lifecycle methods update", "body": "good everything makes sense mounting need update state nt based new props place seems sure stick componentwillreceiveprops puts shouldcomponentupdate bad componentwillupdate seems like obvious choice allowed good reason nt personally nt think many reasons call setstate componentwillupdate encountered scenario two would like call setstate shouldcomponentupdate ie componentwillupdate", "num": "2073", "d": "8/2014"}, {"title": "output jsx syntax errors throw errors load", "body": "would awesome jsx parser errors would nt end terminal would actually output valid code would throw error load client instead would make virtually transparent jsx used simple solution would simply output error message asis fileline baked imagine source map trickery could even make look browser threw error correct source location", "num": "2072", "d": "8/2014"}, {"title": "remove href attribute", "body": "remove href attribute", "num": "2071", "d": "8/2014"}, {"title": "render href attribute", "body": "renders render", "num": "2070", "d": "8/2014"}, {"title": "svg image element", "body": "please add support svg image element thanks", "num": "2069", "d": "8/2014"}, {"title": "update testutils docs website", "body": "file date etc website date", "num": "2064", "d": "8/2014"}, {"title": "enterleave event triggers extra calls nested roots", "body": "enter inside square enter expected nothing happen recorded instead exiting", "num": "2063", "d": "8/2014"}, {"title": "ontouchtap triggering handler twice", "body": "using application calls every handler twice calls triggered different events first time second time generated browser click nt make sense think prevent triggering event triggered touches sure good way guess calling inside wisest solution", "num": "2061", "d": "8/2014"}, {"title": "props immutable objects", "body": "started using immutablejs together reactjs however noticed passing around immutable objects nt quite fit together reactjs ie myobject myobjectsmap object gt reactdomdiv proptypes nt quite support without first converting js object unnecessary overhead thoughts advice issue", "num": "2059", "d": "8/2014"}, {"title": "ref helper", "body": "thisrefs something verbose helper", "num": "2057", "d": "8/2014"}, {"title": "onclick mobile fired", "body": "put together test case replicates issue desktop browsers click handler triggered correctly code ios mobile devices tested simulator actual devices fire event works fine android", "num": "2055", "d": "8/2014"}, {"title": "onchange event input type range nt fire", "body": "browsers works expected onchange also oninput event nt get triggered ie jsfiddle", "num": "2048", "d": "8/2014"}, {"title": "contenteditable element caret position jumps", "body": "hi nt think really bug fixed easily annoying behavior see cursor jumps unexpectedly contenteditable element rerendered mean always use contenteditable elements uncontrolled components", "num": "2047", "d": "8/2014"}, {"title": "give example production ready workflow react js", "body": "hi great time working react js big issues setting good workflow libraryframework sites examples getting started simple developers considering react js need put workflow currently experience difficult figure wrote post experienced getting react js running workflow ending browserify react js browserify workflow points difficult suggests solution hope help people request really put example workflow setup react js site would make lot easier developers adopt library thanks great contribution world javascript", "num": "2046", "d": "8/2014"}, {"title": "clearer warning replacing reactrendered children new root component", "body": "suppose js var taskheader reactcreateclass render function return task reactrendercomponent taskheadercontainer intend run replace header accidentally run instead get error warning blowing away reactrendered contents none given actually get serverrendering checksum warning confusing anything explicit warning much like one get calling setprops nonroot component", "num": "2045", "d": "8/2014"}, {"title": "proptypescomponent false reactdom", "body": "example js var mq reactcreateclass displayname mediaquery proptypes component proptypescomponent render function return null mq component reactdomdiv currently way check dom els custom components proptypes", "num": "2044", "d": "8/2014"}, {"title": "attach event per react container root rather document", "body": "nathansobo help event perf issues bit familiar atom plugin infrastructure help two nt help though ideas optimize events bit nonetheless ok idea think spicyj", "num": "2043", "d": "8/2014"}, {"title": "allowfullscreen work", "body": "check jsfiddle according docs allowfullscreen supported ca nt seem able jsfiddle page shows iframe get attribute", "num": "2041", "d": "8/2014"}, {"title": "react component library", "body": "hey sure right place put created little onepager hope become collection useful andor cool react components located leesalminengithubio guys interested think could become popular link docsreadme thanks sorry wrong place", "num": "2040", "d": "8/2014"}, {"title": "normalize dom access across browsers", "body": "appears order access real dom crossbrowser way need use something like jquery react slowly chipping away need include jquery normalizing events make sense go example instead realize may scope react already discussed somewhere decided upon close ticket one beautiful thing react usually allows us alway work firstclass dom occasionally need reach actual dom get hands dirty would awesome load jquery deal crossbrowser issues much native browser recreated react like virtual dom selection events way access real dom without rebuild jquery references real dom nodes virtual dom clever tricks may already way nt see may scope thought would ask thanks", "num": "2034", "d": "8/2014"}, {"title": "behavior", "body": "javascript var foo createclass componentwillmount function alert mounted foo componentwillunmount function alert unmounted foo render function return reactdomdiv hello thispropsname var bar reactcreateclass componentwillmount function alert mounted bar componentwillunmount function alert unmounted bar render function return reactdomdiv hello thispropsname unmounts component reactrendercomponent foo name world documentbody reactrendercomponent foo name documentbody reactrendercomponent bar name world documentbody reactrendercomponent bar name documentbody function createclass spec return function props return reactcreateclass spec props sure going component get unmounted component seems like difference two ways calling", "num": "2032", "d": "8/2014"}, {"title": "releasemaintain typescript bindings dts reactjs", "body": "really like react kinda hate javascript due lack typing typescript looks good party bindings truly terrible constantly breaking generally versioned well immutable js collections released recently facebook include typescript bindings fills us hope maybe might happen react please make aware jsx wo nt work typescript big loss prefer pure script plays nicer existing js tools", "num": "2029", "d": "8/2014"}, {"title": "reactcsstransitiongroup multiple transitions enter", "body": "sorry dupe could nt really tell animation bugs noticed csstransitiongroup class nt seem handle multiple transition properties enter well take example actiontrayenter transform translatey opacity transition easein actiontrayenteractiontrayenteractive transform translatey opacity actiontrayleave transform translatey opacity transition easein actiontrayleaveactiontrayleaveactive transform translatey opacity try remove node enter animation still occurring looked like abruptly removing node without triggering leave animation switch one property enter animation works expected wait enter animation finish trigger leave animation provide fiddle later", "num": "2024", "d": "8/2014"}, {"title": "sync updated objectassign polyfills", "body": "make sure include specific pieces", "num": "2023", "d": "8/2014"}, {"title": "inline styles vendor prefix values", "body": "would write following css using inline styles would nt nice react could internally automatically handle vendor prefixes similar stylus nib", "num": "2020", "d": "8/2014"}, {"title": "reactclasssetvalue inside mocha test using jsdom causing interesting problem", "body": "running spec inside linked gist cause following problem stacktrace attached gist likely jsdom problem", "num": "2019", "d": "8/2014"}, {"title": "support tag", "body": "tag available chrome chrome behind flag trying use initially confused nt added dom adding reactdomjs seems enough work really familiar react code hoping support added soon documents element info demos", "num": "2017", "d": "8/2014"}, {"title": "deprecate return false event handlers", "body": "currently support makes code less understandable like stop supporting encourage people use either epreventdefault estoppropagation appropriate", "num": "2015", "d": "8/2014"}, {"title": "let use inheritance componentdidmoubt", "body": "consider following js var mixinnamehere var componentnamehere reactcreateclass work see declared existence twice would fair nt libraries underscore similar libraries make use lets us question one likes abstract common logic use inheritance mix backbone react use inheritance say component mount yes oh call parent", "num": "2012", "d": "8/2014"}, {"title": "relatedtarget blur event firefox returns null always", "body": "basically relatedtarget returning null time chrome returning correct value clicking actual element return null clicking outside document ok something firefox natively patch case make cross browser syntethic event example click first input second see console relatedtarget chrome b null firefox", "num": "2011", "d": "8/2014"}, {"title": "improve flux documentation", "body": "read flux todomvc walkthrough first kudos complete description flux seen last time explored react doc nt written yet existing event story event bubbling nt supported pass listeners callbacks dom scared flux much sensible model thanks describing detail two pieces feedback maintaining private data structure called todos variable lives outside class within closure module remains private directly changed outside helps us preserve distinct inputoutput interface flow data making impossible update store without using action strictly true method returned ok stands oblivious caller could modify result inplace without going store methods effectively move creating semantic actions earlier walkthrough first thing wonder seeing look like second thing many layers abstraction would nt replacing line thing direct way glad see semantic actions section doubt created additional concept actions nt needed still could nt help wonder nice see reservation directly addressed documentation worth still convinced significantly cleanermore semantic free probably prefer former however knowing write maintain class remember adds weight mental model friction development pace nicer syntax nt communicate anything clearly hate writing boilerplate", "num": "2009", "d": "8/2014"}, {"title": "stop defensively copying style object domcomponentupdatedomproperties", "body": "right copy one hottest paths react allow users mutate style object afterward come realize pattern nt come often since style often created inline inside retained additionally coming soon people could always clone style need jordwalke", "num": "2008", "d": "8/2014"}, {"title": "mention facebook immutablejs project somewhere", "body": "think mentioned somewhere react documentation advanced immutable cases nt aware project loved good place could", "num": "2006", "d": "8/2014"}, {"title": "resolving implicit thead lead invariant violation", "body": "internet less unavailable right ca nt test thoroughly thinking seems blindjumps detect resolve implicitly added elements mainly appears actually safe asis personally feel like solution resolve implicitly added elements rather tell user hisher error instead fix related pr provide friendly path reactid errors reactmount", "num": "2005", "d": "8/2014"}, {"title": "nt run child key validations using dom nodes children", "body": "work trigger warning try enumerate keys object", "num": "2001", "d": "8/2014"}, {"title": "typeo documentation", "body": "small typeo documentation bottom cautions bullet point make sure never access property specified string make sure never access property specified string", "num": "1999", "d": "8/2014"}, {"title": "objectassign polyfilled environment", "body": "goes policy afaik dealing polyfillsshims want ship polyfill returned shim global object", "num": "1998", "d": "8/2014"}, {"title": "documentation bug", "body": "example contains following code wo nt return due automatic semicolon insertion", "num": "1996", "d": "8/2014"}, {"title": "rfc dynamically add external listeners componentwillunmount", "body": "quite common external apis nt really belong component mustfavor notified instance unmounted currently solved making api mixin imho wrong solution propose able something like examples well aware could perhaps implemented thirdparty mixin instead common simple enough usecase unified implementation least worth bringing think would useful bridging many apis without use mixins edit published experimental mixin js simple suboptimal use componentdidmount function var p extapisendrequest thisaddeventlistener unmount pabort nonretainingleaking version componentdidmount function var p extapisendrequest thisaddeventlistener unmount pabort poncompleted function thisremoveeventlistener unmount pabort bind perhaps lockeddown unmountonly api api designed mind wrapped helper", "num": "1992", "d": "8/2014"}, {"title": "clonewithprops keyref intended behavior", "body": "petehunt sebmarkbage number people ask irc really sure answer current situation seems illogical js key ok ref ok key ok ref ok js key okerr possibly unexpected conflicts ref ok key ok may conflict ref ok js key ok ref ok key ok ref ok js key err discarded ref err discarded clonewithprops err support arraysobjects js key ok ref ok key ok ref ok would expect work like think perhaps even preferable like implemented wo nt actually add props children asis imagine missing something current situation seems fundamentally plain broken using asis dangerous destroys ownership understand change ownership local instance intended usecase behavior sure expected behavior would either seems like keys concatenate refs kept ie multiple owners related", "num": "1991", "d": "8/2014"}, {"title": "uncontrolled ignores setstate", "body": "calling uncontrolled lead expected result example pressing button reset state input fields default element resets expected debugger method gets correct initial data changes dom occur bug implementation correctly understand essence uncontrolled input fields case reset value initial state", "num": "1986", "d": "8/2014"}, {"title": "jsx tool processes files match given extension", "body": "running jsx following command line folder watched jsx also generating unreasonably large json file nt ask whenever recreated json file jsx would register change process json file shown following console output behaviour nt would expect passing arguments watch jsx files side note think jsx trying process json file unable handle large file crashed think subject another bug report", "num": "1983", "d": "8/2014"}, {"title": "serverrendering distinct clientrendering", "body": "kind related concerns polyfills seems really treat serverrendering distinct clientrendering different requirements priorities serverrendering able generate optimal markup seo markup must also fully crossbrowser compatible small markup preferable clientrendering sees seo largely irrelevant full crossbrowser compatibility also irrelevant rendering performance greater importance propose treat serverrendering uniquely distinct clientrendering eg separate flag would default true document available even imaginable could extend eg would optionally allow markup tailored specific purpose reusing serverrendered markup clientside client initial serverrendering pass passed exact props time serverside rendering instances actually allocated client immediately afterwards clientrendering pass done props current time like instancesmarkup efficiently reused add significant costs little dom manipulation involved really affected use serverrendering seems like correct way approaching opposed rendering everything exactly however working element polyfills without made generate sensible serverside markup ps realize done today using global mixin without standardized solution unlikely thirdparty polyfill components could ever participate nt mean needs shipped react even none requires core support believe long standardized", "num": "1979", "d": "8/2014"}, {"title": "export standardized tagnameequivalent overloaded reactdomcomponents", "body": "trying polyfill browser elements currently consistent guaranteed safe way detect overloaded reactdomcomponents one way safe use polyfilled implementations another way dirty expecting polyfilled components hide behind display name polyfilled react dom element nice actually issue right implementing polyfilled elements element element child safe use companion polyfilled overloaded implementation safestandardized way detect currently", "num": "1978", "d": "8/2014"}, {"title": "jsx transformer done event", "body": "would nice jsx transformer event could listen order know scripts done processing development mode pattern treat external js files libraries call html templates script blocks however jsx nt know processed yet", "num": "1977", "d": "8/2014"}, {"title": "variable reactdom jsx compile result", "body": "hello jsx compile markup functions markup complicated result become wordy repeating would greate refer reactdom variable example within compiled method would performance less object property lookup would better minified", "num": "1975", "d": "8/2014"}, {"title": "button eat mouse events", "body": "unsure react specific browsers things difference crossbrowser behavior tested react following pattern fires event handlers chrome safari button handler firefox var button reactcreateclass onclick function e consolelog onclick handledown function e consolelog handledown handleup function e consolelog handleup render function return reactdombutton onclick thisonclick hello reactdomcanvas onmousedown thishandledown onmouseup thishandleup reactrendercomponent button documentbody", "num": "1973", "d": "8/2014"}, {"title": "provide q options suppress unnecessary console output", "body": "would nice jsx tool provided mechanism suppress output common pattern used command line tools would provide option although alternative would suppress output default provide option make verbose output", "num": "1971", "d": "8/2014"}, {"title": "possible use react without container element", "body": "switching atom react want support backwardcompatible shims previous view framework old framework views represented jquerywrapped dom elements ideally like provide backwardcompatible shims simply rendering react component wrapping root element jquery wrapper api compatible old editor views would essentially look like javascript var editorroot documentcreateelement div reactrendercomponentwithrootelement editor props editorroot element would actually wrapped custom subclass jquery clearer example var editorshim editorroot currently nt possible react components need rendered container instead need create wrapper element render component inside sad adds extra layer markup confuses styling also means editor wrapper used via shim layer wrapper embedded child via react something fundamental preventing react adopting dom nodes directly without parent something could even hack way would somewhat maintainable heart", "num": "1970", "d": "8/2014"}, {"body": "jsfiddle nt support nothing view site http everything work", "d": "8/2014"}, {"body": "need general update page think nt going classes since bunch changes likely", "d": "8/2014"}, {"body": "ok thanks", "d": "8/2014"}, {"body": "could easily create attach obviously thing imagine work well nt wait another release fix might happen soon", "d": "8/2014"}, {"body": "sounds like plan syranide use method welcome close issue want figured leave open case choose add supported tag future release", "d": "8/2014"}, {"body": "perhaps dupe", "d": "8/2014"}, {"body": "ah looks like may well dupe sorry checked", "d": "8/2014"}, {"body": "thanks fiddle bug happens also attribute gets added close button", "d": "8/2014"}, {"body": "good find cody link fiddle", "d": "8/2014"}, {"body": "deadlyicon", "d": "8/2014"}, {"body": "firefox bug worse sometimes close button close modal transition got somehow broken happens half time adding timeout seems prevent bug", "d": "8/2014"}, {"body": "pointed", "d": "8/2014"}, {"body": "design refer removal child dom components way creation destruction composite component ie state could need way register lifecycle events dom nodes similar except would exposed react injectable however imagine correct solution problem subdivide component instead instead always returns root dom node whenever change dom node render instead effectively destroy calling", "d": "8/2014"}, {"body": "think issue report one let know actually different issue word little bit differently mounting root view methods root view life cycle functions called childrens called root one version example click link open console click start notice subview life cycle functions called expected root view life cycle functions also called actual arent maybe expected behavior case found strange however case expect documentation", "d": "8/2014"}, {"body": "chengyin seems want kind thing however assuming allowed addoverride life cycle methods descriptors must need know specific reactdom component mountsunmounts need wrap custom composite component houses life cycle methods", "d": "8/2014"}, {"body": "see naively assumed result simply extending prototype nt realize different type react objects", "d": "8/2014"}, {"body": "running indicates value attribute kept properly perhaps something wrong elsewhere code make minimal repro perhaps take another look", "d": "8/2014"}, {"body": "thanks looking sorry superfluous issue turns due assigning keys list options passed select", "d": "8/2014"}, {"body": "add code react dev tools expects", "d": "8/2014"}, {"body": "andreypopp thanks quick reply nt work maybe assigned window late big deal would nice", "d": "8/2014"}, {"body": "keyvanfatehi close developer tools open react available seems check react open developer tools", "d": "8/2014"}, {"body": "syranide perfect thank", "d": "8/2014"}, {"body": "littleknown fact tag defaults change fiddle works intended", "d": "8/2014"}, {"body": "related", "d": "8/2014"}, {"body": "contra sure understand current limitations audiovideoetc react nt go ahead face unexpected issues", "d": "8/2014"}, {"body": "syranide nt issues far working reference", "d": "8/2014"}, {"body": "contra parents siblings movereorder audiovideo stop playing nt problem great", "d": "8/2014"}, {"body": "broken decoded however serving page charset might need add scripttag avoid parsed incompatible charset", "d": "8/2014"}, {"body": "follow instructions bottom mon aug pm \u5c24 \u5ddd\u8c6a notifications githubcom wrote use jsx tool linux precompile code still work error message shows problem happens line production processenvnodeenv invariant around codes var invariant require invariant constructs enumeration keys equal value example var colors keymirror blue null red null var mycolor colorsblue var iscolorvalid colors mycolor last line could performed values generated enum equal keys input output param object obj return object var keymirror function obj var ret var key production processenvnodeenv invariant obj instanceof object amp amp arrayisarray obj keymirror argument must object invariant obj instanceof object amp amp arrayisarray obj key obj objhasownproperty key continue ret key key return ret moduleexports keymirror also use browserify manage codes sure related anyone help thanks reply email directly view github", "d": "8/2014"}, {"body": "issue ie unminified react w addons even polyfills seems come pointedat bit within invariant javascript var invariant function condition format b c e f production development format undefined throw new error invariant requires error message argument condition var error format undefined error new error minified exception occurred use nonminified dev environment full error message additional helpful warnings else var args b c e f lt var argindex error new error invariant violation formatreplace sg function return args argindex lt threw object expected error setting arguments empty string undefined building args array took care curiously react without addons nt show problem us still puzzling", "d": "8/2014"}, {"body": "misuba using minifier options know uglifyjs quite fixes dealing issues", "d": "8/2014"}, {"body": "syranide got error minified unminified code", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "put pr check travis nt seem want anything also good thing bug filed slightly annoyed past silent failures coming method thumbsup", "d": "8/2014"}, {"body": "slightly annoyed past silent failures coming method next time file feature request whenever possible go clear errors", "d": "8/2014"}, {"body": "nt actually work browser nt think make work react see", "d": "8/2014"}, {"body": "sorry nt correct example file upload previews like moduleexports reactcreateclass getinitialstate function return onchange function ev thissetstate file evtargetfiles componentdidupdate function thisrefsimage typeof filereader undefined amp amp imagei test selfstatefiletype var reader new filereader readeronload function e selfrefsimage selfrefsimagegetdomnode src etargetresult readerreadasdataurl selfstatefile render function thisstatefile var thumbnail would great detect file classes load resulting something like moduleexports reactcreateclass getinitialstate function return onchange function ev thissetstate file evtargetfiles render function thisstatefile var thumbnail", "d": "8/2014"}, {"body": "nt think overload dom like adds much magic could clean example reading file storing dataurl state would still get nice clean could create component allows pass file reference something like", "d": "8/2014"}, {"body": "fair enough", "d": "8/2014"}, {"body": "unify problematic need plugins still nt time write fully loading data server understand duplication problem rare write one function called methods alike easier functions", "d": "8/2014"}, {"body": "orisomething ugly distinction really helps manage dom nodes things like jquery plugins concept nt foreign frameworks either even ember comes event methods like didinsertelement help people manage nodes separate object update cycle addition nt stores norm flux applications want people manage component mountunmount actions separately", "d": "8/2014"}, {"body": "saying wrong heart react works much like oldschool serverrendered pages render page click something throw everything away render page model separation first subsequent renders obviously exactly react works practice due reconciliation obviously need curiosity lies proposed change makes inconsistentbroken behavior less likely occur listening specialcase rather way around reactcreateclass componentdidupdate function first suboptimal necessarily broken addeventlistener reactcreateclass componentdidupdate function first first optimal addeventlistener reactcreateclass componentdidupdate function first optimal measuredom whereas old separation easily inconsistencies reactcreateclass componentdidmount function optimal addeventlistener reactcreateclass componentdidmount function inconsistent broken measuredom reactcreateclass componentdidmount function optimal correct measuredom componentdidupdate function measuredom also think proposed change makes easier understand component implemented longer need correlate differences ps forcefully pushing think interesting topic", "d": "8/2014"}, {"body": "overall agree honestly something like split actually separate mountupdate behavior shared method called outside jquery plugin wrapping think nice try idea see might work use cases involve forcefully manipulating dom element iirc ember components mount methods called update method runs directly think makes sense maybe conditional definitions mount methods decides whether mount update methods called component render", "d": "8/2014"}, {"body": "give example want idea shouldcomponentupdate able look state determine whether update", "d": "8/2014"}, {"body": "generally seems want reasons would want call imho storing results sideeffects caching expensive computations etc common problem want store id cancelled right store outside state times encountered far especially dealing result external sideeffects measuring dom case overlaying things iframe", "d": "8/2014"}, {"body": "timeout ids stored outside state state things might affect render presumably state change needs triggered something currently state change response props change supported make state changes componentwillupdate shouldcomponentupdate returns true way skip render point proposing running shouldcomponentupdate specific use cases would help understand", "d": "8/2014"}, {"body": "timeout ids stored outside state state things might affect render sure impression belongs state older overheard discussions modifying seems dirty way timeout id indication something happening case xhretc hold additional information nt sound alien want show visual indication whatever timeout searching etc using separate property indicating another potential inconsistency technically redundant may well wrong understood presumably state change needs triggered something currently state change response props change supported right always triggered propstate change propstate change could external sideeffects changed external events equivalent set state based props props source information state reason call reason seems logical could difference mount update technically whether initial rendering right make state changes componentwillupdate shouldcomponentupdate returns true way skip render point proposing running shouldcomponentupdate thoughts simply applied like immediately sideeffects nothing abort reason abort see way update additional data external sources performed actions costly computations say external dom interaction want cache place makes make sense think happen specific use cases would help understand definitely bit tricky usecases far mostly rather special components external interaction editorrelated stuff everyday stuff think also seem need ordinary components state based propsuser input answer everything basically enough nonordinary enough also largely see following connection mentioned thing behaviorally inconsistent setting state according reason anyway little overburdened moment try boil usecases something tangible think", "d": "8/2014"}, {"body": "considering disallowing setstate componentwillmount favor people use getinitialstate", "d": "8/2014"}, {"body": "interesting feel like excessively punishes people nt use flux great big model good reason dispatching requeststimersetc seems makes sense componentwillmount componentwillupdate nt ab external model take care", "d": "8/2014"}, {"body": "data nt easily available synchronously use componentdidmount", "d": "8/2014"}, {"body": "even available synchronously complex notstrictlypropbased state updates seems dirty dispatching requeststimers nt seem sane", "d": "8/2014"}, {"body": "understand requests sent timers set componentdidmount", "d": "8/2014"}, {"body": "seems like significant downgrade simply using requires two renders rather one missing something obvious", "d": "8/2014"}, {"body": "closing favor", "d": "8/2014"}, {"body": "intentional nt want attribute use null undefined see info", "d": "8/2014"}, {"body": "merging", "d": "8/2014"}, {"body": "hi issue closing means already implemented correct yes release included kind regards ben alpert notifications githubcom merging reply email directly view github paulo jorge dias \u00e0 procura erro certo looking right error", "d": "8/2014"}, {"body": "implemented yet issue tracking svg tags attributes missing added request instead", "d": "8/2014"}, {"body": "ok meanwhile use example already tried works thing like react amazing implement image sgv element matter replacing call component used kind regards", "d": "8/2014"}, {"body": "sorry erases solution used html tags temporary solution svg dangerouslysetinnerhtml html kind regards", "d": "8/2014"}, {"body": "edmspjp surround code messed", "d": "8/2014"}, {"body": "feel free submit pr", "d": "8/2014"}, {"body": "chenglou think need cherrypick", "d": "8/2014"}, {"body": "oh sorry read bit fast", "d": "8/2014"}, {"body": "sure actually expecting leave enter hovering hello string less happens native listeners", "d": "8/2014"}, {"body": "taddei want use onmouseover onmouseout", "d": "8/2014"}, {"body": "spicyj yes sorry much coding today", "d": "8/2014"}, {"body": "seems tricky logic traversal propagation relies id naming scheme never looks nested parent components example another issue jsfiddle mouse outside square directly never see event never propagates parent component although see nt totally understand examples elsewhere codebase deal nesting like chenglou", "d": "8/2014"}, {"body": "yeah tricky react made nested root event propagation work correctly", "d": "8/2014"}, {"body": "correctly", "d": "8/2014"}, {"body": "arguable called handler defined always want would way undoing nt see way around since really going browser trying play nice emulating mouse events touch way selectively disable emulation idea nodewise sounds kind useless becomes yet another reserved nonstandard attribute sure would owner component wise would probably introduce additional issues components supplied children another component ps currently return instead think deprecated seems nt", "d": "8/2014"}, {"body": "yeah return less calling nt want prevent event get two calls handler", "d": "8/2014"}, {"body": "seems widespread issue quick googling reveals lot people seem quite confused nt find useful answer quick search additionally nt seem able guy right", "d": "8/2014"}, {"body": "ok fixed hard way taps enabled nt react clicks check taps like course rules laptops touch screens working good live", "d": "8/2014"}, {"body": "piranha also means support touchevents components fallback places nt care", "d": "8/2014"}, {"body": "yeah everywhere", "d": "8/2014"}, {"body": "piranha believe solution nt ideal first touch detection using gives false positives including current version chrome return true never gets triggered since either listening mouse touch events based feature detection tap handler never gets fired see modernizr source info second sure environment working either listening mouse touch events devices support trying fix problem also tried failed change state touch render extra element dom overlays tap area following mouse events triggered overlayed element element touch handlers fired solution came ignore mouse events within last touch event since emulated mouse events triggered directly touch events easily ignore chose reasonable amount time considered user interaction solution tap handler always invoked per user interaction also never excludes events user allowed use finger mouse solution", "d": "8/2014"}, {"body": "hmm regarding actually emulated mouse events fire delayed touch actiondoes touch action would assume delay would enough happens immediately touch event else mouse", "d": "8/2014"}, {"body": "wow certainly much better needed really quick fix could nt come better idea patch seems good one though think makes sense decreasing threshold say iirc delay tap emulated click event", "d": "8/2014"}, {"body": "well hope emulated mouse events would fired immediately touch events nt delays logs ios simulator log touch event toptouchstart reactwithaddonsjs line log touch event toptouchend reactwithaddonsjs line log non touch event topmousemove time diff reactwithaddonsjs line log non touch event topmousedown time diff reactwithaddonsjs line log non touch event topmouseup time diff reactwithaddonsjs line log non touch event topclick time diff reactwithaddonsjs line log touch event toptouchstart reactwithaddonsjs line log touch event toptouchend reactwithaddonsjs line log non touch event topmousemove time diff reactwithaddonsjs line log non touch event topmousedown time diff reactwithaddonsjs line log non touch event topmouseup time diff reactwithaddonsjs line log non touch event topclick time diff reactwithaddonsjs line also lowering threshold nt really make sense going switch finger mouse probably nerdy developer trying double click using finger mouse", "d": "8/2014"}, {"body": "fairly certain click emulated event somewhat input device agnostic event similar input instead key events form elements delay allow doubletap zoom gestures potentially accessibility features idea testing would interact browser features disable delay mstouchaction none chrome android", "d": "8/2014"}, {"body": "also lowering threshold nt really make sense going switch finger mouse probably nerdy developer trying double click using finger mouse mean like", "d": "8/2014"}, {"body": "oh right clicktap event intentional delays emulated mouse events assume would called immediately", "d": "8/2014"}, {"body": "iamdustan mean like looks pretty awesome never seen think support interaction probably wo nt use tap handler handle events separately syranide know click delay intentional mean react talking delay also seen delays nt see intentional delays react source", "d": "8/2014"}, {"body": "iamdustan tested patch chrome device emulator delay milliseconds ignoring events works perfect log touch event toptouchstart reactwithaddonsjs touch event toptouchend reactwithaddonsjs non touch event topmouseover time diff reactwithaddonsjs non touch event topmousemove time diff reactwithaddonsjs non touch event topmousedown time diff reactwithaddonsjs non touch event topmouseup time diff reactwithaddonsjs non touch event topclick time diff reactwithaddonsjs", "d": "8/2014"}, {"body": "talking browserimposed click delay hmm interesting delay could delay actually significant processing associated ie rerendering touch event would delay emulated mouse event intuitively would expect emulated mouse events fire frame touch events necessarily timestamp simply setting global clearing would exact obviously ca nt used click though assuming checked nt properties addedset emulated mouse event would indicate emulated", "d": "8/2014"}, {"body": "testing today results please tell testing wrong making wrong assumptions looks like events triggered separate frames resetting global variable effect istouch topleveltype touched true settimeout function touched false consolelog handle topleveltype touched example resets variable next event handled see log also tested expensive touch handlers explain mouse events delayed besides event example fiddle expensive touch handlers log ios simulator logging event touched timestamp timediff log touchstart undefined nan show line log touchend true show line log mousedown false show line log mouseup false show line log click false show line example fiddle without expensive touch handlers log ios simulator logging event touched timestamp timediff log touchstart false show line log touchend true show line log mousedown false show line log mouseup false show line log click false show line looks like applies event event follow directly seperate problem mouse events triggered component touch events look fiddle see console mouse events triggered container clicked element box make sure enabled touch sensor emulation chrome developer tools use ios simulator logging event target component handled event touchstart box touchstart container touchend box touchend container mousedown container mouseup container click container moving box handlers triggered components logging event target component handled event touchstart box touchstart container touchend box touchend container mousedown box mousedown container mouseup box mouseup container click box click container nt problem react webkit probably tested chrome ios example without react running example firefox without touch sensor emulation handlers called correct targets event model weird stuff conclusion tests ignoring mouse events probably best workaround problems threshold could lowered totally depends expensive touch handlers fast device running", "d": "8/2014"}, {"body": "implies cloning empty object afaik strictly react issue", "d": "8/2014"}, {"body": "well cloned immutable object nt quite work props none issues mention strictly react issue best practice issue ie immutable objects best practice purerendermixin react however react nt quite natively support immutable objects maybe something along lines could considered reactfuture", "d": "8/2014"}, {"body": "immutable objects advocated react simply plain objects nt mutate using immutablejs problem afaik react unless make propsobject nonplain object general issue js facility cloning objects avoid using immutablejs propsobject fine sounds like javascript iterables something implemented supported immutablejs react", "d": "8/2014"}, {"body": "nt firstclass proptypes support immutablejs way nt proptypes support backbone models immutable stuff built js please think proptypes stay way better", "d": "8/2014"}, {"body": "chenglou another note curious would imagineable turn proptypes addonmixin instead guessing could nt use would already added perhaps expose another lifecycle method core react feature sure significant fraction nt use varying preferences anyway really pushing seems natural shed things nt intrinsic core", "d": "8/2014"}, {"body": "verbose anyway likely going change", "d": "8/2014"}, {"body": "try adding css style element want click", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "strange thing trying debug used workaround componentdidmount attached native event listener thisgetdomnode element removed listener componentwillunmount without cursor pointer class ios worked perfectly", "d": "8/2014"}, {"body": "taddei yeah expected react attaches event listeners document ios nt fire click events nodes unless seem clickable ie click event listener", "d": "8/2014"}, {"body": "see", "d": "8/2014"}, {"body": "seems lots related issuesbugs browsers simply nt seem provide hook personally roll versions components need except basic text fields", "d": "8/2014"}, {"body": "works event handler reads value like", "d": "8/2014"}, {"body": "hmmm yes seems explain difference", "d": "8/2014"}, {"body": "actually works error console rerendering never triggered normal caret jump work actually need update state", "d": "8/2014"}, {"body": "caret nt jump update new value flag react react polls dom updating value prevents caret jumping polling would make much practical sense think could prohibitively expensive cases would nt want think experimentation going controlled contenteditables uncontrolled sane way afaik", "d": "8/2014"}, {"body": "ah yes answer wrong idea change shouldcomponentupdate like cursor jump user types still jumps change comes script would interesting know could done controlled way", "d": "8/2014"}, {"body": "cody updating script inherently resets cursor way browser know cursor new content need get cursor position setting restore ps also beware tons undo bugs set script", "d": "8/2014"}, {"body": "libraryframework sites examples getting started simple amen personally use webpack custom resolver avoid specify paths also use slightly tweaked uglifyjs allows mirror original linebreaks closely possible awesome production errors yeah even setting config webpack first time nt simple", "d": "8/2014"}, {"body": "reasonable starting places maybe link docs somewhere", "d": "8/2014"}, {"body": "syranide uglifyjs config available somewhere right using browerify well bitten", "d": "8/2014"}, {"body": "spicyj sounds like great idea would happy build one browserify would help", "d": "8/2014"}, {"body": "madebyherzblut beware though unless run branch uglifyjs explicitly want use broken standard", "d": "8/2014"}, {"body": "thank syranide", "d": "8/2014"}, {"body": "spicyj created boilerplate uses browserify karma testing get fast workflow looksy please use think contribute", "d": "8/2014"}, {"body": "know looking maybe interested looking", "d": "8/2014"}, {"body": "chenglou would help situation editor bit yes important atom think ability integrate react html custom elements without requiring use shadow dom seems like would help seems like idea might necessary achieve well", "d": "8/2014"}, {"body": "nathansobo clarify mean without requiring use shadow dom bit uninformed html custom elements work right", "d": "8/2014"}, {"body": "give nonfalsy value ie works", "d": "8/2014"}, {"body": "feel dumb thanks", "d": "8/2014"}, {"body": "clickable leesalminengithubio", "d": "8/2014"}, {"body": "add", "d": "8/2014"}, {"body": "thanks added", "d": "8/2014"}, {"body": "surface request scope react note however cases nt need find nodes based selector example component looks something like access dom node nt flexible enough really need reach dom jquery great solution usually nt need", "d": "8/2014"}, {"body": "ok know need get specific element set ref great solution thank aug pm ben alpert notifications githubcom wrote surface request scope react note however cases nt need find nodes based selector example component looks something like var mycomponent reactcreateclass render function return elephant zebra zebra zebra zebra access dom node thisrefsheadergetdomnode nt flexible enough really need reach dom jquery great solution usually nt need reply email directly view github", "d": "8/2014"}, {"body": "short answer time createclass called unique function gets created used determine type identity next component previous component reactrendercomponent call function type check shhouldupdatereactcomponent slightly complicated said check", "d": "8/2014"}, {"body": "oh see behavior would normal right might", "d": "8/2014"}, {"body": "today yes hold true going change bit interaction return value createclass jsx simple function call might work forever advice would wrap apis let values used apis much possible specific use case mind figuring things work", "d": "8/2014"}, {"body": "yes specific case wrapping react use altjs language since everything based react altjs language nt directly support accessing intercept creation component wrap lifecycle method function passed explicitly", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "related much possible technically nt hard however discussions far devs likely nt want officially maintain jsx nonjs language nt think either arbitrary better left community case ts syntax conflicts need solvedworked around robust solution covers vast majority languages time would perhaps make sense perhaps unlikely reality", "d": "8/2014"}, {"body": "think misunderstood nt think related asking support typescript constructs jsx indeed complicated asking changes codefunctionality typescript definition file released react related jsx would annotate types typescrip give codecompletion type checking things like reactdomxxx methods available object facebook already done immutable collections typescript definition", "d": "8/2014"}, {"body": "fwiw believe bindings could autogenerated sufficient metadata types react docs autogenerated possible variation script would need running releasecheckin keep current", "d": "8/2014"}, {"body": "oh ofc although may entire story seems next release feature requirement provide class function similar instead lot work done make react statically analyzable imagine go way improving believe far biggest issue ts today", "d": "8/2014"}, {"body": "nt actually tried using ts yet nt sure issues bitten recently poor ts bindings projects like angular since prototyping react trying raise support official bindings hope could provided versioned react honest choose use react probably would nt creatingmaintaining bindings long required data exposed parsable form though nicer everyone fb created", "d": "8/2014"}, {"body": "hey dantup typescript currently compatible react seems problem needs fixing sides fence could look project fdecampredon comment also interest love typescript also like think components like react allows way currently progressing building views components jsx stores logic ts go full typescript hope something like months away", "d": "8/2014"}, {"body": "abergs thanks info read seemed much bigger asking jsx support certainly complicated interested due poor tooling support hoped possible ts support codecompletion type checking components ideally generics stateprops could typed dealbreaker since point could still use ts rest code nice got benefits ts everywhere", "d": "8/2014"}, {"body": "dantup however issues linked much related reactts without jsx", "d": "8/2014"}, {"body": "edited another example double click box see enter animation gets destroyed change transition properties single one works fine", "d": "8/2014"}, {"body": "looks like transitionend event called multiple times making think leave animation occurred would possible either specify number events expect rely specified interval", "d": "8/2014"}, {"body": "hit well switching os x app window foreground browser window chrome safari foreground focus start seeing old dom nodes piling case animating using enter leave transition", "d": "8/2014"}, {"body": "related complicated vendorprefixes reason simply acting nt means disregarding least part intentional design decision runtime styles maximum performance one feature test browser apply styles valid perhaps fall back different layout entirely sometimes serverrendered dom would full list variations output practical adviceinsight time though", "d": "8/2014"}, {"body": "right way exactly want regular css stylusnib generate css works operate dom node nt allow specify multiple values like could syranide said featurebrowser detect specifying style value actually think something whole library could built target react users nt think react", "d": "8/2014"}, {"body": "errors comes globally defined believe", "d": "8/2014"}, {"body": "block determines dom environment block jest set jsdom well mostly jeffmo might better answer certainly sounds like react issue config issue sort reopen though", "d": "8/2014"}, {"body": "awesome thanks seems jest things manipulate jsdom submission might look extracting magic use mocha", "d": "8/2014"}, {"body": "also need polyfill browsers gets complicated think edit nvm", "d": "8/2014"}, {"body": "chenglou well lots tags nt polyfill simply output asis", "d": "8/2014"}, {"body": "pekim adding reactdom part part making sure jsx transform catches looks like already want submit pr blame", "d": "8/2014"}, {"body": "completed cla earlier today", "d": "8/2014"}, {"body": "free event handler return value something else", "d": "8/2014"}, {"body": "chenglou mean", "d": "8/2014"}, {"body": "maybe otherwise always use indicate something potential future event system", "d": "8/2014"}, {"body": "duplicate componentmethods called replaced anyway free implement whatever form class composition want create object mixins convenience suspect also deprecated part remain helper sure details", "d": "8/2014"}, {"body": "would deprecate used across everything know replacing duplicate methods yes called errors stating defined else assumed could fixed class composition", "d": "8/2014"}, {"body": "adamkyle information kind spread ways simply renamed guess idea supply class ask react create element factory currently creates class element factory means free use classes want class utility prefer", "d": "8/2014"}, {"body": "use inheritance say component mount yes oh call parent clear really want code example calls methods yes called errors stating defined else nt seen case lifecycle method restricts defined rest chained repro case would helpful discussion future mixins nt appear anything currently actionable going close", "d": "8/2014"}, {"body": "cc syranide resident event export days", "d": "8/2014"}, {"body": "haha believe seen code meant fix look tomorrow see going leoasis curious need", "d": "8/2014"}, {"body": "basically trying show contextual elements whenever focused component onblur handler root component use relatedtarget blur event element going check wether element inside root one figure actually leaving component worked around right checking clicks attaching handler document object check works clicks pressing tab wo nt work example", "d": "8/2014"}, {"body": "leoasis sounds like something couldshould solve generally reason use reported nodes event react said still fixed", "d": "8/2014"}, {"body": "actually want showhide things focused hovering think contextual dropdown menu example", "d": "8/2014"}, {"body": "leoasis whichever event fits usecase choice obviously quite certain solution reactonly solution", "d": "8/2014"}, {"body": "actually used thing bubbled root element component whenever anything inside blurred still want check next element focused still inside component", "d": "8/2014"}, {"body": "leoasis think", "d": "8/2014"}, {"body": "syranide think wo nt work case since nt want handle blur events children handling event top element inside component want events propagated one", "d": "8/2014"}, {"body": "yep choice afaik reactway would handle children propagate callback props instead anyway going look fixing either way", "d": "8/2014"}, {"body": "thanks taking look anyway think still clear need nt think react way traverse entire children adding blur focus handles see blurring component clear simplified version trying fiddle notice want able select also want disappear click tab outside example input anywhere else", "d": "8/2014"}, {"body": "zpao leoasis ok apparently always firefox provide information element focused nt seem easy fix nt imagine could solved simply keeping track last focused element suspect fragile practice would expect would probably great fix also nt really fit react meant used another interesting topic shouldwould accomplish react inherently nothing put events would make sense think could probably track focused element parent parent discovers nt focused element ca nt call would signal close batching prevent time blur focus problem think", "d": "8/2014"}, {"body": "followup previous nt tested yet imagine correct solution problems react nonreact", "d": "8/2014"}, {"body": "wrong focusin focusout events supported firefox yet", "d": "8/2014"}, {"body": "hmm says listening capture similar effect react think perhaps something use shim although persistent threat called outside react control always", "d": "8/2014"}, {"body": "seen used called create get dispatched update flux docs react website reflect often times calling dispatcher example might make asynchronous request server", "d": "8/2014"}, {"body": "hi brenton yes correct access memory reference todos one reasons purist flux implementors always return copy instead original object make original object impossible modify using immutableobject similar see fluxtodomvc fluxchat trying create simple readable explanation flux concept enough fully explain idea real world implementations definitely strive go beyond simplicity examples regarding boilerplate action creator methods like todoactionsdestroy agree boilerplate however large application kind code organization really become nice way getting things organized metioned jeffchan imagine todoactions library methods also imagine libraries equal size complicated stuff like people would break two different methods situations maintaining action type similar actions makes sense keeping one action creator method note calling handleviewaction client side update handleserveraction data coming server possibly different user see fluxchat example appdispatcher implements handleviewaction handleserveraction provide different payload sources sort complexity best kept distinct place coded haphazardly within modules especially applications grow quite large helpful see actions action creators coded structured creating new ones especially true working team engineers want people stay consistent things", "d": "8/2014"}, {"body": "bonus kudos responsive posted couple documentation questions yesterday thoroughly considered core team members within one day thanks guys fwiw take look chat example still think would helpful moved semantic actions section closer first use todoactions", "d": "8/2014"}, {"body": "process building flux documentation repo feel free keep discussing going close nt know much going actually vs flux repo", "d": "8/2014"}, {"body": "could start devonly warning concerned breaking stuff", "d": "8/2014"}, {"body": "would extremely nice especially since going make push get people use inline styles future", "d": "8/2014"}, {"body": "vjeux really tests would seem would performance nightmare", "d": "8/2014"}, {"body": "syranide certainly nice possible think tricks make performant enough zpao", "d": "8/2014"}, {"body": "got public week ago btw pull request welcomed", "d": "8/2014"}, {"body": "cc zpao spicyj", "d": "8/2014"}, {"body": "yes error tells add current solution works cases rather make things strict make better ie error consistently earlier time \u00e0 la", "d": "8/2014"}, {"body": "error earlier time already need remove smart code never able error earlier way error earlier immediate traversal dev perhaps today want even foolproof edgecases pretty sure dom detached later moved personally would prefer errors soon possible rather late possible harder error surface likely make prod", "d": "8/2014"}, {"body": "agree principle also wary causing unnecessary churn especially turns add tbody automatically future would like fine adding devonly warning call telling add tbody though", "d": "8/2014"}, {"body": "ways aware service would providing made optional invalid html breaks expectations cssrules still consider element regardless stand nt see could ever provide reliable implementation many edgecases including simply account nice idea transparently add lot less obvious going happen throw composite components mix everything starts becoming really unintuitive html lenient robust solution imagine accepting specialcase nt think broken expectations worth tables commonplace could definitely important feature tables rare nt see break standard also supereasy create customclass returns reason require tons tables", "d": "8/2014"}, {"body": "actually possible insert dom nodes like today", "d": "8/2014"}, {"body": "syranide suppose work answers question", "d": "8/2014"}, {"body": "zpao created simple proofofconcept locally works questions need clarified like want subscribe children dom node events delegate handling owner component expect dom nodes responsible inner events theirselves", "d": "8/2014"}, {"body": "hmm ca nt seem repro errors seeing internally let make sure synced nt something else play want subscribe children dom node events delegate handling owner component nt anything nodes simply making sure nt break dom node passed children think simple skipping loop somewhere", "d": "8/2014"}, {"body": "think simple skipping loop somewhere really parts code expect returned children react components need wrapping dom nodes one check implementation example", "d": "8/2014"}, {"body": "rreverser issue specifically key check reactdescriptorvalidator able specify dom node custom component something intelligent like reactdomwrapper", "d": "8/2014"}, {"body": "spicyj ah got thought want able use dom nodes children components components handle dom node occurrences children fix becomes even simple", "d": "8/2014"}, {"body": "zpao spicyj however sure better option since case syntax every need iterate check dom nodes handle differently elements always react components either real ones literals wrapped nt think would convenient wrap dom nodes like text children already owner could expect readytouse react components", "d": "8/2014"}, {"body": "kind unrelatedrelated would nt make sense move check rendering stage instead feel props simply opaque values component concern ie sending children prop instead kind template thing children rendered asis warningwise would lose information creator asis pretty sure something want change sooner later anyway keep reference creator descriptor perhaps something worth digging issue may worth keeping mind", "d": "8/2014"}, {"body": "syranide would except descriptor creation time get call stack includes actual render method", "d": "8/2014"}, {"body": "pretty sure actually correct asis fact suggestion make sure never access property specified string nt quite right although make sure never access property specified string would like pronoun means roughly something", "d": "8/2014"}, {"body": "damn seriously read sentence like times finally saw word make sense ha sorry every day bs linguistics gets little invalidated", "d": "8/2014"}, {"body": "cc zpao spicyj", "d": "8/2014"}, {"body": "thought another issue somewhere ca nt find probably going need cave ship something modifies global object better story time ship", "d": "8/2014"}, {"body": "prevents ship module exports returns whether native polyfill", "d": "8/2014"}, {"body": "whole point polyfills use syntax would supported environment otherwise need teach everybody use module change code natively supported also going start supporting native syntax transforms desugar use eg js var foo var b bar b foo bar transformed becomes var b objectassign bar", "d": "8/2014"}, {"body": "something like objectassign possible could pull calls build time things modify builtin prototypes like functionprototypebind", "d": "8/2014"}, {"body": "assume nt ship react polyfills obvioussuitable packagelibrary right", "d": "8/2014"}, {"body": "syranide need figure ship might make sense ship polyfill since still new spec changed last week control distribution little bit better would definitely change us problem looming likelynottoodistant future maps sets used bigger polyfill problem", "d": "8/2014"}, {"body": "require support nonstring indices yes would issue always fall back implementation mutates nonstring keys may acceptable injected property could made nonenumerable supported oldest browsers perhaps andriod browser cloning might issue oldest browsers imagine would possible hijack default nonenumerable method replace passthrough function one could inject property without fear plan", "d": "8/2014"}, {"body": "figure details ship", "d": "8/2014"}, {"body": "yup good catch fixed docs source", "d": "8/2014"}, {"body": "say wo nt", "d": "8/2014"}, {"body": "well prop types", "d": "8/2014"}, {"body": "spicyj right wo nt throw especially", "d": "8/2014"}, {"body": "yea comment wrong feel free update syranide p", "d": "8/2014"}, {"body": "nomouth", "d": "8/2014"}, {"body": "updated op bit clarify certain cases", "d": "8/2014"}, {"body": "could expand actual implementation wrappers noted intended usage children clonewithprops case true key would taken resulting object really child key mess magic property manipulation essentially two level deep clone refs broken partially stringowner api first class refs make easier implement shared refs however little dangerous get shared ref case since overriding properties owner might relying upon imperative hooks work general children clonewithprops api patch work tip complexity iceberg start reasoning children keys think probably better separate pipeline pass properties parents children example contextlike system implicitly passes properties parent child chain eliminate valid use cases clonewithprops reasoning children often wrapping something like map easy screw keys though restrictive api would nice", "d": "8/2014"}, {"body": "make practical sense illustrate overall behave would expect keysrefs anyway primary intention confirm uneasy feeling regarding seemed theoretically quite broken apparently nt entirely wrong seems guys thought good shall make many thanks detailed reply", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "sebmarkbage ah yes nt intuitive perhaps simply inserting children asis dom ie inside composite component simply equivalent really great examination simply trying wrap head around problem", "d": "8/2014"}, {"body": "see suspected might something understand fact could cause conflict bad javascript thispropschildren normally works nt need put keys single items nt exclusively used track identity sets fact added key check changed hazard cc spicyj", "d": "8/2014"}, {"body": "always true would cause remount changed case root key ignored behavior nt different previous key behavior", "d": "8/2014"}, {"body": "ah yes true intended used cache breaker guess already", "d": "8/2014"}, {"body": "sebmarkbage ah hmm simple case suppose keys could bound owner well like ref keys would prefixed owner guid sorts behave one would expect anyway think key really work interesting becomes seems purpose key twofold managing lifetime stateful reordering skipping mind exercises trialanderror instant feeling quite convinced creator able specify true key descriptor stateful reordering would prefixed creator guid preventing unforseen conflicts derivative descriptors append imaginary keyprefix managing lifetime unique derivate descriptors inherently statefully reordered simply rendering different order mind currently makes lot sense perhaps missing something obvious failing explain myselftoo tired think straight", "d": "8/2014"}, {"body": "original keys prefixed ownership level ensured owner taken account problem nt remember owner already taken account lifetime could collide reordering case", "d": "8/2014"}, {"body": "probably somewhat yesterday anyway stepping one step back looking problem technicaldata perspective seems straightforward unless missed something important would define simply array instances receive reference actual implementation may vary ofc anyway meat however seems really quite complicated least trouble wrapping head around index implicit key seemingly computed creator incase children filtered etc ca nt since arrayobject children cantdo nt want applyrequire immediatespecial processing children passed number ways missed something obvious immediate solution think appeals allowing filteringsortinginteraction lists children dedicated api ensuring index maintained filteringsorting requires polyfilled avoid numeric indices objects fragile way index maintained rendered solution implicit index key think rather instanceidentifying key could simply look like imagine instances stored global map thing missing definition parse intention think derivative descriptors would nt able control lifetime children would actually amount added value entirely sure nt think cool thing however instances reparentable default even using regardless instance actually renders end using descriptor would also reparentable edit forgot mention definition keys creatorinstancelocal parentlocal need cool bit think makes sense instant always something also think would interesting consider reparenting idea able keep nonrendered instances destroyed imagine able returnwrap descriptors actually mounted destroyed either perhaps always better solved visually hiding though form may make sense reparenting eg waiting reparenting target become ready maybe", "d": "8/2014"}, {"body": "always treat state like private instance variables never call except want allow components set state expose specific setter methods case simply set value dom directly setting also course use controlled components take advantage react data flow recommended takes little work initially tends much easier reason road", "d": "8/2014"}, {"body": "cc benjamn sounds like commoner problem", "d": "8/2014"}, {"body": "unclear proposing already reactserverrenderingtransaction internally makes things behave differently server rendering else thinking might differ", "d": "8/2014"}, {"body": "way serverrendering handled internally allow different nodes generated different attributes proposing exposing api able serverrendered markup potentially entirely different clientrendered markup purpose better seo ux speed suggesting general idea ie generate completely different markup serverside without affecting clientside performance scriptblock could theoretically allow button showhide contentcomponent page finished loading approach could also used seopurposes limiting size generated serverside markup personally element polyfills require work serverrendering rendering asis without clearing browsers nopartial support break seems exposing eg introducing new behavior reusing serverrendered markup correct solution eg something like reusing serverrendered markup client would first render normally using immediately afterwards would render instead dom generated server reused much possible also enabling serverclient generate tailored markup", "d": "8/2014"}, {"body": "guess recommended way future", "d": "8/2014"}, {"body": "oh right reactdom overloads user overloads would useful agreed export underlying tag name eg", "d": "8/2014"}, {"body": "recommend use jsxtransformer serious development use tool instead anyway wrong although imagine best solution would override event instead possible might require special code jsxtransformer used otherwise seems like event added yep", "d": "8/2014"}, {"body": "let move discussion", "d": "8/2014"}, {"body": "saying wrong think reallife scenarios become close immeasurable performance lookups minimal scale things compression eliminate cost wordiness think little pressure improve imagine someone else put time implement would greatly appreciated", "d": "8/2014"}, {"body": "willing bet large sum money important things optimize elsewhere code react optimizing object lookups reactdom jsx complication may change future talked maybe assigning local variables maybe dropping reactdom entirely forcing import explicitly going put effort right maybe recast nt think anybody spend time right going close", "d": "8/2014"}, {"body": "likely canvas transparent default transparency ff propensity catch events pass element", "d": "8/2014"}, {"body": "sorry late response syranide follow eod tomorrow", "d": "8/2014"}, {"body": "adding css background effect filling canvas color also couple experiments changing css property canvas avail", "d": "8/2014"}, {"body": "get commoner gets issue open", "d": "8/2014"}, {"body": "little tricky example editor nt render div instead renders span tag dom react replacechild luck maybe throws error planning something similar though render call order get dom node put wherever want guessing would solve problem requires changes events system though likely happen immediately close issue favor one let know missing something nt think help get rid extra wrapper div perhaps could consistently render editorwrapper component rendering react shim layer render editor inside div make sorry nt better suggestion", "d": "8/2014"}, {"body": "curious add constraint root component must fixed root dom component type must export type static variable yuck easy shortterm solution seems like require minor tweaks get temporary solution inplace comes around super familiar affected code ca nt guarantee simple sound like acceptable workaround", "d": "8/2014"}, {"body": "spicyj love everything proposed api think really streamline integration react heterogenous environments also make easier support packages written different versions react allowing parent component integrate manually dom syranide would totally fine workaround component currently need editor always", "d": "8/2014"}, {"body": "nt even need synthetic event support currently bind everything manually", "d": "8/2014"}, {"body": "made possible fix though unsure well like", "d": "8/2014"}, {"body": "suggested solution one handle example responding enter key search field pretty standard behaviour imho", "d": "8/2014"}, {"body": "talgiat fix master enter affected ff", "d": "8/2014"}, {"body": "thanks also forgot always use key work properly support nonprintable keys", "d": "8/2014"}, {"body": "better yet arguably probably correct approach probably interested chars specific keys pressed", "d": "8/2014"}, {"body": "believe use case onkeyup makes sense since nt want submit many search requests user hold enter key seconds", "d": "8/2014"}, {"body": "bjbrewster close intended behaviour maybe document working new lowlevel transitiongroup prototype actually uses original children refs work achievable guarantee though prototype api might change", "d": "8/2014"}, {"body": "thanks chenglou seems might lot changes around refs would help well", "d": "8/2014"}, {"body": "running issue inconsistently reproduction consistently app well", "d": "8/2014"}, {"body": "introduced huge leak app cleaning react views inside backbone legacy views checking view bad reading breaking changes would handy way validate instance", "d": "8/2014"}, {"body": "rreverser really interested nt mind think slightly practical still could encourage wrong behavior think", "d": "8/2014"}, {"body": "zpao well going combine functionality single placefile nt make much sense add api changes misunderstand", "d": "8/2014"}, {"body": "think combining might end bit convergence things overlap lot slight api differences big difference jsxtransformer finds script tags considering smoothing api differences jsxtransformer browserify override new functionality add jsxtransformer would turn make new place", "d": "8/2014"}, {"body": "release notes updated nt going revert likely go away point", "d": "8/2014"}, {"body": "like access", "d": "8/2014"}, {"body": "unlikely ever expose reacttransitionevents public api thin wrapper around browser events used reactcsstransitiongroup widely essentially nt want commit supporting module", "d": "8/2014"}, {"body": "makes perfect sense course seems unnecessary duplicate functionality like already", "d": "8/2014"}, {"body": "random note thought inline styles override important wrong", "d": "8/2014"}, {"body": "vjeux going leave think probably maintain status quo support may valid uses somewhere", "d": "8/2014"}, {"body": "zpao support though nt support updating style", "d": "8/2014"}, {"body": "support see mean like saying support hyphenated styles", "d": "8/2014"}, {"body": "going eventually stop going go couple releases nice people warn", "d": "8/2014"}, {"body": "understand potentially destructive change completely removed however would nt boolean flag denotes authors wish unitless values appropriate way current functionality default author specify otherwise needs", "d": "8/2014"}, {"body": "nah think like avoid configs much possible seen lot people nt even know react insert px confused nt think confusing people say pass values even sure make boolean flag without affecting components page interested hear ideas think likely need remain librarywide decision", "d": "8/2014"}, {"body": "zpao nt best handled whatever way decide handle style user vendor prefixing etc seems like falls exact category another user callback nothing user wrap style function call kind percomponent callback style domprops general", "d": "8/2014"}, {"body": "kind late nt straightforward nt looking mount node node unmounted nt root id done something wrong", "d": "8/2014"}, {"body": "syranide yeah think want throw argument noncontainer nonempty react root node", "d": "8/2014"}, {"body": "well point want look container pointed argument children nt reactnode everything good react node must root node error", "d": "8/2014"}, {"body": "syranide ah ok agree would error nt slightly general warning described eg conditions listed could pass nonroot react node container still might qualify thought specifically looking common case accidentally pass actual component ie root node rather container", "d": "8/2014"}, {"body": "unless mistaken error makes sense html", "d": "8/2014"}, {"body": "syranide agree cases definitely lot experience could confused referring html case would nt want warning passing root node even though argument passed container contains nonroot react node right", "d": "8/2014"}, {"body": "perhaps misunderstanding seems example equal mine deeper hierarchy node valid mount even react id child important child nt react root ie error react root reused", "d": "8/2014"}, {"body": "syranide ahh got thanks explaining indeed actual errors still wonder want specific warning pass react root node particular seems like error describing would happen frequently caller confusion react root node vs container rootnodespecific warning would useful cc spicyj regardless warning general case useful probably right first step", "d": "8/2014"}, {"body": "removing element array use splice could remove property object using immutable helpers want remove particular key", "d": "8/2014"}, {"body": "spicyj react warns list elements also still tries best handle identity element list key provided ca nt done animations would best solution warn keys nt present child elements also generate key one nt provided handle animation", "d": "8/2014"}, {"body": "nschaubeck clear reacttransitiongroup unmount remount child key changes means change contents child without changing key wo nt animate keys omitted react assigns sequential increasing keys elements meaning single unkeyed child effectively key switching children one child still get animation even nt specify key usually providing key want might nice give warning", "d": "8/2014"}, {"body": "went fixed thanks reporting", "d": "8/2014"}, {"body": "yo petehunt change", "d": "8/2014"}, {"body": "left comments diff petehunt busy time", "d": "8/2014"}, {"body": "would love see land either implementation would fine using attribute using", "d": "8/2014"}, {"body": "travis nt currently allow start job immediately quite ie list files changed latest commit nt contain real code sure helps much though two options require changes tooling could add skip ci commit messages doconly commits split code docs different branches use travis branch feature", "d": "8/2014"}, {"body": "yea know travis nt allow natively yet bit remember tough tell people submitting prs ca nt even remember thinking script looked diff range got modified paths nt src vendor exit early otherwise continue would nt really run certain changes would quick noop sounds like thinking check range latest commit think would really helpful trying avoid splitting code away docs argue die lot value keeping close possible option though thanks bringing", "d": "8/2014"}, {"body": "sounds like thinking yeah pretty much idea however task still created queued still use pool quota release faster check range latest commit think would really helpful yes actually somewhere one pet projects let check send pr fix fine go proposed solution", "d": "8/2014"}, {"body": "yea think would awesome", "d": "8/2014"}, {"body": "zpao fixed please check tested fork different combinations seems work", "d": "8/2014"}, {"body": "also seems particular case", "d": "8/2014"}, {"body": "hah knew filed already point one", "d": "8/2014"}, {"body": "confirmation reactdomiframe component nt fire onload event", "d": "8/2014"}, {"body": "relevant", "d": "8/2014"}, {"body": "fixed", "d": "8/2014"}, {"body": "created simple dropin initially created nodejs included browser usage well since uses official features overrides default stack trace format pretty much builtin one code taken sources difference respects function property course nt completely solve original issue easily used users react working code development mode", "d": "8/2014"}, {"body": "still relevant", "d": "8/2014"}, {"body": "revamp soon", "d": "8/2014"}, {"body": "fixed facebookesprima slightly different way treating without following entity asis similar syranide proposal", "d": "8/2014"}, {"body": "faced similar issue peculiarity think shared leave btw point sure lack attention part faq somewhere came conclusion checksum made entire content container component code spaces container tag component tag considered trying crazy stuff code text replacement take consideration", "d": "8/2014"}, {"body": "sillero fyi actually happening server client server stores checksum client uses ensure server client rendered identical dom whitespace around inserted serverrendered html affect checksum however leading node kind including whitespace react currently look determine ca nt reused see", "d": "8/2014"}, {"body": "requests support image", "d": "8/2014"}, {"body": "image support", "d": "8/2014"}, {"body": "image support well", "d": "8/2014"}, {"body": "support using svg icon set trying make work however event bubbling nt work", "d": "8/2014"}, {"body": "missing strokedashoffset want use progress bar like", "d": "8/2014"}, {"body": "behaviour first one uncommented second one commented still error", "d": "8/2014"}, {"body": "think component got mocked got return react treats indication placing emptycomponent returns case", "d": "8/2014"}, {"body": "related", "d": "8/2014"}, {"body": "need unify testing toolchain consider composite native components differently fragment support would essentially become sure actually reactdominput way compare function equality think probably become strings instead composite version would hidden behind string representation becomes tricky cases internals exposed automatically drills might drill string base descriptor composite likely try avoid style deep testing move towards shallow testing output single level", "d": "8/2014"}, {"body": "addressed", "d": "8/2014"}, {"body": "communicating best practices pretty important one biggest wins react js frameworks effectively flaskdjangorails js render initial markup server maintain seo load feel snappy underpowered user agents pretty excited see reactpage react organization deprecated recommended alternative", "d": "8/2014"}, {"body": "reactpage supported one time maintain adds decent bit live reloading tech etc built react either nt need build even hard webpack reactrendercomponenttostring supported server rendering plans deprecate server rendering important feature react", "d": "8/2014"}, {"body": "expected future work fine close issue", "d": "8/2014"}, {"body": "like say input refs field names return backend match wo nt write lines following work coffeescript sample though thanks issue learnt defaultvalue used", "d": "8/2014"}, {"body": "sebmarkbage different", "d": "8/2014"}, {"body": "also running thing demo practice means markdown editor nt making things appear nonlinks become invalid ca nt comment implementation html properties vs attributes yuck surprising user probably leave let confusing behaviour nt acceptable working around would bit painful key tag becomes remounted small vote fixing", "d": "8/2014"}, {"body": "decided swap element toggling presence attribute nt possible atm", "d": "8/2014"}, {"body": "pr seems rather safe perhaps need add test propertyonly properties nag sebmarkbage bit might consider", "d": "8/2014"}, {"body": "aetet check close animation draft still long work progress even lands far future react probably naturally support like supports eg jquery right thanks heads", "d": "8/2014"}, {"body": "spicyj zpao probably closed", "d": "8/2014"}, {"body": "thumbsup thanks triaging", "d": "8/2014"}, {"body": "spicyj zpao fix landed time ago", "d": "8/2014"}, {"body": "closing favor solves problem actually concrete api proposal attached", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "btw obviously use webpacklike bundler js getscrollyjs use strict var reactbrowsereventemitter require reactlibreactbrowsereventemitter viewportmetrics require reactlibviewportmetrics reactbrowsereventemitterensurescrollvaluemonitoring viewportmetricsrefreshscrollvalues function getscrolly return viewportmetricscurrentscrolltop moduleexports getscrolly", "d": "8/2014"}, {"body": "well used possibly old browsers able disable browsers everyone happy right could still optimized slightly anyone cares also makes sense take argument yet get scroll position provide argument instead gets scroll position internally uses call twice use result also broken events inside iframes pretty sure browsers supports touch also supports cc spicyj", "d": "8/2014"}, {"body": "agree nt tracking browsers nt need nt know way predict whether pagex pagey mouse events actually come", "d": "8/2014"}, {"body": "spicyj", "d": "8/2014"}, {"body": "another idea let resizescroll set flag mouse event created flag set update viewport metrics way update needed could potentially cause reflow events unlikely though imagine", "d": "8/2014"}, {"body": "hello also encountered warning trying access looved link gist directly console detailed explanation makes coding really enjoyable js var parent reactcreateclass componentdidmount function thispropsachildismounted thispropsachildrefsdosomethinggetdomnode focus render function return thispropsachild var child reactcreateclass handlefocus function start managing stuff render function return reactrendercomponent parent achild child documentbody yes want manage component charge going decide parent pass control child mainly convenience contained component understand would wait child mounted properly access right ca nt think better way kind house keeping maintain contained component thoughts", "d": "8/2014"}, {"body": "welp bugfree apparently lol", "d": "8/2014"}, {"body": "fuck", "d": "8/2014"}, {"body": "going go ahead declare months inactivity means going getting worked native support nt appear care much", "d": "8/2014"}, {"body": "sebmarkbage move even away prototypes think ever also inclined wontfix says months later", "d": "8/2014"}, {"body": "unfortunately react may need work environments objectprototype might mutated means objects would get extra property builtins language like move towards using hasownproperty checks everything also classes provide enumerable methods also otherwise picked designed around hasownproperty checks wish nt case wish prototype chains could work well js introduce objectprototype explicitly expose reflective apis prototype chains like hasownproperty objectkeys objectgetprototypeof etc battle lost believe kind optimizations prototype chains provide possible vm engine much larger issue withcontext unfortunately ca nt support btw withcontext api almost certainly going away use getchildcontext instead", "d": "8/2014"}, {"body": "moved esprima", "d": "8/2014"}, {"body": "fyi facebookesprima pr", "d": "8/2014"}, {"body": "still plans anytime soon think probably want complete revamp reconsider docs maybe timeframe", "d": "8/2014"}, {"body": "wanted willing throw something together graphviz something simple get documented outline happens actually start happens cycles end blacklisted functions method ones actually blacklisted others probably questions", "d": "8/2014"}, {"body": "azich drew lifecycle diagram", "d": "8/2014"}, {"body": "spicyj worked well", "d": "8/2014"}, {"body": "filed dupe", "d": "8/2014"}, {"body": "going released", "d": "8/2014"}, {"body": "call crazy left field idea could transformer builds npm module create complete copies react one dev one production normal version react could look swap module returned way server get performance hit", "d": "8/2014"}, {"body": "crazy bit annoying build process though love know happening larger scale node community seems like nt first people encounter larger scale couple set main module leave code everywhere else obvious bad behavior setting globals could variants set already set change something unique build time set switch webpack building browser bundles solution super easy sure way browserify another idea modules memoizes sounding like something node code plievone linked uses objecttemplate understand bit right nt caching values change would still lookup cost would property access getter call get current environment variables one trickier would mean code wo nt internally prefer different solution even hacky using react nothing could something like plievone mentioned started shipping browerified bundles npm package end giving bundles nt access", "d": "8/2014"}, {"body": "landed close anything needs done", "d": "8/2014"}, {"body": "think hoping external file support", "d": "8/2014"}, {"body": "hey cyrusnajmabadi thank feedback fdecampredon working fork ts compiler although think wanted wait tsdevelopment stabilized things ts problematic used together react example deep dive codeplex issue actually seems resolved", "d": "8/2014"}, {"body": "exactly react team consensus kevinwolf second point defining standard realize probably lot finalizing api include method bundling ancillary assets stylesheets images audio etc component standard way build tool grunt gulp etc process ask nt appear mention asset handling wiki", "d": "8/2014"}, {"body": "willdady consensus yet like rcss think make closer acceptable solution general population still waiting petehunt open source webpack stuff", "d": "8/2014"}, {"body": "spicyj may answer matthewwithanm since ran issue still serverside rendered pages would like open inside modal dialog made dialog component gets url via props componentdidmount fetches html server renders inside dialog using dangerouslysetinnerhtml quite surprised found code inside tag also fetched html executed", "d": "8/2014"}, {"body": "marten another name exposed browsers execute using believe jquery code explicitly goes evals code inside expecting", "d": "8/2014"}, {"body": "syranide guess spoiled jquery never realized already implemented behaviour layer converted actual react components anyway workaround disappear code point big deal surprised guess lack knowledge part", "d": "8/2014"}, {"body": "meh", "d": "8/2014"}, {"body": "reading pretty much everything related issue think would good idea add little note tutorial code snippet jquery inclusion think place really needs think finally close issue", "d": "8/2014"}, {"body": "agreed beginner tutorial nt place debate jquery vs jquery point familiarity", "d": "8/2014"}, {"body": "worth removed use jquery reactjsnet version tutorial", "d": "8/2014"}, {"body": "note jquery mandatory got merged think good newcomers react users probably already realized nt actually need jquery closing", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "syranide refs could take look better ways handle problem recently implemented custom select component solution came opening closing dropdown", "d": "8/2014"}, {"body": "syranide really bruteforced approach feels really wrong general kind thing", "d": "8/2014"}, {"body": "hojberg nt create mixin", "d": "8/2014"}, {"body": "use mouse touch events separately keeping otherwise forward thinking react framework pointer events future status issue", "d": "8/2014"}, {"body": "actually pointerevents pointergestures polyfills deprecated recently favor believe problem shadow dom using anyway", "d": "8/2014"}, {"body": "hapilly using pointerevents helper component", "d": "8/2014"}, {"body": "steida nt care development polymer though afaik pointerevents still tr", "d": "8/2014"}, {"body": "zoomclub shout want happen faster", "d": "8/2014"}, {"body": "fwiw pointerevents seem falling favor browser devs", "d": "8/2014"}, {"body": "iamdustan interesting seems weird nothing replace", "d": "8/2014"}, {"body": "syranide agreed seems like browser engineers experimenting like front end engineers sure read entirety document seemed make mention possibility good parts pointer events someday migrating touch events", "d": "8/2014"}, {"body": "iamdustan finished reading interesting stuff takeaway though discussion nt primarily shortcomings pointerevents whether browsers really provide sugar even end abandoning may still make sense provide way react demand real naturally leads idea plugging event sugar could never benefit thirdparty components feel many including would afraid commit one community event sugar tend abandoned daily basis interesting alternative perhaps reading discussion one could specify event emulation modes per domnode ie would emulate mouseevents touchevents probably flaws nt thought possible everyone could benefit hopefully would nt big strain react see goes", "d": "8/2014"}, {"body": "yungsters progress", "d": "8/2014"}, {"body": "closest thing available", "d": "8/2014"}, {"body": "thanks petehunt add found discussion reactbootstrap models tooltips interesting", "d": "8/2014"}, {"body": "react bootstrap implementation well", "d": "8/2014"}, {"body": "hey company work currently process complete frontend overhaul using reactjs even flux dispatchers trying move away jquery based overlay plugins popups currently using reactbootstrap implement tour super curious know else might even high level specification would super helpful specifically lot trouble figuring okay start positioningmanipulating overlay nodes esp ca nt use ref system dom nodes returned also trying figure best deal various problems zindexing stacking contexts thanks", "d": "8/2014"}, {"body": "hey created reactlayers based learnings working reactbootstrap reworked reflect api discussed follows react api result layer node mounted removed helps zindex issues last layer show always last child container feedback would greatly appreciated especially around api learnings fb ig implementations brainkim added basic examples next couple days plan adding example showing positioningmanipulating maybe tooltips draggable popup", "d": "8/2014"}, {"body": "pieterv great take look get back", "d": "8/2014"}, {"body": "going close really problem esprima nt really made movement months maybe creating new issue bring attention", "d": "8/2014"}, {"body": "nt generally tricky case unclosed multiline strings whatever comes next valid regardless much looks like code everything technically valid point closing tag input case kicks nt accept statements technically nt even unenclosed input issue case spicyj said rather erroring orphaned sounds like best solution", "d": "8/2014"}, {"body": "maybe would useful consider flux storelike solution like kind store wraps windowlevel events emits synthetic events components could subscribe unsubscribe see fit javascript onwindowresize function event whatever want response resize event componentdidmount function thissubscription reacteventssubscribe reacteventsconstantswindowresize thisonwindowresize componentwillunmount function thissubscriptionremove", "d": "8/2014"}, {"body": "salier ever make work know lot happened area since time last year", "d": "8/2014"}, {"body": "requesting objective controlled contenteditable component makes use event use native contenteditable behavior uncontrolled component latter sufficient use case modern browsers inclined agree masklinn though joshduck notes work may need done get better legacy browser support", "d": "8/2014"}, {"body": "update docset use dash", "d": "8/2014"}, {"body": "agirton mazubieta ready put something tomorrow edit react docset dash", "d": "8/2014"}, {"body": "thanks chenglou", "d": "8/2014"}, {"body": "awesome thank", "d": "8/2014"}, {"body": "point going close obviously nt making specific effort around may end going back autobinding move towards real classes", "d": "8/2014"}, {"body": "also issue interop react custom elements something like property allowed passing arbitrary properties diffing simple strings seems like would work well", "d": "8/2014"}, {"body": "ran problem well calling assumed would updated call seems bit ridiculous manually track actual state order able correctly call really making worry often state actually correct batch state updates behind scenes rendering sure nt make keep track state uptodate please fix edit get around case placing call callback cases callback workaround nt simple clean still seems counterintuitive", "d": "8/2014"}, {"body": "also currently issue really sure refers agree ideally refer latest state regardless whether visible ui", "d": "8/2014"}, {"body": "edit also check douglas answer stackoverflow question may enough solve problems without workaround nambrot looking quick fix ended creating utility function wraps creates separate version state always uptodate change calls replace calls super optimal unfortunately getting errors trying direct swap new function also lose generated property using jsx transform define want correct tag names show react tools disclaimer nt super well tested let know problems", "d": "8/2014"}, {"body": "ran problem azoerb", "d": "8/2014"}, {"body": "actually hoping something would actually lint raw jsx part coding process jsx compiler obviously catches almost everything specific line numbers easy fix typos compile attempt sucks run compiler find syntax errors static analysis would reveal simply ignoring sections code nt fix problem static analysis formal definition jsx syntax like language report anywhere could used guide true static parserlinter linting jsx transform crowd nt care whether compiled machine code altjs conforms arbitrary standard best style", "d": "8/2014"}, {"body": "related", "d": "8/2014"}]