[{"title": "weird behaviour collectionwithout", "body": "hi noticed weird behaviour method collections following code collections containing territory objects territories reject come pool territories matching contains regular array containing territory objects one filtered would expect get territories minus ones reject achieve goal write big deal would glad know help fixing expected behaviour", "num": "832", "d": "12/2011"}, {"title": "callback vs event handler priority", "body": "reasoning event handlers getting priority passed callback taken destroy method optionssuccess function resp modeltrigger destroy model modelcollection options success success model resp callback provided object making call first place seems natural would get first rights act result event handlers would handled second", "num": "830", "d": "12/2011"}, {"title": "document callback signature", "body": "official backbone documentation lacks signature function callbacks example eventbind modelset modelsave etc", "num": "829", "d": "12/2011"}, {"title": "backboneview remove call undelegateevents", "body": "seems like might lingering delegated event listeners otherwise", "num": "828", "d": "12/2011"}, {"title": "ie object nt accept property method line", "body": "testing backbone application use backbone coffeescript requirejs chrome application run without problem ie give error lin javascript wrap optional error callback fallback error event var wraperror function onerror model options return function model resp var resp model model resp model onerror onerror model resp options else modeltrigger error model resp options", "num": "827", "d": "12/2011"}, {"title": "make wraperror public overridable", "body": "unfortunately private method instead overridable method eg important bottleneck part public api also addresses jashkenas says override rather correct question override extra level wrapping error handler want override really let address common issues rather simply closing perfunctory remark", "num": "826", "d": "12/2011"}, {"title": "events default actions", "body": "backbone designed build singlepage apps nt default actions linksforms within views automatically prevented even though links nt required noticed browsers mishandling focus missing hence see common practice problem though force page scroll top unless explicitly prevented anyone else find unnecessary calls annoying simple solution overlooking", "num": "825", "d": "12/2011"}, {"title": "special view property documented", "body": "documentation several special options passed attached directly view model collection el id classname tagname sentence missing also would nice explanation purpose", "num": "823", "d": "12/2011"}, {"title": "nowhere defined used annotation", "body": "annotated notes constructor function new subclass either defined constructor property extend definition defaulted us simply call super however see nowhere defined", "num": "822", "d": "12/2011"}, {"title": "idattribute documented", "body": "source backbonejs website noted", "num": "819", "d": "12/2011"}, {"title": "backbone failed load underscore dependency", "body": "sure quite solves problem loading backbone without getting errors found line backbone source states like amp amp typeof require undefined require underscore code produced error console undefined break error extend backbonemodelprototype backboneevents tried removing solves problem amp amp typeof require undefined require underscore sure works though gets rid error", "num": "818", "d": "12/2011"}, {"title": "nt views property default", "body": "say backbone views almost convention code seems de facto convention views keep track model using property formalize way etc acting placeholders", "num": "817", "d": "12/2011"}, {"title": "request collection save destroy", "body": "would nice call fetch collection model may also call save destroy collection well currently may collectionfetch server respond array models calling save collection send array models save server backbone send array post separate array put models id calling destroy collection send array ids delete system would unify crud model collection calls choice perform operations entire collection individual model make easier back end logic user could always expect arrays save destroy operations savedelete model would send array model instead single object needs separate logic iterated createupdate modelsave postput collection collectionsave postput collection read modelfetch get collectionarrayids collectionfetch get collectionarrayids delete modeldestroy delete collectionarrayids collectiondestroy delete collectionarrayids therefore createupdate save simply sends array objects regardless saving model collection model sends one object array particular object url always remains collection however readdelete operations could send array ids url regardless model collection keeping back end logic consistent", "num": "816", "d": "12/2011"}, {"title": "collections initialize passed models collection got initialized", "body": "want suggest slight change instead like suggest tests still passing otherwise passed models get initialized collection gets initialized specific problem pass parent collection option parent get destroyed children get destroyed well could put logic models parent without belonging collection relation need put logic achieve bind model parent destroy event case parent present method returns model initialization model collection initialization problem collection nt parent funny initialized would like initialize passed models collection got initialized reason keep way right", "num": "814", "d": "12/2011"}, {"title": "allow decoratorswrapper function view event handlers", "body": "heyo thoughts view optional wrapper function event handlers example would report errors unexpected errors handler var view backboneviewextend event decorator take event handler function first argument arguments rest eventdecorator function var func arguments var args arrayprototypeslice arguments try fapply args catch e reporterror e imo main benefit would allowing easy toplevel error handling js tasks kicked dom events report server show uhoh message whatever generally sorespot javascript apps requires wrapping every callback function manually people nt since backbone events bound delegateevents nice place catch surgical addition clearly accomplished manually would allow cutting lot unneeded boilerplate yall think", "num": "812", "d": "12/2011"}, {"title": "pushstate multiple roots", "body": "existing backbone app multiple routers want turn pushstate allows single global root really need independent roots router example let say searchrouter route query without pushstate would access like search foo also categoriesrouter route categoryid would access like categories pushstate enabled would become searchfoo initially tried setting root search searchrouter worked fine categoriesrouter obviously looks like knob turn make search categories part respective routes fairly drastic though changes semantics fragments break existing bookmarks best solution would make sense add optional prefix router would concatenated root frag backbonehistorynavigate", "num": "810", "d": "12/2011"}, {"title": "pushstate router unnecessarily breaks hash fragment links", "body": "although understand history behind backbone router sure scenarios desirable automatically fall back hash fragment based urls pushstate support current implementation unexpected inconsistent normal web app supposed behave using backbonejs progressively enhance page current form everything functional without javascript purpose backbone router reroute certain actions ajax requests rather page transitions fine targeting modern browsers pushstate support old browsers load page without ajax mobile app anyway however several hashbased fragment links page good example link top bottom list search results without backbone charge browser history works fine soon turn backbone router things fall apart subtle ways link top still works triggering route called top top router way refresh page like router reinterprets time trigger route called top brings app inconsistent state user refreshes page bookmarks url sends friend results error read comments kind holding wrong response believe case backbone router operates real urls consistent way supposed work without javascript nt probably several solutions easiest one would allow developers opt inout pushstate hashchange separately redirect top top default", "num": "803", "d": "12/2011"}, {"title": "issue resolved", "body": "", "num": "800", "d": "12/2011"}, {"title": "pushstate difference iframe chrome ff", "body": "noticed difference ability use pushstate feature backbonehistory running application inside facebook means running inside iframe application running firefox browser back button works correctly given history navigate function adds windowhistorypushstate however application runs chrome browser back button respond history navigate function adds windowhistorypushstate issue manifest running standalone application outside iframe issue seen using safari guessing webkit browser issue question browser bug way use backbone history get correct correct back button response webkit browsers application running iframe thanks cmaxo", "num": "799", "d": "12/2011"}, {"title": "find help understanding backbone experienced", "body": "hi guys sorry question sick finding help basic question backbonejs docs abstract understand one throw light strategy binding different views listening model collections specific want automate rendering element change model collection", "num": "798", "d": "12/2011"}, {"title": "make router always trigger action even path", "body": "right router nt trigger action path even use navigate triggerroute true causes troubles cases especially testspecs change behavior make always trigger action technically simple need comment line code", "num": "797", "d": "12/2011"}, {"title": "hasownproperty loops", "body": "think sake best practices use hasownproperty check loop looping thought routes events affect prototype properties", "num": "796", "d": "12/2011"}, {"title": "stack overflow saving backbonejs model", "body": "simple backbonejs model told simple anyhow saving following view snipped clarity class aviastudentview extends backboneview render gt html jstviewsstudentviewtemplate elhtml html backbonemodelbindingbind save bind click save save e gt epreventdefault modelsave success gt error gt click save button called fails following error snipped clarity obviously continues long time tried commenting ensured unique renaming changing associated bindings match also tried using latest github still problem persists also asked question stackoverflow initially suspected pebkac part still sure nt", "num": "795", "d": "12/2011"}, {"title": "bindtomodel view property", "body": "often pattern form someview backboneviewextend initialize function thismodelbind thismodelbind onclose called viewremove remove function thismodelunbind thismodelunbind think really great make two special attributes bind events called events unbind dom removal think save lot code bugs related model event bindingunbinding also make backbone even awesome agree api happy provide implementation since several minor prototypes", "num": "794", "d": "12/2011"}, {"title": "supporting polymorphic collections", "body": "howdy right backbone seems support collections one type working stream many polymorphic types quack nice implement via inheritance extend rather current technique creating proxiesmixins base class backbone collection seems hardcoded new thismodel thinking something like thismodel thismodel thismodelclass change would like implemented opposed ideological reason want implemented help couple projects working", "num": "793", "d": "12/2011"}, {"title": "jquery error indexhtml affects", "body": "believe following line allows examples run without change run button display", "num": "792", "d": "12/2011"}, {"title": "modeldestroy passing id params", "body": "emulatejson emulatehttp apply fix ensure appropriate request data paramsdata amp amp model amp amp method create method update method delete paramscontenttype applicationjson paramsdata jsonstringify modeltojson added method delete otherwise params sent delete call could streamlined include id", "num": "789", "d": "12/2011"}, {"title": "add array models collection using index adds reverse order", "body": "adding array models collection using index adds array reverse order runs array added calling build add function nt increment index element added index essentially putting array collection backwards", "num": "788", "d": "12/2011"}, {"title": "routernavigate triggers route function even triggerroute set false", "body": "calling routernavigate triggerroute argument set false default expect hash change route function triggered however case tested chrome beta running ubuntu well running windows xp issue demonstrated jsfiddle", "num": "786", "d": "12/2011"}, {"title": "unable call superinitialize", "body": "new backbone could missing something something like var childclass baseclassextend initialize function backbonemodelprototypeinitializecall alert child init see parent init nt maybe going wrong coding day forgive ca nt call superinitialize way", "num": "785", "d": "12/2011"}, {"title": "infinite recursion save collection element", "body": "backbone model along corresponding router view router instantiate new collection corresponding view followed fetch call far good attempt save element collection get stack overflow error though coffeescript appviewsts class appviewststview extends backboneview save e epreventdefault estoppropagation ends following endless recursion model collection tested using last release version bjs well master ideas", "num": "784", "d": "12/2011"}, {"title": "unexpected event triggering model multiple collections", "body": "javascript mymodel backbonemodelextend mycollection backbonecollectionextend model mymodel myapp backboneviewextend initialize function new mycollection new mycollection add thisadd var mymodel new mymodel mymodel mymodel add function consolelog model added var app new myapp output model added model added sure collection gets bound result one would expect", "num": "780", "d": "12/2011"}, {"title": "specific bug jqueryui resizestop firing", "body": "bug happens jquery helper backbone events fiddle event fires fine without helper jquery without backbone also posted", "num": "779", "d": "12/2011"}, {"title": "requirejs support", "body": "underscorejs backbone pretty wanted keep changes minimum think", "num": "777", "d": "12/2011"}, {"title": "handle friendly url id", "body": "would go allowing backbonemodel fetch update opposed prefer avoid passing mycoolwidget backbonemodel id property introduces number inconsistencies example user changes url updated clientside ideas", "num": "776", "d": "12/2011"}, {"title": "collection reset", "body": "using suggested method loading data models backend prevent fetching data server twice page load like javascript collectionreset lt accountstojson gt issue models rendered php views code adds models collection therefore views rendering happening collectionreset called however view model rendered collectionadd called click events click events obviously called already rendered html backbonejs nt render views way taking already rendered html tags bind views click events work tags cheers", "num": "774", "d": "12/2011"}, {"title": "proposal modularizing backbone", "body": "problem project expands keeping source code within one file become much problematic complexity code become issue without modularizing part framework models views collections etc easily effects wish use part framework example developer may wish use models part framework views since may necessary possible solution propose modularize component framework meaning one module models another views would different files follow convention something like backbonemodelsjs backboneviewsjs possible solution pros benefits would improve organization increase modularity quick referencing long term help increase involvement community would easy find quickly diagnose issues would also allow community choose need need custom build processes could go along proposal possible solution cons hand could problem would probably make bit complex learned source code right would also need depth testing module relate tests could become complex custom build processes well summary currently framework exists within one file modular giving community flexibility easily implement need propose modularize framework allow supporters use want want giving framework structure organization believe effort would certainly help community involvement overall advancement framework", "num": "770", "d": "12/2011"}, {"body": "oops learning use pull requests issues properly ignore issue look", "d": "12/2011"}, {"body": "sephichan expects array tried", "d": "12/2011"}, {"body": "yep pass array", "d": "12/2011"}, {"body": "okay thanks", "d": "12/2011"}, {"body": "afraid event callback nt quite thing former notifies listeners model destroyed latter callback indicates operation including handlers finished successfully certainly would nt want callback fire one handlers raised exception", "d": "12/2011"}, {"body": "oh ok misunderstood intent callbacks thought purpose abstract sync call wrap entire life operation might good clarify docs thanks quick answer", "d": "12/2011"}, {"body": "patch welcome", "d": "12/2011"}, {"body": "brought dom library remove events come test case illustrates problem please reopen said test case", "d": "12/2011"}, {"body": "gotcha remove dom library probably shouldcould looked zepto remove function simple dom avoid event dependency believe remove function return thiseach function thisparentnode null thisparentnoderemovechild dunno feel like could go either way extent nt really think dom remove remove clear events since true backboneview constructor calls delegateevents feel like backboneviewprototyperemove ought undelegateevents", "d": "12/2011"}, {"body": "tbranyen incorrect dom element removed events also removed nothing dom library choice simply dom works manually undelegating internal events would effect slowing code", "d": "12/2011"}, {"body": "jashkenas jquery specifically removes events call remove using jquery bind events delegateevents remove call specifically method speak zepto ender", "d": "12/2011"}, {"body": "jashkenas dom element removed events also removed nothing dom library choice simply dom works small test show events handlers persisted element removed document zepto remove closer jquery detach ender starter pack uses bonzo remove clears data nt remove event handlers data associated", "d": "12/2011"}, {"body": "since backbone officially supports zepto ender maybe explicitly calling undelegateevents nt realize removes kept events", "d": "12/2011"}, {"body": "calling maintain reference element maintain reference element nothing surprising stop pointing element element events gc jdalton example pedantically correct always entirely beside point", "d": "12/2011"}, {"body": "jashkenas stop pointing element element events gc jdalton example pedantically correct always entirely beside point ie notorious single page memory leaks associated elements events tricky garbage collection even devs try destroy element references also dependency lib may store elementspecificdata nt cleared called makes destroying element references nontrivial dependency consistency issue addressed backboneview remove use available else fallback would normalize simply removing element removing eventsdata associated", "d": "12/2011"}, {"body": "wrote monkey patch undelegateevents say use problems nt nt", "d": "12/2011"}, {"body": "afraid nt nearly enough information reproduce problem probably passing improper object somewhere hope helps", "d": "12/2011"}, {"body": "yep nt use links fake hijack unobtrusively real either way nothing backbonejs prefer write html jquery", "d": "12/2011"}, {"body": "looks like link behaves likes link nt still link tag looks like sensible alternative typically reserve buttons contentmodifying actions links navigation way relates backbone would convenient link backbone view without value given automatically prevented default action way normal links work expected fake links nt hijacked", "d": "12/2011"}, {"body": "goes sentence keys special meaning model collection id classname attached directly view", "d": "12/2011"}, {"body": "ran confusion yesterday backbone documentation clarifies brief aside super javascript provide simple way call super function name defined higher prototype chain override core function like set save want invoke parent object implementation explicitly call along lines agree reference annotated code removed clarified", "d": "12/2011"}, {"body": "see", "d": "12/2011"}, {"body": "whoops stupid close comment button", "d": "12/2011"}, {"body": "sounds reasonable always require underscore perhaps outdated", "d": "12/2011"}, {"body": "thanks", "d": "12/2011"}, {"body": "pass instances views creating instances putting view definitions sounds like antipattern", "d": "12/2011"}, {"body": "believe formalized already var view new backboneview model somemodel viewmodel somemodel", "d": "12/2011"}, {"body": "would nice feel free look previous tickets see prior discussion summarize rest semantics nt defined bulk operations always wrap collection model like add methods backbone definitely builtin", "d": "12/2011"}, {"body": "seems bit strange available also override custom functionality like nt think", "d": "12/2011"}, {"body": "btw reading code right perrouter roots seems exactly yapp", "d": "12/2011"}, {"body": "would adding another configuration parameter router think right case pushstate site website app nt care providing nice experience ie users comfortable giving fullpage refreshes want use jump around anchors page would make sense optout hashchange fallback", "d": "12/2011"}, {"body": "exactly web app uses old fashioned serverside html churning support ancient devices think old nokias shitty javascript support also modern singlepage experience devices iesupport fancy features really issue nt know way somehow preserve without breaking hash links able pathjs way backbone work separate routers different pages better match app", "d": "12/2011"}, {"body": "record extremely far core use case backbone intended probably going exercising small part backbone still think support", "d": "12/2011"}, {"body": "also feeling got comments earlier issue right less app common use case backbone think distinction apps websites sharp many projects really somewhere middle example nt whole lot data creation lot view updates response user interaction modelview bindings backbone extremely convenient", "d": "12/2011"}, {"body": "start putting littering issue tracker nonrequests", "d": "12/2011"}, {"body": "irc mailing list best place conversations", "d": "12/2011"}, {"body": "nope route nt changed route nt changed definitely action triggered want call function instead using call function", "d": "12/2011"}, {"body": "example currently problem", "d": "12/2011"}, {"body": "verry common problem one somwhere willing add something object prototype say wish add length happened everywhere used loop first backbone throw error proceeding events delegateevents function line problems appear place iterate object without checking properties", "d": "12/2011"}, {"body": "ah request hypothetical nt ever extend fine", "d": "12/2011"}, {"body": "case delegateevents function better way maybe throw exception process method exists however first place problem occur look backbonerouterbindroutes changedattributes method saying object prototype changed backbone code broken broken many places time", "d": "12/2011"}, {"body": "set issue exists within jquery well nt extend objectprototype ever using third party libs", "d": "12/2011"}, {"body": "say leaving nt extend objectprototype ever solid advice", "d": "12/2011"}, {"body": "sounds strange also nt sound like backbone problem perhaps issue something bit", "d": "12/2011"}, {"body": "great little pattern nt think common enough warrant passing along api everyone personally nt vary many views bound models collections note big part idea backbone extensible feel free add functionality app equivalent", "d": "12/2011"}, {"body": "idea bindtomodelbindtocollection main idea pass events via helper automatically unbinded events fix ghost views problem lot people removing views bind models collections forgetting unbind using simple helper method format works great since nt know nice way make backbone marco events routes defaults", "d": "12/2011"}, {"body": "fortunately opinion buggy way javascript constructors work already collections polymorphic models like var library backbonecollectionextend model function attrs options condition return new publicdocument attrs options else return new privatedocument attrs options", "d": "12/2011"}, {"body": "thanks", "d": "12/2011"}, {"body": "see change works locally machine reason hosted example page still uses jquery html glitch involving copy jquery though jquery cdn idea using html", "d": "12/2011"}, {"body": "yes branch uses older version jquery master fixed next release", "d": "12/2011"}, {"body": "delete requests supposed body resource delete including id model supposed included url", "d": "12/2011"}, {"body": "http spec stated delete supposed body implemented exactly method sgentile pass along information body spec state body sent would seem logical backbone convert optionsdata query string request would", "d": "12/2011"}, {"body": "ok even body getting passed url", "d": "12/2011"}, {"body": "contact backbonemodelextend defaults id null firstname lastname url contactcontacts usage thismodelsave updates thismodeldestroy deletes calls delete passed url params backend httpdelete actionnameattribute contacts public actionresult delete string id httppost actionnameattribute contacts public actionresult create contact model httpput actionnameattribute contacts public actionresult update contact model", "d": "12/2011"}, {"body": "guess url specify url deletes different postsputs", "d": "12/2011"}, {"body": "nt would nt rest nt want use urls identify resources would recommend overriding described using urls query params request bodies desire", "d": "12/2011"}, {"body": "proper way set url model use savesdeletes", "d": "12/2011"}, {"body": "pardon coffeescript coffeescript class exportsvehicle extends ubermodel url type gt switch type delete return vehicles thisget id get return vehicles thisget id put return vehicles thisget id post return vehicles thats url function passed type request", "d": "12/2011"}, {"body": "thank appreciate everyone response sounds like create sync use fair enough", "d": "12/2011"}, {"body": "type passed url undefined", "d": "12/2011"}, {"body": "oops apparently calling function addition custom sync coffeescript optionsurl isstring url url else url optionstype sorry maybe worthy pull request", "d": "12/2011"}, {"body": "thanks like agree would like see sync well added well base model object support aspnet mvc controlleractions good using url deletes vs body", "d": "12/2011"}, {"body": "fixed added unit test nt know cleanest code open suggestions", "d": "12/2011"}, {"body": "thanks bug report pushed alternative fix commit", "d": "12/2011"}, {"body": "experiencing issue", "d": "12/2011"}, {"body": "mixing two different things confused actual situation looks like idea example", "d": "12/2011"}, {"body": "base class something along lines child impression models extend backbonemodel children would extend basemodel example docs believe note backbonemodelextend privatenote noteextend make sense want initialize childmodel var c new childmodel see alerts know initialize functions called layer abstraction classesmodels keep everything clean", "d": "12/2011"}, {"body": "try instead", "d": "12/2011"}, {"body": "look line bb source code used follows test javascript var baseclass backbonemodelextend method function alert greetings baseclass var childclass baseclassextend method function thisconstructorsupermethodapply alert childclass var test new childclass testmethod alerts gt greetings baseclass gt childclass", "d": "12/2011"}, {"body": "works nt see documentation anywhere sure user error missing documentation either way really appreciate help", "d": "12/2011"}, {"body": "actually seeing using call parent initialize would expected maybe bug", "d": "12/2011"}, {"body": "bug resulting object owns property points myclass myclass owns property maps class extended need call initialization class extended need access inside property leads", "d": "12/2011"}, {"body": "even though link said yes super intended use directly underscored name implies", "d": "12/2011"}, {"body": "true nt use meant approach correct let clarify things means execute original backbonemodel initialize function called actual body function found magic ahem nothing use nt nothing saw execute super class method called", "d": "12/2011"}, {"body": "ohhhh makes perfect sense call lack coffee new transition javascript thanks much go ahead close thanks", "d": "12/2011"}, {"body": "framerate yuchi glad guys finally came conclusion posted two hours ago", "d": "12/2011"}, {"body": "blocka misread since read coffee", "d": "12/2011"}, {"body": "blocka actually forgot say agreed message simply tried give context", "d": "12/2011"}, {"body": "root problem seems backbonecollectiononmodelevent called model appmodelst example especially surprising got correctly bindall make sure collection passed instead possible chrome version native bindall implementation broken ineffective still chosen underscore", "d": "12/2011"}, {"body": "turns missing call super collection constructor prevented bindall onmodelevent caused endless recursion problem solved", "d": "12/2011"}, {"body": "got fresh backbone version seems fixed", "d": "12/2011"}, {"body": "weird happening jquery backbone combined nt know root cause able figure workaround updating call resizable initialize method full example", "d": "12/2011"}, {"body": "research looks like issue delegate method jquery small example showing subscribing resizestop event method works subscribing delegate method work using backbone example delegate method still work", "d": "12/2011"}, {"body": "ummm seems resizestop event nt bubbling reason might want file bug jquery core", "d": "12/2011"}, {"body": "thanks looking according jquery blog changed works improved performance delegated events event delegation become increasingly important size complexity pages grow application frameworks backbone javascriptmvc sproutcore make heavy use event delegation mind jquery event handling refactored eye making delegated events much faster especially common cases optimize code commonly used forms selectors examined crosssection code google codesearch nearly twothirds selectors used live delegate method calls form tag idclass one tag id class used parsing simple selectors javascript time event attached able outperform even browser nativecode implementations matchesselector event delivery complex selectors still use sizzle engine existing code continue work", "d": "12/2011"}, {"body": "yes changes system far specific use case probably still work dmethvin insight dec forrest oliphant wrote thanks looking according jquery blog changed works improved performance delegated events event delegation become increasingly important size complexity pages grow application frameworks backbone javascriptmvc sproutcore make heavy use event delegation mind jquery event handling refactored eye making delegated events much faster especially common cases optimize code commonly used forms selectors examined crosssection code google codesearch nearly twothirds selectors used live delegate method calls form tag idclass one tag id class used parsing simple selectors javascript time event attached able outperform even browser nativecode implementations matchesselector event delivery complex selectors still use sizzle engine existing code continue work reply email directly view github", "d": "12/2011"}, {"body": "target nt look like set correctly think fixed change previous versions jquery core forced target element triggered prevented several scenarios might simulating events example forcing nonbubbling event bubble", "d": "12/2011"}, {"body": "words fixed went made sure change included release", "d": "12/2011"}, {"body": "see existing patch jrburke implements", "d": "12/2011"}, {"body": "model url function would simple", "d": "12/2011"}, {"body": "sure entirely understand trying ask hard time perhaps one way tackling collectionreset lt accountstojson gt renderthecollection", "d": "12/2011"}, {"body": "also bind reset", "d": "12/2011"}, {"body": "collectionbind reset currently using render views meant make backbonejs take bash already rendered html tags ie html use within view bind events click", "d": "12/2011"}, {"body": "included pull request", "d": "12/2011"}, {"body": "thanks thanks large part reason backbone widely used simple readonefileandyouknowitall nature want use views use models use views use models custom build tool required", "d": "12/2011"}, {"body": "seems logical modularize sync history part", "d": "12/2011"}, {"body": "yes events need delegated synchronously otherwise trigger one events rendering proper callback would invoked got whole second speed improvement probably optimizations like using fewer coarsergrained templates tight loops delegating higher dom element page", "d": "12/2011"}, {"body": "afraid disagree please try persuade otherwise point history api provide bookmarkable shareable urls navigate back attach history object api page navigate back page would see pasted identical url seems broken least redundant ability store arbitrary state js course browser session smells like api browser implementors thought gee would nt neat could nt consider real consequences", "d": "12/2011"}, {"body": "think making assumptions desirable app behavior also granularity history events restrictive browser api provides specifically reason framework app dictate behavior invoked uri seems perfectly obviously legitimate state given navigation path orthogonal resource encoded state identified uri presentation conditioned clearly choice individual app aside abstract argument tell would implement example bookmarkable entry form offers savediscard changes navigated away including back button using history api one two line change nt want add parameter could also made use state given via eg attribute function", "d": "12/2011"}, {"body": "tell would implement example bookmarkable entry form offers savediscard changes navigated away including back button using history api would simply store form changes different safer place session server localstorage curious folks thought position asked replies", "d": "12/2011"}, {"body": "history api deals specifically app state tied nav path distinct uri ie get maybe called hysterisis api may share uri page return viewpagestate hit back button mouse swipe back mobile back action may change app statehistory without changing uri nav transitions uri transitions share uri may lead presenting resource page nav state appreciate experience flock think goes show developers nt yet figured use api intended creators good reason framework pave also nt address question persist form values rather use pushpopstate api prompt user save changes hit back button nav away form bookmarkable uri please consider addressing", "d": "12/2011"}, {"body": "new backbone webdev general however agree tribalvibes want create web application based facebook graph api use backbone navigate function allow user go back different items view similar facebook right however without stateobject pushstate user reload item api obviously costly probably dont know common pattern problem think state object would helpful", "d": "12/2011"}, {"body": "event fired attributes values set individual events fired time attributes set reason nested changes still able get events proper order instead indeterminate one inner changes finished would like wait use", "d": "12/2011"}, {"body": "clientside validations never stricter serverside validations simply asking trouble asking hacked raised successful save indicates bug app", "d": "12/2011"}, {"body": "point success error mutually exclusive nt raise time also point calling validation successful request", "d": "12/2011"}, {"body": "catch bugs like one", "d": "12/2011"}, {"body": "issue closed fixed", "d": "12/2011"}, {"body": "yep see commit", "d": "12/2011"}, {"body": "oh sorry android client nt showing", "d": "12/2011"}, {"body": "quite right thanks noticing doc lag", "d": "12/2011"}, {"body": "fixed braddunbar patches", "d": "12/2011"}, {"body": "guess exclude query new file filecollection filemodel cause guess way working like want think bug another test case hope understand correct case could help", "d": "12/2011"}, {"body": "something funky got improperly return nonrandomly going steps reproduce collection call list give method takes date range calculates items list within range saves makes ajax request items within range using extra parameters importantly passing query range question removes items list prevents duplicates gets rid items deleted server within range note however time fires data already parsed added collection precalculated also note ranges overlap partially completely exactly whatever use method twice ensuring overlap testing purposes consider three groups items fall first range second ranges see funky behavior last case happens well etc collection return items want collection ids result happens items already collection removed ajax request basically would seem add item collection twice remove one breaks tested general case yet within situation reopen new issue", "d": "12/2011"}, {"body": "hi problem chromium latest version glance demonstration open console navigate route second route root press back button console display time second root second result display bug chromium ideas code demonstration", "d": "12/2011"}, {"body": "atinux cowboy issues console chromium navigation think quite possibly bug within chromium", "d": "12/2011"}, {"body": "ok thanks fast answer", "d": "12/2011"}, {"body": "think inspector bug test putting alert check executed see behaviour playing routes pushstate bug nt reexecute code", "d": "12/2011"}, {"body": "marcalj problem mentioning atinux code working fine firefox ubuntu chromium exactly problem comment atinux also added consolelog routes callbacks problem still", "d": "12/2011"}, {"body": "using backbone", "d": "12/2011"}, {"body": "works properly betam", "d": "12/2011"}, {"body": "indeed like marcalj said inspector bug call route one time", "d": "12/2011"}, {"body": "mmh console getting root second root second root second root second root second root result consolelog handlers associated root second two uses back button first root page loaded first second following link second press back button getting root second root instead root expected following link second third second list console pushing back button getting root second root second root instead expected root nt appear inspector bug back button pushed handlers history effectively called chromium version firefox consolelog showing expected one call transition", "d": "12/2011"}, {"body": "test jsfiddle using executed twice without see console executing alert nt think chrome bug using chromium ubuntu", "d": "12/2011"}, {"body": "totally right alert shown expected", "d": "12/2011"}, {"body": "would love went look brought", "d": "12/2011"}, {"body": "bindunbind renaming could aliased supporting main features jquery events multiple event binding passing hashes", "d": "12/2011"}, {"body": "really changed ran problem would save peoples nerves", "d": "12/2011"}, {"body": "pull req", "d": "12/2011"}, {"body": "fixed", "d": "12/2011"}, {"body": "fixed", "d": "12/2011"}, {"body": "problem still present new collection created", "d": "12/2011"}, {"body": "open new issue searched found would also like fixed reason previousattributes working clues pass data hash update modelsave error occurs call error callback even modelpreviousattributes gives new values show consolelog anything failing correctly ps really want fixed", "d": "12/2011"}, {"body": "probably function nt passed also check approach javascript var oldvalues thismodeltojson hope helps", "d": "12/2011"}, {"body": "thanks marcalj exactly", "d": "12/2011"}, {"body": "added line lukevenn mentioned instantiated router cmwelsh mentioned seems resolved issue", "d": "12/2011"}, {"body": "sounds like want set event", "d": "12/2011"}, {"body": "needing something like support something like ember also noconflict versions jquery people like call jquery somewhere besides windowjquery currently impossible backbone without patching copy library think twobitfool pull request reconsidered simple definitely fixes issue aligns generally good practice using noconflict libraries", "d": "12/2011"}, {"body": "hi feature two views unordered list list items first issue attaching events view element ended attaching events list items list views another adding attributes supported besides set dataattributes contain specific model attributes item view render method obviously would prefer using template least convenient template like option render template files server side implement mechanism creating well mimic backbone view", "d": "12/2011"}, {"body": "submitted pull request came across problem unfortunately bug firefox found via stackoverflow leads autodecoding hash fragment thus encoding hash help ran test suite safari firefox chrome jashkenas setting hash multiple times really happen wellbehaved backbone app yes using locationhref splitting backbone might option properly urlencoded firefox", "d": "12/2011"}, {"body": "issue someone solution", "d": "12/2011"}, {"body": "use case overriding nesting handler suboptimal part public api ie simply", "d": "12/2011"}, {"body": "edwardmsmith would great", "d": "12/2011"}, {"body": "hellobackbonejs introduction like started backbone", "d": "12/2011"}, {"body": "please reopen issue either documentation set rails conventions logical sane defaults one wants update action every little attribute model one update action fine thank reviewed go core", "d": "12/2011"}, {"body": "comparator function return thisget posy thisget posx ist solution expensive comes values like timestamps", "d": "12/2011"}, {"body": "kmalakoff done good work method probably gone far imho offer good features", "d": "12/2011"}]