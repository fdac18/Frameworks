[{"title": "logical operators route hash", "body": "route hash eg optional params works great thus nt add new route like similarly way something like instead means need way make use logical operators key part object thus nt repeat line possibility using logical logical work key value wo nt accept logical operator simple amp short possible way set route key route hash", "num": "2840", "d": "10/2013"}, {"title": "model event triggered model initialized", "body": "sure actually bug found change behavior think noted changelog creating new model either via calling collection event assuming validation fails triggered new model model fn executed instantiating new model change change behavior collection methods used validate initializing new model instance code attaching event handler model follows event triggered code runs however longer triggers code relevant diff see event triggered fn line model created line event triggered upon model creation line change causes event handlers attached model fn fire least think change noted public changelog think two ways fix code work would appreciate feedback recommended attach event handlers using model fn instead attach event handlers collection instead model using fn since models exist without collections seems like option preferred wanting validate model handlers listening event created though ideal remember call original backbonemodel constructor overriding fn", "num": "2839", "d": "10/2013"}, {"title": "query string issue pushstate true backbone history", "body": "using thisnavigate optionsfragment optionstrigger pushstate true due following line backbonejs strip fragment query hash matching fragment fragmentreplace pathstripper changing url based query string fix failing latest version thanks abhijeet", "num": "2835", "d": "10/2013"}, {"title": "remove method removes element dom", "body": "remove method removes container element el dom behaviour wrong since allow reuse dom element creating view removing creating another view dom element suppose using jquery empty method would better work albeit trying still could get rid events removed views triggered event current view event triggered removed views view type", "num": "2834", "d": "10/2013"}, {"title": "nt set line chrome", "body": "chrome literally skips line backbone nt set variable actual frick replay reproduction download backboneunderscore create empty file following backbone options bug", "num": "2832", "d": "10/2013"}, {"title": "save patch method wo nt call tojson therefore custom method creating json", "body": "consider javascript modelprototypetojson function options return upd backbonemodelprototypetojsonapply arguments modelsave awd lt work fine modelsave awd patch true lt ignore tojson method make server error override method method javascript backbonesync function method model options paramsdata jsonstringify optionsattrs modeltojson options paramsdata jsonstringify modeltojson options backbonemodelprototypetojson function options optionsattrs return optionsattrs return clone thisattributes cant see problem maybe make problems parts backbone using backbone overrided method issue example please ignore typo problems example", "num": "2831", "d": "10/2013"}, {"title": "destroy \u65b9\u6cd5\u903b\u8f91\u9519\u8bef", "body": "passed waits server respond removal optionswait optionssuccess function resp optionswait modelisnew destroy success success model resp options modelisnew modeltrigger sync model resp options", "num": "2828", "d": "10/2013"}, {"title": "deepmodel missing", "body": "using backbonedeepmodel backbone plugin following well improved support models nested attributes allows get set nested attributes path syntax eg usertype triggers change events changes nested attributes think must buildin backbone core library rather using third party library hope get updated upcoming backbone versions", "num": "2826", "d": "10/2013"}, {"title": "collectioncreate wait true triggers collectionparse", "body": "since version calling triggers call server response returned according documentation looks like parse called reaction additionally parameters call seem different calling via first parameter contains raw data response ie array js objects triggered first parameter contains newly created model workaround possible set calling prevent call", "num": "2824", "d": "10/2013"}, {"title": "removal", "body": "hi puzzled bit removing attachment instance automatically mean guys consider sheer volume code would break must say simply speechless add return values collection wonder ever able adopt missing something major bc break minor version thank", "num": "2822", "d": "10/2013"}, {"title": "discuss router urls format", "body": "backbone url using id format relying standard looks like becoming defacto standard kind stuff pretty sure achieve something pretty similar using maybe using standard default would better think", "num": "2821", "d": "10/2013"}, {"title": "removing backbone models collection using collectionsforeach method cause models missed", "body": "removing models collection like models may removed collection underlying method prematurely considers mycollectionmodels fully iterated workaround foreach method using code workaround", "num": "2820", "d": "10/2013"}, {"title": "q get notified id changed", "body": "way write ugly code like useron change useridattribute function one direct access modelidattribute example subscribe collection change", "num": "2819", "d": "10/2013"}, {"title": "prevent parse save method", "body": "changing parse method model backbonemodelprototypeparse function resp options optionsparse return resp way prevent ajax response override model attributes mymodelsave parse false check one would use", "num": "2815", "d": "10/2013"}, {"title": "inconsistent fragment usage leads incorrect navigation behavior", "body": "code question grabs current pathname ignoring search hash function fragment provided say calling used trim hash end search portion would left intact inconsistent initial fragment stripping search portion better demonstrate issue consider start router url call url like would become new fragment context might kind filtering based search term call url like would correctly push state update url however user reloaded page url called base fragment following conditional would opinion incorrect case", "num": "2814", "d": "10/2013"}, {"title": "modelurl doc date wrt url urlroot", "body": "correct wrong looks doc modelurl date wrt fact possible anymore pas url urlroot props options hash model constructor see piece code though doc read", "num": "2812", "d": "10/2013"}, {"title": "collection create method seems need index option", "body": "collection add method supports index option create method nt seem support way set index position creating model collection seems need index option", "num": "2809", "d": "10/2013"}, {"title": "passing parameters view", "body": "developing app using beginning work update used able access inside view using longer works get following error uncaught typeerror read property hash undefined new way would much like able pass properties view", "num": "2808", "d": "10/2013"}, {"title": "git push error", "body": "error failed connect connection refused accessing fatal http request failed overcome error please help", "num": "2807", "d": "10/2013"}, {"title": "ca nt force route evaluation querystring changes", "body": "backbone although routes nt support query strings default could still handled manually application see however backbone even manually triggering route change cause route evaluated query string changes problem seems pathstripper line combined conditional line backbone query string stripped evaluating whether fragment", "num": "2801", "d": "10/2013"}, {"title": "longer able set url collection collection constructor function", "body": "particular reason url longer set collection constructor particular seems removed commit", "num": "2800", "d": "10/2013"}, {"title": "passing wait true save sync model changes model attributes optionssuccess called", "body": "please look jsfiddle believe save model button expected behaviour model attributes changed immediately whereas save model wait true button wait optionssuccess method called behaves like save model button believe issue model save method backbone line wait change model attributes confirm regards", "num": "2799", "d": "10/2013"}, {"title": "fetch specified url overrides model url", "body": "see makes sense fetch single model fetch collection model urls overwritten fetched url collection model constructor passed fetch blindly makes strange hard track errors", "num": "2797", "d": "10/2013"}, {"title": "patch request error", "body": "thows exception trying make patch request line dev version paramstype patch amp amp windowactivexobject amp amp windowexternal amp amp windowexternalmsactivexfilteringenabled paramsxhr function return new activexobject microsoftxmlhttp windowexternalmsactivexfilteringenabled crashes object nt support property pr method works fine replace windowexternalmsactivexfilteringenabled windowexternalmsactivexfilteringenabled", "num": "2796", "d": "10/2013"}, {"title": "model instance level error handlers overwrites global jquery error handling", "body": "global jqueryajax error handler amongst things setup like works fine requests app set specific error handler model instancelevel request like case actually error models error callback invokes none jqueryajax global setup runs looks like model instancelevel successerror overwrite global jquery ajax setup stuff expecteddesirable", "num": "2793", "d": "10/2013"}, {"title": "problems calling bindall", "body": "backbone using underscore calling bindall backbone calling bindall checkurl line version empty underscore removed ability call bindall method name arguments pretty much always wiser whitelist names methods like bind version calling function underscore executes var funcs slicecall arguments funcslength error underscore looking argument length argument throws error stops wrong may two ways clear sure backbone calling bindall checkurl underscore changing question length argument argument think something must changed", "num": "2792", "d": "10/2013"}, {"title": "improvements collectionpush collectionunshift", "body": "hi remarks apis fine could take arrays models raw attributes input actually already take arrays input since call internally though doc says take model input gt proposal doc fixed point accepted returned value changed today return pushedunshifted model push unshift return collection instead passed model param coherent furthermore code see impl nt rather otherwise one could produces unexpected result regards read push nt think feedbacks welcome", "num": "2790", "d": "10/2013"}, {"title": "person defined", "body": "first time backbone maybe something wrong get reference error type error person undefined error occurs development version downloaded backbone site use minified get errors", "num": "2789", "d": "10/2013"}, {"title": "collectionset merge true defaults model", "body": "see example var model backbonemodelextend defaults key value var collection backbonecollectionextend model model var col new collection colset id param parvalue key othervalue remove false add true merge true consolelog coltojson key colset id param newparvalue remove false add true merge true consolelog coltojson key want see merge nt want change values models default values want set new values nt change already existed values result nt know nt pass key parameter second set method key value became default value delete defaults value model right result", "num": "2788", "d": "10/2013"}, {"body": "hey think bug introduced lastest underscore try version", "d": "10/2013"}, {"body": "hi sboudrias used version latest version mean", "d": "10/2013"}, {"body": "vaguely remember people similar issue switching properly bug mostly breaking change way underscore handled things suggesting try app underscore works walk bug", "d": "10/2013"}, {"body": "hi suneq post small jsfiddle example showing code causes problem pushstate enabled disabled join irc channel try help", "d": "10/2013"}, {"body": "hi dear app large post initializing code app firsthash locationhash thank", "d": "10/2013"}, {"body": "post small sample problem code runnable testable jsfiddle help way unfortunately quite enough information go", "d": "10/2013"}, {"body": "currently magic regex parse routes hash keep mind call directly regular expression eg router method get behavior want", "d": "10/2013"}, {"body": "thanks work", "d": "10/2013"}, {"body": "ca nt check", "d": "10/2013"}, {"body": "yeah good call case want ongoing validation errors trigger consolelog warning would need certainly doable thanks code duplication could reduced abstracting consolelog fn necessary much still think change behavior regards collections worth noting well perhaps updating example docs show realistic usage attaching event handler event model initialization use happy submit pull request clarity either changes", "d": "10/2013"}, {"body": "hi iamanm behavior changed backbone please see reasoning potential fixes", "d": "10/2013"}, {"body": "look using need call undelegateevents view remove event binding ca nt comment whether good practice reuse dom element binding events behaviour looking free patch backbone way want", "d": "10/2013"}, {"body": "please look suggestion method backbone unexpected behaviour removes something logically removed seems writing backbone developers wanted follow logic jquery jquery removes element applied backbone removes object container dom element well view unexpected behaviour therefore avoided backbone method followed logic jquery removed view applied dom elements including container element", "d": "10/2013"}, {"body": "backbone view element represents view feel free empty like nothing stopping", "d": "10/2013"}, {"body": "right nothing stopping still look way container dom element part web page insertinginjecting removed remove", "d": "10/2013"}, {"body": "container dom element part web page insertinginjecting view views right certainly nt", "d": "10/2013"}, {"body": "yeah reason remove facility provide preexisting el encourage form", "d": "10/2013"}, {"body": "created new mac account redownloaded chrome ran steps still happening looks like chrome issue", "d": "10/2013"}, {"body": "yep idiot using watch expressions habit instead scope variables reason chrome inspector nt reference correct variable console type hence undefined work fine", "d": "10/2013"}, {"body": "ran tests passed", "d": "10/2013"}, {"body": "english pls people chinese speaker", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "notes wrote wait true passed waits server respond removal however setting optionswait true server returns results still destroyed model comments match code question google anyway seems correct think otherwise option means wait server response backbone take action right snippet exactly calling function within success callback", "d": "10/2013"}, {"body": "ashwinh maybe nag plugin developers submit pull request instead", "d": "10/2013"}, {"body": "hi ashwinh echo documentation backbone nt include direct support nested models collections many associations number good patterns modeling structured data client side backbone provide foundation implementing type thing likely moved backbone reasons", "d": "10/2013"}, {"body": "nt call unless specifically set call function code see call simply call nt pass get called get called though since calls missing something", "d": "10/2013"}, {"body": "call happens set", "d": "10/2013"}, {"body": "understand trying point unfortunately actual behavior seems different coffeescript class mycollection extends backbonecollection url someurlhere valid url readable server response since waiting parse gt consolelog called parse new mycollection create wait true results called parse printed log note without parse nt called use coffeescript compiler compile js", "d": "10/2013"}, {"body": "right set apparently although think working like since commit", "d": "10/2013"}, {"body": "sure reading code correctly nt refer calling model level correct far know actually raw model data parse collection level creating model using raw data one model expects raw collection data ie typically array creating model nt data calling new behavior using backbone months never called mentioned seems situation actually called model first parameter kind raw data would normally", "d": "10/2013"}, {"body": "right updated commit model added collection success callback success callback called inside callback point set nt set anything nt seem like intentional behaviour think intuitive preserved scope right fix issue think", "d": "10/2013"}, {"body": "makes sense actions taken collection level consequence ie callback receive call proposed change fixes issue", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "far see need wrap constructor get behavior back would correct way get behavior back migrating code better way edit actually wrong could simply overload method oh darn longer either", "d": "10/2013"}, {"body": "localheinz point nt think thanks though", "d": "10/2013"}, {"body": "search issues able read full story instead us retype short consistent way behaves every backbone class previously view something odd duck stashing wrap constructor get behavior back globally like prefer keep using feel free every version available time nt stop working slightly better one available", "d": "10/2013"}, {"body": "well bit harsh nt think searching couple hundreds issues would nice link release notes also nice would big disclaimer backbone introducing breaking changes minor versions", "d": "10/2013"}, {"body": "dnutels understand frustration also codebase stuck breaking changes however much simply migrate", "d": "10/2013"}, {"body": "well bit harsh nt think searching couple hundreds issues open ticket force everyone contributing repo respond question instead adding discussion already exists see comment every change behavior breaking change someone romantic versioning semantic versioning", "d": "10/2013"}, {"body": "dnutels actually notes right", "d": "10/2013"}, {"body": "classic case stupid read notes took time write vs dumb use semver lookalike expect people read notes every patch minor release", "d": "10/2013"}, {"body": "foxbunny nt know guess good practice read changelogs updating latest version", "d": "10/2013"}, {"body": "localheinz nt prevent folks assuming nt effing big deal make requirement obviously negative comments people help even less", "d": "10/2013"}, {"body": "localheinz read release notes exactly prompted broke everything release notes nt help matters able upgrade receive various bug fixes without monkeypatch stuff know theoretical level also condescention", "d": "10/2013"}, {"body": "edit killed last comment since contained nonworking code sorry noise rework update comment ok working version sure properly cleaned coffeescript output requirejs scenario multiple modules require original backbone use following configuration swap original backbone new one first wrap code use coffeescript coffeescript define require gt backbone require vieworig backboneview backboneview options gt vieworigapply arguments options options backboneview vieworig backboneviewextend vieworigextend backbone next change path configs follows causes modules load patch module instead original", "d": "10/2013"}, {"body": "imagine could use requirejs swap old backbone new one becomes notice swapped aliases libraries contrast", "d": "10/2013"}, {"body": "dnutels thanks tip nt aware option", "d": "10/2013"}, {"body": "dnutels tried map configuration nt work patch module also requires backbone leads circular loading missing something", "d": "10/2013"}, {"body": "foxbunny aha right configure additional property new receives old instead creating cycle props may need different order note top head better consult requirejs api part site work though", "d": "10/2013"}, {"body": "dnutels yup works", "d": "10/2013"}, {"body": "simplify things little makes path config redundant patch module looks like", "d": "10/2013"}, {"body": "foxbunny side note may get shaky build since new patching module requires loaded module requests actually gets one make sure since patching module probably packaged appframework might get dicey depending structure require separate added part initial code", "d": "10/2013"}, {"body": "well seems builds problem exact mapping build config", "d": "10/2013"}, {"body": "meant using built file works great", "d": "10/2013"}, {"body": "yeah temp solution rid app anyway need perfection", "d": "10/2013"}, {"body": "might also look creating base view app views inherit nice pattern use models collections give extra features without mucking prototoype requirejs", "d": "10/2013"}, {"body": "would preferred approach idiomatic pattern would work nt backbone constructor nt provide overloadable methods overloading would cause sorts problem rest code base since parent nt anything useful default therefore nt usually call parent method overloaded method", "d": "10/2013"}, {"body": "foxbunny sure follow completely overwrite constructor choose call super constructor way method", "d": "10/2013"}, {"body": "ah meant see absolutely difference unless would rather go fix code base inherit subclass case think easier migrate code use right another way go", "d": "10/2013"}, {"body": "foxbunny also replace completely manner", "d": "10/2013"}, {"body": "braddunbar yes", "d": "10/2013"}, {"body": "uritemplates lovely like use within api responses entirely appropriate router support heckuva lot features router simple matching needs", "d": "10/2013"}, {"body": "hi arfordweb modification iteration pretty classic mistake fallen prey many times modifying way suggest would prohibitively expensive suggest creating list models remove iteration removing afterwards perhaps succinctly", "d": "10/2013"}, {"body": "really nt know asking", "d": "10/2013"}, {"body": "see sample", "d": "10/2013"}, {"body": "question stack overflow github tickets", "d": "10/2013"}, {"body": "pretty sure backbone notify id changes even customized backbone question feature request", "d": "10/2013"}, {"body": "already fiddle", "d": "10/2013"}, {"body": "use customized idattribute suppose consumers model access id id property need know implementation details day change userid userid consumers still work use change modelidattribute case written access ti model directly subscribe change collection models backbone already handle change modelidattribute case emit special event", "d": "10/2013"}, {"body": "nt server send back attributes nt want set send back empty", "d": "10/2013"}, {"body": "may want server send back properties put requests places app prefer option set frontend backend", "d": "10/2013"}, {"body": "sure thing set frontend say fine place sort property filtering future ask sort question mailing list irc channel need open ticket", "d": "10/2013"}, {"body": "thanks", "d": "10/2013"}, {"body": "agree reason still use", "d": "10/2013"}, {"body": "hi please see recent recent tickets matter join conversation thanks", "d": "10/2013"}, {"body": "thanks catching", "d": "10/2013"}, {"body": "option option pass options uses hood give try", "d": "10/2013"}, {"body": "hey would interested collaborator status backbone repo tag close questions see fit", "d": "10/2013"}, {"body": "sure thanks", "d": "10/2013"}, {"body": "done enjoy welcome", "d": "10/2013"}, {"body": "wow option works nicely thanks", "d": "10/2013"}, {"body": "guess could rendering view seems clunky", "d": "10/2013"}, {"body": "instead opening bug ticket try asking mailing list irc room first searching", "d": "10/2013"}, {"body": "try stackoverflow backbone issue", "d": "10/2013"}, {"body": "yes improvement backbone completely ignore querystrings instead partially ignoring perhaps braddunbar would like elaborate bit", "d": "10/2013"}, {"body": "trouble seeing improvement perspective since makes essentially impossible app work querystrings even legitimate reason judging comments seems people reasons fine even adding additional option pass navigate skip stripper force route evaluation stands feels like takes unnecessarily opinionated stance issue probably breaks number current apps frankly feels quite unbackbonelike perhaps something like change line sure really addresses inconsistencies related querystrings though", "d": "10/2013"}, {"body": "sure much elaborate rather long already certainly restate reasoning please read previous tickets subject context eg ambiguities concerning query strings hash fragments include question mark use browsers without support semantics generally considered equivalent using route string like ignores altogether value parameter like already available via never written query string parseranalyzer fairly certain nontrivial nt think included minimal set generally useful components creating web apps reasons mind specific usetest case mind glad look", "d": "10/2013"}, {"body": "different problem caused paradigm would like able refresh application navigate route agree quite normal idea pass argument would force navigation", "d": "10/2013"}, {"body": "braddunbar use case parsing query string client side route written regex string creates new search view search view grabs query string creates new model grabs search results server using query string app nt directly utilizing query string reflect application state search query performed canonical way hiding behind another character granted couple issues needed handled make everything behave expected relatively minor easy fix without overriding backbone code code router model view loader", "d": "10/2013"}, {"body": "thanks code sure portion referring though create reduced test case glad take look", "d": "10/2013"}, {"body": "setup ghpage site test case essentially mirrors search query iframe bing working version test broken version test identical version backbone used vs respectively relevant view code coffeescript class appview extends backboneview el body events change input updatesearch render query locationsearch str querymatch q html enter search hit enter updatesearch e query ecurrenttarget val routernavigate q query trigger true line ignored backbone fragment unchanged test case simply enter string text input top page hit returnenter code working see url updated bing iframe update new search equivalent broken version site search query update since url dropping thus different stop updating searches broken version also appears truncate last letter query string initial successful search example go working version broken version enter text input top screen hit enter text input top screen hit", "d": "10/2013"}, {"body": "ok see getting due queryhash longer change unless path also changes intentional also ignores query hash would suggest one two things set inside change handler render explicitly skipping router altogether since handle query string changes use path instead query string", "d": "10/2013"}, {"body": "braddunbar example test case updating rerendering view would work fine however complex application different views andor simple links could triggering route makes highly preferable use router using path instead query string feels awkward standard well established well understood use case query string also seems quite similar except supporting query strings instead hashes opened small pull request adds option navigate along minor fix prevent truncating query strings seems fix issue extra work want support query strings app least would possible opened pull request adds option history treat query string part fragment seems fix issue mentioned also makes history process query string changes correctly also broken backbone", "d": "10/2013"}, {"body": "braddunbar opinion pr adding option query enabled always tacking end fragment patch would nt work well right", "d": "10/2013"}, {"body": "understanding issue correctly impact even querystring included fragment could easily ignored using regex like opposite nt true easy way include desired alternative whatever happened jashkenas suggestion routes willing try submitting pr add instead preferred", "d": "10/2013"}, {"body": "main issue ignores altogether rightly think time use search params comparison causes navigating url manually behave differently calling opinion acceptable", "d": "10/2013"}, {"body": "oh sorry missed part however stated many times pullsissues nt think query string included long support hashchange fallback using faux querystring hash fragment causes confusion good", "d": "10/2013"}, {"body": "braddunbar agreed think failed mention one limitation way query string implemented pull request use order get query string course put minimum browser requirement use nt decision individual projects make backbone would still offer browser support right exact feature set", "d": "10/2013"}, {"body": "think failed mention one limitation way query string implemented pull request use pushstate order get query string nonstarter features support need support completely", "d": "10/2013"}, {"body": "jashkenas think think query string support would work fine projects using hash well pr would need minor fix move setting outside pushstate conditional without need adding faux query string hash would equivalent valid uri indeed would look added hash page query string normally query string impact resources loaded need move hash", "d": "10/2013"}, {"body": "yes setting requires page refresh circumventing point hash based routing", "d": "10/2013"}, {"body": "braddunbar right frustrating understand dilemma", "d": "10/2013"}, {"body": "dak really need behavior might look monkeypatching backbonehistory backbonequeryparams chaplin workarounds think help", "d": "10/2013"}, {"body": "breaks property models created collection see", "d": "10/2013"}, {"body": "yep yep thanks", "d": "10/2013"}, {"body": "try master still problem", "d": "10/2013"}, {"body": "updated jsfiddle master still see problem", "d": "10/2013"}, {"body": "looking middle model attributes must sent server look save function call returns server responded see old attributes still like change implementation feel free send pull request", "d": "10/2013"}, {"body": "hi aredridel think describing fixed master give code shot let know still issue", "d": "10/2013"}, {"body": "indeed testing", "d": "10/2013"}, {"body": "yes fixes changes around keeping reference options breaks code", "d": "10/2013"}, {"body": "check discussion pretty easy add back convert", "d": "10/2013"}, {"body": "nope code master work get github homepage", "d": "10/2013"}, {"body": "ok bad something wrong end apologies", "d": "10/2013"}, {"body": "backbone calling bindall checkurl line version empty nt real failing test case feel free send pull request", "d": "10/2013"}, {"body": "push unshift supposed operate single models otherwise poorly named want add multiple models use accepted big deal want futz internals go ahead used normally push", "d": "10/2013"}, {"body": "reference functions mirroring accept n parameters operate", "d": "10/2013"}, {"body": "ah ha", "d": "10/2013"}, {"body": "guess wo nt second argument options object variadic inputs us", "d": "10/2013"}, {"body": "two possibilities first param could array would fine call would need updated preparing n models changing signature accept arrays could always check see last param simple object throwing possible solutions", "d": "10/2013"}, {"body": "fyi therefore return added model array models passed one", "d": "10/2013"}, {"body": "pretty big change moves away idea collection amp model similar semantics reason want models returned able diff collection", "d": "10/2013"}, {"body": "harder diff would appear given might objects passed semantics still hopefully sensible return value said think probably still wrinkles situations might get back something suboptimal certain combination duplicateinvalid", "d": "10/2013"}, {"body": "please ask type question irc google group stackoverflow", "d": "10/2013"}, {"body": "question soon use minified version issue goes away sounds like bug", "d": "10/2013"}, {"body": "create simplified jsfiddle illustrating problem without context difficult know might causing issue indeed bug part backbone library", "d": "10/2013"}, {"body": "nevermind backbone file corrupted something got refactored mistake sorry trouble", "d": "10/2013"}, {"body": "think fixed master branch", "d": "10/2013"}, {"body": "correct fixed master", "d": "10/2013"}, {"body": "look actual code see nt trying parse anything afaik try parse server response based option think always default", "d": "10/2013"}, {"body": "cool must looked quickly mistaken", "d": "10/2013"}, {"body": "var col backbonecollectionextend model function attrs options return new backbonemodel attrs options var col new col coladd consolelog colbyid colset name realname consolelog colbyid result question best way deal behavior set function prototype behavior change future releases", "d": "10/2013"}, {"body": "tgriesser override method workout", "d": "10/2013"}, {"body": "really fixed master summary happening today really pass identifying attribute hash attributes correct wrong first model already collection pass option collection modified meaning existing model unchanged collection model already collection also pass option existing model changed collection onchange events fired model collection added collection appropriate onadd event fired case even collection unmodified since model identifying attribute operation asked backend meaning end first case described modified model backend left unmodified client application even called called new instance model created preparemodel one collection doc updated advices like pass identifying attribute hash attributes reason detre create new models collection backend time update existing ones code modified", "d": "10/2013"}, {"body": "alright gentlemen go going take colectivo town dinner hope release backbone get back got problems concerns current state things including new somewhat invasive change return value setaddpushunshift speak hold peace cc braddunbar tgriesser caseywebdev", "d": "10/2013"}, {"body": "interesting changes nt think able pass judgement try one thing stands odd man still returning collection believe return removed models consistency", "d": "10/2013"}, {"body": "little concerned longer returning fairly big change thinking particular simplified case might longer rather code like applications ca nt imagine one especially without much knowledge edge cases might around return values goes inside inclined leave else become issue", "d": "10/2013"}, {"body": "especially without much knowledge edge cases might around return values goes inside set inclined leave else become url options issue well put similar misgivings especially considering never seen issue live code", "d": "10/2013"}, {"body": "maybe better post change experiment edgeusers also gives time beef test coverage", "d": "10/2013"}, {"body": "also big return values need type check would case returning either model array models vote pulling something similar slapping new return value directly collection property need get models", "d": "10/2013"}, {"body": "alright ditch pop shift unshift returning", "d": "10/2013"}, {"body": "well shift pop would return model shifted popped maybe push unshift could mirror js return fairly useless length value", "d": "10/2013"}, {"body": "lame though honestly difference return value types nt bother return callback event arguments pass single value get back single value right line pass array get back array said agree work way cook robust test cases", "d": "10/2013"}, {"body": "yeah change return value concerned also fwiw test case added passes regardless change", "d": "10/2013"}, {"body": "pushed work bit better since yall best wise honest judgement take blame causes trouble", "d": "10/2013"}, {"body": "books enjoy", "d": "10/2013"}, {"body": "", "d": "10/2013"}, {"body": "indeed chrome safari depending point view bug windowlocationreplacehash characters nt something backbone help added test demonstrating use backbone navigate url correct routes called suggest keeping nonascii urls first place", "d": "10/2013"}, {"body": "braddunbar really like approach nt want click event triggered mobile phones reason want every click event also results annoying blink mobile browsers", "d": "10/2013"}, {"body": "gorkemyurt also function possible", "d": "10/2013"}, {"body": "yepp thanks lot found really similar approach", "d": "10/2013"}, {"body": "think custom causes http read request sent see backend probably get trick", "d": "10/2013"}, {"body": "take", "d": "10/2013"}, {"body": "simplified version bug shown still reproducible firefox well firefox nightly", "d": "10/2013"}, {"body": "braddunbar see alert last jsfiddle think something ca nt address think adding back double lesser two evils greater", "d": "10/2013"}, {"body": "bug certainly lesser two evils maybe nt even qualify bug relevant context including bug filed judging response boris zbarsky close relation larger issue unresolved four years would nt count fix camp anytime soon said work around fairly easily following two rules nt use unencoded characters routes unicode space etc encode user generated portions route", "d": "10/2013"}, {"body": "righto thanks reference", "d": "10/2013"}, {"body": "yeah bums ff breaking nonwestern routing majorly bums essentially means ca nt use semantically meaningful nonascii routing right turn means whole lot users use ascii routes escape everything even era got unicode tlds braddunbar also pointed regardless ff wait currently existing versions ff fall use nt bummer makes wonder seriously sort workarounds might available besides bugging ff fix kind ca nt believe nt bigger deal double decoding still problematic case user generated route fragments since devs would double encode user routes well", "d": "10/2013"}, {"body": "nt seem correct javascript synchronous timer despite appearing first code wo nt ever run function runs completion perhaps simply need reorder routes put lessspecific one last", "d": "10/2013"}, {"body": "sure supposed demonstrate consoles logging exact thing perhaps already fixed", "d": "10/2013"}, {"body": "ravirajani hit bug firefox burned day trying figure cause moment relying escape unescape convert special characters would love see fixed simple workaround", "d": "10/2013"}, {"body": "ftr going open issue also receiving incorrect arguments noticed fixed", "d": "10/2013"}, {"body": "fixed correct still trouble master let know", "d": "10/2013"}, {"body": "sure follow going ticket especially refactor approach take advantage something specific like addressed feel free try", "d": "10/2013"}, {"body": "jkchow also need remember let serialize data however want inverse", "d": "10/2013"}, {"body": "would simplest cleanest way adding back old behaviour would code added new section called upgrading backward compatibility thanks", "d": "10/2013"}, {"body": "something like use view definitions", "d": "10/2013"}, {"body": "could get previously backboneview available initialize need", "d": "10/2013"}, {"body": "thanks caseywebdev tgriesser thought options include model collection el id classname tagname attributes events guess code would nt care backward compatible maybe one remove keys options", "d": "10/2013"}, {"body": "since issue today research proper way handle successful delete server http code include descriptive response message body http code require response body switched response successful delete everything handled jquery backbone properly issue backbone http response body defined textplain servers default backbone expecting json http bit opinionated", "d": "10/2013"}, {"body": "backbone jquery doubt requesting applicationjson header bit opinionated return textplain applicationjson backbone behaving correctly according http standards informational message serialized json", "d": "10/2013"}, {"body": "sorry thought saw request header said accepted json text lateearly stepping code hours hammered oct pm ryan leckey notifications githubcom wrote backbone jquery doubt requesting applicationjson accept header bit opinionated return textplain applicationjson backbone behaving correctly according http standards informational message serialized json reply email directly view github", "d": "10/2013"}, {"body": "afraid nt understand fix working nt android device test nt match method available assigning suddenly causes fix pretty nasty thing zaptree feel free send pull request best suggested fix test case happy merge", "d": "10/2013"}, {"body": "fix put really refreshing page fix problem way detect problem refresh page nt feel something worthy putting core really sure problem even happens", "d": "10/2013"}, {"body": "understand deliberated subsequently closed wanted fire opinion since also affects events object mixed models collections views could used number ways number reasons forcing space convention upon users good default software defaults good best guesses features used nt way feature used framework creators hope leave many doors open possible think every usecase understand always tradeoffs change face change follows current conventions allows new user defined ones use backbone events object central communications bus within app sometimes event names made strings contain spaces need usual things one would normally events spaces sometimes never trigger multiple events one go wont ever step change local copy backbone make work bad practice leaves support change forever change boxxxie request within object configurable case case basis ie backboneevents object models views collections etc later enhancement would backbonedefaults object key read used define application wide backbone loaded applications would therefore option making change app wide individual basis reconsider", "d": "10/2013"}, {"body": "hi shannmcnicholl afraid still opinion remain internal introducing subtle differences events implementation seem like something would make things reliable convenient would caution using arbitrary strings event names easily cause collisions since control names directly easy enough use names without spaces", "d": "10/2013"}, {"body": "braddunbar get collisions events every module uniquely namespaced prevent things difference asking every module collapse spaces want listen event trigger one want spread logic everywhere would contrary logical solution care follow one line change would nt make backbone introduce kind difference events implementation jquery style would persist add flexibility give implementer power control app works order counteract issue wrap events object overload onofftrigger functions order collapse strings add lines code world ending hardly going cry either way grievance aired go business", "d": "10/2013"}, {"body": "introducing subtle differences events implementation seem like something would make things reliable convenient better worse exposing private function object property nt exactly something call subtle makes huge difference depending use case", "d": "10/2013"}, {"body": "well reset parameter least update documentation wrong", "d": "10/2013"}, {"body": "thanks", "d": "10/2013"}, {"body": "prefer approach updates attributes passed save team work around app call makes use part used model method see", "d": "10/2013"}]