[{"title": "jsxtransformer bug tag", "body": "produce uncaught typeerror read property replace undefined due font tag use jsx file", "num": "2627", "d": "11/2014"}, {"title": "silent exception error componentwillreceiveprops", "body": "function call undefined componentwillreceiveprops well never mind since call undefined throws caught reactmultichildupdatechildren rethrown reason ca nt find ca nt reproduce fiddle anyways took realize culprit anyone knows heaven name nt throw", "num": "2626", "d": "11/2014"}, {"title": "minify jsxtransformerjs", "body": "could please provide minified version", "num": "2625", "d": "11/2014"}, {"title": "jsx binary strip types arrow functions", "body": "take following code parse binary correctly removes type change function use arrow function fails error", "num": "2624", "d": "11/2014"}, {"title": "onmouseover triggered component rendered mouse mouse moves", "body": "component rendered registers onmouseover events rendered mouse onmouseover callback invoked", "num": "2621", "d": "11/2014"}, {"title": "unable find element error elements", "body": "contents element constructed special way breaks react component update unable find element error example method body working jsfiddle react adding option props fixes issue", "num": "2620", "d": "11/2014"}, {"title": "csstransitiongroup throws child returns null render", "body": "came across using loading route initially route handler actually inside removing transition group leads weird thing happens initial load nested route view pulled via menu sure issue related belongs thing component either returns react element returns seems like edge case maybe happens specific initial render setup could fixed adding guard method", "num": "2619", "d": "11/2014"}, {"title": "reactrendertostring pretty output", "body": "similar jsonstringify obj", "num": "2618", "d": "11/2014"}, {"title": "unexpected string key handling", "body": "came across one extended custom key generator react ends treating function child key hides strings come object key handling documented makes sense sure makes sense handle string keys way", "num": "2612", "d": "11/2014"}, {"title": "feature request ability configure custom html escaping function", "body": "", "num": "2611", "d": "11/2014"}, {"title": "testing handlers events testutilssimulate failing", "body": "problem described stackoverflow thread ca nt seem figure wrong", "num": "2609", "d": "11/2014"}, {"title": "react slow rendering items jsfiddle", "body": "hi guys evaluating reactjs considering using projects trouble rendering simple list elements since takes almost seconds complex markup couple div tags actually existing app simplification tried using underscorejs took jsfiddle using jsx without jsx wrong cheers vasco pessanha", "num": "2608", "d": "11/2014"}, {"title": "making react warn user called argument", "body": "spent last hour trying fix issue caused trying render actual variable undefined root cause misinterpreting would return whole instead bad error stack trace extremely cryptic took even get clue reason nt working trying render undefined type actual exception stack trace see ultimately execution comes crashing react tries look undefined type course raises exception reason confusing exception happened quite far away source cause secondary factor code worked completely fine started porting browserify made mistake lead wild set hypotheses nt working assuming might due regression react since migrating thought might lagging behind thinking could problem reason raise issue since passing type wo nt work anyway would make sense react could check warn maybe even raise exception since would crash soon anyway instance bit extreme something like happens someone else probably know screwed first place help react would always welcome", "num": "2607", "d": "11/2014"}, {"title": "event still processing component unmounted", "body": "suppose backbone view named contains react component b b react button clicking button unnmounts b react rerenders backbone case got error like looking found events still processing even component unmounted dom examining found event click event added click handler became ok plan fix case react work timeout", "num": "2605", "d": "11/2014"}, {"title": "old react version examples", "body": "hi examples included getting started kit version react defined packagejson basiccommonjs example set order example work expected also using browserify reactify compile buildjs fails missing jsx header indexjs tested examples", "num": "2604", "d": "11/2014"}, {"title": "idearequest add global party extension point react object", "body": "tldr add empty bare object called x new member react object party react tools global extension point couple internal tools use react would like open source tools use singleton object referenced andor modified components know could create object root component pass prop child components may modify object violates idea props readonly also means another person open sources component uses either tools user component must create root object app wire component tree keep things clean would love party extension space hanging react object could attach tool globals components would access given share react global suggestion name x make bare object documentation would encourage users add namespace object simple example adds party global event bus blogging app using eventemitter could used server client via browserify appjs root component require reactxevent reactxeventbuson createpost reactxeventjs newpostjs component view shown point subcomponent appjs createpost function e reactxeventhandle e createpost render function return without getting lost weeds arguing global event bus good idea react see example nt need wire component tree bus allow subcomponent send message nothing stopping anyone else globally patching react object add x member think would better blessed added react code conflicts future member name also think common name like x allow party module names announce work eg require reactxevent", "num": "2598", "d": "11/2014"}, {"title": "jsxtransformer error lowercase classes provide linenumber property", "body": "attempting use react class lowercase classname transformer able display line error occurred turns event variable passed function contain attribute called linenumber error thrown states uncaught typeerror read property replace undefined actual error properties error lower case component names myclass longer supported jsx see", "num": "2592", "d": "11/2014"}, {"title": "use inside react class", "body": "quite often apps need render list entities entities usually contain data identifier property like sometimes may logic inside component uses identifier eg uses inside handler fire event clicked entity simplified example var entity reactcreateclass notifyitem function fire someevent id thispropskey also find natural use properties prop rendering list proper component recycling however moved nt seem available inside component specify two different propslike values looks redundant would great make available inside component future versions", "num": "2591", "d": "11/2014"}, {"title": "bug docs jsx", "body": "docs say use html jsx accept xhtml ex html xhtml missing x docs make difference picking react want use xhtml dead", "num": "2590", "d": "11/2014"}, {"title": "glossary mistake", "body": "glossary see really correct seems wrong imagine idea though", "num": "2588", "d": "11/2014"}, {"title": "proptypes declarative validator preventing passing extra properties feature request", "body": "dropping support deprecated component property would useful react could instructed throw error old code using component still keeps setting removed property notice fix", "num": "2587", "d": "11/2014"}, {"title": "handle browser autofill gracefully serverside rendering", "body": "rendering react app document root serverside rendering got email password login form renders server without state fields empty browser loads page email password autofilled browser happens react bootstraps loads wipes state user sees inputs autofilled emptied ideal tried using grab raw dom node value render react complains checksum invalid realise case dom modified react bootstraps client would good able kinda stuff update workaround used pull values inside values inside would still nice handle cleanly though", "num": "2585", "d": "11/2014"}, {"title": "reactids overriden serverside rendering", "body": "recently adapted app use serverside rendered markup reconciliate client increase loading speeds react correctly recognizes rendered markup nt actually touch dom first rendering step however interact clicking dragging etc serverside rendered react components get following error understand sideeffect dom mutation however mutation occured react element container altering state programatically opposed interacting clicks etc cause errors serverside rendered markup html login categories add category settings calling rendercomponent client dom node contains serverrendered markup eg thanks creating maintaining amazing ui framework", "num": "2584", "d": "11/2014"}, {"title": "correct latest release tag github", "body": "react releases page incorrectly promotes latest release sure since tags repo releases since correct admin", "num": "2580", "d": "11/2014"}, {"title": "proptypes property current vs getproptypes function proposed", "body": "used development mode seems like would preferable evaluate result method call returning object instead current object literal declared class imagine nt particularly expensive operation using shapes results lot type declaration evaluations never used outside development current proposed reason way instead functional convention etc", "num": "2577", "d": "11/2014"}, {"title": "tests using react jestmocked subcomponents result different behavior using jsx versus reactcreatefactory", "body": "created repo help illustrate running basically developing pure jsx using reactcreatefactory interchangeable testing using jest makes writing unit tests little trickier according link nonjsx components must wrapped reactcreatefactory testing components using jest found interchangeable within tests mock submodules guessing differences stem using bind within reactcreatefactory", "num": "2576", "d": "11/2014"}, {"title": "issues classes", "body": "issues classes react seems esprimaharmony differs implementing classes well classes implemented beta versions browsers esprimaharmony able use classes using however use methods chrome windows preview get error render try using get error ca nt figure would different objectdefineproperty directly defining prototypes fact properties set prototype nt automatically enumerable code javascript class mycomponent render return null esprimaharmony compiles compiles javascript var classprops function child staticprops instanceprops staticprops objectdefineproperties child staticprops instanceprops objectdefineproperties childprototype instanceprops var mycomponent function var mycomponent function mycomponent classprops mycomponent null render writable true return mycomponent resolve issue", "num": "2575", "d": "11/2014"}, {"title": "textarea update replacestate invoked", "body": "hello discovered little annoying bug invoke replacestate empty object textarea innerhtml update however value please see example", "num": "2573", "d": "11/2014"}, {"title": "replacestate null nt reset state", "body": "since components start null state would make sense could reset back null state right best reset back empty object minor issue think deserves documenting changed", "num": "2572", "d": "11/2014"}, {"title": "", "body": "gets called never granted using older version nt dig latest source hard nt see pop issues search", "num": "2569", "d": "11/2014"}, {"title": "extend nested default props instead overwriting", "body": "convenient props nested structure however let assume default props initialize component giving props component wo nt get cccsecond cccthird preferred result would course perhaps make behaviour selectable adding proptypes option like", "num": "2568", "d": "11/2014"}, {"title": "svg attributes nt work nt used", "body": "like js x", "num": "2564", "d": "11/2014"}, {"title": "ref component attribute undefined react", "body": "understanding changelog breaking changes key ref moved props object accessible element directly unless misunderstanding working access ref attribute using used work small snippet demonstrates issue", "num": "2563", "d": "11/2014"}, {"title": "setstate recursive", "body": "state currently calling results state would great function make clear documentation merges one level deep replacing substates", "num": "2561", "d": "11/2014"}, {"title": "make warning eg proptypes behavior configurable", "body": "implementation module repo cases want louder development warnings really errors impossible ignore way configure warnings produce similar relatedly people able easily set unit tests fail proptypes checks fail", "num": "2560", "d": "11/2014"}, {"title": "testable react components", "body": "wrote article dependency injection react using properties tldr javascript var mycomponent reactcreateclass proptypes model reactproptypesshape getstate reactproptypesfunc getdefaultprops return model new mycomponentviewmodel new http getinitialstate return thispropsmodelgetstate render return hello thisstatename enables user override dependencies runtime testing leave implementation untouched problem user multiple viewmodel shared problem using traditional approach well one singleton cacheing effectively nullifys technique use instance level dependency injection currently react two ways pass things runtime child components props react copies props even though technically per instance way passing dependencies runtime ultimate goal write testable react components without mocking module level mock module level excerpt article slower reevaluating module several times module still state entire test file multiple blocks would still need reset state require module block slow difficult test require service locator dependency injector using conflates use violating single responsibility principle tests uses instanceof break could getting different instance require code encouraged written form singletons problematic reasons potential solutions realize people may opinion mocking module level react library think notion passing runtime dependencies somehow support testing story nt involve module level mocking maybe constructor lifecycle function receives props would enable per instance use passed prop dependency another option would stop caching getdefaultprops imagine cached props typically viewed immutable currently way pass arguments component", "num": "2559", "d": "11/2014"}, {"title": "allow classset take arbitrary number arguments support string addition", "body": "classset handy recap however seems fairly common want pass classname props one ends writing something like would nt nice possible related", "num": "2558", "d": "11/2014"}, {"title": "support default params jsxtransformer flag", "body": "following code transformed jsx see transpilers like support transformation", "num": "2557", "d": "11/2014"}, {"title": "reactproptypesshape wtf", "body": "sorry title wtf moment found compare property object schema method call read documentation makes slightly sense see code say makes sense see code anyway know nt highest priority item world would love request name change method least synonym makes sense like really anything", "num": "2556", "d": "11/2014"}, {"title": "provide way specify parts react server markup reused client", "body": "would great able custom checksum validator ignore certain branches domtree attempting reuse markup use case rendering static components static components need rendered rendering server render client currently pass react markup props used generate static markup however waste send props component nt need rendered clientside one major performance concerns using react apps send markup props well usually duplicating data sent client able specify certain components needing client side rerender thus skipping checksum would save kweight initial page load", "num": "2548", "d": "11/2014"}, {"title": "simply want transpile single jsx file", "body": "see transpiled file dumped shell specify output file sounds retarded really could nt find answer documentation", "num": "2547", "d": "11/2014"}, {"title": "unable unmount component using instance rendered null", "body": "common pattern unmount component instance components return case getdomnode also returns code nt always work react internally always knows node component mounted please make information accessible add component method like project process transition backbone views react helper function gets backboneview instance mounted component removes dom way make work react component", "num": "2545", "d": "11/2014"}, {"title": "throw error wrong input dangerouslysetinnerhtml dangerousinnerhtml", "body": "passing html fails silently checked website makes use incredibly hard debug forget html throw error instead", "num": "2542", "d": "11/2014"}, {"title": "idea support object literal property value shorthand jsx syntax", "body": "idea would able would think", "num": "2536", "d": "11/2014"}, {"title": "missing svg mask attribute", "body": "mask attribute ignored svg elements", "num": "2535", "d": "11/2014"}, {"title": "textarea respond value property changing null", "body": "value property textarea changes null undefined non blank value text displayed dom change fiddle captures issue notice behavior different text input", "num": "2533", "d": "11/2014"}, {"title": "rendertostaticmarkup nt wrap expressions", "body": "hello thispropsname render string wraps thispropsname span tag render static markup nt would think datareactid datareactchecksum", "num": "2529", "d": "11/2014"}, {"title": "removing tabindex component attributes remove tabindex set", "body": "tab index put place removing method seen ever sets expect element nt focused tabbing still focusable clicking directly element var attributes thispropsfocusable attributestabindex return reactcreateelement div attributes test", "num": "2528", "d": "11/2014"}, {"title": "vectoreffect attribute svg elements", "body": "hello working project need nonscalingstroke feature could support vectoreffect attribute", "num": "2523", "d": "11/2014"}, {"title": "setstate breaks reactcsstransitiongroup", "body": "called transition transition breaks flash", "num": "2522", "d": "11/2014"}, {"title": "props context merged", "body": "day talking rpflorence usage context reactrouter initial curiosity came needing something like stub context component test concerns angular ryan helped see context basically like props everything still explicit afterwards thinking see value context one thing still nt feel right components concerned parent passes data since basically two merged component would define would include everything canshould passed one place without concerned props get point maybe renamed would additional method passing props anything could passed component via could also passed vice versa something like jsx var parent reactcreateclass childproptypes foo reactproptypesstring getchildprops function return foo bar render function return var child reactcreateclass proptypes foo reactproptypesstring render function return thispropsfoo reactrender documentbody would render html bar baz thoughts", "num": "2521", "d": "11/2014"}, {"title": "jsxtransformer using null comparison spread attributes", "body": "currently jsx gets compiled order pass jshint tests", "num": "2519", "d": "11/2014"}, {"title": "implement shouldcomponentupdate thiscontext", "body": "know officially quite libraries rely seems like getting shape trying understand exactly supposed implemented mind noticed accepts third argument extend also check components nt opt omitting get third argument understandable however presents problem component context owner context consumer implements restrictive way react context updates fiddle javascript var bottom reactcreateclass contexttypes number reactproptypesnumberisrequired render function return thiscontextnumber var middle reactcreateclass shouldcomponentupdate function nextprops nextstate nextcontext return false render function return var top reactcreateclass childcontexttypes number reactproptypesnumberisrequired getinitialstate function return number getchildcontext function return number thisstatenumber componentdidmount function setinterval function thissetstate number thisstatenumber bind render function return reactrender documentbody problem would occur tried give generic contextaware wrote unless opts possible work around adding nt look like good solution need explicitly add necessary every level smart easy slip solved another solution meantime recommended way", "num": "2517", "d": "11/2014"}, {"title": "tables w headers attribute", "body": "working project strict accessibility requirements table putting data implement headers ids attributes meet accessibility see techniques unfortunately headers attribute stripped supported react supported attributes list please add support missing standard attribute called headers", "num": "2516", "d": "11/2014"}, {"title": "unexpected behavior compiling jsx attribute strings containing amp", "body": "repro case jsx fails unexpected token illegal adding one character jsx compiles quite surprising sure going", "num": "2515", "d": "11/2014"}, {"title": "reactdompath attribute gets renamed closure compiler", "body": "following component js var react require react var svg path reactdom var transition reactcreateclass render moduleexports transition using closure compiler advanced level attribute gets renamed add quotes around attribute react nt render attribute", "num": "2513", "d": "11/2014"}, {"title": "automatically remove addendeventlistener", "body": "reacttransitionevents currently contains two methods perhaps cases developer going wait called times usually call let make nicer changing preamble something like javascript addendeventlistener function node eventlistener stepsintransition var metalistener event gt stepsintransition make event listener clean real implementation slightly complex keep track original make sure right thing called done principle seems like improvement", "num": "2510", "d": "11/2014"}, {"title": "automatically passed context property", "body": "given react used serverside rendering server context stores dispatchers really need contextbased registry components need able pull contextbased instances globalstatic instance would extremely useful able specify global property list properties automatically passed parent child specified ex appjs loads appjsx var react require react reactaddinheritingproperty context appjsx render function context instance would apply rendering children well specified controls rendered within parent right example using yahoo fluxibleapp need explicitely pass context children use router store mixins purpose using stores router components making functionality available instance registries storesdispatchers would far easier utilize could simply specify base property use ex simply use rendered instances", "num": "2507", "d": "11/2014"}, {"title": "node fails using reactaddons", "body": "upgraded react require react addons like make simple component using img node get error following trace require react without addons error resolved also doesnt break node types example worked var react require reactaddons var usesother reactcreateclass render function return hello", "num": "2506", "d": "11/2014"}, {"title": "stop using internals reactmultichildreconciletest", "body": "test reaches internals going reactinstancemap way get internals possible test observable effect failing test without testing internals still tests also reach internals primarily around lifecycle state", "num": "2500", "d": "11/2014"}, {"title": "nt make mockcomponent depend jest", "body": "expecting use like looking source requires passed mock already use test runner depend jest", "num": "2499", "d": "11/2014"}, {"title": "make sure child key warning cases", "body": "warn doesnt js var f var g var children f g return g f children turns modifying first time set looking already validated", "num": "2496", "d": "11/2014"}, {"title": "classset uses arrayprototypefilter", "body": "super nitpick current iteration cx makes use mentioned required polyfill older browsers realize addons part react proper sure worth noting working browsers doc perhaps mentioned addons classset docs happy send pr either method", "num": "2494", "d": "11/2014"}, {"title": "returning null causes thisgetdomnode null componentwillunmount", "body": "container component something like modalinner component componentwillunmount using destroy javascriptdata node however props false suppose render nothing thisgetdomnode null componentwillunmount dom node still inspect using chrome reference lost replace instead null works expected bug", "num": "2493", "d": "11/2014"}, {"title": "merge spread attributes", "body": "say component like js boxjsx box mainappjs use like result override switched order result reversed want merged something doable current spread attribute thanks", "num": "2492", "d": "11/2014"}, {"title": "non jsx spread operators depend objectassign", "body": "transpiles works nice dandy implicitly requires polyfill undocumented assume recent change move polyfill module perhaps react reacttools use jstransform spread visitor using one leverages jsx case perhaps note docs somewhere need polyfilled", "num": "2488", "d": "11/2014"}, {"title": "otransform otransform updating opera", "body": "otransform working opera somehow put style object chrome ff works fine latest oprea give element rotate deg programmatically inspect element opera dev tools see crossplatform tranforms applied style ms moz etc chrome ones webkit without actually applied another strange thing actually without leading hyphen worse rotate value changeanimate nt change see code running console nt update style object", "num": "2487", "d": "11/2014"}, {"title": "notes csstransitiongroup", "body": "chatting leebyron zpao intend experiment csstransitiongroup see improved using issue scratchpad keep track thoughts eventually build pr", "num": "2486", "d": "11/2014"}, {"title": "animation docs unclear", "body": "animation docs try explain transition new children eg wo nt work initial render however examples nt make clear moving statement inside call distracts explanation moreover clearly said transition applies new items initial items need play csstransitiongroup feel comfortable contributing docs nt expect pr yet stuckouttonguewinkingeye", "num": "2485", "d": "11/2014"}, {"title": "allow replacing anchoring element", "body": "following html using theme html read messages would like render ul latestmessages react imho currently impossible following components divider divdivider message divdropdownmessagesbox latestmessages ul latestmessages replaces also link icon get two uls nested sure could go hierarchy convert parent elements react components left one single div could anchor encompassing component want render dropdown ul react react option replace element given rendercomponent thanks reading long rant hope solution soon", "num": "2484", "d": "11/2014"}, {"title": "contenteditable warning appears even without children", "body": "rendering output text node child span react components yet still receive component contains managed react responsibility guarantee none nodes unexpectedly modified duplicated probably intentional expected", "num": "2477", "d": "11/2014"}, {"title": "changing props instance bad", "body": "render c bad saw objectfreeze descriptor nt fail really bad doable", "num": "2474", "d": "11/2014"}, {"title": "errors showing console chrome ie firefox", "body": "strange issue react firefox using latest react gem errors inside react components showing firefox console showing normally chrome ie internet explorer google chrome mozilla firefox component nt render error shown happen javascript errors inside react components errors outside react components shown normally tried reproduce problem jsfiddle error shown even firefox thought could issue consolepolyfill tried remove nothing changed expected behavior", "num": "2471", "d": "11/2014"}, {"title": "conflicting esprimafb dependency", "body": "cc zpao", "num": "2470", "d": "11/2014"}, {"title": "missing fields mousemove event maybe mouse events", "body": "using var sample reactcreateclass somefunc function e consolelog elayery elayerx ex ey emovementx emovementy eoffsetx offsety consolelog enativeeventlayery enativeeventlayerx enativeeventx enativeeventy enativeeventmovementx enativeeventmovementy enativeeventoffsetx enativeeventoffsety render function return looking might react taking standard fields across chrome layery give position top element event get using react event like eclienty ecurrenttargetgetboundingclientrect top sure needs fixed thoughts cheers luke", "num": "2469", "d": "11/2014"}, {"title": "update documentation removing tapdelay", "body": "documentation could use little love realize currently changing may removed still required required use reacttapeventplugin confusing use use page rendered ever render touch device detect touch using something like set true related issue tap delay maybe suggest documentation using plugin like tapeventplugin would submit pr really nt know documentation say thanks", "num": "2468", "d": "11/2014"}, {"title": "empty strings translated boolean unit test jasmine", "body": "hi encountered unit testing component basically created component like render using render component print propsdata end get boolean value true define component like get proper value", "num": "2467", "d": "11/2014"}, {"title": "jsxtransformer newline", "body": "jsxtransformer removes newline symbols templates fix problem", "num": "2466", "d": "11/2014"}, {"title": "error boundaries recover errors thrown", "body": "trying put graceful error handling case views crap jsx var mygoodview reactcreateclass render function return cool var mybadview reactcreateclass render function throw new error crap try reactrender documentbody catch e reactrender documentbody however get rendered w following stack trace seems like error throw react bad state thus unmounted handle scenario", "num": "2461", "d": "11/2014"}, {"title": "onsubmit without submit input working", "body": "ca nt handle native submit onsubmit react", "num": "2457", "d": "11/2014"}, {"title": "require react require reactaddons", "body": "building frontend browserify reactify found components use others use seems like set components different instance react nt talk means instantiate app components use seems events fired components nt handled example nt called seemingly instance react different one instance rendered root replaced calls app onereactjs looks like events started handled behavior bug design", "num": "2456", "d": "11/2014"}, {"title": "capybara selenium nt trigger reactdominput onchange", "body": "hi use capybara acceptance testing behaviour differs pure html input input contained jsx component reactdom input nt trigger onchange capybara sets empty string triggered set space example", "num": "2455", "d": "11/2014"}, {"title": "fire often", "body": "like case input text onchange triggered user finished interaction nt think right whenever touch range getting multiple change event like window resize crazy think coherent onchange behavior input text range onchange fired user release slider", "num": "2454", "d": "11/2014"}, {"title": "nt work", "body": "according issue seems way handle vertical input range firefox tried add attribute one seems ignored react complicated handle open pr", "num": "2453", "d": "11/2014"}, {"title": "react soundcloud", "body": "recently gave talk using react flux serverside rendering soundcloud video slidesexamples thought cool share cc amasad zpao", "num": "2451", "d": "11/2014"}, {"title": "misunderstanding project targets wiki", "body": "update wiki removing misunderstanding project targets", "num": "2450", "d": "11/2014"}, {"title": "allow components render abstract elements feature request", "body": "every component create return actiaul element cases nt actually need example attempt transitions like famous would calculate every position hand wrapper becomes unnesseccery introducing something like abstract elements", "num": "2449", "d": "11/2014"}, {"title": "warn second argument render null documentbody null well", "body": "often run making new project example reason passing documentbody react script head body nt exist yet common problem observed beginners tend put scripts react samples use mounting point real problem message would nt believe dom element assume something else wrong without realizing may empty time suggest show different specific warning second argument something like target container null trying mount ready", "num": "2448", "d": "11/2014"}, {"title": "reactaddonsperf undefined", "body": "performance tool seems like incredibly helpful tool trouble figuring components app causing trouble consider screenshot items listed undefined way name components listed name nt helpful could nt seem find anything performance tools section documentation", "num": "2447", "d": "11/2014"}, {"body": "supported react mdn explains use element though normalized html deprecated html time elements related styling obsoleted", "d": "11/2014"}, {"body": "thanks see ecommerce still using font tag sun nov pm cody notifications githubcom wrote supported react mdn explains use element though normalized html deprecated html time elements related styling obsoleted reply email directly view github", "d": "11/2014"}, {"body": "cody said use instead probably drop whitelist future yet", "d": "11/2014"}, {"body": "dupe supposed used production precompile jsx purpose", "d": "11/2014"}, {"body": "happens jsx dynamic think happening also teaching people use jsxtransformerjs installation fastest way get started serve javascript cdn also available cdnjs jsdelivr though agree better precompile people reasons", "d": "11/2014"}, {"body": "reason fast get started way like use inline coffeescript compiler nt production seeing library nt generating dynamic sense word jsx create forms could misunderstood means generate js jsx", "d": "11/2014"}, {"body": "see point learning react though tcombform aware react workflow used handlebarsjs precompile rendering js still available minified", "d": "11/2014"}, {"body": "jsx nothing sugar function calls example returns something factory really store things like nothing functions plain js objects nt contain special string markup format say needs additional compilation like perhaps thought", "d": "11/2014"}, {"body": "temporary fix something like", "d": "11/2014"}, {"body": "react separates children html text allowed browser handles gracefully removing next render react tries change ca nt find workaround give string", "d": "11/2014"}, {"body": "thanks explaining case probably best solution would extend error explanation information option elements behind table etc", "d": "11/2014"}, {"body": "problem whitespace actually meaning html pretty printed json identical pretty printed html also pretty printing light task leave others used jsbeautify past happy", "d": "11/2014"}, {"body": "sebmarkbage want", "d": "11/2014"}, {"body": "think issue actually yeah probably changed", "d": "11/2014"}, {"body": "nice catch think might actually flaws careful prevents browsers add string prototype spicyj branch separated use implicit key stringnumber", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "organization xss policy escape things strip tags like script nt escape tags like know stupid policy changing policy would require rewriting bunch legacy code handling whitelisted tags existing data rewriting security test suites new external security audit instead react components able configure default escaping function offering something similar syntax would make code lot cleaner", "d": "11/2014"}, {"body": "gist code issue stack overflow thread using jasmine running tests karma chrome also weird thing going assignment event callbacks elements see test one fails one succeeds coffee react require reactaddons testutils reactaddonstestutils component comp reactcreateclass handlesubmit e propshandlesubmit handleinputchange e render reactdomform onsubmit handlesubmit reactdominput type text onchange handleinputchange test ddescribe comp beforeeach submithandler jasminecreatespy submithandler comp testutilsrenderintodocument reactcreatefactory comp handlesubmit submithandler assigns callbacks correctly form testutilsfindrendereddomcomponentwithtag comp form input testutilsfindrendereddomcomponentwithtag comp input calls handlesubmit form submitted spyon comp handlesubmit andcallthrough calls handleinputchange input changes spyon comp handleinputchange andcallthrough", "d": "11/2014"}, {"body": "general reaching finding dom component asserting fragile actually wrap dom components regular react components add additional logic event handling controlled inputs work example go actually find thing wrapped input renders wo nt onchange expecting goes forms need handle submit event specially since nt bubble pass handler actual dom component advice refocus testing making assertions way react implemented application nt assert assignment handlers correct actually useful test way assert form handler called way correct fail case input inclined say expected though understandably annoying working better shallow testing tools", "d": "11/2014"}, {"body": "oh ok makes sense thanks clearing", "d": "11/2014"}, {"body": "please attempt use newer stable version react jsfiddle seems offer jsbin offers newest stable version", "d": "11/2014"}, {"body": "hi aackerman also tried newest version actually jsfiddle without jsx", "d": "11/2014"}, {"body": "react writing html never fastest guess slowness see comes jsfiddle look time render takes surround render time taking", "d": "11/2014"}, {"body": "jsxtransformer script used jsfiddle intended basic development needs slow startup generally bad idea preprocessed jsx runtime overhead", "d": "11/2014"}, {"body": "also using development version offers good error messages checks compromising perf", "d": "11/2014"}, {"body": "thanks answers guys tested example using production version one fiddles post using js jsx really nt think issues cheers", "d": "11/2014"}, {"body": "think point use simpler library like underscore templates generates markup string memory performs single dom update case something like documentbodyinnerhtml much faster react", "d": "11/2014"}, {"body": "actually returns whole react lib addons addons added object get using browserify whole time error came updating working fine seems kind weird throwing error right dev could comment great", "d": "11/2014"}, {"body": "gabrielecirulli yea seems like would nt bad idea check createelement johanneslumpe working fine createelement nt really exist added would likely used reactaddons always full react object addons inserted", "d": "11/2014"}, {"body": "talked johanneslumpe irc cause via addons undefined component used", "d": "11/2014"}, {"body": "johanneslumpe yeah became aware figured issue thinking would way helpful react told straight away passing undefined component", "d": "11/2014"}, {"body": "provide simplified test case demonstrating issue thanks", "d": "11/2014"}, {"body": "tried able reproduce problem small one still reproduced app sorry ca nt show code code attempt nt give exceptions coffee react require react appclosing require appclosing view el documentbody addcomponent gt component appclosing oncloseclick gt unmountcomponent reactrender component el unmountcomponent gt reactunmountcomponentatnode el viewaddcomponent coffee react require react reactdom moduleexports reactcreatefactory reactcreateclass displayname appclosing proptypes oncloseclick reactproptypesfuncisrequired oncloseclick gt propsoncloseclick render gt div classname appclosing p classname open console see exception div classname button onclick oncloseclick close differences real app app writtern mixed backbone view react component component inside view component whole views components removed new views rendered component still page found problem", "d": "11/2014"}, {"body": "screenshots click event target components already removed error occured", "d": "11/2014"}, {"body": "based error loading reacts", "d": "11/2014"}, {"body": "browniefed app components mounted backbone views mean react components problem", "d": "11/2014"}, {"body": "far somewhere put globals looked context variable nt finalized seems cover asking nt really proper addons framework right expect need rely consumer wrap things reactwithcontext hardly perfect solution something right may transition reasonably well supported mechanism road", "d": "11/2014"}, {"body": "environmentbrowser", "d": "11/2014"}, {"body": "running yosemite chrome also using jsxtransformer react provided cdn tuesday november paul shannessy notifications githubcom wrote environmentbrowser reply email directly view github sameer chauhan cooper union ee cooperedu", "d": "11/2014"}, {"body": "lol petehunt changed html people complained mention xhtml guess really ca nt satisfy everyone", "d": "11/2014"}, {"body": "sure specifically docs talking additionally nt think make difference picking react adds noise docs going close feel free reopen disagreement thanks", "d": "11/2014"}, {"body": "think tired posted mistake", "d": "11/2014"}, {"body": "could use something like", "d": "11/2014"}, {"body": "suggested solution sufficient thanks would nice consider supporting isdeprecated isobsolete similar support isrequired", "d": "11/2014"}, {"body": "update actually state mutation would alter dom causes error component page including example typing text input bound state", "d": "11/2014"}, {"body": "turns rendering completely unrelated component completely unrelated dom node page causes component become id resets nodecache property discovered debugging given state actions occurs", "d": "11/2014"}, {"body": "debugging appears serverrendered components increase nextreactrootindex variable even though register containersbyreactrootid new component created asks reactinstancehandlescreatereactrootid id use turn returns id occupied server rendered component new component overrides server rendered component causing reference lost overriding happens registercontainer function though would assume bug originates index incremented server rendered component", "d": "11/2014"}, {"body": "found way go around problem including datareactid server rendered component component forced ask createreactrootindex index incrementing variable however believe bug hope someone familiar code find reason removing datareactid server rendered components sufficient", "d": "11/2014"}, {"body": "worries nt think react applications required know server side example two react applications could served two separate services injected page would expect root nodes nt conflict attach point node would sufficient enough identifier numbering applications dom seems like bad idea", "d": "11/2014"}, {"body": "probably sort self time running multiple react instances currently supported absolutely need easily mod react library use different attribute name different instances", "d": "11/2014"}, {"body": "syranide thought randomized root keys server rendering", "d": "11/2014"}, {"body": "zpao oh right yeah work serverrendering actually clientrendering absolutely certain nt raceconditions could cause checksum mismatch good call remember ca nt dynamically render new roots clientside ca nt remember think perhaps nonfatal issues node cache would nt actually cache foreign nodes indefinitely due events priming cache uncertain sounds familiar think really sane way different react instances use different attribute names", "d": "11/2014"}, {"body": "right multiple reacts client going problematic nt understand actual case nt reassign keys mounting existing markup thought picked root key dom think checksums match unless server side generation actually something like phantom determining randomize root id based execution environment instead code path would start server", "d": "11/2014"}, {"body": "zpao oh seems conflated jarails comment issue makes sense yeah clientside reuse serverrendered markup adopts reactid dom increment next index issue quite plainly serverrendered markup reason nonrandomized reactids weird checksum seems correctly done could mathrandom monkeypatchedbroken server environment aware reason react would generate randomized reactids", "d": "11/2014"}, {"body": "zpao seems right quite sure nt broken like", "d": "11/2014"}, {"body": "syranide unfortunately always way infinite todo list fix", "d": "11/2014"}, {"body": "losing performance benefits removing datareactid serverrendered component since seems fix problem getting warnings", "d": "11/2014"}, {"body": "johnydays simply discard already rendered markup client rerender scratch also clear whatever screen say user begun type input edit ps getting warnings react nt think rendered react silently discards", "d": "11/2014"}, {"body": "basically lose performance benefits gained except getting faster initial page paint time would imagine rerendering especially painful mobile devices especially wifi similar connections javascript execution significantly separated initial paint time helps making case getting fixed use case global loading component using another node independent react components make normal javascript class manipulates dom manually much rather use react also react advertised framework selectivelly applied certain parts already developed product issue limits use case rendering parts serverside albeit limited use case", "d": "11/2014"}, {"body": "related note would positive warn user mounting node already contains nodes discarded upon mounting development build", "d": "11/2014"}, {"body": "seems like easiest workaround patch servergenerated string random id seems work okay", "d": "11/2014"}, {"body": "guessing right best solution thanks would generated using current unix epoch time order unique certain limit size reactids", "d": "11/2014"}, {"body": "patched solution use epoch time also account child nodes reference parent reactid", "d": "11/2014"}, {"body": "problem using times easily duplicates fast system low precision example var lt consolelog new date gettime tostring get mostly dupes rather increase buffer range worried collisions getuniqueid requestscoped whatever need singleton manually increment server multiple react strings patched", "d": "11/2014"}, {"body": "thanks fixing child nodes though", "d": "11/2014"}, {"body": "another idea fix framework rather random id could rendertostring either use placeholder id take optional id input started looking like datareactid x string would remain deterministic inputs sure hardcoded test strings staying deterministic would nice particularly affirming compatibility different implementations road render would replace placeholder ids mounted sure would trigger repaint browser might worth keep things deterministic simple developer", "d": "11/2014"}, {"body": "done thanks", "d": "11/2014"}, {"body": "updated aforementioned repo possible workarounds hopefully saves someone else time perhaps documentation expanded example", "d": "11/2014"}, {"body": "seems bug methods classes enumerable please report project", "d": "11/2014"}, {"body": "seems methods enumerable classes class body prototype method declaration equivalent prototype getters setters similar", "d": "11/2014"}, {"body": "document outdated afaik spec draft changed since nov ceane lamerez notifications githubcom wrote seems methods enumerable classes class body prototype method declaration args body equivalent value function args body enumerable false writable true configurable true prototype getters setters similar reply email directly view github", "d": "11/2014"}, {"body": "yes would seem however ie preview chrome seems still class methods enumerable test windows tech preview javascript var class h render return null var g new gpropertyisenumerable render false happy thanksgiving btw", "d": "11/2014"}, {"body": "goes select also figured plenty issue reports please feel free close duplicate", "d": "11/2014"}, {"body": "perhaps reconsider use replacestate issue real issue passing value think remember seeing something else recently ca nt find moment thanks report", "d": "11/2014"}, {"body": "well would recommend erase form state things works absolutely fine getinitialstate returns empty object replacestate called empty object textarea nt erase neither select looks like bug think also seen bug report created one", "d": "11/2014"}, {"body": "meant nt like replacestate api wish setstate", "d": "11/2014"}, {"body": "meant nt like replacestate api wish setstate", "d": "11/2014"}, {"body": "jerk understand replacestate useful gets abused makes sense forms long thing state", "d": "11/2014"}, {"body": "zpao oh yes forms definitely makes sense maybe another api like resetstate would useful call state resetting getinitialstate anyways issue textareas selects clearly bug update ok source code reactclassjs comments said replace state going deprecated really going deprecated remain way reset state use setstate function zpao maybe could unveil good way reset forms far logical option thissetstate thisgetinitialstate getinitialstate declare form fields", "d": "11/2014"}, {"body": "example pattern useful", "d": "11/2014"}, {"body": "works make small example shows problem", "d": "11/2014"}, {"body": "nt appear reproducible react react addons gist least node version react node using react addons", "d": "11/2014"}, {"body": "hmmm dig bit using latest master digging code seemed like problem coming react could certainly wrong", "d": "11/2014"}, {"body": "pinned mixin undefined serverside context react throw error indicate fact", "d": "11/2014"}, {"body": "mixins simply ignored right referenced looking early error warning", "d": "11/2014"}, {"body": "mean always something like seems like odd choice silently ignore undefined mixin least fact default behavior feature pretty prominently mixin docs good reason", "d": "11/2014"}, {"body": "thanks tracking going close dupe", "d": "11/2014"}, {"body": "aside potential perf issues one issue handle nested complex structures like arrays concatenation union array objects deep object merging lead unexpected behaviour often implementations allow specify merge strategy sure would prop type declaration", "d": "11/2014"}, {"body": "indeed like see option using proptypes perhaps optional boolean parameter problem would course handle jsx syntax", "d": "11/2014"}, {"body": "really behavior want control calling createelement behavior defined element reactcreateclass could see useful proptype map behavior baked nt think want elements much flexibility though either new proptype defined behavior keep simple also use state var", "d": "11/2014"}, {"body": "docs pretty clear currently supported nt look like yet nt lot experience contributing might simple changed based source", "d": "11/2014"}, {"body": "pull request may good starting point wonder add svg tags", "d": "11/2014"}, {"body": "design continue discussion feel necessary", "d": "11/2014"}, {"body": "going mark duplicate please comment disagree reasoning", "d": "11/2014"}, {"body": "thanks spicyj sorry nt see issue still think makes good sense treating arrays terminals said dying without still added documentation would great idea maybe pull addition docs saying merges top level sure best way word", "d": "11/2014"}, {"body": "close enough close one", "d": "11/2014"}, {"body": "cc vjeux", "d": "11/2014"}, {"body": "tried several days use angular injector caters extensively everything class react render functions naturally instantiate components make approach futile", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "another technique wrapping react johnlindquist", "d": "11/2014"}, {"body": "guess really boils two problems default properties copied possible add another lifecycle method construction time resolve issue", "d": "11/2014"}, {"body": "using angular injector react would something like meet requirements", "d": "11/2014"}, {"body": "question would use set seems like like misuse goal set instance level props provide sane defaults case props missing side loading model via default props breaks explicit parentchild hierarchy introduces nonexplicit entry vector seems like would better served conceptually state instance level stuff example flux implementations something like method called onchange getinitialstate reason would nt want state", "d": "11/2014"}, {"body": "great question jquense trouble way pass something instance form outside right using props useful pass things pass different implementations test time also forces code interface instead implementation mocking module level problematic reasons listed hoping react facilitate different style answer question", "d": "11/2014"}, {"body": "cascadian cool approach indeed similar road traveled ran issue though injecting classes one class injected might dependency could nt get work needed class pass react create class instance constructing new viewmodel receive http construct using", "d": "11/2014"}, {"body": "cascadian feel odd using dependency injector inject classes instead instances", "d": "11/2014"}, {"body": "gotcha iammerrick see advantage simple pass want via props use default instead mocking module personally would something middle mock component instead mocking whole model module another pattern used albeit complicated use state props provided might bit overkill situation works great making controlleduncontrolled component props larger issue react seems pretty set better worse testing story mostly due way fb jest good indicator feel module level mocking right way handle mocking cjs environment definitely see one cold disagree though huge fan either spent time trying figure good way di react mostly kept coming back use explicit props nt rely defaults best practice verbose repetitive sort react paradigm explicitness abstraction", "d": "11/2014"}, {"body": "iammerrick feel odd using dependency injector inject classes instead instances think angular di transientscope annotation would accomplish almost thing want avoid injecting classes var http function return get function diannotate http new ditransientscope var mycomponentviewmodel function return http diannotate mycomponentviewmodel new diinject http diannotate mycomponentviewmodel new ditransientscope ran issue though injecting classes one class injected might dependency could nt get work needed class pass react create class instance give example nt quite follow sample code angular di injects http class mycomponentviewmodel factory function scope mycomponentviewmodel constructor similarly mycomponentviewmodel class injected function create react component", "d": "11/2014"}, {"body": "nt buy arguments listed mock module level sure slower skeptical slow jest pretty fast using many thousands thousands test test suite significantly hinders workflow uses module mocking often use clearcache reset cache limitation jest inherent model could done automatically let fix slow arguably distinction arbitrary academic terminology argument practical argument confusing part jest require outside inside forbid requires automatically ensure runs isolated scope limitation model implementation love see pull request fix arguably overreliance statics problem yet see dependency injection automatically solve still requires restructuring think point making orthogonal testing assume want dependency injection production runtime solve issues said would like accommodating try address concerns first moving toward encouraging shallow testing rather deep testing asserting renders one level deep rather implementation details lower level components see avoids need mock nested components assert reactelements rather asserting classes get instantiated second moving towards using standalone plain classes instead reactcreateclass use di system would use top classes ie able wrap classes di provider third concern memoized solvable wrapping function invoke function getinitialstate time makes effectively lazy function capture additional dependencies closure", "d": "11/2014"}, {"body": "may right commonjs environment fast enough amd brutally slow sure clearcache resetting currently loaded modules fair enough agreed coming angular land might bit attuned di oriented workflow need getting used coding without injector thank trying address concerns appreciate time put response right memoization solution much looking forward move classes thank", "d": "11/2014"}, {"body": "agreed would nice implementation like javascript var arraypush arrayprototypepush function cx var index var length argumentslength var classnamesofar index lt length var item arguments index item null continue typeof item object arraypushapply classnamesofar objectkeys item filter function classname return item classname continue typeof item string classnamesofarpush item return classnamesofarjoin although rather like jstransform would let us", "d": "11/2014"}, {"body": "courtesy addon feel free fork improve believe intent compatible css selector minification compatible dynamic class names", "d": "11/2014"}, {"body": "hey guys putting implementation utilized tools within react handle multiargument issue coffee classset args gt classnamedefinition arg args string typeof arg classnamedefinition key true key argsplit else object typeof arg classnamedefinition reactaddonsupdate classnamedefinition merge arg reactaddonsclassset classnamedefinition code arguments passed number strings strings spaces objects data merged using react addons", "d": "11/2014"}, {"body": "come right exposing stub implementation internally gets statically transformed string concatenation far wanted keep things sync nt diverging patterns close generic totally writable would support people publishing better impl npm perhaps deprecating one expose", "d": "11/2014"}, {"body": "since still use jstransform get going close since nothing actionable wait thanks filing filing jstransform", "d": "11/2014"}, {"body": "worries took longer find jstranform otherwise would started", "d": "11/2014"}, {"body": "intuitive imo", "d": "11/2014"}, {"body": "would nt much better imo would expressive", "d": "11/2014"}, {"body": "shape certainly understood circles entered parlance optimizations sharing maps objects shape plenty advice code change shape benefit speed increases would nt surprised see term thrown around future necessarily advocating suggesting origins fwiw think feels foreign context", "d": "11/2014"}, {"body": "like bloodyowl well", "d": "11/2014"}, {"body": "mczepiel understand terminology used standpoint api facebook making special effort ensure readability react code instantly understood would venture guess frontend js developers looked optimization documents busy trying get applications working across browsers node advanced frontend developers may intimate terminology though completely agree interms makes sense people first glance many suggestions superior throw suggestions would make better terminology first glance", "d": "11/2014"}, {"body": "suggestions definitely seem sensible use shapes describe models application still feels weird foreign every time see code like shorter descriptor would nice seems vague", "d": "11/2014"}, {"body": "completely agree jordansexton suggestions good state bit big honest think would better used think even changing would easier understand every time see want write", "d": "11/2014"}, {"body": "agree mbrio current nt seem useful applications think object could properties one type even properties would better described shape declared names properly documented considering another option would making check see value provided proptype object proptype current behavior used object properties must declared type object acts", "d": "11/2014"}, {"body": "jordansexton making method take shape proptype go ahead create fork see pull change", "d": "11/2014"}, {"body": "jordansexton looks like nogo function lot complex immediately seems pass instance ensure shape property matches see tests ask method incorrectly named well think current method called current something like", "d": "11/2014"}, {"body": "far see method proposed would still work long passed type use current behavior still supports complex cases shown tests otherwise object literal nonproptype object used shape descriptor", "d": "11/2014"}, {"body": "naive untested implementation", "d": "11/2014"}, {"body": "jordansexton meant previous comment nt believe reused jobs one checks object conforms specific schema one ensures property object conforms specific schema believe functions warranted needed current incarnations combining functions one believe would make confusing use word looking back suggestions function names written comment inclined suggest renamedaliased renamedaliased suggestion get rid functions create new function allows wildcards coffee checks ensure properties numbers reactproptypesobjectconformsto reactproptypesnumber checks ensure object properties b numbers reactproptypesobjectconformsto reactproptypesnumber b reactproptypesnumber gets confusing handles wildcards mixed properties coffee checks ensure property object properties numbers reactproptypesobjectconformsto reactproptypesnumber reactproptypesobject sure feel may engineering validation system props", "d": "11/2014"}, {"body": "happening sending result standard default terminal might want redirect specific file exists new one created see", "d": "11/2014"}, {"body": "assumed seeing first line output something like output nt happen nice thanks", "d": "11/2014"}, {"body": "fixed please close issue", "d": "11/2014"}, {"body": "inclined say talked lot making use different syntaxes trying keep minimal possible adding already pretty big deal cc sebmarkbage", "d": "11/2014"}, {"body": "try keep syntax discussions way wider group contributing syntax make worth extra weight language think difference might confusing last two already supported like way think though feel strongly open issue", "d": "11/2014"}, {"body": "closing favor", "d": "11/2014"}, {"body": "believe misbehaving setting makes uncontrolled make attempt change value", "d": "11/2014"}, {"body": "case thinking imagine series state transitions perhaps instead single button form would sort selector loads series objects data source one transitions sets property null end value last object textarea nt seem right see though saying might taking concept two way binding little literally currently working around something like nt big deal", "d": "11/2014"}, {"body": "syranide setting null make uncontrolled nt sound right nt looked linkedstatemixin long time also would expect behavior input textarea", "d": "11/2014"}, {"body": "zpao treated mostly identical set throughout react think also yeah agree think makes sense reset becoming uncontrolled deterministic one also one easiest reason", "d": "11/2014"}, {"body": "one driving nuts finally got bottom things simpler example nt use pretty sure property given component controlled regardless value assigned", "d": "11/2014"}, {"body": "intentional spans react implementation detail diffing done easily since means nt use react client side point wrapping", "d": "11/2014"}, {"body": "alright fair enough", "d": "11/2014"}, {"body": "find specify attribute css nt need wait", "d": "11/2014"}, {"body": "think valuable request data floating around context instead accidentally getting props knowing thursday november brent burgoyne notifications githubcom wrote day talking rpflorence usage context reactrouter initial curiosity came needing something like stub context component test see value context one thing still nt feel right components concerned parent passes data since context props basically two merged component would define proptypes would include everything canshould passed one place without concerned props get point getchildcontext maybe renamed getchildprops would additional method passing props anything could passed component via context could also passed props vice versa something like var parent reactcreateclass childproptypes foo reactproptypesstring getchildprops function return foo bar render function return var child reactcreateclass proptypes foo reactproptypesstring render function return thispropsfoo reactrender documentbody would render bar baz thoughts reply email directly view github", "d": "11/2014"}, {"body": "would mean essence could achieved explicitly like child changes explicitly pull think brentburg best practice use components really need state also use nt refer nt need worry beyond resolving also think api needed use context populate default props covers child seems like declaring proptypes props pass statetypes creatingamending child context nt need contract parent putting otherwise child would need handle missing context reason need maybe nt instead context passed", "d": "11/2014"}, {"body": "midst revamping context good time bring think important access things inside context props prevented using key propcontext used elsewhere context distinct thing state props think important make sure distinction nt lost uses intentional actually similar discussions long ago merging props state single data blob arguments ownership intention came going say like thinking seriously awesome pretty sure sebmarkbage agree let comment case", "d": "11/2014"}, {"body": "hey folks using mixin scope well props method resolve first looks props scope given key create new scope well components render methods stuff like explicit need call resolve need find value nt care came", "d": "11/2014"}, {"body": "often intentional poor lint warning test true unlike", "d": "11/2014"}, {"body": "true common way checking undefined null however strict type checking using recommended react team feels unnecessary enable jshint test end thought make recommendation", "d": "11/2014"}, {"body": "use places check think continue appreciate recommendation though knows maybe change future", "d": "11/2014"}, {"body": "extremely good question thanks raising case manually pruningoptimizing tree recalculation seems need request access context variables relevance calculation could also consider fancy things like pass hash full context even full context necessary sebmarkbage thoughts", "d": "11/2014"}, {"body": "yeah problem middle components nt know context distant child might need way know declare even able correctly implement", "d": "11/2014"}, {"body": "wonder context propagation could happen separate tree traversal without blocked falsy middle basically parent context changes mark descendants receive context dirty matter distant ancestor context change effect state change descendants opt receive new regardless parents said", "d": "11/2014"}, {"body": "gaearon think case need rerender everything wo nt effect pruning subtrees otherwise context inconsistent state element tree", "d": "11/2014"}, {"body": "andreypopp think middle components effect whether descendants receive new context like effect whether receive new state case numbers would incrementing inconsistency", "d": "11/2014"}, {"body": "put differently think work exactly context owner something like store result gets written descendant context consumers declared keys context receive context subscribed store updated state nt mean actual want show model inconsistent flux app middle context act like sideway storage scoped subtree", "d": "11/2014"}, {"body": "edit wo nt work parent may change talked glenjamin irc convinced changing context might bad idea per se lose ability reason something updated root update implicitly causes different child updates reasonable solution see completely forbid context changes make similar gets called component mounted would make context hell lot simpler think remove third parameter since context never updates case need updates context owner eg like reactrouter wants passed topdown usage mixin cc mjackson nothing prevents passing descendants subscribe changes put reasonable solution", "d": "11/2014"}, {"body": "think key question answer scenarios passing data preferable passing data triggering event make component call using context passing object references around quite happily ever write objects read eg", "d": "11/2014"}, {"body": "use case context parameters applicable across potentially large subtree nt want pass generic container nodes example might color theme large number nodes might listen see background color supposed white black would nt want pass around everywhere parameters making getchildcontext behave like getinitialstate would nt actually solve problem could always replace parent node provides given context value another parent node provides different context value affected subtree indistinguishable mutating context variable value think find solution avoids users wire change listeners think andreypopp may right least need provide way shouldcomponentupdate know anything context changed decide always return true context variable change chat sebmarkbage later today see thinks", "d": "11/2014"}, {"body": "making getchildcontext behave like getinitialstate would nt actually solve problem could always replace parent node provides given context value another parent node provides different context value affected subtree indistinguishable mutating context variable value ouch totally right nt considered", "d": "11/2014"}, {"body": "jsfb second thought nt quite understand comment replace parent node entire child subtree remount anyway would nt", "d": "11/2014"}, {"body": "currently yes remount partly implementation detail imagine discussing implementations ramifications reparenting subtrees without loosing node state sebmarkbage chatted came following conclusions shouldcomponentupdate complex escape hatch implementation requires solid understanding happening component reason unreasonable assume know context variables used since already need know properties used used change probably nt making situation much worse already improvement using old owner relationship therefore issue still worth discussion probably nonblocking contexts complex featureexperiment point probably going need thinking officially supportdocument learn likely continue iterate topic sebmarkbage let know missed anything good discussions though thanks feedback", "d": "11/2014"}, {"body": "thank taking time discuss unreasonable assume know context variables used since already need know properties used used toplevel component implements using purerendermixin avoid extra updates nt mean knows somewhere inside happens contain depends router context gets even worse frameworks popular react routing framework use context may even aware somewhere apps nt change active link state somebody optimized toplevel components literally idea declare corresponding even get way components aware possible descendants basically move contextdependant component anywhere inside enabled component break subtly therefore use context way avoid subtle breakage unrelated components never implement goes react saying frameworks top react swannodette om make ish default weird cut like means contextbreaking every component agree blocking work ca nt agree current situation satisfactory context used hard implement context downright impossible unless make assumption component always aware could popular libraries already rely context heavily understand supported feature opinion either needs least possible make work disabled libraries forced use subtly broken", "d": "11/2014"}, {"body": "known start introduced contexts need able undocumented unsupported features experimental features able iterate find special cases example nt contexts would nt known need changed containerbased instead ownerbased subtle breakage part contract using undocumented features think need bypass new context anywhere parent tree potentially something determines entire subtree needs reconcile", "d": "11/2014"}, {"body": "sebmarkbage suppose could work context hardly meant change often case nt need third parameter", "d": "11/2014"}, {"body": "correct always kind useless", "d": "11/2014"}, {"body": "think need bypass shouldcomponentupdate new context anywhere parent tree makes lot sense context changes parent need override falsy subtree begs question know context changes state props seems like would need keep copy current context around somewhere diff result whenever called", "d": "11/2014"}, {"body": "using contexts way managing store references like explicitly define stores required mock sample data stores need test component avoiding instantiate larger framework pass simple readonly stores known data serverside rendering simplifies serverside case bulk application code used looking example implementation store data accessed getters elements cache store data want single version truth simple nonasync example render would typically something like components attach listeners stores nt fully decided granularity stores onchange event however nt decided two things listeners individual property changes stores contain stores example people fb users large complex async store reuse store structure personstore one general collection getfriends getperson etc many unique instances person store type individual person example component requires people store context param uses personid prop identify subscribe specific person store introduce dynamic changes let say currently logged user logs someone else logs ignoring fact probably redirectrefresh page real application would element update let also assume element still page nt destroyed would expect application logic first removedestroy existing people store component needs stop listening updates would recommend reactclass api eg oncontextchange prev new element compare two peoplestore instances let ignore public data assume new peoplestore null element would unsubscribe previous store trigger render render would show user unknown type message user logs another user new store created element reattaches render thing new data behind scenes thisrender could nt synchronous designexample make sense render calls need collected framework batched together unlike props listening stores outside core react role managing rendering nt think context change involved shouldcomponentupdate despite example including changing context values new store object nt think stores going immutable highlevel nature think typical flux application design operate subscriber model callbacks async etc base store object usually live life application", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "workaround believe grab domnode ref add need", "d": "11/2014"}, {"body": "nt know much behavior closure compiler recommend try using new api creating elements maybe solves problem", "d": "11/2014"}, {"body": "would nt solve closure still see bare key try crush real option set externs file make sure nt extern files maintain though would guess difficult least partially automate based property config files", "d": "11/2014"}, {"body": "since nt using jsx could also course quote props object closure skips", "d": "11/2014"}, {"body": "think already solved official yet issues eg", "d": "11/2014"}, {"body": "please provide details surrounding code might causing issue whenwhere seeing error jsx compilation browser node thanks", "d": "11/2014"}, {"body": "need use everywhere seems may break weird could causing", "d": "11/2014"}, {"body": "aackerman code seems compile fine see error browser notice using following versions react tools reactify reacttools reactify could causing problem syranide try switching everything reactaddons see works", "d": "11/2014"}, {"body": "skiano think reactify uses jsx compiler react may run issues check make sure reacttools version matches using nt related seeing special internal wrapper component specific event handling mostly likely something packaging browser screwing seen recent", "d": "11/2014"}, {"body": "thanks zpao thread seems like exactly happening check gulp file make sure bundling react twice", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "agreed react seems assume jest testing", "d": "11/2014"}, {"body": "keep mind js var wrapper reactcreateclass render function return thispropschildren reactrender documentbody nt warn", "d": "11/2014"}, {"body": "good catch let put addons section polyfill docs contained might also worth mentioning additional polyfills may required see addons index", "d": "11/2014"}, {"body": "intended translates temporary implementation detail", "d": "11/2014"}, {"body": "actually always returns return render want guard appropriately direct dom operations component failure happening sounds like saying long rendering something work unmounts return null", "d": "11/2014"}, {"body": "zpao tried getdomnode return null depending owner render see example seems like bug", "d": "11/2014"}, {"body": "plievone seems like got zpao componentwillunmount modalinner failing parent modal returns null", "d": "11/2014"}, {"body": "hmm case sound like bug bet adding something null component cache try get dom node unmounting child hits cache traversing bails never getting actual existing node disappears cc chenglou test case want fix", "d": "11/2014"}, {"body": "ca nt decipher actual issue sounds like", "d": "11/2014"}, {"body": "complete repo issue calling works calling doesnt hope helps", "d": "11/2014"}, {"body": "bit separate", "d": "11/2014"}, {"body": "manually patched onto latest master fixes issue per jsfiddle nice work spicyj", "d": "11/2014"}, {"body": "schotime glad hear", "d": "11/2014"}, {"body": "use write something like box using lt code gt joinclasses lt code gt helper available built react via npm sorry box", "d": "11/2014"}, {"body": "thanks spicyj quick worked like champ", "d": "11/2014"}, {"body": "syntax nt currently documented decide encouragedocument sure mention required polyfills time well", "d": "11/2014"}, {"body": "documented transferring props definitely noted linked transferring props section learned first place believe may reading wrong took paragraph invitation use syntax perhaps mentioning polyfill appropriate rewording docs make clear using internally", "d": "11/2014"}, {"body": "thanks nt realize wrote docs", "d": "11/2014"}, {"body": "maybe drop docs refer proposal needed supported reactspecific patterns copypaste mistake internal docs evident referring fb code base", "d": "11/2014"}, {"body": "drop nt mention", "d": "11/2014"}, {"body": "yea need document harmony stuff separately edge cases considerations", "d": "11/2014"}, {"body": "nt super well documented need use well special case ms something different setting styles vis js reason must specify styles camelcased eg update code report back fixes things read also fwiw latest opera built blink maintain prefix would thought picked one", "d": "11/2014"}, {"body": "maybe warn", "d": "11/2014"}, {"body": "otranform fixed hyphens issue however style object still update update transform height width etc updated start reason updating height width style object left weirdly actually updating transform stays like nt update style object height width change change left opera object stays intactcorrect like updated values chrome ff", "d": "11/2014"}, {"body": "think might bug diff algorithm opera also translatex capital x nt help", "d": "11/2014"}, {"body": "animation doc mentioned csstransitiongroup wo nt affect children initial render new children added subsequent renders per leebyron stylistic choice nt get flash random transitions page created however sometimes transition load exactly want presently way manage ctg maintaining seo transitioned elements options pass prop allows developer optin transitioning initial render use separate transition state initial render eg expect developers handle css eg", "d": "11/2014"}, {"body": "things like scrim nicer toggle classname manually removing dom however without ctg element might disappeardie transition completed unless manually manage complexity perhaps isshould manual trigger enterexit eg value treat child like mounted mount element classes appropriate", "d": "11/2014"}, {"body": "interesting vaguely related proposal chrome css transitions pages navigation transition spec would nice able experiment something similar today using combo ctg reactrouter", "d": "11/2014"}, {"body": "weird set container determine class name child given markup intuitive selector", "d": "11/2014"}, {"body": "leebyron initial implementation nt know make react git repo globallooking statements play nicely webpack implementing testing npm version copying changes back fork feel addition prop sugar thispropsdelay stands want feathercascading transition add css would much nicer", "d": "11/2014"}, {"body": "props planning adding pr bool run mount well update default sugar setting style children bool determine whether children rendered useful binding prop controls whether something shownhidden default architecturally think makes sense set rather children bigger discussion", "d": "11/2014"}, {"body": "today showerthought important start pages want seo entry transitions nt enough way architected needs remain page children destroyed effectively manage transitions therefore need introduce another component manage delays introspect use wait specified period altering child making presence transparent pointofview child need dig see handles multiple transitions different periods conceptually bit delays different bit transitions work advertised", "d": "11/2014"}, {"body": "yes currently replace entire contents container wo nt true best workaround probably add extra wrapping element around", "d": "11/2014"}, {"body": "could would add extra wrapper dropdown stops working would modify party code bootstrap theme code css overrides undesirable resulting html would correct", "d": "11/2014"}, {"body": "hmm interesting specialcase curious wo nt pressing ctrlb wrap selected text operating controlled mode made possible marked means every update checks dom compares current value stops cursor jumping end every key press realistically applied may become prohibitively expensive expert believe best handled manual dom interaction feel warning may preferable regardless free ignore guarantee issue cc salier", "d": "11/2014"}, {"body": "hmm interesting specialcase curious wo nt pressing ctrlb wrap selected text behavior varies browser yes even beyond browsers strange things text nodes inside react quickly get sync dom even vanilla text editing behavior expert believe best handled manual dom interaction pretty much really decent compromise react either need completely handsoff rope react updates need maintain absolute control component content selection etc ignore warning latter option faint heart see potential support editables nt think much need point", "d": "11/2014"}, {"body": "think close noted child warn really know feel free ignore", "d": "11/2014"}, {"body": "correct way currently drawbacks need aware check docs ps yes bad props considered immutable nt mutated may mutable", "d": "11/2014"}, {"body": "reactaddonsclonewithprops correct way currently drawbacks need aware check docs thanks ps yes bad props considered immutable nt mutated may mutable even adding rendering first props passed concrete instance passed react renders dirty anyway use way", "d": "11/2014"}, {"body": "reactelements ie return render considered immutable afaik infact believe entire reactelement considered immutable", "d": "11/2014"}, {"body": "render method called component attached rendered component case descriptor nt nothing moment", "d": "11/2014"}, {"body": "ca nt imagine variable used inside react likely something code", "d": "11/2014"}, {"body": "syranide example actually happen inside event weird ca nt see errors firefox using chrome", "d": "11/2014"}, {"body": "andreynering might bug ff chrome similar issue back would suppress error messages possible enable pause exception ff try see helps", "d": "11/2014"}, {"body": "syranide think right firefox bug tried pause exception error thrown nt show console aparently people similar problems like react related", "d": "11/2014"}, {"body": "get fresh nt give errors", "d": "11/2014"}, {"body": "zpao really weird development npm install react react nodemodulesreact envify esprimafb jstransform xtend development npm update npm warn unmet dependency requires esprimafb load npm warn unmet dependency npm warn unmet dependency version xtend nodemodulesreactnodemodulesenvifynodemodulesxtend objectkeys esprimafb nodemodulesreactnodemodulesenvifynodemodulesesprimafb jstransform nodemodulesreactnodemodulesenvifynodemodulesjstransform sourcemap amdefine esprimafb nt warn install obviously installs update though complains unmet", "d": "11/2014"}, {"body": "weird nt understand npm sometimes bet goes away gets shipped envify nt esprima dependency", "d": "11/2014"}, {"body": "syranide exactly weirdness trying avoid going update latest hopefully hughsk get around reviewing", "d": "11/2014"}, {"body": "zertosh ps talkpresentation excellent", "d": "11/2014"}, {"body": "think envify publishing deps pick automatically", "d": "11/2014"}, {"body": "amp properties nt standard", "d": "11/2014"}, {"body": "gives original event react bring along polyfill nonstandard attributes", "d": "11/2014"}, {"body": "yeh started thinking looked nt sure standard fields hah looking looks like standard ones supported looked first sorry close", "d": "11/2014"}, {"body": "using jsx transform reacttools version afaik always kept empty string case correctly boolean naked props currently correctly case indeed empty string", "d": "11/2014"}, {"body": "insert explicitly similar really want whitespace recommend use whitespace instead", "d": "11/2014"}, {"body": "sounds like solution closing", "d": "11/2014"}, {"body": "quite places ca nt throw exceptions without react ending invalid state ca nt trust developers solution know put trycatch render", "d": "11/2014"}, {"body": "ah thanks mean matter trust prevent using react component whatnot plan support error handling", "d": "11/2014"}, {"body": "longlho area believe two biggest blockers many browsers ruin errorcallstack rethrowing trycatch incurs performance penalities hot paths", "d": "11/2014"}, {"body": "yeah may hear conversation error boundaries means making way handle sort thing gracefully something want find good solution nt think tracking issue though let use one", "d": "11/2014"}, {"body": "ah thanks guys sound like big issue definitely important given react stateful would nt require sort sandbox rendering make sure everything cool apply new state guess active effort front", "d": "11/2014"}, {"body": "easy follow actually going would possible create repro", "d": "11/2014"}, {"body": "going close make minimal repro case please post reopen", "d": "11/2014"}, {"body": "definitely design ca nt think would happen nt even sound like something control files end referencing module browserify nt run bundle twice", "d": "11/2014"}, {"body": "definitely happen webpack well extraordinarily confusing debug", "d": "11/2014"}, {"body": "created simple example tkafka explained originally bundling browserify amp reactify though latter effect bundling looked generated bundle single copy react bundled would love see case repros guess typically third party perhaps component required also requires react different version dependency maybe even way ran npm install dupes", "d": "11/2014"}, {"body": "zpao aha right works adding react thispropsreact code project results false seem like culprit gulpfile investigate", "d": "11/2014"}, {"body": "investigation culprit problem building app vendor files separately see simplified example containing react containing app code excluding specified dependencies happened dependencies array browserify seems compare react reactaddons textually packaged keeping thus two instances", "d": "11/2014"}, {"body": "thanks investigating nt think first something like last hopefully better able diagnose future kill nt happen ever", "d": "11/2014"}, {"body": "zpao would awesome one way could check whenever user requires hold nt slow things user requested addons sure nonaddon react well least warn console", "d": "11/2014"}, {"body": "capybara problem fill input nothing capybara wo nt send keystrokes browser result events emitted reference would paste author capybara jnicklas wrote ticket attached bottom post simplified version happens try fill input capybara check get filled input contains something page load change value clean capybara would type requested value key key use one available hacks selenium know using link contains one change tests architecture avoid blankstrings checking possible reference", "d": "11/2014"}, {"body": "since fixed capybara true reactbased inputs onchange triggered simple html inputs set field sure right commit trigger change events clearing fields", "d": "11/2014"}, {"body": "weird ignore change method fastest hacky solution found execute react event using testing library use selenium driver really shaming way achieve goal guess want well simulate backspacing whole input", "d": "11/2014"}, {"body": "ended monkey patching capybara selenium granted work selenium driver nt require changes test suite ruby class capybara selenium node alias origset set def set value nativesendkeys backspace valueempty origset value end end", "d": "11/2014"}, {"body": "understanding capybara commit right setting value trigger change event test click body order event fire would happen input focus value set via js click triggered change event actually firing without", "d": "11/2014"}, {"body": "nonreact input change fire called need click anywhere commit really relevant relevant tested capybara selenium work way nonreact input", "d": "11/2014"}, {"body": "sorry said shit onchange like onkeypress updown whatever make sense let onchange range way debounce said maybe offer new thing original debounced onchange", "d": "11/2014"}, {"body": "standard yet likely going end standard makes sense add otherwise use whatever mechanism add adding nonstandard attributes future though simply componentdidmount call", "d": "11/2014"}, {"body": "indeed thanks workaround", "d": "11/2014"}, {"body": "awesome want add wiki also add video videos page docs though growing bit unwieldy days want put somewhere", "d": "11/2014"}, {"body": "going close since real things happen outside issue", "d": "11/2014"}, {"body": "wow pretty awesomely long list going make tad bit longer hehe see", "d": "11/2014"}, {"body": "removed target dates never solid commitments estimation time thanks reminder", "d": "11/2014"}, {"body": "simply limitation react current dom implementation certainly dropped future return current simply translate however entirely sure asking intend render dummy components never dom probably supported future probably considered good practice", "d": "11/2014"}, {"body": "syranide post example suppose component renders html shows react devtool actually element could useful cases people nt want components mounted also cases child positioned would allow dom simpler", "d": "11/2014"}, {"body": "jiyinyiyong ah see answer though limitation current dom implementation react nothing wrong example must wrap dom component work return array allowed afaik devs expressed intent fix future", "d": "11/2014"}, {"body": "glad \u5468\u4e00 andreas svensson notifications githubcom wrote jiyinyiyong ah see answer though limitation current dom implementation react nothing wrong example groupa must wrap thispropschildren dom component work return array allowed afaik devs expressed intent fix future reply email directly view github", "d": "11/2014"}, {"body": "syranide know actual limitation allowing components return arrays render result curious know investigate deeper", "d": "11/2014"}, {"body": "leoasis nt really investigated exact obstacles broadly speaking problem current implementation expects components correspond exactly one dom node shared simple case handle interms lazily associating node component also mutating root components able handle lot complex none infrastructure currently exists react components would need aware sibling components etc etc", "d": "11/2014"}, {"body": "syranide see yeah seems something hard tackle since libraries limitation definitely trivial problem solve check source try understand bit better assumption one component one dom element makes code easier thanks", "d": "11/2014"}, {"body": "leoasis looking contribute general would recommend looking areas react would expect affect internal api considerably quite nontrivial ways even managed get working may much friction realistically get approved said figuring needs done pushing bitesized prs always possibility objections sebmarkbage", "d": "11/2014"}, {"body": "syranide exercise get know internals react honestly especially given guys awesome could nt figure yet nt think come something change curiosity anyway already research pain points already identified helpful read try contribute", "d": "11/2014"}, {"body": "think many nt really understand code nt work otherwise like documentbody warning", "d": "11/2014"}, {"body": "setting component fix done automatically use jsx", "d": "11/2014"}, {"body": "oh great thanks using coffeejsx appearantly nt report issue instead", "d": "11/2014"}, {"body": "sorry bother one time input value example fixed times intuitively event even fire however strange way equal fixed value input field times either fixe fixed oneothercharacter", "d": "11/2014"}, {"body": "menelaos problem input value example fixed times value fixed never update value thus appears readonlyfixed readonlyfixed input field sideeffect controlled component fixed value read link posted might become clearer ps want readonly input set attribute", "d": "11/2014"}, {"body": "someway call release notes nt made explicit", "d": "11/2014"}, {"body": "pselden try keep issues related development closing nt think anything actionable continue optimize react feel free continue discussion still questions", "d": "11/2014"}, {"body": "syranide understood sorry closed initially thought may performance regression long lists appears expected head irc channel discuss", "d": "11/2014"}, {"body": "sure documentation deprecatedbutstillworking code wrong prop validation docs still shows deprecated", "d": "11/2014"}, {"body": "solved check md files linked recent documentations sorry keeping docs uptodate transition periods nt easy think relatively wellmaintained til", "d": "11/2014"}, {"body": "chenglou changes pushed live", "d": "11/2014"}, {"body": "pushed sorry delay confusion", "d": "11/2014"}, {"body": "seeing error using jsx grunt building duo affect issue nt ideas right", "d": "11/2014"}, {"body": "spoke fast used twice accidentally never mind", "d": "11/2014"}, {"body": "zpao packagejson says reacttools fine see createelement browerified source error must come something else made new project get warning something calling react component directly use factory jsx instead see use jsx write code browser pure js ofcourse compilation everthing says even importing components mixins wo nt accept createfactory use jsx write everything theory nt even seeing error according update logs beginning become bit hassle read docs changed refferal old ways pointed real migration examples comparisons", "d": "11/2014"}, {"body": "tryspace please post coderepro", "d": "11/2014"}, {"body": "syranide working pure jsx component time happens use another component component comes either require put reactcreatefactory around althought necessary using jsx filescope tried wrap createclass around reactcreatefactory difference ca nt post repo private code pretty simple var react require reactaddons var button reactcreatefactory require button arrow var something reactcreateclass render function return works fine moduleexports something however removing following give warning var react require reactaddons var button reactcreatefactory require button arrow var something reactcreateclass render function var buttoncomponent reactcreateclass render function return button moduleexports something course ridiculous workaround solution really explain warning given even using createfactory anything jsx well", "d": "11/2014"}, {"body": "tryspace nt use jsx ps also definitely want create new every render", "d": "11/2014"}, {"body": "refering code sample valid right way exposing component using browserify moduleexports reactcreatefactory something", "d": "11/2014"}, {"body": "components npm users module wrap createfactory every time seems like components export createfactory module ca nt used people use jsx without spewing errors console solution users always wrap requires createfactory seems little tedious imo right", "d": "11/2014"}, {"body": "see blog post library authors export unwrapped classes", "d": "11/2014"}, {"body": "contra would seem logical well apparently need import factory think personally messy require require wrapping sure would easily identifiable component element start nt know importing problems adress first project like documentation", "d": "11/2014"}, {"body": "nt think anything actionable closing please correct wrong", "d": "11/2014"}, {"body": "spicyj need still nt know warnings show documentation clear", "d": "11/2014"}, {"body": "tryspace looks like using createfactory jsx right using jsx specify elements nt ever need call createfactory", "d": "11/2014"}, {"body": "spicyj right sure tested indeed fixes warnings expected thanks", "d": "11/2014"}, {"body": "sebmarkbage want explicit warning using output createfactory jsx instead generic nt use functions jsx warning nt look like real way identify present could always add", "d": "11/2014"}, {"body": "spicyj temporary warning detecting exists may enough", "d": "11/2014"}, {"body": "willdady also tried thiskey google found explanationsolution please clarify blog post prevent others headaches", "d": "11/2014"}, {"body": "would much like access attribute even directly accessable element possibly utility method access value use attribute way accessing model key attribute recognize suggesting ref value semantically different proposing nt understand change forced meaningful use please way accessing ref going forward would meaningful even separate utility method would return value component passed parameter thank", "d": "11/2014"}, {"body": "think trick far understand also removed future", "d": "11/2014"}, {"body": "hpcodecraft already gone master likely ref change string richer data type allow share reference siblings see could something like work", "d": "11/2014"}, {"body": "well think ultimately need forget wanting going stop train see advantages using string references made things much convenient thanks time", "d": "11/2014"}, {"body": "take breaking changes seriously want make sure always least possible upgrade every use case ideally make somewhat convenient think either firstclass refs context able help solve use case though feel free ping trouble solving upgrade path", "d": "11/2014"}, {"body": "seems autofocus supported server side rendering", "d": "11/2014"}, {"body": "property add attribute html input element especially useful decide serverside rendering conflict current js code handles auto focus unsupported browsers", "d": "11/2014"}, {"body": "installing react installs reactify bug downgrade reactify code work", "d": "11/2014"}, {"body": "installing react install reactify", "d": "11/2014"}, {"body": "also bitten thing hard hour work figure wrong future releases react would least make sense add note warning whoever reads know back minds", "d": "11/2014"}, {"body": "still seeing behavior reactrails work yeah jsx render function return compiles render function return mycomponent objectassign thisprops", "d": "11/2014"}, {"body": "seems like reactrails might still using old compiler behavior perhaps using runtime compiler", "d": "11/2014"}, {"body": "thanks sebmarkbage actually old version called culprit", "d": "11/2014"}, {"body": "build simple repro case jsbin jsfiddle sound like bug without way reproduce hard fix", "d": "11/2014"}, {"body": "try reproduce jsf tomorrow spicyj", "d": "11/2014"}, {"body": "still nt chance replicate appears happening firefox ie chrome", "d": "11/2014"}, {"body": "spicyj nt think going able replicate outside app big make app available publically would help", "d": "11/2014"}, {"body": "k wrapped good browsers obviously bug somewhere deep problem find root cause leave issue open anyone fancies digging let know set public version dev app take look", "d": "11/2014"}, {"body": "confirmation someone flushed hours debugging time toilet yes issue hard debug please make least warning case weird exception typeerror read property firstchild undefined caused fact component created different uninitialised copy react carrying owner null thereby breaking findcomponentroot", "d": "11/2014"}, {"body": "already warning case element one copy react passed reactrender another guess cases nesting elements different versions inside", "d": "11/2014"}, {"body": "yes least case nested elements created different react versions", "d": "11/2014"}, {"body": "reopened track remaining features refs etc", "d": "11/2014"}, {"body": "weird thought github closed issues used language like fixes nnnn simply mentioned issue sorry", "d": "11/2014"}, {"body": "pr text included wip fix", "d": "11/2014"}, {"body": "rest refs support blocked work done sebmarkbage", "d": "11/2014"}, {"body": "read two links posted sure exactly spec disallows numbers first link says custom data attribute attribute namespace whose name starts string data least one character hyphen xmlcompatible contains uppercase ascii letters let see xmlcompatible means quoting attribute names said xmlcompatible match name production defined xml contain characters name production second links comes ebnf rules name correct include numbers name case starts number said valid xml attribute contains least one character hyphen also contain uppercase ascii letters namespace", "d": "11/2014"}, {"body": "valid forced stricter guidelines spec thought spec poor wanted people better practices may issues browser support earlier ca nt recall anyway choice nt real problem popular make speccompatible things work unless something better hopefully make prop work instead someday soonish", "d": "11/2014"}, {"body": "one place think keep deviating allowance upper case data attrs html noted link get lowercased parsing rules anyway technically fine use confusing behavior going js lt dom noisy", "d": "11/2014"}, {"body": "said valid xml attribute contains least one character hyphen also contain uppercase ascii letters namespace prinzhorn indeed correct nt think reason particular allow probably change would think confusing behavior going js lt dom noisy zpao spec defines really problem pr change use hyphenation get dropped", "d": "11/2014"}, {"body": "thanks guys", "d": "11/2014"}, {"body": "correct nt support updating anything outside body see pete comment", "d": "11/2014"}, {"body": "dupe think", "d": "11/2014"}, {"body": "leebyron closed merged", "d": "11/2014"}, {"body": "yep thanks reminder", "d": "11/2014"}, {"body": "seeing issue iamdanfox inspect element csstransitiongroup see elements contained csstransitiongroup end inside span lies outside svg element visible", "d": "11/2014"}, {"body": "try", "d": "11/2014"}, {"body": "cc zpao", "d": "11/2014"}, {"body": "jsfb fyi referring idea preferably considered typetaint sorts used created immediately inside point unintentionally say rendered would return plain string object", "d": "11/2014"}, {"body": "syranide great thanks fixed latest version better", "d": "11/2014"}, {"body": "hey ran across problem today found issue really logic want use react frequently hit json apis return also dom methods ex return find nothing means include substantial ugly nullchecking code somewhere really want null override default value perhaps good solution set value required period nulls undefineds value must present could argue empty strings seems step far point even react realized valid value throws warning want allow null leave otherwise need use state guarantee default value lot things props fine bit heavy completely base would surprise", "d": "11/2014"}, {"body": "pointed colleague logic could go way easily could act flag allows logic flag specifies value required default null could fulfill value however set null would trigger default value", "d": "11/2014"}, {"body": "ha full circle pretty much echoing said suggestions may anything except undefined whatever reason exist explicitly log message may anything except undefined whatever reason exist explicitly log message accepts returns allows users escape hatch specially treat therefore default overwrite values given defaults user really wants honour values doable use functional utility becomes tedius", "d": "11/2014"}, {"body": "care backwards compatible suggestion needs tweaked would remain unchanged new semantic would gain new name like whatever", "d": "11/2014"}, {"body": "workaround thanks glenjamin irc providing", "d": "11/2014"}, {"body": "agree null valid value even required nt think breaking change bad since lenient would nt spam could introduce nullable types could also rename goal align flow nt really model distinction clearly right change type system also brought", "d": "11/2014"}, {"body": "sebmarkbage cool better", "d": "11/2014"}, {"body": "updates issue", "d": "11/2014"}, {"body": "cc jsfb", "d": "11/2014"}, {"body": "happy finally worked use context indirectly reactrouter use directly analytics eg several areas screen screen sign button pressed another use case want pages themed specific background color like controls matter deep hierarchy able use color ca nt css want calculate whether text needs dark light based etc", "d": "11/2014"}, {"body": "looks like fix merged going go ahead close issue", "d": "11/2014"}, {"body": "idea share suggested change framework solution using work immutable objects also curious others feedback started attaching immutable object mixin sets easily accessible methods also adjusts take advantage ref comparison throughout methods including accessing values using instead type check take advantage existing custom validator functionality provide checks like js var immutable require immutable function improptypecheck expectedtype return function props propname componentname var proptype typeof propsimpropsget propname proptype expectedtype return new error function impropimmutableinstance expectedconstructor return function props propname componentname propsimpropsget propname instanceof expectedconstructor return new error var improptypecheck impropstring improptypecheck string impropbool improptypecheck boolean immutablelist impropimmutableinstance immutablelist moduleexports improptypecheck component property looks like", "d": "11/2014"}, {"body": "change needed new react google search part documentation clarification came page guessing interpreted mean correct makes sense way", "d": "11/2014"}, {"body": "ideal solution solve would allow rendering would build component tree would able traverse tree find components need additional data allow us asynchronously load data rerender components subtree ready flushing markup allow us convert tree string mridgway yep would good currently rendering component twice serverside used workaround", "d": "11/2014"}, {"body": "petehunt spicyj got react work xml type dom patching function dom diffing works great", "d": "11/2014"}, {"body": "seeing similar issue well sometimes react always eliminate classes case transitioning different element result former element remaining dom", "d": "11/2014"}, {"body": "resolution within client codebase looking spicyj fiddle exact issue still ca nt figure solution", "d": "11/2014"}, {"body": "attribute order use svg sprites", "d": "11/2014"}, {"body": "support", "d": "11/2014"}, {"body": "currently using work around", "d": "11/2014"}, {"body": "attributes maskunits amp maskcontentunits", "d": "11/2014"}, {"body": "mask attribute", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "text attribute", "d": "11/2014"}, {"body": "closing bug looks like consider null undefined different meanings per discussion", "d": "11/2014"}, {"body": "create duplicate issue would appreciated help keep track state things midst adding new feature refactoring", "d": "11/2014"}, {"body": "yes would nice somehow goes direction facebook flow", "d": "11/2014"}, {"body": "experienced issue simplest solution use defer rendering form ajax request complete adding property component state", "d": "11/2014"}, {"body": "example thanks maybe something like js render function var component", "d": "11/2014"}, {"body": "got bug yesterday proposed fix", "d": "11/2014"}, {"body": "googling bug turned nothing given recent api change interests helping others avoid hour inexplicable behaviour note select elements rendered string provide checked attributes child options react", "d": "11/2014"}, {"body": "thought first class refs nt think make sense promises since streamlike observable suggested shoehorn since standard observables however thought realized observable support react needs implemented subjects callbacks like rx proposal essentially first class refs would observables however passing subjects instead callbacks special case callbacks allows composability much simpler mechanisms subjects inplace right callbacks therefore think switch firstclass refs simply callbacks gets passed reference first argument null detached would make roughly equivalent makes model much simpler upgrade path much simpler nt allow siblings communicate without middle man however think feature siblings communicate feature react function also easily statically typable future make callback apis also accept subjects secondary upgrade path think sophiebits", "d": "11/2014"}, {"body": "updated reactfuture include proposal", "d": "11/2014"}, {"body": "think like looks little mutative explicit assignment guess actually worse apis written", "d": "11/2014"}, {"body": "also inherently imperative api exposes imperative handle even id handle also already effective allow people store ephemeral state classes author prepared component class destroyed restored given point eg want hibernate state away class instance still allows", "d": "11/2014"}, {"body": "made mistake like mispelled mixin name led cryptic error time later would nice something like andreypopp commit reason", "d": "11/2014"}, {"body": "regarding issue referenced one strong preference would error rather warning reactrails really expose warnings happen serverside case ran issue mixin missing serverside extra difficult track problem mere warning would help scenario", "d": "11/2014"}, {"body": "simek chrome ios uses uiwebview safari issue platform", "d": "11/2014"}, {"body": "atm using", "d": "11/2014"}, {"body": "going magical solution eventually", "d": "11/2014"}, {"body": "extending support implementing case nt want wait field lose focus nt onchange put noop evade noisy warning though update fwiw significant usage actually disregard sorry onchange normalization done mitigates usage oninput legacy code", "d": "11/2014"}, {"body": "petehunt permalink doc", "d": "11/2014"}, {"body": "sure place like give exposing clonewithprops somewhere convenient would change name though clone implies component descriptions mutable nt really make sense talk cloning immutable objects call something like", "d": "11/2014"}, {"body": "urgh got caught big time spent minutes trying figure realised ignores files default felt really stupid realised tutorial files p", "d": "11/2014"}, {"body": "agreed points add using instead tips editor highlight correctly", "d": "11/2014"}, {"body": "issue really frustrating reacttools outputting inconsistent quoting formats single quotes double quotes used output really annoying trying lint file since linting fail regardless case issue transformer adds double quotes instead single quotes keep consistent rest nt made configurable yet", "d": "11/2014"}, {"body": "gabrielecirulli actually configurable supposed consistent think might missed uncertain", "d": "11/2014"}, {"body": "well merged days ago release came days ago maybe ca nt get work though jsx version jsx myfilejsx built module myfilejsx moduleexports reactcreateclass displayname exports separate option work default", "d": "11/2014"}, {"body": "branch merged master currently seems might pulled", "d": "11/2014"}, {"body": "ah damn means wait thanks", "d": "11/2014"}, {"body": "gives guess confirms", "d": "11/2014"}, {"body": "happen know rough landing date", "d": "11/2014"}, {"body": "clue since landed perhaps neither react team figure going could wrong", "d": "11/2014"}, {"body": "bah probably going next release pretty minor wow sounds distant", "d": "11/2014"}, {"body": "hey chenglou next release mean idea roadmap sound distant month away time fly", "d": "11/2014"}, {"body": "got rushed things needed support flow couple things wanted get thinking might couple small things", "d": "11/2014"}, {"body": "came across bug using name attributes input tags worked around would nice fix", "d": "11/2014"}, {"body": "agree react coffeescript jade would perfect think approach viable one", "d": "11/2014"}, {"body": "petehunt zpao right way update already rendered component also use using different already noted somewhere drop link pls current init function feel wrong cause ca nt date datepicker rendered", "d": "11/2014"}, {"body": "instead try avoid reading thisprops getinitialstate instead compute value inside render based thisprops thisstate usually want always impossible need set default state params may passed component example datepicker", "d": "11/2014"}, {"body": "componentwillreceiveprops allows hook update new props use setstate", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "guys know feature going land react playing around nodewebkit supports custom attribute allow select folders need find workaround react strips", "d": "11/2014"}, {"body": "janhancic workaround movement", "d": "11/2014"}, {"body": "yep came thanks", "d": "11/2014"}]