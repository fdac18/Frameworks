[{"title": "jsxtransformer bug tag", "body": "produce uncaught typeerror read property replace undefined due font tag use jsx file", "num": "2627", "d": "11/2014"}, {"title": "silent exception error componentwillreceiveprops", "body": "function call undefined componentwillreceiveprops well never mind since call undefined throws caught reactmultichildupdatechildren rethrown reason ca nt find ca nt reproduce fiddle anyways took realize culprit anyone knows heaven name nt throw", "num": "2626", "d": "11/2014"}, {"title": "minify jsxtransformerjs", "body": "could please provide minified version", "num": "2625", "d": "11/2014"}, {"title": "jsx binary strip types arrow functions", "body": "take following code parse binary correctly removes type change function use arrow function fails error", "num": "2624", "d": "11/2014"}, {"title": "onmouseover triggered component rendered mouse mouse moves", "body": "component rendered registers onmouseover events rendered mouse onmouseover callback invoked", "num": "2621", "d": "11/2014"}, {"title": "unable find element error elements", "body": "contents element constructed special way breaks react component update unable find element error example method body working jsfiddle react adding option props fixes issue", "num": "2620", "d": "11/2014"}, {"title": "csstransitiongroup throws child returns null render", "body": "came across using loading route initially route handler actually inside removing transition group leads weird thing happens initial load nested route view pulled via menu sure issue related belongs thing component either returns react element returns seems like edge case maybe happens specific initial render setup could fixed adding guard method", "num": "2619", "d": "11/2014"}, {"title": "reactrendertostring pretty output", "body": "similar jsonstringify obj", "num": "2618", "d": "11/2014"}, {"title": "unexpected string key handling", "body": "came across one extended custom key generator react ends treating function child key hides strings come object key handling documented makes sense sure makes sense handle string keys way", "num": "2612", "d": "11/2014"}, {"title": "feature request ability configure custom html escaping function", "body": "", "num": "2611", "d": "11/2014"}, {"title": "testing handlers events testutilssimulate failing", "body": "problem described stackoverflow thread ca nt seem figure wrong", "num": "2609", "d": "11/2014"}, {"title": "react slow rendering items jsfiddle", "body": "hi guys evaluating reactjs considering using projects trouble rendering simple list elements since takes almost seconds complex markup couple div tags actually existing app simplification tried using underscorejs took jsfiddle using jsx without jsx wrong cheers vasco pessanha", "num": "2608", "d": "11/2014"}, {"title": "making react warn user called argument", "body": "spent last hour trying fix issue caused trying render actual variable undefined root cause misinterpreting would return whole instead bad error stack trace extremely cryptic took even get clue reason nt working trying render undefined type actual exception stack trace see ultimately execution comes crashing react tries look undefined type course raises exception reason confusing exception happened quite far away source cause secondary factor code worked completely fine started porting browserify made mistake lead wild set hypotheses nt working assuming might due regression react since migrating thought might lagging behind thinking could problem reason raise issue since passing type wo nt work anyway would make sense react could check warn maybe even raise exception since would crash soon anyway instance bit extreme something like happens someone else probably know screwed first place help react would always welcome", "num": "2607", "d": "11/2014"}, {"title": "event still processing component unmounted", "body": "suppose backbone view named contains react component b b react button clicking button unnmounts b react rerenders backbone case got error like looking found events still processing even component unmounted dom examining found event click event added click handler became ok plan fix case react work timeout", "num": "2605", "d": "11/2014"}, {"title": "old react version examples", "body": "hi examples included getting started kit version react defined packagejson basiccommonjs example set order example work expected also using browserify reactify compile buildjs fails missing jsx header indexjs tested examples", "num": "2604", "d": "11/2014"}, {"title": "idearequest add global party extension point react object", "body": "tldr add empty bare object called x new member react object party react tools global extension point couple internal tools use react would like open source tools use singleton object referenced andor modified components know could create object root component pass prop child components may modify object violates idea props readonly also means another person open sources component uses either tools user component must create root object app wire component tree keep things clean would love party extension space hanging react object could attach tool globals components would access given share react global suggestion name x make bare object documentation would encourage users add namespace object simple example adds party global event bus blogging app using eventemitter could used server client via browserify appjs root component require reactxevent reactxeventbuson createpost reactxeventjs newpostjs component view shown point subcomponent appjs createpost function e reactxeventhandle e createpost render function return without getting lost weeds arguing global event bus good idea react see example nt need wire component tree bus allow subcomponent send message nothing stopping anyone else globally patching react object add x member think would better blessed added react code conflicts future member name also think common name like x allow party module names announce work eg require reactxevent", "num": "2598", "d": "11/2014"}, {"title": "jsxtransformer error lowercase classes provide linenumber property", "body": "attempting use react class lowercase classname transformer able display line error occurred turns event variable passed function contain attribute called linenumber error thrown states uncaught typeerror read property replace undefined actual error properties error lower case component names myclass longer supported jsx see", "num": "2592", "d": "11/2014"}, {"title": "use inside react class", "body": "quite often apps need render list entities entities usually contain data identifier property like sometimes may logic inside component uses identifier eg uses inside handler fire event clicked entity simplified example var entity reactcreateclass notifyitem function fire someevent id thispropskey also find natural use properties prop rendering list proper component recycling however moved nt seem available inside component specify two different propslike values looks redundant would great make available inside component future versions", "num": "2591", "d": "11/2014"}, {"title": "bug docs jsx", "body": "docs say use html jsx accept xhtml ex html xhtml missing x docs make difference picking react want use xhtml dead", "num": "2590", "d": "11/2014"}, {"title": "glossary mistake", "body": "glossary see really correct seems wrong imagine idea though", "num": "2588", "d": "11/2014"}, {"title": "proptypes declarative validator preventing passing extra properties feature request", "body": "dropping support deprecated component property would useful react could instructed throw error old code using component still keeps setting removed property notice fix", "num": "2587", "d": "11/2014"}, {"title": "handle browser autofill gracefully serverside rendering", "body": "rendering react app document root serverside rendering got email password login form renders server without state fields empty browser loads page email password autofilled browser happens react bootstraps loads wipes state user sees inputs autofilled emptied ideal tried using grab raw dom node value render react complains checksum invalid realise case dom modified react bootstraps client would good able kinda stuff update workaround used pull values inside values inside would still nice handle cleanly though", "num": "2585", "d": "11/2014"}, {"title": "reactids overriden serverside rendering", "body": "recently adapted app use serverside rendered markup reconciliate client increase loading speeds react correctly recognizes rendered markup nt actually touch dom first rendering step however interact clicking dragging etc serverside rendered react components get following error understand sideeffect dom mutation however mutation occured react element container altering state programatically opposed interacting clicks etc cause errors serverside rendered markup html login categories add category settings calling rendercomponent client dom node contains serverrendered markup eg thanks creating maintaining amazing ui framework", "num": "2584", "d": "11/2014"}, {"title": "correct latest release tag github", "body": "react releases page incorrectly promotes latest release sure since tags repo releases since correct admin", "num": "2580", "d": "11/2014"}, {"title": "proptypes property current vs getproptypes function proposed", "body": "used development mode seems like would preferable evaluate result method call returning object instead current object literal declared class imagine nt particularly expensive operation using shapes results lot type declaration evaluations never used outside development current proposed reason way instead functional convention etc", "num": "2577", "d": "11/2014"}, {"title": "tests using react jestmocked subcomponents result different behavior using jsx versus reactcreatefactory", "body": "created repo help illustrate running basically developing pure jsx using reactcreatefactory interchangeable testing using jest makes writing unit tests little trickier according link nonjsx components must wrapped reactcreatefactory testing components using jest found interchangeable within tests mock submodules guessing differences stem using bind within reactcreatefactory", "num": "2576", "d": "11/2014"}, {"title": "issues classes", "body": "issues classes react seems esprimaharmony differs implementing classes well classes implemented beta versions browsers esprimaharmony able use classes using however use methods chrome windows preview get error render try using get error ca nt figure would different objectdefineproperty directly defining prototypes fact properties set prototype nt automatically enumerable code javascript class mycomponent render return null esprimaharmony compiles compiles javascript var classprops function child staticprops instanceprops staticprops objectdefineproperties child staticprops instanceprops objectdefineproperties childprototype instanceprops var mycomponent function var mycomponent function mycomponent classprops mycomponent null render writable true return mycomponent resolve issue", "num": "2575", "d": "11/2014"}, {"title": "textarea update replacestate invoked", "body": "hello discovered little annoying bug invoke replacestate empty object textarea innerhtml update however value please see example", "num": "2573", "d": "11/2014"}, {"title": "replacestate null nt reset state", "body": "since components start null state would make sense could reset back null state right best reset back empty object minor issue think deserves documenting changed", "num": "2572", "d": "11/2014"}, {"title": "", "body": "gets called never granted using older version nt dig latest source hard nt see pop issues search", "num": "2569", "d": "11/2014"}, {"title": "extend nested default props instead overwriting", "body": "convenient props nested structure however let assume default props initialize component giving props component wo nt get cccsecond cccthird preferred result would course perhaps make behaviour selectable adding proptypes option like", "num": "2568", "d": "11/2014"}, {"title": "svg attributes nt work nt used", "body": "like js x", "num": "2564", "d": "11/2014"}, {"title": "ref component attribute undefined react", "body": "understanding changelog breaking changes key ref moved props object accessible element directly unless misunderstanding working access ref attribute using used work small snippet demonstrates issue", "num": "2563", "d": "11/2014"}, {"title": "setstate recursive", "body": "state currently calling results state would great function make clear documentation merges one level deep replacing substates", "num": "2561", "d": "11/2014"}, {"title": "make warning eg proptypes behavior configurable", "body": "implementation module repo cases want louder development warnings really errors impossible ignore way configure warnings produce similar relatedly people able easily set unit tests fail proptypes checks fail", "num": "2560", "d": "11/2014"}, {"title": "testable react components", "body": "wrote article dependency injection react using properties tldr javascript var mycomponent reactcreateclass proptypes model reactproptypesshape getstate reactproptypesfunc getdefaultprops return model new mycomponentviewmodel new http getinitialstate return thispropsmodelgetstate render return hello thisstatename enables user override dependencies runtime testing leave implementation untouched problem user multiple viewmodel shared problem using traditional approach well one singleton cacheing effectively nullifys technique use instance level dependency injection currently react two ways pass things runtime child components props react copies props even though technically per instance way passing dependencies runtime ultimate goal write testable react components without mocking module level mock module level excerpt article slower reevaluating module several times module still state entire test file multiple blocks would still need reset state require module block slow difficult test require service locator dependency injector using conflates use violating single responsibility principle tests uses instanceof break could getting different instance require code encouraged written form singletons problematic reasons potential solutions realize people may opinion mocking module level react library think notion passing runtime dependencies somehow support testing story nt involve module level mocking maybe constructor lifecycle function receives props would enable per instance use passed prop dependency another option would stop caching getdefaultprops imagine cached props typically viewed immutable currently way pass arguments component", "num": "2559", "d": "11/2014"}, {"title": "allow classset take arbitrary number arguments support string addition", "body": "classset handy recap however seems fairly common want pass classname props one ends writing something like would nt nice possible related", "num": "2558", "d": "11/2014"}, {"title": "support default params jsxtransformer flag", "body": "following code transformed jsx see transpilers like support transformation", "num": "2557", "d": "11/2014"}, {"title": "reactproptypesshape wtf", "body": "sorry title wtf moment found compare property object schema method call read documentation makes slightly sense see code say makes sense see code anyway know nt highest priority item world would love request name change method least synonym makes sense like really anything", "num": "2556", "d": "11/2014"}, {"title": "provide way specify parts react server markup reused client", "body": "would great able custom checksum validator ignore certain branches domtree attempting reuse markup use case rendering static components static components need rendered rendering server render client currently pass react markup props used generate static markup however waste send props component nt need rendered clientside one major performance concerns using react apps send markup props well usually duplicating data sent client able specify certain components needing client side rerender thus skipping checksum would save kweight initial page load", "num": "2548", "d": "11/2014"}, {"title": "simply want transpile single jsx file", "body": "see transpiled file dumped shell specify output file sounds retarded really could nt find answer documentation", "num": "2547", "d": "11/2014"}, {"title": "unable unmount component using instance rendered null", "body": "common pattern unmount component instance components return case getdomnode also returns code nt always work react internally always knows node component mounted please make information accessible add component method like project process transition backbone views react helper function gets backboneview instance mounted component removes dom way make work react component", "num": "2545", "d": "11/2014"}, {"title": "throw error wrong input dangerouslysetinnerhtml dangerousinnerhtml", "body": "passing html fails silently checked website makes use incredibly hard debug forget html throw error instead", "num": "2542", "d": "11/2014"}, {"title": "idea support object literal property value shorthand jsx syntax", "body": "idea would able would think", "num": "2536", "d": "11/2014"}, {"title": "missing svg mask attribute", "body": "mask attribute ignored svg elements", "num": "2535", "d": "11/2014"}, {"title": "textarea respond value property changing null", "body": "value property textarea changes null undefined non blank value text displayed dom change fiddle captures issue notice behavior different text input", "num": "2533", "d": "11/2014"}, {"title": "rendertostaticmarkup nt wrap expressions", "body": "hello thispropsname render string wraps thispropsname span tag render static markup nt would think datareactid datareactchecksum", "num": "2529", "d": "11/2014"}, {"title": "removing tabindex component attributes remove tabindex set", "body": "tab index put place removing method seen ever sets expect element nt focused tabbing still focusable clicking directly element var attributes thispropsfocusable attributestabindex return reactcreateelement div attributes test", "num": "2528", "d": "11/2014"}, {"title": "vectoreffect attribute svg elements", "body": "hello working project need nonscalingstroke feature could support vectoreffect attribute", "num": "2523", "d": "11/2014"}, {"title": "setstate breaks reactcsstransitiongroup", "body": "called transition transition breaks flash", "num": "2522", "d": "11/2014"}, {"title": "props context merged", "body": "day talking rpflorence usage context reactrouter initial curiosity came needing something like stub context component test concerns angular ryan helped see context basically like props everything still explicit afterwards thinking see value context one thing still nt feel right components concerned parent passes data since basically two merged component would define would include everything canshould passed one place without concerned props get point maybe renamed would additional method passing props anything could passed component via could also passed vice versa something like jsx var parent reactcreateclass childproptypes foo reactproptypesstring getchildprops function return foo bar render function return var child reactcreateclass proptypes foo reactproptypesstring render function return thispropsfoo reactrender documentbody would render html bar baz thoughts", "num": "2521", "d": "11/2014"}, {"title": "jsxtransformer using null comparison spread attributes", "body": "currently jsx gets compiled order pass jshint tests", "num": "2519", "d": "11/2014"}, {"title": "implement shouldcomponentupdate thiscontext", "body": "know officially quite libraries rely seems like getting shape trying understand exactly supposed implemented mind noticed accepts third argument extend also check components nt opt omitting get third argument understandable however presents problem component context owner context consumer implements restrictive way react context updates fiddle javascript var bottom reactcreateclass contexttypes number reactproptypesnumberisrequired render function return thiscontextnumber var middle reactcreateclass shouldcomponentupdate function nextprops nextstate nextcontext return false render function return var top reactcreateclass childcontexttypes number reactproptypesnumberisrequired getinitialstate function return number getchildcontext function return number thisstatenumber componentdidmount function setinterval function thissetstate number thisstatenumber bind render function return reactrender documentbody problem would occur tried give generic contextaware wrote unless opts possible work around adding nt look like good solution need explicitly add necessary every level smart easy slip solved another solution meantime recommended way", "num": "2517", "d": "11/2014"}, {"title": "tables w headers attribute", "body": "working project strict accessibility requirements table putting data implement headers ids attributes meet accessibility see techniques unfortunately headers attribute stripped supported react supported attributes list please add support missing standard attribute called headers", "num": "2516", "d": "11/2014"}, {"title": "unexpected behavior compiling jsx attribute strings containing amp", "body": "repro case jsx fails unexpected token illegal adding one character jsx compiles quite surprising sure going", "num": "2515", "d": "11/2014"}, {"title": "reactdompath attribute gets renamed closure compiler", "body": "following component js var react require react var svg path reactdom var transition reactcreateclass render moduleexports transition using closure compiler advanced level attribute gets renamed add quotes around attribute react nt render attribute", "num": "2513", "d": "11/2014"}, {"title": "automatically remove addendeventlistener", "body": "reacttransitionevents currently contains two methods perhaps cases developer going wait called times usually call let make nicer changing preamble something like javascript addendeventlistener function node eventlistener stepsintransition var metalistener event gt stepsintransition make event listener clean real implementation slightly complex keep track original make sure right thing called done principle seems like improvement", "num": "2510", "d": "11/2014"}, {"title": "automatically passed context property", "body": "given react used serverside rendering server context stores dispatchers really need contextbased registry components need able pull contextbased instances globalstatic instance would extremely useful able specify global property list properties automatically passed parent child specified ex appjs loads appjsx var react require react reactaddinheritingproperty context appjsx render function context instance would apply rendering children well specified controls rendered within parent right example using yahoo fluxibleapp need explicitely pass context children use router store mixins purpose using stores router components making functionality available instance registries storesdispatchers would far easier utilize could simply specify base property use ex simply use rendered instances", "num": "2507", "d": "11/2014"}, {"title": "node fails using reactaddons", "body": "upgraded react require react addons like make simple component using img node get error following trace require react without addons error resolved also doesnt break node types example worked var react require reactaddons var usesother reactcreateclass render function return hello", "num": "2506", "d": "11/2014"}, {"title": "stop using internals reactmultichildreconciletest", "body": "test reaches internals going reactinstancemap way get internals possible test observable effect failing test without testing internals still tests also reach internals primarily around lifecycle state", "num": "2500", "d": "11/2014"}, {"title": "nt make mockcomponent depend jest", "body": "expecting use like looking source requires passed mock already use test runner depend jest", "num": "2499", "d": "11/2014"}, {"title": "make sure child key warning cases", "body": "warn doesnt js var f var g var children f g return g f children turns modifying first time set looking already validated", "num": "2496", "d": "11/2014"}, {"title": "classset uses arrayprototypefilter", "body": "super nitpick current iteration cx makes use mentioned required polyfill older browsers realize addons part react proper sure worth noting working browsers doc perhaps mentioned addons classset docs happy send pr either method", "num": "2494", "d": "11/2014"}, {"title": "returning null causes thisgetdomnode null componentwillunmount", "body": "container component something like modalinner component componentwillunmount using destroy javascriptdata node however props false suppose render nothing thisgetdomnode null componentwillunmount dom node still inspect using chrome reference lost replace instead null works expected bug", "num": "2493", "d": "11/2014"}, {"title": "merge spread attributes", "body": "say component like js boxjsx box mainappjs use like result override switched order result reversed want merged something doable current spread attribute thanks", "num": "2492", "d": "11/2014"}, {"title": "non jsx spread operators depend objectassign", "body": "transpiles works nice dandy implicitly requires polyfill undocumented assume recent change move polyfill module perhaps react reacttools use jstransform spread visitor using one leverages jsx case perhaps note docs somewhere need polyfilled", "num": "2488", "d": "11/2014"}, {"title": "otransform otransform updating opera", "body": "otransform working opera somehow put style object chrome ff works fine latest oprea give element rotate deg programmatically inspect element opera dev tools see crossplatform tranforms applied style ms moz etc chrome ones webkit without actually applied another strange thing actually without leading hyphen worse rotate value changeanimate nt change see code running console nt update style object", "num": "2487", "d": "11/2014"}, {"title": "notes csstransitiongroup", "body": "chatting leebyron zpao intend experiment csstransitiongroup see improved using issue scratchpad keep track thoughts eventually build pr", "num": "2486", "d": "11/2014"}, {"title": "animation docs unclear", "body": "animation docs try explain transition new children eg wo nt work initial render however examples nt make clear moving statement inside call distracts explanation moreover clearly said transition applies new items initial items need play csstransitiongroup feel comfortable contributing docs nt expect pr yet stuckouttonguewinkingeye", "num": "2485", "d": "11/2014"}, {"title": "allow replacing anchoring element", "body": "following html using theme html read messages would like render ul latestmessages react imho currently impossible following components divider divdivider message divdropdownmessagesbox latestmessages ul latestmessages replaces also link icon get two uls nested sure could go hierarchy convert parent elements react components left one single div could anchor encompassing component want render dropdown ul react react option replace element given rendercomponent thanks reading long rant hope solution soon", "num": "2484", "d": "11/2014"}, {"title": "contenteditable warning appears even without children", "body": "rendering output text node child span react components yet still receive component contains managed react responsibility guarantee none nodes unexpectedly modified duplicated probably intentional expected", "num": "2477", "d": "11/2014"}, {"title": "changing props instance bad", "body": "render c bad saw objectfreeze descriptor nt fail really bad doable", "num": "2474", "d": "11/2014"}, {"title": "errors showing console chrome ie firefox", "body": "strange issue react firefox using latest react gem errors inside react components showing firefox console showing normally chrome ie internet explorer google chrome mozilla firefox component nt render error shown happen javascript errors inside react components errors outside react components shown normally tried reproduce problem jsfiddle error shown even firefox thought could issue consolepolyfill tried remove nothing changed expected behavior", "num": "2471", "d": "11/2014"}, {"title": "conflicting esprimafb dependency", "body": "cc zpao", "num": "2470", "d": "11/2014"}, {"title": "missing fields mousemove event maybe mouse events", "body": "using var sample reactcreateclass somefunc function e consolelog elayery elayerx ex ey emovementx emovementy eoffsetx offsety consolelog enativeeventlayery enativeeventlayerx enativeeventx enativeeventy enativeeventmovementx enativeeventmovementy enativeeventoffsetx enativeeventoffsety render function return looking might react taking standard fields across chrome layery give position top element event get using react event like eclienty ecurrenttargetgetboundingclientrect top sure needs fixed thoughts cheers luke", "num": "2469", "d": "11/2014"}, {"title": "update documentation removing tapdelay", "body": "documentation could use little love realize currently changing may removed still required required use reacttapeventplugin confusing use use page rendered ever render touch device detect touch using something like set true related issue tap delay maybe suggest documentation using plugin like tapeventplugin would submit pr really nt know documentation say thanks", "num": "2468", "d": "11/2014"}, {"title": "empty strings translated boolean unit test jasmine", "body": "hi encountered unit testing component basically created component like render using render component print propsdata end get boolean value true define component like get proper value", "num": "2467", "d": "11/2014"}, {"title": "jsxtransformer newline", "body": "jsxtransformer removes newline symbols templates fix problem", "num": "2466", "d": "11/2014"}, {"title": "error boundaries recover errors thrown", "body": "trying put graceful error handling case views crap jsx var mygoodview reactcreateclass render function return cool var mybadview reactcreateclass render function throw new error crap try reactrender documentbody catch e reactrender documentbody however get rendered w following stack trace seems like error throw react bad state thus unmounted handle scenario", "num": "2461", "d": "11/2014"}, {"title": "onsubmit without submit input working", "body": "ca nt handle native submit onsubmit react", "num": "2457", "d": "11/2014"}, {"title": "require react require reactaddons", "body": "building frontend browserify reactify found components use others use seems like set components different instance react nt talk means instantiate app components use seems events fired components nt handled example nt called seemingly instance react different one instance rendered root replaced calls app onereactjs looks like events started handled behavior bug design", "num": "2456", "d": "11/2014"}, {"title": "capybara selenium nt trigger reactdominput onchange", "body": "hi use capybara acceptance testing behaviour differs pure html input input contained jsx component reactdom input nt trigger onchange capybara sets empty string triggered set space example", "num": "2455", "d": "11/2014"}, {"title": "fire often", "body": "like case input text onchange triggered user finished interaction nt think right whenever touch range getting multiple change event like window resize crazy think coherent onchange behavior input text range onchange fired user release slider", "num": "2454", "d": "11/2014"}, {"title": "nt work", "body": "according issue seems way handle vertical input range firefox tried add attribute one seems ignored react complicated handle open pr", "num": "2453", "d": "11/2014"}, {"title": "react soundcloud", "body": "recently gave talk using react flux serverside rendering soundcloud video slidesexamples thought cool share cc amasad zpao", "num": "2451", "d": "11/2014"}, {"title": "misunderstanding project targets wiki", "body": "update wiki removing misunderstanding project targets", "num": "2450", "d": "11/2014"}, {"title": "allow components render abstract elements feature request", "body": "every component create return actiaul element cases nt actually need example attempt transitions like famous would calculate every position hand wrapper becomes unnesseccery introducing something like abstract elements", "num": "2449", "d": "11/2014"}, {"title": "warn second argument render null documentbody null well", "body": "often run making new project example reason passing documentbody react script head body nt exist yet common problem observed beginners tend put scripts react samples use mounting point real problem message would nt believe dom element assume something else wrong without realizing may empty time suggest show different specific warning second argument something like target container null trying mount ready", "num": "2448", "d": "11/2014"}, {"title": "reactaddonsperf undefined", "body": "performance tool seems like incredibly helpful tool trouble figuring components app causing trouble consider screenshot items listed undefined way name components listed name nt helpful could nt seem find anything performance tools section documentation", "num": "2447", "d": "11/2014"}, {"body": "supported react mdn explains use element though normalized html deprecated html time elements related styling obsoleted", "d": "11/2014"}, {"body": "thanks see ecommerce still using font tag sun nov pm cody notifications githubcom wrote supported react mdn explains use element though normalized html deprecated html time elements related styling obsoleted reply email directly view github", "d": "11/2014"}, {"body": "cody said use instead probably drop whitelist future yet", "d": "11/2014"}, {"body": "dupe supposed used production precompile jsx purpose", "d": "11/2014"}, {"body": "happens jsx dynamic think happening also teaching people use jsxtransformerjs installation fastest way get started serve javascript cdn also available cdnjs jsdelivr though agree better precompile people reasons", "d": "11/2014"}, {"body": "reason fast get started way like use inline coffeescript compiler nt production seeing library nt generating dynamic sense word jsx create forms could misunderstood means generate js jsx", "d": "11/2014"}, {"body": "see point learning react though tcombform aware react workflow used handlebarsjs precompile rendering js still available minified", "d": "11/2014"}, {"body": "jsx nothing sugar function calls example returns something factory really store things like nothing functions plain js objects nt contain special string markup format say needs additional compilation like perhaps thought", "d": "11/2014"}, {"body": "temporary fix something like", "d": "11/2014"}, {"body": "react separates children html text allowed browser handles gracefully removing next render react tries change ca nt find workaround give string", "d": "11/2014"}, {"body": "thanks explaining case probably best solution would extend error explanation information option elements behind table etc", "d": "11/2014"}, {"body": "problem whitespace actually meaning html pretty printed json identical pretty printed html also pretty printing light task leave others used jsbeautify past happy", "d": "11/2014"}, {"body": "sebmarkbage want", "d": "11/2014"}, {"body": "think issue actually yeah probably changed", "d": "11/2014"}, {"body": "nice catch think might actually flaws careful prevents browsers add string prototype spicyj branch separated use implicit key stringnumber", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "organization xss policy escape things strip tags like script nt escape tags like know stupid policy changing policy would require rewriting bunch legacy code handling whitelisted tags existing data rewriting security test suites new external security audit instead react components able configure default escaping function offering something similar syntax would make code lot cleaner", "d": "11/2014"}, {"body": "gist code issue stack overflow thread using jasmine running tests karma chrome also weird thing going assignment event callbacks elements see test one fails one succeeds coffee react require reactaddons testutils reactaddonstestutils component comp reactcreateclass handlesubmit e propshandlesubmit handleinputchange e render reactdomform onsubmit handlesubmit reactdominput type text onchange handleinputchange test ddescribe comp beforeeach submithandler jasminecreatespy submithandler comp testutilsrenderintodocument reactcreatefactory comp handlesubmit submithandler assigns callbacks correctly form testutilsfindrendereddomcomponentwithtag comp form input testutilsfindrendereddomcomponentwithtag comp input calls handlesubmit form submitted spyon comp handlesubmit andcallthrough calls handleinputchange input changes spyon comp handleinputchange andcallthrough", "d": "11/2014"}, {"body": "general reaching finding dom component asserting fragile actually wrap dom components regular react components add additional logic event handling controlled inputs work example go actually find thing wrapped input renders wo nt onchange expecting goes forms need handle submit event specially since nt bubble pass handler actual dom component advice refocus testing making assertions way react implemented application nt assert assignment handlers correct actually useful test way assert form handler called way correct fail case input inclined say expected though understandably annoying working better shallow testing tools", "d": "11/2014"}, {"body": "oh ok makes sense thanks clearing", "d": "11/2014"}, {"body": "please attempt use newer stable version react jsfiddle seems offer jsbin offers newest stable version", "d": "11/2014"}, {"body": "hi aackerman also tried newest version actually jsfiddle without jsx", "d": "11/2014"}, {"body": "react writing html never fastest guess slowness see comes jsfiddle look time render takes surround render time taking", "d": "11/2014"}, {"body": "jsxtransformer script used jsfiddle intended basic development needs slow startup generally bad idea preprocessed jsx runtime overhead", "d": "11/2014"}, {"body": "also using development version offers good error messages checks compromising perf", "d": "11/2014"}, {"body": "thanks answers guys tested example using production version one fiddles post using js jsx really nt think issues cheers", "d": "11/2014"}, {"body": "think point use simpler library like underscore templates generates markup string memory performs single dom update case something like documentbodyinnerhtml much faster react", "d": "11/2014"}, {"body": "actually returns whole react lib addons addons added object get using browserify whole time error came updating working fine seems kind weird throwing error right dev could comment great", "d": "11/2014"}, {"body": "gabrielecirulli yea seems like would nt bad idea check createelement johanneslumpe working fine createelement nt really exist added would likely used reactaddons always full react object addons inserted", "d": "11/2014"}, {"body": "talked johanneslumpe irc cause via addons undefined component used", "d": "11/2014"}, {"body": "johanneslumpe yeah became aware figured issue thinking would way helpful react told straight away passing undefined component", "d": "11/2014"}, {"body": "provide simplified test case demonstrating issue thanks", "d": "11/2014"}, {"body": "tried able reproduce problem small one still reproduced app sorry ca nt show code code attempt nt give exceptions coffee react require react appclosing require appclosing view el documentbody addcomponent gt component appclosing oncloseclick gt unmountcomponent reactrender component el unmountcomponent gt reactunmountcomponentatnode el viewaddcomponent coffee react require react reactdom moduleexports reactcreatefactory reactcreateclass displayname appclosing proptypes oncloseclick reactproptypesfuncisrequired oncloseclick gt propsoncloseclick render gt div classname appclosing p classname open console see exception div classname button onclick oncloseclick close differences real app app writtern mixed backbone view react component component inside view component whole views components removed new views rendered component still page found problem", "d": "11/2014"}, {"body": "screenshots click event target components already removed error occured", "d": "11/2014"}, {"body": "based error loading reacts", "d": "11/2014"}, {"body": "browniefed app components mounted backbone views mean react components problem", "d": "11/2014"}, {"body": "far somewhere put globals looked context variable nt finalized seems cover asking nt really proper addons framework right expect need rely consumer wrap things reactwithcontext hardly perfect solution something right may transition reasonably well supported mechanism road", "d": "11/2014"}, {"body": "environmentbrowser", "d": "11/2014"}, {"body": "running yosemite chrome also using jsxtransformer react provided cdn tuesday november paul shannessy notifications githubcom wrote environmentbrowser reply email directly view github sameer chauhan cooper union ee cooperedu", "d": "11/2014"}, {"body": "lol petehunt changed html people complained mention xhtml guess really ca nt satisfy everyone", "d": "11/2014"}, {"body": "sure specifically docs talking additionally nt think make difference picking react adds noise docs going close feel free reopen disagreement thanks", "d": "11/2014"}, {"body": "think tired posted mistake", "d": "11/2014"}, {"body": "could use something like", "d": "11/2014"}, {"body": "suggested solution sufficient thanks would nice consider supporting isdeprecated isobsolete similar support isrequired", "d": "11/2014"}, {"body": "update actually state mutation would alter dom causes error component page including example typing text input bound state", "d": "11/2014"}, {"body": "turns rendering completely unrelated component completely unrelated dom node page causes component become id resets nodecache property discovered debugging given state actions occurs", "d": "11/2014"}, {"body": "debugging appears serverrendered components increase nextreactrootindex variable even though register containersbyreactrootid new component created asks reactinstancehandlescreatereactrootid id use turn returns id occupied server rendered component new component overrides server rendered component causing reference lost overriding happens registercontainer function though would assume bug originates index incremented server rendered component", "d": "11/2014"}, {"body": "found way go around problem including datareactid server rendered component component forced ask createreactrootindex index incrementing variable however believe bug hope someone familiar code find reason removing datareactid server rendered components sufficient", "d": "11/2014"}, {"body": "worries nt think react applications required know server side example two react applications could served two separate services injected page would expect root nodes nt conflict attach point node would sufficient enough identifier numbering applications dom seems like bad idea", "d": "11/2014"}, {"body": "probably sort self time running multiple react instances currently supported absolutely need easily mod react library use different attribute name different instances", "d": "11/2014"}, {"body": "syranide thought randomized root keys server rendering", "d": "11/2014"}, {"body": "zpao oh right yeah work serverrendering actually clientrendering absolutely certain nt raceconditions could cause checksum mismatch good call remember ca nt dynamically render new roots clientside ca nt remember think perhaps nonfatal issues node cache would nt actually cache foreign nodes indefinitely due events priming cache uncertain sounds familiar think really sane way different react instances use different attribute names", "d": "11/2014"}, {"body": "right multiple reacts client going problematic nt understand actual case nt reassign keys mounting existing markup thought picked root key dom think checksums match unless server side generation actually something like phantom determining randomize root id based execution environment instead code path would start server", "d": "11/2014"}, {"body": "zpao oh seems conflated jarails comment issue makes sense yeah clientside reuse serverrendered markup adopts reactid dom increment next index issue quite plainly serverrendered markup reason nonrandomized reactids weird checksum seems correctly done could mathrandom monkeypatchedbroken server environment aware reason react would generate randomized reactids", "d": "11/2014"}, {"body": "zpao seems right quite sure nt broken like", "d": "11/2014"}, {"body": "syranide unfortunately always way infinite todo list fix", "d": "11/2014"}, {"body": "losing performance benefits removing datareactid serverrendered component since seems fix problem getting warnings", "d": "11/2014"}, {"body": "johnydays simply discard already rendered markup client rerender scratch also clear whatever screen say user begun type input edit ps getting warnings react nt think rendered react silently discards", "d": "11/2014"}, {"body": "basically lose performance benefits gained except getting faster initial page paint time would imagine rerendering especially painful mobile devices especially wifi similar connections javascript execution significantly separated initial paint time helps making case getting fixed use case global loading component using another node independent react components make normal javascript class manipulates dom manually much rather use react also react advertised framework selectivelly applied certain parts already developed product issue limits use case rendering parts serverside albeit limited use case", "d": "11/2014"}, {"body": "related note would positive warn user mounting node already contains nodes discarded upon mounting development build", "d": "11/2014"}, {"body": "seems like easiest workaround patch servergenerated string random id seems work okay", "d": "11/2014"}, {"body": "guessing right best solution thanks would generated using current unix epoch time order unique certain limit size reactids", "d": "11/2014"}, {"body": "patched solution use epoch time also account child nodes reference parent reactid", "d": "11/2014"}, {"body": "problem using times easily duplicates fast system low precision example var lt consolelog new date gettime tostring get mostly dupes rather increase buffer range worried collisions getuniqueid requestscoped whatever need singleton manually increment server multiple react strings patched", "d": "11/2014"}, {"body": "thanks fixing child nodes though", "d": "11/2014"}, {"body": "another idea fix framework rather random id could rendertostring either use placeholder id take optional id input started looking like datareactid x string would remain deterministic inputs sure hardcoded test strings staying deterministic would nice particularly affirming compatibility different implementations road render would replace placeholder ids mounted sure would trigger repaint browser might worth keep things deterministic simple developer", "d": "11/2014"}, {"body": "done thanks", "d": "11/2014"}, {"body": "updated aforementioned repo possible workarounds hopefully saves someone else time perhaps documentation expanded example", "d": "11/2014"}, {"body": "seems bug methods classes enumerable please report project", "d": "11/2014"}, {"body": "seems methods enumerable classes class body prototype method declaration equivalent prototype getters setters similar", "d": "11/2014"}, {"body": "document outdated afaik spec draft changed since nov ceane lamerez notifications githubcom wrote seems methods enumerable classes class body prototype method declaration args body equivalent value function args body enumerable false writable true configurable true prototype getters setters similar reply email directly view github", "d": "11/2014"}, {"body": "yes would seem however ie preview chrome seems still class methods enumerable test windows tech preview javascript var class h render return null var g new gpropertyisenumerable render false happy thanksgiving btw", "d": "11/2014"}, {"body": "goes select also figured plenty issue reports please feel free close duplicate", "d": "11/2014"}, {"body": "perhaps reconsider use replacestate issue real issue passing value think remember seeing something else recently ca nt find moment thanks report", "d": "11/2014"}, {"body": "well would recommend erase form state things works absolutely fine getinitialstate returns empty object replacestate called empty object textarea nt erase neither select looks like bug think also seen bug report created one", "d": "11/2014"}, {"body": "meant nt like replacestate api wish setstate", "d": "11/2014"}, {"body": "meant nt like replacestate api wish setstate", "d": "11/2014"}, {"body": "jerk understand replacestate useful gets abused makes sense forms long thing state", "d": "11/2014"}, {"body": "zpao oh yes forms definitely makes sense maybe another api like resetstate would useful call state resetting getinitialstate anyways issue textareas selects clearly bug update ok source code reactclassjs comments said replace state going deprecated really going deprecated remain way reset state use setstate function zpao maybe could unveil good way reset forms far logical option thissetstate thisgetinitialstate getinitialstate declare form fields", "d": "11/2014"}, {"body": "example pattern useful", "d": "11/2014"}, {"body": "works make small example shows problem", "d": "11/2014"}, {"body": "nt appear reproducible react react addons gist least node version react node using react addons", "d": "11/2014"}, {"body": "hmmm dig bit using latest master digging code seemed like problem coming react could certainly wrong", "d": "11/2014"}, {"body": "pinned mixin undefined serverside context react throw error indicate fact", "d": "11/2014"}, {"body": "mixins simply ignored right referenced looking early error warning", "d": "11/2014"}, {"body": "mean always something like seems like odd choice silently ignore undefined mixin least fact default behavior feature pretty prominently mixin docs good reason", "d": "11/2014"}, {"body": "thanks tracking going close dupe", "d": "11/2014"}, {"body": "aside potential perf issues one issue handle nested complex structures like arrays concatenation union array objects deep object merging lead unexpected behaviour often implementations allow specify merge strategy sure would prop type declaration", "d": "11/2014"}, {"body": "indeed like see option using proptypes perhaps optional boolean parameter problem would course handle jsx syntax", "d": "11/2014"}, {"body": "really behavior want control calling createelement behavior defined element reactcreateclass could see useful proptype map behavior baked nt think want elements much flexibility though either new proptype defined behavior keep simple also use state var", "d": "11/2014"}, {"body": "docs pretty clear currently supported nt look like yet nt lot experience contributing might simple changed based source", "d": "11/2014"}, {"body": "pull request may good starting point wonder add svg tags", "d": "11/2014"}, {"body": "design continue discussion feel necessary", "d": "11/2014"}, {"body": "going mark duplicate please comment disagree reasoning", "d": "11/2014"}, {"body": "thanks spicyj sorry nt see issue still think makes good sense treating arrays terminals said dying without still added documentation would great idea maybe pull addition docs saying merges top level sure best way word", "d": "11/2014"}, {"body": "close enough close one", "d": "11/2014"}, {"body": "cc vjeux", "d": "11/2014"}, {"body": "tried several days use angular injector caters extensively everything class react render functions naturally instantiate components make approach futile", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "another technique wrapping react johnlindquist", "d": "11/2014"}, {"body": "guess really boils two problems default properties copied possible add another lifecycle method construction time resolve issue", "d": "11/2014"}, {"body": "using angular injector react would something like meet requirements", "d": "11/2014"}, {"body": "question would use set seems like like misuse goal set instance level props provide sane defaults case props missing side loading model via default props breaks explicit parentchild hierarchy introduces nonexplicit entry vector seems like would better served conceptually state instance level stuff example flux implementations something like method called onchange getinitialstate reason would nt want state", "d": "11/2014"}, {"body": "great question jquense trouble way pass something instance form outside right using props useful pass things pass different implementations test time also forces code interface instead implementation mocking module level problematic reasons listed hoping react facilitate different style answer question", "d": "11/2014"}, {"body": "cascadian cool approach indeed similar road traveled ran issue though injecting classes one class injected might dependency could nt get work needed class pass react create class instance constructing new viewmodel receive http construct using", "d": "11/2014"}, {"body": "cascadian feel odd using dependency injector inject classes instead instances", "d": "11/2014"}, {"body": "gotcha iammerrick see advantage simple pass want via props use default instead mocking module personally would something middle mock component instead mocking whole model module another pattern used albeit complicated use state props provided might bit overkill situation works great making controlleduncontrolled component props larger issue react seems pretty set better worse testing story mostly due way fb jest good indicator feel module level mocking right way handle mocking cjs environment definitely see one cold disagree though huge fan either spent time trying figure good way di react mostly kept coming back use explicit props nt rely defaults best practice verbose repetitive sort react paradigm explicitness abstraction", "d": "11/2014"}, {"body": "iammerrick feel odd using dependency injector inject classes instead instances think angular di transientscope annotation would accomplish almost thing want avoid injecting classes var http function return get function diannotate http new ditransientscope var mycomponentviewmodel function return http diannotate mycomponentviewmodel new diinject http diannotate mycomponentviewmodel new ditransientscope ran issue though injecting classes one class injected might dependency could nt get work needed class pass react create class instance give example nt quite follow sample code angular di injects http class mycomponentviewmodel factory function scope mycomponentviewmodel constructor similarly mycomponentviewmodel class injected function create react component", "d": "11/2014"}, {"body": "nt buy arguments listed mock module level sure slower skeptical slow jest pretty fast using many thousands thousands test test suite significantly hinders workflow uses module mocking often use clearcache reset cache limitation jest inherent model could done automatically let fix slow arguably distinction arbitrary academic terminology argument practical argument confusing part jest require outside inside forbid requires automatically ensure runs isolated scope limitation model implementation love see pull request fix arguably overreliance statics problem yet see dependency injection automatically solve still requires restructuring think point making orthogonal testing assume want dependency injection production runtime solve issues said would like accommodating try address concerns first moving toward encouraging shallow testing rather deep testing asserting renders one level deep rather implementation details lower level components see avoids need mock nested components assert reactelements rather asserting classes get instantiated second moving towards using standalone plain classes instead reactcreateclass use di system would use top classes ie able wrap classes di provider third concern memoized solvable wrapping function invoke function getinitialstate time makes effectively lazy function capture additional dependencies closure", "d": "11/2014"}, {"body": "may right commonjs environment fast enough amd brutally slow sure clearcache resetting currently loaded modules fair enough agreed coming angular land might bit attuned di oriented workflow need getting used coding without injector thank trying address concerns appreciate time put response right memoization solution much looking forward move classes thank", "d": "11/2014"}, {"body": "agreed would nice implementation like javascript var arraypush arrayprototypepush function cx var index var length argumentslength var classnamesofar index lt length var item arguments index item null continue typeof item object arraypushapply classnamesofar objectkeys item filter function classname return item classname continue typeof item string classnamesofarpush item return classnamesofarjoin although rather like jstransform would let us", "d": "11/2014"}, {"body": "courtesy addon feel free fork improve believe intent compatible css selector minification compatible dynamic class names", "d": "11/2014"}, {"body": "hey guys putting implementation utilized tools within react handle multiargument issue coffee classset args gt classnamedefinition arg args string typeof arg classnamedefinition key true key argsplit else object typeof arg classnamedefinition reactaddonsupdate classnamedefinition merge arg reactaddonsclassset classnamedefinition code arguments passed number strings strings spaces objects data merged using react addons", "d": "11/2014"}, {"body": "come right exposing stub implementation internally gets statically transformed string concatenation far wanted keep things sync nt diverging patterns close generic totally writable would support people publishing better impl npm perhaps deprecating one expose", "d": "11/2014"}, {"body": "since still use jstransform get going close since nothing actionable wait thanks filing filing jstransform", "d": "11/2014"}, {"body": "worries took longer find jstranform otherwise would started", "d": "11/2014"}, {"body": "intuitive imo", "d": "11/2014"}, {"body": "would nt much better imo would expressive", "d": "11/2014"}, {"body": "shape certainly understood circles entered parlance optimizations sharing maps objects shape plenty advice code change shape benefit speed increases would nt surprised see term thrown around future necessarily advocating suggesting origins fwiw think feels foreign context", "d": "11/2014"}, {"body": "like bloodyowl well", "d": "11/2014"}, {"body": "mczepiel understand terminology used standpoint api facebook making special effort ensure readability react code instantly understood would venture guess frontend js developers looked optimization documents busy trying get applications working across browsers node advanced frontend developers may intimate terminology though completely agree interms makes sense people first glance many suggestions superior throw suggestions would make better terminology first glance", "d": "11/2014"}, {"body": "suggestions definitely seem sensible use shapes describe models application still feels weird foreign every time see code like shorter descriptor would nice seems vague", "d": "11/2014"}, {"body": "completely agree jordansexton suggestions good state bit big honest think would better used think even changing would easier understand every time see want write", "d": "11/2014"}, {"body": "agree mbrio current nt seem useful applications think object could properties one type even properties would better described shape declared names properly documented considering another option would making check see value provided proptype object proptype current behavior used object properties must declared type object acts", "d": "11/2014"}, {"body": "jordansexton making method take shape proptype go ahead create fork see pull change", "d": "11/2014"}, {"body": "jordansexton looks like nogo function lot complex immediately seems pass instance ensure shape property matches see tests ask method incorrectly named well think current method called current something like", "d": "11/2014"}, {"body": "far see method proposed would still work long passed type use current behavior still supports complex cases shown tests otherwise object literal nonproptype object used shape descriptor", "d": "11/2014"}, {"body": "naive untested implementation", "d": "11/2014"}, {"body": "jordansexton meant previous comment nt believe reused jobs one checks object conforms specific schema one ensures property object conforms specific schema believe functions warranted needed current incarnations combining functions one believe would make confusing use word looking back suggestions function names written comment inclined suggest renamedaliased renamedaliased suggestion get rid functions create new function allows wildcards coffee checks ensure properties numbers reactproptypesobjectconformsto reactproptypesnumber checks ensure object properties b numbers reactproptypesobjectconformsto reactproptypesnumber b reactproptypesnumber gets confusing handles wildcards mixed properties coffee checks ensure property object properties numbers reactproptypesobjectconformsto reactproptypesnumber reactproptypesobject sure feel may engineering validation system props", "d": "11/2014"}, {"body": "happening sending result standard default terminal might want redirect specific file exists new one created see", "d": "11/2014"}, {"body": "assumed seeing first line output something like output nt happen nice thanks", "d": "11/2014"}, {"body": "fixed please close issue", "d": "11/2014"}, {"body": "inclined say talked lot making use different syntaxes trying keep minimal possible adding already pretty big deal cc sebmarkbage", "d": "11/2014"}, {"body": "try keep syntax discussions way wider group contributing syntax make worth extra weight language think difference might confusing last two already supported like way think though feel strongly open issue", "d": "11/2014"}, {"body": "closing favor", "d": "11/2014"}, {"body": "believe misbehaving setting makes uncontrolled make attempt change value", "d": "11/2014"}, {"body": "case thinking imagine series state transitions perhaps instead single button form would sort selector loads series objects data source one transitions sets property null end value last object textarea nt seem right see though saying might taking concept two way binding little literally currently working around something like nt big deal", "d": "11/2014"}, {"body": "syranide setting null make uncontrolled nt sound right nt looked linkedstatemixin long time also would expect behavior input textarea", "d": "11/2014"}, {"body": "zpao treated mostly identical set throughout react think also yeah agree think makes sense reset becoming uncontrolled deterministic one also one easiest reason", "d": "11/2014"}, {"body": "one driving nuts finally got bottom things simpler example nt use pretty sure property given component controlled regardless value assigned", "d": "11/2014"}, {"body": "intentional spans react implementation detail diffing done easily since means nt use react client side point wrapping", "d": "11/2014"}, {"body": "alright fair enough", "d": "11/2014"}, {"body": "find specify attribute css nt need wait", "d": "11/2014"}, {"body": "think valuable request data floating around context instead accidentally getting props knowing thursday november brent burgoyne notifications githubcom wrote day talking rpflorence usage context reactrouter initial curiosity came needing something like stub context component test see value context one thing still nt feel right components concerned parent passes data since context props basically two merged component would define proptypes would include everything canshould passed one place without concerned props get point getchildcontext maybe renamed getchildprops would additional method passing props anything could passed component via context could also passed props vice versa something like var parent reactcreateclass childproptypes foo reactproptypesstring getchildprops function return foo bar render function return var child reactcreateclass proptypes foo reactproptypesstring render function return thispropsfoo reactrender documentbody would render bar baz thoughts reply email directly view github", "d": "11/2014"}, {"body": "would mean essence could achieved explicitly like child changes explicitly pull think brentburg best practice use components really need state also use nt refer nt need worry beyond resolving also think api needed use context populate default props covers child seems like declaring proptypes props pass statetypes creatingamending child context nt need contract parent putting otherwise child would need handle missing context reason need maybe nt instead context passed", "d": "11/2014"}, {"body": "midst revamping context good time bring think important access things inside context props prevented using key propcontext used elsewhere context distinct thing state props think important make sure distinction nt lost uses intentional actually similar discussions long ago merging props state single data blob arguments ownership intention came going say like thinking seriously awesome pretty sure sebmarkbage agree let comment case", "d": "11/2014"}, {"body": "hey folks using mixin scope well props method resolve first looks props scope given key create new scope well components render methods stuff like explicit need call resolve need find value nt care came", "d": "11/2014"}, {"body": "often intentional poor lint warning test true unlike", "d": "11/2014"}, {"body": "true common way checking undefined null however strict type checking using recommended react team feels unnecessary enable jshint test end thought make recommendation", "d": "11/2014"}, {"body": "use places check think continue appreciate recommendation though knows maybe change future", "d": "11/2014"}, {"body": "extremely good question thanks raising case manually pruningoptimizing tree recalculation seems need request access context variables relevance calculation could also consider fancy things like pass hash full context even full context necessary sebmarkbage thoughts", "d": "11/2014"}, {"body": "yeah problem middle components nt know context distant child might need way know declare even able correctly implement", "d": "11/2014"}, {"body": "wonder context propagation could happen separate tree traversal without blocked falsy middle basically parent context changes mark descendants receive context dirty matter distant ancestor context change effect state change descendants opt receive new regardless parents said", "d": "11/2014"}, {"body": "gaearon think case need rerender everything wo nt effect pruning subtrees otherwise context inconsistent state element tree", "d": "11/2014"}, {"body": "andreypopp think middle components effect whether descendants receive new context like effect whether receive new state case numbers would incrementing inconsistency", "d": "11/2014"}, {"body": "put differently think work exactly context owner something like store result gets written descendant context consumers declared keys context receive context subscribed store updated state nt mean actual want show model inconsistent flux app middle context act like sideway storage scoped subtree", "d": "11/2014"}, {"body": "edit wo nt work parent may change talked glenjamin irc convinced changing context might bad idea per se lose ability reason something updated root update implicitly causes different child updates reasonable solution see completely forbid context changes make similar gets called component mounted would make context hell lot simpler think remove third parameter since context never updates case need updates context owner eg like reactrouter wants passed topdown usage mixin cc mjackson nothing prevents passing descendants subscribe changes put reasonable solution", "d": "11/2014"}, {"body": "think key question answer scenarios passing data preferable passing data triggering event make component call using context passing object references around quite happily ever write objects read eg", "d": "11/2014"}, {"body": "use case context parameters applicable across potentially large subtree nt want pass generic container nodes example might color theme large number nodes might listen see background color supposed white black would nt want pass around everywhere parameters making getchildcontext behave like getinitialstate would nt actually solve problem could always replace parent node provides given context value another parent node provides different context value affected subtree indistinguishable mutating context variable value think find solution avoids users wire change listeners think andreypopp may right least need provide way shouldcomponentupdate know anything context changed decide always return true context variable change chat sebmarkbage later today see thinks", "d": "11/2014"}, {"body": "making getchildcontext behave like getinitialstate would nt actually solve problem could always replace parent node provides given context value another parent node provides different context value affected subtree indistinguishable mutating context variable value ouch totally right nt considered", "d": "11/2014"}, {"body": "jsfb second thought nt quite understand comment replace parent node entire child subtree remount anyway would nt", "d": "11/2014"}, {"body": "currently yes remount partly implementation detail imagine discussing implementations ramifications reparenting subtrees without loosing node state sebmarkbage chatted came following conclusions shouldcomponentupdate complex escape hatch implementation requires solid understanding happening component reason unreasonable assume know context variables used since already need know properties used used change probably nt making situation much worse already improvement using old owner relationship therefore issue still worth discussion probably nonblocking contexts complex featureexperiment point probably going need thinking officially supportdocument learn likely continue iterate topic sebmarkbage let know missed anything good discussions though thanks feedback", "d": "11/2014"}, {"body": "thank taking time discuss unreasonable assume know context variables used since already need know properties used used toplevel component implements using purerendermixin avoid extra updates nt mean knows somewhere inside happens contain depends router context gets even worse frameworks popular react routing framework use context may even aware somewhere apps nt change active link state somebody optimized toplevel components literally idea declare corresponding even get way components aware possible descendants basically move contextdependant component anywhere inside enabled component break subtly therefore use context way avoid subtle breakage unrelated components never implement goes react saying frameworks top react swannodette om make ish default weird cut like means contextbreaking every component agree blocking work ca nt agree current situation satisfactory context used hard implement context downright impossible unless make assumption component always aware could popular libraries already rely context heavily understand supported feature opinion either needs least possible make work disabled libraries forced use subtly broken", "d": "11/2014"}, {"body": "known start introduced contexts need able undocumented unsupported features experimental features able iterate find special cases example nt contexts would nt known need changed containerbased instead ownerbased subtle breakage part contract using undocumented features think need bypass new context anywhere parent tree potentially something determines entire subtree needs reconcile", "d": "11/2014"}, {"body": "sebmarkbage suppose could work context hardly meant change often case nt need third parameter", "d": "11/2014"}, {"body": "correct always kind useless", "d": "11/2014"}, {"body": "think need bypass shouldcomponentupdate new context anywhere parent tree makes lot sense context changes parent need override falsy subtree begs question know context changes state props seems like would need keep copy current context around somewhere diff result whenever called", "d": "11/2014"}, {"body": "using contexts way managing store references like explicitly define stores required mock sample data stores need test component avoiding instantiate larger framework pass simple readonly stores known data serverside rendering simplifies serverside case bulk application code used looking example implementation store data accessed getters elements cache store data want single version truth simple nonasync example render would typically something like components attach listeners stores nt fully decided granularity stores onchange event however nt decided two things listeners individual property changes stores contain stores example people fb users large complex async store reuse store structure personstore one general collection getfriends getperson etc many unique instances person store type individual person example component requires people store context param uses personid prop identify subscribe specific person store introduce dynamic changes let say currently logged user logs someone else logs ignoring fact probably redirectrefresh page real application would element update let also assume element still page nt destroyed would expect application logic first removedestroy existing people store component needs stop listening updates would recommend reactclass api eg oncontextchange prev new element compare two peoplestore instances let ignore public data assume new peoplestore null element would unsubscribe previous store trigger render render would show user unknown type message user logs another user new store created element reattaches render thing new data behind scenes thisrender could nt synchronous designexample make sense render calls need collected framework batched together unlike props listening stores outside core react role managing rendering nt think context change involved shouldcomponentupdate despite example including changing context values new store object nt think stores going immutable highlevel nature think typical flux application design operate subscriber model callbacks async etc base store object usually live life application", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "workaround believe grab domnode ref add need", "d": "11/2014"}, {"body": "nt know much behavior closure compiler recommend try using new api creating elements maybe solves problem", "d": "11/2014"}, {"body": "would nt solve closure still see bare key try crush real option set externs file make sure nt extern files maintain though would guess difficult least partially automate based property config files", "d": "11/2014"}, {"body": "since nt using jsx could also course quote props object closure skips", "d": "11/2014"}, {"body": "think already solved official yet issues eg", "d": "11/2014"}, {"body": "please provide details surrounding code might causing issue whenwhere seeing error jsx compilation browser node thanks", "d": "11/2014"}, {"body": "need use everywhere seems may break weird could causing", "d": "11/2014"}, {"body": "aackerman code seems compile fine see error browser notice using following versions react tools reactify reacttools reactify could causing problem syranide try switching everything reactaddons see works", "d": "11/2014"}, {"body": "skiano think reactify uses jsx compiler react may run issues check make sure reacttools version matches using nt related seeing special internal wrapper component specific event handling mostly likely something packaging browser screwing seen recent", "d": "11/2014"}, {"body": "thanks zpao thread seems like exactly happening check gulp file make sure bundling react twice", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "agreed react seems assume jest testing", "d": "11/2014"}, {"body": "keep mind js var wrapper reactcreateclass render function return thispropschildren reactrender documentbody nt warn", "d": "11/2014"}, {"body": "good catch let put addons section polyfill docs contained might also worth mentioning additional polyfills may required see addons index", "d": "11/2014"}, {"body": "intended translates temporary implementation detail", "d": "11/2014"}, {"body": "actually always returns return render want guard appropriately direct dom operations component failure happening sounds like saying long rendering something work unmounts return null", "d": "11/2014"}, {"body": "zpao tried getdomnode return null depending owner render see example seems like bug", "d": "11/2014"}, {"body": "plievone seems like got zpao componentwillunmount modalinner failing parent modal returns null", "d": "11/2014"}, {"body": "hmm case sound like bug bet adding something null component cache try get dom node unmounting child hits cache traversing bails never getting actual existing node disappears cc chenglou test case want fix", "d": "11/2014"}, {"body": "ca nt decipher actual issue sounds like", "d": "11/2014"}, {"body": "complete repo issue calling works calling doesnt hope helps", "d": "11/2014"}, {"body": "bit separate", "d": "11/2014"}, {"body": "manually patched onto latest master fixes issue per jsfiddle nice work spicyj", "d": "11/2014"}, {"body": "schotime glad hear", "d": "11/2014"}, {"body": "use write something like box using lt code gt joinclasses lt code gt helper available built react via npm sorry box", "d": "11/2014"}, {"body": "thanks spicyj quick worked like champ", "d": "11/2014"}, {"body": "syntax nt currently documented decide encouragedocument sure mention required polyfills time well", "d": "11/2014"}, {"body": "documented transferring props definitely noted linked transferring props section learned first place believe may reading wrong took paragraph invitation use syntax perhaps mentioning polyfill appropriate rewording docs make clear using internally", "d": "11/2014"}, {"body": "thanks nt realize wrote docs", "d": "11/2014"}, {"body": "maybe drop docs refer proposal needed supported reactspecific patterns copypaste mistake internal docs evident referring fb code base", "d": "11/2014"}, {"body": "drop nt mention", "d": "11/2014"}, {"body": "yea need document harmony stuff separately edge cases considerations", "d": "11/2014"}, {"body": "nt super well documented need use well special case ms something different setting styles vis js reason must specify styles camelcased eg update code report back fixes things read also fwiw latest opera built blink maintain prefix would thought picked one", "d": "11/2014"}, {"body": "maybe warn", "d": "11/2014"}, {"body": "otranform fixed hyphens issue however style object still update update transform height width etc updated start reason updating height width style object left weirdly actually updating transform stays like nt update style object height width change change left opera object stays intactcorrect like updated values chrome ff", "d": "11/2014"}, {"body": "think might bug diff algorithm opera also translatex capital x nt help", "d": "11/2014"}, {"body": "animation doc mentioned csstransitiongroup wo nt affect children initial render new children added subsequent renders per leebyron stylistic choice nt get flash random transitions page created however sometimes transition load exactly want presently way manage ctg maintaining seo transitioned elements options pass prop allows developer optin transitioning initial render use separate transition state initial render eg expect developers handle css eg", "d": "11/2014"}, {"body": "things like scrim nicer toggle classname manually removing dom however without ctg element might disappeardie transition completed unless manually manage complexity perhaps isshould manual trigger enterexit eg value treat child like mounted mount element classes appropriate", "d": "11/2014"}, {"body": "interesting vaguely related proposal chrome css transitions pages navigation transition spec would nice able experiment something similar today using combo ctg reactrouter", "d": "11/2014"}, {"body": "weird set container determine class name child given markup intuitive selector", "d": "11/2014"}, {"body": "leebyron initial implementation nt know make react git repo globallooking statements play nicely webpack implementing testing npm version copying changes back fork feel addition prop sugar thispropsdelay stands want feathercascading transition add css would much nicer", "d": "11/2014"}, {"body": "props planning adding pr bool run mount well update default sugar setting style children bool determine whether children rendered useful binding prop controls whether something shownhidden default architecturally think makes sense set rather children bigger discussion", "d": "11/2014"}, {"body": "today showerthought important start pages want seo entry transitions nt enough way architected needs remain page children destroyed effectively manage transitions therefore need introduce another component manage delays introspect use wait specified period altering child making presence transparent pointofview child need dig see handles multiple transitions different periods conceptually bit delays different bit transitions work advertised", "d": "11/2014"}, {"body": "yes currently replace entire contents container wo nt true best workaround probably add extra wrapping element around", "d": "11/2014"}, {"body": "could would add extra wrapper dropdown stops working would modify party code bootstrap theme code css overrides undesirable resulting html would correct", "d": "11/2014"}, {"body": "hmm interesting specialcase curious wo nt pressing ctrlb wrap selected text operating controlled mode made possible marked means every update checks dom compares current value stops cursor jumping end every key press realistically applied may become prohibitively expensive expert believe best handled manual dom interaction feel warning may preferable regardless free ignore guarantee issue cc salier", "d": "11/2014"}, {"body": "hmm interesting specialcase curious wo nt pressing ctrlb wrap selected text behavior varies browser yes even beyond browsers strange things text nodes inside react quickly get sync dom even vanilla text editing behavior expert believe best handled manual dom interaction pretty much really decent compromise react either need completely handsoff rope react updates need maintain absolute control component content selection etc ignore warning latter option faint heart see potential support editables nt think much need point", "d": "11/2014"}, {"body": "think close noted child warn really know feel free ignore", "d": "11/2014"}, {"body": "correct way currently drawbacks need aware check docs ps yes bad props considered immutable nt mutated may mutable", "d": "11/2014"}, {"body": "reactaddonsclonewithprops correct way currently drawbacks need aware check docs thanks ps yes bad props considered immutable nt mutated may mutable even adding rendering first props passed concrete instance passed react renders dirty anyway use way", "d": "11/2014"}, {"body": "reactelements ie return render considered immutable afaik infact believe entire reactelement considered immutable", "d": "11/2014"}, {"body": "render method called component attached rendered component case descriptor nt nothing moment", "d": "11/2014"}, {"body": "ca nt imagine variable used inside react likely something code", "d": "11/2014"}, {"body": "syranide example actually happen inside event weird ca nt see errors firefox using chrome", "d": "11/2014"}, {"body": "andreynering might bug ff chrome similar issue back would suppress error messages possible enable pause exception ff try see helps", "d": "11/2014"}, {"body": "syranide think right firefox bug tried pause exception error thrown nt show console aparently people similar problems like react related", "d": "11/2014"}, {"body": "get fresh nt give errors", "d": "11/2014"}, {"body": "zpao really weird development npm install react react nodemodulesreact envify esprimafb jstransform xtend development npm update npm warn unmet dependency requires esprimafb load npm warn unmet dependency npm warn unmet dependency version xtend nodemodulesreactnodemodulesenvifynodemodulesxtend objectkeys esprimafb nodemodulesreactnodemodulesenvifynodemodulesesprimafb jstransform nodemodulesreactnodemodulesenvifynodemodulesjstransform sourcemap amdefine esprimafb nt warn install obviously installs update though complains unmet", "d": "11/2014"}, {"body": "weird nt understand npm sometimes bet goes away gets shipped envify nt esprima dependency", "d": "11/2014"}, {"body": "syranide exactly weirdness trying avoid going update latest hopefully hughsk get around reviewing", "d": "11/2014"}, {"body": "zertosh ps talkpresentation excellent", "d": "11/2014"}, {"body": "think envify publishing deps pick automatically", "d": "11/2014"}, {"body": "amp properties nt standard", "d": "11/2014"}, {"body": "gives original event react bring along polyfill nonstandard attributes", "d": "11/2014"}, {"body": "yeh started thinking looked nt sure standard fields hah looking looks like standard ones supported looked first sorry close", "d": "11/2014"}, {"body": "using jsx transform reacttools version afaik always kept empty string case correctly boolean naked props currently correctly case indeed empty string", "d": "11/2014"}, {"body": "insert explicitly similar really want whitespace recommend use whitespace instead", "d": "11/2014"}, {"body": "sounds like solution closing", "d": "11/2014"}, {"body": "quite places ca nt throw exceptions without react ending invalid state ca nt trust developers solution know put trycatch render", "d": "11/2014"}, {"body": "ah thanks mean matter trust prevent using react component whatnot plan support error handling", "d": "11/2014"}, {"body": "longlho area believe two biggest blockers many browsers ruin errorcallstack rethrowing trycatch incurs performance penalities hot paths", "d": "11/2014"}, {"body": "yeah may hear conversation error boundaries means making way handle sort thing gracefully something want find good solution nt think tracking issue though let use one", "d": "11/2014"}, {"body": "ah thanks guys sound like big issue definitely important given react stateful would nt require sort sandbox rendering make sure everything cool apply new state guess active effort front", "d": "11/2014"}, {"body": "easy follow actually going would possible create repro", "d": "11/2014"}, {"body": "going close make minimal repro case please post reopen", "d": "11/2014"}, {"body": "definitely design ca nt think would happen nt even sound like something control files end referencing module browserify nt run bundle twice", "d": "11/2014"}, {"body": "definitely happen webpack well extraordinarily confusing debug", "d": "11/2014"}, {"body": "created simple example tkafka explained originally bundling browserify amp reactify though latter effect bundling looked generated bundle single copy react bundled would love see case repros guess typically third party perhaps component required also requires react different version dependency maybe even way ran npm install dupes", "d": "11/2014"}, {"body": "zpao aha right works adding react thispropsreact code project results false seem like culprit gulpfile investigate", "d": "11/2014"}, {"body": "investigation culprit problem building app vendor files separately see simplified example containing react containing app code excluding specified dependencies happened dependencies array browserify seems compare react reactaddons textually packaged keeping thus two instances", "d": "11/2014"}, {"body": "thanks investigating nt think first something like last hopefully better able diagnose future kill nt happen ever", "d": "11/2014"}, {"body": "zpao would awesome one way could check whenever user requires hold nt slow things user requested addons sure nonaddon react well least warn console", "d": "11/2014"}, {"body": "capybara problem fill input nothing capybara wo nt send keystrokes browser result events emitted reference would paste author capybara jnicklas wrote ticket attached bottom post simplified version happens try fill input capybara check get filled input contains something page load change value clean capybara would type requested value key key use one available hacks selenium know using link contains one change tests architecture avoid blankstrings checking possible reference", "d": "11/2014"}, {"body": "since fixed capybara true reactbased inputs onchange triggered simple html inputs set field sure right commit trigger change events clearing fields", "d": "11/2014"}, {"body": "weird ignore change method fastest hacky solution found execute react event using testing library use selenium driver really shaming way achieve goal guess want well simulate backspacing whole input", "d": "11/2014"}, {"body": "ended monkey patching capybara selenium granted work selenium driver nt require changes test suite ruby class capybara selenium node alias origset set def set value nativesendkeys backspace valueempty origset value end end", "d": "11/2014"}, {"body": "understanding capybara commit right setting value trigger change event test click body order event fire would happen input focus value set via js click triggered change event actually firing without", "d": "11/2014"}, {"body": "nonreact input change fire called need click anywhere commit really relevant relevant tested capybara selenium work way nonreact input", "d": "11/2014"}, {"body": "sorry said shit onchange like onkeypress updown whatever make sense let onchange range way debounce said maybe offer new thing original debounced onchange", "d": "11/2014"}, {"body": "standard yet likely going end standard makes sense add otherwise use whatever mechanism add adding nonstandard attributes future though simply componentdidmount call", "d": "11/2014"}, {"body": "indeed thanks workaround", "d": "11/2014"}, {"body": "awesome want add wiki also add video videos page docs though growing bit unwieldy days want put somewhere", "d": "11/2014"}, {"body": "going close since real things happen outside issue", "d": "11/2014"}, {"body": "wow pretty awesomely long list going make tad bit longer hehe see", "d": "11/2014"}, {"body": "removed target dates never solid commitments estimation time thanks reminder", "d": "11/2014"}, {"body": "simply limitation react current dom implementation certainly dropped future return current simply translate however entirely sure asking intend render dummy components never dom probably supported future probably considered good practice", "d": "11/2014"}, {"body": "syranide post example suppose component renders html shows react devtool actually element could useful cases people nt want components mounted also cases child positioned would allow dom simpler", "d": "11/2014"}, {"body": "jiyinyiyong ah see answer though limitation current dom implementation react nothing wrong example must wrap dom component work return array allowed afaik devs expressed intent fix future", "d": "11/2014"}, {"body": "glad \u5468\u4e00 andreas svensson notifications githubcom wrote jiyinyiyong ah see answer though limitation current dom implementation react nothing wrong example groupa must wrap thispropschildren dom component work return array allowed afaik devs expressed intent fix future reply email directly view github", "d": "11/2014"}, {"body": "syranide know actual limitation allowing components return arrays render result curious know investigate deeper", "d": "11/2014"}, {"body": "leoasis nt really investigated exact obstacles broadly speaking problem current implementation expects components correspond exactly one dom node shared simple case handle interms lazily associating node component also mutating root components able handle lot complex none infrastructure currently exists react components would need aware sibling components etc etc", "d": "11/2014"}, {"body": "syranide see yeah seems something hard tackle since libraries limitation definitely trivial problem solve check source try understand bit better assumption one component one dom element makes code easier thanks", "d": "11/2014"}, {"body": "leoasis looking contribute general would recommend looking areas react would expect affect internal api considerably quite nontrivial ways even managed get working may much friction realistically get approved said figuring needs done pushing bitesized prs always possibility objections sebmarkbage", "d": "11/2014"}, {"body": "syranide exercise get know internals react honestly especially given guys awesome could nt figure yet nt think come something change curiosity anyway already research pain points already identified helpful read try contribute", "d": "11/2014"}, {"body": "think many nt really understand code nt work otherwise like documentbody warning", "d": "11/2014"}, {"body": "setting component fix done automatically use jsx", "d": "11/2014"}, {"body": "oh great thanks using coffeejsx appearantly nt report issue instead", "d": "11/2014"}, {"body": "sorry bother one time input value example fixed times intuitively event even fire however strange way equal fixed value input field times either fixe fixed oneothercharacter", "d": "11/2014"}, {"body": "menelaos problem input value example fixed times value fixed never update value thus appears readonlyfixed readonlyfixed input field sideeffect controlled component fixed value read link posted might become clearer ps want readonly input set attribute", "d": "11/2014"}, {"body": "someway call release notes nt made explicit", "d": "11/2014"}, {"body": "pselden try keep issues related development closing nt think anything actionable continue optimize react feel free continue discussion still questions", "d": "11/2014"}, {"body": "syranide understood sorry closed initially thought may performance regression long lists appears expected head irc channel discuss", "d": "11/2014"}, {"body": "sure documentation deprecatedbutstillworking code wrong prop validation docs still shows deprecated", "d": "11/2014"}, {"body": "solved check md files linked recent documentations sorry keeping docs uptodate transition periods nt easy think relatively wellmaintained til", "d": "11/2014"}, {"body": "chenglou changes pushed live", "d": "11/2014"}, {"body": "pushed sorry delay confusion", "d": "11/2014"}, {"body": "seeing error using jsx grunt building duo affect issue nt ideas right", "d": "11/2014"}, {"body": "spoke fast used twice accidentally never mind", "d": "11/2014"}, {"body": "zpao packagejson says reacttools fine see createelement browerified source error must come something else made new project get warning something calling react component directly use factory jsx instead see use jsx write code browser pure js ofcourse compilation everthing says even importing components mixins wo nt accept createfactory use jsx write everything theory nt even seeing error according update logs beginning become bit hassle read docs changed refferal old ways pointed real migration examples comparisons", "d": "11/2014"}, {"body": "tryspace please post coderepro", "d": "11/2014"}, {"body": "syranide working pure jsx component time happens use another component component comes either require put reactcreatefactory around althought necessary using jsx filescope tried wrap createclass around reactcreatefactory difference ca nt post repo private code pretty simple var react require reactaddons var button reactcreatefactory require button arrow var something reactcreateclass render function return works fine moduleexports something however removing following give warning var react require reactaddons var button reactcreatefactory require button arrow var something reactcreateclass render function var buttoncomponent reactcreateclass render function return button moduleexports something course ridiculous workaround solution really explain warning given even using createfactory anything jsx well", "d": "11/2014"}, {"body": "tryspace nt use jsx ps also definitely want create new every render", "d": "11/2014"}, {"body": "refering code sample valid right way exposing component using browserify moduleexports reactcreatefactory something", "d": "11/2014"}, {"body": "components npm users module wrap createfactory every time seems like components export createfactory module ca nt used people use jsx without spewing errors console solution users always wrap requires createfactory seems little tedious imo right", "d": "11/2014"}, {"body": "see blog post library authors export unwrapped classes", "d": "11/2014"}, {"body": "contra would seem logical well apparently need import factory think personally messy require require wrapping sure would easily identifiable component element start nt know importing problems adress first project like documentation", "d": "11/2014"}, {"body": "nt think anything actionable closing please correct wrong", "d": "11/2014"}, {"body": "spicyj need still nt know warnings show documentation clear", "d": "11/2014"}, {"body": "tryspace looks like using createfactory jsx right using jsx specify elements nt ever need call createfactory", "d": "11/2014"}, {"body": "spicyj right sure tested indeed fixes warnings expected thanks", "d": "11/2014"}, {"body": "sebmarkbage want explicit warning using output createfactory jsx instead generic nt use functions jsx warning nt look like real way identify present could always add", "d": "11/2014"}, {"body": "spicyj temporary warning detecting exists may enough", "d": "11/2014"}, {"body": "willdady also tried thiskey google found explanationsolution please clarify blog post prevent others headaches", "d": "11/2014"}, {"body": "would much like access attribute even directly accessable element possibly utility method access value use attribute way accessing model key attribute recognize suggesting ref value semantically different proposing nt understand change forced meaningful use please way accessing ref going forward would meaningful even separate utility method would return value component passed parameter thank", "d": "11/2014"}, {"body": "think trick far understand also removed future", "d": "11/2014"}, {"body": "hpcodecraft already gone master likely ref change string richer data type allow share reference siblings see could something like work", "d": "11/2014"}, {"body": "well think ultimately need forget wanting going stop train see advantages using string references made things much convenient thanks time", "d": "11/2014"}, {"body": "take breaking changes seriously want make sure always least possible upgrade every use case ideally make somewhat convenient think either firstclass refs context able help solve use case though feel free ping trouble solving upgrade path", "d": "11/2014"}, {"body": "seems autofocus supported server side rendering", "d": "11/2014"}, {"body": "property add attribute html input element especially useful decide serverside rendering conflict current js code handles auto focus unsupported browsers", "d": "11/2014"}, {"body": "installing react installs reactify bug downgrade reactify code work", "d": "11/2014"}, {"body": "installing react install reactify", "d": "11/2014"}, {"body": "also bitten thing hard hour work figure wrong future releases react would least make sense add note warning whoever reads know back minds", "d": "11/2014"}, {"body": "still seeing behavior reactrails work yeah jsx render function return compiles render function return mycomponent objectassign thisprops", "d": "11/2014"}, {"body": "seems like reactrails might still using old compiler behavior perhaps using runtime compiler", "d": "11/2014"}, {"body": "thanks sebmarkbage actually old version called culprit", "d": "11/2014"}, {"body": "build simple repro case jsbin jsfiddle sound like bug without way reproduce hard fix", "d": "11/2014"}, {"body": "try reproduce jsf tomorrow spicyj", "d": "11/2014"}, {"body": "still nt chance replicate appears happening firefox ie chrome", "d": "11/2014"}, {"body": "spicyj nt think going able replicate outside app big make app available publically would help", "d": "11/2014"}, {"body": "k wrapped good browsers obviously bug somewhere deep problem find root cause leave issue open anyone fancies digging let know set public version dev app take look", "d": "11/2014"}, {"body": "confirmation someone flushed hours debugging time toilet yes issue hard debug please make least warning case weird exception typeerror read property firstchild undefined caused fact component created different uninitialised copy react carrying owner null thereby breaking findcomponentroot", "d": "11/2014"}, {"body": "already warning case element one copy react passed reactrender another guess cases nesting elements different versions inside", "d": "11/2014"}, {"body": "yes least case nested elements created different react versions", "d": "11/2014"}, {"body": "reopened track remaining features refs etc", "d": "11/2014"}, {"body": "weird thought github closed issues used language like fixes nnnn simply mentioned issue sorry", "d": "11/2014"}, {"body": "pr text included wip fix", "d": "11/2014"}, {"body": "rest refs support blocked work done sebmarkbage", "d": "11/2014"}, {"body": "read two links posted sure exactly spec disallows numbers first link says custom data attribute attribute namespace whose name starts string data least one character hyphen xmlcompatible contains uppercase ascii letters let see xmlcompatible means quoting attribute names said xmlcompatible match name production defined xml contain characters name production second links comes ebnf rules name correct include numbers name case starts number said valid xml attribute contains least one character hyphen also contain uppercase ascii letters namespace", "d": "11/2014"}, {"body": "valid forced stricter guidelines spec thought spec poor wanted people better practices may issues browser support earlier ca nt recall anyway choice nt real problem popular make speccompatible things work unless something better hopefully make prop work instead someday soonish", "d": "11/2014"}, {"body": "one place think keep deviating allowance upper case data attrs html noted link get lowercased parsing rules anyway technically fine use confusing behavior going js lt dom noisy", "d": "11/2014"}, {"body": "said valid xml attribute contains least one character hyphen also contain uppercase ascii letters namespace prinzhorn indeed correct nt think reason particular allow probably change would think confusing behavior going js lt dom noisy zpao spec defines really problem pr change use hyphenation get dropped", "d": "11/2014"}, {"body": "thanks guys", "d": "11/2014"}, {"body": "correct nt support updating anything outside body see pete comment", "d": "11/2014"}, {"body": "dupe think", "d": "11/2014"}, {"body": "leebyron closed merged", "d": "11/2014"}, {"body": "yep thanks reminder", "d": "11/2014"}, {"body": "seeing issue iamdanfox inspect element csstransitiongroup see elements contained csstransitiongroup end inside span lies outside svg element visible", "d": "11/2014"}, {"body": "try", "d": "11/2014"}, {"body": "cc zpao", "d": "11/2014"}, {"body": "jsfb fyi referring idea preferably considered typetaint sorts used created immediately inside point unintentionally say rendered would return plain string object", "d": "11/2014"}, {"body": "syranide great thanks fixed latest version better", "d": "11/2014"}, {"body": "hey ran across problem today found issue really logic want use react frequently hit json apis return also dom methods ex return find nothing means include substantial ugly nullchecking code somewhere really want null override default value perhaps good solution set value required period nulls undefineds value must present could argue empty strings seems step far point even react realized valid value throws warning want allow null leave otherwise need use state guarantee default value lot things props fine bit heavy completely base would surprise", "d": "11/2014"}, {"body": "pointed colleague logic could go way easily could act flag allows logic flag specifies value required default null could fulfill value however set null would trigger default value", "d": "11/2014"}, {"body": "ha full circle pretty much echoing said suggestions may anything except undefined whatever reason exist explicitly log message may anything except undefined whatever reason exist explicitly log message accepts returns allows users escape hatch specially treat therefore default overwrite values given defaults user really wants honour values doable use functional utility becomes tedius", "d": "11/2014"}, {"body": "care backwards compatible suggestion needs tweaked would remain unchanged new semantic would gain new name like whatever", "d": "11/2014"}, {"body": "workaround thanks glenjamin irc providing", "d": "11/2014"}, {"body": "agree null valid value even required nt think breaking change bad since lenient would nt spam could introduce nullable types could also rename goal align flow nt really model distinction clearly right change type system also brought", "d": "11/2014"}, {"body": "sebmarkbage cool better", "d": "11/2014"}, {"body": "updates issue", "d": "11/2014"}, {"body": "cc jsfb", "d": "11/2014"}, {"body": "happy finally worked use context indirectly reactrouter use directly analytics eg several areas screen screen sign button pressed another use case want pages themed specific background color like controls matter deep hierarchy able use color ca nt css want calculate whether text needs dark light based etc", "d": "11/2014"}, {"body": "looks like fix merged going go ahead close issue", "d": "11/2014"}, {"body": "idea share suggested change framework solution using work immutable objects also curious others feedback started attaching immutable object mixin sets easily accessible methods also adjusts take advantage ref comparison throughout methods including accessing values using instead type check take advantage existing custom validator functionality provide checks like js var immutable require immutable function improptypecheck expectedtype return function props propname componentname var proptype typeof propsimpropsget propname proptype expectedtype return new error function impropimmutableinstance expectedconstructor return function props propname componentname propsimpropsget propname instanceof expectedconstructor return new error var improptypecheck impropstring improptypecheck string impropbool improptypecheck boolean immutablelist impropimmutableinstance immutablelist moduleexports improptypecheck component property looks like", "d": "11/2014"}, {"body": "change needed new react google search part documentation clarification came page guessing interpreted mean correct makes sense way", "d": "11/2014"}, {"body": "ideal solution solve would allow rendering would build component tree would able traverse tree find components need additional data allow us asynchronously load data rerender components subtree ready flushing markup allow us convert tree string mridgway yep would good currently rendering component twice serverside used workaround", "d": "11/2014"}, {"body": "petehunt spicyj got react work xml type dom patching function dom diffing works great", "d": "11/2014"}, {"body": "seeing similar issue well sometimes react always eliminate classes case transitioning different element result former element remaining dom", "d": "11/2014"}, {"body": "resolution within client codebase looking spicyj fiddle exact issue still ca nt figure solution", "d": "11/2014"}, {"body": "attribute order use svg sprites", "d": "11/2014"}, {"body": "support", "d": "11/2014"}, {"body": "currently using work around", "d": "11/2014"}, {"body": "attributes maskunits amp maskcontentunits", "d": "11/2014"}, {"body": "mask attribute", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "text attribute", "d": "11/2014"}, {"body": "closing bug looks like consider null undefined different meanings per discussion", "d": "11/2014"}, {"body": "create duplicate issue would appreciated help keep track state things midst adding new feature refactoring", "d": "11/2014"}, {"body": "yes would nice somehow goes direction facebook flow", "d": "11/2014"}, {"body": "experienced issue simplest solution use defer rendering form ajax request complete adding property component state", "d": "11/2014"}, {"body": "example thanks maybe something like js render function var component", "d": "11/2014"}, {"body": "got bug yesterday proposed fix", "d": "11/2014"}, {"body": "googling bug turned nothing given recent api change interests helping others avoid hour inexplicable behaviour note select elements rendered string provide checked attributes child options react", "d": "11/2014"}, {"body": "thought first class refs nt think make sense promises since streamlike observable suggested shoehorn since standard observables however thought realized observable support react needs implemented subjects callbacks like rx proposal essentially first class refs would observables however passing subjects instead callbacks special case callbacks allows composability much simpler mechanisms subjects inplace right callbacks therefore think switch firstclass refs simply callbacks gets passed reference first argument null detached would make roughly equivalent makes model much simpler upgrade path much simpler nt allow siblings communicate without middle man however think feature siblings communicate feature react function also easily statically typable future make callback apis also accept subjects secondary upgrade path think sophiebits", "d": "11/2014"}, {"body": "updated reactfuture include proposal", "d": "11/2014"}, {"body": "think like looks little mutative explicit assignment guess actually worse apis written", "d": "11/2014"}, {"body": "also inherently imperative api exposes imperative handle even id handle also already effective allow people store ephemeral state classes author prepared component class destroyed restored given point eg want hibernate state away class instance still allows", "d": "11/2014"}, {"body": "made mistake like mispelled mixin name led cryptic error time later would nice something like andreypopp commit reason", "d": "11/2014"}, {"body": "regarding issue referenced one strong preference would error rather warning reactrails really expose warnings happen serverside case ran issue mixin missing serverside extra difficult track problem mere warning would help scenario", "d": "11/2014"}, {"body": "simek chrome ios uses uiwebview safari issue platform", "d": "11/2014"}, {"body": "atm using", "d": "11/2014"}, {"body": "going magical solution eventually", "d": "11/2014"}, {"body": "extending support implementing case nt want wait field lose focus nt onchange put noop evade noisy warning though update fwiw significant usage actually disregard sorry onchange normalization done mitigates usage oninput legacy code", "d": "11/2014"}, {"body": "petehunt permalink doc", "d": "11/2014"}, {"body": "sure place like give exposing clonewithprops somewhere convenient would change name though clone implies component descriptions mutable nt really make sense talk cloning immutable objects call something like", "d": "11/2014"}, {"body": "urgh got caught big time spent minutes trying figure realised ignores files default felt really stupid realised tutorial files p", "d": "11/2014"}, {"body": "agreed points add using instead tips editor highlight correctly", "d": "11/2014"}, {"body": "issue really frustrating reacttools outputting inconsistent quoting formats single quotes double quotes used output really annoying trying lint file since linting fail regardless case issue transformer adds double quotes instead single quotes keep consistent rest nt made configurable yet", "d": "11/2014"}, {"body": "gabrielecirulli actually configurable supposed consistent think might missed uncertain", "d": "11/2014"}, {"body": "well merged days ago release came days ago maybe ca nt get work though jsx version jsx myfilejsx built module myfilejsx moduleexports reactcreateclass displayname exports separate option work default", "d": "11/2014"}, {"body": "branch merged master currently seems might pulled", "d": "11/2014"}, {"body": "ah damn means wait thanks", "d": "11/2014"}, {"body": "gives guess confirms", "d": "11/2014"}, {"body": "happen know rough landing date", "d": "11/2014"}, {"body": "clue since landed perhaps neither react team figure going could wrong", "d": "11/2014"}, {"body": "bah probably going next release pretty minor wow sounds distant", "d": "11/2014"}, {"body": "hey chenglou next release mean idea roadmap sound distant month away time fly", "d": "11/2014"}, {"body": "got rushed things needed support flow couple things wanted get thinking might couple small things", "d": "11/2014"}, {"body": "came across bug using name attributes input tags worked around would nice fix", "d": "11/2014"}, {"body": "agree react coffeescript jade would perfect think approach viable one", "d": "11/2014"}, {"body": "petehunt zpao right way update already rendered component also use using different already noted somewhere drop link pls current init function feel wrong cause ca nt date datepicker rendered", "d": "11/2014"}, {"body": "instead try avoid reading thisprops getinitialstate instead compute value inside render based thisprops thisstate usually want always impossible need set default state params may passed component example datepicker", "d": "11/2014"}, {"body": "componentwillreceiveprops allows hook update new props use setstate", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "guys know feature going land react playing around nodewebkit supports custom attribute allow select folders need find workaround react strips", "d": "11/2014"}, {"body": "janhancic workaround movement", "d": "11/2014"}, {"body": "yep came thanks", "d": "11/2014"}, {"title": "possible bug ctrl setviewvalue breaking instance methods controller directive", "body": "posted wrong place sorry also issue controller objects change lot setviewvalue called seen fiddle", "num": "260", "d": "11/2014"}, {"title": "invoking parser empty string creates ast chain", "body": "chains watchable reproduces using", "num": "252", "d": "11/2014"}, {"title": "need specify componentservices directive", "body": "taking look hello world example repo wondering hellocmp needs line needed inject greetingservice hellocmp constructor thought type annotation constructor would enough inject service thanks", "num": "249", "d": "11/2014"}, {"title": "number num transpiler work default arguments", "body": "attempting transpile fails nt transpile", "num": "248", "d": "11/2014"}, {"title": "bug callback specified onload attribute nginclude nt invoke", "body": "includecontentloaded event fires expected handler declared via onload attribute nt work see plnkr bug repro expected two alerts one event amp one attribute actual one alert event", "num": "244", "d": "11/2014"}, {"title": "rttsassert object accept stringnumberbool", "body": "passing stringnumberbool type valid even though check ts", "num": "243", "d": "11/2014"}, {"title": "rttsassert stringnumberboolean throw", "body": "confusing nt think real use case treat ie end codebase good", "num": "242", "d": "11/2014"}, {"title": "issue source map", "body": "order debug code add statement code execute karma debug mode via intellijwebstorm code stops statement expected sync source code seem get lost couple steps ultimately keep stepping code get error load idea could go wrong cc vojtajina", "num": "240", "d": "11/2014"}, {"title": "compiler take templateroot", "body": "compile method give component take templaterootelement believe left thinking template come inline case needs fixed pave way webworkers", "num": "233", "d": "11/2014"}, {"title": "providedecorator extend directive scope longer works", "body": "using directive isolated scope would like expose additional member bind value parent scope since directive third party would like without modifying original code angular used able decorate existing directive new twoway binding javascript appconfig function provide providedecorator mycustomdirective delegate controller function delegate controller however angular extending scope way longer seems work evident simplified plunkr changing script tag breaks behavior seems properties directive still modified using providedecorator scope particular longer seems get updated bug changed angular cause specific behavior recommended way extending scope existing directive isolated scope", "num": "231", "d": "11/2014"}, {"title": "angular find components", "body": "may right place ask question wondering someone help understand angular find modules needs example class annotated component module angular know import module would angular app need import modules using register angular would need something like register base components router angular walk dependency tree using directives annotations reason ask playing around idea creating adapter library take angular style directives register angular app stuck find directives modules thanks", "num": "230", "d": "11/2014"}, {"title": "ngstyle nt work minification", "body": "icon element defined like directive minification works perfect see computed inline style added inspect element minification using ngannotate requirejs inline style never gets added still prints fine directive also gets right path right use workaround get things work", "num": "228", "d": "11/2014"}, {"title": "injectable services component lightdom shadowdom optionally accept function", "body": "dart requires annotations compiletime constants thus use list literals injectable services however static function assigned services call compiler use returned list bindings injector", "num": "226", "d": "11/2014"}, {"title": "move createrootprotoview protoview compiler", "body": "discussed tbosch compiler make better reuse router", "num": "224", "d": "11/2014"}, {"title": "add tostring representation injector tokens", "body": "tokens used bootstrapping tostring method injection fails error messages cryptic", "num": "223", "d": "11/2014"}, {"title": "generate examples indexhtml main dart js one template", "body": "", "num": "222", "d": "11/2014"}, {"title": "documentation", "body": "settings cache see mentioning cache section doc doc http say set says need mention property defaults section want make sure following valid", "num": "219", "d": "11/2014"}, {"title": "refactor reflection production", "body": "eg make compiler benchmarks realistic add general reflector delete probably need add utility functions di present direflector utilities written atscript jsdart specific implementations singleton injected via di js version already include caching dart production version needs replace whole file provide different implementation otherwise mirrors would still used loading original file helper method di relies singleton would otherwise hard use example dart production version getters name obj gt objname age obj gt objage methods methodname obj args gt funcionwrapperapply objmethodname args factories service b gt new service b parameters service myfactory annotations service myfactory", "num": "216", "d": "11/2014"}, {"title": "use flexible views", "body": "reading lot seem miss something least nt see current state lets say feature application quite simple needs couple different viewstemplates show data represented bit different easy nginclude template done created small demo show mean data different views pagination kind thing viable option would look mean best code code nt write need code create version nt see option without writing fair amount code miss something obvious edit updated link right plunker", "num": "215", "d": "11/2014"}, {"title": "questions amp roadmap change detection", "body": "vsavkin amp mhevery things like discuss change detection trying catch vacations best probably edit text instead adding replies record disabled onoff move bit field implemented shallow watch watch collections vicb todo setcontext set context records evaluate context implicitreceiver watch group vsavkin rationale markers removed required mark insertion spot child groups without removing group require processing need recursively scan child groups remove previously removing matter getting first last records unlink portion ideas currently tailrecord include child groups group needs removed look last children tail record remove child groups together parent group possible add record group created tail record could move end child groups retrieving last tail record including child group possible group watch still needs marker records child group could record need inserted right place currently maintain head tail markers groups tail marker probably needs created root group child groups able reuse marker groups misc create protorecordcreator fn call use tmp array rather field protorecord memory gc destinationrecord used instantiation time kept protodest vicb also used context mark records fresh reuse", "num": "210", "d": "11/2014"}, {"title": "repo angular", "body": "", "num": "208", "d": "11/2014"}, {"title": "integrate zones angular", "body": "", "num": "204", "d": "11/2014"}, {"title": "ngresource response headers problem", "body": "trying use responseheaders resource jut returning response headers returning api returning", "num": "200", "d": "11/2014"}, {"title": "atscript macros traceur", "body": "kristianmandrup raised using macros instead atscript seen second biggest issue devs syntax atscript use macros bring functionality would provided atscript types annotations surely would best limitations macros atscript overcomes alternatiely traceur already types annotations experimental features something could leverage", "num": "199", "d": "11/2014"}, {"title": "build hello world example", "body": "contain index html bootstrapping component property component template contain", "num": "192", "d": "11/2014"}, {"title": "asyncvalidators destroys bound data value", "body": "promise rejected angular sets data bound property effectively destroys previously valid value property seems wrong curious intended behavior like know could possibly justify permanently erasing model property value written plunker illustrate behavior readme explains behavior greater detail elaborates dangers feature highly recommend avoiding behavior fixed", "num": "191", "d": "11/2014"}, {"title": "text interpolation fixed string end work", "body": "eg", "num": "190", "d": "11/2014"}, {"title": "compiling inline templates throws", "body": "decorator selector decorator class decorator component template new templateconfig inline blah directives decorator class root compiling throws looks like returns template element instead content see elements class", "num": "189", "d": "11/2014"}, {"title": "animations nt work element added animateenter vs elementappend angular", "body": "written directive appends child directives append child using everything works expected however append child using animations child work mean esque classes never added issue occur angular tried failed make minimal test case includes broad functionality parent template compiling template adding element child template showinghiding text link clicked currently works expected regardless whether used suggestions could look source problem", "num": "187", "d": "11/2014"}, {"title": "formcontroller setpristine nt clear submitted", "body": "appears calling setpristine formcontroller clear submitted property ngsubmitted class form tag plunker demo problematic code", "num": "184", "d": "11/2014"}, {"title": "transform indexhtml", "body": "use template flags dartjs variable files remove tags leave maindart auto create well", "num": "181", "d": "11/2014"}, {"title": "auto refresh chromium st changed", "body": "", "num": "180", "d": "11/2014"}, {"title": "auto start chromium start serving", "body": "", "num": "179", "d": "11/2014"}, {"title": "nested ngform trigger submitted parent form submitted", "body": "", "num": "178", "d": "11/2014"}, {"title": "set performance ci server", "body": "create jenkins instance local workstation run full suite performance benchmarks every commit master results reported external server basic ui tracking performance progress component time pending changes benchpress runner creation benchmarks project", "num": "176", "d": "11/2014"}, {"title": "old issues go", "body": "guys delete repo make new one", "num": "175", "d": "11/2014"}, {"title": "named arguments annotations transpiled dart correctly", "body": "transpiler already converts dart however nt annotations like", "num": "169", "d": "11/2014"}, {"title": "http arbitrary overriding headers based case", "body": "hi using angular angularroute angularresource version experiencing strange behaviour trying override common headers override header example must write exactly like wo nt neither get really strange comes type like wo nt overriden order make work must use either behaviour observed using means could override two also header using", "num": "166", "d": "11/2014"}, {"title": "typeerror read property compiler undefined", "body": "error build angular use win dart sdk message run gulp build using gulpfile repoangulargulpfilejs starting build starting jsruntimebuild starting modulesbuilddartsrc starting modulesbuilddartpubspec starting modulesbuilddevjs error transpiling repoangularmodulescoresrccorejs throw errors typeerror read property compiler undefined objectcompile destroyabletransformtransform repoangulartoolstranspilergulptr destroyabletransformtransformread repoangularnodemodulesthroug destroyabletransformtransformwrite repoangularnodemodulesthrou dowrite writeorbuffer destroyabletransformwritablewrite repoangularnodemodulesthrough write flow transformpipeonreadable framework issue environment issue thx", "num": "163", "d": "11/2014"}, {"title": "filter stack frames rttsassert", "body": "", "num": "162", "d": "11/2014"}, {"title": "karma stack traces external source maps", "body": "using webstorm atscript watcher karma needs consume source maps external files", "num": "159", "d": "11/2014"}, {"title": "build angular sample app streams", "body": "build stock ticker example application angular covers following use cases incorporates streams realtime data like stock ticker one state takes simple stream another state aggregates many streams one stream streams able asynchronously express ready application stream ready soon first piece data emulates connection errors clientserver incorporate userfriendly messaging ui bad connections aggregate streams single data source multiple views using shared connectionssubscriptionsstreams jeffbcross blesh collaborate idea illustrate common use cases awkward unclear angular find ways make clearer angular", "num": "157", "d": "11/2014"}, {"title": "installed ngvalue stopped working", "body": "try avoid dropdown controls nt big hit go change ngvalue objvalue options value objvalue nt dug much variables ngvalue value directive died", "num": "156", "d": "11/2014"}, {"title": "allow usage jscs atscript", "body": "forked changed correctly parse atscript source evaluate configurable style constraints esprima currently parse atscript tokens function arguments annotations", "num": "153", "d": "11/2014"}, {"title": "changedetection detect changes map", "body": "", "num": "151", "d": "11/2014"}, {"title": "support methods closures changedetection", "body": "add support methods invoked every time closure invoked every time pure functions invoked changes", "num": "150", "d": "11/2014"}, {"title": "hook changedection parser ast", "body": "produces compiled code needs used method build", "num": "149", "d": "11/2014"}, {"title": "implement view nesting", "body": "x x form tree easily traversed see treenode x adding needs link together well tree see treenode perhaps needed refactored reusable superclass needs keep track active destroyed available destroyed removed dom render tree animation still active hence yet reused x removing form unlink x tree x tree reset directive instances null x tree well", "num": "147", "d": "11/2014"}, {"title": "better error referencing class defined", "body": "typescript class child extends parent class parent", "num": "146", "d": "11/2014"}, {"title": "better error importing nonexisting module", "body": "also module trying import", "num": "145", "d": "11/2014"}, {"title": "better error importing nondefined symbol", "body": "exists export", "num": "144", "d": "11/2014"}, {"title": "improve sourcemaps usability", "body": "issue capture things could improved sourcemaps chrome dev tools", "num": "143", "d": "11/2014"}, {"title": "performancefirst research", "body": "determine tools resources practices encouraged usersdevelopers angular make performance frontofmind consideration building angular core building apps angular", "num": "142", "d": "11/2014"}, {"title": "implement application class bootstrapping", "body": "", "num": "140", "d": "11/2014"}, {"title": "scope eval empty string keys", "body": "produce result see", "num": "139", "d": "11/2014"}, {"title": "rename js files ats atscript files", "body": "", "num": "138", "d": "11/2014"}, {"body": "looks like one wondering one innocent line code see discussion understand inject services local given file without exposing di container thus potentially rest application understand reasoning feel like creating different ways getting services component kind injection systems guess nt great since wanted avoid dual tripple injection systems present people find confusing see issue comments mentioned commit would really great explore options would love help soon better understand motivation", "d": "11/2014"}, {"body": "pkozlowskiopensource thanks linking discussion still hard time wrapping head around understanding maybe rkirov correct wrong parent component child component inject service share instance service unless child component lists would happen two sibling components inject service neither specify would share instance service would depend whether parent component injects service", "d": "11/2014"}, {"body": "two different injectors app level injector familiar angular element level injector two turns angulardart built system one injector work well issue normal injector understand concepts inject direct parent inject parent inject list children hide injection light dom expose shadow dom tried teach regular injector concepts became mess end decided generic injector specialize injector better way forward actually three ways register object injection componentservices lightdomservices shadowdomservices component services normal services used configure app level injector item inserted used child directive one easy understand times want component expose service children example element expose interface use register far good component service could let look happens components shadow dom shadowroot purpose shadow dom encapsulation shadow root able see parent light dom achieved component services since app level injector understand visibilityencapsulation requirement paints need light dom services light dom services shadow dom services flip side thing need symmetry case wish create default services inject want override children light dom ok light shadow dom services two parts make tho whole ca nt git rid component services unfortunately lazy load code application code needs loaded injector independent dom structure summary component services app level services dom independent fully recursive meaning component matter deeply nested inside components get services injected light dom services limited current template light dom component used communicating children shadow dom services limited shadow dom component used set environment component private implementation details", "d": "11/2014"}, {"body": "pkozlowskiopensource want make sure saw response realized commented sha responded pr anyways thread better place discuss new injection system point relevant thread", "d": "11/2014"}, {"body": "mhevery rkirov thanks descriptions much better high level understanding new injector capable angular lot question details use rather taking lot time wait examples published first thanks", "d": "11/2014"}, {"body": "rkirov yes saw response thank make sure understand correctly let rephrase saying however instead services basically global per application angular scope overloaded term warning services particular component service available component constructor constructor subdecoratators components rest application could conceptually equivalent creating child injector registering services listed child injector telling component use child injector", "d": "11/2014"}, {"body": "mhevery thank details nt aware quick read separating domlinked injector regular service injector makes sense need digest details probably come back question input provided much appreciated thank", "d": "11/2014"}, {"body": "pkozlowskiopensource yes got also note mechanism need configure global application injector new bootstrapping process asks point toplevel component like example", "d": "11/2014"}, {"body": "rkirov ok great glad right track one last question regarding topic saying wo nt need configure global service injector fine question would going able configure one mean want set services global application wide able express guess asking make sure", "d": "11/2014"}, {"body": "components hierarchical think root component global injector service configured per application time thu nov pawel kozlowski notifications githubcom wrote rkirov ok great glad right track one last question regarding topic saying wo nt need configure global service injector fine question would going able configure one mean want set services global application wide able express guess asking make sure reply email directly view github", "d": "11/2014"}, {"body": "mhevery rkirov thnx perfectly clear terms concepts still questions regarding details get reading code concepts clear head thnx taking time answer questions", "d": "11/2014"}, {"body": "could also get global singleton service angular style service nt specify component example ever refer service constructor type annotations throw error service never configured", "d": "11/2014"}, {"body": "would error top level component would singletons angularjs sense thu nov rob notifications githubcom wrote could also get global singleton service angular style service nt specify component componentservices example ever refer service constructor type annotations throw error service never configured reply email directly view github", "d": "11/2014"}, {"body": "ah ok thanks", "d": "11/2014"}, {"body": "seeing bug version", "d": "11/2014"}, {"body": "wrong repo please move issue repo", "d": "11/2014"}, {"body": "oops sorry realized clicked submit", "d": "11/2014"}, {"body": "pls use angularjs repo one angular", "d": "11/2014"}, {"body": "wrong repo", "d": "11/2014"}, {"body": "wrong repo", "d": "11/2014"}, {"body": "yup otodockal right could move angularjs thnx", "d": "11/2014"}, {"body": "vsavkin fyi", "d": "11/2014"}, {"body": "adjust use manual created reflector get correct numbers dart version compiler", "d": "11/2014"}, {"body": "reasoning combining single class create coupling modules independent di make hard test nt see benefit injecting elaborate", "d": "11/2014"}, {"body": "mhevery single class prevent code duplication right well walk annotations class single class provides annotations write atscript code walk would eliminate duplication want add dart transformers need one class right classes separate concerns reflection directly coupled di compiler parser general mechanism want hide behind facade like abstract use di annotations directives want use write something like already analyze dependencies class need reflector nt access di chicken egg problem injecting reflector already need reflect upon let say create root injector want pass reflector binding like binding binding reflector would need provided via otherwise di would need reflect upon reflector di would need know bindings reflector needs analyze bindings would work made reflector special argument di cc vsavkin", "d": "11/2014"}, {"body": "tbosch let talk vc good idea couples things better ways achieve want", "d": "11/2014"}, {"body": "discussed vsavkin came plan would involve making reflection top level module would injected root injector wed nov pm tobias bosch notifications githubcom wrote mhevery single class prevent code duplication right direflector well corereflector walk annotations class single class provides annotations write atscript code walk would eliminate duplication want add dart transformers need one class right classes direflector corereflector changedetectionparserclosuremap separate concerns reflection directly coupled di compiler parser general mechanism want hide behind facade like abstract lists maps use di annotations directives want use write something like decoratordirective lightdomservices bind myservice tovalue bind myservice already analyze dependencies class need reflector nt access di chicken egg problem injecting reflector already need reflect upon let say create root injector want pass reflector binding like binding binding reflector would need provided via tofactory tovalue otherwise di would need reflect upon reflector di would need know bindings reflector needs analyze bindings would work made reflector special argument di cc vsavkin reply email directly view github", "d": "11/2014"}, {"body": "angular think would move controller logic service create directive view code since creating directives much easier nt think lot code think correct current proposal angular anything like rob eisenberg points post", "d": "11/2014"}, {"body": "robianmcd know ngcontroller sample used ngcontroller mistake updated plunk use directive makes difference issue", "d": "11/2014"}, {"body": "yes", "d": "11/2014"}, {"body": "seeing headers network tab devtools api domain main site requested protocol port", "d": "11/2014"}, {"body": "seeing headers network tab running domain api domain working locally angular think problem", "d": "11/2014"}, {"body": "btw api cors configured", "d": "11/2014"}, {"body": "might want add server actually carefully selected list", "d": "11/2014"}, {"body": "thanks caitp gon na try", "d": "11/2014"}, {"body": "great also wrong repository sort issue still trouble please reopen", "d": "11/2014"}, {"body": "ok sorry", "d": "11/2014"}, {"body": "would pretty easy leverage di injections annotations types using sweetjs macros need include new modules find part also quite possible experiences macro developer yet macro convert angular class angular module correct type complete old injection syntax even minification macros super powerful especially new readtables feature let anything imagine good luck ps angular made jump mercury looking back wish best angular pretty sure next version angular radically different hardly make sense call angular angular horse like spaceship imagine p", "d": "11/2014"}, {"body": "found traceur supports atscript option convenience option turning experimental features needed atscript guess answer alternatively yes angular leverage traceur", "d": "11/2014"}, {"body": "watched awesome presentation sweetjs believe could full roundtrip compilation angular syntax proposed atscript syntax using sweetjs macros would theory allow traverse current project find angular modules various types factories directives compile atscript equivalent could continue coding atscript time compile back old angular script run angular know pretty whacky idea hey dare try fex start annotation injection syntax might try whenif time", "d": "11/2014"}, {"body": "perhaps would possible prepare angular code atscript today js var anevent name type var keys objectkeys type var propname keys var proptype type propname propname proptype annotate new event name proposed annotation syntax atscript foofn function annotate new event foo event foo foofn function inside angular module anevent foo foofn function bind", "d": "11/2014"}, {"body": "current release sweetjs supports syntax output eg everything working class example basically cherry picked esprima harmony branch soon available well turning atscript syntax statements js macro case gt var val unwrapsyntax letstx val makeident val return angular val module gt angularmodule js macro toupper case x gt grab syntax object var stx x get string value var val unwrapsyntax stx upper case var valupper val touppercase valslice use sugarjs classify similar turn class name make new syntax object based old one return makeident valupper stx toupper foo expands foo next step", "d": "11/2014"}, {"body": "already using traceur worried syntax sweetjs also discovery traceur transpiler used atscript makes sense feeling much better atscript means nt run source another transpiler need turn options traceur hindsight think mistake label atscript many devs got feeling learn another flavor javascript fact couple nonstandard features could come single term annotations really nothing types think proposed anyway scary class method annotations bit difficult grasp probably comes lack documentation least nt able find many useful examples use may marketing political reasons labelling atscript think would spook fewer developers sold annotations currently lot research best structure new projects migration path whatever may easier based know angular things make transition easier using jqlite reducing dependency still need certain things like etc still need use move lot use spend time traceur annotations could probably figure get rid ddo well would cover rip items ngeurope talk think good start", "d": "11/2014"}, {"body": "think would nice use atscript combination flow goal flow find errors javascript code little programmer effort flow relies heavily type inference find type errors even program annotated precisely tracks types variables flow program time flow gradual type system parts program dynamic nature easily bypass type checker mix statically typed code dynamic code flow also supports highly expressive type language flow types express much finegrained distinctions traditional type systems example flow helps catch errors involving null unlike type systems", "d": "11/2014"}, {"body": "landed", "d": "11/2014"}, {"body": "appears submitted wrong repository reentered issue angularjs repo", "d": "11/2014"}, {"body": "solved", "d": "11/2014"}, {"body": "closed via", "d": "11/2014"}, {"body": "wrong repo repost issue repo angular", "d": "11/2014"}, {"body": "oops sorry", "d": "11/2014"}, {"body": "claycephas issue go", "d": "11/2014"}, {"body": "guess wanted open issue angularjs remember provide minimal live reproduce scenario", "d": "11/2014"}, {"body": "think looking angularangular new prototype repository next major version", "d": "11/2014"}, {"body": "caitp ah thanks angular repo dart js", "d": "11/2014"}, {"body": "trusktr one angular written atscript transpiled js dart", "d": "11/2014"}, {"body": "otodockal actually", "d": "11/2014"}, {"body": "interesting joepea nov pm georgios kalpakas notifications githubcom wrote otodockal actually reply email directly view github", "d": "11/2014"}, {"body": "phcoliveira guess talking problem angularjs proper repository please open issue mentioned repository providing minimal live reproduce scenario using similar tool would allow us see code action thnx", "d": "11/2014"}, {"body": "stacktrace reminds happening pr since pr nt issue anymore please try updating repo launching new build", "d": "11/2014"}, {"body": "hmm solved ran gulp clean said module rsvp found installed manually reclean build works fine build successfully thanks mlaval", "d": "11/2014"}, {"body": "brianminister think wanted open issue repo please provide info ideally live reproduce scenario using plunker similar otherwise little chance going get meaningful help", "d": "11/2014"}, {"body": "closed", "d": "11/2014"}, {"body": "vsavkin done close issue", "d": "11/2014"}, {"body": "differentiate closure pure function also pure function also closure afaik", "d": "11/2014"}, {"body": "closed via", "d": "11/2014"}, {"body": "alxandr know certain things pure functions eg binary operations write b actually gets compiled something like pure function also provide way annotate code indicate functions pure", "d": "11/2014"}, {"body": "closed via", "d": "11/2014"}, {"body": "covered first half items list", "d": "11/2014"}, {"body": "closed", "d": "11/2014"}, {"body": "probably bad repository", "d": "11/2014"}, {"body": "yeh wrong repo please open", "d": "11/2014"}, {"body": "vsavkin current thinking go generate dummy class interface try cast whatever means javascript benefit iife could contain rtti downside typescript compiler would implement would rtti classes explicitly implemented interface know would classgetinterfaces type syntax already supported actual action item think already support nt think anything", "d": "11/2014"}, {"body": "unit test could look", "d": "11/2014"}, {"body": "pavelsavara register implementation interface injected using syntax sugar unit tests look", "d": "11/2014"}, {"body": "closing since believe covered", "d": "11/2014"}, {"body": "akircher think would look less expression parser would give function tries fetch iterator eg js could easily iterate item collection name iterated value would also accessible returned value easy way populate scope would even possible helper functions angular would automatically insertremove html elements automatically update scopes repeated children using tools implementation ngrepeat could turned something like lines easily implemented extended third party code generic work would handled framework getting iterators iterating updating scopes etc basically getting expression looks like would return iterator getter would something like use js extends syntax expression language include concept iterators would bindable", "d": "11/2014"}, {"body": "last comment jamm made think easy understand able wrap braces create valid js object work feels right", "d": "11/2014"}, {"body": "json array provides dropdown user selection via ngdropdowns upon selection need use json value route new ngview nt solved realize ngroute logical operation expects anchor tag view element violates separation function words logic routing currently depends view element construct new router use defined string character however wherever presented", "d": "11/2014"}, {"body": "one thing semicolon object fardelian propose microsyntax eliminate problem collision directives attributes example directives expect attribute src element want give different meanings src example angularjs valid code src attributes semicolonobject microsyntax code valid directive values inside isolated declaration", "d": "11/2014"}, {"body": "mhevery said angular framework html compiler angular used html compiler angular html compiler users fine working jsx allow us use updated html syntax transpiling text based syntax everyone else nt like saying api starting look bad going route solve way solved diannotationstypes going language level change looking new proposals compared original vision clear original idea right lot flexible remember original vision angular angular allows use future web web components today really like vision angular since still holding values beliefs others understand using new tools language extensions needs clear path could almost suggest using release bridge gap would give everyone opportunity introduce new concepts learn atscript hand whole year teach people concepts better prepare everyone future", "d": "11/2014"}, {"body": "really like jamm semi colonobject syntax clear easy understand humans parsers read instantly know even never done angular yet verbose also really easy extend took example ngrepeat familiar asks one special property item media box example see subtitles would need special properties enabled src nt see syntax would allow us", "d": "11/2014"}, {"body": "please keep syntax simple selfexplaining colonandsemicolonsyntax looks eerie many programming languages adopted loops like x want get rid common standard ngrepeat sure better ways distinguish loop ordinary string without using syntax hard understand ng prefix please nt use colon jsf uses colons consequence make impossible use angularjs jsf application", "d": "11/2014"}, {"body": "stephanrauh ng escaping looks sexy think problem use ng x nt agree write code loops inside html stay declarative", "d": "11/2014"}, {"body": "x nt agree write code loops inside html stay declarative late mind ngrepeat loop way suggest make ngrepeat ngif proper tags one angularjs design documents read states directive look bit odd reside tag control visibility tag agree like proposal", "d": "11/2014"}, {"body": "like stephanrauh proposal", "d": "11/2014"}, {"body": "goal change keep right side valid expression dalcib syntax would defeat purpose", "d": "11/2014"}, {"body": "pondering onewaybinding vs twowaybinding onlyoncebinding angulardart uses annotation corresponding attribute dart class atscript adds annotations angularjs equation would nt better use annotations instead adding cryptic symbols attribute name proposed value instead writing would write using following component hint copied snippet component angularprimedart project dart code atscript dart class puidatatablecomponent ngtwoway value list mylist ngattr initialsort string initialsort", "d": "11/2014"}, {"body": "stephanrauh could used provide default directionality property however use cases needing override binding expression proposal default properties oneway allow annotation like specify default actually two way add binding options would allow override deviation normal required", "d": "11/2014"}, {"body": "dalcib something like syntax works polymer polymer supports much simpler expression syntax however present angular expression syntax allows literal arrays parenthetical expressions result possible tell whether intended part actual expression identify", "d": "11/2014"}, {"body": "thinking overnight believe bigger problem current syntax allows web components consumers set property based already declared variable given consume already created event however current syntax nt allow web components declare new variable scope trigger new event propose create two generic prefixes one means publish variable one means trigger event get conversation started say name publish trigger publish complementopposite bind trigger complementopposite ngrepeat would result think may also solve oneway vs two way binding syntax making explicit", "d": "11/2014"}, {"body": "everything caitp saying really think needs community involvement personally flipping entire framework upside huge breaking changes two cents", "d": "11/2014"}, {"body": "use razor like syntax aspnet something near html item mean alot technologies somehow help get idea", "d": "11/2014"}, {"body": "attributes valid either asp use server side interpreted reaches client", "d": "11/2014"}, {"body": "suggestions ngrepeat item items html item html item binding two way html item one way view gt component html item one way component gt view html item event html item", "d": "11/2014"}, {"body": "ocombe angular interpretes dom presenting btw point answer razor", "d": "11/2014"}, {"body": "angular interpret dom initial web page navigator include js file end page loads template include page create based directives", "d": "11/2014"}, {"body": "valid attribute html item", "d": "11/2014"}, {"body": "actually valid least xml probably nt want since would break svg xhtml documents leading breaks qualified names", "d": "11/2014"}, {"body": "know verbose like rkirov canonical syntax proposal hand think shorthand syntax good would go gets transformed", "d": "11/2014"}, {"body": "anyways still proiterator bindings idea sounds really cool really reusable destroys microsyntax html paragraph grammar like", "d": "11/2014"}, {"body": "hesitant criticize proposed new syntax probably nt understand rationale would help probably others greatly answers fillin blank statements attribute names start ng bad click doit better ngclick doit repeatperson people better ngrepeat person people", "d": "11/2014"}, {"body": "attribute names start ng bad nt really problem feeling bit verbose click doit better ngclick doit idea want clear tools developers attribute value expression evaluated reason becomes clear find many issues angularjs confusing vs vs without clear marker confuses people hard tools like ides repeatperson people better ngrepeat person people idea make binding identifier totally separate expression thus making easier tools idea playing works around pretty elegant way think much better solution crap crap absolute unadulterated crap encoding identifier attribute", "d": "11/2014"}, {"body": "attribute names start ng bad idea differentiate property bindings directive bindings wo nt need make directive bind properties value checked else angular click doit better ngclick doit important point able differentiate propertydirective bindings event bindings event bindings oneway propertydirective bindings twoway need click syntax proposal problem angular unable know easily least directive event binding one twoway also needs know event binding able throw event function also things event delegation repeatperson people better ngrepeat person people better first case right side people valid expression old syntax angular parse string extract microsyntax regex could find expression", "d": "11/2014"}, {"body": "repeatperson people better ngrepeat person people better first case right side people valid expression old syntax angular parse string extract microsyntax regex could find expression syntax angular would still parse microsyntax albeit simpler one", "d": "11/2014"}, {"body": "general thoughts like share coming practical world one thing concerned announced syntax templating ngeurope nonstandard htmllike syntax one reason know many developers went angular framework use pure html templates onboarding new developers became lot easier feature speaking personal experience new developer assisting many developers templating language nonstandard ie already supported browser one introduce build tools set templates usage separate problem using atscript increases complexity able run angular major complaint backbone views ember react becomes harder new developers get web application development introduces complexity anyone attempting learn angular say switching backbone angular type overhead feel angular avoiding design subtle problem also one wants migrate angular reason future using standard html makes css difficult reason something problem every major framework except angular trust team arrive good consensus let process play feel worthwhile point take consideration possible", "d": "11/2014"}, {"body": "stephanrauh sated tag something like inconvenience see additional nesting repeated markup see use case attribute", "d": "11/2014"}, {"body": "angular decorators elements otherwise declare css selectors create something like instead one coupling second chrome browser element ngrepeat unrecognized element wrapping element ngrepeat affect css layouts even declare somewhere core angular code prevent unpredictable default styling designers forced learn remember good", "d": "11/2014"}, {"body": "jamm always depends implementation repeat content element content would issue", "d": "11/2014"}, {"body": "lgalfaso idea render elements structure declared source html even worse like jquery plugins elements change dom structure render something interesting default element leads unpredictable dom changes impossible work select observe affected sure nt want cooperate tools webcomponents example", "d": "11/2014"}, {"body": "jamm suggesting make repeat content trying pull conversation back syntax please take comment syntax defined directive behaves another discussion css sideeffect syntax remain independent", "d": "11/2014"}, {"body": "lgalfaso want css sideeffects sideeffects proposed syntax ca nt independent", "d": "11/2014"}, {"body": "angular user iterator bindings arguments", "d": "11/2014"}, {"body": "yet think would much like get people talking particular bikeshed gets momentum behind", "d": "11/2014"}, {"body": "available right", "d": "11/2014"}, {"body": "sheerun simply proposed functionality mind caitp seems like even pretty much happened regarding whole iterator idea right nt even much traction sadly doubt chosen answer problem nt seen talk support angular devs", "d": "11/2014"}, {"body": "making sure get full picture plus like state important templating language compatible html use slim jade nt want next jsx", "d": "11/2014"}, {"body": "sheerun think prefer closer match js using iterators covers would better use grammar least matches js people would using easier understand happening get already would work better compatibility think much easier switch switch whatever throwing ideas around popular despite matching actually happening could probably instead want avoid two ways thing though", "d": "11/2014"}, {"body": "caitp iterator idea choose one would better right many breaking changes hardly make break change might well take opportunity match js syntax", "d": "11/2014"}, {"body": "regard would nt mind changing", "d": "11/2014"}, {"body": "users fine even looking jsx working developers including hate jsx similar anything else web", "d": "11/2014"}, {"body": "please", "d": "11/2014"}, {"body": "per two keywords would different functionalitymeanings reason wanting one", "d": "11/2014"}, {"body": "coffeescript background one arrays objects common find confuse one would much preferable two would best david souther sun nov pm akircher notifications githubcom wrote per two keywords would different functionalitymeanings reason wanting one reply email directly view github", "d": "11/2014"}, {"body": "semantics really dumb generally also nt want write full es parser imho", "d": "11/2014"}, {"body": "fair enough", "d": "11/2014"}, {"body": "caitp templating language compatible html use slim jade nt want next jsx sheerun", "d": "11/2014"}, {"body": "one thing nt seen discussed far makes think missing something obvious parts microsyntax eg microsyntaxes directives eg others emerge future either missing something please elaborate trying fulfill part actual requirements run difficulties road case without really thought implications idea understand correctly using separate attributes part microsyntax solves problems verbosity downside introducing new shorthand notation would equivalent even expanded basically using keyvalue pairs enclosed value attribute would equivalent even expanded string possibly expanding camelcase key strings spinalcase attribute suffixes must valid expression would work attribute eg fact would even allow grouping bound attributes together although primary intend eg following would also possible sure something understand would preprocessed compiletime would parsed already valid expressions even microsyntax one microsyntax rule situation one nt know typename attribute parse value determine expressions need parse plain js object extract values ides tooling nt find hard understand prefix even syntax examples still debatable needs way separate stringified plain js object attribute expandable object cool name needed one btw smiley", "d": "11/2014"}, {"body": "one thing bothers lack angular prefix proposed syntax angular needs play nicely frameworks framework would use attribute purposes think prefix like necessary interoperability remember attributes nt supposed prevent attribute name conflict future versions html adopted set attributes cool html feature yes highly unlikely hey completely impossible", "d": "11/2014"}, {"body": "gkalpak good idea see", "d": "11/2014"}, {"body": "regarding scandal syntax performance biggest issue think really need create template programmatically impossible come workaround especially enough specify attributes html template initially change create programmatically possible workaround case would benchmark bad slower comparing initial need create attributes js performance probably fixed kind caching like creating discovered attribute names angular app using precreated attribute nodes set attribute values syntax appears bigger issue attribute names valid html xml limits angular html even performant workaround exists requires additional precompile step added template engine", "d": "11/2014"}, {"body": "trying understand proposal caitp say html itembar expected generator function result calling iterator several times exposed thru name proposal", "d": "11/2014"}, {"body": "lgalfaso quite problem case would nt binding name use expression form would work wanted work also need another attribute get binding identifier nt really want", "d": "11/2014"}, {"body": "lgalfaso operator generates iterator issue see iterator would need name suddenly dealing something specific templates like object notation better strongly use two attributes", "d": "11/2014"}, {"body": "caitp ok directive microsyntax itemname generatorfunction annotation", "d": "11/2014"}, {"body": "fardelian understand several opinions subject moment trying cleanup different ideas summarize single place comparison", "d": "11/2014"}, {"body": "caitp ok directive ngrepeat microsyntax itemname generatorfunction annotation misunderstanding whole line discussion nt microsyntax instead extend expression parser support following syntax basically see identifier lookahead token advance twice parse expression result object name binding identifier getter evaluates expression returns iterator microsyntax makes parser syntax bigger", "d": "11/2014"}, {"body": "caitp thanks patience part fully understand existing parser able evaluate expression able know variables involved expression may change future idea completeness let know means proposal extend parser expressions form supported result operation object property identifier say string getter executed execute expression return equivalent correct", "d": "11/2014"}, {"body": "way imagining would like gt js class iterableexpression extends expression parser build syntax valid toplevel expression would nt make sense way convinced otherwise yeah constructor name expression thisname name thisexpression expression get iterator atscript assert produces actual iterator get iterator iterator return thisexpression helper produce arraylist iterator get collection array return arrayfrom thisiterator get name return thisname normal value getter expression implemented iterable expressions special case explicitly handled get value throw new typeerror implemented new iterableexpression item parse collection", "d": "11/2014"}, {"body": "caitp thanks think clear", "d": "11/2014"}, {"body": "case anyone curious explains syntax changes ember like eisenbergeffect proposal defaulting oneway data binding", "d": "11/2014"}, {"body": "gkalpak hashbased expanding shorthand syntax always using prefix properties meant parsed angular introducing iterators expression syntax oneway binding default confuse bindonce default agree vlazar conflict frameworks think could use prefix oneway binding prefix twoway binding prefix binding events", "d": "11/2014"}, {"body": "caitp disagree prefix think might confusing bem css syntax block blockelement block modifier prefer prefix value attribute maybe missing something avoid conflict frameworks prefix bad smiley", "d": "11/2014"}, {"body": "know taking risk sounding like coming back obvious things would like better understand current state proposal normal bindings seem number competing proposals clear proposals still table tradeoffs assuming got web component attribute associated property setter proposals table understanding one feasible appreciated community large table seems proposal nt suffer identified technical issues perceived verbose seems like eisenbergeffect sees like possible alternative downside attributes bindings would removed template dom debug info potentially added instantiated dom something else proposal table least partially correct seems remaining proposals nt work proposals things left would love better understand problems associated apart identified debug info need domrewriting looks like discussed igorminar eisenbergeffect guys notes discussion basically trying understand viable option maybe thing got table right", "d": "11/2014"}, {"body": "item nt really work ca nt annotate contents attribute decide interpret creates stupid scenario need able escape annotations becomes mess main problem nt look angularspecific makes harder identify angular code even verbose really course also makes selector bit complicated", "d": "11/2014"}, {"body": "caitp clear makes lot sense conceptual impl point view still many framework users might perceive easier shorter nicer write trying get bottom problems understand correctly saying stupid scenario need able escape annotations becomes mess mean people could passing string literal containing thus would nt able distinguish string binding markers getting wrong", "d": "11/2014"}, {"body": "caitp think handle value escaping liked approach complicated need anyway interpolation understand correctly mhevery nt like proposal mostly makes debug dom different developer would write nt think problem reasonable tradeoff order get best template authoring experience misko authoring new doc proposal traveling sure status", "d": "11/2014"}, {"body": "mean people could passing string literal containing thus would nt able distinguish string binding markers bingo expressions interpolated strings event handlers need identify based content point going need escape things think would better avoiding headache caitp think handle value escaping liked approach complicated need anyway interpolation understand correctly yes absolutely want possibly avoid terrible idea", "d": "11/2014"}, {"body": "caitp feel like experience nt adequately captured discussions issue deal think document binding syntax document nt heard argument anyone else team afraid might missed also think talk mhevery iterator syntax idea nt think thoroughly discussed internally yet either seems like elegant solution reflected design docs", "d": "11/2014"}, {"body": "issue issue text general nobody wants escape text nt escape nobody wants processing unescaping text nobody wants anything bad idea nobody favour place time desirable thing bad users nt want write crap nt represent trying write developers nt want write crap deal obfuscated representation trying write things nt want note contentdeterminedinterpretation also gets int way whole make easy ides understand thing gives extra layer complicated processing understand attributes bad awful nt", "d": "11/2014"}, {"body": "really favor objectlike syntax somewhat knockoutjs nt looked things exception take one attribute everything however far understood things need work try list understanding someone correct wrong first say webcomponent another framework altogether used like angular going baz string variable understood discussion far changing html result set scope variable given decide deal events dealt like case triggers event named far understood regards binding web components needed next part see angular directives quite different control actually happens string value passed property angular directives therefore nt see problem parsing two handled slightly different different prefix example would produce one per item current scope inner scope generated loop current item named property bound value things notice first enclosed content evaluated expression exception omit around second always predictable functionality ca nt create directive starts meaning always set property value expression always listen event named writing suddenly produce new items third giving objects directives solves problem duplicating attribute names directive handed data defined attribute obviously also needs reference element query dom attributes means stop", "d": "11/2014"}, {"body": "object syntax nt want pass config objects directives objects keyvalue pairs could easily passed attributes also clear values bound scope vs treated strings without yet another syntax example given itemid itemdesc values bound scope literals omit single quotes mean list unlike others actually bound scope without changes parser could clearly concisely represented attributes without namespace itemid itemdesc b attributes namespace itemid itemdesc angular strength templates look like regular html object syntax nt think need make parser support syntax redundant html attributes", "d": "11/2014"}, {"body": "akircher clearly read post example stated content ngrepeat evaluated expression exception omit around take look following guesswork scope variables whole thing javascript problem though name reserved keywords language might cause problems edit also discussed previously thread one problems solved multiple directives using attributes good example used example hard imagine multiple directives takes mention html inputs among others takes attributes namespacing solves issue get incredibly verbose example", "d": "11/2014"}, {"body": "alxandr actually quoting using fardelian example think like syntax okay bindbar itemname coincidentally name used ngrepeat using bindbar itemname publish ngrepeat itemname scope like less also agree namespacing attributes get verbose maybe choose attributes unlikely used normally namespace example", "d": "11/2014"}, {"body": "basically use achieve syntax nt thnk declaratively add event handler though example wo nt obvious reasons pattern like use putting using loop variable elements every something feel use showing capability wrote original post directives unconditionally setting propertiesevents tag", "d": "11/2014"}, {"body": "fond iterators many thumbs caitp everything said far", "d": "11/2014"}, {"body": "cents", "d": "11/2014"}, {"body": "unfortunately wo nt work ie", "d": "11/2014"}, {"body": "nt normally comment issues like spent previous week refactoring couple angular directives thought would make contribution big fan angular like developers niggles comes wellknown performance issues assumption always bright spark solve issues near future back main point favour proposed straw man like keep things concise adding additional attributes would bloat templates html itemname micro syntax explicit intent whereas strawman hides intention funnily enough even started read angular debates refactored existing microsyntax regexes using dsl takes form item collection track trackby map mapitem using usingitem describes expressions returned describe optional items syntax markers compiled syntax executed returns object key value pairs said one thing always keen maintain style underlying framework using reflected microsyntax style likes ngrepeat already defined saying opportunity revisit predefined concepts per comments made mhevery fardelian jamm much favour syntax variation based html style attribute html itemname indeed kiss approach parser would also lightweight follows existing html approach template bloat annotate single vs binding please keep intuitive simple", "d": "11/2014"}, {"body": "eisenbergeffect mentioned article important issue specifying view dependencies component makes component coupled view reasonably way view plugin component ie view define dependencies including component rob suggested using define dependency think better approach would automatically recognize view dependencies using twopass compilation first time parse html expressions extract dependencies resolve second pass executing directives expressions correct dependencies parameters see suggestions clear directive filter deps itemname itemname itemname think avoid syntax dependency recognition possible", "d": "11/2014"}, {"body": "ngdirective view really think much limit better use little bit magic instead perfect code prevent insane verbosity tons boilerplate code", "d": "11/2014"}, {"body": "could rather something akin regards deps imho though discussion probably belongs another topic seems sort topic regards discussion binding syntax", "d": "11/2014"}, {"body": "expand topic bikeshed new ways around absolutely terrible ideas proposed far suck know suck limited binding syntax angular calling chance fix embarassing unfixable problems usher new era simplicity application development make easy ought yet spite keep throwing absolute nonsense ideas around increase complexity decrease community involvement make pain ass us work needless say need better", "d": "11/2014"}, {"body": "mentioned ability extract dependencies template code could factor designing proper syntax plus nt think something like absolute nonsense ideas", "d": "11/2014"}, {"body": "plus nt think something like absolute nonsense ideas absolute nonsense idea anything makes product less enticing difficult use well difficult develop maintain well anything violate laws generally useful note nt specifically talking proposals largely ones come already", "d": "11/2014"}, {"body": "caitp last two comments unacceptable violate code conduct please polite keep discussion technical refrain commenting issue", "d": "11/2014"}, {"body": "clearly remember picked angular frameworks months ago angular markup semantics simply made sense nt alienate bunch adhoc syntax needs memorized otherwise keep visiting documentation every minutes understand decisions behind removing scope controller module nt make lot sense personally always disliked handlebars spacebars jsx level markup abstraction frameworks nt fit mental model things dom nt know many people would agree ngclick dosomething different plain old onclick dosomething ngblur well course readable one less thing worry", "d": "11/2014"}, {"body": "garyranson please could explain distinction example html itemname", "d": "11/2014"}, {"body": "quick update core team working bits next days think feedback summarize constraints solution looking must match following valid html see issue discussion chars attr name valid html web designer friendly interoperable webcomponents nt interfere web component initialization support debugging story via inspecting rendered dom development syntax must clearly distinguish string literal expression binding expression events declaration variables must clear template without understanding directives active internal semantics directives support additional info options binding order avoid directive specific microsyntaxes enables tooling work without hardcoding support microsyntaxes must supported way preserves constraint please nt propose new solutions nt meet criteria", "d": "11/2014"}, {"body": "apologies", "d": "11/2014"}, {"body": "proposal two alternative formats canonical syntax works well debugging shorthand syntax less verbose canonical syntax proposal directives appear canonical name empty attribute directive parameters attributes follow syntax attribute value define parameter type parameters string literals follow javascript syntax string constants string templates binding expressions prefix follow js expression syntax event expressions function calls prefix followed expression variable declarations prefix followed valid js identifier eg html event declarations follow pattern function calls html shorthand syntax shorthand syntax entire definition parameters attribute named directive format following eg html", "d": "11/2014"}, {"body": "eisenbergeffect unfortunately wo nt work ie strange works fine ie valid option", "d": "11/2014"}, {"body": "lgalfaso et al initial thoughts shorthand hope see fill long form twoway binding function call need different syntax seems clear method call sufficient denote intention without extra variable declarations need prefix assignment would make clear context changes everything rhs valid js", "d": "11/2014"}, {"body": "igorminar result become valid would original proposed syntax back table think xmls would still invalid svg mathml etc", "d": "11/2014"}, {"body": "shorthand syntax limited issues relating limitations setattribute instead defining type parameter parameters value define type parameter name suffix indicates value string template suffix indicates twoway binding example sort goes back days basic data types specified suffixes addition directive specified element parameters could configured attribute fixed name eg", "d": "11/2014"}, {"body": "davidsouther twoway binding function call need different syntax seems clear method call sufficient denote intention without extra important make clear binding expression exposed directive without form binding syntax must clearly distinguish string literal expression binding expression events declaration variables must clear template without understanding directives active internal semantics directives variable declarations need prefix assignment would make clear context directives like need specify current element way expose flexibility using eg proposal syntax directive html hello name click change name item", "d": "11/2014"}, {"body": "oneway binding bindonce multiline functions click current syntax", "d": "11/2014"}, {"body": "maybe support found actually improvement due administrative overhead incurs may implementation quality issue totally clear", "d": "11/2014"}, {"body": "lgalfaso important make clear binding expression exposed directive without form binding yes read assertion wanting explanation assertion meant accomplish directives like ngrepeat need specify current element yes course thinking along lines better usecase consider ty", "d": "11/2014"}, {"body": "caitp maybe support bindonce found actually improvement due administrative overhead incurs really useful nondynamic components repeated many times page different initialization data", "d": "11/2014"}, {"body": "think could implement much better designing dirty checker way would allow easily turning watches would make administrative work lot easier lets avoid crazy watchdelegates interceptors thing though point really making nt going get good implementation need afterthought ca nt support early probably nt", "d": "11/2014"}, {"body": "caitp think right better turn onoff watchers entire dom sub tree way kick digestupdate cycle hand stead watching created small plunk test kind attributes compliance current browsers", "d": "11/2014"}, {"body": "sanderelias caitp look proloser solution regarding onoff watchers", "d": "11/2014"}, {"body": "garyranson much favour syntax variation based html style attribute could nt agree would even allow us define sort functionality styling apply reusable conventionspatterns using mechanism similar css classes components using decorators think could even allow community come various different mechanisms achieving goal using different attribute value syntaxes using styledecorator parse info kind style attribute js decorator selector ngrepeat class ngrepeatstyledecorator constructor element element string attrs gt repeater attrs repeater attrs gt array list strategysplit var name var repeater collection pluralize name iterator singularize name topics would recommend staying close conventional html syntax help work easily existing tooling still recognisable angular sugar string interpolation stay line syntax used currently many frameworks events ie binding syntax prefix indicates sort binding default one way component html would strategy used could implemented decorator directive guess could optimization syntax binding sides component property name bound reverse binding implicit oneway binding os using style syntax simplify perhaps could externalize similar hardly belongs either html component could use principles directly html overrides external declarations pseudo code js decorator selector bound class boundattribute constructor element element string attrs gt extract attribute name bind know attribute bind strategy hold extract attrs hash sync object attrs gt attrsstream elementasstream sync debounce attrsdebounce toproperty multiple decorators using selector think could different ones use style map different purposes way define binding strategy names customise see fit need reinvent wheel let reuse existing concepts idoms infrastructure missingmisunderstanding something proposal would also super nice could override decorators perelement context basis general purpose strategy could customised input customised special inputs makes especially sense want customize binding debounce effect mappingfiltering values etc want use baconjs handle binding via eventstreams js componentdirective class input customize boundattribute decorator input components class inputboundattribute extends boundattribute sync gt super local customisation goes think quite revolutionary approach sure got many details wrong general idea sound open way flexibility developer control limited microsyntax approach discussed far", "d": "11/2014"}, {"body": "kristianmandrup", "d": "11/2014"}, {"body": "problem characters setattribute supports could use setattributens instead based one proposed syntaxes databinding web components based nonpronounceable characters seems like namespacing attributes respective purpose bindingevent makes intuitive sense", "d": "11/2014"}, {"body": "think quite hack use special chars namespaces intention would cool set namespace element allow custom namespaces distinguish core tags provided angular tags namespace provided various parties propose decorate binding template component controller manages dataflow controller provides basic twoway data binding alternative shorthand syntax decouple specification data flow attributes use minimize controller logic central place control crosscutting concerns css boundinputvalueinput value streamtype bacon binding would nice inherit previous via sth like scss input typetext value mixin boundinputvalue streamdebounce streamfilter nospaces input typesearch value mixin boundinputvalue streamdebounce streamfilter none binding would better achieved javascript via json pure code form allow mixins inheritance etc still keeping declarative syntax instead could use directive pattern simply one yet another decorator layer could load whatever config external source json filerepo whatever maybe little overarchitectured illustrate possibilities js controller selector ngvalue ctrl class bindingcontroller constructor element component object attrs switch attrctrl case sync new synccontroller class synccontroller extends bindingcontroller constructor element component object attrs attrstream streamerfactorybuild component attrs js class streamerfactory constructor element component object attrs setup event streamer binding via attrs hash streamerfactorydefaultstreamer baconstreamer ideas pouring", "d": "11/2014"}, {"body": "akircher problem characters setattribute supports could use setattributens instead yes possible set namespaces attributes via document however trying template like creates attribute named attribute named namespace according spec html syntax namespace prefixes namespace declarations effect xml instance colon special meaning html element names seems would work xml html cry", "d": "11/2014"}, {"body": "vlazar svg xhtml html prior support element like html namespace aware therefore understand namespace prefixes html parser element different element name html supports literal svg element name inline svg code solution either serve page xhtml processed xml thus namespace aware need add default namespace declaration element svg namespace like latter example remove svg namespace prefix still continuing use svg namespace return page xhtml options sure anything would loose however", "d": "11/2014"}, {"body": "return page xhtml nt think good idea xhtml days past", "d": "11/2014"}, {"body": "vlazar svg xhtml apparrently tab got svgwg agree try merge html namespace html svg freely intermixed guess wo nt worry necessarily exciting see plays", "d": "11/2014"}, {"body": "vlazar svg xhtml nt meant xhtml solution really thinking excluding html xml nogo angular changes nothing mathml svg mentioned spec", "d": "11/2014"}, {"body": "garyranson much favour syntax variation based html style attribute itemname could nt agree would even allow us define sort functionality styling apply reusable conventionspatterns using mechanism similar css classes components character already special meaning js able", "d": "11/2014"}, {"body": "yes character already special meaning html exactly makes sense reuse syntax possible rather invent something new facilitates tooling support nt require developers learn new obscure syntaxes become choose use certain framework stick standards imo limitations sometimes good thing", "d": "11/2014"}, {"body": "js meaning separates statements expression parser nt deal statements deals expressions much simpler subset language good thing probably nt want change", "d": "11/2014"}, {"body": "interesting uses applicationxhtmlxml content type whereas uses texthtml content type applicationxhtmlxml content type xhtml real one hardly ever used internet explorer nt support version xhtml always served texthtml therefore browsers used much lenient html parsers xhtml ones surprise xhtml almost never used spite advantages become recommended markup language due simplicity suitability everyday purposes however web designers keep mind wellformedness proper document structure correct element use always provided markup regardless serialization used even html parser forgiving xml parser wondering finally change would way better parse document xml imo digress", "d": "11/2014"}, {"body": "another proposal believe factors requirements uses proposed similarities xhtml namespaces html posted commentpostedon date collapsing even perhaps html good things part looks like normal html nt try look like embedded css think plus keeps right side simple expression events bindings namespaces allow really nice autocomplete options code editor easily show available directive attributes list typing example putting end makes read bit better think see important bits kind attribute code editors simple place find important bits also autocomplete end type since knows would binding smart enough crawl directive class definition keep string values interpolated values pretty easily believe valid browsers put middle attribute oh yeah shows oneway data flow using interpolation wanted example user type rather getting interpolated string always set comment directive class type requirement set binding like would serve user rather string ca nt would throw exception bad things uh pretty verbose without editor help fast ide support though one proposal reduce typing html basically able omit directive name space attribute name collisions required add namespace two attributes name different directives reason discourage using community written directive decide randomly add new attribute called item directive using alongside ngrepeat element break cases would impossible spot without reading every single changelog stay date components used app edit accidentally saved finished extra info", "d": "11/2014"}, {"body": "uses proposed similarities xhtml namespaces let cause problems anything else encoding variables attribute names least addition also directive names", "d": "11/2014"}, {"body": "would agree caitp besides nt really support namespaces ie polyglot document model yet ca nt assume document compatible either believe valid browsers put middle attribute would treated namespaced attribute nt compatible concluded previous comments regards prefix supposed mean oneway binding component template feel syntax overly verbose use attribute model would feel writing like get idea even ide support hardly assume require would make html difficult read even remove namespace nt choose strategy sure", "d": "11/2014"}, {"body": "kristianmandrup trying compare css html bit strange argument honestly probably closer actually kind makes sense nt look terrible besides point perhaps usually attach class element style stylesheet anyway also verbose proposed strawman also prefix exactly angular currently means onetime binding angular team wanted get rid onetime binding would nt syntax also per namespacing going vlazar said creates attribute named click attribute named click namespace specifically using namespaces rather using attributes since seemed one valid special characters although breaks things obviously rules encoding variables attribute names least addition also directive names caitp regarding mean longer directives scopes pull properties populate scopes misunderstanding bit nt encoding variables attr names say fake namespacing nt work browsers sorry maybe useful things proposal take though", "d": "11/2014"}, {"body": "encoding variables attribute names least addition also directive names caitp regarding mean longer directives scopes pull properties populate scopes misunderstanding bit nt encoding variables attr names nt know going end people already writing compiler may need encoding attribute names bind limited cases nt put much strain system order bind also encode variable names directive attributes makes compiler selector lot complicated rather special prefixes could anything would end looking pretty ugly hard use technical reasons well usability think much avoid instance bindvarname probably okay ngrepeatvarname probably okay due making selector engine lot complicated really gross use disclaimer making decisions saying think would terrible users maintainers think avoid", "d": "11/2014"}, {"body": "please nt put names variables attributes like someattrvariablename value ask much looks counterintuitive suppose ide feel crazy parsing constructions", "d": "11/2014"}, {"body": "event bindings expressions need different syntaxes need know expression needs executed least expose value need expose expression executed directive sees fit", "d": "11/2014"}, {"body": "lgalfaso nt done name attribute like full name stuff", "d": "11/2014"}, {"body": "lets say got repeat example going see benefits able use syntax separate create directivescomponents would nt say title attr particular binding similar benefit getting rid stupid gets rid one microsyntax overall one seems object dropping going sound like squeeky wheel still nt feel like addresses performance issue enough get people jumping ship react like still come back namespace approach know considered complex use still find less complicated turning watchers html three rendered bindings require different degrees upkeep change language first one changes change person language second changes change person third one changes using vs vs vs vs variants readability going improve performance get behind setting attr quickly getting ide recognize patterns attr vs content primarily effort make definition sort binding part attr name nt keep information stored somewhere else", "d": "11/2014"}, {"body": "hworld regarding point things closely related usually grouped together makes intuitive sense would nt know properties belong together unless humandeveloper machine perspective ie parseride would fragile approach maintaining list related properties might change time etc much better group related subproperties using like syntax", "d": "11/2014"}, {"body": "proloser making assumption expressions need exposed using attribute follows convention eg another possibility discussed question convention make things awkward directives use expressions things events eg please keep mind example say table widget get elements lazy performance reasons infinite scroll table requires expression retrieve next item template would look like event something directive needs consume something external naming convention makes look like something directive produces something happens", "d": "11/2014"}, {"body": "lgalfaso feel like second half comment missing lol yes see confusion nt follow affects decisions syntax bindings trying prevent devs making confusing attribute names", "d": "11/2014"}, {"body": "think general confusionmiscommunication amongst entire discussion btw could wrongconfused everyone throwing around term twoway binding oneway binding really relevant time lot people examples onetime binding live bindingtwotime binding twoways variables expressions written nt really touched whole lot brought namespaces feel people missing point realizing frequency bindings evaluated rendering need syntax syntax really tl dr think people confusing frequency evaluations purpose binding binding purposes render configure evaluate event callback evaluation frequencies upon truthy constantly live occasionally onoff watchers namespaces shared watchers etc", "d": "11/2014"}, {"body": "proloser comment already getting long expect everybody able fill gaps producer consumer well known want syntax allows developers expressive possible write templates read immediately understand without going documentation implementation", "d": "11/2014"}, {"body": "lgalfaso nt realize big issue want see performance boost confusing api used example nt seem merit degree complexity dropping microsyntaxes like ngrepeat strings expressions nt know enforcing attributes appear really going make big difference mean iunno people still weird names attributes confusing poorly designed api going happen vs telling people follow convention something gain enforcing type syntax level vs letting people use whatever names want definition attrs defined hash", "d": "11/2014"}, {"body": "thread see lot proposals ideas community members comments proposals team drafts consideration already discuss variants internally please post vectors future proposals based likedislike current ideasproposals", "d": "11/2014"}, {"body": "lgalfaso writing crappy example rereading example think disagree fact event core team seems think nt event based wether read without prefix honestly difference one returns data evaluated exact way otherwise making things less confusing anyone", "d": "11/2014"}, {"body": "proloser first would like clarify speaking behalf way opinion understood opinion angular core team fact working angular involved design new compiler agree one possible view view every expression passed directive event one view perfectly valid one side viewing every expression event may everybody wants see expressions like important syntax flexible force specific mindset reduce expressiveness said strong opinion majority developers comfortable different syntax welcome open arms", "d": "11/2014"}, {"body": "think whole imposing prefixes special characters different situations exactly claim imposing specific mindset reducing expressiveness vs letting people name crap whatever horrible convention want sort hash defines attribute similar current behavior", "d": "11/2014"}, {"body": "guess another way see would see bindings using gettersetter methods see fex instead directly affecting component propertiesvalues think always template call method component", "d": "11/2014"}, {"body": "lgalfaso think everyone getting excited think pertains bindonce livebind reality nt think stuff really addresses issue kristianmandrup pertain templating system tho", "d": "11/2014"}, {"body": "proloser idea achieve greater flexibility make interface consistent thus easier tooling developers etc kiss proposed similar idea previous posts would like binding super customizable see need controller template component handling data transfers least nice way define logic data transferred makes obvious case getterssetters minimum", "d": "11/2014"}, {"body": "simply drop microsyntax keep reference hash would nt see performance boost start evaluating attribute names detect purpose nt going see albeit slight performance drop using hash definition plus less flexibility kristianmandrup nt agreedisagree reading nt know getterssetters pertained dom element attributes mean generally people agree put stuff declaratively html", "d": "11/2014"}, {"body": "radically different approach would avoid elementattribute micro syntax go back old school arguments html clean possible prefer attributes external decorators similar css principle whether declarative via code define element decorations would avoid embedding decorator details html intentions tags picked external selectors hmmm like considered bad practice imbed font tags onevent handlers html common early days web another interesting reactive template framework", "d": "11/2014"}, {"body": "proloser believe team something similar reference hash early documentation part speculation rather attributes object class describing using annotations methods event bind example instead class directive constructor bind data thisevaluation value event click eventbinding event loadmore callback however four problems approach could nt get annotations work class properties methods adding annotate property would mess object nt possible primitives bind wo nt work example reference hash solution solves expense verbosity thought would helpful see difference property binding event binding template annotations seems overkill relative template syntax web components two salient parts events amp properties however questioned directive like ngrepeat need declare variable need able declare direction onetimeness binding subset sometime two templates might use directive one might want binding onetime another might liked idea able override directives default pertemplate basis difference syntax means angular would compile template actually see expression evaluates one onepass regex either case performance close solution feel free ignore missed concerns completely update looks like latest commits angular repo binding reference hash inside top level annotation", "d": "11/2014"}, {"body": "kristianmandrup similar idea head syntax html gives us ability interoperate webcomponents tools tool maybe web component change property dom node property directive handle render move properties js layer webcomponents able way html dom transport layer apps like http restful apps really wish less fragile polluted transport layer nt believe jsweb tools follow idea doubt adopt new css sibling html given point apis apps interoperation", "d": "11/2014"}, {"body": "thanks akircher like discussion going allow hash syntax like idea treating kind functionality similar styling decorator approach jamm see point agree least couldshould option road imo could registered determine attribute special act accordingly like initially parsed could addremoveedit decorator attributes like hmm respect property binding event binding considered equivalent bindvalue x essentially equivalent component getterssetters used much different really except always one way", "d": "11/2014"}, {"body": "kristianmandrup politely think using wrong framework want remove declarative syntax angular jamm yeah realized overhead probably high akircher thought would helpful see difference property binding event binding template feel like although nifty really nt decisionmaking factor adds verbosity templates already using names like options like hungarian notation variables prefixed type nifty theory painfully verbose execution negligible benefits", "d": "11/2014"}, {"body": "kristianmandrup team definitely thought getterssetters eisenbergeffect wrote approaches twoway databinding moved away one core angularisms using pojo data binding rather extending custom object using getterssetters like frameworks sure right decision seems unlikely change minds argue earlier time expression function call going event listener many times execute function expression bind result almost never since done directive could get rid difference bindingevent syntax allowed function calls events bindings eg expression string event otherwise binding notice nt distinguish bind example instead use ng prefix case ng means two different things ngvalue binding expr nt ngclick event binding dowork look first comments thread see examples", "d": "11/2014"}, {"body": "kristianmandrup shadow dom events almost sure angular use component directive shadow dom element team assumptions akircher totally agree idea events binding moreover bindings like impossible lead us much clean maintainable code expression looks handy simple leads ugly code grows mess new piece logic added binding", "d": "11/2014"}, {"body": "jamm agreed makes good tutorial horrible app really wanted feature could parse inline functions eg", "d": "11/2014"}, {"body": "akircher agree everything noted except think one core angularisms using pojo limitation makes sense point time made sense years ago sure would achieve event stream binding debounce necessary searchautolookup field fex filtermap data templatecomponent common scenarios mind definitely proposing getterssetters similar used ember natural class getterssetter functions could autogenerated explicitly defined similar ruby macros gettersetter would used available otherwise default access pojo attributes directly makes sense specify bound attributes component annotation section basic getterssetters generated overriden assume proposal mentioned eisenbergeffect", "d": "11/2014"}, {"body": "wanted let know issue monitored least speaking reading every comment posted lot interesting ideas pretty cool see much participation believe mhevery putting together new proposal syntax takes feedback issue along additional constraints account nt seen yet file permissions issue preventing access funny enough imagine post update feels details worked enough warrant meaningful feedback akircher document approaches twoway databinding authored actually extremely incomplete intended expand approach detailed explanation advantagesdisadvantages would nt use document real indication approaches thoroughly explored point think exploration needs done however mostly independent actual syntax discussed kristianmandrup actually prototyped new databinding system used multistrategy approach observing models system would pick appropriate technique per property per object basis uses objectobserve gettersetters suggest auto generated dirty checking last resort also allowed plug custom strategies ideas may find way new databinding system likely form proposed", "d": "11/2014"}, {"body": "eisenbergeffect thanks update keeping us loop updates recent blog post immensely helpful good know brainstorming helping team", "d": "11/2014"}, {"body": "kristianmandrup fair criticisms sure", "d": "11/2014"}, {"body": "eisenbergeffect akircher happy see think alike great ideas looking forward see experiments implemented test would work practice", "d": "11/2014"}, {"body": "clear stick existing html infrastructuresyntax much possible leverage existing apis tooling support need reinvent new micro syntaxes unless practical way broad browser support dom mutation observers already", "d": "11/2014"}, {"body": "made sense years ago sure makes sense today many places want pipe json api result directly screen without overhead instantiating actual class", "d": "11/2014"}, {"body": "davidsouther fair enough noted gettersetter would used available otherwise defaults access pojo attribute directly", "d": "11/2014"}, {"body": "want use angular angular perhaps would already possible extent using macros enter sweetjs make super easy compiletransform dsls like enjoy", "d": "11/2014"}, {"body": "sad see eisenbergeffect leave team yet read detail angular talks first thing list reason use angular expressive html current syntax ngrepeat read easily anyone take middle school student htlm experience get meaning except eisenbergeffect proposals seen little syntax would call expressive syntax really need change clean understandable angular html code make look like scripting", "d": "11/2014"}, {"body": "quote mhevery discussion let discuss semantics", "d": "11/2014"}, {"body": "thank suggestions want know read one even thought time respond put together document describing current thinking short figured way micro syntax satisfies constraints making primary syntax optional secondary syntax finally want know changing syntax heck good technical reasons enumerated various documents describe reasoning making changes", "d": "11/2014"}, {"body": "good news guys get brand new syntax ignores keyvalue system baked platform looks weird comparison status quo essentially reason less micro syntax one advantage put sub expressions order want could anyways keyvalue system baked platform ignored special bonus feature new situation nt confusing enough also get n ways accomplish given task lessons apparently learned confusing people thanks participating submitting proposals surely good come", "d": "11/2014"}, {"body": "mhevery see trying compromise would possible anyone community build set attribute directives could provide something similar canonical syntax design doc actually something like want automatically apply filter bindings instead bf set custom attributes automatically generate another example today bindonce library set directives living top angular core one time binding added core essentially better version bindonce honest sure like short hand syntax think good argument made expose one simple easy short hand syntax default core long community able build extensions top core provide something like describe canonical syntax potentially override template engine nodejs world take special care distinguish core vs user land years node started push stuff core user land number benefits including making easier maintainupdate core allowing users choose recommended community library something vs preferred custom solution perhaps needed tighten streamline core essentials time empowering community take ownership things often matter taste", "d": "11/2014"}, {"body": "caitp keyvalue system baked platform referring sets html attributes jsstyle objects angular expressions assuming latter example mhevery doc html album albumname j trackname would become something sorta like html album albumname j trackname seems case would able signal things create new variables templates original example means fewer hooks inspections autocompletion like could use strings expressions add back annotations html album albumname j trackname seems little awkward", "d": "11/2014"}, {"body": "mhevery absolutely right long syntax valid sane devil details really important compiler issue syntax could opened made flexible level overridecustomisation imagine developers nt would never quite satisfied whatever syntax wizards decide hehe", "d": "11/2014"}, {"body": "kristianmandrup agree semantics important syntax syntax thread people want discuss different semantics start new issue discuss relevant design doc", "d": "11/2014"}, {"body": "bit update serious counterproposal please add scoring sheet use make sure counterproposal pass requirements", "d": "11/2014"}, {"body": "read document recently posted mhevery like syntax much better prior proposals seen seems straight forward still requires explanation nonexperts template use angular directives others know line web components many thousands developers getting feet wet web development using angular understand complexities web components rhetorical questions looking answers hoping user stories features include lower experienced community", "d": "11/2014"}, {"body": "repeating existing template creating new one supported", "d": "11/2014"}, {"body": "good news guys get brand new syntax ignores keyvalue system baked platform looks weird comparison status quo essentially reason less micro syntax one advantage put sub expressions order want could anyways keyvalue system baked platform ignored special bonus feature new situation nt confusing enough also get n ways accomplish given task lessons apparently learned confusing people thanks participating submitting proposals surely good come brought twitter replied today given reply twitter replies limited characters everyone seen asked right thing anyways going make clear statement first foremost apologize sounding overly negative sarcastic actually edited reply numerous times try make less negative sounding yes unhappy current state affairs want people know want make next iteration framework easier rather harder people use people migrate want users know trying back want work framework would want use things nt think would want use however sarcastic implicitly negative comments way go unprofessional somewhat immature apologize really dumb chat mi\u0161ko today topic templating trying find ways factor complexity way aligns well constraints put forward rather making snarky remarks instead want make sure people understand someone read lot calvin amp hobbes child sarcasm negativity sort bakedin fully aware trying hard make best possibly know everyone involved going keep trying make attractive developers use projects goal everyones goal first started working working angular found made things simpler rather difficult see us moving away ways want line back simpler better approach best spite disagreements current proposal important understand picking fights anyone nt want nasty anyone certainly nt want imply developers antagonizing users anything everyone definitely wants best framework anyone interested helping factor complexity current design please shoot email ideas add try build proposal makes sense users developers toolkit", "d": "11/2014"}, {"body": "angular could understand caused confusion people nt understand property directives many harmless directives nt affect dom structure accomplished using angular", "d": "11/2014"}, {"body": "caitp thank much clarification caitlin way think point granted controversial comment short intelligible least without reading entire thread reading comments misko mhevery document understood pointing dear angular team please keep mind speed efficiency nt optimization goal end day deal developers important group newbies intuitive syntax better angularjs succeed", "d": "11/2014"}, {"body": "thanks caitp thoughtful reply folks general long issue comment thread thanks much passion enthusiasm around topic hear paying attention tough design area argued internally well yikes think close year care much getting right goal come something works well intuitive many folks possible please submit ideas counterproposals doc misko shared", "d": "11/2014"}, {"body": "fyi regarding tag", "d": "11/2014"}, {"body": "thanks link mhevery nt know intents understandable agree reasonable use ngrepeat ngswitch ngif turns onoff elements sorry nervous ngfans worry things less say see slow movement better syntax current proposal better initial need little bit genius ideas", "d": "11/2014"}, {"body": "mhevery great thing angular moving lots developers web might know new template tag angular team stats community user base many designers find angular easy dabbling javascript many students many rails developers many windows formswpf developers dipping toe web development first time percent actually javascript gurus might interesting know angular session vslive yesterday standing room recently top courses pluralsight angular like see angular continue approachable developers future developers", "d": "11/2014"}, {"body": "must say love new approach discussing problem reasons mentioned earlier many times firmly believe directives template prefixed one way mainly dependency injection ability distinguish values contain pseudo microsyntax also think better way writing templates well reuse short prefixes pseudo microsyntax attributes keys added new proposal angular document", "d": "11/2014"}, {"body": "looks bad really", "d": "11/2014"}, {"body": "vkoonline issue something sort issue angular making sure things apply right element rationale understand see attribute going generate element attributes derived items attribute string template sort replaces used populate discretion whatever directive issue like directive attribute merging original host element mess things quite issue sort related see want work around one idea sort like given magic attribute prefixes etc could also variants prefixes like whatever people like nt matter able separate template attributes element attributes easily still using syntax baked web platform years would something like sound still working hammering solid proposal meets constraints would good hear people would feel versus magic template attribute thing challenge case sensitivity", "d": "11/2014"}, {"body": "caitp really like template template since aligns better syntax check comments doc unfortunately mhevery like template allows one template directive per element think could helpful feature caused problems although attribute order nondeterministic browsers looked kept could mean breaking change browsers change order future maybe improve solution solve problems", "d": "11/2014"}, {"body": "note talking referring directives referring template target whatever attribute whatever template may slightly different note still running multiple template directives thing sure would nt meaningful point magic syntax nt really prevent one option attribute explicitly requests instantiation template directive maybe short something think ways around", "d": "11/2014"}, {"body": "caitp see slightly different like going unrelated clarifying question original problem elementsetattribute foo exp working setattribute actually necessary reason think compiler recreatecopy template element new dom element ca nt grab whole node originally written author template insert need dom escapedshorthand attributes move along manipulate nonescaped propertiesevent handlers normally seems like simple solution sure good reason would nt work someone would care explain would appreciate", "d": "11/2014"}, {"body": "coming bit late regarding microsyntaxes think different approach would possible angularjs takes pride everything angularjs implementable directive including etc nice also complicates things ie compiling templates new symbols introduced alternative would hardwire core structural elements templating much like programming languages hardwire syntax loops function calls variable declarations etc less powerfuldynamic directives overall give power angularjs understand templates going number constructs one would hardwire actually quite small basic level need repetition conditionals inclusion mechanism expansion directives plus everything introduces new names template lexical scope must built eg think things wrapped directive controller fields nt think might deserve exploration hardwiring primitives restrict directive overly simplify entire system lot", "d": "11/2014"}, {"body": "caitp two issues write need convert done efficient manner need conversion view dom dev tools see binding nt want show binding yet another format tools haml able generate mprobst considered solution issues limit number core keywords infinite repeater dragable custom selector nonhomogeneous repeater really better keep open think current proposal strikes good balance", "d": "11/2014"}, {"body": "cents onto attribute name syntax hunt anybody considered using suffixes also using periods periods valid xml btw using period first position appear work fine apis like", "d": "11/2014"}, {"body": "know works svg thu nov bernard notifications githubcom wrote cents onto attribute name syntax hunt anybody considered using suffixes also using periods periods valid xml titleng contains count items titleng contains count items btw using period first position appear work fine apis like elementsetattribute titleng reply email directly view github rob eisenberg president blue spire wwwdurandaljscom", "d": "11/2014"}, {"body": "popbee period interesting idea needs work without ng suffix seems like period get kind lost", "d": "11/2014"}, {"body": "eisenbergeffect worked svg elements browsers chromefirefoxrecent ie period gives twisted feel something bit special happening attribute yet think people wo nt get scared starring unlike abc click since valid xml probably generated lot xmlbuilding tools supported tool good chance supported mixing may also work visually myownattributeng course period would need special meaning like really part attribute name mhevery agree period alone end good looks like bug going docs posts missed reason ca nt use ng", "d": "11/2014"}, {"body": "interesting something like", "d": "11/2014"}, {"body": "sure materially different cant use prefix prefix core angular directives binding general problem needs work directives webcomponents prefix practical purposes part name part binding system directive needs bindable also library may declare prefix instead prefix let thu nov rob eisenberg notifications githubcom wrote interesting something like propertybind expression propertylink expression eventtrigger expression eventbubble expression reply email directly view github", "d": "11/2014"}, {"body": "differences using easily distinguish part attribute name vs part binding syntax related first point would less likely get odd naming schemes imagine someone actually names event prefix dash end apposed early discussions main argument obscured attribute name particularly ltr grammar looks fine inside view many expressions harder read favored operator suffix think easier read cases makes grammatical sense example vs thought think would interesting see substantial view looked like syntax", "d": "11/2014"}, {"body": "glance would prefer see eventtrigger expression event expression still see parens either evaluate expression function parameter list also fine going syntax onevent expression", "d": "11/2014"}, {"body": "eisenbergeffect like especially agree point two using notation makes lot clearer happening first thought might confusing sort notation actually happening representing affected affecting familiar context", "d": "11/2014"}, {"body": "yup second look period almost look like call also somehow gives standard visual location describes magic going applied thought think would interesting see substantial view looked like syntax feeling entire solution another option juggle", "d": "11/2014"}, {"body": "eisenbergeffect also favor suffix annotation except please nt call could also enable quite easily something wanted end", "d": "11/2014"}, {"body": "perhaps would better name idea play around", "d": "11/2014"}, {"body": "eisenbergeffect suffixes", "d": "11/2014"}, {"body": "nice idea popbee anyone feels need case like parsing template angular frameworklibrary probably also uses purpose attribute names would unchanged compilation angular issue frameworklibrary worried prefixes suffixes angular syntax directives see comment syntactically looks really nice though eisenbergeffect use overall feels like angular trying take cool syntax need interoperability frameworklibrary alter less popular library needs adopt fact already use angular kind like jquery became popular taken jquery sorry libs underscorejs took hope idea clear", "d": "11/2014"}, {"body": "btw noticed commit landed guys still expecting community continue exploring ideas making proposals google docs document syntax kind final least please submit ideas counterproposals doc misko shared", "d": "11/2014"}, {"body": "release worry backwards compatibility everything changeable nt want blocked going best proposal far thu nov vladislav zarakovsky lt notifications githubcom wrote btw noticed commit landed guys still expecting community continue exploring ideas making proposals google docs document syntax kind final least please submit ideas counterproposals doc misko shared reply email directly view github", "d": "11/2014"}, {"body": "use appears possible css attribute selectors jquery dom queries escaping broad testing required assert fully course nicest work assume type stuff would rare typical developer anyways css", "d": "11/2014"}, {"body": "one note counterproposals evaluation think mhevery got emotional reviewing counterproposal rejected soon think reviewing counterproposal idea maybe party reject proposals", "d": "11/2014"}, {"body": "escaping liked dotsnotation really disagree use ugly escaping nganimation still use css css selectors look ugly ugliness brings entropy sure small grow something ugly later", "d": "11/2014"}, {"body": "hi adam sorry came across emotional proposal rejected technical reasons work detailed issues document fix proposal ask look first want really understand counterarguments work thu nov pm adam stankiewicz notifications githubcom wrote one note counterproposals evaluation think mhevery got emotional reviewing counterproposal rejected soon think hes reviewing counterproposal idea maybe party reject proposals reply email directly view github", "d": "11/2014"}, {"body": "jamm sure would write css dotted attributes unless wanted actually style things expressions words unless wanted make developer tool styled angularbound elements instead would still write css normal attribute would set binding system", "d": "11/2014"}, {"body": "eisenbergeffect simple example ngshow currently contain expressions often used nganimation selectors", "d": "11/2014"}, {"body": "spamming matsko case understood something wrong happens often hehe please matias minutes share opinion escaping css selectors", "d": "11/2014"}, {"body": "omg thread never end least xmas", "d": "11/2014"}, {"body": "jamm case matters directive could easily implemented update attribute associated element case cases targeting decorator directive css common", "d": "11/2014"}, {"body": "also escape css selector follows titleng slightly modified jsfiddle slightly better though still really like dot syntax seems nice clean putting name attribute binding first makes easier read propertybind value eventhandle handler add also seems work fine colon character like dot better though", "d": "11/2014"}, {"body": "nborelli discussed multiple times thread already colon work document interpreted xml xhtml colon seen namespace separator", "d": "11/2014"}, {"body": "alxandr yes correct new discussion missed need read huge thread carefully still think escape css selector little better like dot syntax stated earlier also allows syntax like propertybindonce value although could also see binding behavior part expression", "d": "11/2014"}, {"body": "nborelli also stated earlier thread one points inside attribute valid expression", "d": "11/2014"}, {"body": "alxandr well agree going micro syntax ngrepeat discussed earlier allow something like would allow additional binding behaviors added later time syntax looks like javascript object luck nt missed something else thread usually lucky", "d": "11/2014"}, {"body": "new may wrong would work simple binding binding options way single attribute could used either way", "d": "11/2014"}, {"body": "nborelli like optional nature approach although case differentiate generic expression value expression mode also expression probably would rather quotes around inner expression", "d": "11/2014"}, {"body": "popbee yes thinking things nt know locked expression syntax point nt know something could added differentiate two kinds expressions think may need quotes around inner expression though inner expression comma things could get pretty confusing radical changes still happen expression syntax example unfortunately still quotes around inner expression though maybe micro syntax could help get rid sure someone smarter could think better expression syntax really area expertise worked guess markup proposed earlier might work feels heavy", "d": "11/2014"}, {"body": "sure proposed idea embedding binding options part expression syntax way filters past example way filter function operates output expression binding option function operates binding change behavior default", "d": "11/2014"}, {"body": "eisenbergeffect could ampersand interpreted part expression concern like wonder would better mode oneway twoway etc", "d": "11/2014"}, {"body": "nborelli nt think single used expression syntax currently nt looked bit though could certainly basically imagined would hood bit shorter syntax common case either way though", "d": "11/2014"}, {"body": "eisenbergeffect could character besides ampersand used ampersand comes xml escaping issues etc character guess whitespace could also removed feels like hashtags smile", "d": "11/2014"}, {"body": "optional separators expressions already proposed doc misko linked think loosing difference discuss syntax semantics many buzz may favorite symbol dash imho", "d": "11/2014"}, {"body": "eisenbergeffect nborelli jamm said suggestion doc extend alternating word micro syntax templates bindings would allow something like would allow bindings additional options amp filters course proposal could use additional delimiters like etc like make sure comment promise make cut since mhevery seems like", "d": "11/2014"}, {"body": "extending alternating word micro syntax templates bindings long separate alternating words expression parsing jamm would fine dash instead dot attribute name dot seems unique attributes already contain dashes seems easier tell binding really small difference imo", "d": "11/2014"}, {"body": "jamm buzz huge thread price pay yes difficult sometimes follow multifaceted long worth every penny imho quite refreshing everybody appears calm yet passionate succeed syntax essential angular acceptation amp love keep ideas flowing", "d": "11/2014"}, {"body": "use inlinecsslike approach put things angular single attribute big pro ultimate freedom syntax want use inside make name attribute configurable someone builds web component ng attribute one override angular default use another name approach would need api interact elements bindings kind abstraction bindings would allow html attribute syntax completely separated underlying mechanism could decide support syntax attribute least migrating ngattributes ng seems easy automate well option way help migrating code rewrite old syntax new one dom nobrainer", "d": "11/2014"}, {"body": "markmeeus approach seems nice also resemble approaches described earlier ie might wrong first sight looks like problem simply moved single attribute microsyntax issues would remain becomes sort namespace advantage see avoiding clashing attributes name introduces challenges additional escaping layer would required look example lots double quotes seem parseable elementaddbinding coolproperty itemcoolvalue mode twoway syntax csslike actually square brackets nt like anything seen actually looks bit like array quite like said would require new apis deal special attributes angular team create sometimes html generated server sorts ways beyond reach angularteam compatibility interesting idea since change markup really compatible since touching markup better change syntax directly would rather way make template work box possible angular team give path migration yet confident community come something greatly ease pain", "d": "11/2014"}, {"body": "popbee nt exactly trying define syntax pitching general idea adding angular things element single attribute mainly way complete control acual syntaxgrammar could potentially make code much readable read code another time posting quotes completely messed edited original comment makes sense", "d": "11/2014"}, {"body": "markmeeus ok whichever syntax pick nonetheless force adding layer escaping might help readability besides large attribute value always work nicely want split multiple lines source code readability purposes", "d": "11/2014"}, {"body": "seems everyone pet syntax better worse one proposed would like see discussion semantics none discussion addresses key points discussed document working webcomponents clearly identifying expressions without knowing semantics active directives clearly identify locations dom structure mutate clearly identify new variables introduced support microsyntax wether chose something else secondary", "d": "11/2014"}, {"body": "seen recent talks polymer web components would ever want document various different types web components would nt bit mess super confusing especially framework uses different microsyntax", "d": "11/2014"}, {"body": "webcomponents standards nothing say databinding webcomponents deal browsers create new elements extend behavior dom databinding concern framework standards", "d": "11/2014"}, {"body": "mhevery overall really like team proposal small questionssuggestions like alternating word microsyntax little worried attribute directive name eg ngrepeat looks keyword might get lost could angular force template directives appear actual template elements throw error author puts elsewhere authors could shim template tag ie supports eg works throws would like alternating word microsyntax available bind attributes even needed first still possibility implementing something also works better paired first word syntax would variable bind current template syntax first word directive name syntax bikeshedding def used declaring variables something like var let seem aligned javascript although annotation declarations directives may less surprising behavior current configuration looks little intimidating seems complicated ddo nt know enough interworkings make specific recommendations hope move complexity annotation template conventions instead ideas mentioned doc know global registry complicated could move annotation directive selector property template using html imports worth discussing proscons separate doc template property annotation really need could nt done implicitly properties templateconfig put template per issue think understand distinction amp services seems overly complicated latter two element injectors parent element declare directive via one methodsproperties using def children elements access sure morebetter ideas simplify annotation api happy holidays adam", "d": "11/2014"}, {"body": "akircher one comment said probably nt replacec actually valid variable name whereas", "d": "11/2014"}, {"body": "looks like vojta fixed issue since passes", "d": "11/2014"}, {"body": "stupid read vicb description understand reopening fix properly", "d": "11/2014"}, {"body": "blocking anything deferring later", "d": "11/2014"}, {"body": "nt computer check think running pub get second time return immediately lock file created first invocation satisfies version requirements case easy fix gulp running two tasks subsequently copy pubspec build folder run pub get pub spec push updates detection pub need duplicate effort gulp side might wrong pub behavior needs checked", "d": "11/2014"}, {"body": "rkirov thanks parentheses also working yet", "d": "11/2014"}, {"body": "closed via", "d": "11/2014"}, {"body": "compiler parses expressions stores", "d": "11/2014"}, {"body": "moved", "d": "11/2014"}, {"body": "taking look see could submit pr ran scenarios would helpful get input pretty easy modify dartparsetreewriter write works multiline work leading tag processing using templateliteraltransformer transforms however fails dart nt string could subclass templateliteraltransformer append tostring guaranteed work expression something nt define tostring example version output object object test transpiles invalid dart dart version output instance test test using templateliteraltransformer tag processing generates object definition import statement causes compile error would need elevate imports top probably needed scenarios", "d": "11/2014"}, {"body": "think sufficient assume dart version always strings think vicb suggestion good enough support rest semantics", "d": "11/2014"}, {"body": "submitted pr simple approach writing triple quoted strings added explicit error tagged template strings attempted use hoist imports generated code brought another issue properly handle generated code dart nt support object literals objectfreeze objectdefineproperties would require converting convention dart would support", "d": "11/2014"}, {"body": "read templatelitteraltransformer correctly features used tagged template strings need special arraylike object string propriety etc dart tagged template strings easiest throw tagged templates merged", "d": "11/2014"}, {"body": "output looks like including source maps", "d": "11/2014"}, {"body": "nt notice assigned took stab interested pr worries", "d": "11/2014"}, {"body": "tpodom looks good create pr merge", "d": "11/2014"}, {"body": "closed", "d": "11/2014"}, {"body": "fyi say close comment issues gets closer gets merged thanks hard work", "d": "11/2014"}, {"body": "yeah thought fixes comment would well guess nov pm mi\u0161ko hevery notifications githubcom wrote fyi say close comment issues gets closer gets merged thanks hard work reply email directly view github", "d": "11/2014"}, {"body": "thanks sun nov tommy odom notifications githubcom wrote closed reply email directly view github", "d": "11/2014"}, {"body": "start using nodeinspector makes debugging much easier", "d": "11/2014"}, {"body": "closed", "d": "11/2014"}, {"body": "compiler correctly parses template directives stores following values variables specified view template directive including annotation protoview template directive use", "d": "11/2014"}, {"body": "tbosch", "d": "11/2014"}, {"body": "done", "d": "11/2014"}, {"body": "vicb vojtajina one closed still pending action", "d": "11/2014"}, {"body": "pr merged traceur end last week need add dart support repo back vacations please leave open le novembre naomi black notifications githubcom \u00e9crit vicb one closed still pending action reply email directly view github", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "current syntax correct", "d": "11/2014"}, {"body": "forin js rejected since semantically different map iteration syntax js supports", "d": "11/2014"}, {"body": "yes put traceur runtime take care", "d": "11/2014"}, {"body": "vsavkin assigning along parser work please update", "d": "11/2014"}, {"body": "migrated tests porting parser", "d": "11/2014"}, {"body": "means changed regards di injection right", "d": "11/2014"}, {"body": "understanding state feature vicb correct traceur parse generics type arguments missing generate runtime annotations generate runtime type assertions probably format annotations output generics dart code output generics code nt need would nice generate type annotations runtime type assertions suggest js function foo bar b bar currently generate fooparameters bar suggest generate fooparameters new typeannotation bar new typeannotation bar baz means traceurruntime need define class type assertions something like thoughts mhevery arv", "d": "11/2014"}, {"body": "thinking something along lines function foo bar b bar fooparameters bar barparameterize baz means types define method generecized purpose crate returned cache new type parameterize type used assertions normal thoughts", "d": "11/2014"}, {"body": "mhevery would indicate write generic class would generate static method automagically", "d": "11/2014"}, {"body": "mhevery like would good limit amount garbage create alxandr yes generate method reminds need one thing update parser allow actually define parametrizable types traceur would also generate method", "d": "11/2014"}, {"body": "updated list tasks x parse generate method see x output generics dart code x generate runtime annotations x generate runtime type assertions probably format annotations x make sure see update rttsassert library deal generics x output generics code nt need would nice", "d": "11/2014"}, {"body": "going work today", "d": "11/2014"}, {"body": "traceur currently transform typereference turn creates new instance last step important assertion library see generic adhoc moment", "d": "11/2014"}, {"body": "needed hello world working", "d": "11/2014"}, {"body": "tried karma setup fails traceur compilation even run tests output shows line numbers errors also improved way gulp shows errors see looks like please reopen suggestions make better", "d": "11/2014"}, {"title": "render event", "body": "want use jquery lot data binded lists however jquery selectors nt work vue completed rendering page also working event hook runs view completely rerendered btw inside runs first rendered second dom objects care second", "num": "606", "d": "11/2014"}, {"title": "vueresource", "body": "interested contributing restful extension vue coming backboneviewmodel background could imagine extension able specify rest resource url correcsponds vue instance providing directly vue one would extra functions available syncing resource another approach like angular features exposed separate object visionwishes vueresource see separate resource object vue interact extension class", "num": "604", "d": "11/2014"}, {"title": "failed resolve directive", "body": "custom directive subcomponent fail resolve directive node call component owns directive fiddle code use work previous versions vue even", "num": "603", "d": "11/2014"}, {"title": "make vhtml support contenteditable acting also like vmodel", "body": "know would great vhtml would directive simply combining kind filter would give ability create great dynamic forms emojis eg", "num": "602", "d": "11/2014"}, {"title": "vrepeat object updated", "body": "using object works update object added example thanks", "num": "601", "d": "11/2014"}, {"title": "vmodel working vif update", "body": "situation updating set value still holds value", "num": "600", "d": "11/2014"}, {"title": "strange behavior watch", "body": "hello strange behavior watch method collection entities want watch updates individually put updated one server instantly code look like works push new entity collection add event listener entity get updated vue considers entire collection get updated fire individual events thank", "num": "599", "d": "11/2014"}, {"title": "safari input vmodel value comes inverted", "body": "hi safari caret always stays beginning input entered values becomes inverted ps nt know supporting browser", "num": "598", "d": "11/2014"}, {"title": "filter nested array", "body": "need filter nested array change dropdown list data changed view refresh sample filtering data group group change", "num": "597", "d": "11/2014"}, {"title": "vms added via addchild observe paramattributes using custom elements", "body": "dunno explain specific vue paramattributes become interpolated strings initialisation using documentregisterelement actual usage analog shadow dom reason slightly simplified version", "num": "596", "d": "11/2014"}, {"title": "implement functionality like vwith verion", "body": "go changes md found behaviour vwith directive changed change variable child scope affect variable parent scope new directive available version implement functionality vwith write example jsfiddle expecting change parent checkbox affect child vice versa", "num": "595", "d": "11/2014"}, {"title": "component multiple extension data inheritance broken", "body": "following technic working data function gets overriden thisitems becomes available quite sure correct behaviour used technic ok using special merge function solution feeling wrong way still try use mixins object extension yet migrated yesterday great work btw extreme performance increase times app bottlenecks", "num": "594", "d": "11/2014"}, {"title": "element display immediately trigger vshow true", "body": "demo", "num": "593", "d": "11/2014"}, {"title": "vmodel placeholder fail", "body": "hey seem problem inputs vmodel placeholder attribute begin rapidly exchange focus endlessly see problem example", "num": "592", "d": "11/2014"}, {"title": "onetime bindings unescaped html", "body": "trying onetime bindings html tried using got following error supported feature thanks", "num": "591", "d": "11/2014"}, {"title": "replaces entire object argument specified", "body": "specify data object using directive blows away default properties defined component ideally think properties would merged nt happen argument supplied example given following code vuecomponent mygreeting template greeting person data greeting good news person everyone new vue el container data nobody person nobody somebody somebody would undefined first div second first case ideally object would merged existing default object instead replacing", "num": "590", "d": "11/2014"}, {"title": "vrepeat filterby within vrepeat", "body": "ca nt get working html something wrong keen ketting tried various quoteoptions also instead work many thanks klaas", "num": "589", "d": "11/2014"}, {"title": "explicitely pass data components", "body": "trying use directorjs set vuejs components create basic navigation system issue data defined main view used inside component template tried using directive without success sample repository code missing", "num": "588", "d": "11/2014"}, {"title": "change behaviour", "body": "modify fahrenheit input directly ca nt set whole numbers like number nt problem might somehow related fix introduced", "num": "587", "d": "11/2014"}, {"title": "listen element modification contenteditable container", "body": "component directive inside contenteditable container update data component removed hitting delete button way listen event", "num": "586", "d": "11/2014"}, {"title": "vueutilextend return", "body": "would mind change return instead nothing", "num": "585", "d": "11/2014"}, {"title": "add directive readyevent", "body": "want add mouseevent listener single vueinstance long compiled possible add enable directives fired course use would like use directives reason adding directives right start dozens instances need handler unknown even worse handlerfunction exist time creation", "num": "584", "d": "11/2014"}, {"title": "computed executed filter applied", "body": "wrote following code phone number phoneerr new vue el phone data phone computed phoneerr function thisphone return phone number entered return filters phonenumber function val return valreplace g filter strip character except alphanumeric hyphen error message code error shown nothing entered phone text box enter removed filter text box get empty immediately however empty entered given seems guess variable section computed filter modify value think solves problem execute methods", "num": "583", "d": "11/2014"}, {"title": "dynamic select options improvement", "body": "hi using new attribute works ok introduces unnecessary processing must done use mean get form server list objects wish display select element likely object structure something completely different right must loop thought list create helper array appropriate object format used options parameter would suggest another annotation specify path original list returned server mapping properties example think", "num": "582", "d": "11/2014"}, {"title": "addchild missing docs", "body": "guide component system gt scope inheritance mention instance method called method missing instance methods api reference", "num": "581", "d": "11/2014"}, {"title": "event callback called twice", "body": "write select component jsfiddle change dropdown list childchange called selectcomponent parent vm reference console log expected callback function called parent vm", "num": "580", "d": "11/2014"}, {"title": "vmodel contenteditable longer works", "body": "appears longer use vmodel contenteditable element assume indented since longer appears guide either probably included changesmd plans reintroduce", "num": "579", "d": "11/2014"}, {"title": "recommendation directives able support object format like vwith", "body": "current usage html troublesome many styles much computed html mockup able input format think better clearly html js data style top px left px margintop px", "num": "578", "d": "11/2014"}, {"title": "el option nt work vueextend", "body": "may completely missed something seems like new functionality option nt seem anything", "num": "577", "d": "11/2014"}, {"title": "handling exception watcher", "body": "hi little bit surprised computed value ignored happened exception evaluated intended behavior seems would helpful vuejs warns error manner detect something went wrong reading source code appears error message made output pget srcwatcherjs modifying catch e part missing something", "num": "576", "d": "11/2014"}, {"title": "child components nt get custom directive values", "body": "demonstrated tried keep variation close documented example possible difference custom directive private defined child vm whereas directive used parent vm template see jsfiddle", "num": "575", "d": "11/2014"}, {"title": "possible build jade vue loader webpack", "body": "like jade profilevuejade template profile user profile script moduleexports data function return msg hello current result fail", "num": "574", "d": "11/2014"}, {"title": "filterby noresult", "body": "hi wondering way test filterby filter return length data result", "num": "573", "d": "11/2014"}, {"title": "tables lists", "body": "know isnt really issue sure else put wondering anyone suggestions performance stand point paginated data row coloums front page better performance stand point place data table use delimited ul li list hope question makes sense tks", "num": "571", "d": "11/2014"}, {"title": "tables lists", "body": "know isnt really issue sure else put wondering anyone suggestions performance stand point paginated data row coloums front page better performance stand point place data table use delimited ul li list hope question makes sense tks", "num": "570", "d": "11/2014"}, {"title": "vrepeat vif seem work incorrectly", "body": "hello example movies titles add button pushed see fiddle", "num": "569", "d": "11/2014"}, {"title": "firefox compatibility issue", "body": "component chrome safari execute set method model directive changestatus firefox changestatus execute set method jsfiddle link", "num": "568", "d": "11/2014"}, {"title": "issue child component extend parent data", "body": "hi evan may please look child component ca nt got data parent \u5b50 vm \u53ef\u4ee5\u5728\u6a21\u677f\u4e2d\u76f4\u63a5\u4f7f\u7528\u6240\u6709\u7236\u7ea7 vm html js vuecomponent child template parentname new vue el parent data parentname dad \u7ed3\u679c\u4f1a\u8f93\u51fa dad via", "num": "567", "d": "11/2014"}, {"title": "recipe directive filter pagination", "body": "reworking old app page page use vuejs pretty successful recently began working new page came problem searchpagination search well handled directive pagination code ran significant performance issues compared current backbonemanual render page simple paginated list search bar top like ask idiomatic way vue something needs implemented library efficient maybe change take start end index example need create slices case would great document examples section one sample projects recipes section docs like gulp thanks great tools far javascript var perpage return new vue el applicationwrapper template require customersearchhtml data searchtext pagenumber array objects customers customers methods previouspage function thispagenumber return thispagenumber nextpage function thispagenumber mathceil thiscustomers perpage return thispagenumber gotocustomer function customer windowlocation customers customerid filters paginate function list var index thispagenumber perpage return listslice index index perpage", "num": "566", "d": "11/2014"}, {"title": "conflicting method data names", "body": "sure real issue figured mention either way method name data property conflict weird way method call works first nt example html name fiddle", "num": "565", "d": "11/2014"}, {"title": "enhancement supply list classes vclass", "body": "currently possible pass space separated list classes vclass potential add variant objectkey syntax allowing dynamic list class names instead example js new vue el shell html fiddle", "num": "563", "d": "11/2014"}, {"title": "key filter nt cancel key events", "body": "example triggers dosomething enter cancels default events like tabbing another input", "num": "562", "d": "11/2014"}, {"title": "ready hook called used together vif", "body": "create component using directive together hook called js var ready spy var parent new vue template data showprofile false components userprofile template user profile ready ready parent mount parent appendto documentbody parentshowprofile true vuenexttick function assert readycalled", "num": "561", "d": "11/2014"}, {"title": "could write opposite vcloak", "body": "instead hiding loading revealing", "num": "560", "d": "11/2014"}, {"title": "lazy nt work expected", "body": "use colorpicker colorpicker binds values directly input fields input event updating values tried lazy attribute nt work trigger change nt work confused documentation attribute documented release notes says lazy removed would appropriate solution", "num": "559", "d": "11/2014"}, {"title": "textarea placeholder set textarea value", "body": "weird behavior textarea vue textarea value taken placeholder attribute results browsers work fine", "num": "558", "d": "11/2014"}, {"title": "error geting undefined array item property", "body": "array involved getting undefined item property results error suppressed get numbers name uncaught typeerror read property name undefined", "num": "557", "d": "11/2014"}, {"title": "key filters", "body": "really like mousetrap captures window keypress events like add aliases filter ca nt see tidy way got private dictionary special filter takes handler function wraps gets triggered specific keypresses von param string key var keycodes enter tab delete left right esc exportskey function handler key handler return var code keycodes key code code parseint key return function e ekeycode code return handlercall e wonder would reasonable registerkeycode etc method since seems like something people might want extend often", "num": "556", "d": "11/2014"}, {"title": "vue component bind existing dom elements", "body": "create vue component without defining template bind component existing dom element expect idea", "num": "555", "d": "11/2014"}, {"title": "input type number model behave weird", "body": "model added number input zero ca nt deleted anymore also problem entering numbers accepted", "num": "554", "d": "11/2014"}, {"title": "vif vrepeat seem work incorrectly", "body": "hello condition returns true anyway", "num": "553", "d": "11/2014"}, {"title": "new function expr remains csp branch", "body": "line causes csp violation error", "num": "552", "d": "11/2014"}, {"title": "changing input value via filter spoils native change event", "body": "problem occurs apply changes input value via filter write something inputs focusout try inputs", "num": "551", "d": "11/2014"}, {"title": "requirejs example", "body": "enhancement would possible provide commonjs example requirejs instance learning use vuejs bit lost nested components events triggering system parent element catch events emitted components maybe example would help understand good ways tips start writing reusable components commonjs", "num": "550", "d": "11/2014"}, {"title": "filter\u7684\u65b0\u9700\u6c42", "body": "vuefilter func function x return x data b b filter\u53ea\u63a5\u6536\u4e00\u4e2adata\u4e2d\u7684\u53c2\u6570 func b gt filter\u7684\u53c2\u6570\u4e0d\u80fd\u52a0\u5f15\u53f7 func b gt b func b \u53e6\u5916\u60f3\u5230\u8c03\u7528\u5168\u5c40\u7684\u51fd\u6570\u800c\u4e0d\u4f7f\u7528data\u4e2d\u7684\u6570\u636e\u8be5\u600e\u4e48\u505a \u6bd4\u5982\u6211\u6709\u4e2a\u591a\u8bed\u8a00\u7684\u6a21\u5757\u8981\u7ffb\u8bd1 windowtr ab data ab ab", "num": "549", "d": "11/2014"}, {"title": "", "body": "\u8fd9\u4e2a\u9501\u5c4f\u540e\u6253\u5f00\u4f1a\u5931\u6548 \u8fd9\u4e2a\u9501\u5c4f\u540e\u6253\u5f00\u6b63\u5e38", "num": "548", "d": "11/2014"}, {"title": "vwith could used without vcomponent", "body": "vwith could used without vcomponent often helpful specify scope vwith dom element case nt want create vcomponent used", "num": "546", "d": "11/2014"}, {"title": "question inheritance", "body": "subclass call name functions base class like java", "num": "545", "d": "11/2014"}, {"title": "ready mount", "body": "use mount without giving element get empty div el since even adding div dom ready callback get called invoke regular lifecycle mounting", "num": "544", "d": "11/2014"}, {"title": "accessing initial data provided component", "body": "access initial data passed component need compilation exact add items array hook described hook called data observation access data tick html js vuecomponent foobar created function log prints object branch way thanks", "num": "543", "d": "11/2014"}, {"title": "vrepeat pagination", "body": "hi issue pagination following code view works fine problem works page loaded want items vrepeat update appuserlistpages value updates", "num": "542", "d": "11/2014"}, {"title": "currency filter issue", "body": "present next", "num": "541", "d": "11/2014"}, {"title": "components duplicating vif vue", "body": "template html close name try update root variable duplicates component html js fiddle see anything dumb bat switch works expected html close name items clicked creating multiple detail components name jsfiddle", "num": "539", "d": "11/2014"}, {"title": "vmodel broken setting value afterward", "body": "jsfiddle input second example named broken use method working fine therefore sure bug", "num": "538", "d": "11/2014"}, {"title": "transitioned elements lose", "body": "see codepen", "num": "536", "d": "11/2014"}, {"title": "feature request method recalculate objects based dom", "body": "short version would great method would recalculate current state binded objects based dom long version using third party dom manipulation libraries like jqueryui sortable alter dom vue nt know something changed libraries nt trigger events vue listen keyup change etc currently developer must manually traverse dom update data binded vue object keep sync dom would great method existed inform vue dom change happened nt able track vue could recalculate data binded objects based new dom structure", "num": "535", "d": "11/2014"}, {"title": "replacing reference observable array", "body": "trying keep data somewhat separate viewmodels setting assignment like replace array dom update example however working updating using work javascript var services", "num": "534", "d": "11/2014"}, {"title": "undefined method trying use plugin", "body": "hi evan another issue vue constructor passed first parameter plugin function include method plugin api changed ca nt find anything thanks", "num": "533", "d": "11/2014"}, {"title": "objectkeys called nonobject filter", "body": "hi evan switched trying implement simple filter using immediately get error comes scopejs method guess related slice returning native array vs vue augmented array could make work thanks edit okay dug noticed using filter way apply filter repeated value rather list manage filter", "num": "532", "d": "11/2014"}, {"title": "multiple insertion points undesired behavior", "body": "seems like whenever two tags inside component template must either replace else original show selectors replacement specified consider following template html progress uploading files properly register component using attempt block disappears provide replacement instead falling back markup specified original template please confirm desired behavior imo would make sense selectors replacement specified changed original template remain intact rest pieces would happy prepare jsfiddle need best agon ps working vue makes difference", "num": "531", "d": "11/2014"}, {"body": "case try setting makes rendering synchronous easier use jquery additional dom manipulation", "d": "11/2014"}, {"body": "intended change probably explicitly documented basically markup parent template compiled parent scope includes directives written component node content going transcluded example resolved component instead current release bug compiles directives twice parent scope child scope therefore throws warning directive still works fixed soon", "d": "11/2014"}, {"body": "oh falling though cracks understand well work next release since use vue always attached components settings directives owned component change surely brake workflow give basic example custom component pass many options like callbacks even video path thoughts could achieve thing without hacking around child references", "d": "11/2014"}, {"body": "recommended interface component using encapsulate directive usage inside component using reasoning behind thing parent component needs know child component basically syntax sugar passing data", "d": "11/2014"}, {"body": "tricky get right making working properly twoway binding would bloat vue considerably usually recommend using standalone lib specifically designed eg mediumjs", "d": "11/2014"}, {"body": "ecmascript way detect new property addeddeleted vuejs nt dirty checking like angular afaik need manage add delete sure best way write seems working", "d": "11/2014"}, {"body": "works great indeed thank", "d": "11/2014"}, {"body": "using select options known issues use param", "d": "11/2014"}, {"body": "demo see events console", "d": "11/2014"}, {"body": "nt think good way implement want item component child component general directly watching index recommended", "d": "11/2014"}, {"body": "hmm sure many people still safari ios", "d": "11/2014"}, {"body": "safari windows xx", "d": "11/2014"}, {"body": "sadly nt even machine test version safari hate say nt think support browser given rare", "d": "11/2014"}, {"body": "original group objects nt property observed therefore changing wo nt trigger updates use builtin filter need make sure every group object property default observed", "d": "11/2014"}, {"body": "ok add property compiled works possible filter pass one parameter example vrepeat childgroup groupchildgroups filterby", "d": "11/2014"}, {"body": "pass multiple arguments filters builtin accepts one search string either write filter chain multiple filters", "d": "11/2014"}, {"body": "ok thanks", "d": "11/2014"}, {"body": "sorry got vuecomponent similiar functionality", "d": "11/2014"}, {"body": "pass instead define child component maybe nt need component", "d": "11/2014"}, {"body": "sample example case complicated add inherit true child component work anything wrong codes", "d": "11/2014"}, {"body": "use longer need use reference parent scope properties directly", "d": "11/2014"}, {"body": "ok got thanks", "d": "11/2014"}, {"body": "thanks indeed correct behavior also glad know improving performance app", "d": "11/2014"}, {"body": "ok got right way solve kind case creating component scratch base component extend data extremely useful cases", "d": "11/2014"}, {"body": "oh mean expected behavior correct one fixed", "d": "11/2014"}, {"body": "hmmm seems like one mixin listed component definition adding new keys object data function work take look piece code js var firstmixin data function return sortable cursor move var secondmixin data function return sortable handle handle var mycomponent vueextend mixins firstmixin secondmixin new mycomponent mount app tried dev branch", "d": "11/2014"}, {"body": "yeah merging merges toplevel properties nt merge recursively made recursive commit", "d": "11/2014"}, {"body": "w e e ps unrelated issue might another bug maybe tried logging sortable using throws message bug possible log keypaths observed", "d": "11/2014"}, {"body": "agonbina indeed fixed", "d": "11/2014"}, {"body": "problems worked correct confused different", "d": "11/2014"}, {"body": "vue uses asynchronous dom updates updates batched executed next frame via guarantees called dom updated watchers also fired async however option watchers registered directives compiled called directives update dom call directives compiled called dom updates alternatively set disable async updates", "d": "11/2014"}, {"body": "looks like related already solved", "d": "11/2014"}, {"body": "yeah fixed latest commit", "d": "11/2014"}, {"body": "one fixed right tested problem still occurs", "d": "11/2014"}, {"body": "nah nt check build files branch build", "d": "11/2014"}, {"body": "well built still focus blinking hell", "d": "11/2014"}, {"body": "amendment still blinking complex form fiddle blinking dig little thanks response", "d": "11/2014"}, {"body": "oh got problems occurs placeholders cyrillic russian symbols maybe others nonlatin symbols go like", "d": "11/2014"}, {"body": "looks like bug event placeholders cyrillic falsefires conditions example sometimes fires page load even input focused also fires even input focused without value changes probably placeholder fading one true cyrillic latin symbols overall function begins repeat circular begins change cursor position maybe bug remove following code focus blinking wo nt occur", "d": "11/2014"}, {"body": "hmm kinda control since like ie bug likely mistakingly firing events called even though value nt change using filters input elements safely remove code mentioned use custom build", "d": "11/2014"}, {"body": "sadly use filters inputs try come solution thanks", "d": "11/2014"}, {"body": "good news looks like fixed added focusouting input cyrilic placeholder browser returns funny numbers case interrupt handler everything works fine nt much testing maybe missed something", "d": "11/2014"}, {"body": "awesome thanks finding solution", "d": "11/2014"}, {"body": "reproduce issue jsfiddle works", "d": "11/2014"}, {"body": "intended behavior merging results either child mutating parent data unpredictable ways child losing reference parent data parent data changes wo nt sync", "d": "11/2014"}, {"body": "see way provide default values incomplete models tried setting properties vm nt get turned observable values data bindings nt work seems unfortunate fully specify object map individual property currently", "d": "11/2014"}, {"body": "ready need order make new property observable", "d": "11/2014"}, {"body": "oh right thanks", "d": "11/2014"}, {"body": "thanks indeed bug fixed latest commit", "d": "11/2014"}, {"body": "cool thanks could include build commit", "d": "11/2014"}, {"body": "commit build files releases modify local copy according", "d": "11/2014"}, {"body": "works like charm thanks", "d": "11/2014"}, {"body": "components isolated scope default read part guide", "d": "11/2014"}, {"body": "thanks data inheritance seem appropriate creating child instance markup hence trying use two features together think issue latter works advertised code document ready function windowapp views components windowappcomponentsnewsitem vuecomponent newsitem template title picture url photo windowappviewsmain new vue el main data news title title photo clownjpg markup returns warning document ready function windowapp views windowappviewsmain new vue el main data news title title photo clownjpg components newsitem template title picture url photo bug", "d": "11/2014"}, {"body": "second example", "d": "11/2014"}, {"body": "got thanks", "d": "11/2014"}, {"body": "try using attribute input element specify increasedecrease number click button", "d": "11/2014"}, {"body": "gapipro related problem try typing fahrenheit", "d": "11/2014"}, {"body": "ok see ignore suggestion", "d": "11/2014"}, {"body": "hmm contenteditable tricky use case nt recommend using directives inside suggestion use library specifically designed contenteditable eg mediumjs wrap custom directive", "d": "11/2014"}, {"body": "use case", "d": "11/2014"}, {"body": "something like use lodash", "d": "11/2014"}, {"body": "also useful extend new objecthash", "d": "11/2014"}, {"body": "nt think problem adding listeners nt everything directives", "d": "11/2014"}, {"body": "thought would handy add directives afterwards eg use vuetouch constant way probably right", "d": "11/2014"}, {"body": "use write filter", "d": "11/2014"}, {"body": "ok thanks", "d": "11/2014"}, {"body": "think solution comes inflexiblity eg data form array objects think preprocessing ok tradeoff need lot extract preprocessing function global utility nt think handled vue", "d": "11/2014"}, {"body": "ah thanks pointing added vuejsorg", "d": "11/2014"}, {"body": "ah thanks pointing added vuejsorg", "d": "11/2014"}, {"body": "thanks reporting fixed latest commit", "d": "11/2014"}, {"body": "yes removed problem contenteditable works simple situations try use something complex lot additional problems arise actually scope need work contenteditable suggestion use specific library eg wrap inside custom directive add changes doc", "d": "11/2014"}, {"body": "sounds reasonable maybe try pull request", "d": "11/2014"}, {"body": "ok", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "components actually works instantiate imperatively ie default values use inside templates element mount component inline value override default value want replace element component mounted use", "d": "11/2014"}, {"body": "ah ok got thanks might worth clarifying distinction", "d": "11/2014"}, {"body": "project uses old option lot components nt think makes sense move template string think go modifying element instead", "d": "11/2014"}, {"body": "yeah intent suppress warning accessing something nt exist guess better explicit errors", "d": "11/2014"}, {"body": "interesting write directive parent template going compiled parent scope however directive found parent scope therefore fallback compiled child scope child isolated scope default ca nt access parent property might sound bit confusing solution either use child pass msg using", "d": "11/2014"}, {"body": "hm seems reasonable came another approach actual use case nt blocker thanks", "d": "11/2014"}, {"body": "error message get try using plain jade compile file see get likely syntax issue", "d": "11/2014"}, {"body": "nt got error message output exports format incorrect btw use templatehtmlloader compile jade html sure problem whether", "d": "11/2014"}, {"body": "different string content begin jade original vue file content vueloader js uid user profile moduleexports data function return msg hello got errors", "d": "11/2014"}, {"body": "hard say wrong without looking setup might want create cloneable repo current setup also nt think caused anything vue closing post questions vuejsdiscussions instead", "d": "11/2014"}, {"body": "need access filtered result either use custom filter computed property array", "d": "11/2014"}, {"body": "sorry nt get exactly build filter help situation main issue variable altered inside directive filter used however nt think writing custom filter return string result good approach gamename working result", "d": "11/2014"}, {"body": "see case use computed array", "d": "11/2014"}, {"body": "thanks works like charm", "d": "11/2014"}, {"body": "vue perspective minimizing number child vue instances created whichever uses fewer would performant", "d": "11/2014"}, {"body": "try changing template movie template documentgetelementbyid movie innerhtml seems working strings right", "d": "11/2014"}, {"body": "yeah thanks example also works vshow instead vif", "d": "11/2014"}, {"body": "actually caused fact vue compiled template reason skipped put template instead would work properly", "d": "11/2014"}, {"body": "looking frame source jsfiddle seems two body tags oevgeny code replaced everything worked fine", "d": "11/2014"}, {"body": "thanks answers guys clear", "d": "11/2014"}, {"body": "order events fire different orders firefox something vue control logically want react change property instead using click listener", "d": "11/2014"}, {"body": "ok thanks relay case different see watch status list", "d": "11/2014"}, {"body": "case listen instead", "d": "11/2014"}, {"body": "resolved thanks lot", "d": "11/2014"}, {"body": "work working encounter exception warning migrate advice thanks", "d": "11/2014"}, {"body": "upgrade change list", "d": "11/2014"}, {"body": "chinese guide outdated child components isolated scope default need use inherit parent data use explicitly pass data", "d": "11/2014"}, {"body": "performance issue probably caused paginate filter filter default searches every property recursively every update full depth walk every single one objects try replace custom filter checks specific fields want", "d": "11/2014"}, {"body": "tested hypothesis building actually pretty performant could probably improved somewhat taking away attribute two need search though however modify code search filter leave pagination way app actually quite sluggish creates new array reference objects memory sure look issue", "d": "11/2014"}, {"body": "many items displaying per page", "d": "11/2014"}, {"body": "edited original reflect working jsfiddle illustrate problem ca nt replicate slowness code pretty close exactly using two differences real app building table rows styled involved repainting happen real app following computed property place set directly onto data experiment since could cause issue", "d": "11/2014"}, {"body": "resolved vue backbonecollection causing big performance issue sure yet following offending bit pseudocode var data customercollection customersfetch return new vue el applicationwrapper template require customersearchhtml data extend searchtext pagenumber data computed customers function return thiscustomercollectiontojson", "d": "11/2014"}, {"body": "ok computed property reevaluated every time something changes means every time switch page calling tojson entire collection also probably want avoid including backbone collection vue data vue attempt observe entire collection causing tojson call inefficient collecting dependencies nt observe backbone collections nt see need use computed property", "d": "11/2014"}, {"body": "thought computed properties would reevaluated every time dependency computed property changed since never change collection figured would problem good know storing things vue thought could get away since view need interact eventually persisting data back server know probably store scope thanks", "d": "11/2014"}, {"body": "data properties methods set instance short answered nt use conflicting names", "d": "11/2014"}, {"body": "makes sense wanted make sure nt something insidious", "d": "11/2014"}, {"body": "html nt want", "d": "11/2014"}, {"body": "dang never thought much simpler first thought thanks xrado", "d": "11/2014"}, {"body": "ca nt reproduce make fiddle", "d": "11/2014"}, {"body": "closing inverting purpose vcloak", "d": "11/2014"}, {"body": "need use attribute element checkout doc", "d": "11/2014"}, {"body": "fyi works correctly vue", "d": "11/2014"}, {"body": "actually bug placeholder attribute cloned clone value set original placeholder implemented workaround vue template parser deal", "d": "11/2014"}, {"body": "awesome thanks", "d": "11/2014"}, {"body": "commit access map use install next branch", "d": "11/2014"}, {"body": "use return constructor already registered something retrieve id", "d": "11/2014"}, {"body": "got problem fix problem", "d": "11/2014"}, {"body": "using filters brings back problem", "d": "11/2014"}, {"body": "ok removed automatic type casting seems cause trouble convenience get rid issues undeletable zero input dots still one annoying behavior use filters invalid input erase whole input content unfortunately works input something invalid eg browser vue forces input value blank sense vue strictly keeping view model sync avoid using filters together", "d": "11/2014"}, {"body": "hmm vif never supposed used vrepeat actually console warning", "d": "11/2014"}, {"body": "ah missed one applying old csp patch fixed thanks reporting", "d": "11/2014"}, {"body": "tricky issue modify input value javascript unfocus wo nt triggered modifying value want using filter workaround would either use vmodel listen events instead", "d": "11/2014"}, {"body": "sorry nt get thing listen events instead could detailed mean already listening input change event mean use filters modify input value manually listening events instead", "d": "11/2014"}, {"body": "input elements also dispatch native events user modifies value", "d": "11/2014"}, {"body": "mean mutation dom events could give example please", "d": "11/2014"}, {"body": "simply although case callback fired get beforefiltered value maybe use instead", "d": "11/2014"}, {"body": "oh ok thanks sigh hoped filters make life easier handling forms seems wo nt case got cases like almost every form liveformatting input value already requires tricks make remove symbols buttons standing whitespace need make tricks think would smarter use something like jqueryplugn", "d": "11/2014"}, {"body": "hi floschieldbobby look link developed example component library boilerplate develop something else good luck", "d": "11/2014"}, {"body": "hi hwclass thanks lot take look right", "d": "11/2014"}, {"body": "requirejs uses amd rather commonjs however basic commonjs based example using browserify", "d": "11/2014"}, {"body": "missed examples sincerely sorry question thanks maybe would interesting merge official vuejs repo onlyone miss closed however", "d": "11/2014"}, {"body": "mentioned documentation site", "d": "11/2014"}, {"body": "\u8fd9\u79cd\u60c5\u51b5\u5c31\u4e0d\u8981\u7528 computed property \u554a", "d": "11/2014"}, {"body": "en ftr ftr ctr module text function tr module text return module text vuefilter ftr function text module return tr module text var vm new vue el demo data en english computed ctr function module text return tr module text", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "\u6211\u770b\u4e0d\u592a\u660e\u767d\u4f60\u60f3\u8981\u5e72\u5565 \u80fd\u4e0d\u80fd\u63cf\u8ff0\u5f97\u6e05\u695a\u4e00\u70b9", "d": "11/2014"}, {"body": "function tr module text return module text tr module text tr module en", "d": "11/2014"}, {"body": "jsfiddle \u7136\u540e\u8bf4\u6e05\u695a\u4f60\u60f3\u5b9e\u73b0\u4ec0\u4e48\u5427", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "\u8fd9\u662f ios \u7684\u4e00\u4e2a vue \u6ca1\u4ec0\u4e48\u5173\u7cfb sat nov cc notifications githubcom wrote \u8fd9\u4e2a\u9501\u5c4f\u540e\u6253\u5f00\u4f1a\u5931\u6548 \u8fd9\u4e2a\u9501\u5c4f\u540e\u6253\u5f00\u6b63\u5e38 reply email directly view github", "d": "11/2014"}, {"body": "\u6211\u7528\u7684\u662fandroid", "d": "11/2014"}, {"body": "\u8fd9 \u4f46\u662f setinterval \u8ddf vue \u4e5f\u6ca1\u6709\u5173\u7cfb\u554a sat nov pm cc notifications githubcom wrote \u6211\u7528\u7684\u662fandroid reply email directly view github", "d": "11/2014"}, {"body": "\u53ef\u80fd", "d": "11/2014"}, {"body": "data passing context shifting actually two different use cases like keep semantics consistent also makes implementation easier internally admit name bit misleading associated context shifting templates case vue maybe future add something specifically", "d": "11/2014"}, {"body": "officially supported actually super verbose code", "d": "11/2014"}, {"body": "\u4e16\u754c\u6700\u597d", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "make sure using instance dom methods like vue detect native dom manipulations", "d": "11/2014"}, {"body": "yep", "d": "11/2014"}, {"body": "directive data passed wo nt compiled specific reason need data instead", "d": "11/2014"}, {"body": "component template contains need expand initial array rendering component example passed like expand component responsibility specific case render component", "d": "11/2014"}, {"body": "fine expand later extra call update negligible", "d": "11/2014"}, {"body": "right behaviour makes sense knowing directive guess misinterpreted hook description thanks", "d": "11/2014"}, {"body": "masoodahm could watch changes appuserlistpages value broadcast event vm would manipulate data really sure entire app laid hard code specific use case", "d": "11/2014"}, {"body": "thanks brandon probably would solved problem however tried something else reading solution works post solution others learn thread deleted since problem resovled using variable vm like thispages forces filter called thispages updates solved problem", "d": "11/2014"}, {"body": "close want discuss open new issue vuejsdiscussions repo", "d": "11/2014"}, {"body": "thanks somehow missed porting old code", "d": "11/2014"}, {"body": "moved discussion", "d": "11/2014"}, {"body": "closing seems possible stated please reopen solution without using", "d": "11/2014"}, {"body": "reopening issue seems way observe new properties object sure good reason vuejs using method right ca nt figure", "d": "11/2014"}, {"body": "available chrome polyfill uses dirty checking inefficient vue observation mechanism nt detect properties added directly setting must use order vue pick change", "d": "11/2014"}, {"body": "thanks reporting caused change transition implementation components transitioned destroyed transition finishes", "d": "11/2014"}, {"body": "interesting app state changes transition see things changing element transitions anyway disconnect data bindings transition starts", "d": "11/2014"}, {"body": "latest commit fixed", "d": "11/2014"}, {"body": "much better thanks however event listeners still seem listening registered object initiation", "d": "11/2014"}, {"body": "currently directives locked dom updates happen transition events expected work component destroyed event listeners breaking logic reason", "d": "11/2014"}, {"body": "using routing route changes data events get fired data changes leads intercomponent communication starts getting messy removing makes everything work well haha going continue without transitions", "d": "11/2014"}, {"body": "reworked bit work like except called transition finishes also let know causes happen", "d": "11/2014"}, {"body": "awesome seems working great", "d": "11/2014"}, {"body": "feature interesting anyone would love hear feedback good bad", "d": "11/2014"}, {"body": "might useful case described nt think belongs core maybe could live plugin", "d": "11/2014"}, {"body": "consider example changing variable pointer property vm wo nt get picked however wrap services array object", "d": "11/2014"}, {"body": "thanks", "d": "11/2014"}, {"body": "deprecated yeah missed change doc internal utils directly accessible", "d": "11/2014"}, {"body": "woo sweet closing", "d": "11/2014"}, {"body": "make fiddle filter accept argument mean repeated value rather list", "d": "11/2014"}, {"body": "fixed fault sorry details nested component getting inside vrepeat filter applied correctly forgot put key instead triggered weird error", "d": "11/2014"}, {"body": "hmm yeah seems bug jsfiddle would helpful", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "fixed thanks", "d": "11/2014"}, {"body": "awesome thanks", "d": "11/2014"}, {"body": "first think explicitness actually better referring upscope property latter even sure scope chain falls back also three nested levels data property name probably need rethink design second starting components isolated scope default inside component think scope component alias component inside nt make sense", "d": "11/2014"}, {"body": "ok turns documentation wrong pluralize filter include number self requires least one argument", "d": "11/2014"}, {"body": "general good idea make computed properties depend data components computed properties evaluated first time child components even created yet might want consider dispatching events child components lifecycle hooks", "d": "11/2014"}, {"body": "seems work lists lists within lists try modify make work submit separate issue would nice method would return current state binded object based dom", "d": "11/2014"}, {"body": "created feature request would understand nt want add wanted submit case someone else wanted add make plugin", "d": "11/2014"}, {"body": "ended something similar vuehackernews project", "d": "11/2014"}, {"body": "reopened commit dev brings back issue behaviour seems great range inputs though", "d": "11/2014"}, {"body": "hmm reverting seems like bad idea", "d": "11/2014"}, {"body": "make special case", "d": "11/2014"}, {"body": "idea able things like example", "d": "11/2014"}, {"body": "would mind sharing point view merits particularities xradovuevalidator comparison kazuponvuevalidator", "d": "11/2014"}, {"body": "think largely syntax differences would nt one better one like better seems kazupon version supports moment", "d": "11/2014"}, {"body": "clear components isolated scope also think content scope parent see modaldialog example modaldialog component html confirmdelete component name retrieved confirmdelete component also ember components work", "d": "11/2014"}, {"body": "agreed nt implement requires tricky internal changes probably land", "d": "11/2014"}, {"body": "fixed latest changes branch", "d": "11/2014"}, {"body": "hmm excitement actually testing safari issue still exists chrome", "d": "11/2014"}, {"body": "nt work inside another", "d": "11/2014"}, {"body": "solve problem latest vue", "d": "11/2014"}, {"body": "recommended way still use custom directive view management want finest control", "d": "11/2014"}, {"body": "ok worked fine btw get access templateparser writing custom directive", "d": "11/2014"}, {"body": "hmm currently way open next release", "d": "11/2014"}, {"body": "stumbled upon vuejs nt really grasp idea vuejs fits mvvm paradigm first sight little mere viewtoproperties binding engine expect mvvm implementation allow write custom code viewmodel eg combine data multiple form fields data available viewmodel properties update single property say inputs whenever edited like update property model achieved easily", "d": "11/2014"}, {"body": "codepainters", "d": "11/2014"}, {"body": "meant actually way around never mind usefulness silly example eg model view side assume declaring computed properties update single model property setters also perfectly valid scenario thanks", "d": "11/2014"}, {"body": "thanks updating site", "d": "11/2014"}, {"body": "something really liked polymer api name getterssetters filters might less pretty certainly explicit meaning always depends point view look dom model reason intuitively interpret point view dom remember meant way around point view model even getting used still causes doubt makes think doubts nt know still making changes api would great see adopted improved readability", "d": "11/2014"}, {"title": "multiple calls model set key deletes changed entry", "body": "call call call expected outcome actual outcome", "num": "3400", "d": "11/2014"}, {"title": "navigate space url triggers route even trigger false firefox", "body": "consider example javascript function var approuter backbonerouterextend windowapp new approuter backbonehistorystart log home route null proceed log click every click click make one small modification add space url navigate try find home route also start logged counter reset two every three clicks release testing latest firefox issue chrome could chrome maybe something encode spaces url sure though realize space character url first place behavior odd least documented ie navigate may behave expected urls containing spaces unsafe characters sure easy fix hope least documenting bug save developers time trying hunt", "num": "3399", "d": "11/2014"}, {"title": "backbone router route route events heard page render", "body": "scenario user hits url backbone route like something home route function called immediately construction router also get fired immediately construction router problem object properly subscribe two events page render user first went root url like went hashchange fired route events fired well objects system ability subscribe little code sample exposes mentioning nt make sense try explain better gist backbone wait fire events preferably next event loop cycle", "num": "3398", "d": "11/2014"}, {"title": "adding jscs", "body": "interest adding jscs help check inconsistencies backbone style", "num": "3393", "d": "11/2014"}, {"title": "backboneview submit events firing click events instead", "body": "based limited knowledge backbone seems unable add click events submit buttons also submit event", "num": "3392", "d": "11/2014"}, {"title": "backbonehistorynavigate strips slash", "body": "root set navigate see especially", "num": "3391", "d": "11/2014"}, {"title": "collection set uses unparsed attribute id determine uniqueness", "body": "due limitations backend api working model class whose id attribute generated method simply moving nested attribute top level fetching collection may contain models already exist collection normal circumstances set would expect models id merged together however work id attribute present unparsed json data see following code collection set l modelslength lt l attrs models attrs instanceof model id model attrs else id attrs targetmodelprototypeidattribute id duplicate found prevent added optionally merge existing model existing thisget id workaround mind override collection class although work fine feels bit unclean requires code duplication would consider moving parsing stage id check branches execution eventually parse model", "num": "3390", "d": "11/2014"}, {"title": "nickpjasongithubio tab opening everytime open firefox", "body": "hello today got home university opened firefox browser loaded homepage another tab opened web address keeps asking download install youtube video downloader extension want opens everytime open new window firefox anyway get rid thought would ask github way get rid asking firefox help forums", "num": "3389", "d": "11/2014"}, {"title": "unmatched filesystem mksquashfs", "body": "filesystem squashfs filesystem big endian version debian using unsquashfs firmwaremodkit using mksquashfs regenerate filesyatem find completely different filesystem unsqushfs mksquashfs", "num": "3387", "d": "11/2014"}, {"title": "backbonemodelsave problem large json", "body": "model trying save one nested array object objects schedule children anything beyond object array makes problem express server take seconds realize happened nt get model data nested children array works fine suggestion break json parts stream browser", "num": "3385", "d": "11/2014"}, {"title": "wraperror function overrides emptiness error callback", "body": "ajaxprefilter function watch global ajax errors show user catch error request globally ca nt know whether customset ca nt event match source function tostring ca nt get native wraperror function gon na get global error warning going like unexpected error standart errors know occur want save action get standart error like bad request show modal dialog user nt want set callback save fetch error", "num": "3382", "d": "11/2014"}, {"title": "doc page displayed incorrectly", "body": "displayed correctly due unescaped tag", "num": "3379", "d": "11/2014"}, {"title": "communicate modelcollectionviewetc type browser dev tools", "body": "see debuggerconsole child nt exactly help debugging robust something like possibilities could possibly part backbone core day", "num": "3377", "d": "11/2014"}, {"title": "documentfragment instead creareelement", "body": "create documentfragment instead default div element property el set think would usefull views uses templates", "num": "3372", "d": "11/2014"}, {"title": "using backbone without jquery", "body": "hello wanted see would need use backbone use jquery want use famous views trying decouple jquery backbone mostly using backbone models collections though may use framework view insert famous code wanted use models collections backbone would need order run successfully without jquery thanks", "num": "3371", "d": "11/2014"}, {"title": "incoherence different sort behaviour setting models collections", "body": "let assume collection sorted attribute called words model behaviour take one collection models attribute collection resorted event triggered well explained documentation collection behaviour take collection whole call passing existing model modified indeed resort collection trigger event refer following line intended imho would better either caused resort none", "num": "3370", "d": "11/2014"}, {"title": "false triggering routernavigate", "body": "browser ff hashchange true example routernavigate route jsonstring trigger false fire callback gethash function return uri encoded json value documentlocationhref equals original fragment browsers encodes locationhref", "num": "3369", "d": "11/2014"}, {"title": "history navigate replace true working", "body": "call route called fine inserted browser history go route click browser back button called option prevent", "num": "3365", "d": "11/2014"}, {"body": "believe correct behavior changed value left see", "d": "11/2014"}, {"body": "right changed attributes stored since last change call would get messy otherwise need track revisions life model every sync say fairly easy", "d": "11/2014"}, {"body": "sorry label spam phone github nt best labels mobile", "d": "11/2014"}, {"body": "hi chaimpeck thanks reporting unfortunately able reproduce using code tried latest chrome firefox master branch release would mind posting working example gistbinfiddle take look definitely problems encodingdecoding specific characters firefox would nt doubt smiley", "d": "11/2014"}, {"body": "backwards event fired call need listen ahead time js routeron route homeroute function consolelog route homeroute heard backbonehistorystart", "d": "11/2014"}, {"body": "ah yes true let follow application ideally call", "d": "11/2014"}, {"body": "seanstrom call last load order using module system js var backbone require backbone var get require get var require var require var assets require assets backbonehistorystart maybe make sense html backbonehistorystart", "d": "11/2014"}, {"body": "hmm interesting clears thanks thejameskyle similar note know calls callback sets route", "d": "11/2014"}, {"body": "using", "d": "11/2014"}, {"body": "oh misread question looking loadurl", "d": "11/2014"}, {"body": "yup saw well amazing help thank", "d": "11/2014"}, {"body": "nope thanks asking", "d": "11/2014"}, {"body": "jashkenas would okay adding simple style guide backbone underscore contributing docs needed clean commits past conform correct style pointed megawac read bunch old pull requests write something like", "d": "11/2014"}, {"body": "sure sounds fine forewarned one reads anyway going future commits look better", "d": "11/2014"}, {"body": "backbone builds top jquery events whatever works works nothing backbone", "d": "11/2014"}, {"body": "thank response nt think jquery would problem", "d": "11/2014"}, {"body": "fml", "d": "11/2014"}, {"body": "chemoish definitely correct browser behavior click event fire submit event click event would nt fire submit event might want search event bubbling works", "d": "11/2014"}, {"body": "take look master part", "d": "11/2014"}, {"body": "yep feature want thanks jridgewell", "d": "11/2014"}, {"body": "wrong forum try github support", "d": "11/2014"}, {"body": "filesystem unsqushfs mksquashfs pray null god", "d": "11/2014"}, {"body": "nt look like backbone try mailing list irc channel questions like", "d": "11/2014"}, {"body": "issue related xhr limitation backbone modelsave many nested elements", "d": "11/2014"}, {"body": "comments please thoughts buzzy english native language almost end working day sorry inappropriate ca nt get check global error processing ajax call error callback model never empty ca nt check whether error callback equal one prefilter one backbone", "d": "11/2014"}, {"body": "looks like docco bug might try opening issue repo meantime fix hand", "d": "11/2014"}, {"body": "docco user would info notify", "d": "11/2014"}, {"body": "robust something would end backbone core day real answer time goes js runtimes get better better inferring true name js variables", "d": "11/2014"}, {"body": "backbone view defined element potentially fragment multiple elements defined fragment instead would nt make sense would nt make sense would nt make sense importantly event delegation machinery would break", "d": "11/2014"}, {"body": "see page wiki", "d": "11/2014"}, {"body": "nt help anything problems set alternative defining everything requireconfig", "d": "11/2014"}, {"body": "question issues try mailing list irc channel", "d": "11/2014"}, {"body": "yes intended", "d": "11/2014"}, {"body": "jashkenas may ask", "d": "11/2014"}, {"body": "models entering exiting collection supposed sorted proper place adds removes models collection however inside collection collection ca nt know general case model changed properties need resorted arbitrary function application type particular models sort properties change want tell collection resort appropriate time", "d": "11/2014"}, {"body": "paging braddunbar probably nt want look yet another permutation probably duplicate question", "d": "11/2014"}, {"body": "hey chilikov would mind posting working example glad take look need example work otherwise often start assumptions nt match end wasting lots time checking something describing thanks", "d": "11/2014"}, {"body": "closed test case provided", "d": "11/2014"}, {"body": "documentation states update url without creating entry browser history set replace option reason experiencing happening setting replace current history entry instead inserting new one still history way put different url updated new entries created history info replacestate", "d": "11/2014"}, {"body": "great", "d": "11/2014"}, {"body": "saying changed idattribute property setting model", "d": "11/2014"}, {"body": "set define model nt change afterwards case attribute rest api uses queries save db set field", "d": "11/2014"}, {"body": "ca nt imagine changing line isnew really anything let take look monday back computer generally speaking nt using arbitrary strings resource identifiers autoincrementing id uuid given backend much better solution", "d": "11/2014"}, {"body": "ah used set modelcollection create consider bug feel free open pr test add back sat nov pm adam kre\u0185s krebsadam gmailcom wrote ca nt imagine changing line isnew really anything let take look monday back computer generally speaking nt using arbitrary strings resource identifiers autoincrementing id uuid given backend much better solution", "d": "11/2014"}, {"body": "tinkering backbone changing changing worked changing add collection model line referenced nt effect case believe working bug implementation would always return false set anything id method nt use add new attributes model sending backend design decision could fix probably change backend recommendation although try think way backbone relying id field check model new although good practice setting id client either letting user choose id generating one based client features useful many cases", "d": "11/2014"}, {"body": "create short jsfiddle problem set setting model attributes model property right value js var model backbonemodelextend idattribute uuid var model new model uuid modelid modelhas uuid true", "d": "11/2014"}, {"body": "although good practice setting id client either letting user choose id generating one based client features useful many cases really ever good practice even check availability ahead time user trivially break things fussing around console", "d": "11/2014"}, {"body": "sorry mixed versions old implementation checking would work passing modelsave jashkenas case behind scenes everything works database generated ids referenced ids interface user rest api use memorable names instead ids queries validated server execution user wo nt able change crucial field mess system using way indicating backbone field use api queries identify true id field", "d": "11/2014"}, {"body": "memorable names field true", "d": "11/2014"}, {"body": "implementation nt work new version backbone using made code shorter cleaner slug name url field build appropriate query string frontend parser backend think help features need build next", "d": "11/2014"}, {"body": "problem see fixed nt think wokes", "d": "11/2014"}, {"body": "think confused different problem instead conversion pushstate style url hash style url", "d": "11/2014"}, {"body": "docs say otherwise create method accept either attributes hash existing unsaved model object fine nt want support docs bug needs fixed", "d": "11/2014"}, {"body": "indeed bit reduplication logic nt see harm adding line sets collection reference either sat nov collin donahueoponski lt notifications githubcom wrote docs say otherwise create method accept either attributes hash existing unsaved model object fine nt want support docs bug needs fixed reply email directly view github", "d": "11/2014"}, {"body": "made pull request resolve bindtime trigger time resolution could nt something hacky like var extend backboneevents var b extend backboneevents asomeotherhandler function arg consolelog arg call asomehandler function arg thissomeotherhandler arg alistento b event somehandler btrigger event hello gt prints hello call asomeotherhandler function arg consolelog arg call btrigger event hello gt prints hello call", "d": "11/2014"}, {"body": "thinking idea allowing strings events hash necessary since defined statically ca nt since nt object alternative really fugly must called runtime instance nt face issues get string support would nt translate well called object leaving object method defined ambiguous get support nt break parity two sets think adds minimal gain adds complexity", "d": "11/2014"}, {"body": "allowing strings events hash necessary since defined statically would consider extending feature many users already several frameworks marionette thorax already add functionality event maps since nt object get string support would nt translate well called object leaving object method defined ambiguous quite works current form grabs method whatever object going executed behavior could easily changed nt seem right js var foo function var foo function foo foo gt foo foo gt could easily changed think adds minimal gain adds complexity change simply changing signature omit changes line change total size difference chars minified also little perf difference calls using strings", "d": "11/2014"}, {"body": "would consider extending feature many users already several frameworks marionette thorax already add functionality event maps statically defined since nt really necessary listen object events hash would still need method actually binding define functionality method akin delegateevents foo foo gt foo foo gt could easily changed ambiguity exactly nt like either way someone going want opposite functionality impossible support someone trip benefit explicit", "d": "11/2014"}, {"body": "would still need method actually binding following example gave works fine people already writing methods subtly inconsistent depending library using implementation ambiguity exactly nt like still nt said ambiguous always going method given context backbone event methods already default context object called impossible support someone trip would anyone expect work like", "d": "11/2014"}, {"body": "following mean defining hash nt actually bind anything something actually call put string method conversion would leave simple pass function give responsibility translating static context instance original point still nt said ambiguous context default ambiguity hash specify means runtime point trying make expect someone want functionality especially converting", "d": "11/2014"}, {"body": "adding complexity exact thing implementation context default ambiguity hash specify means runtime point trying make expect someone want functionality especially converting sounds like think ambiguity backboneevents currently decides context callbacks new problem introduced one case stringbacked callback always look context executed", "d": "11/2014"}, {"body": "ooo reason thought threw error passed events hash obj undefined either way still make responsible translating static context instance opposite sounds like think ambiguity backboneevents currently decides context callbacks confused nothing wrong mean saying object grab stringmethod ambiguous unlike passed directly following makes one case stringbacked callback always look context executed context third param want grab executed without context event triggers everything clear current fetching calling context event triggers makes even confusing method used listener gets accepted argue functionality always make even context param", "d": "11/2014"}, {"body": "confused nothing wrong well someone nt understand going called case also nt going understand would pulled nt anymore ambiguous gets accepted argue functionality always make even context param okay trying get stuckouttonguewinkingeye wondering would make sense could go either way similar implementation", "d": "11/2014"}, {"body": "think still getting issue even though adding outter scope separate scope marionette redefining scope would property defined", "d": "11/2014"}, {"body": "jisaacks scope would nt issue share common modules across files setting requiring marionette make available marionette check marionette depends version backbone app specific reason include call would make non issue agree behavior short time wrap jquery require dropped support browserify users personally like see brought back much rather support common case attempting load jquery commonjs count build tool allow exclusion option like browserify webpack rjs shim", "d": "11/2014"}, {"body": "scope would nt issue require share common modules across files setting backbone requiring marionette make available marionette thanks info helped agree behavior short time wrap jquery require trycatch right think downside strict requirements", "d": "11/2014"}, {"body": "treating jquery like dependencies current sudodependency approach causes significantly problems solves", "d": "11/2014"}, {"body": "indeed dgbeck origin problem jquery real dep makes everything gothchas plenty already said issue numerous issues", "d": "11/2014"}, {"body": "hi proof concept tried implement objectobserve first changed backbone build change object objectobserve callback extracted observe function iterates changes triggers appropriate change events finally registered objectobserve method called used previous observe function callback three implemented dedicated commits see browser without objectobserve test suite green everything seems ok browser objectobserve got one test failed try set object equal different instance objectobserve sees change triggers change event nt know fix efficiently without checking object equality suggestions think implementation thanks", "d": "11/2014"}, {"body": "passing order would think fire order changed think real problem order changing still fires nt agree problem firing instead removing maybe something like would better would fire changes fire nothing changed", "d": "11/2014"}, {"body": "fixed", "d": "11/2014"}, {"body": "closing favor", "d": "11/2014"}, {"body": "yeah retrospect wish stood ground one like revert add note wiki page", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "foxytasks use simple override change backbone behavior desired using override changes made set stored changedattrubtes save record fetched set default behavior add forgetchanges true option key value key value style arguments typeof key object attrs key options val else attrs key val options options silent optionssilent", "d": "11/2014"}, {"body": "bruth plan continue work implementing applying patches backbonemodel", "d": "11/2014"}, {"body": "skotchio simply using also mentioned granularity patch may applicationspecific one realizes think simple enough override generate patch set appropriately option passed", "d": "11/2014"}, {"body": "found little difficult implementing ajax queue backbone method generated save ie overriding queue requests would still issue two posts eg expected anybody found solution problem", "d": "11/2014"}, {"body": "richardscarrott use", "d": "11/2014"}, {"body": "philfreo gist would mean model set previous requests complete makes sense queue would handled sync models amp collections therefore views get job leaving sync worry persisting data background almost easily done nt fact sync method create update etc evaluated immediately", "d": "11/2014"}, {"body": "anybody interested managed solve problem optimisitcally setting models id parsing server generated id also meant queue could handled jquery level giving utility", "d": "11/2014"}, {"title": "observers controller removed transitioning another route", "body": "apologies bug code rather ember tried everything think get working made simple example observer transitions new route even though controller longer exist observer added continues fire also made stack overflow post fuller explanation", "num": "9762", "d": "11/2014"}, {"title": "foreach loop part computedfilter result", "body": "timeline model group model js export default dsmodelextend groups dshasmany group unread embercomputedfilterby groups isreaded false export default dsmodelextend user dsattr string timeline dsbelongsto timeline isreaded false nothing special except isreaded normal attr loop foreach unread expect item iterated items unread foreach find itmes wrong output chrom console", "num": "9761", "d": "11/2014"}, {"title": "ember application handling scroll events", "body": "tried bind scroll event example using code javascript app emberapplicationcreate customevents scroll scroll appapplicationview emberviewextend scroll function alert ember scroll document scroll function alert jquery scroll expected result alerts jquery scroll ember scroll scrolling jquery scroll confirming scroll valid event name event works general gets alerted", "num": "9753", "d": "11/2014"}, {"title": "globals resolver convert foobar foobar emberdata", "body": "allows emberdata globals users conventions cli users eases migration path", "num": "9751", "d": "11/2014"}, {"title": "map values keys property conflict features", "body": "move underscore someday add iterable versions", "num": "9747", "d": "11/2014"}, {"title": "ember unable run integration tests w ajax error", "body": "upgraded ember discovered integration tests exercise server errors broken tracked problem change heart problem promise hook failing install rejection handlers via however results triggered model promise rejected recent changes function ultimately result called cases might want cases really need way exercise server error logic without creating failing test emberruntimelibextrsvpjs jsbin demonstrates issue jsbin overriding ember ajax simulate status", "num": "9746", "d": "11/2014"}, {"title": "work component", "body": "change tagname see work elements", "num": "9745", "d": "11/2014"}, {"title": "tagname property work", "body": "use tagname property sure supposed work specify string tagname seems work layoutname templatename confused specify property tagname tag name always ends div whereas table", "num": "9742", "d": "11/2014"}, {"title": "emberselect update optionlabelpath change", "body": "image describes best markup associated cpanel account view select id associatedcpanel selectioncpanel contentcontrollersdashboardallcpanels optionvaluepath contentid optionlabelpath contentsitename ember handlebars edit may related", "num": "9740", "d": "11/2014"}, {"title": "perf array property changes coalesced reducecomputed", "body": "see jsbin array changes often large batches rely array property change coalescing performance issue dependent array elements property dependent property full array case iterates dependent values behaves fine far breaks however add resulting values click button see many times property gets called codebase equivalent expensive operation really would wanted expected run coalesced changes per runloop expected flow generated value yet computed values computed property computed ember appears recomputing thus forcing recomputes everything upto every array change operation thanks", "num": "9739", "d": "11/2014"}, {"title": "extending linkto", "body": "say want make helper called linktoresource would following resolve given model check type model call linkto helper params required adapted route pre ember beta following would work context switching version deprecated work anymore link node usage linktonode node linktonode import em ember var helper function fn var app emimportsapp var context fncontexts amp amp fncontextslength fncontexts var resource context var args arrayprototypeslicecall arguments var basepath emget app basepath var linkto emhandlebarshelpers linkto fntypes string id fncontexts argsunshift argsunshift basepath resourceget type tolowercase show return linktoapply args export default helper help make work", "num": "9738", "d": "11/2014"}, {"title": "emberrunbind docs confusing", "body": "function life saver nt seem documented well examples uses would really appreciate help getting docs updated", "num": "9735", "d": "11/2014"}, {"title": "inconsistent behavior view parameters view render helpers", "body": "stumbled across inconsistency regarding view parameters view render helpers please take look js bins ember ember see using view helper view parameters string foo value appbar properly rendered output using render first view parameter string foo rendered parameter appbar seems get lost somehow set default value defined messages view sure whether bug intended behavior seems kind strange", "num": "9725", "d": "11/2014"}, {"title": "uncaught error assertion failed error occured setting template bindings please check orders template invalid markup bindings within html comments", "body": "use add helper helper project need create dynamic collapse try insert key hbs", "num": "9724", "d": "11/2014"}, {"title": "exception thrown caught", "body": "happens beta", "num": "9723", "d": "11/2014"}, {"title": "performance issue related view rendering maybe sideloading", "body": "recently met performance issue project slow chrome modern browsers worse popup longrunning script warn user abort suppose post comment resources routes controllers models etc simple show templates like post template comment template posts post comment takes seconds render page gives warn tried use chrome timeline profiling find parsehtml event used almost mostly wasted function callback sub event xhr state change another function call callback xhr state change used almost post comment resources quit small less attrs like author createdat avatar etc using sidelining first time fetching data little json users posts comments images data cotains posts comments one two users images slow tried remove post template still slow never give longrunning warning try help sure help noticed stefanpenner grouphelper update sometime useful case ok put render another render suggestion performance tuning ember app thanks", "num": "9722", "d": "11/2014"}, {"title": "transitionto aftermodel object param causes infinite loop", "body": "route hook another route providing object param app locks infinite loop see image transition aborted previous route tries redirect straight back problem route use string value instead object value param works fine use hook instead hook work fine documentation appears recommend currently broken approach try jsbin done seems like bug happy start fix like direction needs change", "num": "9715", "d": "11/2014"}, {"title": "hi emberjs team plans port emberjs nodejs backend", "body": "idea think module likes rails model interface ember architecture accord modelviewcontroller mvc pattern use ember create mvc applications backend use pattern style frontend backend", "num": "9704", "d": "11/2014"}, {"title": "requirejs loads lib file rjs although", "body": "hi problem requirejs loads emberjs already included mainjs ran rjs optimization nt want load different embers problem require ember maybe config requirejs requireconfig shim ember deps handlebars jquery exports ember emberdata deps ember exports ds emberanimate deps ember modernizr exports modernizr lightslider deps jquery fancybox deps jquery paths app controllers controllers components components models models routes routes templates templates views views pxloader packagespxloaderpxloader ember packagesemberember emberanimate packagesemberanimateemberanimate emberdata packagesemberdataemberdata foundation packagesfoundationjsfoundation jquery packagesjquerydistjquery lightslider packageslightsliderlightsliderjsjquerylightslidermin modernizr packagesmodernizrmodernizr requirejs packagesrequirejsrequire swfobjectamd packagesswfobjectamdswfobject handlebars packageshandlebarshandlebars fancybox packagesfancyboxsourcejqueryfancybox rsvp packagesrsvprsvp packages config rjs fix nt load ember separately happen ember libs successfully loaded mainjs information debug ember debug ember data debug handlebars debug jquery", "num": "9694", "d": "11/2014"}, {"title": "htmlbars disabled tests", "body": "search code base following tests need fixed reenabled htmlbars", "num": "9688", "d": "11/2014"}, {"title": "htmlbars unbound working inside attributes", "body": "problem unbound helper inside attribute like works used output regular content outside attributes jsbin failing example cc twokul", "num": "9681", "d": "11/2014"}, {"title": "raw markdown customizing component element", "body": "last thing page rendered note binding functionality simple example could also implemented without use simply binding element attributes binding element class names presumably markdown expecting processed html", "num": "9671", "d": "11/2014"}, {"title": "htmlbars disable attribute hook", "body": "throw hook unless helper used", "num": "9667", "d": "11/2014"}, {"title": "enable asobject htmlbars compat mode", "body": "", "num": "9664", "d": "11/2014"}, {"title": "prod perf suggestion", "body": "microloader supports relative paths appears build tooling already resolves build time yet incur relative path resolution path constantly suspect likely removed cc chadhietala know work build related boot time improvements likely going nice little win little effort", "num": "9656", "d": "11/2014"}, {"title": "block outlet causes mandatorysetter trigger", "body": "pretty much gist jsbin demonstrating problem seems adds watcher property line executed triggers mandatorysetter exception", "num": "9654", "d": "11/2014"}, {"title": "emberhandlebarscompile within component", "body": "sure whether actual bug wrong decided post trying create component sets typeaheadjs getting error right tries compile using error points component content typeaheadjscomponent embercomponentextend didinsertelement self running thanks help", "num": "9653", "d": "11/2014"}, {"title": "input actionsomeaction onsomeevent regression", "body": "hello porting code ember yeah old ember using enter run ember works dont try bc", "num": "9645", "d": "11/2014"}, {"title": "onerrordefault needs improved jqxhr rejections", "body": "appears versions jquery errorthrown property may actually exist anymore", "num": "9644", "d": "11/2014"}, {"title": "nearestchildof returns parent view instead child", "body": "write test", "num": "9641", "d": "11/2014"}, {"title": "strange rendering ios", "body": "ember versions rendering correctly ios strange thing dom looks good renders correctly preview switching windows app demostagingfieldphonecom visible title reading demo plumbing electric viewed ios phone", "num": "9637", "d": "11/2014"}, {"title": "notes htmlbars release post", "body": "htmlbars expected branch beta litany things need consider explaining blog post time repo followers please consider guarantee even prediction behavior place notes issue locked keep us focused commit bit please edit description action performance improvements actions performance improvements provide background streams link resources implementations list benefits streams ember handlebars feature emberroutingfireactivatedeactivateevents feature embertestingpausetest deprecated context switching feature block params feature inline feature htmlbars attr syntax get bounding rects deprecate setting container childviews talk lack new syntax components attributes emberdev test helpers rwjblue deprecate handlebars helpers stuff deprecated quoteless outlet names", "num": "9635", "d": "11/2014"}, {"title": "allow using hidden toggling visibility", "body": "currently uses hide elements jquery add remove style attribute value defines hidden attribute serves purpose well better suggesting ember switch browser support nt strong still debate community attribute still like able easily patch ember let use complex css rules especially animations often easier write nt override properties set attribute two places tightly tied current implementation applyattributestobuffer togglevisibility one idea would extract two new helpers js applyvisibilitytobuffer function buffer get isvisible false bufferstyle display none toggleelementvisibility function isvisible eltoggle isvisible would easy monkeypatch support js applyvisibilitytobuffer function buffer get isvisible false bufferattr hidden true toggleelementvisibility function isvisible elattr hidden isvisible", "num": "9634", "d": "11/2014"}, {"title": "support dots json keys", "body": "emberjs doesnt seem support json objects dots objects attribute names eg mike omission overlooking something services required consume support namespaces way", "num": "9630", "d": "11/2014"}, {"title": "actions actionname binding binds undefined results much ewut", "body": "strange issue noticed emberperformance since deprecated interpreting literally emberperformance exhibited problem given action sent result absolutely wrong instead error thrown actually bound question error happen eagerly action triggered also suspect development mode assertion may caught earlier since bindings runtime data changes need production error well related", "num": "9621", "d": "11/2014"}, {"title": "embermap emberobject", "body": "reason consequence available work around composing object includes map would liked extend nonetheless", "num": "9620", "d": "11/2014"}, {"title": "create mechanism htmlbars functions replace handlebars ones", "body": "x x x x x x x x", "num": "9617", "d": "11/2014"}, {"title": "need htmlbars version emberhandlebarsmakeboundhelper", "body": "", "num": "9610", "d": "11/2014"}, {"title": "update packages htmlbars", "body": "ensure following packages use flagged htmlbars x x x x x x x x x x x x x x x ensure tests moved following packages x x x", "num": "9602", "d": "11/2014"}, {"title": "jquery subset instead whole thing", "body": "noticed since ember requires jquery entire javascript file included whereas view smaller subset functionality used would possible use abridged version jquery instead", "num": "9600", "d": "11/2014"}, {"title": "ember view attributebindings set attribute boolean true value", "body": "ember tested attributebindings defined view add given attribute view dom element value boolean ember code setting given attribute without value eg jsfiddle demonstrating issue check indexview jsfiddle sometrueattribute set jsfiddle sometrueattribute set change ember external resources works expected note seem affect classnamebindings work expected boolean values note sometrueattribute applicationview never set ember unless eg tagname input boolean attribute eg disabled true first issue reported emberjs read contributing guidelines case something missing wrong let know", "num": "9595", "d": "11/2014"}, {"title": "removing amd loader regression", "body": "eventualbuddha met today lists todos currently think needed remove regression mentioned ember transpiled bundle format need update microlibs depends use new transpiler involves updating brocfile use luckily majority microlibs compiled bundle format x update htmlbars x update routerecognizer x update routerjs x pull new versions microlibs update ember path resolution divide conquer opportunity x remove key words replace x update ember brocfile transpile using broccolicompilemodules cc eviltrout samsaffron", "num": "9588", "d": "11/2014"}, {"title": "observer triggering last iteration", "body": "issue observing collection using emberjs component highchartjs using component found issue association transactionruns runresult association nt loaded page loaded properly set labels bottom chart using observer see transactions transactionresults association changes given transactionresult runresult property know runresult name accessible odd always fails load last association included picture better describe issue help appreciated modelsrunresultjs javascript import ds emberdata export default dsmodelextend name dsattr string detail dsattr string type dsattr string starttime dsattr date stoptime dsattr date average dsattr number median dsattr number duration dsattr number standarddeviation dsattr number transactioncount dsattr number minimum dsattr number maximum dsattr number failurecount dsattr number errorcount dsattr number transactionresults dshasmany transactionresult async true failureresults dshasmany failureresult async true modelstransactionresultjs javascript import ds emberdata export default dsmodelextend runresult dsbelongsto runresult async true transaction dsbelongsto transaction async true transactioncount dsattr number average dsattr number median dsattr number standarddeviation dsattr number minimum dsattr number maximum dsattr number failurecount dsattr number errorcount dsattr number routestransactionjs javascript import ember ember export default emberrouteextend model function params return thisstorefind transaction paramsid function transaction return transactionget transactionresults function return transaction componentshighchartjs javascript import ember ember export default embercomponentextend chartoptions null series null controllerstransactionjs javascript import ember ember export default emberobjectcontrollerextend makeseriesbyattribute function attribute var attributes thisget transactionresults map function testrun return testrunget attribute var capitalizedname attributecapitalize return name capitalizedname data attributes templatestransactionhbs", "num": "9584", "d": "11/2014"}, {"title": "ca nt calculate queryparams controller loads", "body": "use case create faceted search widget array facets remote source store selected facet state queryparams problem nt know facet categories facetscontroller received data time late setup controller empty cachemeta property causes qpchanged throw typeerror nt lot good solutions looking either hard coding possible facet categories controller cause future headaches new facet categories appear else use queryparams saving facet state suggestions welcome thanks", "num": "9580", "d": "11/2014"}, {"title": "transitioning routemodel break queryparams cache", "body": "seems issue cached route transitioning route using model example using catch route entering second time cached found steps reproduce issue click zip click randomize bar randomize baz buttons notice params update accordingly click zam click randomize bar randomize baz buttons notice one update clear change model click index enter one routes update properly digging looks route caching specifically methods sticks initial setup route subsequent attempts stash cache use current path causing mismatch something tested verified using latest master release", "num": "9579", "d": "11/2014"}, {"title": "please add note changelogrelease notes emberassert take function", "body": "confusing error ember data testing canary branch something nt defined probably useful confused library authors like wondering scope binding method wrong inside emberobjectextend anywhere function gets called rather checking truthiness seems maybe worth drawing attention nt know many authors wild using", "num": "9575", "d": "11/2014"}, {"title": "ember bindattr modals", "body": "using foundation css framework fancybox modal app previous versions ember worked fine modal ember longer works update example js bin", "num": "9570", "d": "11/2014"}, {"title": "attribute bindings attribute name hyphenation inconsistent", "body": "result attribute element result attribute element feel behaviour consistent hyphenate cases someone agrees handle patch", "num": "9567", "d": "11/2014"}, {"title": "errors documentation emberroute", "body": "hi noticed documentation parameters method emberroute comply implementation model list parameters says type parameter string however object believe examples model passed indeed object controller similarly says parameter string however dig code see method still ok pass object parameter instead string see additional info use case want inject controller defined outlet basically want create new instance controller every time rerender outlet seems pass solely string new instance correctly created every time referencing seem work instead want manually create instance pass controller call insert stuff outlet", "num": "9566", "d": "11/2014"}, {"title": "rendering named outlet breaks subroutes rendering parents", "body": "sure whether found bug could nt figure observe happening looks like soon routes renders named outlet subroutes would nt render respective parent routes anymore main outlet application template created jsbin illustrates problem basically nested routes like templates look like handlebars application template outlet outlet special outer template outer outlet mid template mid outlet inner template inner without anything else everything works expected outer route renders application template mid route renders outer template inner route renders mid template soon render outer route application template special outlet though mid route nt render outer template anymore main outlet application template inner route still renders mid template maybe expected behavior could nt make sense", "num": "9565", "d": "11/2014"}, {"title": "emberselect could assert selection within content undefined", "body": "example shows problem faced ember data selection properly set try select object arrayproxy assert warning would helped lot debug would feel best raised selection value included content undefined cc igort", "num": "9563", "d": "11/2014"}, {"title": "ember breaks inserting", "body": "reduced test cases working working seems browse never even attempts get referenced script", "num": "9557", "d": "11/2014"}, {"title": "global lookup handlebars template deprecated", "body": "backend api call attributes named leading uppercase characters try use models template attributes named way get following warning browser console model attributes required start lowercase letter perhaps setting change allow", "num": "9555", "d": "11/2014"}, {"title": "embercomputedfilter crashes obsevring array", "body": "let start working demo app emberapplicationcreate var first emberobjectcreate name first id var second emberobjectcreate name second id appapplicationroute emberrouteextend model function return first second appapplicationcontroller emberarraycontrollerextend showonlywithids filteredmodel embercomputedfilter function item return itemget name property inside controller ids observed function line going use filter model wait ca nt typeerror itemget function nt understand item passed parameter callback", "num": "9554", "d": "11/2014"}, {"title": "htmlbars helpers", "body": "x x x x x x x x x x amp x amp x x x x x properties x helper lookup x x x x x x x x block form deprecation x", "num": "9550", "d": "11/2014"}, {"title": "render helper accept dynamic property first parameter though partial helper", "body": "pass dynamic template name call handlebars emberjs attempting create component filter table accepts runtime property specifies exactly template render looping collection objects code works fine using helper leverage dynamic property parameter first parameter passing property parent component like fails use helper call way like error gets logged console though seems separate issue inability set controller bindings render helper calls like describes two issues related intend debug look wanted see anyone initial feedback", "num": "9545", "d": "11/2014"}, {"title": "bindings capture changes unfocus", "body": "jsbin write something box hit button basically something programmatically changes value input ember nt notice user clicked text box comes things like autocomplete user clicks suggestion autocomplete list clicks submit ember still thinks partial value", "num": "9543", "d": "11/2014"}, {"title": "initial router transition entirely swallows errors", "body": "example following trycatch caches produces failed transition appears default nothing resulting white screen death cc machty", "num": "9542", "d": "11/2014"}, {"title": "components silently ignoring actions subscribed sent make debugging hard", "body": "possible solution components nt target set nt handle action sent throw following reopen embercomponent implements dropped app js import ember ember var get emberget embercomponentreopen send function actionname var args slicecall arguments var target var hasaction thisactions amp amp thisactions actionname", "num": "9541", "d": "11/2014"}, {"title": "anchor links throw error", "body": "currently anchor links work throw error console also try perform transition urls nt perform transition anchor tags basic html feature currently ember routes conflict feature people stackoverflow suggest using scrollto method unacceptable since emberrouter handle appropriately provide builtin workaround", "num": "9536", "d": "11/2014"}, {"title": "accessing view within helper broken", "body": "seeing strange behavior attempt access view elements within helper maybe expected looking changelog latest ember versions finding anything expect cause behavior toy template ember input field id correctly displayed label attribute set correctly ember rendering fails entirely uncaught error assertion failed call get inputfieldelementid undefined object ember page rendered input field id nt displayed label attribute nt set ember back behavior ember jsbins ember version ember ember ember ember expect happening behavior buggy fix put workaround get work correctly behavior expected missing correctly versions discovered attempting update application running", "num": "9535", "d": "11/2014"}, {"title": "arraycontrolleritemcontroller results inconsistent arrayproxy behavior", "body": "demonstration jsbin docs describe providing property result items wrapped instances jsbin demonstrates inconsistency loop contents three ways expected result method looping produces result actual result looping arrangedcontent directly loops models objectcontroller instances", "num": "9534", "d": "11/2014"}, {"title": "expose logic", "body": "behave differently specifically latter respects route views separate root views former falls logic would really helpful want know within helper main template inside cf", "num": "9528", "d": "11/2014"}, {"title": "update npm repo", "body": "really like able use recent version ember node via npm last commit package two years old hope updated", "num": "9524", "d": "11/2014"}, {"title": "reset bound properties", "body": "jsbin demo controllers properties bound component properties get reset calling eg binding value correct appropriate way overriding method like", "num": "9522", "d": "11/2014"}, {"title": "overwriting computed properties", "body": "would helpful kind automatically generated warninghint terminal overwrite computed properties standard variables example coffee aproperty gt return somevalue property somevariable aobserver gt thisset aproperty simple string observes something overwrite computed property purpose would silence warning either setting specific flag overwriting computed property declaring computed property overwriteable first place would prevent overwriting computed properties standard variables accident prevents long bug hunts", "num": "9518", "d": "11/2014"}, {"title": "ember data relationshipmetaoptions undefined", "body": "hiya iv tried updating ember received following error trying fulfill many one relationship relationshipmetaoptions undefined company many users appcompany dsmodelextend users dshasmany user appuser dsmodelextend company dsbelongsto company fixtures appcompanyfixtures id users appuserfixtures id logonid company query get user error occurs error callback finds promise guessing got something mapping relationships tried using inverse users dshasmany user inverse company gave error help would greatly appreciated cheers stephen also reopend fixture adapter deal queries", "num": "9517", "d": "11/2014"}, {"title": "ember testing xhr promise errors", "body": "failed xhrs trigger errors tests making fail using icajax jsfiddle believe change following current better way handle situation", "num": "9515", "d": "11/2014"}, {"title": "ember nt support view lookups views whose names nt end view", "body": "ember deprecated global lookups helper links builtin views guide example suggests view assigned reference template camelized however actually trying jsbin results deprecation warning error also work ways found fix add end name jsbin manually registering container neither mentioned views guide deprecation guide", "num": "9512", "d": "11/2014"}, {"title": "lack documentation around router events", "body": "example using events router object although events section router api docs well word", "num": "9511", "d": "11/2014"}, {"title": "top level loadingerror states working", "body": "trying get top level error states work app application route check account exists subdomain application accessed display error nt look like working added template amp route nt get displayed looking resolver logs see got naming correct nt get looked either clone machty original demo updated use ember fails way routerjs looks route called promise rejects application route defined looking route called router nt exist nt check templatecontroller adding route router manually assume nt required gets passes test fails different error jsbin modification added", "num": "9510", "d": "11/2014"}, {"title": "watching bound property component wo nt work firefox", "body": "jsbin example consists input field controller property value second component attribute watch bound controller property using component observer bound property fires js alert appears tried use show hide control depending another field value observer fires chrome safari firefox maybe something wrong suppose browserdependent bug", "num": "9509", "d": "11/2014"}, {"title": "rubygem built handlebars", "body": "using view select ember get following error handlebars configured use amd templates thrown line select view defaulttemplate calculated", "num": "9507", "d": "11/2014"}, {"title": "location auto base url redirect back", "body": "believe nt usererror jayphelps thoughts", "num": "9501", "d": "11/2014"}, {"title": "remove modelfactoryinjections", "body": "blockers normalizing model instantiation like injections", "num": "9500", "d": "11/2014"}, {"title": "component returning correct element", "body": "ca nt life reproduce jsbin able reproduce application code component looks something like gist toggle class element hides displays using css worked fine probably longer adding class element placed breakpoint action get pay attention two commands ran console element ember giving element dom class never gets added element dom far tell ember working identical element nt dom needs reproduced fix let know set demo code nt want post publically", "num": "9498", "d": "11/2014"}, {"title": "multiple propertydidchange triggering observers", "body": "see jsbin jsbin mimics behaviour reduce computed ember data console output see counter increasing decreases encountered issue working reduce computed counts number willchange didchange see line however sometimes receive didchange event causes flush changes especially ember data used", "num": "9497", "d": "11/2014"}, {"title": "broken routing ember due", "body": "using ember right wanted upgrade project step step ember upgraded routing got broken able transition route current context instead always get following error happens nested route want transition another route different resource let say userstodosfind transitioning via todostodosomeid users route throw error value though explicitly declared", "num": "9496", "d": "11/2014"}, {"title": "ember seems break html tags ie", "body": "giving ie try ember noticed layouts appeared broken inspected markup noticed html tags appeared selfclosing etc case ember toyed fairly extensively following examples effort thoroughly rule libraries loaded wondering addition metalviews could part issue see two jsbins ie compare ember ember ember note problem occurs inclusion foundation along respondjs rem unit polyfill simply illustrate problem clearly using grid system problem could seen application template simply contained header", "num": "9495", "d": "11/2014"}, {"title": "ember js remove view dom", "body": "created jquery ui wrapper per used modal dialogs code works fine ember see however upgraded ember modal dialog view longer removed dom see view seems destroyed ember dom element ember view id still exists bug code thanks", "num": "9487", "d": "11/2014"}, {"title": "dynamic segment value returned params attribute", "body": "given following routes definition creating route like fail since value notice access slug parameter accessing also notice emberinspector nt list route path confusing expected behavior always return dynamic segment values used given route sample reproducing issue", "num": "9486", "d": "11/2014"}, {"title": "ember computed sort fails contentindex property", "body": "created sorting based loop inside would like display index element unfortunately switching sort direction property breaks created demo initialization switching sorting order", "num": "9485", "d": "11/2014"}, {"title": "may uneede", "body": "reminder investigate", "num": "9482", "d": "11/2014"}, {"title": "ember initializers multiple apps", "body": "ca nt work use initializers multiple apps tried following appa emberapplicationcreate rootelement emberappa appb emberapplicationcreate rootelement emberappb appbinitializer initialize function container application application appa appb application initializer appb appa appb apart obvious problem issue want separate emberdata stores app store created emberdata initializer see take instance application appa case means wrong app workaround ember currently support initializers multiple apps", "num": "9481", "d": "11/2014"}, {"title": "ember metal views creates dummy list elements reorder", "body": "found strange issue upgraded application using jquery ui reorder list drag drop dragging element triggers change attribute using order list triggers repaint new version ember seems create copy element reordered inserts target position", "num": "9480", "d": "11/2014"}, {"title": "component classname bindings documentation example isurgent isurgent nt work", "body": "documentation components following example component would render following html really work ie isurgent true render isurgent classname however following works isurgent rendered whenever isurgent true link document using ember version", "num": "9476", "d": "11/2014"}, {"title": "global lookup issue", "body": "hi first say thank ember team latest updates seems promising starting test integration one ember app learned deprecation global lookup views making use global lookup outside views scope nt know convert case new way problem app bilingual implemented simple system manage routes depend first argument language eg order navigate add global property every helpers eg simple question supposed target tried put string ember nt seems resolve property writes currentlang straight string href sure still way thanks advance", "num": "9473", "d": "11/2014"}, {"title": "two way binding seem work specified", "body": "hi emberinos reading documentation section explains twoway bindings work tried code snippet left somehow get outcome documentation shows using ember javascript wife emberobjectcreate income husband emberobjectcreate wife wife income embercomputedalias wifeincome class wife class income aliasedproperty null nextsuper undefined embermeta husbandget income aliasedproperty altkey wifeincome dependentkeys array get function set function willwatch", "num": "9471", "d": "11/2014"}, {"title": "arraycomputed issues", "body": "ember data relationships multiple computedsort cps cause error iterdeps emberjs canary calls propertydidchange attributes used embercomputedsort sortablemixin work whole array changes typeerror embercomputedsort dependentarraysobserverprototypedependentarraywillchange ember computed sort fails contentindex property prs embercomputedsort observers fix reduce computed", "num": "9462", "d": "11/2014"}, {"title": "component templates behaves different ember", "body": "using component controlling behavior style radiobuttons css rule radio button requires image element sibling input element ember img element radiobutton components template becomes rendrered child element working example ember different behavior ember", "num": "9461", "d": "11/2014"}, {"body": "controllers nt destroyed transition new route stay long application running singletons one instance created application lifetime except controllers created case destroyed view destroyed", "d": "11/2014"}, {"body": "ah ok thanks lot makes sense", "d": "11/2014"}, {"body": "probably question asked stackoverflow careful iterating arrays going cause array mutated within loop body looks like setting isreaded sic causing unread array modified item ends removed unread array internal foreach loop counter skips next item hence exactly half items processed many possible solutions depending rest code would make jsbin post stack overflow question link question back", "d": "11/2014"}, {"body": "agreed thanks explaining ahacking", "d": "11/2014"}, {"body": "ahacking thanks used computed property works fine switched computed helper performance issue seems computed property computed helper much difference believe emphasized somewhere document realize difference", "d": "11/2014"}, {"body": "willing bet made applicationview scrollable fixed size scroll event would get fired looks like attaching scroll event two different elements event first attached application view document event attached second attached document one obviously scrolling recommend attaching scroll event document method application view really want listen documents scroll event", "d": "11/2014"}, {"body": "see updated test case although point valid realworld scenario ie actually need documents scroll event scroll event still gets fired example application view scrollable fixed height", "d": "11/2014"}, {"body": "looks case could workaround", "d": "11/2014"}, {"body": "even possible delegate scroll", "d": "11/2014"}, {"body": "nt bubble", "d": "11/2014"}, {"body": "scroll nt bubble ca nt delegated tl dr bubbling events handled embers eventdisptacher nt believe current architecture support via dispatcher need handled view view basis suspect assertion might ok gladly merge pr adds assertion someone tries use", "d": "11/2014"}, {"body": "believe bug fixed rsvp master maybe still pr basically wait till end turn consider report potentially un handled exception stil quite happy implementation may make debugging worse add hooks backburner rsvp hook", "d": "11/2014"}, {"body": "awesome thanks lot", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "thanks going let buy beer emberconf beers", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "mixonic expected bug", "d": "11/2014"}, {"body": "hmm setting classname jquery eladdclass nt work either likely browser thing jquery thing found workaround jquery perhaps use", "d": "11/2014"}, {"body": "ok case think regression still relying add classes point believe mixonic work resolve properly remove requirement use setting classes", "d": "11/2014"}, {"body": "ok wait htmlbars p thanks robert also work ember general greatly appreciated workaround perhaps help googlers issue", "d": "11/2014"}, {"body": "coming wire shooting htmlbars assuming get everything done next week", "d": "11/2014"}, {"body": "jquery friends use work svg beta use fallback gives us svg class support get new attr stuff weekend might time backport fix", "d": "11/2014"}, {"body": "yum", "d": "11/2014"}, {"body": "typeoneerror regression rerendering view tagname change may possible unsure performance implications observing supporting cp initial render maybe possible", "d": "11/2014"}, {"body": "rerendering view tagname change may possible unsure performance implications observing tagname supporting cp initial render maybe possible ever supported rerendering tagname change would like say nt said would like cp consultable initial render", "d": "11/2014"}, {"body": "ever supported rerendering tagname change believe said would like cp consultable initial render done", "d": "11/2014"}, {"body": "thanks rwjblue", "d": "11/2014"}, {"body": "bug seems like question", "d": "11/2014"}, {"body": "stefanpenner well know honestly previously could fetch modelresource perfectly ca nt since using noncontext switching forms", "d": "11/2014"}, {"body": "provide jsbin demonstrating issue make significantly actionable", "d": "11/2014"}, {"body": "apparently resolve value using", "d": "11/2014"}, {"body": "current documentation", "d": "11/2014"}, {"body": "problems occur setting attributes html elements directly instead using helper instead need instead working perfectly ember error message really helpful came accross issue weeks ago found root cause hope helps", "d": "11/2014"}, {"body": "herom thanks work new ember", "d": "11/2014"}, {"body": "herom sorry bother forgot write need pass href key say thanks", "d": "11/2014"}, {"body": "tried", "d": "11/2014"}, {"body": "herom bindattr helper support kind string interpolation templating malstrom create computed property use something like also work kind crazy template format never supported documents suggest using syntax doubt ever really worked sheer chance", "d": "11/2014"}, {"body": "sorry mixonic tell handlebar ember ca nt create dynamic collapse crazy", "d": "11/2014"}, {"body": "mixonic sure ever worked definitely worked ember smile", "d": "11/2014"}, {"body": "herom theoretically yes thing means handlebars yet ready make things advanced try resolve problem problem differently problem disabling work thank much herom", "d": "11/2014"}, {"body": "michaelvdheeren issue get detailed stack track click start debugging stop exceptions able get debugger issue occurs screenshot nt tell us much besides fact exception happened ca nt even see exception thanks testing beta", "d": "11/2014"}, {"body": "error assertion failed please check invalid markup bindings html comments strange nt raised browsers error thrown backburner", "d": "11/2014"}, {"body": "need check ember issue jumped betas", "d": "11/2014"}, {"body": "assertion error non specific able reproduce chrome guess indeed problem templates prevent app continuing", "d": "11/2014"}, {"body": "michaelklishin different browsers handle malformed html different ways new templating layer requires valid html htmlbars compiler used detect issues template compilation time", "d": "11/2014"}, {"body": "michaelvdheeren assertion happens bindings inside html comments need comments template must use instead new issue due rendering changes landed provide helpful assertion tell happening", "d": "11/2014"}, {"body": "going close seems issue invalid template", "d": "11/2014"}, {"body": "another guess view render problem related runloop sure find embercli put things js file vendorjs yourappjs", "d": "11/2014"}, {"body": "issue seems similiar case may code root case render", "d": "11/2014"}, {"body": "please provide running example either jsbin standalone embercli app demonstrating issue make specific issues actionable potentially quick work arounds fixes suggested noticed stefanpenner grouphelper update sometime useful case group helper essentially deprecated sidelining think mean sideloading try unbound help sure help help bit lots content unbound wont change individual properties change another guess view render problem related runloop nope currently must keep arrays rerenders cause render entirely rerender yes silly tricky problem lots work done view layer right help improve problem somewhat related krisselden ebryn spiked prototype efficient array diffing handle scenario whole array changes individual parts array allow naive usage still results good performance also based fact also posted emberdata issue tracker suspect using emberdata somewhat pathological relationship related performance issues emberdata igort fixes may compounding view rerendering issue", "d": "11/2014"}, {"body": "thanks reply stefanpenner typo use emberdata project created repo show problem template quite simple still post comments number arrive give long runing scrpit warnning hbs text comment comments commenttext repo seems performance really bad actions event complex view hierarchy simple plain output caused longrunning warning edit last line change mock post number", "d": "11/2014"}, {"body": "use neseted loops give warning see nonestedeach branch nested comment post post give warning well seems keep consistent good enough", "d": "11/2014"}, {"body": "awesome thanks example focusing lot performance use case demonstrates common problems", "d": "11/2014"}, {"body": "problem embercomputed help", "d": "11/2014"}, {"body": "fundon plans better spot kind qa probably", "d": "11/2014"}, {"body": "cibernox thanks look", "d": "11/2014"}, {"body": "notice occurs top guess elements inserted", "d": "11/2014"}, {"body": "yes right markdown syntax states note markdown formatting syntax processed within blocklevel html tags eg use markdownstyle emphasis inside html block mind opening issue", "d": "11/2014"}, {"body": "unbound helper used like result helper htmlbars beta run add proper attribute management escaping mut etc", "d": "11/2014"}, {"body": "already calling allow usage helpers attribute hook moment satisfy concern", "d": "11/2014"}, {"body": "yes record needs scheduled render queue", "d": "11/2014"}, {"body": "submitted ensure tests confirming using exposure today", "d": "11/2014"}, {"body": "stefanpenner believe tests added show htmlbars attribute hook equivalent security standpoint review test tests potentially suggest additional tests confirm closing issue", "d": "11/2014"}, {"body": "still needed dependencies mostall ember uses absolute paths", "d": "11/2014"}, {"body": "rwjblue ya moved away bundle chadhietala stuff make progress libs shed", "d": "11/2014"}, {"body": "stefanpenner still need resolve modules require runtime relative", "d": "11/2014"}, {"body": "definitely seems like bug sure would watching like", "d": "11/2014"}, {"body": "use instead returns template tailored ember view system", "d": "11/2014"}, {"body": "thanks martin tried first works development understand using handlebarscompile prod discouraged running embercli recommendation considering thu nov pm martin mu\u00f1oz notifications githubcom wrote use instead returns template tailored ember view system reply email directly view github", "d": "11/2014"}, {"body": "maybe make inline broccoli compiler accurate one repo", "d": "11/2014"}, {"body": "fivetanley replaced last night normal file based one repo original version", "d": "11/2014"}, {"body": "thanks fivetanley rwjblue also noticed nt recognize ember helpers guess using right thing give try", "d": "11/2014"}, {"body": "installing tried typeaheadjscomponent embercomponentextend didinsertelement self got pointing line jsbin original failing example ideas", "d": "11/2014"}, {"body": "problem use emberhandlebarscompile templates vanilla handlebars expected need precompile vanilla handlebars templates", "d": "11/2014"}, {"body": "wrapped typeahead save bunch time tell typeahead uses html want use linkto need watch value changes typeahead api", "d": "11/2014"}, {"body": "add jquery event listener documented javascript typeaheadon typeahead selected emberrunbind function jqevent suggestionobject nameofdatasetsuggestionbelongsto", "d": "11/2014"}, {"body": "see thanks suggestion fivetanley would great public place see wrapped typeahead", "d": "11/2014"}, {"body": "provide jsbin demonstrating issue please", "d": "11/2014"}, {"body": "jsbin enter event works embedded handlebars real app compile hsb js grunt script maybe handlebars compiler bug ember compatible handlebars maybe try use edit ups asleep sorry closed", "d": "11/2014"}, {"body": "handlebars", "d": "11/2014"}, {"body": "stefanpenner passed jquery ajax handle third parameter nt think exists error object", "d": "11/2014"}, {"body": "either used", "d": "11/2014"}, {"body": "stefanpenner guess used", "d": "11/2014"}, {"body": "stefanpenner might missing something according docs jqxhr nt", "d": "11/2014"}, {"body": "twokul must old version researched", "d": "11/2014"}, {"body": "return nearest ancestor whose parent instance supposed return parent ancestor case means instance", "d": "11/2014"}, {"body": "ahh yes name misleading sayin", "d": "11/2014"}, {"body": "provide information type phone need know architecture build ios", "d": "11/2014"}, {"body": "fails phones ios simulator passes phones ios simulator fails real iphone ios passes real iphone ios", "d": "11/2014"}, {"body": "arenoir thanks", "d": "11/2014"}, {"body": "sweet nt even know attribute", "d": "11/2014"}, {"body": "jamesarosen refactoring makes sense become public api needs go feature flagged release process", "d": "11/2014"}, {"body": "ember support assumes dot additional traversal deeper object", "d": "11/2014"}, {"body": "thanks stefan would recommend best approach dealing plans add kind support akin handllebars segmentliteral notation", "d": "11/2014"}, {"body": "familiar doubtful able support throughout framework short term suspect adding transform boundaries app take convert character yield quickest fix apparently nt come often run maybe worth considering holistic solution", "d": "11/2014"}, {"body": "thanks stefan handlebars documentation approach located nutshell allows access json using following syntax ndid namespace problem somewhat common major java web service frameworks xml json serializers default marshallingunmarshalling xml namespaces using dot notation outlined would really love see solution", "d": "11/2014"}, {"body": "suspect naively could add support templates get concerned edge cases bring weeks core team meeting", "d": "11/2014"}, {"body": "wonderful please keep informed", "d": "11/2014"}, {"body": "also recently come across issue think community could benefit greatly part framework", "d": "11/2014"}, {"body": "using something like able transform dotted dashed key vice versa", "d": "11/2014"}, {"body": "using something like serializer able transform dotted dashed key vice versa ya thought well would simplify problem keeping edges", "d": "11/2014"}, {"body": "key dotseparated path points repeated relationship example postsauthor think ember able read similar properties uses rest serializer read convert data model json api extracted json transport implicitly defined ember data rest adapter general ember data goal eliminate need adhoc code per application communicate servers communicate welldefined way", "d": "11/2014"}, {"body": "fyi deprecated bound prop fallback code removed htmlbars version action trivially possible fully streams based implementation", "d": "11/2014"}, {"body": "fyi deprecated bound prop fallback code removed htmlbars version action trivially possible fully streams based implementation understood leaves otherbinding become action name bindingtoundefined undefined sort error action invoked undefined name", "d": "11/2014"}, {"body": "polyfil map also nt emberobject", "d": "11/2014"}, {"body": "unnecessary sorry got angry question", "d": "11/2014"}, {"body": "xcambar absolutely confirm stefanpenner offended likely short time eloquent answer provided crux issue blocked wondering longer needed", "d": "11/2014"}, {"body": "unnecessary sorry got angry question truly sorry quick response came angry assure question entirely valid intent hostile way merely quickly triaging issues working hence short response going forward try ensure short comments contain emoticon displaying emotion text sucks lt", "d": "11/2014"}, {"body": "stefanpenner rwjblue thank clarification greatly appreciated", "d": "11/2014"}, {"body": "lt", "d": "11/2014"}, {"body": "adds public emberhandlebars api", "d": "11/2014"}, {"body": "closed", "d": "11/2014"}, {"body": "use minimal custom build version jquery want need choose correct subset", "d": "11/2014"}, {"body": "problem would know subset define future development would keep possible additions hoping kind folks ember might consider", "d": "11/2014"}, {"body": "non trivial much work done locks htmlbars effort continues likely move jquery requirements specific helpers better defined going close though nt bugissue moment", "d": "11/2014"}, {"body": "stumbled upon regression app uses foundation reveal closing works revealed modal attribute datamodal regardless value developed workaround regression setting value string like also love provide failing testcase soon figure run ember test suite provided jsfiddle demonstrates issue clear way hope", "d": "11/2014"}, {"body": "tried nail comparing tests emberview seems change intermediary object created result calling responds way methods boolean value attributebindings kept prop attr maybe way rendered changed somewhere", "d": "11/2014"}, {"body": "right got work really show regression turns applicationview never adds truevalue attributes ember work eg indexview jsfiddle sometrueattribute set jsfiddle sometrueattribute set", "d": "11/2014"}, {"body": "believe first issue come changed attributes dom node set pre set attributes jquery logic usually setting object property use boolean properties behave differently svg nt work quirky edge cases like behave differently htmlbars going force us come solution drop syntax probably continue lean toward talking dom attributes properties dom nodes regardless use properties internally sure bug fix wary spotfix boolean attributes maybe", "d": "11/2014"}, {"body": "wary spotfix boolean attributes maybe love file pull request could give starting point good opportunity learn inner working emberjs months writing apps", "d": "11/2014"}, {"body": "lt guys helping incredibly welcome", "d": "11/2014"}, {"body": "awesome looking forward change hopefully follow suit shortly thereafter discourse sat nov pm chad hietala notifications githubcom wrote eventualbuddha met today lists todos currently think needed remove regression mentioned ember transpiled bundle format need update microlibs depends use new transpiler involves updating brocfile use broccolicompilemodules update htmlbars tildeiohtmlbars update routerecognizer tildeiorouterecognizer update routerjs update ember path resolution divide conquer opportunity remove module key words replace import update ember brocfile transpile using broccolicompilemodules cc eviltrout samsaffron reply email directly view github", "d": "11/2014"}, {"body": "awesome excited nov pm chad hietala notifications githubcom wrote eventualbuddha met today lists todos currently think needed remove regression mentioned ember transpiled bundle format need update microlibs depends use new transpiler involves updating brocfile use broccolicompilemodules update htmlbars tildeiohtmlbars update routerecognizer tildeiorouterecognizer update routerjs update ember path resolution divide conquer opportunity remove module key words replace import update ember brocfile transpile using broccolicompilemodules cc eviltrout samsaffron reply email directly view github", "d": "11/2014"}, {"body": "many hugs lt", "d": "11/2014"}, {"body": "going try get routerjs pr done monday", "d": "11/2014"}, {"body": "chadhietala", "d": "11/2014"}, {"body": "eventualbuddha chadhietala awesome especially mobile builds smile thanks", "d": "11/2014"}, {"body": "stefanpenner machty updated build routerjs everything builds properly tests nt pass appear promise related trying bring rsvp via npm instead using version currently embedded repo sure compatiablity issues want look branch pushed run go kind broke grunt stuff", "d": "11/2014"}, {"body": "setting eg js setupcontroller function controller model thissuper controller model calculate qp value based model set qp controller controllerset myqp modelmyvalue", "d": "11/2014"}, {"body": "thanks helped move forward route able configure route queryparams inside init using technique see works controller report back thank", "d": "11/2014"}, {"body": "jgadbois please provide example demonstrating problem would good starting place", "d": "11/2014"}, {"body": "sorry fancybox foundation modal working jsbin", "d": "11/2014"}, {"body": "stefanpenner example note bound class", "d": "11/2014"}, {"body": "jgadbois seems like class gets applied correctly click items also errors trying load", "d": "11/2014"}, {"body": "twokul js nt load nt clicking modal", "d": "11/2014"}, {"body": "twokul updated jscss use cdn instead hotlinking sure assets nt load try link instead", "d": "11/2014"}, {"body": "jgadbois want use bind static css class like prefix instead use work see updated jsbin example", "d": "11/2014"}, {"body": "herom nt want static class case want bound", "d": "11/2014"}, {"body": "use bound attribute like works set property controller beforehand wo nt update bound property least nt get notified change seems like bug", "d": "11/2014"}, {"body": "herom use quotes bound attributes fact believe complicated class bindings like", "d": "11/2014"}, {"body": "jgadbois see thanks", "d": "11/2014"}, {"body": "herom great guessing something way modal manipulates dom worked fine older version ember using", "d": "11/2014"}, {"body": "stefanpenner remove unverified tag based jsbin", "d": "11/2014"}, {"body": "think current behavior correct use automatic attribute name get provide property provide actual attribute name use maybe api docs could improved make obvious", "d": "11/2014"}, {"body": "case way backed behaviour made non obvious originally property name camel case version attribute name automatic behaviour renamed property meaningful stuck new property name front old camel case binding obviously broke imo transformative consistency especially attributes case insensitive anyway camelcasing nt actually meaningful sense", "d": "11/2014"}, {"body": "endash definitely understand perspective land opposite sides believe override value provided used without modification purpose second value allow completely control final attribute name modification potential wrong recourse", "d": "11/2014"}, {"body": "agree rwjblue override control developers use camelcase attribute values like classnames always hyphenated would confusion", "d": "11/2014"}, {"body": "ember data issue", "d": "11/2014"}, {"body": "seems like regression", "d": "11/2014"}, {"body": "terryroe without actual template look knowing going bit odd ember method observer system template bindings deal capitalized strings different way holdover sproutcore ember using lowercase attributes definitely happy path less unexpected behavior ember capitalized object properties probably work way expect going close feel free reopen missing something", "d": "11/2014"}, {"body": "mixonic matthew thank quick answer nailed", "d": "11/2014"}, {"body": "grouping", "d": "11/2014"}, {"body": "rwjblue", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "mmun helper various views inside likely moved definitely worth list", "d": "11/2014"}, {"body": "emberhandlebars removing checklist", "d": "11/2014"}, {"body": "quick question happened helper syntax gist going write rfc figured would best float hopefully nt wasting time dredging anyhoo great job", "d": "11/2014"}, {"body": "timevans got ta support existing templates introduce new syntax nice bind attr syntax still works", "d": "11/2014"}, {"body": "mixonic great hoping hear think clearer talking specifically helper api going rewrite custom helpers", "d": "11/2014"}, {"body": "balloon fireworks", "d": "11/2014"}, {"body": "timevans existing helpers continue work htmlbars templates land says semver", "d": "11/2014"}, {"body": "whoops sorry", "d": "11/2014"}, {"body": "likely never implemented render helper though would consider bug inconsistent helpers hopefully unblock fixed likely accomplish trying using view helper need objects backed specific itemcontrollers also done enumerating arraycontroller overriding edit updated reflect approach", "d": "11/2014"}, {"body": "ahh yes jasonmit works nicely thanks detailed jsfiddle example", "d": "11/2014"}, {"body": "jasonmit yeah find strange caught guard actually thought something wrong untill found github issues", "d": "11/2014"}, {"body": "expected manually making updates must also trigger change suggestions remove requirement reasonable way", "d": "11/2014"}, {"body": "context would make sense refresh value passing action", "d": "11/2014"}, {"body": "would make sense refresh value passing action unfortunately unsure could implemented reasonable way said open ideas may overlooked nt think issue value expected bypassed mechanism dom across browsers ember supports informs js consumers changes future solution could using polymer esq mutation observer could used inform consumers regardless dom events unfortunately nt cross platform solutions suspect head would nt acceptable", "d": "11/2014"}, {"body": "guess actions thinking would bypass cache bust cache avoid possible issues changes weird", "d": "11/2014"}, {"body": "guess actions thinking would bypass cache bust cache avoid possible issues changes weird nt rely explicit cache instead situations dom pushes values ember via events", "d": "11/2014"}, {"body": "context seems sort cache like mechanism action passing last value dom told ember nt checking wed nov stefan penner notifications githubcom wrote guess actions thinking would bypass cache bust cache avoid possible issues changes weird nt rely explicit cache instead situations dom pushes values ember via events reply email directly view github calvin w metcalf", "d": "11/2014"}, {"body": "closed bug given current model said would like explore provide much context possible action passing last value dom told ember nt checking believe cache speak populated dom events informing us changes understanding given following hbs input valuevalue currently actions push changes dom bindings provide new data dom propose something like act consuming invalidate recompute pull dom inessense push changes dom pull changes dom sending action push data dom model seems pretty complicated given model collaborators shared context holds value makes available action likely controller component input value binding form action action consumes must first mark value dirty maybe something like unfortunately would currently cause think value stale must grab new one context would result input pulling contextvalue smashing away user changes thoughts follows divergence describe flow would dramatic data flow rule actions bindings still seems correct results simplest mental model rule dom must provide action propagate data eg change keyup focusout bindings actions works mutate dom way nt trigger action must also trigger required action operation work", "d": "11/2014"}, {"body": "guess thinking along lines user submits form want model state actual form modelsave form post assuming form fields model would come values eg submit causing happen", "d": "11/2014"}, {"body": "think leaks responsibility nonstandard component mutates input value directly also correctly trigger dom events prevents complexity bleeding across system edit autocomplete trolled", "d": "11/2014"}, {"body": "wrote would nt problem would nonember stuff interact thu nov pm stefan penner notifications githubcom wrote think leaks reprehensibility nonstandard component mutates input value directly also correctly trigger dom events prevents complexity bleeding across system reply email directly view github calvin w metcalf", "d": "11/2014"}, {"body": "stefanpenner machty capture errors transition initial router transition everything works fine broken", "d": "11/2014"}, {"body": "correctly preserves component isolation action subscribed requires upstream handler", "d": "11/2014"}, {"body": "annoying documented behavior sure change default semver compliant way", "d": "11/2014"}, {"body": "rwjblue documented behavior sender side receiver merely tightens experience improves ergonomics dramatically", "d": "11/2014"}, {"body": "someone subscribes action handle also target continue delegation bug code continues maintain component isolation merely raises awareness subscribed unhand led actions please note provides component isolation remains unchanged sending actions subscribed proposal changes receiver development assert", "d": "11/2014"}, {"body": "example given hbs componentahbs title someothercomponent action saveme clearly subscribed currently action emitted results silence intent absolutely clear subscribing notified merely completed contract patch provides us component isolation continues play given hbs componentahbs title someothercomponent subscribed continue remain isolated component target dispatch also remains correct given hbs componentahbs title someothercomponent action foo targetsomethingelse expected notified", "d": "11/2014"}, {"body": "stefanpenner agree action subscribed nt handle action assertion makes sense obvious code sorry initial quick response without stepping actual code question try dig land need tests confirm various edge cases", "d": "11/2014"}, {"body": "ya middle working add tests real pr work would like encourage consider bugfix beta plan discuss fridays meeting cc tomdale", "d": "11/2014"}, {"body": "direct parent view computed property first parent virtual examples virtual views views created simple property bindings routeable views without concrete classes etc flattening view hierarchy hides intermediate views example suppose rendering template virtual flattened want know within helper main template inside mean exactly main template template associated route leaf view partials components etc", "d": "11/2014"}, {"body": "issue linked public js function getrenderedname view var renderedname viewget renderedname js function getrenderedname view var renderedname viewget renderedname trying get topmost view hierarchy nt", "d": "11/2014"}, {"body": "seems like route views virtual", "d": "11/2014"}, {"body": "ah sound like solution", "d": "11/2014"}, {"body": "duplicate issue please search issues posting new one", "d": "11/2014"}, {"body": "working expected placed prototype means shared instances thus survive merely clears instances managed container nothing else", "d": "11/2014"}, {"body": "part reasoning behind stefanpenner spike exactly follow along", "d": "11/2014"}, {"body": "expected behaviour likely make readonly default", "d": "11/2014"}, {"body": "nice hear thanks lot looking forward thanks link nt know already discussed", "d": "11/2014"}, {"body": "believe using incompatible version ember data confirm version using", "d": "11/2014"}, {"body": "emberdata", "d": "11/2014"}, {"body": "required ember", "d": "11/2014"}, {"body": "coolio worked treat huge thanks stephen", "d": "11/2014"}, {"body": "issue due icajax rejecting promises synchronously instead async submitted pr back fix released update provided jsbin functioning properly linked directly github version icajax also going look updating rsvp ensure error notification happen early even initial promise rejected synchronously tracking update", "d": "11/2014"}, {"body": "awesome thanks", "d": "11/2014"}, {"body": "ember ember either missing something code sample mistake", "d": "11/2014"}, {"body": "working correct template syntax views must named correctly correct updates docs deprecation guide welcome missing something", "d": "11/2014"}, {"body": "guide wrong read", "d": "11/2014"}, {"body": "pretty sure reason nt correctly documented adding behind flag bring behind flag add declaration", "d": "11/2014"}, {"body": "good catch wagenet feature enabled default series may make sense add info", "d": "11/2014"}, {"body": "usage requires feature enabled feature flags specifically removed non canary builds nt really matter specified jsbin source confusion many people though thankful jayphelps got pr warns specify feature flag noncanary builds landed last night working version jsbin", "d": "11/2014"}, {"body": "firefox defined updated jsbin take look ultimately nt issue ember perse close issue absolutely sympathetic debugging nightmare nt think much make better", "d": "11/2014"}, {"body": "thank much quick response saved day also glad hear ember issue", "d": "11/2014"}, {"body": "ember need handlebars precompilation kind project using ember cli", "d": "11/2014"}, {"body": "using emberrails latest version updated barber updated handlebars template gives error inside ember project", "d": "11/2014"}, {"body": "exact ember version using least work correctly tandem handlebars", "d": "11/2014"}, {"body": "canary release gems would need canary release alpha already worked handlebars", "d": "11/2014"}, {"body": "right canary alpha enough restating blog post order facilitate users canary builds published alpha versions following template precompiler packages embertemplatecompiler published npm embersource published rubygems packages updated", "d": "11/2014"}, {"body": "sorry yall looks like gem packed incorrectly working", "d": "11/2014"}, {"body": "republished built correctly time rubygems", "d": "11/2014"}, {"body": "stefanpenner jsbin", "d": "11/2014"}, {"body": "rwjblue dont know", "d": "11/2014"}, {"body": "stefanpenner give full url example like ever causes nt yet follow issue", "d": "11/2014"}, {"body": "working repro speak", "d": "11/2014"}, {"body": "actualy jsbin screws adds url prefix", "d": "11/2014"}, {"body": "stefanpenner guess may caused fundamental inconsistent nature actually mean also differ currently know anything tag url contains nonroutable component needs set router reopen", "d": "11/2014"}, {"body": "stefanpenner happen set helps isolate", "d": "11/2014"}, {"body": "seems work fine vm expired fix continue debug try later week", "d": "11/2014"}, {"body": "stefanpenner give pseudo url context nonroutable path portion providing", "d": "11/2014"}, {"body": "information aware app hosted nt meta base href routable urls really forgotten location set failed redirecting worked fine rest history location aware browsers", "d": "11/2014"}, {"body": "stefanpenner assuming meant issue router concept smiley", "d": "11/2014"}, {"body": "baseurl specified router history mode appears picked", "d": "11/2014"}, {"body": "stefanpenner yes related embercli used indeed picked historylocation mentioned purely internal linking still needed anything one part confusion try adding pretty please sunflower", "d": "11/2014"}, {"body": "concept ember framework publicly picks tag undocumented broken manner embercli builds top seemingly unknowingly nt work one might expect since automatically set well", "d": "11/2014"}, {"body": "think embercli drop baseurl entirely merely rewrite asset urls needed right rooturl ember cares case seems work case", "d": "11/2014"}, {"body": "stef believe mean tag need able rewrite assets know host local dev server nov pm stefan penner notifications githubcom wrote think embercli drop baseurl entirely merely rewrite asset urls needed reply email directly view github", "d": "11/2014"}, {"body": "also fyi rickharrison working broccoliassetrev fix handling relative path images main blocker getting rid tag", "d": "11/2014"}, {"body": "many concepts likely fault confusing hell rwjblue yay sounds awesome", "d": "11/2014"}, {"body": "confirm also seeing issue browsers static cli application hosting application context root foo using hash library see requests go mysitecomfoo route mysitecom fooroute rooturl set foo router baseurl environmentjs", "d": "11/2014"}, {"body": "emberdata stores stuff constructors current subclassing mechanism injectable factories breaks emberdata current polymorphic setup potentially reasonable usercode maybe transition specialized factory object theoretically breaking requires much changing view layer specifically thiscreatechildview mega morphic signature list migration plan time", "d": "11/2014"}, {"body": "emberdata stores stuff constructors feel like could actionable immediately saying could try put stuff ember ember data meta class valid assumption", "d": "11/2014"}, {"body": "think tricky since cache various relationship things cp constructor caching important perf also pollutes constructor fixed todays extendprototypes true get new subclass test run unfortunately breaks current implementation polymorphism", "d": "11/2014"}, {"body": "fivetanley make sure discuss alternative storing metadata classes next ed meeting", "d": "11/2014"}, {"body": "perhaps factory returned container addition method could property access actual class used make instances useful informationalmetadata purposes make clear nt use create instances sure anyone would tempted expect correct behavior", "d": "11/2014"}, {"body": "made note bring next week", "d": "11/2014"}, {"body": "meaning javascript", "d": "11/2014"}, {"body": "stefanpenner great point uppercase c looks little weird lowercase c fine since use", "d": "11/2014"}, {"body": "tomdale ya safe modern browsers", "d": "11/2014"}, {"body": "currently ed lot places use modelfor mostly serializeradapter actually want class factory nt instantiate stuff lookup metadata", "d": "11/2014"}, {"body": "definitely seems odd probably pretty hard track without reproduction", "d": "11/2014"}, {"body": "figured much tomorrow try put together build code run without many dependencies also take one stab reproducing jsbin", "d": "11/2014"}, {"body": "come build reproduces problem run download archive extract run go upon loading page see something like clicking green checkmark display boxes like put breakpoint line see behavior described full source code component archive inside", "d": "11/2014"}, {"body": "looks like something else going extracted part question getting classnamebindings updating properly nt look bug ember", "d": "11/2014"}, {"body": "class names updating fine looks like updating wrong dom element sure ember bug definitely something strange going far aware using private ember apis amount manual jquery manipulation minimal none case code worked ember guess something changed since huge refactor view layer done initial guess could related use features codebase try removing going back see reproduce issue either versions", "d": "11/2014"}, {"body": "tested old version code worked fine showed issue code changes ember version changes", "d": "11/2014"}, {"body": "toggling dev tools onoff seems make x renders correctly", "d": "11/2014"}, {"body": "line appjs comment everything would work fine digging deeper shows plugin lot dom manipulation gordonkristan mentioned fine ember also gave clue since package merged uses empty text nodes track mutation points possible plugin causing problems text nodes confuses ember", "d": "11/2014"}, {"body": "lightblade makes sense gordonkristan might want try using truncate handlebars helper instead running jquery plugin", "d": "11/2014"}, {"body": "plugin pita since day started using nt surprise cause issue thank figuring going read bit empty text nodes see find workaround since nt issue ember issue going go ahead close", "d": "11/2014"}, {"body": "little digging one brain dump follows inside computedpropertyprototypedidchange call calls key marked watched causing guard early return seems like expected bizarre behavior let others familiar metal caching strategies chime confirm", "d": "11/2014"}, {"body": "herom able reproduce issue jsbin", "d": "11/2014"}, {"body": "xtian see come tight bound project working supposed post code directly try extract", "d": "11/2014"}, {"body": "xtian see would take time get working jsbin example tracked set action within route want transition object action see models resolved properly fails get users route really confused working ember failing ember upwards heck help", "d": "11/2014"}, {"body": "seems circumstances outer route users nt seem instance throws hook implemented ember seems related right means queryparamsdelegate nt use within project", "d": "11/2014"}, {"body": "override hook particular everything works like seems like quickndirty hack", "d": "11/2014"}, {"body": "sorry frequent updates investigating issue seems problem outer route property always although controller explicitly setting instance manually hook also solves problem", "d": "11/2014"}, {"body": "confirmed", "d": "11/2014"}, {"body": "fyi tried adding resolve supposed modernizr anyway luck jsbin", "d": "11/2014"}, {"body": "confirm including effect markup page yes work ember views still exhibit problem metalviews use text nodes implement view bindings dom sure causes elements become selfclosing sudden expect happen elements well dealing", "d": "11/2014"}, {"body": "behaves weirdly elements like", "d": "11/2014"}, {"body": "late cycle think getting fix probably best bet happy help someone want champion pushing fix week", "d": "11/2014"}, {"body": "mixonic could use direction clients recently experience pain around", "d": "11/2014"}, {"body": "mixonic tldr needed fix sure", "d": "11/2014"}, {"body": "sure either modernizr work still using us disposable elements unattached body creating dom different sure", "d": "11/2014"}, {"body": "code using innerhtml happy start diving general areas codebase stuff happens would super helpful", "d": "11/2014"}, {"body": "fivetanley metalviews changes ember rendering path dom based view elements elements handlebars templates return strings need parsed dom passed rendering pipeline templates render buffer buffer contains string must made dom fragment happens expect contents buffer still contain elements html expect dom fragment returned contain longer issue probably diving parsehtml takes us htmlbars method called getting consistently tricky put browser compat stuff another file need integration point fix svg support always calls requires fix using tags also buggy whitespace uses slow version sometimes need sometimes need tricky tags needs fix script tags put start html string lastly call expect html string contains elements returned nodes calling contain elements created question fivetanley irc today happily swap ideas", "d": "11/2014"}, {"body": "finally tracked problem new text nodes replaced script tags jquery ui dialog moves view div element display modal dialog moves back place finished change script tag text nodes broke jquery ui moving restoring div based based div position parent children array excludes text nodes fix would change jquery ui use parent contents rather parent children given lag time change jquery ui short term work around add jquery dialog widget anyone interested javascript appviewsmessagebox emberviewextend appviewsjquerywidget emberviewtargetactionsupport content hello uitype dialog", "d": "11/2014"}, {"body": "veebs great sleuth work thanks reporting back findings", "d": "11/2014"}, {"body": "two problems undefined already found parameter defined makes sense parameter also defined correct way fetch post high hierarchy defined case route yes route defined resource like path shown inspector well point resources act kind like routes every respect go resource always redirected subroute makes sense display path shown though route nt explain pretty complicated subject well enough please nt hesitate ask shoot youself foot lot ember routing quite easily", "d": "11/2014"}, {"body": "grouping", "d": "11/2014"}, {"body": "turns ember initializers called apps ie called appa appb appa emberapplicationcreate rootelement emberappa appb emberapplicationcreate rootelement emberappb emberapplicationinitializer initialize function container application applicationtostring appa initialize normal", "d": "11/2014"}, {"body": "side note issue emberdata problem inside initializers getting store wrong app initializer getting called twice explained", "d": "11/2014"}, {"body": "working expected please create two separate subclasses emberapplication add initializers subclassed everything works correctly test coverage confident works correctly", "d": "11/2014"}, {"body": "stefanpenner original attempt mentioned sublcass emberapplication add initializer directly see original example entirely clear comment implying correct behaviour even registering initializers subclassed apps called ember apps register emberapplication clearly implies global apps", "d": "11/2014"}, {"body": "tests cover case", "d": "11/2014"}, {"body": "stefanpenner jsbin showing apps initialized initializer registered app", "d": "11/2014"}, {"body": "stefanpenner ah see issue adding initializers instance app different rather creating sublasses first app", "d": "11/2014"}, {"body": "opsb sorry understand original confusion initializers currently class concepts docs likely reflect better ideas docs would welcome improvements", "d": "11/2014"}, {"body": "stefanpenner currently fleshing strategy using multiple ember apps rails app yehuda mentioned might write blog post strategy use embed embercli apps rails apps planning integrating strategy think good time write docs combination railsemberclimultipleapps edit said perhaps docs focused simply multiple emberapps would appropriate ember guides", "d": "11/2014"}, {"body": "stefanpenner added initializers section guides", "d": "11/2014"}, {"body": "bbalban seems working fine jsbin", "d": "11/2014"}, {"body": "also working bbalban believe working indicated going close issue happy reopen provide jsbin demonstrating problem", "d": "11/2014"}, {"body": "might make use ember dependency injection basically register new type case use ember nt attempt call create define property instances ember controllers created ember ones almost always use app need routes use route instead controller need scope view use instead link page methods located help", "d": "11/2014"}, {"body": "method guess able point currentlang linkto string", "d": "11/2014"}, {"body": "nope create property called controllers would use without string see demo use indexhbs template showing bound property", "d": "11/2014"}, {"body": "definitely way forward closing though encourage continue discussion", "d": "11/2014"}, {"body": "awesome thanks fast response", "d": "11/2014"}, {"body": "per documentation add computed properties bindings observers defining new object js var husband emberobjectextend income embercomputedalias wifeincome var wife emberobjectcreate income husbandcreate wife wife", "d": "11/2014"}, {"body": "ah docs wrong let update", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "thanks stefanpenner", "d": "11/2014"}, {"body": "work done array computed reduce computed else something currently free time read somewhere example deprecated reduce computed must adapted also see possible optimizations reduce computed eg use coalescence item changes could still flush directly get new value array computed macros could make use detect item really needs removed currently removed added finally value changes could triggered currently done every", "d": "11/2014"}, {"body": "patricklx ping irc want chat mmun emberjsdev", "d": "11/2014"}, {"body": "chance errors would fixed incoming release waiting deploy application production necessary get array computed worked properly", "d": "11/2014"}, {"body": "believe behavior correct one", "d": "11/2014"}, {"body": "mixonic afraid right ember way add layout component using layoutname radiobutton component nt seem work also see move question stackoverflow", "d": "11/2014"}, {"body": "oleroel issue component tagname want input tag inside component layout instead point stackoverflow would better choice discussion thanks", "d": "11/2014"}, {"body": "mixonic correct empty element means children", "d": "11/2014"}, {"body": "question stackoverflow", "d": "11/2014"}, {"body": "omghax want ensure child views rendered anything dom consistent schedule work thought scheduling", "d": "11/2014"}, {"body": "use case tabs tab component needs register tab list order appears template active tab determined index also ictabs works functionally tab list maintains array children children add remove inside test case currently commented passes ember fails", "d": "11/2014"}, {"body": "omghax addressed tab component giving tab name instead relying index makes much nicer integrated router get instead", "d": "11/2014"}, {"body": "could also parent registration init would preserve index ordering", "d": "11/2014"}, {"body": "rwjblue works great thank rlivsey probably end long run making index default name thanks suggestion", "d": "11/2014"}, {"body": "rwjblue thanks fix suggestion wanted note earlier mentioned documentation notes changelog release notes certainly saw items looking problem issue created imho quite stretch understand child views render parent views somehow describes firing sibling views rendered reverse order well seems though two documentation items could either expandedbetter explained even though coding change may affected activities parent view vs child view ordering well sibling view ordering would benefit described explicit separate changes nt understand lines parenttochild view ordering intended also affect siblingtosibling ordering anyway thanks help beers", "d": "11/2014"}, {"body": "think works reopen overwrite hash embermetal logic surrounding probably fixed tried times could nt find right balance", "d": "11/2014"}, {"body": "machty provide small example would reopen overwrite actions hash would route mixin thanks", "d": "11/2014"}, {"body": "example", "d": "11/2014"}, {"body": "machty think try stay away methods since private much possible tried recreate problem still working something wrong implementation", "d": "11/2014"}, {"body": "billybonks nah implementation works fine looks similar code example posted code would expect work working different spot app actions hash controller using mixin actions hash seems one weird specific case working reason try work see come reproducible example nothing trying use actions hash route one method hash route uses mixin actions hash two different methods namely completely different different things", "d": "11/2014"}, {"body": "send action flow end step code first example", "d": "11/2014"}, {"body": "nt really example private api relic pre days wanted introduce api controllers without clobbering existing apps might meaningful properties already defined controllers gon na mark wontfix present day workaround previous attempts make work reopening rather works use led rabbithole fix come", "d": "11/2014"}, {"body": "right failing different way run dies following error swing back around look finish current issue working seem like may bug embercliyuidoc", "d": "11/2014"}, {"body": "tehcurtis checked plugin works ok maybe kind npm cache issue delete folder try", "d": "11/2014"}, {"body": "nt last line", "d": "11/2014"}, {"body": "also probably reinstalling", "d": "11/2014"}, {"body": "yep updated", "d": "11/2014"}, {"body": "trick able run get docs generated", "d": "11/2014"}, {"body": "also readmemd repo need updated new proper way generate docs nt take crack unless would like cibernox", "d": "11/2014"}, {"body": "nt aware edit readme pr", "d": "11/2014"}, {"body": "uhmm reading readme changed mind seems recommended way seeing documentations using webpage repo tool generates automatic yuidoc documentation source code webpage much contains examples deprecations stuff wo nt edit readme unless core member confirms want publicise option building docs", "d": "11/2014"}, {"body": "closed rwjblue", "d": "11/2014"}, {"body": "heart thank", "d": "11/2014"}, {"body": "known thing something go away htmlbars view refactor nothing fixed present view layer ca nt find exact existing bug specifically addressed htmlbars lands", "d": "11/2014"}, {"body": "thanks clarification try find existing bug need workaround", "d": "11/2014"}, {"body": "computed property side effects", "d": "11/2014"}, {"body": "retrieves related data server however context unwanted model instance happens instance lot data noticed bug one fix may separating blocks different routes", "d": "11/2014"}, {"body": "miguelcobain workaround probably involves annoyingly adding check cp prevent unnecessary fetch remove htmlbars lands", "d": "11/2014"}, {"body": "use case bit complex one jsbin might work thanks feeling really excited htmlbars thanks", "d": "11/2014"}, {"body": "machty version ember bug supposed fixed seems htmlbars lot things spread across lot versions know incremental release good thing nt know part htmlbarsember version fixes bug", "d": "11/2014"}, {"body": "miguelcobain sometime", "d": "11/2014"}, {"body": "great let us know plan thank", "d": "11/2014"}, {"body": "hello ran issue goal integrating formatjs embercli addon thanks taking matter consideration bmeurant time work around limitation", "d": "11/2014"}, {"body": "ksol test concrete business need see acceptable work around still override viewrender", "d": "11/2014"}, {"body": "bmeurant neither nt think rewriting handlebars integration order supply translations another way viable idea moment think stick seems pretty solid", "d": "11/2014"}, {"body": "seeing shiv breaking emberjs body fontfamily serif lt p gt header fontfamily sans fontweight bold header body windowapp emberapplicationcreate header element styled expected emberjs body fontfamily serif header fontfamily sans fontweight bold lt header gt header lt header gt body windowapp emberapplicationcreate nt header element styling adding nt change result either case sure underlying issue appears ember something funky somewhere", "d": "11/2014"}, {"body": "jsbin reproduces issue need reproduce shamjs ember emberdata understanding emberdata supposed work without sham since ember polyfill app fails without fails even miserably crashes line emberdata since creating infinite recursion looped open issue emberdata", "d": "11/2014"}, {"body": "jbourassa sounds like emberdata issue verify still case master ember emberdata", "d": "11/2014"}, {"body": "still crashes latest emberdata emberjs open issue emberdata", "d": "11/2014"}, {"body": "oh yes bug recall ember bundles objectcreate polyfil works correctly", "d": "11/2014"}, {"body": "explicitly leaves", "d": "11/2014"}, {"body": "stefanpenner right nt need sham anymore app works thing also experiencing tag bug pansapien mentioned using ember guess temporary solution update emberdata bring polyfill", "d": "11/2014"}, {"body": "jbourassa add feature detection assert correctly emberdata", "d": "11/2014"}, {"body": "issue gotten confused many smaller already resolved issues need split one apart cc wagenet", "d": "11/2014"}, {"body": "experiencing error app nt use ember data issues described happening well", "d": "11/2014"}, {"body": "still broken code working fine still error code", "d": "11/2014"}, {"body": "mmun thanks quite easyobvious pointed guess always assumed needed add work correctly got sorted", "d": "11/2014"}, {"body": "cc teddyzeenny", "d": "11/2014"}, {"body": "believe solved latest release", "d": "11/2014"}, {"body": "kgish great close let know see", "d": "11/2014"}, {"body": "closing per stefanpenner nicholasjstock turns wrong somehow let know", "d": "11/2014"}, {"body": "also important issue app work route observes like javascript emberrouteextend observestuff function thistimer emberrunlater thissomework observes controllermodelstatus actions willtransition function emberruncancel thistimer return true route setup method set never calls reason observer resolve using embercli based workflow building ember setting env flag would nt easy unless missing something", "d": "11/2014"}, {"body": "controller observable within route router assigns prop instead using emberset current behavior letting know going work properly via assertion", "d": "11/2014"}, {"body": "unfortunate mandatory setter assertion broken pretty important finally functioning properly tests tldr closing think bug", "d": "11/2014"}, {"body": "ok work around codebase thanks prompt response ps reason seeing assertion mentioning", "d": "11/2014"}, {"body": "anyone hits issue linkaction pair contained tag action would toggle removing link dom time chance bubble defering toggle action next run loop fixed", "d": "11/2014"}, {"body": "merged", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "looks like fixed", "d": "11/2014"}, {"body": "closed", "d": "11/2014"}, {"body": "fivetanley awesome going", "d": "11/2014"}, {"body": "wagenet got one busiest weeks life usually reserve wednesday open source days getting training ready back either tomorrow next saturday depending much energy left tomorrow something want get soon knownasilya bug help qa", "d": "11/2014"}, {"body": "fivetanley", "d": "11/2014"}, {"body": "fivetanley sure feel free ping irc tweet email nov pm stanley stuart notifications githubcom wrote wagenet got one busiest weeks life usually reserve wednesday open source days getting training ready back either tomorrow next saturday depending much energy left tomorrow something want get soon knownasilya bug help qa reply email directly view github", "d": "11/2014"}, {"body": "fwiw think would completely reasonable publish caveat handlebars jquery expected globally available easily accomplished browserifyshim", "d": "11/2014"}, {"body": "although available npm nt shimmed nov pm ben clinkinbeard notifications githubcom wrote fwiw think would completely reasonable publish caveat handlebars jquery expected globally available easily accomplished browserifyshim reply email directly view github", "d": "11/2014"}, {"body": "right referring comment query handlebars nt expose used commonjs iirc believe correct ember expects globally available shimming would option", "d": "11/2014"}, {"body": "better alternative would patch ember first try load via means globals last option loaded although could performance issues adding file size ember", "d": "11/2014"}, {"body": "doh bug build process", "d": "11/2014"}, {"body": "btw related note breaks browserifybower may something work around happy better way check package bower distribution", "d": "11/2014"}, {"body": "curious line actually break require line obviously wrong break", "d": "11/2014"}, {"body": "shaunc running browserify really hate browserify nt scope tracking nt realize requires scope", "d": "11/2014"}, {"body": "tehcurtis clearly nodeland tooling nt final build nt think actually breaks anything impression know", "d": "11/2014"}, {"body": "ah gotcha makes sense thanks sent mailbox sun nov pm robert jackson notifications githubcom wrote tehcurtis clearly nodeland tooling nt final build nt think actually breaks anything impression know reply email directly view github", "d": "11/2014"}, {"body": "stefanpenner ah thanks tehcurtis use bower install main program installed root using bower simply require would break using broswerifybower require would work packagejson also root originally suggested putting main lib course would still broken bower install", "d": "11/2014"}, {"body": "stefanpenner caused rsvp fixed though anything holding back new version", "d": "11/2014"}, {"body": "bugfix need land next version", "d": "11/2014"}, {"body": "jefflage closing let know get jsbin failing test reopen", "d": "11/2014"}, {"body": "im sure kosher got work following changing order script tags root dom element already exists called explicitly setting calling creating global application starting tests explicitly create set event dispatcher anyone see anything overtly wrong", "d": "11/2014"}, {"body": "going close issues wontfix little context kris working refactoring morph library uses blank text nodes triggers bug refactor land two things help address instead two blank text nodes bounding content single node possible lessen chance error content blank currently two blank text nodes present instead plan change single comment node dramatically lessen chance occurring refactor land putting another point release risky ember address upcoming major release hopefully chrome real fix upcoming stable", "d": "11/2014"}, {"body": "looks like would fix let know mistaken reopen", "d": "11/2014"}, {"body": "nikpachoo make jsbin jsfiddle reproduces case let know reopen", "d": "11/2014"}, {"body": "wagenet reproduced jsbin", "d": "11/2014"}, {"body": "going close assumption stefanpenner correct please reopen repo still interested thanks", "d": "11/2014"}, {"body": "emberset deprecated", "d": "11/2014"}, {"body": "hey mixonic rwjblue get fix ember beta know merged master thank time visualjeff", "d": "11/2014"}, {"body": "visualjeff fix went ember", "d": "11/2014"}, {"body": "visualjeff fix included", "d": "11/2014"}, {"body": "stefanpenner next step", "d": "11/2014"}, {"body": "need make new select deprecate existing one unlikely fixed see", "d": "11/2014"}, {"body": "looks like fix", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "stefanpenner seen", "d": "11/2014"}, {"body": "understanding computed property initialized object functions writable initialized function object readonly unless specify otherwise right specify without defining function means property replaced value seted cps piece codebase understand better things pr want focus htmlbars", "d": "11/2014"}, {"body": "cibernox nice review weekend rfc core decided need last refinements gets merged would love help implementing", "d": "11/2014"}, {"body": "cibernox also feedback rfc would wonderful", "d": "11/2014"}, {"body": "reading rfc think pr perfectly aligned steps done x raise deprecation warnings passing constructor extrictly necessary used anywhere code since simplifies things x deprecate usage default steps pending modify cps work internally setter getters way gracefully without people even noticing could count arity function passed arity lt create setter arity gt assign function getter setter passing object also works deprecations yet deprecate passing functions arity gt recommend user instead implement logic rfc create andor determina default values explained code example deprecate things ember delete things", "d": "11/2014"}, {"body": "cibernox nice mind moving checklist pr make easier track added queue review", "d": "11/2014"}, {"body": "regarding key first argument digging around gh issues ember source trying figure key first argument perhaps needed internally would typical user typically using key could hide key think new set important parameter would consider making first parameter nice", "d": "11/2014"}, {"body": "descriptor shared multiple properties current receiver", "d": "11/2014"}, {"body": "think computed property generators like use argument determine working pretty common pattern ember libraries", "d": "11/2014"}, {"body": "mixonic love take crack", "d": "11/2014"}, {"body": "tehcurtis comment pr last issues rwjblue merge tests travis failing expect something silly since pass locally pretty much add repo want make force pushes try", "d": "11/2014"}, {"body": "mixonic awesome thanks get work", "d": "11/2014"}, {"body": "rwjblue anything else currently needs done close anything help", "d": "11/2014"}, {"body": "closing rwjblue know best imagine still work done getting helpers emberdata", "d": "11/2014"}, {"body": "sounds good looks like already ticket emberjsdata", "d": "11/2014"}, {"body": "stefanpenner impression planning deprecate enumerable bother fixing", "d": "11/2014"}, {"body": "fix going updated still get index range error arrays using computedsort number sort properties", "d": "11/2014"}, {"body": "electricgraffitti looks like bugfix made", "d": "11/2014"}, {"body": "also believe igott correct crhayes seems like able modify ed adapter correct casing", "d": "11/2014"}, {"body": "stefanpenner saying bug", "d": "11/2014"}, {"body": "wagenet nt think bug stefanpenners suggestion correct according docs also return live array definitely return live array mewben amp szines achieve expected behavior please try use", "d": "11/2014"}, {"body": "billybonks thanks fleshing answer", "d": "11/2014"}, {"body": "billybonks thanks help appreciate make sense", "d": "11/2014"}, {"body": "thanks everyone", "d": "11/2014"}, {"body": "machty ping", "d": "11/2014"}, {"body": "stefanpenner closed", "d": "11/2014"}, {"body": "forgot complete", "d": "11/2014"}, {"body": "changed aliased backcompat spec changed", "d": "11/2014"}, {"body": "ya though might hold bit far know chose alternative without crawling estimate potential conflicts implementandsee situation similar", "d": "11/2014"}, {"body": "mixonic ping", "d": "11/2014"}, {"body": "mmun krisselden ping", "d": "11/2014"}, {"body": "closing jsbin provided reopen", "d": "11/2014"}, {"body": "krisselden ping", "d": "11/2014"}, {"body": "asaf put together something jsbinjsfiddle make much easier us try things", "d": "11/2014"}, {"body": "rhyek check", "d": "11/2014"}, {"body": "updated jsbin ember emberdata beta still issue", "d": "11/2014"}, {"body": "merging", "d": "11/2014"}, {"body": "machty ping", "d": "11/2014"}, {"body": "yeah look regex checking", "d": "11/2014"}, {"body": "ima fix", "d": "11/2014"}, {"body": "mturnwall bantic number places treat uppercase properties globals may changing lowercase fixes", "d": "11/2014"}, {"body": "talked team solution use uppercase property names", "d": "11/2014"}, {"body": "cc stefanpenner", "d": "11/2014"}, {"body": "promise aborted concept aborting promise luckily nt promise rather transition could support really router level concern would like pull machty weigh thoughts", "d": "11/2014"}, {"body": "stefanpenner appear written promise meant transition clearly router level issue implementation touch underlying promise logic recap issue transition associated promise transition aborted would like promise reject immediately add hook enables client code detect abort", "d": "11/2014"}, {"body": "francnuec going close get reproduction please let know reopen", "d": "11/2014"}, {"body": "seem work expected chrome safari message next updated every time change value uberclops browserspecific issue", "d": "11/2014"}, {"body": "nope browser issue seem working ember emberdata scripts references bins pointing latest release bins correct references ember ember data notice first bin updates value next element first time given value selected fixed sometime latest release", "d": "11/2014"}, {"body": "freakthemighty need overide method hashbang implementation working jsbin wagenet please close isnt bug", "d": "11/2014"}, {"body": "krisselden ping", "d": "11/2014"}, {"body": "mixonic mmun thoughts", "d": "11/2014"}, {"body": "fix bug soon fix make immediately execute pass return value", "d": "11/2014"}, {"body": "mmun lt", "d": "11/2014"}, {"body": "mind writing failing test issue fix", "d": "11/2014"}, {"body": "mmun tried make test luck focus event seems lost tests nt understand going beeing said confirm issue fixed", "d": "11/2014"}, {"body": "experiencing ember edit confirm commenting line mentioned skoryky fixes problem", "d": "11/2014"}, {"body": "case change multiple query params still getting console errors even commenting line suggested skoryky however console errors app behaving jsbin ember version", "d": "11/2014"}, {"body": "shripathee also encountered issue turns callback called query param set really sure want kind behavior instead single notice query param changed replaced options hash", "d": "11/2014"}, {"body": "mixonic status", "d": "11/2014"}, {"body": "mixonic fixed little back work properly", "d": "11/2014"}, {"body": "get chance look", "d": "11/2014"}, {"body": "machty ping", "d": "11/2014"}, {"body": "machty ping", "d": "11/2014"}, {"body": "seeing exception also final nt yet chance verify whether work", "d": "11/2014"}, {"body": "machty ping", "d": "11/2014"}, {"body": "kind bug probably wontfix make forward push towards components controllers leave open", "d": "11/2014"}, {"body": "kbullaughey still issue newest versions", "d": "11/2014"}, {"body": "yes still issue tested gist using current canary emberjs build emberdata beta error", "d": "11/2014"}, {"body": "making sure asserts name explicitly passed method nt see problem code think mistaken walk steps would take would lead incorrect output hidden output", "d": "11/2014"}, {"body": "fixed", "d": "11/2014"}, {"body": "opsb luck", "d": "11/2014"}, {"body": "wagenet taking backseat development recently health reasons nt looked project since", "d": "11/2014"}, {"body": "opsb sorry hear thanks response", "d": "11/2014"}, {"body": "going optimistically close please use would need dom rendered considering putting future", "d": "11/2014"}, {"body": "anyone confirm still issue", "d": "11/2014"}, {"body": "wagenet yes still issue canary", "d": "11/2014"}, {"body": "machty thoughts", "d": "11/2014"}, {"body": "think also bug using want call special method controller every time specific queryparam changes router looks something like advice snip pagination queryparams offset refreshmodel true model function params returns model setupcontroller function controller model thissuper controller model controllerset model model fetch results method bunch work sets filters generates promise resolves promise sets array data controller promise resolves offset pagination feature determines specific results fetched would like able call fetchresults everytime offset queryparam changed emberrunlater function controllersendaction fetchresults snip", "d": "11/2014"}, {"body": "machty ideas start digging", "d": "11/2014"}, {"body": "issue still exists mixonic updates", "d": "11/2014"}, {"body": "yet", "d": "11/2014"}, {"body": "removed chances dramatically", "d": "11/2014"}, {"body": "mixonic updates", "d": "11/2014"}, {"body": "sadly would like keep tracking though", "d": "11/2014"}, {"body": "rwjblue think done", "d": "11/2014"}, {"body": "looks like fixed", "d": "11/2014"}, {"body": "rwjblue ping", "d": "11/2014"}, {"body": "machty ping", "d": "11/2014"}, {"body": "stefanpenner allowed", "d": "11/2014"}, {"body": "believe appears return rather instance seems like bug may solvable simply", "d": "11/2014"}, {"body": "need another assertion prevent routesresources named like", "d": "11/2014"}, {"body": "rwjblue sounds like good quick fix consider solving collision future", "d": "11/2014"}, {"body": "closing favor discussion", "d": "11/2014"}, {"body": "seangrind put together sample jsbin", "d": "11/2014"}, {"body": "sure write one get office tomorrow sent iphone nov pm peter wagenet notifications githubcom wrote seangrind put together sample jsbin reply email directly view github", "d": "11/2014"}, {"body": "ca nt quite remember set things originally got error couple months tried reproducing jsbin luck play around get spare cycles see get working", "d": "11/2014"}, {"body": "happens helper component nt found instead property looked current context results strange error", "d": "11/2014"}, {"body": "jsbin illustrating error get thrown", "d": "11/2014"}, {"body": "fivetanley status closed favor pr", "d": "11/2014"}, {"body": "trek fix docs", "d": "11/2014"}, {"body": "documentation accurate bug hopefully address closing particular issue since docs know mmun mixonic aware general problem", "d": "11/2014"}, {"body": "applying layoutname custom component extending textfield layout actually applied lt sentence incorrect layout applied input happens corrected browser html parser way seems look like applied metal views longer seem work correct view based selfclosing dom node definition contain dom", "d": "11/2014"}, {"body": "went actions hash", "d": "11/2014"}, {"body": "ran issue", "d": "11/2014"}, {"body": "closing favor pr", "d": "11/2014"}, {"body": "rwjblue make progress", "d": "11/2014"}, {"body": "seem address issue string thrown rather", "d": "11/2014"}, {"body": "stefanpenner", "d": "11/2014"}, {"body": "mattjmorrison nt throw strings", "d": "11/2014"}, {"body": "stefanpenner problem originally surfaced another library throwing strings something could control", "d": "11/2014"}, {"body": "mattjmorrison due way promises reject redirection handle thrown strings error used fail test error thrown promises", "d": "11/2014"}, {"body": "rwjblue could", "d": "11/2014"}, {"body": "stefanpenner", "d": "11/2014"}, {"body": "guess still need", "d": "11/2014"}, {"body": "jayphelps status", "d": "11/2014"}, {"body": "stefanpenner verify bug", "d": "11/2014"}, {"body": "mmun ping", "d": "11/2014"}, {"body": "thoughts matter", "d": "11/2014"}, {"body": "behavior definitely undesirable ideally would separate invalidation step recomputation step scalar computed properties work", "d": "11/2014"}, {"body": "looks like still issue stefanpenner plan fixing", "d": "11/2014"}, {"body": "better answered mmun mixonic", "d": "11/2014"}, {"body": "playing around today working joachimhs irc discovered ember seems resolve specific use case shows ordering playing nicely editing", "d": "11/2014"}, {"body": "ultimatemonty case works due", "d": "11/2014"}, {"body": "thanks pointing pr provided fix discussion array sorting educational way head thanks ahacking working issue", "d": "11/2014"}, {"body": "recently came across issue cp invalidated even though controller example js bin try entering text input fields notice rerendered cp arraycontroller related issue", "d": "11/2014"}, {"body": "stefanpenner updates", "d": "11/2014"}, {"body": "likely change plans role", "d": "11/2014"}, {"body": "first thanks guys making ember awesome curious progress front suggested work around seems clean hoped using templates nested several levels deep example nesting thisroute module function thisroute function thisroute feature function thisroute subfeature thisroute function thisroute feature function thisroute subfeature thisroute function thisroute feature function thisroute subfeature case seeing issue template always clear transitioning another level", "d": "11/2014"}, {"body": "stefanpenner status", "d": "11/2014"}, {"body": "still pending", "d": "11/2014"}, {"body": "staugaard", "d": "11/2014"}, {"body": "wagenet sure asking", "d": "11/2014"}, {"body": "still planning look", "d": "11/2014"}, {"body": "sorry low priority list late", "d": "11/2014"}, {"body": "record experienced issue", "d": "11/2014"}, {"body": "machty status", "d": "11/2014"}, {"body": "still issue closing favor", "d": "11/2014"}, {"body": "wagenet open issue", "d": "11/2014"}, {"body": "oops meant", "d": "11/2014"}, {"body": "stefanpenner ping", "d": "11/2014"}, {"body": "wagenet nominate", "d": "11/2014"}, {"body": "stefanpenner mean actually want work", "d": "11/2014"}, {"body": "wagenet", "d": "11/2014"}, {"body": "mmun close since htmlbars fix seems unlikely work separate fix", "d": "11/2014"}, {"body": "rwjblue want wrap", "d": "11/2014"}, {"body": "stefanpenner related", "d": "11/2014"}, {"body": "machty tell still issue sure exactly expected", "d": "11/2014"}, {"body": "machty ran problems updates", "d": "11/2014"}, {"body": "tehcurtis going need help", "d": "11/2014"}, {"body": "wagenet going well super busy past days", "d": "11/2014"}, {"body": "ebryn krisselden stefanpenner still ongoing issue", "d": "11/2014"}, {"body": "think fixed", "d": "11/2014"}, {"body": "krisselden thoughts", "d": "11/2014"}, {"body": "closing due inactivity", "d": "11/2014"}, {"body": "mixonic bmac interest writing docs", "d": "11/2014"}, {"body": "stefanpenner function returns go well next pr pivotal implementing functional rap song k serious note nt always want return context function using would forced perform noop trek think self documenting function would nice would nice function would also nice one returns identity rolled project side note nt currently appear docs", "d": "11/2014"}, {"body": "emberjsowners something pursue", "d": "11/2014"}, {"body": "block params rfc likely way forward", "d": "11/2014"}, {"body": "closing favor", "d": "11/2014"}, {"body": "closing since stale let know still issue reopen", "d": "11/2014"}, {"body": "machty never got input", "d": "11/2014"}, {"body": "believe already fixed least progress", "d": "11/2014"}, {"body": "yes looks like relevant prs", "d": "11/2014"}, {"body": "closing due inactivity bterkuile still issue ember please let know reopen", "d": "11/2014"}, {"body": "closing due inactivity patricklx let know still issues reopen", "d": "11/2014"}, {"body": "yes issue still currently investigating js bin shows cache used everything recomputed somehow changes get reset operation another bin changes use cache assume cp already handles copy everything reduce computed since access reducecomputedpropertyinstancemeta try apply changes seperate branch better show differences", "d": "11/2014"}, {"body": "shall make pr", "d": "11/2014"}, {"body": "patricklx since already issue might well make pr", "d": "11/2014"}, {"body": "closing due inactivity", "d": "11/2014"}, {"body": "seems like likely fix wrapping returns", "d": "11/2014"}, {"body": "apologies missing something obvious thinking return values would wrapped clearly could hijack native methods call function wrapping since issue turned seems violate spirit directive go ahead mess prototypes anyway", "d": "11/2014"}, {"body": "jaswilli example given kerrick method called array extended makes sense return extended array messing prototypes", "d": "11/2014"}, {"body": "wagenet sorry realize poor job articulating question let try smile right defer native implementation function one exists native map cases obviously returns native array solution issue looking always use overridden function implementations mixin instead deferring native implementation", "d": "11/2014"}, {"body": "jaswilli thinking prototype extension wrap native implementation ensure get", "d": "11/2014"}, {"body": "moved meta", "d": "11/2014"}, {"body": "emberjsowners anyone thoughts issue", "d": "11/2014"}, {"body": "either applying active class immediately adding additional classes around various states preference gavinjoyce suggestion", "d": "11/2014"}, {"body": "trek talked bit current state mind think covers maximal usecases possible querybind activeness router state whether current router state state active transition eventually become current router state transition finishes seems like three options calculating activeness link considered active according current router state even transition elsewhere underway link considered active according currently active transition one link considered active transition caused else fall back current router sttate think option feasible preferable think nice api hard see everything use case block params stab hbs linkgroup g glinkto home home glinkto glinkto faq faq linkgroup linkgroup g glinkto home home glinkto glinkto faq faq linkgroup example links header footer kind weirdannoying make eagerly change appearances according currently active transition particularly transition fail rather want links grouped together pay attention state transition caused nt ui changing screen disconnected clicked people feel", "d": "11/2014"}, {"body": "aaaaaand talking wycats et al like retract suggesting favor css classes la gavinjoyce suggesting place probably handful use cases could covered making possible bind properties urlrouter service plan exposing templates", "d": "11/2014"}, {"body": "closing due inactivity marinho let know like reopen", "d": "11/2014"}, {"body": "wycats tomdale ping", "d": "11/2014"}, {"body": "believe planning deprecate emberjsowners seem ok close", "d": "11/2014"}, {"body": "stefanpenner pr see commit pr", "d": "11/2014"}, {"body": "mmun working literally", "d": "11/2014"}, {"body": "closing due age trek feel free reopen still care", "d": "11/2014"}, {"body": "sounds like ok document", "d": "11/2014"}, {"body": "emberjsowners going", "d": "11/2014"}, {"body": "ember data exposes planning deprecate make promises directly bindable", "d": "11/2014"}, {"body": "willemdewit closing since old still issue let know reopen", "d": "11/2014"}, {"body": "emberjsowners thoughts", "d": "11/2014"}, {"body": "looks like still issue", "d": "11/2014"}, {"body": "tomdale made progress", "d": "11/2014"}, {"body": "thoov send pr", "d": "11/2014"}, {"body": "stefanpenner status", "d": "11/2014"}, {"body": "tl dr future plans doit breaking change", "d": "11/2014"}, {"body": "stefanpenner thought leaving open hate long running issues better way track", "d": "11/2014"}, {"body": "closing due inactivity still issue please let know reopen", "d": "11/2014"}, {"body": "calvinmetcalf still causing guys issues", "d": "11/2014"}, {"body": "changed different method cloning objects problem went away idea root issue nov pm stefan penner notifications githubcom wrote calvinmetcalf still causing guys issues reply email directly view github", "d": "11/2014"}, {"body": "yay", "d": "11/2014"}, {"body": "definitely known issues arraycomputed thinking solutions", "d": "11/2014"}, {"body": "krisselden still planning", "d": "11/2014"}, {"body": "delegating rwjblue work", "d": "11/2014"}, {"body": "already", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "closing favor pr", "d": "11/2014"}, {"body": "would great thing someone pr", "d": "11/2014"}, {"body": "go wagenet excuse cheek able", "d": "11/2014"}, {"body": "julianleviston hah", "d": "11/2014"}, {"body": "machty ping", "d": "11/2014"}, {"body": "machty ping", "d": "11/2014"}, {"body": "trek expected", "d": "11/2014"}, {"body": "emberjsowners sure respond", "d": "11/2014"}, {"body": "nt think value adding features right prefer encourage people move new apis like components kind thing", "d": "11/2014"}, {"body": "also please note adding child views happening jakecraige example supported new view rendering", "d": "11/2014"}, {"body": "emberjsowners ping", "d": "11/2014"}, {"body": "closing due inactivity someone wants pick let know", "d": "11/2014"}, {"body": "also run issue might able take stab fixing someone point right direction", "d": "11/2014"}, {"body": "machty provide direction", "d": "11/2014"}, {"body": "know nt look bad take stab pr guys correct wrong", "d": "11/2014"}, {"body": "stefanpenner rwjblue mixonic status", "d": "11/2014"}, {"body": "longer possible pass travis run unhandled deprecations thrown", "d": "11/2014"}, {"body": "closing due inactivity still issue let know", "d": "11/2014"}, {"body": "rwjblue ping", "d": "11/2014"}, {"body": "amazing", "d": "11/2014"}, {"body": "closing anyone wants make pr let know", "d": "11/2014"}, {"body": "whoops sorry", "d": "11/2014"}, {"body": "closing due inactivity please pr documentation changes interested", "d": "11/2014"}, {"body": "mmun thanks workload lightens see", "d": "11/2014"}, {"body": "emberjsowners usually want bring shim ember autofills semicommon one could argue thoughts", "d": "11/2014"}, {"body": "definitely want pull shim would really love see addon helped address experiment solution wider context", "d": "11/2014"}, {"body": "mixonic fine nt want use shim however issue still remains wondering closed issue still valid poor ux stands", "d": "11/2014"}, {"body": "abobwhite seem viable option discussed prefer try keep tickets actionable seems issue chrome autofill apis supporting would new feature tenuous case calling bug best would like dive someone running definitely needs pick understand various browser apis appropriately support", "d": "11/2014"}, {"body": "mixonic makes sense whether actionable task yet others issue come see discussion add open issue thus making likely become actionable regarding seeming issue chrome autofill apis object emberjs exists make writing web apps simpler web apps made run browsers hence web browsers bugs cause behave standard however emberjs typically pointing fingers browser fix problem modern browser course emberjs gets glorious painful opportunity handle browser idiosyncrasies order make viable option browsers case autofill crucial users expect autofill work ember bindings nt pick consider ember bug enable standard browser functionality vs browser bug", "d": "11/2014"}, {"body": "sure much", "d": "11/2014"}, {"body": "adding buttons keep ie tested following bin worked expected", "d": "11/2014"}, {"body": "rwjblue ping", "d": "11/2014"}, {"body": "machty status", "d": "11/2014"}, {"body": "nt really status update think blocked building route service available various controllerscomponents make calculating sort thing easy need let services pr settle", "d": "11/2014"}, {"body": "someone verify still issue", "d": "11/2014"}, {"body": "still appears issue got jsbin latest handlebars emberjs libs clicking remove straightaway causes exception clicking add adds still produces oddness mentioned going try take look one else currently", "d": "11/2014"}, {"body": "first issue encountered example removing item appmagicarray throws following exception exception thrown line basically trying destroy childview associated element removing appmagicarray second time tries destroy nt exist exception gets thrown easiest way fix would something akin convinced best way seems like collectionview arraywillchange getting invoked often getting invoked removing item array first time view object gets destroyed series callbacksevents fire lead attempt removing related collection view object item removing appmagicarray due ways could fix completed familiar area code base great get guidance real issue trying solve insight would great thanks", "d": "11/2014"}, {"body": "looked bit made changes think fix issue pull request realbetter solution involve figuring way prevent duplicate observer events firing situation nt figure yet seems happening object added arrayproxy content scenario firing events let say modify arrayproxy create new object set object content collectionview like var arrangedarray arrayproxyextend arrangedcontent embercomputed content function return thisget content var arrayproxy arrangedarraycreate content function return property var view collectionviewcreate content arrayproxy content arrangedcontent add object content first arrangedcontent computedproperty depending content recalculates returns new content arrangedcontent array replaced completely new value content fires arraydidchange function collectionview telling replace childviews new values array collectionview content time event also fires indicating content changed object added end array also eventually fires arraydidchange function collectionview telling add new childview position array thinks end original item array reality middle new item array event resolves first collectionview ends content thing happens reverse remove item start content run collectionview first sees new empty arrangedcontent sets childviews array gets event telling remove element array causing error", "d": "11/2014"}, {"body": "lets consolidate around", "d": "11/2014"}, {"body": "sgtm", "d": "11/2014"}, {"body": "consolidating", "d": "11/2014"}, {"body": "jayphelps good mate getting feature sorted love take spin use scrollspy ever manage test scrollspy currently im ember need get feature working code", "d": "11/2014"}, {"body": "also since merged master guess version ember finally drop tips best way track features progress towards release", "d": "11/2014"}, {"body": "machty feel issue still relevant", "d": "11/2014"}, {"body": "elisechant nt suggesting nt relevant saying place discussion forums", "d": "11/2014"}, {"body": "feel like decided handle vanilla hashes cc stefanpenner", "d": "11/2014"}, {"body": "agresvig wagenet either find workaround running similar issue template completely clearing transitioning away route think issue similar javascript thisroute systemconfig function thisroute home thisroute vendorcategories function thisroute vendorcategory path vendorcategoryid function thisroute attributes thisroute vendors function thisroute vendor path vendorid function thisroute divisions thisroute vendordivisions function transitioning route clears content edit view leaves edit template place thisroute edit path vendordivisionidedit function thisroute details thisroute contacts transitions fine except transitioning route level even stack go back exit back get copy template stacked first one screenshot issue", "d": "11/2014"}, {"body": "stefanpenner anymore information quirk reading developing ember edge call nt give details unamused", "d": "11/2014"}, {"body": "result reopen partially lazy parts nt apply next instance create really want disabled reopening first instance created truly source performance issues object model complexity", "d": "11/2014"}, {"body": "thanks quick reply accept wink", "d": "11/2014"}, {"body": "dukedave unfortunately solutions think would make stuff slowermore complicated", "d": "11/2014"}, {"body": "stefanpenner think disabling class reopening first instance created better current approach failing silently least nothing annoying programming something failing silently ruby background counterintuitive spend time figuring method defined via reopen undefined", "d": "11/2014"}, {"body": "stefanpenner think disabling class reopening first instance created better current approach failing silently glad feel way hopefully try someone maybe roll", "d": "11/2014"}, {"body": "stefanpenner ping", "d": "11/2014"}, {"body": "reopen using async code may executed view destroying destroyed common issue ember guides community nt provide nice solution pattern handle case checking isdestroyed isdestroying async block seems really ugly", "d": "11/2014"}, {"body": "experimenting means something would suggest stable idea yet", "d": "11/2014"}, {"body": "hjdivad said core issue around merging", "d": "11/2014"}, {"body": "seems nice fix nt see progress made closing issue someone wants pick let know", "d": "11/2014"}, {"body": "would great issue effectively dead someone wants pick let know", "d": "11/2014"}, {"body": "wagenet pick open pr stay closed", "d": "11/2014"}, {"body": "stefanpenner ping", "d": "11/2014"}, {"body": "minor correction", "d": "11/2014"}, {"body": "looking current master code state discussion would vote make sortablemixin deprecated excluded arraycontroller removed opinions", "d": "11/2014"}, {"body": "would like burn fire", "d": "11/2014"}, {"body": "lightblade include version handlebars production build compile function brocfilejs documented", "d": "11/2014"}, {"body": "still solved ember seems returned ember", "d": "11/2014"}, {"body": "please retest ember old beta beta", "d": "11/2014"}, {"body": "solved setting observer asynchronous data manually setting value select via jquery pretty ghetto know could also work around making sure data need fetched hook route available template view rendered", "d": "11/2014"}, {"body": "yes back release", "d": "11/2014"}, {"title": "dragstart event properties screenx amp clientx missing", "body": "native eventlistener shows properties event jquery show properties event jquery stripoff properties nt understand happening", "num": "1890", "d": "11/2014"}, {"title": "datauri scripts insertion", "body": "js var documentcreateelement script ssrc data consolelog documentbodyappendchild output insert script jquery get error due jquery execute script ajax jquery append extra query params prevent script cache default fix simple set may pull pr way anyone knows jquery set inserted scripts inconsistent browser default behavior", "num": "1887", "d": "11/2014"}, {"title": "deprecate support plain objects", "body": "currently documented see working plain objects methods actually supported use basically trigger events set properties version deprecate wrapping arbitrary javascript objects way possible detect usages jquery migrate via", "num": "1886", "d": "11/2014"}, {"title": "gt selector broken used conjunction multiple elements", "body": "using selector table tr td gt n returned td greater n tr table returned td greater n table tr properly factored selection returned result please take minute see working example gt lt broken", "num": "1884", "d": "11/2014"}, {"title": "gt selector correctly acting elements", "body": "using gt selector tr td gt behavior expect row every td index greater however behavior getting td table index greater would expect gt lt preform like nthchild bug working intended jsfiddle example", "num": "1883", "d": "11/2014"}, {"title": "css height height", "body": "hi writing code found unexpected result sliderimagewidth lt amp amp sliderimagewidth gt sliderheight sliderimagewidth consolelog sliderheight running exact code console works properly could problem", "num": "1882", "d": "11/2014"}, {"title": "jquery cors based ajax request fails zombiejs", "body": "already posted issue around zombie boards using regular xhr granted cross browser etc works expected however using jquery ajax blows transport traced seems thrown line sure zombiejs apparently ignores preflights documentation something else got reproduction scenario log parts nodejs server provides cors responses jquery client page xhr client page zombie test runs scenarios xhr scenario works expected returns success jquery one blows transport client pages work fine browser chrome latest know jquery attempting hood invocation", "num": "1881", "d": "11/2014"}, {"title": "ajax options username password nt work reliably", "body": "jqueryajax purports support basic authentication via username password options however options simply passed directly xmlhttprequestopen worked fine safari failed chrome version mac os x yosemite likely due issue workaround", "num": "1878", "d": "11/2014"}, {"title": "animate ipad sleepresume", "body": "issue present ipad ios app uses jquery latest used position transition used showhide content app run homescreen icon animation runs expected app start ipad put sleep using power button woken sleep animation nt run although errors reported example code nothing sleepresume ipad happens fadeinfadeout animation simple jsfiddle demonstrating problem seems affect app running home screen icon run inside safari everything works expected", "num": "1877", "d": "11/2014"}, {"title": "", "body": "", "num": "1876", "d": "11/2014"}, {"title": "simplify ajax parsing using link element", "body": "currently use relatively complex regex parse url determine domain requests choosing correct transport culd use trick parsing url via element less hassle less code", "num": "1875", "d": "11/2014"}, {"title": "sizzle setdocument attaches infinite number unload listeners", "body": "problem description using jquery select elements inside iframe causes setdocument call per attaches unload event listener whenever used event eg onkeydown may generate big amount listeners cause bad performance listeners added adding new one would cause around ms browser ie js fiddle possible solution replace listeners duplicated", "num": "1874", "d": "11/2014"}, {"title": "getscript function deal east asian languages", "body": "asia sometimes load scripts encoded languages differ language current webpage getscript function simply call jqueryget function without pass scriptcharset infomation thus load script correctly rewrite getscript function could work much better demo", "num": "1873", "d": "11/2014"}, {"title": "safari returns incorrect css value topleftbottomright styles", "body": "element css values topleftbottomright position static return browsers returns actual pixel value however element absolute relative pixel value returned issue occurs css styles declared inline used markup test add absolute relative element work correctly html safari test test jquery version", "num": "1872", "d": "11/2014"}, {"title": "ca nt check unchecked", "body": "ca nt check one unchecked checkbox ok", "num": "1871", "d": "11/2014"}, {"title": "event called end work firefox", "body": "hello custom event end never happen firefox work well browsers", "num": "1870", "d": "11/2014"}, {"title": "distribute jquery jquerycompat jquerydist repo bower npm distribution", "body": "discussion", "num": "1869", "d": "11/2014"}, {"title": "evaluate available use dom element closest method", "body": "specification signature pretty close might beneficial use", "num": "1868", "d": "11/2014"}, {"title": "customevent property copied event object", "body": "according documentation least interpret property copied event object present ie event however seem case tried accessing nt see reference code either listed list workaround go would nice jquery copied property", "num": "1867", "d": "11/2014"}, {"title": "event handler added feature", "body": "like suggest handler executed per element event types given complex environment multiple input scenarios multiple touch apis differences behavior trigger first synthetic clicks bugs would allow something like processed without cancel events otherwise required past first trigger assess refiring handler necessary end event thoughts", "num": "1866", "d": "11/2014"}, {"title": "namespace method jsonp callback name", "body": "possible use namespace method callback name jquery var callback function windowmynamespace windowmynamespace windowmynamespacecallback callback ajax url datatype jsonp jsonp callback jsonpcallback mynamespacecallback success function alert success error function alert error server respense called get alert could use global function jsonp callback name", "num": "1865", "d": "11/2014"}, {"title": "make event triggering separate module", "body": "custom build nt need manually triggered events could save bunch bytes removing would mostly useful branch branch relies pretty heavily manually triggered events fix master manual triggering used create bubbling focusinout events fire ajax events approaches devs use situations", "num": "1864", "d": "11/2014"}, {"title": "data bug ff", "body": "think problem data method reproduced reproduce jquery branch limited testing sorry jsfiddle could get repro repro page html pasted bottom report open open console window load page load following written console dom ready somedata dom ready functions properly browsers click clickme following written console chrome ie click somedata click timeout somedata timeout written click timeout data seems fail ff data bug function consolelog dom ready consolelog somediv data somename consolelog dom ready somediv click function settimeout function consolelog timeout consolelog somediv data somename consolelog timeout consolelog click consolelog somediv data somename consolelog click clickme", "num": "1863", "d": "11/2014"}, {"title": "figure going tag jquery compat releases", "body": "version numbers match suffice", "num": "1862", "d": "11/2014"}, {"title": "css height removingresetting css attribute ignored ie chrome", "body": "morst recommended way removing css properties working properly esp provided sample simply ignored tested ie chrome latest", "num": "1861", "d": "11/2014"}, {"title": "dynamic function newest handler work", "body": "system windows chrome internet explorer jquery version demo bug stepbystep click add click blob click add click last blob click first blob bug", "num": "1860", "d": "11/2014"}, {"title": "wrap removes video texttracks length firefox", "body": "also reported mozilla first test mozilla second test nt sure track length wrap div length changes", "num": "1859", "d": "11/2014"}, {"title": "data documentation could wrong", "body": "following sentence could wrong undefined recognised data value calls data name undefined return corresponding data name therefore data name eldata key undefined returns el version version returns value key documentation says latest code looking arguments length test different versions", "num": "1858", "d": "11/2014"}, {"title": "css top returning wrong value safari", "body": "jquery version safari safari call css top element returning wrong value zoom working browsers css top returning safari sample run zoom", "num": "1857", "d": "11/2014"}, {"title": "hidden filter incorrectly includes visible elements", "body": "versions seem get wrong inline elements example anchors images inside chrome return offsetwidth offsetheight likely offsetwidthheight based working draft spec yet define css layout box well includes elements whose display property tablecolumn tablecolumngroup since current implementations offsetwidthheight browsers much performant getclientrectsgetboundingclientrect makes since use return nonfalsy values performant version function run function elem", "num": "1855", "d": "11/2014"}, {"title": "git describe tags nt return latest stable version", "body": "line readmemd following command suggested check latest stable version jquery particular meant return recent tag also last jquery version number nt work master branch returns far latest stable version even latest reachable tag problem tags version numbers generally made separate branches therefore unreachable describe command branching tagging system used jquery nt seem easy way get latest tag link also given different versions compat hard define one corresponds latest stable version suggestion would remove notion automatically getting latest stable version git command", "num": "1854", "d": "11/2014"}, {"title": "data key undefined behaving according documentation", "body": "states additional notes behave identically nt however former appears return object called reproduced using several current jquery versions", "num": "1852", "d": "11/2014"}, {"title": "jquery id selector id support almost arbitrary strings changes", "body": "according id attribute contain lot kinds characters specified jquery site corresponds case use id id though documentgetelementbyid id work id work", "num": "1851", "d": "11/2014"}, {"title": "readme incorrect grunt version command", "body": "line readme command grunt v suggested make sure grunt installed v option actually verbose mode one wanted v uppercase prints grunt version", "num": "1850", "d": "11/2014"}, {"title": "getscript", "body": "jquery version use getscript get script nt exist response status example throw error tested jquery nt throw error hope fix issue thanks", "num": "1849", "d": "11/2014"}, {"title": "updating coordinate object function form causes silent failure", "body": "jquery version browser chromium firefox os debian sid expected behavior move pixels somehow impossible jquery least raise error actual behavior jquery silently fails anything example", "num": "1848", "d": "11/2014"}, {"title": "function return true yields false", "body": "yields false yields true yields false yields false yields true sure working intended", "num": "1846", "d": "11/2014"}, {"title": "firefox offset top table changes caption transform", "body": "code uses css transforms make table header amp caption stick top page try get table caption transform set changes moving also dependent height caption created demo show problem please note transform applied caption element causes issue transforms cause problem changing height caption alters range value changes problem occurs firefox tested likely related issue table height include caption height ref", "num": "1845", "d": "11/2014"}, {"title": "wrapall acts like wrap passing function", "body": "hi noted passing function acts way either nt intended behavior take fixed intended behavior note relative page added link demo shows issue", "num": "1843", "d": "11/2014"}, {"title": "iframe memory leak nondetached click event", "body": "load jquery testing edge inside iframe alone reload content eg submiting dummy form could see memory leak compat really production legacy enterprise browser bad lines javascript divattachevent divattachevent onclick function supportnocloneevent false changing something like following memory leak dissapears test continues working espected sorry nonlinted code one known solutions wellknown issues iframes memory leaks events detach events garbage collection", "num": "1840", "d": "11/2014"}, {"title": "context passed promise next handler previous handler returns jqueryobject", "body": "create deferred resolve using handle promise handler return value attach another handler previous handler expect context handlers steps identical passed object step works value returned step nt jqueryobject jqueryobject returned step context step identical first argument received handler step issue hard explain better demonstrated simple example jqueryversion", "num": "1839", "d": "11/2014"}, {"title": "jqprint working version", "body": "took following files jquery application development printing content tag could able print content tag firefox google chrome browsers could able print content tag jqprint recently moved jqprint option working fine browsers version jqprint option working version could please resolve version incompatibility please note jqprint working fine firefox google chrome version also thanks amp regards hiranmayi", "num": "1838", "d": "11/2014"}, {"title": "remove support browsers dropped", "body": "jquery dropping opera safari lt jquery compat additionally ie lt dropped also removing workarounds old browsers officially unsupported like blackberry lt ios lt planned browser support jquery ie chrome firefox amp opera current current safari ios android jquery compat additionally support pr pr", "num": "1836", "d": "11/2014"}, {"title": "nt autoinsert tbody", "body": "talking breaking changes jquery inserts tbody appending empty table special behavior branch compat jquery revert behavior dropping ie lt", "num": "1835", "d": "11/2014"}, {"title": "using html method string contains amp param", "body": "hi using html method string contains amp param unexpected character shows page", "num": "1834", "d": "11/2014"}, {"title": "disconnected node actual conflicts docs", "body": "docs jquery also work disconnected dom nodes results following elements inserted closing tag according fiddle html body tested chrome firefox ie using jquery edge jquery edge see fiddle", "num": "1833", "d": "11/2014"}, {"title": "rename", "body": "urls nt make much sense recent rename call come mind already points sure want make url switch meaning thoughts", "num": "1832", "d": "11/2014"}, {"title": "permission denied iframe submitted jquery", "body": "case ie jquery select something iframe submit iframe form select something body iframe result permission denied reson haapens beacuase iframe document assigned document variable iframe reloaded ie throw permission denied error accessing document variable ie support defaultview property parent undefined fix sizzle function following condition context contextownerdocument context preferreddoc document setdocument context add following condition try document document catch err document windowdocument resets document permission denied errors including line code resolve error", "num": "1831", "d": "11/2014"}, {"title": "otherwidth true ie including border", "body": "ie otherwidth true return width wo border browsers ok", "num": "1829", "d": "11/2014"}, {"body": "stripping anything every property jquery puts event object copied read documentation query normalizes following properties crossbrowser consistency following properties also copied event object though values may undefined depending event help read docs ask help forums stackoverflow", "d": "11/2014"}, {"body": "see jquery event could told thought would main object", "d": "11/2014"}, {"body": "guess logical support kind stuff seems fix pretty easy say yes pr would cool nt forget read contribution guide anyone knows jquery set asyncfalse inserted scripts wonder deviate spec remember discussion nt remember specifics cc", "d": "11/2014"}, {"body": "problem long time ago used xhr synchronously people started depend creating htmlscripttag hybrids expected script run right html injected document able something change fulltime script tag extracting scripts html fragment still allows nt guarantee synchronicity fine", "d": "11/2014"}, {"body": "dmethvin seems could change conform dom behaviour want concerns perspective logic", "d": "11/2014"}, {"body": "ok historical thanks dmethvin", "d": "11/2014"}, {"body": "nice", "d": "11/2014"}, {"body": "please nt create new issues closed identical previous one duplicate", "d": "11/2014"}, {"body": "achieved functionality looking selector tr td nthchild", "d": "11/2014"}, {"body": "looking help using jquery please check forum stackoverflow bug tracker correct place ask questions", "d": "11/2014"}, {"body": "asking question selector gt broken", "d": "11/2014"}, {"body": "okay well true based original description sure wrong ask help forum", "d": "11/2014"}, {"body": "yes looks intended please read ask forums nt understand bug", "d": "11/2014"}, {"body": "please ask help forum determine behavior bug post test case thanks", "d": "11/2014"}, {"body": "never tested zombiejs nt support nt behave like browser would nt surprising jquery use xhr transport crossdomain requests object indicates supports cors guess perhaps need set indicate zombiejs fake xhr object supports cors nt really triage zombiejs determine nt browserlike close ticket meantime reopen something needs done", "d": "11/2014"}, {"body": "well listed original issue raised zombie board also got reproduction scenario shows working normal xhr object working jquery ajax tried explicit seems fixed actually behind scenes much information setting setting cors based options actually", "d": "11/2014"}, {"body": "standard xhr object property indicating perform cors missing xhr still perform crossdomain requests setting override common situations phonegapcordova crossdomain restrictions enforced sounds like things sorted far jquery goes", "d": "11/2014"}, {"body": "please provide test case", "d": "11/2014"}, {"body": "probable duplicate also see let us know otherwise reopen", "d": "11/2014"}, {"body": "test see fixes problem switched using next release may affect improve results", "d": "11/2014"}, {"body": "problem persist latest jquery version please describe reproduce issue mobile safari", "d": "11/2014"}, {"body": "tested latest issue still persists happening mobile safari part set simple test page demonstrate issue open mobile safari load page try tapping animate button see animation safari tap share button choose add homescreen tap add popup close safari pressing home button ipad tap newly added icon home screen wait load takes bit time reason test animation tapping animate button app still open press power button ipad put sleep press power button ipad wake sleep slideenter unlock code needed app still open tap animate button nothing happens screen html page fully selfcontained includes css javascript required apart jquery naturally save source necessary code", "d": "11/2014"}, {"body": "dmethvin test see fixes problem nit please point people instead instead trying deprecate former ones remember", "d": "11/2014"}, {"body": "thanks opening issue confirmed", "d": "11/2014"}, {"body": "method simple subset functionality need additional options available use could either duckpunch better create new name note option applies tag used fetch content samedomain requests may used", "d": "11/2014"}, {"body": "properties applicable positioned elements", "d": "11/2014"}, {"body": "well bug chromeff return pixel values safari", "d": "11/2014"}, {"body": "guess open interpretation noted documentation use side note nt confusion note computed style element may value specified element style sheet return computed value case computed value applicable property say safari right", "d": "11/2014"}, {"body": "nt use set dynamic state checkbox use plenty documentation internet look words bold please ask help stackoverflow issues sure bug", "d": "11/2014"}, {"body": "sounds like would happen without jquery report firefox bug need test case reproduce nt provide test case shows problem occurs jquery reopen ticket", "d": "11/2014"}, {"body": "without jquery work firefox coffee onend playercontainerremoveeventlistener end onend done", "d": "11/2014"}, {"body": "test case yet please provide one jsbincom", "d": "11/2014"}, {"body": "could use cases selector jquery selector extensions suppose could try validate calling selector string seeing throws use dom method nt maybe call dom directly wrap trycatch given crappy performance usually newer methods would worth benchmarking see worth effort", "d": "11/2014"}, {"body": "could use cases selector jquery selector extensions unless accepted", "d": "11/2014"}, {"body": "yep suspect pitfalls like would like see something like resolution issue", "d": "11/2014"}, {"body": "elemclosest chrome canary amp dev coming beta wink", "d": "11/2014"}, {"body": "yep created issue", "d": "11/2014"}, {"body": "waaay ahead nyahnyah stuckouttonguewinkingeye", "d": "11/2014"}, {"body": "p tue nov pm dave methvin notifications githubcom wrote waaay ahead nyahnyah image stuckouttonguewinkingeye reply email directly view github", "d": "11/2014"}, {"body": "thanks report could create minimal example micha\u0142 go\u0142\u0119biowski", "d": "11/2014"}, {"body": "example", "d": "11/2014"}, {"body": "seem two documented properties copied idea listed removed overhead copying properties hesitant add say available either update docs remove preferred route add note adding wo nt help anyone next release anyway docs would nt correct asis unless put note like added jquery", "d": "11/2014"}, {"body": "problem recently project initially assumed property present thought realized jquery already custom way handle using property since property standard way pass data triggered callback without using jquery makes sense available original event hand callback portable native jquerybased environments portability something considered case dealing event triggered third party nt use jquery", "d": "11/2014"}, {"body": "property normalized jquery accessed via plenty special ones used one two events copying jquery something want keep minimum since real costs timecritical section code accessing value nt cause problem", "d": "11/2014"}, {"body": "mentioned case particular problem code portability ported event handling callback another codebase initially expected would work without changes jquery environment using ui widget factory happened instead change big deal though performance issue updating docs seems reasonable", "d": "11/2014"}, {"body": "say looks like plugin core feature jaspermdegroot gseguin input", "d": "11/2014"}, {"body": "rationale adding core code already part would involve small alias function gzip friendly near clone variables added seems low cost compared plugin somewhat heavy code duplication comparison", "d": "11/2014"}, {"body": "nt forget documentation eternal support prefer see start plugin popular enough add usually turns things nt popular enough justify adding bytes documentation policy years ago things like methods would plugins well library would smaller", "d": "11/2014"}, {"body": "mention provided example could solved pointer event polyfill", "d": "11/2014"}, {"body": "scottgonzalez example short brief one probably would nt never mix together referring context approaching multiple inputs things fastclick little differently currently seen practices short choose bind start events elements could undetermined small delay associated caveats namespaces current assessment reduces code base involve less bindings whole document leading better initial binding performance well arguably less prone bugs namespace constraints removed lower overall footprint preferred approach moment concrete example much code reduced time nt seem justify cost plugin example felt need little value plugin though agree ought vetted popularity use usefulness contexts", "d": "11/2014"}, {"body": "think good example semantics may clear people clarify things requires documentation people start wonder doubt semantics confusing multiple elements multiple events per element given time machine best solution may implemented core library semantics nt useful majority people given implemented changing semantics might break things best guard featureitis future", "d": "11/2014"}, {"body": "policy years ago things like wrap methods would plugins well library would smaller given time machine best solution may one implemented core library semantics nt useful majority people totally offtopic target version maybe time deprecateremove methods core", "d": "11/2014"}, {"body": "totally offtopic target version maybe time deprecateremove methods core developers likely impacted ones using singlefile jquery cdn removing seems unnecessarily cruel developers want smaller version without always build one plan make easier upcoming release", "d": "11/2014"}, {"body": "make sense thanks", "d": "11/2014"}, {"body": "dmethvin agree confusion even conceivable current usage devs understood suggested initial mis understanding anyway implement today semantic would probably reversed", "d": "11/2014"}, {"body": "support feature would mean adding relatively ugly big amount code pretty little gain sorry cc jaubourg", "d": "11/2014"}, {"body": "repo steps failed machine everything worked correctly continue investigate consistently repro failure machines", "d": "11/2014"}, {"body": "seems work properly sure nt due addon works consistently older ff report bug", "d": "11/2014"}, {"body": "actually looks like may interaction jquery version firebug investigate tomorrow", "d": "11/2014"}, {"body": "okay close ticket turns jquery bug reopen based already said nt think", "d": "11/2014"}, {"body": "yeah sorry hate tool using debug actually causing problem", "d": "11/2014"}, {"body": "close actually bug firequery plugin firebug try contact author plug let know", "d": "11/2014"}, {"body": "cc jquerycore", "d": "11/2014"}, {"body": "hmmm good question guess could something similar note value also need unique could well suppose already put stuff version number custom build", "d": "11/2014"}, {"body": "guess could similar note value also need unique could well suppose people need able distinguish programatically", "d": "11/2014"}, {"body": "new name matching versions suggest time move new repo instead continuing use branch", "d": "11/2014"}, {"body": "friday november scott gonz\u00e1lez notifications githubcom wrote new name matching versions suggest time move new repo instead continuing use branch separate bug trackerspull requests repos due much code shared branches would nt desired imo micha\u0142 go\u0142\u0119biowski", "d": "11/2014"}, {"body": "separate bug trackers pull requests actually good thing share bugs denying separate bugs already need separate pull requests", "d": "11/2014"}, {"body": "share bugs first glance actually share already need separate pull requests true", "d": "11/2014"}, {"body": "lot common code generally cherry pick things across without conflicts prefer one repo two branches", "d": "11/2014"}, {"body": "git cherrypick different repos different repos different branches conflicts always possible", "d": "11/2014"}, {"body": "first glance actually share could mention issue different repository commit amp pullrequest still", "d": "11/2014"}, {"body": "already need separate pull requests actually nt true time usually cherrypick squashed commit onto rather force separate prs occasions changes big enough beg separate prs often ones making kinds changes anyway prefer one repo", "d": "11/2014"}, {"body": "timmywil understood trivial observation pr target branches time agree time cherrypick unless sth rewritten module touching lot code tagging jqueryrelease need update able tag rest simple", "d": "11/2014"}, {"body": "true pr ca nt target two branches timmywil says often pretty trivial cherry pick without pr usually get hung differences internal implementation hope fix", "d": "11/2014"}, {"body": "tagging jqueryrelease need update able tag rest simple need update tags since everything based versions keep mind semver means prerelease", "d": "11/2014"}, {"body": "use build metadata", "d": "11/2014"}, {"body": "keep mind semver means prerelease going keep branches repo seems team favors solution tags semver versions anyway want make clear semver always tag guess", "d": "11/2014"}, {"body": "hmm realised one repo amp versions wo nt likely fly bower dislike support npm amp bower", "d": "11/2014"}, {"body": "would nt two packages bower well", "d": "11/2014"}, {"body": "would nt two packages bower well two packages two repos", "d": "11/2014"}, {"body": "would nt two packages bower well yes bower tied repositories pointed takes versions tags means use impossible", "d": "11/2014"}, {"body": "ok yea bower require separate repos multiple components maybe clinches", "d": "11/2014"}, {"body": "two packages two repos seems nt really choice could still disable issues gets kept one place prs ok local branches track also make main branch reduce confusion", "d": "11/2014"}, {"body": "bower needs distribution nt need develop", "d": "11/2014"}, {"body": "bower needs distribution nt need develop true suppose option pushing compat distribution separate repo", "d": "11/2014"}, {"body": "option pushing compat distribution separate repo likely quite difficult achieve unless push branch separate repo well duplication would confusing outsiders rather one place", "d": "11/2014"}, {"body": "likely quite difficult achieve nt think would difficult enough write duplication would confusing outsiders outsiders already confused would nt ones distributiononly repos", "d": "11/2014"}, {"body": "outsiders already confused would nt ones distributiononly repos else", "d": "11/2014"}, {"body": "nt way jquery bower took", "d": "11/2014"}, {"body": "think prefer option none us want spend time migrating issues one repo creating duplicate issues cases affect means probably want disable issues compat repo problematic nt think possible autoclose issues another repo ie commits compat repo would nt autoclose issues master repo much overhead comes two development repos", "d": "11/2014"}, {"body": "nt way jquery bower took yes whole org modules managed owners though one example angular etc funnily enough repo publishing npm well", "d": "11/2014"}, {"body": "else top head think angular lodash", "d": "11/2014"}, {"body": "nt think possible autoclose issues another repo write though", "d": "11/2014"}, {"body": "actually like idea separating development repo distribution repos mixing two always seemed icky", "d": "11/2014"}, {"body": "actually like idea separating development repo distribution repos would also want separate bower distribution repo mixing two always seemed icky already process", "d": "11/2014"}, {"body": "nt way jquery bower took different reasons see point uncommon weird moreover preferable think good way go btw guess github replacement jquerymeeting channel huh", "d": "11/2014"}, {"body": "btw guess github replacement jquerymeeting channel huh ha email", "d": "11/2014"}, {"body": "topic pretty much crazy maybe use github meetings like create special repo use issues meetings", "d": "11/2014"}, {"body": "topic pretty much crazy maybe use github meetings like create special repo use issues meetings", "d": "11/2014"}, {"body": "well bit exception little chatty typically still good discussions somewhere make progress missed meetings lately beers", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "tbh ideal solution would separate repos bower packages create detached tags npm handle nondetached ones easily fact nt care tags git publishing said every change would affect jqueryrelease way probably need good reason everything", "d": "11/2014"}, {"body": "mzgol agree separate repos distribution seems like best approach development repo nt position pull without build process anyway seems like want publish bower npm new repos arguments approach", "d": "11/2014"}, {"body": "dmethvin still need figure integrate jqueryrelease process", "d": "11/2014"}, {"body": "mzgol let cross bridge come unless projects want things way may need change anything jqueryrelease use take regardless think particular issue resolution opened new one implementing distribution process", "d": "11/2014"}, {"body": "regardless think particular issue resolution think still want tagging original repo regardless release bowernpm need settle tag ok everyone", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "works understand oracle semverorg version compat build would something like mouthful long works good reality nt think cause confusion two different distribution repos", "d": "11/2014"}, {"body": "understand oracle semverorg version compat build would something like mouthful long works good need ensure account way easy append prefixes wrong order unless use npm semver package work us reality nt think cause confusion two different distribution repos yes mentioned still need tag branches original repo sth decided", "d": "11/2014"}, {"body": "thought think looks weird seems compat build version definitely nt match unless always plan release betaspatch releases time branches nt want rely reopening issue since still discussing", "d": "11/2014"}, {"body": "nt think real issue first nt really matter tag public consumption ones need know refers version compat branch independent master second unless someone offers better option let consider resolved", "d": "11/2014"}, {"body": "think okay distribution repo say tagged ambiguity repo regarding value may contain tokens beyond custom build", "d": "11/2014"}, {"body": "sounds good", "d": "11/2014"}, {"body": "plan development files including gruntfile amp friends repos people build versions otherwise tags wo nt us", "d": "11/2014"}, {"body": "value value jquery compat tag definitely public consumption", "d": "11/2014"}, {"body": "plan development files including gruntfile amp friends repos people build versions example headless tag guess answer yes since separate repo worried committing much stuff could commit nodemodules suppose smilingimp someone wants create different repo built files nt want amd files nt want custom build want minified monolithic file someone could job package managers really start bug value jqueryfnjquery jquery compat think would problem think tag release jquerycompatdist repo would match one master suppose means release historically case worse case release new version changes keep versions sync suggestions welcome", "d": "11/2014"}, {"body": "plan development files including gruntfile amp friends jquery compat dist repos people build versions otherwise tags jqueryjquery wo nt us discussion issue nt need include building assets distributing nt actually build folder ignored npm bower continue include src folder tag definitely public consumption ok barely sure making mountain mole hill think would problem unless better solution hope move", "d": "11/2014"}, {"body": "ok let call resolved", "d": "11/2014"}, {"body": "passing empty string remove styling applied earlier via value stylesheets latter case need explicitly overwrite desired css cascade works think docs unclear happening please open issue pointing specifically misleading text", "d": "11/2014"}, {"body": "yes css resolved renderer sense harmonization would expected jquery reset css attribute default value instead nothing explicit call repeat explicit call specific element applies nothing makes change dom hand effect really intended take proposal change behaviour applying nothing applying inlining canonical unified whatever default value cause expect trying overwrite css attribute decent call", "d": "11/2014"}, {"body": "oh implies another way removing css like removecss method hmm", "d": "11/2014"}, {"body": "rewriting contents container handlers lost bug please use forums stack overflow help", "d": "11/2014"}, {"body": "elements nt lost firefox definitely losing references via nt jquery bug something jquery fix", "d": "11/2014"}, {"body": "ok thanks taking look", "d": "11/2014"}, {"body": "syxton could report mozilla unless one already exists post link bug", "d": "11/2014"}, {"body": "", "d": "11/2014"}, {"body": "thanks", "d": "11/2014"}, {"body": "duplicate filed", "d": "11/2014"}, {"body": "see something hard fix fixable", "d": "11/2014"}, {"body": "little complex potentially returns noninteger value caused problems existing code expecting integer values returns considering version though see bad slow", "d": "11/2014"}, {"body": "well worth written replacement hidden filter defaults performant test pull results", "d": "11/2014"}, {"body": "thanks report could use npm api query latest version scrap probably better remove automatic way described record using detached tag technique bower nt support something repository npm would nt problem", "d": "11/2014"}, {"body": "think users explicitly choosing version think go away well said give recently tagged version worth noting existing command based date based versions recent tag necessarily current version get correct value time need sort version numbers definitely scope readme though simple nodesemver", "d": "11/2014"}, {"body": "seeing consensus replacement text create custom build first check version want customize brackets follow custom command description syntax", "d": "11/2014"}, {"body": "brackets follow custom command description syntax man page though sure context clear maybe create custom build first check version want customize jquery version want customize", "d": "11/2014"}, {"body": "related", "d": "11/2014"}, {"body": "sounds good", "d": "11/2014"}, {"body": "want file pull request change", "d": "11/2014"}, {"body": "cc rwaldron", "d": "11/2014"}, {"body": "looks like mistake docs tests assert jquery instance object returned allow chaining moving", "d": "11/2014"}, {"body": "query arbitrary ids provided properly escape css identifiers", "d": "11/2014"}, {"body": "fixed thank", "d": "11/2014"}, {"body": "ca nt reproduce could create example showing problem start", "d": "11/2014"}, {"body": "able reproduce ie jquery trying fetch existing script file working fine firefox ie trying fetch non existing script file firefox getting expected ie showing syntax error instead case jquery code used replicating bug", "d": "11/2014"}, {"body": "run chrome example see returning success script obviously nt know server might returning could return status put sample server retrieves server", "d": "11/2014"}, {"body": "closing due inactivity", "d": "11/2014"}, {"body": "begin pgp signed message hash weird one line making whole thing go bad ca nt figure updated jsfiddle using nightly build begin pgp signature version gnupg ivvx end pgp signature", "d": "11/2014"}, {"body": "second argument current position element modified could either fix doc notes oneliner module dmethvin", "d": "11/2014"}, {"body": "see lure modifying incoming position object seems like allow", "d": "11/2014"}, {"body": "thanks opening issue work expected due behavior render selection nothing check", "d": "11/2014"}, {"body": "duplicate think words hard problem", "d": "11/2014"}, {"body": "yes cicumstances starts acting like confusion shows pass funarg shows us two paths either could try squeeze method taken advantage similarity could change logic method funarg argument execute passed function could clarify docs also already mentioned although indirectly dmethvin", "d": "11/2014"}, {"body": "case would nt mind adding couple tests methods", "d": "11/2014"}, {"body": "begin pgp signed message hash look code happening looping element pass return value function passing index element argument function individually element docs seem match behaviour syntax section top made clear examples begin pgp signature version gnupg end pgp signature", "d": "11/2014"}, {"body": "really dislike function arguments methods sure seemed like nifty little addition api time causes much pain bloat markelog aurelioderosa think seems like enough edge case could document current behavior refactoring much pain like years", "d": "11/2014"}, {"body": "think could start mentioning issue documentation people aware different behavior dmethvin said see break compatibility older code said edge case think developers using method passing function based code needed fix issue wo nt result increase size jquery source proceed", "d": "11/2014"}, {"body": "think could go either way around corner could break backcompat make methods consistent increase size although much could document decrease size exploiting similarity", "d": "11/2014"}, {"body": "good point relatively small back compat break would right time let go ahead call bug fix", "d": "11/2014"}, {"body": "okely dokely", "d": "11/2014"}, {"body": "page would equal cool", "d": "11/2014"}, {"body": "yes think new interpretation function nt called set empty suppose", "d": "11/2014"}, {"body": "function nt called set empty suppose add tests seems tests funarg argument method add", "d": "11/2014"}, {"body": "create issue docs migrate", "d": "11/2014"}, {"body": "many iframes create make real problem", "d": "11/2014"}, {"body": "pages iframe indexhtml leakhtml html cerrar function navigate var form documentcreateelement form documentbodyfirstchild formappendchild documentbodyfirstchild documentbodyappendchild form formsubmit", "d": "11/2014"}, {"body": "right one taking lot memory", "d": "11/2014"}, {"body": "onclick perform submit reload inner page see memory leaks open real click button could see ie memory process grows grows download development edge jquery sourcecode modify lines posted first post reopen test modified version see memory leak dissapears problem lines code creating one node attaching event function contains closure variable reference without detaching later wich well known even documented issue see closures section", "d": "11/2014"}, {"body": "something similar removed code also removes binding cloned div necessary simply unbinding original div happen fix issue", "d": "11/2014"}, {"body": "necessary according microsoft documentation remove attached events parentless nodes piece jquery code simple test detect browser able clone node also attached events detach transparent fully functional backwardcompatible", "d": "11/2014"}, {"body": "yes seem like elements would need event handler detached case code referred preventing memory leak since cloned element still handler bad nt good way automated tests issues", "d": "11/2014"}, {"body": "workaround return resolved promise containing return value step replace", "d": "11/2014"}, {"body": "promisealike method returns new deferred existing one expect", "d": "11/2014"}, {"body": "expect method return new deferred nt expect objects different b returns jqueryobject remain identical returns value object", "d": "11/2014"}, {"body": "jquery object promise method looks like resolved promise value passed subsequent see example", "d": "11/2014"}, {"body": "right object containing function returned handler change context think condition function called promise insufficient reworked least behavior documented", "d": "11/2014"}, {"body": "returning nonpromise objects function called promise trying understand use case", "d": "11/2014"}, {"body": "assuming change easily fixed defining function nt like lots code example beginning comment imho easier understand better readable", "d": "11/2014"}, {"body": "cc jaubourg", "d": "11/2014"}, {"body": "harder part passing really happen something like stop caring entirely pass along without much change write code would think tricks jquery little dangerous promises reliable chains", "d": "11/2014"}, {"body": "given trying align promisea promises think documentation say users depend value inside handler promisea writeup says must called functions ie value", "d": "11/2014"}, {"body": "like idea passing context allows pass information promise subsequent handler whereas handlers dealing information example", "d": "11/2014"}, {"body": "please provide complete reduced test case jsbin help us assess ticket start", "d": "11/2014"}, {"body": "actually mention problem function outside jquery core report issue jqprint authors", "d": "11/2014"}, {"body": "dmethvin would good ticket needs review label also behavior nt needed supported browsers let drop", "d": "11/2014"}, {"body": "recall markelog trying remove early days jquery resulting removed safely", "d": "11/2014"}, {"body": "think done done officially dropping cleanly cherrypick change branches", "d": "11/2014"}, {"body": "good call", "d": "11/2014"}, {"body": "thanks opening issue however way browser parses string using related jquery bypass inserting html ampersand", "d": "11/2014"}, {"body": "thank reply", "d": "11/2014"}, {"body": "docs bit confusing point code works documented due changes applied docs note section quoting prior jquery would attempt add change nodes current jquery set first node set connected document cases return new jquery set rather original set method might might returned new result depending number connectedness arguments jquery replacewith always return original unmodified set attempting use methods node without parent neither set nodes contains changed section disconnected nodes documentation removed since functionality existed nt work reliably docs bug closing ticket", "d": "11/2014"}, {"body": "fixed docs", "d": "11/2014"}, {"body": "right also copied file nt see problem though nobody using file production good compat branch master", "d": "11/2014"}, {"body": "ok update jenkins scripts", "d": "11/2014"}, {"body": "scripts updated also moved compat jobs use branch renamings hard existing files currently point obsolete files funny points version", "d": "11/2014"}, {"body": "let leave place announce deprecated replaced new files blog post put together list big changes jquery next weeks", "d": "11/2014"}, {"body": "let leave place temporarily readd publishing jquery builds additionally jquery compat builds additionally leave currently", "d": "11/2014"}, {"body": "btw need contact jsfiddle jsbin etc change references point files perhaps good continue publishing old endpoints additionally new ones untill announced people still easily test newest builds git", "d": "11/2014"}, {"body": "agreed hurry removing old files keep date old names", "d": "11/2014"}, {"body": "alright done mirrors mirrors need check various fiddles make sure nt rely map done envision announcing filename changes", "d": "11/2014"}, {"body": "thanks opening issue please provide reduced test case ideally help us assess issue", "d": "11/2014"}, {"body": "sounds like either ca nt fix close assuming duplicate something new feel free reply reopen", "d": "11/2014"}, {"body": "sorry mistake", "d": "11/2014"}, {"body": "nice beer changetip", "d": "11/2014"}, {"body": "thank guys works fine case see message full tests user solution good", "d": "11/2014"}, {"body": "ok sounds like workable solution nt frequently encountered problem close ticket resolved", "d": "11/2014"}, {"body": "turns still need hack android missed since works correctly android oo pr", "d": "11/2014"}, {"body": "close ticket keep list manageable doriantaylor want discuss things would good place", "d": "11/2014"}, {"body": "fair nt circled back around yet probably wo nt able touch couple weeks least", "d": "11/2014"}, {"body": "encountered similar issue well exists latest version jquery want immediate fix using contenttype property set contenttype seems fix", "d": "11/2014"}, {"body": "dmethvin android version samsung ace delete request cached also cache false option created small test case", "d": "11/2014"}, {"body": "confirmed breaks android works reopening thanks getting back issue new tracker knobli", "d": "11/2014"}, {"body": "hmm actually every delte request fails android fiddle second latter ones observe different behavior knobli", "d": "11/2014"}, {"body": "scenario thought might cause trouble handler clean resources request called deferred resolves expecting activity resource actually still receive progress notifications guess nt walked implications see might happen", "d": "11/2014"}, {"body": "exact problem add new handler talking actively adding callback call already attached callbacks wo nt happen usecase pretty safe handler already attached wo nt called ever hand handlers added postresolution called lose ability know actual progress state deferred take example upload end progress handler never called upload already progressed status deferred nt change progress advancement deferred resolved upload still progression however actually dictate progress advanced since calls notify ignored upload progression forever", "d": "11/2014"}, {"body": "okay convinced think issues like promises punted progress", "d": "11/2014"}, {"body": "ran issue going agree teasealancs looks like specification needs rethought updated nt seem palatable fix current dom methods", "d": "11/2014"}, {"body": "discussion last year", "d": "11/2014"}, {"body": "hi guys eta", "d": "11/2014"}, {"body": "marked next release months would like take pretty simple fix would need relatively small addition far unit test goes", "d": "11/2014"}, {"body": "thanks want track glad know pipeline", "d": "11/2014"}, {"body": "makfruit take jsbin modify show nt set reproduce problem reduced test case", "d": "11/2014"}, {"body": "discussion", "d": "11/2014"}, {"body": "pr looks good", "d": "11/2014"}, {"body": "affects lot modules sticky sidebar visibility mess ie needs fix implementation well", "d": "11/2014"}, {"body": "jlukic set specific suggestions browser makers fix advocate agree mess code sizespeed issue worried well make always climb tree element ignore dom property", "d": "11/2014"}, {"body": "appears open issues spec chrome team response looks like nobodies decided", "d": "11/2014"}, {"body": "migrated sizzle issue jquerysizzle", "d": "11/2014"}, {"body": "looked code actually using css microsoft made quite confusing note quotes css stylesheet map property property dom element using property distinction nt matter issue nt anything distincion", "d": "11/2014"}, {"body": "seems opacity filter nt cover children unless children defined unfortunately beyond scope since control descendants added element applying opacity could try cater existing ones sure worth hacking much browser works think btw dmethvin probably labels wontfix etc otherwise hard say issue fixed closed", "d": "11/2014"}, {"body": "agreed nt seem like something could address involves dynamic structure document", "d": "11/2014"}, {"body": "get soon", "d": "11/2014"}, {"body": "mikesherov get review", "d": "11/2014"}, {"body": "timmywil since involves jqueryrelease take one get", "d": "11/2014"}, {"body": "fixed via", "d": "11/2014"}, {"body": "fixed via previous commit landed incorrect branch", "d": "11/2014"}, {"body": "pr merged", "d": "11/2014"}, {"body": "dropping support ie lt stop adding zoom body", "d": "11/2014"}, {"body": "referred back internet explorer team address suspect resolution ie adopt safarichromefirefox behavior hopefully clarify standard", "d": "11/2014"}, {"body": "markelog removing recursion added bytes nt seem increase performance perhaps implementation could improved", "d": "11/2014"}, {"body": "wow unsettling check closely", "d": "11/2014"}, {"body": "thank chris good result", "d": "11/2014"}, {"body": "believe misconfigured according jsperf faq referenced benchmarkjs documentation run outside test test cover many code invocations test latter link particularly illuminating point actually tested every case various signatures element matching handlers since first code invocation test would pulled underneath subsequent attempts", "d": "11/2014"}, {"body": "might mean original test misconfigured", "d": "11/2014"}, {"body": "seeing amp run times two test cases pretty sure test gets many test loops", "d": "11/2014"}, {"body": "samples test loop events perf amount much lower means one test execution measured correctly others nt words still shows problem nt give precise numbers common mistake checked thoroughly jdalton mathiasbynens right", "d": "11/2014"}, {"body": "way jsperf works setup run clocked test loop ran something like removing elements want ensure test right number elements remove setup tear access loop count via use create number events elements whatever removed drag overall responsiveness harness tests heavy setup experimentation needed see good fit test", "d": "11/2014"}, {"body": "jdalton btw possible weaken spam filter middle creating correct test blocked spam filter problem raise couple times us like", "d": "11/2014"}, {"body": "possible weaken spam filter pain real looking moving github authentication could use help pr", "d": "11/2014"}, {"body": "pain real try help get free time back business chrisantaki could redo tests", "d": "11/2014"}, {"body": "sure markelog move test cases run every loop", "d": "11/2014"}, {"body": "check link previous comment could", "d": "11/2014"}, {"body": "sounds good nice catch", "d": "11/2014"}, {"body": "branch bytes chrome firefox jsperf jquery amp amp link namespaceregex bytes amp amp link eventremovewithoutrecursion bytes amp amp link units opssec values amp perhaps jsperf checklist could benefit future discussions memory leaks prevented use method must done per test loop must use help target specific iterations", "d": "11/2014"}, {"body": "least chrome looks like removing event namespace faster removing individual event", "d": "11/2014"}, {"body": "yes surprised make tests verify", "d": "11/2014"}, {"body": "really like thorough analysis wish prs regex version end nt look big really adds much benchmarks nt making strong case change", "d": "11/2014"}, {"body": "agreed dmethvin ready move namespace based removal nt bad shape like originally suspected", "d": "11/2014"}, {"body": "best patch one nt change anything thank chris", "d": "11/2014"}, {"body": "online builder answer think question purpose problem really solving online download builder target users", "d": "11/2014"}, {"body": "people want custom builds look githubcom example using custom build ember work small subset well pretty advanced users though hypothesis requiring user pull whole repo possibility dependencies broken since time released understanding grunt command line options custom build work users willing go could right still wo nt people looking sure determine without building", "d": "11/2014"}, {"body": "dave thanks answers completely understand agree people want custom builds although like dig little bit current hypothesis takes brazilian internet connection big ran developer currently allows one cherrypick whatever jquery piece need want improve numbers using download builder nt understand dependencies problem nt locked", "d": "11/2014"}, {"body": "goals tbd edit comment points clarified allow developers willing use cli understand grunt options use amd customize jquery provide stable freezed dependencies build environment obs goals going changed case decide distribute consumable modules instead monolithic like ui mobile globalize", "d": "11/2014"}, {"body": "nt understand dependencies problem nt locked specify concrete versions direct dependencies dependencies dependencies vague control break future way control would use many ways broken even someone may unpublish version library depend break way sure would commit dependencies would boost repo size extremely every dev perfect solution", "d": "11/2014"}, {"body": "got thanks goals updated", "d": "11/2014"}, {"body": "rxaviers dependencies dependencies mostly wrote even someone may unpublish version library depend break scenario rare possible", "d": "11/2014"}, {"body": "simplified goals thanks", "d": "11/2014"}, {"body": "separate repo used download builder could shrinkwrap commit dependencies repo would need committed every release final betas agree tried committing dependencies publishing bower npm people would come us torches pitchforks since projects would massively bloated want one thing minified file", "d": "11/2014"}, {"body": "dependencies issue want point download builder falls problem developers using cli download builder fetch dependencies deploy exposed risks pointed broken unpublished dependencies difference manage download builder environment responsible provide fix somehow still need way prevent problem really think problem", "d": "11/2014"}, {"body": "mzgol use npm shrinkwrap many ways broken could point issue", "d": "11/2014"}, {"body": "markelog use npm shrinkwrap many ways broken could point issue top head generally creating mismatches causes silent failures ignores shrinkwrap file shrinkwrap project may cause trigger excessive network requests nt idempotent ad update dependency instead commit ensure installed exactly specified remove update package regenerate shrinkwrap file commit changes ad first list wanted avoid problem insert running special cleanup scrip point last list angular team sth like pretty sure making mistakes process amp fixing shrinkwrap pipeline believe involved process nt happened yet npm earliest", "d": "11/2014"}, {"body": "none matters shrinkwrapping time release would nt existing", "d": "11/2014"}, {"body": "wow synchronicity outlines problems proposes solution", "d": "11/2014"}, {"body": "unless plan make jquery metaproject ship smaller standalone libraries like think would great idea suggested solution slightly different problem hate thatguy frequently point handcrafted perlibrary build tools antipattern h andcrafted perlibrary build tools add complexity already complex problem one things say modularity javascript nearly every library consumer agrees vehemently people nt want ship code nt use one solution custom builds via build tools especially useful solution world globals dominant module system happen small dependency graph apps get complicated dependency graph grows custom builds start add rather subtract complexity example imagine library x really composed smaller parts ship x standalone package hear projects use parts use etc build tool lets one project define smaller subset x dependency begin combine multiple projects depend different subsets x run trouble let say project depends possibly ships project depends possibly ships leave consumer know need custom build eat cost shipping bits twice dependencies depend x likely ship gt mistake best idea heard resolving problem goes like author modules transpile builds support amd cjs retain modularity also ship globals build people prefer people need ship minimal code allow treeshake preferred module syntax supports treeshaking application build time instead library build time", "d": "11/2014"}, {"body": "module first approach monolithic build exception like sounds good trek nodebased tool chain would describe box", "d": "11/2014"}, {"body": "module approach core could take look globalize modules granular source files assembled functional groups similarly could jqueryjs base jqueryajaxjs jquerydeferredjs module approach pushing handcrafted build tools onto consumers using internally assemble consumabledist modules", "d": "11/2014"}, {"body": "jaubourg tooling exists several options one recommend integrating existing build process trivial sample one using broccoli repo example authoring small project transpiling amd cjs globals npm publishing also see readme info", "d": "11/2014"}, {"body": "note wanted made folder contain files authored modules would breaking change since publish npm would require bumping major version going seems like good moment one way compatible module formats would transpile amd commonjs put output files would make package larger surely make people complain size already thing consider", "d": "11/2014"}, {"body": "happy help however ember already using modules able everything else shake part application build process hugely valuable already tried gruntbased custom build back ran problem described say confidence would nt use custom build tool angular also module based imagine boat probably subset users would use build tool suggesting making small wrapper around real modules setup", "d": "11/2014"}, {"body": "one way compatible module formats would transpile amd commonjs put output files would make package larger surely make people complain size already thing consider chime place publish modules strongly urge reconsider putting compile source version control future versions sure keenly aware many annoying problems causes really love larger projects come together help bower solve us note wanted made folder contain files authored modules would breaking change since publish npm would require bumping major version going seems like good moment worry get today without breaking public api needing version bump start authoring modules somewhere else eg add src wo nt end version control add wo nt npm compile add pre postpublish scripts source source control github npm build npm source control nt contain built assets npm nt contain authoring files precisely demonstrates building notice nt appear anywhere source gitignored relevant entry entry points distcjsindexjs authoring code nt pollute npm npm ignored", "d": "11/2014"}, {"body": "also popular converter want author modules use language features", "d": "11/2014"}, {"body": "example using", "d": "11/2014"}, {"body": "arthurvr jaubourg seems jsbin commited try support even occasionally break still better jsfiddle situation though preview works unlike jsfiddle unless weird things see probably stop advising create examples jsfiddle favor jsbin", "d": "11/2014"}, {"body": "mzgol agreed", "d": "11/2014"}, {"body": "jsbin preview also nicer iframes preview jsbin appends link body way less likely break way", "d": "11/2014"}, {"body": "let us know problem still exists including html shiv", "d": "11/2014"}, {"body": "fiddle works fine browserstack see screenshot windows unable reproduce reported bug", "d": "11/2014"}, {"body": "guessing might issue ie vm native windows user help test", "d": "11/2014"}, {"body": "guessing might issue ie vm native windows user help test dmethvin", "d": "11/2014"}, {"body": "ie vm think nt difference ie vm real ie diff could versions different tomchentw could post ie versions mzgol could", "d": "11/2014"}, {"body": "could nt reproduce ie windows ie windows", "d": "11/2014"}, {"body": "mzgol could sure although afaik nt updated drastically lifetime works browserstack windows windows windows oh hoped browserstack updating often local machines windows image windows private windows copy installed via bootcamp run via parallels", "d": "11/2014"}, {"body": "tomchentw might mean policy restrictions browser", "d": "11/2014"}, {"body": "mzgol markelog clean installed yosemite took time reinstall modernie yes ca nt reproduce fiddle works perfectly however switch frameworks amp extensions run working issue ideas", "d": "11/2014"}, {"body": "however switch frameworks amp extensions jquery jquery run working issue ideas ahh silly basically actually points latest commit jquery version nt support ie lt recreate fiddle much responsive jsfiddle maintainers used already fixed links via pr please read context", "d": "11/2014"}, {"body": "ok click", "d": "11/2014"}, {"body": "windows via browserstack local vm getting errors logged windows via browserstack see error sorry fuss versions wasting everyone time remembered change made edit fixed responses pasted wrong ones", "d": "11/2014"}, {"body": "ok click run js thanks update updated first post thread point jsbin got result", "d": "11/2014"}, {"body": "btw jsfiddle fixed links amp names edge versions", "d": "11/2014"}, {"body": "wow great open source", "d": "11/2014"}, {"body": "could activex xhr nt cooperate cors least patch requests ideally would jquery compat xhr ie request local use activex one ie use native xhr using sth different use activex using one use native xhr right nice able without uasniffing", "d": "11/2014"}, {"body": "could always use native xhr crossdomain requests ie lt nt cors anyway people might rely crossdomain patch requests working via xdomainrequest understand correctly", "d": "11/2014"}, {"body": "shows error", "d": "11/2014"}, {"body": "sorry gone around bit want sure understand stands two comments mzgol correct summary", "d": "11/2014"}, {"body": "tomchentw summarize current state issue let us know whether still exists", "d": "11/2014"}]