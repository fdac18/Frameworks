[{"title": "ngrepeat fails collection identical elements passed", "body": "eg looped filter returns elements slice happens due items newcollection identical get index last causes", "num": "412", "d": "8/2014"}, {"title": "component problem dynamic data change", "body": "hi modified treeview sample added event onclick add change type object folder adding children seems working partially worked evaluated error undefined function upon adding children", "num": "411", "d": "8/2014"}, {"title": "release version", "body": "release version since released long time ago", "num": "410", "d": "8/2014"}, {"title": "suggestion add new option", "body": "", "num": "409", "d": "8/2014"}, {"title": "nested array ul help", "body": "hi man need help followed treeview sample confused last ul appends extra items nt", "num": "408", "d": "8/2014"}, {"title": "input text box multibyte string", "body": "tryed input multibyte string textbox site case could display multibyte string browser firefox chrome case ok case ascii string ok", "num": "407", "d": "8/2014"}, {"title": "suggestion set dom node", "body": "feature request suggest assign dom member like following example template html content vue dom nodedom documentfragment new vue el bar data content node dom node replace template usecase proposal usecase need insert dom node directly case append content sanitized using traversing", "num": "406", "d": "8/2014"}, {"title": "next", "body": "hi evan evaluating ko vue mithril leaning using vue upcomming projects wish proceed using next version wish possible html tags sample mvc structure ideas use next version kevs", "num": "405", "d": "8/2014"}, {"title": "suggestion reference dom node", "body": "already mentioned issue like gain access specific dom node without creating child vm needed close thought something like using parent vm like would approach use case appropriated directive made trick please tell think", "num": "404", "d": "8/2014"}, {"title": "suggestion nodejsside rendering", "body": "hello sorry impatient subject would like make suggestion implement nodejsside rendering would tested rendering jsdom bit came conclusion rather slow huge amount elements render time could reach seconds maybe would smarter implement separated templatepreparing engine maybe something similar ractive tohtml separated engine would much easier make system picking serversiderendered html browser ps thanks efforts really loved vuejs hoping use basis project absolutely able produce proper serverside rendering", "num": "403", "d": "8/2014"}, {"title": "callback called twice keypath watched watch statement time scoped child component", "body": "select different option alert box changed appear appears twice case able access jsfiddle code javascript html javascript var app selected options vuecomponent sub template var demo new vue el demo data app ready function watch selected function val alert changed var e documentgetelementbyid sval eaddeventlistener change function var struser eoptions eselectedindex value alert struser demo set selected struser false", "num": "402", "d": "8/2014"}, {"title": "vif", "body": "", "num": "401", "d": "8/2014"}, {"title": "feature stop dispatch propagation", "body": "would like ability stop propagation event upon dispatch right thinking callbacks optionally return true signal event longer propagated happy submitting patch acceptable option something vue wants framework thoughts", "num": "400", "d": "8/2014"}, {"title": "batching logic watch array events", "body": "assume vuejs purposely considers recent changemutation event given array within given nexttimerequestanimationframe splice immediately followed push push mutation event observed also conscious decision override array mutation events ie splice push etc recent changes observed items array something like vue observe push mutation event live example", "num": "399", "d": "8/2014"}, {"title": "vrepeat watch data", "body": "try watch item expect callback fired child modified change child fire children callback bug short example watch sample bug watch item sample maybe right", "num": "398", "d": "8/2014"}, {"title": "recursive template", "body": "hi evan could give example component recursive template data like", "num": "397", "d": "8/2014"}, {"title": "bind function vwith", "body": "want create component takes callback parameter able declaring function inside data parent passing component using vwith prefer declare function inside methods vs data since data requires bind also needs set ready callback otherwise undefined quite ugly better way", "num": "396", "d": "8/2014"}, {"title": "attached event longer works", "body": "relying attached event places code longer works latest version please see jsfiddle", "num": "395", "d": "8/2014"}, {"title": "unexpected delay two vtransition", "body": "stuck issue cause awkward pages transitions using poor memory devices tested ipad gen far translating fullviewport views vleave venter works fine desktop device delay reveal blank two views guess caused time takes ipad insert view dom tried multiple instead unfortunately behavior maybe shorter delay issue design mistake app pages transitions could link two vtransition wait avoid blank gap", "num": "394", "d": "8/2014"}, {"title": "question nexttick compiler ready hook", "body": "might related noticing lately vms hook called content accessible yet queryselector returning nullempty array offsetwidthheight returning sometime use access template elementproperties sometime even double nested needed wondering bug introduced never issue think happens without use partials cf referenced issue check work sure took look source noticed hook executed synchronously calls methods synchronous since manipulate dom nt understand behavior another question related ensures updates done calls callback since requestanimationframe settimeout fallback compiler fits updates process raf settimeout interval collection questions asking async stuff vue real issue would really pleased someone able enlighten", "num": "393", "d": "8/2014"}, {"title": "beforeupdate hook directives", "body": "trying find solution notified dom update takes place particular usecase integrating vue third party plugin also manipulated dom looking safe way ensure execution order vue renders dom lib initializes dom modification gt state update set lib uninitialize revert dom modification vue rerenders dom lib initializes dom modification tried use directive solves step looking something like inside directive handle proper way handle", "num": "392", "d": "8/2014"}, {"title": "empty data string converted object", "body": "created data property empty string value view used vif display element length created property higher using property input field shows looks like property converted string object fiddle issue fix behaviour", "num": "391", "d": "8/2014"}, {"title": "would best practices nested vrepeat", "body": "like use vrepeat like ngrepeat angularjs html tag however code nt work use filter convert js array like html tag", "num": "388", "d": "8/2014"}, {"title": "index seem attached alias", "body": "really like aliasing element within loop surprised work html item index itemname instead seem able use trouble specify context index loop within loop would seem access inner sensibly nearest context outer ones think allowing thank great library much appreciated daniel", "num": "386", "d": "8/2014"}, {"title": "access first parent vm generated directives", "body": "writing custom directives obviously return vm owns possible accessfind first parent vm generated directives create like vif instance like component manually instantiated vm instead", "num": "384", "d": "8/2014"}, {"title": "polyfills ie amp mobile browsers", "body": "difficult think", "num": "383", "d": "8/2014"}, {"title": "event handler changes", "body": "would like event component content tag changes component needs calculations based elements inside content element", "num": "382", "d": "8/2014"}, {"title": "filtered array shares index views", "body": "encountered strange problem value incorrectly set elements array seems occur array shared two views view value referenced computed property view b array filtered arbitrary subproperty put together clearest example could click one check boxes item selected however also see value view reflect index element filtered view b make another selection appears value computed reverts correct value thanks great library edit one additional note updated example reflect similar problem one originally use value tying together input label label temporarily incorrectly associate wrong input element demonstrate click cathy label watch strange selection behavior", "num": "381", "d": "8/2014"}, {"body": "dispatching custom dom events element using listen vue component events", "d": "8/2014"}, {"body": "dispatching custom events emit dom events yes using von listen vue component events gist von directive", "d": "8/2014"}, {"body": "think better dedicated dom events fact introduces new option", "d": "8/2014"}, {"body": "implement something similar new api example directive bind events js think user component interface easier use one directive dom level abstraction understand sometimes messy want mix dom events custom events", "d": "8/2014"}, {"body": "new option intended used component definition time js eg like keep markup totally write custom directive bind component events think better keep separate", "d": "8/2014"}, {"body": "yes known issue addressed", "d": "8/2014"}, {"body": "possible component instantiated ca nt change type changing data suggestion removing original object replace new one different type", "d": "8/2014"}, {"body": "similar approach sorry new vue", "d": "8/2014"}, {"body": "way idea behind problem dynamically add menu certain user time clicks function function fetches data propagate ui tree tree also propagated application modulesplugins removingreplacing whole index trivial doable need manually dumping temp var dumping index wanted show together items added modules nt handled already vue since replacing object properties adding nodesarrays observed ko straight forward index modification wish know point view suggest another thing without component approach", "d": "8/2014"}, {"body": "moved mithril", "d": "8/2014"}, {"body": "please patient complete rewrite currently complete also test coverage work officially released", "d": "8/2014"}, {"body": "\u80af\u5b9a\u4e0d\u53ef\u80fd\u628a jade \u5305\u88c5\u5728 vue browserify jadeify", "d": "8/2014"}, {"body": "hi trying", "d": "8/2014"}, {"body": "fixed", "d": "8/2014"}, {"body": "multibyte string example \u3042\u3042\u3042", "d": "8/2014"}, {"body": "opinion want new directive like bind children following vm databardiv element directly", "d": "8/2014"}, {"body": "hard understand nt misusing vue data", "d": "8/2014"}, {"body": "putting dom nodes data bad idea circular references probably looking something like", "d": "8/2014"}, {"body": "proposed introduce hatch manipulate dom nodes directly avoid mxss pitfall caused difference browser html parser nonbrowser based html parsers use treat html text fragment think cases need parse html text fragment dom subtree sanitize client side use purpose however must treat fragment string avoid mxss case would better treat directly putting dom nodes data bad idea circular references hmm resolve problem provide single way binding dom case probably looking something like feel proposal makes sense also think use convenience accept approach need iterate create list hand", "d": "8/2014"}, {"body": "hmm resolve problem provide single way binding dom case nt think dom node belongs intended data like specific hash holds dom references lile something like like make array dom references avoid overriding issue", "d": "8/2014"}, {"body": "like vref vrepeat make array dom references avoid overriding issue sounds good agree said thank discussion close issue duplicate", "d": "8/2014"}, {"body": "comparing apples amp oranges obviously ko vs vue compared provide binding html markup imho vue wins verbosity ko mithril quite different generates vue markup way optional syntax looks like old school js onclick etc", "d": "8/2014"}, {"body": "vue awesome", "d": "8/2014"}, {"body": "mean tags vue already supports using component custom tags component name must contain hyphen eg use", "d": "8/2014"}, {"body": "hi boussou actually comparing evaluating go one playing around vue likely happy yes using vue sorry yes supports already", "d": "8/2014"}, {"body": "cases would convenient able retrieve pointer given dom node component without creating new component wonder could nt keep api vref however amp vue manage differences", "d": "8/2014"}, {"body": "like idea keeping api simple promise vm reference mixed array dom nodes could confusing well dispatching refs two different arrays maybe another idea using dom nodes", "d": "8/2014"}, {"body": "rayfranco mistake right really looking ability get access dom node without vm effectively vel", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "mainly way work vue query selector create strong dependance toward dom structure exists otherwise think dom report structure js opposite may wrong nodes parsed directives anyways necessary query", "d": "8/2014"}, {"body": "rayfranco using directives avoid need directly querying dom apart dom elements specific behavior canvas video enables access api getcontext pauseplay still decoupled dom believe less dom vm better testing instance", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "introduce new directive refers dom node would need care case new one like html agree ayamflow comment new directive make array dom references", "d": "8/2014"}, {"body": "yeah probably necessary jsdom slow also vue rendering large portion time spent setting dynamic bindings needed serverside rendering", "d": "8/2014"}, {"body": "maybe could learn something rendr", "d": "8/2014"}, {"body": "looking mercury modular alternative react supposed fast virtualdom module idea possible maybe could possible plug vue vdom serverside rendering sure plugin would enough like dedicated compiler", "d": "8/2014"}, {"body": "thanks tested bug gone stay tuned release", "d": "8/2014"}, {"body": "expecting", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "\u043d\u0438\u043f\u0430\u043d\u044f\u0442\u043d\u0430", "d": "8/2014"}, {"body": "vif \u53ef\u4ee5\u7ed1\u5b9a\u8868\u8fbe\u5f0f\u6216\u8005 computed", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "maybe allowing like specs passing booleans nt really selfexplanatory", "d": "8/2014"}, {"body": "already branch callback stop dispatchbroadcast recursions ayamflow vm instance events create event objects rely return value", "d": "8/2014"}, {"body": "ahead thanks grab", "d": "8/2014"}, {"body": "note branch complete yet wait official release", "d": "8/2014"}, {"body": "worries happy see going towards path solves issue easily patch current version tree interim", "d": "8/2014"}, {"body": "yes nt intended provide detailed change records use case concerned final changed value want get access every incremental change event use emitter emits events synchronously eg well documented going change possibly separate api methods eg watch watchsync", "d": "8/2014"}, {"body": "give try thanks", "d": "8/2014"}, {"body": "bug likely go away", "d": "8/2014"}, {"body": "ok thank", "d": "8/2014"}, {"body": "think one", "d": "8/2014"}, {"body": "orz thank much calebboyd", "d": "8/2014"}, {"body": "would want pass callback use events", "d": "8/2014"}, {"body": "read events part impression implemented dom events slow look code see implemented theoretically could implemented directly traversing parents list want provided perf", "d": "8/2014"}, {"body": "please feel free close issue mechanism amp perf fine", "d": "8/2014"}, {"body": "might css transitions handled olderversion webkit nt old device test guess internally two transition definitely triggered together since rely data transitions event loop batched", "d": "8/2014"}, {"body": "good know transitions triggered together first thought queue handled animation frames frame rate goes sometimes synchronous function could slip transition queue quite abstract thinking guess nt think webkit version since could happen computer app go slow reasons reproduce bug app vue couple month ago uses kind transitions toggling panel classement ranking see always sync even disappear end transition sometimes app easy see fixed background hide bug project currently working obvious user something went wrong", "d": "8/2014"}, {"body": "animation going time", "d": "8/2014"}, {"body": "yes views like methods setscene function ithiscurrentscene return see toggle property responsible views toggle dispatch events views tell set unset use case event could start use requestanimationframe view never using background called updating data issue simple views using requestanimationframe involved way bad using requestanimationframe vuejs using nexttick instead", "d": "8/2014"}, {"body": "asked raf css transitions going together sometimes would cause noticeable jank seems issue nothing think something try write similar transition vanilla jscss see issue persists old devices since vue simply toggling css classes pretty sure toggling done event loop", "d": "8/2014"}, {"body": "took another look figured indeed caused vue enter transitions batched nexttick delay want make sure trigger one forced layout leave transitions one frame difference two fixed", "d": "8/2014"}, {"body": "thanks lot watching works nice every devices closing issue happy smile", "d": "8/2014"}, {"body": "first issue might component created inserted dom yet directive created yet however sure really cause would help reproduce bug fiddle question raf settimeout triggered strictly counting time rather simply put task function queue queue guaranteed executed order even takes longer exhaust queue", "d": "8/2014"}, {"body": "try make fiddle work component either created custom vview manually cases first instantiation component call might understand actually basic dom rendering fact job minimize job queue browser takes less render smooth experience", "d": "8/2014"}, {"body": "alright indeed coming fact component created procedurally hook called vm added dom find behavior odd expecting fire component el compiled attached dom vm fragment compiled inserted anyway used custom hook like use appendto callback send event somecomp appendto wrapper function somecomp emit hook added component hook added someawesomemethod nt need weird double nested anymore probably watch ready added event dom logic feeling lazy", "d": "8/2014"}, {"body": "also try hook although hook kinda unreliable sometimes", "d": "8/2014"}, {"body": "ah nt think one thought called try", "d": "8/2014"}, {"body": "description seems bit abstract give bit info third party lib actually", "d": "8/2014"}, {"body": "using owlcarousel one views managed vue owl provides slider functionality image section backed view binding populates list images use vue initially set everything markup bindings image slides place tell owl wrap slider functionality achieve slider directive bind hook sets new slider like naltatis said initializing slider leads dom manipulations adds wrappers images model updates vue tries rerender list images dom original state vue knows things fall apart vue still renders list correctly wrong place bindings etc still intact nt seem affected third party dom manipulation could possibly work around removing slider view update occurs set afterwards could find hook update callback fires vue already updatedrerendered views digging code could find way notified happens es nt seem good fit trying either hope explanation gives little context point us right direction thanks help", "d": "8/2014"}, {"body": "using owl carousel top list items rendered want actually something done update triggered right case carousel teardown right change model", "d": "8/2014"}, {"body": "right feel like clean solution part setting new carousel inside slider directive part tears lives outside directive would nice way handle symmetry know mean", "d": "8/2014"}, {"body": "personally nt recommend type hacks going introduce core however easy implement fork specifically inside need anther loop existing one", "d": "8/2014"}, {"body": "alright thanks recommendation understood correctly would turn kinda thing removing slider updating model ensure right order", "d": "8/2014"}, {"body": "yes think rare use case also nonrecommended introduce new concept directive api", "d": "8/2014"}, {"body": "alright leave close let know find nice way encapsulate nicely", "d": "8/2014"}, {"body": "testing textlength gt vue thinks object well behavior going away simply use empty string", "d": "8/2014"}, {"body": "ok thank", "d": "8/2014"}, {"body": "since tags simple array would nt use html value see displaying list section arrays primitive values", "d": "8/2014"}, {"body": "case result bind described wrong", "d": "8/2014"}, {"body": "use seems html value example using identifier array primitive values stable suggest use value instead", "d": "8/2014"}, {"body": "thank answer probably right sorry mishap", "d": "8/2014"}, {"body": "reason set item item might belong arrays still able access outer loop", "d": "8/2014"}, {"body": "thank speedy response indeed sound sensible", "d": "8/2014"}, {"body": "understand issue curious use case primarily trying readwrite vm data case newly introduced probably alleviate problem", "d": "8/2014"}, {"body": "use case directive thought could better push dom references parent instantiate template realised going vuejs design used purpose even verbose looking forward see property master branch", "d": "8/2014"}, {"body": "update instance flag indicates whether instance created flowcontrol directives etc component use flag locate first parent anonymous mechanism also used", "d": "8/2014"}, {"body": "thanks lot evan closing issue", "d": "8/2014"}, {"body": "hard polyfill due lack gettersetters plan bottom line vuejs support mobile browsers talking specifically", "d": "8/2014"}, {"body": "currently access created hook original content component tags resolved", "d": "8/2014"}, {"body": "sorry nt quite clear enough needs dynamic scenario looks similar currently access inner dom elements elchildren layout computations works fine core problem new item added array need recompute things event signaling changed would able", "d": "8/2014"}, {"body": "evan thoughts", "d": "8/2014"}, {"body": "know data changes know dom change nexttick change data address issue", "d": "8/2014"}, {"body": "believe would work would nt clean encapsulationwise simple scenario shows issue trying address imagine image pager pager vue component list images provided part content tag using vrepeat directive pager needs aware number images size loop properly number images changed dynamically fly example think netflix experience changing row changes set images view could put listener array somehow force update pager would much cleaner event came let know content updated way user component would nt write content glue code", "d": "8/2014"}, {"body": "sort similar thought seems observing dom changes bit inefficient surprisingly however want observe changes dom use mutationobserver defined part supported current browsers", "d": "8/2014"}, {"body": "nadirabid note mutationobserver mutationevents use mutationobserver polyfill", "d": "8/2014"}, {"body": "right hasty neglect ie sometimes edit another note quick note mutationobserver supposed efficient replacement mutation events polyfill might actually unusually slow", "d": "8/2014"}, {"body": "nadirabid thanks reply already knew mutationobservers really neat feature dog slow hoping would efficient way achieve vue", "d": "8/2014"}, {"body": "look moment sharing items component instances", "d": "8/2014"}, {"body": "gaydenko problem share items component instances since child views inherit data model parent seems natural thing different instances reference data edit suggesting workaround suppose could generate new array view b filter rather filter original array might work original implementation seems like work also", "d": "8/2014"}, {"body": "guess create array instance hook fact guess good way avoid sharing instances long nt class constants", "d": "8/2014"}, {"body": "indeed bug two directives racing setting index children data likely resolved since vm scope separate data shared", "d": "8/2014"}, {"body": "thanks", "d": "8/2014"}, {"body": "leave workaround anyone else might run problem alternately something akin following works vm filtered array seems work properties nested parent template explicitely passes seems work better items array changed either consuming view", "d": "8/2014"}, {"body": "seems commonly used currently included tags since lot tags list used anyway added two template parser closing", "d": "8/2014"}, {"body": "located problem templateparserjs check template dom fragment one doe nt work jsdom always returns false tried replace rendering went fine", "d": "8/2014"}, {"body": "thanks looking much appreciated", "d": "8/2014"}, {"body": "testing jsdom seems work js var jsdom require jsdom jsdomenv html test done function err window var frag windowdocumentcreatedocumentfragment consolelog frag instanceof windowdocumentfragment gt true ideas also instances also property check give false positive elements", "d": "8/2014"}, {"body": "using jsdom code example work looks like problem may context loss taking place something research also true checking good fast testing", "d": "8/2014"}, {"body": "looks like kind trick anonymous wrapper function use window object far understand window object get received several places script require system gets copied every time instead simple inheritance dom fragments created different objects wo nt work child different reason called utils function wo nt show message nodejs console", "d": "8/2014"}, {"body": "curious using vue inside jsdom including standalone built version option using", "d": "8/2014"}, {"body": "use like var fs require fs var jsdom require jsdom jsdom set direct path though also replaced mainjs compiled vuejs nt seem work well may necessary var compilerpath requireresolve vue replace srcmainjs distvuejs var compilersrc fsreadfilesync compilerpath jsdomenv html html src compilersrc done function errs window another way include inside jsdom tried way rough using check consolelog works vuejs code copypasted compiled code inside jsdom done function declaration necessary global variables document navigator maybe something else", "d": "8/2014"}, {"body": "following worked fine js var fs require fs var jsdom require jsdom var compilerpath requireresolve vue replace srcmainjs distvueminjs var compilersrc fsreadfilesync compilerpath jsdomenv html lt div gt hello lt div gt src compilersrc done function err window var vue windowvue var vm new vue template temp data hello hello world consolelog vm elinnerhtml vmhello changed vuenexttick function consolelog vm elinnerhtml think might callback", "d": "8/2014"}, {"body": "code works fine well ok sorry bad gave exact example right start wrote first post problem try use vue components try code var compilerpath requireresolve vue replace srcmainjs distvueminjs var compilersrc fsreadfilesync compilerpath jsdomenv html lt div gt hello lt div gt lt div vcomponent test gt lt div gt src compilersrc done function err window var vue windowvue vuecomponent test template would template var vm new vue template temp data hello hello world consolelog vm elinnerhtml vmhello changed vuenexttick function consolelog vm elinnerhtml", "d": "8/2014"}, {"body": "tested wip next branch code worked fine closing comprehensive serverside rendering tests release thanks digging", "d": "8/2014"}, {"body": "generate xy pairs within cells array", "d": "8/2014"}, {"body": "design mistake key value never attached data piece data belong multiple parent objects always used directly whether using repeat alias using alias available", "d": "8/2014"}, {"body": "necessary support dynamic accessors eg update changes", "d": "8/2014"}, {"body": "fixed", "d": "8/2014"}, {"body": "use method vuedebug plugin remove cluttering vuerelated properties log", "d": "8/2014"}, {"body": "hey followup pr element directive nt work well filters js fiddle work made directive applies attribute stuff modeled happy roll code base fix work filters worth solution largely incorporating solution presented stack overflow post", "d": "8/2014"}, {"body": "thanks yjkogan get directives part one directives need major refactoring would love take look directive incorporate fix", "d": "8/2014"}, {"body": "sounds good best way get send three relevant files directive helper utility tests utility whenever open pr need set aside part work day next week happy though", "d": "8/2014"}, {"body": "put gist pressure pr nt time", "d": "8/2014"}, {"body": "hard time making sure gist right amount context probably put time make pr early next week", "d": "8/2014"}, {"body": "hey opened halfbaked pr fork see mention trouble unit tests nt time yet dig figure going wrong also like add tests write casperjs integration tests use casper well write internally port", "d": "8/2014"}, {"body": "curious filters guys using contenteditables mostly input validation nt need modify contents use writeonly filters available feel nt put amount extra code vue core specific usecase contenteditable filters maybe separate plugin thanks working pr though", "d": "8/2014"}, {"body": "using filters moment wanted implementation correct felt weird directive close could nt use filter accept contenteditable wont work filters pretty much vmodel couple ux changes escape reset value enter definitely makes sense add much code something specific makes wish getting cursor easier contenteditable elements haha time look making plugin hope helpful", "d": "8/2014"}, {"body": "thought chime would easy fact working project right knockout uses mediumjs thoughts", "d": "8/2014"}, {"body": "robertleeplummerjr definitely want full control contenteditable simple wrap mediumjs custom directive", "d": "8/2014"}]