[{"title": "switch context use parent tree instead owner tree", "body": "pretty convinced point contexts useful parent tree owner tree also opens new use cases parent child communication nt possible", "num": "2112", "d": "8/2014"}, {"title": "project page update", "body": "hey wandering project page updated specifically wandering classes make", "num": "2111", "d": "8/2014"}, {"title": "tutorial causes warning hook data model section", "body": "finish hook data model bit react tutorial get warning data model nt unique key maybe big deal happy pull request docs let user know expect error problematic maybe another step could added account additional complexity also entirely possible missed something obvious mainly copypasting tutorial code point jsx reactdom var commentlist reactcreateclass render function var commentnodes thispropsdatamap function comment return return commentnodes var commentform reactcreateclass render function return hello world commentform var commentbox reactcreateclass render function return comments var comment reactcreateclass render function return thispropsauthor thispropschildren var data author pete hunt text one comment author jordan walke text another comment reactrendercomponent documentgetelementbyid content nothing special copy pasted examples", "num": "2109", "d": "8/2014"}, {"title": "add support chrome app node type", "body": "using react chrome app seems like nt support tag know pretty specialized scenario nt know belongs core way manually add support tag least single project", "num": "2108", "d": "8/2014"}, {"title": "perf tool incorrectly reports wasted time", "body": "bug difficult describe noticing perf tool incorrectly reporting wasted time even though dom change reproduce visit make sure focused page press start perf recording click gray area press stop perf recording javascript console notice wasted time reported even though time wasted continue play around notice inconsistencies may click several times recording get wasted time original fiddle", "num": "2105", "d": "8/2014"}, {"title": "csstransitiongroup transitions nt fire reliably unless set active class", "body": "example explained readme works example except added method focuses button within component transitioned notice transition fails animate possibly browser bug thought let know anyway also worth noting bug worked around moving like hope helps improve react", "num": "2104", "d": "8/2014"}, {"title": "support svg strokelinejoin attribute", "body": "currently support attribute svg elements implemented line join important see difference", "num": "2103", "d": "8/2014"}, {"title": "rendering instance component nt throw anymore", "body": "app unit tests assuming try render component instance twice throw upgrading nt seem case intentional regression see reduced test cases works fine errors throws error", "num": "2102", "d": "8/2014"}, {"title": "called root component returned render changes", "body": "convoluted hopefully good enough example root node returned render function changes value going change breaks binding unbinding via whenever value going change would nice fired change fired change essentially remounting", "num": "2100", "d": "8/2014"}, {"title": "keep empty string select option value", "body": "provide empty string value attribute using plain js jsx generated markup drops value attribute entirely think value attribute dropped explicitly provided use case select", "num": "2098", "d": "8/2014"}, {"title": "react chrome dev tools unavailable browserified", "body": "use react wo browserify dev tools available use npm react require app using browserify dev tools available solution thanks loving react way", "num": "2096", "d": "8/2014"}, {"title": "react perf set property totaltime undefined", "body": "disclamer low priority enhancement request simply cryptic error message bad react usage could enhanced internal framework always keep full state outside react always rerender top bit like om without local state react template engine code mistakenly triggered rendering rendering componentwillupdate phase internal framework forbid anyway avoid infinite rendering loops mesure renderings somehow lead following code permits easily reproduce error jsx reactdom var hello reactcreateclass componentwillupdate function reactaddonsperfstart reactaddonsperfstop reactaddonsperfprintwasted render function return hello thispropsname var component reactaddonsperfstart reactrendercomponent component documentbody reactaddonsperfstop reactaddonsperfprintwasted reactaddonsperfstart reactrendercomponent component documentbody reactaddonsperfstop reactaddonsperfprintwasted yes probably bad usage react cryptic error message could made explicit wrong", "num": "2095", "d": "8/2014"}, {"title": "forms mishandle submit enter key", "body": "react seems executing first event handler attached elements form rather executing onsubmit handler hitting enter key jsfiddle", "num": "2093", "d": "8/2014"}, {"title": "support media events", "body": "currently media events supported makes working audio video tags react pain ass also still many missing attributes audio video tags find strange tags completely unsupported probably removed list documentation reduce confusion properly supported", "num": "2090", "d": "8/2014"}, {"title": "html space special code became broken characters precompiling", "body": "precompile jsx found html space special code become broken characters avoid anyone meet thanks", "num": "2089", "d": "8/2014"}, {"title": "work even precompiled", "body": "use jsx tool linux precompile code still work error message shows problem happens line around codes javascript var invariant require invariant constructs enumeration keys equal value example var colors keymirror blue null red null var mycolor colorsblue var iscolorvalid colors mycolor last line could performed values generated enum equal keys input output param object obj return object var keymirror function obj var ret var key production processenvnodeenv invariant obj instanceof object amp amp arrayisarray obj keymirror argument must object invariant obj instanceof object amp amp arrayisarray obj key obj objhasownproperty key continue ret key key return ret moduleexports keymirror also use browserify manage codes sure related anyone help thanks", "num": "2088", "d": "8/2014"}, {"title": "document callback", "body": "callback reactrendercomponent called set toplevel component see nt documented probably case someone relies behavior", "num": "2087", "d": "8/2014"}, {"title": "bootstrap model example nt work bootstrap", "body": "bootstrap model example nt work bootstrap update bootstrap modal nt open button nt show properly click text fade black stops way app seizes", "num": "2085", "d": "8/2014"}, {"title": "error unmountcomponentatnode receives nonnode eg array", "body": "rendercomponent throws passed nonnode unmountcomponentatnode", "num": "2079", "d": "8/2014"}, {"title": "image src image object", "body": "nt see way vanilla js something along lines var image new image imagesrc heavyimagefilejpg documentqueryselector img src image great able pass object concretely using file upload previews", "num": "2077", "d": "8/2014"}, {"title": "unify mount update component lifecycle methods", "body": "kind related seems natural correlation mount update methods many situations want code mountupdate put shared method call places hardly common enough issue seems common enough strikes bit odd perhaps idea could make sense eg get rid mount altogether instead following extreme perhaps example mounting getinitialstate componentwillreceiveprops update false componentwillupdate update false componentdidupdate update false updating componentwillreceiveprops update true shouldcomponentupdate componentwillupdate update true componentdidupdate update true would unify lifecycle move away mounting treated entirely separate updating would seen exception would less potential inconsistencies causes mistakeneglect nt thought extensively bring mainly start discussion know many others wondered nt lifecycle method mountupdate", "num": "2074", "d": "8/2014"}, {"title": "component lifecycle methods update", "body": "good everything makes sense mounting need update state nt based new props place seems sure stick componentwillreceiveprops puts shouldcomponentupdate bad componentwillupdate seems like obvious choice allowed good reason nt personally nt think many reasons call setstate componentwillupdate encountered scenario two would like call setstate shouldcomponentupdate ie componentwillupdate", "num": "2073", "d": "8/2014"}, {"title": "output jsx syntax errors throw errors load", "body": "would awesome jsx parser errors would nt end terminal would actually output valid code would throw error load client instead would make virtually transparent jsx used simple solution would simply output error message asis fileline baked imagine source map trickery could even make look browser threw error correct source location", "num": "2072", "d": "8/2014"}, {"title": "remove href attribute", "body": "remove href attribute", "num": "2071", "d": "8/2014"}, {"title": "render href attribute", "body": "renders render", "num": "2070", "d": "8/2014"}, {"title": "svg image element", "body": "please add support svg image element thanks", "num": "2069", "d": "8/2014"}, {"title": "update testutils docs website", "body": "file date etc website date", "num": "2064", "d": "8/2014"}, {"title": "enterleave event triggers extra calls nested roots", "body": "enter inside square enter expected nothing happen recorded instead exiting", "num": "2063", "d": "8/2014"}, {"title": "ontouchtap triggering handler twice", "body": "using application calls every handler twice calls triggered different events first time second time generated browser click nt make sense think prevent triggering event triggered touches sure good way guess calling inside wisest solution", "num": "2061", "d": "8/2014"}, {"title": "props immutable objects", "body": "started using immutablejs together reactjs however noticed passing around immutable objects nt quite fit together reactjs ie myobject myobjectsmap object gt reactdomdiv proptypes nt quite support without first converting js object unnecessary overhead thoughts advice issue", "num": "2059", "d": "8/2014"}, {"title": "ref helper", "body": "thisrefs something verbose helper", "num": "2057", "d": "8/2014"}, {"title": "onclick mobile fired", "body": "put together test case replicates issue desktop browsers click handler triggered correctly code ios mobile devices tested simulator actual devices fire event works fine android", "num": "2055", "d": "8/2014"}, {"title": "onchange event input type range nt fire", "body": "browsers works expected onchange also oninput event nt get triggered ie jsfiddle", "num": "2048", "d": "8/2014"}, {"title": "contenteditable element caret position jumps", "body": "hi nt think really bug fixed easily annoying behavior see cursor jumps unexpectedly contenteditable element rerendered mean always use contenteditable elements uncontrolled components", "num": "2047", "d": "8/2014"}, {"title": "give example production ready workflow react js", "body": "hi great time working react js big issues setting good workflow libraryframework sites examples getting started simple developers considering react js need put workflow currently experience difficult figure wrote post experienced getting react js running workflow ending browserify react js browserify workflow points difficult suggests solution hope help people request really put example workflow setup react js site would make lot easier developers adopt library thanks great contribution world javascript", "num": "2046", "d": "8/2014"}, {"title": "clearer warning replacing reactrendered children new root component", "body": "suppose js var taskheader reactcreateclass render function return task reactrendercomponent taskheadercontainer intend run replace header accidentally run instead get error warning blowing away reactrendered contents none given actually get serverrendering checksum warning confusing anything explicit warning much like one get calling setprops nonroot component", "num": "2045", "d": "8/2014"}, {"title": "proptypescomponent false reactdom", "body": "example js var mq reactcreateclass displayname mediaquery proptypes component proptypescomponent render function return null mq component reactdomdiv currently way check dom els custom components proptypes", "num": "2044", "d": "8/2014"}, {"title": "attach event per react container root rather document", "body": "nathansobo help event perf issues bit familiar atom plugin infrastructure help two nt help though ideas optimize events bit nonetheless ok idea think spicyj", "num": "2043", "d": "8/2014"}, {"title": "allowfullscreen work", "body": "check jsfiddle according docs allowfullscreen supported ca nt seem able jsfiddle page shows iframe get attribute", "num": "2041", "d": "8/2014"}, {"title": "react component library", "body": "hey sure right place put created little onepager hope become collection useful andor cool react components located leesalminengithubio guys interested think could become popular link docsreadme thanks sorry wrong place", "num": "2040", "d": "8/2014"}, {"title": "normalize dom access across browsers", "body": "appears order access real dom crossbrowser way need use something like jquery react slowly chipping away need include jquery normalizing events make sense go example instead realize may scope react already discussed somewhere decided upon close ticket one beautiful thing react usually allows us alway work firstclass dom occasionally need reach actual dom get hands dirty would awesome load jquery deal crossbrowser issues much native browser recreated react like virtual dom selection events way access real dom without rebuild jquery references real dom nodes virtual dom clever tricks may already way nt see may scope thought would ask thanks", "num": "2034", "d": "8/2014"}, {"title": "behavior", "body": "javascript var foo createclass componentwillmount function alert mounted foo componentwillunmount function alert unmounted foo render function return reactdomdiv hello thispropsname var bar reactcreateclass componentwillmount function alert mounted bar componentwillunmount function alert unmounted bar render function return reactdomdiv hello thispropsname unmounts component reactrendercomponent foo name world documentbody reactrendercomponent foo name documentbody reactrendercomponent bar name world documentbody reactrendercomponent bar name documentbody function createclass spec return function props return reactcreateclass spec props sure going component get unmounted component seems like difference two ways calling", "num": "2032", "d": "8/2014"}, {"title": "releasemaintain typescript bindings dts reactjs", "body": "really like react kinda hate javascript due lack typing typescript looks good party bindings truly terrible constantly breaking generally versioned well immutable js collections released recently facebook include typescript bindings fills us hope maybe might happen react please make aware jsx wo nt work typescript big loss prefer pure script plays nicer existing js tools", "num": "2029", "d": "8/2014"}, {"title": "reactcsstransitiongroup multiple transitions enter", "body": "sorry dupe could nt really tell animation bugs noticed csstransitiongroup class nt seem handle multiple transition properties enter well take example actiontrayenter transform translatey opacity transition easein actiontrayenteractiontrayenteractive transform translatey opacity actiontrayleave transform translatey opacity transition easein actiontrayleaveactiontrayleaveactive transform translatey opacity try remove node enter animation still occurring looked like abruptly removing node without triggering leave animation switch one property enter animation works expected wait enter animation finish trigger leave animation provide fiddle later", "num": "2024", "d": "8/2014"}, {"title": "sync updated objectassign polyfills", "body": "make sure include specific pieces", "num": "2023", "d": "8/2014"}, {"title": "inline styles vendor prefix values", "body": "would write following css using inline styles would nt nice react could internally automatically handle vendor prefixes similar stylus nib", "num": "2020", "d": "8/2014"}, {"title": "reactclasssetvalue inside mocha test using jsdom causing interesting problem", "body": "running spec inside linked gist cause following problem stacktrace attached gist likely jsdom problem", "num": "2019", "d": "8/2014"}, {"title": "support tag", "body": "tag available chrome chrome behind flag trying use initially confused nt added dom adding reactdomjs seems enough work really familiar react code hoping support added soon documents element info demos", "num": "2017", "d": "8/2014"}, {"title": "deprecate return false event handlers", "body": "currently support makes code less understandable like stop supporting encourage people use either epreventdefault estoppropagation appropriate", "num": "2015", "d": "8/2014"}, {"title": "let use inheritance componentdidmoubt", "body": "consider following js var mixinnamehere var componentnamehere reactcreateclass work see declared existence twice would fair nt libraries underscore similar libraries make use lets us question one likes abstract common logic use inheritance mix backbone react use inheritance say component mount yes oh call parent", "num": "2012", "d": "8/2014"}, {"title": "relatedtarget blur event firefox returns null always", "body": "basically relatedtarget returning null time chrome returning correct value clicking actual element return null clicking outside document ok something firefox natively patch case make cross browser syntethic event example click first input second see console relatedtarget chrome b null firefox", "num": "2011", "d": "8/2014"}, {"title": "improve flux documentation", "body": "read flux todomvc walkthrough first kudos complete description flux seen last time explored react doc nt written yet existing event story event bubbling nt supported pass listeners callbacks dom scared flux much sensible model thanks describing detail two pieces feedback maintaining private data structure called todos variable lives outside class within closure module remains private directly changed outside helps us preserve distinct inputoutput interface flow data making impossible update store without using action strictly true method returned ok stands oblivious caller could modify result inplace without going store methods effectively move creating semantic actions earlier walkthrough first thing wonder seeing look like second thing many layers abstraction would nt replacing line thing direct way glad see semantic actions section doubt created additional concept actions nt needed still could nt help wonder nice see reservation directly addressed documentation worth still convinced significantly cleanermore semantic free probably prefer former however knowing write maintain class remember adds weight mental model friction development pace nicer syntax nt communicate anything clearly hate writing boilerplate", "num": "2009", "d": "8/2014"}, {"title": "stop defensively copying style object domcomponentupdatedomproperties", "body": "right copy one hottest paths react allow users mutate style object afterward come realize pattern nt come often since style often created inline inside retained additionally coming soon people could always clone style need jordwalke", "num": "2008", "d": "8/2014"}, {"title": "mention facebook immutablejs project somewhere", "body": "think mentioned somewhere react documentation advanced immutable cases nt aware project loved good place could", "num": "2006", "d": "8/2014"}, {"title": "resolving implicit thead lead invariant violation", "body": "internet less unavailable right ca nt test thoroughly thinking seems blindjumps detect resolve implicitly added elements mainly appears actually safe asis personally feel like solution resolve implicitly added elements rather tell user hisher error instead fix related pr provide friendly path reactid errors reactmount", "num": "2005", "d": "8/2014"}, {"title": "nt run child key validations using dom nodes children", "body": "work trigger warning try enumerate keys object", "num": "2001", "d": "8/2014"}, {"title": "typeo documentation", "body": "small typeo documentation bottom cautions bullet point make sure never access property specified string make sure never access property specified string", "num": "1999", "d": "8/2014"}, {"title": "objectassign polyfilled environment", "body": "goes policy afaik dealing polyfillsshims want ship polyfill returned shim global object", "num": "1998", "d": "8/2014"}, {"title": "documentation bug", "body": "example contains following code wo nt return due automatic semicolon insertion", "num": "1996", "d": "8/2014"}, {"title": "rfc dynamically add external listeners componentwillunmount", "body": "quite common external apis nt really belong component mustfavor notified instance unmounted currently solved making api mixin imho wrong solution propose able something like examples well aware could perhaps implemented thirdparty mixin instead common simple enough usecase unified implementation least worth bringing think would useful bridging many apis without use mixins edit published experimental mixin js simple suboptimal use componentdidmount function var p extapisendrequest thisaddeventlistener unmount pabort nonretainingleaking version componentdidmount function var p extapisendrequest thisaddeventlistener unmount pabort poncompleted function thisremoveeventlistener unmount pabort bind perhaps lockeddown unmountonly api api designed mind wrapped helper", "num": "1992", "d": "8/2014"}, {"title": "clonewithprops keyref intended behavior", "body": "petehunt sebmarkbage number people ask irc really sure answer current situation seems illogical js key ok ref ok key ok ref ok js key okerr possibly unexpected conflicts ref ok key ok may conflict ref ok js key ok ref ok key ok ref ok js key err discarded ref err discarded clonewithprops err support arraysobjects js key ok ref ok key ok ref ok would expect work like think perhaps even preferable like implemented wo nt actually add props children asis imagine missing something current situation seems fundamentally plain broken using asis dangerous destroys ownership understand change ownership local instance intended usecase behavior sure expected behavior would either seems like keys concatenate refs kept ie multiple owners related", "num": "1991", "d": "8/2014"}, {"title": "uncontrolled ignores setstate", "body": "calling uncontrolled lead expected result example pressing button reset state input fields default element resets expected debugger method gets correct initial data changes dom occur bug implementation correctly understand essence uncontrolled input fields case reset value initial state", "num": "1986", "d": "8/2014"}, {"title": "jsx tool processes files match given extension", "body": "running jsx following command line folder watched jsx also generating unreasonably large json file nt ask whenever recreated json file jsx would register change process json file shown following console output behaviour nt would expect passing arguments watch jsx files side note think jsx trying process json file unable handle large file crashed think subject another bug report", "num": "1983", "d": "8/2014"}, {"title": "serverrendering distinct clientrendering", "body": "kind related concerns polyfills seems really treat serverrendering distinct clientrendering different requirements priorities serverrendering able generate optimal markup seo markup must also fully crossbrowser compatible small markup preferable clientrendering sees seo largely irrelevant full crossbrowser compatibility also irrelevant rendering performance greater importance propose treat serverrendering uniquely distinct clientrendering eg separate flag would default true document available even imaginable could extend eg would optionally allow markup tailored specific purpose reusing serverrendered markup clientside client initial serverrendering pass passed exact props time serverside rendering instances actually allocated client immediately afterwards clientrendering pass done props current time like instancesmarkup efficiently reused add significant costs little dom manipulation involved really affected use serverrendering seems like correct way approaching opposed rendering everything exactly however working element polyfills without made generate sensible serverside markup ps realize done today using global mixin without standardized solution unlikely thirdparty polyfill components could ever participate nt mean needs shipped react even none requires core support believe long standardized", "num": "1979", "d": "8/2014"}, {"title": "export standardized tagnameequivalent overloaded reactdomcomponents", "body": "trying polyfill browser elements currently consistent guaranteed safe way detect overloaded reactdomcomponents one way safe use polyfilled implementations another way dirty expecting polyfilled components hide behind display name polyfilled react dom element nice actually issue right implementing polyfilled elements element element child safe use companion polyfilled overloaded implementation safestandardized way detect currently", "num": "1978", "d": "8/2014"}, {"title": "jsx transformer done event", "body": "would nice jsx transformer event could listen order know scripts done processing development mode pattern treat external js files libraries call html templates script blocks however jsx nt know processed yet", "num": "1977", "d": "8/2014"}, {"title": "variable reactdom jsx compile result", "body": "hello jsx compile markup functions markup complicated result become wordy repeating would greate refer reactdom variable example within compiled method would performance less object property lookup would better minified", "num": "1975", "d": "8/2014"}, {"title": "button eat mouse events", "body": "unsure react specific browsers things difference crossbrowser behavior tested react following pattern fires event handlers chrome safari button handler firefox var button reactcreateclass onclick function e consolelog onclick handledown function e consolelog handledown handleup function e consolelog handleup render function return reactdombutton onclick thisonclick hello reactdomcanvas onmousedown thishandledown onmouseup thishandleup reactrendercomponent button documentbody", "num": "1973", "d": "8/2014"}, {"title": "provide q options suppress unnecessary console output", "body": "would nice jsx tool provided mechanism suppress output common pattern used command line tools would provide option although alternative would suppress output default provide option make verbose output", "num": "1971", "d": "8/2014"}, {"title": "possible use react without container element", "body": "switching atom react want support backwardcompatible shims previous view framework old framework views represented jquerywrapped dom elements ideally like provide backwardcompatible shims simply rendering react component wrapping root element jquery wrapper api compatible old editor views would essentially look like javascript var editorroot documentcreateelement div reactrendercomponentwithrootelement editor props editorroot element would actually wrapped custom subclass jquery clearer example var editorshim editorroot currently nt possible react components need rendered container instead need create wrapper element render component inside sad adds extra layer markup confuses styling also means editor wrapper used via shim layer wrapper embedded child via react something fundamental preventing react adopting dom nodes directly without parent something could even hack way would somewhat maintainable heart", "num": "1970", "d": "8/2014"}, {"body": "jsfiddle nt support nothing view site http everything work", "d": "8/2014"}, {"body": "need general update page think nt going classes since bunch changes likely", "d": "8/2014"}, {"body": "ok thanks", "d": "8/2014"}, {"body": "could easily create attach obviously thing imagine work well nt wait another release fix might happen soon", "d": "8/2014"}, {"body": "sounds like plan syranide use method welcome close issue want figured leave open case choose add supported tag future release", "d": "8/2014"}, {"body": "perhaps dupe", "d": "8/2014"}, {"body": "ah looks like may well dupe sorry checked", "d": "8/2014"}, {"body": "thanks fiddle bug happens also attribute gets added close button", "d": "8/2014"}, {"body": "good find cody link fiddle", "d": "8/2014"}, {"body": "deadlyicon", "d": "8/2014"}, {"body": "firefox bug worse sometimes close button close modal transition got somehow broken happens half time adding timeout seems prevent bug", "d": "8/2014"}, {"body": "pointed", "d": "8/2014"}, {"body": "design refer removal child dom components way creation destruction composite component ie state could need way register lifecycle events dom nodes similar except would exposed react injectable however imagine correct solution problem subdivide component instead instead always returns root dom node whenever change dom node render instead effectively destroy calling", "d": "8/2014"}, {"body": "think issue report one let know actually different issue word little bit differently mounting root view methods root view life cycle functions called childrens called root one version example click link open console click start notice subview life cycle functions called expected root view life cycle functions also called actual arent maybe expected behavior case found strange however case expect documentation", "d": "8/2014"}, {"body": "chengyin seems want kind thing however assuming allowed addoverride life cycle methods descriptors must need know specific reactdom component mountsunmounts need wrap custom composite component houses life cycle methods", "d": "8/2014"}, {"body": "see naively assumed result simply extending prototype nt realize different type react objects", "d": "8/2014"}, {"body": "running indicates value attribute kept properly perhaps something wrong elsewhere code make minimal repro perhaps take another look", "d": "8/2014"}, {"body": "thanks looking sorry superfluous issue turns due assigning keys list options passed select", "d": "8/2014"}, {"body": "add code react dev tools expects", "d": "8/2014"}, {"body": "andreypopp thanks quick reply nt work maybe assigned window late big deal would nice", "d": "8/2014"}, {"body": "keyvanfatehi close developer tools open react available seems check react open developer tools", "d": "8/2014"}, {"body": "syranide perfect thank", "d": "8/2014"}, {"body": "littleknown fact tag defaults change fiddle works intended", "d": "8/2014"}, {"body": "related", "d": "8/2014"}, {"body": "contra sure understand current limitations audiovideoetc react nt go ahead face unexpected issues", "d": "8/2014"}, {"body": "syranide nt issues far working reference", "d": "8/2014"}, {"body": "contra parents siblings movereorder audiovideo stop playing nt problem great", "d": "8/2014"}, {"body": "broken decoded however serving page charset might need add scripttag avoid parsed incompatible charset", "d": "8/2014"}, {"body": "follow instructions bottom mon aug pm \u5c24 \u5ddd\u8c6a notifications githubcom wrote use jsx tool linux precompile code still work error message shows problem happens line production processenvnodeenv invariant around codes var invariant require invariant constructs enumeration keys equal value example var colors keymirror blue null red null var mycolor colorsblue var iscolorvalid colors mycolor last line could performed values generated enum equal keys input output param object obj return object var keymirror function obj var ret var key production processenvnodeenv invariant obj instanceof object amp amp arrayisarray obj keymirror argument must object invariant obj instanceof object amp amp arrayisarray obj key obj objhasownproperty key continue ret key key return ret moduleexports keymirror also use browserify manage codes sure related anyone help thanks reply email directly view github", "d": "8/2014"}, {"body": "issue ie unminified react w addons even polyfills seems come pointedat bit within invariant javascript var invariant function condition format b c e f production development format undefined throw new error invariant requires error message argument condition var error format undefined error new error minified exception occurred use nonminified dev environment full error message additional helpful warnings else var args b c e f lt var argindex error new error invariant violation formatreplace sg function return args argindex lt threw object expected error setting arguments empty string undefined building args array took care curiously react without addons nt show problem us still puzzling", "d": "8/2014"}, {"body": "misuba using minifier options know uglifyjs quite fixes dealing issues", "d": "8/2014"}, {"body": "syranide got error minified unminified code", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "put pr check travis nt seem want anything also good thing bug filed slightly annoyed past silent failures coming method thumbsup", "d": "8/2014"}, {"body": "slightly annoyed past silent failures coming method next time file feature request whenever possible go clear errors", "d": "8/2014"}, {"body": "nt actually work browser nt think make work react see", "d": "8/2014"}, {"body": "sorry nt correct example file upload previews like moduleexports reactcreateclass getinitialstate function return onchange function ev thissetstate file evtargetfiles componentdidupdate function thisrefsimage typeof filereader undefined amp amp imagei test selfstatefiletype var reader new filereader readeronload function e selfrefsimage selfrefsimagegetdomnode src etargetresult readerreadasdataurl selfstatefile render function thisstatefile var thumbnail would great detect file classes load resulting something like moduleexports reactcreateclass getinitialstate function return onchange function ev thissetstate file evtargetfiles render function thisstatefile var thumbnail", "d": "8/2014"}, {"body": "nt think overload dom like adds much magic could clean example reading file storing dataurl state would still get nice clean could create component allows pass file reference something like", "d": "8/2014"}, {"body": "fair enough", "d": "8/2014"}, {"body": "unify problematic need plugins still nt time write fully loading data server understand duplication problem rare write one function called methods alike easier functions", "d": "8/2014"}, {"body": "orisomething ugly distinction really helps manage dom nodes things like jquery plugins concept nt foreign frameworks either even ember comes event methods like didinsertelement help people manage nodes separate object update cycle addition nt stores norm flux applications want people manage component mountunmount actions separately", "d": "8/2014"}, {"body": "saying wrong heart react works much like oldschool serverrendered pages render page click something throw everything away render page model separation first subsequent renders obviously exactly react works practice due reconciliation obviously need curiosity lies proposed change makes inconsistentbroken behavior less likely occur listening specialcase rather way around reactcreateclass componentdidupdate function first suboptimal necessarily broken addeventlistener reactcreateclass componentdidupdate function first first optimal addeventlistener reactcreateclass componentdidupdate function first optimal measuredom whereas old separation easily inconsistencies reactcreateclass componentdidmount function optimal addeventlistener reactcreateclass componentdidmount function inconsistent broken measuredom reactcreateclass componentdidmount function optimal correct measuredom componentdidupdate function measuredom also think proposed change makes easier understand component implemented longer need correlate differences ps forcefully pushing think interesting topic", "d": "8/2014"}, {"body": "overall agree honestly something like split actually separate mountupdate behavior shared method called outside jquery plugin wrapping think nice try idea see might work use cases involve forcefully manipulating dom element iirc ember components mount methods called update method runs directly think makes sense maybe conditional definitions mount methods decides whether mount update methods called component render", "d": "8/2014"}, {"body": "give example want idea shouldcomponentupdate able look state determine whether update", "d": "8/2014"}, {"body": "generally seems want reasons would want call imho storing results sideeffects caching expensive computations etc common problem want store id cancelled right store outside state times encountered far especially dealing result external sideeffects measuring dom case overlaying things iframe", "d": "8/2014"}, {"body": "timeout ids stored outside state state things might affect render presumably state change needs triggered something currently state change response props change supported make state changes componentwillupdate shouldcomponentupdate returns true way skip render point proposing running shouldcomponentupdate specific use cases would help understand", "d": "8/2014"}, {"body": "timeout ids stored outside state state things might affect render sure impression belongs state older overheard discussions modifying seems dirty way timeout id indication something happening case xhretc hold additional information nt sound alien want show visual indication whatever timeout searching etc using separate property indicating another potential inconsistency technically redundant may well wrong understood presumably state change needs triggered something currently state change response props change supported right always triggered propstate change propstate change could external sideeffects changed external events equivalent set state based props props source information state reason call reason seems logical could difference mount update technically whether initial rendering right make state changes componentwillupdate shouldcomponentupdate returns true way skip render point proposing running shouldcomponentupdate thoughts simply applied like immediately sideeffects nothing abort reason abort see way update additional data external sources performed actions costly computations say external dom interaction want cache place makes make sense think happen specific use cases would help understand definitely bit tricky usecases far mostly rather special components external interaction editorrelated stuff everyday stuff think also seem need ordinary components state based propsuser input answer everything basically enough nonordinary enough also largely see following connection mentioned thing behaviorally inconsistent setting state according reason anyway little overburdened moment try boil usecases something tangible think", "d": "8/2014"}, {"body": "considering disallowing setstate componentwillmount favor people use getinitialstate", "d": "8/2014"}, {"body": "interesting feel like excessively punishes people nt use flux great big model good reason dispatching requeststimersetc seems makes sense componentwillmount componentwillupdate nt ab external model take care", "d": "8/2014"}, {"body": "data nt easily available synchronously use componentdidmount", "d": "8/2014"}, {"body": "even available synchronously complex notstrictlypropbased state updates seems dirty dispatching requeststimers nt seem sane", "d": "8/2014"}, {"body": "understand requests sent timers set componentdidmount", "d": "8/2014"}, {"body": "seems like significant downgrade simply using requires two renders rather one missing something obvious", "d": "8/2014"}, {"body": "closing favor", "d": "8/2014"}, {"body": "intentional nt want attribute use null undefined see info", "d": "8/2014"}, {"body": "merging", "d": "8/2014"}, {"body": "hi issue closing means already implemented correct yes release included kind regards ben alpert notifications githubcom merging reply email directly view github paulo jorge dias \u00e0 procura erro certo looking right error", "d": "8/2014"}, {"body": "implemented yet issue tracking svg tags attributes missing added request instead", "d": "8/2014"}, {"body": "ok meanwhile use example already tried works thing like react amazing implement image sgv element matter replacing call component used kind regards", "d": "8/2014"}, {"body": "sorry erases solution used html tags temporary solution svg dangerouslysetinnerhtml html kind regards", "d": "8/2014"}, {"body": "edmspjp surround code messed", "d": "8/2014"}, {"body": "feel free submit pr", "d": "8/2014"}, {"body": "chenglou think need cherrypick", "d": "8/2014"}, {"body": "oh sorry read bit fast", "d": "8/2014"}, {"body": "sure actually expecting leave enter hovering hello string less happens native listeners", "d": "8/2014"}, {"body": "taddei want use onmouseover onmouseout", "d": "8/2014"}, {"body": "spicyj yes sorry much coding today", "d": "8/2014"}, {"body": "seems tricky logic traversal propagation relies id naming scheme never looks nested parent components example another issue jsfiddle mouse outside square directly never see event never propagates parent component although see nt totally understand examples elsewhere codebase deal nesting like chenglou", "d": "8/2014"}, {"body": "yeah tricky react made nested root event propagation work correctly", "d": "8/2014"}, {"body": "correctly", "d": "8/2014"}, {"body": "arguable called handler defined always want would way undoing nt see way around since really going browser trying play nice emulating mouse events touch way selectively disable emulation idea nodewise sounds kind useless becomes yet another reserved nonstandard attribute sure would owner component wise would probably introduce additional issues components supplied children another component ps currently return instead think deprecated seems nt", "d": "8/2014"}, {"body": "yeah return less calling nt want prevent event get two calls handler", "d": "8/2014"}, {"body": "seems widespread issue quick googling reveals lot people seem quite confused nt find useful answer quick search additionally nt seem able guy right", "d": "8/2014"}, {"body": "ok fixed hard way taps enabled nt react clicks check taps like course rules laptops touch screens working good live", "d": "8/2014"}, {"body": "piranha also means support touchevents components fallback places nt care", "d": "8/2014"}, {"body": "yeah everywhere", "d": "8/2014"}, {"body": "piranha believe solution nt ideal first touch detection using gives false positives including current version chrome return true never gets triggered since either listening mouse touch events based feature detection tap handler never gets fired see modernizr source info second sure environment working either listening mouse touch events devices support trying fix problem also tried failed change state touch render extra element dom overlays tap area following mouse events triggered overlayed element element touch handlers fired solution came ignore mouse events within last touch event since emulated mouse events triggered directly touch events easily ignore chose reasonable amount time considered user interaction solution tap handler always invoked per user interaction also never excludes events user allowed use finger mouse solution", "d": "8/2014"}, {"body": "hmm regarding actually emulated mouse events fire delayed touch actiondoes touch action would assume delay would enough happens immediately touch event else mouse", "d": "8/2014"}, {"body": "wow certainly much better needed really quick fix could nt come better idea patch seems good one though think makes sense decreasing threshold say iirc delay tap emulated click event", "d": "8/2014"}, {"body": "well hope emulated mouse events would fired immediately touch events nt delays logs ios simulator log touch event toptouchstart reactwithaddonsjs line log touch event toptouchend reactwithaddonsjs line log non touch event topmousemove time diff reactwithaddonsjs line log non touch event topmousedown time diff reactwithaddonsjs line log non touch event topmouseup time diff reactwithaddonsjs line log non touch event topclick time diff reactwithaddonsjs line log touch event toptouchstart reactwithaddonsjs line log touch event toptouchend reactwithaddonsjs line log non touch event topmousemove time diff reactwithaddonsjs line log non touch event topmousedown time diff reactwithaddonsjs line log non touch event topmouseup time diff reactwithaddonsjs line log non touch event topclick time diff reactwithaddonsjs line also lowering threshold nt really make sense going switch finger mouse probably nerdy developer trying double click using finger mouse", "d": "8/2014"}, {"body": "fairly certain click emulated event somewhat input device agnostic event similar input instead key events form elements delay allow doubletap zoom gestures potentially accessibility features idea testing would interact browser features disable delay mstouchaction none chrome android", "d": "8/2014"}, {"body": "also lowering threshold nt really make sense going switch finger mouse probably nerdy developer trying double click using finger mouse mean like", "d": "8/2014"}, {"body": "oh right clicktap event intentional delays emulated mouse events assume would called immediately", "d": "8/2014"}, {"body": "iamdustan mean like looks pretty awesome never seen think support interaction probably wo nt use tap handler handle events separately syranide know click delay intentional mean react talking delay also seen delays nt see intentional delays react source", "d": "8/2014"}, {"body": "iamdustan tested patch chrome device emulator delay milliseconds ignoring events works perfect log touch event toptouchstart reactwithaddonsjs touch event toptouchend reactwithaddonsjs non touch event topmouseover time diff reactwithaddonsjs non touch event topmousemove time diff reactwithaddonsjs non touch event topmousedown time diff reactwithaddonsjs non touch event topmouseup time diff reactwithaddonsjs non touch event topclick time diff reactwithaddonsjs", "d": "8/2014"}, {"body": "talking browserimposed click delay hmm interesting delay could delay actually significant processing associated ie rerendering touch event would delay emulated mouse event intuitively would expect emulated mouse events fire frame touch events necessarily timestamp simply setting global clearing would exact obviously ca nt used click though assuming checked nt properties addedset emulated mouse event would indicate emulated", "d": "8/2014"}, {"body": "testing today results please tell testing wrong making wrong assumptions looks like events triggered separate frames resetting global variable effect istouch topleveltype touched true settimeout function touched false consolelog handle topleveltype touched example resets variable next event handled see log also tested expensive touch handlers explain mouse events delayed besides event example fiddle expensive touch handlers log ios simulator logging event touched timestamp timediff log touchstart undefined nan show line log touchend true show line log mousedown false show line log mouseup false show line log click false show line example fiddle without expensive touch handlers log ios simulator logging event touched timestamp timediff log touchstart false show line log touchend true show line log mousedown false show line log mouseup false show line log click false show line looks like applies event event follow directly seperate problem mouse events triggered component touch events look fiddle see console mouse events triggered container clicked element box make sure enabled touch sensor emulation chrome developer tools use ios simulator logging event target component handled event touchstart box touchstart container touchend box touchend container mousedown container mouseup container click container moving box handlers triggered components logging event target component handled event touchstart box touchstart container touchend box touchend container mousedown box mousedown container mouseup box mouseup container click box click container nt problem react webkit probably tested chrome ios example without react running example firefox without touch sensor emulation handlers called correct targets event model weird stuff conclusion tests ignoring mouse events probably best workaround problems threshold could lowered totally depends expensive touch handlers fast device running", "d": "8/2014"}, {"body": "implies cloning empty object afaik strictly react issue", "d": "8/2014"}, {"body": "well cloned immutable object nt quite work props none issues mention strictly react issue best practice issue ie immutable objects best practice purerendermixin react however react nt quite natively support immutable objects maybe something along lines could considered reactfuture", "d": "8/2014"}, {"body": "immutable objects advocated react simply plain objects nt mutate using immutablejs problem afaik react unless make propsobject nonplain object general issue js facility cloning objects avoid using immutablejs propsobject fine sounds like javascript iterables something implemented supported immutablejs react", "d": "8/2014"}, {"body": "nt firstclass proptypes support immutablejs way nt proptypes support backbone models immutable stuff built js please think proptypes stay way better", "d": "8/2014"}, {"body": "chenglou another note curious would imagineable turn proptypes addonmixin instead guessing could nt use would already added perhaps expose another lifecycle method core react feature sure significant fraction nt use varying preferences anyway really pushing seems natural shed things nt intrinsic core", "d": "8/2014"}, {"body": "verbose anyway likely going change", "d": "8/2014"}, {"body": "try adding css style element want click", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "strange thing trying debug used workaround componentdidmount attached native event listener thisgetdomnode element removed listener componentwillunmount without cursor pointer class ios worked perfectly", "d": "8/2014"}, {"body": "taddei yeah expected react attaches event listeners document ios nt fire click events nodes unless seem clickable ie click event listener", "d": "8/2014"}, {"body": "see", "d": "8/2014"}, {"body": "seems lots related issuesbugs browsers simply nt seem provide hook personally roll versions components need except basic text fields", "d": "8/2014"}, {"body": "works event handler reads value like", "d": "8/2014"}, {"body": "hmmm yes seems explain difference", "d": "8/2014"}, {"body": "actually works error console rerendering never triggered normal caret jump work actually need update state", "d": "8/2014"}, {"body": "caret nt jump update new value flag react react polls dom updating value prevents caret jumping polling would make much practical sense think could prohibitively expensive cases would nt want think experimentation going controlled contenteditables uncontrolled sane way afaik", "d": "8/2014"}, {"body": "ah yes answer wrong idea change shouldcomponentupdate like cursor jump user types still jumps change comes script would interesting know could done controlled way", "d": "8/2014"}, {"body": "cody updating script inherently resets cursor way browser know cursor new content need get cursor position setting restore ps also beware tons undo bugs set script", "d": "8/2014"}, {"body": "libraryframework sites examples getting started simple amen personally use webpack custom resolver avoid specify paths also use slightly tweaked uglifyjs allows mirror original linebreaks closely possible awesome production errors yeah even setting config webpack first time nt simple", "d": "8/2014"}, {"body": "reasonable starting places maybe link docs somewhere", "d": "8/2014"}, {"body": "syranide uglifyjs config available somewhere right using browerify well bitten", "d": "8/2014"}, {"body": "spicyj sounds like great idea would happy build one browserify would help", "d": "8/2014"}, {"body": "madebyherzblut beware though unless run branch uglifyjs explicitly want use broken standard", "d": "8/2014"}, {"body": "thank syranide", "d": "8/2014"}, {"body": "spicyj created boilerplate uses browserify karma testing get fast workflow looksy please use think contribute", "d": "8/2014"}, {"body": "know looking maybe interested looking", "d": "8/2014"}, {"body": "chenglou would help situation editor bit yes important atom think ability integrate react html custom elements without requiring use shadow dom seems like would help seems like idea might necessary achieve well", "d": "8/2014"}, {"body": "nathansobo clarify mean without requiring use shadow dom bit uninformed html custom elements work right", "d": "8/2014"}, {"body": "give nonfalsy value ie works", "d": "8/2014"}, {"body": "feel dumb thanks", "d": "8/2014"}, {"body": "clickable leesalminengithubio", "d": "8/2014"}, {"body": "add", "d": "8/2014"}, {"body": "thanks added", "d": "8/2014"}, {"body": "surface request scope react note however cases nt need find nodes based selector example component looks something like access dom node nt flexible enough really need reach dom jquery great solution usually nt need", "d": "8/2014"}, {"body": "ok know need get specific element set ref great solution thank aug pm ben alpert notifications githubcom wrote surface request scope react note however cases nt need find nodes based selector example component looks something like var mycomponent reactcreateclass render function return elephant zebra zebra zebra zebra access dom node thisrefsheadergetdomnode nt flexible enough really need reach dom jquery great solution usually nt need reply email directly view github", "d": "8/2014"}, {"body": "short answer time createclass called unique function gets created used determine type identity next component previous component reactrendercomponent call function type check shhouldupdatereactcomponent slightly complicated said check", "d": "8/2014"}, {"body": "oh see behavior would normal right might", "d": "8/2014"}, {"body": "today yes hold true going change bit interaction return value createclass jsx simple function call might work forever advice would wrap apis let values used apis much possible specific use case mind figuring things work", "d": "8/2014"}, {"body": "yes specific case wrapping react use altjs language since everything based react altjs language nt directly support accessing intercept creation component wrap lifecycle method function passed explicitly", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "related much possible technically nt hard however discussions far devs likely nt want officially maintain jsx nonjs language nt think either arbitrary better left community case ts syntax conflicts need solvedworked around robust solution covers vast majority languages time would perhaps make sense perhaps unlikely reality", "d": "8/2014"}, {"body": "think misunderstood nt think related asking support typescript constructs jsx indeed complicated asking changes codefunctionality typescript definition file released react related jsx would annotate types typescrip give codecompletion type checking things like reactdomxxx methods available object facebook already done immutable collections typescript definition", "d": "8/2014"}, {"body": "fwiw believe bindings could autogenerated sufficient metadata types react docs autogenerated possible variation script would need running releasecheckin keep current", "d": "8/2014"}, {"body": "oh ofc although may entire story seems next release feature requirement provide class function similar instead lot work done make react statically analyzable imagine go way improving believe far biggest issue ts today", "d": "8/2014"}, {"body": "nt actually tried using ts yet nt sure issues bitten recently poor ts bindings projects like angular since prototyping react trying raise support official bindings hope could provided versioned react honest choose use react probably would nt creatingmaintaining bindings long required data exposed parsable form though nicer everyone fb created", "d": "8/2014"}, {"body": "hey dantup typescript currently compatible react seems problem needs fixing sides fence could look project fdecampredon comment also interest love typescript also like think components like react allows way currently progressing building views components jsx stores logic ts go full typescript hope something like months away", "d": "8/2014"}, {"body": "abergs thanks info read seemed much bigger asking jsx support certainly complicated interested due poor tooling support hoped possible ts support codecompletion type checking components ideally generics stateprops could typed dealbreaker since point could still use ts rest code nice got benefits ts everywhere", "d": "8/2014"}, {"body": "dantup however issues linked much related reactts without jsx", "d": "8/2014"}, {"body": "edited another example double click box see enter animation gets destroyed change transition properties single one works fine", "d": "8/2014"}, {"body": "looks like transitionend event called multiple times making think leave animation occurred would possible either specify number events expect rely specified interval", "d": "8/2014"}, {"body": "hit well switching os x app window foreground browser window chrome safari foreground focus start seeing old dom nodes piling case animating using enter leave transition", "d": "8/2014"}, {"body": "related complicated vendorprefixes reason simply acting nt means disregarding least part intentional design decision runtime styles maximum performance one feature test browser apply styles valid perhaps fall back different layout entirely sometimes serverrendered dom would full list variations output practical adviceinsight time though", "d": "8/2014"}, {"body": "right way exactly want regular css stylusnib generate css works operate dom node nt allow specify multiple values like could syranide said featurebrowser detect specifying style value actually think something whole library could built target react users nt think react", "d": "8/2014"}, {"body": "errors comes globally defined believe", "d": "8/2014"}, {"body": "block determines dom environment block jest set jsdom well mostly jeffmo might better answer certainly sounds like react issue config issue sort reopen though", "d": "8/2014"}, {"body": "awesome thanks seems jest things manipulate jsdom submission might look extracting magic use mocha", "d": "8/2014"}, {"body": "also need polyfill browsers gets complicated think edit nvm", "d": "8/2014"}, {"body": "chenglou well lots tags nt polyfill simply output asis", "d": "8/2014"}, {"body": "pekim adding reactdom part part making sure jsx transform catches looks like already want submit pr blame", "d": "8/2014"}, {"body": "completed cla earlier today", "d": "8/2014"}, {"body": "free event handler return value something else", "d": "8/2014"}, {"body": "chenglou mean", "d": "8/2014"}, {"body": "maybe otherwise always use indicate something potential future event system", "d": "8/2014"}, {"body": "duplicate componentmethods called replaced anyway free implement whatever form class composition want create object mixins convenience suspect also deprecated part remain helper sure details", "d": "8/2014"}, {"body": "would deprecate used across everything know replacing duplicate methods yes called errors stating defined else assumed could fixed class composition", "d": "8/2014"}, {"body": "adamkyle information kind spread ways simply renamed guess idea supply class ask react create element factory currently creates class element factory means free use classes want class utility prefer", "d": "8/2014"}, {"body": "use inheritance say component mount yes oh call parent clear really want code example calls methods yes called errors stating defined else nt seen case lifecycle method restricts defined rest chained repro case would helpful discussion future mixins nt appear anything currently actionable going close", "d": "8/2014"}, {"body": "cc syranide resident event export days", "d": "8/2014"}, {"body": "haha believe seen code meant fix look tomorrow see going leoasis curious need", "d": "8/2014"}, {"body": "basically trying show contextual elements whenever focused component onblur handler root component use relatedtarget blur event element going check wether element inside root one figure actually leaving component worked around right checking clicks attaching handler document object check works clicks pressing tab wo nt work example", "d": "8/2014"}, {"body": "leoasis sounds like something couldshould solve generally reason use reported nodes event react said still fixed", "d": "8/2014"}, {"body": "actually want showhide things focused hovering think contextual dropdown menu example", "d": "8/2014"}, {"body": "leoasis whichever event fits usecase choice obviously quite certain solution reactonly solution", "d": "8/2014"}, {"body": "actually used thing bubbled root element component whenever anything inside blurred still want check next element focused still inside component", "d": "8/2014"}, {"body": "leoasis think", "d": "8/2014"}, {"body": "syranide think wo nt work case since nt want handle blur events children handling event top element inside component want events propagated one", "d": "8/2014"}, {"body": "yep choice afaik reactway would handle children propagate callback props instead anyway going look fixing either way", "d": "8/2014"}, {"body": "thanks taking look anyway think still clear need nt think react way traverse entire children adding blur focus handles see blurring component clear simplified version trying fiddle notice want able select also want disappear click tab outside example input anywhere else", "d": "8/2014"}, {"body": "zpao leoasis ok apparently always firefox provide information element focused nt seem easy fix nt imagine could solved simply keeping track last focused element suspect fragile practice would expect would probably great fix also nt really fit react meant used another interesting topic shouldwould accomplish react inherently nothing put events would make sense think could probably track focused element parent parent discovers nt focused element ca nt call would signal close batching prevent time blur focus problem think", "d": "8/2014"}, {"body": "followup previous nt tested yet imagine correct solution problems react nonreact", "d": "8/2014"}, {"body": "wrong focusin focusout events supported firefox yet", "d": "8/2014"}, {"body": "hmm says listening capture similar effect react think perhaps something use shim although persistent threat called outside react control always", "d": "8/2014"}, {"body": "seen used called create get dispatched update flux docs react website reflect often times calling dispatcher example might make asynchronous request server", "d": "8/2014"}, {"body": "hi brenton yes correct access memory reference todos one reasons purist flux implementors always return copy instead original object make original object impossible modify using immutableobject similar see fluxtodomvc fluxchat trying create simple readable explanation flux concept enough fully explain idea real world implementations definitely strive go beyond simplicity examples regarding boilerplate action creator methods like todoactionsdestroy agree boilerplate however large application kind code organization really become nice way getting things organized metioned jeffchan imagine todoactions library methods also imagine libraries equal size complicated stuff like people would break two different methods situations maintaining action type similar actions makes sense keeping one action creator method note calling handleviewaction client side update handleserveraction data coming server possibly different user see fluxchat example appdispatcher implements handleviewaction handleserveraction provide different payload sources sort complexity best kept distinct place coded haphazardly within modules especially applications grow quite large helpful see actions action creators coded structured creating new ones especially true working team engineers want people stay consistent things", "d": "8/2014"}, {"body": "bonus kudos responsive posted couple documentation questions yesterday thoroughly considered core team members within one day thanks guys fwiw take look chat example still think would helpful moved semantic actions section closer first use todoactions", "d": "8/2014"}, {"body": "process building flux documentation repo feel free keep discussing going close nt know much going actually vs flux repo", "d": "8/2014"}, {"body": "could start devonly warning concerned breaking stuff", "d": "8/2014"}, {"body": "would extremely nice especially since going make push get people use inline styles future", "d": "8/2014"}, {"body": "vjeux really tests would seem would performance nightmare", "d": "8/2014"}, {"body": "syranide certainly nice possible think tricks make performant enough zpao", "d": "8/2014"}, {"body": "got public week ago btw pull request welcomed", "d": "8/2014"}, {"body": "cc zpao spicyj", "d": "8/2014"}, {"body": "yes error tells add current solution works cases rather make things strict make better ie error consistently earlier time \u00e0 la", "d": "8/2014"}, {"body": "error earlier time already need remove smart code never able error earlier way error earlier immediate traversal dev perhaps today want even foolproof edgecases pretty sure dom detached later moved personally would prefer errors soon possible rather late possible harder error surface likely make prod", "d": "8/2014"}, {"body": "agree principle also wary causing unnecessary churn especially turns add tbody automatically future would like fine adding devonly warning call telling add tbody though", "d": "8/2014"}, {"body": "ways aware service would providing made optional invalid html breaks expectations cssrules still consider element regardless stand nt see could ever provide reliable implementation many edgecases including simply account nice idea transparently add lot less obvious going happen throw composite components mix everything starts becoming really unintuitive html lenient robust solution imagine accepting specialcase nt think broken expectations worth tables commonplace could definitely important feature tables rare nt see break standard also supereasy create customclass returns reason require tons tables", "d": "8/2014"}, {"body": "actually possible insert dom nodes like today", "d": "8/2014"}, {"body": "syranide suppose work answers question", "d": "8/2014"}, {"body": "zpao created simple proofofconcept locally works questions need clarified like want subscribe children dom node events delegate handling owner component expect dom nodes responsible inner events theirselves", "d": "8/2014"}, {"body": "hmm ca nt seem repro errors seeing internally let make sure synced nt something else play want subscribe children dom node events delegate handling owner component nt anything nodes simply making sure nt break dom node passed children think simple skipping loop somewhere", "d": "8/2014"}, {"body": "think simple skipping loop somewhere really parts code expect returned children react components need wrapping dom nodes one check implementation example", "d": "8/2014"}, {"body": "rreverser issue specifically key check reactdescriptorvalidator able specify dom node custom component something intelligent like reactdomwrapper", "d": "8/2014"}, {"body": "spicyj ah got thought want able use dom nodes children components components handle dom node occurrences children fix becomes even simple", "d": "8/2014"}, {"body": "zpao spicyj however sure better option since case syntax every need iterate check dom nodes handle differently elements always react components either real ones literals wrapped nt think would convenient wrap dom nodes like text children already owner could expect readytouse react components", "d": "8/2014"}, {"body": "kind unrelatedrelated would nt make sense move check rendering stage instead feel props simply opaque values component concern ie sending children prop instead kind template thing children rendered asis warningwise would lose information creator asis pretty sure something want change sooner later anyway keep reference creator descriptor perhaps something worth digging issue may worth keeping mind", "d": "8/2014"}, {"body": "syranide would except descriptor creation time get call stack includes actual render method", "d": "8/2014"}, {"body": "pretty sure actually correct asis fact suggestion make sure never access property specified string nt quite right although make sure never access property specified string would like pronoun means roughly something", "d": "8/2014"}, {"body": "damn seriously read sentence like times finally saw word make sense ha sorry every day bs linguistics gets little invalidated", "d": "8/2014"}, {"body": "cc zpao spicyj", "d": "8/2014"}, {"body": "thought another issue somewhere ca nt find probably going need cave ship something modifies global object better story time ship", "d": "8/2014"}, {"body": "prevents ship module exports returns whether native polyfill", "d": "8/2014"}, {"body": "whole point polyfills use syntax would supported environment otherwise need teach everybody use module change code natively supported also going start supporting native syntax transforms desugar use eg js var foo var b bar b foo bar transformed becomes var b objectassign bar", "d": "8/2014"}, {"body": "something like objectassign possible could pull calls build time things modify builtin prototypes like functionprototypebind", "d": "8/2014"}, {"body": "assume nt ship react polyfills obvioussuitable packagelibrary right", "d": "8/2014"}, {"body": "syranide need figure ship might make sense ship polyfill since still new spec changed last week control distribution little bit better would definitely change us problem looming likelynottoodistant future maps sets used bigger polyfill problem", "d": "8/2014"}, {"body": "require support nonstring indices yes would issue always fall back implementation mutates nonstring keys may acceptable injected property could made nonenumerable supported oldest browsers perhaps andriod browser cloning might issue oldest browsers imagine would possible hijack default nonenumerable method replace passthrough function one could inject property without fear plan", "d": "8/2014"}, {"body": "figure details ship", "d": "8/2014"}, {"body": "yup good catch fixed docs source", "d": "8/2014"}, {"body": "say wo nt", "d": "8/2014"}, {"body": "well prop types", "d": "8/2014"}, {"body": "spicyj right wo nt throw especially", "d": "8/2014"}, {"body": "yea comment wrong feel free update syranide p", "d": "8/2014"}, {"body": "nomouth", "d": "8/2014"}, {"body": "updated op bit clarify certain cases", "d": "8/2014"}, {"body": "could expand actual implementation wrappers noted intended usage children clonewithprops case true key would taken resulting object really child key mess magic property manipulation essentially two level deep clone refs broken partially stringowner api first class refs make easier implement shared refs however little dangerous get shared ref case since overriding properties owner might relying upon imperative hooks work general children clonewithprops api patch work tip complexity iceberg start reasoning children keys think probably better separate pipeline pass properties parents children example contextlike system implicitly passes properties parent child chain eliminate valid use cases clonewithprops reasoning children often wrapping something like map easy screw keys though restrictive api would nice", "d": "8/2014"}, {"body": "make practical sense illustrate overall behave would expect keysrefs anyway primary intention confirm uneasy feeling regarding seemed theoretically quite broken apparently nt entirely wrong seems guys thought good shall make many thanks detailed reply", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "sebmarkbage ah yes nt intuitive perhaps simply inserting children asis dom ie inside composite component simply equivalent really great examination simply trying wrap head around problem", "d": "8/2014"}, {"body": "see suspected might something understand fact could cause conflict bad javascript thispropschildren normally works nt need put keys single items nt exclusively used track identity sets fact added key check changed hazard cc spicyj", "d": "8/2014"}, {"body": "always true would cause remount changed case root key ignored behavior nt different previous key behavior", "d": "8/2014"}, {"body": "ah yes true intended used cache breaker guess already", "d": "8/2014"}, {"body": "sebmarkbage ah hmm simple case suppose keys could bound owner well like ref keys would prefixed owner guid sorts behave one would expect anyway think key really work interesting becomes seems purpose key twofold managing lifetime stateful reordering skipping mind exercises trialanderror instant feeling quite convinced creator able specify true key descriptor stateful reordering would prefixed creator guid preventing unforseen conflicts derivative descriptors append imaginary keyprefix managing lifetime unique derivate descriptors inherently statefully reordered simply rendering different order mind currently makes lot sense perhaps missing something obvious failing explain myselftoo tired think straight", "d": "8/2014"}, {"body": "original keys prefixed ownership level ensured owner taken account problem nt remember owner already taken account lifetime could collide reordering case", "d": "8/2014"}, {"body": "probably somewhat yesterday anyway stepping one step back looking problem technicaldata perspective seems straightforward unless missed something important would define simply array instances receive reference actual implementation may vary ofc anyway meat however seems really quite complicated least trouble wrapping head around index implicit key seemingly computed creator incase children filtered etc ca nt since arrayobject children cantdo nt want applyrequire immediatespecial processing children passed number ways missed something obvious immediate solution think appeals allowing filteringsortinginteraction lists children dedicated api ensuring index maintained filteringsorting requires polyfilled avoid numeric indices objects fragile way index maintained rendered solution implicit index key think rather instanceidentifying key could simply look like imagine instances stored global map thing missing definition parse intention think derivative descriptors would nt able control lifetime children would actually amount added value entirely sure nt think cool thing however instances reparentable default even using regardless instance actually renders end using descriptor would also reparentable edit forgot mention definition keys creatorinstancelocal parentlocal need cool bit think makes sense instant always something also think would interesting consider reparenting idea able keep nonrendered instances destroyed imagine able returnwrap descriptors actually mounted destroyed either perhaps always better solved visually hiding though form may make sense reparenting eg waiting reparenting target become ready maybe", "d": "8/2014"}, {"body": "always treat state like private instance variables never call except want allow components set state expose specific setter methods case simply set value dom directly setting also course use controlled components take advantage react data flow recommended takes little work initially tends much easier reason road", "d": "8/2014"}, {"body": "cc benjamn sounds like commoner problem", "d": "8/2014"}, {"body": "unclear proposing already reactserverrenderingtransaction internally makes things behave differently server rendering else thinking might differ", "d": "8/2014"}, {"body": "way serverrendering handled internally allow different nodes generated different attributes proposing exposing api able serverrendered markup potentially entirely different clientrendered markup purpose better seo ux speed suggesting general idea ie generate completely different markup serverside without affecting clientside performance scriptblock could theoretically allow button showhide contentcomponent page finished loading approach could also used seopurposes limiting size generated serverside markup personally element polyfills require work serverrendering rendering asis without clearing browsers nopartial support break seems exposing eg introducing new behavior reusing serverrendered markup correct solution eg something like reusing serverrendered markup client would first render normally using immediately afterwards would render instead dom generated server reused much possible also enabling serverclient generate tailored markup", "d": "8/2014"}, {"body": "guess recommended way future", "d": "8/2014"}, {"body": "oh right reactdom overloads user overloads would useful agreed export underlying tag name eg", "d": "8/2014"}, {"body": "recommend use jsxtransformer serious development use tool instead anyway wrong although imagine best solution would override event instead possible might require special code jsxtransformer used otherwise seems like event added yep", "d": "8/2014"}, {"body": "let move discussion", "d": "8/2014"}, {"body": "saying wrong think reallife scenarios become close immeasurable performance lookups minimal scale things compression eliminate cost wordiness think little pressure improve imagine someone else put time implement would greatly appreciated", "d": "8/2014"}, {"body": "willing bet large sum money important things optimize elsewhere code react optimizing object lookups reactdom jsx complication may change future talked maybe assigning local variables maybe dropping reactdom entirely forcing import explicitly going put effort right maybe recast nt think anybody spend time right going close", "d": "8/2014"}, {"body": "likely canvas transparent default transparency ff propensity catch events pass element", "d": "8/2014"}, {"body": "sorry late response syranide follow eod tomorrow", "d": "8/2014"}, {"body": "adding css background effect filling canvas color also couple experiments changing css property canvas avail", "d": "8/2014"}, {"body": "get commoner gets issue open", "d": "8/2014"}, {"body": "little tricky example editor nt render div instead renders span tag dom react replacechild luck maybe throws error planning something similar though render call order get dom node put wherever want guessing would solve problem requires changes events system though likely happen immediately close issue favor one let know missing something nt think help get rid extra wrapper div perhaps could consistently render editorwrapper component rendering react shim layer render editor inside div make sorry nt better suggestion", "d": "8/2014"}, {"body": "curious add constraint root component must fixed root dom component type must export type static variable yuck easy shortterm solution seems like require minor tweaks get temporary solution inplace comes around super familiar affected code ca nt guarantee simple sound like acceptable workaround", "d": "8/2014"}, {"body": "spicyj love everything proposed api think really streamline integration react heterogenous environments also make easier support packages written different versions react allowing parent component integrate manually dom syranide would totally fine workaround component currently need editor always", "d": "8/2014"}, {"body": "nt even need synthetic event support currently bind everything manually", "d": "8/2014"}, {"body": "made possible fix though unsure well like", "d": "8/2014"}, {"body": "suggested solution one handle example responding enter key search field pretty standard behaviour imho", "d": "8/2014"}, {"body": "talgiat fix master enter affected ff", "d": "8/2014"}, {"body": "thanks also forgot always use key work properly support nonprintable keys", "d": "8/2014"}, {"body": "better yet arguably probably correct approach probably interested chars specific keys pressed", "d": "8/2014"}, {"body": "believe use case onkeyup makes sense since nt want submit many search requests user hold enter key seconds", "d": "8/2014"}, {"body": "bjbrewster close intended behaviour maybe document working new lowlevel transitiongroup prototype actually uses original children refs work achievable guarantee though prototype api might change", "d": "8/2014"}, {"body": "thanks chenglou seems might lot changes around refs would help well", "d": "8/2014"}, {"body": "running issue inconsistently reproduction consistently app well", "d": "8/2014"}, {"body": "introduced huge leak app cleaning react views inside backbone legacy views checking view bad reading breaking changes would handy way validate instance", "d": "8/2014"}, {"body": "rreverser really interested nt mind think slightly practical still could encourage wrong behavior think", "d": "8/2014"}, {"body": "zpao well going combine functionality single placefile nt make much sense add api changes misunderstand", "d": "8/2014"}, {"body": "think combining might end bit convergence things overlap lot slight api differences big difference jsxtransformer finds script tags considering smoothing api differences jsxtransformer browserify override new functionality add jsxtransformer would turn make new place", "d": "8/2014"}, {"body": "release notes updated nt going revert likely go away point", "d": "8/2014"}, {"body": "like access", "d": "8/2014"}, {"body": "unlikely ever expose reacttransitionevents public api thin wrapper around browser events used reactcsstransitiongroup widely essentially nt want commit supporting module", "d": "8/2014"}, {"body": "makes perfect sense course seems unnecessary duplicate functionality like already", "d": "8/2014"}, {"body": "random note thought inline styles override important wrong", "d": "8/2014"}, {"body": "vjeux going leave think probably maintain status quo support may valid uses somewhere", "d": "8/2014"}, {"body": "zpao support though nt support updating style", "d": "8/2014"}, {"body": "support see mean like saying support hyphenated styles", "d": "8/2014"}, {"body": "going eventually stop going go couple releases nice people warn", "d": "8/2014"}, {"body": "understand potentially destructive change completely removed however would nt boolean flag denotes authors wish unitless values appropriate way current functionality default author specify otherwise needs", "d": "8/2014"}, {"body": "nah think like avoid configs much possible seen lot people nt even know react insert px confused nt think confusing people say pass values even sure make boolean flag without affecting components page interested hear ideas think likely need remain librarywide decision", "d": "8/2014"}, {"body": "zpao nt best handled whatever way decide handle style user vendor prefixing etc seems like falls exact category another user callback nothing user wrap style function call kind percomponent callback style domprops general", "d": "8/2014"}, {"body": "kind late nt straightforward nt looking mount node node unmounted nt root id done something wrong", "d": "8/2014"}, {"body": "syranide yeah think want throw argument noncontainer nonempty react root node", "d": "8/2014"}, {"body": "well point want look container pointed argument children nt reactnode everything good react node must root node error", "d": "8/2014"}, {"body": "syranide ah ok agree would error nt slightly general warning described eg conditions listed could pass nonroot react node container still might qualify thought specifically looking common case accidentally pass actual component ie root node rather container", "d": "8/2014"}, {"body": "unless mistaken error makes sense html", "d": "8/2014"}, {"body": "syranide agree cases definitely lot experience could confused referring html case would nt want warning passing root node even though argument passed container contains nonroot react node right", "d": "8/2014"}, {"body": "perhaps misunderstanding seems example equal mine deeper hierarchy node valid mount even react id child important child nt react root ie error react root reused", "d": "8/2014"}, {"body": "syranide ahh got thanks explaining indeed actual errors still wonder want specific warning pass react root node particular seems like error describing would happen frequently caller confusion react root node vs container rootnodespecific warning would useful cc spicyj regardless warning general case useful probably right first step", "d": "8/2014"}, {"body": "removing element array use splice could remove property object using immutable helpers want remove particular key", "d": "8/2014"}, {"body": "spicyj react warns list elements also still tries best handle identity element list key provided ca nt done animations would best solution warn keys nt present child elements also generate key one nt provided handle animation", "d": "8/2014"}, {"body": "nschaubeck clear reacttransitiongroup unmount remount child key changes means change contents child without changing key wo nt animate keys omitted react assigns sequential increasing keys elements meaning single unkeyed child effectively key switching children one child still get animation even nt specify key usually providing key want might nice give warning", "d": "8/2014"}, {"body": "went fixed thanks reporting", "d": "8/2014"}, {"body": "yo petehunt change", "d": "8/2014"}, {"body": "left comments diff petehunt busy time", "d": "8/2014"}, {"body": "would love see land either implementation would fine using attribute using", "d": "8/2014"}, {"body": "travis nt currently allow start job immediately quite ie list files changed latest commit nt contain real code sure helps much though two options require changes tooling could add skip ci commit messages doconly commits split code docs different branches use travis branch feature", "d": "8/2014"}, {"body": "yea know travis nt allow natively yet bit remember tough tell people submitting prs ca nt even remember thinking script looked diff range got modified paths nt src vendor exit early otherwise continue would nt really run certain changes would quick noop sounds like thinking check range latest commit think would really helpful trying avoid splitting code away docs argue die lot value keeping close possible option though thanks bringing", "d": "8/2014"}, {"body": "sounds like thinking yeah pretty much idea however task still created queued still use pool quota release faster check range latest commit think would really helpful yes actually somewhere one pet projects let check send pr fix fine go proposed solution", "d": "8/2014"}, {"body": "yea think would awesome", "d": "8/2014"}, {"body": "zpao fixed please check tested fork different combinations seems work", "d": "8/2014"}, {"body": "also seems particular case", "d": "8/2014"}, {"body": "hah knew filed already point one", "d": "8/2014"}, {"body": "confirmation reactdomiframe component nt fire onload event", "d": "8/2014"}, {"body": "relevant", "d": "8/2014"}, {"body": "fixed", "d": "8/2014"}, {"body": "created simple dropin initially created nodejs included browser usage well since uses official features overrides default stack trace format pretty much builtin one code taken sources difference respects function property course nt completely solve original issue easily used users react working code development mode", "d": "8/2014"}, {"body": "still relevant", "d": "8/2014"}, {"body": "revamp soon", "d": "8/2014"}, {"body": "fixed facebookesprima slightly different way treating without following entity asis similar syranide proposal", "d": "8/2014"}, {"body": "faced similar issue peculiarity think shared leave btw point sure lack attention part faq somewhere came conclusion checksum made entire content container component code spaces container tag component tag considered trying crazy stuff code text replacement take consideration", "d": "8/2014"}, {"body": "sillero fyi actually happening server client server stores checksum client uses ensure server client rendered identical dom whitespace around inserted serverrendered html affect checksum however leading node kind including whitespace react currently look determine ca nt reused see", "d": "8/2014"}, {"body": "requests support image", "d": "8/2014"}, {"body": "image support", "d": "8/2014"}, {"body": "image support well", "d": "8/2014"}, {"body": "support using svg icon set trying make work however event bubbling nt work", "d": "8/2014"}, {"body": "missing strokedashoffset want use progress bar like", "d": "8/2014"}, {"body": "behaviour first one uncommented second one commented still error", "d": "8/2014"}, {"body": "think component got mocked got return react treats indication placing emptycomponent returns case", "d": "8/2014"}, {"body": "related", "d": "8/2014"}, {"body": "need unify testing toolchain consider composite native components differently fragment support would essentially become sure actually reactdominput way compare function equality think probably become strings instead composite version would hidden behind string representation becomes tricky cases internals exposed automatically drills might drill string base descriptor composite likely try avoid style deep testing move towards shallow testing output single level", "d": "8/2014"}, {"body": "addressed", "d": "8/2014"}, {"body": "communicating best practices pretty important one biggest wins react js frameworks effectively flaskdjangorails js render initial markup server maintain seo load feel snappy underpowered user agents pretty excited see reactpage react organization deprecated recommended alternative", "d": "8/2014"}, {"body": "reactpage supported one time maintain adds decent bit live reloading tech etc built react either nt need build even hard webpack reactrendercomponenttostring supported server rendering plans deprecate server rendering important feature react", "d": "8/2014"}, {"body": "expected future work fine close issue", "d": "8/2014"}, {"body": "like say input refs field names return backend match wo nt write lines following work coffeescript sample though thanks issue learnt defaultvalue used", "d": "8/2014"}, {"body": "sebmarkbage different", "d": "8/2014"}, {"body": "also running thing demo practice means markdown editor nt making things appear nonlinks become invalid ca nt comment implementation html properties vs attributes yuck surprising user probably leave let confusing behaviour nt acceptable working around would bit painful key tag becomes remounted small vote fixing", "d": "8/2014"}, {"body": "decided swap element toggling presence attribute nt possible atm", "d": "8/2014"}, {"body": "pr seems rather safe perhaps need add test propertyonly properties nag sebmarkbage bit might consider", "d": "8/2014"}, {"body": "aetet check close animation draft still long work progress even lands far future react probably naturally support like supports eg jquery right thanks heads", "d": "8/2014"}, {"body": "spicyj zpao probably closed", "d": "8/2014"}, {"body": "thumbsup thanks triaging", "d": "8/2014"}, {"body": "spicyj zpao fix landed time ago", "d": "8/2014"}, {"body": "closing favor solves problem actually concrete api proposal attached", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "btw obviously use webpacklike bundler js getscrollyjs use strict var reactbrowsereventemitter require reactlibreactbrowsereventemitter viewportmetrics require reactlibviewportmetrics reactbrowsereventemitterensurescrollvaluemonitoring viewportmetricsrefreshscrollvalues function getscrolly return viewportmetricscurrentscrolltop moduleexports getscrolly", "d": "8/2014"}, {"body": "well used possibly old browsers able disable browsers everyone happy right could still optimized slightly anyone cares also makes sense take argument yet get scroll position provide argument instead gets scroll position internally uses call twice use result also broken events inside iframes pretty sure browsers supports touch also supports cc spicyj", "d": "8/2014"}, {"body": "agree nt tracking browsers nt need nt know way predict whether pagex pagey mouse events actually come", "d": "8/2014"}, {"body": "spicyj", "d": "8/2014"}, {"body": "another idea let resizescroll set flag mouse event created flag set update viewport metrics way update needed could potentially cause reflow events unlikely though imagine", "d": "8/2014"}, {"body": "hello also encountered warning trying access looved link gist directly console detailed explanation makes coding really enjoyable js var parent reactcreateclass componentdidmount function thispropsachildismounted thispropsachildrefsdosomethinggetdomnode focus render function return thispropsachild var child reactcreateclass handlefocus function start managing stuff render function return reactrendercomponent parent achild child documentbody yes want manage component charge going decide parent pass control child mainly convenience contained component understand would wait child mounted properly access right ca nt think better way kind house keeping maintain contained component thoughts", "d": "8/2014"}, {"body": "welp bugfree apparently lol", "d": "8/2014"}, {"body": "fuck", "d": "8/2014"}, {"body": "going go ahead declare months inactivity means going getting worked native support nt appear care much", "d": "8/2014"}, {"body": "sebmarkbage move even away prototypes think ever also inclined wontfix says months later", "d": "8/2014"}, {"body": "unfortunately react may need work environments objectprototype might mutated means objects would get extra property builtins language like move towards using hasownproperty checks everything also classes provide enumerable methods also otherwise picked designed around hasownproperty checks wish nt case wish prototype chains could work well js introduce objectprototype explicitly expose reflective apis prototype chains like hasownproperty objectkeys objectgetprototypeof etc battle lost believe kind optimizations prototype chains provide possible vm engine much larger issue withcontext unfortunately ca nt support btw withcontext api almost certainly going away use getchildcontext instead", "d": "8/2014"}, {"body": "moved esprima", "d": "8/2014"}, {"body": "fyi facebookesprima pr", "d": "8/2014"}, {"body": "still plans anytime soon think probably want complete revamp reconsider docs maybe timeframe", "d": "8/2014"}, {"body": "wanted willing throw something together graphviz something simple get documented outline happens actually start happens cycles end blacklisted functions method ones actually blacklisted others probably questions", "d": "8/2014"}, {"body": "azich drew lifecycle diagram", "d": "8/2014"}, {"body": "spicyj worked well", "d": "8/2014"}, {"body": "filed dupe", "d": "8/2014"}, {"body": "going released", "d": "8/2014"}, {"body": "call crazy left field idea could transformer builds npm module create complete copies react one dev one production normal version react could look swap module returned way server get performance hit", "d": "8/2014"}, {"body": "crazy bit annoying build process though love know happening larger scale node community seems like nt first people encounter larger scale couple set main module leave code everywhere else obvious bad behavior setting globals could variants set already set change something unique build time set switch webpack building browser bundles solution super easy sure way browserify another idea modules memoizes sounding like something node code plievone linked uses objecttemplate understand bit right nt caching values change would still lookup cost would property access getter call get current environment variables one trickier would mean code wo nt internally prefer different solution even hacky using react nothing could something like plievone mentioned started shipping browerified bundles npm package end giving bundles nt access", "d": "8/2014"}, {"body": "landed close anything needs done", "d": "8/2014"}, {"body": "think hoping external file support", "d": "8/2014"}, {"body": "hey cyrusnajmabadi thank feedback fdecampredon working fork ts compiler although think wanted wait tsdevelopment stabilized things ts problematic used together react example deep dive codeplex issue actually seems resolved", "d": "8/2014"}, {"body": "exactly react team consensus kevinwolf second point defining standard realize probably lot finalizing api include method bundling ancillary assets stylesheets images audio etc component standard way build tool grunt gulp etc process ask nt appear mention asset handling wiki", "d": "8/2014"}, {"body": "willdady consensus yet like rcss think make closer acceptable solution general population still waiting petehunt open source webpack stuff", "d": "8/2014"}, {"body": "spicyj may answer matthewwithanm since ran issue still serverside rendered pages would like open inside modal dialog made dialog component gets url via props componentdidmount fetches html server renders inside dialog using dangerouslysetinnerhtml quite surprised found code inside tag also fetched html executed", "d": "8/2014"}, {"body": "marten another name exposed browsers execute using believe jquery code explicitly goes evals code inside expecting", "d": "8/2014"}, {"body": "syranide guess spoiled jquery never realized already implemented behaviour layer converted actual react components anyway workaround disappear code point big deal surprised guess lack knowledge part", "d": "8/2014"}, {"body": "meh", "d": "8/2014"}, {"body": "reading pretty much everything related issue think would good idea add little note tutorial code snippet jquery inclusion think place really needs think finally close issue", "d": "8/2014"}, {"body": "agreed beginner tutorial nt place debate jquery vs jquery point familiarity", "d": "8/2014"}, {"body": "worth removed use jquery reactjsnet version tutorial", "d": "8/2014"}, {"body": "note jquery mandatory got merged think good newcomers react users probably already realized nt actually need jquery closing", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "syranide refs could take look better ways handle problem recently implemented custom select component solution came opening closing dropdown", "d": "8/2014"}, {"body": "syranide really bruteforced approach feels really wrong general kind thing", "d": "8/2014"}, {"body": "hojberg nt create mixin", "d": "8/2014"}, {"body": "use mouse touch events separately keeping otherwise forward thinking react framework pointer events future status issue", "d": "8/2014"}, {"body": "actually pointerevents pointergestures polyfills deprecated recently favor believe problem shadow dom using anyway", "d": "8/2014"}, {"body": "hapilly using pointerevents helper component", "d": "8/2014"}, {"body": "steida nt care development polymer though afaik pointerevents still tr", "d": "8/2014"}, {"body": "zoomclub shout want happen faster", "d": "8/2014"}, {"body": "fwiw pointerevents seem falling favor browser devs", "d": "8/2014"}, {"body": "iamdustan interesting seems weird nothing replace", "d": "8/2014"}, {"body": "syranide agreed seems like browser engineers experimenting like front end engineers sure read entirety document seemed make mention possibility good parts pointer events someday migrating touch events", "d": "8/2014"}, {"body": "iamdustan finished reading interesting stuff takeaway though discussion nt primarily shortcomings pointerevents whether browsers really provide sugar even end abandoning may still make sense provide way react demand real naturally leads idea plugging event sugar could never benefit thirdparty components feel many including would afraid commit one community event sugar tend abandoned daily basis interesting alternative perhaps reading discussion one could specify event emulation modes per domnode ie would emulate mouseevents touchevents probably flaws nt thought possible everyone could benefit hopefully would nt big strain react see goes", "d": "8/2014"}, {"body": "yungsters progress", "d": "8/2014"}, {"body": "closest thing available", "d": "8/2014"}, {"body": "thanks petehunt add found discussion reactbootstrap models tooltips interesting", "d": "8/2014"}, {"body": "react bootstrap implementation well", "d": "8/2014"}, {"body": "hey company work currently process complete frontend overhaul using reactjs even flux dispatchers trying move away jquery based overlay plugins popups currently using reactbootstrap implement tour super curious know else might even high level specification would super helpful specifically lot trouble figuring okay start positioningmanipulating overlay nodes esp ca nt use ref system dom nodes returned also trying figure best deal various problems zindexing stacking contexts thanks", "d": "8/2014"}, {"body": "hey created reactlayers based learnings working reactbootstrap reworked reflect api discussed follows react api result layer node mounted removed helps zindex issues last layer show always last child container feedback would greatly appreciated especially around api learnings fb ig implementations brainkim added basic examples next couple days plan adding example showing positioningmanipulating maybe tooltips draggable popup", "d": "8/2014"}, {"body": "pieterv great take look get back", "d": "8/2014"}, {"body": "going close really problem esprima nt really made movement months maybe creating new issue bring attention", "d": "8/2014"}, {"body": "nt generally tricky case unclosed multiline strings whatever comes next valid regardless much looks like code everything technically valid point closing tag input case kicks nt accept statements technically nt even unenclosed input issue case spicyj said rather erroring orphaned sounds like best solution", "d": "8/2014"}, {"body": "maybe would useful consider flux storelike solution like kind store wraps windowlevel events emits synthetic events components could subscribe unsubscribe see fit javascript onwindowresize function event whatever want response resize event componentdidmount function thissubscription reacteventssubscribe reacteventsconstantswindowresize thisonwindowresize componentwillunmount function thissubscriptionremove", "d": "8/2014"}, {"body": "salier ever make work know lot happened area since time last year", "d": "8/2014"}, {"body": "requesting objective controlled contenteditable component makes use event use native contenteditable behavior uncontrolled component latter sufficient use case modern browsers inclined agree masklinn though joshduck notes work may need done get better legacy browser support", "d": "8/2014"}, {"body": "update docset use dash", "d": "8/2014"}, {"body": "agirton mazubieta ready put something tomorrow edit react docset dash", "d": "8/2014"}, {"body": "thanks chenglou", "d": "8/2014"}, {"body": "awesome thank", "d": "8/2014"}, {"body": "point going close obviously nt making specific effort around may end going back autobinding move towards real classes", "d": "8/2014"}, {"body": "also issue interop react custom elements something like property allowed passing arbitrary properties diffing simple strings seems like would work well", "d": "8/2014"}, {"body": "ran problem well calling assumed would updated call seems bit ridiculous manually track actual state order able correctly call really making worry often state actually correct batch state updates behind scenes rendering sure nt make keep track state uptodate please fix edit get around case placing call callback cases callback workaround nt simple clean still seems counterintuitive", "d": "8/2014"}, {"body": "also currently issue really sure refers agree ideally refer latest state regardless whether visible ui", "d": "8/2014"}, {"body": "edit also check douglas answer stackoverflow question may enough solve problems without workaround nambrot looking quick fix ended creating utility function wraps creates separate version state always uptodate change calls replace calls super optimal unfortunately getting errors trying direct swap new function also lose generated property using jsx transform define want correct tag names show react tools disclaimer nt super well tested let know problems", "d": "8/2014"}, {"body": "ran problem azoerb", "d": "8/2014"}, {"body": "actually hoping something would actually lint raw jsx part coding process jsx compiler obviously catches almost everything specific line numbers easy fix typos compile attempt sucks run compiler find syntax errors static analysis would reveal simply ignoring sections code nt fix problem static analysis formal definition jsx syntax like language report anywhere could used guide true static parserlinter linting jsx transform crowd nt care whether compiled machine code altjs conforms arbitrary standard best style", "d": "8/2014"}, {"body": "related", "d": "8/2014"}, {"title": "von custom events", "body": "project extensively use binding overrided von directive support hardcoded dom events variable think", "num": "413", "d": "8/2014"}, {"title": "ngrepeat fails collection identical elements passed", "body": "eg looped filter returns elements slice happens due items newcollection identical get index last causes", "num": "412", "d": "8/2014"}, {"title": "component problem dynamic data change", "body": "hi modified treeview sample added event onclick add change type object folder adding children seems working partially worked evaluated error undefined function upon adding children", "num": "411", "d": "8/2014"}, {"title": "release version", "body": "release version since released long time ago", "num": "410", "d": "8/2014"}, {"title": "suggestion add new option", "body": "", "num": "409", "d": "8/2014"}, {"title": "nested array ul help", "body": "hi man need help followed treeview sample confused last ul appends extra items nt", "num": "408", "d": "8/2014"}, {"title": "input text box multibyte string", "body": "tryed input multibyte string textbox site case could display multibyte string browser firefox chrome case ok case ascii string ok", "num": "407", "d": "8/2014"}, {"title": "suggestion set dom node", "body": "feature request suggest assign dom member like following example template html content vue dom nodedom documentfragment new vue el bar data content node dom node replace template usecase proposal usecase need insert dom node directly case append content sanitized using traversing", "num": "406", "d": "8/2014"}, {"title": "next", "body": "hi evan evaluating ko vue mithril leaning using vue upcomming projects wish proceed using next version wish possible html tags sample mvc structure ideas use next version kevs", "num": "405", "d": "8/2014"}, {"title": "suggestion reference dom node", "body": "already mentioned issue like gain access specific dom node without creating child vm needed close thought something like using parent vm like would approach use case appropriated directive made trick please tell think", "num": "404", "d": "8/2014"}, {"title": "suggestion nodejsside rendering", "body": "hello sorry impatient subject would like make suggestion implement nodejsside rendering would tested rendering jsdom bit came conclusion rather slow huge amount elements render time could reach seconds maybe would smarter implement separated templatepreparing engine maybe something similar ractive tohtml separated engine would much easier make system picking serversiderendered html browser ps thanks efforts really loved vuejs hoping use basis project absolutely able produce proper serverside rendering", "num": "403", "d": "8/2014"}, {"title": "callback called twice keypath watched watch statement time scoped child component", "body": "select different option alert box changed appear appears twice case able access jsfiddle code javascript html javascript var app selected options vuecomponent sub template var demo new vue el demo data app ready function watch selected function val alert changed var e documentgetelementbyid sval eaddeventlistener change function var struser eoptions eselectedindex value alert struser demo set selected struser false", "num": "402", "d": "8/2014"}, {"title": "vif", "body": "", "num": "401", "d": "8/2014"}, {"title": "feature stop dispatch propagation", "body": "would like ability stop propagation event upon dispatch right thinking callbacks optionally return true signal event longer propagated happy submitting patch acceptable option something vue wants framework thoughts", "num": "400", "d": "8/2014"}, {"title": "batching logic watch array events", "body": "assume vuejs purposely considers recent changemutation event given array within given nexttimerequestanimationframe splice immediately followed push push mutation event observed also conscious decision override array mutation events ie splice push etc recent changes observed items array something like vue observe push mutation event live example", "num": "399", "d": "8/2014"}, {"title": "vrepeat watch data", "body": "try watch item expect callback fired child modified change child fire children callback bug short example watch sample bug watch item sample maybe right", "num": "398", "d": "8/2014"}, {"title": "recursive template", "body": "hi evan could give example component recursive template data like", "num": "397", "d": "8/2014"}, {"title": "bind function vwith", "body": "want create component takes callback parameter able declaring function inside data parent passing component using vwith prefer declare function inside methods vs data since data requires bind also needs set ready callback otherwise undefined quite ugly better way", "num": "396", "d": "8/2014"}, {"title": "attached event longer works", "body": "relying attached event places code longer works latest version please see jsfiddle", "num": "395", "d": "8/2014"}, {"title": "unexpected delay two vtransition", "body": "stuck issue cause awkward pages transitions using poor memory devices tested ipad gen far translating fullviewport views vleave venter works fine desktop device delay reveal blank two views guess caused time takes ipad insert view dom tried multiple instead unfortunately behavior maybe shorter delay issue design mistake app pages transitions could link two vtransition wait avoid blank gap", "num": "394", "d": "8/2014"}, {"title": "question nexttick compiler ready hook", "body": "might related noticing lately vms hook called content accessible yet queryselector returning nullempty array offsetwidthheight returning sometime use access template elementproperties sometime even double nested needed wondering bug introduced never issue think happens without use partials cf referenced issue check work sure took look source noticed hook executed synchronously calls methods synchronous since manipulate dom nt understand behavior another question related ensures updates done calls callback since requestanimationframe settimeout fallback compiler fits updates process raf settimeout interval collection questions asking async stuff vue real issue would really pleased someone able enlighten", "num": "393", "d": "8/2014"}, {"title": "beforeupdate hook directives", "body": "trying find solution notified dom update takes place particular usecase integrating vue third party plugin also manipulated dom looking safe way ensure execution order vue renders dom lib initializes dom modification gt state update set lib uninitialize revert dom modification vue rerenders dom lib initializes dom modification tried use directive solves step looking something like inside directive handle proper way handle", "num": "392", "d": "8/2014"}, {"title": "empty data string converted object", "body": "created data property empty string value view used vif display element length created property higher using property input field shows looks like property converted string object fiddle issue fix behaviour", "num": "391", "d": "8/2014"}, {"title": "would best practices nested vrepeat", "body": "like use vrepeat like ngrepeat angularjs html tag however code nt work use filter convert js array like html tag", "num": "388", "d": "8/2014"}, {"title": "index seem attached alias", "body": "really like aliasing element within loop surprised work html item index itemname instead seem able use trouble specify context index loop within loop would seem access inner sensibly nearest context outer ones think allowing thank great library much appreciated daniel", "num": "386", "d": "8/2014"}, {"title": "access first parent vm generated directives", "body": "writing custom directives obviously return vm owns possible accessfind first parent vm generated directives create like vif instance like component manually instantiated vm instead", "num": "384", "d": "8/2014"}, {"title": "polyfills ie amp mobile browsers", "body": "difficult think", "num": "383", "d": "8/2014"}, {"title": "event handler changes", "body": "would like event component content tag changes component needs calculations based elements inside content element", "num": "382", "d": "8/2014"}, {"title": "filtered array shares index views", "body": "encountered strange problem value incorrectly set elements array seems occur array shared two views view value referenced computed property view b array filtered arbitrary subproperty put together clearest example could click one check boxes item selected however also see value view reflect index element filtered view b make another selection appears value computed reverts correct value thanks great library edit one additional note updated example reflect similar problem one originally use value tying together input label label temporarily incorrectly associate wrong input element demonstrate click cathy label watch strange selection behavior", "num": "381", "d": "8/2014"}, {"body": "dispatching custom dom events element using listen vue component events", "d": "8/2014"}, {"body": "dispatching custom events emit dom events yes using von listen vue component events gist von directive", "d": "8/2014"}, {"body": "think better dedicated dom events fact introduces new option", "d": "8/2014"}, {"body": "implement something similar new api example directive bind events js think user component interface easier use one directive dom level abstraction understand sometimes messy want mix dom events custom events", "d": "8/2014"}, {"body": "new option intended used component definition time js eg like keep markup totally write custom directive bind component events think better keep separate", "d": "8/2014"}, {"body": "yes known issue addressed", "d": "8/2014"}, {"body": "possible component instantiated ca nt change type changing data suggestion removing original object replace new one different type", "d": "8/2014"}, {"body": "similar approach sorry new vue", "d": "8/2014"}, {"body": "way idea behind problem dynamically add menu certain user time clicks function function fetches data propagate ui tree tree also propagated application modulesplugins removingreplacing whole index trivial doable need manually dumping temp var dumping index wanted show together items added modules nt handled already vue since replacing object properties adding nodesarrays observed ko straight forward index modification wish know point view suggest another thing without component approach", "d": "8/2014"}, {"body": "moved mithril", "d": "8/2014"}, {"body": "please patient complete rewrite currently complete also test coverage work officially released", "d": "8/2014"}, {"body": "\u80af\u5b9a\u4e0d\u53ef\u80fd\u628a jade \u5305\u88c5\u5728 vue browserify jadeify", "d": "8/2014"}, {"body": "hi trying", "d": "8/2014"}, {"body": "fixed", "d": "8/2014"}, {"body": "multibyte string example \u3042\u3042\u3042", "d": "8/2014"}, {"body": "opinion want new directive like bind children following vm databardiv element directly", "d": "8/2014"}, {"body": "hard understand nt misusing vue data", "d": "8/2014"}, {"body": "putting dom nodes data bad idea circular references probably looking something like", "d": "8/2014"}, {"body": "proposed introduce hatch manipulate dom nodes directly avoid mxss pitfall caused difference browser html parser nonbrowser based html parsers use treat html text fragment think cases need parse html text fragment dom subtree sanitize client side use purpose however must treat fragment string avoid mxss case would better treat directly putting dom nodes data bad idea circular references hmm resolve problem provide single way binding dom case probably looking something like feel proposal makes sense also think use convenience accept approach need iterate create list hand", "d": "8/2014"}, {"body": "hmm resolve problem provide single way binding dom case nt think dom node belongs intended data like specific hash holds dom references lile something like like make array dom references avoid overriding issue", "d": "8/2014"}, {"body": "like vref vrepeat make array dom references avoid overriding issue sounds good agree said thank discussion close issue duplicate", "d": "8/2014"}, {"body": "comparing apples amp oranges obviously ko vs vue compared provide binding html markup imho vue wins verbosity ko mithril quite different generates vue markup way optional syntax looks like old school js onclick etc", "d": "8/2014"}, {"body": "vue awesome", "d": "8/2014"}, {"body": "mean tags vue already supports using component custom tags component name must contain hyphen eg use", "d": "8/2014"}, {"body": "hi boussou actually comparing evaluating go one playing around vue likely happy yes using vue sorry yes supports already", "d": "8/2014"}, {"body": "cases would convenient able retrieve pointer given dom node component without creating new component wonder could nt keep api vref however amp vue manage differences", "d": "8/2014"}, {"body": "like idea keeping api simple promise vm reference mixed array dom nodes could confusing well dispatching refs two different arrays maybe another idea using dom nodes", "d": "8/2014"}, {"body": "rayfranco mistake right really looking ability get access dom node without vm effectively vel", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "mainly way work vue query selector create strong dependance toward dom structure exists otherwise think dom report structure js opposite may wrong nodes parsed directives anyways necessary query", "d": "8/2014"}, {"body": "rayfranco using directives avoid need directly querying dom apart dom elements specific behavior canvas video enables access api getcontext pauseplay still decoupled dom believe less dom vm better testing instance", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "introduce new directive refers dom node would need care case new one like html agree ayamflow comment new directive make array dom references", "d": "8/2014"}, {"body": "yeah probably necessary jsdom slow also vue rendering large portion time spent setting dynamic bindings needed serverside rendering", "d": "8/2014"}, {"body": "maybe could learn something rendr", "d": "8/2014"}, {"body": "looking mercury modular alternative react supposed fast virtualdom module idea possible maybe could possible plug vue vdom serverside rendering sure plugin would enough like dedicated compiler", "d": "8/2014"}, {"body": "thanks tested bug gone stay tuned release", "d": "8/2014"}, {"body": "expecting", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "\u043d\u0438\u043f\u0430\u043d\u044f\u0442\u043d\u0430", "d": "8/2014"}, {"body": "vif \u53ef\u4ee5\u7ed1\u5b9a\u8868\u8fbe\u5f0f\u6216\u8005 computed", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "maybe allowing like specs passing booleans nt really selfexplanatory", "d": "8/2014"}, {"body": "already branch callback stop dispatchbroadcast recursions ayamflow vm instance events create event objects rely return value", "d": "8/2014"}, {"body": "ahead thanks grab", "d": "8/2014"}, {"body": "note branch complete yet wait official release", "d": "8/2014"}, {"body": "worries happy see going towards path solves issue easily patch current version tree interim", "d": "8/2014"}, {"body": "yes nt intended provide detailed change records use case concerned final changed value want get access every incremental change event use emitter emits events synchronously eg well documented going change possibly separate api methods eg watch watchsync", "d": "8/2014"}, {"body": "give try thanks", "d": "8/2014"}, {"body": "bug likely go away", "d": "8/2014"}, {"body": "ok thank", "d": "8/2014"}, {"body": "think one", "d": "8/2014"}, {"body": "orz thank much calebboyd", "d": "8/2014"}, {"body": "would want pass callback use events", "d": "8/2014"}, {"body": "read events part impression implemented dom events slow look code see implemented theoretically could implemented directly traversing parents list want provided perf", "d": "8/2014"}, {"body": "please feel free close issue mechanism amp perf fine", "d": "8/2014"}, {"body": "might css transitions handled olderversion webkit nt old device test guess internally two transition definitely triggered together since rely data transitions event loop batched", "d": "8/2014"}, {"body": "good know transitions triggered together first thought queue handled animation frames frame rate goes sometimes synchronous function could slip transition queue quite abstract thinking guess nt think webkit version since could happen computer app go slow reasons reproduce bug app vue couple month ago uses kind transitions toggling panel classement ranking see always sync even disappear end transition sometimes app easy see fixed background hide bug project currently working obvious user something went wrong", "d": "8/2014"}, {"body": "animation going time", "d": "8/2014"}, {"body": "yes views like methods setscene function ithiscurrentscene return see toggle property responsible views toggle dispatch events views tell set unset use case event could start use requestanimationframe view never using background called updating data issue simple views using requestanimationframe involved way bad using requestanimationframe vuejs using nexttick instead", "d": "8/2014"}, {"body": "asked raf css transitions going together sometimes would cause noticeable jank seems issue nothing think something try write similar transition vanilla jscss see issue persists old devices since vue simply toggling css classes pretty sure toggling done event loop", "d": "8/2014"}, {"body": "took another look figured indeed caused vue enter transitions batched nexttick delay want make sure trigger one forced layout leave transitions one frame difference two fixed", "d": "8/2014"}, {"body": "thanks lot watching works nice every devices closing issue happy smile", "d": "8/2014"}, {"body": "first issue might component created inserted dom yet directive created yet however sure really cause would help reproduce bug fiddle question raf settimeout triggered strictly counting time rather simply put task function queue queue guaranteed executed order even takes longer exhaust queue", "d": "8/2014"}, {"body": "try make fiddle work component either created custom vview manually cases first instantiation component call might understand actually basic dom rendering fact job minimize job queue browser takes less render smooth experience", "d": "8/2014"}, {"body": "alright indeed coming fact component created procedurally hook called vm added dom find behavior odd expecting fire component el compiled attached dom vm fragment compiled inserted anyway used custom hook like use appendto callback send event somecomp appendto wrapper function somecomp emit hook added component hook added someawesomemethod nt need weird double nested anymore probably watch ready added event dom logic feeling lazy", "d": "8/2014"}, {"body": "also try hook although hook kinda unreliable sometimes", "d": "8/2014"}, {"body": "ah nt think one thought called try", "d": "8/2014"}, {"body": "description seems bit abstract give bit info third party lib actually", "d": "8/2014"}, {"body": "using owlcarousel one views managed vue owl provides slider functionality image section backed view binding populates list images use vue initially set everything markup bindings image slides place tell owl wrap slider functionality achieve slider directive bind hook sets new slider like naltatis said initializing slider leads dom manipulations adds wrappers images model updates vue tries rerender list images dom original state vue knows things fall apart vue still renders list correctly wrong place bindings etc still intact nt seem affected third party dom manipulation could possibly work around removing slider view update occurs set afterwards could find hook update callback fires vue already updatedrerendered views digging code could find way notified happens es nt seem good fit trying either hope explanation gives little context point us right direction thanks help", "d": "8/2014"}, {"body": "using owl carousel top list items rendered want actually something done update triggered right case carousel teardown right change model", "d": "8/2014"}, {"body": "right feel like clean solution part setting new carousel inside slider directive part tears lives outside directive would nice way handle symmetry know mean", "d": "8/2014"}, {"body": "personally nt recommend type hacks going introduce core however easy implement fork specifically inside need anther loop existing one", "d": "8/2014"}, {"body": "alright thanks recommendation understood correctly would turn kinda thing removing slider updating model ensure right order", "d": "8/2014"}, {"body": "yes think rare use case also nonrecommended introduce new concept directive api", "d": "8/2014"}, {"body": "alright leave close let know find nice way encapsulate nicely", "d": "8/2014"}, {"body": "testing textlength gt vue thinks object well behavior going away simply use empty string", "d": "8/2014"}, {"body": "ok thank", "d": "8/2014"}, {"body": "since tags simple array would nt use html value see displaying list section arrays primitive values", "d": "8/2014"}, {"body": "case result bind described wrong", "d": "8/2014"}, {"body": "use seems html value example using identifier array primitive values stable suggest use value instead", "d": "8/2014"}, {"body": "thank answer probably right sorry mishap", "d": "8/2014"}, {"body": "reason set item item might belong arrays still able access outer loop", "d": "8/2014"}, {"body": "thank speedy response indeed sound sensible", "d": "8/2014"}, {"body": "understand issue curious use case primarily trying readwrite vm data case newly introduced probably alleviate problem", "d": "8/2014"}, {"body": "use case directive thought could better push dom references parent instantiate template realised going vuejs design used purpose even verbose looking forward see property master branch", "d": "8/2014"}, {"body": "update instance flag indicates whether instance created flowcontrol directives etc component use flag locate first parent anonymous mechanism also used", "d": "8/2014"}, {"body": "thanks lot evan closing issue", "d": "8/2014"}, {"body": "hard polyfill due lack gettersetters plan bottom line vuejs support mobile browsers talking specifically", "d": "8/2014"}, {"body": "currently access created hook original content component tags resolved", "d": "8/2014"}, {"body": "sorry nt quite clear enough needs dynamic scenario looks similar currently access inner dom elements elchildren layout computations works fine core problem new item added array need recompute things event signaling changed would able", "d": "8/2014"}, {"body": "evan thoughts", "d": "8/2014"}, {"body": "know data changes know dom change nexttick change data address issue", "d": "8/2014"}, {"body": "believe would work would nt clean encapsulationwise simple scenario shows issue trying address imagine image pager pager vue component list images provided part content tag using vrepeat directive pager needs aware number images size loop properly number images changed dynamically fly example think netflix experience changing row changes set images view could put listener array somehow force update pager would much cleaner event came let know content updated way user component would nt write content glue code", "d": "8/2014"}, {"body": "sort similar thought seems observing dom changes bit inefficient surprisingly however want observe changes dom use mutationobserver defined part supported current browsers", "d": "8/2014"}, {"body": "nadirabid note mutationobserver mutationevents use mutationobserver polyfill", "d": "8/2014"}, {"body": "right hasty neglect ie sometimes edit another note quick note mutationobserver supposed efficient replacement mutation events polyfill might actually unusually slow", "d": "8/2014"}, {"body": "nadirabid thanks reply already knew mutationobservers really neat feature dog slow hoping would efficient way achieve vue", "d": "8/2014"}, {"body": "look moment sharing items component instances", "d": "8/2014"}, {"body": "gaydenko problem share items component instances since child views inherit data model parent seems natural thing different instances reference data edit suggesting workaround suppose could generate new array view b filter rather filter original array might work original implementation seems like work also", "d": "8/2014"}, {"body": "guess create array instance hook fact guess good way avoid sharing instances long nt class constants", "d": "8/2014"}, {"body": "indeed bug two directives racing setting index children data likely resolved since vm scope separate data shared", "d": "8/2014"}, {"body": "thanks", "d": "8/2014"}, {"body": "leave workaround anyone else might run problem alternately something akin following works vm filtered array seems work properties nested parent template explicitely passes seems work better items array changed either consuming view", "d": "8/2014"}, {"body": "seems commonly used currently included tags since lot tags list used anyway added two template parser closing", "d": "8/2014"}, {"body": "located problem templateparserjs check template dom fragment one doe nt work jsdom always returns false tried replace rendering went fine", "d": "8/2014"}, {"body": "thanks looking much appreciated", "d": "8/2014"}, {"body": "testing jsdom seems work js var jsdom require jsdom jsdomenv html test done function err window var frag windowdocumentcreatedocumentfragment consolelog frag instanceof windowdocumentfragment gt true ideas also instances also property check give false positive elements", "d": "8/2014"}, {"body": "using jsdom code example work looks like problem may context loss taking place something research also true checking good fast testing", "d": "8/2014"}, {"body": "looks like kind trick anonymous wrapper function use window object far understand window object get received several places script require system gets copied every time instead simple inheritance dom fragments created different objects wo nt work child different reason called utils function wo nt show message nodejs console", "d": "8/2014"}, {"body": "curious using vue inside jsdom including standalone built version option using", "d": "8/2014"}, {"body": "use like var fs require fs var jsdom require jsdom jsdom set direct path though also replaced mainjs compiled vuejs nt seem work well may necessary var compilerpath requireresolve vue replace srcmainjs distvuejs var compilersrc fsreadfilesync compilerpath jsdomenv html html src compilersrc done function errs window another way include inside jsdom tried way rough using check consolelog works vuejs code copypasted compiled code inside jsdom done function declaration necessary global variables document navigator maybe something else", "d": "8/2014"}, {"body": "following worked fine js var fs require fs var jsdom require jsdom var compilerpath requireresolve vue replace srcmainjs distvueminjs var compilersrc fsreadfilesync compilerpath jsdomenv html lt div gt hello lt div gt src compilersrc done function err window var vue windowvue var vm new vue template temp data hello hello world consolelog vm elinnerhtml vmhello changed vuenexttick function consolelog vm elinnerhtml think might callback", "d": "8/2014"}, {"body": "code works fine well ok sorry bad gave exact example right start wrote first post problem try use vue components try code var compilerpath requireresolve vue replace srcmainjs distvueminjs var compilersrc fsreadfilesync compilerpath jsdomenv html lt div gt hello lt div gt lt div vcomponent test gt lt div gt src compilersrc done function err window var vue windowvue vuecomponent test template would template var vm new vue template temp data hello hello world consolelog vm elinnerhtml vmhello changed vuenexttick function consolelog vm elinnerhtml", "d": "8/2014"}, {"body": "tested wip next branch code worked fine closing comprehensive serverside rendering tests release thanks digging", "d": "8/2014"}, {"body": "generate xy pairs within cells array", "d": "8/2014"}, {"body": "design mistake key value never attached data piece data belong multiple parent objects always used directly whether using repeat alias using alias available", "d": "8/2014"}, {"body": "necessary support dynamic accessors eg update changes", "d": "8/2014"}, {"body": "fixed", "d": "8/2014"}, {"body": "use method vuedebug plugin remove cluttering vuerelated properties log", "d": "8/2014"}, {"body": "hey followup pr element directive nt work well filters js fiddle work made directive applies attribute stuff modeled happy roll code base fix work filters worth solution largely incorporating solution presented stack overflow post", "d": "8/2014"}, {"body": "thanks yjkogan get directives part one directives need major refactoring would love take look directive incorporate fix", "d": "8/2014"}, {"body": "sounds good best way get send three relevant files directive helper utility tests utility whenever open pr need set aside part work day next week happy though", "d": "8/2014"}, {"body": "put gist pressure pr nt time", "d": "8/2014"}, {"body": "hard time making sure gist right amount context probably put time make pr early next week", "d": "8/2014"}, {"body": "hey opened halfbaked pr fork see mention trouble unit tests nt time yet dig figure going wrong also like add tests write casperjs integration tests use casper well write internally port", "d": "8/2014"}, {"body": "curious filters guys using contenteditables mostly input validation nt need modify contents use writeonly filters available feel nt put amount extra code vue core specific usecase contenteditable filters maybe separate plugin thanks working pr though", "d": "8/2014"}, {"body": "using filters moment wanted implementation correct felt weird directive close could nt use filter accept contenteditable wont work filters pretty much vmodel couple ux changes escape reset value enter definitely makes sense add much code something specific makes wish getting cursor easier contenteditable elements haha time look making plugin hope helpful", "d": "8/2014"}, {"body": "thought chime would easy fact working project right knockout uses mediumjs thoughts", "d": "8/2014"}, {"body": "robertleeplummerjr definitely want full control contenteditable simple wrap mediumjs custom directive", "d": "8/2014"}, {"title": "bone assembler", "body": "", "num": "3287", "d": "8/2014"}, {"title": "using backbone models serverside", "body": "hi wanted ask anyone explored using backbone models serverside interested exploring understand backbone uses jquery backbone versions use server side wo nt using jquery anything happily remove ca nt see examples serverside backbone models amp collections views wo nt using either help would greatly appreciated found far client side looking thanks help mark", "num": "3286", "d": "8/2014"}, {"title": "url error create new record", "body": "occur version url property function must specified error occurred create new record code shown blow examined collectionpreparemodel function attrs options method changed attrs instanceof model attrscollection attrscollection return attrs attrs instanceof model return attrs think bug", "num": "3284", "d": "8/2014"}, {"title": "support optscontext ajax callbacks", "body": "jquery ajax docs state attribute specified specify refer ajaxrelated callbacks many model server calls callbacks wrapped way provided methods already invoked default context rather provided context see examples success error callbacks source somewhat mentioned closed points issues tangentially related use context understand workarounds reason callbacks nt use even respect thanks", "num": "3283", "d": "8/2014"}, {"title": "timeout issue", "body": "written frontend using angularjs database mongodb used mongoose also server nodejs developed intelj idea pushed cloud works fine sometime everything stops minutescan anyone say may problemmy project code one server database another server using multiple servers causes issue", "num": "3280", "d": "8/2014"}, {"title": "backbone sends get request instead patch patch true set", "body": "hi trying save changed attributes model code patch true given options hash browser send get request patch true used everything ok sends put request override behavior make something like regards", "num": "3278", "d": "8/2014"}, {"title": "backbonehistorystart issue root param produce effect", "body": "trying change default root backbonehistorystart starting routerjs appjs example trigger fire home main page entirely served server side ie successful login user redirected mydomaincomhome prepared render client side want set root mydomainhome mydomain default backbonehistorystart missing something fired always two cases", "num": "3277", "d": "8/2014"}, {"title": "adding index method backbonemodel", "body": "often necessary get index specific model resolve case use following approach looks ugly could better add something like method possible get index specific model like following", "num": "3276", "d": "8/2014"}, {"title": "reducing fetchbased promise boilerplate", "body": "pains method resolves data returned server data returned server largely irrelevant outside model really temporary data really exposed publicly find often wanting pass promise model view makes job rendering progress indicators really simple make really simple would nice problem promise resolves plain data server obviously changing resolution fetch promise going break sorts things propose either option call changes resolved another method would probably need appropriate way handling failures also name nt great general principle stands currently resolves pretty pointless value thoughts", "num": "3274", "d": "8/2014"}, {"title": "production version js file nt version", "body": "nt version top file devel edge versions underscorejs file devel production edge assuming backbonejs production missing version number pretty important devs determining need upgrade andor costs upgrading viewing changesets", "num": "3273", "d": "8/2014"}, {"title": "backbone prototype events", "body": "var gui backboneviewextend events click clickhandler var gui guiextend events click deletehandler want use prototype inheritance incident use prototype backbone", "num": "3271", "d": "8/2014"}, {"title": "backbone prototype events", "body": "var gui backboneviewextend events click clickhandler var gui guiextend want", "num": "3270", "d": "8/2014"}, {"title": "backbonejs ie compatibility view", "body": "backbone api works ie compatibility view list browsers supported backbonejs", "num": "3269", "d": "8/2014"}, {"title": "validation validate currently set attributes", "body": "need always pass model attributes method due inside never know exactly need validated example create new model two required attributes empty default trying set one error validated second one invalid approach logical method entire model valid saved definitely remove line example add something like one", "num": "3268", "d": "8/2014"}, {"title": "fix unrecognizable characters bug safari", "body": "cause unrecognizable characters safari call especially page data get router according url leads page data show abnormally call function better", "num": "3267", "d": "8/2014"}, {"title": "input validation needed", "body": "line backbonejs preface locationhash fragment fragment fragmentreplace javascript", "num": "3264", "d": "8/2014"}, {"title": "add default value support optional routes", "body": "let say following route catname parameter optional would great could set default value lot php frameworks support functionallity know check defined mapped function think makes logic define default value route think implementations perhaps similar customizable", "num": "3263", "d": "8/2014"}, {"title": "flat ui andorid", "body": "using flat ui android application using android studio unable find autocompletetextview inside flat ui use autocompletetextview application anyone suggest way use", "num": "3262", "d": "8/2014"}, {"title": "object passed listento extend backboneevents throw descriptive error", "body": "currently message bit confusing people familiar implementation listento open happy pr", "num": "3261", "d": "8/2014"}, {"title": "virtual attributes feature", "body": "recently needed compute virtual attributes models used marionette templates use method nt nicest cluttering views added ability apps model models extend allow definition virtual attributes declaring model coffeescript class entitiesmodel extends backbonemodel tojson extend super getvirtualattributes allows object containing helpers construct attributes fly extend attributes returned proposing included backbonejs im sure impact would users backbone found useful wanted least share proposed feature therefore would something backbonejs community would want", "num": "3260", "d": "8/2014"}, {"title": "fire error overriding parse method", "body": "trying throw error server response receive within method valid tried setting key options parameter call method within overidden method model none causing callback method trigger clue actual example javascript backbonemodelextend parse function parse resp options", "num": "3257", "d": "8/2014"}, {"title": "delegateevents called initialize view constructor", "body": "hi seems latest unpublished version call moved see making break change previously modify event listeners mostly debounce function wo nt triggered frequently events delegated nt work reason change also found seems indicate original behavior expected behavior", "num": "3256", "d": "8/2014"}, {"title": "dynamic view attributes rerendering", "body": "really would welcome ability update view dynamic attributes gets rerendered take instance view two states ie selectedunselected differentiate adding selected class view el javascript var model new backbonemodel selected true var view backboneviewextend classname function return thismodelget selected selected initial render works well however rerendering view model changes view class attribute nt get updated since attributes capture instatiation view changes would reflected future rerenders view goes tagname property static per view instance", "num": "3255", "d": "8/2014"}, {"body": "please use stackoverflow mailing list questions like error gives information need know", "d": "8/2014"}, {"body": "thanks url property defined model class scope collection code works version change logs modification used statckoverflow help answer decide read backbone source code code really need break user space least change log upgrade notei think", "d": "8/2014"}, {"body": "impossible help debug without small reproducible test case try creating jsfiddle shows problem look changes", "d": "8/2014"}, {"body": "thanks preparemode function collection dropped attrscollection attrscollection add line ver works may official way create new model must let know collection information though may necessary", "d": "8/2014"}, {"body": "yup added back lines later optionscollection nt work", "d": "8/2014"}, {"body": "attrs instanceof model attrscollection attrscollection return attrs attrs instanceof model return attrs code called model constructor get model instance call collection create method realized oddly attrs instanceof model true problem solved mei change code thank", "d": "8/2014"}, {"body": "naganowl underscore bind method case", "d": "8/2014"}, {"body": "aware solution brought linked issue person stated workaround rather solution given part ajax options backbone leverages callbacks would think backbone also take advantage option well", "d": "8/2014"}, {"body": "try asking stackoverflow", "d": "8/2014"}, {"body": "browser using key lines around", "d": "8/2014"}, {"body": "using firefox archlinux emulatehttp false yes already found lines tried find bug nt seen nothing wrong", "d": "8/2014"}, {"body": "make small test jsfiddle show problem never case sending sends get request instead feel comfortable debugger try track", "d": "8/2014"}, {"body": "well something like shame never used jsfiddle ca nt get work backbone undefined error console despite attached backbonemin underscoremin jquery regards", "d": "8/2014"}, {"body": "recall correctly backboneorg downloads point github servers nt allow hotlinking updated one keep mind backbone call sync post model id", "d": "8/2014"}, {"body": "try one", "d": "8/2014"}, {"body": "yep forgot id attr fiddle case models fetched server already id attr thought mean create instead update id firstly found bug added debug consolelog modelisnew function expected case isnew false bug repeats fiddle see patch query nt want waste time proofs bug pls give time collect information unexpected behaviour report nearest future regards answer", "d": "8/2014"}, {"body": "closing find genuine bug backbone feel free post reopen", "d": "8/2014"}, {"body": "option specifying first part url pattern match let say route mydomaincomprojectsmyapphome could set projectsmyapp use home route instead writing whole projectsmyapphome line key router saying like direct home route pass keys", "d": "8/2014"}, {"body": "wrote exactly documentation says point nt work least imagine wan na entirely path unique root follow example", "d": "8/2014"}, {"body": "domain pass home root paths absolute domain would help short example jsfiddle show mean example first example empty string second example space", "d": "8/2014"}, {"body": "difference spacing mistake cuz wrote code default backbone consider root mydomaincom wan na change default root home mydomaincomhome wrong", "d": "8/2014"}, {"body": "really ca nt help without working testable example wan na try mailing list irc channel stackoverflow kinds questions github issues really problems framework continuing creates noise everyone following repo", "d": "8/2014"}, {"body": "nt real problem apologies perhaps proper documentation would nice one simple problem change default root home nobody answered documentation makes easier taking fact work thanks anyway", "d": "8/2014"}, {"body": "term index meaning context model relevant relation collection models collections type interlocking dependency nt exist elsewhere model nt think would great place start find useful definitely add application model class", "d": "8/2014"}, {"body": "available code minified version strips comments including header though sure nt consistent underscore backbone better ways keep track thirdparty libraries app either use package manager name files need example", "d": "8/2014"}, {"body": "thanks makes sense thu aug pm adam krebs notifications githubcom wrote available backboneversion code minified version strips comments including header though sure nt consistent underscore backbone better ways keep track thirdparty libraries app either use package manager name files need example reply email directly view github", "d": "8/2014"}, {"body": "please use stackoverflow mailing list irc channel questions github issues maintaining framework", "d": "8/2014"}, {"body": "backbone work every commonlyused browser find one nt working file bug", "d": "8/2014"}, {"body": "test case", "d": "8/2014"}, {"body": "donfranke avoid something like trying understand", "d": "8/2014"}, {"body": "updatehash function input validation performed href value fragment value caught app scanner xss vulnerability recommend giving fragment value treatment href value", "d": "8/2014"}, {"body": "possibly using fortify incorrectly flags xss problem see others", "d": "8/2014"}, {"body": "know check defined mapped function think makes logic define default value route think makes sense defaulting mapped function", "d": "8/2014"}, {"body": "wrong repo", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "backbone generally pretty conservative comes throwing custom errors said seems reasonable", "d": "8/2014"}, {"body": "current message", "d": "8/2014"}, {"body": "js backbonemodelextend initialize function thislistento wow function new", "d": "8/2014"}, {"body": "error stack points directly back line code called invalid object think fine error debugging maybe fine nt right word sufficient far javascript errors go", "d": "8/2014"}, {"body": "might fine sufficient seasoned javascript developer assume entire point backbone many regards make programming javascript fun easier nonseasoned engineers use correctly thinking noble goals might worthwhile consider unseasoned developers comes usability aspects documentation apis even error messages words easy obvious library author might case consumers said library", "d": "8/2014"}, {"body": "absolutely true possible pass wrong type object every single method backbone api thing trying nt work nature programming dynamic language validated type threw error whenever object incorrect type passed public method would effectively statically typed library would probably double download size errors useful development wasted bandwidth production javascript developer level seasoning learn debug problems trying use objects places nt fit particular place nt special example error common one", "d": "8/2014"}, {"body": "seen templatehelpers think want since view concern much model concern cent", "d": "8/2014"}, {"body": "yea look view template helpers used great project using mustache templates revisit fwiw works fairly well could possibly extended allow direct model use even adding attributes", "d": "8/2014"}, {"body": "templatehelpers nt limited helpers sense handlebars helpers used extra data attributes want keep model handles performance issues dealing large datasets", "d": "8/2014"}, {"body": "needed compute virtual attributes models used marionette templates problem right pass references models templates call useful methods directly real attributes virtual attributes huge part nice model", "d": "8/2014"}, {"body": "thank guys looking changing template library mustache handlebars use function ability combination template helpers turn solve underlying issue smile", "d": "8/2014"}, {"body": "still use template helpers concept mustache like marionette define custom renderer template helpers would mixed data passed template", "d": "8/2014"}, {"body": "error callback actual network connection error server error local errors might way trigger nt place try instead", "d": "8/2014"}, {"body": "jashkenas would nt describe local error understand correctly apis give valid response json even kind error particular example looks like django tastypie something similar responses like used however think would make sense case overwrite backbonesync error get json response containing server error might interpreting wrong roundrobin", "d": "8/2014"}, {"body": "nt seem correct api even returning error json object return error code indeed trigger error callback", "d": "8/2014"}, {"body": "jashkenas yeah true sometimes control", "d": "8/2014"}, {"body": "thejameskyle got right", "d": "8/2014"}, {"body": "problem api calls go cdn cdn properly handles status code something fails ca nt set status code anything cdn wo nt properly handle also imagine cases sending status code acceptable eg something happens internal server error code nt explicit enough", "d": "8/2014"}, {"body": "braddunbar got comment change ordering", "d": "8/2014"}, {"body": "hi gildorwang sorry breakage relevant pull could nt think reasons ordering stood", "d": "8/2014"}, {"body": "braddunbar see suggestion modify listeners constructor guess reasonable matter code refactoring would expect lot apps broken release next version thoughts", "d": "8/2014"}, {"body": "yes correct usually see somewhat like following actually said feel break things many users fine changing", "d": "8/2014"}, {"body": "agreed work nt want inline callback anyway fine update code use constructor way looks better indeed", "d": "8/2014"}, {"body": "correct ca nt change html tag name keep dom element preserved instead sticking classname root element put toplevel element inside template listen changes change classname nt want add div", "d": "8/2014"}, {"body": "worth mentioning backboneconditionalclassnames although unless lot probably easier manually render", "d": "8/2014"}, {"body": "thanks check", "d": "8/2014"}, {"body": "reset escape hatch allows easily efficient rendering bulk know need case use", "d": "8/2014"}, {"body": "set without making attribute changes dirty aug jeremy ashkenas notifications githubcom wrote reset escape hatch allows easily efficient rendering bulk know need case use set reply email directly view github", "d": "8/2014"}, {"body": "got thank", "d": "8/2014"}, {"body": "nope would nt fly avoid confusion need model objects pass null first argument nt need", "d": "8/2014"}, {"body": "emulatehttp option causing backbone code override jquery beforesend sure intended behavior", "d": "8/2014"}, {"body": "khodorammar think emulatehttp option override jquery beforesend anyboby could comment", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "considered developing binary search approach suggested part pull request issue however decided probably common large number items added one time especially initial load app opposed separately case adding u items finally n item list would take n lg n binary insertion method would take u n reckon would usually higher least noticable higher could try estimate approach would faster change implementation fly would make code complicated increase file size", "d": "8/2014"}, {"body": "know adding models stops use manually sort finished", "d": "8/2014"}, {"body": "trying maintain dependent collections complete set models subset b filtered function x kept synchronized using addremoveetc events b since singleadd events limited adding one model time currently hardcoded sorting insertion sorting much faster previous method fine still nt heard convincing arguments singleinsertion made slow order optimize multiinsertions ca nt easily tell difference two cases", "d": "8/2014"}, {"body": "figured test see kind performance boost one would get using calling done appears actually slow things tested use case dts outlined", "d": "8/2014"}, {"body": "thejameskyle awesome test tweaked bit even slower nt sort collections end", "d": "8/2014"}, {"body": "also nt know benchmark computer opts per second results suspect take look according test backbone sort implementation way faster native array sort makes sense backbonecollection uses either native javascript array sort underscore sortby method behind scenes sortby ends using arraysort built javascript", "d": "8/2014"}, {"body": "suspect jabberfest native tests backbone sort addition collection extra native sort ever growing array whereas ones backbone sort", "d": "8/2014"}, {"body": "megawac collectiona plain javascript array collectionb backbone collection confused results showed sorting backbone collection significantly faster sorting javascript array sorry confusion collectiona really named appropriately", "d": "8/2014"}, {"body": "ah nevermind misread tests differences backbone collection length whereas native array grow tests afaik calls benchmarkteardown tests fixed show seem want see", "d": "8/2014"}, {"body": "would awesome swamped work right love take crack help couple months", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "longer expected back priority list looks like someone else ends taking interest dives post everyone knows", "d": "8/2014"}, {"body": "hope see oo backbone soon", "d": "8/2014"}, {"body": "braddunbar correct wrong believe jquery solution problem dom custom events", "d": "8/2014"}, {"body": "yea stopimmediatepropagation hard draw parallels since backbone events bubbled like jquerydom events", "d": "8/2014"}, {"body": "true closer pattern jquery request would stopimmediatepropogation similar functionality would certainly useful nested views sharing model", "d": "8/2014"}, {"body": "seems like mention backbonecourier order courier mesh backbone events jquery events provides structured approach event flow issue would come courier model since listener control event received", "d": "8/2014"}, {"body": "jashkenas nt railsspecific url structures avoid multiple identifiers aka shallow routes common api pattern ie vs", "d": "8/2014"}, {"body": "came across issue although conclusion made also think bug need fix lots people come across confuse people backone really depends whatever jquery zepto ca nt assume need nodejs commonjs browserify hypothesis wrong otherwise many people came across problem two way solve problem fix selfly add export interface surely well docs set think code following also problem see bowerjson using jquery amd using jquery commonjs", "d": "8/2014"}, {"body": "yeah issue continuing cause friction backbone fix solve problem nonobvious awkward easily lead multiple copies jquery loaded since jquery generally need explicit dependency view classes packaged modules reason cited simply including query packagejson load backbone node probably nt want jquery dependency folks might jashkenas problem jquery unused dependency node cares takes virtually disk space time load happens thread starts let bite bullet go back simple practical", "d": "8/2014"}, {"body": "actually using modelset modelparse data right since parse option missing would really nice consistency collectionreset etc", "d": "8/2014"}, {"body": "thanks much comment chrome giving better error messages firebug helped us solve problem", "d": "8/2014"}, {"body": "welcome", "d": "8/2014"}, {"body": "another add flexibility understand points brought quoted article really opinions end day good opinions things aware nt use delete routes still opinion driving baseline backbone users quite ridiculous", "d": "8/2014"}, {"title": "emberjs breaks embersplitview", "body": "tried updating embersplitview emberjs broken source embersplitview source embersplitviewdemo embersplitview embercli addon npm link embersplitviewdemo app execution demo app looks like using emberjs demo app looks like using emberjs", "num": "5515", "d": "8/2014"}, {"title": "almondrequirejs build issue beta builds ok release build ok", "body": "made project show issue bundling ember almond works beta builds bundling ember almond works beta builds bundling ember almond work release builds something specific happens release build look", "num": "5512", "d": "8/2014"}, {"title": "templates auto generating android default browser", "body": "getting following error running application android default browser browsers missing template auto generated application running ember ps android pain debug ended use weinre", "num": "5511", "d": "8/2014"}, {"title": "feature request namespace resolver use declarative class application etc", "body": "understand small projects naming conventions makes sense like small rails projects however larger projects namespaced convention surely makes sense looking create app could default configured use default resolver easily reconfigured use namespace resolver even use fallback default resolver comes empty emberdefaultresolver resolver null assume would nice option added docs well could use following rules use convention typical directory structure gt lookup strategy important coz makes declarative logic much simpler implement say subset routes tree need authentication hardcoded way route say want authentication routes start could like leaving class creation declarative instantiation later key approutes matching admin subclass authenticating route example approutesadminprofileedit approutesrouteauthenticationextend approutesadminprofileedit could course backported existing flatnamespace strategy using complex regular expressions namespaced strategy provides way leverage future fex easy listloop route classes etc see contribute idea side project could live canary like anything like cheers", "num": "5509", "d": "8/2014"}, {"title": "automatically closing tags opened handlebars conditionals", "body": "testing upgrade noticed links rendering correctly open inside handlebars conditional working working", "num": "5507", "d": "8/2014"}, {"title": "timing queryparams updates controllers confusing deep slow route models", "body": "jsfiddle actual demonstration problem requires manually hitting route directly via url weirdness trying demonstrate loading routes used route query parameters route takes resolve prevents query params updating lower level controller deeper routes resolve client side filtering cause weird issues like double renders etc link see list developers render initially even though searchalex passed url filtering desired results demonstrate problems cause deep route attempting use controller query params search expecting query params would updated shallower route allowing use controller filtering code actual application interactions lot complex difficult describe think fiddle touches core problems running earlier versions query params exhibit issue far tell", "num": "5506", "d": "8/2014"}, {"title": "computed properties nt get updated properly depending promiseobject", "body": "bug appears using ember data believe actually bug ember promiseobject fulfills observers triggered properly reflect changes check jsbin see result using observer code noticed issue dependent keys going multiple associations", "num": "5505", "d": "8/2014"}, {"title": "provide function look default value queryparams", "body": "seeking feedback idea adding router function lookup default value query parameter case one two query parameters use helper subexpression bound computed property logic ends duplicating default value yuck example javascript apphomecontroller embercontrollerextend sortby function var defaultvalue type value defaultvalue logic new value determined return value property b c apppostscontroller emberarraycontrollerextend queryparams sortby sortby type example computed property know default queryparam going posts controller way indicate subexpression like choose default value value specify gets converted string including undefined null see two possible options add mechanism subexpression indicates default value desired though seems breaking provide router hook similar private hook makes possible look default value love hear thoughts approaching problem", "num": "5503", "d": "8/2014"}, {"title": "emcomputed way concat arrays arrays", "body": "right users users posts reference users get unique array posts would fancy footwork definitely involving writing computed property function think emcomputed property maybe called concatarrays used like var ctrl emobjectcontrollerextend", "num": "5502", "d": "8/2014"}, {"title": "mapby produces outofrangeexception appreset model set null", "body": "ran problem using mapby like setting controller model null exception raised problem unless appreset surfaces specs coded full gist demonstrating issue using ember data latest ember canary problem surfaced upgraded ember data workaround use mapby manually make computed property want", "num": "5500", "d": "8/2014"}, {"title": "components ignore layoutname", "body": "perhaps misunderstand supposed used seems components ignoring jsbin would expect component use template specified", "num": "5499", "d": "8/2014"}, {"title": "render assert false template view found", "body": "seems like logic wrong got far name populated route options args seems like assert", "num": "5498", "d": "8/2014"}, {"title": "strange behaviour inside using", "body": "somehow broken ember using ifstatement inside eachloop templates nt work like ifstatement prints true false nt seem logic see version version", "num": "5496", "d": "8/2014"}, {"title": "ember data createrecord without relationship fields data", "body": "ember model like var attr dsattr hasmany dshasmany belongsto dsbelongsto appmessage dsmodelextend users belongsto user message attr userid attr inquiryid attr route want save like var createmessage thisstorecreaterecord message message sample message userid inquiryid createmessagesave saw request ember data also added users fields nt send field request way want use users relationship field get request post request version ember emberdata", "num": "5495", "d": "8/2014"}, {"title": "ember testing wait modal window", "body": "application use bootbox confirming delete models test click button action action open bootbox text click ok button bootbox andthen method wait bootbox dissapear check model removed therefore always false tried return promise andthen helpen also nt wait promisses way let test wait untill promise bootbox resolved callback bootbox finished extra information template view controller test click specificrow actionbuttons button latest ok called save action controller triggered therefore alwasy false", "num": "5494", "d": "8/2014"}, {"title": "change event inputs textareas", "body": "quite handy event indicates focusout happened value changed way achieve afaict store previous value compare pretty tedious also seems quite unexpected works nt know use observers case want run action focusout", "num": "5492", "d": "8/2014"}, {"title": "select views nt access targetobject", "body": "suppose looping model itemcontroller call thisget targetobject change event textfieldextension class access correct thing itemcontroller however switch select call thisget parentviewcontroller access info least found work far leaving targetobject property intended omission ember selects better way access itemcontroller thisget parentviewcontroller", "num": "5488", "d": "8/2014"}, {"title": "passing classnames view component template breaks event handling", "body": "example issue rare case want set property containing array strings breaks helper entirely causing click listener seemingly ignored underlying anchor element actually perform navigation path set taken quick look source nt see obvious reasons happens example sources ember also happens", "num": "5487", "d": "8/2014"}, {"title": "nextsuper property objects", "body": "know lot changes going stuff think found bug added property objects example js var emberobjectcreate var name ohasownproperty name consolelog name run code logged console jsbin lazy oddly enough nt include assuming property declared object declared enumerable nt know bug exactly maybe quirk certainly broke code", "num": "5485", "d": "8/2014"}, {"title": "input component passing attribute type throught another component working", "body": "hi everyone think encountered bug input helper see fiddle information used chrome version issue try pass type input helper via another component work strange thing able pass name attributes well", "num": "5484", "d": "8/2014"}, {"title": "didinsertelement invoked without rendered template", "body": "going tilde training chicago using latest version ember via bower pushed exact progress replicating bug latest commit step run issue running test suite step audio matches words audioplayer template nt seem rendered invoking however defined nt able trace existing issue perhaps fault tests training year ago something else going thanks jonathan", "num": "5483", "d": "8/2014"}, {"title": "query params set model promise resolved", "body": "trying beta looks like queryparams set controller model hook resolved using promise try put jsbin together presume intended behaviour model hook setupcontroller called queryparams set", "num": "5479", "d": "8/2014"}, {"title": "route queryparameters reject model nt fire error state history router", "body": "index route query parameter option set true model route always fails test purpose course exemple found expected application go error state add query parameter application nt go error state try link gt note happens query parameter mode router location", "num": "5478", "d": "8/2014"}, {"title": "slug names must unique children resources", "body": "steps reproduce map router child containing slug name ancestor click link bar url update updated example offending code handlerinfoparams merge id multiple times", "num": "5477", "d": "8/2014"}, {"title": "html tag rendering alongside components", "body": "experiencing bug since upgrading recent canary version ember morph changes noticed completely losing bare tags example view rendered notice appear come components use style implementation sorting mechanism use application simplified illustrate issue jsbin example demonstrating issue linked also", "num": "5476", "d": "8/2014"}, {"title": "better error computedalias key self", "body": "stupid thing would also easy error catch throws infinite stack nt point know silly bug throwing descriptive error", "num": "5471", "d": "8/2014"}, {"title": "setting controller property update query param", "body": "controller defined routes setupcontroller something like query param get set url see working bin", "num": "5465", "d": "8/2014"}, {"title": "calling super frozen object results violation freeze", "body": "possible raised exception modifying frozen object exception raised though already replaces general case could addressed may ref", "num": "5464", "d": "8/2014"}, {"title": "applied mixins define nextsuper property correctly", "body": "see jsbin javascript var item foo bar var array item var myarraymixin embermixincreate contains function return thissuper myarraymixinapply array true false false false consolelog arrayhasownproperty nextsuper arraypropertyisenumerable nextsuper arraycontains true false true true consolelog arrayhasownproperty nextsuper arraypropertyisenumerable nextsuper currently defined function called creating new object array really mixins applied array instance never call constructor set instantiation correct nonenumerable configuration similar general case specific issue addressed could addressed may ref", "num": "5463", "d": "8/2014"}, {"title": "embercomputeddefaultto behaves unexpected way", "body": "defaults value property nt update property changes seems unexpected maybe could add ability indicate default update property changes eg jsbin shows unexpected behaviour", "num": "5462", "d": "8/2014"}, {"title": "add api documentation query params", "body": "need document new api added query params examples maybe", "num": "5460", "d": "8/2014"}, {"title": "handlebars helpers working properly", "body": "noticed updating canary made quick jsbin demo first one uses ember build second latest canary examples identical code wise working properly", "num": "5456", "d": "8/2014"}, {"title": "controller property goes sync template binding", "body": "going crazy pretty sure work nt seem reproduce click tweet link multiple times expands first time wo nt expand even though controller property changing", "num": "5455", "d": "8/2014"}, {"title": "container resolver come registry lookup", "body": "particular reason container check resolver checking registry see reason ask trying stub adapter use icajax integration test know work arounds could make work philosophically seems purpose container really allow injectregister factories make testing much easier always check resolver registry seems philosophy defeated", "num": "5454", "d": "8/2014"}, {"title": "returns undefined hook ember", "body": "method declared follows javascript adddynamiccss function var dynamiccss thisget cssinfo thisremoveattr style thiscss dynamiccssproperties observes cssinfo didinsertelement code works ember without problems resolves therefore gives following error", "num": "5452", "d": "8/2014"}, {"title": "svg sprites losing gradient info", "body": "tried use svg sprites ember application found gradients linear gradients break see nonember working version mixonic noted irc innerhtml seems work", "num": "5449", "d": "8/2014"}, {"title": "computed property watching query param invalidated refreshed", "body": "computed property dependent query param coffeescript projectcontroller emberobjectcontrollerextend queryparams card card null backlogcard get data save item item property card testfunc observes card observer works expected called every queryparam change problem function executed route loaded never refresh changes cache purged though function executed property accessed directly alas ca nt get app run canary currently property missing simplehandlebarsview known problem try put together jsbin", "num": "5436", "d": "8/2014"}, {"title": "input typecheckbox nt component", "body": "although issue closed think would worthwhile support developing app could actually wire action checkbox manner although according referenced issue would breaking change believe would add symmetry reduce confusion cc stefanpenner even confused mighty one", "num": "5433", "d": "8/2014"}, {"title": "checkbox lost state ember action", "body": "click checkbox loses state simple action checkinvoice function number var invoicesthisget invoices var modelthisget model modelforeach function item itemnumbernumber itemselectedtrue invoicespushobject item return also tried bind value still working", "num": "5431", "d": "8/2014"}, {"title": "linkto complex query param blows", "body": "query param mapped nested property trying include invocation throws exception eg results following error", "num": "5429", "d": "8/2014"}, {"title": "unable link resource named object", "body": "trying create resource called object using linkto helper try get path link object works fails", "num": "5425", "d": "8/2014"}, {"title": "poor error message missing component", "body": "example", "num": "5424", "d": "8/2014"}, {"title": "attribute binding textarea style property", "body": "howdy wondering reason attribute binding controls specifically textarea case trying integrate editor copies styles inline cheers", "num": "5423", "d": "8/2014"}, {"title": "duplicate objectcreate shims", "body": "documenting remove later containerhelperjs packagesemberhandlebarscompilerlibmainjs", "num": "5408", "d": "8/2014"}, {"title": "layouts selfclosing component tags", "body": "applying custom component extending layout actually applied however applying layout layout applied documentation textfield textarea claim able either jsbin demonstrating side note documented reasoning preventing nt really make sense correlation tag selfclosing supporting layouts long layout template nt able wrap contents regardless content use case like able directly extend form components apply wrapping markup seems like would common desired feature technical limitations", "num": "5405", "d": "8/2014"}, {"title": "handlebars helper item model use itemcontroller defined", "body": "hi actually sure bug expected behavior ran seemed somewhat unintuitive also see argument way issue itemcontroller property defined arraycontroller would expect use specified itemcontroller case realize two semantically somewhat different imagine user specified itemcontroller property wants itemcontroller used fiddle bug submit fix", "num": "5401", "d": "8/2014"}, {"title": "ember dont work twig", "body": "hi know wrong place ask question still answer stackoverflow using symfony project incule twig try use emberjs problem try verbatim toggle navigation brand link link link link link link endverbatim display nothing thanks helping", "num": "5395", "d": "8/2014"}, {"title": "coreobjectreopen nt handle actions hash", "body": "would expect cause routes action called instead seems action nt picked instances reopened class jsbin setup sure intended functionality bug even intended would useful call docs somewhere especially since extending classes actions hash even mixing actions hash works expected jsbin js actionmixin embermixincreate actions mixedinaction function alert mixed action fire appindexroute emberrouteextend actionmixin actions mixedinaction function alert subclassed action fire thissuper", "num": "5394", "d": "8/2014"}, {"title": "metalviews interferes mutationobserver", "body": "component grab register metalviews observer never fires ideas testing liquidfire metalviews compatibility working little effort", "num": "5386", "d": "8/2014"}, {"title": "hashchange event returns index routetransitionto fired view click event", "body": "configuring action route pass via controller view menu item configuring click event fire action menu item clicked transitionto occurs hashchange fires immediately route changes causes second transition back index really stumping fiddle using ember also able replicate", "num": "5385", "d": "8/2014"}, {"title": "handlebars error could find property queryparams", "body": "enabled features still working using embercli", "num": "5383", "d": "8/2014"}, {"title": "textarea inputhelper strips input first letter", "body": "seems like textarea helper strips input first letter property cols set template working textarea valuebody rows cols class formcontrol working textarea valuebody rows class formcontrol whether bug bad use guys personally spent time finding bug kind regards steffen", "num": "5382", "d": "8/2014"}, {"title": "changing model affected view", "body": "hi try add data model manually like data successfully loaded see ember debugger problem data render view template applicationhbs note load data using work fine custom url ca nt use construction", "num": "5381", "d": "8/2014"}, {"title": "uncaught error could find module handlebars", "body": "hi first time try emberjs every work fine starterkit put ember project use symfony framework found error console import thanks helping", "num": "5380", "d": "8/2014"}, {"title": "pushing arrayproxy triggers calls objectatcontent content array", "body": "two arrayproxies pushing top proxy triggers calls child proxy seems like pushing objects nt cause accessed fact first last objects get accessed due check", "num": "5379", "d": "8/2014"}, {"title": "nt get defined", "body": "ca nt seem figure one keep trying throws nt support property method error called", "num": "5372", "d": "8/2014"}, {"title": "javascript inside embertesting cause test fail", "body": "using ember test something inside test fail specific scenario led discover using mockjax library mock ajax calls using error whenever unmocked ajax request made noticed seeing errors test failures like would expect jsbin demonstrates desired behavior without ember jsbin demonstrates issue ember", "num": "5366", "d": "8/2014"}, {"title": "broccoli builds wrap protected words quotes object keys", "body": "causes errors happen example fix upstream", "num": "5365", "d": "8/2014"}, {"title": "closed ember component property issue", "body": "edit removing content confuse others find issue unable confirm behavior sure seeing seeing", "num": "5363", "d": "8/2014"}, {"title": "long emberrunlater causes tests slow", "body": "embertesting checks scheduled timers finish tearing app code uses long emberrunlater eg animations make integration tests slow suggested workarounds", "num": "5362", "d": "8/2014"}, {"title": "computed properties computeddefaultsto property work", "body": "missing something jsbin", "num": "5360", "d": "8/2014"}, {"title": "feature queryparams using linkto helper nested resources wrongly sets active class true", "body": "hi using query params nested route helper always set linking directly resource eg instead even query params nt match current route sure intended behaviour probably documented spent hour trying figure links active created test case demonstrating behaviour ping machty", "num": "5359", "d": "8/2014"}, {"title": "creating another instance controller", "body": "route defined like controller part code calling last line creating another instance controller init method inside called routes without sign works correctly put needs like works normally little bit weird", "num": "5358", "d": "8/2014"}, {"title": "binding input typeviewtype view template longer works", "body": "using ember views wrap input fields sophisticated dom structure rendering view pass input field type textpassword attribute like use template like worked fine broke demo ember working demo ember broken", "num": "5348", "d": "8/2014"}, {"title": "improve router", "body": "consider carefully show promise rejections inspector", "num": "5337", "d": "8/2014"}, {"title": "improve naming conventions", "body": "nt hardcode naming conventions", "num": "5336", "d": "8/2014"}, {"title": "transitionto still shows content previous screen", "body": "login page user signs upon successful login transition content page login path thisroute login path login collections path post login thisroute collections path collections login controller simply call selftransitiontoroute collections upon successful ajax login call takes user collections screen however login page still shown bottom page refresh collections login screen disappears use transitiontoroute several places app however place see issue", "num": "5335", "d": "8/2014"}, {"title": "historylocation nt use baseurl correctly", "body": "sets means something like totally reasonable except uses path calls less never include protocol domain never anything believe correct thing would extract initialization js rooturl null init function var location get location windowlocation set location location var baseurl get baseurl jquery base attr href set baseurl baseurl var origin locationorigin fmt locationprotocol locationhostname locationport locationport var rooturl get rooturl baseurlreplace origin set rooturl rooturl use js geturl function var location get location path locationpathname baseurl get baseurl baseurl baseurlreplace var url pathreplace rooturl return url", "num": "5334", "d": "8/2014"}, {"title": "rendering hierarchy place toggleproperty toggles items array called itemcontroller", "body": "issues updated latest plus toggleproperty action causes item array toggle nested componentsviews rendering place clicking similar reloading page causes proper rendering", "num": "5330", "d": "8/2014"}, {"title": "isvisible inconsistent view dom", "body": "ember implementation emberview togglevisibility may problem function called changes view nt dom aborts early means never runs two properties become disconnected possible fixed implementation js togglevisibility function var el var isvisible get isvisible thisisvisible isvisible return nb always sync isvisible isvisible thisisvisible isvisible abort dom manipulation dom el return eltoggle isvisible thisisancestorhidden return isvisible thisnotifybecamevisible else thisnotifybecamehidden", "num": "5329", "d": "8/2014"}, {"title": "emberpromiseproxymixin isfulfilled goes true content set", "body": "implementing emberpromiseproxymixin function observes isfulfilled see noticing isfulfilled going true content set due lines believe use case common reason lines order would suspect content would set isfulfilled also exactly code path would seem exhibit similar issue", "num": "5325", "d": "8/2014"}, {"title": "call contains frozen array", "body": "ember js arr objectfreeze arrcontains true ember js arr objectfreeze arrcontains typeerror ca nt add property nextsuper object extensible", "num": "5324", "d": "8/2014"}, {"title": "injecting views", "body": "using ember injecting views seem work using keyword nothing injected injection works fine controllers routes components seems discussion nt gone anywhere", "num": "5323", "d": "8/2014"}, {"title": "queryparams array strange serialization", "body": "possible bug using recent beta build specifying array queryparams result stringified array comma separated brackets translates however expected something like created jsbin ember build updated version documentation intendedcorrect behavior", "num": "5322", "d": "8/2014"}, {"title": "bug arraycomputed recalculate dependant array set", "body": "failing test case basically fails recompute synchronously dependant array set explicitly defined computed property works looks like arraycomputed issue works values cached remove prior gets also works use instead wrong assume computed properties recalculate synchronously final gets", "num": "5319", "d": "8/2014"}, {"title": "inconsistent behavior promise returns", "body": "expected behavior route model function returns promise results corresponding controller content empty seems happen instead controller content empty controller nt exist prior transition controller already exists content nt empty additional transition route correctly perform model setup response silently ignored controller model left unchanged", "num": "5310", "d": "8/2014"}, {"title": "permission use tomster logo", "body": "take get permission use tomster logo talk logo eak thread talk user designed variants easy way people submit requests commission specific approved tomster variants wifelette may help ask need logo embersimpleauth would like tomster", "num": "5302", "d": "8/2014"}, {"title": "embercollectionview content update volatile properties", "body": "come issue using embercollectionview volatile property controller current setup objectcontroller collectionview currently basically filters attributes based couple rules addremove attributes method controller triggers verified collection view object controllers ui collection view nt rerender sure however notice remove setting everything works perfectly runs need use since allow users update attributes nt cached otherwise could see older version attribute another thing nested object filteredattributes method basically takes hash transforms going post stackoverflow thought would appropriate place given unexpected behavior either way help would greatly appreciated since banged head wall hours nonvolatile volatile original issue", "num": "5300", "d": "8/2014"}, {"body": "bryanhunt quick skim lead unsure causing issue may also would good improvement", "d": "8/2014"}, {"body": "release seems come one line module definition javascript define rsvpumd rsvp function giving name make work happily requirejs", "d": "8/2014"}, {"body": "want say option invented purpose things define nt exactly meet requirejs expectations pain hopefully soon able adopt module transpiler bundle format nt need loader custom amd one case also try using almond using loaderjs ember wraps iife internally amd need stuff works almond try", "d": "8/2014"}, {"body": "provide reduced example nt actionable us", "d": "8/2014"}, {"body": "tried reproduce issue reduced example works expected unsure else could effecting application meantime adding missing files fixes issue continue build example", "d": "8/2014"}, {"body": "stefanpenner embercli problem example app nt work android", "d": "8/2014"}, {"body": "rfc process", "d": "8/2014"}, {"body": "davidpett templates intended used ember ever worked happy little accident consider dom generated template bin metamorphs sibling wildly distort updates dom whenever changes try somewhat possible make sense template using unbound group helper ember officially support usage furthermore template fail compile htmlbars instead recommend use computed property", "d": "8/2014"}, {"body": "prior behavior actually functional anyways since rerenders changes would broken gon na close issue required bugfix fix straightforward using computed property", "d": "8/2014"}, {"body": "works make necessary updates thanks guys", "d": "8/2014"}, {"body": "cyrilsf provide failing test time quickly actionable provided", "d": "8/2014"}, {"body": "time blocking nt able find good workaround meantime working", "d": "8/2014"}, {"body": "skimmed expected behavior post async relationship need use get access plans likely make many people angry remove promise proxies entirely instead make promises bindable one objects give promise never zalgoesq behaviour current promise proxies provides theory make change today promiseproxy would like good idea current situation far confusing", "d": "8/2014"}, {"body": "sad thing aliases observers unusable referring property associated model would recommended way work around feel like promiseproxy able move observers set unknown properties content fulfilled", "d": "8/2014"}, {"body": "nt believe true binding observer cp systems absorb zalgo humans use get directly problems exist", "d": "8/2014"}, {"body": "please provide example demonstrating problem described", "d": "8/2014"}, {"body": "observers aliases relies computed properties nt display comments count template average age nt get computed properly remove average become instead something stupid", "d": "8/2014"}, {"body": "run jsbin without seeing problem need spend time trying reproduce consistently problem", "d": "8/2014"}, {"body": "cyrilsf many things improve situation observersbindingscp naturally absorb issues one thing remember though cp may compute yet know may future value may result computation occurring invalid code paths could break cp important guard accordingly think clear picture current state various paths move forward provide consistent reasonable programming model point want speak would gladly try arrange hangout", "d": "8/2014"}, {"body": "people irc pointed might want function one would depend concatenates multiple arrays without uniqueness check could turn", "d": "8/2014"}, {"body": "writing computed macro something avoided javascript function concatarrays arraydepkey property return embercomputed arraydepkey property function var array thisget arraydepkey var ret use javascript var thing emberobjectextend parent children concatarrays parent", "d": "8/2014"}, {"body": "something similar purposes much nicer thanks still think belongs ember core though", "d": "8/2014"}, {"body": "disagree sorts macros belong external library consumed desired something like embercpm ultimately think core contain macros require internalprivate api access need core others moved external library easily consumed", "d": "8/2014"}, {"body": "likely called", "d": "8/2014"}, {"body": "rwjblue trouble seeing many current computed properties require private api access instance could easily implemented within function using javascript native map function foreach push calls inside could certainly rewritten outside since seems wrapper writing simple computed property missing something current computed properties really impossible replicate without private api access really case core philosophy ember respect fact utility functions ember core seems like would seem fit among current canon", "d": "8/2014"}, {"body": "flyswatter private api refering", "d": "8/2014"}, {"body": "stefanpenner sure responding rwjblue objection computed properties provided ones require access private api familiar ember internals private apis involved news", "d": "8/2014"}, {"body": "stance push addon future point time feel belongs core pull need try prevent every possible computed property entering ember proper even means good ones important ones nt make personally think primitive ember packaging addon acceptable especially means fully flesh addon brought core", "d": "8/2014"}, {"body": "love explanation reasoning could keep recommending things think addons", "d": "8/2014"}, {"body": "typically reasoning majority ember users need must implemented core example metalviews query params belongs core otherwise experiment community addon", "d": "8/2014"}, {"body": "fair enough", "d": "8/2014"}, {"body": "bcardarella components prefer corresponding component template layout block becomes template", "d": "8/2014"}, {"body": "example using embercli appcomponentsfoojs would look apptemplatescomponentsfoohbs", "d": "8/2014"}, {"body": "krisselden right ca nt tjis behavior overridden", "d": "8/2014"}, {"body": "apptemplatescomponentsfoohbs still ignore layoutname", "d": "8/2014"}, {"body": "always ignored template original component name present component looked handlebars", "d": "8/2014"}, {"body": "done", "d": "8/2014"}, {"body": "closing think legit issue chatting rwjblue seems solution straight forward", "d": "8/2014"}, {"body": "coming along later working jsbin essentially template use determine actual layout used", "d": "8/2014"}, {"body": "issues seems caused array numbers works use objects id id", "d": "8/2014"}, {"body": "issue appeared ticket implied updated description reflect", "d": "8/2014"}, {"body": "believe suffers issue", "d": "8/2014"}, {"body": "twokul exactly one said correct mixonic saying bug introduced issues original title inferred things seem work correctly use context switching version jsbin", "d": "8/2014"}, {"body": "one fun track essentially problem occurs call bind nt use bind called inside bind function class primitive value set one passed later make use changes way works inside bind function actual number object krisselden likely missing context mind explaining need condition replace line fixes current behaviour tests seem pass", "d": "8/2014"}, {"body": "repo emberdata regardless seems like stackoverflow question bug", "d": "8/2014"}, {"body": "find jsfiddle example test fails async call bootbox", "d": "8/2014"}, {"body": "use cookbooks method modals works also problem situations think", "d": "8/2014"}, {"body": "go try case test failing nt actually click link right however async issue recommend using", "d": "8/2014"}, {"body": "oh yea see found outlets yea real problem case nt look thing outside ember app space using modal using outlet recommend", "d": "8/2014"}, {"body": "biggest difference click jquery click wrap click andthen also nt work", "d": "8/2014"}, {"body": "use rsvp promises ember ember watch testing mode wait promises resolve stuff happens would try following view code", "d": "8/2014"}, {"body": "tried nt work probably action return boolean therefore promise reach test op aug schreef stanley stuart notifications githubcom use rsvp promises ember emberrsvppromise ember watch testing mode wait promises resolve stuff happens would try following view code actions askdelete function var self return new emberrsvppromise function resolve reject self td slideup promise function selfget controller send delete resolve reply email directly view github", "d": "8/2014"}, {"body": "well rsvp scheduler supposed us since regardless return lrdevries work around making promise available somewhere globally like", "d": "8/2014"}, {"body": "thank solution think global nt beautiful solution take look rsvp scheduler let work op aug schreef stanley stuart notifications githubcom well rsvp scheduler supposed us since regardless return lrdevries work around making promise available somewhere globally like reply email directly view github", "d": "8/2014"}, {"body": "think may semantics may worth improving maybe want always asyncstart asyncend embertesting cc stefanpenner", "d": "8/2014"}, {"body": "think problem firing asyncend time promise resolved async", "d": "8/2014"}, {"body": "believe problem modal outside application template testing click handler nt seem find look see works without promises async helpers lrdevries iirc helper design click things within application meaning anything descendant application template using enabled search entire document", "d": "8/2014"}, {"body": "workmanw ahh see noticed click btnprimary also worked lets test wait click want wait whole modal window wait promise", "d": "8/2014"}, {"body": "lrdevries heads depend always work helpers test executed without blocking obviously js course action take might create async operation promises deferred ajax animation etc test continue executing helper calls even waiting ajax internal test suite queue subsequent helper action case prior async operation existed could resolved prior operation completed potentially btnprimary dom always wrap anything async helper make sense", "d": "8/2014"}, {"body": "yes definitely make sense", "d": "8/2014"}, {"body": "anybody interested workaround use event", "d": "8/2014"}, {"body": "select nt component likely become one future point time wagenet believe meta issue tracking emberselect stuff", "d": "8/2014"}, {"body": "okay appears unrelated happens view check js bin super weird set template event handling stops", "d": "8/2014"}, {"body": "appears setting point wipesout previously applied classes event dispatcher relies emberview available attach view", "d": "8/2014"}, {"body": "think known would explain", "d": "8/2014"}, {"body": "yeah reviewing code think might good idea disallow setting templates personally never actually used property way fact causes views silently stop accepting events seems bad", "d": "8/2014"}, {"body": "gordonkristan nt seen anything", "d": "8/2014"}, {"body": "gordonkristan interesting quirk way added onto object nt changed see chrome using ember nt show console using ember shows firefox nt show versions", "d": "8/2014"}, {"body": "thanks gordonkristan good track ideally could figure changed possible fixes include going back old style super track super called might able efficiently replacing hasownproperty emberobject course finding introduces post", "d": "8/2014"}, {"body": "knownasilya implementation detail functionality changing quite bit since think already bug two caused like frozen object bug far fixes go like idea replacing kind dirty trick think fairly elegant nt require code changes course mean temporary fix users currently running issues obviously need proper fix", "d": "8/2014"}, {"body": "gordonkristan able use jsbin javascript var emberobjectcreate name foo var keys emberkeys var l keyslength lt l var name keys consolelog name consolelog done", "d": "8/2014"}, {"body": "introduced commit adds new mixin list existing mixins create new instance gets invoked added eventually gets wrapped object gets property moving fixes behaviour stefanpenner mixonic confirm crazy happy submit patch", "d": "8/2014"}, {"body": "twokul tests pass make move", "d": "8/2014"}, {"body": "stefanpenner nope one test fails gt lt one tests correct wrong nt think way around order invoked added either via added new function onto jsbin provided uses iterate properties iterates enumerable properties set never tell enumerable went ahead replaced line one would expect slower ran benchmarks oo mark enumerable mega doubts mixonic stefanpenner thoughts benchmark btw update benchmark results posted chrome canary stable chrome assignment benchmarkjs superfunctioncall x opssec runs sampled benchmarkjs superfunctioncall x opssec runs sampled benchmarkjs superfunctioncall x opssec runs sampled odefineproperty benchmarkjs superfunctioncall x opssec runs sampled benchmarkjs superfunctioncall x opssec runs sampled benchmarkjs superfunctioncall x opssec runs sampled", "d": "8/2014"}, {"body": "starting megadoubts indeed unfamiliar happening extend fixes would like see issue called set nonenumerable moving line maybe worth test setting defining nonenumerable would certainly explain bad behavior general posthook creating property call unfortunate putting code inside defineproperty obviously viable since runtime metal concerns would question validity using anywhere internals expect superwrapper use defineproperty nogo understanding always defineproperty slow use unless required would like see bms ie get feedback regardless nt think need use solution", "d": "8/2014"}, {"body": "performance biased likely actually changing objects repeatedly changing since resetting property configuration suspect means rechanging object shape real scenario could dealing thousands tens thousands different objects multiple different super methods", "d": "8/2014"}, {"body": "twokul think notcalling super solve problem nt think would cause issues essentially top superchain good work tracking", "d": "8/2014"}, {"body": "stefanpenner removing call inside fixes current behaviour gon na submit pr regression test", "d": "8/2014"}, {"body": "twokul awesome thanks", "d": "8/2014"}, {"body": "dertoti pass component property name working fiddle", "d": "8/2014"}, {"body": "selvagsz sry fault provided broken fiddle seems works said strange project use ember handlebars jquery nt work difference precompiling ember handlebars files load via layoutname templatename working used syntax seems still work ember deprecated", "d": "8/2014"}, {"body": "possible referring bug fixed fixed released days ultimately also", "d": "8/2014"}, {"body": "rwjblue seems bug tell update ember fix soon issue closed meanwhile", "d": "8/2014"}, {"body": "think experiencing element inserted whole view nt called right view wrapper element put dom usually almost always called rest subelements finished rendering read little well potential solution rare cases problem using render queue always worked ember team might better suggestion though", "d": "8/2014"}, {"body": "nybblr could isolate issue jsbin gordonkristan last thing happen render pipeline link perview entire subtree rendered views element ready dom first called", "d": "8/2014"}, {"body": "mmun noticed change upgrading previously could use didinsertelement use render queue", "d": "8/2014"}, {"body": "opsb would able extract example behaviour one possible explanation two disjoint subtrees rendered first subtree hooks called second subtree rendered case may want schedule ensure subtrees rendered", "d": "8/2014"}, {"body": "mmun different project week see squeeze point", "d": "8/2014"}, {"body": "mmun always case though maybe ordering subtrees get rendered changed slight thing guaranteed view element inserted subtree updated subtrees inserted true initial rendering since root ancestor brings everything dom time considering changing didinsertelement hooks deferred rendering complete right forcing layout didinsertelement big source pain ember apps updates subtrees may invalidate forced layout", "d": "8/2014"}, {"body": "opsb interesting app using latest beta maybe something changed release mmun try issue seems occur though tests tricksy isolate bug", "d": "8/2014"}, {"body": "unsure seem reasonable set model hook believe also set setupcontroller otherwise could use setupcontroller set query params another open issue regarding query params setupcontroller may related possibly related query params set", "d": "8/2014"}, {"body": "taking classic example filtering list queryparam want model set attempt filtering controller otherwise filter method check see model set attempting filtering current workaround return filter method unless model set point setupcontroller maybe missing something setting queryparam matter assigned url guess really seeing scenario want assign queryparams setupcontroller", "d": "8/2014"}, {"body": "failing test issue referring", "d": "8/2014"}, {"body": "unsure bug seems reasonable using key overrides using single flat object store params ultimately could see good candidate nice error message though", "d": "8/2014"}, {"body": "yeah torn well nt sure odd one models pk figured ed enforces whole group figured annoying go make random slugs hook corresponding serialize hooks using deeply nested resources like said nice error message would least help someone avoid wasting time debugging code second workaround big deal understood especially nt performance thing", "d": "8/2014"}, {"body": "believe default pattern use see routeprototypemodel", "d": "8/2014"}, {"body": "seems like issue correctly returns incorrectly returns problem goes away wrap html eg", "d": "8/2014"}, {"body": "reviewing code uses first element html string determine wrapping element used innerhtml parsing need reimplement wrap map", "d": "8/2014"}, {"body": "domhelper parsehtml accepts context element discussed passing around contextual element render moving domhelper context real fix fwiw jquery parsehtml also optionally accept contextual element lazy fix might reading parent view tagname building new element passing context", "d": "8/2014"}, {"body": "whoops lied jquery takes document context element context", "d": "8/2014"}, {"body": "fixed ensure things fully materialized first machty expected behavior", "d": "8/2014"}, {"body": "thought explicit tests checking", "d": "8/2014"}, {"body": "think bug tests context initial app bootup working", "d": "8/2014"}, {"body": "added failing test bug try take stab fixing", "d": "8/2014"}, {"body": "yep one reasons deprecated deprecation added", "d": "8/2014"}, {"body": "use scenarios want properties value sync another property set point diverge upstream", "d": "8/2014"}, {"body": "okay anyone interested implementation binding default value", "d": "8/2014"}, {"body": "ghost folks great implementation embercomputedonewayonewayboundoneway continue listen upstream changes ideal tool working values inside input elements param transform function transform upstream value var boundoneway function upstream transform typeof transform function default identity function transform function value return value return embercomputed upstream function key value return argumentslength gt value transform thisget upstream export default boundoneway", "d": "8/2014"}, {"body": "great", "d": "8/2014"}, {"body": "branch would work wanted", "d": "8/2014"}, {"body": "changes would submitted master branch prefix remember pull beta release channels", "d": "8/2014"}, {"body": "cool look aug pm robert jackson notifications githubcom wrote changes would submitted master branch prefix doc release reply email directly view github", "d": "8/2014"}, {"body": "correct links output looks like", "d": "8/2014"}, {"body": "api writing formatting helpers outputting dom fragments helper actually generating emits dom string concatenation believe correct way use block component", "d": "8/2014"}, {"body": "right nt aware definitely better option probably enough mention changelog", "d": "8/2014"}, {"body": "ilkkao part ember example use block component generate wrapping htmlstyles closing since caused emitting invalid dom helper", "d": "8/2014"}, {"body": "thanks read example quickly totally misunderstood", "d": "8/2014"}, {"body": "nt time dig deeper jsbin nt work either", "d": "8/2014"}, {"body": "missing concept like loadpath something basically register default user able override example trump default one", "d": "8/2014"}, {"body": "sorry nt get referring resolver level container level would go registering factory part test setup", "d": "8/2014"}, {"body": "herom method gets invoked observer view inserted dom working correctly", "d": "8/2014"}, {"body": "agree likely due changed closing happy reopen jsbin reproducing error", "d": "8/2014"}, {"body": "thanks lot remove indeed expect causes different behaviour case observe property showhide view dom always thought notation sets observer property right hook fired experienced behaviour well seems respected anymore right anyone simple solution specific case help much appreciated", "d": "8/2014"}, {"body": "herom make computed property style use bindattr something bind attribute never problem observers really low level require careful", "d": "8/2014"}, {"body": "herom hbs", "d": "8/2014"}, {"body": "rwjblue created jsbin examples diverging used ember versions working ember breaking ember know example somewhat silly illustrates issue smile stefanpenner look suggested solution problem resolved object contain css classes well dynamic computed css properties would use twice attribute even possible", "d": "8/2014"}, {"body": "herom able", "d": "8/2014"}, {"body": "seems returning looks like regression", "d": "8/2014"}, {"body": "knownasilya nt appear removing observer", "d": "8/2014"}, {"body": "stefanpenner return correct value would nt fire internal stuff runs least behaved pre incorrect behavior incorrect", "d": "8/2014"}, {"body": "seems due change embercomputedalias modified working removing alias reference", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "thanks taking time look code always thought exists prevent writing code like achieve less boilerplate code seems like regression would produce code workaround already achieved using prior rwjblue stefanpenner wasis intended behaviour", "d": "8/2014"}, {"body": "herom yea idea try find root cause", "d": "8/2014"}, {"body": "shit aliasdescriptor thought nt landing till wip fix although nt know bug actually expected behaviour", "d": "8/2014"}, {"body": "im fairly certain address bah thought aliasdescriptor going part release suppose bugfix beta means beta", "d": "8/2014"}, {"body": "thanks reopening explanation stefanpenner seems like stay thanks investigation", "d": "8/2014"}, {"body": "herom suggestions using bindings cp still much better solution using observer remember want data flow based consumption based churn basically want template pull data rest system manually push data said use issue track provide example manifestation problem", "d": "8/2014"}, {"body": "stefanpenner see suggested way use bindings computed properties try see smiley", "d": "8/2014"}, {"body": "herom correct observers pretty low level cp bindings typically user friendly way things", "d": "8/2014"}, {"body": "think good chance htmlbars fix nt already fixed salzhrani tried canary", "d": "8/2014"}, {"body": "yes still issue updated jsbin", "d": "8/2014"}, {"body": "would like keep around test case svg master eventually htmlbars hoping better", "d": "8/2014"}, {"body": "ok writing solved problem property observed read bypassed calling init info seems outdated", "d": "8/2014"}, {"body": "totally flaked bit thought saying ca nt referring fact component internally nt support actions issue might also slightly related", "d": "8/2014"}, {"body": "making checkbox component extremely straightforward reasons stated change subclass", "d": "8/2014"}, {"body": "rwjblue component remain addresses concern behavior totally differently mindfuck", "d": "8/2014"}, {"body": "currently uses see absolutely sorry mentally complicated change either component without breaking backwards compatibility attempted fix exactly disconnect correctly declined", "d": "8/2014"}, {"body": "rwjblue consider introducing deprecating removed uses leaves alone fact component syntax gives component unfortunately bug affect people use reopen use easily switch might careful released prevent early gray hair", "d": "8/2014"}, {"body": "slight correction helper syntax components require dash also deprecated", "d": "8/2014"}, {"body": "generally try keep issue tracker focused problemsbugsetc actual framework appear bug ember feel free provide failing jsbin prove otherwise seems question suited stack overflow issue tracker", "d": "8/2014"}, {"body": "machty would mind looking one", "d": "8/2014"}, {"body": "nt support query param default value computed property b nonprimitive value largely reasons url generation route nt entered yet specifically know href generate routecontroller says default value computed property whose value ca nt calculated controller nt created yet likely depends properties nt set route yet guess maaaaybe cases could support cp dependent keys starts get messy fast try work within present constraints explore support something like future", "d": "8/2014"}, {"body": "quite sure follow controller nt created yet going pull value computed otherwise also template issue happening controller must needs present guess confusing aspects works fine directions mapping query param url nested controller property setting nested controller property update url try generate link run trouble version nt use removed computed property using actions instead works cases case nt supported perhaps less cryptic error message", "d": "8/2014"}, {"body": "look prototype controller saying nt transitioned route yet one jobs router creating href route destination route uses cp query params value needs taken account generate href cps open pandora box since could depend objects expected set route transition", "d": "8/2014"}, {"body": "ok makes lot sense still wrapping head around whole qp thing understand correctly happening invoke helper needs read default value sort qp know whether bother including resulting href default value wo nt otherwise see reading computed value nt make sense statically defined values nt work example nt use computed properties since value available controller prototype managed work around using binding connect sort model parameter value works well specific usecase default always maybe would possible future optionally separate property holds query param value property holds default value", "d": "8/2014"}, {"body": "machty canshould anything", "d": "8/2014"}, {"body": "noting bitten well looking workaround upgrading apps older beta", "d": "8/2014"}, {"body": "believe remember discussion attributes nt get bindings default coming bindings everything get expensive ergo undesirable set bindings default rarely used attributes case style attribute could imagine inline styles generally considered poor form although use case definitely one needs one currently also imagine nightmare keeping bound style attribute correct given many js libraries manipulate style tags", "d": "8/2014"}, {"body": "fair enough could see lot frustration caused trying keep many different style properties sync", "d": "8/2014"}, {"body": "august alex kwiatkowski notifications githubcom wrote fair enough could see lot frustration caused trying keep many different style properties sync reply email directly view github", "d": "8/2014"}, {"body": "cheers recipher saves subclass", "d": "8/2014"}, {"body": "layout applied inside view element wrapped around elements like nt innerhtml selfclosing ca nt layouts inside contain html since innerhtml also layout check rendered html example see layout appears around would great wrapped element especially useful customizing components nt possible metalviews needed containing element template contents view removed would take markup along unfortunately ca nt change behavior", "d": "8/2014"}, {"body": "trek see nt aware contained within view wrapped around good know thanks clearing forget side note however original demonstration bug documentation states html input elements self closing layout layoutname properties applied clearly applied example", "d": "8/2014"}, {"body": "seems like regression snuck people probably reported nt work intended anyway remove app sure necessarily worth actively preventing wonky behavior", "d": "8/2014"}, {"body": "trek probably worth changing moment thought might regression thanks feedback", "d": "8/2014"}, {"body": "nope nt actually places essence explicitly bypassing controller want go directly controller handlebars foo controller handlebars foo example essentially handlebars foo controllermodel", "d": "8/2014"}, {"body": "work name also nt really know qualifies bug probably work use", "d": "8/2014"}, {"body": "lt hard work putting put liquidfire heart", "d": "8/2014"}, {"body": "need info example", "d": "8/2014"}, {"body": "extracted jsbin starts using ember working correctly type text field changes propagate bound property mutation observer notices causing title flash disable ember script tag reenable embermvjs script tag latest metalviews build see observer never fires", "d": "8/2014"}, {"body": "add nt necessarily care mutationobserver support metalviews offer something equivalently powerful changes care coming ember could register changes dom subtree efficient way would also solve issue", "d": "8/2014"}, {"body": "trying observe change text value maybe update nt recreate textnode sets existing text node nodevalue", "d": "8/2014"}, {"body": "add jsbin works simple binding always rebuilding", "d": "8/2014"}, {"body": "also forcing layout good thing maybe could defer trees done rendering centralized using could prone serious performance issues using queue forcing layout current recommendation", "d": "8/2014"}, {"body": "thanks mystery solved able avoid forcing layout", "d": "8/2014"}, {"body": "update solved caused including template remove problem goes away wish ember better stopping sort footshooting thing", "d": "8/2014"}, {"body": "run console version give edit nevermind getting error means right version handlebars", "d": "8/2014"}, {"body": "cc rwjblue", "d": "8/2014"}, {"body": "let us know version ember using", "d": "8/2014"}, {"body": "embercli v node npm handlebars v", "d": "8/2014"}, {"body": "nininea embercli version version", "d": "8/2014"}, {"body": "stefanpenner sorry ember v", "d": "8/2014"}, {"body": "nininea nt ember want query params feature must use goes well final", "d": "8/2014"}, {"body": "closing please let know nt help", "d": "8/2014"}, {"body": "able reproduce simple test case example give working works fine furthermore rows cols simply attribute bindings textarea element affect value allowed length", "d": "8/2014"}, {"body": "quick test shows seem work properly please provide jsbin demonstrating problem", "d": "8/2014"}, {"body": "hi tried create jsfiddel example using embercli setup bit larger use objectcontroller add body property seems work expected remove body property see console tries set first character textarea delegate set body l content property object proxy appmsgcontroller content undefined perhaps wrong use setup arraycontroller handles createmessage action bug feel free close issue sorry time kind regards steffen", "d": "8/2014"}, {"body": "seems fine need specify body property controller", "d": "8/2014"}, {"body": "forgetting return data model furthermore pushpayload nt return records pushes returning result would nt get anywhere however pushing payload believe response hash reused becomes new records believe could something like following model hook said question ask stackoverflow issue tracker github issues ember usage", "d": "8/2014"}, {"body": "agreed runspired feel free link stack overflow question back issue", "d": "8/2014"}, {"body": "nt know anything symphony looks though including scripts wrong order jquery handlebars need included ember", "d": "8/2014"}, {"body": "runspired corrext jquery handlebars must available ember loaded try keep issue focused bugs ember type question better suited stack overflow question please feel free crosslink question issue", "d": "8/2014"}, {"body": "proxies currently eager mmun wip believe making lazy", "d": "8/2014"}, {"body": "seems like want repeat check", "d": "8/2014"}, {"body": "tried broke tests might investigate later bug make lazy hasmany bit annoying eagerly fetch firstlast records", "d": "8/2014"}, {"body": "agree igort", "d": "8/2014"}, {"body": "problem even one watching need clear cache would true otherwise recompute", "d": "8/2014"}, {"body": "cache set though think ignoring cache nt set would cover lots cases", "d": "8/2014"}, {"body": "yeah alternatively could cache becomes invalid carefully tracking array operations content basically lazy approach", "d": "8/2014"}, {"body": "implemented suggestion link diff tests pass pretty hacky though", "d": "8/2014"}, {"body": "turn jsbin real test tomorrow", "d": "8/2014"}, {"body": "mmun need make lazyget first class thing alias descriptor work paths could also use nt like things reaching meta directly making assumptions makes hard change stuff later cc stefanpenner", "d": "8/2014"}, {"body": "also uncertain ember data ajax side effect get good design see get returning promise explicitly load data want think maybe relying lazy computation cps unexpected ajax consequence seems little steep", "d": "8/2014"}, {"body": "want add reference think alias forward lazyget emberlazyget obj proppath desc desclazyget obj key lazyget content firstobject", "d": "8/2014"}, {"body": "sound like might surprise developers", "d": "8/2014"}, {"body": "thats works sure propose alternative design", "d": "8/2014"}, {"body": "first step seems like allowing array proxies lazier", "d": "8/2014"}, {"body": "applied diff mmun links fixed problem edit check tests", "d": "8/2014"}, {"body": "mmun patch become pr", "d": "8/2014"}, {"body": "stefanpenner tricknotes think could take look", "d": "8/2014"}, {"body": "like add nt trying reextend coreobject userland ember tries boot keep poking", "d": "8/2014"}, {"body": "stefanpenner reverting previous objectcreate shim used fixes", "d": "8/2014"}, {"body": "repro using ember ie", "d": "8/2014"}, {"body": "reproduction either using ember running tests debug mode", "d": "8/2014"}, {"body": "one thing noticed previous shim nt check hasownproperty copying stuff might tired though", "d": "8/2014"}, {"body": "replicate chrome investigating", "d": "8/2014"}, {"body": "believe fixed master works correctly verification would good though", "d": "8/2014"}, {"body": "stef fixes last night bunch small tweaks morning single failing test believe issue closed fivetanley please reopen disagree", "d": "8/2014"}, {"body": "suspect due promises work wonder need automatically apply failure handler", "d": "8/2014"}, {"body": "wagenet one point promises explicitly failed test rejections seems like regression", "d": "8/2014"}, {"body": "ah seems bad", "d": "8/2014"}, {"body": "default handlers work properly throw error via see jsbin throw string things handled see jsbin error displayed qunit default qunit error handler calling ensure rest tests rerun need dig rsvp test suite ensure tests confirm primitive values thrown hit default rsvp error handler", "d": "8/2014"}, {"body": "actually fine upstream configured right brocfile fixing", "d": "8/2014"}, {"body": "turns problem dist directory vendor libraries making changes update bowerjson new git sha see", "d": "8/2014"}, {"body": "fivetanley using upstream libraries build process think changing routerjs help", "d": "8/2014"}, {"body": "fivetanley testing running ember master run production builds eg using prod builds published automatically well", "d": "8/2014"}, {"body": "fix", "d": "8/2014"}, {"body": "hmm spooky confirmed behavior seeing closing issue confirm maybe work expecting something else going", "d": "8/2014"}, {"body": "edited original post title one else finds looking answers thinks legit issue weird experience amounts developer error unable reproduce", "d": "8/2014"}, {"body": "could make variables configurable timeouts like javascript appmysomecomponent embercomponentextend animatestuff function emberrunlater thisanimateleft appsomecomponentanimatelefttime appmysomecomponentreopenclass animatelefttime testhelper file", "d": "8/2014"}, {"body": "nt seem anything brokenmissing w ember fivetanley suggestions make sense hence closing aside wan na figure solution liquidfire would probably something along lines setting transitions nulltransition object", "d": "8/2014"}, {"body": "makes sense thanks advice", "d": "8/2014"}, {"body": "tkellen misusing second value property path value comparison also typo singular see fiddle", "d": "8/2014"}, {"body": "ah different many computed macros work amp could benefit allowing comparison dependent property rather literal value would open pr implements api like", "d": "8/2014"}, {"body": "fixed", "d": "8/2014"}, {"body": "working jsbin", "d": "8/2014"}, {"body": "cool thanks sorry noticing duplicate", "d": "8/2014"}, {"body": "suspect naming ambiguity globals noglobals usage ember one reasons started eak embercli start using unambigious naming conventions modules provide us", "d": "8/2014"}, {"body": "stefanpenner anything fix improving tooling", "d": "8/2014"}, {"body": "unknown likely possible fix u really motivated fix works fine nonglobals mode", "d": "8/2014"}, {"body": "bug also incorrect nt creating folders either resolvernormalize normalizing entity name names used actually explicitly different", "d": "8/2014"}, {"body": "assign meta issue soon", "d": "8/2014"}, {"body": "likely related", "d": "8/2014"}, {"body": "confirm behavior well revert restore fancy form components functionality", "d": "8/2014"}, {"body": "need look weekend track happening fix final ships", "d": "8/2014"}, {"body": "looks like made final simpler case nt work jsbin cc ghedamat", "d": "8/2014"}, {"body": "rwjblue", "d": "8/2014"}, {"body": "wagenet yes", "d": "8/2014"}, {"body": "fixed", "d": "8/2014"}, {"body": "go", "d": "8/2014"}, {"body": "digitalbreed yes one thing needed first fix alias descriptor laziness stefanpenner working", "d": "8/2014"}, {"body": "use latest stable builds get change use bare asset specify stable channel bower via following", "d": "8/2014"}, {"body": "please demonstrate issue example app jsbin", "d": "8/2014"}, {"body": "using embercli file structure sure best way create example jsbin try getting screenshots would help", "d": "8/2014"}, {"body": "playing login controller transitioning several pages seems like outlet never clears data login page new page comes top login page login screen signup screen come test purposes transition screen following code thistransitiontoroute however happening", "d": "8/2014"}, {"body": "first thing comes mind mismatched html tags something else causing morph tags observe correct content jsbin would needed help", "d": "8/2014"}, {"body": "shekyboy feel free create example app demonstrates share gh", "d": "8/2014"}, {"body": "tamebadger right mismatched tags thanks quick help stefanpenner tamebadger", "d": "8/2014"}, {"body": "ah think see confusion tested certainly valid value attribute tag perfectly sensible page use ask instead attr always get full url protocol host supplied port example page", "d": "8/2014"}, {"body": "also used path formaturl suggests might better called alternatively calculate single throw altogether", "d": "8/2014"}, {"body": "fwiw agree renamed used ember jamesotron started patching issue somewhere nt wan na doubleeffort", "d": "8/2014"}, {"body": "jayphelps suspect meant jamesarosen jamesotron nt started code yet ideas eliminate replace single matching eliminate change full url path change continue append change change matching extract default cases add deprecation warnings existing properties modify new properties needed basically transition nt hard know going", "d": "8/2014"}, {"body": "jamesarosen whoops indeed mean sorry jamesotron carry", "d": "8/2014"}, {"body": "ha", "d": "8/2014"}, {"body": "turns action toggleproperty called clientscontroller since clients template could delegate appropriate itemcontroller would resolve issue", "d": "8/2014"}, {"body": "resolved issue defining itemcontroller view using clientisexpanded", "d": "8/2014"}, {"body": "calling methods via actions actually deprecate please define action controller controller action invoke toggleproperties appropriately", "d": "8/2014"}, {"body": "done thanks still invoking action via action calling toggleproperty action itemcontroller define action helper order expand client clicked bigger issue run bin click clients click client man click output renders expected click hierarchy jumbled teams", "d": "8/2014"}, {"body": "jamesarosen looks good submit pr", "d": "8/2014"}, {"body": "closed favor pr", "d": "8/2014"}, {"body": "ryanhollister took look jsbin noticed set promise property click docs say promise must specificed upon creation changed see", "d": "8/2014"}, {"body": "swap add tests would work expected ryanhollister typically consumed cp bindings templates runloop smooths ordering unfortunately currently observers synchronous susceptible little ordering details anyways would like encourage someone change ordering add tests", "d": "8/2014"}, {"body": "gavacho thanks", "d": "8/2014"}, {"body": "jamesarosen thanks bug report mixonic seems related recent super stuff seem like super wrapping many things sounds like manifestation", "d": "8/2014"}, {"body": "hm yeah mutate object nt believe happen called perhaps calling internally look", "d": "8/2014"}, {"body": "looking say problem alone seems affect enumerable line blowing found far gotten contains gt thisfind gt thisnextobject gt arraynextobject gt thisobjectat gt get point wrap method called tries add mutate frozen object results op error continue investigate anyone knows little bit wrap super stuff could use little assistance heart heart heart heart", "d": "8/2014"}, {"body": "want survey super stuff push view layer changes seems imply base methods overridden methods array enumerable sync weekend rondalesc sure resolvable current super implementation though expect", "d": "8/2014"}, {"body": "let know help still digging little slow going", "d": "8/2014"}, {"body": "related", "d": "8/2014"}, {"body": "may fixed mixonic cd", "d": "8/2014"}, {"body": "fixes specific case probably array cases closing ticket favor general case", "d": "8/2014"}, {"body": "view instantiating via container injections work fine view created ad hoc way mot", "d": "8/2014"}, {"body": "think instantiating via container sure massive app quite sure instantiated go check", "d": "8/2014"}, {"body": "basically views instantiated viewcreatechildview one public apis call create manually likely bypassing internals manually viewappendto", "d": "8/2014"}, {"body": "closing reopen whenif accurate steps reproduction provided", "d": "8/2014"}, {"body": "vaguely recall conversation machty desired behavior sure set us straight pretty easily", "d": "8/2014"}, {"body": "since connected server serialized way neater always find rails way serializing array attributes bit obtuse august robert jackson notifications githubcom wrote vaguely recall conversation machty desired behavior sure set us straight pretty easily reply email directly view github", "d": "8/2014"}, {"body": "recipher yes believe exactly pointgoal essentially value away go", "d": "8/2014"}, {"body": "rwjblue recipher yes still works way nt actually mind ask never seen way nt think rails jquery seems also spec", "d": "8/2014"}, {"body": "intentional discernible also could obfuscate scatological values", "d": "8/2014"}, {"body": "sorry drag back way revert back prettier url ie foo ray amp foo freakin amp foo tiley even fooray freakin tiley played around stopped fact commas second example encoded despite explicitly allowing unencoded inside query string", "d": "8/2014"}, {"body": "way revert back prettier url ie foo ray amp foo freakin amp foo tiley even fooray freakin tiley sheldonnbbaker absolutely always way unlikely get changed upstream though would likely maintain alternative serialization strategy independently", "d": "8/2014"}, {"body": "recalculation arraycomputed nt semantics computedproperty computedfilter computedsort schedule recalculation run loop example work put another emberrunnext", "d": "8/2014"}, {"body": "mmun think fix close", "d": "8/2014"}, {"body": "provide jsbin sure test jsbin still like see setting example sounds like could issue", "d": "8/2014"}, {"body": "context router currently nt set content controller seems unexpected believe agree sgharms result set undefined model unfortunately also remember added guard always strange introduce undefined system example array controller would throw occured lukemelia thoughts", "d": "8/2014"}, {"body": "provide context controller question used store search results retrieved api first search performed user returned result set second search controller incorrectly shows result set user first search seems rather inappropriate workaround issue manually unset controller content modify api return empty array", "d": "8/2014"}, {"body": "machty simulate status always use", "d": "8/2014"}, {"body": "shilov let get right understand problem correct concerned server returns status code results rejected promise thus leaving previous content controller untouched correct confirm promise get rejected", "d": "8/2014"}, {"body": "believe would bad idea set controller general pattern route model default example routes hook defined removed guard would mean many routes controllers would properties set controllers implement computed property case computed property would squashed replaced value would result confusing hardtodebug breakage many people apps note check specifically undefined example return empty array hook would occur give desired behavior", "d": "8/2014"}, {"body": "another option override setupcontroller custom functionality closing based luke said someone takes account viable proposal gladly reopen", "d": "8/2014"}, {"body": "email leah leahsilber gmailcom nt think leave open gh issue", "d": "8/2014"}, {"body": "comissioned tomster ember london contacting leah lindsey direct awesome experience", "d": "8/2014"}, {"body": "alvincrespo strongly recommend using properties place using set place think practice browser properties volatile properties trigger observers cps depend upon unless manually run case make sure user input triggers get rid", "d": "8/2014"}, {"body": "wagenet use cases beyond browser properties per example use nested hash abstract model anything example app allow customers define custom attributes customers establishing relationship predefined attributes nt really make sense eg besides using jsbin example trigger volatile property per explanation nt also sure expected functionality use volatile developers perspective cache returned result us fact nt update collection view would bug even nt recommended could also create new jsbin showing use volatile value gets cached parts app updated nt update ui parts app might rambling seems like collectionview updating properly property set volatile nt expected outcome using collectionview volatile together get reasons nt something work towards", "d": "8/2014"}, {"body": "please reopen ticket reproduction provided see", "d": "8/2014"}, {"body": "see wrong hardcoded function looking jsbin realized resolve supplied calling component like way function called thank rwjblue", "d": "8/2014"}, {"body": "please reopen jsfiddlebin", "d": "8/2014"}, {"body": "wagenet sorry jsbin issue want duplicate add volatile filteredcontent function var results var colors thisget contentcolors property contentcolors equals filteredcontent function var results var colors thisget contentcolors property contentcolors volatile", "d": "8/2014"}, {"body": "made two jsbins make easier nonvolatile volatile", "d": "8/2014"}, {"body": "reopened", "d": "8/2014"}, {"body": "seemed like changed routeargs loadedparams since private api nt think breaking public api change open issue animatedoutlet support use case", "d": "8/2014"}, {"body": "would defer machty see want put alias", "d": "8/2014"}, {"body": "nt think put alias annoying egregious types things happen seems fine consumers private api could detect missing api dependency necessary", "d": "8/2014"}, {"body": "nt understand intended means everything described seems correct behavior specific incorrect", "d": "8/2014"}, {"body": "kulja means screenshot note url console log set default value qp pass falsy value never get route always returned default value everything works fine", "d": "8/2014"}, {"body": "nightire explained correctly using qp want full transition qp changes routers model hook always seen console try changing default value look console jsbin see changes value correctly", "d": "8/2014"}, {"body": "ah see yes bug fixed shortly", "d": "8/2014"}, {"body": "lfridael think issue documentation believe use case would handled using new hook return qp back default leaving route qp defined see example let know addresses use case ton qp work including documentation make sure clear", "d": "8/2014"}, {"body": "closing given setting default property linkto working point future might add api would best start discussemberjscom thread rather gh issues", "d": "8/2014"}, {"body": "machty experimented hook definitely useful nt seem address particular use case problem would want way specify always reset qp links regardless route currently ie even target route current route global links navbar example anyway current api fine minor consequence links might aware qp defaults practice nt see becoming much problem global link navbar pretty much selfexplanatory", "d": "8/2014"}, {"body": "may add something like subexpression helper use case makes sense feel things bit letting potential scenariosolve api let revisit future", "d": "8/2014"}, {"body": "would possible also add ability create alternating views without affect content property several instances need use instead collectionview render ui pieces seperate data model content similar emptyview would something like alternateview would next view rendered items array", "d": "8/2014"}, {"body": "alvincrespo modify property use", "d": "8/2014"}, {"body": "maybe also add list still relevant", "d": "8/2014"}, {"body": "hopefully component", "d": "8/2014"}, {"body": "knownasilya definitely component", "d": "8/2014"}, {"body": "playing around different ideas components two", "d": "8/2014"}, {"body": "rwjblue really enjoy public api second jsbin fires actions actually tell user changes nt resort setting observer", "d": "8/2014"}, {"body": "amiel verified bug working fix", "d": "8/2014"}, {"body": "wagenet thanks", "d": "8/2014"}, {"body": "wagenet know cleaning issues grouping could put master issue bug could closed", "d": "8/2014"}, {"body": "pretty sure bug arraycontrollers sorting itemcontroller itemcontroller entries indexed one another", "d": "8/2014"}, {"body": "closing favor pr", "d": "8/2014"}, {"body": "kalmanh aware plan make new select component said make simple pr solve problem existing likely merge", "d": "8/2014"}, {"body": "wagenet proof concept work unfortunately slammed work right probably wo nt get pr couple weeks", "d": "8/2014"}, {"body": "rondalesc would happily accept hand getting htmlbars build pipeline work rwjblue stared completion point close remember maybe let us chat irc weekweekend", "d": "8/2014"}, {"body": "definitely", "d": "8/2014"}, {"body": "love take stab inclination lem know interestavailability", "d": "8/2014"}, {"body": "work probably right away", "d": "8/2014"}, {"body": "ran following willtransition sample code api docs url changed even though called", "d": "8/2014"}, {"body": "confirmed updating title something specific root cause", "d": "8/2014"}, {"body": "wo nt work definitely nt really need right solution however agree knownasilya nt really conventional way things", "d": "8/2014"}, {"body": "fixed pr", "d": "8/2014"}, {"body": "verified", "d": "8/2014"}, {"body": "mehulkar sounds like good candidate first pr", "d": "8/2014"}, {"body": "mehulkar merged implements want", "d": "8/2014"}, {"body": "ahh happens jump ember projects thanks blessenm", "d": "8/2014"}, {"body": "hmmm yes namespacecollision regression sorts since sort boxed corner able introduce new public api without risking collides user preexisting property name try think something less generic rename routerjs hook", "d": "8/2014"}, {"body": "rename still new public api hook sure collides someone preexisting hook nt really want pick new name thoughts", "d": "8/2014"}, {"body": "machty probably ca nt avoid naming conflicts seems much specific", "d": "8/2014"}, {"body": "trek ping", "d": "8/2014"}, {"body": "extra bits data would helpful baz xfoo onbarbaz xfoo barbaz", "d": "8/2014"}, {"body": "intended nt want autocasting occur default value provided string number", "d": "8/2014"}, {"body": "still issue beta check failing test", "d": "8/2014"}, {"body": "submit failing test rsvp sort quickly", "d": "8/2014"}, {"body": "seems hash convert hash waterfall normal promises everything works fine working failing test starter kit note promises used within hash storefind promises emberdata beta maybe combination", "d": "8/2014"}, {"body": "repo fails document compatibility works perfectly chrome though one reason another hashmodels undefined", "d": "8/2014"}, {"body": "michaelklishin please open issue provide failing test fix quickly", "d": "8/2014"}, {"body": "stefanpenner repo valid test isolate problem", "d": "8/2014"}, {"body": "tests rsvp reside currently traveling time limited provide failing test repo fix day", "d": "8/2014"}, {"body": "someone verified long nt solved enterprise application ca nt use version", "d": "8/2014"}, {"body": "michaelvdheeren think stefanpenner asking isolated case verification preferably actual js test", "d": "8/2014"}, {"body": "issue confirmed", "d": "8/2014"}, {"body": "believe fixed", "d": "8/2014"}, {"body": "thanks try monday", "d": "8/2014"}, {"body": "fixed rsvp", "d": "8/2014"}, {"body": "seems like issue resolved flyswatter still issues let know reopen", "d": "8/2014"}, {"body": "stefanpenner considering bug", "d": "8/2014"}, {"body": "wagenet believe yes", "d": "8/2014"}, {"body": "general unreliable ember avoided instead", "d": "8/2014"}, {"body": "rwjblue machty status", "d": "8/2014"}, {"body": "stefanpenner htmlbars fix sure give us better platform fix", "d": "8/2014"}, {"body": "bindattr thing exists handlebars nt enough context allow remain bound", "d": "8/2014"}, {"body": "stefanpenner oh course trying go issues quickly", "d": "8/2014"}, {"body": "nt think anything immutable strings making following change causes work though obviously hack said strongly recommend things way would better set component manage valid state instead trying views like", "d": "8/2014"}, {"body": "childviews cp nt maintain array computes regenerates invalidates nt meant detached observed", "d": "8/2014"}, {"body": "cc machty", "d": "8/2014"}, {"body": "problem using loop reserved keyword ember handlebars could either change name child property something else register parent app following jsfiddle use alternate access", "d": "8/2014"}, {"body": "think close short term roll htmlbars deprecate old behavior get free", "d": "8/2014"}, {"body": "spbbosch nt look like image comes email replies", "d": "8/2014"}, {"body": "peter thanks reply quit using ember month ago using angular problems", "d": "8/2014"}, {"body": "spbbosch good luck thanks reporting issue sorry slow response", "d": "8/2014"}, {"body": "closing favor pr", "d": "8/2014"}, {"body": "workaround one work getting spurious tell calls assert check fails since elements dom", "d": "8/2014"}, {"body": "perlun work latest morph property internal mixin nt used anymore latest ember face entire issue nt thing latest ember beta canary", "d": "8/2014"}, {"body": "thanks krisselden tried ember get error different exception see reproduce jsfiddlejsbin create separate issue", "d": "8/2014"}, {"body": "sounds like great idea sandstrom imagine could involve changesdeprecations sides able put together proposal forums", "d": "8/2014"}, {"body": "yes possibly remember hjdivad mentioning may supersede like hear thoughts first", "d": "8/2014"}, {"body": "took look tricky meantime updating jsbin demonstrates issue old one seems gone stale", "d": "8/2014"}, {"body": "hi alex typical error indeed seems appears transition directly queryparams transition look code transite category query params thistransitiontoroute articles queryparams category relatedarticlecategoryget id search transite product thistransitiontoroute article relatedarticle interestingly wrap last transition emberrunnext emberrunlater error disappears code works thistransitiontoroute articles queryparams category relatedarticlecategoryget id search emberrunnext function thistransitiontoroute article relatedarticle", "d": "8/2014"}, {"body": "sure think may related behavior documented", "d": "8/2014"}, {"body": "see", "d": "8/2014"}, {"body": "stefanpenner action items recategorize meta issue", "d": "8/2014"}, {"body": "extracted action item paragraph form short phrases bullets improve clarity action item cache misses factorycache expire cache cache expiration rules module users new things added registry global users maybe provide hook expires cache userinvocation", "d": "8/2014"}, {"body": "stefanpenner sorry nt mean sound trollish suggestions nt sure something actually thought implement wanted discussion", "d": "8/2014"}, {"body": "wagenet implement perf hit noticable", "d": "8/2014"}, {"body": "stefanpenner", "d": "8/2014"}, {"body": "longer thing", "d": "8/2014"}, {"body": "stefanpenner saw edits lovely however consider method dispatchevent function object evt eventname view var result true var handler object eventname typeof handler function result run object handler evt view preventdefault eventmanagers evtstoppropagation else result thisbubbleevent view evt eventname return result bold part code ie still cause issue recur think solution based return value ie event handler eventmanager object would best", "d": "8/2014"}, {"body": "francnuec im sure complex case likely tomdale question", "d": "8/2014"}, {"body": "closing favor pr", "d": "8/2014"}, {"body": "krisselden sounds like saying duplicate closing please reopen misunderstanding", "d": "8/2014"}, {"body": "maxbritto able submit pr", "d": "8/2014"}, {"body": "sure thing", "d": "8/2014"}, {"body": "closing favor pr", "d": "8/2014"}, {"body": "implementing fix found commit already fixes error message issue error route error messages constructed initialmessage error stack sporto seen missing error messages anywhere besides routes limited route errors believe case closed", "d": "8/2014"}, {"body": "closing since fixed htmlbars", "d": "8/2014"}, {"body": "htmlbars", "d": "8/2014"}, {"body": "eoneill sounds awesome discussion forums definitely way go thanks playing around", "d": "8/2014"}, {"body": "think good idea really issue someone wants follow pr would great", "d": "8/2014"}, {"body": "stefanpenner sounds like ca nt full fix think could use global would cause deoptimization", "d": "8/2014"}, {"body": "wagenet global trycatch makes debugging much difficult work runloop ensures production users set get trycatch describe", "d": "8/2014"}, {"body": "believe resolution improved guidesdocs around use emberonerror keep pestering browser vendors granular better tooliing", "d": "8/2014"}, {"body": "explain debugging harder global trycatch longer use stop uncaught exceptions since caught", "d": "8/2014"}, {"body": "stefanpenner yes right optin known downsides", "d": "8/2014"}, {"body": "wanted say also bit docs would help", "d": "8/2014"}, {"body": "happening well", "d": "8/2014"}, {"body": "thanks cesarizu fix", "d": "8/2014"}, {"body": "darvelo looks like solution right nt actually bad however like something different would probably best submit proposal forums thanks", "d": "8/2014"}, {"body": "rwjblue still seems issue final status removing loader", "d": "8/2014"}, {"body": "cases changed somesuch solve problems folks solved us adding update build set", "d": "8/2014"}, {"body": "problem somehow different final get build get build get release versions build hack switch ember name nt seem cut", "d": "8/2014"}, {"body": "nosachamos nt think ever claimed support passing arguments like suspect case would better served components", "d": "8/2014"}, {"body": "yes seems behavior changed breaking components ember block template access components properties ember master block template access components property bug yet undocumented breaking change ping rwjblue trek", "d": "8/2014"}, {"body": "heard future able explicitly specify properties available block template workaround really need use private api warning", "d": "8/2014"}, {"body": "manuelmitasch bug fix block supposed isolated component thus view keyword nt supposed component view case working new feature yield args block", "d": "8/2014"}, {"body": "alexspeller would nt count continuing work", "d": "8/2014"}, {"body": "direction currently looking regards issue", "d": "8/2014"}, {"body": "krisselden thanks clarification means currently reliable way access properties component within block real solution use view instead component right", "d": "8/2014"}, {"body": "manuelmitasch though hack perhaps helpful using right live app works well", "d": "8/2014"}, {"body": "sandstrom thanks looks good", "d": "8/2014"}, {"body": "seems like figured", "d": "8/2014"}, {"body": "something smells fishy point router absorb sort asynchrony rest system seems like something bypassing machty take look", "d": "8/2014"}, {"body": "thatandyrose nt provide example code expecting loading process wait promise returned hook like one know threw first couple times", "d": "8/2014"}, {"body": "mixonic ping", "d": "8/2014"}, {"body": "related", "d": "8/2014"}, {"body": "specifically happens arrays call property definition nonenumerable placed could fixed putting property definition think moving super property meta better alternative would address several issues pr", "d": "8/2014"}, {"body": "may fixed mixonic cd", "d": "8/2014"}, {"body": "specific case fixed still issue actually use though opened new ticket", "d": "8/2014"}, {"body": "pr even merged told htmlbars fix", "d": "8/2014"}, {"body": "closing original requester responded gtsop found likely cause heaphyg still issues please let know", "d": "8/2014"}, {"body": "machty ping", "d": "8/2014"}, {"body": "sound super thank machty", "d": "8/2014"}, {"body": "hjdivad ping", "d": "8/2014"}, {"body": "definitely good idea making things seem faster matters lot", "d": "8/2014"}, {"body": "noticed problem related issue route goes error substate active link current page keeps active link last page", "d": "8/2014"}, {"body": "wycats tomdale guys ever discuss", "d": "8/2014"}, {"body": "assuming still working definitely think fix", "d": "8/2014"}, {"body": "needs pr", "d": "8/2014"}, {"body": "pring", "d": "8/2014"}, {"body": "trek fixed docs fixed website changes next update docs site", "d": "8/2014"}, {"body": "verified returns false feel like return worry could breaking change", "d": "8/2014"}, {"body": "mehulkar give try", "d": "8/2014"}, {"body": "wagenet jsbin using canary build currently still exhibits behavior", "d": "8/2014"}, {"body": "stefanpenner given lack response original creator inclined close however sounds like think may bug thoughts", "d": "8/2014"}, {"body": "possible bounce render render render afterrender afterrender code triggers new renders part runloop works nt believe known bugs area additionally krisselden work metalviews cleans area nicely closing", "d": "8/2014"}, {"body": "ran issue couple times lately quite interested fix also gladly help fixing anyone could give hint start", "d": "8/2014"}, {"body": "currently way probably want convert associative array array hashes like make proposal feature post forums", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "", "d": "8/2014"}, {"body": "issue numerous times especially flummoxing one beginner contast frameworks tell specitic line fault often using source maps", "d": "8/2014"}, {"body": "think behavior still exists machty thoughts", "d": "8/2014"}, {"body": "machty ping", "d": "8/2014"}, {"body": "stefanpenner status specific actions someone else take", "d": "8/2014"}, {"body": "many scenarios fixed using places matter missing reported separate issues", "d": "8/2014"}, {"body": "moved", "d": "8/2014"}, {"body": "saladfork definitely turn nonember array ember style one see suspect issue interaction frames frames share ember instance one frame cause problems since classes", "d": "8/2014"}, {"body": "wagenet thanks response case outer frame nt run ember understand different inner frame causes fail jsbin definitely shows works expected long array started frame ember way transform passedin undetectable array expected valid pass assertion proper way stands work copying item array new onebyone workaround original comment", "d": "8/2014"}, {"body": "helped saladfork irc little wanted leave notes anyone else running issue outer frame nt array prototype extended true changes definition embera seems like solution setting property iterates wagenet would make sense replace embera definition", "d": "8/2014"}, {"body": "stefanpenner make meta issue", "d": "8/2014"}, {"body": "wagenet yes might good category likely would want understand difference absolute failure ala error vs", "d": "8/2014"}, {"body": "merging meta", "d": "8/2014"}, {"body": "curiosity nt think map function defined libsystemrouterjs must appear api docs imo ember site section named api must code documentation avaiable", "d": "8/2014"}, {"body": "documented", "d": "8/2014"}, {"body": "expected deprecations shown lot stuff firing deprecations due tests changed new syntax something specific see gobs stuff deprecated points lazy merge patch gone deprecations raise tests imo", "d": "8/2014"}, {"body": "mixonic yes think deprecation warnings test failures ember", "d": "8/2014"}, {"body": "clear many recent deprecations global template lookup specifically still need tackled", "d": "8/2014"}, {"body": "rwjblue want", "d": "8/2014"}, {"body": "getting", "d": "8/2014"}, {"body": "stefanpenner something could provide guidance", "d": "8/2014"}, {"body": "unable verify verify please let know reopen", "d": "8/2014"}, {"body": "stefanpenner added", "d": "8/2014"}, {"body": "gavacho thinks may time sunday someone else gets first noone offended", "d": "8/2014"}, {"body": "merged upstream", "d": "8/2014"}, {"body": "stefanpenner rwjblue group meta issue", "d": "8/2014"}, {"body": "sure naming conventions", "d": "8/2014"}, {"body": "moved meta", "d": "8/2014"}, {"body": "might worth looking", "d": "8/2014"}, {"body": "seeing issue firefox though currently looking options workaround want trigger change event since cause validations run show errors users even chance look input fields", "d": "8/2014"}, {"body": "seems working beautifully plopped code app started working verified firefox seems work multiple usernames type one remembered fills password one username saved autofills usernamepassword work come determine timers code sets supplemented following order get scenarios work didinsertelement function hack get firefox autofill bind ember variables var inputs thisget element find input", "d": "8/2014"}, {"body": "faced issue used workaround wrapped inside tag moved action onto form tag triggering action", "d": "8/2014"}, {"body": "often wrap fields forms use action form nice setup even without ie issue", "d": "8/2014"}, {"body": "also like wrapping fields form tags might something look want structure around", "d": "8/2014"}, {"body": "rwjblue ping", "d": "8/2014"}, {"body": "machty ping", "d": "8/2014"}, {"body": "close fully realized solution", "d": "8/2014"}, {"body": "using ember cli want use canary look docs", "d": "8/2014"}, {"body": "agree async loading holds application starting bad nevertheless use case using xhr initialize loading localization file done asynchronously least nt figured better place loading file needed application rendered", "d": "8/2014"}, {"body": "ramisalminen", "d": "8/2014"}, {"body": "stefanpenner thanks advice", "d": "8/2014"}, {"body": "hjdivad thoughts", "d": "8/2014"}, {"body": "trek curious updates front", "d": "8/2014"}, {"body": "locks discussed core team meeting still feel uncomfortable dropping dependency especially due extremely common confusion around props vs attrs jquery fixes going try extract functionality need separate libs nt think top priority moment", "d": "8/2014"}, {"body": "tomdale thanks feedback understandable even impression htmlbars fully merged efforts could naught feel like gist still useful extracting separate libs", "d": "8/2014"}, {"body": "forgot", "d": "8/2014"}, {"body": "hjdivad ping", "d": "8/2014"}, {"body": "exact issue", "d": "8/2014"}, {"body": "seeing issue ember", "d": "8/2014"}, {"body": "hey guys sure topics related jammed problem would appreciate help routing subdomains dynamically using storage space users content thanks", "d": "8/2014"}, {"body": "legomaniacs embers docs ember apps", "d": "8/2014"}, {"body": "hi error render template emberselect outlet routerendertemplate hook render outlet another run loop rendertemplate function thisrender cheers", "d": "8/2014"}]