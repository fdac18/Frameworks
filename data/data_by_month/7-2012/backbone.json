[{"title": "modelon change key never fires", "body": "hi issues months ago figured bug nt really need back today tried recent backbonejs version far see still nt work coffee modelon change task gt consolelog never fires modelon change gt consolelog always fires modelset task figure wo nt fire gt always fires according backbonejs documentation invoke bindings binding idea wo nt fire info greatly appreciated thanks", "num": "1516", "d": "7/2012"}, {"title": "store model arrayattributes backbonecollection", "body": "hi think bad idea store raw arrays backbonemodelattributes missing lot tools way add remove etc working hack converts raw arrays server backbonecollection vice versa would allow handling references embedded documents much easier chance official backboneproject would accept seperated regards", "num": "1515", "d": "7/2012"}, {"title": "modelchange call validate", "body": "methods change attributes call validate set create change nt feature", "num": "1514", "d": "7/2012"}, {"title": "got complicated issue", "body": "issue backbonejs beat sick", "num": "1513", "d": "7/2012"}, {"title": "optional parameters splats routes", "body": "could nt find searching issues assume github search poor must suggested would really nice backbone router supported optional parameters routes potentially optional splats although nt care either way way crossroadsjs supports seems nice potential syntaxes reasons one biggest problems using router nt seem like edgecase know use regex writing place gets tedious really hard maintain instead write one reread", "num": "1508", "d": "7/2012"}, {"title": "easier attaching model events view", "body": "currently backbone views simple way binding events el children awesome leaves common scenario view binding events model currently done manually inside init somewhere similar apply mechanism models collections would work naturally similar ticket following arguments made idea like dispute often view listening events one two three models two three collections nt see backbone ditching support optionsmodel optionscollection view could use multiple modelscollections right making things better usersuse cases nt hurt rest way usually nt many distinct events listened single view often change common change hookup providing convenient way would make library better plus plenty cases people bind multiple model events eg change foo change bar change baz importantly unlike views dom views nt type objects listen model events models also listen controller objects right jquery provides way bind events backbone stay event business right course views listen model events ton make particular binding harder possible way binding events exists", "num": "1507", "d": "7/2012"}, {"title": "backbonejs regulated good", "body": "many developers confused pull requests fails", "num": "1506", "d": "7/2012"}, {"title": "make eventsplitter public", "body": "require event splitter nt split spaces spaces meaning events propose change api", "num": "1504", "d": "7/2012"}, {"title": "browsers supporting", "body": "hi first apologies wrong place ask unable find definitive answer anywhere reference browser stats july active users firefox see old versions ie still radar us due audience serve intranet site either work large enterprise health care entities come across backbone looks something might use upcoming work tried test suite failed two tests seen forum comments ie support drawing line thanks everything really appreciate efforts steve", "num": "1502", "d": "7/2012"}, {"title": "enhancement historynavigate support stateobj", "body": "would nice backbone supported passing statobj windowhistorypushstate via backbonenavigate options right use backbonenavigate windowonpopstate callback always emits popstateeventstate null way distinguish chromesafari firing event page load vs user actually pressing backforward", "num": "1501", "d": "7/2012"}, {"title": "ca nt call collections", "body": "hi ca nt call backbonecollection call nothing happens usermodel define jquery underscore backbone function backbone usercollection define jquery underscore backbone modelsuser function backbone usermodel call view search function e ulcontactlist li remove assume bug also tried using without success", "num": "1500", "d": "7/2012"}, {"title": "saving unchanged model call success callback", "body": "thismodelsave success function consolelog saved code nt make changes model modelsave calls success handler called seems like bug save still goes request server like ajax call check success use code var save thismodelsave success function consolelog saved savesuccess function consolelog saved success handler attached jqxhr still works", "num": "1499", "d": "7/2012"}, {"title": "create add inconsistent return values", "body": "really annoying add nt return fully hydrated model added collection means bunch hoops need jump get add yet create returns model inconsistant rather annoying", "num": "1496", "d": "7/2012"}, {"title": "bug attributes inherited objectprototype", "body": "coffeescript john new backbonemodel new backbonemodel constructor john constructor gt true new backbonemodel constructor gt true wtf", "num": "1495", "d": "7/2012"}, {"title": "bugdocumentation issue event", "body": "either bug intended functionality documentation issue event docs state onchange callback events objectoff null onchange removes callbacks events objectoff null null context removes callbacks objectoff problem ever pass null first argument actually remove event listeners collectionrelated event listeners well models way works way described code snippet states event specified event callbacks object removed personally like possibility removing event handlers given context understand requirements imposes", "num": "1494", "d": "7/2012"}, {"title": "viewremove causes uncaught rangeerror maximum call stack size exceeded error", "body": "using viewremove remove view dom causes uncaught rangeerror maximum call stack size exceeded error using thisel remove seems work though", "num": "1491", "d": "7/2012"}, {"title": "attributes prefixed synced localstorage instead sent server", "body": "like client specific variables named attribute would nice automatically sync localstorage crud commands instead sending server", "num": "1489", "d": "7/2012"}, {"title": "nt always return", "body": "want avoid hookingup redundant handlers handy able however latest version backbone simply returns undefined rather returning breaks attempt chain call like code since would trivial change please", "num": "1487", "d": "7/2012"}, {"title": "extend issue chrome devm", "body": "find issue caused code executed error think issue may caused latest chrome stable u use simple api assign value may secure like thanks", "num": "1485", "d": "7/2012"}, {"title": "parse happens initialize", "body": "collection thisadd data parse true start calling parse initialize", "num": "1482", "d": "7/2012"}, {"title": "documentation overhaul", "body": "intermittent holes backbonejs docs pamelafox pointed one collectionsort options unclear docs respects one option also mentioned options object passed reset event silent false expect behaviour understand documentation backbone user think docs unclear new users maybe looking backbone method doc first time one problem incomplete documentation second problem hard parse option object properties middle sentence like propose backbone docs methods accept options objects options delineated table outside prose content method scrutinized documentation coverage get get started week", "num": "1481", "d": "7/2012"}, {"title": "extended classes reference object extended class", "body": "following example thisajax search collection references object photosearch videosearch normal behaviour creating new instance photosearch videosearch see share reference ajax javascript var search backbonecollectionextend var videosearch searchextend var photosearch searchextend var videosearch new videosearch var photosearch new photosearch consolelog videosearchajax photosearchajax true", "num": "1480", "d": "7/2012"}, {"title": "method bindroutes chrome dev", "body": "lastest chrome dev backbone test suite global failure backboneevents global failure rerun bug chrome", "num": "1479", "d": "7/2012"}, {"title": "unexpected change events save wait true", "body": "think different without wait true javascript backbonesync function method model options var data modeltojson settimeout function optionssuccess extend id b c true data var backbonemodelextend new afetch success function aon change function model evt consolelog keys evtchanges aon change id function model data consolelog change id data settimeout function consolelog wait asave b settimeout function consolelog wait true asave b wait true result use wrong way bug", "num": "1478", "d": "7/2012"}, {"title": "collectionreset never run validate", "body": "code added causing return immediately upon silent true passed tell added never tested regards reset bug mentions forcing discussion feeling fetchsave always triggering validate causing slowness", "num": "1477", "d": "7/2012"}, {"title": "fetch allow optional url parameters passed", "body": "find backbone code need pass url parameters fetch method collections example use cases pinterestlike autoloading feature grab additional items entire list would need pass parameters letting server know models already loaded client setup comboboxes first one state one autoloading cities based state chosen would need pass state name cities controller get back appropriate cities server created mixin use code think would beneficial relatively easy add backbone source code backboneparamfetchcollection backbonecollectionextend", "num": "1476", "d": "7/2012"}, {"title": "uncaught typeerror google chrome canary", "body": "latest couple google chrome canary builds throws error might chrome issue might worth investigation avoid ending one stable builds chrome breaking change chrome repro go open chrome devtools console type hit return", "num": "1475", "d": "7/2012"}, {"title": "collectionfetch fires reset rather fetch docs issue", "body": "states resets model state server delegating backbonesync returns jqxhr useful model never populated data like ensure latest server state change event triggered server state differs current attributes tried seeing change event first issuing fetch seeing reset event though wrong code docs", "num": "1470", "d": "7/2012"}, {"title": "attribute doms backboneview", "body": "gt javascript var appview backboneviewextend doms newtodo input main main", "num": "1469", "d": "7/2012"}, {"body": "check", "d": "7/2012"}, {"body": "realize done way presents certain problems see avoid problems first method outlined could used however rather use awkward syntax got braces lying around method could used provide much cleaner syntax", "d": "7/2012"}, {"body": "nt present many problems want call super certainly call super coffeescript", "d": "7/2012"}, {"body": "okay cool thought would make things little simpler large number use cases really want call super", "d": "7/2012"}, {"body": "nevermind seems remove another library stack libraries including work see exactly causing problem", "d": "7/2012"}, {"body": "nt seem like great idea using collections attributes usually custom bit functionality needed specific problems want easy access lot array methods something nt actually collection wrap array underscore object parse", "d": "7/2012"}, {"body": "hi bodokaiser thanks opening issue model attributes array values tricky agree nearly always bad idea collection usually better option however method something backbone stays neutral putting squarely plugin territory thanks asking", "d": "7/2012"}, {"body": "anthonyshort hi good hint also wrap array underscore collection braddunbar okay understand descision", "d": "7/2012"}, {"body": "hi ichernev definitely working intended method mutates attribute state even behest another method specific methods change attributes call need validate attributes since neither need validate hope helps", "d": "7/2012"}, {"body": "one complicated situation yo think could wrap var beat eval get great result", "d": "7/2012"}, {"body": "think limiting optional parameters end route would completely normal limitation seeing probably nt throwing optional parameters randomy would eliminate edge cases assume nt added tell limitation additions limited javascript two extra regex helpers var leadingoptionalnamedparam w g var optionalnamedparam w g replace optionals first route routereplace escaperegexp amp replace leadingoptionalnamedparam replace optionalnamedparam replace namedparam replace splatparam guys think edge cases missing", "d": "7/2012"}, {"body": "another solution might separate way optional elements route made idea named params brackets denoting optional pieces wrapped around anything route definition would look like instead add following code javascript var optionalparam g later replace optionalparam seems like better solution actually cuz less magicful nt weird edge cases type instead perfectly fine thing regex escaping happens would need handle differently chosen syntax", "d": "7/2012"}, {"body": "regardless whether good idea general would odd represent bindings actual js objects string syntax let say wanted bind change event presumably write would mean extracting string evaling determine refers pretty gross reason makes sense use strings dom events lowerlevel methods backbone via jquery relies addeventlistenerattachevent take strings arguments", "d": "7/2012"}, {"body": "valid issue", "d": "7/2012"}, {"body": "seriously darn nonchalance comes pull requests starts get issue many developers wonder looking solutions", "d": "7/2012"}, {"body": "", "d": "7/2012"}, {"body": "", "d": "7/2012"}, {"body": "hi boxxxie rather interesting sure good idea need events spaces use underscores instead", "d": "7/2012"}, {"body": "simplicity sake however went edited event splitter assigned worked backbone creating events properly however backbone nt able let multiple event listeners object looks like suggestion break event system propose event system refactored would work someone wanted control eventsplitter clear eventsplitter changes event system break least experienced", "d": "7/2012"}, {"body": "simplicity sake make things simpler event names spaces", "d": "7/2012"}, {"body": "things users enter db use raw keys models also common write testing functions keys human readable sentences", "d": "7/2012"}, {"body": "see would recommend use different approach common likely comes several problems fragmenting event separators help backbone code interoperable nt pass standard litmus test features useful backbone users", "d": "7/2012"}, {"body": "mornin stevehurcombe nt know official support document knowledge backbone supports latest version chrome safari firefox opera also mobile browsers supported though nt know ones nt seen discussion support older versions though nt think would major issues please let us know help bugs old browsers get considerably less reports since used often", "d": "7/2012"}, {"body": "hi brad good know case rerun tests report back honest nt know significance may showstoppers may extreme edge cases wo nt disturb us", "d": "7/2012"}, {"body": "oh forgot mention failing tests master part ongoing effort improve test coverage routerhistory functionality believe fixed", "d": "7/2012"}, {"body": "hi tomkit thanks opening issue discussed tangentially backbone takes stance pushstate api broken way use well ignore first two arguments disagree previous reasons ignoring arguments please respond reevaluate", "d": "7/2012"}, {"body": "async try adding success callback options fetch consolelog good dealing async stuff try consolelog contactsmodels see shows anything also collections method builtin try", "d": "7/2012"}, {"body": "hi", "d": "7/2012"}, {"body": "documentcloud irc channel good place get help kind stuff documentcloud channel", "d": "7/2012"}, {"body": "thank link look around next time var contacts new usercollection contactsurl users username etarget val contactsfetch add true remove true success function contacts contactseach function contact consolelog contact ulcontactlist append contactget username", "d": "7/2012"}, {"body": "hi joezimjs thanks opening issue problem accepts two arguments attributes options nt provide attributes pass instead give following shot", "d": "7/2012"}, {"body": "awesome thanks", "d": "7/2012"}, {"body": "hi kav need reference model always listen event create adding like goes groups models reason wo nt work", "d": "7/2012"}, {"body": "well introduces extra callback flow otherwise would nt need thus functions create outside collection return model use collections need callback otherwise inconsistent thus seems strange remember tripping year ago getting way wednesday july pm brad dunbar wrote hi kav need reference model always listen event create adding like goes groups models reason wo nt work reply email directly view github", "d": "7/2012"}, {"body": "thus functions create outside collection return model use collections need callback would need callback", "d": "7/2012"}, {"body": "sorry looking listen add based solution wo nt work attributes nt include id guarantee object returned one created could store ids cids collection intersect post create ids cid list massive hack", "d": "7/2012"}, {"body": "sorry nt quite follow would mind posting code illustrates objective", "d": "7/2012"}, {"body": "much need workaround mean hell change return value add fork backbone codebase inconsistent across core collection operations particular reason subpar design therefore bug sure work around return value switched match rest core operations change anyone relying current behavior would trivial xadd add b xadd xadd b meanwhile workaround sans forking convoluted rather ugly make sense", "d": "7/2012"}, {"body": "codebase inconsistent across core collection operations particular reason disagree entirely different purposes perfectly natural return values different particular meant persist new model server meant insert models collection creating models passing workaround bug appropriate action given need reference said would like post code illustrating situation desired api glad take look", "d": "7/2012"}, {"body": "add models collection one also happens persist server nt make entirely different intend wait persisting model create add nt make sense example one create case model collectioncreate name foo stuff model add case model collectionadd name foo stuff model persisting goes initialize validate modelsave whenever decide persist today collection collectionadd name foo lt world helpful already collection reference reason might need chaining nt suggested use case hand nt reference hydrated model get need jump bunch hoops give back thing nt already rather one", "d": "7/2012"}, {"body": "whole bunch issues well ideas patch using", "d": "7/2012"}, {"body": "using cases like check support use supported oneline patch patch support old ie much sophisticated placed everywhere etc", "d": "7/2012"}, {"body": "fwiw annotated source code say remove one many callbacks context null removes callbacks function callback null removes callbacks event events null removes bound callbacks events code works code commented respect argument null", "d": "7/2012"}, {"body": "hi thanks opening issue agree documentation could clear addressed", "d": "7/2012"}, {"body": "hey braddunbar actually meant comments inline code snippet says removes callback events removes callbacks events two examples equal example removes callbacks edit regard actually function run", "d": "7/2012"}, {"body": "code snippet says removes onchange callback events removes callbacks context events two examples equal example removes callbacks object would nt say equal despite fact passes nullundefined arguments certainly different maybe missing something response onchange callback events objectoff null onchange removes callbacks events objectoff null null context removes callbacks objectoff", "d": "7/2012"}, {"body": "braddunbar actually sorry nt changes event although documentation confusing closely resembled code snippet reflected exactly actually works thanks upgraded", "d": "7/2012"}, {"body": "glad could help", "d": "7/2012"}, {"body": "hi nrmitchi thanks opening issue since viewremove equivalent thisel remove would guess provided view correct", "d": "7/2012"}, {"body": "yes simply used thisel remove function instead", "d": "7/2012"}, {"body": "see would mind posting code could look", "d": "7/2012"}, {"body": "think may misunderstood initial question response write way removing view simply used thisel remove instead thisremove shortcut relevant components view javascript events click removeicon remove remove function thisel remove thisremove using thisremove opposed thisel remove producing error", "d": "7/2012"}, {"body": "issue overwritten function calling within cause infinite loop stack overflow try instead js var view backboneviewextend events click removeicon remove remove function thisremove", "d": "7/2012"}, {"body": "realized thank sorry inconvenience", "d": "7/2012"}, {"body": "problem glad could help", "d": "7/2012"}, {"body": "sounds cool go backbone nt anything localstorage directly", "d": "7/2012"}, {"body": "hi machineghost believe already changed grab latest master", "d": "7/2012"}, {"body": "awesome thanks", "d": "7/2012"}, {"body": "dupe also presents solution switch canary daily builds rather dev channel weekly builds", "d": "7/2012"}, {"body": "yep think vincentbriglia right please direct comments thanks reporting zjhiphop", "d": "7/2012"}, {"body": "hi butuzgol called canonical parsed representation model used initialize model attributes opposite order would cause attributes change opportunity reinitialize model", "d": "7/2012"}, {"body": "confusing parse available options paragraphs text", "d": "7/2012"}, {"body": "would nice options broken default clear libraries handle different kinds options objects eventoptions xhroptions etc document shared options signatures single place rather repeatedly might might practical", "d": "7/2012"}, {"body": "also add todo list breakdown events may triggered method arguments passed happy help workload standard docs format agreed", "d": "7/2012"}, {"body": "options arguments documented correctly also enjoy prosaic nature docs would rather replaced giant page tables lists said objectives satisfied better", "d": "7/2012"}, {"body": "catch lot people included confused events thrown exactly braddunbar agreed explicit documentation nt mean ca nt read well personally enjoy twitter bootstrap documentation everything lots examples nt look like reading bunch auto generated docs", "d": "7/2012"}, {"body": "seems scope separate communitymaintained project fully explicitly rigourously document backbone would nt necessarily need perhaps nt official docs braddunbar correctly said simplicity minimalist nature docs great terms getting grips basics quickly easily nt mean nt valid use case finetoothedcomb version", "d": "7/2012"}, {"body": "", "d": "7/2012"}, {"body": "point actually setting either videosearchajax photosearchajax since contained within function bodies nt called set default ajax specified base search object notice also returns true", "d": "7/2012"}, {"body": "could sworn videosearchajax photosearchajax search function called life replicate", "d": "7/2012"}, {"body": "well let us know manage reproduce", "d": "7/2012"}, {"body": "update many site backbone", "d": "7/2012"}, {"body": "hey chuangbo fairly certain issue latest chrome details including chromium bug seems fixed already", "d": "7/2012"}, {"body": "many thanks braddunbar", "d": "7/2012"}, {"body": "getting kind error help would great", "d": "7/2012"}, {"body": "tgriesser recently pointed proposed good solution appear regression thinking best way solve", "d": "7/2012"}, {"body": "note actually bug silent changes still trigger", "d": "7/2012"}, {"body": "braddunbar new ideas looking little day still ca nt come cases patch nt generate expected result solutions would involve heavily reworking functions", "d": "7/2012"}, {"body": "collection constructor place internally call reset passes silent true confident fix remove silent true forced reset", "d": "7/2012"}, {"body": "nt using collection url method", "d": "7/2012"}, {"body": "poor encapsulation collection object examples view even router would object knows parameter values classes turn would responsible resetting models collection would nt want write collection url references multiple objects", "d": "7/2012"}, {"body": "already fine jquery options respected forwarded request backbone sync methods", "d": "7/2012"}, {"body": "whoa quite right seeing problem documentcloudorg even though likely fixed getting pushed chrome proper let get sorted", "d": "7/2012"}, {"body": "done poking around whatever reason backbonecollection backbonemodel function set backbonerouter constructor function particularly weird extend functions declared time modelextend collectionextend routerextend viewextend extend router view extend functions set correctly", "d": "7/2012"}, {"body": "truly bizarre behavior replacing line results following behavior first assignment returns correctly compare results line return value constructor backbonerouter backbonecollection backbonemodel interestingly however check seems correctly assigned appropriate function body looks like canary assigning correctly returning function bodies unpredictably", "d": "7/2012"}, {"body": "filed", "d": "7/2012"}, {"body": "awesome looks weird spent two hours troubleshooting code realized beyond error highcharts library time ago took quite long time corrected canary build", "d": "7/2012"}, {"body": "going close us seems pretty clearly like something nt worry", "d": "7/2012"}, {"body": "anyone looking bug seems present well", "d": "7/2012"}, {"body": "getting really erratic behavior addition issue router undefined really hope sort soon miss canary web inspector", "d": "7/2012"}, {"body": "behavior chrome devm", "d": "7/2012"}, {"body": "backbonejs site working fine since morning chrome update devm getting method bindroutes error defining model chrome browser bug even backbone official sample todo app working", "d": "7/2012"}, {"body": "running version dev hope issue nt make dev channel release", "d": "7/2012"}, {"body": "fyi think underlying issue fixed guys expect things good next chrome dev build", "d": "7/2012"}, {"body": "hope", "d": "7/2012"}, {"body": "looks like fixed version canary", "d": "7/2012"}, {"body": "hardbap still version dev channel nt supposed get updates canary", "d": "7/2012"}, {"body": "victorgama dev channel released twice weekly canary daily", "d": "7/2012"}, {"body": "hardbap nice know change release channel thank", "d": "7/2012"}, {"body": "fixed", "d": "7/2012"}, {"body": "yikes", "d": "7/2012"}, {"body": "collection fire reset event models inside collection fire event attributes get updated data returned fetch first fetch collection contains models get event fired collection", "d": "7/2012"}, {"body": "see updated documentation great behaviour clearer models inside collection fire change event attributes get updated data returned fetch would good addition docs since neither mention", "d": "7/2012"}, {"body": "using latest backbone source need pass update models perform fetch get events firing models", "d": "7/2012"}, {"body": "undocumented", "d": "7/2012"}, {"body": "version directly github showing could get events fire part quoted original issue actually model fetch current version backbone wo nt get change events happening models collection fetch either completely reset collection add models nt exist yet latest github get change fire models using options", "d": "7/2012"}, {"body": "ah bad great feature love backbone pollute thread suggest collectionslice collection would useful thanks hard work", "d": "7/2012"}, {"body": "two snippets equivalent using unscoped jqueryzepto query scoped proposed property would assume create scoped selections also guessing mean syntax otherwise really fan change nt really save anything terms reducing amount code write creates nonobvious syntax creating references child elements", "d": "7/2012"}, {"body": "note created scope selection", "d": "7/2012"}, {"body": "yep proposed hash", "d": "7/2012"}, {"body": "created jsfiddle problem see running code validation failing see error message second textarea save function still returning success see text first textarea", "d": "7/2012"}, {"body": "created page jsfiddle see running code press trigger modelsave button validation failing see error message second textarea save callback function still returning success see text first textarea claudio ortolina reply replygithubcom benjen bgunn rocketmailcom sent tuesday july subject backbone modelvalidate failing stop modelsave saving server hi would able create page jsbin jsfiddle markup well reply email directly view github", "d": "7/2012"}, {"body": "issue inconsistent support options views models collections confusing", "d": "7/2012"}, {"body": "get issue validation nt occur unless pass object parameter save modelsave calling modelsave bypasses validation downloaded latest version backbone v", "d": "7/2012"}, {"body": "dombesz skbailey woud mind trying latest master wrong think fixed thanks", "d": "7/2012"}, {"body": "ok tried master call validate new issue getting error event model intentionally make validation fail modelon error function model error nt work", "d": "7/2012"}, {"body": "like error callback works modelsave", "d": "7/2012"}, {"body": "providing callback current code trigger event issue aims address perhaps merged soon like error callback works modelsave still nt work via would mind posting reduced test case debug", "d": "7/2012"}, {"body": "provide callback model modelon error documentation says failed validations trigger error event callback one view methods call modelsave modelsave nt trigger error modelsave triggers modelset value error function assuming suppresses error event make sense", "d": "7/2012"}, {"body": "would mind posting reduced test case take look", "d": "7/2012"}, {"body": "var mymodel backbonemodelextend urlroot example validate function attrs return never valid var mymodel new mymodel id mymodelon error function model error alert error mymodelsave produce alert doesnt", "d": "7/2012"}, {"body": "thanks skbailey addressed", "d": "7/2012"}, {"body": "hi braddunbar thanks reply sorry taking long respond never encountered situation using handler change change attr events desirable ok first noticed registering listener events listener seemed similar events similar signatures passing common arguments consistent positions would advantageous especially since recently experienced actual problem due handlebars pulling switcheroo position passes argument nt real world use case point correct attribute name accessible handler think good change attr handlers explicitly handling one attribute otherwise change event used since care one attribute already know name hmm seems counterintuitive makes important necessarily preferable handler handle change events single attr subset attrs require similar handling change useful dynamic behavior depends attr name would wrong registering handler vs putting logic handler called attr changed course could create closure handler function attr name desirable use handler multiple attrs point anyway nt real world use case argue seemed counterintuitive right bat find good use case post see think thanks", "d": "7/2012"}, {"body": "makes important necessarily preferable handler handle change events single attr performant since event triggered specific attribute changed attribute changed please let us know find use case thanks getting back", "d": "7/2012"}, {"body": "maybe described meaning poorly let say model attrs az whatever reason want use change handler e u something attr name handler case like would necessarily less performant register handler attrs register handler implement logic detect among changed attrs something specific please let us know find use case thanks getting back yeah sorry took long thanks addressing questions still think would good make documentation signatures obvious eg mention modelset", "d": "7/2012"}, {"body": "problem behaviour nt work works var model new backbonemodel modelon change function consolelog message isnt showed youre using backbone modelchange expected bug thanks", "d": "7/2012"}, {"body": "stumbled upon issue actually line uses js sort instead sortby comparator function arguments nt understand ca nt think decent workaround aswell using sortby works fine js nt work probably array sortings bugs", "d": "7/2012"}, {"body": "problem comparator function binded model removed binding works ok", "d": "7/2012"}, {"body": "rsirotins coould please elaborate fixed problem thanks advance", "d": "7/2012"}, {"body": "experience exact issue", "d": "7/2012"}, {"body": "routing pushstate enabled app deceptively complicated lets review issue main argument new behavior creates valid url cases reliably parsed client server old version breaks windowlocationsearch windowlocationhash would return inconsistently across pushstate supported unsupported browsers confusing breaks fundamental part lovely window object potentially breaking anything else relying windowlocation worth send query params already sending fragment want access url params serverside using pushstate app pages root single page app said one many unanticipated downsides pushstate apps use case lets go inviting people join site say friendly ie user visits mysitecomcreateaccount old behavior would redirected mysitecom createaccount page reload need parse token value hash send token back server validation changes made router coffeescript route params myroute old route myroute new myroute params gt old myroute gt new params windowlocationsearch hopefully helpful let know questions definitely nt speak backbone team fix needed particular project artsy merely reasoning fix learning go hopefully evolving patterns side note avatars look pretty hilarious discussion", "d": "7/2012"}, {"body": "issue resolved thanks", "d": "7/2012"}, {"body": "line causes reset never validate reset thisadd models extend silent true options reset forces silent true", "d": "7/2012"}, {"body": "adding silent causes reset never validate models always passes silent", "d": "7/2012"}, {"body": "pain one part site used backbone broke dramaticly normal web query params added reopened people least made aware maybe mention manual", "d": "7/2012"}, {"body": "validate run collection reset ver reset thisadd models extend silent true options silent forced validate optionssilent thisvalidate return true first line true thisvalidate never called basically validate never run collectionreset matter think", "d": "7/2012"}, {"body": "ran issue today would like add cents seems like unintuitive behavior explicitly setting wo nt trigger event unless hash changed vote favor triggering route matter condition one real world example want refresh current page would impossible current behavior", "d": "7/2012"}, {"body": "kenperkins method something similar integrated bb routers", "d": "7/2012"}, {"body": "discussion bruth said certain cases patch produced may larger full document somewhat counter productive send patch save anything unless patch applied larger object server prefix interesting point think one benefit verb sequential atomic nature understand please correctly wrong processing server happens sequentially one one could see benefit application design obviously upto application implementation opinion backbone nt interfere option things consider mentioned document pointed bruth restrictions simultaneous requests whilst apply http verbs may irrelevant libraryframework something may need considerdocument also may good idea original resource becomes outdated", "d": "7/2012"}, {"body": "take look something think howwhere sync current state document copied required last saved reference generate patch", "d": "7/2012"}, {"body": "use workaround", "d": "7/2012"}, {"body": "regarding jashkenas requirements listed view ever needs one template templating engine supports nested templates like handlebars partials template rendered data returned server fact great way make app feel responsive render instantly click render data comes back real trick feature events since bound root element good thing template render create root elem subsequent renders mean rewire events might worth testing see hurts performance case backbone could support feature majority whose templating engine meets certain requirements would certainly improvement current workflow putting part html template js view", "d": "7/2012"}, {"body": "fguillen yeah since backbone started render template moment called replacing add dom rerender changed parts thismodel finally fetched every full render called even done calling goal jashkenas imo achieved much better convention view dommable called reduces coupling view class view template former would otherwise friends postponing dom stuff also allows unit test without useless dom creations", "d": "7/2012"}, {"body": "geddesign requirements mean simple solution would touch let people whatever want whichever method choose conventionally end call people wish available right opposed personally nt neither wish nt like tagname coupling js html regardless future today already ignore ensured element calling", "d": "7/2012"}, {"body": "keeping backbone simple backbone default behavior calling post multiple times waiting first one seem pretty bad", "d": "7/2012"}, {"body": "philfreo created plugin prevent behavior", "d": "7/2012"}, {"body": "know already closed looking solution tested following bit strange suppose stranger previous ones seems work javascript events keyup subdomain checksubdomain checksubdomain debounce function something", "d": "7/2012"}, {"body": "web apps integrated frontend backend facebook example would app frontmatter pages accessible regardless js capabilities probably still single javascript code base build facebook style app one single backbonejs code base", "d": "7/2012"}, {"body": "kkaefer props mate", "d": "7/2012"}]