[{"title": "findcomponentroot warning misleading logged transaction close", "body": "findcomponentroot throws exception transaction close specifically reactmountreadynotifyall body transaction threw exception logs error using consoleerror immediately like error throws silenced transactionperform favor earlier error thrown wrapped method findcomponentroot error logged first misleading", "num": "767", "d": "12/2013"}, {"title": "source map support jsx binary", "body": "would nice", "num": "766", "d": "12/2013"}, {"title": "anyway making error messages descriptive", "body": "coding react also experimenting coffeescript combined borbarded console errors becomes difficult really get core descriptive error reporting planned future regards ps happy new year", "num": "762", "d": "12/2013"}, {"title": "csstransitiongroupchild transition stops child updates class", "body": "", "num": "761", "d": "12/2013"}, {"title": "typescript support jsx", "body": "would great jsx recognized typescript constructs", "num": "759", "d": "12/2013"}, {"title": "api accessing correctly", "body": "check comment also feel saving array allocation x times causes bit much inconvenience think either return array time vjeux suggested irc expose api getting children correctly returning array treat one item way way treat multiple items exposing api flatten children one single level return", "num": "751", "d": "12/2013"}, {"title": "feature request add nested object support linkedstatemixinlinkstate", "body": "first attempt using nested object tried noticed updating see implementation way enhance support nested objects without using eval issue see one solution stackoverflow another solution would something like", "num": "744", "d": "12/2013"}, {"title": "html jsx separate tool", "body": "instead htmljsxlibjs buried inside docs folder could extracted separate tool htmltojsx used jsdom separate tool bundled package like reacttools", "num": "740", "d": "12/2013"}, {"title": "htmljsx demo broken latest trunk", "body": "htmljsxhtml demo nt rerender live editor use older build react demo work", "num": "738", "d": "12/2013"}, {"title": "ondrag event objects property", "body": "drag events include property react drag events nt shimming legacy browsers would difficult something look object", "num": "727", "d": "12/2013"}, {"title": "compiler compiles", "body": "precompiling assets using produces code like problem version using nt variable attached variable temporary fix using loaded code runs needs fixed upstream unless missing something version mismatch", "num": "726", "d": "12/2013"}, {"title": "transitiongroup error updating transitionenter transitionleave", "body": "hi created little demo transitionenter transitionleave updated react throws error invoking", "num": "724", "d": "12/2013"}, {"title": "camelcased data attributes nt warn", "body": "right camelcasing attributes warns dev", "num": "720", "d": "12/2013"}, {"title": "csstransitiongroupchild generate markup enter class already applied", "body": "hello playing react transition noticed enter classe added element inserted dom thought active class applied component mounted dom small demo using componentwillupdate make sure class applied directly remove use transition mechanism complex layout sometime see page flashing screen transition starts", "num": "719", "d": "12/2013"}, {"title": "rfc make key default value ref", "body": "make default value specified plus prefix avoid conflicts perhaps seems like would reconciliation win could used prevent behavior ever needed practical difference make replaced recreate element instead reusing actually seems like another win behavior would really want would happen ca nt think scenario would nt actually want behavior mentioned briefly vjeux seemed reasonable least", "num": "712", "d": "12/2013"}, {"title": "animations addon staggering animation", "body": "starting work react project implementing directional staggering animation basically scroll downwards catch list elements loading see fade top bottom vice versa scrolling upwards moment altered code development version reactwithaddonsjs transitions work way obviously nice incorporate feature animation addon proper interface happy put work making happen nice idea interface would ideal jsx might wrong using coffeescript nt use transitionstagger set whether stagger transition transitionstaggerdirectional set make stagger occur upwards downwards based elements come new elements ordered earlier current existing elements upwards stagger otherwise downward stagger transitionstaggerdelay nganimate pulling transitionanimate delay variable getcomputedstyle would js override ever something suitable anyway something definitely using project hopefully case bringing addon", "num": "709", "d": "12/2013"}, {"title": "change event bubbling nt work controlled components ie", "body": "fiddle nt work properly reported mailing list irc darthapo", "num": "708", "d": "12/2013"}, {"title": "test case iframe rendering", "body": "react theoretically supports mounting iframes well tested specifically need tests around event handling maybe bug fixes", "num": "707", "d": "12/2013"}, {"title": "onkeypress chrome", "body": "inside input field nt tiggered chrome backspace possibly keys know nt react bug rather browser inconsistency might normalized", "num": "706", "d": "12/2013"}, {"title": "enter key captured onchangeoninput", "body": "nt know silly miss something pressing enter trigger onchangeoninput text inputs", "num": "697", "d": "12/2013"}, {"title": "invalid operand object expected selecteventpluginjs", "body": "use button trigger event deletes element containing button everything works expected however event item list similar elements clicking buttons element quick succession triggers error function error using debugging tools able discover situation argument null ca nt work problem react dom representation confirm problem make multiple clicks within hundred milliseconds taking time nt trigger error website getting error try adding items removing clicking x submit pull request extends condition ensure node object nt know enough overall architecture know else blocks currently handle case another needed", "num": "694", "d": "12/2013"}, {"title": "leading wo nt compile jsx", "body": "get error trying load simple component seems due fact text body div adding real text causes issue go away jsx reactdom var testcomponent reactcreateclass render function return reactrendercomponent documentgetelementbyid content", "num": "693", "d": "12/2013"}, {"title": "jsx conditionals requires lot workarounds lot time", "body": "one good example conditionals currently solved ternary actually works surprisingly well however returned another story academic textbook example works great condition null condition amp amp looks pretty good works great disaster order return tags need return array also requires separate commas good bye beautiful jsx condition null want textnode instead actually rewrite jsxstyle code pure javascript instead perhaps even worse condition name name null let also complete version textnode surrounded tags whitespace rules fly window longer looks anything like jsx condition name name null nested ifs looks like let go ugly despite simple really condition condition name name null hello name null barely even understandable code without conditionals would look like name name hello name opinion something clearly wrong adding conditionals never require working arrays rewriting inline text use javascript string literals instead general require massacre code problem multiple tags easy part problem simply currently return one tag resort arrays intuitively relatively easy fix jsx simply automatically wrapping arrays simple intuitive good output conditionals may big deal weird syntax ifstatement different nested braces replaced parenthesis already expression back braces inside tag text expressions last big issue transition js jsxhtml adding root tag transition directly jsxtext jsxexpressions without wrapped tag without rewritten plain javascript necessary conditionals currently implemented expressions solutions new conditional syntax seems like root problem conditionals implemented jsx expressions also causes problem rewrite jsx textexpressions adding conditionals unless wrapped tags piggyback jsx expressions everything nonparented jsx textexpressions would solved really issue nesting jsx expressions another solution allow jsxexpressions nested jsx textexpressions inside conditionals still problem could reasonably solved backtick strings name name think better ways one use structure code missing something realize perhaps approaching perspective oldstyle templates standing things seem make quite cumbersome complex situations lot situations one change surrounding code simply one added tag one removed tag moved conditional ps discussion chat agree probably oldschool template habits however returning multiple tags biting ass lot everything content inside conditionals could wrapped divsspans make play nice seems weird add markup able write reasonable jsx", "num": "690", "d": "12/2013"}, {"title": "react addons nt working using browserifynpm", "body": "works even inspecting console reveals object", "num": "685", "d": "12/2013"}, {"title": "include minified build npm module", "body": "minifying takes forever would nice able type done underscore example", "num": "683", "d": "12/2013"}, {"title": "new starter kit", "body": "think could much easier starter kit think pretty good apps modular components browserify prebuild step", "num": "681", "d": "12/2013"}, {"title": "replace addons npm", "body": "break following separate npm modules ditch addons build could use wzrdin deliver reacttransitiongroup classset reactlink tapeventplugin respondereventplugin reactstatesetters reacttestutils", "num": "680", "d": "12/2013"}, {"title": "tutorials docs section", "body": "think need tutorials section getting started current tutorial thinking react blog post using server rendering performance optimization walkthrough write well need two unless someone else wants", "num": "679", "d": "12/2013"}, {"title": "homepage staggered scrolling cursor code block", "body": "os x google chrome version cursor code block gestural scroll causes choppy movement", "num": "678", "d": "12/2013"}, {"title": "third party components section also try establish standard", "body": "hi learning reading documentation react realized awesome even docs page think improved order social communitydriven main idea build section like one yeoman yeomaniocommunitygeneratorshtml one gruntjs see party components created top react framework establishing standard authoring public react components user follow standard example publishing component bower adding prefixed namespace example creating tree component register bower order make findable indexable section page thoughts regards", "num": "676", "d": "12/2013"}, {"title": "specify default selected options", "body": "js jsx reactdom var multipleselect reactcreateclass render function return b c reactrendercomponent documentbody expect option b c selected default", "num": "671", "d": "12/2013"}, {"title": "reacttransitionablechild gets confused removed transitions complete", "body": "reacttransitionablechild sets listeners detect animationstransitions complete knows remove transition classes dom elements leave transition listeners get confused one element transitionable child tree performs animationtransition example say desired effect outer div fade first followed inner div possible two css transitions appropriate durations delays react gets confused element removed middle inner transition fact think removing element outer transition finishes also confuse react generally listening bubbled transition events violates encapsulation cases", "num": "669", "d": "12/2013"}, {"title": "jsx compiler page broken react", "body": "clone master build docs go live updating broken using codemirror liveeditorjs change html desugaredcode works expected guessing something codemirror component page works fine live site running react possible dev environment broken somehow followed steps readme file", "num": "666", "d": "12/2013"}, {"title": "document getchildcontext contexttypes", "body": "came across code could nt find docs would expected find docs component api page code mentions reactcompositecomponentjs reactcompositecomponentjs reactcompositecomponenttestjs", "num": "665", "d": "12/2013"}, {"title": "improve error reporting", "body": "love invariant everywhere sometimes errors report nt immediately understandable example mixin defines default prop also defined component get lovely error took figure cause jsfiddle another run consolewarn happened passed undefined function prop", "num": "663", "d": "12/2013"}, {"title": "eventcurrenttarget document instead currenttarget", "body": "see jsfiddle illustrates problem reason event handler attached document pass eventcurrenttarget instead properly finding right one", "num": "659", "d": "12/2013"}, {"title": "currenttarget synthetic events wrong", "body": "seems like able fill cc vjeux swannodette", "num": "658", "d": "12/2013"}, {"title": "add support jam package manager", "body": "", "num": "656", "d": "12/2013"}, {"title": "missing attribute", "body": "facebook open graph integration uses nonstandard attribute however currently stripped suggested plan action add nonstandard list", "num": "655", "d": "12/2013"}, {"title": "better support", "body": "bit hard use right going start interpolating bound whenever use workaround wrap inside interpolated string going output html encoded version javascript going throw parsing exception order workaround two issues best way found use dangerouslysetinnerhtml use backtick order multiline strings probably make easier quite pain use right", "num": "654", "d": "12/2013"}, {"title": "reactanimationgroup failing readd componentsreverse animations", "body": "please see following click toggle make listitem fade view doubleclickspamclick toggle button make item fadeout view click toggle try make component come back view see item nt come back check html see listitem still class name exampleleave exampleleaveactive suspect react reverse animation elegantly case component readded render function leave transition", "num": "649", "d": "12/2013"}, {"title": "end", "body": "js jsx reactdom var hellomessage reactcreateclass render function var toli function name return return thispropsnamesmap toli reactrendercomponent documentbody hover see console logs currently using workaround replacing sure whether considered react bug user responsibility make sure wo nt cause trouble", "num": "647", "d": "12/2013"}, {"title": "missing reactdom", "body": "", "num": "645", "d": "12/2013"}, {"title": "release react", "body": "right working jeffbski graciously allowed us take package npm however currently versioned order work reasonable way going jump allows users current package continue working long reasonable specs packagejson wo nt break package issue warning pointing new package use react function typical use jeffbski package leave npm well cut typically cut latest stable commit master however nt feel like master stable enough right cut release support going go farther back couple options suggested take rebrand pull couple commits small bugfixes easy way pick commit recent base cherrypick changes lot good fixes would make bit painful probably best result consumers nothing change except probably use package directly instead affect future releases right nt screwing around version numbers gives us chance try something new us currently follow typical pattern every release stable result sit things usable master generally usable checkpoints latest would great move towards timebased release schedule sure makes sense us point still changing apis pretty frequently nt good pattern backing features like move towards pattern nodejs uses linux kernel used use even minor releases stable odd development would publish releases like would stable ones make sure nt installed plain eg would nt installed unless could publish unstable releases regular schedule per week publish stable release ready take advantage tagging feature npm use semver prerelease versioning eg regardless immediately important thinking let collect thoughts get list commits need cherrypick figure exact plan", "num": "639", "d": "12/2013"}, {"title": "handle phantomjs crashes better", "body": "", "num": "638", "d": "12/2013"}, {"title": "webdriver fatal error element condition nt satisfied", "body": "sure means tests flakey", "num": "634", "d": "12/2013"}, {"title": "error error response status", "body": "running webdriverjasmine webdriverjasmine task task source usersaylottprojectsfacebookreactgruntfilejs verifying property exists config ok file files desiredcapabilities browsername iphone version platform os x build tunnelidentifier awesome tunnel driving web session starting webdriver test watch results post session sessionidurl url request started get server get testindexhtml ms iphone cpu iphone os like mac os x khtml like gecko get testindexhtml get bytes request started get request started get server get vendorjasminejasminesupportjs ms iphone cpu iphone os like mac os x khtml like gecko get vendorjasminejasminesupportjs request started get request started get server get vendorjasminejasminejs ms iphone cpu iphone os like mac os x khtml like gecko get vendorjasminejasminejs get bytes server get nodemodulesjasminetapreportersrctapreporterjs ms iphone cpu iphone os like mac os x khtml like gecko get nodemodulesjasminetapreportersrctapreporterjs get bytes server get vendorjasminejsreporterjasminejsreporterjs ms iphone cpu iphone os like mac os x khtml like gecko get vendorjasminejsreporterjasminejsreporterjs get bytes get bytes request started get request started get server get vendorjasminejasminehtmljs ms iphone cpu iphone os like mac os x khtml like gecko get vendorjasminejasminehtmljs server get testlibreporttestresultsbrowserjs ms iphone cpu iphone os like mac os x khtml like gecko get testlibreporttestresultsbrowserjs get bytes get bytes request started get server get buildreacttestjs ms iphone cpu iphone os like mac os x khtml like gecko get buildreacttestjs get bytes request started get server get buildreactjs ms iphone cpu iphone os like mac os x khtml like gecko get buildreactjs get bytes request started get server get testlibjasmineexecutejs ms iphone cpu iphone os like mac os x khtml like gecko get testlibjasmineexecutejs get bytes request started get server get testthefilestotestgeneratedjs ms iphone cpu iphone os like mac os x khtml like gecko get testthefilestotestgeneratedjs get bytes request started get server get vendorjasminejasminecss ms iphone cpu iphone os like mac os x khtml like gecko get vendorjasminejasminecss get bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonslinktestslinkedstatemixintest linkedstatemixin create reactlink state post bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitiongrouptest reacttransitiongroup warn time transitionend post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitiongrouptest reacttransitiongroup keep sets dom nodes around server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitiongrouptest reacttransitiongroup undefined child fail silently post bytes post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support getkeyset server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support getchildmapping post bytes post bytes waitforjscondition deprecated use waitfor jscondition asserter instead post session sessionidexecute script var args arrayprototypeslicecall arguments nvar code args fargs args nnvar wrap function n return eval code n nnreturn wrapapply fargs n args typeof windowjasmine undefined request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support mergekeysets adding keys post bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support mergekeysets removing keys post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support mergekeysets adding removing server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset reconcile overlapping insertions deletions post bytes post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support mergekeysets undefined input server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionablechildtest reacttransitionablechild keep dom node around post bytes post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionablechildtest reacttransitionablechild manage enter css classes correctly server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionablechildtest reacttransitionablechild manage leave css classes correctly post bytes post bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactbindtest autobinding holds reference instance post bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactcomponenttest reactcomponent throw invalid render targets post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactcomponenttest reactcomponent throw supplying ref outside render method server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactcomponenttest reactcomponent support refs owned components post bytes post bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactcomponenttest reactcomponent correctly determine component mounted post bytes post session sessionidexecute script var args arrayprototypeslicecall arguments nvar code args fargs args nnvar wrap function n return eval code n nnreturn wrapapply fargs n args typeof windowjasminegetjsreport undefined request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactcomponenttest reactcomponent know complicated mount depth server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactbindtest autobinding works mixins post bytes post bytes error error response status post session sessionidexecute script return documentdocumentelementinnertext documentdocumentelementtextcontent args closing browser window keep open pass webdriverkeepopen flag grunt delete session sessionid ending web drivage fatal error error response status error error response status webdrivernewerror requestcallback requestselfcallback requesteventemitteremit request requesteventemitteremit incomingmessage incomingmessageeventemitteremit trying kill tunnel", "num": "633", "d": "12/2013"}, {"title": "immutableobject tolerate arrays deeper levels prevent mutation fails safari", "body": "ok utilstestsimmutableobjecttest immutableobject tolerate arrays deeper levels prevent mutation dev", "num": "632", "d": "12/2013"}, {"title": "onscroll nt work", "body": "example jsfiddle broken", "num": "631", "d": "12/2013"}, {"body": "give example confusing error message seeing code caused happy new year", "d": "12/2013"}, {"body": "error invariant violation clue meant", "d": "12/2013"}, {"body": "ah must using prod minified build react use unminified version get useful error messages", "d": "12/2013"}, {"body": "oh yes using production version shifting dev version asap thanks info dec ben alpert notifications githubcom wrote ah must using prod minified build react use unminified version get useful error messages reply email directly view github", "d": "12/2013"}, {"body": "fyi internally theres flattenchildren returns map mapallchildren iterates nt create array", "d": "12/2013"}, {"body": "continue discussion personally returning array right returns first level components ie parent direct children found useful past retrieve computation returns every child flat array feel children organize internally implementation detail nt leaked parent plus accessing avoids speed conceptual overhead new api since wrapper components already use though might use retrieving flattened components might thought vjeux might say", "d": "12/2013"}, {"body": "returning array case rather insignificant performance optimization basis making inconsistent api confusing byte every beginner user library even expert ones good reason", "d": "12/2013"}, {"body": "think expose obviously document", "d": "12/2013"}, {"body": "wait usecase getting every leaf child problem current api amp getting direct children would still unsolved exposed", "d": "12/2013"}, {"body": "opinion exposing different api walk children solve problem issue api walk children missing see problem inconsistent even alternate apis exist prevent people using find unexpected results", "d": "12/2013"}, {"body": "sure throws confusion mix om actually sets function much convenient use case makes children computation even lazier simplifies design things end initial vote leave alone provide higher level api amend documentation recommend people find fundamentally problematic hope react support way children arbitrary libraries like om side note someone new issue ticket missing quite bit context someone explain problem actually solving matter convenience use cases", "d": "12/2013"}, {"body": "yes accessor similar om works iterates immediate children ensures react components returned keyed correctly time nt need functionality however think need expose method api perhaps always intended opaque object two main reasons performance treating insignificant may lead deathbypapercuts effect every minor memory optimization forego add wake one morning hanging large apps lowerend phones far easier code mind beginning rather track later especially since nt fundamentally change coupling components also dream zeroallocation render methods avoid gc would step wrong direction implementation flexibility way reconciliation works always implementation detail order us improve may need change data structure backing ie linked list impl react rumored faster assume specific type either need break apps future build compatibility layer think optional accessor function right way go already repo solve use case", "d": "12/2013"}, {"body": "petehunt nt iterate every leaf child rather direct children make opaque expose method maps direct children good edit seems like maps direct children alright nvm", "d": "12/2013"}, {"body": "petehunt nt see applies nt iterate children thing would like see continue compute children lazily another side note also think opaque values strange design decision given people put data", "d": "12/2013"}, {"body": "related", "d": "12/2013"}, {"body": "great idea love us complete set tooling available", "d": "12/2013"}, {"body": "working pr fyi ca nt shimmed files guessing would quite major possibly brittle quite invasive project shim drag drop elements", "d": "12/2013"}, {"body": "eish silly error instead changing sorted error", "d": "12/2013"}, {"body": "yeah nt see could warn developer seems like error could happen frequently let us know good idea warn issue using tool", "d": "12/2013"}, {"body": "thanks test case pull request fix", "d": "12/2013"}, {"body": "believe intentional guess spec says lowercase see also", "d": "12/2013"}, {"body": "welp api implementing docs oh well", "d": "12/2013"}, {"body": "sebmarkbage might thoughts", "d": "12/2013"}, {"body": "benjamn wanted add back thought use cases would help rare usually apply refs static components know keys solve problem dynamic components runtime set also different semantic meaning keys unique fragment set refs unique within whole owner component end nt think worth overloading two concepts makes confusing read code easy mix curious use case though scenario using refs also need keys components", "d": "12/2013"}, {"body": "sebmarkbage usecase actually merely battling way react trying understand popped mind ca nt come scenario would nt want behavior edgecases two components type different arguments toggle would never want reuse old one say input somewhere yeah basically mind scenario would nt want behavior edgecases probably would want yes could use hypothetical sitatuation would ever happen", "d": "12/2013"}, {"body": "reference nganimate stagger documentation", "d": "12/2013"}, {"body": "want send pr stays true original nganimate api could take look", "d": "12/2013"}, {"body": "sure thing probably get week anyone chomping bit", "d": "12/2013"}, {"body": "kevinmctigue probably looking event different browsers implementations fires every time physical key pressed talking onkeypress event let us know issue solved using thank", "d": "12/2013"}, {"body": "case needed backspace enter fire event even box empty onchange would nt fire cases chose go onkeydown behavior crossbrowser solve fri dec pm fabio costa notifications githubcomwrote kevinmctigue probably looking onchange event different browsers implementations fires every time physical key pressed talking onkeypress event let us know issue solved using onchange thank reply email directly view github", "d": "12/2013"}, {"body": "fyi deprecated next version html standard considered legacy event use relying unless specifically want kevinmctigue also worth noting react partial support next release", "d": "12/2013"}, {"body": "sorry got using onkeydownonkeypress", "d": "12/2013"}, {"body": "ok seems like theres inconsistencies used onkeydownonkeypress captures enter key eventtargetvalue onchangeoninput capture enter key provides eventtargetvalue really need specify onchange onkeydown time", "d": "12/2013"}, {"body": "sydcanem could provide jsfiddle let us reproduce seeing thanks", "d": "12/2013"}, {"body": "sydcanem best understanding theorically occur fact notify input changed trigger events sounds like something keyboard input instant version react far aware virtually yeah etc right way go listening keyboard however want use prevent pinging sounds enter however set field focused tested works perhaps something else going ps next release react able use instead magic numbers whichkeycode", "d": "12/2013"}, {"body": "vjeux using onkeydown get inputted text", "d": "12/2013"}, {"body": "sydcanem ah totally right yes onkeyinput happens input forgotten curious reason need text know enter hit enter nt emit characters", "d": "12/2013"}, {"body": "submit enter", "d": "12/2013"}, {"body": "forget save jsfiddle", "d": "12/2013"}, {"body": "sydcanem yeah since enter wo nt actually emit characterschange value read want enter avoid pinging sounds user also fiddle read instead dom node aha get problem actually looked fiddle one sec", "d": "12/2013"}, {"body": "spicyj syranide read trigger", "d": "12/2013"}, {"body": "sydcanem ah see problem need handle text input events onchange handler handle enter key separate one see example", "d": "12/2013"}, {"body": "sydcanem yeah checked fiddle see mean solution listen events make uncontrolled need listen one use dom node directly use valuelinkstate whatever called basically controlled input bound variable onchange event", "d": "12/2013"}, {"body": "spicyj moment hoping event could listen handles situation syranide valuelink using also handle keys think listening best solution", "d": "12/2013"}, {"body": "nt single event handles ways input text nt involve keyboard onchange onkeydown conceptually separate", "d": "12/2013"}, {"body": "sydcanem use nt listen event still need listen", "d": "12/2013"}, {"body": "syranide got saves adding onchange handler spicyj get mean nt onkeydown suppose inputted key", "d": "12/2013"}, {"body": "sydcanem nope happens input changed prevent affecting input everything nothing ever inserted input thus current value input yet include pressed key", "d": "12/2013"}, {"body": "syranide see thanks helping spicyj thanks", "d": "12/2013"}, {"body": "something doubleclicks event adjusting doubleclick timeout windows makes problem easierharder reproduce perhaps something synthetic events recall correctly doubleclicks bit wonky ie perhaps handling broken discussing bit chat likely doubleclick triggering text selection element immediately removed guessing react tries restore reason element gone hence null node", "d": "12/2013"}, {"body": "element gone hence null node fix could involve failing early return call sites", "d": "12/2013"}, {"body": "plievone could ask temporarily switch debug see callstacks understand exactly going right", "d": "12/2013"}, {"body": "known see", "d": "12/2013"}, {"body": "sorry thanks", "d": "12/2013"}, {"body": "problem", "d": "12/2013"}, {"body": "made believer way go solves everything beautifully needs implemented somehow", "d": "12/2013"}, {"body": "works outputs would expect export matter function enable deprecation warnings old package function also properties set would react object details might help us track node version etc", "d": "12/2013"}, {"body": "ah misunderstood works though pointed addons object directly actually points reactwithaddons raises question whether two builds react necessary using browserify thanks response", "d": "12/2013"}, {"body": "relevant", "d": "12/2013"}, {"body": "ah interesting idea nt thought guess make clearer may able start killing addons build see", "d": "12/2013"}, {"body": "also related npm module fine get click handling note using browserify may something immediately apparent wrong open separate issue", "d": "12/2013"}, {"body": "porterjamesj strange using browserify well following works fine something similar", "d": "12/2013"}, {"body": "porterjamesj tried reproduce works fine see setup", "d": "12/2013"}, {"body": "porterjamesj regarding time browserifying previous case takes produce bundle bit long development use watchify changes nt rebuild entire bundle scratch", "d": "12/2013"}, {"body": "right minified build uses browserify original package uglify result still calls breaks browserify wanted bundle application talked muffinizing would replace require calls random word envify browserify worked around underscore nt problem file begin modules", "d": "12/2013"}, {"body": "andreypopp browserifying slow minifying browserified bundle takes order minutes problem react opposed react tools must something onclick setup investigate odd works one though", "d": "12/2013"}, {"body": "andreypopp example works clearly problem lies code", "d": "12/2013"}, {"body": "heh turns requiring one place another sorry noise still think would nice include minified version npm module fwiw", "d": "12/2013"}, {"body": "porterjamesj want serve minified react separately prepend code pipe uglify otherwise nt see would extract performance gains already minified build time probably would want minification production builds happen frequently annoying also call takes", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "fwiw browserifyingminifying react quite reactminjs reactminjs strips extra logging error messages since use envify want make sure nt looked works probably", "d": "12/2013"}, {"body": "zpao yeah transform active either case checked similar timings code size reduced even expected", "d": "12/2013"}, {"body": "andreypopp right minifying nt need happen frequently big issue zpao thanks info", "d": "12/2013"}, {"body": "setting nodeenv production improve runtime perf would prefer check minified code let instead make sure minify existing tools performant way sound good", "d": "12/2013"}, {"body": "makes sense thanks tips everyone", "d": "12/2013"}, {"body": "clarify petehunt meant would improve runtime perf react browserification runtime glad could help porterjamesj", "d": "12/2013"}, {"body": "created yeoman generator implements think would pretty great make default powerful easy", "d": "12/2013"}, {"body": "yes please let", "d": "12/2013"}, {"body": "likestamp", "d": "12/2013"}, {"body": "think get high priority since let us expose reacttestutils publicly write doc testing", "d": "12/2013"}, {"body": "ok realized already delivered part npm package going send simple pr soon", "d": "12/2013"}, {"body": "look forward pr thanks docs testing welcomed", "d": "12/2013"}, {"body": "great idea may want expand tutorials common setups eg express jsx backbone mongodb always add later tips section great nt always handholdy enough people getting started", "d": "12/2013"}, {"body": "talking nt quite figured best way new module published npm week hopefully make things easier dependencies across amd requirejs node tricky hardest part establishing sane way package static assets without collisions really need css namespacing honestly nt think bower works well component might work better petehunt others team lots opinions stay tuned interested helping come hang irc", "d": "12/2013"}, {"body": "like reading minds want probably important feature react shareability want standard works well cases tools allows total encapsulation resources like paul said single module style hedger built style generating tool intends work perfectly inside commonjs module means package component style source code completely js push npm one unit reactstyle nt even need bowercomponentio need browserify githubcomfacebookreactpage perfectly compatible bowercomponentio csslessetc quite easy thing like hedger reactstyle work everywhere right someone use another style generator works everywhere browserifyreactpagebower order upload worlds simplest example component main challenge remaining includepackage images petehunt great ideasdemos tried using reactstyles encode image data obviously sucks still try completely modular react component works everywhere incredible value nt fully complete answer though trying many things please let us know find works well think reactstyle would good direction people forgive temporary requirement must image data working", "d": "12/2013"}, {"body": "sure reactstyles think react gone great length rendering selectors unnecessary shame nt finish job applying css much prefer tools like cssobjectify rcss still experimentation mode though use react target component rather writing selectors naturally eliminates namespacing problem react component structure helps encapsulation much weird writing future agree rest", "d": "12/2013"}, {"body": "think forgot save jsfiddle console warning get says case want want uncontrolled component info see docs forms", "d": "12/2013"}, {"body": "let us know documentation error messages could clearer", "d": "12/2013"}, {"body": "spicyj thanks quick reply works expected", "d": "12/2013"}, {"body": "seems like safely closed", "d": "12/2013"}, {"body": "still encountering issue master branch works fine release branch hence fine live site look react team facebook back vacation sent mobile dec pm fabio costa notifications githubcom wrote seems like safely closed reply email directly view github", "d": "12/2013"}, {"body": "may related", "d": "12/2013"}, {"body": "confirm master fixed", "d": "12/2013"}, {"body": "confirm saw broken fixes", "d": "12/2013"}, {"body": "dupe", "d": "12/2013"}, {"body": "oh awesome nt come search", "d": "12/2013"}, {"body": "another run consolewarn happened passed undefined function prop nt sound right provide jsfiddle shows also read prop totally unrelated event handling", "d": "12/2013"}, {"body": "yeah probably totally unrelated fixing undefined removed error fwiw structure", "d": "12/2013"}, {"body": "ahhm maybe related getting warning nt know anything wrong hmmm", "d": "12/2013"}, {"body": "getting warning confusing backtrace logged thrown react called code browser callback code prefer react throw exception stacktrace", "d": "12/2013"}, {"body": "getting warning keys take look sort thing nt result exceptions necessarily problem warning help since common cause issues invariants throwing exceptions stack traces even sometimes suck like jaredly case", "d": "12/2013"}, {"body": "problem npryce describing warning context jsx include component since figure syntax transform nt using jsx error pretty cryptic since hint component issue", "d": "12/2013"}, {"body": "sebmarkbage ideas supporting use case", "d": "12/2013"}, {"body": "got component builds recursive dom structure recursive state datastructure reporting component name give enough information need relate error back part data structure mapping function mapping since usually onetoone correspondence ideas log problematic object text string inspect object debugger console log nt throw exception report stack trace", "d": "12/2013"}, {"body": "better logging", "d": "12/2013"}, {"body": "add breakpoint warning gets issued able break inspect current stack lead back parent constructed inspect data structure call frame could add debugger call automatically break might little intrusive perhaps optin feature", "d": "12/2013"}, {"body": "ran bit hairpulling tracked using array children instead argument list js var react require react reactrendercomponenttostring reactcreateclass render function return reactdomdiv null lt emits warning reactdomdiv reactdomdiv consolelog removing square brackets works fine emit warning edit sorry clarified specifically talking", "d": "12/2013"}, {"body": "oh thought supposed pass array know michael hart notifications githubcom wrote ran bit hairpulling tracked using array children instead argument list removing square brackets works fine emit warning reply email directly view github", "d": "12/2013"}, {"body": "yea definitely run issues occasion would love see addressed soon", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "cc petehunt", "d": "12/2013"}, {"body": "jam different bower", "d": "12/2013"}, {"body": "fixed commit", "d": "12/2013"}, {"body": "even mean include tag change contents get rerun seems fairly reactpagespecific", "d": "12/2013"}, {"body": "yeah really sure really useful normal react app reactpage definitively useful zpao suggested change tag behave like dom takes single string child escaped like spans", "d": "12/2013"}, {"body": "vjeux zpao could look fixing understand needs done create component checks either empty string child possibly many strings course works like happen string changes simply update element defer browser assuming nothing recreate element seems right", "d": "12/2013"}, {"body": "getting rid fullpage rendering anyway see nt think worth anything special", "d": "12/2013"}, {"body": "spicyj stills seems like able render supported even even rendering supported could still useful yeah perhaps worth extra bytes", "d": "12/2013"}, {"body": "thanks going point see author", "d": "12/2013"}, {"body": "hehe thought perhaps best made proper issue jsfiddle example rather rudely posting pull requests", "d": "12/2013"}, {"body": "seems like bug least react give error render time probably completely fixable", "d": "12/2013"}, {"body": "cc benjamn sebmarkbage jordwalke definitely something nicer", "d": "12/2013"}, {"body": "also ran", "d": "12/2013"}, {"body": "spicyj noticed separator stuff escaping solution probably hurts performance another acceptable option print warnings development version think react core maintainers decide", "d": "12/2013"}, {"body": "quarkzju spicyj closed shipped yet released", "d": "12/2013"}, {"body": "syranide thanks information", "d": "12/2013"}, {"body": "nt deprecated mon dec christopher chedeau lt notifications githubcom wrote reply email directly view github", "d": "12/2013"}, {"body": "correction already deprecated mon dec sander spies sandermail gmailcom wrote nt deprecated mon dec christopher chedeau lt notifications githubcom wrote reply email directly view github", "d": "12/2013"}, {"body": "converting website uses easy workaround", "d": "12/2013"}, {"body": "probably want div", "d": "12/2013"}, {"body": "purpose like sanderspies said deprecated long long long time ago made conscious decision exclude certain things", "d": "12/2013"}, {"body": "remember right part motivation would external users could matching fb internal style exactly however npm package names required lowercase casesensitive linux means people need", "d": "12/2013"}, {"body": "yea accepted lowercase real option npm actually even prohibits capitalized package names might force us eventually change internally least makes relatively painless transition", "d": "12/2013"}, {"body": "ok part decision made going base going take api changes take bugfixes master makes things way easier also let people switch without worrying breaking changes also means need list commits need cherrypickedbackported excluded building testing going lack coverage master fine luck vnext cut soon unlikely anything happen please add commitsprs think update description issue updated state", "d": "12/2013"}, {"body": "spicyj suggested spreadsheet changes master considered generated imported csv figure changes outside outside spreadsheet", "d": "12/2013"}, {"body": "thanks help done", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "tried fix bug yesterday bad time trying find fix similar cases looked current well maintained libraries nt find way make scroll bubble capture seems like trying fix would waste time would make code much complex browser slowly dying suggestion point documentation", "d": "12/2013"}, {"body": "seems like nt easy let fabiomcosta says document", "d": "12/2013"}, {"body": "zpao think everytime someone uses onscroll browser would annoying would say would annoying would also frustrating figure react limitation hours debugging ugh", "d": "12/2013"}, {"body": "warning would super helpful", "d": "12/2013"}, {"body": "reopening add warning", "d": "12/2013"}, {"body": "fixed think reopen cc benjamn", "d": "12/2013"}, {"body": "see place think need feel free think costliest parts covered commoner right though presumably could shortened gruntnewer nt know realistic sure much win get think probably optimizations could make build process first", "d": "12/2013"}, {"body": "zpao right going experiment later closing", "d": "12/2013"}, {"body": "zpao ace probably nt quickly put things page could nt wait play around", "d": "12/2013"}, {"body": "think would fine would still put equivalent jquery call inevitable question", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "internal diff works", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "done vjeux", "d": "12/2013"}, {"body": "ship ed", "d": "12/2013"}, {"body": "going close think reprinting could handy point though", "d": "12/2013"}, {"body": "going close try move towards sustainable method tracking issues like get us closer", "d": "12/2013"}, {"body": "might easiest first bug would interesting find failing requires browser knowledge", "d": "12/2013"}, {"body": "chenglou ideas might failing ie might bigger problem controlled inputs", "d": "12/2013"}, {"body": "idea subtlegradient break ie added patch goes test", "d": "12/2013"}, {"body": "fails simulate input event instead key events change plugin listens", "d": "12/2013"}, {"body": "oops sorry disregard", "d": "12/2013"}, {"body": "sent new diffs internally restrict fullpage rendering supporting single root never changes ie unmounting must used server rendering way avoid innerhtmling scary things like still supporting albeit bit clunkily people use cases", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "addressed trailing whitespace issues pull request", "d": "12/2013"}, {"body": "record react coffeescript jade haml like syntax would heaven guys nt know missing", "d": "12/2013"}, {"body": "clear way turn html string react dom object", "d": "12/2013"}, {"body": "contra correct unless count sidesteps almost react", "d": "12/2013"}, {"body": "correct anymore use however certainly would recommend using runtime", "d": "12/2013"}, {"body": "mentioned pr done", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "even easier jump", "d": "12/2013"}, {"body": "also seems apply using array string makes pretty realworld bug imho compared weird string scenario reason nt want states arrays", "d": "12/2013"}, {"body": "happen whenever state anything object think check arrays since use merge needs object arrays good either", "d": "12/2013"}, {"body": "yeah saw wtf", "d": "12/2013"}, {"body": "would love add contributors list", "d": "12/2013"}, {"body": "petehunt message submit patch", "d": "12/2013"}, {"body": "bitshadow something along lines reactowner refs usually means trying add ref component nt owner created inside another component render method try rendering component inside new toplevel component hold ref", "d": "12/2013"}, {"body": "might misinformed nt quite difference use cases mouseenter mouseover events theoretical nonreact example working hover states nested elements tried apply concept react nested components using onmouseenter instead obviously fails triggered topmost element moving child element back effect maybe better approach react altogether", "d": "12/2013"}, {"body": "done", "d": "12/2013"}, {"body": "going say stay away use helpers like one spicyj mentioned exists", "d": "12/2013"}, {"body": "propose make work", "d": "12/2013"}, {"body": "fixable depends standard behaviour idea find standard nt bad patch triggering instead yungsters", "d": "12/2013"}, {"body": "also seen confusion team especially annoying needing write", "d": "12/2013"}, {"body": "going wontfix may decide overhead worth really get niceness ember computed properties observing changes properties since nt afaik nt intention nt think anytime near future", "d": "12/2013"}, {"body": "jordwalke actually think empty would work case", "d": "12/2013"}, {"body": "made better entirely particular lifecycle state nt get changed back gives confusing make another state update anyone good ideas behavior case", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "zpao jeffmo soon", "d": "12/2013"}, {"body": "zpao spicyj fixed master since time ago", "d": "12/2013"}, {"body": "syranide still broken looks like pr fixes", "d": "12/2013"}, {"body": "let close need special keys always fall back nonjsx", "d": "12/2013"}, {"body": "agree available documented", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "follow updated stress several places hopefully okay", "d": "12/2013"}]