[{"title": "findcomponentroot warning misleading logged transaction close", "body": "findcomponentroot throws exception transaction close specifically reactmountreadynotifyall body transaction threw exception logs error using consoleerror immediately like error throws silenced transactionperform favor earlier error thrown wrapped method findcomponentroot error logged first misleading", "num": "767", "d": "12/2013"}, {"title": "source map support jsx binary", "body": "would nice", "num": "766", "d": "12/2013"}, {"title": "anyway making error messages descriptive", "body": "coding react also experimenting coffeescript combined borbarded console errors becomes difficult really get core descriptive error reporting planned future regards ps happy new year", "num": "762", "d": "12/2013"}, {"title": "csstransitiongroupchild transition stops child updates class", "body": "", "num": "761", "d": "12/2013"}, {"title": "typescript support jsx", "body": "would great jsx recognized typescript constructs", "num": "759", "d": "12/2013"}, {"title": "api accessing correctly", "body": "check comment also feel saving array allocation x times causes bit much inconvenience think either return array time vjeux suggested irc expose api getting children correctly returning array treat one item way way treat multiple items exposing api flatten children one single level return", "num": "751", "d": "12/2013"}, {"title": "feature request add nested object support linkedstatemixinlinkstate", "body": "first attempt using nested object tried noticed updating see implementation way enhance support nested objects without using eval issue see one solution stackoverflow another solution would something like", "num": "744", "d": "12/2013"}, {"title": "html jsx separate tool", "body": "instead htmljsxlibjs buried inside docs folder could extracted separate tool htmltojsx used jsdom separate tool bundled package like reacttools", "num": "740", "d": "12/2013"}, {"title": "htmljsx demo broken latest trunk", "body": "htmljsxhtml demo nt rerender live editor use older build react demo work", "num": "738", "d": "12/2013"}, {"title": "ondrag event objects property", "body": "drag events include property react drag events nt shimming legacy browsers would difficult something look object", "num": "727", "d": "12/2013"}, {"title": "compiler compiles", "body": "precompiling assets using produces code like problem version using nt variable attached variable temporary fix using loaded code runs needs fixed upstream unless missing something version mismatch", "num": "726", "d": "12/2013"}, {"title": "transitiongroup error updating transitionenter transitionleave", "body": "hi created little demo transitionenter transitionleave updated react throws error invoking", "num": "724", "d": "12/2013"}, {"title": "camelcased data attributes nt warn", "body": "right camelcasing attributes warns dev", "num": "720", "d": "12/2013"}, {"title": "csstransitiongroupchild generate markup enter class already applied", "body": "hello playing react transition noticed enter classe added element inserted dom thought active class applied component mounted dom small demo using componentwillupdate make sure class applied directly remove use transition mechanism complex layout sometime see page flashing screen transition starts", "num": "719", "d": "12/2013"}, {"title": "rfc make key default value ref", "body": "make default value specified plus prefix avoid conflicts perhaps seems like would reconciliation win could used prevent behavior ever needed practical difference make replaced recreate element instead reusing actually seems like another win behavior would really want would happen ca nt think scenario would nt actually want behavior mentioned briefly vjeux seemed reasonable least", "num": "712", "d": "12/2013"}, {"title": "animations addon staggering animation", "body": "starting work react project implementing directional staggering animation basically scroll downwards catch list elements loading see fade top bottom vice versa scrolling upwards moment altered code development version reactwithaddonsjs transitions work way obviously nice incorporate feature animation addon proper interface happy put work making happen nice idea interface would ideal jsx might wrong using coffeescript nt use transitionstagger set whether stagger transition transitionstaggerdirectional set make stagger occur upwards downwards based elements come new elements ordered earlier current existing elements upwards stagger otherwise downward stagger transitionstaggerdelay nganimate pulling transitionanimate delay variable getcomputedstyle would js override ever something suitable anyway something definitely using project hopefully case bringing addon", "num": "709", "d": "12/2013"}, {"title": "change event bubbling nt work controlled components ie", "body": "fiddle nt work properly reported mailing list irc darthapo", "num": "708", "d": "12/2013"}, {"title": "test case iframe rendering", "body": "react theoretically supports mounting iframes well tested specifically need tests around event handling maybe bug fixes", "num": "707", "d": "12/2013"}, {"title": "onkeypress chrome", "body": "inside input field nt tiggered chrome backspace possibly keys know nt react bug rather browser inconsistency might normalized", "num": "706", "d": "12/2013"}, {"title": "enter key captured onchangeoninput", "body": "nt know silly miss something pressing enter trigger onchangeoninput text inputs", "num": "697", "d": "12/2013"}, {"title": "invalid operand object expected selecteventpluginjs", "body": "use button trigger event deletes element containing button everything works expected however event item list similar elements clicking buttons element quick succession triggers error function error using debugging tools able discover situation argument null ca nt work problem react dom representation confirm problem make multiple clicks within hundred milliseconds taking time nt trigger error website getting error try adding items removing clicking x submit pull request extends condition ensure node object nt know enough overall architecture know else blocks currently handle case another needed", "num": "694", "d": "12/2013"}, {"title": "leading wo nt compile jsx", "body": "get error trying load simple component seems due fact text body div adding real text causes issue go away jsx reactdom var testcomponent reactcreateclass render function return reactrendercomponent documentgetelementbyid content", "num": "693", "d": "12/2013"}, {"title": "jsx conditionals requires lot workarounds lot time", "body": "one good example conditionals currently solved ternary actually works surprisingly well however returned another story academic textbook example works great condition null condition amp amp looks pretty good works great disaster order return tags need return array also requires separate commas good bye beautiful jsx condition null want textnode instead actually rewrite jsxstyle code pure javascript instead perhaps even worse condition name name null let also complete version textnode surrounded tags whitespace rules fly window longer looks anything like jsx condition name name null nested ifs looks like let go ugly despite simple really condition condition name name null hello name null barely even understandable code without conditionals would look like name name hello name opinion something clearly wrong adding conditionals never require working arrays rewriting inline text use javascript string literals instead general require massacre code problem multiple tags easy part problem simply currently return one tag resort arrays intuitively relatively easy fix jsx simply automatically wrapping arrays simple intuitive good output conditionals may big deal weird syntax ifstatement different nested braces replaced parenthesis already expression back braces inside tag text expressions last big issue transition js jsxhtml adding root tag transition directly jsxtext jsxexpressions without wrapped tag without rewritten plain javascript necessary conditionals currently implemented expressions solutions new conditional syntax seems like root problem conditionals implemented jsx expressions also causes problem rewrite jsx textexpressions adding conditionals unless wrapped tags piggyback jsx expressions everything nonparented jsx textexpressions would solved really issue nesting jsx expressions another solution allow jsxexpressions nested jsx textexpressions inside conditionals still problem could reasonably solved backtick strings name name think better ways one use structure code missing something realize perhaps approaching perspective oldstyle templates standing things seem make quite cumbersome complex situations lot situations one change surrounding code simply one added tag one removed tag moved conditional ps discussion chat agree probably oldschool template habits however returning multiple tags biting ass lot everything content inside conditionals could wrapped divsspans make play nice seems weird add markup able write reasonable jsx", "num": "690", "d": "12/2013"}, {"title": "react addons nt working using browserifynpm", "body": "works even inspecting console reveals object", "num": "685", "d": "12/2013"}, {"title": "include minified build npm module", "body": "minifying takes forever would nice able type done underscore example", "num": "683", "d": "12/2013"}, {"title": "new starter kit", "body": "think could much easier starter kit think pretty good apps modular components browserify prebuild step", "num": "681", "d": "12/2013"}, {"title": "replace addons npm", "body": "break following separate npm modules ditch addons build could use wzrdin deliver reacttransitiongroup classset reactlink tapeventplugin respondereventplugin reactstatesetters reacttestutils", "num": "680", "d": "12/2013"}, {"title": "tutorials docs section", "body": "think need tutorials section getting started current tutorial thinking react blog post using server rendering performance optimization walkthrough write well need two unless someone else wants", "num": "679", "d": "12/2013"}, {"title": "homepage staggered scrolling cursor code block", "body": "os x google chrome version cursor code block gestural scroll causes choppy movement", "num": "678", "d": "12/2013"}, {"title": "third party components section also try establish standard", "body": "hi learning reading documentation react realized awesome even docs page think improved order social communitydriven main idea build section like one yeoman yeomaniocommunitygeneratorshtml one gruntjs see party components created top react framework establishing standard authoring public react components user follow standard example publishing component bower adding prefixed namespace example creating tree component register bower order make findable indexable section page thoughts regards", "num": "676", "d": "12/2013"}, {"title": "specify default selected options", "body": "js jsx reactdom var multipleselect reactcreateclass render function return b c reactrendercomponent documentbody expect option b c selected default", "num": "671", "d": "12/2013"}, {"title": "reacttransitionablechild gets confused removed transitions complete", "body": "reacttransitionablechild sets listeners detect animationstransitions complete knows remove transition classes dom elements leave transition listeners get confused one element transitionable child tree performs animationtransition example say desired effect outer div fade first followed inner div possible two css transitions appropriate durations delays react gets confused element removed middle inner transition fact think removing element outer transition finishes also confuse react generally listening bubbled transition events violates encapsulation cases", "num": "669", "d": "12/2013"}, {"title": "jsx compiler page broken react", "body": "clone master build docs go live updating broken using codemirror liveeditorjs change html desugaredcode works expected guessing something codemirror component page works fine live site running react possible dev environment broken somehow followed steps readme file", "num": "666", "d": "12/2013"}, {"title": "document getchildcontext contexttypes", "body": "came across code could nt find docs would expected find docs component api page code mentions reactcompositecomponentjs reactcompositecomponentjs reactcompositecomponenttestjs", "num": "665", "d": "12/2013"}, {"title": "improve error reporting", "body": "love invariant everywhere sometimes errors report nt immediately understandable example mixin defines default prop also defined component get lovely error took figure cause jsfiddle another run consolewarn happened passed undefined function prop", "num": "663", "d": "12/2013"}, {"title": "eventcurrenttarget document instead currenttarget", "body": "see jsfiddle illustrates problem reason event handler attached document pass eventcurrenttarget instead properly finding right one", "num": "659", "d": "12/2013"}, {"title": "currenttarget synthetic events wrong", "body": "seems like able fill cc vjeux swannodette", "num": "658", "d": "12/2013"}, {"title": "add support jam package manager", "body": "", "num": "656", "d": "12/2013"}, {"title": "missing attribute", "body": "facebook open graph integration uses nonstandard attribute however currently stripped suggested plan action add nonstandard list", "num": "655", "d": "12/2013"}, {"title": "better support", "body": "bit hard use right going start interpolating bound whenever use workaround wrap inside interpolated string going output html encoded version javascript going throw parsing exception order workaround two issues best way found use dangerouslysetinnerhtml use backtick order multiline strings probably make easier quite pain use right", "num": "654", "d": "12/2013"}, {"title": "reactanimationgroup failing readd componentsreverse animations", "body": "please see following click toggle make listitem fade view doubleclickspamclick toggle button make item fadeout view click toggle try make component come back view see item nt come back check html see listitem still class name exampleleave exampleleaveactive suspect react reverse animation elegantly case component readded render function leave transition", "num": "649", "d": "12/2013"}, {"title": "end", "body": "js jsx reactdom var hellomessage reactcreateclass render function var toli function name return return thispropsnamesmap toli reactrendercomponent documentbody hover see console logs currently using workaround replacing sure whether considered react bug user responsibility make sure wo nt cause trouble", "num": "647", "d": "12/2013"}, {"title": "missing reactdom", "body": "", "num": "645", "d": "12/2013"}, {"title": "release react", "body": "right working jeffbski graciously allowed us take package npm however currently versioned order work reasonable way going jump allows users current package continue working long reasonable specs packagejson wo nt break package issue warning pointing new package use react function typical use jeffbski package leave npm well cut typically cut latest stable commit master however nt feel like master stable enough right cut release support going go farther back couple options suggested take rebrand pull couple commits small bugfixes easy way pick commit recent base cherrypick changes lot good fixes would make bit painful probably best result consumers nothing change except probably use package directly instead affect future releases right nt screwing around version numbers gives us chance try something new us currently follow typical pattern every release stable result sit things usable master generally usable checkpoints latest would great move towards timebased release schedule sure makes sense us point still changing apis pretty frequently nt good pattern backing features like move towards pattern nodejs uses linux kernel used use even minor releases stable odd development would publish releases like would stable ones make sure nt installed plain eg would nt installed unless could publish unstable releases regular schedule per week publish stable release ready take advantage tagging feature npm use semver prerelease versioning eg regardless immediately important thinking let collect thoughts get list commits need cherrypick figure exact plan", "num": "639", "d": "12/2013"}, {"title": "handle phantomjs crashes better", "body": "", "num": "638", "d": "12/2013"}, {"title": "webdriver fatal error element condition nt satisfied", "body": "sure means tests flakey", "num": "634", "d": "12/2013"}, {"title": "error error response status", "body": "running webdriverjasmine webdriverjasmine task task source usersaylottprojectsfacebookreactgruntfilejs verifying property exists config ok file files desiredcapabilities browsername iphone version platform os x build tunnelidentifier awesome tunnel driving web session starting webdriver test watch results post session sessionidurl url request started get server get testindexhtml ms iphone cpu iphone os like mac os x khtml like gecko get testindexhtml get bytes request started get request started get server get vendorjasminejasminesupportjs ms iphone cpu iphone os like mac os x khtml like gecko get vendorjasminejasminesupportjs request started get request started get server get vendorjasminejasminejs ms iphone cpu iphone os like mac os x khtml like gecko get vendorjasminejasminejs get bytes server get nodemodulesjasminetapreportersrctapreporterjs ms iphone cpu iphone os like mac os x khtml like gecko get nodemodulesjasminetapreportersrctapreporterjs get bytes server get vendorjasminejsreporterjasminejsreporterjs ms iphone cpu iphone os like mac os x khtml like gecko get vendorjasminejsreporterjasminejsreporterjs get bytes get bytes request started get request started get server get vendorjasminejasminehtmljs ms iphone cpu iphone os like mac os x khtml like gecko get vendorjasminejasminehtmljs server get testlibreporttestresultsbrowserjs ms iphone cpu iphone os like mac os x khtml like gecko get testlibreporttestresultsbrowserjs get bytes get bytes request started get server get buildreacttestjs ms iphone cpu iphone os like mac os x khtml like gecko get buildreacttestjs get bytes request started get server get buildreactjs ms iphone cpu iphone os like mac os x khtml like gecko get buildreactjs get bytes request started get server get testlibjasmineexecutejs ms iphone cpu iphone os like mac os x khtml like gecko get testlibjasmineexecutejs get bytes request started get server get testthefilestotestgeneratedjs ms iphone cpu iphone os like mac os x khtml like gecko get testthefilestotestgeneratedjs get bytes request started get server get vendorjasminejasminecss ms iphone cpu iphone os like mac os x khtml like gecko get vendorjasminejasminecss get bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonslinktestslinkedstatemixintest linkedstatemixin create reactlink state post bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitiongrouptest reacttransitiongroup warn time transitionend post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitiongrouptest reacttransitiongroup keep sets dom nodes around server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitiongrouptest reacttransitiongroup undefined child fail silently post bytes post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support getkeyset server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support getchildmapping post bytes post bytes waitforjscondition deprecated use waitfor jscondition asserter instead post session sessionidexecute script var args arrayprototypeslicecall arguments nvar code args fargs args nnvar wrap function n return eval code n nnreturn wrapapply fargs n args typeof windowjasmine undefined request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support mergekeysets adding keys post bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support mergekeysets removing keys post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support mergekeysets adding removing server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset reconcile overlapping insertions deletions post bytes post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionkeysettest reacttransitionkeyset support mergekeysets undefined input server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionablechildtest reacttransitionablechild keep dom node around post bytes post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionablechildtest reacttransitionablechild manage enter css classes correctly server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok addonstransitionstestsreacttransitionablechildtest reacttransitionablechild manage leave css classes correctly post bytes post bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactbindtest autobinding holds reference instance post bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactcomponenttest reactcomponent throw invalid render targets post bytes request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactcomponenttest reactcomponent throw supplying ref outside render method server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactcomponenttest reactcomponent support refs owned components post bytes post bytes request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactcomponenttest reactcomponent correctly determine component mounted post bytes post session sessionidexecute script var args arrayprototypeslicecall arguments nvar code args fargs args nnvar wrap function n return eval code n nnreturn wrapapply fargs n args typeof windowjasminegetjsreport undefined request started post request started post server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactcomponenttest reactcomponent know complicated mount depth server post reporttestresults ms iphone cpu iphone os like mac os x khtml like gecko ok coretestsreactbindtest autobinding works mixins post bytes post bytes error error response status post session sessionidexecute script return documentdocumentelementinnertext documentdocumentelementtextcontent args closing browser window keep open pass webdriverkeepopen flag grunt delete session sessionid ending web drivage fatal error error response status error error response status webdrivernewerror requestcallback requestselfcallback requesteventemitteremit request requesteventemitteremit incomingmessage incomingmessageeventemitteremit trying kill tunnel", "num": "633", "d": "12/2013"}, {"title": "immutableobject tolerate arrays deeper levels prevent mutation fails safari", "body": "ok utilstestsimmutableobjecttest immutableobject tolerate arrays deeper levels prevent mutation dev", "num": "632", "d": "12/2013"}, {"title": "onscroll nt work", "body": "example jsfiddle broken", "num": "631", "d": "12/2013"}, {"body": "give example confusing error message seeing code caused happy new year", "d": "12/2013"}, {"body": "error invariant violation clue meant", "d": "12/2013"}, {"body": "ah must using prod minified build react use unminified version get useful error messages", "d": "12/2013"}, {"body": "oh yes using production version shifting dev version asap thanks info dec ben alpert notifications githubcom wrote ah must using prod minified build react use unminified version get useful error messages reply email directly view github", "d": "12/2013"}, {"body": "fyi internally theres flattenchildren returns map mapallchildren iterates nt create array", "d": "12/2013"}, {"body": "continue discussion personally returning array right returns first level components ie parent direct children found useful past retrieve computation returns every child flat array feel children organize internally implementation detail nt leaked parent plus accessing avoids speed conceptual overhead new api since wrapper components already use though might use retrieving flattened components might thought vjeux might say", "d": "12/2013"}, {"body": "returning array case rather insignificant performance optimization basis making inconsistent api confusing byte every beginner user library even expert ones good reason", "d": "12/2013"}, {"body": "think expose obviously document", "d": "12/2013"}, {"body": "wait usecase getting every leaf child problem current api amp getting direct children would still unsolved exposed", "d": "12/2013"}, {"body": "opinion exposing different api walk children solve problem issue api walk children missing see problem inconsistent even alternate apis exist prevent people using find unexpected results", "d": "12/2013"}, {"body": "sure throws confusion mix om actually sets function much convenient use case makes children computation even lazier simplifies design things end initial vote leave alone provide higher level api amend documentation recommend people find fundamentally problematic hope react support way children arbitrary libraries like om side note someone new issue ticket missing quite bit context someone explain problem actually solving matter convenience use cases", "d": "12/2013"}, {"body": "yes accessor similar om works iterates immediate children ensures react components returned keyed correctly time nt need functionality however think need expose method api perhaps always intended opaque object two main reasons performance treating insignificant may lead deathbypapercuts effect every minor memory optimization forego add wake one morning hanging large apps lowerend phones far easier code mind beginning rather track later especially since nt fundamentally change coupling components also dream zeroallocation render methods avoid gc would step wrong direction implementation flexibility way reconciliation works always implementation detail order us improve may need change data structure backing ie linked list impl react rumored faster assume specific type either need break apps future build compatibility layer think optional accessor function right way go already repo solve use case", "d": "12/2013"}, {"body": "petehunt nt iterate every leaf child rather direct children make opaque expose method maps direct children good edit seems like maps direct children alright nvm", "d": "12/2013"}, {"body": "petehunt nt see applies nt iterate children thing would like see continue compute children lazily another side note also think opaque values strange design decision given people put data", "d": "12/2013"}, {"body": "related", "d": "12/2013"}, {"body": "great idea love us complete set tooling available", "d": "12/2013"}, {"body": "working pr fyi ca nt shimmed files guessing would quite major possibly brittle quite invasive project shim drag drop elements", "d": "12/2013"}, {"body": "eish silly error instead changing sorted error", "d": "12/2013"}, {"body": "yeah nt see could warn developer seems like error could happen frequently let us know good idea warn issue using tool", "d": "12/2013"}, {"body": "thanks test case pull request fix", "d": "12/2013"}, {"body": "believe intentional guess spec says lowercase see also", "d": "12/2013"}, {"body": "welp api implementing docs oh well", "d": "12/2013"}, {"body": "sebmarkbage might thoughts", "d": "12/2013"}, {"body": "benjamn wanted add back thought use cases would help rare usually apply refs static components know keys solve problem dynamic components runtime set also different semantic meaning keys unique fragment set refs unique within whole owner component end nt think worth overloading two concepts makes confusing read code easy mix curious use case though scenario using refs also need keys components", "d": "12/2013"}, {"body": "sebmarkbage usecase actually merely battling way react trying understand popped mind ca nt come scenario would nt want behavior edgecases two components type different arguments toggle would never want reuse old one say input somewhere yeah basically mind scenario would nt want behavior edgecases probably would want yes could use hypothetical sitatuation would ever happen", "d": "12/2013"}, {"body": "reference nganimate stagger documentation", "d": "12/2013"}, {"body": "want send pr stays true original nganimate api could take look", "d": "12/2013"}, {"body": "sure thing probably get week anyone chomping bit", "d": "12/2013"}, {"body": "kevinmctigue probably looking event different browsers implementations fires every time physical key pressed talking onkeypress event let us know issue solved using thank", "d": "12/2013"}, {"body": "case needed backspace enter fire event even box empty onchange would nt fire cases chose go onkeydown behavior crossbrowser solve fri dec pm fabio costa notifications githubcomwrote kevinmctigue probably looking onchange event different browsers implementations fires every time physical key pressed talking onkeypress event let us know issue solved using onchange thank reply email directly view github", "d": "12/2013"}, {"body": "fyi deprecated next version html standard considered legacy event use relying unless specifically want kevinmctigue also worth noting react partial support next release", "d": "12/2013"}, {"body": "sorry got using onkeydownonkeypress", "d": "12/2013"}, {"body": "ok seems like theres inconsistencies used onkeydownonkeypress captures enter key eventtargetvalue onchangeoninput capture enter key provides eventtargetvalue really need specify onchange onkeydown time", "d": "12/2013"}, {"body": "sydcanem could provide jsfiddle let us reproduce seeing thanks", "d": "12/2013"}, {"body": "sydcanem best understanding theorically occur fact notify input changed trigger events sounds like something keyboard input instant version react far aware virtually yeah etc right way go listening keyboard however want use prevent pinging sounds enter however set field focused tested works perhaps something else going ps next release react able use instead magic numbers whichkeycode", "d": "12/2013"}, {"body": "vjeux using onkeydown get inputted text", "d": "12/2013"}, {"body": "sydcanem ah totally right yes onkeyinput happens input forgotten curious reason need text know enter hit enter nt emit characters", "d": "12/2013"}, {"body": "submit enter", "d": "12/2013"}, {"body": "forget save jsfiddle", "d": "12/2013"}, {"body": "sydcanem yeah since enter wo nt actually emit characterschange value read want enter avoid pinging sounds user also fiddle read instead dom node aha get problem actually looked fiddle one sec", "d": "12/2013"}, {"body": "spicyj syranide read trigger", "d": "12/2013"}, {"body": "sydcanem ah see problem need handle text input events onchange handler handle enter key separate one see example", "d": "12/2013"}, {"body": "sydcanem yeah checked fiddle see mean solution listen events make uncontrolled need listen one use dom node directly use valuelinkstate whatever called basically controlled input bound variable onchange event", "d": "12/2013"}, {"body": "spicyj moment hoping event could listen handles situation syranide valuelink using also handle keys think listening best solution", "d": "12/2013"}, {"body": "nt single event handles ways input text nt involve keyboard onchange onkeydown conceptually separate", "d": "12/2013"}, {"body": "sydcanem use nt listen event still need listen", "d": "12/2013"}, {"body": "syranide got saves adding onchange handler spicyj get mean nt onkeydown suppose inputted key", "d": "12/2013"}, {"body": "sydcanem nope happens input changed prevent affecting input everything nothing ever inserted input thus current value input yet include pressed key", "d": "12/2013"}, {"body": "syranide see thanks helping spicyj thanks", "d": "12/2013"}, {"body": "something doubleclicks event adjusting doubleclick timeout windows makes problem easierharder reproduce perhaps something synthetic events recall correctly doubleclicks bit wonky ie perhaps handling broken discussing bit chat likely doubleclick triggering text selection element immediately removed guessing react tries restore reason element gone hence null node", "d": "12/2013"}, {"body": "element gone hence null node fix could involve failing early return call sites", "d": "12/2013"}, {"body": "plievone could ask temporarily switch debug see callstacks understand exactly going right", "d": "12/2013"}, {"body": "known see", "d": "12/2013"}, {"body": "sorry thanks", "d": "12/2013"}, {"body": "problem", "d": "12/2013"}, {"body": "made believer way go solves everything beautifully needs implemented somehow", "d": "12/2013"}, {"body": "works outputs would expect export matter function enable deprecation warnings old package function also properties set would react object details might help us track node version etc", "d": "12/2013"}, {"body": "ah misunderstood works though pointed addons object directly actually points reactwithaddons raises question whether two builds react necessary using browserify thanks response", "d": "12/2013"}, {"body": "relevant", "d": "12/2013"}, {"body": "ah interesting idea nt thought guess make clearer may able start killing addons build see", "d": "12/2013"}, {"body": "also related npm module fine get click handling note using browserify may something immediately apparent wrong open separate issue", "d": "12/2013"}, {"body": "porterjamesj strange using browserify well following works fine something similar", "d": "12/2013"}, {"body": "porterjamesj tried reproduce works fine see setup", "d": "12/2013"}, {"body": "porterjamesj regarding time browserifying previous case takes produce bundle bit long development use watchify changes nt rebuild entire bundle scratch", "d": "12/2013"}, {"body": "right minified build uses browserify original package uglify result still calls breaks browserify wanted bundle application talked muffinizing would replace require calls random word envify browserify worked around underscore nt problem file begin modules", "d": "12/2013"}, {"body": "andreypopp browserifying slow minifying browserified bundle takes order minutes problem react opposed react tools must something onclick setup investigate odd works one though", "d": "12/2013"}, {"body": "andreypopp example works clearly problem lies code", "d": "12/2013"}, {"body": "heh turns requiring one place another sorry noise still think would nice include minified version npm module fwiw", "d": "12/2013"}, {"body": "porterjamesj want serve minified react separately prepend code pipe uglify otherwise nt see would extract performance gains already minified build time probably would want minification production builds happen frequently annoying also call takes", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "fwiw browserifyingminifying react quite reactminjs reactminjs strips extra logging error messages since use envify want make sure nt looked works probably", "d": "12/2013"}, {"body": "zpao yeah transform active either case checked similar timings code size reduced even expected", "d": "12/2013"}, {"body": "andreypopp right minifying nt need happen frequently big issue zpao thanks info", "d": "12/2013"}, {"body": "setting nodeenv production improve runtime perf would prefer check minified code let instead make sure minify existing tools performant way sound good", "d": "12/2013"}, {"body": "makes sense thanks tips everyone", "d": "12/2013"}, {"body": "clarify petehunt meant would improve runtime perf react browserification runtime glad could help porterjamesj", "d": "12/2013"}, {"body": "created yeoman generator implements think would pretty great make default powerful easy", "d": "12/2013"}, {"body": "yes please let", "d": "12/2013"}, {"body": "likestamp", "d": "12/2013"}, {"body": "think get high priority since let us expose reacttestutils publicly write doc testing", "d": "12/2013"}, {"body": "ok realized already delivered part npm package going send simple pr soon", "d": "12/2013"}, {"body": "look forward pr thanks docs testing welcomed", "d": "12/2013"}, {"body": "great idea may want expand tutorials common setups eg express jsx backbone mongodb always add later tips section great nt always handholdy enough people getting started", "d": "12/2013"}, {"body": "talking nt quite figured best way new module published npm week hopefully make things easier dependencies across amd requirejs node tricky hardest part establishing sane way package static assets without collisions really need css namespacing honestly nt think bower works well component might work better petehunt others team lots opinions stay tuned interested helping come hang irc", "d": "12/2013"}, {"body": "like reading minds want probably important feature react shareability want standard works well cases tools allows total encapsulation resources like paul said single module style hedger built style generating tool intends work perfectly inside commonjs module means package component style source code completely js push npm one unit reactstyle nt even need bowercomponentio need browserify githubcomfacebookreactpage perfectly compatible bowercomponentio csslessetc quite easy thing like hedger reactstyle work everywhere right someone use another style generator works everywhere browserifyreactpagebower order upload worlds simplest example component main challenge remaining includepackage images petehunt great ideasdemos tried using reactstyles encode image data obviously sucks still try completely modular react component works everywhere incredible value nt fully complete answer though trying many things please let us know find works well think reactstyle would good direction people forgive temporary requirement must image data working", "d": "12/2013"}, {"body": "sure reactstyles think react gone great length rendering selectors unnecessary shame nt finish job applying css much prefer tools like cssobjectify rcss still experimentation mode though use react target component rather writing selectors naturally eliminates namespacing problem react component structure helps encapsulation much weird writing future agree rest", "d": "12/2013"}, {"body": "think forgot save jsfiddle console warning get says case want want uncontrolled component info see docs forms", "d": "12/2013"}, {"body": "let us know documentation error messages could clearer", "d": "12/2013"}, {"body": "spicyj thanks quick reply works expected", "d": "12/2013"}, {"body": "seems like safely closed", "d": "12/2013"}, {"body": "still encountering issue master branch works fine release branch hence fine live site look react team facebook back vacation sent mobile dec pm fabio costa notifications githubcom wrote seems like safely closed reply email directly view github", "d": "12/2013"}, {"body": "may related", "d": "12/2013"}, {"body": "confirm master fixed", "d": "12/2013"}, {"body": "confirm saw broken fixes", "d": "12/2013"}, {"body": "dupe", "d": "12/2013"}, {"body": "oh awesome nt come search", "d": "12/2013"}, {"body": "another run consolewarn happened passed undefined function prop nt sound right provide jsfiddle shows also read prop totally unrelated event handling", "d": "12/2013"}, {"body": "yeah probably totally unrelated fixing undefined removed error fwiw structure", "d": "12/2013"}, {"body": "ahhm maybe related getting warning nt know anything wrong hmmm", "d": "12/2013"}, {"body": "getting warning confusing backtrace logged thrown react called code browser callback code prefer react throw exception stacktrace", "d": "12/2013"}, {"body": "getting warning keys take look sort thing nt result exceptions necessarily problem warning help since common cause issues invariants throwing exceptions stack traces even sometimes suck like jaredly case", "d": "12/2013"}, {"body": "problem npryce describing warning context jsx include component since figure syntax transform nt using jsx error pretty cryptic since hint component issue", "d": "12/2013"}, {"body": "sebmarkbage ideas supporting use case", "d": "12/2013"}, {"body": "got component builds recursive dom structure recursive state datastructure reporting component name give enough information need relate error back part data structure mapping function mapping since usually onetoone correspondence ideas log problematic object text string inspect object debugger console log nt throw exception report stack trace", "d": "12/2013"}, {"body": "better logging", "d": "12/2013"}, {"body": "add breakpoint warning gets issued able break inspect current stack lead back parent constructed inspect data structure call frame could add debugger call automatically break might little intrusive perhaps optin feature", "d": "12/2013"}, {"body": "ran bit hairpulling tracked using array children instead argument list js var react require react reactrendercomponenttostring reactcreateclass render function return reactdomdiv null lt emits warning reactdomdiv reactdomdiv consolelog removing square brackets works fine emit warning edit sorry clarified specifically talking", "d": "12/2013"}, {"body": "oh thought supposed pass array know michael hart notifications githubcom wrote ran bit hairpulling tracked using array children instead argument list removing square brackets works fine emit warning reply email directly view github", "d": "12/2013"}, {"body": "yea definitely run issues occasion would love see addressed soon", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "cc petehunt", "d": "12/2013"}, {"body": "jam different bower", "d": "12/2013"}, {"body": "fixed commit", "d": "12/2013"}, {"body": "even mean include tag change contents get rerun seems fairly reactpagespecific", "d": "12/2013"}, {"body": "yeah really sure really useful normal react app reactpage definitively useful zpao suggested change tag behave like dom takes single string child escaped like spans", "d": "12/2013"}, {"body": "vjeux zpao could look fixing understand needs done create component checks either empty string child possibly many strings course works like happen string changes simply update element defer browser assuming nothing recreate element seems right", "d": "12/2013"}, {"body": "getting rid fullpage rendering anyway see nt think worth anything special", "d": "12/2013"}, {"body": "spicyj stills seems like able render supported even even rendering supported could still useful yeah perhaps worth extra bytes", "d": "12/2013"}, {"body": "thanks going point see author", "d": "12/2013"}, {"body": "hehe thought perhaps best made proper issue jsfiddle example rather rudely posting pull requests", "d": "12/2013"}, {"body": "seems like bug least react give error render time probably completely fixable", "d": "12/2013"}, {"body": "cc benjamn sebmarkbage jordwalke definitely something nicer", "d": "12/2013"}, {"body": "also ran", "d": "12/2013"}, {"body": "spicyj noticed separator stuff escaping solution probably hurts performance another acceptable option print warnings development version think react core maintainers decide", "d": "12/2013"}, {"body": "quarkzju spicyj closed shipped yet released", "d": "12/2013"}, {"body": "syranide thanks information", "d": "12/2013"}, {"body": "nt deprecated mon dec christopher chedeau lt notifications githubcom wrote reply email directly view github", "d": "12/2013"}, {"body": "correction already deprecated mon dec sander spies sandermail gmailcom wrote nt deprecated mon dec christopher chedeau lt notifications githubcom wrote reply email directly view github", "d": "12/2013"}, {"body": "converting website uses easy workaround", "d": "12/2013"}, {"body": "probably want div", "d": "12/2013"}, {"body": "purpose like sanderspies said deprecated long long long time ago made conscious decision exclude certain things", "d": "12/2013"}, {"body": "remember right part motivation would external users could matching fb internal style exactly however npm package names required lowercase casesensitive linux means people need", "d": "12/2013"}, {"body": "yea accepted lowercase real option npm actually even prohibits capitalized package names might force us eventually change internally least makes relatively painless transition", "d": "12/2013"}, {"body": "ok part decision made going base going take api changes take bugfixes master makes things way easier also let people switch without worrying breaking changes also means need list commits need cherrypickedbackported excluded building testing going lack coverage master fine luck vnext cut soon unlikely anything happen please add commitsprs think update description issue updated state", "d": "12/2013"}, {"body": "spicyj suggested spreadsheet changes master considered generated imported csv figure changes outside outside spreadsheet", "d": "12/2013"}, {"body": "thanks help done", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "tried fix bug yesterday bad time trying find fix similar cases looked current well maintained libraries nt find way make scroll bubble capture seems like trying fix would waste time would make code much complex browser slowly dying suggestion point documentation", "d": "12/2013"}, {"body": "seems like nt easy let fabiomcosta says document", "d": "12/2013"}, {"body": "zpao think everytime someone uses onscroll browser would annoying would say would annoying would also frustrating figure react limitation hours debugging ugh", "d": "12/2013"}, {"body": "warning would super helpful", "d": "12/2013"}, {"body": "reopening add warning", "d": "12/2013"}, {"body": "fixed think reopen cc benjamn", "d": "12/2013"}, {"body": "see place think need feel free think costliest parts covered commoner right though presumably could shortened gruntnewer nt know realistic sure much win get think probably optimizations could make build process first", "d": "12/2013"}, {"body": "zpao right going experiment later closing", "d": "12/2013"}, {"body": "zpao ace probably nt quickly put things page could nt wait play around", "d": "12/2013"}, {"body": "think would fine would still put equivalent jquery call inevitable question", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "internal diff works", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "done vjeux", "d": "12/2013"}, {"body": "ship ed", "d": "12/2013"}, {"body": "going close think reprinting could handy point though", "d": "12/2013"}, {"body": "going close try move towards sustainable method tracking issues like get us closer", "d": "12/2013"}, {"body": "might easiest first bug would interesting find failing requires browser knowledge", "d": "12/2013"}, {"body": "chenglou ideas might failing ie might bigger problem controlled inputs", "d": "12/2013"}, {"body": "idea subtlegradient break ie added patch goes test", "d": "12/2013"}, {"body": "fails simulate input event instead key events change plugin listens", "d": "12/2013"}, {"body": "oops sorry disregard", "d": "12/2013"}, {"body": "sent new diffs internally restrict fullpage rendering supporting single root never changes ie unmounting must used server rendering way avoid innerhtmling scary things like still supporting albeit bit clunkily people use cases", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "addressed trailing whitespace issues pull request", "d": "12/2013"}, {"body": "record react coffeescript jade haml like syntax would heaven guys nt know missing", "d": "12/2013"}, {"body": "clear way turn html string react dom object", "d": "12/2013"}, {"body": "contra correct unless count sidesteps almost react", "d": "12/2013"}, {"body": "correct anymore use however certainly would recommend using runtime", "d": "12/2013"}, {"body": "mentioned pr done", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "even easier jump", "d": "12/2013"}, {"body": "also seems apply using array string makes pretty realworld bug imho compared weird string scenario reason nt want states arrays", "d": "12/2013"}, {"body": "happen whenever state anything object think check arrays since use merge needs object arrays good either", "d": "12/2013"}, {"body": "yeah saw wtf", "d": "12/2013"}, {"body": "would love add contributors list", "d": "12/2013"}, {"body": "petehunt message submit patch", "d": "12/2013"}, {"body": "bitshadow something along lines reactowner refs usually means trying add ref component nt owner created inside another component render method try rendering component inside new toplevel component hold ref", "d": "12/2013"}, {"body": "might misinformed nt quite difference use cases mouseenter mouseover events theoretical nonreact example working hover states nested elements tried apply concept react nested components using onmouseenter instead obviously fails triggered topmost element moving child element back effect maybe better approach react altogether", "d": "12/2013"}, {"body": "done", "d": "12/2013"}, {"body": "going say stay away use helpers like one spicyj mentioned exists", "d": "12/2013"}, {"body": "propose make work", "d": "12/2013"}, {"body": "fixable depends standard behaviour idea find standard nt bad patch triggering instead yungsters", "d": "12/2013"}, {"body": "also seen confusion team especially annoying needing write", "d": "12/2013"}, {"body": "going wontfix may decide overhead worth really get niceness ember computed properties observing changes properties since nt afaik nt intention nt think anytime near future", "d": "12/2013"}, {"body": "jordwalke actually think empty would work case", "d": "12/2013"}, {"body": "made better entirely particular lifecycle state nt get changed back gives confusing make another state update anyone good ideas behavior case", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "zpao jeffmo soon", "d": "12/2013"}, {"body": "zpao spicyj fixed master since time ago", "d": "12/2013"}, {"body": "syranide still broken looks like pr fixes", "d": "12/2013"}, {"body": "let close need special keys always fall back nonjsx", "d": "12/2013"}, {"body": "agree available documented", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "follow updated stress several places hopefully okay", "d": "12/2013"}, {"title": "remove scope nesting prefix", "body": "necessary use parent", "num": "51", "d": "12/2013"}, {"title": "observer rewrite", "body": "x currently child objects nested observed object observed proper way probably make every object selfcontained propagate events x would make data objects completely decoupled allow vm simply observe scope instead copying stuff", "num": "50", "d": "12/2013"}, {"title": "hooks overridden inheritance", "body": "wrap existing hook", "num": "49", "d": "12/2013"}, {"title": "child vm access parent options directives filters etc", "body": "", "num": "48", "d": "12/2013"}, {"title": "vmodel contenteditable", "body": "", "num": "47", "d": "12/2013"}, {"title": "enteredview leftview hooks", "body": "", "num": "46", "d": "12/2013"}, {"title": "vm appendto remove", "body": "convenience methods vms created offdom also applies transitions automatically", "num": "45", "d": "12/2013"}, {"title": "batch value updates asynchronously", "body": "x implementation x unit test x fix functional tests pseudo code created binding give uid binding update check uid global update hash waiting update push global update stack nexttick stack flush callback registered register set uid true global update hash flush callback update every binding queue", "num": "44", "d": "12/2013"}, {"title": "need way pass data child components", "body": "break vcomponent file remove custom elements", "num": "43", "d": "12/2013"}, {"title": "seedelement", "body": "define custom element pass simple function pass seed viewmodel constructor option object", "num": "42", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "nt seem necessary using transition functions gives control", "d": "12/2013"}, {"body": "becomes trivial", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "still need tests", "d": "12/2013"}, {"body": "tests", "d": "12/2013"}, {"body": "first pass todomvc benchmark improvement almost need rewrite tests accommodate async updates", "d": "12/2013"}, {"body": "landed", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"title": "backbone events still fired old event", "body": "hello im new backbone question backbone events scenario button save inside edit view first edit click save fires one event reroute go another item new edit view model click save looks like click event save first view still binded way unbind first event sorry grammar thank", "num": "2937", "d": "12/2013"}, {"title": "url conflict collections models", "body": "default constructor collections allows define collection url options parameter var collection backbonecollection function models options options options optionsurl thisurl optionsurl optionsmodel thismodel optionsmodel optionscomparator void thiscomparator optionscomparator thisreset thisinitializeapply arguments models thisreset models extend silent true options next models defined first argument built options collection call method reset result default url computation models replaced constant url much models collection share url conflicts computation consist concatenate collection url model id url disappear models options models thisreset models extend silent true omit options url", "num": "2932", "d": "12/2013"}, {"title": "model retains collection property remove event handler", "body": "model removed collection reference collection deleted however time event called model model still reference collection removed one would expect state model event handler would remove action completed javascript var model new backbonemodel var collection new backbonecollection model modelon remove function modelhasownproperty collection expected false actual true collectionremove model see jsfiddle use case something like javascript var targetmodel backbonemodelextend ispartofcollection function return thiscollection var objectboundtomodel function var model new targetmodel modelon remove function modelispartofcollection thisactinoneway else thisactinanotherway stands would something semantically goofy like huge deal workaround still expected behavior imo looking backbonemodel remove method reason call made event triggered", "num": "2929", "d": "12/2013"}, {"title": "ajax options errors triggers", "body": "problem save save server returning error capture error treat case server returning error code use show popup asking confirmation server message user confirm send request adding request parameters given server parameters tell server request come confirm noted error handlers nt ajax options listen ajaxerror resend listen error backbone cant fork project add change allow options error use change api error model xhr options ajaxoptions think commit", "num": "2927", "d": "12/2013"}, {"title": "typeerror targetmodel undefined collectionfetch", "body": "hi busy script suddenly even rolling back get error firebug collectionfetch look code see hovering attr show json data received fetch hovering targetmodel see undefined trying figure going ca nt find model var ofusersmdl backbonemodelextend collection var ofuserscollection backbonecollectionextend", "num": "2926", "d": "12/2013"}, {"title": "problem using new version zeptojs", "body": "problem cause zeptojs called posted gist fix problem anyone nice idea", "num": "2925", "d": "12/2013"}, {"title": "e params", "body": "", "num": "2924", "d": "12/2013"}, {"title": "model id undefined returned collectionget obj", "body": "caseywebdev method defined odd behavior collection contains model id return model whenever odd edge case know believe ran production application among things means create collection length wrong backbone definition explicitly checked case related", "num": "2922", "d": "12/2013"}, {"title": "listen viewel events inside view", "body": "work javascript events click thisview onclickevent events click onclickevent", "num": "2921", "d": "12/2013"}, {"title": "collisions id cid within collection cause mayhem", "body": "used keys implicit assumption model equal model collection breaking assumption causes strange behavior case contain contain nt seem like unrealistic edge case think hash broken separate hashes behavior made explicit favor ids cids", "num": "2920", "d": "12/2013"}, {"title": "non status code catching error handler saving model", "body": "regarding document sent status respond code server however error handler nt get fired", "num": "2919", "d": "12/2013"}, {"title": "problem idattribute", "body": "hello problems new backbone version concerning new policy use idattribute use always thisid parse working correctly working changing models idattribute found strange behaviours eg model three attributes code label text idattributecode create new elements form user add three attributes try save backbone realizes put instead post set code backbone also set thisid model never new cant post use idattribute models id generated server added user form problem idattribute need composed id set thisid parse nt affect attributes nt work set responseid parse order backbone treat id attributes nt want rest nt accept attribute id used url case think last update idattribute limitations benefits", "num": "2917", "d": "12/2013"}, {"title": "view alters arguments calling initialize", "body": "view change arguments null empty object initialize called instead null breaks implementations check null var view backboneview function options thiscid uniqueid view options options lt options arguments set null extend pick options viewoptions thisensureelement thisinitializeapply arguments lt initialize called new value thisdelegateevents correct implementation ie changing arguments var view backboneview function options thiscid uniqueid view thisconfigure options lt options changed thisensureelement thisinitializeapply arguments thisdelegateevents", "num": "2915", "d": "12/2013"}, {"title": "pausing time backbonejs", "body": "", "num": "2914", "d": "12/2013"}, {"title": "security issue", "body": "updatehash function line sends unverified data web browser result browser executing malicious codexss attack", "num": "2911", "d": "12/2013"}, {"title": "tailing slashes causing redirects servers", "body": "recently raised issue ghost project around function backbone nodejs express server using plugin add tailing slash get requests give consistency urls becomes issue backbonejs creating url model nt place tailing url therefore server respond redirect client needs follow redirect adds latency system sure projects thing ghost suggest adding setting backbone set add tailing api urls suggest url function return passed another function add remove tailing slash needed want fork create working proof concept", "num": "2910", "d": "12/2013"}, {"title": "navigate longer preserves url parameters", "body": "looks like added line fragment fragmentreplace pathstripper navigate method code base relies able pass url parameters navigate reasons unrelated best coding practices switch turns new feature upgrade newer versions backbone resolved saw post backboneqs needing defined backbone parses url params fix broken navigate method", "num": "2909", "d": "12/2013"}, {"title": "break backbone collection child collection also listen events registered parent collection", "body": "want break backbone collection child collection also listen events registered parent collection example collection break children grouped specific attribute say models properties collection models properties collection ps number child collections specific dynamic created want whenever event custom predefined occurs parent collection child collection listen suitable approach", "num": "2908", "d": "12/2013"}, {"title": "update backbone", "body": "app make want update app run error console help suggest focus part backone make thank much", "num": "2907", "d": "12/2013"}, {"title": "several lines contain many characters", "body": "annotated source page github repo annoying scrollbars sure really necessary limiting max length lines makes code better reading", "num": "2904", "d": "12/2013"}, {"title": "router problems", "body": "backbone great library router weak point change query string parameters router thinks nothing changed router thinks nothing changed pushstate decides instead need reload current url without reloading page cant please help", "num": "2902", "d": "12/2013"}, {"title": "merge option collectionset working specific case", "body": "adding models collection duplicates merged collectionmodel defined method instantiates appropriate model polymorphic collections happens models added still defined objects instantiated models minimum example issue occurs collectionset line case described targetmodel method model class therefore targetmodelprototypeidattribute always undefined subsequently means already existing model never found ugly workaround instantiate list models first add target collection anyway wanted report issue thanks backbone great", "num": "2901", "d": "12/2013"}, {"body": "hi afraid enough information give advice could post working jsfiddlejsbin would bit easier also may want try irc channel mailing list sort issue", "d": "12/2013"}, {"body": "hi braddunbar ok try mailing list irc thanks", "d": "12/2013"}, {"body": "braddunbar ive search ive read articles backbone zombieghost events suggest best way prevent zombieghost think issue thanks", "d": "12/2013"}, {"body": "zombie views views longer attached dom kept memory model collection still reference usually due event handler prevent either stop using modelcollection along view sever ties might already either way fine choice depends situation", "d": "12/2013"}, {"body": "ok thanks", "d": "12/2013"}, {"body": "workaround consist delete url options method initialize initialize function models options delete modelsurl", "d": "12/2013"}, {"body": "believe fixed aka url option removed", "d": "12/2013"}, {"body": "yes collection contained model attribute model parsing method adjusted cast array json objects collection models used url option collection compute url one owning model sorry inconvenience modify code", "d": "12/2013"}, {"body": "inconsistency related state collection stable event called mutating events example would better iterate twice second time event triggering really sure better", "d": "12/2013"}, {"body": "called event event wo nt triggered collection also change sure continue work caseywebdev points comments perhaps unexpected behavior around patch assumed", "d": "12/2013"}, {"body": "hi josejamart xhr object attached passed handler able get whatever need", "d": "12/2013"}, {"body": "thank braddunbar quick response know say nt able resend request xhr object consult object send try modify url request resend nt work need optionsurl restroot rest result backboneajax options try xhr request ajax nt keep headers post data request configurations", "d": "12/2013"}, {"body": "hmm could nt save options though", "d": "12/2013"}, {"body": "yes option logic collection models iterate models saves save server could response error confirmation response error continue saves confirmation show popup user user decision resend request continue others lines error callback afraid state vars call recursively comment try see work", "d": "12/2013"}, {"body": "looking see firebug row backbonejs file var collection backbonecollection function models options models filled json object firebug also shows content options object see url set however model though set collection model", "d": "12/2013"}, {"body": "since thismodel guessing model nt yet available collection created thus ca nt really tell without looking runnable code though provide jsfiddlejsbinetc glad take look", "d": "12/2013"}, {"body": "hey brad added behind row backbonejs indeed works already tried create fiddle however could nt quite get api use working might need say using requirejs load model view collection router looks like gotousers function see well loading scripts require model loaded first create new ofusersmodel case run collectionfetch first time using collections jsfiddle quite new well please let know need anything else thanks help advance edit tried send model fetch like ofuserscollectionfetch model ofusersmdl nt help either also tried ofusersmdl new ofusersmdl ofusersmdl ofusersview new ofusersview ofuserscollection new ofuserscollection however results even timeout seconds wo nt fix problem trying everything see starts working require modelsusers viewsusersview viewsmenuview collectionsusercollection function usersmdl usersview menuview userscollection maybe issue collection might model mean could model although created seen correct type ca nt passed collection consolelog model like require modelsusers viewsusersview viewsmenuview collectionsusercollection function usersmdl usersview menuview userscollection returns function", "d": "12/2013"}, {"body": "see looks like probably requiring model collection module means collection may load model thus get undefined property give shot", "d": "12/2013"}, {"body": "say something like var var userscollection backbonecollectionextend", "d": "12/2013"}, {"body": "sure exactly work code error receiving due missing property", "d": "12/2013"}, {"body": "rebuild script since timeout seconds nt even work model loaded seconds even collection created", "d": "12/2013"}, {"body": "seems like bug zepto fix thread work backbone tends avoid specific fixes dropin replacement libraries like zepto lodash preferring libraries responsible maintaining compatibility reference apis backbone using jquery incorrectly let know reopen inclined think stay zepto", "d": "12/2013"}, {"body": "yap zepto fixed problem sorry trouble", "d": "12/2013"}, {"body": "worries glad solved issue tue dec pm hiraki satoru notifications githubcomwrote yap zepto fixed problem madrobbyzepto sorry trouble reply email directly view github", "d": "12/2013"}, {"body": "also either definition problematic model id like object object know bizarre id nt see backbone impose restrictions id strings beyond uniqueness especially concerned however", "d": "12/2013"}, {"body": "unless type check weird ids like problematic change trivial see struggling justify perf hit seems like kink app design diff diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs get model set id get function obj obj null return void return thisbyid obj thisbyid objid thisbyid objcid isstring obj isnumber obj return thisbyid obj thisbycid obj return thisbyid objid thisbycid objcid thislength thismodels thisbyid thisbycid thisbyid modelcid model thisbycid modelcid model modelid null thisbyid modelid model modelcollection modelcollection modelon thisonmodelevent internal method sever model ties collection removereference function model options delete thisbyid modelid delete thisbyid modelcid delete thisbycid modelcid modelcollection delete modelcollection modeloff thisonmodelevent", "d": "12/2013"}, {"body": "appreciate edge case likely points design problem bug however nt think add confusion case avoid pulled slight variation caseywebdev approach", "d": "12/2013"}, {"body": "try mailing list stack overflow questions like", "d": "12/2013"}, {"body": "possible wo nt tell", "d": "12/2013"}, {"body": "code looks correct without background impossible tell wrong regardless github issues issues backbone inappropriate use personal help desk try mailing list stack overflow", "d": "12/2013"}, {"body": "hey usver backbone issues nt help forum location report bugs pointed stack overflow mailing list example", "d": "12/2013"}, {"body": "freenode irc documentcloud even", "d": "12/2013"}, {"body": "find issue google actually asked question irc documentcloud realy quiet place ps got code working created jsfidle actual app working", "d": "12/2013"}, {"body": "glad got straightened sorry typically try irc channel exactly types questions sign need help", "d": "12/2013"}, {"body": "hi trevorburnham come across case needed use id ids commonly integers uuids hashes experience none likely collide without use case inclined favor niceness consolidated api", "d": "12/2013"}, {"body": "work application users allowed set id certain objects urlsafe string allows restful apis get say citiesvenice instead nt think particularly unusual use backbone dec brad dunbar notifications githubcom wrote hi trevorburnham come across case needed use c id ids commonly integers uuids hashes experience none likely collide without use case inclined favor niceness consolidated api reply email directly view github", "d": "12/2013"}, {"body": "really arbitrary using unique keys etc instead url though completely awesome github everywhere let every resource assigned incrementally database", "d": "12/2013"}, {"body": "trouble working api nt expose database id slug would nt make sense anything slug think reasonable ask anything backbone design would make using slug potentially conflicts obviously wrong nt think believe potential collisions bug", "d": "12/2013"}, {"body": "restrictions user enter id could potentially mix version uniqueid backbone uses generated ensures collisions happen", "d": "12/2013"}, {"body": "restriction slug must urlsafe could avoid collisions using slug would also mean using would override use slug attribute would override well since rely heavily would losing sizable chunk backbone outofthebox functionality", "d": "12/2013"}, {"body": "like note precedent concerned models id surely concerned models id well", "d": "12/2013"}, {"body": "related", "d": "12/2013"}, {"body": "caseywebdev said using anything meaning id regardless api likely cause problems seems case could use nonurlsafe strings cids would think would better override modelurl collectionget suggested implement collectiongetbyslug", "d": "12/2013"}, {"body": "yup overriding trivial already act flexible", "d": "12/2013"}, {"body": "would think would better override modelurl collectionget suggested implement collectiongetbyslug given want maintain efficiency hash lookups overriding implementing separate would mean creating hash collection init listening collection events keep hash updated nontrivial amount work support seems straightforward use backbone natural one using datastore redis generate integer id saving object wontfix due overhead maintaining two hashes perhaps could least make possible override way cids generated replacing line something either defers publicfacing method eg least uses publicfacing prefix eg", "d": "12/2013"}, {"body": "hello agree trevorburnham think id cid two different concepts nt treat way think id real identifier wo nt change independently object stored cid temporary identifier used id present object id importance cid id nt conditioned cid agree better way divide two different hash least give possibility override way cids generated think patch", "d": "12/2013"}, {"body": "originally ids cids split two hashes combined getbycid removed great majority cases simplification worked quite well worth note case actually three way semantic collision causing problem slug id cid getting flattened explicitly implicitly single hash tough call real use cases point ids form c think added api complexity hard justify easy enough seem inappropriate problematic override underscore necessary", "d": "12/2013"}, {"body": "longer usergenerated string perhaps consider adding fast lookups attributes core easy obvious alternative see proposed implementation", "d": "12/2013"}, {"body": "status code docs refers status code nt code generally considered success codes want trigger error", "d": "12/2013"}, {"body": "create short jsfiddle demonstrating issue hard time picturing describing", "d": "12/2013"}, {"body": "model three attributes code label text idattributecode create new elements form user add three attributes try save backbone realizes put instead post set code backbone also set thisid model never new cant post use idattribute models id generated server added user form part least seems correct generating ids client side need redefine purposes right", "d": "12/2013"}, {"body": "hello going try create jsfiddle case order clarify problems sample first question think thisid attribute represents real identifier object initialized attribute combination attributes server shouldt synchronized attribute keep synchronized lost possibility create identifiers form client side cant post calls see sample ca nt change identifier object change set synchronized try request call send new id url body instead old id url new one body think strange case common legacy servers summary think thisid synchronized fetch moment initialize data object thisid keep immovable", "d": "12/2013"}, {"body": "hello braddunbar yes chage solve first problem post benefits keep synchronized thisid atribute giving value", "d": "12/2013"}, {"body": "experience time id changes creating new model would main benefit", "d": "12/2013"}, {"body": "correct views longer attach options instance default empty object relevant discussion contains patch like old behavior always add back constructor", "d": "12/2013"}, {"body": "braddunbar nt think quite issue though called rather solution would rather modifying arguments think make sense", "d": "12/2013"}, {"body": "tgriesser exactly right", "d": "12/2013"}, {"body": "ah completely misread sorry lkochub thanks help tgriesser", "d": "12/2013"}, {"body": "sure problem break code since checking null made nice debugging session", "d": "12/2013"}, {"body": "addressed look", "d": "12/2013"}, {"body": "looks good like making calls extend pick null ie better extend pick options viewoptions", "d": "12/2013"}, {"body": "would ever need pass view", "d": "12/2013"}, {"body": "could see calling may may rather needing use", "d": "12/2013"}, {"body": "would nt better test seems uneccessary", "d": "12/2013"}, {"body": "complex scenarios backbone used foundation another framework general participants behindthecurtains proxy inheritance invocation chain must change input parameters supplied user ie user issued new view null initialize must called null", "d": "12/2013"}, {"body": "number places throughout backbone code count least dozen mutate argument changing behavior view would mean changing model collection router plus methods mutate args well still nt see strong use case default empty object", "d": "12/2013"}, {"body": "huh thought model collection router nt change argument reason make change seem inconsistent certainly agree fairly edge pretty easily fixable either way", "d": "12/2013"}, {"body": "leaving aside philosophical argument happy beers specific change view behavior introduced see original description clearly inconsistent implementation", "d": "12/2013"}, {"body": "consider options guard pretty important feature becomes tedious boilerplate check options every subclass view making change piss lot folks start seeing upgrade lkochub nt think view contract passing arguments unchanged seems fixed bug existed really need able override javascript var myview backboneviewextend constructor function opts thisopts opts backboneviewapply arguments initialize function opts consolelog opts thisopts false", "d": "12/2013"}, {"body": "think fact models collections thing reason enough close one thanks", "d": "12/2013"}, {"body": "understand argument default options object eliminate tedious subclasses default empty object created options object supplied ie new view ie undefined inside view null hand valid value thus preserved consider future releases right understand desire keep behavior consistent views models collections fix thanks", "d": "12/2013"}, {"body": "hi desaxena afraid need bit information assistance", "d": "12/2013"}, {"body": "hi khurramlone please see attack vector describe valid one backbone prevent", "d": "12/2013"}, {"body": "hi since could issue either way redirect slash slash vice versa inclined say tweak taste want trailing slash model urls use following", "d": "12/2013"}, {"body": "understand go either say think setting backbone set either way instead every project wants tailing slashes mode backbone especially lite code changes", "d": "12/2013"}, {"body": "braddunbar thanks awesome quick response", "d": "12/2013"}, {"body": "reason think added many people probably would nt notice redirect happening system adding backbone would raise issue give people better performance", "d": "12/2013"}, {"body": "sure thing nt think add option though need quite options added one every conceivable difference applications think much nicer allow extensionmodification standard idioms eg overriding method options", "d": "12/2013"}, {"body": "ok take back guys ghost", "d": "12/2013"}, {"body": "thanks much please let know turns", "d": "12/2013"}, {"body": "hi jephroni already discussed check see solves issue", "d": "12/2013"}, {"body": "see fixes routernavigate method still working suggesting level breakage expect backbone refactoring massive move reliable library wait see ticket reopen answer given thank joel ephroni senior frontend developer fedmobile cell brad dunbar notifications githubcom replyto jashkenasbackbone reply replygithubcom date tuesday december pm jashkenasbackbone backbone noreplygithubcom cc joel ephroni joelephroni overstockcom subject backbone navigate longer preserves url parameters hi jephroni already discussed check see solves issue reply email directly view github confidentiality notice message intended use review individual entity addressed may contain information privileged confidential reader message intended recipient employee agent responsible delivering message solely intended recipient hereby notified dissemination distribution copying communication strictly prohibited received communication error please notify sender immediately telephone return email thank", "d": "12/2013"}, {"body": "apologies offended nt mean imply anything backbone general issue already discussed think read discussion try code much better informed whether works think issue describing fixed though certain mean", "d": "12/2013"}, {"body": "clear attempt fix breakage describing", "d": "12/2013"}, {"body": "brad thanks clarifying read seemed using solution would involve tracking places code rely navigate navigate actual url given refactor differently relatively time consuming thing feel misunderstood solution joel ephroni senior frontend developer fedmobile cell cid brad dunbar notifications githubcom replyto jashkenasbackbone reply replygithubcom date tuesday december pm jashkenasbackbone backbone noreplygithubcom cc joel ephroni joelephroni overstockcom subject backbone navigate longer preserves url parameters clear attempt fix breakage describing reply email directly view github confidentiality notice message intended use review individual entity addressed may contain information privileged confidential reader message intended recipient employee agent responsible delivering message solely intended recipient hereby notified dissemination distribution copying communication strictly prohibited received communication error please notify sender immediately telephone return email thank", "d": "12/2013"}, {"body": "nt think would change calls maybe could provide example call try code", "d": "12/2013"}, {"body": "please use stackoverflow mailing list irc channel questions like", "d": "12/2013"}, {"body": "please refer search keyword detail refer change log", "d": "12/2013"}, {"body": "thanks appleboy", "d": "12/2013"}, {"body": "thanks appleboy", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "hi misterjt active discussion check mean clicking link url current page use case", "d": "12/2013"}, {"body": "thank dont mean clicking navigation carried method mean call method url current useful situation content depends session option changes websocket request aftet session option changed need reload page current url", "d": "12/2013"}, {"body": "correct calling identical fragment effect good thing means call without worrying many times however work around calling need give shot let know nt work", "d": "12/2013"}, {"body": "think good thing somebody call repeatedly means need unnecessarily bad programmer wrote bad architecture application means got ta change something architecture make world better turns helped programmers curves hands created obstacle normal programmers found solution problem every call bad workaround", "d": "12/2013"}, {"body": "look think also fixed master branch", "d": "12/2013"}, {"body": "thanks tried master branch indeed fixed sorry redundant issue", "d": "12/2013"}, {"body": "hi backbone designed let swap persistence layer overriding check popular localstorage plugin search yields promising options jquerycookie dep", "d": "12/2013"}, {"body": "mponizil right great place start", "d": "12/2013"}, {"body": "use bind underscore collection debugged code lose prototype model moment use bindall initialize method", "d": "12/2013"}, {"body": "ran bug production application upgrading hope see release soon", "d": "12/2013"}, {"body": "make bindall size project number bindall try delete bindall step step almost imposible change time code hope help", "d": "12/2013"}, {"body": "hi using backbone magic method right migrating custom library using jquery element would perfect prevent memory leak workaround best david", "d": "12/2013"}, {"body": "sorry reviving pretty old issue ran today pretty painful way since change events designed nestable successive changes made handling change accumulate exception change event handler causes change never finish trouble cause spooky effects road rely work case need treat changes coming server differently local changes use handler sync event since earlier exception change event caused change get stuck unfinished state always accumulates new properties looks like server sent back changes actually nt took quite figure happening even exception change handler related weird problems sync saved least solid half day work backbone caught exceptions change handlers case definitely understand exceptions valuable tool informing issues occurring prefer catching time exactly reason however backbone caught logged exceptions maybe emitted event could still alerted occurring without experiencing spooky hardtoexplain behavior much later completely disconnected point time", "d": "12/2013"}, {"body": "actually guess clarify much concerned successive events borked exception rather object event triggered left badunfinished state actually something somewhat special events opposed events general maybe another solution instead trycatch would use ensure model state eventually gets cleaned change events real trouble get stuck set file separate issue", "d": "12/2013"}, {"body": "file separate issue think working expected exceptions within change handlers stopping world breaking app want catch clean feel free made change many many folks would much harder time reliably developing applications", "d": "12/2013"}, {"body": "well trying say would able debug manage issue dramatically faster caught trouble js browsers exception nt really stop world like many environments code given event loop might stop leaves something bad state side effects might happen far later road largely unrelated part app seconds minutes later extraordinarily hard connect two issues really asking errors event handlers caught totally ok handlers fail fire etc asking models get stuck irreparably bad state nonobvious causes side effects later", "d": "12/2013"}, {"body": "suggesting settimeout something like lines javascript var self settimeout function selfpending false selfchanging false trigger relevant attribute changes silent changeslength thispending options var l changeslength lt l thistrigger change changes current changes options imperfect slight amount time previously queued events could run model still bad state big improvement current situation without changing semantics events catching exceptions", "d": "12/2013"}, {"body": "would nt correct fix figure throwing exception fix code rather hack settimeout", "d": "12/2013"}, {"body": "tgriesser issue trying address though situation text editing app someone reports bug text disappearing type intermittent extremely hard reproduce someone else reports exception happening count characters easy reproduce issues nt appear obviously connected way users reported issue nt make mention notice issue fix since obvious easy try reproduce fix since intermittent first place idea fixing fixed spend hours trying address problem think ways could occurring actually happened exception handler left model bad state opened possibility later race condition sometimes occurs sometimes desire spooky hardtoidentify side effects mask suppress errors totally agree errors obvious stop world know fix problem exception js nt exit program indication reason would assume later changes model exception thrown would report bad change information", "d": "12/2013"}, {"body": "alternatively since know way method defined never true end turn event loop could install settimeout instead repairing model state throws exception ultimately program errors errors person writing program case saying would really nice help nt necessarily mean swallowing errors", "d": "12/2013"}, {"body": "using sort error reporting mechanism help trace edge cases users", "d": "12/2013"}, {"body": "systems case airbrake nt provide information usersession triggered error", "d": "12/2013"}, {"body": "side though often turned airbrake also logs errors people generate open console poke things turned surpisingly often", "d": "12/2013"}, {"body": "reason nt use try finally block execute final cleanup code make certain nt get invalid state still let exceptions", "d": "12/2013"}, {"body": "worth nt think server side question tried something like printing params delete request problem sending params like expect passed along jquery advice read looking send extra params backbone destroy model says gets passed serialized nt dug source find instead send information hoping", "d": "12/2013"}, {"title": "providing components via third party scripts", "body": "hey maybe already possible somehow please document checked embertable component working anymore latest builds registering component via point started behave differently regards isolation template controller controller component became point lately template component renders handlebars tag component instead component bottom line need way register components including code application instance defined possible useful third party libraries plug components thanks", "num": "4030", "d": "12/2013"}, {"title": "fails local windows", "body": "able build ember using latest code get command runs fine previous versions ember including still relying available globally think something local dependency sure go fixing something simple missing end windows may also part problem", "num": "4027", "d": "12/2013"}, {"title": "emberjs addobserver call", "body": "base view javascript emviewextend function controller javascript emcontrollerextend null emcomputedalias set value setter observers called apart callback addobserver help", "num": "4019", "d": "12/2013"}, {"title": "seeing docs handle nested json responses", "body": "maybe overlooking something ca nt figure supposed json coming server looks like articles user name user username user id id v content content title title created template accessing content created fine try get username nothing comes article model articletitle articleusername articlecreated noticed model whatever nt define wo nt appear template looks like title dsattr string content dsattr string created dsattr date try add user name dsattr string match nested json get error ember able handle nested json thanks", "num": "4006", "d": "12/2013"}, {"title": "register prebuilt repository bower", "body": "currently pull repository propose another repository registered name bower contains prebuilt tagged versions ember would ideal would like use bower", "num": "4005", "d": "12/2013"}, {"title": "transitiontoroute qp change", "body": "hey manual states possible reroute route changing qp causing error ember today build specifying route name works okay error thanks", "num": "4000", "d": "12/2013"}, {"title": "provision avoid observer calls cases", "body": "following piece logic displaying alert via reusable view using displaymessage observe changes message controller issue arises set message value value undefined initially handle add conditional statement thisget controllererrortype amp amp thisget controllererrortype possible avoid observable call cases", "num": "3998", "d": "12/2013"}, {"title": "resource without callback nt create index route", "body": "resource nt provide callback argument index route nt generated method creates route etc brings another issue machty looks like route wo nt get generated either resources lacking callback nt tested pr sufficiently playing presents", "num": "3995", "d": "12/2013"}, {"title": "composed arraycomputed fails", "body": "using composed properties fails changing underlying source content see simple test case tested latest release version error", "num": "3994", "d": "12/2013"}, {"title": "using thistransitionto skips loading model", "body": "sure whether intentional behavior let explain use transitionto route dynamic segments model method destination route never gets called essentially passing params id still want load right model refresh page right url though model gets loaded fine put together codepen demonstrate current version log console look indexroute commented transition enabled never triggers expected loading model confirmation route", "num": "3989", "d": "12/2013"}, {"title": "controller initialized route hook fires", "body": "seems route controller initialized route hooks firing intentional assume hooks would fire route controller initialized way things feels bit counterintuitive since sometimes need take action model resolved controller initialized b already many places put code runs controller initialized", "num": "3985", "d": "12/2013"}, {"title": "setproperties nt really batching observers", "body": "according documentation batch observers however observer depends two properties called twice even changes batched realized arguments include name observed property however batching could send multiple arguments one key changed repro steps jsbin", "num": "3981", "d": "12/2013"}, {"title": "strange error", "body": "shown img strange idea", "num": "3976", "d": "12/2013"}, {"title": "proposal emberrunproxy", "body": "like provides proxy invoked wrapped runloop would prevent needing define allocate extra closure feels like good devergo integrating libraries enforce async", "num": "3973", "d": "12/2013"}, {"title": "error substates return undefined models parents", "body": "hi sure bug intended behaviour new ember error handling substates change models parent routes code example viewed output window reason parent routes erroneous one losing initial models hooks relevant routes invoked reason possible still use initial models parent routes used transition error state", "num": "3972", "d": "12/2013"}, {"title": "consider making jquery optional", "body": "hi new project target modern browsers thinking carry extra weight jquery would great thinking ember context get feeling ember rely small subset jquery features would love framework make jquery optional drop replacements like lightweight option use instead limited dom querying reduce loading time quicken app bootstrapping well think richard", "num": "3971", "d": "12/2013"}, {"title": "methodapply fails", "body": "emberdebugjs line following line cause error methodapply solution typeof methodapply undefined", "num": "3970", "d": "12/2013"}, {"title": "emberrunlater fires immediately chains", "body": "sure wrapped chains appear fire immediately acts nicely inside function would fire given context previous deferred resolved take following example using jquery functions return deferred resolves time get play nicely ember would require anonymous function either outer reference wrapped function eg proposing make act like possible delaying firing contained deferred function without compromising performance allowing something like opened related improvement run functions could return deferred", "num": "3966", "d": "12/2013"}, {"title": "emberrun could return deferred resolved run", "body": "currently emberrun nt seem return anything think would pretty handy return deferred resolved function runs allowing chaining var self emrun popin function return emrunlater self popout function return emrunlater self popin", "num": "3965", "d": "12/2013"}, {"title": "dom ready document loaded action fire", "body": "page use requirejs dom loaded click button load component component close action action close click action responseon document loaded click ok", "num": "3950", "d": "12/2013"}, {"title": "write inline template component view", "body": "appmsg embercomponentcreate template emberhandlebarscompile template classnames pushmessage close function thisdestroyelement like right call actions action call appmsgclose called code help thank", "num": "3948", "d": "12/2013"}, {"title": "removeat throws error", "body": "attempt call empty array leads error think nt", "num": "3945", "d": "12/2013"}, {"title": "vagrant setup nt actually work nt since release", "body": "opening issue see interest still including vagrant setup repository things keep mind nt worked since release vagrant osx mavericks comes ruby default still interest supporting happy get date newest release vagrant", "num": "3938", "d": "12/2013"}, {"title": "arraycontroller indexof return valid index objectcontroller content wrapped controller", "body": "use comparable stefanpenner", "num": "3931", "d": "12/2013"}, {"title": "outlet inside weird behavior", "body": "trouble template two outlets one inside branch one inside else happens everything starts fine eventually markup supposed go outlet ends inserted twice jsfiddle demonstrating behavior run fiddle start edit view click three names see properly rendered outlet click thumbnail view link purposes example thumbnail view looks like edit view except names reverse order secondary outlet click one names takes back edit view name rendered correctly outlet click different name sudden name rendered twice get bad mode nt seem way get without reloading", "num": "3929", "d": "12/2013"}, {"title": "make noise render helper ca nt find supplied template", "body": "quiet quiet", "num": "3926", "d": "12/2013"}, {"title": "linkto nonblock form syntax text update correctly changing linked value", "body": "example changing value variable also text shown linkto use linkto linkto block format order value binding correctly update dynamically seems get one keypress breaks see example", "num": "3925", "d": "12/2013"}, {"title": "support target attribute linkto helper", "body": "propose support target attribute linkto helper know linkto purpose support transitions within application setting target blank mean automatically external link perfectly feasible use case list resources loaded clicking one get resource page clicking back browser loosing context default ember gets loaded page simple solution would open resource target blank nt want hack around pretty sure use case within application transitions ember philosophy", "num": "3924", "d": "12/2013"}, {"title": "error deleting todos", "body": "following tutorial get error deleting todo page first double clicked todo deleted content make empty gets removed list clicked remove button delete todo location get uncaught typeerror call method deleterecord null template controller previous step", "num": "3923", "d": "12/2013"}, {"title": "emberselect breaks inside group helper", "body": "put within helper content select box properly shown number items select box correct label incorrect value preselected selecting value select box correctly change bound value however jsbin illustrates problem", "num": "3922", "d": "12/2013"}, {"title": "emberstring class support transforming strings namespaces", "body": "similar way rails activesupport inflector inflections class camelize timeentrylaborcamelize timeentry labor decamelize timeentry labordecamelize timeentrylabor underscore timeentry laborunderscore timeentrylabor", "num": "3921", "d": "12/2013"}, {"title": "form action inside nt trigger submit keyboard", "body": "consider form like intercept submit pressing return keyboard focused submit form right happens button action triggered instead removing intercept button yields expected behavior jsfiddle", "num": "3920", "d": "12/2013"}, {"title": "indexof eventlistener performance bug", "body": "continuing performance tuning ie found another possible performance bug seems like used group indexof function line begins take inordinate amount time seen seems happening target method flags add end event array later point indexof called indexof starts beginning array nt find till end chrome modern ies fast enough nt mater fortunately simple fix start searching end array search reverse event system uses series nested hashes store listeners object listener registered event arrives hashes consulted determine target action pair invoke hashes stored object meta hash look like function indexof array target method var index var arraylength gt target array amp amp method array index break return index wo optimization w optimization ideal fix might replace array tree like datastructure index nt need called everytime lookup needed", "num": "3917", "d": "12/2013"}, {"title": "legacy loadingroute example uses deprecated defaultcontainer", "body": "documentation suggests creating view like triggers error per recommended way append view", "num": "3916", "d": "12/2013"}, {"title": "apply emberjs existing element", "body": "page apply emberjs existing element think necessary like github render first page browser", "num": "3914", "d": "12/2013"}, {"title": "overriding index route causes issues linkview", "body": "overriding index route given resource like apparently supported according guide quote cause issues using linkview ie linkto helper eg linkview resolve books booksindex route faulty piece code called fullroutename javascript function fullroutename router name routerhasroute name name name index would suggest implementing router getindexroute equivalent would return index route given resource ie route path fail supplied param valid resource use router getindexroute instead thoughts thanks", "num": "3913", "d": "12/2013"}, {"title": "router ignores queryparams index route", "body": "new queryparams feature seems fail index route live demo code demo nonindex route working ok demo index route failing would expect routes see second argument model method something like home route object would expect route empty object", "num": "3912", "d": "12/2013"}, {"title": "clicks external links inside actions get eaten action handler", "body": "plain old links nested inside element action clicks links nt work problem creating navigation menus toggled open closed external links inside wo nt work internal works great jsbin demonstration", "num": "3911", "d": "12/2013"}, {"title": "array property value shared instances component", "body": "quite sure done something wrong made component properties working correctly scope component instance however added property array value behaves unexpectedly element pushed array component via set pushed property component", "num": "3908", "d": "12/2013"}, {"title": "routeviewname routecontrollername documented", "body": "sure reason nt documented found useful browsing source code properties use case simplified javascript var childroute emberrouteextend controllername userslist appusersindex childrouteextend appusersconfirmedroute childrouteextend appusersunconfirmedroute childrouteextend matter kind array content child routes return use controller passed methods anyway intended use property think documented", "num": "3906", "d": "12/2013"}, {"title": "page rendering issue displaying data fixturesadapter", "body": "sorry trouble coming better title emberjs bug emberdata bug markup used elements render properly data displayed fixturesadapter try resizing window output visible fix expected actual", "num": "3901", "d": "12/2013"}, {"title": "add hook views", "body": "view hook triggered every time view contents updated ember reuses views much possible therefore always recommended rely hook update view contents might therefore useful add hook triggered whenever view template updated stack overflow question illustrates uncommon use case hook short whenever view displays list items rendered using handlebars block helper selecting first item list using jquery works fine using hook however navigating different route trigger hook due ember reusing view already inserted dom approach used", "num": "3894", "d": "12/2013"}, {"title": "using group wo registering result error", "body": "using group wo registering result error wo w leads higly confusing state user uses group block handler nothing happens", "num": "3893", "d": "12/2013"}, {"title": "weird broken bindings behavior", "body": "debug ember emberjs debug ember data emberjs debug handlebars emberjs debug jquery emberjs actorid item content itemname possibleactoroffsets actorid actorid view emberselect valueitemactoroffset contentpossibleactoroffsets bbb updated updates correctly however update always shows initial value seems binding bug updated updates expected however options content select view never update also seems binding bug", "num": "3892", "d": "12/2013"}, {"title": "possible performance bug using inside", "body": "run major performance bug used conjunction takes chrome render elements statements statements elements statements elements takes gt seconds using prod nt seem major effect edit replacing bound helper statement fixes problem unfortunately nt exactly graceful fix zip basic example js bin html ember starter kit lt gt click populate create list slowly lt gt lt p gt like pain try lt p gt outlet lt button action populateelements amp gt populate lt button gt filteredgroups lt div gt lt table class tabledefault id previewergroupstable gt lt tr gt lt th gt previewer group lt th gt lt th gt previewers lt th gt lt th gt batches lt th gt lt tr gt filteredgroups lt tr gt lt td class left gt asdf lt td gt lt td class colnumeric gt shownopreviewerswarning group previewers gt lt gt asdf lt td gt lt td class colnumeric clickable gt shownobatcheswarning group preview reports lt gt asdf lt gt lt td gt lt tr gt lt table gt lt div gt javascript app emberapplicationcreate approutermap function put routes appindexcontroller emberobjectcontrollerextend properties numberofelements filteredgroups embersubscribe render function name start payload return start function name end payload start var duration mathround end start var template payloadtemplate consolelog emberinspect payload var title var view payloadobjecttostring consolelog rendered template view took duration ms", "num": "3874", "d": "12/2013"}, {"title": "startkit params test test improved", "body": "startkit params test test improved currently focus tests use test related query params swapping runnerjs check instead fixes", "num": "3873", "d": "12/2013"}, {"title": "rake dist failing tag", "body": "trying build tag ember get following error rake aborted file directory defeatureify block generateoutput generateoutput create invokewithcallchain block levels invoke block invoke invoke block invoke invoke inblock levels", "num": "3872", "d": "12/2013"}, {"title": "need better error setting arraycontroller model nonarray", "body": "uncommon refactors spikes etc say return object hook controller define get crappy error occurs note nice errors opposite case often exposed try object controller think perhaps router level try detect stashing non array", "num": "3869", "d": "12/2013"}, {"title": "query params stickiness resources", "body": "query params currently remain sticky going resources example say resources users accountroles dont want sorts remain sticky going", "num": "3868", "d": "12/2013"}, {"title": "itemview property nt properly documented", "body": "cc bfbriggs", "num": "3867", "d": "12/2013"}, {"title": "input type text passed empty path getpath", "body": "something messed involving combination componentyield keywordtext input causes passed empty path error getpath details", "num": "3860", "d": "12/2013"}, {"title": "bug nt recompute within falsified block", "body": "see explanation cliffsnotes probably cases recalcs cp even block lives falsified cc kselden", "num": "3859", "d": "12/2013"}, {"title": "bubblesfalse onsubmit nt work well together", "body": "maybe fundamental misunderstanding believe bug way works action within scope action first action never sent example jsbin based modal example code wondering similar requires propagating top caught browser", "num": "3857", "d": "12/2013"}, {"title": "enumerablearray indexof likely also use embercompare comparable", "body": "added", "num": "3856", "d": "12/2013"}, {"title": "weird posttransition logging using parentprefixed thisresource naming", "body": "recall people use trick preserve route naming subresources undesirable discard parent resource name entirely sure solution", "num": "3853", "d": "12/2013"}, {"title": "action parent container prevents interaction child inputs", "body": "short mustache prevent inputs reacting clicked openfile dialog open checkbox checked jsbin illustrates compare seeminglyequivalent jquery code issue", "num": "3851", "d": "12/2013"}, {"title": "transition static segment dynamic nt clear content outlet", "body": "hi trying make modal dialog static segment dynamic segment jsfiddle production emberjs also tested latest canary release behaves exactly works ok first go dynamic segment open dialog static segment transition static segment within dynamic clicking second link transition route content dynamic segment removed outlet seems kind bug within ember guess also could something within bootstrap javascript problem well also nt matter use linkto helper transitiontoroute controller always effect old content outlet cleared rendering route", "num": "3850", "d": "12/2013"}, {"title": "allow attribute bind binding", "body": "works like charm attributebindings dataisbeingsent disabledw dataisbeingsent gt get parentviewcontrollerisinvitationbeingsent property parentviewcontrollerisinvitationbeingsent nt got lot head scratching", "num": "3849", "d": "12/2013"}, {"title": "ditch favor", "body": "see two benefits error handling kept one place avoid doublereporting errors case error handler rethrows error emberhandleerrors catches errors pass used two places eventdispatcher emberrun catches errors pass ie thing terms error handling proposal unless missed codepath cases wrapped emberrun albeit code perhaps could remove think", "num": "3848", "d": "12/2013"}, {"title": "observing isdestroyed causes assertion failure", "body": "want react object destroyed adding observer target object property causes destruction calls object cause assertion failure due fact internals simply assign problem property watched jsbin illustrates problem one provides workaround tedious add everywhere", "num": "3844", "d": "12/2013"}, {"title": "inconsistent api among builtin views", "body": "extending whilst extend view creates confusion among api obstacles write common mixins builtin views piece code would work since method controller view following would work since extends sake consistency builtin view extend", "num": "3843", "d": "12/2013"}, {"title": "invoke across array created reducecomputed seems borked", "body": "following works following fails appears affect first entry source grabbing todos project make quite simple replicate needed extract jsbin", "num": "3836", "d": "12/2013"}, {"title": "uncaught typeerror object function method find", "body": "hi please help try find model data store give error js app emapplicationcreate appstore dsstoreextend adapter dsrestadapter appuser dsmodelextend firstname dsattr string lastname dsattr string birthday dsattr string mainphoto dsbelongsto mainphoto appindexroute emrouteextend model function consolelog appuserfind debug ember debug ember data debug handlebars debug jquery", "num": "3833", "d": "12/2013"}, {"title": "dryness emberlogger makes failure scenarios quite terrible", "body": "experiment less fancy less dry see logs log assertions originate incredibly cryptic scary place", "num": "3832", "d": "12/2013"}, {"title": "uncaught exception bubbling karma qunit phantomjs", "body": "running amp switching ember seeing test continues running even though controller throwing error switch error caught properly handled within karmaqunitphantomjs shows proper error code controller throwing error init function thissuper test runner log ember appears fail silently continue causing template rendered causing integration tests fail", "num": "3829", "d": "12/2013"}, {"body": "asaf could test resolves issue additional background info fixes default context templateless component updates docs tests ensuring context triggered actions correct", "d": "12/2013"}, {"body": "nt resolve issue could provide simplified jsbin exhibiting issue happy track reproduce issue seeing", "d": "12/2013"}, {"body": "rjackson reason pushing repo try compile fork test needed deprecated appropriate approach components registered application initialized thanks", "d": "12/2013"}, {"body": "rjackson uh read code moves templatename layoutname think important merge least time components transition properly hard debug confusing since exist registering component via handlebars helper supported valid issue safe closed thanks", "d": "12/2013"}, {"body": "asaf deprecation using component without also using using together deprecated pr ensures using behaves way allowing component autolooked believe main issue folks assume components template thing register fact template actually injected components see block provided component called", "d": "12/2013"}, {"body": "asaf agree hope merged released", "d": "12/2013"}, {"body": "issue likely guess executing path like nt work take look fixing tonighttomorrow need windows tester patch", "d": "12/2013"}, {"body": "thanks something help test end happy", "d": "12/2013"}, {"body": "think know fixes needed pointing two places modify make work open issue emberdev repo details put reference instead", "d": "12/2013"}, {"body": "brzpegasus awesome thank tracking", "d": "12/2013"}, {"body": "curious happens thisget controller addobserver instead chaining", "d": "12/2013"}, {"body": "nothing change add question view extension custom view based emview controller implemented using hierarchy created base controller called baseadvancedcontrolcontroller shared code different controllers reopen baseadvancedcontrolcontroller implement onmapadvancedcontrolcontroller last mixed onmapadvancedcontrolcontroller different controllers implement exampleviewcontroller previous example", "d": "12/2013"}, {"body": "please post jsbin example showing issue pretty confident nt bug", "d": "12/2013"}, {"body": "reproduce problem example try investigate possible coding errors cache problem", "d": "12/2013"}, {"body": "believe cp needs accessed observers begin fire", "d": "12/2013"}, {"body": "know implemented addobserver using observes function want exclude events view inserted", "d": "12/2013"}, {"body": "believe related lazy cp although actually bug currently scenarios like confusing cp lazy compute accessed marked invalid happen also begin life invalid state become invalid dependentkeys change cp never computed value unknown observing unknown value nt meaningful cp accessed first time value becomes known observing meaning nt really meaning computed likely giving kick solve im closing issue nt believe actually bug rather expected although obvious behavior clear example demonstrating issue presented gladly reopen", "d": "12/2013"}, {"body": "good reminder alias regular cp nt even occur prob", "d": "12/2013"}, {"body": "better venue ask help stack overflow try keep issue tracker framework bugs issues", "d": "12/2013"}, {"body": "sorry thought issue explained stackoverflow forum ember looked pretty inactive try", "d": "12/2013"}, {"body": "get responses stack overflow ember forum looks like stuff still making documentation unavailable makes quite difficult use ember production right issue opinion sure aware would say ember ready real life project", "d": "12/2013"}, {"body": "course ember ready real life project production ready consult incomplete list users problem easily handle embedded records serializer try specific difficulties try asking stackoverflow could even join emberjs channel freenode irc ember community helpful respect questions", "d": "12/2013"}, {"body": "ah thank nt found document ember site sure found help irc also great idea perhaps response faster", "d": "12/2013"}, {"body": "wesleycho componentsember shim repo contains final builds registered bower repo maintained ember release management team normal release publishing process prevent confusion future either remove registry point componentsember", "d": "12/2013"}, {"body": "ahh realize nt easily searchable via unfortunately", "d": "12/2013"}, {"body": "created issue get additional documentation website also requested package updated point proper repo wesleycho closing issue favor others mentioned thank bringing take care properly", "d": "12/2013"}, {"body": "keep open implementation query params going change currently canary", "d": "12/2013"}, {"body": "machty design doc upcoming changes btw also problem reroute occur new qp see model hook invoked reason template rendered new model result report bug better wait new changes committed first thanks", "d": "12/2013"}, {"body": "asaf take look post discussion forums believe sample gist info", "d": "12/2013"}, {"body": "asaf template different data technically nt rerender update bindings refer anything marked would nt rerender anything like maybe talking something else", "d": "12/2013"}, {"body": "machty forget last comment works expected close issue verifying works expected new upcoming qp changes thanks", "d": "12/2013"}, {"body": "showhide links page demonstrate working", "d": "12/2013"}, {"body": "machty sure changed works thanks paying attention", "d": "12/2013"}, {"body": "oh sorry new code router refactor merged shortly", "d": "12/2013"}, {"body": "clear proposing please reopen generalized suggestion observers always going fire upon changes whether value blank", "d": "12/2013"}, {"body": "double check might simple maybe better pull latest take quick peek", "d": "12/2013"}, {"body": "documented behaviour maybe design excerpt guides note define resource using thisresource supply function implicit resourceindex route created", "d": "12/2013"}, {"body": "machty mr router would mind clarifying bit", "d": "12/2013"}, {"body": "ugisozols kind looks like document fix later commit", "d": "12/2013"}, {"body": "intended including bit loading states generated fn nt provided", "d": "12/2013"}, {"body": "would mind elaborating nt seem intuitive edge nested resources wo nt loading routes honestly index route less important confusing point new embere\u00f1os", "d": "12/2013"}, {"body": "fwiw seems fail underlying content different lengths", "d": "12/2013"}, {"body": "change transition work expect iirc pass primitives string number transition instead full model figures id uses build params call pass anything complex case object treats passed model nt call model hook api docs could probably example passing ids instead full models hope makes sense", "d": "12/2013"}, {"body": "makes sense initial gut question comment pass multiple parameters looks like pass separate arguments works well", "d": "12/2013"}, {"body": "thoughts define explicit lifecycle controllers really instantiated time even fully specified instantiation time like suggesting still possible controller another route hierarchy controller causing instantiated nt think really nail specifics instantiation time apps nt built depend exact time either", "d": "12/2013"}, {"body": "machty makes sense ended taking advice restructuring code depend controller case", "d": "12/2013"}, {"body": "corrected devastating omission word correctly reads thoughts define explicit thanks response though closing", "d": "12/2013"}, {"body": "machty ensure possible router spawned controller instantiated hooks fulfillment value", "d": "12/2013"}, {"body": "stefanpenner nt think use cases want needs controller check model loaded would nt able materialized time model loaded", "d": "12/2013"}, {"body": "machty please reread wrote crafted comment way leave scenario untouched possible create controllers models rather creating immediately setting model causes unneeded change events fire", "d": "12/2013"}, {"body": "stefanpenner ahh gotcha agree", "d": "12/2013"}, {"body": "believe prevent observer fired property course nt clear docs", "d": "12/2013"}, {"body": "kselden think better equipped say bug documentation issue", "d": "12/2013"}, {"body": "setproperties uniques property change events syntax highlighted adds observers want", "d": "12/2013"}, {"body": "kselden neat trick thanks clarifying makes sense thinking one observer two separate properties instead two different observers btw realized documentation different sent pr", "d": "12/2013"}, {"body": "miguelmadero sorry understand confusing try clear docs", "d": "12/2013"}, {"body": "lancezh looks like stackoverflow question would mind asking", "d": "12/2013"}, {"body": "appears emberdata related would suggest looking", "d": "12/2013"}, {"body": "think good idea addition enable function prototype extension like save typing something like", "d": "12/2013"}, {"body": "think prefer one without prototype", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "ilovett idea inspired issue refactoring today love hear thoughts otherwise someone time pr feature flagged", "d": "12/2013"}, {"body": "ilovett assume would resolve open issues", "d": "12/2013"}, {"body": "tomdale would love feedback implement", "d": "12/2013"}, {"body": "wagenet yep sure wood", "d": "12/2013"}, {"body": "like drilled brain much usage however would suggest naming since understand correctly would mostly used async callbacks third parties essentially taking care run loop issues context binding developer decides make callback return thenables could allow nice chaining syntax sugar syncs runloop maintains context removes wrapping anon func closure boilerplate mmm mmm delicious", "d": "12/2013"}, {"body": "stuff another idea js popout emrsvpmethod function thisget foo false throw new error something went wrong return thefilfullmentvalue third idea js var bro value increment function amount thisvalue amount rsvpresolve bind bro broincrement", "d": "12/2013"}, {"body": "stefanpenner last one would cool", "d": "12/2013"}, {"body": "closing favor pr", "d": "12/2013"}, {"body": "tchak ya want drive idea oo promise usage examples specifically utilizing promises state machine async interactions otherwise feel like jumping interim solution", "d": "12/2013"}, {"body": "nt totally follow jsbin see one still demonstrating behavior", "d": "12/2013"}, {"body": "somehow related", "d": "12/2013"}, {"body": "would good architecture clear interface isolates jquery usage", "d": "12/2013"}, {"body": "seems nt difficult inside ember sure option would big plus project could convince people jump", "d": "12/2013"}, {"body": "thinking maybe zepto could work since dom part similar jquery also default option looks like jqlite", "d": "12/2013"}, {"body": "seems would remove another external dependency leaving handlebars external dep swapping jquery zepto seems like lateral move", "d": "12/2013"}, {"body": "even better dependency case ember still needs something like jquery decides make jquery optional swappable compatible api zepto others could", "d": "12/2013"}, {"body": "already planned roadmap eliminate jquery dependency move htmlbars interaction emberjs dom gets smaller probably treat jquery optional dependency use available via globals amd module", "d": "12/2013"}, {"body": "think right good approach sure need wait htmlbars", "d": "12/2013"}, {"body": "right require jquery significant inconsistencies browser html handling htmlbars html parsing within ember means wo nt issue anymore likely remove jquery want something lightweight recommend jquery", "d": "12/2013"}, {"body": "would good though even clear boundary currently jquery kinda api rely", "d": "12/2013"}, {"body": "stefanpenner would like take stab could document modules used limited test suite could make sure regress reduce requirements even", "d": "12/2013"}, {"body": "sounds good good place", "d": "12/2013"}, {"body": "cc teddyzeenny", "d": "12/2013"}, {"body": "schartier seems like code line executed time missing using polyfills", "d": "12/2013"}, {"body": "planning rewrite bunch code resolve issues", "d": "12/2013"}, {"body": "wagenet lt", "d": "12/2013"}, {"body": "thenable returned wrap base new async frames runloops downstream thenables using rsvp correctly runloop wrapped addition adding helper another path would expand rsvp promise api change binding exist today unsure", "d": "12/2013"}, {"body": "please note though would work returned promises promises fulfill actions complete", "d": "12/2013"}, {"body": "thanks functions return get resolved end animation complete callback obviously based input would need resolve within probably going wrong way look using rsvp style rather jquery deferred let know findings guess suggestion along lines thenable actual invoking run delayed wrapped function allowing less boilerplate like invoke helper comes chaining promises let check rsvp sure already taken care use correctly", "d": "12/2013"}, {"body": "ilovett would suggest using promises enforce async step ember friendly must wrap handlers runloops instead use rsvp sync step comes runloop need wrap source async step animation callback ajax request callback runloop additionally error handling composing semantics easily reasoned", "d": "12/2013"}, {"body": "thanks stefanpenner", "d": "12/2013"}, {"body": "ilovett wrap single source true async runloop wont need intermediate loops problem go away also detecting thenables becoming async would breaking change counter purpose like idea returning promise opposed exploring theme", "d": "12/2013"}, {"body": "looked looks like could easily take optional argument binding context nice forced provide first argument resolver function know talk back redoing whole promise still progress implemented already using", "d": "12/2013"}, {"body": "third argument promiselabel language gt polifilled feature solves another idea js popout emrsvpmethod function thisget foo false throw new error something went wrong return thefilfullmentvalue third idea js var bro value increment function thisvalue rsvpresolve bind bro broincrement", "d": "12/2013"}, {"body": "believe addressed", "d": "12/2013"}, {"body": "ilovett think issues synchronous always runloop finished line making promisereturning seems unnecessary indeed schedule runloop future returning promise little odd schedule function ala complicated fact promise resolution ember apps via rsvp happens inside runloop ember promises need runloop resolve chaining outside runloop wo nt work fairly confident another way handle usecase ilovett happy help drop jsbin somewhere", "d": "12/2013"}, {"body": "ilovett also note indeed return whatever function returns consider following example var somevalue emberrun function return coolio alert somevalue coolio returned", "d": "12/2013"}, {"body": "thanks mixonic rjackson would definitely scheduled runs syncronous think need look proper usage rsvp using popin function currently looks like popin function var new deferred based input stefanpenner would need swap ember style promising", "d": "12/2013"}, {"body": "returning promise seems like goodinteresting idea", "d": "12/2013"}, {"body": "one seems closed microproposals formed", "d": "12/2013"}, {"body": "could provide jsbin jsfiddle would help us quickly diagnose", "d": "12/2013"}, {"body": "occasionally occur picture slow loading time please hurry intend use em shortly test deleted ember suitable technique suitable use", "d": "12/2013"}, {"body": "concerned keeping example likely good idea use similar place example investigate time permits", "d": "12/2013"}, {"body": "intelligentcode honestly sure looking either definitely use jsbin jsfiddle please annotate code make clear steps take expected happen", "d": "12/2013"}, {"body": "intelligentcode please reopen issue provide us example", "d": "12/2013"}, {"body": "stackoverflow likely better venue ask help im closing issue please reopen stackoverflow tag question feel free crosslink", "d": "12/2013"}, {"body": "please erious bad real situation", "d": "12/2013"}, {"body": "think error correct docs says remove object specified index using replace primitive method pass either single index start length pass start length beyond length method throw outofrangeexception sample use array empty beyond length", "d": "12/2013"}, {"body": "nt see removing elements ca nt explicit op", "d": "12/2013"}, {"body": "nt see removing elements ca nt explicit op either faced bug tried remove items array leaving original array object used failed ampty array", "d": "12/2013"}, {"body": "btw use clear empty array existing array without recreate", "d": "12/2013"}, {"body": "closing favor pr", "d": "12/2013"}, {"body": "personally say delete altogether certainly nt current nt need something else maintain publishing builds every commit channel likely makes unneeded want current build", "d": "12/2013"}, {"body": "think deleting makes sense fact nonfunctional since september nobody noticed indicates people nt using feature", "d": "12/2013"}, {"body": "kill fire", "d": "12/2013"}, {"body": "believe embers around sunday december stefan penner wrote kill fire reply email directly view github", "d": "12/2013"}, {"body": "bfbriggs first thing notice cps nt dependent keys nt seem source problem definitely defining", "d": "12/2013"}, {"body": "way one shows make work currently", "d": "12/2013"}, {"body": "wagenet going part discussion", "d": "12/2013"}, {"body": "briefly discussed core team believe consensus fix someone want submit pr", "d": "12/2013"}, {"body": "think nt possible use outlet one template use example based fiddle get behavior using outlet outside like lt gt peeps lt gt lt href thumbs gt thumbnail view lt gt lt href gt edit view lt gt iseditorvisible peep controller lt p gt linkto peep peep peepdescription linkto lt p gt outlet give look", "d": "12/2013"}, {"body": "see two outlet scope could problem given two effectively different scopes nt see template compiler nt smart enough deal possible nest es compiler notion context stack way know move outlet outside jsfiddle example ca nt real code real code surrounding blocks different imagine nt practical way move outlet outside case", "d": "12/2013"}, {"body": "looks like duplicate", "d": "12/2013"}, {"body": "would nt surprised underlying cause manifested behavior actually opposite instead view disappearing nt case appearing nt possible different issue", "d": "12/2013"}, {"body": "closing favor pr", "d": "12/2013"}, {"body": "also confirm mastercanary", "d": "12/2013"}, {"body": "stefanpenner included canary build seems produce behavior", "d": "12/2013"}, {"body": "seems like test case work properly try dig bit see going wrong", "d": "12/2013"}, {"body": "ok tracked going call text changes fine tears observer basically currently handle single name change created failing test really change name twice existing test hopefully able submit pr resolving soonish", "d": "12/2013"}, {"body": "submitted pr resolving", "d": "12/2013"}, {"body": "closing favor pr", "d": "12/2013"}, {"body": "want open new window use standard tag pointing url want ember app would boot app proper location fresh history stack romanior perhaps understanding goal could elaborate preferably jsbinjsfiddle example", "d": "12/2013"}, {"body": "rjackson point good reliable linkto helper awesomely figures right href based parameters messing href active states etc manually already features", "d": "12/2013"}, {"body": "seems fine experiment featureflagged feature", "d": "12/2013"}, {"body": "seems good want submit pr romanior", "d": "12/2013"}, {"body": "known issue ember data tracker fixed future sorry", "d": "12/2013"}, {"body": "tracked cause bug binding inside template specifically rewrites binding path used templates grouped case context select view rather item view collectionview would normally created solution come right detect inside grouped conditionally use handlebars context rather parent view", "d": "12/2013"}, {"body": "maybe settle final naming conventions better discussion discourse recommend reopening try keep issue tracker specific issues", "d": "12/2013"}, {"body": "button default type hence pressing return button action invoked updated fiddle", "d": "12/2013"}, {"body": "ooh interesting explains thanks", "d": "12/2013"}, {"body": "clever workaround submit pr make sure tests still pass", "d": "12/2013"}, {"body": "able solve like applicationviewjscoffee applicationhbs applicationcontrollerjscoffee appapplicationcontroller emcontrollerextend isloading false actions loading return get isloading isloading property prevent rendering multiple times several routes nested require loading state otherwise get multiple views also empty controller necessary breaks ember inspector plugin looks controller view view nt contain controller causes exception", "d": "12/2013"}, {"body": "example u showed actually uses route controller one really render anything append anything via controller", "d": "12/2013"}, {"body": "actually opened issue website guides reside", "d": "12/2013"}, {"body": "stefanpenner done also found loading action called defined application route nt investigated", "d": "12/2013"}, {"body": "documented following guide", "d": "12/2013"}, {"body": "rjackson thanks want attach event existing element like link", "d": "12/2013"}, {"body": "sort question appropriate stackoverflow still questions please start new question", "d": "12/2013"}, {"body": "think support idea", "d": "12/2013"}, {"body": "machty need discuss", "d": "12/2013"}, {"body": "bites every time want give route semantic name", "d": "12/2013"}, {"body": "totally using route index route great idea idea property better think holding thing see want something describe index maybe segment random first last item list loaded resource something else descriptive urls case property would clearer give ability", "d": "12/2013"}, {"body": "qps getting rewrite make sure incorporate test make sure properly handled", "d": "12/2013"}, {"body": "thanks committing getting test plan keep api ie would still valid rewrite qps sent route hood", "d": "12/2013"}, {"body": "api pretty different trying post gist latest ideas going bed tonight", "d": "12/2013"}, {"body": "latest", "d": "12/2013"}, {"body": "pr new api approach slightly different pretty sure taken care", "d": "12/2013"}, {"body": "perhaps missing obvious point nt think would work plain html jsbin", "d": "12/2013"}, {"body": "think want html click toggle nav updated jsbin works like want", "d": "12/2013"}, {"body": "thanks comments bring excellent points rjackson completely right pre ember world would stopped event propagation one line jquery feels like unember thing guess mind helper something would make external links behave right box truenorth right works example gave actual app ran using background image nav element span element attach action attach top level ended working around adding action redirects using seems work great going close since working follow thoughts would love hear think would like see ember like way handle nested plain old link inside another element bound action might edge case seem surprising ember generated link plain link nt behave way", "d": "12/2013"}, {"body": "assume got something like use instance array components evaluated class defined instantiated fix instantiating array component initialized get new array instance component instance things behave expect hth", "d": "12/2013"}, {"body": "thanks lot intended behavior come nt work way strings example", "d": "12/2013"}, {"body": "geokoumpa due javascript prototypal inheritance thorough blog post wycats useful learn aspect javascript", "d": "12/2013"}, {"body": "bschaeffer interest sending pr", "d": "12/2013"}, {"body": "sure", "d": "12/2013"}, {"body": "closing favor", "d": "12/2013"}, {"body": "jlsuttles markup exactly without metamorph markers metamorph markers sure affects rendering worth investigating angle", "d": "12/2013"}, {"body": "seems something way content redrawn fixtures loaded change template use variables attached directly app object problem nt occur least example specifically think problem anchor tags nt ever width component viewed chrome devtools computed section changing css appears fix though entirely sure", "d": "12/2013"}, {"body": "hm looks like webkit bug safari chrome problems initial render firefox nt could nt find open tickets related issue getting rid element using css bold text nt really help", "d": "12/2013"}, {"body": "jlsuttles ember data bug likely related browser rendering", "d": "12/2013"}, {"body": "possible could reduce jsbin minimum amount css app code would make easier others digest may help isolate problem", "d": "12/2013"}, {"body": "think recreated issue completely separated ember using jquery insert text value anchor tags page loaded two css declarations removing either stops bug happening also happens another tag nested underneath link text inserted directly link tag works fine", "d": "12/2013"}, {"body": "duncanparkinson thanks much super helpful css forte person wrote css threw hands air able work around issue knowledge", "d": "12/2013"}, {"body": "bartjacobs replied gon na post well brain dump", "d": "12/2013"}, {"body": "first thoughts notinfact something want clearly must provide examples convince otherwise something actually detect granularity changes property", "d": "12/2013"}, {"body": "answer suggested make use run loop ensure view rendered ps think necessary add event emberview since lists often slow render wo nt work", "d": "12/2013"}, {"body": "ponderance encapsulate changes inside notified would apply view update complete since apply next cycle", "d": "12/2013"}, {"body": "stefanpenner writes bartjacobs asks generically possible individual properties template observed updated without view informed child views rerendered without parent views informed notifying way view hierarchy every updated case view hook likely negative performance connotations said understand legitimate developer ergonomics issues solution understand run loop well take advantage queue however tough topic grok right away beginning ember developers", "d": "12/2013"}, {"body": "gone comments issue seen solution stack overflow understand easy implement probably necessary indeed negatively impact rendering performance solution presented stack overflow works great lukemelia mentions thorough understanding run loop key solve problem thank help issue learning rendering queue ember run loop close issue agree stefanpenner something ember needs", "d": "12/2013"}, {"body": "bartjacobs need better way conveying ideas concept often foreign", "d": "12/2013"}, {"body": "agree currently someone proper understanding ember run loop queue architecture far know possible tackle type issues discussed stack overflow question suggestions", "d": "12/2013"}, {"body": "maybe would help show commented example scheduling afterrender queue didinsertelement api docs sent mailbox iphone tue dec bart jacobs notifications githubcom wrote agree currently someone proper understanding ember run loop queue architecture far know possible tackle type issues discussed stack overflow question suggestions reply email directly view github", "d": "12/2013"}, {"body": "lukemelia would help scenarios instance backbones gets triggered anything downstream changes", "d": "12/2013"}, {"body": "ya totally needs helpful error cc machty", "d": "12/2013"}, {"body": "even simpler version using embelmjs work expected", "d": "12/2013"}, {"body": "would mind putting jsbin together", "d": "12/2013"}, {"body": "nt think bindings support path traversal although handlebars feature unsure support bound properties", "d": "12/2013"}, {"body": "twokul yes could later stefanpenner simple solution problem make select update parent variable changes", "d": "12/2013"}, {"body": "btw use docs state using syntax change scope alternative form change scope inner template useful cases need access property outer scope within loop", "d": "12/2013"}, {"body": "itemcontroller controller pair could provide aliases itemcontroller would continue keep templates nice simple keeping responsibility controlling data flow controller", "d": "12/2013"}, {"body": "update ghetto fix discussing someone knowledgeable mentioned way prevent ember creating views etc property element goes like appgroupviewmixin emmixincreate init function thissuperapply arguments thisset templatedatainsidegroup true appgroupwrapperview emviewextend appgroupviewmixin html follows view appgroupwrapperview previewer group previewers batches view note view must outside table around ember starts really odd stuff like add rows table outside view also view specified like ember seem like block handlers look like element elements use elements fix changes rendering time chrome gt", "d": "12/2013"}, {"body": "second aproach using internal flags grouphelper recommend use grouphelper instead flags include code use give look jsbin updated code", "d": "12/2013"}, {"body": "oh nt ember give error use block helper nt registered tried group wo registering helper saw performance changes marcio helper commented thanks marcio huge help", "d": "12/2013"}, {"body": "andrewkl open block helper error message new issue", "d": "12/2013"}, {"body": "created case thanks help andrew", "d": "12/2013"}, {"body": "continuing performance tuning ie found another possible performance bug seems like used group indexof function line begins take inordinate amount time seen seems happening target method flags add end event array later point indexof called indexof starts beginning array nt find till end chrome modern ies fast enough nt mater fortunately simple fix start searching end array search reverse event system uses series nested hashes store listeners object listener registered event arrives hashes consulted determine target action pair invoke hashes stored object meta hash look like function indexof array target method var index var arraylength gt target array amp amp method array index break return index wo optimization w optimization ideal fix might replace array tree like datastructure index nt need called everytime lookup needed", "d": "12/2013"}, {"body": "skiplist", "d": "12/2013"}, {"body": "went created new issue previous issue", "d": "12/2013"}, {"body": "related discussion issue", "d": "12/2013"}, {"body": "going close issue favor feel free reopen specific suggestion", "d": "12/2013"}, {"body": "resolved", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "run first use npm package strip feature flagged code blocks final builds", "d": "12/2013"}, {"body": "packagejson stupid", "d": "12/2013"}, {"body": "nope stupid change global packages local ones happened branched need", "d": "12/2013"}, {"body": "good thanks", "d": "12/2013"}, {"body": "alexspeller may useful enhancement", "d": "12/2013"}, {"body": "see discussion case query params completely rewritten moment new implementation unlikely behave current one", "d": "12/2013"}, {"body": "ok gotya thanks pretty excited feature dec pm alex speller notifications githubcom wrote see discussion case query params completely rewritten moment new implementation unlikely behave current one reply email directly view github", "d": "12/2013"}, {"body": "think solution different query params resource yes", "d": "12/2013"}, {"body": "feels like hack say want make paging bar component simply uses linkto set page param would pretty sweet change different param resource would kinda headache dec pm alex matchneer notifications githubcom wrote think solution different query params resource yes reply email directly view github", "d": "12/2013"}, {"body": "query params global want refer different things give different names hack urls work serverside frameworks notice less one handler generally responds url however spas multiple handlers active time making paging bar component headache pass param name although params rewritten moment unlikely change fact due global nature query params name collisions must avoided", "d": "12/2013"}, {"body": "think global url scheme seen probably keep scoped resource route yea dec pm alex speller notifications githubcom wrote query params global want refer different things give different names hack urls work serverside frameworks notice less one handler generally responds url however spas multiple handlers active time making paging bar component headache pass param name pager paramname postspage although params rewritten moment unlikely change fact due global nature query params name collisions must avoided reply email directly view github", "d": "12/2013"}, {"body": "always global unless syntax changes eg using matrix uris way avoid url scheme seen perhaps thinking server side frameworks work differently ember router", "d": "12/2013"}, {"body": "davydotcom want", "d": "12/2013"}, {"body": "yea thinking server side frameworks router url scheme looks similar server syntax params could confusion point newcomers query params global yea linkto pagenewvalue would pretty sweet thats gon na happen via custom component page whatever sure could make pageparam adjustable feels odd saying dec pm alex speller notifications githubcom wrote always global unless syntax changes eg using matrix uris way avoid url scheme seen perhaps thinking server side frameworks work differently ember router reply email directly view github", "d": "12/2013"}, {"body": "currently running problem several pages use query parameters sortingfilteringpagination using parameter simply makes perfect sense would sorting param differently named independent route describes operation agree two sorts active time also way without issue different names think problem avoidable query params addon used persist link parameters shared routes link tree instance link would merge query parameters whereas ones would discarded way could share name query parameter without issue note explicitly specify query parameter would still included course merged nt implementation probably slightly complicated certain desired behavior", "d": "12/2013"}, {"body": "new api takes different approach still issue please create new issue see", "d": "12/2013"}, {"body": "great thanks letting know take look sent iphone dec alex matchneer notifications githubcom wrote new api takes different approach still issue please create new issue see reply email directly view github", "d": "12/2013"}, {"body": "fixed included see updated jsbin", "d": "12/2013"}, {"body": "thanks update", "d": "12/2013"}, {"body": "appears simply using native function available see think always use modified version polyfill uses instead", "d": "12/2013"}, {"body": "stefanpenner current thinking", "d": "12/2013"}, {"body": "believe duplicate markprzepiora confirm issue", "d": "12/2013"}, {"body": "rjackson yes right sorry", "d": "12/2013"}, {"body": "markprzepiora worries", "d": "12/2013"}, {"body": "believe resolve", "d": "12/2013"}, {"body": "machty ping", "d": "12/2013"}, {"body": "kselden mentioned issue something like talking", "d": "12/2013"}, {"body": "hi ryrych using issues pretty much softdeprecated favour using computed aliases try instead", "d": "12/2013"}, {"body": "hi bradleypriest using bindings using suffix many places app noticed warning got tried use configuring view handlebars emblem think change bindings using alias bit longer", "d": "12/2013"}, {"body": "always top file use thereafter", "d": "12/2013"}, {"body": "closing bradleypriest suggestion nt work let know", "d": "12/2013"}, {"body": "thanks wagenet yesterday works good day", "d": "12/2013"}, {"body": "seems reasonable", "d": "12/2013"}, {"body": "sandstrom want close issue file pr", "d": "12/2013"}, {"body": "sandstrom plan tackling", "d": "12/2013"}, {"body": "wagenet rjackson filed pr sorry delay busy week", "d": "12/2013"}, {"body": "believe design choice kselden confirm teroparvinen also provide exact scenario need functionality", "d": "12/2013"}, {"body": "design choice docs least updated indicate observable properties bound rather special values best used also assertion warning trying observe might order would much rather see put proper use properties think would vastly useful scenario time need view level proxy objects svg shapes insert view bound model level object indicating details shape well knowing remove view model level object destroyed uses would include tracking relationships customized model layer controller level dependencies etc etc", "d": "12/2013"}, {"body": "teroparvinen provide jsbin something exact reduced usecase would helpful discussion", "d": "12/2013"}, {"body": "stefanpenner included two jsbins original comment first one reduced example", "d": "12/2013"}, {"body": "examples nt explain actual usecase highlevel problem trying solve low level implementation problem", "d": "12/2013"}, {"body": "issue low level irregularity performs something else docs say ultimately think convenient way monitor object destruction stands building first think feature useful whenever need software design pattern adapter facade proxy observer even iterator basic data structures linked lists trees also whole lot easier handle get convenient notification link breaking either direction one ember strengths ability use object model whole lot basic routing mechanism elaborate specific case model system implemented using ember data multiple shapes drawing canvas shapes stored model level coordinates identifiers user activates view canvas element created used drawing surface using snapsvg shapes ca nt drawn using basic ember view templates svg objects encapsulated snap ca nt simply rerendered view layer creates proxy objects tie model level shapes controller level action destroys model level shape view level proxy needs release svg resources remove would straightforward proxy could simply track existence model monitoring property", "d": "12/2013"}, {"body": "teroparvinen willdestroy method intended teardown data something like based problem maybe could help", "d": "12/2013"}, {"body": "marcioj point tear data based destruction another object appshapeproxy emberobjectextend contain reference model level shape object shapemodel null destroying proxy result example anything might happen useful aware destruction object used", "d": "12/2013"}, {"body": "teroparvinen suggest mix method send notification things watch get point actually begun destruction process observers nt really useable anyway", "d": "12/2013"}, {"body": "wagenet feel suggestion correct think actual issue would like suggest close", "d": "12/2013"}, {"body": "wagenet assume reasoning behind event property observers might day become asynchronous current workaround illustrated jsbin property requires one mixin allows trivial observation property evented solution far tell jsbin event requires lot boilerplate limited everything tied property observer issue tagged documentation assume meant indicate documentation corrected still wish argue convenient way observing destructions would nice could would probably enough", "d": "12/2013"}, {"body": "seems entirely reasonable assure goal merely bandwidth problem", "d": "12/2013"}, {"body": "bolshchikov let us know like work conversion", "d": "12/2013"}, {"body": "pr submitted convert extend", "d": "12/2013"}, {"body": "closing favor changes subclasses", "d": "12/2013"}, {"body": "turns ember data issue see emberjsdata", "d": "12/2013"}, {"body": "method example also look transitionmd document future questions better asked stackoverflow tagged emberjs", "d": "12/2013"}, {"body": "thank", "d": "12/2013"}, {"body": "stefanpenner fixed", "d": "12/2013"}, {"body": "ebryn definitely improvement imo stefanpenner could elaborate mind", "d": "12/2013"}, {"body": "breaking insanely scary purely dry method", "d": "12/2013"}, {"body": "follow wrap code trycatch template appears rendered returns result however course controller properly initialized", "d": "12/2013"}, {"body": "suspicion scenarios errorsassertions thrown async would escape normal test failures im working try resolve improve situations could use help instance reproduce failure small acceptance test submit pr add would awesome", "d": "12/2013"}, {"body": "sure happy contribute", "d": "12/2013"}, {"body": "uses tests created includes fix closing issue favor discussion pr", "d": "12/2013"}, {"body": "seems good aaronshaf submit pr", "d": "12/2013"}, {"body": "kselden yup thanks pointing key takeaway anyone reading thread future nt try modify proxy content time call event", "d": "12/2013"}, {"body": "closing favor pr", "d": "12/2013"}, {"body": "machty", "d": "12/2013"}, {"body": "hmm sure fan seems like would quite noisy types legitimately change time", "d": "12/2013"}, {"body": "closing since way", "d": "12/2013"}, {"body": "trek control even around still removed", "d": "12/2013"}, {"body": "stefanpenner master believe", "d": "12/2013"}, {"body": "yeah slated removal probably waited long", "d": "12/2013"}, {"body": "trek hmm surprising good gone", "d": "12/2013"}, {"body": "seems like straightforward addition right would use set model want submit pr selvag", "d": "12/2013"}, {"body": "looking forward change addressed routerjs refactoring machty", "d": "12/2013"}, {"body": "refactor place lot stuff going way easier reason addingit shortly", "d": "12/2013"}, {"body": "think another good scenario feature flags release could allow opting deprecation without breaking backwards compatibility see examples wagenet stefanpenner thoughts would willing run update feature flag stable idea acceptable", "d": "12/2013"}, {"body": "update spent minutes looking found jquery custom build system made easy create builds nt work complex expected figure modules necessary", "d": "12/2013"}, {"body": "run main modules build jquery without one time run test suite document failureserrors module start picking lowest hanging items one time lukemelia sound like decent plan yes devote time first pass week", "d": "12/2013"}, {"body": "seems reasonable robert sent mailbox iphone sun dec pm robert jackson notifications githubcom wrote run main modules build jquery without one time run test suite document failureserrors module start picking lowest hanging items one time lukemelia sound like decent plan yes devote time first pass week reply email directly view github", "d": "12/2013"}, {"body": "luck modern browsers using custom jquery build flags htmlbars require even less", "d": "12/2013"}, {"body": "fyi described exact problem another issue", "d": "12/2013"}, {"body": "nt think bug believe keeping reference scheduled debounce cancel inside", "d": "12/2013"}, {"body": "closing favor", "d": "12/2013"}, {"body": "machty fastresolving example index template shows correctly nested template broken example index template nt even getting shown loading template blank slow promise causing behavior example get nested template show explicitly telling render index template unfortunately wo nt help initial broken example index template never even renders screen nested template nothing connect", "d": "12/2013"}, {"body": "closing favor pr", "d": "12/2013"}, {"body": "actually run issue think bug unless missing something jsbin help would appreciated jsbin two versions functions see differences testing one cc twokul hjdivad", "d": "12/2013"}, {"body": "alexdiliberto changing nonintuitive naming something simpler grocery list nt see bug", "d": "12/2013"}, {"body": "endash woahstrange looked code difference casing properties changed mine camelcase like seems working fine fails works cc twokul hjdivad", "d": "12/2013"}, {"body": "alexdiliberto ah starting property path capital letter template treated global relative context fwiw could also template", "d": "12/2013"}, {"body": "endash thank thumbsup", "d": "12/2013"}, {"body": "capitalized considered global strikes believe actual issue although capitalized global stuff thought thoroughly", "d": "12/2013"}, {"body": "seems like expose option disable prevent default probably add well", "d": "12/2013"}, {"body": "yeah would address issue nicely providing helpers call default would make predictable interface easy explain docs", "d": "12/2013"}, {"body": "working pr", "d": "12/2013"}, {"body": "implements machty suggestion", "d": "12/2013"}, {"body": "stefanpenner renamed changed mixin semantics setter intended bridge old code nt easily moved", "d": "12/2013"}, {"body": "want use observe promise instead using setter", "d": "12/2013"}, {"body": "may want update uses injection model example", "d": "12/2013"}, {"body": "arkadiyk mind giving update try would ver appreciative", "d": "12/2013"}, {"body": "stefanpenner", "d": "12/2013"}, {"body": "case error generated uppercase global variable used condition inside template renaming variable lowercase fixed", "d": "12/2013"}, {"body": "seeing opened new issue test case", "d": "12/2013"}, {"body": "hoping land time give backburner additional love point address someone beats wont sad leave open reminder quite annoying quirk queue play order note nt ember bug rather exposing quirks browser tasklist implementations", "d": "12/2013"}, {"body": "upcoming query param api supports example see", "d": "12/2013"}, {"body": "good news wo nt problem query params rewrite finishing since hash properties scoped inside subexpression syntax coming soon handlebars example", "d": "12/2013"}, {"body": "would need scenario programmatically create views controllers want delegate property look ups parent controller", "d": "12/2013"}, {"body": "would useful well using easyform assumes controller objectproxy", "d": "12/2013"}, {"body": "default rsvp error handler implemented modifiedupdated since details implement backburners stitched stacktraces issue safe close remaining issues", "d": "12/2013"}, {"body": "issue resolved things document linked rjackson says implement emberonerror hook log errors production misleading going offer api like actually report unhandled exceptions including ones thrown inside backburner rsvp least need change documentation explain catch wo nt completely opaque users nt understand ember internals", "d": "12/2013"}, {"body": "docs updated reflect components controller parent view see", "d": "12/2013"}, {"body": "agree makes sense remove query params portion agree remaining url portion also normalized issue routerecognizer incorrectly normalizes globstar route contains trailing part actual segment contents static route dynamic route normalizing nt actually change contents route modifies presence separator also normalizing already normalized route noop static nonnormalized normalized contents still staticroute normalized normalized contents still staticroute dynamic nonnormalized normalized content normalized normalized content globstar nonnormalized normalized normalized normalized path end using globstar route assume whatever contents placed segment available unmodified hook case globstar segment followed static dynamic segments final segment globstar route followed static dynamic segments test match url url parsed globstar route last segments test match url url parsed", "d": "12/2013"}, {"body": "update ember ships sane handle prevents normally swallowed exceptions going totally unnoticed", "d": "12/2013"}, {"body": "megafixed via", "d": "12/2013"}, {"body": "issue qunit tests reproducible app error happens whenever running ca nt find root cause unfortunately eltehupkes solution nt work ember ember data update narrowed inside controller deals user keyboard input basically test waiting scheduled item run", "d": "12/2013"}, {"body": "mjallday tried setting capture stack trace items enqueued run loop navigate call stack see", "d": "12/2013"}, {"body": "said would neat could integrate ember inspector cc teddyzeenny", "d": "12/2013"}, {"body": "seems like longer issue comment misguided reference another notsorelated issue reopen seems like things still broken", "d": "12/2013"}, {"body": "update like abobwhite wenbing would like rerender application user changes display language calling appreset seems bit drastic need rerender current view", "d": "12/2013"}, {"body": "case anyone still interested solving cleaner approach gt apppromiseobjectproxy emberobjectproxyextend emberpromiseproxymixin getuser function return appuserfind user function return apppromiseobjectproxycreate promise thisgetuser property promise gets fulfilled result made available content promiseproxymixin use objectproxy makes sure forward properties defined proxy proxied content object", "d": "12/2013"}, {"body": "bindings generally softdeprecated favor using nt think likely fix", "d": "12/2013"}, {"body": "looks like changed yet current relevant docs basically child model render child model controller expect find hope helps future readers", "d": "12/2013"}, {"body": "first thought could check issue issue nt distinguish gets called basically watching observer cp call many times unwatches cp well sure solve without additional bookkeeping", "d": "12/2013"}, {"body": "since reference counting need calls balanced ok making error metawatching", "d": "12/2013"}, {"body": "kselden problem higher level example case never goes suspect would tore viewmodels nt", "d": "12/2013"}, {"body": "nt consider bug adding error message seems good like wagenet said going keep people making mistake", "d": "12/2013"}, {"body": "agree seems bad eagerly consume ghempton provide example actually producing undesired effect need add array observers content property upon initialization got kind recordarray set nt trigger data loading far imagine", "d": "12/2013"}, {"body": "kselden knows fix needs find time", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "", "d": "12/2013"}, {"body": "hate bump old thread anymore news", "d": "12/2013"}, {"body": "nathggns wycats comment still thoughts additional thoughts theory inferring syntax work syntactically obvious emberscript function offers idea could extended dependencies aligned internal branching property", "d": "12/2013"}, {"body": "possible defer dependencies without using syntax use use function similar knockout also nt need call creation time decide dependencies value irrelevant needed point called anyway", "d": "12/2013"}, {"body": "nathggns true extra complexity tracking get cp invocation supporting arbitrary branching within cp vs annotating cp dk nt created motivating situation fact motivated bandwidth would invite investigate", "d": "12/2013"}, {"body": "currently looking adding computed properties altogether angular automatic dependency tracking let know goes december stefan penner notifications githubcom wrote nathggns true extra complexity tracking get cp invocation supporting arbitrary branching within cp vs annotating cp dk nt created motivating situation fact motivated bandwidth would invite investigate reply email directly view github thanks nathaniel higgins nathggns", "d": "12/2013"}, {"body": "nathggns believe implements nice improvements reduce much duplication", "d": "12/2013"}, {"body": "rather get inline honest sent iphone dec robert jackson notifications githubcom wrote nathggns believe implements nice improvements reduce much duplication reply email directly view github", "d": "12/2013"}, {"body": "got stuck one found register custom events mouseover propagates handle parent view", "d": "12/2013"}]