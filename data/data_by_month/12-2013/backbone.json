[{"title": "url conflict collections models", "body": "default constructor collections allows define collection url options parameter var collection backbonecollection function models options options options optionsurl thisurl optionsurl optionsmodel thismodel optionsmodel optionscomparator void thiscomparator optionscomparator thisreset thisinitializeapply arguments models thisreset models extend silent true options next models defined first argument built options collection call method reset result default url computation models replaced constant url much models collection share url conflicts computation consist concatenate collection url model id url disappear models options models thisreset models extend silent true omit options url", "num": "2932", "d": "12/2013"}, {"title": "model retains collection property remove event handler", "body": "model removed collection reference collection deleted however time event called model model still reference collection removed one would expect state model event handler would remove action completed javascript var model new backbonemodel var collection new backbonecollection model modelon remove function modelhasownproperty collection expected false actual true collectionremove model see jsfiddle use case something like javascript var targetmodel backbonemodelextend ispartofcollection function return thiscollection var objectboundtomodel function var model new targetmodel modelon remove function modelispartofcollection thisactinoneway else thisactinanotherway stands would something semantically goofy like huge deal workaround still expected behavior imo looking backbonemodel remove method reason call made event triggered", "num": "2929", "d": "12/2013"}, {"title": "ajax options errors triggers", "body": "problem save save server returning error capture error treat case server returning error code use show popup asking confirmation server message user confirm send request adding request parameters given server parameters tell server request come confirm noted error handlers nt ajax options listen ajaxerror resend listen error backbone cant fork project add change allow options error use change api error model xhr options ajaxoptions think commit", "num": "2927", "d": "12/2013"}, {"title": "typeerror targetmodel undefined collectionfetch", "body": "hi busy script suddenly even rolling back get error firebug collectionfetch look code see hovering attr show json data received fetch hovering targetmodel see undefined trying figure going ca nt find model var ofusersmdl backbonemodelextend collection var ofuserscollection backbonecollectionextend", "num": "2926", "d": "12/2013"}, {"title": "problem using new version zeptojs", "body": "problem cause zeptojs called posted gist fix problem anyone nice idea", "num": "2925", "d": "12/2013"}, {"title": "e params", "body": "", "num": "2924", "d": "12/2013"}, {"title": "model id undefined returned collectionget obj", "body": "caseywebdev method defined odd behavior collection contains model id return model whenever odd edge case know believe ran production application among things means create collection length wrong backbone definition explicitly checked case related", "num": "2922", "d": "12/2013"}, {"title": "listen viewel events inside view", "body": "work javascript events click thisview onclickevent events click onclickevent", "num": "2921", "d": "12/2013"}, {"title": "collisions id cid within collection cause mayhem", "body": "used keys implicit assumption model equal model collection breaking assumption causes strange behavior case contain contain nt seem like unrealistic edge case think hash broken separate hashes behavior made explicit favor ids cids", "num": "2920", "d": "12/2013"}, {"title": "non status code catching error handler saving model", "body": "regarding document sent status respond code server however error handler nt get fired", "num": "2919", "d": "12/2013"}, {"title": "problem idattribute", "body": "hello problems new backbone version concerning new policy use idattribute use always thisid parse working correctly working changing models idattribute found strange behaviours eg model three attributes code label text idattributecode create new elements form user add three attributes try save backbone realizes put instead post set code backbone also set thisid model never new cant post use idattribute models id generated server added user form problem idattribute need composed id set thisid parse nt affect attributes nt work set responseid parse order backbone treat id attributes nt want rest nt accept attribute id used url case think last update idattribute limitations benefits", "num": "2917", "d": "12/2013"}, {"title": "view alters arguments calling initialize", "body": "view change arguments null empty object initialize called instead null breaks implementations check null var view backboneview function options thiscid uniqueid view options options lt options arguments set null extend pick options viewoptions thisensureelement thisinitializeapply arguments lt initialize called new value thisdelegateevents correct implementation ie changing arguments var view backboneview function options thiscid uniqueid view thisconfigure options lt options changed thisensureelement thisinitializeapply arguments thisdelegateevents", "num": "2915", "d": "12/2013"}, {"title": "pausing time backbonejs", "body": "", "num": "2914", "d": "12/2013"}, {"title": "security issue", "body": "updatehash function line sends unverified data web browser result browser executing malicious codexss attack", "num": "2911", "d": "12/2013"}, {"title": "tailing slashes causing redirects servers", "body": "recently raised issue ghost project around function backbone nodejs express server using plugin add tailing slash get requests give consistency urls becomes issue backbonejs creating url model nt place tailing url therefore server respond redirect client needs follow redirect adds latency system sure projects thing ghost suggest adding setting backbone set add tailing api urls suggest url function return passed another function add remove tailing slash needed want fork create working proof concept", "num": "2910", "d": "12/2013"}, {"title": "navigate longer preserves url parameters", "body": "looks like added line fragment fragmentreplace pathstripper navigate method code base relies able pass url parameters navigate reasons unrelated best coding practices switch turns new feature upgrade newer versions backbone resolved saw post backboneqs needing defined backbone parses url params fix broken navigate method", "num": "2909", "d": "12/2013"}, {"title": "break backbone collection child collection also listen events registered parent collection", "body": "want break backbone collection child collection also listen events registered parent collection example collection break children grouped specific attribute say models properties collection models properties collection ps number child collections specific dynamic created want whenever event custom predefined occurs parent collection child collection listen suitable approach", "num": "2908", "d": "12/2013"}, {"title": "update backbone", "body": "app make want update app run error console help suggest focus part backone make thank much", "num": "2907", "d": "12/2013"}, {"title": "several lines contain many characters", "body": "annotated source page github repo annoying scrollbars sure really necessary limiting max length lines makes code better reading", "num": "2904", "d": "12/2013"}, {"title": "router problems", "body": "backbone great library router weak point change query string parameters router thinks nothing changed router thinks nothing changed pushstate decides instead need reload current url without reloading page cant please help", "num": "2902", "d": "12/2013"}, {"title": "merge option collectionset working specific case", "body": "adding models collection duplicates merged collectionmodel defined method instantiates appropriate model polymorphic collections happens models added still defined objects instantiated models minimum example issue occurs collectionset line case described targetmodel method model class therefore targetmodelprototypeidattribute always undefined subsequently means already existing model never found ugly workaround instantiate list models first add target collection anyway wanted report issue thanks backbone great", "num": "2901", "d": "12/2013"}, {"body": "hi afraid enough information give advice could post working jsfiddlejsbin would bit easier also may want try irc channel mailing list sort issue", "d": "12/2013"}, {"body": "hi braddunbar ok try mailing list irc thanks", "d": "12/2013"}, {"body": "braddunbar ive search ive read articles backbone zombieghost events suggest best way prevent zombieghost think issue thanks", "d": "12/2013"}, {"body": "zombie views views longer attached dom kept memory model collection still reference usually due event handler prevent either stop using modelcollection along view sever ties might already either way fine choice depends situation", "d": "12/2013"}, {"body": "ok thanks", "d": "12/2013"}, {"body": "workaround consist delete url options method initialize initialize function models options delete modelsurl", "d": "12/2013"}, {"body": "believe fixed aka url option removed", "d": "12/2013"}, {"body": "yes collection contained model attribute model parsing method adjusted cast array json objects collection models used url option collection compute url one owning model sorry inconvenience modify code", "d": "12/2013"}, {"body": "inconsistency related state collection stable event called mutating events example would better iterate twice second time event triggering really sure better", "d": "12/2013"}, {"body": "called event event wo nt triggered collection also change sure continue work caseywebdev points comments perhaps unexpected behavior around patch assumed", "d": "12/2013"}, {"body": "hi josejamart xhr object attached passed handler able get whatever need", "d": "12/2013"}, {"body": "thank braddunbar quick response know say nt able resend request xhr object consult object send try modify url request resend nt work need optionsurl restroot rest result backboneajax options try xhr request ajax nt keep headers post data request configurations", "d": "12/2013"}, {"body": "hmm could nt save options though", "d": "12/2013"}, {"body": "yes option logic collection models iterate models saves save server could response error confirmation response error continue saves confirmation show popup user user decision resend request continue others lines error callback afraid state vars call recursively comment try see work", "d": "12/2013"}, {"body": "looking see firebug row backbonejs file var collection backbonecollection function models options models filled json object firebug also shows content options object see url set however model though set collection model", "d": "12/2013"}, {"body": "since thismodel guessing model nt yet available collection created thus ca nt really tell without looking runnable code though provide jsfiddlejsbinetc glad take look", "d": "12/2013"}, {"body": "hey brad added behind row backbonejs indeed works already tried create fiddle however could nt quite get api use working might need say using requirejs load model view collection router looks like gotousers function see well loading scripts require model loaded first create new ofusersmodel case run collectionfetch first time using collections jsfiddle quite new well please let know need anything else thanks help advance edit tried send model fetch like ofuserscollectionfetch model ofusersmdl nt help either also tried ofusersmdl new ofusersmdl ofusersmdl ofusersview new ofusersview ofuserscollection new ofuserscollection however results even timeout seconds wo nt fix problem trying everything see starts working require modelsusers viewsusersview viewsmenuview collectionsusercollection function usersmdl usersview menuview userscollection maybe issue collection might model mean could model although created seen correct type ca nt passed collection consolelog model like require modelsusers viewsusersview viewsmenuview collectionsusercollection function usersmdl usersview menuview userscollection returns function", "d": "12/2013"}, {"body": "see looks like probably requiring model collection module means collection may load model thus get undefined property give shot", "d": "12/2013"}, {"body": "say something like var var userscollection backbonecollectionextend", "d": "12/2013"}, {"body": "sure exactly work code error receiving due missing property", "d": "12/2013"}, {"body": "rebuild script since timeout seconds nt even work model loaded seconds even collection created", "d": "12/2013"}, {"body": "seems like bug zepto fix thread work backbone tends avoid specific fixes dropin replacement libraries like zepto lodash preferring libraries responsible maintaining compatibility reference apis backbone using jquery incorrectly let know reopen inclined think stay zepto", "d": "12/2013"}, {"body": "yap zepto fixed problem sorry trouble", "d": "12/2013"}, {"body": "worries glad solved issue tue dec pm hiraki satoru notifications githubcomwrote yap zepto fixed problem madrobbyzepto sorry trouble reply email directly view github", "d": "12/2013"}, {"body": "also either definition problematic model id like object object know bizarre id nt see backbone impose restrictions id strings beyond uniqueness especially concerned however", "d": "12/2013"}, {"body": "unless type check weird ids like problematic change trivial see struggling justify perf hit seems like kink app design diff diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs get model set id get function obj obj null return void return thisbyid obj thisbyid objid thisbyid objcid isstring obj isnumber obj return thisbyid obj thisbycid obj return thisbyid objid thisbycid objcid thislength thismodels thisbyid thisbycid thisbyid modelcid model thisbycid modelcid model modelid null thisbyid modelid model modelcollection modelcollection modelon thisonmodelevent internal method sever model ties collection removereference function model options delete thisbyid modelid delete thisbyid modelcid delete thisbycid modelcid modelcollection delete modelcollection modeloff thisonmodelevent", "d": "12/2013"}, {"body": "appreciate edge case likely points design problem bug however nt think add confusion case avoid pulled slight variation caseywebdev approach", "d": "12/2013"}, {"body": "try mailing list stack overflow questions like", "d": "12/2013"}, {"body": "possible wo nt tell", "d": "12/2013"}, {"body": "code looks correct without background impossible tell wrong regardless github issues issues backbone inappropriate use personal help desk try mailing list stack overflow", "d": "12/2013"}, {"body": "hey usver backbone issues nt help forum location report bugs pointed stack overflow mailing list example", "d": "12/2013"}, {"body": "freenode irc documentcloud even", "d": "12/2013"}, {"body": "find issue google actually asked question irc documentcloud realy quiet place ps got code working created jsfidle actual app working", "d": "12/2013"}, {"body": "glad got straightened sorry typically try irc channel exactly types questions sign need help", "d": "12/2013"}, {"body": "hi trevorburnham come across case needed use id ids commonly integers uuids hashes experience none likely collide without use case inclined favor niceness consolidated api", "d": "12/2013"}, {"body": "work application users allowed set id certain objects urlsafe string allows restful apis get say citiesvenice instead nt think particularly unusual use backbone dec brad dunbar notifications githubcom wrote hi trevorburnham come across case needed use c id ids commonly integers uuids hashes experience none likely collide without use case inclined favor niceness consolidated api reply email directly view github", "d": "12/2013"}, {"body": "really arbitrary using unique keys etc instead url though completely awesome github everywhere let every resource assigned incrementally database", "d": "12/2013"}, {"body": "trouble working api nt expose database id slug would nt make sense anything slug think reasonable ask anything backbone design would make using slug potentially conflicts obviously wrong nt think believe potential collisions bug", "d": "12/2013"}, {"body": "restrictions user enter id could potentially mix version uniqueid backbone uses generated ensures collisions happen", "d": "12/2013"}, {"body": "restriction slug must urlsafe could avoid collisions using slug would also mean using would override use slug attribute would override well since rely heavily would losing sizable chunk backbone outofthebox functionality", "d": "12/2013"}, {"body": "like note precedent concerned models id surely concerned models id well", "d": "12/2013"}, {"body": "related", "d": "12/2013"}, {"body": "caseywebdev said using anything meaning id regardless api likely cause problems seems case could use nonurlsafe strings cids would think would better override modelurl collectionget suggested implement collectiongetbyslug", "d": "12/2013"}, {"body": "yup overriding trivial already act flexible", "d": "12/2013"}, {"body": "would think would better override modelurl collectionget suggested implement collectiongetbyslug given want maintain efficiency hash lookups overriding implementing separate would mean creating hash collection init listening collection events keep hash updated nontrivial amount work support seems straightforward use backbone natural one using datastore redis generate integer id saving object wontfix due overhead maintaining two hashes perhaps could least make possible override way cids generated replacing line something either defers publicfacing method eg least uses publicfacing prefix eg", "d": "12/2013"}, {"body": "hello agree trevorburnham think id cid two different concepts nt treat way think id real identifier wo nt change independently object stored cid temporary identifier used id present object id importance cid id nt conditioned cid agree better way divide two different hash least give possibility override way cids generated think patch", "d": "12/2013"}, {"body": "originally ids cids split two hashes combined getbycid removed great majority cases simplification worked quite well worth note case actually three way semantic collision causing problem slug id cid getting flattened explicitly implicitly single hash tough call real use cases point ids form c think added api complexity hard justify easy enough seem inappropriate problematic override underscore necessary", "d": "12/2013"}, {"body": "longer usergenerated string perhaps consider adding fast lookups attributes core easy obvious alternative see proposed implementation", "d": "12/2013"}, {"body": "status code docs refers status code nt code generally considered success codes want trigger error", "d": "12/2013"}, {"body": "create short jsfiddle demonstrating issue hard time picturing describing", "d": "12/2013"}, {"body": "model three attributes code label text idattributecode create new elements form user add three attributes try save backbone realizes put instead post set code backbone also set thisid model never new cant post use idattribute models id generated server added user form part least seems correct generating ids client side need redefine purposes right", "d": "12/2013"}, {"body": "hello going try create jsfiddle case order clarify problems sample first question think thisid attribute represents real identifier object initialized attribute combination attributes server shouldt synchronized attribute keep synchronized lost possibility create identifiers form client side cant post calls see sample ca nt change identifier object change set synchronized try request call send new id url body instead old id url new one body think strange case common legacy servers summary think thisid synchronized fetch moment initialize data object thisid keep immovable", "d": "12/2013"}, {"body": "hello braddunbar yes chage solve first problem post benefits keep synchronized thisid atribute giving value", "d": "12/2013"}, {"body": "experience time id changes creating new model would main benefit", "d": "12/2013"}, {"body": "correct views longer attach options instance default empty object relevant discussion contains patch like old behavior always add back constructor", "d": "12/2013"}, {"body": "braddunbar nt think quite issue though called rather solution would rather modifying arguments think make sense", "d": "12/2013"}, {"body": "tgriesser exactly right", "d": "12/2013"}, {"body": "ah completely misread sorry lkochub thanks help tgriesser", "d": "12/2013"}, {"body": "sure problem break code since checking null made nice debugging session", "d": "12/2013"}, {"body": "addressed look", "d": "12/2013"}, {"body": "looks good like making calls extend pick null ie better extend pick options viewoptions", "d": "12/2013"}, {"body": "would ever need pass view", "d": "12/2013"}, {"body": "could see calling may may rather needing use", "d": "12/2013"}, {"body": "would nt better test seems uneccessary", "d": "12/2013"}, {"body": "complex scenarios backbone used foundation another framework general participants behindthecurtains proxy inheritance invocation chain must change input parameters supplied user ie user issued new view null initialize must called null", "d": "12/2013"}, {"body": "number places throughout backbone code count least dozen mutate argument changing behavior view would mean changing model collection router plus methods mutate args well still nt see strong use case default empty object", "d": "12/2013"}, {"body": "huh thought model collection router nt change argument reason make change seem inconsistent certainly agree fairly edge pretty easily fixable either way", "d": "12/2013"}, {"body": "leaving aside philosophical argument happy beers specific change view behavior introduced see original description clearly inconsistent implementation", "d": "12/2013"}, {"body": "consider options guard pretty important feature becomes tedious boilerplate check options every subclass view making change piss lot folks start seeing upgrade lkochub nt think view contract passing arguments unchanged seems fixed bug existed really need able override javascript var myview backboneviewextend constructor function opts thisopts opts backboneviewapply arguments initialize function opts consolelog opts thisopts false", "d": "12/2013"}, {"body": "think fact models collections thing reason enough close one thanks", "d": "12/2013"}, {"body": "understand argument default options object eliminate tedious subclasses default empty object created options object supplied ie new view ie undefined inside view null hand valid value thus preserved consider future releases right understand desire keep behavior consistent views models collections fix thanks", "d": "12/2013"}, {"body": "hi desaxena afraid need bit information assistance", "d": "12/2013"}, {"body": "hi khurramlone please see attack vector describe valid one backbone prevent", "d": "12/2013"}, {"body": "hi since could issue either way redirect slash slash vice versa inclined say tweak taste want trailing slash model urls use following", "d": "12/2013"}, {"body": "understand go either say think setting backbone set either way instead every project wants tailing slashes mode backbone especially lite code changes", "d": "12/2013"}, {"body": "braddunbar thanks awesome quick response", "d": "12/2013"}, {"body": "reason think added many people probably would nt notice redirect happening system adding backbone would raise issue give people better performance", "d": "12/2013"}, {"body": "sure thing nt think add option though need quite options added one every conceivable difference applications think much nicer allow extensionmodification standard idioms eg overriding method options", "d": "12/2013"}, {"body": "ok take back guys ghost", "d": "12/2013"}, {"body": "thanks much please let know turns", "d": "12/2013"}, {"body": "hi jephroni already discussed check see solves issue", "d": "12/2013"}, {"body": "see fixes routernavigate method still working suggesting level breakage expect backbone refactoring massive move reliable library wait see ticket reopen answer given thank joel ephroni senior frontend developer fedmobile cell brad dunbar notifications githubcom replyto jashkenasbackbone reply replygithubcom date tuesday december pm jashkenasbackbone backbone noreplygithubcom cc joel ephroni joelephroni overstockcom subject backbone navigate longer preserves url parameters hi jephroni already discussed check see solves issue reply email directly view github confidentiality notice message intended use review individual entity addressed may contain information privileged confidential reader message intended recipient employee agent responsible delivering message solely intended recipient hereby notified dissemination distribution copying communication strictly prohibited received communication error please notify sender immediately telephone return email thank", "d": "12/2013"}, {"body": "apologies offended nt mean imply anything backbone general issue already discussed think read discussion try code much better informed whether works think issue describing fixed though certain mean", "d": "12/2013"}, {"body": "clear attempt fix breakage describing", "d": "12/2013"}, {"body": "brad thanks clarifying read seemed using solution would involve tracking places code rely navigate navigate actual url given refactor differently relatively time consuming thing feel misunderstood solution joel ephroni senior frontend developer fedmobile cell cid brad dunbar notifications githubcom replyto jashkenasbackbone reply replygithubcom date tuesday december pm jashkenasbackbone backbone noreplygithubcom cc joel ephroni joelephroni overstockcom subject backbone navigate longer preserves url parameters clear attempt fix breakage describing reply email directly view github confidentiality notice message intended use review individual entity addressed may contain information privileged confidential reader message intended recipient employee agent responsible delivering message solely intended recipient hereby notified dissemination distribution copying communication strictly prohibited received communication error please notify sender immediately telephone return email thank", "d": "12/2013"}, {"body": "nt think would change calls maybe could provide example call try code", "d": "12/2013"}, {"body": "please use stackoverflow mailing list irc channel questions like", "d": "12/2013"}, {"body": "please refer search keyword detail refer change log", "d": "12/2013"}, {"body": "thanks appleboy", "d": "12/2013"}, {"body": "thanks appleboy", "d": "12/2013"}, {"body": "fixed", "d": "12/2013"}, {"body": "hi misterjt active discussion check mean clicking link url current page use case", "d": "12/2013"}, {"body": "thank dont mean clicking navigation carried method mean call method url current useful situation content depends session option changes websocket request aftet session option changed need reload page current url", "d": "12/2013"}, {"body": "correct calling identical fragment effect good thing means call without worrying many times however work around calling need give shot let know nt work", "d": "12/2013"}, {"body": "think good thing somebody call repeatedly means need unnecessarily bad programmer wrote bad architecture application means got ta change something architecture make world better turns helped programmers curves hands created obstacle normal programmers found solution problem every call bad workaround", "d": "12/2013"}, {"body": "look think also fixed master branch", "d": "12/2013"}, {"body": "thanks tried master branch indeed fixed sorry redundant issue", "d": "12/2013"}, {"body": "hi backbone designed let swap persistence layer overriding check popular localstorage plugin search yields promising options jquerycookie dep", "d": "12/2013"}, {"body": "mponizil right great place start", "d": "12/2013"}, {"body": "use bind underscore collection debugged code lose prototype model moment use bindall initialize method", "d": "12/2013"}, {"body": "ran bug production application upgrading hope see release soon", "d": "12/2013"}, {"body": "make bindall size project number bindall try delete bindall step step almost imposible change time code hope help", "d": "12/2013"}, {"body": "hi using backbone magic method right migrating custom library using jquery element would perfect prevent memory leak workaround best david", "d": "12/2013"}, {"body": "sorry reviving pretty old issue ran today pretty painful way since change events designed nestable successive changes made handling change accumulate exception change event handler causes change never finish trouble cause spooky effects road rely work case need treat changes coming server differently local changes use handler sync event since earlier exception change event caused change get stuck unfinished state always accumulates new properties looks like server sent back changes actually nt took quite figure happening even exception change handler related weird problems sync saved least solid half day work backbone caught exceptions change handlers case definitely understand exceptions valuable tool informing issues occurring prefer catching time exactly reason however backbone caught logged exceptions maybe emitted event could still alerted occurring without experiencing spooky hardtoexplain behavior much later completely disconnected point time", "d": "12/2013"}, {"body": "actually guess clarify much concerned successive events borked exception rather object event triggered left badunfinished state actually something somewhat special events opposed events general maybe another solution instead trycatch would use ensure model state eventually gets cleaned change events real trouble get stuck set file separate issue", "d": "12/2013"}, {"body": "file separate issue think working expected exceptions within change handlers stopping world breaking app want catch clean feel free made change many many folks would much harder time reliably developing applications", "d": "12/2013"}, {"body": "well trying say would able debug manage issue dramatically faster caught trouble js browsers exception nt really stop world like many environments code given event loop might stop leaves something bad state side effects might happen far later road largely unrelated part app seconds minutes later extraordinarily hard connect two issues really asking errors event handlers caught totally ok handlers fail fire etc asking models get stuck irreparably bad state nonobvious causes side effects later", "d": "12/2013"}, {"body": "suggesting settimeout something like lines javascript var self settimeout function selfpending false selfchanging false trigger relevant attribute changes silent changeslength thispending options var l changeslength lt l thistrigger change changes current changes options imperfect slight amount time previously queued events could run model still bad state big improvement current situation without changing semantics events catching exceptions", "d": "12/2013"}, {"body": "would nt correct fix figure throwing exception fix code rather hack settimeout", "d": "12/2013"}, {"body": "tgriesser issue trying address though situation text editing app someone reports bug text disappearing type intermittent extremely hard reproduce someone else reports exception happening count characters easy reproduce issues nt appear obviously connected way users reported issue nt make mention notice issue fix since obvious easy try reproduce fix since intermittent first place idea fixing fixed spend hours trying address problem think ways could occurring actually happened exception handler left model bad state opened possibility later race condition sometimes occurs sometimes desire spooky hardtoidentify side effects mask suppress errors totally agree errors obvious stop world know fix problem exception js nt exit program indication reason would assume later changes model exception thrown would report bad change information", "d": "12/2013"}, {"body": "alternatively since know way method defined never true end turn event loop could install settimeout instead repairing model state throws exception ultimately program errors errors person writing program case saying would really nice help nt necessarily mean swallowing errors", "d": "12/2013"}, {"body": "using sort error reporting mechanism help trace edge cases users", "d": "12/2013"}, {"body": "systems case airbrake nt provide information usersession triggered error", "d": "12/2013"}, {"body": "side though often turned airbrake also logs errors people generate open console poke things turned surpisingly often", "d": "12/2013"}, {"body": "reason nt use try finally block execute final cleanup code make certain nt get invalid state still let exceptions", "d": "12/2013"}, {"body": "worth nt think server side question tried something like printing params delete request problem sending params like expect passed along jquery advice read looking send extra params backbone destroy model says gets passed serialized nt dug source find instead send information hoping", "d": "12/2013"}]