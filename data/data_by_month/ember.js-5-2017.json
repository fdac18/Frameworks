[{"title": "api document", "body": "methods emberrouter api document", "num": "15309", "d": "5/2017"}, {"title": "ember crashes encountering unexpected query param type", "body": "controller tries deserialize array based query param fail query param properly stringified causing ember completely crash occur user tries edit query param directly may better gracefully handle cases like keep app alive since simple refresh fix issue change url field", "num": "15306", "d": "5/2017"}, {"title": "eachin handle maps", "body": "came situation wanted iterate keys object guaranteed order objects per spec nt guarantee key ordering practice small objects engines tho turns support guarantee key insertion ordering feature interested", "num": "15304", "d": "5/2017"}, {"title": "ember assertions result object computeds running object init service injections appear idemponent", "body": "ok bit strange one ill best explain goes known ember runs assertions attempting set property object example assertion whether object property set destroyed making assertions ember eagerly call tostring method said object order prepare informative message assertion fail possible ember object may call computed property inside tostring method situations lead unexpected behaviour however come across scenario leads objects computed property getting computed init method chance run leading erroneous unexpected behaviour scenario follows custom object non ember data model registered container calls one computeds tostring method custom object uses emberinjectservice store access store unknowingly redundant initializer injection runs work injects store property figured would idempotent factory object looked using factoryfor container instance created result redundant initializer leads ember calling emberset providing store leads assertion checks whether object destroyed turn leads eager calling objects tostring method calls one objects computeds init method run particular case computed needed property set init computing erroneous value anything scenario raises question whether considered safe eagerly call methods ember object known init method executed especially true case method called eagerly case assertion fails would expect redundant injection would idempotent case appear unintended side effects please see attached twiddle failing acceptance test demonstrating scenario describing happy write submit actual failing test wanted get feedback twiddle proceeding thank taking time look", "num": "15299", "d": "5/2017"}, {"title": "super lost async operations", "body": "method points wrong method async operation instance assuming super exists route following return two different super methods async beforemodel consolelog await super thissupername await loadaccess consolelog await super thissupername longer version demonstrates issue using promises twiddle cause cause proxied version class instance instance thus scoped instance context rather execution context example bound function assumes function called make asynchronous calls workaround workaround save method beginning method plans use asynchronous code use saved method async beforemodel let super await loadaccess supercall arguments solution cleanest approach would use proxy object wrap original provide overridden method calls correct super method pass function wrapper essentially creating execution context method call however proxy yet seem supported internet explorer depending browsers ember supporting may feasible unfortunately nt see another way handles edge cases might another case documenting issue providing workaround enough browsers support proxy implement full solution progressive solution could used tests proxy uses exists falls back old implementation though makes application behave different different platforms makes issue even harder debug happens", "num": "15291", "d": "5/2017"}, {"title": "runindebug may leaking highiteration helpers used", "body": "running component template pair nested blocks volumes respectively resulting iterations quite helpers markup helpers called lot example helper invoked times per iteration times run development mode leaving route returning takes longer longer linearly time slowly building etc seem matter helpers use using custom helpers btw occurs even remove helpers except two helpers even remove html helpers looping nothing else within using chrome profiler reveals culprit call stack starts drills etc production issue makes sense runindebug nop profile note code emberdebugjs vendorjs seems ember code tried debug paygrade wrt ember blush", "num": "15290", "d": "5/2017"}, {"title": "feature queryparams allow associative array parameter", "body": "got associative array would like able would result additionnaly must would able update element eg would result would result currently setting result mind result", "num": "15286", "d": "5/2017"}, {"title": "add assertion called frameworkobject", "body": "likely start deprecation swapped assertion reason always called always ensure called code supering", "num": "15281", "d": "5/2017"}, {"title": "document fix issue computed properties model updating template", "body": "bug exists computed properties nt update template returning hook route update fine accessed properties controller worse depending computed property calculated template sometimes update making behavior inconsistent documented issue closed design creating new issue behavior counterintuitive b documented c inconsistent twiddle gives example bug property accessed via controller updates model route specifically computed properties used templates returned hook update fine computed properties return result call update fine computed properties return relationship ember data entity wo nt update computed properties fail update far tell instance works fine user computed userid function return get store findrecord user get userid model return get user fails user computed userid function return get store findrecord user get userid account computed useraccount function return get useraccount model return get account documentation updated document exactly return value update templates serious consideration taken toward fixing bug instead dismissing design behavior use computed property requires knowing property implemented breaks principle encapsulation makes slight changes computed property implemented break downstream users property unexpectedly knowing internals ember potential ways fix issue allow computed property dependencies defined computed property add special returns object template bind would get property way makes observable template updates automatically whenever value changes though special property behave like properties regards computed properties templates workaround use regular computed properties controller avoid using route altogether", "num": "15275", "d": "5/2017"}, {"title": "adding queryparams controller throws emberget exception", "body": "issue looking documentation adding query params controller upon refreshing page experience two exceptions tried route thing happens controller code route code exception version info", "num": "15274", "d": "5/2017"}, {"title": "specifying visit api setup rendering environment", "body": "currently glimmer environment renderer environment etc setup even using due injections providing every route property template instances require glimmer env renderer etc", "num": "15273", "d": "5/2017"}, {"title": "unregistering reregistering model nt clear factorycache", "body": "unit test part solution manually delete factorycache relationships previously registered model properly cleared update due bug emberdata linked issue deleting container factorycache indeed right solution basically current", "num": "15268", "d": "5/2017"}, {"title": "url encoding use encodeuricomponent", "body": "using ember question issue following route hit get browser url console hit get browser url console consolelogs correct wondering browser url symbols encoded symbols decoded nt consistent actually encode symbols expose anywhere function encoding use internally could use routes globbed dynamic segments issue strange inconsistency none documented anywhere", "num": "15266", "d": "5/2017"}, {"title": "custom elements regression", "body": "seems partially fixed get get", "num": "15258", "d": "5/2017"}, {"title": "emberdata findall works correctly query much", "body": "github repository concicesly recreates problem explanation issue following text also appears readme repo core problem basically bug appears centered around type query used load model view use works however work works work mean great question glad asked first context simple ui html model item itemname approutesindexjs define terms works work works eg happens clicking add new item button ui triggering action new item automatically rendered block page work eg happens clicking button triggering ui never updates console shows mirage posted item received valid response see screenshot block never rerendered idea fix suggestions andor pointing error ways welcome desired screenshot digital proof showing console add new item button clicked showing mirage post item ui never updated", "num": "15256", "d": "5/2017"}, {"title": "start nested transaction", "body": "upgrading see following errors suppose related back tracking issues error message makes hard work back towards cause ideas would go debugging", "num": "15255", "d": "5/2017"}, {"title": "retrying transition nt change url", "body": "working fine something like twiddle twiddle works fine production code nt try going route transfer controller click button log retry last transition production code leaves url instead changing interesting thing happens production case directly hit route refresh logged ie enter directly url press enter sure else could tell please ask need information", "num": "15251", "d": "5/2017"}, {"title": "events delegated components dom teardown gt", "body": "preamble chrome triggers synchronous events focused dom node removed dom fiddle illustrate create page attach event listener unlike bubbles programmatically focus element remove event synchronously triggered behavior present chrome neither firefox safari trigger event dom teardown firefox open issue add behavior however ember handlers component fire component element teardown tested layout teardown seems incorrect handlers component torn dispatched reproduction twiddle expected behavior given component tag element focus component removed rendering hook called actual behavior hook called render phase handler called suspect component handling event removed event dispatcher property disregarded dom teardown phase may events impacted regression though admittedly pretty weird wild manifest components focus firing final change notification triggered dom teardown parts app may longer expecting changes point example emberdata record created route called remove store presuming work aborted given record property bound value user causes transition final change notification occurs rendering record throws exception deleted record longer properties set", "num": "15250", "d": "5/2017"}, {"title": "edge weakmap issues", "body": "code like js import ember ember export default embercontrollerextend window embercomputed function return window url embercomputedreadonly windowlocationhref gives error repro debugging determined error likely kind special object edge edge weakmap implementation nt recognize real object", "num": "15249", "d": "5/2017"}, {"title": "emberobject ownerinjection jsonstringified", "body": "hi ran issue offirgolanembercpvalidations introducing project creating results provided ember twiddle demonstrates behavior default ember data function calls overrode function app ignore property nt know addressing circular reference makes sense context entire instance would appear stringified representation perhaps ember data correct repo report case please let know close favor issue ember data repo thanks", "num": "15248", "d": "5/2017"}, {"title": "unexpected observer running init", "body": "js import ember ember function alert function alert export default embercontrollerextend emberon init emberobserver emberobserver runs twice run expected would expect run without runs adding observer causes run twice init observer keys left nt affect test also change works expected", "num": "15246", "d": "5/2017"}, {"title": "support minlength attribute input helper", "body": "currently ember nt support attributes nt appear list verified nt work however already", "num": "15243", "d": "5/2017"}, {"title": "possible documentation issues containerfactoryfor applicationinstancelookup", "body": "hello containerfactoryfor description states consumer factory responsible destruction factory instances bit unclear initially read need destroy instance factory believe interpret destroy instances created factory makes perfectly sense could experience ambiguity native english speaker think good thing remind developers need destroy manually created objects suggest add similar remark description applicationinstancelookup instances looked option singleton false need destroyed manually", "num": "15241", "d": "5/2017"}, {"title": "loading route always entered using asyncawait", "body": "looks like application loading route loading route always entered use asyncawait method use normal promise nt look like loading route entered correct since promise resolved immediately created twiddle reproduce issue", "num": "15240", "d": "5/2017"}, {"title": "embererror error", "body": "emberdebug contain key emberdebugemberdebug called change", "num": "15237", "d": "5/2017"}, {"title": "undefined object evaluating emberdefaultdeprecateapply beta canary", "body": "started seeing travis today beta canary last successful build first time error popped", "num": "15236", "d": "5/2017"}, {"title": "router property undefined", "body": "hi upgraded app receiving following errors loading app digging error bit appears property nt defined causing error example defined also tried ember luck works fine dependencies reference thanks advance", "num": "15235", "d": "5/2017"}, {"title": "transitionto route liking model instead id", "body": "form create new account report save transition route route well good rather pass make api request hook since already saved model right try pass model directly like ember gets unhappy issue happens via controller loads template model stays route routes set twiddle", "num": "15234", "d": "5/2017"}, {"title": "update transpilation avoid closures using", "body": "cases using force babel transpilation include extra closures update babel options throw error occurs see example", "num": "15233", "d": "5/2017"}, {"title": "coreview trigger blindly expects property function named event", "body": "emberviewslibviewscoreviewjs truthy property component name event triggered method throws following error proposed solution typecheck actually function would like pr", "num": "15228", "d": "5/2017"}, {"title": "using ebercomputed set", "body": "use embercomputed set tried something like set work", "num": "15227", "d": "5/2017"}, {"title": "passing components properties works hash helper", "body": "trying use helper pass components components property yielding block noticed seems work using helper instead providing example code made reproduction twiddle twiddle passing components data quick summary twiddle proposes cases component passed another yielding component property helper yielding component directly passing component property helper passing component directly would expect four cases would render exactly meaning four would text however two cases component passed directly render instead best debug using handlebars try get idea different hash nohash instances tell component value times ca nt figure works without", "num": "15225", "d": "5/2017"}, {"title": "custom elements regression", "body": "", "num": "15221", "d": "5/2017"}, {"title": "dom attributes number literals", "body": "following mustache thrown works breaks twiddle", "num": "15217", "d": "5/2017"}, {"title": "add stack info runlater call", "body": "based conversation slack stefanpenner gmunjal test timing best way debug determine preventing world settling gmunjal update put breakpoint apptesthelperswait function seems emberrunhasscheduledtimers returning true way determine scheduling timer spenner gmunjal hmm debugged lets see remember regular tasks way gmunjal stepping hasscheduledtimers bit complicated found backburnerstimers property problem gives number spenner unsure way works tasks also include function perfect realize theory tostring function may help gmunjal think whats missing thing optionally save stack github ebrynbackburnerjs backburnerjs rewrite emberjs run loop generic microlibrary", "num": "15215", "d": "5/2017"}, {"title": "iscausedbyinitialtransition property transition either null undefined", "body": "route hook inspecting second argument determine whether first page user landed request property property method works feels like hack property return either encountered situation", "num": "15214", "d": "5/2017"}, {"title": "production builds running callback", "body": "using supposed call callback running debug build seems currently running callbacks production builds seems broken canary demo demo working properly", "num": "15212", "d": "5/2017"}, {"title": "error message precompile requires host use emberclibabel despite installed", "body": "hi tried upgrade large project get error emberclihtmlbarsinlineprecompile requires host use emberclibabel use emberclibabel please upgrade emberclihtmlbarsinlineprecompile general question doc issue get broccoli error like find caused core addon name specific question emberclihtmlbarsinlineprecompile installed nt work bug", "num": "15211", "d": "5/2017"}, {"title": "bug service unknown injection within applicationcontroller", "body": "ember generated new service custom applicationcontroller controller js import controller inject embercontroller import get getproperties emberobject export default controllerextend tracking inject init thissuper arguments let tracking get tracking get error", "num": "15209", "d": "5/2017"}, {"title": "ember breaks production build", "body": "breaks app production app boot shows following errors console uncaught typeerror read property registerwaiter undefined objecty runindebug anonymous anonymous anonymous anonymous followed moving back solved issue", "num": "15206", "d": "5/2017"}, {"title": "bug input checkbox value returns internet explorer", "body": "binding attribute checkbox tag controllercomponent property seems broken see minimal example code template controller inputvalue actions getcheckboxvalue let value documentqueryselector input typecheckbox value value alert value value", "num": "15203", "d": "5/2017"}, {"title": "bugregression injecting autogenerated controllers nt work acceptance tests", "body": "reproduction clone run tests expected error attempting inject unknown injection controller application apparently happens tests normal execution works also works instead injecting autogenerated controller create empty application controller works fails canary cc rwjblue discussed slack", "num": "15202", "d": "5/2017"}, {"title": "ember appears indifferent closing brace computed property brace expansion", "body": "nt seem like big deal noticed comes computed properties ember seems indifferent presence closing brace brace expansion please see following twiddle demonstrates behaviour would expect modelbar modelbaz watched updated given end brace expansion missing", "num": "15201", "d": "5/2017"}, {"title": "parent route keeps calling hook visiting child routes", "body": "sure bug something understanding say following routes defined goal people send direct links edit person issue comes fact person route keeps calling function every time click link edit person happens ui goes back loading state reloaded example showing hook continuing called visiting child route bug understanding works scenario user visits people user clicks page loads info person user clicks edit link uses linkto helper visit shows edit form next display person route user share edit link", "num": "15200", "d": "5/2017"}, {"title": "embertemplatecompilerjs output incorrect", "body": "contains development builds various packages production build causes errors present production version package stripped various transpiled classes due transpiled debug build", "num": "15198", "d": "5/2017"}, {"title": "aliased actions used component templates without controller", "body": "want confirm whether feature bug based documentation end using project using action component template passed another template controller component controller performing action parent controller main concern patched future example template templatename component example", "num": "15196", "d": "5/2017"}, {"body": "mean", "d": "5/2017"}, {"body": "iterators likely add iterator support maybe something", "d": "5/2017"}, {"body": "cibernox feature interested yes fwiw think support map support anything method accepts callback stefanpenner iterators likely add iterator support maybe eachin something agreed support native iterables present", "d": "5/2017"}, {"body": "agreed support native iterables symboliterator present", "d": "5/2017"}, {"body": "thank writing detailed issue current state assertions ideal exact reason mentioned eagerly calculating messages often turns costly case cause error created remember address back forgot actually get around fixing spent time today digging submitting pr fix lands update version plugin ember build uses transpiled output output assertion become see would result message portion generated actually required", "d": "5/2017"}, {"body": "pleasure rwjblue thank quick reply taking time move fix forward safe say close issue wait fix land", "d": "5/2017"}, {"body": "landed changes upstream submitted pr updating ember use newer babel plugin version", "d": "5/2017"}, {"body": "fastfedora ya sure fixed without hefty performance penalty known limitation userland super helper transition objects super essentially exactly like workaround hood workaround recommended one recommending pain nt nearly bad clearly increased asyncawait usage pain continue grow hopefully pave road classes sooner ergonomics nt suffer also noticed", "d": "5/2017"}, {"body": "fastfedora also good sleuthing great issue writeup issue annoys crap", "d": "5/2017"}, {"body": "dliblik thanks digging would really helpful could create reproduction demo help figure going think either embertwiddle full blown embercli app would work well demo issue", "d": "5/2017"}, {"body": "yup great sleuthing reproduction dive help figure whatsup asap", "d": "5/2017"}, {"body": "ok let see put together thanks", "d": "5/2017"}, {"body": "test project update issue occurs high volume custom helpers rendered debug mode attached project simple loop repeats helper returns fixed string times flip back forth route using provided link console log show everincreasing render time time leave return route remove helper component template problem goes away", "d": "5/2017"}, {"body": "btw repro case somebody fixed already nope still", "d": "5/2017"}, {"body": "finally would really cool cause identified person found gave quick summary cause found would happily put time identified root cause could debugged insitu", "d": "5/2017"}, {"body": "seems fixed master includes large architecture refactor within glimmervm", "d": "5/2017"}, {"body": "rwjblue good know thanks test close", "d": "5/2017"}, {"body": "krisselden help able identify root issue helper invoked pass arguments arguments frozen via helpers ca nt mutate cause issues rendering engine helper nt hash arguments use shared empty object avoid allocating bunch empty objects reason roughly thing positional params passed since objects shared frozen throughout lifetime running application turns think almost certainly bug chrome refreezing object many times starts taking significantly time upon freeze attempt demo snippet shows issue js let objectfreeze objectcreate null let objectfreeze function freeze objectfreeze objectfreeze function timedfreeze consoletime freeze let lt freeze consoletimeend freeze timedfreeze timedfreeze timedfreeze timedfreeze timedfreeze demo jsbin", "d": "5/2017"}, {"body": "submitted work around", "d": "5/2017"}, {"body": "hello homersimpsons closing since emberjs bug feature requests need follow process explained thank", "d": "5/2017"}, {"body": "cc krisselden stefanpenner sanity check", "d": "5/2017"}, {"body": "rwjblue", "d": "5/2017"}, {"body": "conversation runspired suggested perhaps better required super hook seems paired thoughts", "d": "5/2017"}, {"body": "purposes destroy markphase turn stuff nt cause change events willdestroy sweep phase things may caused change events", "d": "5/2017"}, {"body": "ya makes sense good explanation reasoning behind two wondering choose required supering", "d": "5/2017"}, {"body": "feel need could convinced suppose", "d": "5/2017"}, {"body": "bug exists computed properties nt update template returning model hook route update fine accessed properties controller appear bug def area guides improved maybe help let explain whats happening maybe propose changes guide make obvious responsibility hook method route translate url query params object pass object controller general time invoked potentially changing route revisited queryparams change example returned hook navigation computed property change changes appear related url navigation queryparam change one options move queryparam makes sense sure way changes model hook rerun users hard reloads get back exact expected state others require context writing response feel stackoverflow question bug request cc emberjslearningteammanagers ideas canshould improve guidesdocs cover", "d": "5/2017"}, {"body": "disagree bug one property templates act like properties templates fact reason occurring make less bug others clearly run across issue side took two entire days debugging identify issue writing rewriting computed properties dozen different ways trying figure nt updating properly templates undoubtedly many others given figuring cause pain actual use case bit complicated actually set session thus data nt change however rely deferred loading via ember data derivative properties data properties update fine used controller included model documentation appears indicate using hook ember way passing data template route case documentation updated based comment would infer hook used loading data based query parameters otherwise use computed properties controller yet documentation makes seem issues implementing one two solutions proposed fix bug", "d": "5/2017"}, {"body": "one property model templates act like properties templates may hint misalignment regular old property property exists controller route routes function way route url queryparam change derive data destined set routes controllermodel property documentation appears indicate using model hook ember way passing data template route case documentation updated yes way convert given url data typically model case source truth appear url may right approach issues implementing one two solutions proposed fix bug data flow routes controllers serves purpose purpose ensure url page state remain insync data flow always url driven ensures reloadingbooking marking back button work consistent correctly sourceoftruth url could bypassed described would impede mentioned goals suspect least provided example may want usersession service encapsulate user session information route still populate usersession service user property initial load subsequent changes url reflecting maintained managed usersession details assuming intentions tricky sure covers cases suspect approach may yield positives outcomes still nt believe issue worst guide improvements could help changing dataflow routes controllers templates proposed would whole new feature explored via rfc process", "d": "5/2017"}, {"body": "documentation process found guides routing specifying route model find api documentation routemodel well please help us improve useful future users thank", "d": "5/2017"}, {"body": "going close issue still believe bug although issue closed continue discussion provide guidance best approaches general would recommend using stack overflow sorts questions please feel free cross link", "d": "5/2017"}, {"body": "general would recommend using stack overflow sorts questions please feel free cross link support question bug report already stated looking solution looking get bug fixed see bug please add others discussion core problem appears see bug stop looking implementation perspective look developer using ember perspective one property acts differently templates properties nonobvious inconsistent ways makes hard reason happening slight changes computed property implemented change result makes system fragile hard refactor call bug call bad design problem addressed given good reason arguing fact specifically also proposed two different ways could fixed however recognized problem talking fixes nt going help always hard simplifying code example enough explain issue without losing context like stay focus solving bug rather trying solve specific examples giving demonstrate bug bug report support question let go back another simplified example may explain bug another perspective say route supposed display list accounts logged user model directly tied url want model return list accounts currentuser service model return get currentuseraccounts computed property returns active accounts accounts computed useraccounts function let accounts get useraccounts return accounts null accountsfilterby active true undefined try access model relationship loaded yet template following two initially start value loaded direct access updated model access understand position hook route supposed called sets controller developer perspective results inconsistent nonobvious behavior rendering templates slight changes implementation change happens template look implementation computed property know happen breaks core principle encapsulation instance would update model access direct access correctly today hook always function fairly easy extend syntax allow also computed property could set controller templates update correctly one thing know certain writing hook using property extend syntax allow dependency specified dependency passed controller templates update correctly b regain encapsulation since longer need know property implemented specify using nt hard implement would nt break existing code since existing code assigns regular function key", "d": "5/2017"}, {"body": "see bug please add others discussion rwjblue paired responses gladly reach others", "d": "5/2017"}, {"body": "fastfedora empathizes frustration changing dataflow routes controllers templates proposed would whole new feature explored via rfc process rationale behind treating bug case missed long comment also mean imply idea bad good rather describe new feature need like new features go rfc process process helps understand motivations alignmentsmisalignments etc said suspect abovedescribed feature nt mean thorough exploration wo nt change minds", "d": "5/2017"}, {"body": "hello tsteuwer reproduce problem data try twiddle please send reproduction thank", "d": "5/2017"}, {"body": "delved bit deeper seems happens catchall route using params repository instructions recreate ember open console see error maybe thinking wrong way converting huge travel site ember slugs look like examplecomcountrycitystate times countrycitystate could regioncity marketingtopten something along lines need able catchall issue filtersortetc need query params handle", "d": "5/2017"}, {"body": "serabe anyone looking managed track follow post visit page passed throws emberget error changing fixes issue ca nt find world creates key first place", "d": "5/2017"}, {"body": "awesome thanks continuing dig tsteuwer reproduced error seeing twiddle tracked key object using globwildcard routes ember defined name eg name used pass wildcard value like dynamic segments value eg reason used scenario twiddle path essentially creating model param reference position solution error provide name wildcard like revision twiddle end nt bug perse method instead believe assertion much earlier evaluated tell name needed glob route path submitted address angle", "d": "5/2017"}, {"body": "tsteuwer would great could go back double check docs used determine globwildcard routes defined perhaps submit pr tweaking language make fairly subtle point bit clearly since think comments address reported issue going close please let know misdiagnosed reopen dig", "d": "5/2017"}, {"body": "solution spot rwjblue absolutely submit pr docs thanks much looking literally going ember source trying figure feel like work query params ever ticket lmao", "d": "5/2017"}, {"body": "suspect master cache needs cleared named differently", "d": "5/2017"}, {"body": "tests introduced", "d": "5/2017"}, {"body": "bekzod got cycles lend hand one", "d": "5/2017"}, {"body": "sure look", "d": "5/2017"}, {"body": "leooo version ember looking", "d": "5/2017"}, {"body": "ember amp ed", "d": "5/2017"}, {"body": "leooo tried following test ember fail might ember data issue also manually checked everything works reproduce ember ember data", "d": "5/2017"}, {"body": "bekzod ok strange leave open try create failing test next days probably ember data indeed case go ed repo suppose thanks lot checking l", "d": "5/2017"}, {"body": "bekzod stefanpenner added failing test", "d": "5/2017"}, {"body": "poking beefed ember tests around seems working well ember side going close dig ember data issue", "d": "5/2017"}, {"body": "tracking issues glimmer", "d": "5/2017"}, {"body": "awesome thank", "d": "5/2017"}, {"body": "jsbin links wrong corrected glimmer issues fixed", "d": "5/2017"}, {"body": "thank", "d": "5/2017"}, {"body": "update thought might related somehow live tried using like code ran evidenced statements shown results code action runs correctly mirage posts correctly results never show ui", "d": "5/2017"}, {"body": "seems like lot work get reactive filtered array even array filtered still rerender underlying array updated knockout even computed property returned array reran underlying observable array computed prop used pushedpoppedetc understand ember lot hood knockout evidenced ginormouse api needed jump thru hoping additional cruft pay faster smoother better easier app however far heckuva time translating know ember data model sure return array like know updates properly would better make utility store handles underlying arrays filters needed feeds embera observable arrays users needed instead using emberdata bottom line want live list realizing works great soon want apply sort clientside filtering even pass query server server side filtering loose semblance live list please please please correct missing something translating concepts head right really want ember work hard time getting things work way imagine easily right box", "d": "5/2017"}, {"body": "probably want return result model hook eg leverage computed property controller live record array get back model hook use computed property template", "d": "5/2017"}, {"body": "hmmm excellent suggestion thanks however seems transfer responsibility handling bulk filtering onto individual clients foregoes incredibly powerful query engines present backend form sql etc seems suggestion would fall face tens thousands records etc really want records seems would better server send need instead giving us records finding relevant yes filtering results nt live update records added removed therein lies crux problem seems fork road filter get live update createdelete ops let server filter live update createdelete ops way around quandary way get benefits server filtering luxury live updating list client createdelete ops note context discussion talking live updates createdelete ops talking createdelete ops happen local client sort streaming sockets anything another discussion entirely obviously", "d": "5/2017"}, {"body": "sure want subset total available records particular route loads free use model hook get need would change strategy would get live somewhere model hook example routejs model return thisstorequery modelitemname query controllerjs items embercomputed function return thisstorepeekall modelitemname filtereditems embercomputedfilterby items name test live view store update whenever new gets added", "d": "5/2017"}, {"body": "intriguing shall test suggestion great idea curious though would seem imply could one live view store eg soon query add items store would update live views yeah really clear one list ui results records model categorya another list ui results records model categoryb would seem lists would get full list model items eg would return categorya items categoryb items appears tied specific gives live view items store ever one live view store model client correct thinking correctly way get return live view may bug design decision correct thanks help way", "d": "5/2017"}, {"body": "would live query different result filter applied given scenario would think following would satisfactory items embercomputed function return thisstorepeekall modelitemnames itemscategorya embercomputedfilterby items category itemscategoryb embercomputedfilterby items category b apologies overlooked nuance nt work", "d": "5/2017"}, {"body": "ahhh see going missed apologies thinking imagining server would filtering categorya categoryb via call explicit filtering needed client side apologize realize may way line ask others handle scenario past sure situations apps entire list records larger want sent client still want new item button update ui directly rather refetching list server nt want loose sight forest trees open alternative suggestions handle type thing envision something store reference ember array result new item action trigger controller directly adds item stored ember array array course used ui apps records get snapshot list directly manage adding items list instead relying update list", "d": "5/2017"}, {"body": "would exactly described model hook could backend records categories b records asked transferred wire local set two computed properties got point time new record type added eg way computed properties refire everything uptodate", "d": "5/2017"}, {"body": "ahhhhhhh lightbulb got suggestion basically something like whatever syntax computed filter ui basically duplicating query providing live array chew bit see coming thanks help", "d": "5/2017"}, {"body": "drats really wanted work like suggested either going work theory wrong b implementation theory wrong corrections welcome see code repo linked op added following properties javascript items embercomputed function return thisget store peekall modelitemname sorteditems embercomputed items function consolelog sorteditems computed called return thisget items sortby name index hook modified ui use instead action problem console shows mirage simulating post server new items computed never reexecuted saying appears console right app boots bottom line nt appear work live array nt appear notify computed new items never recomputes appears thoughtssuggestionscorrections thanks", "d": "5/2017"}, {"body": "really close working ember arrays two special properties reference using ember array dependent key computed property example want update resort every time membership list items changes make sorteditems look like may updated something want resort happens addition item addedremoved use edit add nt use previous examples computed function sets correct observer", "d": "5/2017"}, {"body": "ahh right work said okay ask docs nt clear matter use multiple properties like yes tried syntax nt work thoughts chain computed properties", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "ahhh ha bueno blind missing something docs bad seeing", "d": "5/2017"}, {"body": "josiahbryan documented computed properties guide multiple dependents object", "d": "5/2017"}, {"body": "mentioned computed properties guide specifically section honest actually go check see worked something ever thought", "d": "5/2017"}, {"body": "either free time pr adding example brace expansion would appreciated", "d": "5/2017"}, {"body": "ahhhh thanks locks jaswilli slowly getting pieced together much appreciation patience help computed function worked expected reacted properly changes name age properties resorted accordingly thanks locks suggestion see whip something figure pr new github higherorder concepts like prs etc old dog new tricks etc", "d": "5/2017"}, {"body": "locks source ca nt seem find files similar", "d": "5/2017"}, {"body": "josiahbryan guides separate repository easiest way get started click pencil icon topright title", "d": "5/2017"}, {"body": "locks hey thanks give go nt even notice pencil bad", "d": "5/2017"}, {"body": "locks pr created realize headers proposed stylistic opinions may desired worries feel free chop drop whatever wanted ignore whole pr leisure worries either way cheers", "d": "5/2017"}, {"body": "thanks locks", "d": "5/2017"}, {"body": "thanks contribution", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "someone please explain meaning assertion type error guard usage problem fix app glimmer internal problem", "d": "5/2017"}, {"body": "encountering issue well using used unminified ember see error would awesome hear anyone advice debugging", "d": "5/2017"}, {"body": "issue slightly different symptoms occurs project embedded another site specifically wordpress run locally via ember serve directly via indexhtml issue occurs goes away ie emulation mode set earlier disabling minification seem make difference rolling back previous versions changes error output solve problem tried others briefly able reproduce error chrome locally updating packages unfortunately nt record package combo achieved speculatively seems happen ajax request returns result parsed", "d": "5/2017"}, {"body": "someone please explain meaning assertion ran red herring sorts basically error occurs render putting vm bad state results error although glimmer also needs address able recover correctly may want look errors console address example someone trying use", "d": "5/2017"}, {"body": "hypothetical fix need actually write tests confirm nt get exited yet", "d": "5/2017"}, {"body": "beta channel release channel", "d": "5/2017"}, {"body": "news issue could please guys provide workaround blocks company migration", "d": "5/2017"}, {"body": "released morning fix assertion wed may pm alexander kapelyukhovskiy lt notifications githubcom wrote news issue could please guys provide workaround blocks company migration receiving commented reply email directly view github mute thread gt jordan hawker wwwjordanhawkercom senior javascript engineer twitch", "d": "5/2017"}, {"body": "thanks forgot close", "d": "5/2017"}, {"body": "problem since release glad testing tests failing hope fixed soon", "d": "5/2017"}, {"body": "seems like could related thought affecting beta", "d": "5/2017"}, {"body": "thank workmanw yes suspected due updating yarnlock incorrectly dig confirm morning get", "d": "5/2017"}, {"body": "confirmed diff", "d": "5/2017"}, {"body": "fixed published min", "d": "5/2017"}, {"body": "fun fun see two options ensure view removed sooner registry guard based view state events received vote would", "d": "5/2017"}, {"body": "would quite cool keep components around short time schedule destroying later benefit hassle async benefit guarded event behavior events work expect browser choice benefit simplify fadeout crossfade native animations immediate teardown gc problem see rework whole application vinubiscom native animations used lf chrome major bugs since issue tracker video fullscreen broken position fixed nt work chrome going change issue translatewillchange creating new coordinate system guy misunderstood spec back two times word different contexts narrow applications dealing video andor position fixed top menus css native animation support end would big secondary effect", "d": "5/2017"}, {"body": "would quite cool keep components around short time schedule destroying later think orthogonal issue sure look liquidfire addresses solution seems handle case nicely", "d": "5/2017"}, {"body": "nt case moment framework support keeping components longer would great future applications possible solution problem liquid fire nt work well sophisticated apps works programmer ux experience past", "d": "5/2017"}, {"body": "sounds like bug edgechakra cc nolanlawson jdalton", "d": "5/2017"}, {"body": "thanks heads looks like left host object old", "d": "5/2017"}, {"body": "jdalton best us open issue track said progress", "d": "5/2017"}, {"body": "reduced example likely", "d": "5/2017"}, {"body": "let file chakra github repo see gets pushed back edge since dealing dom hosted object toss yes reduced repro sufficient throws", "d": "5/2017"}, {"body": "jdalton awesome thanks issue opened kellyselden thanks bug report nt think ember work around issue likely important fix chakraedge friends able work around creating chain nodes objects turn nonobservable anyways", "d": "5/2017"}, {"body": "nolanlawson opened us ie edge issue", "d": "5/2017"}, {"body": "version ember provide reproduction", "d": "5/2017"}, {"body": "included link ember twiddle reproduces ember version per", "d": "5/2017"}, {"body": "rwjblue thought moved owner stuff meta wip", "d": "5/2017"}, {"body": "emberobserver function return arguments observing seems missing path", "d": "5/2017"}, {"body": "observing seems missing path stefanpenner could put random key nt affect test case left conciseness see observer keys left nt affect test", "d": "5/2017"}, {"body": "mind adding failing test twiddle", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "could missing something javascript nt objects get destroyedgcd fall scope situations would need manual destruction object opposed letting go away fall scope", "d": "5/2017"}, {"body": "josiahbryan correctly point language point view real destruction javascript observers andor bindings tied object could read probably prevent object falling scope destroy method schedules destruction ember clean object get properly gced additionally isdestroyed flag set longer set property object accidentally reference object lingering try use get nice exception implies leak effective sounds personally rarely try set property object dereferenced design occasion forget actually dereference application complete rely features build framework including addons like emberdata nt think ever need call destroy manually done behind scenes however creating instances objects take life cycle consideration", "d": "5/2017"}, {"body": "likely asyncawait getting native promises nt coalesce runloop yet work address back burner repo although possible tuning required", "d": "5/2017"}, {"body": "work around replace native promise embers add initializer setting nice know works", "d": "5/2017"}, {"body": "lovetingyuan awesome thank reporting serabe maybe time look", "d": "5/2017"}, {"body": "serabe think related", "d": "5/2017"}, {"body": "bug added simple mistake moving many imports added pr fixing thank", "d": "5/2017"}, {"body": "almost certainly ember data issue", "d": "5/2017"}, {"body": "unsure lukemelia reported similar error another comment think may due recent largeish refactoring emberdebug package landed morning sometime", "d": "5/2017"}, {"body": "", "d": "5/2017"}, {"body": "reproduce addons use require configuration please provide twiddle repo reproduction thank", "d": "5/2017"}, {"body": "nt understand code going assume problem related changing names", "d": "5/2017"}, {"body": "kevlarr issue approach set path route router matters issue ember configured report route path pass model object router tries resolve property model object report present present configure path router resolve property passed model object makes smooth transition case model hook reportsreport route invoked since passing entire model object hope satisfies need", "d": "5/2017"}, {"body": "twiddle follow ember convention go like replace twiddle work expected", "d": "5/2017"}, {"body": "closing since sharavanaprasad kumkanillam given right solution thank", "d": "5/2017"}, {"body": "serabe saw responses question explicitly stated docs somewhere convention nt good word something mandatory", "d": "5/2017"}, {"body": "sharavanaprasad kumkanillam perfect thanks help nt seen anywhere using actually necessary", "d": "5/2017"}, {"body": "kevlarr written dynamic segments section guides ember follows convention two reasons first reason routes know fetch right model default follow convention second object one value associated key thank", "d": "5/2017"}, {"body": "routes know fetch right model default follow convention nt anything providing model hence confusion thanks pointing though appreciate went find resource drop get reasons", "d": "5/2017"}, {"body": "typeof method function", "d": "5/2017"}, {"body": "currently sets nonobservable datastructures may change future today working intended using set wish computed property dirtied must manually inform computed property", "d": "5/2017"}, {"body": "nt really think bug actually let explain see agree believe crux issue generally called dot rule standard curly invocation dynamic component includes period invocation example ember versions supported closure components syntax works invocation yielded component really nothing helper though however work intended reason made every invocation possible component invocation possible helper invocation local property backing js object block param make example work would need use helper", "d": "5/2017"}, {"body": "rwjblue issue reason works hash helper without design please look section rfc introduced following one understand thank", "d": "5/2017"}, {"body": "gotcha makes sense appreciate explanation rwjblue serabe hoping create parent component took property could either string component passed helper way without dot", "d": "5/2017"}, {"body": "fwiw updated twiddle show working using helper scenarios", "d": "5/2017"}, {"body": "demo", "d": "5/2017"}, {"body": "intent actually allow detect transition initial transition rather detect transition caused initial transition eg initial transition redirect second redirect transition would first would think seems better straight value though would appreciate pull request fixing note fix longer able detect initial transition may want add another flag specifically think following would trick going close believe bug happy help iterate routerjs like make pr make bit better", "d": "5/2017"}, {"body": "thought saw thought built wrong thing guess nt crazy", "d": "5/2017"}, {"body": "bisected first bad commit breakage fixed exhibits issue", "d": "5/2017"}, {"body": "issue likely one dependencies using emberclihtmlbarsinlineprecomplile assertion message added trying helpful folks actually checking babel version project babel version thing including inline precompiler working fixing though also please note issue tracker bugs ember seems like bug emberclihtmlbarsinlineprecompile open issue cross link back", "d": "5/2017"}, {"body": "assertions", "d": "5/2017"}, {"body": "bcardarella guess need import instead work", "d": "5/2017"}, {"body": "yeah coding penalties", "d": "5/2017"}, {"body": "looks like something expecting embertestregisterwaiter present even production build need info environment able help specifically need figure calling registerwaiter", "d": "5/2017"}, {"body": "hope helps environment packagejson broccoliassetrev emberajax embercli embercliappversion emberclibabel emberclidependencychecker emberclieslint emberclihtmlbars emberclihtmlbarsinlineprecompile embercliinjectlivereload embercliqunit emberclisass emberclishims emberclisri emberclistringhelpers emberclitestdouble embercliuglify embercollection embercomposablehelpers emberexportapplicationglobal emberkeyboard emberloadinitializers embermathhelpers embernewcomputed emberpaper emberperfectscroll emberpowerdatepicker emberpowerselect emberprism emberpromisehelpers emberresolver emberrouteactionhelper embersource embertruthhelpers embervelocitymixin liquidfire loaderjs phantomjsprebuilt", "d": "5/2017"}, {"body": "right next step would look addons using another thing might easier disable minification production build way could look code causing failure unminified would something like", "d": "5/2017"}, {"body": "ok found code snipped crashes startendtickresume fire end emberrunindebug function var tproto var sproto var count var wrappees sproto transition tproto transition tproto select tproto selectall tproto filter point code suppose issue moved project", "d": "5/2017"}, {"body": "relate ember close", "d": "5/2017"}, {"body": "take ember equation return", "d": "5/2017"}, {"body": "yes set attribute template return correctly also tried replicate vanilla javascript pointers instincts start looking happy take try triage little bit", "d": "5/2017"}, {"body": "confirm problem set element checked looking element inspector panel", "d": "5/2017"}, {"body": "generally speaking error seem correct think may case folks would want general needed router information eg etc tad annoying case always generate one think simplest solution would register present", "d": "5/2017"}, {"body": "believe something changed way injection works eager acceptance tests found another error test although time legit mistake importing service nt exist anymore model would pass tests never try access failed even tests nt exercise functionality regular execution tests things seem work", "d": "5/2017"}, {"body": "yes agreed enables double extend feature corrects number missing validation scenarios guess saying validations happening errors thrown actually correct however specific case make sure present validation error nt triggered since guarantee created available nt done routing booted fails assertion depending timing", "d": "5/2017"}, {"body": "rwjblue got right place warm application route", "d": "5/2017"}, {"body": "think would add something like following would also update test", "d": "5/2017"}, {"body": "trolled whilst working emberconcurrency dummy docs site strong opinions whether breaking enough fixedreverted sharing", "d": "5/2017"}, {"body": "thank fixed adding test case checking fix backported thank", "d": "5/2017"}, {"body": "thats great thank", "d": "5/2017"}, {"body": "error code misunderstanding route go child route asking go", "d": "5/2017"}, {"body": "actually found issue task update didtransition thought didtransition enter route enter child route thanks help btecu", "d": "5/2017"}, {"body": "sure understand saying try reproduce twiddle far seems normal code", "d": "5/2017"}, {"body": "looks normal issue closed merely difficulty finding documented example passing action component template using like examples found involved controller like examples could link pass actions component use without controller like short snippet posted thanks", "d": "5/2017"}, {"body": "yep called closure actions thank", "d": "5/2017"}, {"body": "many thanks link exactly looking know extract function component passed unquoted reference", "d": "5/2017"}, {"body": "also try look point today", "d": "5/2017"}, {"body": "fix", "d": "5/2017"}, {"body": "stefanpenner updated embernativedomeventdispatcher use embersource seem passing test suite recall repotest app using pull track issue coming see", "d": "5/2017"}, {"body": "believe ran issue", "d": "5/2017"}, {"body": "hello mwpastore closing since emberjs bug might interested emberjsrfcs thank", "d": "5/2017"}, {"body": "exactly looking thanks serabe", "d": "5/2017"}, {"body": "cents took forever finally end reason thought default template came expecting", "d": "5/2017"}, {"body": "summary embertypeof deprecated use native typeof pr way emberrouteactionhelper", "d": "5/2017"}, {"body": "lougreenwood ping", "d": "5/2017"}, {"body": "faced issue solve", "d": "5/2017"}, {"body": "ping", "d": "5/2017"}, {"body": "still reproduce please send reproduction shows issue twiddle small repo thank", "d": "5/2017"}, {"body": "yeah screen", "d": "5/2017"}, {"body": "came across issue attempting update addon embercli anyone found decent workaround usage", "d": "5/2017"}, {"body": "currently working emberlinkwithfollower update running across issue tests using emberclimocha", "d": "5/2017"}, {"body": "researching similar issue able narrow text problem text triggers regular expression optimization used determine whether function wrapped exists anywhere text function eg string comment actual function call triggers function wrapped since relying feature test ie whether function source retrieved falls back always wrapping function javascript engine nt support wondering impact optimization removed", "d": "5/2017"}, {"body": "fastfedora provides excellent workaround recommendation follow tricky balance getting helper working without hefty performance penalty plans transition classes super works essentially fastfedora workaround works nice ergonomics suspect unfortunate wontfix rather overtime able move away entirely", "d": "5/2017"}, {"body": "seeing", "d": "5/2017"}, {"body": "jabraok ping", "d": "5/2017"}, {"body": "serabe sorry kind old stuff close issue thanks help", "d": "5/2017"}, {"body": "stefanpenner could suggest turn permanent warning instead deprecationerror plugin authors may play game release minor releases removing hooks base classes could break actual apps could happen even migration ember", "d": "5/2017"}, {"body": "seeing issue", "d": "5/2017"}, {"body": "anyone reported mozilla yet think worked around glimmer", "d": "5/2017"}, {"body": "note firefox implementation value required attribute actually correct setting must set element value new value set element dirty value flag true invoke value sanitization algorithm", "d": "5/2017"}, {"body": "possible fix glimmer regression case ember field marked invalid trying submit form field empty martndemus validation sanitization dirty value would mean changed whereas validation kick either asking via dom api submitting form afaik", "d": "5/2017"}, {"body": "hunch could glimmer first inserts input dom sets value bound property might trigger firefox validation", "d": "5/2017"}, {"body": "crsici ping", "d": "5/2017"}, {"body": "sorry delay found emberjs issue close request", "d": "5/2017"}, {"body": "running issue today", "d": "5/2017"}, {"body": "jakeleboeuf issue upgrading fixed version edit brain almost gone deep space realized tested wrong still continuing", "d": "5/2017"}, {"body": "case anyone runs issue could possibly import controller ember import alias embercomputed export default controllerextend deployments alias model note importing incorrectly using emberclishims current project using lost hour gave came back saw clearly wrong", "d": "5/2017"}, {"body": "caught today tend ignore comments", "d": "5/2017"}, {"body": "work adding one property first indicated stack trace eliminated many error messages cascaded initial one", "d": "5/2017"}, {"body": "neilthawani may hide error nt necessarily fix problem error meant indicate setting value twice probably setting putting one delaying second set happens different runloop nt fixed core problem rendering twice need render tricked ember knowing issue renders happen separate runloops", "d": "5/2017"}, {"body": "uh oh thanks basically missed point entirely edit struggling inserted comfortable handler one data viz components toggles tooltip setting flag within allowed us debug real issue actually backtracking controller invoking data viz component tooltip component tl dr nt keep got error using helpful debugging real issue uncovered", "d": "5/2017"}, {"body": "psa anyone else upgrading improved backtracking rerender assertion error mentioned gavinjoyce actually included ember also suggested jumping straight might helpful", "d": "5/2017"}, {"body": "seen glimmer well anyone work around would great", "d": "5/2017"}, {"body": "rwjblue intrigued since getting eventually ended tried changing dummy app addon still labelled violator something wrong", "d": "5/2017"}, {"body": "ksnyde need disable events preventdefault scroll touchstart touchmove mousedown mousemove etc", "d": "5/2017"}, {"body": "also need check nt something besides ember adding", "d": "5/2017"}, {"body": "thanks krisselden message brings mousewheel event specifically red herring", "d": "5/2017"}, {"body": "also guess bigger question least whether one disable events component component basis rather app level think checking soon set would allow component manage events fyi important interactive visualizations whose events blocked normal component aka tagname", "d": "5/2017"}, {"body": "experienced ember process update ember version future reference recommend use emberclisentry found origin error even upgrade sentry subscription due amount false alarms plus one afternoonevening", "d": "5/2017"}, {"body": "bumped issue new suggestions handle", "d": "5/2017"}, {"body": "seeing error tried workarounds proposed fixes avail", "d": "5/2017"}, {"body": "also seeing error", "d": "5/2017"}, {"body": "tried event router noticed nt work whereas works expected action route missing something", "d": "5/2017"}, {"body": "also seems event router called initial startup route whereas action", "d": "5/2017"}, {"body": "urre able resolve issues problem", "d": "5/2017"}, {"body": "edit ignore jazz badwrong information locks pointed towards much better query parameter instead dynamic immediately binds query parameter normal property shadow computed property sanitizes sets previous attempts involved binding query parameter computed property sanitized set sorry noise better solution javascript approuterjs routermap function thisroute shop approutesshopjs export default emberrouteextend queryparams selecteditemindex replace true appcontrollersshopjs import computed embermacrohelperscomputed export default embercontrollerextend cart emberserviceinject queryparams selecteditemindex selecteditemindex selecteditemindex computed selecteditemindex get index const itemslength thisget cartitemslength original problem solution lost better part yesterday issue still persists use case sanitizing query parameter use index emberarray malformed eg nan string andor bounds use default index update url reflect adjustment events response future clicks trigger explain help make case merely cosmetic issue ca nt set property update url described issue ca nt set next tick using emberrun take effect late ie invalid index would already used access array ca nt set set next tick update url property change least suspect reason nt work ca nt use computed property sanitizing setter controller ca nt bind query parameter computed property ca nt use observer normal property ca nt set property observing ca nt use observer emberrun due issue described ca nt call hook due related issues ca nt set query parameter stuff happening hook repeated query parameter changes clearly nexus pain issue issue limitation able bind query parameter computed property combine create neat frustrating little trap workaround created nested select route simply takes query parameter code dynamic segment sanitizes sets property parent controller sanitized index bounds transitions nested index route turn transitions back nested select route default index nested routes templates controllers parent route outlet exist solely handle routing issue javascript approuterjs routermap function thisroute shop function thisroute index path thisroute select path index approutesshopjs export default emberrouteextend setupcontroller controller model thissuper arguments model fetch products shop appcontrollersshopjs export default embercontrollerextend cart emberserviceinject selecteditemindex actions selectitem index return thisreplaceroute shopselect index approutesshopindexjs export default emberrouteextend beforemodel return thisreplacewith shopselect approutesshopselectjs export default emberrouteextend setupcontroller index thissuper arguments model gt", "d": "5/2017"}, {"body": "rwjblue sure fixed abort case yet seeing issue ember transition route aborted model hook url reflects state application transition aborted others still experiencing behavior", "d": "5/2017"}, {"body": "rsvp also integrates ember dev tools think acceptance tests wait rsvp promises settle basically keep using rsvp ember apps", "d": "5/2017"}, {"body": "hi getting issue specified quoteless path action helper resolve action name string perhaps meant use quoted actionname eg action save", "d": "5/2017"}, {"body": "nvntiwari like error mentioned able resolve actionname call dosearch property either return functionname string function defined corresponding context think case solve using quote dosearch nt fix create embertwiddle demonstrate issue", "d": "5/2017"}, {"body": "thanks kumkanillam working", "d": "5/2017"}]