[{"title": "use two versions react amp amp time", "body": "want request feature ask question faced dilemma using two versions react time problem occurs writing large projectcontainer react within download appwidgets previously written using older version react without changing old projects put respond old version react new projects put react example webpack solution something like example renames old version new one looking reverse solution settings", "num": "11719", "d": "11/2017"}, {"title": "typeerror attempted assign readonly property nodestore", "body": "folks following fairly standard component export const alert props message string type alerttype createagainbutton object gt code raises following react error error reported located react module output fails chrome safari nt tried browsers typeerror attempted assign readonly property validatechildkeys else isvalidelement node element passed valid location nodestore nodestorevalidated true else node var iteratorfn getiteratorfn node view compiled createelementwithvalidation fixed key warnings appear validtype var lt argumentslength validatechildkeys arguments type view compiled mountindeterminatecomponent warning false lt component appears render method nt extend reactcomponent likely cause errors change extend reactcomponent instead componentname componentname reactcurrentownercurrent workinprogress value fn props context react devtools reads flag workinprogresseffecttag performedwork view compiled performunitofwork reactdebugcurrentfibersetcurrentfiber workinprogress var next beginwork current workinprogress nextrenderexpirationtime reactdebugcurrentfiberresetcurrentfiber view compiled workloop nextrenderexpirationtime lt mostrecentcurrenttime flush expired work nextunitofwork null nextunitofwork performunitofwork nextunitofwork else flush asynchronous work deadline runs time view compiled callcallback nested call would trigger fake event handlers call higher stack fakenoderemoveeventlistener evttype callcallback false funcapply context funcargs diderror false view compiled invokeguardedcallbackdev errors trigger global error handler var evt documentcreateevent event evtinitevent evttype false false fakenodedispatchevent evt diderror didseterror view compiled invokeguardedcallback param args arguments function invokeguardedcallback function name func context b c e f invokeguardedcallbackapply reacterrorutils arguments view compiled renderroot var diderror false var error null invokeguardedcallback null workloop null expirationtime hascaughterror diderror true error clearcaughterror view compiled performworkonroot rootremainingexpirationtime commitroot finishedwork else rootfinishedwork null finishedwork renderroot root expirationtime finishedwork null completed root commit rootremainingexpirationtime commitroot finishedwork view compiled performwork nextflushedroot null amp amp nextflushedexpirationtime nowork amp amp minexpirationtime nowork nextflushedexpirationtime lt minexpirationtime amp amp deadlinedidexpire performworkonroot nextflushedroot nextflushedexpirationtime find next highest priority work findhighestpriorityroot view compiled requestwork todo get rid sync use current time expirationtime sync performwork sync null else schedulecallbackwithexpiration expirationtime view compiled scheduleworkimpl var root nodestatenode checkrootneedsclearing root fiber expirationtime requestwork root expirationtime checkrootneedsclearing root fiber expirationtime else view compiled enqueuesetstate next null insertupdateintofiber fiber update schedulework fiber expirationtime enqueuereplacestate function instance state callback var fiber get instance view compiled setstate componentprototypesetstate function partialstate callback typeof partialstate object typeof partialstate function partialstate null invariant false setstate takes object state variables update function returns object state variables void thisupdaterenqueuesetstate partialstate callback setstate view compiled anonymous function thispropsdispatch actionschange track attachments filename attachmentfilename responsedata thispropsattachmentsfilter attachment gt attachmentuploading length thissetstate uploadingattachments false catch error gt thispropsdispatch actionschange error errorresponse located piece code appears cause issues unclear use alert component two places firstly component called globalerror defined appears based global state code snippet seems root issue take away boolean logic display time problem goes away see bottom stack trace setting stateuploadingattachments wonder anything obvious wrong ideas phil", "num": "11718", "d": "11/2017"}, {"title": "usage react js", "body": "hello new react js got questions react js fitable static webpage also fitable dynamic webpage without using button commen combine react js another library instance jquery context react js recommended use also different tools instance jquery angular js bootstrap etc thank", "num": "11712", "d": "11/2017"}, {"title": "evaluate prop use samevaluezero comparison shallowequal prevent double render", "body": "want request feature report bug feature bug sure current behavior shallowequal function uses samevalue comparison aka objectis evaluated inside react anyway example comparison false second call see called twice expected behavior use samevaluezero comparison react component nt render second time versions react browser os affected issue work previous versions react browsers react gt change nt affect react users evaluates breaking change react breaking change fbjs alternatively nt evaluate inside react ready file pr soon realize proper behavior", "num": "11710", "d": "11/2017"}, {"title": "react map props dom internally", "body": "hi working library proxy svg elements mutate svg element loaded noticed added prop mutate component nt map properly javascript proper syntax code working lives wondering reactdom internally consistent api library support topic greatly appreciated thanks", "num": "11706", "d": "11/2017"}, {"title": "server rendering tag attribute value", "body": "want request feature report bug bug current behavior server render html instead using react node way render rather sure browsers treat", "num": "11705", "d": "11/2017"}, {"title": "investigate flow fails windows", "body": "could nt enable windows ci also remember seeing locally windows machine need investigate fails windows works macos", "num": "11703", "d": "11/2017"}, {"title": "reactdomcreateportal support fragment", "body": "hello maybe possible add support fragment createportal method example code add wrapper buttons javascript class formbuttons extends purecomponent constructor props super props thisel documentcreateelement span thisel best solution without wrappers componentdidmount const portalselector thisprops documentgetelementbyid portalselector appendchild thisel componentwillunmount const portalselector thisprops documentgetelementbyid portalselector removechild thisel render const submit reset submitting pristine thisprops return reactdomcreateportal thisel versions react browser os affected issue work previous versions react", "num": "11701", "d": "11/2017"}, {"title": "closed", "body": "close made mistake self", "num": "11700", "d": "11/2017"}, {"title": "reactdomserverrendertostaticmarkup gets stuck trying render portals", "body": "calling gets stuck loop trying static render current behavior behavior seen uncommenting line warning make tab freeze expected behavior return results throw kind error input valid", "num": "11692", "d": "11/2017"}, {"title": "remove support tapeventplugin", "body": "libraries relied kept impossible support forever given want make changes event system deprecate injection relies remove react migration path turn userland component something like hopefully somebody using work nt actively use", "num": "11689", "d": "11/2017"}, {"title": "reactdom production builds use supported", "body": "want request feature report bug bug current behavior production builds include new set supported ie ie supported browsers reported onwards current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior production builds use features available supported browsers versions react browser os affected issue work previous versions react reactdom nt noticed problem earlier builds", "num": "11688", "d": "11/2017"}, {"title": "reactdom ability access windowevent development", "body": "imported request gaearon want request feature report bug bug current behavior development mode react uses able catch errors without interrupting normal break uncaught exceptions feature devtools current implementation event created dispatched allows error handling without block unfortunately side effect overriding unable access within guarded callbacks running react development mode production mode works fine would like access windowevent superhuman able detect dom focus user point view usually documentactiveelement cases like blur event clicking two iframes focus end different place works fine production currently work around development mode overriding maintiaining reference event production mode use windowevent current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react development production cases would expect alert say development says expected behavior would like way access windowevent development happy somewhat obscure ideally would use secret internals make work versions react browser os affected issue work previous versions react development least probably", "num": "11687", "d": "11/2017"}, {"title": "sluggish scrolling rendering table large dataset react", "body": "creating application realtime streaming data table using react number rows shown time rather large rows situations occur scrolling behavior browsers desktop amp mobile really takes hit staggers attempting browse content anybody experienced kind scrolling behavior rendering large data sets table expecting react able efficiently drawredraw elements ease nt appear case tried using jsfiddle recreate scenario much success", "num": "11686", "d": "11/2017"}, {"title": "javascript exception invalid host", "body": "using releasing app android get error upon launching app even appear crashes believe may related javascript engine mobile ideas happening note application", "num": "11685", "d": "11/2017"}, {"title": "warning tag unrecognized browser", "body": "want request feature report bug bug current behavior chrome js console see warning tag supported browser current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react jsfiddle example expected behavior warning displayed versions react browser os affected issue work previous versions react react chrome ok react", "num": "11682", "d": "11/2017"}, {"title": "warning button calling super make sure pass props component constructor passed", "body": "version use typescript write react using object oriented inheriting package components write solve type problem ts editor passed type check react pass paneltsx typescript import react react export interface ipanelprop extends reactprops width number height number export interface ipanelstate export class panel extends reactcomponent public readonly props ipanelprop null public state ipanelstate public async constructor props super props \u7ec4\u4ef6\u521a\u521a\u6302\u8f7d\u65f6 public async componentwillmount \u7ec4\u4ef6\u5df2\u7ecf\u6302\u8f7d\u65f6 public async componentdidmount param props \u63a5\u53d7\u7684props public async componentwillreceiveprops props public async shouldcomponentupdate public async componentwillupdate public async componentdidupdate \u7ec4\u4ef6\u5c06\u88ab\u5378\u8f7d\u65f6 public async componentwillunmount public render return thisrendercontent public rendercontent return null typescript import react react import panel ipanelprop panelpanel import itreeprop itreestate itreeitem treeicontype treedto export class tree extends panel public props itreeprop public state itreestate treelist private index private style require assetsstyle old way used following way tsc wrong complex inheritance react typescript import react react export interface itextareaprop export interface itextareastate export class textarea extends reactcomponent public state public async constructor props super props \u7ec4\u4ef6\u521a\u521a\u6302\u8f7d\u65f6 public async componentwillmount \u7ec4\u4ef6\u5df2\u7ecf\u6302\u8f7d\u65f6 public async componentdidmount param props \u63a5\u53d7\u7684props public async componentwillreceiveprops props public async shouldcomponentupdate public async componentwillupdate public async componentdidupdate \u7ec4\u4ef6\u5c06\u88ab\u5378\u8f7d\u65f6 public async componentwillunmount public render return textarea", "num": "11681", "d": "11/2017"}, {"title": "react storages flow types", "body": "hi im trying understand flow resolves nothing called directory defined", "num": "11680", "d": "11/2017"}, {"title": "click event propagating elements created loop unique keys", "body": "react version code generates react dom like text click elements event propagating debugging found issue keys restrictions keys react like max length specific characters", "num": "11679", "d": "11/2017"}, {"title": "disabled button click event propagates", "body": "want request feature report bug bug current behavior clicking disabled button fires mouse event bubbles caught parent click event listeners event swallowednot fired major browsers current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior event fire bubble versions react browser os affected issue work previous versions react react", "num": "11678", "d": "11/2017"}, {"title": "resetting form containing focused controlled number input puts step state", "body": "fixture demonstrating issue first test case controlled number input within form containing reset button hitting enter trigger reset event causes focused input reset wo nt sync tracked value work blur number inputs avoid triggering validation warnings nt affect input types since tracked value updated immediately might viable tradeoff avoiding validation warnings sure actionable wanted least document future reference cc nhunzaker gaearon", "num": "11674", "d": "11/2017"}, {"title": "constructor props super props vs constructor super", "body": "know question asked many times still clear many people said pass props constructor want access thisprops one example answer oficial doc says class components always call base constructor props pass props still everywhere except also source code create element see adds regardless use main question react official doc says class components always call base constructor props really necessary current react doc wrong need call always", "num": "11671", "d": "11/2017"}, {"title": "add hooks reactdomserver support caching", "body": "want request feature report bug feature current behavior reactdom ssr performance could improved using serverside cache currently reactpartialrenderer currently accessible package desired behavior server would nice plugins could used improve render performance currently way would externally maintain renderer implementation however already contains behavior required support plugins little refactoring refactored created proof concept supporting plugins react server side rendering see reactpartialpluginrenderer fork comprised different commits strict refactoring addition exporting reactdom server package create extending refactored introduce plugin interface proof concept plugin implementations application example view instructions running example repo understand exporting exposes internal api far ideal scenario would made accessible package would plugin implementation similar required maintain forked maintaining plugin renderer repo nt problem would great plugins could used without needing maintain core server renderer thanks adam", "num": "11670", "d": "11/2017"}, {"title": "rfc drop isattributenamesafe check react", "body": "currently validate dom attributes client ignore ones invalid names check used important safety rendering client side anymore let call browser would throw bad attribute name check used run infrequently data attributes custom elements attributes follow code path since simple attributes names effectively treated unknown attributes even though cache result seems unfortunate work browser already us would breaking change go think remove check let browser throw make spreading props blindly bit dangerous warning visible", "num": "11667", "d": "11/2017"}, {"title": "eventphase property onclickcapture events wrong value", "body": "want request feature report bug assume bug current behavior register event handler click element inspect event property set equivalent currently rewriting tests use public api found problem current behavior bug please provide steps reproduce possible minimal demo problem codesandbox would expect alert way round expected behavior property set versions react browser os affected issue work previous versions react nt tried versions different testing done chrome", "num": "11663", "d": "11/2017"}, {"title": "another dependency use reactproptypes", "body": "use react another package use reactproptypes update another package search polyfill try write nt work import allreact react import proptypes proptypes allreactproptypes proptypes", "num": "11661", "d": "11/2017"}, {"title": "add bundle linting tests release script", "body": "ci currently lint bundles run development production bundle tests add first step linting bundles script called change ci command run finally add release script function note function already broken need replace since running longer works due custom config running work custom script never mind fixed verify changes run see whole workflow run successfully task requires understanding work", "num": "11660", "d": "11/2017"}, {"title": "move reactfibertreereflection reactreconcilerreflection", "body": "move exported entry point similar entry point set create flat bundle similar set change code imports directly instead make dependency ensure reconciler nt actually get bundled instead stays call interaction two packages actually tested run task friendly beginners requires understanding relationship different packages willingness research experiment build process set", "num": "11659", "d": "11/2017"}, {"title": "investigate ci failure possible race condition", "body": "looks like scriptscircleciuploadbuildsh curl could nt open file builddistreactdevelopmentjs scriptscircleciuploadbuildsh returned exit code action failed scriptscircleciuploadbuildsh happened two times random commits nt see pattern probably caused changing tasks distributed parallel nodes nt understand would try run build exists though happening", "num": "11657", "d": "11/2017"}, {"title": "deprecate testutilssimulatenative", "body": "sure ever intended part public api documented naming misleading actually nt simulate native event oops simulates react would received native event way tightly coupled event system internals unfortunate much better educate people dispatch actual browser events tests instead think deprecate removed tests relying leave test two deleted next major", "num": "11656", "d": "11/2017"}, {"title": "question react reconciliation", "body": "goal better understand react reconciliation created example simple timer component basically shows second passed class stateful extends reactcomponent constructor props super props thisstate componentdidmount let setinterval function thatsetstate function prevstate return timer render return thisstatetimer demo class understanding reconciliation class demo extends reactcomponent constructor props super props thisstate componentdidmount let settimeout function thatsetstate showwarning true render thisstateshowwarning return hoping would create new instance stateful component seconds reactdomrender documentgetelementbyid container showwarning statefulcomponent starting timer continued increase screen output basically second whereas expected show third second restart basically start etc miss reconciliation docs led believe feeling react docs misses highlight might missed something", "num": "11651", "d": "11/2017"}, {"title": "forceupdate recalls ref callbacks", "body": "want request feature report bug bug maybe current behavior calling forceupdate ref callbacks called forceupdate ref callback makes infinite loop current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior recall refs versions react browser os affected issue work previous versions react react chrome", "num": "11650", "d": "11/2017"}, {"title": "onclick callback simulating clicking elements triggers additional callback", "body": "link class normalloginform extends reactcomponent handlesubmit e gt epreventdefault consolelog click button \u6a21\u62df\u70b9\u51fb documentgetelementbyid div click render return lt button onclick thishandlesubmit gt log reactdomrender mountnode", "num": "11649", "d": "11/2017"}, {"title": "also lint untracked files", "body": "often would run would say lint passed changed files realize added file yet nt see file make include untracked files note file ignored git different matter shows untracked extremely likely want lint", "num": "11646", "d": "11/2017"}, {"title": "react roadmap document", "body": "want request feature report bug feature current behavior think many people would interested document would show futurelong term plans react features planned current behavior bug please provide steps reproduce possible minimal demo problem via similar bug expected behavior document link exists repo accessed see planned future versions react browser os affected issue work previous versions react na", "num": "11645", "d": "11/2017"}, {"title": "flowtype class inherit", "body": "problem react flowtype typings lets assume javascript foojs type propstype cool boolean class foo extends reactcomponent barjs import foo foo type propsbar temp string class bar extends foo test thispropscool error thispropstemp property found object type question pass additional props bar component", "num": "11643", "d": "11/2017"}, {"title": "radio box check box disabled checked dom structure lacks checked attributes", "body": "report bug radio box check box disabled checked dom structure lacks checked attributes browser structure css input checked color blue result checked failure", "num": "11642", "d": "11/2017"}, {"title": "react watcher bad practice inside alternatives", "body": "want request feature report bug feature js indexjs state num componentdidmount const numgenerator gt mathfloor mathrandom setinterval gt thissetstate num numgenerator render return say passed want component display haha haha haha haha want haha show flash js displayjs state showhaha false componentwillreceiveprops thissetstate showhaha true componentdidupdate thissetstate showhaha false setstate inside componentdidupdate bad practice right watch method like vuejs", "num": "11640", "d": "11/2017"}, {"title": "question workflow release new version", "body": "hello totally place asking sorry please close issue work german newspaper publishing smaller npm packages publically open source purposes privately currently quite sure workflow want learn best wondering manage publish new releases react see release sh scripts npm script basically builds package bumps version publishes lib npm far seems quite similar correct wrong also want publish new release someone runs npm script laptop seems somewhat unsettling feels like wondering care answer facebook", "num": "11628", "d": "11/2017"}, {"title": "add sugar simplify test assertions", "body": "made tests bit verbose might good time revisit write separate issues asserting warning messages verbose need dev block call normalize stack etc ideally wish higher level helper lets us push expected warning assertions validate happen handle component stacks automatically without copypaste normalization helper everywhere cases added actual duplication particular cases throw development nt throw production maybe need although hand pattern needs highly visible maybe extracting common code closure good enough", "num": "11626", "d": "11/2017"}, {"title": "rendertostaticmarkup incorrectly renders async attribute", "body": "want request feature report bug bug current behaviour async tag rendered value empty quotes like current behavior bug please provide steps reproduce possible minimal demo problem note fiddle adds async tag div script tags nt allowed behaviour exactly expected behavior async tag rendered quotes like using method async tag works expected method behaviour different versions react browser os affected issue work previous versions react latest", "num": "11624", "d": "11/2017"}, {"title": "createportal child ref callbacks called componentdidmount", "body": "want request feature report bug bug current behavior using new reactdom api adding ref callback portal subtree fired current component current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior expected ref callbacks children rendered portal like children fired parent component lifecycle method versions react browser os affected issue work previous versions react tested versions react current seem share behaviour", "num": "11621", "d": "11/2017"}, {"title": "include component stack invariants", "body": "iirc nt include devonly anymore maybe let start including errors often prominent warnings would great info", "num": "11619", "d": "11/2017"}, {"title": "investigate uncovered differences development production", "body": "follow one found two invariants function behind dev block nt think intentional need verify may use issue track preserves existing behavior", "num": "11618", "d": "11/2017"}, {"title": "yarn linc nt fail filehasnotchanged warning", "body": "saw modifying eslint config running usersgaearonpreacteslintrcjs warning file ignored default use negated ignore pattern like ignorepattern override problem errors warning lint failed changed files error command failed exit code info visit documentation command react treat particular warning error", "num": "11615", "d": "11/2017"}, {"title": "request", "body": "hello guys make request actually make request axios ie dont work response returns network error using fetch response returns access denied react axios async function makerequest endpoint method get params null headers const request axios method url baseurl endpoint data params headers return await request fetch", "num": "11613", "d": "11/2017"}, {"title": "unfork gcc", "body": "currently using fork gcc js version updated yet gcc version includes see new release js version includes pr remove fork", "num": "11610", "d": "11/2017"}, {"title": "undo operation text input throws exception", "body": "want request feature report bug bug report looks like unmounting text nodes undoing text input operations display value input rendered another component raises exception allow changes unmounted text nodes think issue anyway documented current behavior open change text first controlled text input start debugging developer tools press ctrlz undo text change raises exception setting nodevalue text label right input invalid arguments expected behavior versions react browser os affected issue work previous versions react affects using react also issue master issue springs reactdomjs think needs wrapper around text node see parent updating maybe something like feels like bandaid solution curious causing text node unmount beginwith", "num": "11609", "d": "11/2017"}, {"title": "change props child component", "body": "example want change prop parent component passes clicking button want controlled incident explicitly want make component independent callers need many parameters achieve twoway communication parent child components parent child good people", "num": "11608", "d": "11/2017"}, {"title": "issue input typenumber rendering decimal points", "body": "want request feature report bug would like report bug current behavior use issue displaying one additional decimal point noticed initial value state type end input displayed value state still remains type another end value disappears returns empty string instead current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react demo expected behavior expected behaviour either input performs built validation validation restrictive enough disallow second dot validation modified one must ensure second dot changes value back value without second dot versions react browser os affected issue work previous versions react affected react versions tried react tried google chrome tried browsers", "num": "11606", "d": "11/2017"}, {"title": "children option tags flattened select value", "body": "want request feature report bug bug current behavior following rendered string using reactdom get hydrating code get warning warning text content match server b client fiddle expected behavior get versions react browser os affected issue work previous versions react something reactpartialrendererjs ps browsing reactpartialrendererjs found code point props overwritten later", "num": "11602", "d": "11/2017"}, {"title": "ca nt access discuss react", "body": "know related react directly nt know turn one ca nt accesslogin discussreactjsorg quite time already get error page working discussreactjsorg currently unable handle request http error sometimes retry error sorry error authorizing account perhaps approve authorization", "num": "11601", "d": "11/2017"}, {"title": "dispatching input event element trigger onchange handler", "body": "want request feature report bug bug current behavior triggering native dom input event trigger onchange handler react dom versions current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react react dom react dom note alert appears fiddle expected behavior would expect onchange handler fired sure correct approach happy discuss options versions react browser os affected issue work previous versions react see fiddles chrome osx example", "num": "11600", "d": "11/2017"}, {"title": "investigate need feature check cancel close events", "body": "reactbrowsereventemitter checks browser support cancel close events attaching listeners curious necessary need like determine ramifications removing checks add comments lines checks necessary x maybe eliminate iseventsupportedjs needed check changeeventplugin", "num": "11598", "d": "11/2017"}, {"title": "componentdidmount fired dom mounted portal tree components", "body": "want request feature report bug bug current behavior components inside react portal componentdidmount fired dom mounted yet current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react demo expected behavior componentdidmount fired dom mounted versions react browser os affected issue work previous versions react problem exist react browser os des matter worked fine earlier react", "num": "11597", "d": "11/2017"}, {"title": "add warning hydrating output rendertostaticmarkup", "body": "want request feature report bug feature current behavior accidently generated ssr output using instead hydrated using led warning caused collapsed text nodes would added html comments warning got warning text content match server b client rendering would nice could detect executed output instead seems simple check attribute root element would suffice expected behavior would like kind warning along following lines versions react browser os affected issue work previous versions react due changes worked", "num": "11596", "d": "11/2017"}, {"title": "question automatize tests windows environment amp amp circle ci", "body": "hi everyone wondering makes sense implement react tests windows environment even test build task run master branch thinking using appveyor question migrate circle ci configuration questions make sense available implement", "num": "11595", "d": "11/2017"}, {"title": "warn thisstate set thisprops referentially", "body": "see example think probably reflects misunderstanding props state work detect warn see", "num": "11593", "d": "11/2017"}, {"title": "code coverage", "body": "found react good coverage working could really make impact", "num": "11592", "d": "11/2017"}, {"title": "inlineplaying element ios fire click events rendered react", "body": "want request feature report bug bug report current behavior rendered react autoplaying inline ios fire click events tapped even click handlers added using native dom example created without react fire click events autoplaying inline current behavior bug please provide steps reproduce demo code expected behavior click events fired versions react browser os affected issue work previous versions react issue appears react ios issue seen ios either version react", "num": "11589", "d": "11/2017"}, {"title": "onclick firing disabled buttons", "body": "hello react team found little event firing bug click icon element inside disabled button onclick div element triggered javascript gt delete", "num": "11588", "d": "11/2017"}, {"title": "add element", "body": "want request feature report bug like request feature current behavior create portal currently use function expected behavior", "num": "11586", "d": "11/2017"}, {"title": "move mousewheel event type detection browsereventconstants", "body": "think move wheel event support check browsereventemitter browsereventconstants runs check nice wheel scroll events eventually need attached locally filing part could happen master right less interested cutting overhead event listening much possible really low hanging", "num": "11585", "d": "11/2017"}, {"title": "part huawei mobile phone flashback render page android phones ios phones problem solve problem", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react part huawei mobile phone flashback render page android phones ios phones problem solve problem", "num": "11584", "d": "11/2017"}, {"title": "ie console error stopping render nexteffect", "body": "want request feature report bug bug current behavior page ca nt rehydrated probably rehydration issue happens use empty div instead console error seems equal set breakpoint point source current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react ca nt isolate bug provide minimal demo reliable reproduction steps without providing whole app spent day already still trying isolate issue removed randomly choosen components added render deep component fine defined rendered instead got error restoring various components makes react crash randomly looking points every refresh produces result though still report hope dev got idea could triggering keep looking meanwhile expected behavior errors page rendered versions react browser os affected issue work previous versions react react amp windows ie react working fine happening development production build", "num": "11583", "d": "11/2017"}, {"title": "elements key deduplicated", "body": "want request feature report bug bug current behavior elements key deduplicated unreasonable guess since duplicate keys undefined behavior however subsequent rerenders duplicate elements remain render tree way remove current behavior bug please provide steps reproduce follow instructions expected behavior elements key deduplicated behavior react least duplicate elements appropriately cleaned subsequent rerenders versions react browser os affected issue work previous versions react mac chrome react working", "num": "11582", "d": "11/2017"}, {"title": "controlled inputs nt work safari", "body": "originally thought issue around using upon digging appeared safari plain nt like controlled inputs whatever type appear input see action say worked around time leveraging instead allowed us stop event propagation safari sure affects safari looking older issues looks like solved problem safari nt ca nt confirm", "num": "11577", "d": "11/2017"}, {"title": "react reactrouter create component calls render component good without render crazy", "body": "link sandbox simple code like sidebarjs menujs uncomment component render method component called everytime change link menu component html code going loosing mind", "num": "11574", "d": "11/2017"}, {"title": "preparing", "body": "running list comprehensive things come nt want lose track cherrypick jquense license update changelog tag release release blog post test living heck", "num": "11573", "d": "11/2017"}, {"title": "reword unknown property warning less obnoxious", "body": "thought might cause knee jerk reactions practice think change phrasing neutral one potentially explaining prefer camel case", "num": "11570", "d": "11/2017"}, {"title": "read property reactinternalinstance null", "body": "super unhelpful error react improved ie hierarchy trace kind pointer", "num": "11569", "d": "11/2017"}, {"title": "react recognize prop dom element", "body": "want request feature report bug bug current behavior react recognize prop dom element though react recognizes open links check sandbox console react version warning displayed react version warning displayed sandbox console react version without warning message expected behavior recognized valid dom element attribute mentioned documentation versions react browser os affected issue work previous versions react tested reproducible latest versions chrome safari firefox macos x worked well react", "num": "11568", "d": "11/2017"}, {"title": "html entities rendertonodestream rendertostaticnodestream causing mismatch hydrate", "body": "want request feature report bug bug current behavior server started html entity anywhere within component jsx causes mismatch occur using hydrate expected behavior nt expect mismatch occurs rendertonodestream rendertostaticnodestream nt occur using rendertostring rendertostaticmarkup versions react browser os affected issue work previous versions react react chrome manjaro linux sure worked previous versions", "num": "11567", "d": "11/2017"}, {"title": "umbrella new algorithm resuming interrupted work", "body": "resuming ability reuse fibers interrupted higherpriority update take following scenario component updated normal async priority update finished processing higherpriority update scheduled let say synchronous though could also higherpriority async update sync update interrupts async update leaving unfinished sync update finishes go back processing interrupted async update possible even likely interrupted work nt touched sync work resumed without starting completely important optimization several async features mind including error handling blockers prerendering hidden priority used implementation resuming mostly worked bugs months ago spent time identifying bugs using fuzz testing fixing iterating existing algorithm eventually got version working passed tests even version nt features wanted algorithm seemed inherently flawed decided would best scrap existing algorithm revisit resuming future believe better idea resuming work going split work multiple prs use issue keep track progress apologies descriptions hard follow difficult describe without resorting jargon iterate issue work always reconcile current child set small refactor reflects already without resuming set reconcile always current set reverted resuming algorithm set reconcile sometimes workinprogress set code paths left implementation stash interrupted children cloning workinprogress fiber current already existing workinprogress interrupted stash interrupted workinprogress children corresponding fields case reuse later begin phase add additional check see incoming propsstate match interrupted propsstate bail reuse interrupted children interrupted children longer useful rerender parent overwrite unmounted fibers actually reused even rerender parent see next step gets us back functionality old resuming algorithm resume interrupted children come back priority originally rendered main limitation work lost parent rerendered higher priority need way distinguish workinprogress fiber previous current fiber pool unmounted interrupted children resume even parent rerenders higher priority fiber rerendered interrupted children could reused search interrupted children find ones unmounted nt alternate stash unmounted children separate set kept around indefinitely without overwritten set acts like pool children next time parent rerendered priority interrupted children check pool matches creating new fibers", "num": "11566", "d": "11/2017"}, {"title": "reacttestrenderer support portal", "body": "want request feature report bug report bug current behavior test javascript import react react import createportal reactdom import renderer reacttestrenderer const drop gt createportal hello thisdropcontainer test drop renders gt const component renderercreate const tree componenttojson expect tree tomatchsnapshot fails invariant violation drop nothing returned render usually means return statement missing render nothing return null test passes wrap createportal container javascript createportal hello thisdropcontainer expected behavior code without parent container works fine browser seems adding parent test pass believe support empty returns versions react browser os affected issue work previous versions react lastest", "num": "11565", "d": "11/2017"}, {"title": "introduction external pages dangerouslysetinnerhtml js fails", "body": "introduction external pages dangerouslysetinnerhtml js fails", "num": "11562", "d": "11/2017"}, {"title": "clicking radios fires change event unconditionally older browsers", "body": "may change agreed missed radio input clicks test fixtures fails safari ios safari chrome test fixture care figure way document", "num": "11560", "d": "11/2017"}, {"title": "react tag", "body": "looks like react tag never got pushed github cut new tag biggest annoyance release missing dropdown dom test fixtures append url huge deal seems low effort take care noone minds", "num": "11559", "d": "11/2017"}, {"title": "overflowx none", "body": "hi spent half hour realizing passing string none overflowx warnings logs jsx style passing invalid simply removed inline styles warnings errors would like send pull request react help add logging developers accidentally pass invalid string warn things like invalid even passing class browser barfing helped realize overflowx hidden valid attribute css value idea way log console invalid css attributes disappear jsx final inline style converted object would love logs invalid css attributes maybe configuration missing see logs react annoying try get overflow none invalid next time css something missing look mozilla manual thanks pointers annoying little bugger jsx", "num": "11556", "d": "11/2017"}, {"title": "something like emberobservercom", "body": "something like react world", "num": "11554", "d": "11/2017"}, {"title": "nonpassive event warnings component clicked", "body": "want request feature report bug bug current behavior following console warning emitted every time input clicked current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react steps new tab visit open browser console ensure messages unfiltered run code click either select fields page warning emitted every time either select field clicked selection need change expected behavior warning attached event listeners versions react browser os affected issue work previous versions react react chrome official build tested also ubuntu opera issue issue began appearing recent upgrade chrome using react first saw upgraded see issue resolved", "num": "11553", "d": "11/2017"}, {"title": "render root tag", "body": "mistake amp amp test want render div tag", "num": "11552", "d": "11/2017"}, {"title": "rendered ui react reactdom", "body": "code js import react react import reactdom reactdom import router route hashhistory reactrouter import archives modulesarchives import layout moduleslayout import featured modulesfeatured import settings modulessettings consolelog hi reactdomrender documentgetelementbyid app error browser", "num": "11551", "d": "11/2017"}, {"title": "add validation reactchildren helpers", "body": "currently helpers like validate passed elements things like missing keys go unnoticed see discussion deleted original tweet context", "num": "11549", "d": "11/2017"}, {"title": "stopimmediatepropagation available synthetic events", "body": "order call method access via awesome supported see prior issue use case sip nt required specific use case want kill hover events touch input trigger cancels internal cascade", "num": "11547", "d": "11/2017"}, {"title": "ignore system directories build script", "body": "noticed running gives error enotdir directory open usersgaearonpreactpackagesdsstorepackagejson error objectfsopensync fsreadfilesync readdirsyncfilterdir arrayfilter getpublicpackages ignore system directories", "num": "11544", "d": "11/2017"}, {"title": "nt get keys warning case", "body": "example generates buttons based state change nt get warning use keys class hello extends reactcomponent constructor props super props thisstate test thisarr componentdidmount settimeout gt thissetstate render return ps uncomment lines function get warning though nt get warning first case know without keys two buttons going rendered settimeout different", "num": "11540", "d": "11/2017"}, {"title": "input typecheckbox rendered correctly nested html atag", "body": "want request feature report bug bug current behavior peculiar problem using html tag react thing click directly checkbox tag checkbox rerender correctly state updated example given code render component click directly checkbox case showmap set false since set true constructor checkbox still checked html view however click tag directly checkbox state showmap updated correctly well view make work calling app scroll top page click tag example code import react react import render reactdom const styles fontfamily sansserif textalign center margintop class menu extends reactcomponent constructor props super props thisstate showmap true togglecheckbox event gt thissetstate showmap thisstateshowmap eventpreventdefault render return thisstateshowmap show hide show map const app gt render documentgetelementbyid root expected behavior press checkbox update visually versions react browser os affected issue work previous versions react react chrome windows", "num": "11539", "d": "11/2017"}, {"title": "make react resilient dom mutations google translate", "body": "coming search see workaround star issue want request feature report bug bug though decent chance chromegoogle translate one current behavior using google translate page using react certain code pattern produces javascript error rendered content changes current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react checked macos navigate chrome browser set language japanese right click page select translate english click checkbox error show source example found part code seems cause following two lines changing following fixes behavior google translate expected behavior produce error versions react browser os affected issue work previous versions react created identical example react following pages repeating steps outlined error produced seems affect react chromeonly feature affects chrome", "num": "11538", "d": "11/2017"}, {"title": "getting warning unique key prop despite added correctly", "body": "want request feature report bug bug current behavior reported using library react error demo steps reproduce go demo codesandbox try choose option see console error keys added work fine react expected behavior error keys added versions react browser os affected issue work previous versions react react worked fine react", "num": "11537", "d": "11/2017"}, {"title": "inline style decimal numbers", "body": "want request feature report bug bug current behavior style prop passed decimal number react converts dot comma resulting invalid css value suspect might due locale different english behavior irregardless user locale conversion correct use current behavior bug please provide steps reproduce possible minimal demo problem expected behavior decimal numbers always converted dot versions react browser os affected issue work previous versions react react version os macos browsers chrome safari firefox beta unaffected", "num": "11532", "d": "11/2017"}, {"title": "touched clicked component gets ghost mousedown event", "body": "deployed minimal trimmed app entire source code clicking touching either square make clicked touched square disappear square everything works intended desktop machine chrome firefox also shows correct behavior safari ios nt care ie edge following triggers bug chrome either android tablet desktop machine emulating handheld device reload app touch click top blue square squares disappear console log see clicked touched bottom green square received spurious mousedown event deleted appcss applied squares nt use would get following warning chrome emulating handheld device intervention unable preventdefault inside passive event listener due target treated passive see way deployed app warning goes away ghost mousedown event due bug code bug react bug chrome resolve issue looking workaround bug code", "num": "11530", "d": "11/2017"}, {"title": "add function name breakpoint tracing", "body": "want request feature report bug maybe feature current behavior interesting happen react fiber try use breakpoint trace react render function found call stack function name made captured picture current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react sorry expected behavior define function name versions react browser os affected issue work previous versions react react osx", "num": "11529", "d": "11/2017"}, {"title": "rfclarification asynchronous", "body": "quite tried understood asynchronous failing find answer past came conclusion historical reasons probably hard change however gaearon indicated clear reason curious find anyway reasons often hear think ca nt everything easy counter async setstate required async rendering many initially think render efficiency nt think reason behind behavior keeping setstate sync async rendering sounds trivial something along lines fact example allows synchronous assignments observables still respect async nature rendering async setstate needed know state rendered argument hear sometimes want reason state rendered state requested sure principle much merit either conceptually feels strange rendering side effect state facts today years old next year turn regardless whether owning component manages rerender year draw probably good parallel would nt able read last version self written word document printed would pretty awkward nt think example game engines give feedback state game exactly rendered frames dropped either interesting observations years nobody ever asked question know observables rendered question seems relevant often encounter cases knowing data rendered relevant case remember needed know pixel dimensions data layout purposes elegantly solved using nt really rely async either cases seem rare hardly justify design api primarily around done somehow suffices think doubt react team aware confusion async nature often introduces suspect another good reason current semantics tell", "num": "11527", "d": "11/2017"}, {"title": "transpilation freezes reactdomserver interface", "body": "initially reported attempting upgrade caused test previously working fail test using sinon stub results following error export frozen source frozen confirms result transpilation simply splitting report separate issue add reproduction soon plan submit pr follow", "num": "11526", "d": "11/2017"}, {"title": "disable form submission using onsubmit handler", "body": "want request feature report bug bug current behavior currently possible prevent form submission using handler current behavior bug please provide steps reproduce possible minimal demo problem sample code expected behavior never submit returns false every time versions react browser os affected issue work previous versions react react simplified code snippet nt load sandbox repro false gt", "num": "11522", "d": "11/2017"}, {"title": "react props frozen sealed", "body": "trying update application react getting error message chrome pseudo code currently like jsx const styles container fontsize fontfamily helvetica neue class mycomp extends component render gt let theme thispropstheme stylescontainerfontfamily themefont noticed error happens second time render run also test debugger inside render method getting return means frozen react state copied styles object second pass replaced frozen nt happen previous versions react react freezing properties", "num": "11520", "d": "11/2017"}, {"title": "consider including directory name stack trace files", "body": "see maybe file called pretty common directory structures include directory name short component stack trace", "num": "11519", "d": "11/2017"}, {"title": "unify linc lint build tasks", "body": "currently two tasks nt share code lint lint changed make share code using node api like currently move shared code", "num": "11516", "d": "11/2017"}, {"title": "bunch find module errors reactdom", "body": "want request feature report bug bug current behavior nt used version specific features react module failed transpile errors reproduce learn example react currently used react upgrade current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react versions react browser os affected issue work previous versions react react reactdom tested windows chrome browser browsers nt related meaningless yes worked react", "num": "11514", "d": "11/2017"}, {"title": "textarea falls error works fine", "body": "", "num": "11511", "d": "11/2017"}, {"title": "warn component proptypes rather proptypes", "body": "see feels like easy mistake make easy us detect", "num": "11510", "d": "11/2017"}, {"title": "", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react", "num": "11509", "d": "11/2017"}, {"title": "unnecessary rerendering bailedout components legacy context provider deep child updated batch", "body": "issue going start mostly theoretical still working make minimal repro case scenario one component return false bail child component still method called avoiding many details roughly jsx import react component react class extends component shouldcomponentupdate nextprops const result boolean nextpropsitem consolelog shouldcomponentupdate result return result render consolelog render thispropsitem return class b extends component state seconds componentdidmount thisinterval setinterval gt thissetstate seconds thisstateseconds componentwillunmount clearinterval thisinterval render consolelog b render thispropsitem return thispropsitemname thisstateseconds seconds export default case work expected seems direction errors seeing something taking place render cycle b rendered without reusing prop previous reconcile first question theories may happening explore using parent reading thing think fork original oss flux passing props naming collisions fairly certain performing mutations end manage pull repro case immediately post utter joy heart cc acdlite gaearon issue asking messenger recently", "num": "11508", "d": "11/2017"}, {"title": "formalize toplevel es exports", "body": "currently ship commonjs versions packages however might want ship esm future ca nt quite easily nt really decided toplevel es exports would look like package example bunch named exports also default export called encourage people better tree shaking currently exports class thus would start failing node converted default export", "num": "11503", "d": "11/2017"}, {"title": "iterators supported inside componentrender", "body": "current behavior provide list react components works provide iterator react components work works const app props gt elements const elements function yield yield yield nt work const app props gt elements const elements function yield yield yield unfortunately could nt make run jsfiddle maybe support iterators expected behavior render exactly version listbased one versions react browser os affected issue work previous versions react reactdom browserindependent tried firefox", "num": "11502", "d": "11/2017"}, {"title": "react renders differently server client", "body": "warning react attempted reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injected new markup compensate works lost many benefits server rendering instead figure markup generated different client server client come rendered different solution tried rendertostaticmarkup instead rendertostring working", "num": "11500", "d": "11/2017"}, {"title": "uncaught error thrown twice", "body": "problem mention issue unhandled error displayed twice error based gaearon comment context reason happens intentionally let browser interpret error uncaught rethrow understand thrown browser source file second thrown react source file added follow advice error add error boundary see error huge problem daytoday workflow fact nudges people add error boundaries nice case advice mentioned error get error thrown", "num": "11499", "d": "11/2017"}, {"title": "props set default parameter added component props property", "body": "want request feature report bug bug current behavior able render default value property contain explicitly set intended versions react browser os affected issue work previous versions react chrome", "num": "11498", "d": "11/2017"}, {"title": "react upgrade still looking reactjs even though nt exist anymore", "body": "want request feature report bug current behavior upgrading react means nodemodulesreactreactjs longer exists however watchingbundling files webpack webpack sometimes trips errors trying locate nodemodulesreactreactjs may well webpack issue react issue hoping someone help ca nt get bottom seems timing thing errors every couple file changes rebundles rest time works normally webpack config simple set true use babelloader presets expected behavior never look nodemodulesreactreactjs bundling webpack versions react browser os affected issue work previous versions react exists react problems previous versions", "num": "11497", "d": "11/2017"}, {"title": "setstate callback called component state updated react shallow renderer", "body": "want request feature report bug report bug current behavior call setstate callback test using react shallow renderer via enzyme callback gets called still old state edit seems limited componentwillmount current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react edit reproduce expected behavior setstate callback gets called access new state versions react browser os affected issue work previous versions react version worked enzyme edit think componentwillmount line causes render method shallow wrapper return early updates state", "num": "11496", "d": "11/2017"}, {"title": "add datareactroot back reactdomrender", "body": "want request feature report bug bug current behavior react added using current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior also tag tree root react detection purposes versions react browser os affected issue work previous versions react", "num": "11494", "d": "11/2017"}, {"title": "dom attribute datetime nt lowercased rendered string", "body": "want request feature report bug bug current behavior dom property nt converted lowercase attribute counterpart element element rendered current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react const react require react const reactdomserver require reactdomserver const markup reactdomserverrendertostring reactcreateelement time datetime consolelog markup print expected behavior output versions react browser os affected issue work previous versions react react react dom node", "num": "11492", "d": "11/2017"}, {"title": "npm run build error", "body": "bug nodejs followed steps git clone npm install run script error js npm run build build usersucwebdocumentsgithubreact npm run versioncheck amp amp node scriptsrollupbuildjs versioncheck usersucwebdocumentsgithubreact node scriptstasksversioncheckjs building reactdevelopmentjs umddev typeerror read property specifier undefined think strange", "num": "11491", "d": "11/2017"}, {"title": "default browser android working blank access web build react", "body": "problem build web react tried access default browser android android working blank android wokring write es compile es working test android default browser working blank default browser android support es right someone help", "num": "11490", "d": "11/2017"}, {"title": "trigger simulated input value change react reactdom updated", "body": "trying trigger inputchange event react form outside react using pure js jquery reactdom able use simulated flag event object event pass note use react even though form trying trigger based react pure js jquery trigger input value change event original suggestion comment used work react release triggering input change event expected internal changes handles changes input data react believe point would give hint idea could", "num": "11488", "d": "11/2017"}, {"title": "text next element render page react", "body": "hello today spotted bug causes text next element render page react quick job search sure designed behaviour working perfectly react let know need information", "num": "11485", "d": "11/2017"}, {"title": "release script followup", "body": "x add timeout querying npm right publish x conditionally log post publish steps x maybe print readytopaste instructions cra prerelease testing x publish packages nt remove whitelist config x add v prefix release tags x nit seconds gt minutes long tasks", "num": "11481", "d": "11/2017"}, {"title": "let warn local yarn version support workspaces", "body": "want request feature report bug feature current behavior got error local yarn version think maybe upgrade yarn module land package folder upgrade yarn try exec command work current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior think would great throw warning ambiguous error versions react browser os affected issue work previous versions react react osx", "num": "11478", "d": "11/2017"}, {"title": "assignment jsx double circulation", "body": "want request feature report bug current behavior code js import react component react class app extends component export default app result print page expected behavior strange start versions react browser os affected issue work previous versions react", "num": "11476", "d": "11/2017"}, {"title": "pions", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react expected behavior versions react browser os affected issue work previous versions react", "num": "11474", "d": "11/2017"}, {"title": "", "body": "", "num": "11468", "d": "11/2017"}, {"title": "use reactcloneelement original element key changed", "body": "use reactcloneelemen clone element found key changed add original key read doc cloneelemnt said key ref original element preserved miss thing code console message capture reactdom structure thanks", "num": "11464", "d": "11/2017"}, {"title": "rn nt receive events unknown tags", "body": "flow uncovered need verify return early process events case", "num": "11461", "d": "11/2017"}, {"title": "check length accessing characters", "body": "see comment although seems unlikely someone would pass onecharacter prop price least versions chrome right reported check first comparison please comment want take issue somebody already commented please let finish", "num": "11460", "d": "11/2017"}, {"title": "need implement n level expandable listview react native", "body": "basic query react native side menu n level expandable options categories subcategories amp make react native already research lot unable find significant solution thing help appreciated new react native basic knowledge may creating dynamic components done already implemented help lot something frequently needed development", "num": "11459", "d": "11/2017"}, {"title": "improve formatting errors building react", "body": "currently build fails eg due missing named export message pretty ugly would nice display relevant line inline syntax highlighting sort like babel maybe babel could helpful sure reproduce fail build removing somewhere run tip fastest way build might enough reproduce iterate error message relevant logic displaying build errors probably somewhere like work please comment nt many people working thing", "num": "11454", "d": "11/2017"}, {"title": "investigate dce regression", "body": "seems like started bundling persistent reconciler dom bundles maybe negated effect es modules even though net win need look happened", "num": "11450", "d": "11/2017"}, {"title": "fix command windows", "body": "currently fails windows depends grep find way make cross platform way eg node script", "num": "11444", "d": "11/2017"}, {"title": "ensure linted bundles exist", "body": "added validation built bundles however actually messed eslint nt running files invalid arguments fixed fail build glob patterns searching nt exist", "num": "11443", "d": "11/2017"}, {"title": "remove support cloneelement getmountedinstance shallow renderer", "body": "test added part shallow renderer rewrite understand tests take instance call pass result shallow renderer internally seems like misunderstanding api work need fix callsites read instead see test wrong change render different shallow renderer like js const shallowrenderer createrenderer let result shallowrendererrender expect result toequal foo bar const instance shallowrenderergetmountedinstance fail argument passing case proper react element actually mostly happens work react elements shallowrenderer instances code almost read anything else update path example hack needed think delete test fix internal callsites never intentionally supported prevents fixes shalllow renderer", "num": "11441", "d": "11/2017"}, {"title": "still yields error ssr rehydration feoffset filter", "body": "bug since regressions issues closed could comment gaearon current behavior navigate ssr page get rehydration error outputting svg expected behavior warnings versions react browser os affected issue work previous versions react version react gt browsers attaching svg thats causing error", "num": "11438", "d": "11/2017"}, {"title": "react complains onchange input type submit", "body": "confused error valueonchange makes sense would complain inputs types seems like bug show submit button docs states valid show text submit input docs react clearly show examples forms submit buttons piece button code code simple button component called like component renders like however get warning button nt submit form apart form object believe rendering readonly warning states anyone know happens", "num": "11436", "d": "11/2017"}, {"title": "release script followup items", "body": "today used new release script first time publish couple things noticed want followup pr x autoinstall update release script yarn deps running pr x script manually tagged release x postbuild test instructions show fullyqualified paths prevent accidentally verifying wrong build eg checkout release script running rather path x check handle packages one failed reconciler release bc expected matter probably x publishing stable release also update next release point", "num": "11435", "d": "11/2017"}, {"title": "react web app working ie", "body": "want request feature report bug report bug current behavior web app displaying black screen load current behavior bug please provide steps reproduce possible minimal demo problem via similar template react template react created demo app using createreactapp npm start application tried run ie displays black screen error saying expected identifier console expected behavior application displayed ie browser happening versions react browser os affected issue work previous versions react react reactdom reactscripts browser ie", "num": "11429", "d": "11/2017"}, {"title": "raising issue warning react depends requestanimationframe make sure load polyfill older browsers", "body": "want know suppress warning ie lt edge ie like could guys help thanks much", "num": "11428", "d": "11/2017"}, {"title": "class styles inside javasript styles", "body": "hi const styles theme gt return root borderradius themespacingunit boxshadow themeshadows padding insert style inside another class style like const styles theme gt return root borderradius themespacingunit boxshadow themeshadows padding", "num": "11425", "d": "11/2017"}, {"title": "ignore content client nt warn mismatches", "body": "react ssr amp lazysizes trying use noscript pattern lazy load images lazysizes seeing warning expected server html contain matching image component render method js render const cdn url width height thisprops react issue tags", "num": "11423", "d": "11/2017"}, {"body": "sure add demo clientserver mismatch jsfiddle", "d": "11/2017"}, {"body": "maybe create small project locally share", "d": "11/2017"}, {"body": "gaearon", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "sure add demo clientserver mismatch jsfiddle reference use umd build reactdomserver manually inject markup example reproducing issue", "d": "11/2017"}, {"body": "sounds like question module bundler react encourage use community support resources bug tracker general recommended use two versions react one project", "d": "11/2017"}, {"body": "nt see anything obvious may bug react need reproducing case look completely unrelated calling bad idea method nt side effects executed many times whenever necessary", "d": "11/2017"}, {"body": "ok yet got isolated code fragment pass testing suggests something passing button component central redux state regarding observation sure place scrollto call mapstatetoprops inside function wrapped connect hoc", "d": "11/2017"}, {"body": "react js fitable static webpage also fitable dynamic webpage without using button react primarily meant dynamic apps although solutions like gatsby make good way create static apps commen combine react js another library instance jquery common use react libraries however since takes care updating dom jquery typically becomes less useful react projects guide integration libraries context react js recommended use also different tools instance jquery angular js bootstrap etc nt understand question hope helps note bugtracker better places ask questions", "d": "11/2017"}, {"body": "help general react always uses convention", "d": "11/2017"}, {"body": "gaearon yeah understand jsx uses camelcase code react library mapping camelcase props javascriptdom elements look code pointed working real dom nodes way use react instead dom even better currently sure could", "d": "11/2017"}, {"body": "mapping dom events names kind scattered around library right easy snippet cut paste", "d": "11/2017"}, {"body": "gaearon point files defined", "d": "11/2017"}, {"body": "events get first letter capitalized added front find search code", "d": "11/2017"}, {"body": "gaearon thanks help quick question inline code like github docs describe functionality", "d": "11/2017"}, {"body": "sure browsers treat async true false react output correct html spec boolean attributes specifying attribute specifying value", "d": "11/2017"}, {"body": "difficult would use canonical name without value semantically identical maybe could save people bytes", "d": "11/2017"}, {"body": "gaearon thanks specifying attribute specifying value think mean specifying attribute value specifying aweary moment using result fine long browsers follow spec treat true", "d": "11/2017"}, {"body": "difficult would use canonical name without value happy review pr", "d": "11/2017"}, {"body": "see", "d": "11/2017"}, {"body": "nt understand report bug report feature request combined using inside working create isolated example feature request create target node clear react could guess insert items", "d": "11/2017"}, {"body": "gaearon example see createportal receive second argument domnode domnode new fragment ps close understand impossible", "d": "11/2017"}, {"body": "react distinction react elements dom elements typically app composed react elements however need render dom element typically render react dom container eg portals let render react element subtree different dom element example render question confusing target ca nt react element point portals render react tree different dom element dom element react element ca nt render thus ca nt target portal however would expect possible render dom element without portal hope makes sense", "d": "11/2017"}, {"body": "gaearon hello solved problem use createportal method fragment parentnode last sentence made think thought", "d": "11/2017"}, {"body": "nice work yeah keep mind react fact react nt use dom works react native etc", "d": "11/2017"}, {"body": "want dig happens expect error", "d": "11/2017"}, {"body": "seems enter loop inside stack keeps building elements indefinitely causing infinite loop familiar render loop could caused circular reference somewhere possible return markup kind error would expect", "d": "11/2017"}, {"body": "looks like returns false portals resolve reactpartialrenderer keeps returning portal element keeps getting pushed stack", "d": "11/2017"}, {"body": "think want throw false fail objects nt", "d": "11/2017"}, {"body": "oh used fail actually accepts portals guess need explicit check somewhere", "d": "11/2017"}, {"body": "expected behavior throw error trying render portal using", "d": "11/2017"}, {"body": "yes ca nt render anyway throw missing dom node ca nt dom node server supposed skip server code", "d": "11/2017"}, {"body": "fix", "d": "11/2017"}, {"body": "okay include fix hanging loop next release might take couple weeks common anyway since reproduce need server render client still use case currently unsupported need pass data components render portal case would also say super great use ssr renderer client brings extra bytes might well new div read", "d": "11/2017"}, {"body": "thanks way came across issue unit testing use enzyme render method generate static snapshots components compare previous snapshots tests ran browser using karma enzyme render calls hood", "d": "11/2017"}, {"body": "oh see thanks explaining context", "d": "11/2017"}, {"body": "using react interactive component events tap without delay long press two finger tap etc state styling touch interactions", "d": "11/2017"}, {"body": "think people would probably looking targeted api compatible replacement less exact port terms features component seems serve broader use case", "d": "11/2017"}, {"body": "docs need updating react supports polyfills file issue docs", "d": "11/2017"}, {"body": "filed", "d": "11/2017"}, {"body": "ok thanks clearing quickly", "d": "11/2017"}, {"body": "wan na send pr fix docs", "d": "11/2017"}, {"body": "seems fair open one", "d": "11/2017"}, {"body": "store immediately set back inside event", "d": "11/2017"}, {"body": "think would work want send pull request sent via superhuman tue nov pm dan abramov lt notifications githubcom gt wrote store windowevent immediately set back inside event receiving authored thread reply email directly view github mute thread", "d": "11/2017"}, {"body": "yeah like", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "checked resources", "d": "11/2017"}, {"body": "hey gaearon yeah checked resources reactvirtualized unfortunately nt meet frontend needsusecases went custom table component coupled table solution reactlazyload get similar reactvirtualized effect still nt seem efficiently render", "d": "11/2017"}, {"body": "provide reduced test case shows problem", "d": "11/2017"}, {"body": "spacejamtda likely root issue trying inject modify many dom elements best bet implement element recycling strategy renders content view", "d": "11/2017"}, {"body": "please file react native repository thanks", "d": "11/2017"}, {"body": "gaearon thanks really react native issue crash happens react library seems something execution javascript", "d": "11/2017"}, {"body": "native code repository know says assure code nt exist", "d": "11/2017"}, {"body": "particular code react deals network requests", "d": "11/2017"}, {"body": "nt typo wrote instead", "d": "11/2017"}, {"body": "oh sorry thanks", "d": "11/2017"}, {"body": "note using inheritance overloading component renders recommended instead use composition covers use case fine apart reason get warning line never try initialize props object instead use props react passes constructor close question typescript react want aware vast majority cases inheritance solution react problems encourage experiment component composition", "d": "11/2017"}, {"body": "first thanks help favor extracting separate javascript module scenes still need inherited example state number common objects needs given child object bits example propsclassnamepropsstyle propswidthpropsheight appearances need specified externally repeated definition props difficult redundant typescript import react react export interface iuielementprop extends reactprops export interface iuielementstate export class uielement extends reactcomponent public props iuielementprop null public state protected process false public async setstate state return new promise resolve reject gt supersetstate state gt resolve protected async setprocess process boolean thisprocess process await thissetstate protected async setprocessing await thissetprocess true protected async unlockprocessing await thissetprocess false protected isprocess return thisprocess protected async processing handle gt promise return new promise async resolve reject gt thisisprocess false await thissetprocessing try await handle resolve catch error reject error finally await thisunlockprocessing else consolewarn \u88ab\u4e22\u5f03\u7684\u70b9\u51fb\u4e8b\u4ef6 protected getclassname classname string return classnamejoin public state public constructor props super props \u7ec4\u4ef6\u521a\u521a\u6302\u8f7d\u65f6 public componentwillmount \u7ec4\u4ef6\u5df2\u7ecf\u6302\u8f7d\u65f6 public componentdidmount param props \u63a5\u53d7\u7684props public componentwillreceiveprops props public shouldcomponentupdate public componentwillupdate public componentdidupdate \u7ec4\u4ef6\u5c06\u88ab\u5378\u8f7d\u65f6 public componentwillunmount typescript import react react import iuielementprop iuielementstate uielement uielementuielement import progressring progressbarprogressring import application coreapplicationapplication export interface ibuttonprop extends iuielementprop \u6309\u94ae\u7684\u5185\u5bb9 content string tooltip string \u662f\u5426\u53ef\u7528 \u9ed8\u8ba4\u4e3atrue isenable boolean style reactcssproperties \u70b9\u51fb\u4e8b\u4ef6 click gt promise export interface ibuttonstate export class button extends uielement public props ibuttonprop null public state ibuttonstate private style require style \u7ec4\u4ef6\u521a\u521a\u6302\u8f7d\u65f6 public componentwillmount \u7ec4\u4ef6\u5df2\u7ecf\u6302\u8f7d\u65f6 public componentdidmount param props \u63a5\u53d7\u7684props public componentwillreceiveprops props public shouldcomponentupdate public componentwillupdate public componentdidupdate \u7ec4\u4ef6\u5c06\u88ab\u5378\u8f7d\u65f6 public componentwillunmount public render return thispropscontent private async onclick thispropsisenable false true thispropsclick await thisprocessing async gt await thispropsclick", "d": "11/2017"}, {"body": "typescript", "d": "11/2017"}, {"body": "diokuz react kept inside flow repo", "d": "11/2017"}, {"body": "yes currently built flow might change future", "d": "11/2017"}, {"body": "please provide complete example clear diagnosed problem react", "d": "11/2017"}, {"body": "would mind also comparing behavior none react version helpful figure browser idiosyncrasy bug react", "d": "11/2017"}, {"body": "jquense seems like browser inconsistency bug react", "d": "11/2017"}, {"body": "could potentially get around checking target disabled letting event dispatch continue simpleeventplugin", "d": "11/2017"}, {"body": "pass props constructor still thisprops everywhere except constructor yes react sets anyway constructor runs still confusing work places others especially constructor methods call shared method reads avoid potential confusion recommend always calling also source code create element see createelement adds props regardless use super props relation question creates element instance read difference get back question technically necessary plan access constructor method call constructor however pretty confusing remember might know call next person team want access constructor surprised nt work easier always specify avoid problems", "d": "11/2017"}, {"body": "gaearon thank answer clear", "d": "11/2017"}, {"body": "nt think intend support sort extensible plugin architecture might support limited set hooks necessary eg caching propose specific api", "d": "11/2017"}, {"body": "gaearon take one nt mind", "d": "11/2017"}, {"body": "proposal actionable yet like consensus team first need wait next major soon", "d": "11/2017"}, {"body": "ohh okay well happy take time", "d": "11/2017"}, {"body": "sounds fine especially keep validation ssr edge case think far", "d": "11/2017"}, {"body": "need verify triggers bad attribute", "d": "11/2017"}, {"body": "especially keep validation ssr edge case think far pretty important leave added", "d": "11/2017"}, {"body": "nt realize removed innerhtml building neat", "d": "11/2017"}, {"body": "oh yeah sophiebits part", "d": "11/2017"}, {"body": "known issue see got open pr fixes need polish", "d": "11/2017"}, {"body": "thanks sorry dupe searching find old issue", "d": "11/2017"}, {"body": "temporary escape hatch create js const react require react const proptypes require proptypes reactproptypes proptypes put first import app imports work really file issue package still uses fork automated conversion script use ps nt use betas stable version months", "d": "11/2017"}, {"body": "nt sure looks like nt work got undefined object evaluating", "d": "11/2017"}, {"body": "enough information help sorry ca nt guess went wrong without full reproducing example also bug tracker please refer community resources support", "d": "11/2017"}, {"body": "take", "d": "11/2017"}, {"body": "sounds good", "d": "11/2017"}, {"body": "work one may need time study first", "d": "11/2017"}, {"body": "sure please nt disappear keep us updated", "d": "11/2017"}, {"body": "problem keep posted", "d": "11/2017"}, {"body": "add queue", "d": "11/2017"}, {"body": "gaearon think right track currently build process using rollup bundle imports single js file instead bundling together want dependency load using require bundling process notice reactfibertreereflection also used packages like reactdom reactnativerenderer etc mean need add dependency packagejson well may also need experiment external options bundlejs see correctly bundle using require statements", "d": "11/2017"}, {"body": "instead bundling together want dependency load using require bundling process yes may also need experiment external options bundlejs see correctly bundle using require statements think build process automatically treat something external commonjs builds think adding might enough fine use wildcard private package", "d": "11/2017"}, {"body": "gaearon reactfiberinstrumentation found trying run yarn testbuild making reactconciler dependency exists flat bundle loading reactnoop also convert another flat bundle export reactfiberreconciler", "d": "11/2017"}, {"body": "forgot one let remove import used debugging tool nt updated months anyway figure fix later", "d": "11/2017"}, {"body": "gaearon reactfiber reactfiberupdatequeue reactnoop make flat bundle fix direct imports", "d": "11/2017"}, {"body": "type imports real imports wo nt affect tests build", "d": "11/2017"}, {"body": "gotcha flows", "d": "11/2017"}, {"body": "fixed thanks rivenhk", "d": "11/2017"}, {"body": "think one would require experience circleci nt pointers start nt understand failing beginnerfriendly issue marked difficulty medium reason", "d": "11/2017"}, {"body": "another example", "d": "11/2017"}, {"body": "gaearon want work research circleci document nt find document said parallel test deployment sequence curious circleci deal parallel test deployment sequence think two situations parallel test finishes run deployment sequence true think wo nt cause current test error container runs deployment container test finished guess likely case sometimes passed node already built file sometimes failed node nt build file yet think maybe container run deployment node test finished situation come two solutions want keep current test flow try keep node builds time balance test first run test parallel reference link circle ci automaticbalancingwithmanualparallelsetup circle ci deployment", "d": "11/2017"}, {"body": "node full build nt understand deployment nodes could work", "d": "11/2017"}, {"body": "nodes share file system", "d": "11/2017"}, {"body": "think nodes share file system otherwise fail every time easier debug add log like current build time artifacts", "d": "11/2017"}, {"body": "would make sense change upload script run second node", "d": "11/2017"}, {"body": "yep think document ca nt ensure whether deployment stage triggered parallel test finished", "d": "11/2017"}, {"body": "put deployment command right test command benefit separating", "d": "11/2017"}, {"body": "think also workable may lead misunderstanding cause put build process test stage try use compile stage run compile stage promise stages needed file", "d": "11/2017"}, {"body": "interesting part regular tests nt need compilation compile stage run stages wait unnecessarily prefer single script everything buy circleci specific terminology unless buys us something real good eg parallelism useful maybe try", "d": "11/2017"}, {"body": "ok understand consideration think fix work tell anything help", "d": "11/2017"}, {"body": "cc ljharb sure folks use", "d": "11/2017"}, {"body": "nt see usage enzyme code however nt yet written might need method however grown think simulate event api enzyme actually huge footgun discourage use anyways fine deprecate", "d": "11/2017"}, {"body": "agreed simulate native generates fake event even dom event always confusing working event system internals would great get rid", "d": "11/2017"}, {"body": "react point view js lines inside condition type inner structure elements js outside elements type div contain single child type also type times react compares types nt care elements defined lines", "d": "11/2017"}, {"body": "gaearon hm yeah cases seems stateful key think somehow confused example different situation look right latter example react key buttons regardless fact whether buttons rendered using keys example right able differentiate value changes", "d": "11/2017"}, {"body": "react key buttons regardless fact whether buttons rendered using keys example right yes sounds right", "d": "11/2017"}, {"body": "react compares types nt care elements defined lines gaearon dan nt react using information lines example keying buttons using keys even though visible time nt case say assigning key first occurence code key second occurence code seems missing something gaearon aah think reason first case keys using inside return clause whereas second case two different return clauses right", "d": "11/2017"}, {"body": "yes sounds right think find easier understand compile jsx babel repl show jsx calls example occupy spots one structure otherwise holes missing", "d": "11/2017"}, {"body": "gaearon discovered another interesting thing know value changes still uses instance component nt key components like keyed buttons case different keys button ie render return thisstatetest renders different instances changes difference compared first example single operator", "d": "11/2017"}, {"body": "using babel transpiler site dan pointed transpiles whereas javascript render return thisstatetest transpiles react different structure diffing takes element position element position", "d": "11/2017"}, {"body": "consider every argument second one hole every hole gets implicit index hole gets filled cases two different holes get filled either", "d": "11/2017"}, {"body": "gaearon see though stuff explained docs would hurt though understand stuff goes beyond basics knowing needed anyway imho", "d": "11/2017"}, {"body": "always send doc prs balance hard cater broadest audience possible experience replying issues years people nt ready learn details learning react like could indeed benefit better explanation idea concisely express ideas send pr reconciliation page already marked advanced think fine add details", "d": "11/2017"}, {"body": "gaearon ok understand", "d": "11/2017"}, {"body": "fact refs called updates expected pass arrow function explained also mentioned ref documentation infinite loop sounds somewhat expected use ref callbacks setting fields settingclearing native event subscriptions unconditionally scheduling additional updates sounds like problem code like calling would problem trying solve", "d": "11/2017"}, {"body": "gaearon got thanks function reference works fine problem reacting dom element existing reactvirtualized windowscroller forceupdate called atom changes", "d": "11/2017"}, {"body": "nt think understand problem description ref callback anything setting field probably wrong place", "d": "11/2017"}, {"body": "line calling", "d": "11/2017"}, {"body": "one click caused actual click click caused call", "d": "11/2017"}, {"body": "click div click button triggers callback button", "d": "11/2017"}, {"body": "kunoky find chinese talk chinese", "d": "11/2017"}, {"body": "hi help one", "d": "11/2017"}, {"body": "sure", "d": "11/2017"}, {"body": "cool work send pr weekend", "d": "11/2017"}, {"body": "sent pr please let know looking", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "please report maintaining bindings said recommending use inheritance react components", "d": "11/2017"}, {"body": "yes changing props react elements nt change html output elements react like frameworks manipulate dom changes dom property attribute means css attribute selector wo nt work since changing luckily tho change css use pseudo selector instead", "d": "11/2017"}, {"body": "would nt using react lifecycle relying period time lifecycle methods flash text entirely problem state show long next example brevity javascript componentdidmount thiscyclestate const delay ms gt new promise resolve gt settimeout resolve ms async function cyclestate const num thispropsnums thissetstate text num await delay thissetstate text haha await delay nt flawless solution nt support changing props handling dismount etc", "d": "11/2017"}, {"body": "pretty much view source build publish scripts", "d": "11/2017"}, {"body": "thanks man", "d": "11/2017"}, {"body": "one proposal common case pattern string expects single warning array expects multiple warnings patterns normalized easy match component stack traces nice thing clearly scopes code supposed warn downside harder assert things throw warn wrap code twice else add new helper", "d": "11/2017"}, {"body": "another thing consider currently globally mock noisy could remove global mock every test throws inside react call stack would also log warning consumers open source maybe could solve extra matcher make configurable somehow fixed", "d": "11/2017"}, {"body": "break code boolean attributes emitted per spec far know", "d": "11/2017"}, {"body": "gaearon nt appear break code surely methods behave outputting boolean attributes feel free close unnecessary", "d": "11/2017"}, {"body": "afaik valid way write close feel strongly though feel free send pr removes empty quotes cases booleans think", "d": "11/2017"}, {"body": "ahh one user error typo reduced test case misunderstanding composition scenario thought ran first awesome far close", "d": "11/2017"}, {"body": "handled similar issue could try one try find invariants", "d": "11/2017"}, {"body": "sections code like", "d": "11/2017"}, {"body": "using code previous issue would also want add warnings lines amp", "d": "11/2017"}, {"body": "top level rendering component stack would nt useful inside component thinking", "d": "11/2017"}, {"body": "okay sweet implement component stack files implement change easy way determine inside component implement component stack every call files", "d": "11/2017"}, {"body": "easy way determine inside component look message says look examples invariant tests see something happens inside component", "d": "11/2017"}, {"body": "gotcha noticed invariants already component stack dev addendum lines remove dev put directly invariant", "d": "11/2017"}, {"body": "remove dev put directly invariant sounds reasonable", "d": "11/2017"}, {"body": "another difference development putting string ref functional component throws stateless function components refs production gives element ref specified string owner set", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "hey would interested taking stab one", "d": "11/2017"}, {"body": "hey question nt seem related react making requests js generally try general support avenues documented like keep issue tracker feature bug reports react thanks", "d": "11/2017"}, {"body": "use issue tracker bugs feature requests please refer appropriate support resources asking questions thanks", "d": "11/2017"}, {"body": "reproduce either react react", "d": "11/2017"}, {"body": "reproduce webpackbin", "d": "11/2017"}, {"body": "tryingtoimprove seems related webpackbin put following line onchange method notice value always empty string fact try log event throws exception try example jsfiddle react template seems work ok", "d": "11/2017"}, {"body": "hey vamsiampolu thanks report long standing issue number inputs chrome fixed handful prs work shipped ultimately much number inputs invalid numbers report empty string tampering input validation could cause unexpected behavior however think current solution resolves critical edge cases nothing typing returning empty string browser fires change event number input reports value however newer versions react respect user input instead wiping away value user sees screen edge case missed please let us know otherwise feel free give version shot", "d": "11/2017"}, {"body": "would mind contributing failing test verifies case", "d": "11/2017"}, {"body": "sure hopefully tomorrow cet", "d": "11/2017"}, {"body": "seems working behind proxy", "d": "11/2017"}, {"body": "gaearon nt think first problem occurs soon click log button get first error described initial question confused recall correctly similar issue different pc double check", "d": "11/2017"}, {"body": "provide exact instructions reproduce screenshots", "d": "11/2017"}, {"body": "gaearon well step enter site scrn step click login button scrn step dialog generated step click reload button get scrn", "d": "11/2017"}, {"body": "sure helps go revoke try login", "d": "11/2017"}, {"body": "aywa nt help", "d": "11/2017"}, {"body": "issue", "d": "11/2017"}, {"body": "cc jquense keep recommendation case", "d": "11/2017"}, {"body": "nt know proper recommended way way tests probably expose helper maybe depends use case tho guess think generally trying get underneath react event system answer may dragons", "d": "11/2017"}, {"body": "think js const setvalue objectgetownpropertydescriptor htmlinputelementprototype value set const event new event input bubbles true setvaluecall node test nodedispatchevent event bad need make sure documented somewhere easy find", "d": "11/2017"}, {"body": "think count documented one first google answers trigger input change event react close", "d": "11/2017"}, {"body": "thanks gaearon jquense updated fiddles working solution react react also added detail stack overflow", "d": "11/2017"}, {"body": "assigning part greatly appreciate insight", "d": "11/2017"}, {"body": "nt think bug react react child always fires parents ensures parent ready contains children time mounts eg case needs measure example inside therefore runs expected seeing number time measurement code yet added node body yet therefore still detached tree fix could append body immediately creating would able measure child immediately child mounts", "d": "11/2017"}, {"body": "hey developer evangelist circleci took look current config nt look complicated nt difficult switch circleci ping help needed unless create completely custom docker image good start might docker ruby images variant include nodejs closest using would image runs ruby lts release nodejs", "d": "11/2017"}, {"body": "using appveyor experience pretty slow maybe fine run master something fails know investigate post factum", "d": "11/2017"}, {"body": "closest using would image runs ruby thanks hint maybe fine run master sure ok leave send pr", "d": "11/2017"}, {"body": "done thanks help", "d": "11/2017"}, {"body": "happy take edit instead working veekas get started contributing react", "d": "11/2017"}, {"body": "sounds good", "d": "11/2017"}, {"body": "new contributor working swyx currently trying figure catch user trying set tips currently looking putting warning something like following changes made far reference thanks help", "d": "11/2017"}, {"body": "discussing veekas nt sure one either two questions test set test best guess stick test inside lifecycle method execution earliest place check", "d": "11/2017"}, {"body": "ca nt check nt understand relevant best guess stick test inside componentwillmount lifecycle method execution earliest place check thisstate sure mean original direction veekas makes sense test react component methods right instance created fact find react calls constructor file check right", "d": "11/2017"}, {"body": "sure coverage referring unit tests flow issue sounds pretty vague close always welcome improve", "d": "11/2017"}, {"body": "may missing something feel like expected behavior easily fixed tweaking code", "d": "11/2017"}, {"body": "happen regular dom listeners", "d": "11/2017"}, {"body": "gaearon looks like onclick attached disabled button event nt triggered", "d": "11/2017"}, {"body": "sounds like expected behavior", "d": "11/2017"}, {"body": "fwiw checked firefox chrome safari onclick triggers chrome safari nt check ie", "d": "11/2017"}, {"body": "thanks guys yep though react problem like normal html dom behavior share simple solution hack behavior project javascript const buttonelement disabled return return buttonelement", "d": "11/2017"}, {"body": "nt think expected behavior fiddle shown using dom events trigger click icon within disabled button different clemdelp observed behavior", "d": "11/2017"}, {"body": "thysultan chance checking firefox check fiddle chrome safari see event triggered although may correct react issue", "d": "11/2017"}, {"body": "rstims observed fiddle chrome osx safari emits event device edit unsure spec defines correct behavior", "d": "11/2017"}, {"body": "browsers notoriously inconsistent generally disabled elements emit events probably prevent event direct target think spec bit unclear maybe legacy behavior case pretty dang certain browser difference react bug could wrong seeing click icon fire chrome mac way thysultan", "d": "11/2017"}, {"body": "extensions disabled case bc inline events get browsers chrome emit firefox emit chrome canary emit safari emit safari technical preview emit", "d": "11/2017"}, {"body": "definitely getting alert popping chrome sure difference observed behavior", "d": "11/2017"}, {"body": "replacing click works firefox chrome safari however like also nt emit firefox well machine chrome firefox different behavior safari firefox different behavior mouseup sure could causing difference jquense rstims chrome observations tried using instead inline events removing dependency thought could obscuring result pointerevents changes also yield results", "d": "11/2017"}, {"body": "either case tho nt see much evidence react related seems solely differences browsers treat disabled elements mouse events yeah", "d": "11/2017"}, {"body": "yes likely clemdelp also observed differences firefox example original post probably case", "d": "11/2017"}, {"body": "confirm react issue really browsers treat disabled element problem chrome amp safari", "d": "11/2017"}, {"body": "would like make pr may take sone time invesitigate test l", "d": "11/2017"}, {"body": "well first want definitely looks cleaner cons", "d": "11/2017"}, {"body": "agree reads bit better think mostly intended experimental api first turned necessary thought changed stable last minute nt quite fixed ergonomics however bigger issue portals featurecomplete ideally want add support server rendering way eg letting container string also wanted support crossrenderer portals thought point would move api namespace since would longer dom specific think overall agree needs done prefer time changes make nt think changes trivial though require discussion", "d": "11/2017"}, {"body": "marked good first issue event system beast happy walk interested contributor", "d": "11/2017"}, {"body": "hello nhunzaker like work issue files suggest looking two linked", "d": "11/2017"}, {"body": "totally curious main consumer reactdomfibercomponent asks reactbrowsereventemitter listen events events delegated document related dom element reactdomfibercomponent uses internal function finds document requesting event subscribed reactbrowsereventemitter figures events need attached particular event type react polyfils things like sets bunch normalization around change events inputs emitter enumerates event types need attached says already attached start listening gets change suggesting function aliasing event names different browsers think nt happen phase normalize ahead time assigning correct wheel event type might also able remove others might true let take one step time", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "fixed thanks cristidrg", "d": "11/2017"}, {"body": "nt know clear consider bug react general question please ask stackoverflow sure specific react please provide minimal reproducing case instructions take look", "d": "11/2017"}, {"body": "please provide reproducing project", "d": "11/2017"}, {"body": "mapset polyfill using seen problem bad polyfill", "d": "11/2017"}, {"body": "polyfillio ca nt pass whole project able isolate issue minimal code surely provide still working", "d": "11/2017"}, {"body": "try another polyfill give feedback", "d": "11/2017"}, {"body": "polyfillio expected fixed nt think anything wrong react although nt know fix nt help maybe getting old version somehow", "d": "11/2017"}, {"body": "yeah updating polyfill service job right react bug thank help nt able find linked issue via search bar google hope error issue title enough others find needed", "d": "11/2017"}, {"body": "intentional said behavior pretty much undefined case always key elements react warns nt", "d": "11/2017"}, {"body": "performance reasons makes correct case slower always check duplicates track", "d": "11/2017"}, {"body": "reproduce safari version", "d": "11/2017"}, {"body": "see", "d": "11/2017"}, {"body": "jquense issue nt affect number inputs inputs safari simplified jsbin example illustrate please reopen issue agree", "d": "11/2017"}, {"body": "bin still using number inputs", "d": "11/2017"}, {"body": "sorry trouble getting fiddle sites run safari expected behavior nonenumber controlled inputs behavior seen number ones least covered", "d": "11/2017"}, {"body": "jquense jsbin caching little aggressive snapshot exact changes moment getting intermittent jsbin ymmv", "d": "11/2017"}, {"body": "still seeing bin number input post code behavior seeing vs expect", "d": "11/2017"}, {"body": "jquense stand corrected thought seeing jsbin nt accurate expected probably due strange caching definitely covered apologies red herring confusion", "d": "11/2017"}, {"body": "hi johnunclesam mistaken expected behavior uncommenting inside render method render whatever returned render method see composing components react docs", "d": "11/2017"}, {"body": "thanks nt find anything related issue know fault wher fall miss react rerender time code simply component", "d": "11/2017"}, {"body": "could perhaps something like since looks like jsx duplicate sidebarjs import react component react import browserrouter router route navlink reactrouterdom import menu menu class sidebarexample extends component render return export default sidebarexample", "d": "11/2017"}, {"body": "use issue tracker react bugs feature requests looks like question please use appropriate venue support requests thanks", "d": "11/2017"}, {"body": "nt seem", "d": "11/2017"}, {"body": "huh release worked think cut new work ready merge stable", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "issue reopened", "d": "11/2017"}, {"body": "something simple along lines warning please use camel case property names mean tabindex", "d": "11/2017"}, {"body": "could take", "d": "11/2017"}, {"body": "nobody working could take imho warning please use camelcase property names rather html standardized ones natural work around js would straightforward", "d": "11/2017"}, {"body": "thomasyimgit working moment", "d": "11/2017"}, {"body": "issue resolvedtaken facebook told wait weeks inactivity asking honest seems like rewording good rewording nt sufficient elaborate bit refine", "d": "11/2017"}, {"body": "wrap topmost component using using remove cryptic errors print beautiful error message browser console easily debug read errorboundaries official react website", "d": "11/2017"}, {"body": "oh thanks nt realize thing already", "d": "11/2017"}, {"body": "specific cryptic error either bug react consequence real error app app swallowed catch block either case upgrading react solve issue", "d": "11/2017"}, {"body": "gaearon true react still error code since message cryptic hard understand comes thanks suggestions", "d": "11/2017"}, {"body": "enable break exceptions chrome debugger stop original error code let trace error actually happens catch block accidentally swallows", "d": "11/2017"}, {"body": "seems like removed intentionally", "d": "11/2017"}, {"body": "yes please see commit message details", "d": "11/2017"}, {"body": "mind creating small project demonstrating", "d": "11/2017"}, {"body": "gaearon created new ssr react app seems like html entities cause match error within component triggering match error wondering error caused whole function looks like nt taking account usage html entities super familiar code base could see would issue thought correct", "d": "11/2017"}, {"body": "issue encoding issue need either following http header", "d": "11/2017"}, {"body": "iamdustan works think accidentally deleted point firefox displays error screenshot chrome nt even come close", "d": "11/2017"}, {"body": "way could detect show better warning", "d": "11/2017"}, {"body": "gaearon sure super intimate library guess react could detect document encoding initial mount throw error log message specified initial document maybe react could possibly add encoding document default nt specified", "d": "11/2017"}, {"body": "want dig happens", "d": "11/2017"}, {"body": "gaearon would interested taking look alansouzati okay", "d": "11/2017"}, {"body": "sure ok want investigate let know need help", "d": "11/2017"}, {"body": "running problems testing portals cra project well different failure tried reproduction case nt sure alansouzati defined tried error getting fail srcdropspecjs drop renders drop renders separate issue something wrong", "d": "11/2017"}, {"body": "hello esturcke encountered issue hit error also tried using mock ref documented test renderer obviously needs remain separate reactdom think mocking createportal extending test renderer make easier mock createportal similar ref mocking sorry delay vacation", "d": "11/2017"}, {"body": "hi could please provide detail ability reproduce error", "d": "11/2017"}, {"body": "closing clear problem details", "d": "11/2017"}, {"body": "cc jquense aweary rush", "d": "11/2017"}, {"body": "browser versions supported cc sophiebits probably fix otherwise ignore guessing safari versions probably still supported", "d": "11/2017"}, {"body": "feel free push tag", "d": "11/2017"}, {"body": "done", "d": "11/2017"}, {"body": "nt think describing anything jsx syntax browser behavior silently dropping invalid style values validating proposed clear sensible way read past discussion", "d": "11/2017"}, {"body": "maybe one help", "d": "11/2017"}, {"body": "maybe", "d": "11/2017"}, {"body": "meh tangential try also ahfarmer created early stage", "d": "11/2017"}, {"body": "yep built javascriptstuffcom couple weeks ago people said useful still need lot feedback reactspecific lists components example apps starter projects tutorials things see people looking johnunclesam help looking", "d": "11/2017"}, {"body": "ahfarmer yes example ca nt find something like reduxorm", "d": "11/2017"}, {"body": "johnunclesam site nt exhaustive made lists think important plan making flux list though add reduxorm searching flux tools assuming nt actually searching reduxorm already knew reduxorm would nt need search", "d": "11/2017"}, {"body": "went ahead made state managersflux list making list realized ton reduxspecific utilities reduxsaga reduxthunk reselect name maybe next weekend make redux list", "d": "11/2017"}, {"body": "jimyaghi hi tried codepen chrome nt see issue console tied windows mac neither show", "d": "11/2017"}, {"body": "trueadm make sure check default levels verbose console believe related", "d": "11/2017"}, {"body": "skiritsis sure missed option thanks sure simple fix unless employ ideas", "d": "11/2017"}, {"body": "guys absolutely right looks like discussion around already sorry", "d": "11/2017"}, {"body": "make array instead remember specify key", "d": "11/2017"}, {"body": "thanks ahhh", "d": "11/2017"}, {"body": "code probably reading somewhere moved separate package", "d": "11/2017"}, {"body": "think sip method synthetic even would prozy since nt anything synthetic event system would change need implemented given components ever one handler per event anyway would nt opposed adding convenience think hides fact sip nt supported react browsers though maybe gone", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "hican pick", "d": "11/2017"}, {"body": "hey like take look submit pr issue", "d": "11/2017"}, {"body": "hardikmodha first", "d": "11/2017"}, {"body": "gaearon pushed commit fix issue thank giving opportunity first little open source contribution", "d": "11/2017"}, {"body": "thanks sending fix", "d": "11/2017"}, {"body": "put elements specific holes statically known jsx structure react knows divs ca nt possibly reorder think would sort without changing code therefore safe implicitly key index", "d": "11/2017"}, {"body": "gaearon think got case react still attached keys though implicitly", "d": "11/2017"}, {"body": "kind whether react really attaches key implementation detail behaves keys set child indexes case safe knows never reorder", "d": "11/2017"}, {"body": "gaearon think got come back later though reasons could answer even read docs", "d": "11/2017"}, {"body": "docs nt really mention also bit obscure corner people nt often ask", "d": "11/2017"}, {"body": "gaearon yeah nt like take things granted rather understand really works ppl like would useful docs", "d": "11/2017"}, {"body": "always ask technically minded users always happy provide insight things really work", "d": "11/2017"}, {"body": "appears browser native behavior sure anything react additionally curious using anchor tag way used label prevents need prevent default action anchor tag using label ensures clicking show map activate checkbox also helps screen readers", "d": "11/2017"}, {"body": "yeah seem like react anything wrong", "d": "11/2017"}, {"body": "thanks replies noticed behavior used reactbootstrap solve way", "d": "11/2017"}, {"body": "thanks report also reproduce bug", "d": "11/2017"}, {"body": "could related", "d": "11/2017"}, {"body": "also reproduce bug app thanks report edit next comment also ended applying fix obviously hurts accessibility users still triggering error right clicking translate x chrome meta tag removes topbar translation suggestion", "d": "11/2017"}, {"body": "think isolate bug bit example output contents line", "d": "11/2017"}, {"body": "using two transforms development build library suitable development may produce false positive warnings babel documents consistently please remove development build library", "d": "11/2017"}, {"body": "thanks dan abramov", "d": "11/2017"}, {"body": "nice find definitely seems like bug", "d": "11/2017"}, {"body": "work react", "d": "11/2017"}, {"body": "like make pr fix bug reproduce mac locale value cvlmtg", "d": "11/2017"}, {"body": "gaearon sure react test found app started developing recently used react day one sjy", "d": "11/2017"}, {"body": "gaearon modified previous fiddle include react instead react seems bug still plus deprecation message passing value string", "d": "11/2017"}, {"body": "tried could reproduce macos chrome safari even changing locales suggested cvlmtg could high sierrarelated bug", "d": "11/2017"}, {"body": "regardless worth checking serialize string values google locale affect methods", "d": "11/2017"}, {"body": "oxlay could related os language rather browser config soon spare time try set browser config plain english see still bug", "d": "11/2017"}, {"body": "go related code csspropertyoperations seems problem nothing reactdom react besides found interesting issue electron reporting similar issue caused specific version chromiums decimals numbers styles formatted incorrectly guys report issue chromiun cvlmtg didt make reproduce issue please upgrade chrome try see case happens", "d": "11/2017"}, {"body": "reviewed relevant code well could nt find part may problematic however finally managed reproduce bug launching chrome cli thanks sjy findings led right direction tests looks like bug related os language setting rather lang environment variable set bug appear set instance nt try others bug appears could nt reproduce yet safari cvlmtg launching chromesafari cli confirm environment variable", "d": "11/2017"}, {"body": "sjy chrome already latest version oxlay yes lang set itit launch chrome cli run finder like app edited added fiddle simple code result looking issues linked sjy looks like chrome something value assigned style property even string passed formatted correctly seems issue related chrome react", "d": "11/2017"}, {"body": "tried write similar code without react determine reproducible dom apis", "d": "11/2017"}, {"body": "sorry nt beginner learning things free time", "d": "11/2017"}, {"body": "try handle nobody", "d": "11/2017"}, {"body": "bonusrk like help please try create reproducing case without react see react causing issue", "d": "11/2017"}, {"body": "gaearon already asked question stackoverflow someone tried reproduce bug jquery although attempts failed far however sure whether two approaches comparable failing reproduce bug jquery mean bug chrome", "d": "11/2017"}, {"body": "try repro vanilla dom api", "d": "11/2017"}, {"body": "thats found chrome also try mac needed chrome dev tools mobile issue starter made functions also made seperate know ontouchstart invokes events investigated invokes fast second event invokes current mouse position move mouse pretty fast block second block deleted touch first block se console second event invokes coords newblock appears time mousedown event get target delete prevent situation every actions function well cant say solution anyway stuff happens vanilla js issue starter said new made maximum basic code get collection divs const boxes documentgetelementsbyclassname box consolelog boxes click handler function onmousedown e epreventdefault wont stop double delete consolelog click target id gt etargetid click event info consolelog event type gt etype event x gt eclientx event gt eclienty const id etargetid link element delete documentgetelementbyid id remove ontouchstart handler function ontouchstart e epreventdefault stops double delete use touches object get touch event data consolelog touchstart target id gt etouches targetid consolelog event type gt etype event x gt etouches pagex event gt etouches pagex const id etouches targetid delete touch events documentgetelementbyid id remove add eventlistener click arrayfrom boxes foreach function item arr itemaddeventlistener mousedown onmousedown add eventlistener touch arrayfrom boxes foreach function item arr itemaddeventlistener touchstart ontouchstart", "d": "11/2017"}, {"body": "seems like react bug", "d": "11/2017"}, {"body": "yes assume even moreit chrome specific problem think", "d": "11/2017"}, {"body": "vanilla js solution behaves differently safari iphone react solution squares disappear safari js implementation whereas react solution works way wanted work strange", "d": "11/2017"}, {"body": "well known safari event flowyou need use make safari make thing way also seems browserspecific problem", "d": "11/2017"}, {"body": "bonusrk sorry completely lost point line comment react code call touch start move line comments code bug disappears sorry afraid understand something see equivalent vanilla js code line comments bug would longer reproducible vanilla js", "d": "11/2017"}, {"body": "commented let bug happens show bug appears vanilla js yes uncomment lines bug disappear", "d": "11/2017"}, {"body": "agree vanilla js code indeed demonstrates bug green square must receive events blue square bug chrome still confuses react code call touch start mouse event fire vanilla js code indeed stops bug react guess answer something synthetic events calling synthetic event real event vanilla js", "d": "11/2017"}, {"body": "problems man try investigate part reactbased code emulate vanila part", "d": "11/2017"}, {"body": "well represented everything could vanilla code placed public touchevent defaultprevented false mouseevent defaultprevented true see mouseevent captures event preventions toucheevent doesnt even tried event types prevention synthetic event nativeevent gaearon btw seems issue relations digging part reactdomdevelopmentjs", "d": "11/2017"}, {"body": "well say seems new chrome touch handling made performance improve makes fires delay makes uncontrollable inside native looks like walkaround even reactway think", "d": "11/2017"}, {"body": "think two things done vanilla javascript code prepared shows bug chrome bug wo nt fixed unless somebody submits bug report meantime workaround needed could expand idea code solve issue please", "d": "11/2017"}, {"body": "baharev updated example repo walkaround repo pretty ugly way wrote basic code add native event listeners like events like added native event killed saying best least clever solution works mac chrome chrome devtools mobile", "d": "11/2017"}, {"body": "great thanks ugly working solution still better beautiful working one question submit bug report chrome", "d": "11/2017"}, {"body": "baharev work nt try windows", "d": "11/2017"}, {"body": "bonusrk nt tried yet try windows linux might able try linux later week submit bug report chrome", "d": "11/2017"}, {"body": "baharev well think glorious explorer bug rights create get honor deserved", "d": "11/2017"}, {"body": "bonusrk ok bug report later week let know whether suggested workaround works linux android test windows sorry many thanks help", "d": "11/2017"}, {"body": "baharev try window evening let know platformspecific handling solution sure work everywhere", "d": "11/2017"}, {"body": "bonusrk confirm suggested workaround works linux firefox chrome iphone safari android tablet chrome think get away workaround thanks", "d": "11/2017"}, {"body": "bonusrk submitted bug report chromium project greatly appreciate help", "d": "11/2017"}, {"body": "baharev always welcome", "d": "11/2017"}, {"body": "happy take pr nt think important important functions named ca nt come non convoluted name callback though leave like", "d": "11/2017"}, {"body": "thanks quick reply btw plan implementation note fiber stack one awesome would great react team elaborate fiber", "d": "11/2017"}, {"body": "eventually unless somebody else writes us", "d": "11/2017"}, {"body": "waiting gaearon", "d": "11/2017"}, {"body": "kaybarax hey weekend", "d": "11/2017"}, {"body": "mweststrate oh bad cool", "d": "11/2017"}, {"body": "gon na go limb say batching multiple tick", "d": "11/2017"}, {"body": "going vacation next week probably go tuesday try reply monday", "d": "11/2017"}, {"body": "function enqueueupdate component ensureinjected various parts code reactcompositecomponents rendervalidatedcomponent assume calls render nt nested verify case called toplevel update function like setstate forceupdate etc creation destruction toplevel components guarded reactmount batchingstrategyisbatchingupdates batchingstrategybatchedupdates enqueueupdate component return dirtycomponentspush component componentupdatebatchnumber null componentupdatebatchnumber updatebatchnumber", "d": "11/2017"}, {"body": "mweststrate cents valid question sure agree would much easier reason state setstate synchronous whatever reasons make setstate asynchronous sure react team well compared drawbacks would introduce eg difficulty reason state confusion brings developers", "d": "11/2017"}, {"body": "mweststrate interestingly asked question", "d": "11/2017"}, {"body": "reproduction available", "d": "11/2017"}, {"body": "fix happy take pr", "d": "11/2017"}, {"body": "hope put pr together sometime todaytonight ran time last night", "d": "11/2017"}, {"body": "super happy solution seems easier maybe break longer term would encourage use mocking solutions nt require monkeypatching public apis possible would break node ships es modules react offers es module version anyway", "d": "11/2017"}, {"body": "thats valid point really appreciate understanding keep working time testing advocate caught eye static nature es module imports early really surprised nt seen concern js testing community likely tools like babel insulated things enough nt forced yet wrong way require pretty drastic changes testing approaches js projects keep testable expect dependency injection applevel coordination along lines ioc container become required nt seem momentum behind solutions yet outside angular nice see ecosystem evolve mature little bittersweet see current simplicity approachability testing js headed toward significantly complexity hope reasonable solutions emerge time react others start publishing versions cause current approaches longer valid thanks understanding helping get resolved time first contribution react pretty painless well thanks", "d": "11/2017"}, {"body": "expect dependency injection applevel coordination along lines ioc container become required nt seem momentum behind solutions yet outside angular case react people commonly use jest implements module system anything guess less helps problem agree expect people raise concerns time", "d": "11/2017"}, {"body": "fix", "d": "11/2017"}, {"body": "implements module system anything interesting tried since days really slow since pretty happy combination found solution mix handling truly static imports yet holding time found feature truly set apart managing module system keep static imports testable might feature thanks ton following mentioning heard yet investigate", "d": "11/2017"}, {"body": "nt make job epreventdefault gt", "d": "11/2017"}, {"body": "answer correct react support returning event handlers purpose please explicit trying stop propagation prevent default", "d": "11/2017"}, {"body": "please look syntax fontfamily helvetica neue see one extra", "d": "11/2017"}, {"body": "finally tracked issue trying upgrade similar issue case unit test trying stub using sinon see export frozen results following error thrown test frozen intentionally suggested work around testing", "d": "11/2017"}, {"body": "typo writing pseudo code actual syntax correct travi took figure deal spreads even strings copied reference frozen prevents future modifications destination object overall inspite may give performance gains think freezing takes adds react team thoughts", "d": "11/2017"}, {"body": "appears frozen source assume gets added transpilation", "d": "11/2017"}, {"body": "nt necessarily think issue described op issue related could please create minimal example reproducing definitely caused rollup transpilation fix changing server bundle entry points like default rather named export like reactdom check like great fix long term would work want send pr fix issue original post less clear need reproducing example one actually convinced bug react freeze props style objects would nt freeze individual props object containing unless somehow passing prop style object something need see whole code say", "d": "11/2017"}, {"body": "thanks quick response try get repro together tonight see follow suggestion well enough put quick pr together pretty sure follow look little deeper little time confirm since think unrelated would rather create separate issue simplify tracking one", "d": "11/2017"}, {"body": "since think unrelated would rather create separate issue simplify tracking one yes please", "d": "11/2017"}, {"body": "split", "d": "11/2017"}, {"body": "could nt reproduce issue fiddle created mine may caused something else investigate thanks far", "d": "11/2017"}, {"body": "think happening passing dom element case course allowed mutate later allowed mutate objects pass styles react style different rerenders hard debug common source bugs started freezing styles mutating styles deprecated react run sort code react warn mutating style wo nt work future version react react tightened hope helps", "d": "11/2017"}, {"body": "note comment freezing style objects new mutating deprecated earlier freezing props props frozen since react two years ago freezing nt work recursively objects get frozen objects put props exception objects end styles new behavior however people bumped converted code classes thus opted strict mode strict mode js engine throws mutation frozen object opposed silently discarding normally opt strict mode top file using babel currently always emits iirc using es modules per spec nt either convert code use classes opt strict mode methods makes silent failures visible", "d": "11/2017"}, {"body": "sure well would work love see example need change recall correctly", "d": "11/2017"}, {"body": "gaearon like work", "d": "11/2017"}, {"body": "sounds good", "d": "11/2017"}, {"body": "interested beginnerfriendly issue make pr asap", "d": "11/2017"}, {"body": "please review pr", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "guess updated please update packages restart development server", "d": "11/2017"}, {"body": "updated also reinstall also removed packagejson still get version reactdom correct react nt updated package version reactdom", "d": "11/2017"}, {"body": "try creating new project running get version nt might behind outdated npm proxy nt know ca nt update project version packages npm months please bring npm keep running issues correct react nt updated package version reactdom nt understand asking", "d": "11/2017"}, {"body": "gaearon thanks nt know reactdom also released new version every time reinstall reactdom npm gives installed manually works", "d": "11/2017"}, {"body": "sorry please delete issue mistake", "d": "11/2017"}, {"body": "hey take", "d": "11/2017"}, {"body": "mzubairahmed", "d": "11/2017"}, {"body": "could please guide start issue thank", "d": "11/2017"}, {"body": "search code read add check", "d": "11/2017"}, {"body": "got", "d": "11/2017"}, {"body": "done", "d": "11/2017"}, {"body": "taken mzubairahmed", "d": "11/2017"}, {"body": "child component leaving suspense", "d": "11/2017"}, {"body": "problem children get updated container shouldcomponentupdate return false nt happened", "d": "11/2017"}, {"body": "gespiton unfortunately helpful without reproducing example", "d": "11/2017"}, {"body": "gaearon code repo might seem complicated point every time type children rerendered log says open maincss toggle porject view see complete page would nice help", "d": "11/2017"}, {"body": "code looks odd", "d": "11/2017"}, {"body": "oh misunderstanding props state change later problem maybe make simplified repo", "d": "11/2017"}, {"body": "yes simplifying would great", "d": "11/2017"}, {"body": "going close certain tracked issue reactbroadcast reactbroadcast provides reliable way react components propagate state changes descendants deep component hierarchy bypassing intermediaries return false shouldcomponentupdate still appears subtle difference react react broadcast scu skipping utterly unable make minimal repro appeared one small edge case products", "d": "11/2017"}, {"body": "imho way go im opposed default export shouldnt used reexport stuff like example", "d": "11/2017"}, {"body": "shouldnt used reexport stuff like example technical reason aside two ways thing impression people would import use default would nt problems tree shaking since default would stay unused maybe overestimate rollup etc", "d": "11/2017"}, {"body": "questions probably best answered lukastaegert ai nt sure something changed since also rollup tree shaker webpack treeshaking algorithm worse one rollup usage probably way higher rollup tools excellent jobs ofc nt want offend anyone stating facts community help tools whenever", "d": "11/2017"}, {"body": "treeshaking going anything react case given everything preprocessed single flat bundle wonder primary import style react personally tend treat like default export eg occasionally named thing", "d": "11/2017"}, {"body": "gaearon already stated elsewhere size improvements case react expected minimal nevertheless advantages reactchildren might probably removed cases heard react hoisted top scope module bundlers support could remove quite bytes might also grant ohsoslight performance improvement main improvement would lie fact need another variable references every module one shared everywhere rollup usually also though guessing might reduce chance webpack moduleconcatenationplugin bailing static analysis react easier module bundlers also eg ides tools many tools already reasonable job cjs modules end lot guessing involved side modules analysis nobrainer kind exports course named export really provide benefit easy treeshaking unless use gcc might able little aggressive move maybe latest rollup really lucky question provide default export well difficult decide pro painless migration existing code bases eg jquense describes con since everything attached common object object included keys included defeats attempts treeshaking even gcc might hard time twoversion migration strategy might add default export next version compatibility purposes declared deprecated might even display warning via getter etc remove later version", "d": "11/2017"}, {"body": "also interesting case monkeypatching testing bit shady want conscious breaking workaround", "d": "11/2017"}, {"body": "came via twitter conversation clear correct answer question react reactdom export named exports objects contain state libraries mutate attach properties notwithstanding reason exist place put words namespaces imported also makes life easier bundlers neither course present breaking change people currently using default import transpiling lukastaegert probably right idea using accessors print deprecation warnings could removed version perhaps nt readymade suggestion though perhaps shipping esm would wait reason anyway case need worry deprecation warnings", "d": "11/2017"}, {"body": "people really come like convincing give might difficult guess bad even bit odd clarify need scope case namespace jsx transpiles could break jsx say depends global function instead imports would look like maybe okay huge change would also mean react umd builds need set suggesting instead well already overloaded okay qualifier without claiming global much tbh super excited either options think would probably best middle ground keep jsx transpiling default", "d": "11/2017"}, {"body": "confession always found slightly odd explicitly import order use jsx even though actually using identifier anywhere perhaps future transpilers could insert configurable sake preact etc encountering jsx nt already exist way need namespace import would taken care automatically", "d": "11/2017"}, {"body": "distant future maybe need make sure transpilers work module systems commonjs globals making configurable also hurdle splits community", "d": "11/2017"}, {"body": "richharris suggested inserting specific import jsx used easily done transpilers plugin community would upgrade course even existing setups would still work one adds file course need consider module systems nt seem like hard problem solve specific gotchas mind", "d": "11/2017"}, {"body": "course need consider module systems nt seem like hard problem solve specific gotchas mind know specific suggestion handle would default babel jsx plugin", "d": "11/2017"}, {"body": "people really come like people come forth may mock thee", "d": "11/2017"}, {"body": "lot pretty sure seen places", "d": "11/2017"}, {"body": "default moment reactcreateelement would pretty much stay problem assumes global already available scope think es modules basically standard way although yet adopted modules reasonable assume majority use vast majority already uses various build step tools create bundles even true discussion talking transpiling jsx syntax changing default behaviour jsx plugin auto insertion scope imho reasonable thing perfect time change babel coming soon ish recent addition babelhelpermoduleimports also easier ever insert right type import escjs file configurable bail today behaviour assuming present scope seems really like minor change configuration needed minority users improvement sure big one still majority", "d": "11/2017"}, {"body": "work", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "maybe fiddles may work modern browsers please compare results react working fine results react working properly", "d": "11/2017"}, {"body": "look working relevant code", "d": "11/2017"}, {"body": "okay checked detail result opinion bug first vs thing like reactdevelopment vs reactproduction thing unfortunatelly two jsfiddle examples used production modules example dev modules example use react production modules example also works reason react development module use createelement directly production module uses function called createelementwithvalidation instead details see createelementwithvalidation function uses local function called validatechildkeys iterates item arrayiterableiterator child check whether key attributes set properly details see iterator fully iterated contrast iterator aggregate aka iterable items external iterator rendered browser second time reactdom tries iterate iterator get results interested details check maybe google internal iterator vs external iterator personal opinion always bad idea pass iterators around directly though know unfortunatelly unnecessarily done quite often iterators always internal state modified iteration step less hidden side effect sooner later source trouble like issue someone uses iterators directly iterators used locally cases iterator aggregates used instead iterators iterator aggregates something like internal iteration state create new internal iterator time necessary means use javascript const elements function yield yield yield instead always use something like personally prefer use seq class specialized lazy sequencing filter map reduce etc allows things like", "d": "11/2017"}, {"body": "iterator fully iterated contrast iterator aggregate aka iterable items external iterator rendered browser second time reactdom tries iterate iterator get results oh get pretty subtle", "d": "11/2017"}, {"body": "thanks guys using method returns iterator instead list results discussion part official react documentation fill another issue would helpful see difference dev production modes see iterators supported workaround dev", "d": "11/2017"}, {"body": "possible us warn pass wrong thing somehow agree confusing hand good ends broken development mode least case notice would worse worked development broke production could document nt see good place ideas please raise docs repository", "d": "11/2017"}, {"body": "mcjazzyfunky could please provide source code class try develop filter map reduce etc seems easy", "d": "11/2017"}, {"body": "example seq implementation class seq constructor fn symboliterator fn let val val new map consolelog let v new seq valvaluesbind val consolelog v consolelog map let v new seq valvaluesbind val map num gt num consolelog v consolelog filter odd let v new seq valvaluesbind val filter num gt num consolelog v result", "d": "11/2017"}, {"body": "askoretskiy really like seq implementation also like see implementations asked look seq class facebook immutable library unfortunatelly afaik something like seqfrom function yet big deal add maybe could open feature request implement function like also implemented seq class important alpha state never used production part small library completely rewritten typescript soon time mean feel free copy code ideas seq implementation use directly small library part also please aware wanted seq class also useful pure programs without using transpiler like babel symboliterator method may seem little strange overcomplicated always use higher surely overkill way done example surely better solution also please aware implementation optimized seqs based arrays afaik facebooks seq classes optimized javascript create array undedfined elements const array new array following works work constant time optimization implemented yet array case const size seqfrom array count also please copy bind stuff solution surely much better using bind last least maybe interested following benchmarks show performance difference different ways iteration", "d": "11/2017"}, {"body": "mcjazzyfunky thanks may extend implementation new tricks yes one could write really lean code opts use", "d": "11/2017"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "11/2017"}, {"body": "see link error boundaries documentation next error directly likely link leads said think errors event handlers would still displayed twice little unfortunate nt prevent fixing", "d": "11/2017"}, {"body": "gaearon trying understand error thrown detected case thrown react browser consider error shown thrown browser", "d": "11/2017"}, {"body": "nt work facebook go ahead answer since know answer yes much intended think confusing destructuring assignment works component rendering local variables since destructuring props get new variables mdn destructuring assignment syntax javascript expression makes possible unpack values arrays properties objects distinct variables", "d": "11/2017"}, {"body": "right compiled code looks like nt local variable filled value possible react know component written way possibly fill props create element", "d": "11/2017"}, {"body": "reason webpack would look unless directly importing file somewhere library directly importing file somewhere configuration use disk caching solution disk cache corrupted stale please bring webpack provide reproducing project experience consistently", "d": "11/2017"}, {"body": "also probably would nt hurt good old delete nodemodules run npm install dance", "d": "11/2017"}, {"body": "haha yeah gaearon purged nodemodules startling number times nt expect react team much explanation figured post issue case anyone else happened run thing circle back findings thanks dan", "d": "11/2017"}, {"body": "yeah sorry running create isolated example consistently reproduces try look", "d": "11/2017"}, {"body": "thanks report note using setstate callback componentwillmount nt make lot sense use conponentdidmount instead", "d": "11/2017"}, {"body": "agree generally never use componentwillmount one reason see use componentwillmount lets share logic calls setstate parts component upgrading project react noticed places used issue could implemented different way feel like incorrect makes sense behave expected", "d": "11/2017"}, {"body": "yeah fair wan na take stab adding failing test fixing", "d": "11/2017"}, {"body": "think needs done instead calling methods immediately store field call finished mounting updating", "d": "11/2017"}, {"body": "yea take look may time finish today though sure important finish since hard use constructor componentdidmount instead feel like huge deal though especially patch release done already changed spots project breaking pretty easy", "d": "11/2017"}, {"body": "already cut seems okay since probably broken", "d": "11/2017"}, {"body": "hi gaearon bdwain taking look issue earlier might come test reproduce bug patch fix assigned bdwain want step shoes send pr happy push code guys take look maybe get insights ok", "d": "11/2017"}, {"body": "problem chance anything yet lets go", "d": "11/2017"}, {"body": "thanks bdwain sent pr", "d": "11/2017"}, {"body": "closed", "d": "11/2017"}, {"body": "always implementation detail think plan emit extra attributes aid developer tools try detect react page officially supported react devtools extension detect react recommend use purpose really want try looking nodes properties starting dom nodes managed react currently guarantee future", "d": "11/2017"}, {"body": "duplicate hesitant html caseinsensitive technically behavior correct even little surprising absolutely nothing wrong emitting attributes casing even would perfectly understood browsers difference would completely unobservable clientside code though potentially fix less surprising confident lead slight performance regression might worth need data people using ssr production tell would problem", "d": "11/2017"}, {"body": "think problem maybe rollup", "d": "11/2017"}, {"body": "think try use run yarn version support feature", "d": "11/2017"}, {"body": "yes nt support using npm development anymore please run", "d": "11/2017"}, {"body": "yes thank much fault", "d": "11/2017"}, {"body": "react supports browsers implement react also depends map set requestanimationframe described please make sure polyfill older browsers hundreds different browsers ca nt give advice specific ones hope helps verify android supports polyfilled map set raf still nt work please provide exact error messages look", "d": "11/2017"}, {"body": "sure flag even intentionally supported think used private marker never intended public api relied implementation details changed granted jquense suggested still nt think public api provide full isolated example trying maybe answer could helpful", "d": "11/2017"}, {"body": "thanks response full isolated simple example follows using react input using react input per example click submit button react value changed react works due use simulated dispatch event basically use pure js jquery without react access enter values input fields within form rendered react earlier form input fields rendered react formsite updated react pure js way simulating input value change stopped working looking quickly know trigger simulate input value update follows right dispatch event sequence method react unsure use reacttestutils simulate method injecting react reactdom standard scripts nt access original form react implementation prefer trigger html dom js guess unreliable wondering using reacttestutils standalone trigger input change work", "d": "11/2017"}, {"body": "basically use pure js jquery without react access enter values input fields within form rendered react expand need exactly clear constraints", "d": "11/2017"}, {"body": "interact react based website form proprietary web browser use external form browser limited access external scripts one legacy systems interact modern spa web page trigger form submission legacy system supports js jquery may deprecated really need figure trigger input value change worked past put inline js code possibly external js url refer external library use reacttestutils simulate method hoping situation trying resolve possible interim", "d": "11/2017"}, {"body": "call component instance renders input take different value", "d": "11/2017"}, {"body": "yep could using console outside react scope example codepen nt direct access react component global scope console used example outside react scope access edit", "d": "11/2017"}, {"body": "put reference component onto input example", "d": "11/2017"}, {"body": "yeah intended public api nt even intended make workaround prevent breaking change minor bump better story perhaps correct way work around outlined vanishingly usecases though need get underneath event system like suggesting nt one usecases would try almost anything else p since generally outside consider reasonable interop none react interactions", "d": "11/2017"}, {"body": "research react source code got hack method react notice hack", "d": "11/2017"}, {"body": "vchyzhevskyi please provide example reproducing issue along details ca nt reproduce issue latest beta", "d": "11/2017"}, {"body": "aweary hi brandon forgot mention use serverside rendering clientside rendering example seems works fine server returns html without text guess problem server side please let know ca nt reproduce issue setup blank repo code show necessary", "d": "11/2017"}, {"body": "vchyzhevskyi thanks clarifying version jsfiddle using reactdomserverrendertostring also nt reproduce issue setup blank repo code show necessary feel free ping consistent reproduction", "d": "11/2017"}, {"body": "need reproducing case pretty soon want fix release", "d": "11/2017"}, {"body": "aweary gaearon sorry issue abstraction layers upgrade time applied fix produces strange behaviour decided error react please close issue bug bad thank time", "d": "11/2017"}, {"body": "nit seconds gt minutes long tasks guess release script success level feedback getting", "d": "11/2017"}, {"body": "sounds good wan na think minimal version want support", "d": "11/2017"}, {"body": "yes glad warning phrases recommended", "d": "11/2017"}, {"body": "nt care strongly send pr discuss worth checking already similar thing unsupported node versions wording similar", "d": "11/2017"}, {"body": "right case node version maybe use engines field", "d": "11/2017"}, {"body": "maybe already nt remember", "d": "11/2017"}, {"body": "yarn respect warn app level great catch course older version yarn wo nt get warning bc added p", "d": "11/2017"}, {"body": "hi gaearon committed run automatically hooks miss something", "d": "11/2017"}, {"body": "jquense thanks reminding yarn engines awesome specify yarn version also need check node version executing command", "d": "11/2017"}, {"body": "found happens committed message execute yarn build command interesting ok remove backtick", "d": "11/2017"}, {"body": "fills toplevel array two references array object second iteration loop override values set first iteration", "d": "11/2017"}, {"body": "much spam", "d": "11/2017"}, {"body": "necessary correctly handle nested arrays elements different nesting levels receive different prefixes way even keys inside different nested arrays mapping still produce valid flat array equivalent behavior", "d": "11/2017"}, {"body": "gaeron like work", "d": "11/2017"}, {"body": "although seems unlikely someone would pass onecharacter prop price least versions chrome right reported gaearon curious documented somewhere", "d": "11/2017"}, {"body": "thanks posting prashantvv lot awesome resources find react native find awesome react native repo including tutorials components may suit need ca nt find anything feel free post question stack overflow going close issue since github issues reporting issues react", "d": "11/2017"}, {"body": "thanks stackoverflow reference future ref", "d": "11/2017"}, {"body": "like work", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "simple random comment create comment rest api", "d": "11/2017"}, {"body": "idea please nt use issues unrelated questions thanks", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "like work", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "xjlim please help checking whether works", "d": "11/2017"}, {"body": "work one else yet", "d": "11/2017"}, {"body": "opened pr regarding issue would nice could take look gaearon", "d": "11/2017"}, {"body": "thank much", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "bad whats happening upgrade react reactdom issues text nodes svg errors working expected", "d": "11/2017"}, {"body": "awesome thanks confirming", "d": "11/2017"}, {"body": "please ignore silly error part caused warning show", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "nt think really matters less matter need release another beta still use suffix", "d": "11/2017"}, {"body": "closed via", "d": "11/2017"}, {"body": "plashjindal already fixed pr waiting release affects reactdomdevelopment use reactdomproduction work edit pointed proper pr merged sorry mistake", "d": "11/2017"}, {"body": "working ie older versions working", "d": "11/2017"}, {"body": "plashjindal must ie mine js fiddle nt work ah wait also tried nt work either", "d": "11/2017"}, {"body": "maybe better link would js fiddle loading x", "d": "11/2017"}, {"body": "well running demo app production mode ran ie check project using java backend react frontend moreover webpack used deployment test accordingly production mode ie browser thank", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "gaearon hi tested using versions application still running ie giving error identifier string number expected", "d": "11/2017"}, {"body": "please give details line referring", "d": "11/2017"}, {"body": "file bundlejs line character", "d": "11/2017"}, {"body": "nt tell us much given nt bundle please prepare isolated project contains react reproduces issue", "d": "11/2017"}, {"body": "well created basic application using createreactapp tried run updating react reactdom modules ie giving error following steps note basic startup application generated using createreactapp", "d": "11/2017"}, {"body": "update react beta version suggested creating app", "d": "11/2017"}, {"body": "yes one thing update reactdom tell warning saying unmet peer dependency react reactdom npm warn reactdom requires peer react none installed", "d": "11/2017"}, {"body": "created new app installed version opened ie mode see errors followed instructions gave working app need information reproduced maybe publish project created", "d": "11/2017"}, {"body": "sure publish project check", "d": "11/2017"}, {"body": "updated fiddle work", "d": "11/2017"}, {"body": "myapp", "d": "11/2017"}, {"body": "updated codesandbox uses beta version works fine ie proof testing ie", "d": "11/2017"}, {"body": "gaearon nt work ie", "d": "11/2017"}, {"body": "well lol codesandbox nt run ie gaearon ran jsfiddle problem", "d": "11/2017"}, {"body": "gaearon maininfection please check working ie", "d": "11/2017"}, {"body": "plashjindal whole codesandboxio nt work ie", "d": "11/2017"}, {"body": "gaearon seems line problem", "d": "11/2017"}, {"body": "maininfection please try install project uploaded zip file npm install try run ie", "d": "11/2017"}, {"body": "wrote react requires map set polyfills please follow instructions include", "d": "11/2017"}, {"body": "gaearon fiddle check confirm", "d": "11/2017"}, {"body": "gaearon tried work either", "d": "11/2017"}, {"body": "looking zip sec", "d": "11/2017"}, {"body": "sure thanks gaearon", "d": "11/2017"}, {"body": "used configuration polyfills map set nt seem work maybe jsfiddle nt support giving error frame", "d": "11/2017"}, {"body": "yes verified jsfiddle broken nt test", "d": "11/2017"}, {"body": "plashjindal tested stuff ie works", "d": "11/2017"}, {"body": "verified zipped project works real instance via browserstack", "d": "11/2017"}, {"body": "sure running production environment", "d": "11/2017"}, {"body": "plashjindal unzipped see accessed worked fine", "d": "11/2017"}, {"body": "get error ie try run", "d": "11/2017"}, {"body": "plashjindal look modo de explorador set", "d": "11/2017"}, {"body": "maininfection yes working fine mistake running explorer mode ie", "d": "11/2017"}, {"body": "first import entry point react", "d": "11/2017"}, {"body": "okay appreciated thanks much gaearon", "d": "11/2017"}, {"body": "hey question nt seem like react specific since react builtin system inline styles aside provided html otherwords use prop add inline style html element add css class style cause nesting processing style assigned directly element add prop perhaps using library like jss glamor might want check support avenues thanks", "d": "11/2017"}, {"body": "think warning result client failing match server side rendered content tries hydrate html", "d": "11/2017"}, {"body": "ok tried removing adding simple via wrapper component get server encoded html client nt would", "d": "11/2017"}, {"body": "bug fixed master via released next update", "d": "11/2017"}, {"body": "gaearon thanks update fix ignore warning idea likely release next update", "d": "11/2017"}, {"body": "next week said times past", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "gaearon testing installed functional component mentioned previsously works longer see however maybe separate thing still seem issue using directly use see warning expected server html contain matching html ssr via view source html chrome devtools", "d": "11/2017"}, {"body": "please provide reproducing project", "d": "11/2017"}, {"body": "gaearon ok github rookie basic app using ssr tag difference see server generated html shown devtools tag closed page source devtools shows guess could devtools shows though", "d": "11/2017"}, {"body": "ok understand happens clear best fix workaround replace verified works warn reason see mismatch browser parsing content text react attempts hydrate real tree maybe react attempt hydrate anything", "d": "11/2017"}, {"body": "seems like earlier manifestation issue seems like past version completely broken instead warning produces false positive warning", "d": "11/2017"}, {"body": "spoke briefly sebmarkbage clear work currently generating elements client content meant element text content one possible solution treat like support text content would consistent browser treats would disallow pattern op post could implement support setting text content element resolve content since components return strings like generates string clear useful though probably support well perhaps even attributes like", "d": "11/2017"}, {"body": "gaearon thanks time investigating workaround suggestion keep global component app tags use rather makes sense treat browser like suggest", "d": "11/2017"}, {"body": "discussion settled warning contains child string since really supported", "d": "11/2017"}, {"body": "stephenlast might better use way opportunity escape needed less dangerous", "d": "11/2017"}, {"body": "guess browsers scripts disabled would nt parsed text content legit put elements issue happens client maybe client rendering ignore content completely ignore hydration errors nt quite fully understand use cases content used script enabled render use cases", "d": "11/2017"}, {"body": "sebmarkbage use get using produces warnings general issue thinking weekend agree sebmarkbage server react allow valid html text client react ignore contents completely content exists react nt way react nothing contents ca nt think use case react script use content tags client", "d": "11/2017"}, {"body": "gaearon spec nt say anything supporting string could explain little bit going stringonly direction", "d": "11/2017"}, {"body": "think maybe client rendering ignore content completely ignore hydration errors", "d": "11/2017"}, {"body": "take one", "d": "11/2017"}, {"body": "clemmy going issue", "d": "11/2017"}, {"body": "hey wojtekmaj backlog want work feel free unassign", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "confirmed updating fixes issue project", "d": "11/2017"}, {"body": "nt remember nt think obvious better could imagine case expect renders input uncontrolled value foo treating null controlled empty string would surprising also hostdom components treat null undefined identically right believe nt know want deviate", "d": "11/2017"}, {"body": "scope creep thread would nt generally use value controlled inputs defaultvalue uncontrolled guess nt see someone would use attributes element", "d": "11/2017"}, {"body": "allowing foo null without warning may strong argument case make sense input type using empty string represent missing number value feels counterintuitive aside would also nice able bind date objects value bring would make case even stronger", "d": "11/2017"}, {"body": "face issue often building controlled input rely record state slice immutablerecord via redux skip using something like defaultvalue input changes dispatch various actions update record components listen etc various selections calcs etc ultimately controlled value dependent value prop passed usually set record default value would great use null since tell without pristine flag field pristine simply edited based concept noted defaultvalue satisfies initial life cycle amp muddying two seems like extraneous step", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "states working except componentdidcatch import react component react class app extends component constructor props super props thisstate rerendered false someprops react lifecycle haserror false lol lol consolelog componentwillupdate nextprops nextstate consolelog componentwillmount consolelog componentwillunmount consolelog makeerror thissetstate lol null render consolelog thisstatehaserror return sorry else return componentdidmount consolelog consolelog changing state component thissetstate rerendered true componentdidcatch error errorinfo consolelog thissetstate state gt state haserror true componentdidupdate consolelog class componentb extends component constructor props super props componentwillreceiveprops nextprops consolelog componentwillupdate nextprops nextstate consolelog componentwillmount consolelog componentwillunmount consolelog render consolelog return thispropssomeprops see console componentdidmount consolelog shouldcomponentupdate nextprops nextstate consolelog return true componentdidupdate consolelog componentdidcatch error errorinfo consolelog export default app package", "d": "11/2017"}, {"body": "felansu componenetdidcatch trigger lifecycle methods render example try throw exception inside event handler makeerror documentation issue order understand internal opened may help", "d": "11/2017"}, {"body": "idhard", "d": "11/2017"}, {"body": "wrong fiddle componenetdidcatch triggered error happened render function event handler", "d": "11/2017"}, {"body": "idhard yes working", "d": "11/2017"}, {"body": "months ago decided would great idea copy reactjs reactdomjs node modules dist folder near indexhtml without ugly paths safe warm epic plan except nt update since rofl god feel stupid minimal example works going try update source code conclusion better conserve libs oldfashion manner pull nodemodules like ts guide example thanks time gaearon try careful next time closing issue", "d": "11/2017"}, {"body": "tell reconciler remove node hydrated dynamic imported corresponding component", "d": "11/2017"}, {"body": "code snippets explanations routes definition javascript import homepage bundlesbundles export default component homepage path exact true strict true bundlesjs used server side asyncbundlesjs used client side thanks normalmodulereplacementplugin webpack plugin able switch bundlesjs asyncbundlesjs server client rendering homepagejs component renders simple div html home page main wrapperjs renders routes html routesmap route index gt gt html generated serverside looks like html home page open chrome debugger timeline get flashing blank frame blank frame rendered html chunked rendered", "d": "11/2017"}, {"body": "fiber warning client side expect server html contain divhomepage divappwrapper removes rendering exact dynamic imported homepagejs", "d": "11/2017"}, {"body": "pattern never worked correctly react would still blow away server rendered markup replace client solution render thing client server side like using promises client side need wait resolve hydration easy problem outside scope react projects like help handling correctly", "d": "11/2017"}, {"body": "thanks looking another one", "d": "11/2017"}, {"body": "err default react dom escapes values embedded jsx rendering thus ensures never inject anything explicitly written application everything converted string rendered helps prevent xss crosssitescripting attacks \u4e2d\u95f4\u591a\u4e00\u4e2a\u7a7a\u683c default reactdom escapes values embedded jsx rendering thus ensures never inject anything explicitly written application everything converted string rendered helps prevent xss crosssitescripting attacks", "d": "11/2017"}, {"body": "well", "d": "11/2017"}, {"body": "saying quoted message probably coming docs space react dom react dom changed reactdom", "d": "11/2017"}, {"body": "nt really matter use reactdom talk entry point code react dom colloquial name renderer like react native also please file issues documentation thanks", "d": "11/2017"}, {"body": "event handlers likebutton pass onclick handler button one consider source one could possibly track guess may able kind tracking synthetic events implementation react talking without much knowledge source one would call handle function passed props would bubble error componentdidcatch would triggered level handle function created probably likebutton clarify bit without error boundaries would attempt save error trycatch inside likebutton childrens would make sense display errors level knowing source exception happen would merely debugging purposes", "d": "11/2017"}, {"body": "nt see could tracking", "d": "11/2017"}, {"body": "certainly neither weak concept react internals agree unified way handle exceptions event handlers worth effort could look deeper guidance would start looking somewhere however understand error boundaries though lifecycles methods may require refactoring support event handlers nt know enter scope personally think would improve overall development experience error handling certainly address issues techniques like trycatch printing errors manually", "d": "11/2017"}, {"body": "know react codebase well issue nt nt know start nt see implementing could possible first place without significantly changing react api long event handlers functions way us tell component defined", "d": "11/2017"}, {"body": "ok really appreciate time ticket looking source code helped understand bit underlying", "d": "11/2017"}, {"body": "way pretty catch error event handler catch block set state like causes rerender render block set rethrow", "d": "11/2017"}, {"body": "really looking forward componentdidcatch first test behaviour must admit rather disappointed since event handling big part app interface really irritating way handling globally primarily see componentdidcatch way present user workable explanation happened least providing kind catchall unhandled event error choose render error message user would great leap forward right event error handling must done locally tedious opens missing lot errors worst thing app instead displaying sensible state rendered working nonworking state really frustrating ux please reconsider changing behaviour componentdidcatch", "d": "11/2017"}, {"body": "discussion helpful people keep adding comments like please add nt reply actual questions work set problems want participate discussion please nt ignore suggest solutions", "d": "11/2017"}, {"body": "gaearon referring comment simply end user react technical insight inner workings react participate solutions issue simply stating current solution usable personally would great kind ui catchall could triggered whenever event errors happen display failed state user origin event least important know probably something make core disappointment current implementation also stems fact react team kinda sold react componentdidcatch best new thing since sliced bread released major caveat handle event errors kinda dive documentation find bit letdown sorry", "d": "11/2017"}, {"body": "simply end user react technical insight inner workings react participate asking knowledge internals saying nt see plausible way javascript without fundamentally changing api introducing confusion statement nothing react works technical constraints javascript api even us rewrite react scratch sake feature nt quite see could nt need know react works internally participate discussion try mind experiment think approach react clean slate could possibly work trying say comments nt attempt nt helpful saying please support disappointing nt move issue forward ask future posters refrain already explained seems tricky impossible us current api might wrong would happy learn solution engaging conversation instead repeat point already replied conversation goes circles understand might difficult think often difficult us case let keep discussion clean tidy case somebody else help us figure repeat points many times", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "got time today start working fixing thanks gaearon", "d": "11/2017"}, {"body": "close nt seem directly actionable although appreciate discussion specific ideas could improve specific projects please file followup issues projects react docs create react app", "d": "11/2017"}, {"body": "thankyou listening helping create threejs like example repository someone steeped reactnative ecosystem would contact", "d": "11/2017"}, {"body": "maybe related basically components writing class style must deal state enforce returning initial state class style instead", "d": "11/2017"}, {"body": "returning something constructor already different meaning javascript looking terse syntax use class properties nt define constructor", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "thanks report ca nt seem reproduce browser chrome version official build happen firefox well", "d": "11/2017"}, {"body": "hm weird reproduce times chrome version official build firefox click anywhere drop everything go back normal see order reproduce must first drop text move cursor around using arrow keys without clicking anywhere first please let know anything else demonstrate issue", "d": "11/2017"}, {"body": "tobiasandersen got looks like legitimate problem look", "d": "11/2017"}, {"body": "hey tobiasandersen wondering could still reproduce jsfiddle points ca nt seem reproduce anymore", "d": "11/2017"}, {"body": "tried fiddle still issue chrome version official build firefox wonder differently since reproduce times", "d": "11/2017"}, {"body": "along lines since react oneway nt worry happens render allow binding date objects straight input type seems like straightforward change although familiar react rendering code", "d": "11/2017"}, {"body": "effulgentsia like thoughts going bikeshedding names bit close option wrt ssr think ssr handled custom elements long react could respect attributes component mutates onto tracking posted gist earlier convenience essentially component applies attributes rendering server rehydrates client ssr web components possible solutions still discussed standards level may best wait part proposal", "d": "11/2017"}, {"body": "effulgentsia also like heading sophiebits gaearon yall thoughts direction tue oct pm trey shugart notifications githubcom wrote effulgentsia like thoughts going bikeshedding names bit might useful align naming domprops domevents something wrt option least backward compatible solves usecases coming around alternatives think ssr handled custom elements long react could respect attributes component mutates onto tracking posted gist earlier convenience essentially component applies attributes rendering server rehydrates client ssr web components possible solutions still discussed standards level may best wait part proposal receiving mentioned reply email directly view github mute thread", "d": "11/2017"}, {"body": "bikeshedding names bit domprops domevents like also brainstorming way make even idiomatic react replacing concept dom concept ref words since attaching props event listeners ref thought instead introducing new special names inside simply overload existing jsx attribute currently ref function called react component mounted unmounted allowed also object idea", "d": "11/2017"}, {"body": "really like approach", "d": "11/2017"}, {"body": "gaearon problem maybe opportunity say react rerender block otherwise roll back react", "d": "11/2017"}, {"body": "says documentation react expects rendered content identical server client patch differences text content timestamps treat mismatches bugs fix development mode react warns mismatches hydration guarantees attribute differences patched case mismatches important performance reasons apps mismatches rare validating markup would prohibitively expensive intentionally need render something different server client twopass rendering components render something different client read state variable like set true way initial render pass render content server avoiding mismatches additional pass happen synchronously right hydration note approach make components slower render twice use caution remember mindful user experience slow connections javascript code may load significantly later initial html render render something different clientonly pass transition jarring however executed well may beneficial render shell application server show extra widgets client learn without getting markup mismatch issues refer explanation previous paragraph hope helps", "d": "11/2017"}, {"body": "think clemmy work need update polyfill support multiple callbacks", "d": "11/2017"}, {"body": "gaearon knock knock said mention docs need change sure", "d": "11/2017"}, {"body": "problem", "d": "11/2017"}, {"body": "another pr merged", "d": "11/2017"}, {"body": "two", "d": "11/2017"}, {"body": "wrote small analysis approached one tests", "d": "11/2017"}, {"body": "far tell taken please post free watch", "d": "11/2017"}, {"body": "merged two prs deal specifically took related tests please check try match style approach", "d": "11/2017"}, {"body": "gaearon rewrite test using public api see injecting default plugins reactdomjs reactdomclientinjectionjs simpleeventplugin enterleaveeventplugin changeeventplugin selecteventplugin beforeinputeventplugin exactly could inject testmocked plugin test functionality searched custom plugin found reacttapeventplugin check exactly custom plugins injected way inject plugins", "d": "11/2017"}, {"body": "fear way head anyone else wants give shot feel free", "d": "11/2017"}, {"body": "aqumus tricky guess first step would figure actually used right tap event plugin one sort still commit supporting conveniently right repo maybe add test specifically works also likely rn uses tests verifying rn events work nt know worth commenting different parts looking tests fail remove private api tests code already covered tests happen stress code paths make sense gdevincenzi sounds good remove assignment", "d": "11/2017"}, {"body": "also going away week please nt let stop continuing hope get submitted prs merged next week", "d": "11/2017"}, {"body": "take unfamiliar api seems like good opp learn advice welcome gdevincenzi", "d": "11/2017"}, {"body": "congratulations gordyd finishing rather complex one good example different code look testing essentially things figure code supposed searching references looking git history commenting different lines", "d": "11/2017"}, {"body": "received pr yet following users andrevargas tranotheron minerado swyx danilowoz morajabi dphurley reznord aqumus could please confirm started work people want help queue time would great give others opportunity work", "d": "11/2017"}, {"body": "andrevargas noticed discussion guess makes sense keep changes unified", "d": "11/2017"}, {"body": "please add queue gaearon", "d": "11/2017"}, {"body": "gaearon yes right confirm jeremenichelli working aware think update thread username pr link", "d": "11/2017"}, {"body": "please also add queue gaearon", "d": "11/2017"}, {"body": "gaearon started working planning either posting findings pr sometime week", "d": "11/2017"}, {"body": "gaearon begun working synthetickeyboardeventjs planning pr weekend", "d": "11/2017"}, {"body": "gaearon could also take tests case people originally assigned nt time required work", "d": "11/2017"}, {"body": "gaearon sorry long delay making wip pr update someone briefly explain rely private apis also nt know thanks gt function", "d": "11/2017"}, {"body": "gaearon sorry long delay working today ping doubts regarding", "d": "11/2017"}, {"body": "morajabi one potential way tackle look understand functionality provides user write code makes use functionality disable loading comment see breaks make sure something breaks code written first version test put test case enable loading make sure test passes optimise code", "d": "11/2017"}, {"body": "gaearon apology delay based suggestion tried commenting parts found alot test cases failing etc guess mainly uses defined although commenting line line none test cases failed test failed based guess already covered test suites conveniently right repo maybe add test specifically works nt understood meant suggestion could work rewrite using public api others sure broadcasted found kentcdodds video podcast react event code walkthrough ben alpert useful", "d": "11/2017"}, {"body": "sorry gaearon tried nt free time finish anyone else wants get issues feel free", "d": "11/2017"}, {"body": "danilowoz gaearon mind could take beforeinputeventplugintestjs", "d": "11/2017"}, {"body": "timjacobi replacement also disable disable loading selecteventplugin comment see breaks make sure something breaks", "d": "11/2017"}, {"body": "morajabi sure tackling right level could open wip pr far nt want pollute thread much", "d": "11/2017"}, {"body": "timjacobi ca nt nt committed anything new sorry pretty busy days someone take", "d": "11/2017"}, {"body": "seems like longer need cc minerado covered together changes", "d": "11/2017"}, {"body": "aqumus based analysis remove list think keep unit test particular internals good know actual logic covered tests", "d": "11/2017"}, {"body": "reassign working related test might easier together", "d": "11/2017"}, {"body": "morajabi gaearon could take look selecteventplugintestjs well", "d": "11/2017"}, {"body": "fyi rewrote", "d": "11/2017"}, {"body": "tests nt currently owner taken accordeiro taken madeinfree combined taken gordyd x taken skiritsis x taken timjacobi sorted perception difficulty queue timjacobi kwnccc skiritsis please could three let us know like take tests please specify one also pass let somebody else try note getting pretty complicated exactly beginnerfriendly mechanical replacements need understand test trying verify come equivalent public api test might look different take comfortable researching things similar gordyd fact gordyd would like take happy give one", "d": "11/2017"}, {"body": "skiritsis since interested reassign", "d": "11/2017"}, {"body": "like work reactbrowereventemittertestjs", "d": "11/2017"}, {"body": "gaearon thanks sorry responding time got busy work look rewrote understanding", "d": "11/2017"}, {"body": "take look", "d": "11/2017"}, {"body": "madeinfree let give days kwnccc reply first since already queue interested assign later", "d": "11/2017"}, {"body": "gaearon ok got thank", "d": "11/2017"}, {"body": "gaearon take look combining takers", "d": "11/2017"}, {"body": "sounds good thanks gordyd", "d": "11/2017"}, {"body": "way event tests got converted give idea code usually ends like", "d": "11/2017"}, {"body": "gaearon happy take well one else wants", "d": "11/2017"}, {"body": "madeinfree still interested please take keep us updated", "d": "11/2017"}, {"body": "gaearon ok would like take", "d": "11/2017"}, {"body": "got anybody want take remaining", "d": "11/2017"}, {"body": "help one", "d": "11/2017"}, {"body": "gaearon nt found time dive like thought would apologies hanging long grabs anyone wants", "d": "11/2017"}, {"body": "accordeiro got", "d": "11/2017"}, {"body": "gaearon really sorry nt get notified still tests take care please let know hope left something easy start", "d": "11/2017"}, {"body": "kwnccc wan na look", "d": "11/2017"}, {"body": "look needed help kwnccc writing test see file named write test", "d": "11/2017"}, {"body": "even slightly understood issue correct wrong means need switch reactportalcreateportal public api like reactdom reactdomcreateportal gaearon", "d": "11/2017"}, {"body": "gaearon really like try since started checking could even team needed", "d": "11/2017"}, {"body": "yeah sure kwnccc happy work queue", "d": "11/2017"}, {"body": "kwnccc getting one test error flow error run shall push code forked repo well work fail packagesreactreconcilersrctestsreactincrementalperftestinternaljs reactdebugfiberperf supports portals yarn flow yarn run node scriptstasksflowjs error const nextcontext getchildhostcontext context fibertype rootinstance nocontextt type incompatible expected param type v export default function config hostconfig hostcontext incompatible instantiation error const nextcontext getchildhostcontext context fibertype rootinstance nocontextt type incompatible expected param type v export default function config hostconfig hostcontext incompatible instantiation found errors flow failed error command failed exit code info visit documentation command", "d": "11/2017"}, {"body": "flow issue known problem windows unrelated need figure happens see kwnccc yes require thought think maybe point best temporarily move provide method like", "d": "11/2017"}, {"body": "one", "d": "11/2017"}, {"body": "gaearon moved reactportal shared directory tests pass need bit assistance implementing method taking inspiration written shall return thinking lines please let know right", "d": "11/2017"}, {"body": "gaearon code still wip wanted double check right track would really help could take quick look code clarify doubts approach taken correct assume tests need cover tags scenarios tested existing tests order maintain test coverage sure way generate components dynamically special formatting tags give pointers efficient way achieve sure test context part tag context test public api method istagvalidincontext used anywhere else except test file ideas", "d": "11/2017"}, {"body": "yes sounds right", "d": "11/2017"}, {"body": "anushreesubramani approach taken correct general yes want avoid duplication ideally turn series series custom function generates component asserts rendering produces warning sure way generate components dynamically special formatting tags give pointers efficient way achieve yes thinking something like go array take last item wrap current element parent corresponding tag way end end corresponding tree may written something wrong general idea also probably want put something like function right rendering otherwise warnings deduplicated ca nt reliably test sure test context part tag context test public api method istagvalidincontext used anywhere else except test file looking blame added point called outside tests point future longer used test mentions sever rendering function longer used server rendering either comment gather goal ensure never warn nt know ancestors however ca nt find code path would pass therefore probably always know ancestors current version say safe delete test altogether", "d": "11/2017"}, {"body": "gaearon created method prior also shifted file shared directory suggested please go code modifications additions need make shall", "d": "11/2017"}, {"body": "send pr please easier discuss review", "d": "11/2017"}, {"body": "nt seen anymore maybe messed something", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "gaearon hi dan everything working thank", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "gaearon hey seems actually botched fix shouldcomponentupdate longer called component still rerendered properly check done wrong clause sent another pr resolves please check apologies extra noise", "d": "11/2017"}, {"body": "aware technically done however project particular contents release package finding bsdpatents code still included several packages even supposed mit eg reactdistreactjs bsdp license header still methods like makeemptyfunction emptyobject similar cases exist dependency packages like createreactclass proptypes methods taken react fbjs code mit still labeled bsdp within js file headers show jsmap file therefore part distribution legal document published reference state reaffirm methods actually mit per root license file patents clause longer applies contradiction root license embedded headers could seen legal analysts invaliding one", "d": "11/2017"}, {"body": "acroyear methods coming fbjs also relicensed mit looks like version depends bsd licensed latest release mit nt know licensing changes work well know problem maybe sophiebits clarify", "d": "11/2017"}, {"body": "guess updated fbjs later released case let cut", "d": "11/2017"}, {"body": "fbjs reference npm distros depending npm package react createreactclass proptypes npm modules made parties invariant warning taking methods fbjs react still going find way override replace nt fault facebook others created dependencies using way easy create oneline exporting module similar reactaddonsperf exposes one method react fbjs module rather cloning thank attention", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "would great updates", "d": "11/2017"}, {"body": "updates would issue looking revisiting component api next year look different feature requests also think experience existing api much doubt implement specific suggestion described issue like make sure consider use cases", "d": "11/2017"}, {"body": "solves running bundle tests added real reconciler bundles means reactnoop commonjs build using reconciler package deleted fixture", "d": "11/2017"}, {"body": "ran similar issue dependency conflict part jest install installed version able resolve bumping version", "d": "11/2017"}, {"body": "make sure reacttestrenderer version react version nt documented anywhere nt documented npm page", "d": "11/2017"}, {"body": "documented form peer dependency install wrong version package manager warn supported react nt exact work version also major welcome submit pr documentation", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "tested react seems fixed reproducible usecases", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "hey gaearon works thanks", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "fixed inside cra", "d": "11/2017"}, {"body": "gaearon case also expected client render button click changes value different original ssr ui nt update", "d": "11/2017"}, {"body": "bit hard say without minimal repro case", "d": "11/2017"}, {"body": "cool", "d": "11/2017"}, {"body": "gaearon currently blocked upgrading application react due lack umd build testutils shall compile one submit pr", "d": "11/2017"}, {"body": "describe use case detail need umd build something intended testing", "d": "11/2017"}, {"body": "application nontrivially large module systems involve transpiling js unworkably slow used use webpack cut taking seconds plus every development build typescript well choice use umd nt want wait multiple minutes every time make script change development", "d": "11/2017"}, {"body": "markboyall said", "d": "11/2017"}, {"body": "ok sounds reasonable happy take pr", "d": "11/2017"}, {"body": "gaearon done", "d": "11/2017"}, {"body": "workarounds using tools like", "d": "11/2017"}, {"body": "create div call use directly", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "general recommend simulating real dom events instead using api example node document important per feedback issue add umd build testutils later versions", "d": "11/2017"}, {"body": "nt saw recommendation react docs thank", "d": "11/2017"}, {"body": "yep need document file issue doc repo", "d": "11/2017"}, {"body": "filed", "d": "11/2017"}, {"body": "ajanuragjain shinrinyoku either found clean refactoring work around issue", "d": "11/2017"}, {"body": "running hooking one component fire cleanup actionset flag reset part redux state tree showing another component also uses part state tree needs reinitialized render official docs explicitly recommend use hook cleanup probably break lot people unless changeddocs updatesome workaround recommended", "d": "11/2017"}, {"body": "goodmorninggoaway particular use case mentioned current workaround simply replace entire stack instead pushing popping individual items onoff means explicit cleanupteardown going replacement state works order calls deterministic lot duplication functionality imposes additional constraints components would nt call clean refactoring means", "d": "11/2017"}, {"body": "close works intended general recommend side effects documented api reference likely issues side effects future", "d": "11/2017"}, {"body": "regarding official docs explicitly recommend use hook cleanup probably break lot people unless changeddocs updatesome workaround recommended docs talking clean component level example listeners added component talking cleaning global state inherently messy get complicated welcome file issue pr docs repo clarify fire cleanup actionset flag reset part redux state tree showing another component also uses part state tree needs reinitialized render written code always regretted brittle recommend refactoring away patterns need easiest way reuse part tree way think components generally expected independent happens render two exclusive components time conflict nt seem like right component thinking understand code avoid patterns experence replacing single state tree branch object array enough example key id even dynamically generated one instead tearing old one time new component mounting point new component branch new id keeping old one alive eventually emit action cleans unused state branches leaves one recent id", "d": "11/2017"}, {"body": "gaearon good idea seems like simple refactor use something like object keyed id similar pattern used redux normalizing instead trying replacereuse array thanks nudge right direction", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "patrickmcdougle would interested taking look issue wanted make sure duplicating effort", "d": "11/2017"}, {"body": "pretty sure since patrickmcdougle wrote month ago go ahead please", "d": "11/2017"}, {"body": "encountering component use test javascript import react react const testselect placeholder options gt export default gt return yolo believe decent solution leave default option disabled check value field part form validation react native noticing value string react pretty sure number react native recall validation checking way maintain value unselectable options validator never let falsy value said currently annoying first option element default value form loads set option displays first option list default value example code default value set option displays first option list select option desired allows user select becomes truthy value must dealt easy workaround anyway validate function", "d": "11/2017"}, {"body": "amackintosh example seems work fine use defaultvalue selected default html spec says first nondisabled item default item nothing marked selected see info gon na close disabled options selected via normal react means either defaultvalue controlling value original error stems miscommunication defaultvalue index details", "d": "11/2017"}, {"body": "running similar issues mocha error behavior test hidden warning issue made somewhat worse fact override tests ensure react warnings cause test failures caused errors caught error boundary log even earlier cases removing overrides allowed see error output resolving newly revealed output brought back boundary logs anything could help far insight testing mocha related issue happy", "d": "11/2017"}, {"body": "running similar issues mocha error behavior test hidden warning clarify mean see warning test nt fail means code throwing somewhere error gets caught never reaches test stack frame unless intentionally testing error cases indicates bug code warning nt hide original error removed warning bug would completely invisible since something catches warning surfaces", "d": "11/2017"}, {"body": "see two separate issues error occurred message helpful test environment showing actual thrown hoping browser show jsdom nt browser maybe sort feature detection could determine whether show full message people might want disable error reporting tests altogether think general bad idea might legitimate reasons already provides escape hatch", "d": "11/2017"}, {"body": "would love listen chat discuss things", "d": "11/2017"}, {"body": "fixes ie edge longer prompt remember password controlled form", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "several tests need throw errors alert library users something wrong test logs full bright red escape hatch something like", "d": "11/2017"}, {"body": "started work nightwatchjs browserstack automate easy run test browsers cover flow would involve automated deployment integration url whenever pull request sent hook expose url pull request run automated tests url providing environment variable code able run automated test safari chrome firefox ie edge pretty neat browserstack even records test output nt cheap though went route would need automate automate mobile subscription yearly subscription still think promising way go could automate testing browsers", "d": "11/2017"}, {"body": "nhunzaker awesome thinking today wanted make time work maybe chat bit discord whatever fairly recently hooked selenium tests work app thoughts experiences might useful stack use browserstack vs saucelabs", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "reconciler nt currently use animation frames", "d": "11/2017"}, {"body": "fall issue upgrade react common similar things also match exist behaviour jsx like feature", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "render document fragment works thanks", "d": "11/2017"}, {"body": "happy confirm everything works thanks lot gaearon much appreciated cheers", "d": "11/2017"}, {"body": "going tackle", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "apologies seeing message yes issue resolved beta rc amp", "d": "11/2017"}, {"body": "please tell solution resolve issue getting error running app ie running perfectly fine ie react version using application prompt response really appreciated", "d": "11/2017"}, {"body": "update major version encourage read release notes otherwise wo nt know things broken release notes point new baseline targeting also dedicated page mentions hope helps", "d": "11/2017"}, {"body": "thanks dan already included babelpolyfill version react code still issue persists", "d": "11/2017"}, {"body": "probably included reactdom loads rather go code app entry point", "d": "11/2017"}, {"body": "worked thanks prompt response", "d": "11/2017"}, {"body": "somewhat related see similar errors using something like custom tags warning tag unrecognized browser meant render react component start name uppercase letter users experiencing legitimately likely minority sure", "d": "11/2017"}, {"body": "site says explicitly getting classless grid system means using nonstandards compliant totally working grid element cards use also totally noncompliant card element works fine cards meant used within grid great prevents standards actually introducing elements future since may break existing websites think going way support", "d": "11/2017"}, {"body": "oh completely understand implications wanted add note likely minority people may see directly related svg warning find since ranked google warning", "d": "11/2017"}, {"body": "accepts callback arguments see used reactdom hope helps", "d": "11/2017"}, {"body": "yes help thanks followup question continually calling frame following approach make sense based reactdom first call createcontainer store reference call via callback subsequent calls call directly via callbacks like flushsync", "d": "11/2017"}, {"body": "sounds reasonable although nt fully understand need call expect let components call causes updates", "d": "11/2017"}, {"body": "cool something bit beaten path finished extent demo good place bring discussion one foot two react renderers dom customwebgl state processed worker thread flow basically like input worker state elements sent frame tick react output output probably allows pushing async events input still working let ignore async events like conventional game loop way touch detection things done comparing input events coordinates state added benefit output handled declarative rendering state really sure totally wacky since something see commonly done eg components constantly renewed createelement tree generated single state also still early without big project prove wondering need call repeatedly rather set state inside components hope good excuse", "d": "11/2017"}, {"body": "interesting get working love take look", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "works great thank", "d": "11/2017"}, {"body": "renderers compute diff reconciliation sure meant fire reconciliation compute updates reconciliation commit yet makes possible split reconciliation across frames commit whole tree ready", "d": "11/2017"}, {"body": "filed", "d": "11/2017"}, {"body": "case replace", "d": "11/2017"}, {"body": "using issue still persists", "d": "11/2017"}, {"body": "pramodsvidyarthi eliminate possible whitespace also using react must using hydrate fn", "d": "11/2017"}, {"body": "using hydrate fn client side nt lint issue whitespace", "d": "11/2017"}, {"body": "mbryla reproducible without react see jsfiddle came across similar issue reactdatepicker imo able create workaround fixes issue narrow case way uncomfortable storing value actual dom elements referring relatedtarget event amp c curious anyone besides agrees seems safari issue really react issue also reproduction video", "d": "11/2017"}, {"body": "pmacmillan safari version test might right safari related issue especially recently upgraded version mine fiddles seem behave correctly without spurious events please try upgrade verify ticket closed", "d": "11/2017"}, {"body": "hmm feel like insane testing home personal laptop yes works correctly safari version", "d": "11/2017"}, {"body": "reproducible currently audience work apparently sigh", "d": "11/2017"}, {"body": "right confirm work laptop although know upgraded safari beta issue confident safari issue", "d": "11/2017"}, {"body": "reproduces version apply update reproduces version wonder os setting affecting", "d": "11/2017"}, {"body": "force click option available newer macbooks external trackpads disabling look amp data detectors causes issue go away", "d": "11/2017"}, {"body": "able recreate bug safari tech preview safari webkit released today safari disabling also prevents problem seen touch events ios ca nt seem recreate demo said react datepicker still breaks ios root cause could hard trigger fiddle touch", "d": "11/2017"}, {"body": "cliener nt create fiddle touch mind would add listeners touch events lack forcetouch capable device evaluate", "d": "11/2017"}, {"body": "wrote touch meant tap triggers blurfocus chain", "d": "11/2017"}, {"body": "testing seems particular problem unique safarimac ca nt reproduce event chain ios even constructing mobilefriendly version test", "d": "11/2017"}, {"body": "webkit bug macos", "d": "11/2017"}, {"body": "put together fix part borrowing pmacmillan work though unsure live inside react separate library assuming latter available implementation applying fix globally without knowing implications might well break current functionality importantly focusblur events throttled within first event type question likely happen", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "gaearon still problem react reactdom", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "afraid reading thread please reread reply warning correct fixed code issue null instead component stack message fixed", "d": "11/2017"}, {"body": "experience issues believe false positive warning please file new issue example", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "case gone", "d": "11/2017"}, {"body": "maybe interested animation tended focus fiber would make possible use cases seems shifted time probably good reason would interesting hear everyone likely knows post acdlite talked highlevel fiber section scheduling key points ui necessary every update applied immediately fact wasteful causing frames drop degrading user experience different types updates different priorities animation update needs complete quickly say update data store pushbased approach requires app programmer decide schedule work pullbased approach allows framework react smart make decisions react nt currently take advantage scheduling significant way update results entire subtree rerendered immediately overhauling react core algorithm take advantage scheduling driving idea behind fiber emphasis added last line talks explicitly animations says scheduling driving idea behind fiber watch intro fiber video say walk away thinking would way get animations react think fair actual engineering ran problems totally understandable sources ton exposure may good put something clarify take found impractical actually tried implement nt watch repo closely saw commits different priority levels figured still worked would make kind official announcement point see gaearon answer thomasjeepe regarding animations says use case still interesting us stress test react update model best way make something faster yes maybe diffing could faster want make use case work well might best way escape react usual model comparing leaf elements minimal work possible ie even compare things know dynamic something inferno explored templates separate static dynamic yet really make big difference dynamic applications experience component abstraction always components middle even optimize leaf node comparisons still got ta go components render optimizations host nodes work well contiguous blocks components get way looking compilation techniques like first make component inlining work end larger contiguous blocks host elements avoid diffing using bytecode similar glimmer idea leafs nodes escaped perked ears sounded like could awesome animated charts graphs sure follow nt work inferno would interesting reliable way js animations react think answer", "d": "11/2017"}, {"body": "sghall agree conclusion reliable way js animations react think answer though rephrase generally reliable way js animation depends browser dom speed scenegraph size etc etc react nt optimized animation inherently introduces overhead fine general ux use eats significantly cycle time budget nontrivial scenegraph ie react ca nt give maximal frame rate given specific scenegraph time series ie animation time lost ca nt regained prev note mentioned fundamental issue generally dynamic scenes react way first loses key information changed lost information must recovered via diffing avoid updating nodes takes time contrast open tweak firsthand info changed course whatever tweaked generalizes animations specific time series node positions etc information lost minimal work done modify dependent nodes tweak radius dom element virtual anything touched compared target nodes result whole thing keeps working even though undergoes changes example happens weird frp inspired experiment works whatever reactive streams simply idea react similar could efficiently make time lost due loss info changed first place info exists react even enters picture react way fine general ux lot stuff want close metal speed overall large dynamic scenegraph andor deep scenegraph dynamic leafs rendering resources significantly underutilized good fraction cycles go toward recovering info ofc react heuristically update things nt fit time budget prioritize etc strategies also workable leaner rendering methods think often mentioned dom slow anyway typically bottleneck speed difference nt matter ux currently correct browser makers eg mozilla team work new ways compositing rendering using well known techniques video game rendering render targets webgl react native opengl canvas etc infinitely faster current dom little overhead turn big overhead due amdahl law code paths improve", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "everything looks good end thanks", "d": "11/2017"}, {"body": "stumbled case app essentially renders tons anchor tags however post left case links inner text may updated etc whilst server sends html us isle wrecked hurricane power comms yes mean puerto rico post link points different location suggested inner text html us isle wrecked hurricane power comms yes mean puerto rico users obviously deeply confusing feels like kind failed reconciliation real issue moment seems way get around stop rendering links anchor tags server entirely force client render correctly rather removes benefit ssr though least case app much glorified collection links takeaway rendering lists links anchor tags ssr may leave links point different locations takes place could confirm intended behaviour please want sure nt misunderstood intention change case relevant app source code", "d": "11/2017"}, {"body": "react introduce differences whether text content anchor tags anywhere else components return different things client server react wo nt attempt fix difference expected return thing client server otherwise bug app react warns mismatches development fix see thread getting long nt think good place track new problems believe see might bug react please file issue behavior well documented going lock discusssion one prevent confusion", "d": "11/2017"}, {"body": "gaearon investigating pr found apparently nt fail macs windows linux running firefox", "d": "11/2017"}, {"body": "removed think ever publicly advertised using either tags except", "d": "11/2017"}, {"body": "cool", "d": "11/2017"}, {"body": "also problem necessary dealing browser focus know focus going end tick assume cases place currently documentactiveelement blur event relatedtarget click events iframe iframe even though current activeelement body easiest way look function overridden development seem mechanism get original value back react could hooking reacteventlisteners requiring directly loophole closed ideas", "d": "11/2017"}, {"body": "react could hooking reacteventlisteners requiring directly loophole closed ideas open separate issue details particular use case", "d": "11/2017"}, {"body": "also luck using attr cors enabled using", "d": "11/2017"}, {"body": "share repro thomasdavis", "d": "11/2017"}, {"body": "fyi nt think reopening intentionally", "d": "11/2017"}, {"body": "worries people still seeing probably okay reopen", "d": "11/2017"}, {"body": "problem tried crossoriginloading anonymous devtool set cheapmoduleevalsourcemap", "d": "11/2017"}, {"body": "things together using webpackdevserver running port add webpack config use cheapmoduleevalsourcemap work add script tag", "d": "11/2017"}, {"body": "using error thrown twice anyone know could", "d": "11/2017"}, {"body": "using error thrown twice anyone know could makes say error thrown twice referring dan describes chance", "d": "11/2017"}, {"body": "happening using using webpack errorboundary component happens nt set nodeenv production make sense since want run development mode", "d": "11/2017"}, {"body": "happens nt set nodeenv production make sense since want run development mode also referring dan describes facebookreact chance", "d": "11/2017"}, {"body": "bvaughn yeah read whole discussion previous comment answer kind basically nt set nodeenv development react app component errors thrown production right", "d": "11/2017"}, {"body": "basically nt set nodeenv development react app nt set development production app result app getting slower development build react development build react includes many helpful warnings useful development make react larger slower nt want use production component errors thrown production right errors occur development production modes duplicate console logging happens development mode though reasons dan mentioned issue linked", "d": "11/2017"}, {"body": "thanks bvaughn case bit complex nt set development app either production development mode trying see helpful warnings development however app works set production even want use development mode stated", "d": "11/2017"}, {"body": "however app works set nodeenv production even want use development mode stated understanding correctly nt know would maybe related another dependency project either way sounds like separate issue component stack stuff maybe file separately details", "d": "11/2017"}, {"body": "bvaughn looking app inside chrome extension odd environment react something related react chrome extensions specific issue project create separate issue maybe tutorial solve thanks", "d": "11/2017"}, {"body": "app inside chrome extension odd environment react sounds similar reactdevtools", "d": "11/2017"}, {"body": "bvaughn project buggy sorry flooding thread may concern minimal setup chrome extension using react redux reactdevtools error boundaries source", "d": "11/2017"}, {"body": "issue windows chrome webpack amp react webpackreact always throws tried others without eval tried tried tried crossorigin script tag nothing works", "d": "11/2017"}, {"body": "experiencing problem chrome nothing works dominikserafin mentioned error firefox", "d": "11/2017"}, {"body": "getting behavior two previous comments chrome", "d": "11/2017"}, {"body": "updated dependencies today started get issue tests sure project times faster rebuilds watch", "d": "11/2017"}, {"body": "aweary progress", "d": "11/2017"}, {"body": "aweary issue reproduced version issue ca nt duplicate might want reopen", "d": "11/2017"}, {"body": "update react reactdom packages run project using webpackdevserver get error error entry module found error resolve module reactlibreactcomponentbrowserenvironment", "d": "11/2017"}, {"body": "search string library using internal react module mentioned release notes issue never supported longer work locking issue rc released long time ago longer relevant problem please file new issue", "d": "11/2017"}, {"body": "nt know one still happening getting version", "d": "11/2017"}, {"body": "file new issue reproducing case please", "d": "11/2017"}, {"body": "hard keep track problems closed issues lock one", "d": "11/2017"}, {"body": "problem came bugsnug production site nt idea reproduce", "d": "11/2017"}, {"body": "let keep open ca nt anything without repro case", "d": "11/2017"}, {"body": "started seeing error production october stack trace points event listener window unhandled rejections pretty much confirms others pointed cause information gathered error browser firefox os windows use react raven route question nt know related also unable repro hope information helps", "d": "11/2017"}, {"body": "firefox mozilla split testing new security feature rare case", "d": "11/2017"}, {"body": "much gain scope hoisting react except maybe kb children helpers", "d": "11/2017"}, {"body": "main benefit es module option react able use native modules development avoid rebundling every change code ca nt use regular umd build case would also avoid rebundling", "d": "11/2017"}, {"body": "blocked deciding actually want export package form feel free comment proposals", "d": "11/2017"}, {"body": "react released please update use version let us know solved issue appreciate could test monday plan get", "d": "11/2017"}, {"body": "nt updated react yet probably wo nt able monday case found workaround use case conditional reassigning anymore", "d": "11/2017"}, {"body": "gaearon aweary happening running tests reproduce hopefully able also repro steps react amp reactdom use jest testing reactnative preset use enzyme mount function calling mount jest reactnative preset present make style property undefined without undefined node different depending preset reactnative preset node whereas without preset hopefully enough information start debug", "d": "11/2017"}, {"body": "please file new issue runnable project reproducing said nt understand using rn preset reactdom whether intended supported enzyme", "d": "11/2017"}, {"body": "gaearon sure reason want use one test command test reactdom rn components using jest project", "d": "11/2017"}, {"body": "confirm fix safari react version reactdom", "d": "11/2017"}, {"body": "sent pr", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "interested take look weekend", "d": "11/2017"}, {"body": "swyx awesome also look adding fixtures fragments well enable changing flag true see tests usage", "d": "11/2017"}, {"body": "ok reason im immediately jumping dont actually much experience ssr fragments matter nextjs spoiled lol nice way force learn guess", "d": "11/2017"}, {"body": "swyx thanks taking task please feel free ask need anything", "d": "11/2017"}, {"body": "ok take sebastian specified lot things implement incrementally hopefully supervision case go track surprisingly dont section reactjs docs dedicated ssr fact searching server side doesnt provide useful results need search hydrate order find probably good issue raise reactjs docs", "d": "11/2017"}, {"body": "proceeding extremely cautiously thinking eventually look like long page bullet points sebmarkbage laid first half spec originally thinking split tabs might confound ssr testing want confirm good understanding guys envision controlleduncontrolled fixtures see", "d": "11/2017"}, {"body": "hey swyx need help could bullet points want", "d": "11/2017"}, {"body": "yes would like help basically waiting someone help confirm right track supposed address sebmarkbage first bullet point want proceed complete rest first bullet point since fixture page lot examples also wondering put items tabs nt clutter page think may consequences regards ssr avoiding might good idea", "d": "11/2017"}, {"body": "thinking tab system query parameter define initial tab however nt think possible access url server current setup maybe stack single page make one page per bullet point sebmarkbage validated going right way begin second bullet point", "d": "11/2017"}, {"body": "tagging clemmy think right understanding flesh fixture main things want confirm laid pr gif useful fixture sebastian specified lot things tab system avoid super long page would bad idea trying ssr thanks", "d": "11/2017"}, {"body": "going vacation ca nt review ask somebody follow", "d": "11/2017"}, {"body": "took pass questions think great comparison standard format fixtures dom test fixtures example nt think necessarily prescribe approach take using state manage tabs would circumvent ssr tab system used urls hard page refreshes seems ideal select dropdown switches url load new page however would nt worry thanks taking", "d": "11/2017"}, {"body": "updated new proposed structure elements could try reach consensus format merge big picture structure split work bunch smaller issues prs make work stole dom test format wholesale think calls make whether cut extraneous tests gets little messy format excellent using good old anchors table contents system ssr fixture looks like webpage circa almost want rotating react marquee gif", "d": "11/2017"}, {"body": "pinging nhunzaker sec take look thanks", "d": "11/2017"}, {"body": "would great fixed point confused behavior especially saw chromium response saying everything works expected clearly nt move touchstart listener componentdidmount use normal dom api everything works thanks worked", "d": "11/2017"}, {"body": "hmm actually normal dom api solution nt work nt fix firefox android bug firefox triggers mousedownmousemovemouseup events following touchstart matter work around add flag touchstart handler simple return mousedown handler case nt matter add touchstart event listener via standard react way", "d": "11/2017"}, {"body": "sebmarkbage use controlled components nt need touch imperatively therefore wo nt hit edge cases ideally get away reading instead pass directly event handler imo losing access would regression like keep access element props useful access selection range props etc", "d": "11/2017"}, {"body": "error missing import statement corrected importing missing component", "d": "11/2017"}, {"body": "seeing error users ie kalpanaar find anything help solve", "d": "11/2017"}, {"body": "solves", "d": "11/2017"}, {"body": "like quastion execute command npm run build", "d": "11/2017"}, {"body": "verified works windows node close still needs solution keeping open nt care strongly somebody get working cross platform would great", "d": "11/2017"}, {"body": "ok hopefully nt become issue future run build tests ci sorry used problem", "d": "11/2017"}, {"body": "place vote", "d": "11/2017"}, {"body": "nt design apis based number votes would produce good design well aware feature request needs considered part larger component api redesign likely start thinking share ideas think something might viable direction", "d": "11/2017"}, {"body": "thanks dan sorry letting impatience seep", "d": "11/2017"}, {"body": "see comment proposed solution", "d": "11/2017"}, {"body": "xjlim wan na one needs approach", "d": "11/2017"}, {"body": "gaearon sure give try", "d": "11/2017"}, {"body": "done", "d": "11/2017"}, {"body": "hi sorry bump old issue nt example unsafe nt typechecking props using snapshot tests flow types testing components seems like changes defaultprops shallow snapshot purely noise button component example defined like jsx type props text string const button text props gt text buttondefaultprops text click menu component would fail typecheck ca nt think good counter example change defaultprop something breaking fail shallow snapshot test b would nt caught flow curious others think", "d": "11/2017"}, {"body": "ca nt think good counter example change defaultprop something breaking fail shallow snapshot test b would nt caught flow many projects nt use flow", "d": "11/2017"}, {"body": "lol fair enough think value projects least depending stack able exclude unspecified defaultprops shallow snapshot maybe usecase uncommon enough warrant custom enzyme adapter though \u30c4", "d": "11/2017"}, {"body": "think done everything planned gcc advanced still separate issue tracking plans share build process renderers", "d": "11/2017"}, {"body": "gcc", "d": "11/2017"}, {"body": "google closure compiler", "d": "11/2017"}, {"body": "great took hours find fixed second landed", "d": "11/2017"}, {"body": "malikgenius haha feel one things spend ton time figuring first time know fix forever note though react provides really good error messages helps read thoroughly", "d": "11/2017"}, {"body": "yeah message pretty much says likely forgot export component file defined", "d": "11/2017"}, {"body": "guess could amend add something like might mistaken default named imports", "d": "11/2017"}, {"body": "gaearon", "d": "11/2017"}, {"body": "reactshadowdomretargetevents module works problems correct picks native events shadow dom element directly calls react component event handlers onclick etc using native events instead synthetic events think stoppropagation work would nice see react team pick issue provide proper fix shadow dom gaining momentum thinking maybe would make sense attach global react event handlers element returned getrootnode instead document", "d": "11/2017"}, {"body": "think close since ship react", "d": "11/2017"}, {"body": "support take tools support use explicitly meantime hope react less stupid", "d": "11/2017"}, {"body": "recent issue", "d": "11/2017"}, {"body": "bbump would really nice auxclick react", "d": "11/2017"}, {"body": "jquense came regard activepassive events intervention came result something nt common react ecosystem probably fix however seems like something would relevant us probably follow along add another event", "d": "11/2017"}, {"body": "gaearon looks like bug back since react", "d": "11/2017"}, {"body": "case nt work properly please open new issue", "d": "11/2017"}, {"body": "guess main difference browsers use css class chrome may show cross inspector styles drops entire style attribute invalid think maybe dom show raw style applied chrome merely show struck like classes people know made mistake nt react jsx library maybe someone wants submit bug chrome best know browser ghosts bad css attributes react", "d": "11/2017"}, {"body": "confirm issue resolved react context original app thankyou great work release", "d": "11/2017"}, {"body": "gaearon wrap rendered element element context providing component provide example", "d": "11/2017"}, {"body": "styleguidist updatewebpack argv tools uses docker copy files container ramda ramda vs lodash ngreact github search syntax pending code review reviewrequested pr list reviews reviewedby pr find issue participated vscode showing underscore ubuntu commenter issue vscode", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "case react caused invalid html markup incorrect ending however html markup database assume dba always return correct html snippet handle issue finally decide use replace dangerouslysetinnerhtml work around works fine", "d": "11/2017"}, {"body": "seems like actually good place thanks bvaughn", "d": "11/2017"}, {"body": "feature needed render nonreact code example need render party js code something like js export default class thirdparty extends reactcomponent componentdidmount const rootel thisrootel init party code inserts html inside rootel shouldcomponentupdate return false componentwillunmount destroy party code render return documents page read following note future react may treat shouldcomponentupdate hint rather strict directive returning false may still result rerendering component happens code broken sure", "d": "11/2017"}, {"body": "use dragulajs react meteor one help", "d": "11/2017"}, {"body": "already noted problem react supported third party libraries remove nodes already managed react need third party library modify dom add dom node leaf neverchanging react node lifecycle hook anything guide dives detail", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "one possible solution need make sure multiple instances loaded indexhtml react getting added webpack bundle twice running using webpackdevserver htmlwebpack plugin fixed", "d": "11/2017"}, {"body": "issue also occurs dont import childthird party components use current component make sure imported components used current component", "d": "11/2017"}, {"body": "dylanpiercey able solve issue yes share pointers facing similar issue upgrading react", "d": "11/2017"}, {"body": "mgmn ultimately made sure server rendered output tricky dates unknown users also setup way catch error discard dom needed larger problem reason created issue react broken people used browser extensions cases believe fixed removed datareactid sorry help issue also pretty old perhaps fixed react", "d": "11/2017"}, {"body": "unfortunately presence nonpassive listener cause significant jank even userland handlers actually hooked chrome tell log levels toplevel handler added", "d": "11/2017"}, {"body": "mega one problem perfectly explained gaearon", "d": "11/2017"}, {"body": "removed react right going thing react native currently impossible require things like reactnative exact reason understanding", "d": "11/2017"}, {"body": "nt know react native problem describing might better ask rn community forum", "d": "11/2017"}, {"body": "closed got stale still relevant please submit new pr eg based one provide instructions test new behavior", "d": "11/2017"}, {"body": "reactaddonsperf working react version stackflow documentation stating otherwise rlg", "d": "11/2017"}, {"body": "curgery react reactaddonsperf supported please use browser profiling tools get insight components rerender", "d": "11/2017"}, {"body": "hmm realize issue old actually seems like work like first example original post something change found issue trying figure whether use inside proptypesshape thought ca nt behavior seeing right something like first example attributes marked actually required props still optional nt cause warnings passed proptypes", "d": "11/2017"}, {"body": "also remember working like wanted tried later also know would tested opening meh works works", "d": "11/2017"}, {"body": "hello flarnie think would nice draftjs think problem draftjs selectionstate updated mouseup keep mouse pressed paste write word see word part goes wrong place previous selectionstate reproducible draftjs homedemo page facebook status field macos chrome ff safari think good solution test added following code draftjs componentdidmount tests works maybe know unexpected effect sorry english thank", "d": "11/2017"}, {"body": "edit bad looked hjylewis thrashable cancel promises well still pattern imo small improvement none solutions cancel promises cancelled without extension absorbing foreverpending promise js function makecancelable promise let active true return cancel active false promise promisethen value gt active value new promise gt reason gt active reason new promise gt used const promise cancel makecancelable promiseresolve hey promisethen v gt consolelog v never logs cancel live may subtleties iron regarding gc coffee yet kick pattern ensures promise returned really cancelled made leak implemented past", "d": "11/2017"}, {"body": "pygy thanks reply unfortunately solution still nt allow garbage collection essentially rewritten istarkov solution uses conditional test easily dropping implementation trashable running tests garbage collection test fails implementation also fails properly handle errors", "d": "11/2017"}, {"body": "react stupid thing ever seen", "d": "11/2017"}, {"body": "gaearon react suggestion replaces info message warning believe one would need suggested", "d": "11/2017"}, {"body": "oh see somehow missed let address", "d": "11/2017"}, {"body": "okay merged include fix lets specify equivalent bundler warning silenced", "d": "11/2017"}, {"body": "going lock answer nt get lost still issue upgrading released days please file new issue", "d": "11/2017"}, {"body": "starting react tools catch new syntax support", "d": "11/2017"}, {"body": "issue needs reopened taken seriously think major deficiency react cases elements array sensibly assessed rerendering individually occurs change props state likely cause elements array inserted omitted reordered instead changed place cases appropriate simply regenerate whole array update compare corresponding subtree dom difference change whole subtree course avoided whenever possible sometimes sensibly avoided cases makes sense require expect keys elements array recommendation assuming array wrapped outer element allow prop atomic bool outer element indicate whole element children must updated whole part subtree changed implication children require keys often many elements array text major pain wrap text item element put key keys reality arbitrary useless facility recommend would allow react optimise sequences text items concatenating putting dom single text node", "d": "11/2017"}, {"body": "sure understand saying example would helpful occurs change props state likely cause elements array inserted omitted reordered instead changed place exactly case specifying keys important keys let react figure insertedmoveddeleted instead trying update everything place", "d": "11/2017"}, {"body": "apologies think nt explain well supposing spa elizalike program trivial psychologist simulation two areas page one text box allows user enter message second paragraph containing eliza reply reply sequence words forming plain english sentence words bold want declare function return reply given user message since words reply bold want able wrap bits text reply element class example return value might array ended variable might wrap thus get paragraph rendered react complains array elements must keys think would nonsense try put keys everything array case next time update presumably user typed new message reply completely different sequence words feel nt point react trying identify ones changed changed think case better update real dom rerendered children array without wasting time memory trying work changed suggesting could use get effect", "d": "11/2017"}, {"body": "think would nonsense try put keys everything array case therealdebater react nt require key text nodes need add keys elements example array elements totally static set key random value use simple counter alternatively api automatically key array elements reactchildrentoarray used map array elements array elements keys primary purpose api work mind create component want pass array unkeyed elements prop children otherwise keys get checked demo hope helps use case edit nt use like bug", "d": "11/2017"}, {"body": "much appreciate responses like idea component probably use technique would suggest however nt resolve fundamental issue sometimes component inappropriate react checking individually need update real dom subcomponents instead makes sense update whole subtree part changed suspect could save significant cpu time since react longer make updates individual subcomponents react would test changed added lost replace entire subtree suggested prop named atomic might make sense provide new react class called think could api would behaviour describe subcomponents changed replace whole subtree dom like suggestions guess one goes end list prioritised appropriate thanks attention", "d": "11/2017"}, {"body": "suggested prop named atomic might make sense provide new react class called atomiccomponent think could api component would behaviour describe subcomponents changed replace whole subtree dom key outer component update key every change would get behavior", "d": "11/2017"}, {"body": "aweary thought bug elements passed nt validated maybe misunderstanding something", "d": "11/2017"}, {"body": "clemmy yes discussed made comment came conclusion behavior skipping key validation bug therealdebater nt recommend using approach anymore keying parent component force reconciliation syranide seems like simplest solution want general therealdebater arraykey issue would suggest adding keys arbitrary values elements array available point afaik still need key elements using array right clemmy", "d": "11/2017"}, {"body": "ah got able something like nt think solves problem wanting use array without keying", "d": "11/2017"}, {"body": "supported", "d": "11/2017"}, {"body": "clarify still require key elements using dynamic array instead defining statically", "d": "11/2017"}, {"body": "oh yeah sorry nt make clear referring specifically comment", "d": "11/2017"}, {"body": "think release fragments excellent pretty sure making use nt quite resolve issue still way prevent react warning elements array iterator key still way indicate react nodes array component subtree assumed change together need individually replaced dom nt think would difficult invent function would take array nodes add key elements nt already key could invent class derived automatically create new prop eg alternatively could create function called added key necessary anyone see problem techniques recommendations think would nice react got one features added would establish interface implementation could subsequently optimised leisure", "d": "11/2017"}, {"body": "think reasonable use case alternatively could create function keyedchildren called reactchildren added key necessary uncommon enough nt think directly supporting especially since doable userland", "d": "11/2017"}, {"body": "released support new export associated syntax", "d": "11/2017"}, {"body": "far tell latest attempt requested changes nt addressed somebody wants pick probably want read discussion", "d": "11/2017"}, {"body": "anything want css react use backticks style tag example important render also lets weird stuff like hover focus know missing blink tag since got rid back react keyframes blink opacity opacity opacity", "d": "11/2017"}, {"body": "gaearon cool code tries change state component unmounted", "d": "11/2017"}, {"body": "found good solution js constructor props super props thisstate inputtext currenturl thishandlechange thishandlechangebind thisupdateurl thisupdateurlbind debounce thisupdateurl debounce thisupdateurl componentwillunmount thisupdateurlcancel flush case need fire handler immediately", "d": "11/2017"}, {"body": "believe react crash anymore even though produces false positive warning track warning", "d": "11/2017"}, {"body": "change event emitted chrome wrap inputs element", "d": "11/2017"}, {"body": "theres oninput event handler grab value input field changes", "d": "11/2017"}, {"body": "microdata", "d": "11/2017"}, {"body": "react supports arbitrary string attributes", "d": "11/2017"}, {"body": "cases really want break react model use uncontrolled components escape hatch show warning uncontrolled components limit basic html form elements soon need implement slider picker top div custom markup need make controlled case really want break react model use cyclejslike architecture declarative streambased events really wish disable warning", "d": "11/2017"}, {"body": "soon need implement slider picker top div custom markup need make controlled scabbiaza nt believe true clarify mean", "d": "11/2017"}, {"body": "scabbiaza nt believe true clarify mean uncontrolled component state controlled browser stored dom slider eg nt dom state state managed externally ca nt make uncontrolled div browser applies default behavior divs however emulate ui element div making controlled wo nt controlled exactly sense controlled architectural sense dom tied external data source arguing directly apply topic made counterargue quoted comment guess break react model use uncontrolled components always possible desired uncontrolled components limited builtin ui elements controlled components bubbling totally fine architectural patterns react nt favor screwed warning believe warning either point otherwise better removed personally see disturbing trend add warnings react parallel requests options disable particular warning false many cases belongs documentation area removed imo", "d": "11/2017"}, {"body": "wnr followed way let disabled isreadonly disabled disabled", "d": "11/2017"}, {"body": "causes issues css selectors depending checked selector write css selectors like wrong way approach problem browser nt guarantee attributes stay synced properties example instead use pseudoclass works expected toggled js including react", "d": "11/2017"}, {"body": "nice approach would even jsx could support something like natively used ruby templates jsx could look like", "d": "11/2017"}, {"body": "see lock issue jsx react hopefully links helpful", "d": "11/2017"}, {"body": "vmakhaev seeing error upgrading version enzyme find way suppress warnings jsdom", "d": "11/2017"}, {"body": "problems please file new issue nobody actively reads old issues requests help get lost", "d": "11/2017"}, {"body": "released", "d": "11/2017"}, {"body": "started new thread discuss move ecosystem stop depending break good eventually sophiebits suggested sounds reasonable folks depend create userland component instead others depend let discuss effort", "d": "11/2017"}]