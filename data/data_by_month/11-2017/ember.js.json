[{"title": "big memory leak destroying templates contain iframe", "body": "create destroy components include iframe get enormous memory leak time twiddle content iframe nt mopped", "num": "15872", "d": "11/2017"}, {"title": "giving object param helper nt work expected", "body": "route params given via object helper wo nt appear route also case calling instead example javascript route decleration thisroute myroute path foo bar baz thistransitionto myroute thisparamsfor myroute gt foo bar baz thistransitionto myroute foo bar baz thisparamsfor myroute gt transition cases works fine url build params expected method works differently also twiddle reproduces", "num": "15870", "d": "11/2017"}, {"title": "regression certain browser", "body": "like hesitantly report could understood regression builtin browser samsung tv case model basic handlebars rendering computed property working correctly upgrading version rendering failing see two screenshots pages barebones ember app created ember cli using ember new difference version embersource used test done applicationhbs template computed property applicationjs controller returns render successful applicationhbs template simply renders property notes script errors seem occur test listening windowonerror would logged result div interestingly debug build used rather production build rendering works correctly motivation one customers uses four tvs display one product pages kioskstyle mode important know nt great reproduction steps assuming people access browser anyway wondering chance someone knows change might responsible issue guessing something update glimmer mentioned relevant blog post issue might happening production debug builds change make emberjs code narrow issue say extremely timeconsuming debug browser belongs customer request take screenshots us technically regression presumably kind tv browser nt officially supported lucky worked tv insight would greatly appreciated", "num": "15867", "d": "11/2017"}, {"title": "emberlogger missing api docs", "body": "listed api docs however version docs emberlogger also seems missing rfc list new modules globals reference", "num": "15866", "d": "11/2017"}, {"title": "wrapped ember inputs fire enter key events", "body": "using ember inputs across app small bug found leading us avoid using events components including inputs essentially native inputs behave differently ember inputs wrapped component see using native input press release return key get following events using ember input get following events well however using wrapped ember input get following events feel free exploration ember twiddle keyboard event twiddle", "num": "15865", "d": "11/2017"}, {"title": "promise chains bizarre consequence registering handler emberonerror", "body": "seems upgrading effect registering global error handler using changed promise chains handled using pattern handling errors long promise chains involves stepspecific reject handlers handlers would responsible handling errors previous step additionally handlers would continue rejecting way chain even error handled none rest chain executed unfortunately pattern seems possible registering error handler example guides suggests used logging errors would expected whether one registeres error handler nt affect methods called promise chain however seems case illustrate behavior example repo file boolean variable toggled determine global error handler using registered set get expected behavior set promise chain continued despite error thrown reject handler passed case output looks like behavior quite problematic means chain continue exception thrown handler also bizarre behavior contingent whether handler registered", "num": "15864", "d": "11/2017"}, {"title": "emberapplicationinstance factoryfor available api docs", "body": "noticed factoryfor docs show api docs looked following pages", "num": "15863", "d": "11/2017"}, {"title": "computed property correctly invalidated tests", "body": "test computed property mixin test setting field value objset computed property based testing computed property contains correct value assert computed property set assert set assert etc test work set invalidate computed property get assert invoke computed property tests application run computed property invalidated thus tests failing cached value incorrect however filter run tests mixin pass computed property invalidated correctly every time verified putting console log computed property tests log one time filtered tests log correct times due sets stepped code tests running setting property computed based code invalidate cache skipped cant quite understand code determine whats different internally running tests tests mixin code starts line seen set didseen line top seen didseen null seen didseen set cache cleared iterdeps line seen passed didseen nulled line null begin top true code actually didseen ever set anything null tests run didseen null large hash objects line finds value line early exits never invalidating cache tests run filtered mixin didseen null value found early exit cache gets invalidated purpose didseen top trying accomplish didseen ever set file level variable instance level somewhere get tests work basically put ever set expect test seems work multiple sets followed gets test computed property invalidated work nt note ember code master seems look like code stepped", "num": "15861", "d": "11/2017"}, {"title": "adding custom css classes linkto component active", "body": "hi ember developers would like suggest small improvement component think adding new attribute help ember developer bind classes active simple terms reverse help developer writing custom css classes nonactive help avoiding writing custom unnecessary jquery code thank", "num": "15860", "d": "11/2017"}, {"title": "wrong sourcemaps embermetal", "body": "though problem side saw decided open new issue number releases file", "num": "15859", "d": "11/2017"}, {"title": "setunknownproperty used documented return value undefined", "body": "unknown properties section set documentation least earlier versions says returns undefined simply set value object similar section says sets value property object property defined object implements setunknownproperty method invoked well however invokes object method nothing done return value particular property set object function returns undefined easily seen propertysetjs called without assigning return value anything nothing else happens function call except returning rather invoked well invoked instead setting property value object error docs understanding bug intended operation code happy take stab pr latter interest", "num": "15856", "d": "11/2017"}, {"title": "dynamic segment application route", "body": "need help adding dynamic segment application level make backward compatible require optional dynamic segment existing urls must replaced dynamic segment available hits router class appreciate help", "num": "15852", "d": "11/2017"}, {"title": "classnamebindings compiles causes runtime problems", "body": "double classnamebinding compile ok generates runtime error afterwards eg classnamebindings isvertical vertical horizontal isvisible visible hidden produces uncaught typeerror read property split undefined processcomponentinitializationassertions curlycomponentmanagercreate appendopcodesevaluate vmnext templateiteratornext rootstaterender exportsrunintransaction interactiverendererrenderroots using ember", "num": "15851", "d": "11/2017"}, {"title": "deleting object keys nt update children component templates", "body": "reproduced add item remove button string changes component template button nt update children components bug deleting key correctly updates template current component fails update templates children components", "num": "15847", "d": "11/2017"}, {"title": "computed filter regression", "body": "regression bug computedfilter observing property changes properly release paste console obj emberobjectextend filtereditems embercomputedfilter items prop function item return itemget prop false obj objcreate objset items emberobjectcreate prop false consolelog expected actual objget filtereditemslength objget items set prop true consolelog expected actual objget filtereditemslength third core regression bug found one pretty major happening shall pr failing tests coreobject module rwjblue", "num": "15843", "d": "11/2017"}, {"title": "error substate receive model hook rejection reason unless error object", "body": "return model hook error substate recieve reason model indicated guides reason error ie exception thrown promise reject value passed error state model see instead return works expected think either bug case docs need bit work", "num": "15842", "d": "11/2017"}, {"title": "blank page combining templatename rendertemplate route subroutes", "body": "application multiple named outlets displaying reasons render nested route next parent route instead nested overriding outlet also override route route also subroutes unfortunately causes blank screen errors console see embertwiddle reproduction issue circumvented three ways removing making sure template right name exists overriding fixing display css instead removing subroutes relevant route router would expect combination three work though least give error message overlooking something least case ember", "num": "15841", "d": "11/2017"}, {"title": "multi brace arrayproxy break depwatch chain", "body": "hi problem following twiddle ember also clone repository traced problem issue meta information multi brace seems invalidate cache clear chains leaving state chain broken rebuild first propertydidchange trigger reread whole chain rehooks chaindeps next seems clear meta info trigger whole chain properties already pre watchingdeps get reset rerender later seem happen en also nt know triggered maybe dirty flag maybe somebody knows changed dependency chain handling btw debugging bit hard since seems incorrect sourcemaps metallib known bug", "num": "15840", "d": "11/2017"}, {"title": "missing properties methods embercoreview documentation descendant classes", "body": "compare go", "num": "15839", "d": "11/2017"}, {"title": "getting isdestroyed return undefined nested keypath", "body": "attempt get isdestroyed attribute destroyed nested object using getter return undefined instead true due loop getpath propertygetjs var classx emberobjectextend child embercomputed function return emberobjectextend var x classxcreate xget child isdestroyed true consolelog xget childisdestroyed return undefined cause issue value opposite expect code still treat object destroyed though understand reason getter would return undefined destroyed object maybe make exception isdestroyed", "num": "15837", "d": "11/2017"}, {"title": "coreobject observerreads regression", "body": "pretty weird regression happened failed tracing commit caused maybe guyz help paste snippet console ember app see const obj emberobjectextend name embercomputedreads somethingelse namedidchange emberobserver name function objcreate name objcreate name happens devtools sshot put verbally create one object overriden computedreads property chained dependency active observer watches property world collapse edgecase need exactly kind behaviour app error wo nt show change computedreads nonchained property observe property computedreads points nt override computedreads prop creation use ember version lt", "num": "15836", "d": "11/2017"}, {"title": "linkto integration tests throw read property applyintent undefined", "body": "following error occurs canary works properly prior releases test test attempting ensure component integration test capable rendering even router bootedavailable demo repo suspect caused one following pr changed things routing andor linkto area", "num": "15831", "d": "11/2017"}, {"title": "wildcard routes nt run model hooks different wildcards", "body": "given route like calls url changes model expectation similar routes dynamic segments model hook would always called", "num": "15830", "d": "11/2017"}, {"title": "exception handling inside run loop differs test production", "body": "hi upgraded app latest got new set errors tests bit digging able find problem test environment test adapter catches reports exception thrown inside run loop means error propagated code demonstrate created example works perfectly fine production environment fails test repo containing failing test js throwcomponentjs export default componentextend errormessage actions throwerror try join gt throw new error error thrown runloop catch e set errormessage emessage hbs throwcomponenthbs errormessage js acceptance test failing test visiting function assert visit click throwbtn andthen function assertequal find errormessage text error thrown runloop expected behaviour recommended way handle errors come run loop", "num": "15827", "d": "11/2017"}, {"title": "make caninvoke public", "body": "kind minor request could made public added module exports already public found also valuable would nice publicly available", "num": "15813", "d": "11/2017"}, {"title": "emberarray replace", "body": "documentation strings used enumerables together pushobject eg arr contains according documentation usage objects would expect replace second empty string right", "num": "15812", "d": "11/2017"}, {"title": "make transition engines subroute inrepo application throws error", "body": "let engine mounted testengine list route making transition throws make transition one one works later transition works reproducible gt", "num": "15809", "d": "11/2017"}, {"title": "index available partial upgrade", "body": "double nested idx making partial working simply upgrading changes longer works still experiencing even though claims fixed sure manifestation bug", "num": "15807", "d": "11/2017"}, {"title": "enumerable contains deprecation docs links give", "body": "deprecation docs enumerable contains links two equality algorithms give followed looks like link strict equality comparison algorithm needs updated link samevaluezero algorithm needs updated", "num": "15805", "d": "11/2017"}, {"title": "secret admirer", "body": "hey ember community past years working react applications followed hype build react yes react great everything else around complicated fragmented inconsistent needless say looking back say wish started ember amount hours wasted setting react webpack react router infuriating time understood router released new version totally different imo make things better let guys know start new project today would ember keep guys guys right path provide cohesive experience building ambitious front end application advertised ember far right choice coming guy maintain react apps", "num": "15804", "d": "11/2017"}, {"title": "double render assert meta leaks memory", "body": "", "num": "15803", "d": "11/2017"}, {"body": "rwjblue removed", "d": "11/2017"}, {"body": "rwjblue emberweakmap removed believe list", "d": "11/2017"}, {"body": "nt taken start working sub tasks", "d": "11/2017"}, {"body": "thoov tackled sivakumarkailasam take look pr help review determine missed", "d": "11/2017"}, {"body": "rwjblue help review change tactic take bottom list", "d": "11/2017"}, {"body": "thoov sounds good updated items marked whole subsection lock ed need create legacy support addon env flag infrastructure one else working deprecations blocked anyways", "d": "11/2017"}, {"body": "like work support hacks still grabs", "d": "11/2017"}, {"body": "tsauer ready raise pr", "d": "11/2017"}, {"body": "well pick remove polyfills shims", "d": "11/2017"}, {"body": "ill take stab", "d": "11/2017"}, {"body": "taking", "d": "11/2017"}, {"body": "taking routerdsl", "d": "11/2017"}, {"body": "taking", "d": "11/2017"}, {"body": "taking arity check initializers", "d": "11/2017"}, {"body": "locks one thing keep mind ca nt remove functionality completely yet either add wrap conditional flag due stated goal blog post expand migration window applications adopt releasing addon provides support emberjs apis series committing support addon ember first lts candidate ember cycle want contribute effort find package name", "d": "11/2017"}, {"body": "rwjblue roger review perfeature best approach might partial moving implementation legacy addon possible nothing else seems neater", "d": "11/2017"}, {"body": "absolutely agreed need ensure path forward things like support almost certainly wrapped conditionals things like totally done addon directly", "d": "11/2017"}, {"body": "enumerable contains", "d": "11/2017"}, {"body": "taking", "d": "11/2017"}, {"body": "taking", "d": "11/2017"}, {"body": "taking", "d": "11/2017"}, {"body": "taking", "d": "11/2017"}, {"body": "content iframe nt mopped share details specifically indicates iframes getting cleaned sure able reproduce seeing also provide reduced example embertwiddle series iframes may confuse problem", "d": "11/2017"}, {"body": "interesting example provided seem unbounded number iframes heap inspector", "d": "11/2017"}, {"body": "ya given example heap seems maintain stable size tested iterations iterations scenarios number frames heap size experiencing leak likely reproduction steps missing", "d": "11/2017"}, {"body": "look number htmldocument nodes heap looks though entire framed dom leaked", "d": "11/2017"}, {"body": "real world app use leafletjs map pages supplied client use image tiles leak gb per hour", "d": "11/2017"}, {"body": "heap snapshots taken twiddle forced garbage collect immediately one minutes apart", "d": "11/2017"}, {"body": "bryancrotaz hmm ya see number instances grow next time would really great could provide information issue would really make issues actionable interestingly though far ca nt see anything ember related retaining case appears one internals ember nt able affect either heapsnapshot tool broken hiding bug ember something funky land", "d": "11/2017"}, {"body": "relevant code heapsnapshot screen shots", "d": "11/2017"}, {"body": "also context believe ember merely literally toggling", "d": "11/2017"}, {"body": "pinging friends maybe sanity check hypothesis open crbug", "d": "11/2017"}, {"body": "potential minimal reproduction sporadic growth cleanup seems like leak really slow cleanup html let count const const settimeout function loop framesrc count count settimeout loop", "d": "11/2017"}, {"body": "sorry confusion meant saying content iframe mopped know root retainer big island references", "d": "11/2017"}, {"body": "prob good bubble issues way get solved regardless root cause lies", "d": "11/2017"}, {"body": "looked code bit beyond knowledge js engines looks though caching dom url case example expect ever see cached copies seeing high", "d": "11/2017"}, {"body": "bryancrotaz code see", "d": "11/2017"}, {"body": "hashseed guessing lot first look engine code stefan suggested", "d": "11/2017"}, {"body": "see indeed cache instantiating objects object templates entirely clear related components guessing may actually cause leak cache jsobjects since references context verwaest insights though", "d": "11/2017"}, {"body": "hashseed verwaest nt think component fault disposing iframe correctly framed document resources staying cache sound causing mem leak overly long caching strategy causing problems constrained devices", "d": "11/2017"}, {"body": "actual root looking thing marked document dom trees basically means blink oilpan thinks dom trees still rooted typically single nonprimitive object native context leaks context including instantiations caches stay alive particular path seeing htmldocument objecttemplate marked cacheable template htmldocument instance seeing instantiations cache reason cache held native context held htmldocument constructor context pointer points native context constructor installed proto another htmldocument native context sure multiple htmldocument instances native context expertise second htmldocument rooted one hashseed since ooo perhaps ping someone blink bindings gc teams look tue nov pm bryan notifications githubcom wrote hashseed verwaest nt think component fault disposing iframe correctly framed document resources staying cache sound causing mem leak overly long caching strategy causing problems constrained devices receiving mentioned reply email directly view github mute thread", "d": "11/2017"}, {"body": "browser run version reproduce sure proceed case given hard find root cause", "d": "11/2017"}, {"body": "thanks response serabe answer questions yes issue exists also ie exists since browser proprietary inbuilt browser samsung model version number unknown information help menus browser described extent user manual course makes difficult debug really sure expect team guess thought report anyway case something else related comes somebody knows might best debugged someone owns tv repro", "d": "11/2017"}, {"body": "related", "d": "11/2017"}, {"body": "looks like emberlogger something went away version version researching figure happened", "d": "11/2017"}, {"body": "ok april logger refactored emberconsole directory nt specified therefore get picked documentation build process forward working fix reintroduce going work fix adds back", "d": "11/2017"}, {"body": "ha nevermind nt path included config", "d": "11/2017"}, {"body": "jtmckibb need use allow event propagate else translated events clicked sure correct behavior need exist better clarify rwjblue", "d": "11/2017"}, {"body": "feel like might antipattern ember inputs mimic behavior native inputs also default behavior ember inputs default behavior ember components", "d": "11/2017"}, {"body": "modifying bit twiddle see logs directly screen behave", "d": "11/2017"}, {"body": "able reproduce behavior starting currently emberjs master branch beta downgrading backburner nt yet worked changed backburner cause problem", "d": "11/2017"}, {"body": "reviewing wonderful research kbullaughey along lengthy pairing session hjdivad believe fixes issue explains exactly happening", "d": "11/2017"}, {"body": "provide reproduction please", "d": "11/2017"}, {"body": "hello abdullahdahmash feature requests need go rfc process explained contributing guide thank", "d": "11/2017"}, {"body": "thank reaching sankarganesh however reserve issue tracker bugs ember check community page stackoverflow discuss slack links ask question good luck", "d": "11/2017"}, {"body": "thanks reporting definitely make better believe throw error entries array strings", "d": "11/2017"}, {"body": "take", "d": "11/2017"}, {"body": "sarupbanskota still interested", "d": "11/2017"}, {"body": "yes failing test pr would helpful sure root cause without digging yet", "d": "11/2017"}, {"body": "scanned changes see embercore updating going ca nt find source regressions", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "ya probably fix implementation allow promises rejected string values", "d": "11/2017"}, {"body": "seems incorrect sourcemaps metallib known bug nt recall open issue maybe search report new issue", "d": "11/2017"}, {"body": "nt understand twiddle every time check checkbox updating length properties reproduce issue reporting", "d": "11/2017"}, {"body": "updated twiddle seems update nt dug code repro confirm nt valid using canary builds", "d": "11/2017"}, {"body": "might related", "d": "11/2017"}, {"body": "sorry confusion twiddle nt know could specify karthiick nt know related one seems regression bug seems already exist seems correct behavior breaks see find changes stand", "d": "11/2017"}, {"body": "playing twiddle showing correct behaviour fixes issue", "d": "11/2017"}, {"body": "yes maybe correct behaviour due global rerender triggered bugged version nt know glimmer rerender logic works", "d": "11/2017"}, {"body": "fixed", "d": "11/2017"}, {"body": "confirming fixed", "d": "11/2017"}, {"body": "bekzod would mind taking look exactly scenario eg without routing referring", "d": "11/2017"}, {"body": "rwjblue sure looking", "d": "11/2017"}, {"body": "rwjblue sorry could nt resolve dug bit found ignoring first positional param called parameter passed suspect something unfamiliar zone", "d": "11/2017"}, {"body": "hmm think issue inline linkto test though", "d": "11/2017"}, {"body": "confirm think issue inline linkto test though well happens inline well block form", "d": "11/2017"}, {"body": "furthermore found using path mentioned docs navigating route different wildcards transitions one behind", "d": "11/2017"}, {"body": "hang working repro well may user error", "d": "11/2017"}, {"body": "yup geez", "d": "11/2017"}, {"body": "feature requires follow rfc process described contributing thanks", "d": "11/2017"}, {"body": "third argument replace needs collection", "d": "11/2017"}, {"body": "sarathkumarbaskaran make example bug perhaps github gitlab shared git repository one first steps verifying bug reproduce behavior", "d": "11/2017"}, {"body": "pixelhandler thanks note issue happens make reference application controller engine controllers application controller controller injection reproducible example let fails registered container use case little weird curious know change behavior factoryfor lookup", "d": "11/2017"}, {"body": "tl dr create nt really issue engines perse inject autogenerated controller generated reason seems related engines extending app controller within engine breakdown going transition nested route directly router resolves enginetest engine router identifies target route enginetestlist router attempts instantiate route controller note controller actually reexport apps controller includes controller instantiated checks confirm required injections available attempts find inside engine found therefore error thrown transitioning transitioning force created allows injected controller check transitioning succeed closing believe bug", "d": "11/2017"}, {"body": "rwjblue cool stuff wanted point works version lt", "d": "11/2017"}, {"body": "atomkirk would mind submitting failing test pr like linked", "d": "11/2017"}, {"body": "many different scenarios play definitely fixing ones reported confirmed passing previously failing test cases patch releases sorry frustrating", "d": "11/2017"}, {"body": "well ca nt reproduce twiddle maybe installation somehow might related errors", "d": "11/2017"}, {"body": "atomkirk please continue try isolate issue eager help reproduce also feel free make full repo clone suspect issue twiddle", "d": "11/2017"}, {"body": "think probably related version mitchmatch pointed im still trying verify problem lets close many thanks taking time", "d": "11/2017"}, {"body": "problem let us know still issue try keep digging", "d": "11/2017"}, {"body": "thank much kind words please join us ember community slack request invite slackin hope see soon slack thanks", "d": "11/2017"}, {"body": "appears like previous versions ember lt model hit value calls always seeing intended results digging right embedded fairly deep picking right approach tough see needs done sure start", "d": "11/2017"}, {"body": "thanks opening issue love figure think first step would submit failing test pr tests router service around query params", "d": "11/2017"}, {"body": "one thing certain actual bug implementation thats failing test pr would super helpful bug documentation around router service invocation concerns somewherenested router service transitionto invocation thisget router transitionto queryparams nestedparam current implementation router service specified query params used perspective implementation implicitly means setting due triggering model hook invoked need figure current implementation wrong eg rfc says inherit existing query params docs wrong eg expected behavior well documented", "d": "11/2017"}, {"body": "rwjblue notice embercli version param somewhereparam cleared never changes model hook never invoked embercli version noticed somwhereparam held onto causing changes model hook invoked", "d": "11/2017"}, {"body": "rwjblue line emberrouting looking entirely sure somwhereparam default value null expected somewhereparam really set idea removed query params list unless really changed since still default value reason include list changes perhaps understanding motivation entirely", "d": "11/2017"}, {"body": "rwjblue get work tests expected behavior would following implementation controllers keeping existing query params also actually set value would need change updated reproduction display value nt change also change stay triggering another router service transition nt trigger another model call also setting points attempt keep default query params", "d": "11/2017"}, {"body": "rwjblue opened would mind taking look giving pointers start fixing", "d": "11/2017"}, {"body": "rwjblue sorry bother still open would possible anyone else give pointers best fix", "d": "11/2017"}, {"body": "atomkirk great example reproduce issue", "d": "11/2017"}, {"body": "would love ember twiddle supports way update great tool love see updated", "d": "11/2017"}, {"body": "drop addons section choose channel dependencies", "d": "11/2017"}, {"body": "also error looks like mismatch ember versions template compilation output changed two versions error getting seems infer inline precompiled template recompiled new ember version template compiler", "d": "11/2017"}, {"body": "oh interesting followed upgrade instructions namely delete existing compiled stuff make sure packagejson deps got updated right versions suggestion try", "d": "11/2017"}, {"body": "atomkirk using embersource npm consuming via bower bower probably also want", "d": "11/2017"}, {"body": "fixed released", "d": "11/2017"}, {"body": "using still seeing mean maybe also noticed double nested making partial simply upgrading longer works separate bug", "d": "11/2017"}, {"body": "atomkirk yes lets treat separate bug would mind filing possibly creating failing test case like", "d": "11/2017"}, {"body": "averydev thanks reporting issue providing reproduction issue summary conditional display element click handlers result creating destroying elements associated handlers though use attach action handler dom attribute element event handler torn upon removal element though attr appear dom however using action attached dom attribute element create additional handlers time condition met order render element dom difference latter attach function dom element attribute appears way teardown event handler attached attribute short use style attaching event items destroyed recreated eg long list think traditional use attaching dom attribute registers callback events listented using event delegation thus adding extra event handlers sure solution automatic teardown function handlers elements removed due condition template gotchas using well think work around avoid use elements need created destroyed often primary benefit using recieve argument handler documentation utilize event object function parameter define event handler component designed receive browser event object assign action inline event handler template creates closure action receive event object argument see original implementation need receive argument use component define event handler component instead using action assigned attribute avoid leak bound event handlers used caution", "d": "11/2017"}, {"body": "inclined think bug ember framework provides various ways listen events tradeoffs using component event handler setup teardown properly", "d": "11/2017"}, {"body": "also mentioned forked twiddle example result regarding adding handlers element attribute", "d": "11/2017"}, {"body": "averydev updated forked twiddle show using component event handler see", "d": "11/2017"}, {"body": "hi pixelhandler thanks looking good thing plenty good alternatives likely perfect alternatives without listener downside particular rereading docs noticed following option first time forked twiddle result quick test cleans nicely great thinking bit surprised option nt clean given output html reason would characterize bug following reasons falls use framework type feature prevalent throughout docs personally expected leak listeners memory without additional effort fact formulation found docs throughout ember fact first two examples docs action helper show form also widely found addon docs instance emberconcurrency given doubt many ember developers think downside particularly common formulation explicit seems less magical bad thing also listener issue occurs regardless using etc particularly need something like also nt need creating destroying thousands items issue reason stumbled issue prolonged use app working currently gobbling tremendous amounts memory point prolonged usage would grind app halt reason think even single listener nt cleaned reference parent leading detached dom trees ca nt garbage collected culprit turned search field would filter results user typed listeners table rows could wrong pretty sure going", "d": "11/2017"}, {"body": "also nt anything specific causes issue would reason element removed template instance", "d": "11/2017"}, {"body": "believe bug", "d": "11/2017"}, {"body": "thanks heroiceric", "d": "11/2017"}, {"body": "hi like help task quite new emberjs contribution could point toward documentation needs updated new url structure", "d": "11/2017"}, {"body": "minimal bug repro took couple days taking away parts production app left js routesapplicationjs import route emberroutingroute import inject service emberservice import next emberrunloop import rsvp rsvp export default routeextend fastboot service model let deferred rsvpdefer thisget fastbootisfastboot thisget fastboot deferrendering deferredpromise js controllersapplicationjs import controller embercontroller export default controllerextend devdependencies", "d": "11/2017"}, {"body": "hitting app well seems big part us", "d": "11/2017"}, {"body": "finally knowledgeable enough ember project see going indeed exactly thanks patience", "d": "11/2017"}, {"body": "issue reproduction edit nevermind forgot component attributes still mutable default", "d": "11/2017"}, {"body": "guys completely sure solved twiddle serabe still fails works incidentally noticed modify partial write actually prints correct value", "d": "11/2017"}, {"body": "ember lts nt think fix coming", "d": "11/2017"}, {"body": "confirm", "d": "11/2017"}, {"body": "oh ok thought fix backported glimmer would meant working ember guess skip directly thanks", "d": "11/2017"}, {"body": "webark luck", "d": "11/2017"}, {"body": "pixelhandler nope event dispatcher never gets loaded whole file never gets loaded", "d": "11/2017"}, {"body": "really sure nt time clone reproduction test things sure going think general advice essentially avoid example would probably better work hook application route instead inside initializer know thats great answer think unblock things", "d": "11/2017"}, {"body": "closing bug ember framework", "d": "11/2017"}, {"body": "luck ember", "d": "11/2017"}, {"body": "nope", "d": "11/2017"}, {"body": "updated test repo", "d": "11/2017"}, {"body": "probably need bisect figure regression introduced nothing jumps changelog", "d": "11/2017"}, {"body": "nt", "d": "11/2017"}, {"body": "nt think rejecting without reason case rejection provided reason", "d": "11/2017"}, {"body": "built test repo diff output unable find anything obvious", "d": "11/2017"}, {"body": "believe addressed need test reproduction confirm", "d": "11/2017"}, {"body": "ok finally run issue ground doozy underlying principle tests rejected promises handled within run loop trigger unhandled rejection handler default calls fails current test generally speaking desireable ergonomics wise given test passes ember lt fails js test error function assert assertexpect thisset promise rsvpreject bar thisrender hbs return wait gt assertequal text error bar see following things happening create rejected promise queues unhandled rejection assertion invoke essentially invoke ultimately going instantiate component provided promise call primary difference ember versions unhandled rejection assertion delivered ember lt assertion queued ran flush run loop next tick eg since synchronous meant ember lt promise rejection handled time unhandled rejection assertion ran therefore assertion made ember versions include assertion queued ran flush next run loop means run loop ran assertion triggered therefore test fails unfortunately believe change behavior desirable remain different ways successfully test interaction made separate pr demo repo show pass pending promise either resolve reject needed chain rejected promise reset unhandled rejection state avoid assertion monkey patch swallow unhandled rejection assertion", "d": "11/2017"}, {"body": "believe new behavior correct though agree change behavior surprising going close happy reopen made mistake though", "d": "11/2017"}, {"body": "rwjblue thanks detailed explanation like look option give go happy closed favour shown neater way testing scenario thanks help", "d": "11/2017"}, {"body": "simonihmig jrjohnson caseywatts offirgolan alvincrespo perhaps post sheds light considerations running asyncawait", "d": "11/2017"}, {"body": "pixelhandler really rwjblue writing setting app test suite support async await issue async await promises fulfilled tests since ember knowledge stated happens target latest browsers need regenerator", "d": "11/2017"}, {"body": "thanks sharing pixelhandler related rwjblue blog post found asyncawait already totally helps tests ways ready used inside ember app code yet", "d": "11/2017"}, {"body": "hoping kickstart efforts enable probably track actual issue think predates issue bit try chime quick status update lay game plan krisselden coaching", "d": "11/2017"}, {"body": "locks closed favor documention issue elsewhere", "d": "11/2017"}, {"body": "lolmaus think opening issue glimmer repo", "d": "11/2017"}, {"body": "pixelhandler offending line ember repo even sure pure glimmer apps affected", "d": "11/2017"}, {"body": "ok completely rewritten emberelementquery addon ensure updates done efficiently current implementation element querydriven components register treelike structure root eq components react window resize event tell children resize resize event propagates recursively parents children ensures component update e window resize every eq parents realigns issue still happens eq components nested deep enough error crashes app continuous resize able work around issue wrapping event propagation parent children makes event propagation noticeable naked eye instead components realigning see realign sequentially makes native ember implementation element queries worse generic implementation commenting error throwing line renderer destroying line makes work correctly seems practical purpose putting spoke wheel angry please fix", "d": "11/2017"}, {"body": "laynegt luck", "d": "11/2017"}, {"body": "pixelhandler ran tried day bug still active", "d": "11/2017"}, {"body": "app transitioning route different param deactivate hook normally called however add postloadinghbs template make transition deactivate get called case definitely exiting would expect called certain super well understood try explain think disconnect bgentry example following route structure exists case move absolutely exit deactivate called", "d": "11/2017"}, {"body": "rwjblue explanation makes sense upon closer look think issue related one anyway sorry causing extra confusion issue describing bug parent route calls child route transitions loading though nt verified still exists", "d": "11/2017"}, {"body": "gotcha thanks clarifying bgentry believe explanation also applies original posters comment well words believe intentional desired behavior docs need updated make clear let think bug", "d": "11/2017"}, {"body": "ryanrishi luck using current version ember eg", "d": "11/2017"}, {"body": "seems issue krisselden time would mind poking one", "d": "11/2017"}, {"body": "gabrielgrant regarding documentation might worth updating didinsertelementdidrender docs explain done hook along proper workaround one exists right docs didrender say leverage didrender hook perform postprocessing dom component updated seems imply work creating pull request docs", "d": "11/2017"}, {"body": "cibernox issue need stay open", "d": "11/2017"}, {"body": "actually acceptance tests fine provided people nt use builtin global helper ones close", "d": "11/2017"}, {"body": "locks update one", "d": "11/2017"}, {"body": "closing favor", "d": "11/2017"}, {"body": "ykaragol curious still issue", "d": "11/2017"}, {"body": "pixelhandler nt test use workaround shown stackoverflow question", "d": "11/2017"}, {"body": "emberqunitasserthelpers addon specifically created handle scenario", "d": "11/2017"}, {"body": "fixed essentially reverts adds bunch tests", "d": "11/2017"}, {"body": "embertwiddle example seems work issue fixed", "d": "11/2017"}, {"body": "still breaks remove one one last characters remove one line inspector error", "d": "11/2017"}, {"body": "alonski yeah suspicious name glad work around using close", "d": "11/2017"}, {"body": "pixelhandler sure closed maybe add workaround cli ca nt create templates named templatehbs", "d": "11/2017"}, {"body": "mixonic update regarding direction ember closed", "d": "11/2017"}, {"body": "rwjblue mixonic added labels bugproposed feature", "d": "11/2017"}, {"body": "yes problem", "d": "11/2017"}, {"body": "anyone idea fix problem", "d": "11/2017"}, {"body": "nt think issue tested newly generated projects properly file importable testing system going close nt ember bug others still hitting either create issue emberjsguides repo going tutorial create issue embercliembercli repo either case repo demonstrates issue almost certainly needed us figure going", "d": "11/2017"}, {"body": "lucaszheng issue still exist ember", "d": "11/2017"}, {"body": "seems working properly ember likely fixed", "d": "11/2017"}, {"body": "pixelhandler fixed", "d": "11/2017"}, {"body": "also confirm windows", "d": "11/2017"}, {"body": "basic plan forward create separate addons would contain implementation would nothing targets support native include polyfill likely bring implementation emberjsemberjs depends extends native update emberdata use needed emberdata changes land release version land deprecations profit", "d": "11/2017"}, {"body": "rwjblue thanks detailed plan put todo list", "d": "11/2017"}, {"body": "repos", "d": "11/2017"}, {"body": "nathanhammond explain reason warning tradeoff changes gives advantage new versions changing", "d": "11/2017"}, {"body": "ever found way around problem", "d": "11/2017"}, {"body": "givanse upgraded ember nt seem issue anymore", "d": "11/2017"}, {"body": "would love reproduction original repro pretty date emberobserver client", "d": "11/2017"}, {"body": "", "d": "11/2017"}, {"body": "hmm exemplary use case ember key features debounce model refresh query parameters employing common pattern resource searching unfortunately way prevent query params reverted refreshing route", "d": "11/2017"}, {"body": "seems like last summer regression chrome reintroduced issue", "d": "11/2017"}, {"body": "tagname fixed", "d": "11/2017"}, {"body": "thx robclancy even need code like linkto sticky query params disabled default enable adding qp like", "d": "11/2017"}, {"body": "still issue ember surprised still nt tell nobody sorts id", "d": "11/2017"}, {"body": "ondrejsevcik use custom sorting function ember data ids strings", "d": "11/2017"}]