[{"title": "onmouseover work svg", "body": "implementing something using svg circles nt seem work found old issue following fiddle expected work spicyj commented thread makes work suppose regression", "num": "3990", "d": "5/2015"}, {"title": "sgml comments jsx", "body": "eg xml thispropsitemsmap item gt item", "num": "3989", "d": "5/2015"}, {"title": "feature request make shallow rendering slightly less shallow", "body": "writing tests components trying new feature shallow renderer example wanted assert anchor tags rendered certain inner text however rendering shallow nt even give access text show spancontents missing something assert things top level guess better rendering string feeding html parser", "num": "3987", "d": "5/2015"}, {"title": "reactjs angularjs", "body": "problem using reactjs angularjs app problem error nt know warning something calling react component directly use factory jsx instead typeerror read property reactautobindmap undefined constructor objectfn scope digest scope apply done completerequest xmlhttprequestrequestloaded anonymous function jsx reactdom function use strict mycomponentjs var mycomponent reactcreateclass displayname mycomponent render function return reactdomdiv null rendering faster angularjs thispropsframework view", "num": "3986", "d": "5/2015"}, {"title": "multi element conditionals trap developer key warnings", "body": "standard way something middle block jsx ternary boolean expression ie need conditional multiple elements natural method expect would however generates warnings like warning child array iterator unique key prop check reactrender call using see information array nt list things reordered anything set elements conditional together none alternatives avoid warning good add key element elements might even inline elements like next two strings forced add key really overboard b condition element separately nt think need explain repeating code bad thing c wrap elements one element adding extra elements code required elements exist satisfy react quirks actually needed inside dom", "num": "3983", "d": "5/2015"}, {"title": "whether method modify", "body": "special css properties accept numbers units px animationiterationcount etc notice css properties defined object modify directly whether react public method", "num": "3982", "d": "5/2015"}, {"title": "mentions input type file documentation", "body": "nowhere react documentation reference handle speciel field serialized think deserve kind mention maybe link resource like normal input saying could find issue mentioning therefore issue", "num": "3981", "d": "5/2015"}, {"title": "creating tables react annoying", "body": "due fact html tables ca nt children table rows create parts table react element however tables useful way represent tabular data especially since colspan rowspan case table comprising many sections resort calling functions instead elements meaning nt get benefits props state rendering shortcircuiting plus code looks different therefore errorprone improved react support virtual dom node nt render actual dom node children alternatively datagrid components allow rendering like table colspan rowspan", "num": "3979", "d": "5/2015"}, {"title": "reconciliation jsfiddle example working", "body": "post build react gave example reconciliation jsfiddle working understand correctly something like create pr change url fix", "num": "3978", "d": "5/2015"}, {"title": "rendering multiple tspans causes dom updates render onscreen", "body": "created component takes input generates line text seeing correct svg generated browser displays first onscreen even paste output another htmlonly fiddle see rendered correctly kind soul greenjello freenode reactjs able find workaround causes element get rerendered behaves expected rendering thought might browser bug able successfully reproduce chrome firefox something related nature svg browser bug affecting multiple browsers react something strange", "num": "3972", "d": "5/2015"}, {"title": "lint tests", "body": "next thing start linting tests historically ignored due lack parser compatibility nt problem anymore may want integrate aggressively lint jsx tests cc pipeep", "num": "3971", "d": "5/2015"}, {"title": "support reparenting", "body": "writing component contains set large subtrees stay relatively simply moved around react virtual dom diffing ca nt detect movement react end recreating huge trees simply moving example pretend large structures may made several levels children components example one could entire page contents sidebar page root jsx render var blocka aaa blockb bbb blocks nt level react see relation blocks used give react hints result changed instead two blocks moved new location entire page essentially completely unrendered rerendered scratch understand case would far expensive react able detect movement nodes like believe need pattern hint react component large blocks may moved around different levels note may component rendering component root block parent semantics scoped nearest component wo nt work need owner scoping understand react trying eliminate need reactcreateelement used owner scoping within special attributes interferes instead component scoped variant think methodobject style interface kind like might work", "num": "3965", "d": "5/2015"}, {"title": "document react onchange relates oninput", "body": "would nice forms doc explicit fact react supersedes generally used place dom builtin event people might used using instead text inputs textareas since raw dom change event controls nt fire control loses focus", "num": "3964", "d": "5/2015"}, {"title": "missing challenge keytype attributes keygen tag", "body": "using keygen tag generate client certificates missing challenge keytype attributes", "num": "3961", "d": "5/2015"}, {"title": "controlled components nt work xml", "body": "app served recent react version supports xml however looks like controlled components broken created demo two almost identical pages one named one difference diff lt one input value may changed controlled input never changes property value nt mutable works expected page", "num": "3960", "d": "5/2015"}, {"title": "selectoption elements onchange event return dataattributes", "body": "plan look deeper maybe supply pull request decide feature right text inputs onchange eventtargetgetattribute datatype return datatypes value selectoption elements return extra attributes either object seems return value name attributes", "num": "3959", "d": "5/2015"}, {"title": "upgrade eslint use babeleslint", "body": "versions back would good get upgraded changes rules bit annoying probably tweak configs make changes code cc pipeep", "num": "3958", "d": "5/2015"}, {"title": "fix disable webworker test", "body": "intermittently giving us problems seems happening since sebmarkbage reorg nt really seem related fix disable travis results meaningful", "num": "3957", "d": "5/2015"}, {"title": "display warning ref reused", "body": "spent like minutes hunting bug ended caused reusing ref line component imagine get much worse bigger components warning devmode would nice", "num": "3956", "d": "5/2015"}, {"title": "firefox flashobject intermittently getattribute", "body": "long standing bug firefox hard track still able reproduce ondemand able reproduce manual bruteforce know short using flash react every react would throw invariant calling debugging however revealed everything rarely temporarily node reason loses method probably causes react return empty string id crash updating like actually works invariants errors ever observed personally currently worked around getting dom node mount works well enough moment nt update object nt surface updates either", "num": "3955", "d": "5/2015"}, {"title": "reactjs undefined requirejs included page", "body": "reactjs undefined requirejs included page define global variable causes conflict function typeof define amp amp defineamd define n uncaught referenceerror react defined", "num": "3953", "d": "5/2015"}, {"title": "reacttestutils rename findscry pairs findonefindall similar", "body": "outside relatively unknown word scry used difficult someone tell name differ current names seem based original jxdomscry api usage based likely made sense internally person filed would much discoverable easier use names obvious back compat reasons renaming adding existing names pointers commentsjsdoc saying deprecated probably makes sense imho thanks", "num": "3951", "d": "5/2015"}, {"title": "missing attribute", "body": "consider following snippet expected dom current behaviour demo jsbin specs", "num": "3948", "d": "5/2015"}, {"title": "missing attribute", "body": "", "num": "3947", "d": "5/2015"}, {"title": "component render method get future container width height", "body": "want write layout component get future container width height", "num": "3946", "d": "5/2015"}, {"title": "missing svg attributes markers", "body": "tags supported react svg marker refx refy orient", "num": "3945", "d": "5/2015"}, {"title": "serverside rendering help", "body": "bit trouble finding reasonable way handle serverside rendering still allowing seo three approaches think send bare bones html skeleton client javascript loaded make ajax request get data render send bare bones html skeleton client bundled json data necessary render page javascript loads page rendered immediately using json send fully rendered html page bundled json data together javascript loaded react rerender page using json data first option worst second option fixes need round trip back server retrieve data step right direction third option seems best trouble figuring approach talks react conf suggestion make two separate components piece functionality datafetching component pure ui component would allow server render markup using pure ui components without including clientside logic via datafetching components concerned lead two separate versions page structure exist one server uses render markup one wrapped containers client ui components used structure need separately maintained resulting changes requiring two updates mistaken example let say component component server might look like however client components might need fetch data server recommendation wrap containers clientside code might look like idea behind children component change depending environment mean keep two versions synchronized anytime want add remove update structure established pattern avoid dipping toes react want make sure structuring correctly following best practices interested running flux server want keep client datafetching components dependencies client side recommendations missed anything", "num": "3939", "d": "5/2015"}, {"title": "long reactjs release new version", "body": "current version react long reactjs release new version api change lot new version released", "num": "3937", "d": "5/2015"}, {"title": "textarea holds old value prop updated null", "body": "textarea values set value prop prop set null undefined resetting object clear form retain old value looking source looks like intentional null behavior written behave differently form elements jsfiddle demo problem", "num": "3936", "d": "5/2015"}, {"title": "wrong data attirbute value", "body": "hello eventcurrenttarget data page return previus value react version code user reactclass render redraw three times click pagebutton eventcurrenttarget data page return previus draw value tt change code works data attribute return wrong value", "num": "3933", "d": "5/2015"}, {"title": "opaque handle replace rootnodeid", "body": "losing broke om applications like circleci used maintain snapshot entire application permitted full serialization deserialization react app state including transient component local state browsers powerful testing purposes without forcing programmers write nonmodular code via world passing understandable people might rely specifics handle need opaque identifier nt care actual representation handle may well scope would nice issue get consideration official feedback", "num": "3932", "d": "5/2015"}, {"title": "autobinding named methods shadow globals fails", "body": "bound method inside guard method gets bound reason fails var testcomponent reactcreateclass intervals render function return reactcreateelement div setinterval function setinterval fn ms thisintervalspush setinterval fn ms componentdidmount function thissetinterval function consolelog hello var testcomponent reactcreateelement testcomponent null reactrender testcomponent documentbody error message set break point first time called set instance react class hit play method gets hit second time set changing fixes issue code generated babel removing named functions little work removing source code would nice react supported syntax nt know much work involved", "num": "3928", "d": "5/2015"}, {"title": "props getinitialstate anti pattern componentwillmount", "body": "link wondering following code similar anti pattern good practice function getstate props var newstate somestate false props merge newstate totalcount propstotal items propsitems return newstate var component reactcreateclass proptypes total reactproptypesnumber items reactproptypesarray getinitialstate function return getstate componentwillmount function thissetstate getstate thisprops componentwillreceiveprops function newprops thissetstate getstate newprops basically props used props copied state copied get modified bit ex etc render method uses state one colleagues using pattern extensively funny feeling ca nt really pinpoint would actually wrongbad approach", "num": "3927", "d": "5/2015"}, {"title": "change event fires extra times ime composition ends", "body": "extra details similar discussion extra details reproducing analysis previous attempt fix includes unit tests sufficient confident fix original issue trying example chinese characters inputted chinese pinyin input method would fire many renders like actually would expect fire confirm chinese character tried another kind input method wubi input method got weird test jquery press space bar confirm character event would fire know might different implementation jquery react would expect way jquery handles chinese characters instead react", "num": "3926", "d": "5/2015"}, {"title": "dedupe warnings validatedomnesting", "body": "nt log particular parentchildownerstack trio", "num": "3921", "d": "5/2015"}, {"title": "load webcomponentsjs differently", "body": "tests currently pass browser running chrome supports webcomponents already however fail every browser think webcomponentsjs actually loaded currently getting packaged reacttest requiring creates new resulting nodes create different prototype expected webcomponents webcomponents new node prototype different implementation check nodes failing think loaded webcomponentsjs browser loaded js node create markup wrapping would right prototype", "num": "3919", "d": "5/2015"}, {"title": "async render rather async state", "body": "run several issues related reading state set yet committed component state wondering asynchronous would nt better async render instead would allow synchronously update state want performance benefits async state changes imagining mutates state immediately mechanism batching state changes invoked event originally causing state mutation simply triggers render instead thoughts", "num": "3918", "d": "5/2015"}, {"title": "react id problems", "body": "team working project sometimes inject one react application page recently noticed onclick handler specified one applications also getting applied node datareactid application way force root component use datareactid react application sort namespaced using", "num": "3916", "d": "5/2015"}, {"title": "onwheel broken", "body": "appears onwheel broken react returns event full undefined everything fiddle working fiddle working edit reproduce try using scroll wheel div xy info mac using track pad tested latest chromefirefoxsafari", "num": "3915", "d": "5/2015"}, {"title": "", "body": "", "num": "3914", "d": "5/2015"}, {"title": "get real elementnode reactel thischildrens", "body": "like scrollviewchildren return reactelement ca nt get real htmlelementnode reactelement want getcomputedstyle node", "num": "3911", "d": "5/2015"}, {"title": "click events triggered enter keypress events inside forms", "body": "triggering keypress event inside form also click listener without defined result syntheticmouseevent button hit clickhandler adding prevent behavior", "num": "3907", "d": "5/2015"}, {"title": "grunt test failing webdriverphantomjs task", "body": "run fresh copy master get error running webdriverphantomjs task phantomjs start path null args warning bad argument use force continue aborted due warnings env os mac os x phantomjs v npm v node v git revparse head clue solve", "num": "3906", "d": "5/2015"}, {"title": "update content docs tutorial code examples", "body": "working throught tutorial get section js code longer took second realize needed see result indexhtml file updating code previous code example different way explain user", "num": "3904", "d": "5/2015"}, {"title": "question reactjs file src folder", "body": "reactjs file src folder right specifying path module require statement showing dependency file caring pathmaybe stupid question seasoned developerbut ca nt figure outhope someone help understand", "num": "3903", "d": "5/2015"}, {"title": "question source code", "body": "", "num": "3902", "d": "5/2015"}, {"title": "allowing lt element gt", "body": "write almost anything jsx write javascript except case far tell instead write think would neat able write huge deal would plug last leak jsx syntax allowing people context switch think underlying transform order figure something like", "num": "3900", "d": "5/2015"}, {"title": "rfc react forceremount", "body": "support uncontrolled components although necessarily encourage seems utility relevance handful usecases especially complex situations ie stateful component need reset say richtext editor case reactswf running swf response user action edit think complement currently worked around providing monotonic really hack neat solution much obscure end spectrum seems like missing feature interms feature complete uncontrolled components really going push hard especially could really obscure hack might really best tradeoff also considering batching", "num": "3899", "d": "5/2015"}, {"title": "get original htmlelement reactelements", "body": "hi nt know get original htmlelement reactelement like getdomnode reactcomponent", "num": "3898", "d": "5/2015"}, {"title": "throw exception validation error", "body": "wrote class like javascript recordlistitemjsx const react require react const recordactions require actionsrecordactions const record reactcreateclass proptypes record reactproptypesshape id reactproptypesnumberisrequired name reactproptypesstring status reactproptypesstring isrequired moduleexports record test would cause failure whereas using correctly throws error fails test", "num": "3897", "d": "5/2015"}, {"title": "deeper events triggered ff ie ie", "body": "fiddle exception may correct click first text console log click second text within button console log chrome safari behave way expect however ff ie ie click second text within button console logs understanding event handling correct click text within button component component trigger event bubble component trigger event would ff ie trigger event handler within component triggers fine another component", "num": "3895", "d": "5/2015"}, {"title": "react child keys must unique warning", "body": "hi please see jsfiddle gt check console warning", "num": "3893", "d": "5/2015"}, {"title": "get warnings tests", "body": "unhandled warnings tests nt great clean make unhandled warnings test failures", "num": "3890", "d": "5/2015"}, {"title": "handle wouldbe duplicate keys inline styles", "body": "inline styles awesome better worse css properties vendorprefixed values write inline react example ran found building something like reminded linter wo nt work situations", "num": "3887", "d": "5/2015"}, {"title": "custom component methods lose static properties", "body": "definingmixing custom method react component loses static properties var customfunction function magic customfunctionmystaticproperty important value reactcreateclass customfunction customfunction render function thiscustomfunctionmystaticproperty undefined static properties replaced four react properties reason remove users static properties methods would possible add react properties method keeping custom properties place", "num": "3886", "d": "5/2015"}, {"title": "context warning refers missing gist", "body": "getting warnings like warning ownerbased parentbased contexts differ see however seems refer gist longer exists moved", "num": "3880", "d": "5/2015"}, {"title": "unnecessary encoding element text content", "body": "given following piece code react replaces angle brackets quotation mark apostrophe ampersands html entities ie lt gt quot amp etc nt believe necessary replace quotation mark apostrophe nt need escaping would need escaping used attribute used text content element reason noticed trying encode json html element server side read back client side javascript json contains lot double quotation marks needlessly replaced quot", "num": "3879", "d": "5/2015"}, {"title": "warning setstate update mounted mounting component usually means called setstate unmounted component noop context", "body": "warning setstate update mounted mounting component usually means called setstate unmounted component noop warning contains context component setstate run setstate happen time changes another component cause unmount results setstate happening unmounted hard even link recent code chagne made setstate call responsible simply including message like warnings help devs least little tracking source warning", "num": "3878", "d": "5/2015"}, {"title": "remove react devtools download console log install", "body": "react devtools downloaded enabled chrome extension version using npm package version chrome extension browserified every time open console console log download react devtools better development experience remove update maintainers see solution", "num": "3877", "d": "5/2015"}, {"title": "formalize standard facebook style guide", "body": "current style guide contributing docs nt cover everything covered would like see section bit content actually could nt find facebook style guide online publicly anywhere could pretty big initiative kind documentation publicly available willing help process sounds ambiguous could add content contributing file", "num": "3875", "d": "5/2015"}, {"title": "conditional dynamic children causing error", "body": "multiple cases app conditionally create array dynamic children like worked fine react however upgraded seems causing error remove functionality eliminates error however ca nt figure fix error still conditional rendering tried messing around well defaulting returning empty array condition fails array single element ideas", "num": "3873", "d": "5/2015"}, {"title": "html tag component props", "body": "hi new react development english difficulty understand things possible react well would like use html tags props component example component would like use like title div mes infor div still whereas would like div inside real title nt know use props component result sorry poor english", "num": "3868", "d": "5/2015"}, {"title": "feature request ability pass context reactrender", "body": "especially testing parts gui would like able say javascript var mycontext foo reactrender documentgetelementbyid allcontent mycontext instead make wrapper component every time define childcontext", "num": "3867", "d": "5/2015"}, {"title": "reactproptypeselement message unclear", "body": "fails error message think error message nt clear enough case fails due passing multiple elements children prop imagine new user react using component accepts single child pass multiple children instead seeing error might lead believe somehow passing number string null etc children nt think first instinct would mistake passing multiple children make kind mistake easier diagnose error message emphasize fact pass single element", "num": "3865", "d": "5/2015"}, {"title": "error invariant violation dangerouslyrendermarkup render markup worker thread", "body": "error read issues relate issue requiring react globally defining window document component reducedjs javascript var react require react var reduced reactcreateclass getinitialstate consolelog start editing false return editing false edit consolelog setting state edit thissetstate editing true render consolelog rendering return moduleexports reduced tests javascript var react testutils jsdom reduced expect results mocha compilers js babelregister reduced test case current start editing false rendering tests pass without simulate root element reads click edit tests fail component changes state renders setting state edit rendering hook passing failing reduced test case tests fail component changes state renders hook error invariant violation dangerouslyrendermarkup render markup worker thread make sure available globally requiring react unit testing use reactrendertostring server rendering context happen way fix", "num": "3863", "d": "5/2015"}, {"title": "make part text link localization", "body": "need mark part text link smth like please log email text must localized later need log part link smth like render method javascript var link reactdoma href thismakehref login log reactcreateelement please link email output please object object email without surround text receive expected result simplified example need insert link text format marker like c working solution thank help", "num": "3862", "d": "5/2015"}, {"title": "documentation controlled components seems contradictory", "body": "documentation controlled components says form components allow listening changes setting callback onchange prop onchange prop works across browsers fire response user interactions value changes checked state changes however checkbox onchange handler getting called even though checked state dose nt actually change controlled think documentation changed state onchange fired response user input component even react leaves component state", "num": "3860", "d": "5/2015"}, {"title": "inline styles pseudoclasses discussion", "body": "hi really like intent behind inline classes react want use project really bad part lack hover focus etc know radium dont like decided try investigate react sources come implementation pr tell source code find inline styles rendering thank", "num": "3859", "d": "5/2015"}, {"title": "alternative observe sideways data loading", "body": "reference exploring alternative function proposed instead separate function defines list dependencies observables could allow render function trigger bunch sideeffects registers currently executing component observables sideeffects astonished implementation request would nt return observable instead would tell react currently executing component dependency observable needs rerender anytime subscription fires returns last value received particular observable somehow observable longer subscribed next render pass automatically unsubscribed perhaps observable api ideal model", "num": "3858", "d": "5/2015"}, {"title": "dangerouslysetinnerhtml replaces server side rendering", "body": "hey issue dangerouslysetinnerhtml dollar signs seems like calling reactrendertostring server side rendering html value given dangerouslysetinnerhtml contains gets rendered lost dollar sign could find easy way fix started terrible thing htmlreplace g", "num": "3855", "d": "5/2015"}, {"title": "request enable triggering warnings every render", "body": "client nice development warnings triggered initial render rendering server annoying warnings triggered first render ignored subsequent page loads render methods accepted additional options argument js reactrender hi windowapp alwayswarn false reactrendertostring reactcreateelement el data alwayswarn true crazy ideas might useful options perhaps autoappends second arg automatically catchesignores errors apis", "num": "3854", "d": "5/2015"}, {"title": "extend html element", "body": "click delay problem need attach four events element onclick ontouchstart ontouchmove ontouchend makes bit tedious many elements clickable create element maybe named receive property ontap attache four events element implement tap event think bad semantic tap action question extend html tag like div em support tap event ideas problem thanks", "num": "3853", "d": "5/2015"}, {"title": "publish alphas npm", "body": "mentioned currently points old rc would nice alphas published since things like context coming parents understand post one ca nt git repo master test fixes things", "num": "3850", "d": "5/2015"}, {"title": "missing shipped along ship", "body": "trying use improved serverside rendering support selected options select element upon inspecting react code checked npm download versions ca nt find fix included according tagged specifically checking following snippet code within reactdomselectjs missing code nt rendering serverside attr options return", "num": "3849", "d": "5/2015"}, {"title": "eslinting reactflux code without transpiling", "body": "possible realize could use babel lint transpiled code wo nt let find error code resource go order properly use eslint found article november still seems literature saying productionready link", "num": "3848", "d": "5/2015"}, {"title": "reactaddonstestutilssimulatescroll working jsdom", "body": "hi trying test scroll event could make scroll event propagation happen using testutils code never triggering scroll function callback change implementation something like works javascript contentdivscrolltop var evt documentcreateevent htmlevents evtinitevent scroll false true contentdivdispatchevent evt something wrong react testutils created stackoverflow ticket", "num": "3846", "d": "5/2015"}, {"title": "links within svgs", "body": "clicking within svgs cause issues case missing initial load ought see boxes light brown red blue brown orange click boxes blue brown orange click boxes light brown red click boxes worried blue brown orange box disappear confused please note entire thing svg link actually present dom decided show firefox clicking link thrown version initially thought reactrouter specific issue issue w reactrouter wrong issue exists without library issue wo reactrouter nt using normal svg element issue wo react svg elements following svg elements supported circle defs ellipse g line lineargradient mask path pattern polygon polyline radialgradient rect stop svg text tspan source although react nt support within svgs ought throw error something whats cause issue guessing going would viable option right", "num": "3845", "d": "5/2015"}, {"title": "real reason invariant violation markup wrapping node initialized error", "body": "searching everywhere find proper explanation kind error source code written lazily detects wraps necessary current browser please elaborate getting error testing jsdom amp mocha button select using want simulate event use exact line getting issue", "num": "3840", "d": "5/2015"}, {"title": "prevstate wrong values using forceupdate", "body": "simple component following state simple componentdidupdate function like change state using method setstate componentdidupdate fired get following values good expected course something like componentdidupdate fired alright get following unexpected values workaround still get proper value prevstate", "num": "3838", "d": "5/2015"}, {"title": "testutilsrenderintodocument nt render document function props", "body": "trying test component jest rendering using try passing function prop component receive prop render serializable variables code", "num": "3836", "d": "5/2015"}, {"title": "debugging css transitions", "body": "way debug warnings application quite large hints right direction would helpful name offending transition dom element triggered also see", "num": "3832", "d": "5/2015"}, {"title": "server side rendering example question", "body": "server side rendering example initial startup js function calling generated dynamically via php comment says really using webpack instead browserify nt immediately clear means indexphp generate code required run component client assume browserify bundle loaded page already used r get global require function provides every module may request well react note solution simple nt think scales multiple large pages well better using webpack startupcode lt lt function var react require react var component require moduleforjs reactrender reactcreateelement component propsjson documentgetelementbyid containeridforjs script someone elaborate way use webpack instead browserify thanks", "num": "3827", "d": "5/2015"}, {"title": "enable error logs invalid props proptypes specified", "body": "development would useful make warning invalid props validated proptypes error rather fail fast stop app show warning could easily missed", "num": "3825", "d": "5/2015"}, {"title": "select tag server side rendering", "body": "issues rendering server side tags possible reproduce problem browser interprets generated dom react server cause attribute tag displays first option selected time react loads let say second correct option displayed selected think solution behaviour", "num": "3824", "d": "5/2015"}, {"title": "propattribute exempt automatic suffix", "body": "tabsize css property getting suffix automatically unitless value represent number spaces make width tab js name property see shorthand specifying pixel values style props react docs", "num": "3823", "d": "5/2015"}, {"title": "support option update option content mixed variable literal text", "body": "option update fail option content mixed variable literal text example pr come soon", "num": "3816", "d": "5/2015"}, {"title": "ismounted returns instead unmounted", "body": "", "num": "3814", "d": "5/2015"}, {"title": "way rerender one row listview", "body": "hi read helps lot example genrows function pressdata key number boolean array var datablob var ii ii lt ii var pressedtext pressdata ii pressed datablobpush row ii pressedtext return datablob pressrow function rowid number thispressdata rowid thispressdata rowid thissetstate datasource thisstatedatasourceclonewithrows thisgenrows thispressdata rerender rows time wondering good way redraw row press thanks", "num": "3812", "d": "5/2015"}, {"title": "input td generates invariant violation findcomponentroot unable find element", "body": "hi actually working react app app invariant violation findcomponentroot unable find element pretty weird table tbody inside tr gt td inside td input render invariant violation error know could come please malicious code p ideas maybe need give details thanks lot", "num": "3811", "d": "5/2015"}, {"title": "controlled inputs type number work browsers", "body": "controlled inputs current safari firefox chrome let input anything controlled work supposed chrome dev build nt ie test sample jsbin reproduces problem", "num": "3810", "d": "5/2015"}, {"title": "custom iframe attributes nwjs formerly nodewebkit project", "body": "nwjs introduces custom attributes iframe element attributes since used disable node support iframe make since used trap navigation access windowtop windowparent iframe since used specify header http requests source attributes stripped building gui react", "num": "3809", "d": "5/2015"}, {"title": "hover bug mouse element quickly hover appears nt go away using onmouseenter onmouseleave", "body": "jsfiddle video jsfiddle shows mouse quickly sometimes onmouseleave nt seem register finally stackoverflow var hover reactcreateclass getinitialstate function return hover false onmouseenterhandler function thissetstate hover true consolelog enter onmouseleavehandler function thissetstate hover false consolelog leave render function var inner normal thisstatehover inner hover var outer height width margin backgroundcolor green cursor pointer position relative var normal position absolute top bottom left right backgroundcolor red opacity var hover position absolute top bottom left right backgroundcolor red opacity reactrender documentgetelementbyid container", "num": "3806", "d": "5/2015"}, {"title": "new hook update animations", "body": "problem svg elements need animation hook needed tween element one configuration another react steps updates dom thereby prevents animation current workaround svg components need animation write method always returns dummy dom react nt find diffs handle dom updates inside imo results nonidiomatic reactjs code method true representation svg element look like applying state props see example possible solution would helpful components inside transition groups method similar etc would invoked components added existing would block updates flushed dom called would called initial render transitiongroup", "num": "3804", "d": "5/2015"}, {"title": "warn calling reactrender head", "body": "calling reactrender script tag document head implies reactrender called document body parsed browser lead confusing error especially user utilizing serverside rendering error invariant violation findcomponentroot unable find element probably means dom unexpectedly mutated eg browser usually due forgetting using tables nesting tags like using nonsvg elements parent try inspecting child nodes element react id probably warn user calls reactrender body exists", "num": "3800", "d": "5/2015"}, {"title": "react mount update placeholder attribute", "body": "hi nt really know expected following var hello reactcreateclass render function return reactrender documentbody lead hello seems react mount test attribute standart actually mounted placeholder attribute standart expected react mount div placeholder attribute current state weird thing ca nt update attribute var hello reactcreateclass render function return reactrender documentbody reactrender documentbody produce hello see nt know supposed work think current behavior kind unexpected", "num": "3799", "d": "5/2015"}, {"body": "see", "d": "5/2015"}, {"body": "oh wait work", "d": "5/2015"}, {"body": "nevermind user error", "d": "5/2015"}, {"body": "need use using jsx generate components ie use coffeescript instead jsx go definingimporting components", "d": "5/2015"}, {"body": "please post support questions somewhere else stack overflow future", "d": "5/2015"}, {"body": "listed basically options future might support syntax like would nt result added html element nothing else", "d": "5/2015"}, {"body": "please see discussion", "d": "5/2015"}, {"body": "closing favor", "d": "5/2015"}, {"body": "problem link fiddle supports actually links bug updating fiddles would one way fix lot work since fiddles part old blog posts would kind like rewriting history opinion best way fix reverting links back see proposed solution", "d": "5/2015"}, {"body": "cody see thank u", "d": "5/2015"}, {"body": "feel like correctideal solution fiddle authors update fiddles said nt feel strongly let zpao make decision", "d": "5/2015"}, {"body": "look like result creating element right place even comment explaining might happen think need add", "d": "5/2015"}, {"body": "similar pr done reactnative facebookreactnative adds babeleslint also", "d": "5/2015"}, {"body": "indeed benefit nt worry anything internal yet flexible", "d": "5/2015"}, {"body": "tricky problem might want share input", "d": "5/2015"}, {"body": "hint javascript render var blocka aaa blockb bbb", "d": "5/2015"}, {"body": "vkurchatkin nt see hint change version example", "d": "5/2015"}, {"body": "vkurchatkin two different calls would two different react element instances nt really help react ca nt guess using variables inside branches also cases build tools optimize constant element creation put outside even guessing possible get false flags constant elements reused several times inside one rendered tree", "d": "5/2015"}, {"body": "gaeron well particular case trees shape reconciled fine wo nt case easy enough wrap subtrees components give react hint", "d": "5/2015"}, {"body": "gaearon yeah guessing even trickier render could create multiple copies elements either loop via helper function resulting distinct elements even though created location code dantman think best bet least medium term going hoist component state tree rather relying component state see general solve reparenting problem correctness point view remaining issue performance recreating dom instead reusing moved markup react pretty fast guessing nt much concern dantman change addition divs else block render function vkurchatkin correct preserve dom shapestructure thus allowing react better figure going reconciliation reuse structure change subtle correct", "d": "5/2015"}, {"body": "like point reparenting manually today render component want reparent separate nonreact node node reparented manually anywhere like remember may put empty react nodes", "d": "5/2015"}, {"body": "would cool react gives us opportunity use different syntax attrs props javascript var var b may would need know tags react supporting", "d": "5/2015"}, {"body": "murashki planned alleviate issues around unknown elements properties yet plans use different syntax adding additional attributes seems totally reasonable", "d": "5/2015"}, {"body": "try take stab assume simple adding props adding tests correct missing anything significant", "d": "5/2015"}, {"body": "even easier since nt really tests attributes actually test couple browsers changing values across renders reflected appropriately usually issues property vs attribute", "d": "5/2015"}, {"body": "quick guys thanks advance", "d": "5/2015"}, {"body": "zpao actually test couple browsers changing values across renders reflected appropriately across renders mean simply triggering rerender changing value", "d": "5/2015"}, {"body": "yea usually make simple component button toggles state test multiple values easily", "d": "5/2015"}, {"body": "zpao great thx", "d": "5/2015"}, {"body": "zpao jamischarles missed detail docs although nt need additional attribute keyparams required dsa ec keytypes see", "d": "5/2015"}, {"body": "zpao working though entirely clear nt able deduce meaning code someplace read", "d": "5/2015"}, {"body": "used determine updating means nt matter browsers work either currently use properties case may switch future indicate must set amp removed property attribute", "d": "5/2015"}, {"body": "thanks makes sense use get work properly across chromeffsafari testing method great well thx help zpao", "d": "5/2015"}, {"body": "apparently one handlechange never fired", "d": "5/2015"}, {"body": "trying debug result far proxied eventlistenerjs modified callback prints something prints stuff html xhtml version looks like important event one type info xhtml version fired else native event dispatched gets converted magical react events returns different values versions particular broken one missing apparently working differently two investigating", "d": "5/2015"}, {"body": "got checking compared however xml", "d": "5/2015"}, {"body": "sure works natively would nt expect changed react ps also would like react component never need query dom like", "d": "5/2015"}, {"body": "syranide assuming probably work way natively might left would like clarification someone happens know directly ever querying dom components using returned event object properties input elements property specifies return type input like booleanstringinteger reasons inputs allow see data attributes returned event objects selectoption even relevant", "d": "5/2015"}, {"body": "rtorr tried reproduce problem works maybe understand problem wrong", "d": "5/2015"}, {"body": "cody actually event object overwritten mixin thanks", "d": "5/2015"}, {"body": "help babeleslint issues", "d": "5/2015"}, {"body": "guess closed", "d": "5/2015"}, {"body": "closed", "d": "5/2015"}, {"body": "going assume yes zpao feel free reopen wrong", "d": "5/2015"}, {"body": "unfortunately nt good way fix see discussion", "d": "5/2015"}, {"body": "aww cry", "d": "5/2015"}, {"body": "yea happens umd browser build uses using requirejs need across board instead", "d": "5/2015"}, {"body": "made pull request chicoxyzzy bit faster pull requests different maybe good two smile", "d": "5/2015"}, {"body": "cody wonderful thx", "d": "5/2015"}, {"body": "use life cycle method componentdidmount sync already implement", "d": "5/2015"}, {"body": "looks like answered question closing", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "hi weyfarere would recommend checking fluxibleio start afaict isomorphic frameworks really easy grok fluxible comes close reason interested running flux server regardless reason separate copies component even nt want make api calls server could wrap api calls though would nt recommend", "d": "5/2015"}, {"body": "currently using third option bad created system use exact component code server merge minify automatically loaded one app client side renders complete web page data already inserted adds code initializing app initial props bit mounting code loads app separately secondary request pretty awesome really user nt javascript enabled nt load app still displays static page fine cases validation also done server side forth course page work without javascript plays nicely seo well toplevel stuff like wrote small dot template render react spent quite looking better solution seemed best way time sure fluxibleio stuff joshuagross mentioned certainly going look server side rendering using react definitely recommend third option point probably end opensourcing solution right tied closely company however help troubleshoot solutions want key rendering server side found collect data needed initially render potentially asynchronously render pass top component though hopefully form component factory pass props however deep need try gather information server within component like componentwillmount limited synchronous retrieval need account serverclient differences additionally components need contact server loaded client start code componentdidmount since called server client start making ajax requests forth without code ever run server getting server code work client use babel server code using importexport wrap component files amd syntax merge together form nice dependencies forth use almondjs provide definerequire client also quite large preprocessing stage formats define statements module ids relative file location everything ensure external dependencies like react lodash jquery etc included well older version code repositories anything say would depend want concern react rerendering client would anyway funny story actually forgot reenable server side rendering testing bug contents html body object object webpage never saw week react rerendered fast client would nt see blank page", "d": "5/2015"}, {"body": "joshuagross nt want use flux server would introduce needless complexity server takes request set parameters fetches data persistent store returns htmljson nt need worry state multidirectional data flow already dead simple novacrazy mentioned two updates meant sense altering two separate files understand react handles rendering rerendering hoping would solution would allow share structure client server simply put want structure page decoupled data source decouple singular ui components compose section components keeping decoupled options two three different sets pros cons render markup server risk javascript might take load could due circumstances control eg spotty mobile connections user would nt able interact certain parts interface could still click links submit forms would appear though everything else broken hand skipped rendering markup server sent skeleton page made components loading state along json embedded html would least let user know page still nt ready use javascript loads replace skeleton components full data believe better usability standpoint comes cost perception would page loading slower ca nt beat speed rendering html immediately lose ability indexed search engines ca nt run javascript since website needs indexed render html server page wanted try react small section website see worth switching would nt end world could nt would like decouple page structure given data would allow sharing client server site already compiles data needed render page singular json object allows send back html json depending client need using handlebars share templates server client since completely decoupled data fetching however huge hassle comes keeping track state partial renders client hoping react would give best worlds shared structure server client keeping staterendering simple reason client spent fair amount time reading articles watching videos react nt come across solution hoping someone would better idea however seems like trading one set problems another point question would difficult set problems maintain seems though simplifying amount energy takes reason components may worth cost keep two structure files sync", "d": "5/2015"}, {"body": "since topic nt seem problem react seems appropriate discussion", "d": "5/2015"}, {"body": "move discussion site sorry", "d": "5/2015"}, {"body": "try keep api changes minimum provide deprecation notices nt hard timeline releases instead waiting something meaningful provide typically gone months", "d": "5/2015"}, {"body": "indepth hardtofollow partial discussion subject truly proper way reset values set empty string null reason inputs reset reset internally due becoming uncontrolled whereas textareas keep last value behavior behavior rely like", "d": "5/2015"}, {"body": "see looks like issue still open closing one", "d": "5/2015"}, {"body": "jquery loads data values caches try instead also please post support questions like stack overflow future tracker bugs react", "d": "5/2015"}, {"body": "see break private stuff get come write apis missing sebmarkbage", "d": "5/2015"}, {"body": "technically still moved level deeper feel free update hack checkout reactinstancehandles fact relay even using hack purpose perfect though id nt contain full key path path rootnodeids also want move away using composite ids expensive instead use key tree potentially counter event listeners implementation details nt want expose however use case definitely scope thinking public apis solve similar things want provide way externalize state tree moving towards model internals sure representation probably long term terms public apis short term want builtin support rehydrating state tree use case way save memory cleaning component tree keeping state memory eg view offscreen page transitions forward backwards masterdetail view switch different detail views longer term might add serializable form three options exposes state component tree want component tree transient nonexistent memory eg plain stateless render function nt need backing store transformation however things like tooling want expose whole render tree introspection public api eg building reactdevtools use case would attach external tool running react instance maintain external component tree production purposes would able connect production instance react plan right terms public apis plan satisfactory", "d": "5/2015"}, {"body": "refers function instead global setinterval filed upstream", "d": "5/2015"}, {"body": "autobinding still works thissetinterval calls setinterval without context get error", "d": "5/2015"}, {"body": "fixed babel thanks", "d": "5/2015"}, {"body": "spicyj makes sense erroneously thought guard getting called second time sebmck thanks quick turn around", "d": "5/2015"}, {"body": "props state antipattern intended serve initial state stateful component say may want content textfield update focused another exception need perform expensive computations data may want repeat storing result computations make sense tell example mirroring props state idea would anything bad idea", "d": "5/2015"}, {"body": "cc salier", "d": "5/2015"}, {"body": "think fire ime string committed one way handle would ignore events use event immediately following quick testing osx chrome firefox simplified pinyin korean event order data seem correct enough predict problems ie korean may get lucky think may continue see issues alternative input methods like google input tools extension may workarounds", "d": "5/2015"}, {"body": "gone back forth benefits would solve case setting state based current value also read props see comment instead recommendation use function form setstate instead write planning change anytime soon improvements probably along lines making apis functional support better", "d": "5/2015"}, {"body": "using npmversion unbundled version react use following workaround else need dig react bundle replace something else say", "d": "5/2015"}, {"body": "wrong record nt setstate e even consolelog shows undefined react apparently better recycling synthetic events something along lines", "d": "5/2015"}, {"body": "yea events pooled probably changes batching resulted difference seeing either way reset object using really safe pass around changing setstate copy properties make work", "d": "5/2015"}, {"body": "linked", "d": "5/2015"}, {"body": "found thanks heads sync site shortly", "d": "5/2015"}, {"body": "hi maybe reactfinddomnode work eg", "d": "5/2015"}, {"body": "contain reactelements dom nodes would like actual dom node need assign ref use reactfinddomnode access dom mounted see", "d": "5/2015"}, {"body": "nt default html behavior input button form pressing enter also click button", "d": "5/2015"}, {"body": "even close default behaviour keypress triggers total random event form fact trigger form simulate click button issue button event magically converted event form element", "d": "5/2015"}, {"body": "buttons default html pressing enter simulates click button standard html behavior specific react", "d": "5/2015"}, {"body": "apologies rechecked original code might caused browser defaults first button missing type directive ff chrome probably assign type submit default could explain issue", "d": "5/2015"}, {"body": "looks like probably phantomjs version compatible using", "d": "5/2015"}, {"body": "way use versions one machine need phantom projects", "d": "5/2015"}, {"body": "sure use install local phantomjs fallback system one surprised nt complain versions tried installed seemed still install local copy forcing show detected global version nt match expect running nt issues nt either", "d": "5/2015"}, {"body": "reinstalled phantomjs package via npm works nt know actually happened", "d": "5/2015"}, {"body": "react custom module system needs build system none inside use relative paths module system right one used internally fb name module defined inside resolved modules globally unique order work commonjs move files rewrite require statements relative result build step used ship npm", "d": "5/2015"}, {"body": "works remove brackets confused edit nevermind", "d": "5/2015"}, {"body": "need uppercase react knows html element", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "yea works since pass whatever along createelement even variable string dom component created point capitalizing important", "d": "5/2015"}, {"body": "know thanks", "d": "5/2015"}, {"body": "sure proposed api unmount remount", "d": "5/2015"}, {"body": "spicyj think instead guess effectively rather ignoring ignore fail internal instead ie unmounted mounted changed", "d": "5/2015"}, {"body": "would nice solution cases would work everything gets rerendered top", "d": "5/2015"}, {"body": "cody like like internal variable regular possibly batched update like everything else internal flag specifying must pass internal edit component ends unmounted parent flag simply effect everything works naturally probably important part usecases something really like see move addons another topic", "d": "5/2015"}, {"body": "syranide understand everything gets rendered top needs called would bad wonder edge cases since guaranteed called props change still undocumented nt know issue", "d": "5/2015"}, {"body": "cody ah yes see mean good point getting uneasy feel thinking hmm", "d": "5/2015"}, {"body": "nt think since providing new key easy trying reduce api surface area increase thanks idea", "d": "5/2015"}, {"body": "elements lightweight objects knowledge html elements sure exactly asking would need looking get div access type", "d": "5/2015"}, {"body": "like scrollviewchildren return reactelement ca nt get real htmlelementnode reactelement want getcomputedstyle node", "d": "5/2015"}, {"body": "reactelement nt correspond dom node mount dom using", "d": "5/2015"}, {"body": "using react pulled npm", "d": "5/2015"}, {"body": "proptype validation throw uses consoleerror throw nt pass dom node creates node render wo nt throw", "d": "5/2015"}, {"body": "let know misunderstood happening reopen otherwise nt sounds like bug", "d": "5/2015"}, {"body": "suppose drawback pasting full source assume dom node refer correct first snippet file named test second two snippets appropriate require top file note also using testdom make virtual dom using mocha jest another test alongside deal throws test pass test fail", "d": "5/2015"}, {"body": "talking actual dom node without throw creates node calls signature different looks like thing calling test nt think would throw either general strongly suggest expecting specific error error expecting error masking actually wrong case expecting error wrong thing error catching calling render without dom node anything proptypes test look like", "d": "5/2015"}, {"body": "oh miss tell new react wink thank clearing thanks suggestion spy console good idea", "d": "5/2015"}, {"body": "behavior without react nt know something devs want normalize sound useful clickable child inside button", "d": "5/2015"}, {"body": "ah aware inherit clickable items button general since regular javascript works nt think react work differently closing", "d": "5/2015"}, {"body": "also sluggish behaviour expected thanks", "d": "5/2015"}, {"body": "issue getting warning says child keys must unique multiple siblings key since using data nt sorted category end multiple category also using name key multiple items name get warning last least perf adding removing thousands nodes per keystroke bunch optimizations could easiest simply toggle css property rows nt shown exact dom nodes matter filter toggling single property much cheaper addingremoving nodes using prod build much faster since lot code debugging purposes", "d": "5/2015"}, {"body": "information warnings", "d": "5/2015"}, {"body": "run tests may best seeing colored output fairly obvious talking warnings logged console passing test lines", "d": "5/2015"}, {"body": "get warnings fix first easy second one think expected nt render method foo class exactly test checks way suppress warnings single line may stubbing console good way think second warning fixed", "d": "5/2015"}, {"body": "tests meant test warnings thrown catch manually suggestion", "d": "5/2015"}, {"body": "fix reactchildren test warnings", "d": "5/2015"}, {"body": "almost like mentioned edited comment use simple key used similar cases", "d": "5/2015"}, {"body": "similar spec maybe another way fix warning mean warning without add key attribute otherwise would test spec file cause specs would throw warnings nt know get two warnings", "d": "5/2015"}, {"body": "may missed something recheck later today", "d": "5/2015"}, {"body": "think get key point spyon function", "d": "5/2015"}, {"body": "sort hard problem solve way best answer far add runtime checks actually get right value eg check browser needs webkitflex alternatively nt use use inlines styles nt think anything else something like autoprefixer may exist js style objects nt think ever integrate core going close", "d": "5/2015"}, {"body": "properties nt removed nt equal example react autobinds component methods component nt write guess nt issue use classes since react wo nt autobind methods classes", "d": "5/2015"}, {"body": "aware autobinding getting wrapped however uxapi perspective inconsistency therefore issue properties get lost copied wrapper preserves function properties likely ca nt used react internally backwards compatibility reasons workaround problem redefine function properties works nt necessary classes soon mixinextendability problem solved glad switch", "d": "5/2015"}, {"body": "bah jimfb changed username guess github nt set redirects everything last time looked could nt update fbme links look nt much problem force issue time", "d": "5/2015"}, {"body": "thanks zpao posterityuntil looks like referenced gist", "d": "5/2015"}, {"body": "another option change username back jsfb least temporarily fbme fixed way existing users nt get let know", "d": "5/2015"}, {"body": "taken look react code first time readable provide fix agree needs fixing", "d": "5/2015"}, {"body": "bunch discussion let continue might good time revisit make actually happen expert definitely value expert opinions", "d": "5/2015"}, {"body": "sounds like great idea", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "please stop adds zero value already identified good idea", "d": "5/2015"}, {"body": "github really needs automatically consolidate comments single block digest email", "d": "5/2015"}, {"body": "got pr new message like warning setstate update mounted mounting component usually means called setstate unmounted component please check code exampleapplication component noop", "d": "5/2015"}, {"body": "nt see react tab chrome dev tools also quite sure access dev tools honest see chrome settings", "d": "5/2015"}, {"body": "browserify get prod version nt message probably want extension users anyway actually debugging sure best way devtools expecting inspecting browser window nt playing nicely together devtools set global browser window react looking context execution environment nt browser window might close quick cc sebmarkbage see comments", "d": "5/2015"}, {"body": "alright run production mode ca nt use react developer tools guess extension nt work cases like mine", "d": "5/2015"}, {"body": "mean ca nt use react developer tools debug extension kind extension use tools open extension may possible use react devtools debug extensions insert global flag pages find react instance", "d": "5/2015"}, {"body": "think work global global able global scope", "d": "5/2015"}, {"body": "btw reason stuck react upgraded yet", "d": "5/2015"}, {"body": "maybe something wrong mean nt see react nav item console sure ever come think certainly nt know nt got warning mentioned sure kind extension types mine chrome extension uses browseraction inject iframe reload pdf url inside pdfjs environment yes used dice global believe got issues dependencies mean using nt updated modules reason besides could update", "d": "5/2015"}, {"body": "clearer never gotten react developer tools work recall keep getting warning using wanted turn made issue", "d": "5/2015"}, {"body": "hi bhamodi computer science graduate student university cincinnaiti would like work first contribution please let know fine already downloaded source searching build instructions thank much advance regards nithya", "d": "5/2015"}, {"body": "started work formal guide time ago nt time finish nt updated part contributing doc since introduced bit tooling help enforce lot style linting catches many issues remaining hard define anyway like test statement long part following get way think need point update contributing version said somebody interested great", "d": "5/2015"}, {"body": "zpao take initiative", "d": "5/2015"}, {"body": "addressed smile", "d": "5/2015"}, {"body": "code posted sounds fine reduce simple test case happy reopen take look", "d": "5/2015"}, {"body": "note brackets instead quotes quotes always strings brackets get evaluated case give new reactelement render exactly like already though beware putting divs spans could also assign variable first need apologize fore english future though question best asked mailing list stack overflow since much specific thing react vs problem react", "d": "5/2015"}, {"body": "cc jimfb remember us talking nt sure result", "d": "5/2015"}, {"body": "one issue regard subtrees enough subtree rendering introduced subtree rendering implicit context pass another issue method already third argument wrappers basically poor man named arguments allows us put arbitrary things third issue nt even think object maps define context future would make less sense finally unit testing recommended strategy unit testing use shallow rendering add context support shallow rendering instead", "d": "5/2015"}, {"body": "cc spicyj designer error messages", "d": "5/2015"}, {"body": "make say expected single reactelement", "d": "5/2015"}, {"body": "sounds good", "d": "5/2015"}, {"body": "window likely properly set seem standard would expect correct", "d": "5/2015"}, {"body": "placed tests executionenvironmentjs directly hook require react passing get true returned canusedom every test javascript function", "d": "5/2015"}, {"body": "moontahoe possible environment needs set react required edit seems perhaps react required elsewhere", "d": "5/2015"}, {"body": "syranide thanks isolated tests separate branch found missing globalnavigator added code works", "d": "5/2015"}, {"body": "thumbsup glad worked environment checks little bit fragile", "d": "5/2015"}, {"body": "better question mailing list stack overflow direct issue react bringing", "d": "5/2015"}, {"body": "bug checkboxes applies text inputs due browser bugs yet normalized might strictly possible need explicitly detect change made simply test", "d": "5/2015"}, {"body": "confused far understood controlled handler even shown screen nt change user types handler gets called whose reflect changes user even though actual nt going change unless handler triggers different property react element far understood checkboxes supposed behave way misunderstood thanks", "d": "5/2015"}, {"body": "correct", "d": "5/2015"}, {"body": "found following docs think adding attributes jsx", "d": "5/2015"}, {"body": "mentioned ideas future best practices various community tools react current largely exposes underlying dom", "d": "5/2015"}, {"body": "want use check radium radium support due browser security measures needed", "d": "5/2015"}, {"body": "docs link outdated latest version makes mention syntax right planning add support complicated inline styles like react core", "d": "5/2015"}, {"body": "posted pr implements underlying api would power new semantics mostly continueinform discussion", "d": "5/2015"}, {"body": "mixed feelings say like keeps api surface minimal nt introduce new intermediate states eg componentdidreceivepropsandnowgonnaupdateobserveddata", "d": "5/2015"}, {"body": "mixing concerns render nt render magic looks like synchronous real logic async might make people rage ca nt match expected abstraction actual functionality tool needs rerender anytime subscription fires subscriptions nt fire observables subscriptions sinks subscriptions send data forward somewhere looking second observable function first subscription problem ca nt keep last value received observable everytime call give new observable namely solve making observablefetch internally persistent registry sounds really bad global shared state hidden framework magic core problem need separate observable creation observable consumption suggested implementation conflates last value received observable well observe last value recommend fully embracing observables erik meijer dropping whole idea", "d": "5/2015"}, {"body": "seems makes server rendering much harder need call render extract data dependencies", "d": "5/2015"}, {"body": "solve making observablefetch internally persistent registry url observable sounds really bad global shared state hidden framework magic think version also present original hook proposal ordering important since allows provider data reference counting cache ie cache data long nobody listens unsubscribed immediately reference count would go zero subscribe data original proposal lifetime observable new propsstate come proposal lifetime next value comes agree nt really make sense observables see use observables presumably reason one might course turn observable factory data tracker provider la nt seem additional value using data tracker directly said concerned datatracker suggested nt understand compatible immutable data plain object immutablejs models point starting think sideways data injection solved well higherorder components nt need core like learn makes react team think otherwise think even seems proposal could implemented userland higher order component child actually already asked question got answered oops", "d": "5/2015"}, {"body": "glenjamin nt make serverside rendering harder rerun render client discover dependencies fact rerun render client anyway setup refs callbacks component data structures nt making things worse", "d": "5/2015"}, {"body": "jimfb following correctly nt give way collect data dependencies resolved serverside without calling rendertostring multiple times server", "d": "5/2015"}, {"body": "gaearon correct would benefit using observables unless system already uses observables case means observables propagate state write whereas react render utilizes data read observables perfectly compatible react model actually reverse react internally yeah observable api nt add additional value talking react core gaearon regards point immutableplain javascript super important one give lots thought system actually plays super nicely immutable plain javascript encouraged use immutableplain javascript much possible nt use data tracker everything behaves exactly behaves today sometimes however eg large cyclic graphs immutable data starts run troubles recommended solution break cycle keys lookup map effectively introducing mutability immutable graph api allows data store implementor without exposing mutable breakpoints located able effectively implement app immutable data encouraged wo nt ever learn api nt practical would able call api better performance sideways data loading however please nt feel obligated ditch plainimmutable javascript add new api still love immutable plain js", "d": "5/2015"}, {"body": "glenjamin ah see asking either api observables require minor nonisomorphism word api ssr datastores would need return data eagerly eagerly fetching nt usually problem ssr database source truth lives near observables ssr datastore would need close observable streams loading close client order receive updates server nt really making situation worse proposals", "d": "5/2015"}, {"body": "jimfb thanks addressing bit like reverse would primary means subscribing data changes could used finergrained subscriptions large trees correct flux architecture would subscription point store would people writing stores exposed api would rather people writing flux libraries encouraged use would encouraged pattern", "d": "5/2015"}, {"body": "gaearon yes exactly like shouldcomponentupdate reverse allows datastores provide hints component data depend changed might want rerender rerenders optimal way maximally efficient cases even efficient immutablejs see josephsavona details api would probably used people writing datastores potentially also people writing flux libraries api choose pattern would recommended sideways data loading ie nt setup subscriptions flux stores manually sideways data loading still discouraged ie people try find way use immutable props sideways loading data anyway would recommended let react track data course could still always tracking manually like today felt need thing one motivations oft quoted statistic something like mixins trying implement sideways data loading sure statistic came certainly true sideways data loading one main thing mixins used also one error prone things people react want simplify see motivation observe", "d": "5/2015"}, {"body": "reading proposals nt understand everything think react try solve problem keep simple however crazy idea thought render function could return promise example sure good idea guess would nt problem isomorphic apps react wait render promises complete", "d": "5/2015"}, {"body": "interesting update work around need pushupdates dirty marking use protocol pulling data eg polling data", "d": "5/2015"}, {"body": "hmm ca nt repro simple case give bit detail perhaps test case jsfiddle elsewhere", "d": "5/2015"}, {"body": "oops sorry seems like code something wrong react works fine", "d": "5/2015"}, {"body": "tried adding libraries remove delay", "d": "5/2015"}, {"body": "fastclick libraries", "d": "5/2015"}, {"body": "alitavector thank considered library alternative", "d": "5/2015"}, {"body": "nt exposed way extend builtin event system essentially problem extensions would nt scoped component global set different components different event systems makes difficult share components community different event systems may conflict namespace work controlled environment want make easy share reuse components without conflicts support would need build way supports isolation major benefit wrapper like since support component isolation default", "d": "5/2015"}, {"body": "sebmarkbage thanks explanation", "d": "5/2015"}, {"body": "nightly builds published published nightly zpao probably makes sense document fact somewhere", "d": "5/2015"}, {"body": "also fiddle nightly build", "d": "5/2015"}, {"body": "dantman thanks bringing bad intention publish revs sync internally fb nt synced recently published master andreypopp published commit least ones nt decide docs spicyj talking friday moving builds website amp official home cody sure ever shared nice detective work", "d": "5/2015"}, {"body": "nt make release decided little risky comment refers release pr", "d": "5/2015"}, {"body": "babeleslint lints original source transformed code see post info set", "d": "5/2015"}, {"body": "means react loaded thought dom environment nt create wrapper node needs test rendering certain nodes check use tell detecting globals ensure defined", "d": "5/2015"}, {"body": "well test cases explicitly specify nt enough", "d": "5/2015"}, {"body": "getmarkupwrap creates wrapper node required could perhaps change create demand cache right nt", "d": "5/2015"}, {"body": "general made assumption execution environment nt change may run issues", "d": "5/2015"}, {"body": "circumvent issue jsdom", "d": "5/2015"}, {"body": "surprising issue case occur test windows environment", "d": "5/2015"}, {"body": "using jsdom make sure creating correct globals environment requires react see", "d": "5/2015"}, {"body": "yes globals created correctly think like", "d": "5/2015"}, {"body": "require react tricky beast really careful set everything else ps think also need add globalwindowdocument well", "d": "5/2015"}, {"body": "set globalwindowdocument test inputs update thanks helping", "d": "5/2015"}, {"body": "berkeleytrue absolutely right somehow missed include globals require react amazing man thanks ton", "d": "5/2015"}, {"body": "important lesson learnt always declare globals including react closing issue thanks everyone", "d": "5/2015"}, {"body": "welcome", "d": "5/2015"}, {"body": "modify directly use new object created next state reference object previous state workaround use also problem modify directly calling", "d": "5/2015"}, {"body": "workaround clear using setstate recommended pattern whenever want update state mutating state object directly works cases saw work consistently lifecycle methods recommended", "d": "5/2015"}, {"body": "yes really wanted use setstate matter scenario complex state structure many levels depth use setstate agile manner update one property might deep state tree using something like reactaddonsupdate becomes overkilled need build whole state structure level depth want update", "d": "5/2015"}, {"body": "suspect problem attempting access props directly rendered component passing function prop works properly following test passes js render component function prop function var callbackcomponent reactcreateclass componentdidmount function thispropscallback render function return var callback mocksgetmockfunction var renderedcomponent reacttestutilsrenderintodocument expect callback tobecalled", "d": "5/2015"}, {"body": "actually said example tried something like test nt worked either even set default prop nt replaced new one passed obs works fine rendering outside test", "d": "5/2015"}, {"body": "see implementation renderintodocument simply calls reactrender trouble passing functions artifact test environment something specific react", "d": "5/2015"}, {"body": "nt example poor documentation talking pure bundles browserify ignoring ability factor bundles multiple files vs webpacks hotloading capability nt belong documentation irrelevant also opinion one argue pretty wrong", "d": "5/2015"}, {"body": "yea best example actually nt anything hotloading nt well informed plus years old point generating multiple bundles browserify nt super easy point bit show generic solution nt entry point app mainjs something things needs bundled need way accessing react component going close since question feel free continue discussing", "d": "5/2015"}, {"body": "ah well yeah years ago browserify lot janky webpack interesting nt hotloading tho guess reads way generic entry point actually browserify due plugin create generic reactsetup include included anywhere want use react code browserify factor common bundle setup file tada also good way force correctly modularizing code big team might need global nt rely general module design", "d": "5/2015"}, {"body": "ok going reiterate understanding points example general zpao abritinthebay would really appreciate guys could verify saying since fairly new lot js eco system browserify actually perfectly fine used bundle necessary dependencies whether use browserify vs webpack components rendered markup returned directly via servermarkup case js present startupscript replacement something like mainjs used kickstart component client side actually page loads js present render component given container clobbers static markup servermarkup reality nt even need render script tag directly could right script tag loaded page rendering done simplify demo overall trying make sure get rendered components react server return make sure start react component client side well", "d": "5/2015"}, {"body": "seems right certainly point correct tech choice end nt even clobber static markup btw content rendered react originally server react dataid attributes etc react attach right places dom rewrites propsstate react code client server", "d": "5/2015"}, {"body": "requested discussion going point", "d": "5/2015"}, {"body": "thanks zpao", "d": "5/2015"}, {"body": "fixed master next release", "d": "5/2015"}, {"body": "thanks spicyj", "d": "5/2015"}, {"body": "solution use ch unit pretty much equivalent ch unit represents width precisely advance measure glyph zero unicode character element font", "d": "5/2015"}, {"body": "sounds like good idea interested creating pr add", "d": "5/2015"}, {"body": "zpao yes thing nt know whether needs anything special done also include handle vendor prefixed versions tabsize x add srcbrowseruidomcsspropertyjs isunitlessnumber object x add docs x test coverage already place", "d": "5/2015"}, {"body": "autogenerate venderprefixed styles might seen changed code need thanks", "d": "5/2015"}, {"body": "valid bug going close gh issue favor tracking", "d": "5/2015"}, {"body": "fixed please look", "d": "5/2015"}, {"body": "icenuts create react native issues repo", "d": "5/2015"}, {"body": "sorry", "d": "5/2015"}, {"body": "try master version react changing packagejson running npm install may see informative warning", "d": "5/2015"}, {"body": "hi spicyj thanks help unfortunately peers dependencies allow idea better informative warnings", "d": "5/2015"}, {"body": "ok hacked bit peerdependencies others components got last version react gives lot useful detailed informations running problem seems quite unresolvable react asks remove react throw think let react happy p", "d": "5/2015"}, {"body": "sorry current limitation ca nt return one component react render method something want fix refactor components make work right helps plain function react component return array elements nt necessarily help need componentlocal state like geneexonrow", "d": "5/2015"}, {"body": "thanks already read kind limitations googling stuck trying wrap around div thought react would read div wrapper remove rendering refactored code works like charm brave limitation thanks framework really pleasure cut things module get javascriptjquery soup", "d": "5/2015"}, {"body": "\u0432\u0441\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043a\u0430\u043a \u0438 \u0434\u043e\u043b\u0436\u043d\u043e", "d": "5/2015"}, {"body": "detailed info component receives string value property silently ignores behaves like uncontrolled one example works intended change default value nan", "d": "5/2015"}, {"body": "discussion", "d": "5/2015"}, {"body": "thanks finding cody going close continue discussion", "d": "5/2015"}, {"body": "able work around react would need allow support custom nonhtmlspec attributes attributes used without", "d": "5/2015"}, {"body": "could add attribute directly dom element currently file inputs nwjs mounting like", "d": "5/2015"}, {"body": "nt think react bug encounter issue using native js jquery library imagine limitation browser performance computer unable reproduce issue component however think due performance difference machine", "d": "5/2015"}, {"body": "think might fighting react rather manipulating dom method mean wo nt really able use handle animations definitely achieve identical animation better performance within react", "d": "5/2015"}, {"body": "levibuzolic sorry nt think understand complex svg shapes animated using css means even drop dependency would write timer based code transitions svg element one shape shape b want method return svg element shape b already gone almost b new structure pushed dom else react interrupt transition hence needs callback function tell react finished whatever tween performing part update go ahead update dom", "d": "5/2015"}, {"body": "ameyms sorry probably nt explain well basically want use timing function manipulate kind progress state allow method handle rendering animationtransition based state important think method something run many times nt method returns template html able return dom acurately represents current components props state given time soon party library change dom component state wo nt match dom run trouble gets called similar methods trigger library timing function manipulates state time render function rerun every state change rerender svg represent new state look projects like give simplified interface transitioning two states still need help put together example component", "d": "5/2015"}, {"body": "saying inside seems hacky current solution also means reinvent code sad", "d": "5/2015"}, {"body": "definitely nt result infinite loop use timing function update state modify hacky react made also wo nt need duplicate muchany code need timing function render end looking something like", "d": "5/2015"}, {"body": "close issue react authors also share opinion levibuzolic cc spicyj vjeux zpao", "d": "5/2015"}, {"body": "yes levibuzolic approach sounds great", "d": "5/2015"}, {"body": "worth noting happens using server side rendering rendering otherwise trying get node hit invariant target container dom element", "d": "5/2015"}, {"body": "yes though also recall issue someone rendering documentbody null confused", "d": "5/2015"}, {"body": "weird looks like react innocent browser update attribute meaning anyway works change", "d": "5/2015"}, {"body": "used property contenteditable elements create placeholder css less withdefaultuncontrolledcontenteditableplaceholder apply self childs amp contenteditable dataplaceholder empty focus content attr dataplaceholder color colorplaceholder hack firefox contenteditable focused empty smaller height see amp contenteditable empty focus content feff switched instead works better", "d": "5/2015"}, {"body": "cody explain think react innocent case looks like setproperty setattribute update value since initial render updatedrender different would consider react bug", "d": "5/2015"}, {"body": "update looks like setproperty added mootools nt normally exist dom node tested fiddle mootools loaded thus testcase called setproperty point initialrender updaterender still holds going leave valid bug", "d": "5/2015"}, {"body": "react nodeplaceholder value nt work divs divs nt property eventually support arbitrary properties amp attributes perhaps work assuming use setattribute blindly fwiw using arbitrary property data exactly data using dataplaceholder best thing anyway", "d": "5/2015"}, {"body": "jsfb yeah react causes confusion innocent attributes problem example", "d": "5/2015"}, {"body": "yes initially thought placeholder standart property moved instead works fine", "d": "5/2015"}, {"body": "looks bad nt great job interacting native events sebastian wrote post onceuponatime native synthetic event systems large interoperable even ca nt see reason fatal like syranide spicyj understand going wrong fix might look like", "d": "5/2015"}, {"body": "happens handle click event node removed event triggered react receives sebmarkbage deal case events fire detached elements ignore events nodes nt document nt think bug easily fixable otherwise nt old event handler reconcile removes node", "d": "5/2015"}, {"body": "additional details impact bug sounds like bug likely trigger use nonreact component eg jquery ui react single page application nonreact component triggers navigation within app", "d": "5/2015"}, {"body": "rigdern thanks excellent bug report good repro case spicyj think happens use root id determine element clicked repro case key part root id two reasons child container multichild nt get key added root id nt unique key nt need one button different type make sure key used part root id problem solved problem repro nt firing removed node firing event new node would solved used unique id per instance identify event handlers instead generate root nonunique think wanted anyway another repro shows different issue", "d": "5/2015"}, {"body": "spicyj zpao change thoughts renderintodocument maybe attach dom avoid cases like cleanup trying avoid removed logic might better solution improve test isolation", "d": "5/2015"}, {"body": "help avoid cleanup effort tests opensource version react see calls removenextsiblings reactsrctestindexhtml nt feel strongly", "d": "5/2015"}, {"body": "suppose two options deprecate create new method anyone better name simply renamed version change actually render document option seems like best option point current behavior nt received complaints besides mine thus far", "d": "5/2015"}, {"body": "probably reactrender right would want warn rendering another react instance tree", "d": "5/2015"}, {"body": "sure related warnings", "d": "5/2015"}, {"body": "provide detailed example use case normally fluxlike framework events get sent dipatcher results updated datastores rerender nt see would needwant beforeafter notification would actually mean different something beginningend event handler", "d": "5/2015"}, {"body": "understand data flow widgets dispatcher stores widgets events also sent dispatcher stores listening stores however pictures see sending events directly long stays unidirectional acyclic unaddressed problem see synchronous events used cause reentrancy store listens store b sends change event within sending event getters called store b store needs robust sounds really simple practice easily get hardtodebug problems synchronous events react would want make events asynchronous could cause multiple rerenders one logical change therefore would like use synchronous events event queue flushed empty end external event mouse click server response etc way send action system everybody send events whenever like processed everybody defined state however would flush queue every click handler etc errorprone reason would like limited number hooks address external events maybe prerender hook nt even answer anything react synthethic event system would allow detecting end processed browser event", "d": "5/2015"}, {"body": "something replace mc though whether flux relay another system entirely default option callbacks passed levels deep props get extrapolate thinking react becomes quickly unmanageable maybe take ryanflorence suggestion also add data flow bullet point react implements oneway reactive data flow reduces boilerplate easier reason traditional data binding combine flux full replacement mvc architecture helps build great apps faster way still explain relates mvc present recommended architecture", "d": "5/2015"}, {"body": "spicyj since babel errors better recommendation moving forward free close", "d": "5/2015"}, {"body": "jsfb nt added error nonstringfunction types said wanted add", "d": "5/2015"}, {"body": "mention using coffeereact babel nt really work wish would error would stack could tell react element parents minimal references react methods opposed giving stack react methods", "d": "5/2015"}, {"body": "looks like resolved end going close bug track warningforrenderinhead separate issue clarity", "d": "5/2015"}, {"body": "closing", "d": "5/2015"}, {"body": "bit frustrated installs instead would nice installed react master expected deprecation rt side effect fixing", "d": "5/2015"}, {"body": "probably wo nt fix since build process better fix get back track us publish alphas npm", "d": "5/2015"}, {"body": "ok still need add proper deprecation notice npm probably write blog post otherwise done", "d": "5/2015"}, {"body": "fix merged closing bug", "d": "5/2015"}, {"body": "wwayne nt see bug react appears rendering exactly expected never set showmodal button always undefined always goes modal hide never see checkboxes checkboxes force visible changing style redgreen instead invisiblevisible check uncheck expected fiddle fixes since code nt run jsfiddle asis provide fiddle demonstrates issue", "d": "5/2015"}, {"body": "jsfb restored situation jsfiddle bug never shows thinking caused develop environment converter babeljs check another way really thanks help good day", "d": "5/2015"}, {"body": "tell related ownerparent context changes discussed still uses ownerbased contexts owner context guess master uses parentbased context test passes", "d": "5/2015"}, {"body": "little workaround ended ensure ownercontext parentcontext set using shallow rendering testing js function shallowrender makecomponent context context context var reactcontext require reactlibreactcontext reactcontextcurrent context var shallowrenderer testutilscreaterenderer shallowrendererrender makecomponent context reactcontextcurrent return shallowrenderergetrenderoutput usage var output shallowrender gt context note use arrow function delay creation component ownercontext set", "d": "5/2015"}, {"body": "trying shallow renderer components using reactintl render like shallowrendererrender element locales null messages null wo nt get error locales key context reactcompositecomponentmixinmaskcontext general limitation related issue sound like something specific reactintl library", "d": "5/2015"}, {"body": "close non bug", "d": "5/2015"}, {"body": "intentional", "d": "5/2015"}, {"body": "zpao could see reasons want make behavior similar realworld possible", "d": "5/2015"}, {"body": "simulates event synthetic event system nt need dom", "d": "5/2015"}, {"body": "fix", "d": "5/2015"}, {"body": "using react encounter issue android use fallback case callback executed", "d": "5/2015"}, {"body": "nobody idea", "d": "5/2015"}, {"body": "jsfb like react predictability archived complete rerenders let image guaranteed called render cycle stores changed could called top component everything would get rerendered controllerviews could use getting global state stores would easy predictable lifecycle method find another way solutions found far work follow controllerviews use one lifecycle method initialize stores another one registering individual stores yet another one unregistering every store changes calls callback registered controllerviews callbacks execute rerenders subtree subtree idea rerender everything lost docs say calls may batched may may means predictability lost lifecycles methods much specialized use complicated solutions even simple things probably missing something nt know", "d": "5/2015"}, {"body": "cody think weird thing using componentwillreceiveprops copy data stores component local state want something called render cycle thing called render would nt component render function get data store asneeded render impo vast majority components nt need componentwillreceiveprops function escape hatch exceptional situations particular detecting responding props change instance suppose implementing video player component took status prop value playing stopped transition playing stopped vice versa need setupcleanup call imperative api use case aligns perfectly documented api props change function called else guarantees", "d": "5/2015"}, {"body": "jsfb want something called render cycle thing called render would nt component render function get data store asneeded render like data global state needed shouldcomponentupdate gets called think might best solution top component render function data stores gets put props controllerviews pick need normally would crazy using immutablejs could work try thanks discussion", "d": "5/2015"}, {"body": "going deprecate reacttools closing", "d": "5/2015"}, {"body": "alright curiosity replacing see docs still mention reacttools", "d": "5/2015"}, {"body": "hatched reacttools replaced babel babel pretty popular lot people already switched compiles jsx default", "d": "5/2015"}, {"body": "cool thanks", "d": "5/2015"}, {"body": "yea nt blogged yet reacttools always mostly pretty command line interface jstransform moved wrapping bits jstransform shipped lets us decouple releases also decided stop using jstransform externally recommending people start using babel however jstransform exist mostly api less churny alternative", "d": "5/2015"}, {"body": "thikn would nice could use shorthand report jsxtrans want set inner content wo escaping may something like yes danger imagin templates engines force us use long syntax construction unescaped content features template engines think necessarily use react fo complex components logic plain template engine mustache embeddedjs etc project cause react cool believe features would easy accessible", "d": "5/2015"}, {"body": "jsx much simple transform intention making special case specific tags also nt want introduce complicated semantics case use may able make react warn gets element children probably tracked separately", "d": "5/2015"}, {"body": "still getting error installed latest react version ideas happens everything else bundles rather alright browserify main client script nt run flags error", "d": "5/2015"}, {"body": "kdamball long shot error turned component including component hierarchy actually used removed extra ran fine helps narrow component hierarchy ancestor gt childlist gt child gt childlist gt child recursive ancestor component unnecessarily including child component pure speculation since error message way indicative solution found problem case may completely different cheers", "d": "5/2015"}, {"body": "bodjkin yep right totally error error reporting better though seems like frontend scripts better bundling everything using browserify", "d": "5/2015"}, {"body": "reverted zpao makes good point camelcase continue discussion currently working around manipulating dom node directory componentdidmount", "d": "5/2015"}, {"body": "still getting owners assigned createelement called way reassign owner fact ca nt throw mine wrapper child trying render already created props assigned edit js fiddle attached", "d": "5/2015"}, {"body": "xizhao work want", "d": "5/2015"}, {"body": "since working simple map structure toobject saved eg sure well work complex object structures however", "d": "5/2015"}, {"body": "movement project hold since nt know stay react could use immutable maps state b move immutable maps child singleitem map c leave things supported future", "d": "5/2015"}, {"body": "jeffutter afaik going change personally still nt understand people want put thirdparty objects state nt see benefit wrong using", "d": "5/2015"}, {"body": "syranide two main advantages stores already deal immutable hashes react nt bother converting deep comparison updates simple immutable objects react setstate immutable object contents changed would rerender would comparing immutable objects cheap deep comparing hashes upfront cost immutable objects way easier reason wether changed definitely plan support suppose best plan action tojs everything manually deep compare", "d": "5/2015"}, {"body": "movement would get rid replacestate add better immutablejs support perhaps libraries core however intention break old behavior replacestate seems like bug zpao spicyj maybe want patch release easy fix", "d": "5/2015"}, {"body": "jeffbski ca nt speak using store data singular state object seems rather limiting unable include stores introduce locally relevant state component right straightforward objects well immutability concept unique immutablejs depending underlying behaviors use simple reusable shallow equality test plain objects sebmarkbage actually intend allow replacing state object vs simply understanding iterate generic mapssets", "d": "5/2015"}, {"body": "syranide yes components use data multiple stores end different elements hash component uses data one store sort silly nested single element hash use simple reusable shallow equality test plain objects point exactly usually objects one level deep fine sometimes though immutablejs objects use deeply nested objects use immutablejs everything nt worry", "d": "5/2015"}, {"body": "sebmarkbage sure cleanest thing result changes right nt know thing queue come could wrap item queue know came instead would allow us stack calls nt think actually handle correctly simplest case using probably change line", "d": "5/2015"}, {"body": "could take something shipping today needs bake first changes mentioned would change behavior risk first complete latter trades bug slightly less bad bug setstate replacestate update queue result object passed setstate used replacement since single pendingreplace flag", "d": "5/2015"}, {"body": "actually came simple fix queue emptied every replacestate since nothing earlier queue could affected result", "d": "5/2015"}, {"body": "ah truth spicyj fixing small let take nt another patch release soon", "d": "5/2015"}, {"body": "want guard async call sometimes called component mounted im using", "d": "5/2015"}, {"body": "love see solution promises issue use promises app database layer react components things roughly like could certainly create flux store giving us synchronous layer react component data fetched lot boilerplate common pattern one solution would interesting would use promise chaining checkmounted gt ismounted promiseresolve arguments else promisereject componentdidmount gt databasefindbyid draft id propsdraftid checkmounted draft gt setstate draft another solution thought wrapping promises tiny class makes subscribable much defeats point promise syntax could say class unpromisifiy extends eventemitter constructor promise gt promisethen gt emit arguments promisereject gt emit reject arguments componentdidmount gt unpromise new unpromisifiy databasefindbyid draft id propsdraftid unpromiseon ondata componentwillunmount gt unpromiseoff ondata unpromise ondata gt setstate draft", "d": "5/2015"}, {"body": "issue reliably occurs boolean attributes like react renders differently client server related", "d": "5/2015"}, {"body": "jordansexton message red herring attributes problem something else markup", "d": "5/2015"}, {"body": "spicyj hmm pointers diagnose since invariant error message flawed", "d": "5/2015"}, {"body": "jordansexton best suggestion call reactrendertostring server client compare different root node ids strings wo nt match directly maybe find replace make match", "d": "5/2015"}, {"body": "spicyj oof okay thanks idea", "d": "5/2015"}, {"body": "edit sorry realized looking confused thinking would flatten array messages operating higher level messages observable would proposed api handle case result one data field dependent result another ie map first result return observable observe props context propsparamsthreadid return const observethread threadstoreobservegetbyid id propsparamsthreadid return thread observethread messages observethreadmap thread gt return messagestoreobservegetbyids ids threadmessageids pretty new observables general may going completely wrong promiseland extremely simple since returning promise cause subsequent based promise", "d": "5/2015"}, {"body": "nt understand comments nt depend encapsulated state surely makes react lot complicated also nt encapsulated state would need memoized immediate mode library go stores yes nt need state react prescribes several patterns requires create extra wrappers normal usage nt need stores observed data always depends state even indirectly nt think bad practice depend observe eg even nt depend would still depend even nt depend would still indirection uses render component props uses would need get reevaluated every time render pass comes props could changed however would definitely diff resulting observables unsubscriberesubscribe observable returned however ca nt diffing individual properties shouldcomponentupdate ideal implement cache using power feature way return observable multiple components tree eg multiple components loading user even nt recreate observable eventually hit bottom cache react reconciliation works anyway slow hook nt designed make react completely reactive sense state captured observables currently key design goal avoid trapping state closures combinators instead nice clean separate statetree frozen revived potentially shared across workers brings final point certainly nt need add core library original public interface mountcomponentreceivecomponent could build whole composite component system top however many people used much powerful raise abstraction bar since build things enabled higher abstraction bar componentwide optimizations react primary purpose create contract components different abstractions ecosystem coexist important part role raise level abstraction common concepts enable new crosscomponent features eg saving state subtree revive subtree possibly including automatic unmounting server changing timing aspects reconciliation server also important provide batteries included make palatable uniform important realize micromodularization like adding new lifecycle hook nt strictly pure win building framework also means longer possible reason system wide abstractions", "d": "5/2015"}, {"body": "wish something like docs philosophy design goals nongoals", "d": "5/2015"}, {"body": "react primary purpose create contract components different abstractions ecosystem coexist important part role raise level abstraction common concepts enable new crosscomponent features love agree gaearon nice sort doc", "d": "5/2015"}, {"body": "certainly nt need add core library however many people used much powerful raise abstraction bar since build things enabled higher abstraction bar componentwide optimizations feel reticence least adding another api adding one depends nonlanguage still defined construct work could totally work fine worry issues promise libraries face promise library even spec complaint ones trust leads unnecessary wrapping defensive work make sure resolve correctly limits optimization opportunities worse yet get stuck like jquery broken implementation never change", "d": "5/2015"}, {"body": "jquense completely agree wanted add hook long time ago original experiment hesitation two years ago still far away standardization wanted standard protocol added core think getting point lot frameworks agree need something like observables standardization reaching point palatable api proposed sure need end tweaking bit long high level architecture works swappable eventually converge think happened promises api debugging story severely lacking certain areas observables nt suffer complete story outofthebox promises standardize minimal incomplete solution", "d": "5/2015"}, {"body": "difference opinion observables observed could nt resist sorry zalgo potential whether observables may push value synchronously response subscription folks seem react use observables depend far understand comment generally nt find zalgo problem observables consumer always control may opt alwaysasync something like", "d": "5/2015"}, {"body": "glad finally consensus personally prefer channels observables observables going added language agree need wait longer said let make sure keep api open enough work nonobservables conform basic api", "d": "5/2015"}, {"body": "nt find zalgo problem either however observables use scheduler ensure async desired default scheduler async use needed", "d": "5/2015"}, {"body": "sebmarkbage think addressed concerns see benefit adding framework however comment canshould fold fields propscontextstate rename", "d": "5/2015"}, {"body": "slightly bikeshedy going anyway zalgo issue nt really one whether matters terms api expectation one observable interop ease implementation early agreement zalgo put promise library world annoying position super defensive dealing promises libs point repeated promise library even spec complaint ones trust leads unnecessary wrapping defensive work make sure resolve correctly early promises nt comply async resolution position even tho speced libraries ca nt assume trust worthy killing potential optimizations strikes particularly relevant react providing observable implementation use would want anyway likely years away able rely solely browser provided observable easy library interop important plus gaearon point react depends sync calls speced always async puts us jquery like position stuck rogue implementation completely agree wanted add hook long time ago hesitation two years ago still far away standardization wanted standard protocol added core glad attended thought certainly comforting general think early adoption promises worth cons discussing nt take concern dislike disapprove pretty excited prospect first class api also see observable really goodmost reasonable choice", "d": "5/2015"}, {"body": "use rxjs contract observable since common use allows synchronous execution jhusain proposal common use switch contract instead add little bit context reactive streams initiative provide standard asynchronous stream processing nonblocking back pressure encompasses efforts aimed runtime environments jvm javascript well network protocols current leading implementations fe akka streams rxjava nt know rxjs already comply interface current interface subscriber onsubscribe subscription onnext oncompleted onerror throwable shed light jhusain proposal nt know react strictly comply initiative need probably put rxjs assuming comply adapt react interface let advanced concepts like backpressure rxjs though would prefer adapt much position goal regarding initiative", "d": "5/2015"}, {"body": "vladap believe mentioned proposal jhusain", "d": "5/2015"}, {"body": "read jhusain sure motivation possibly move spec future specific advantage reactivestreams spec larger support already version rxjava already implements spec assume rxjs follow nt checked blog sums interfaces examples using akka streams see advantage interfaces backend frontend mainly work possibly might help cooperate backend frontend groups hand assume websocket sse actual integration points streaming ca nt find implementators list wwwreactivestreamsorg right last time checked bj\u00f6rn antonsson typesafe inc gavin bierman oracle inc jon brisbin pivotal software inc george campbell netflix inc ben christensen netflix inc mathias doenitz sprayio marius eriksen twitter inc tim fox red hat inc viktor klang typesafe inc dr roland kuhn typesafe inc doug lea suny oswego stephane maldini pivotal software inc norman maurer red hat inc erik meijer applied duality inc todd montgomery kaazing corp patrik nordwall typesafe inc johannes rudolph sprayio endre varga typesafe inc maybe go far believe larger context help future decisions", "d": "5/2015"}, {"body": "vladap understand see github issues jhusain already working guess much problem interface perspective also could grasp different github issues spec document observer certainly respect generator interface something like simply implementing basic observable single subscribe method respect interface secure react", "d": "5/2015"}, {"body": "looks like different naming functionality sense fine would probably prefer naming spec end nt care much far methods evaluate missing equivalent onsubscribe blog mentioned author says key control backpressure nt know use cases assume react nt care controlling backpressure another strategy complex thing hence understand react concern understand correctly strategy something along lines either app complex arise backpressure problems use something solve like rxjs connect react component directly fe websocket nt backpressure problems app simple slow updates", "d": "5/2015"}, {"body": "find proposed observable interfaces future ecmascript already", "d": "5/2015"}, {"body": "current proposal found jh may vladap notifications githubcom wrote find proposed observable interfaces future ecmascript already reply email directly view github", "d": "5/2015"}, {"body": "reactive streams proposal rsp goes proposal introduces observable handles back pressure rsp observable optimized efficiently sending streams across network respecting backpressure based part work done rxjava impressive piece engineering full disclosure designed colleague netflix ben christensen primary reason decision standardize primitive observable type caution primitive observable dual iterable contract provides us valuable guarantees type least flexible type already standardized furthermore wide variety usecases js observables require backpressure browser dom common sink push streams acts effectively like buffer given rsp type complex approach standardize primitive type first leave room implement advanced type later ideally wait validated userland fyi rxjs currently plans implement rsp observable jh may vladap notifications githubcom wrote looks like different naming functionality sense fine would probably prefer naming spec end nt care much far methods evaluate missing equivalent onsubscribe blog mentioned author says key control backpressure nt know use cases assume react nt care controlling backpressure another strategy complex thing hence understand react concern understand correctly strategy something along lines either app complex arise backpressure problems use something solve like rxjs connect react component directly fe websocket nt backpressure problems app simple slow updates reply email directly view github", "d": "5/2015"}, {"body": "many thanks valuable details makes lot sense", "d": "5/2015"}, {"body": "gaearon sorta copied wanted use parsereact classes needed reimplement mixin observe api higherorder component usage allow observe defined component passed decorator might merge two merge observables props thisdata thispropsdata", "d": "5/2015"}, {"body": "aaronshaf gaearon benefit making first class nt eat away props namespace eg higherorder component nt need claim name like data props object ca nt use anything else chaining multiple higher order components keeps eating names find way keep names unique composing something might already composed name conflict besides think bestpractice higherorder components avoid changing contract wrapped component ie conceptually props otherwise confusing use debug consumer supplies completely different set props received instead hoc regular component js import observe reactaddonsobserve class foo render return renderdata mycontent mycontent null return loading return mycontent control function passed prop way names collide hand pollute owner state missing", "d": "5/2015"}, {"body": "could even less verbose component grabbed observables props js render return renderdata mycontent mycontent null return loading return mycontent also nice avoid resubscriptions returned false wo nt get", "d": "5/2015"}, {"body": "finally one could write decorator wraps component", "d": "5/2015"}, {"body": "would prefer keep pure rendering function instead injecting datafetching logic initial proposal seems good opinion close state works allows separatie state management datafetching logic seems coherent thing bother use map observable instead one observable give user possibility choose observable composed minor issue", "d": "5/2015"}, {"body": "really injecting data fetching logic saves typing desugar version renders component unusual render stateful components nt think makes less pure tried combine best proposal hoc approaches benefit explicitness downsides described sebmarkbage props names may conflict point current proposal benefit explicitness negative side complicated lifecycle larger core component api surface benefit colocating memoized render dependencies rendering used anywhere else makes sense concerned looks sync async understanding work immutable models relies much also rubs wrong reactwaseasytoreasonabout way nothing easy reasoning manually tracking changes coupling data sources react wrapping work react understand exists pressure implement something performant reducing boilerplate though proposal keeping colocation explicitness decorator wraps render addon proposing changes react core everyone implement observing logic use cases uses one observable prefer may may use decorator component lifecycle stays prop conflicts data passed parameter dogfooding solving problems tools reducing boilerplate use boilerplate reduction tools decorators instead introducing new core concepts", "d": "5/2015"}, {"body": "great discussion work around much respect agree nt merit making core perhaps addon gives proposal enough traction folks try converge standardize committing fully said find proposal better minimalism something using side projects grains salt similar elierotenberg awesome work nt takeover lifecycle since app nt react interop brace coffeescript mixins keep squinting looks like prefer coffeescript require lodash moduleexports declareneedsmixin componentdidmount needsconsumerid uniqueid constructordisplayname sinkneeds props state componentwillupdate nextprops nextstate sinkneeds nextprops nextstate componentwillunmount propsfluxdeclareneeds needsconsumerid sinkneeds props state declareneeds return consolewarn missing method required declareneedsmixin intended overridden host class returns set facts stored array yes immutable data awesome point though facts serializable data values declareneeds props state used like coffeescript moduleexports emailthreads reactcreateclass displayname emailthreads mixins declareneedsmixin proptypes flux proptypesfluxisrequired declareneeds props state needsgmaildatamythreads messages oneway function props state description component needs actual implementation receiving end set toplevel component sinks needs object batches likes dedupes across components share performs sideeffects meet needs like connecting socket making http requests uses reference counting clean stateful things like socket connections components need anymore data flows stateful bits like socket events requests dispatcher stores wherever back components meet needs nt synchronous components handle rendering data yet available sharing another voice exploring kinds solutions possible userspace current api serving kind experimentation really well terms minimal step core could take support interop different approaches think elierotenberg nailed anything exposing supporting maintaining react components instances lifecycle outside mounted react hierarchy would help", "d": "5/2015"}, {"body": "stateless approach seems async data fetching stateful thus storing pendingcompletedfailed status components state relevant elierotenberg andrewimm make excellent point firstclass error handling sebmarkbage think instinct towards minimal interop point right sure adding semantics errors bubble component tree fits requirement needs equally simple story access values even slots holds last value either like without supporting observable contract firstclass feature bit skeptical proposal making cut since internet one first times chiming react issues feed best reading allaround source great work ideas", "d": "5/2015"}, {"body": "movement", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "ran issue vs jonhester still fleshing pr", "d": "5/2015"}, {"body": "update transformer smarter hoisting longer deopts completely reassigned bindings example becomes javascript use strict function rendername firstname firstname inactive var ref reactcreateelement span null firstname return function return ref longer bails", "d": "5/2015"}, {"body": "stateless functions wants easyish naming nitpicking stateless function redundant like saying wingless dog functions stateless components correct", "d": "5/2015"}, {"body": "well react supports winged birds wingless birds soon wingless dogs change name checklist though", "d": "5/2015"}, {"body": "every science community contextual terminology drop redundant terms terms also contextual field sure mean something completely different world plumbing would prefer add context world react community word component often redundant example say instance often drop component part broader sense stateless function redundant since clarify difference closure captured state could build one single function components using closure capture state callbacks fact suggested", "d": "5/2015"}, {"body": "depending globals causes much pain automating nodeiojs tests subset window needed", "d": "5/2015"}, {"body": "one official chinese doc", "d": "5/2015"}, {"body": "littlee", "d": "5/2015"}, {"body": "merged would open pr migrate internal components classes instead avoid autobind overhead", "d": "5/2015"}, {"body": "think let plain class syntax figure whether want use loose mode etc babel", "d": "5/2015"}, {"body": "svg images important part current project anything could help push issue", "d": "5/2015"}, {"body": "newer pr without merge conflicts", "d": "5/2015"}, {"body": "still want", "d": "5/2015"}, {"body": "yes", "d": "5/2015"}, {"body": "ok start pr later also relevant", "d": "5/2015"}, {"body": "everybody comes issue quite sweet solution lot svg attributes use css version list available properties example gt even reads better", "d": "5/2015"}, {"body": "know similar code jsx appears fires always click whenever refresh page localdata disappears localstorage without hitting button noticed works bug expected expected thanks", "d": "5/2015"}, {"body": "expected former equivalent note call runs immediately upon render click button want pass function gets called instead arrow function saw regular function like method like", "d": "5/2015"}, {"body": "excellent explanation thank", "d": "5/2015"}, {"body": "case using sideloading flux stores multiple levels within component tree callback event root level well child level root node callback gets called first causes rerender child node longer rendered thus gets unmounted callback child handler still gets called proceeds child call warns unmounted nt chance stop callback called feel like sideloading first class citizen react cause kind case common", "d": "5/2015"}, {"body": "mridgway child component unsubscribe store unmount nt get event callbacks unmount unless missing something", "d": "5/2015"}, {"body": "unsubscribe unmount event handlers already executing order registered time called late unless smart enough know whether handler removed list middle handling event", "d": "5/2015"}, {"body": "ended using reacttapeventplugin", "d": "5/2015"}, {"body": "iamstarkov using reacttapeventplugin solve problem", "d": "5/2015"}, {"body": "yep", "d": "5/2015"}, {"body": "using", "d": "5/2015"}, {"body": "way stated readme reacttapeventplugin", "d": "5/2015"}, {"body": "added library though nt see noticeable change using commonjs syntax require inject plugin sent iphone may pm vladimir starkov notifications githubcom wrote way stated readme reacttapeventplugin reply email directly view github", "d": "5/2015"}, {"body": "enough inject alse need use attr", "d": "5/2015"}, {"body": "nvm following answer immediately made fastclick work sure whether edge cases covered problems facing fixed lines code", "d": "5/2015"}, {"body": "due issue nt able use dropzonejs plugin ca nt create new elements without fucking key sorry think nt good approach please get ride love dying", "d": "5/2015"}, {"body": "spicyj stated obviously correct however experiencing issue silently caught exceptions ended thinking relatred well edbo find issue came solution", "d": "5/2015"}, {"body": "leoselig using lodash seems errors getting eaten occur within callback workaround monkey patch block", "d": "5/2015"}, {"body": "using lodash could trace issue related think might due sea general design flaw q promise library using see", "d": "5/2015"}, {"body": "leoselig ah yes using end promise chain propagates errors nicely", "d": "5/2015"}, {"body": "helped find piece q docs golden rule done vs usage either return promise someone else chain ends call done terminate totally explains silent catch thanks", "d": "5/2015"}, {"body": "issue occurs traceur since bug fix", "d": "5/2015"}, {"body": "gaearon plans look soon interested jumping seems one final pieces making context fully usable might something else missing one thing wondering whether following statement true component child context always reduction state props amp context ensures reliably flow data within known lifecycle similar statement component render always reduction state amp props currently envisioning would good see totally course determines whether sub tree updated new context part lifecycle triggered change component state props context remains parameters component mentioned sub tree decide whether actually update anything note returning false affect context flowing sub tree another thing wondering another new lifecycle method called similar time within context data flow possible methods called time", "d": "5/2015"}, {"body": "chrisui please jump busy stuff moment ensures reliably flow data within known lifecycle also keep mind hook might might get implemented means might might derived whatever called probably irrelevant task", "d": "5/2015"}, {"body": "got initial draft fork see running gone setting simple context parent context child relationship context parent component might change child context ie implements context child component depends context might change child context ie implements relationship setup components mounted currently component update lifecycle comes play two cases component say update ie check update child context default component immediate context children transition child component update lifecycle continues get end context tree come across component say update nothing different side channeling context data case let normal flow continue component may hit case doubt missed important stuff anyone could take quick look great welcoming comments architecture context well actual writing code fit react codebase", "d": "5/2015"}, {"body": "quick psuedoexample consider following initial render mounting everything expect impl detail parentchild relationship created amp update prop value also implements method returns method nt care nothing else changed update old cases component would never see new context bailed update tree changes check method could let default actions take place examples simple equality check see context values changed note signature currently identical default update nearest context children example case relationships setup earlier put component update lifecycle contrary discussions saw earlier still call usual new context third parameter provides component granular control still wants update hopefully explains process well enough", "d": "5/2015"}, {"body": "chrisui cool great see progress also add bunch unit tests sanity check basic functionality minimum verify child updates even parent returns false verify child updates even parent returns false verify child update component returns false additionally supported features might want verify verify get called grandparent changes provided context direct parent overrides context change verify get called component read context variable changed verify prop changes context variable changes nt updaterender twice cc sebmarkbage feedback api designidea", "d": "5/2015"}, {"body": "chrisui sounds fantastic far thank work", "d": "5/2015"}, {"body": "jimfb definitely start getting unit tests wanted something play confirm think work regarding second set cases areas avoided favour simpler design example suggested watch see particular context keys changed update feel might add much complexity parentchild relationship currently would less symmetry data flows react example may naive overlooking compare changing props internally leave user explicitly define whether two separate sources data ie current next props cause update simply ignored would good see discussion around specific detail people feel strongly implemented simple implementation want go forward guess keep merging components updated tree compare find valid update targets maybe somehow bit magic mount create parentchild relationship child nearest parent matching context child key feeling latter would make difficult manage update order later though impossible quick hack try mock", "d": "5/2015"}, {"body": "actually regarding latter suggestion specific context key comparison part functionality might tricky maintaining update order follow sorted mount order batch logic used already", "d": "5/2015"}, {"body": "chrisui sebmarkbage concern unless forgettingmissing something obvious every time contextprovider rerenders cause potentially hundreds child components depend provided context variable rerender even context variable changed intuition trigger context repropagation sort indication new value available like new value triple equals old value flagnotification actually implementation starting look like subscription system since effectively scoped global maybe correct solution require components sideways subscribe context variables thereby allowing us utilize mechanism context going use subscriptions global data see relevant information poking sebmarkbage think latest thinking favor using sideways data loading solution solve problem avoid api surface area curious hear thoughts", "d": "5/2015"}, {"body": "jimfb right hundreds components rerendering sure different trigger state change implement shouldcomponentupdate prevent mass update occuring agree though context looking like specific stream side data proposals cascading effect context see reason really develop context let see think interest added functionality draft create parentchild relationship components matching contextchild context key prevents redundant tree traversal preventing update context nt actually changed would simply done purerendermixin always", "d": "5/2015"}, {"body": "chrisui think difference single shouldcomponentupdate child component cut huge branches tree whereas context much harder findfix places rerendered even bail child depends context variable still rerender yeah curious see others think using sideways data loading solution", "d": "5/2015"}, {"body": "think context mostly orthogonal sideways data loading ideally want way pass handle sideways data store components nt global mostly use context using context di like reduces likelihood change course application though may jim notifications githubcom wrote chrisui think difference single shouldcomponentupdate child component cut huge branches tree whereas context much harder findfix places rerendered even bail child depends context variable still rerender yeah curious see others think using sideways data loading solution reply email directly view github", "d": "5/2015"}, {"body": "seems like current advice around using context beyond nt would still apply anything changes frequently going incur fairly high rerender cost increasing cost targeted way proposed would nt necessarily change people think using plus want cut branches tree still fairly straightforward happy relative simplicity context stands shouldupdatechildcontext hopefully changing underlying mechanism line global subscriptions would nt reduce ease use dramatically", "d": "5/2015"}, {"body": "jimfb eplawless pointed shouldupdatechildcontext used block huge branches tree updated think context api proposed changes simple enough implement change internals use side data loading react may support later another suggestion could also make shouldupdatechildcontext default false prevent new behaviour default make optin sake iteration getting something wild test fashion context feature always hence undocumented pursue api proposal would good hear gatekeepers", "d": "5/2015"}, {"body": "opened pr likely get quick feedback prs since easily reviewable compared master get priority issues know think originally wrong really need sorry thrash seems like strategy makes responsibility child determine whether something changed example may use data provided determine output parent nt know perhaps enough also think might want limit parent child connection fixed set properties like props ie would nt able multiple different contexts supplied one source given child uses parts context could mapping additionally always hesitant context bubble straight child consumes legit use case generally wormhole two components rather broadcasting everyone antipattern think comment pr details", "d": "5/2015"}, {"body": "sebmarkbage could go either way preference always minimize api surface could always leave initial api context jumps initiates rerenders component reads context variable people need additional escape hatch add later think bigger problem mjackson pointed nt know context variable changed really want rerender every text node every time contextprovider happens rerender nt yet provided way saying nt worry nothing changed nt bother rerendering every text element page little confused last paragraph elaborate assume suggesting following antipattern context component broadcasts child components user preferred languagetimezoneformattingetc", "d": "5/2015"}, {"body": "commented pr reproduce guess sebmarkbage chrisui jimfb think useful addition default returns true makes responsibility child determine whether something changed implementing means taking away responsibility case parent knows better true exists take away responsibility children optimization broadcasting whole subtree think two valid patterns wormholes suggested make perfect sense use pattern grouping items within various subsystems like focus voice additionally though want use context pass information whole section perhaps entirety application force rerender anything uses kind broadcast pattern probably relatively rare compared wormhole pattern believe still valid right occasionally using mixins focus voice groups source think valid use cases forcing mapping though understand desire restriction", "d": "5/2015"}, {"body": "actually thought wormhole pattern antipattern broadcast expected pattern context interesting lots consumers variable ie passing prop explicitly would result added virtually every component therefore lot boilerplate otherwise probably better pass explicitly prop sebmarkbage appears said opposite usually right stuff confused would like get clarification sebmarkbage eplawless example wormhole pattern think valid parent providing used child ca nt prop child etc", "d": "5/2015"}, {"body": "js class fancycell render return content class somewhatfancycell render return thispropschildren take pass cells table form one neat way pass split pass context provides way something might render cell communicate conceptual parent like table hidden channel already dom elements likely required layout react", "d": "5/2015"}, {"body": "nt overfocus concept context current concept nt ideal maybe ideal something like two different concepts channel", "d": "5/2015"}, {"body": "plausible alternative api spitballing", "d": "5/2015"}, {"body": "continuing spitballing could use alternative syntax made communication channel explicit avoided possibility name conflicts etc", "d": "5/2015"}, {"body": "symbol nt name conflicts neither made communication channel cost passed multiple levels indirections anytime need change add another channel background color need go update everything even though documented contract cell within table still btw essence react already hidden communication channel state nt explicitly pass child", "d": "5/2015"}, {"body": "call styleinfo celldata instead borderstyle make object adding fieldsinfo nt require changing api contract difference variant variant variant way child actually read value passed explicitly prop parent functionally latest proposal literally identical proposal clear really like latest proposal going complain solve subtly different problem told back march ultimately came conclusion right instance broadcast problem ok solving broadcast problem convinced context provide value means let something like", "d": "5/2015"}, {"body": "arbitrary symbol name conflicts unless key name always decided owner case might well make visible owner owner needs communicate key name child anyway otherwise would child know look forcing owner involved naturally encourage components use symbols instead hard coded keys", "d": "5/2015"}, {"body": "mean global symbol capital orchestrated channel common module nice part new proposed api key object property key gets confused control flow program analysis proposal first class dynamic value like key powers state", "d": "5/2015"}, {"body": "oh ic sebmarkbage pulling fancy new javascript known meeting today ok right would effective avoiding name conflicts would solve broadcast problem sold like wish office today feel like would fantastically fascinating conversation person", "d": "5/2015"}, {"body": "personally glad nt keeps us loop really like symbol thing overreliance context string keys across potentially alien tree always bad vibe", "d": "5/2015"}, {"body": "example two libraries depend parentchild wormhole third library happen use independent copies copies would nt clash see sure weird scenario imagine seems consistent", "d": "5/2015"}, {"body": "fair symbols already possible work current objects even use symbols probably end requiring module potentially global namespace npm top level module name although hopefully relative current api makes natural use simple string name also conflates runtime semantics specific property identifiers makes things like closure compiler advanced mode difficult reason also screws vm optimizations", "d": "5/2015"}, {"body": "sebmarkbage could use uuids aka symbols yes new proposal allow key decided runtime meaning parent could influence via props sure think though said sure useful without making values available within jsx scope need think add cool flexibility maybe", "d": "5/2015"}, {"body": "sure wormhole analogy broadcast scenario example ones run problem proposed pr aims solve also entirely clear helps seems semantically equivalent getchildcontext contexttypes like pr nt require enumerating children depth propagate context changes aiui original problem always although passed nature context means components broadcaster receiver could return false nt know context passing seems like two ways get around issue track components reading context tree additional mechanism propagating context changes tree", "d": "5/2015"}, {"body": "plan remove", "d": "5/2015"}, {"body": "chicoxyzzy jefffriesen still see note initializetouchevents error enable touch events call rendering component", "d": "5/2015"}, {"body": "iamstarkov looks like version fixes shipped yet", "d": "5/2015"}, {"body": "leaving details case future searchers got error invariant violation could find drag drop manager context card make sure wrap toplevel component app configuredragdropcontext also turned two react versions loaded problem webpack using npm link one packages also depends react seems webpack problems handling symbolic links fault configuring improperly anyway problem fixed installing package local nodemodules directory", "d": "5/2015"}, {"body": "olavk thanks gon na add relevant explanation gist react dnd", "d": "5/2015"}, {"body": "finding quite useful bit inconvenient among children element conditionally rendered", "d": "5/2015"}, {"body": "idea make helpers ignore null could help perhaps could return iterable traverses nested arrays ignores null", "d": "5/2015"}, {"body": "sebmarkbage really allowing nulls change intentionally introduced long time ago implementation toarray", "d": "5/2015"}, {"body": "allowing empty children null undefined boolean controversial topic eventually landed nullbooleanundefined passed way could explicitly treat empty slot something special landed early really started seeing pattern developing however imo seen leads inconsistent implementations null slots break possible use unclear whether set children allows nullable slots unclear means example grid layout component empty slot mean empty column grid skipped therefore lot components end explicit null checks meaning boilerplate inconsistent behavior forgotten therefore think default filter nulls consistent behavior builtins components still possible get access raw data different type children mind empty slots meaningful", "d": "5/2015"}, {"body": "work testutils functions example fails javascript shallowrendererrender reactmodule shallowrenderergetrenderoutput let mysidebar reactmodulepropschildren propschildren expect mysidebarpropsclassname toequal sidebar yep let mysidebars testutilsscryrendereddomcomponentswithclass reactmodule sidebar also tried reactmoduleinstance expect mysidebarslength toequal nope ca nt see info mentioned start issue missing end goal simply test pass articles components get rendered help would awesome", "d": "5/2015"}, {"body": "hi david functions meant used output shallow rendering react nt currently provide helper traverse trees options describe structure tree explicitly lines example write helper module find descendants care nt implemented yet refer docs section test utilities actually react", "d": "5/2015"}, {"body": "cool thanks reply graue returned using since components testing children nt statestores nt really need mocking anyway one last maybe stupid question mean", "d": "5/2015"}, {"body": "reactlink may sugar really dozens inputs form hundreds entire application makes noticeable difference jsx sugar really important tool productivity readability compare said taking reactlink core syntax nt explode like example", "d": "5/2015"}, {"body": "tobia like mention wrap component provide functionality ifwhen dropped react would certainly provide wrappers outofthebox addons would nt really special anything ca nt already", "d": "5/2015"}, {"body": "kind interesting tholman investigating today discovered use element contains items showing momentum scrolling works eg \u30c4", "d": "5/2015"}, {"body": "mjackson interesting indeed thanks heads figured way around yet metal definitely react bug closing issue", "d": "5/2015"}, {"body": "hi edmspjp issue seems add dangerouslysetinnerhtml tag still problem take whole svg tag dangerouslysetinnerhtml attr parent tag works sure met problem html var svgtag", "d": "5/2015"}, {"body": "merging discussion", "d": "5/2015"}, {"body": "bump specify absence property explicit per property eg func would prefer specify noop string might want either null empty string number may even want specify nan absence easily possible getdefaultprops nt trigger default suddenly use defensive programming throughout components null complicated language feature semantics around need made clear debugging null getdefaultprops specified pain point especially nt full control data source would prefer see become clear explicit behaviour per property minimal boilerplate clear semantics getdefaultprops triggered default prop nt match type validated", "d": "5/2015"}, {"body": "bit different scenario anyone finds useful wanted null default prop null passed null gets used rather default prop makes sense since null undefined value get default value following explicitly send undefined url null", "d": "5/2015"}, {"body": "usecases presented pretty sure could replace visual output would without introducing practical technical issues related components fragments root", "d": "5/2015"}, {"body": "syranide every time one components changes siblings need recalculating", "d": "5/2015"}, {"body": "also use plain coffeescript easy return array please decouple functionality jsx representation iow easy handle returned array elements nt wait jsx catch", "d": "5/2015"}, {"body": "syranide every time one components changes siblings need recalculating wmertens yes many times would anyway parent would need rerender reasons simply receive data props anyway yes difference nt mean approach right optimization many ways accomplish also use plain coffeescript easy return array please decouple functionality jsx representation irrelevant problem jsx big issue lose technical practical intuitive assumption one component one elementnode ca nt speak devs would give willingly useful assumption sure equally good better optimizations could designed optimization reason people want", "d": "5/2015"}, {"body": "syranide biggest problem ca nt always use wrapping element html like tables lists flexbox head working around leads ugly code would perfectly happy virtual wrapper element renders comments suggested fri may pm andreas svensson notifications githubcom wrote syranide every time one components changes siblings need recalculating wmertens yes many times would anyway parent would need rerender reasons simply receive data props anyway yes difference nt mean approach right optimization many ways accomplish also use plain coffeescript easy return array please decouple functionality jsx representation irrelevant problem jsx big issue lose technical practical intuitive assumption one component one elementnode ca nt speak devs would give willingly useful assumption sure equally good better optimizations could design optimization reason people want reply email directly view github", "d": "5/2015"}, {"body": "oy issue well annoying pass function ref never gets called either transition group totally dropping refs bummer actually huge problem using ref execute animation think issue reopened", "d": "5/2015"}, {"body": "ryanseddon solution longer seems work change attribute get following error love workaround makes impossible distribute js library uses react", "d": "5/2015"}, {"body": "critical use case company working", "d": "5/2015"}, {"body": "tried need update attribute require react nt throw works expected", "d": "5/2015"}, {"body": "ryanseddon trick note really make sure monkeypatching code else things break first place may expect wound making little shim replaced statements", "d": "5/2015"}, {"body": "clear using internals using risk going close anyone knows specific internal like expose please follow separate issue", "d": "5/2015"}, {"body": "spicyj place read final direction topic like current code handle components composition exporting allows extend components way react using nowadays code anyway could copypaste code utility file projects want know next steps thanks lot time", "d": "5/2015"}, {"body": "best simplify react core much possible case includes slowly moving away reactcreateclass towards classes planning add helpers making classes say easily reimplement functionality need", "d": "5/2015"}, {"body": "dendril example reimplementing mixins outside react basically constructor prototype pretty much anything want whether wrapping another component extending mixins traits anything else another issue hinted towards wrapping high order components way go experience works well", "d": "5/2015"}, {"body": "dendril jquense another option would move away classes current limitations entirely take advantage power flexibility prototypal inheritance react version ericelliott stampit reactstampit", "d": "5/2015"}, {"body": "also working stampbased tooling react components currently experimenting private repo looks promising long react maintains support factory functions simple objects nt anything explicitly requires keyword continue many options available compose extend functionality react components without specialized mixin method right simple using lodashobjectassign etc", "d": "5/2015"}, {"body": "ericelliott checking stampit want switch completely release nt want include mout lodash projects saw good progress migration hope could released soon smile thanks everyone feedback", "d": "5/2015"}, {"body": "super annoying think ought work well", "d": "5/2015"}, {"body": "full svg support happens need way create custom tags attributes anyone please help", "d": "5/2015"}, {"body": "marker element also missing", "d": "5/2015"}, {"body": "ersagunkuruca try meantime", "d": "5/2015"}, {"body": "gave look", "d": "5/2015"}, {"body": "sorry replying longclosed issue testutilsinproduction kind need watermark overlay rendered topmost page displays current loggedin user name preventing capture webpage leaking sensitive data advanced browsers watermark overlay set ie must simulate event order mimic event pass makes sense option compiling react source production include testutils", "d": "5/2015"}, {"body": "jasonslyvia testutils intended internal testing therefore internal api recommend call internal apis especially production supportedstableoptimizedetc going publish builds expose internal api nothing stops checking code building changesmodules super familiar browser event system think achieve goal temporarily disabling watermark emitting click event people need public api interfacing react event system might consider creating task api see rally support guess simulating click events something better left browser existing apis side note absolutely trivial open chrome tools firefoxwhatever remove watermark dom trivial even without disableenable functions proposed anyone capable enough take capture webpage almost certainly capable enough remove watermark capturing little worried attempt security bit missguided different discussion", "d": "5/2015"}, {"body": "thank kind reply jimfb know security concern implemented frontend sort trivial code runs client side let leave alone usefulness watermark actually use jquery method achieve goal comes mind jquery way nt work circumstances instance single tag descendant responding event using jquery trigger nt call however achieve goal since nt dive react event system totally lost behaviour turn let know demo jsfiddle needed", "d": "5/2015"}, {"body": "hi encountered issue well still happens jsfiddle native html vanilla js jsfiddle react select radio select one already selected idea fixed forces us abort onchange radio selected value ugly", "d": "5/2015"}, {"body": "problem repros see", "d": "5/2015"}, {"body": "petilon seems work move event handler inside component see example", "d": "5/2015"}, {"body": "macqm moving event handler jsx file option event handlers controllers models etc need ts typescript files view jsx seems like serious bug facebook nt completely fixed year", "d": "5/2015"}, {"body": "petilon aside fact still issue fix seems like code work say view jsx file would argue handling click event definitely something belongs view reacting ui element action perhaps good solution add another event component something like handle controllers would fired inside onclick jsx handler passed prop way may trigger business logic controller clicks key downs etc", "d": "5/2015"}, {"body": "macqm thank suggestion people would argue handling events changing view response controller responsibility nt philosophical issue practical point view makes sense move much code possible ts files typescript perform error checking note flow nt available windows nevertheless idea useful temporary workaround thank", "d": "5/2015"}, {"body": "error message caused number things mentioned comments many due invalid nesting warning master petilon specific issue mention tracking going close issue anyone encounters error new cause please open specific issues", "d": "5/2015"}, {"body": "spicyj yeah agree", "d": "5/2015"}, {"body": "hi zpao still radar", "d": "5/2015"}, {"body": "still radar pretty low priority interested see could revived chenglou context nt quite follow think memory tradeoffs", "d": "5/2015"}, {"body": "yeah pretty lowpriority think allocation necessary one hottest code paths react sure relevant still bit bothersome intricacies camelcasing data sure whether makes sense aria fixed list attributes seems weird start grouping people rarely use react maybe", "d": "5/2015"}, {"body": "people rarely use data react maybe written ton react code year nt remember ever using maybe point making easier", "d": "5/2015"}, {"body": "regardless whether rarely used think taking object like correct approach representation js really prefixed attributes seems like would detrimental part object", "d": "5/2015"}, {"body": "use case using data attributes various tracking libraries use applications libraries look attributes amp set listeners wanted able pass object eg jsx example thispropsdata trackaction click tracklocation basket would render current workaround reactdataattributesmixin might missing something obvious could using instead", "d": "5/2015"}, {"body": "jackdcrawford work fine", "d": "5/2015"}, {"body": "syranide", "d": "5/2015"}, {"body": "take thread currently impossible simulate events subcomponents react using able get work top level component soon want nested component get error yanns eg fails js test testutilssimulateclick componentrefsbargetdomnode component error works js test testutilssimulateclick componentgetdomnode component", "d": "5/2015"}, {"body": "nt necessarily like since hacky chance collisions multiple instances page set state component random id use javascript getinitalstate function return id mathfloor mathrandom getid function name return name thisstateid render function return", "d": "5/2015"}, {"body": "came across problem writing flux application updated local state dispatched action update store local state update caused rerender still used current old value store thus changed dom moved cursor stack overflow answer helped understand going thought reference since first result found google nt quite help understand going", "d": "5/2015"}, {"body": "curious", "d": "5/2015"}, {"body": "example actual code direct assignment like suggested", "d": "5/2015"}, {"body": "ah ok thanks", "d": "5/2015"}, {"body": "movement", "d": "5/2015"}, {"body": "movement though already require builds reactdist zpao mentioned", "d": "5/2015"}, {"body": "function returns react children recursively need collecting adjusting form data submit", "d": "5/2015"}, {"body": "fyi using immutable objects react components created following npm package give reactlink support binding nested properties reactlinkimmutable", "d": "5/2015"}, {"body": "hello staggering animations supported latest version react clear thread one go create staggering animations using reacttransitiongroup api thanks", "d": "5/2015"}, {"body": "pomax implemented component relies bit reactdom event handling rather assumptions component tree generally favor components mixins react", "d": "5/2015"}, {"body": "prefer complete opposite desire see things like following need reasonably functional component actual content mixins solve horrible xml hell using js syntax already use functionality letting us say feels much better since behaviour tied component tied functions effect behaviour mixins make far sense provided real mixins nt tie react lifecycle functions mixins plain functionality require plain old way", "d": "5/2015"}, {"body": "hisher consider mixins inheritance general used sparingly especially typeunsafe language like javascript composition almost always better imo may pm mike kamermans notifications githubcom wrote prefer complete opposite desire see things like following need reasonably functional component actual content mixins solve horrible xml hell letting say reactcreateclass mixins require require render return content spam around feels much better reply email directly view github", "d": "5/2015"}, {"body": "reactcloneelement seems solved", "d": "5/2015"}, {"body": "nt solution adding ref element string ref otherwise yes", "d": "5/2015"}, {"body": "know old issue similar problem came across found problem occurs add property react component containing property seem work reproducibly whereas seems think could related react diffing algorithm might properly treat component statement component gets rerendered multiple times different inner content posting case people issue stumble upon", "d": "5/2015"}, {"body": "thx adewes saved day", "d": "5/2015"}, {"body": "seems like issue back adewes thanks solves problem", "d": "5/2015"}, {"body": "adewes cdujeu lezuse post simple repro case showing broken behavior happy take look fixing", "d": "5/2015"}, {"body": "took repro go ugly demonstrates issue well", "d": "5/2015"}, {"body": "lezuse thanks issue fix currently using key workaround fine see fix sometime", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "", "d": "5/2015"}, {"body": "jordwalke zpao jsdoc nt think jsdoc solution nt like jsx time code jsx check revolunet check good environment setup using yuidoc jsdoc nt support jsx right yuidoc nt like much alternative tags react example states yuidoc nt state tag yet", "d": "5/2015"}, {"body": "thanks yordis check", "d": "5/2015"}, {"body": "would resolve issue struggling see details", "d": "5/2015"}, {"body": "think part makes inherently confusing many consumers state render flushing state mutations frame animation effectively means state know render even though render supposed pure function taking state one inputs render output always represents snapshot time anyway mutating state frame animation along way state update nt affect render stands state mutation render tied together nt immediately obvious anyone nt read docs would also argue much less useful tied together", "d": "5/2015"}]