[{"title": "production development deadcode generated library", "body": "browsing code saw lot code like basically dead code major issue could help optimise size output standalone library remove definitely dead code knowledge manage source code sounds like instead preprocess approach", "num": "1629", "d": "5/2014"}, {"title": "component instance invalid mountingrendering string", "body": "simple unit test example worked react nt js var react require react var componentclass reactcreateclass render function return reactdomspan null nada describe foo function bar function var componentinstance componentclass react components need rendered mount reactrendercomponenttostring componentinstance componentinstancesetstate name john throws two errors ran invalid access component property setstate unknown top level see use static method instead typesetstate stacktrace referenceerror document defined getactiveelement reactreconciletransactionreactinputselectiongetselectioninformation reactreconciletransactionmixininitializeall reactreconciletransactionmixinperform reactcomponentmixinperformupdateifnecessary reactcompositecomponentmixinperformupdateifnecessary objectenqueueupdate reactcompositecomponentmixinreplacestate reactcompositecomponentmixinsetstate fnreactmembranefunction else access instance methods rendercomponenttostring returns string required", "num": "1628", "d": "5/2014"}, {"title": "props variable instead literal objects causes problem", "body": "following code causes two shown bbbbbb instead aaabbb one would expect replaced object literal component rendered correctly", "num": "1626", "d": "5/2014"}, {"title": "references elements nt work testutils", "body": "testcoffee using jest field testutilsfindrendereddomcomponentwithclass fanroot tapartistfield testutilssimulatefocus field testutilssimulatekeyup field key componentcoffee updatesearch gt searchterm refssearchfieldgetdomnode valuetrim tolowercase searchterm documentgetelementbyid searchfield valuetrim tolowercase searchterm render gt reactdominput classname formcontrol tapartistfield type text ref searchfield id searchfield onfocus startsearching onblur stopsearching onkeyup updatesearch test call focus works fine separately tested behaves expected call keyup throws happens either value commented fixed string issues either commented version works browser", "num": "1625", "d": "5/2014"}, {"title": "tapeventplugin dependencies calculated module loading time", "body": "tapeventplugin var dependencies topleveltypestopmousedown topleveltypestopmousemove topleveltypestopmouseup eventpluginutilsusetouchevents dependenciespush topleveltypestoptouchcancel topleveltypestoptouchend topleveltypestoptouchstart topleveltypestoptouchmove top level since usetouchevents wo nt set true require time even set true user code runs touch events never bound super high priority nt actually supportadvertise tapeventplugin yet would nice worked merging thanks ryanseddon reporting", "num": "1619", "d": "5/2014"}, {"title": "data binding nonstring values cause update html even value html", "body": "jsfiddle edit second input text cursor end input value gets unnecessary updated expect second input behaving exactly first storing number string state fixes problem convenient since need convert back number math", "num": "1618", "d": "5/2014"}, {"title": "allow overriding nonlifecycle component methods using mixin", "body": "like able override nonlifecycle component method without react throwing something like js var mymixin somemethod function default behavior var mycomponent mixins mymixin somemethod function needstooverridemixinbehavior override mixin behavior else mymixinsomemethodapply arguments ideally would eventually doable using sort hierarchy system possibly want ability override mixin method", "num": "1617", "d": "5/2014"}, {"title": "add findscry id test utils", "body": "testutils currently variant nothing like functionality would make testing lot easier", "num": "1616", "d": "5/2014"}, {"title": "addonsupdate directive precedence order", "body": "js var anarray reactaddonsupdate anarray set set push p u h unshift u n h f splice splice slice dice result splice slice dice set h n u p u h sane ordering handling directives never want recurse something already ed ed otherwise would included changes directives arguments originally think natural expectation would update recurse existing elements indices original array splice directive new elements ensure appear ends resulting array like certain cases programmer would introduce difficulttovisuallyinspect indextwiddling logic split changes among multiple calls produce desired result tests nt include cases multiple directives appear single value sure whether intentional whether anybody depends behavior especially dealing trees form current behavior really nt allow visual clarity makes helpful trees composed entirely objects", "num": "1615", "d": "5/2014"}, {"title": "warn reordering nodes moved outside react", "body": "moveexisting update type would nice domchildrenoperations checked warned child finds nt expected node", "num": "1610", "d": "5/2014"}, {"title": "pull reactaddonstestutils bower", "body": "lot browser based testing w karma love quick easy way pull testing tools without npm possible something today something could optin future workaround get today thanks advance", "num": "1607", "d": "5/2014"}, {"title": "documentation update required", "body": "component specifications documentation following note must added method update component state method using callback provided second argument methods invoked immediately may want shift callback", "num": "1606", "d": "5/2014"}, {"title": "changes classname path inside svg element working", "body": "draw svg path element classname setted state render change state event result redraw svgpath element expected result path new classname working result component redrawn classname path nt change example full source code example working html css js", "num": "1605", "d": "5/2014"}, {"title": "events binded", "body": "hey working react app quite big use backbonemodel react views backbonemodel attributes update call thisforceupdate react component sometime time events binded clicking wo nt anything sure happening see dom reactid sure start anyone experienced", "num": "1604", "d": "5/2014"}, {"title": "learnjson missing todomvcflux", "body": "referenced got", "num": "1603", "d": "5/2014"}, {"title": "following update", "body": "confused following behavior example takes prop first renders clicking gives us seems right clicking rerender everything clicking gives us realusecase context gave errors accessing pass thirdparty library displaying popup menu around given node given child responsible knowing popup logic instead sole purpose show contextual menu location given component pasting live jsx editor work believe seeing behavior general accessing ref", "num": "1602", "d": "5/2014"}, {"title": "event handler context using transferpropsto", "body": "hello sure bug feature set react components share behaviour events created mixin used getdefaultpropstransferpropsto methods share functionality js var highlight getdefaultprops function return onmouseover thishighlight highlight function consolelog lt window unhighlight function consolelog lt paragraph component var paragraph reactcreateclass mixins highlight render function return thistransferpropsto see adding event jsx local scope event callback binded component using getdefaultprops points window workaround obviously rebind scope manually wondering behaviour getdefaultpropstransferpropsto constant setting properties jsx maybe better way inherit event handlers components altogether js fiddle example code thanks advance daniel", "num": "1595", "d": "5/2014"}, {"title": "renderedchildren get sync dom render throws", "body": "reactmultichild nt properly handle errors thrown rendering children one child throws children updated time inconsistent values stored renderedchildren cause problems future updates unclear best way solve", "num": "1593", "d": "5/2014"}, {"title": "warning calling thisgetdomnode via reacttestutils", "body": "several people came jestjs irc asking thisgetdomnode returned null reason mounted reacttestutils maybe add warning case", "num": "1592", "d": "5/2014"}, {"title": "npm install fails", "body": "latest nodenpm git clone npm install gives npm http get npm http npm err error compatible version found commoner npm err valid install targets npm err npm err installtargetserror c program filesnodejsnodemodulesnpmli", "num": "1591", "d": "5/2014"}, {"title": "apply component spec mixins specs deterministically", "body": "right nt consistently could behavior varies depending put key class spec great example using master js var mixin componentdidmount function consolelog mixin var compa reactcreateclass mixins mixin componentdidmount function consolelog compa render function return var compb reactcreateclass componentdidmount function consolelog compb mixins mixin render function return b outputs think consistently behave like compb component mixin methods yungsters disagrees opinions petehunt sebmarkbage jordwalke potentially interested gaearon figure way go relatively contained testable take right core", "num": "1589", "d": "5/2014"}, {"title": "able mixin defined mixin", "body": "imho would useful able define per ie sometimes mixincode may rely methods defined mixesin case would make sense combinemixin defined included think", "num": "1588", "d": "5/2014"}, {"title": "feature request warn property proptypes passed component", "body": "would great debug mode react would warn pass property props specified proptypes object component ie way enforce props props specified proptypes others would prevent use undocumented properties also allow better code maintenance unused props would easily removed", "num": "1587", "d": "5/2014"}, {"title": "svg dx dy attributes work", "body": "", "num": "1586", "d": "5/2014"}, {"title": "add apply function directive immutability helpers", "body": "apply directive apply function part data structure replace returned result var mydata b function increment x return x var newdata reactaddonsupdate mydata b apply increment newdata b", "num": "1585", "d": "5/2014"}, {"title": "parse error confusing trying return two elements", "body": "opening esprimafb apparently nt accept issues write get unexpected identifier tries parse second div interpreted less think give nicer errors disallow less operator directly xjselement nt think prevents real uses could always wrap parens cc jeffmo syranide", "num": "1584", "d": "5/2014"}, {"title": "warn using proptypesinstanceof incorrectly", "body": "someone wrote instead would nice could give sort warning sure possible though cc zgotsch", "num": "1582", "d": "5/2014"}, {"title": "feature request commandmergeset", "body": "think ability merge set immutability helpers target undefined would nice addition open pr sounds reasonable", "num": "1581", "d": "5/2014"}, {"title": "setstate componentwillreceiveprops update state callback", "body": "example jsfiddle far understand proper behavior", "num": "1580", "d": "5/2014"}, {"title": "svg dy attribute ignored", "body": "rendering element attribute react actually render element simply ignored repro", "num": "1573", "d": "5/2014"}, {"title": "dangerouslyreplacenodewithmarkupbyid uses getnode unmountedpurged id", "body": "calls id unmounted purged sebmarkbage spicyj indicated working refactor perhaps already fixed ps really sure fix without taking big hammer", "num": "1569", "d": "5/2014"}, {"title": "un mountcomponent seems behave improperly root component update", "body": "logging reveals nt make sense least var container documentcreateelement div var mockcomponent reactcreateclass render function return var wrappercomponent reactcreateclass render function return thispropschildren reactrendercomponent container reactrendercomponent container", "num": "1567", "d": "5/2014"}, {"title": "context maintained rendering thispropschildren", "body": "following snippet code var reactcreateclass childcontexttypes x reactproptypesstring getchildcontext function return x render function thispropschildren return propschildren thispropschildren else return regular var b reactcreateclass contexttypes x reactproptypesstring render function return x thiscontextx reactrendercomponent output", "num": "1562", "d": "5/2014"}, {"title": "create test suite public api", "body": "like test suite tests public api contrast existing unit tests test internal modules test suite comprehensive enough allow us feel confident making breaking changes accidentally unlike current tests frequently change refactors would nt change tests except conjunction major release since tests would use public api could also run closure advanced mode verify everything works properly", "num": "1555", "d": "5/2014"}, {"title": "losing control", "body": "example start typing numbers nonnumber character wont update input field expected start typing nonnumber character first though seems input field becomes uncontrolled starts excepting anything type onchange nt fired anymore", "num": "1549", "d": "5/2014"}, {"title": "onclick called immediately page load", "body": "load page last event module triggered immediately example executed fix sidebarjs js module dependencies var react require react var router require page component moduleexports reactcreateclass displayname sidebar render function return reactdomaside classname sidebar reactdomul classname sidebarindex reactdomli null guide reactdomul null reactdomli null reactdoma href ux onclick handleclick ux ux reactdomul null reactdomli null reactdoma href visual onclick handleclick visual visual reactdomul null reactdomli null reactdoma href code onclick handleclick code code handle click param string url api private function handleclick url router url", "num": "1546", "d": "5/2014"}, {"title": "escaping curly brackets", "body": "thanks react jsx would possible escape curly brackets future like jsx use characters escape evaluate inline javascript", "num": "1545", "d": "5/2014"}, {"title": "evaluation escapes comments", "body": "hi thanks great work react jsx problem jsx comments containing curly brackets evaluated jsx even though writing consider comment literals jsx escape characters thisstatevalue example comment block evaluated", "num": "1544", "d": "5/2014"}, {"title": "transitionend called tab backgrounded", "body": "using background tab transition happens warning actually adding transition group displayed console transition tried perform animation without animationend transitionend event timeout either disable transition js add css animationtransition created reproducible version believe due bug pretty much modern browsers events emitted tabs backgrounded said figured worth bringing see react could something thoughts", "num": "1541", "d": "5/2014"}, {"title": "ca nt sudo npm install g reacttools", "body": "one dependencies reacttools esprimafb invalid version string blocks installing reacttools relevant error npm http npm err error invalid version npm err validversion npm err final npm err npm err cb npm err npm err npm err npm err objectoncomplete adittionally downloaded esprimafb package edited version string installed tarball correctly npm wants redownload thank", "num": "1538", "d": "5/2014"}, {"title": "tag attribute patternunits supported", "body": "really useful svg patterns nt appear transferred dom render component uses given following sample svg result display scan line pattern demonstrated raw svg however nt happen patternunits attribute never transferred note missing attribute within result executing svg markup", "num": "1535", "d": "5/2014"}, {"title": "distinguish svg tag head tag", "body": "per spec see link svg element may contain title element used display tooltip like title attribute html elements however react seems think title tag would normally contained head rendering causes error uncaught error invariant violation reactfullpagecomponenttitle tried unmount crossbrowser quirks impossible unmount toplevel components eg reliably efficiently fix funnily enough suggested fix omitted", "num": "1534", "d": "5/2014"}, {"title": "possible issue reactaddonstestutilsfindrenderedcomponentwithtype scryrenderedcomponentswithtype", "body": "sure bug documentation issue ran problem using findrenderedcomponentwithtype scryrenderedcomponentswithtype methods work fine reactdom except reactdomspan reactdomdiv may others nt work expected instances run describe reactaddonstestutils function using following react karma karmajasmine karmaphantomjslauncher karmareactjsxpreprocessor", "num": "1533", "d": "5/2014"}, {"title": "incorrect api documentation bug reactaddonstestutilssimulate", "body": "according reactaddonssimulate eventname reactcomponentdomelement element object eventdata able accept reactcomponent dom element wrote simple test fails reactcomponent passsed simulateclick bug invalid documentation please see describe reactaddonstestutilssimulateclick function using following react karma karmajasmine karmaphantomjslauncher karmareactjsxpreprocessor", "num": "1532", "d": "5/2014"}, {"title": "make jsxtransformer use async xhr", "body": "lazy used sync xhr make sure multiple scripts still executed right order however getting warning console firefox nightly says sync xhr deprecated synchronous xmlhttprequest main thread deprecated detrimental effects end user experience help let preemptive build minimal work switch async xhr ensure still process scripts order", "num": "1530", "d": "5/2014"}, {"title": "html jsx converter nt correctly parse classname parameter tag", "body": "visit paste live jsx editor observe conversion expected result classname still classname conversion actual result classname converted classname invalid jsx", "num": "1529", "d": "5/2014"}, {"title": "disabled reactdombutton stop user input", "body": "nt include touchevents etc", "num": "1527", "d": "5/2014"}, {"title": "add support strokedasharray", "body": "nt work tried set list supported svg attributes adding would nice", "num": "1524", "d": "5/2014"}, {"title": "add support head prefix attribute", "body": "hi guys since facebook using attribute element declare open graph namespace could add list supported attributes would useful generating templates see link details", "num": "1523", "d": "5/2014"}, {"title": "transferring props parent automatically", "body": "would nice component could declare property state transferred automatically parent property component example couple components inside form require transferring properties forced repeat properties many times would like hide represent kind internal details relation child parent would like able thanks could write stumbled across problem times already think requirement nt violate react data flow rules simply helps avoid boilerplate wonder react authors problem planning implement something like", "num": "1521", "d": "5/2014"}, {"title": "using routes server rendering", "body": "could please show example using flux routing say data store domain means route data store event helpers mean use router script dispatch actions route change case server side routing yes know speak client side apps react designd also server rendered possible use kind flux code server case want add server rendering seo purposes", "num": "1519", "d": "5/2014"}, {"title": "click event nt bubble outside svg", "body": "im something like div span text clicking triggers however svg never gets triggered", "num": "1509", "d": "5/2014"}, {"title": "provide build required polyfills separate reactpolyfillsjs", "body": "right somewhere buried react site list polyfills react requires links project intermingled bunch others would nice react optionally shipped polyfills polyfills needs function would make easier people fall pit success build browsercompatible react sites also would save bunch work every time start new project", "num": "1507", "d": "5/2014"}, {"title": "setprops update inline styles", "body": "settings props component update style attributes following jsfiddle example clicking link updates two props height amp name see name updated dom minheight remains", "num": "1506", "d": "5/2014"}, {"title": "uglify dev dependency todomvcflux", "body": "uglifyjs working npm build work well", "num": "1505", "d": "5/2014"}, {"title": "componentdidmount setstate two valid unequal nodes", "body": "kind related long debugging session irc turned issue moving solved assuming boiled version", "num": "1501", "d": "5/2014"}, {"title": "transitiongroup low level api available using csstransitiongroup", "body": "hi low level api available using csstransitiongroup none methods called componentwillenter componentdidenter componentwillleave componentdidleave intended check fiddle", "num": "1497", "d": "5/2014"}, {"title": "fail travis phantomjs", "body": "sauce setup nt reliable enough depend strong signal example failed though tests passed phantom", "num": "1496", "d": "5/2014"}, {"title": "reactemptycomponent errors", "body": "know previously switched unreliable seems suffer similar issues repro went different elements etc none seems work seemingly best alternative seems especially since already kind special react ie react wrap text great", "num": "1494", "d": "5/2014"}, {"title": "updating manyitem singleitem array rerender forced although item key nt changed", "body": "consider usually respected case elements nt get unmounted remounted unnecessarily match subsequent calls however elements one removed react reason nt realize component nt changed forces dom node update tried setting breakpoint inside debug issue looks like name slightly different one case includes leading nt anyway workaround curiously returning array one item rendering case react able understand component nt force unnecessary rerender sorry providing workable fiddle hosts old version react live go sleep fairly simple reproduce unless already fixed", "num": "1493", "d": "5/2014"}, {"title": "reacttransitiongroup requires key fire hooks", "body": "lists pretty obvious need set keys reacttransitiongroup single child node obvious key needed mentioned docs either documentation issue code issue opinion would intuitive key optional reacttransitiongroup single child least would nice throws warning jsxtransformation", "num": "1488", "d": "5/2014"}, {"title": "html rendered til", "body": "particular problem rendering html delayed animation happens browsers tested android webview ios chrome mac safari mac acts container pages every li represents page overflow property set hidden see one page time want transition new page set correct value along transitionduration property slides new page view funny thing new page nt rendered transition finished slides white page animation done view displayed see html inserted transition seems delaying rendering new element transition done also tried updateing property insert new element view rendered halfway animation remove transitionduration property course animation element rendered instantly way solve anyone experienced something similar example code", "num": "1485", "d": "5/2014"}, {"title": "defaultvalue state popualted via ajax call", "body": "code consolelog prints fine defaultvalue getting populated probably react already mounted component ajax call way populate defaultvalues server", "num": "1484", "d": "5/2014"}, {"title": "envify peerdependencies complicates use node", "body": "package uses packagejson envify use instead adoption low debated whether kept node browserifycdn tool requirebin uses requirebin nifty tool building modular examples sharing would like use react browserifycdn nt work well peerdependencies would extra work make work anyone building similar tool might extra work well would much like node packages designed used clientside rely peerdependencies", "num": "1482", "d": "5/2014"}, {"title": "minified react w addons expose testutils", "body": "minification may overmangled something current minified w addons website expose addons", "num": "1481", "d": "5/2014"}, {"title": "transitionleave false properly bypass need transition leave animation", "body": "docs state reactcsstransitiongroup keeps dom elements page animation completes thus necessitating leave transition want enter animation leave animation specify however dom elements still seem stick around occasionally throw transitionend warning even using repro case steps reproduce click add three components page click remove added components notice elements staying page instead removing expected remove jsx supplied leave transition runs removal works expected undesired leave animation occurs css transitions keyframe animations change workaround remove use leave transition disclaimer workaround nt seem bullet proof least complex view creating handful additionsremovals perhaps fairly rapidly produce transitionend warning leaving elements ui", "num": "1478", "d": "5/2014"}, {"title": "missing yield generator error jsx", "body": "upgrade newer version esprimafb removes error work around putting yield return works", "num": "1475", "d": "5/2014"}, {"title": "thinking react code examples broken", "body": "page jsfiddle based code samples missing see empty block instead note go bit json example graphic working jsfiddle js code samples nt fedora linux ff chrome tested android mobile phone chrome yesterday fiddles desktop yesterday today open fiddle mentioned page hand get page turn firebug get following errors chrome dev tools seem relevant form content security policy kicking nt kicking others phone see also closed issue", "num": "1472", "d": "5/2014"}, {"title": "onchange handler radio buttons fire according spec", "body": "described onchange handler input fire checked state changes however actually fires radio button clicked words fails fire checked radio button unchecked checking different radio button fires even without state change checked radio button clicked short missing checked transtions true false reporting spurious transitions true true", "num": "1471", "d": "5/2014"}, {"body": "currently stripped uglify build step think meaning devversion still since true still want code inside branches considering dev version may preferable keep asis make easier correlate source really matters either way", "d": "5/2014"}, {"body": "ok fair enough noticed behavior provided envify removed final production version definitely ok closing issue", "d": "5/2014"}, {"body": "ca nt setstate conjunction server rendering variable merely describes component instance mount instance setstate nt work nt way get component instance using server rendering want change state get new html string probably instead refactor logic props determine component shows rather state pass new descriptor rendercomponenttostring", "d": "5/2014"}, {"body": "think andreypopp reported sure another issue open", "d": "5/2014"}, {"body": "yep irc nt create issue", "d": "5/2014"}, {"body": "related pr think saw reverted afterwards", "d": "5/2014"}, {"body": "made slightly different issue", "d": "5/2014"}, {"body": "hm see factory descriptors mutates assigning", "d": "5/2014"}, {"body": "also experiencing master", "d": "5/2014"}, {"body": "nice stepped code saw", "d": "5/2014"}, {"body": "explicitly converting values strings would solve problem wondering makes sense seamlessly react", "d": "5/2014"}, {"body": "fixes", "d": "5/2014"}, {"body": "cc sebmarkbage", "d": "5/2014"}, {"body": "think simple helper fullblown class inheritancecomposition framework mixins nt work case simply modify reactcreateclass object whatever way feel like set limits ps also whenever lands", "d": "5/2014"}, {"body": "part future proposal highly discourage use inheritance way provide extensions composition powerful pattern code reuse", "d": "5/2014"}, {"body": "first instinct would say use exactly one directive nested updates", "d": "5/2014"}, {"body": "something fiddeling finished might interesting alternative avoids use directives favor regular manipulation", "d": "5/2014"}, {"body": "lots interest coming better user solutions problem right experimenting using json paths alternative example would set new value according existing path path exist possible build correct nodes object array according json schema available instead trying combine multiple update operations single line think best different mecanism batchingtransacting multiple operations desired", "d": "5/2014"}, {"body": "go check however remove pr dependency necessity validate nodes right type nt fewmany parent guess could also check parentnode indeed correct parent node ie node expected one", "d": "5/2014"}, {"body": "well perhaps could still check react node cache seen people get confused trying integrate react external sortable plugin plugin moves nodes around react ca nt find right ones", "d": "5/2014"}, {"body": "spicyj yeah definitely mentioned really given node nt cache evaluate usual expected children node types nt match including count order error default node cache tagged check parent make sure correct one nothing else think since elements would pretagged today", "d": "5/2014"}, {"body": "last time checked still place experimental features might get rolled core think pull", "d": "5/2014"}, {"body": "would need make call pulling library external repo", "d": "5/2014"}, {"body": "zpao autorisation create repo githubreactjs otherwise feel free submit pr", "d": "5/2014"}, {"body": "testutils currently tight integration react ca nt quite pulled sane way moving towards yet reactwithaddons separate build react distributed accessible going close better overall story pulling addons", "d": "5/2014"}, {"body": "thanks bower mention community followget touch follow testing progress big fan things testing like help bring learned ember community option", "d": "5/2014"}, {"body": "bug fixed docs update nt necessary", "d": "5/2014"}, {"body": "known bug prs open possible fixes like", "d": "5/2014"}, {"body": "nt heard anything like ca nt really help debug without information things consider clicks fail register events page work clicks fail work entire page load work intermittently single page load closing nt really actionable email group stack overflow would probably better place get help unless make small reproducible test case showing bug react", "d": "5/2014"}, {"body": "emroot safe side react listens events external event listener calls react wo nt receive", "d": "5/2014"}, {"body": "syranide def playing stoppropagation sure reproduce still happens randomly happened right trying debug reacttools chrome one tab bug clicking button wo nt anything one without though see listeners pages state however dig see inspector id value different click issue deleted screenshots since nt really public issue found without click issue deleted screenshots since nt really public issue found probably something wrong keep looking thanks responses code fyi", "d": "5/2014"}, {"body": "idea nt belong react least perhaps react dev tools adds anyway intuitively see two potential issues buttons stop working otherwise would assume stops working since send model props sure nt logic problem side prevents updating view try logging actual onclickhandler", "d": "5/2014"}, {"body": "yup buttons stop working higher component thisforceupdate model change triggered gon na try logging see", "d": "5/2014"}, {"body": "trying log onclick handle noticed nt call function wo nt output anything hum really helping guess haha", "d": "5/2014"}, {"body": "ok really weird assume public link could look perhaps", "d": "5/2014"}, {"body": "actually think found issue react related sorry use private bootstrap airbnb dropdownjs code happening click issue happening inside dropdowns think culprit", "d": "5/2014"}, {"body": "actually moved href inside dropdown drag drop console click work fine", "d": "5/2014"}, {"body": "yeah would problem react listens events external use prevents react seeing event would like react expose event handling manually subscribe element possible moment binding unbinding work though", "d": "5/2014"}, {"body": "awesome thanks tip", "d": "5/2014"}, {"body": "underscore front name suggests private react use code current way get reference mounted children instance use ref wrap another div hope helps", "d": "5/2014"}, {"body": "actually using example pinpoint problem inserting intermediate unfortunately violates assumptions eg css layout nt work svgs etc", "d": "5/2014"}, {"body": "sorry way right get ref children passed may possible using clonewithprops", "d": "5/2014"}, {"body": "thanks following actually following mentioning nt already get via following least seems work example coffeescript perhaps pitfalls using nt documented also random experimentation suggests least one way actually get dom node using passthrough component without extra coffeescript passthrough reactcreateclass render gt propschildren wrapper reactcreateclass render gt rdiv passthrough ref handle propschildren rbutton onclick gt consolelog refshandlegetdomnode inspect dom", "d": "5/2014"}, {"body": "ah yes right counts", "d": "5/2014"}, {"body": "straightforward solution would simply mark react unstable state simply shut would deterministic least seems like surgical tryfinally able take care issues would want keep hot code though probably could nt", "d": "5/2014"}, {"body": "would nice one misbehaving component nt break whole page guess careful make happen sure added tryfinally calls would significant cost hopefully though general case dom manipulation throw throw asynchronously think web workers error recovery might always possible", "d": "5/2014"}, {"body": "return null mounted reacttestutils nt make sense", "d": "5/2014"}, {"body": "case used original instance one returned", "d": "5/2014"}, {"body": "ignore", "d": "5/2014"}, {"body": "upgrade version", "d": "5/2014"}, {"body": "thanks much seems npm upgrade npm g nt work windows suspect nodejs msi reinstall update npm either deinstalled nodejs deleted things named node npm reinstalled nodejs get npm still get following nt seem fatal npm http get npm http npm warn optional dep failed continuing hawk npm err error enoent lstat f webreposothersreactnodemodulessaucetunne lnodemodulesrequestnodemodulesformdatanodemodulescombinedstreamtest npm err need help may report entire log thanks", "d": "5/2014"}, {"body": "sure deal run problems please report back", "d": "5/2014"}, {"body": "mixins first intuitive normally people write specs experience least", "d": "5/2014"}, {"body": "hi thanks mention like take nobody minds agree spicyj calling mixins first intuitive", "d": "5/2014"}, {"body": "gaearon go let know questions happy help", "d": "5/2014"}, {"body": "ok great try tomorrow", "d": "5/2014"}, {"body": "zpao spicyj mention something else take liked although task small scope introduced way actually works spec transforms component instance would cool could take small tasks areas rendering batching introduce areas", "d": "5/2014"}, {"body": "believe already happens let know nt", "d": "5/2014"}, {"body": "already", "d": "5/2014"}, {"body": "add emit console warning assume wanting use devonly behavior dev prod little weird", "d": "5/2014"}, {"body": "want sebmarkbage plans one idea recently bit tricky transferpropsto whatever instead might props need passed even nt consume eg renders want make even though nt explicitly say uses", "d": "5/2014"}, {"body": "syranide tangential discussion ultimately skip proptype checks prod slow perform every update ca nt use invariant different runtime behavior dev vs prod", "d": "5/2014"}, {"body": "convinced ca nt use invariant prop types dev especially given implementation warning aggressive", "d": "5/2014"}, {"body": "zpao spicyj tangential discussion agree state opinion agree different behavior dev prod bad warnings easily missed something nt provided error please tell nt see differently asserts usually shipped prod stops execution fail dev error exists dev nt really issue helpful error exists prod huge red flag", "d": "5/2014"}, {"body": "fixed unfortunately missed release", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "facebookesprima merged close version bump", "d": "5/2014"}, {"body": "sorry differ merge code example would helpful", "d": "5/2014"}, {"body": "heyo misread invariant thanks", "d": "5/2014"}, {"body": "oh man day misread invariant need caffeine example talking thinking adding directive thoughts", "d": "5/2014"}, {"body": "understand correctly want something like right", "d": "5/2014"}, {"body": "yes would one way get behavior thinking simply like replaced would handle use case well might bit flexible", "d": "5/2014"}, {"body": "problem nt really work intuitively use set primitives", "d": "5/2014"}, {"body": "problem seems called means callback executed immediately rather queued new state", "d": "5/2014"}, {"body": "fixes", "d": "5/2014"}, {"body": "merged work master", "d": "5/2014"}, {"body": "could add", "d": "5/2014"}, {"body": "note already present", "d": "5/2014"}, {"body": "hmm seems like probably master expecting error let em verify maybe already fixed", "d": "5/2014"}, {"body": "yes noticed otoh able reproduce issue master", "d": "5/2014"}, {"body": "ca nt quickly upgrade master tool seems drastically changed looks like code closing", "d": "5/2014"}, {"body": "added", "d": "5/2014"}, {"body": "less react think whitespace tool repo automatically upgrades files produce identical output newer versions", "d": "5/2014"}, {"body": "available npm", "d": "5/2014"}, {"body": "log thistypedisplayname something distinguish two rendercomponent calls", "d": "5/2014"}, {"body": "updated makes sense id sent wrong", "d": "5/2014"}, {"body": "believe intended context follows owner hierarchy meaning b get context nt create b", "d": "5/2014"}, {"body": "way overcome restriction whole context feature kind useless way di reliably", "d": "5/2014"}, {"body": "pass function create instead passing instantiated components prop", "d": "5/2014"}, {"body": "yeah noticed experimenting raw fields plain numbers value becomes go ahead recommend personal solution throw everything window implement less browser weirdness get style", "d": "5/2014"}, {"body": "syranide yeah planning side lose numeric keyboard mobile devices though", "d": "5/2014"}, {"body": "nonreact apps used successfully options caveats nt know pattern supported react though", "d": "5/2014"}, {"body": "jefffriesen supported also really good know thanks", "d": "5/2014"}, {"body": "without intending come across offensive misunderstood basic principle javascript always immediate functioncall ie sets return value really want return value new function called actually calls short replace", "d": "5/2014"}, {"body": "haha oh right silly thanks", "d": "5/2014"}, {"body": "bring valid issue escaping backslash would possible could introduce far serious issues actually want followed basically solution proper implementation would fully support escaping nt really mesh html imho simplest solution one pretty certain devs advocate well rather", "d": "5/2014"}, {"body": "yeah quoting plain js string way let us know poses problem somehow", "d": "5/2014"}, {"body": "hey spicyj sadly makes tags css blocks impossible embed jsx worked way around putting css property proof concept ish components", "d": "5/2014"}, {"body": "rickwong really want inline really nt recommend use instead define css string elsewhere", "d": "5/2014"}, {"body": "hehe inline makes component selfcontained almost comparable jsx inline html work around utilize optimal looks like crap instead template problem solution create tags invalidate css syntax", "d": "5/2014"}, {"body": "jsx ie inside tags support jsstyle comments treated inline text really equivalent jsx escape characters thisstatevalue", "d": "5/2014"}, {"body": "use javascript comments wrap comment curly braces jsx escape characters thisstatevalue", "d": "5/2014"}, {"body": "closing dupe", "d": "5/2014"}, {"body": "problem thanks reporting", "d": "5/2014"}, {"body": "upgrade npm error go away", "d": "5/2014"}, {"body": "yes fixed problem thank much", "d": "5/2014"}, {"body": "thanks closing dupe", "d": "5/2014"}, {"body": "ah yes searched first pardon git able work around wiring tooltips componentdidmountcomponentdidupdate looks nicer", "d": "5/2014"}, {"body": "problem thanks reporting", "d": "5/2014"}, {"body": "happens reactdominput secretly composite component instead pure dom component like div span unsure correct behavior benjamn sebmarkbage opinions", "d": "5/2014"}, {"body": "expected nt work currently closing dupe", "d": "5/2014"}, {"body": "thanks quick response perhaps api documentation clarified maybe signature certain cases reactcomponent valid param note included", "d": "5/2014"}, {"body": "good idea done", "d": "5/2014"}, {"body": "would nt actively mess expected behavior though ie scripts might longer loaded", "d": "5/2014"}, {"body": "jsx transformer scripts already loaded think using settimeout places code ka integrated properly build process necessary", "d": "5/2014"}, {"body": "yea already broken nothing could really worse", "d": "5/2014"}, {"body": "fixes", "d": "5/2014"}, {"body": "oops yeah weird", "d": "5/2014"}, {"body": "ah thought supported attributes converter would parse correctly", "d": "5/2014"}, {"body": "merges hmm think labeled little weirdly supposed paste html left ie see becomes jsx right think nt really make sense", "d": "5/2014"}, {"body": "issue partially supported jsx needed use converter check something large block markup correctly fixed problem spit aforementioned attribute nt supported", "d": "5/2014"}, {"body": "yea labeled weirdly pasting html left probably leave case intact unrecognized attributes cc", "d": "5/2014"}, {"body": "input field nt labelled live jsx editor initially built page guess recent change think issue classname attribute html jsx converter uses browser html parsing normalises case attributes could specialcase always gets changed alternatively use full proper html parser nt initially due time constraints", "d": "5/2014"}, {"body": "fail cc azich", "d": "5/2014"}, {"body": "never mind already master branch easy enough implement asyetunreleased fix end", "d": "5/2014"}, {"body": "understanding react actually bad idea consider component black box especially secretly reaches parent really nt reach parent additionally way reach parent also means ca nt easily use nt know previous state parent technically violate reacts flow rules violating flow rules react intended used verbosity actually feature makes obviously clear going allows intervene ever want work differently reuse components anyone look code understands ways ease pains though bunching relevant properties object pass components simply one nonblackbox property required control inputs readable extensible reusable required fix parentchild relationship another possibility contexts really documented yet think understand purpose correctly situations like also unless mistaken nt really propagate yet sure useful issue yet perhaps would possibly identical propsasobject solution", "d": "5/2014"}, {"body": "hi right meaning verbosity true someone else helpful understand going however perceive form textfield datefield etc one well documented library verbosity becomes annoying unwanted garbage remember change every time parent component changes internally heard somewhere contexts still nt know exactly could share link info grateful anyway still believe improving communication oneway course parent child necessary come better idea share naturally example one could satisfy nt hide anything shorter", "d": "5/2014"}, {"body": "question would following make sense usecase variation twoway binding could also implement twoway binding", "d": "5/2014"}, {"body": "real use case already something similar formfn function read set parent variables works wanted something shorter less verbose like previously proposed", "d": "5/2014"}, {"body": "hello try use undocumented child context childcontexttypesgetchildcontext inside parent contexttypes child level get data thiscontext childcontexttypes contexttypes proptypes", "d": "5/2014"}, {"body": "thank take look", "d": "5/2014"}, {"body": "closing context likely solve problem done", "d": "5/2014"}, {"body": "repro jsfiddle", "d": "5/2014"}, {"body": "ca nt repro", "d": "5/2014"}, {"body": "fond idea bundling though many reasons really useful able leave ugly workarounds past may write code needs reusable component ecosystem would affected would longer able rely shimsham fully available end people preemptively putting necessary shimsshams reusable component", "d": "5/2014"}, {"body": "probably dev build emit informative warning browser console shim required available", "d": "5/2014"}, {"body": "andreypopp", "d": "5/2014"}, {"body": "andreypopp", "d": "5/2014"}, {"body": "really", "d": "5/2014"}, {"body": "nt understand last comment jsfiddle using camelcased tried minheight still update clicking", "d": "5/2014"}, {"body": "minor nitpick think preferred way updating props calling node checked spicyj preferred way", "d": "5/2014"}, {"body": "replacing setprops setstate makes work", "d": "5/2014"}, {"body": "please nt call setstate outside component currently possible really private method state internal props external case height controlled state gets initial value props correct solution would use props specify getdefaultprops returns", "d": "5/2014"}, {"body": "specific post exact error message encountered", "d": "5/2014"}, {"body": "run got changing job pretty well", "d": "5/2014"}, {"body": "fix", "d": "5/2014"}, {"body": "guessing fixed", "d": "5/2014"}, {"body": "yes intended want control use reacttransitiongroup directly", "d": "5/2014"}, {"body": "would nice could fail tests actually fail time like seem often", "d": "5/2014"}, {"body": "cc chenglou", "d": "5/2014"}, {"body": "closed favor", "d": "5/2014"}, {"body": "ca nt immediately repro see source traverseallchildrenjs intent certainly treat single child array could post jsfiddle jsbin would helpful either case nt hard use nightly", "d": "5/2014"}, {"body": "tried repro ca nt however exists somewhat unintuitive problem wrap cases another array logic dictates result nt would assume problem seeing although thinking possible fix removing onechild specialcase react might unlikely", "d": "5/2014"}, {"body": "closing gaearon repro let know", "d": "5/2014"}, {"body": "syranide correct problem due nested array nt realize actually putting one array inside simplest repro repro exactly came problem accidentally introduced extra depth inner component one item special case broke spicyj design right makes sense taken account exactly depth inside array tried flatten arrays nested could clash maybe could document keys section immediately obvious work nested arrays depthposition matches exactly", "d": "5/2014"}, {"body": "gaearon yeah unfortunate sideeffect optimization component given one child points directly child given multiple children array children inorder optimization successfully reuse first child constructs node ids ignores outermost array one going one child many children nt affect id however probably imagine applied outermost array want arraydepth matter mentioned behaves differently even though logic says nt nt looked assume issue present afaik made intentional decision go way avoids unnecessary allocation cases single children makes behavior arrays objects children really rather unintuitive thinking problem briefly solution see keeping optimization would add simple logic detect entry goes component array array components vice versa updating id case currently feasible given another pr two might convinced would good idea", "d": "5/2014"}, {"body": "syranide sure understood correctly let rephrase react warn node definition jsx jumps levels like javascript render function var node useful cases novice user expect react understand node moved updown level whereas react nt support behavior would also catched previous use case different level nested arrays suggesting challenges make difficult implement potential false positives", "d": "5/2014"}, {"body": "gaearon keys react considered uniquereusable within container rendered inside etc see reused anywhere inside spot jump exists understanding things moving around without keys either reused destroyed put inside another div span array object unmounted destroyed new instance created mounted new place keyless components react given implicit key equal index among children parent meaning see none two components reused rendered next time since keys index changed destroyed recreated looking data exists information suggest related switch places", "d": "5/2014"}, {"body": "syranide see limitations current implementation prs seen trying change react finds node component plan get rid would eventually help reconciler understand node moved kind prs necessary solve would awesome react warned also recognized move updown arraycontainer valid operation", "d": "5/2014"}, {"body": "gaearon think misunderstood intent described flaw react designed related say relation inferred derived data contained within previous next snapshot hierarchy react sees nt explicitly add descriptor react explicitly set index component among children behavioraly identical considering render following next would behaviorally identical given snapshot previous next hierarchy react sees following happen destroyed exist next reused exists prev next created exist prev dealing nesting react sees following", "d": "5/2014"}, {"body": "syranide ah okay misunderstood paragraph elaborate thinking problem briefly solution see keeping optimization would add simple logic detect entry goes component array array components vice versa updating id case currently feasible given another pr two might convinced would good idea still questions relation inferred derived data contained within previous next snapshot hierarchy react sees risk suggesting something stupid react see jsx generator could possibly solve jsx generator constrained keeping simple syntax transform talking javascript render function var node translated something like javascript render function var node reactdomdiv uniquekey reactnextuniquekey huge downside sacrificing simplicity transform upside able reason node moving hierarchy", "d": "5/2014"}, {"body": "oh wait totally wrong fact jsx generator would need generate ids compile time really looks much bookkeeping place nowtransparent generator probably good direction still would nt mind separate optional tool processed jsx files amended calls component constructors extra uniqueasinsourcefile key react could recognize better reason nodes runtime", "d": "5/2014"}, {"body": "gaearon given react sets given react sets alternating rendering one without specialcase would reused would technically look like want first child reused react must ignore first array constructing id compensate fact either component array components optimization workaround work inserted array array arrays etc makes sense examples inferring identity something location source work well general imagine helperfunction component creates returns button buttons would although proposed something similar time ago able provide sorts perhaps special key object also scope reference component could move around freely scope used response nt enthustiastic back", "d": "5/2014"}, {"body": "syranide understand thanks taking time explain imagine helperfunction component creates returns button yeah right response nt enthustiastic back discussion web read", "d": "5/2014"}, {"body": "gaearon problem iirc log discussion mostly quick idea part really thorougly evaluated detailed something feel strongly make case say worth giving shot think makes lot sense theoretical perspective basically feature manual constructiondestruction components boast react ca nt", "d": "5/2014"}, {"body": "edit oops sorry wanted edit comment formatting screwed", "d": "5/2014"}, {"body": "problem also animating width time webkittransform last would wrap next line width reached final value would happen transition ends change css works properly example related react way", "d": "5/2014"}, {"body": "ahh struggled problem long someone stack overflow told ask thanks alot", "d": "5/2014"}, {"body": "want control input value probably want use controlled component instead described page need set onchange handler handle changes appropriately", "d": "5/2014"}, {"body": "nt need change handler controls trying edit existing record need populate current values controls case care hit save button end nt common case", "d": "5/2014"}, {"body": "using uncontrolled component also put input manipulate value directly react gives base component build higherlevel abstractions need controlled components applicable asis many scenarios see also", "d": "5/2014"}, {"body": "hmm purpose defavaulvalue appears dynamically set value like following componentwillmount function thissetstate employee name foo bar via ajax call nt work render function input type text defaultvalue thisstateemployeename", "d": "5/2014"}, {"body": "first thanks tip looks like value need set defaultvalue available time component mounts defaultvalue untouched html input value attribute taken react forcing add handler nt require case way populate value fields via ref value manipulation following code works componentdidmount function thisget function data thisrefsnamegetdomnode value dataname bind imagine noise generates form large number fields", "d": "5/2014"}, {"body": "way populate value fields via ref value manipulation also following many state properties form fields", "d": "5/2014"}, {"body": "use value framework warns missing handler input control nt need handlers controls", "d": "5/2014"}, {"body": "ah see curious defaultvalue nt show new state original example tried running instead idea would work worth shot", "d": "5/2014"}, {"body": "defaultvalue read initial render afterwards desired behavior unclear user changed field want blow away changes usually", "d": "5/2014"}, {"body": "bad idea event give chance populate default values event fired first state change transition", "d": "5/2014"}, {"body": "someone types input field ajax call returns unclear seem claim neither controlled components manual dom manipulation work use case", "d": "5/2014"}, {"body": "following code looks unnatural common case like populating exiting entity server think kind code declarative inlined html tags componentdidmount function thisget function data thisrefsfnamegetdomnode value datafname thisrefslnamegetdomnode value datalname thisrefsdobgetdomnode value datadob value another lines", "d": "5/2014"}, {"body": "would operation without react would look roughly right write wrapper around calls make elegant could also create dummy callback pass input fields wanted use value field setstate", "d": "5/2014"}, {"body": "right without react would write similar code", "d": "5/2014"}, {"body": "think move dependencies though little silly either case require people might using browserify install petehunt objections", "d": "5/2014"}, {"body": "nt seem like used code makes npm searched ag occurrences seem inside used build script nt make npm instead btw glad know envify made aware security issues credentials stored environment variables", "d": "5/2014"}, {"body": "used browserify transform building bundle needs required used npm nt belong devdependencies", "d": "5/2014"}, {"body": "yep searched source opposed npm installs", "d": "5/2014"}, {"body": "nonnpm browser builds envify referenced browserify array", "d": "5/2014"}, {"body": "see appears envify transform might noop info perhaps dependency transform removed envify keep used grunt created file ran removed transform ran ran shows output tried making change one source files nodemodulesreact make sure browserify used copy react generated new bundle change registered diff appears javascript npm package nt reference", "d": "5/2014"}, {"body": "see many times resulting file presumably means envify indeed working properly", "d": "5/2014"}, {"body": "fiddled found works processenvnodeenv set set processenvnodeenv development got different result however think better leave envify developer making bundle browserify rather including transform one good place concatenation minification uglifyify think change made good permanent solution issue", "d": "5/2014"}, {"body": "intentional since minified build solely production includes less possible perf still usecase", "d": "5/2014"}, {"body": "see also", "d": "5/2014"}, {"body": "curious use case generator never yields", "d": "5/2014"}, {"body": "common example think koajs var koa require koa var app koa appuse function thisbody hello world applisten also methods might take generators parameters might need pass one nothing except return", "d": "5/2014"}, {"body": "updating esprima make way back eventually", "d": "5/2014"}, {"body": "tested koa example transformed ed fbesprima", "d": "5/2014"}, {"body": "possible circumstances page nt get loaded https fiddles work nt know circumstances everywhere installed ff nt remember anything special chrome perhaps simply browsers nt content security policy somebody reported working chrome mac though previous issue could mistaken", "d": "5/2014"}, {"body": "confirm os x mavericks works safari chrome firefox firefox console", "d": "5/2014"}, {"body": "safari also messages error console warnings errors", "d": "5/2014"}, {"body": "happens jsfiddle nt support https", "d": "5/2014"}, {"body": "neither jsbin simple switching providers luckily chrome firefox desktop allow opt sticky pref seems persist real problem using github pages sites nt default none links either guessing either went wrong page extension used everywhere long time prime suspect much though likely move github pages eventually going close suggestions nt use disable load browser", "d": "5/2014"}, {"body": "right looks like everywhere thought saw redirecting behavior chrome checked mistaken must copied url ff chrome point still surprising issue first github supports redirect works fail afterward", "d": "5/2014"}, {"body": "believe intentional nt fire true false really want one event true true counted essentially getting change event radio group rather individual radio button", "d": "5/2014"}, {"body": "guess makes sense sure ideal dom case docs nt accurate true true issue remains", "d": "5/2014"}, {"body": "agree someone wants tackle would nice changing checked checked nt trigger onchange event also happy accept docs pr make expected behavior clearer", "d": "5/2014"}, {"body": "gaearon interested taking look one right changeeventplugin fires onchange event every receives browser checkboxes radio buttons guess necessary track current value event triggered sort like old ie sure tricky solve explains approximately onchange event currently works text inputs", "d": "5/2014"}, {"body": "spicyj yup interested take look closer weekend ok", "d": "5/2014"}, {"body": "sure rush", "d": "5/2014"}, {"body": "tested android mobile phone chrome yesterday information testing ff today fiddles missing chrome open fiddle mentioned page hand get page turn firebug get following errors blocked loading mixed active content blocked loading mixed active content blocked loading mixed active content chrome blocked page loaded https ran insecure content content also loaded https blocked page loaded https ran insecure content content also loaded https blocked page loaded https ran insecure content content also loaded https seem relevant form content security policy kicking nt kicking others phone", "d": "5/2014"}, {"body": "opened new issue information", "d": "5/2014"}, {"body": "react could technically warn children trying simply valid react use instead", "d": "5/2014"}, {"body": "dunno seems like might reasonably support salier would suggest", "d": "5/2014"}, {"body": "syranide correct though unfortunately even use pretty much need cede control contenteditable browser even flushing updated markup string back would surely break selection state would make contenteditable unusable anyway far tell simple middle ground react contenteditables either got permit full browser control maintain complete ownership everything including selection state spicyj mind support may approaches nt thought", "d": "5/2014"}, {"body": "salier oh right even kind bad idea hehe technically could probably allow implementation similar controlled inputs certain performance would take nosedive quickly read optionally write change voiding usefulness could avoid performance nosediving seriously interesting potential nt see reality end fairly certain even could made work performant would nt even make sense part react core would turned huge project sure really interesting potential core", "d": "5/2014"}, {"body": "nt solution mind merely meant seems odd rendering simple contenteditable component letting user interact causes react throw errors one thing considered using render children though unsure prevents real use cases work better maybe warn call day", "d": "5/2014"}, {"body": "think problem react dev tools initialize react initialized making pollute environment sure react used seems unpreferable documentation linked targeting installation page definitely good idea use general far aware acceptable solution problem nt involve manually disabling message", "d": "5/2014"}, {"body": "ever cases need different attr configs based attribute node like input hope", "d": "5/2014"}, {"body": "edit nevermind idiot element whole reason suggested first place reason subdividing would cleanliness reference documentation lists attributes per type think little practical reason spicyj must attribute property fairly certain special like could treated special case list attributes per ie", "d": "5/2014"}, {"body": "tomocchino talked something like ever since introduced", "d": "5/2014"}, {"body": "cc sebmarkbage benjamn zpao attributes handled properties react attributes supposedly significantly faster properties understand null undefined thus empty state becomes default property show dom setting show dom yay html benchmarking shows clear practice clear though slow browsers enormously faster dealing properties properties roughly times faster attributes mixed test roughly middle really interested removing attributes leaves us current implementation roughly faster although slowest appear fare badly good considering even poor churn property assignments attribute removes per second per frame fps per frame couple toggling values explicitly rather uncommon case huge amounts nodes properties would surprised see measurable real life impact switching seems unless tests seriously flawed switching could actually viable would keep dom clean would let us away ugly probing star apart actually faster edge browsers although sadly far slowest browser test call incidentally also solve preferable way even perhaps percentages relative current implementation vs vs respectively ops per second total assignments removes per second column test unless want go allout attributes first column interest", "d": "5/2014"}, {"body": "proper implementation", "d": "5/2014"}, {"body": "consequence leaving dom attribute messing css rules end problem caused leaving", "d": "5/2014"}, {"body": "sebmarkbage different probably exception know least cssrules obvious one guess although extremely rarely used seems legit uses mention pr ff chrome actually faster attribute methods although older browsers suffer slightly still blazingly fast though", "d": "5/2014"}, {"body": "think might make sense several different code paths based browser andor attribute used committing permanent supported solution like clarify common enough problem another reason like treat react props properties rather attributes general htmlsvg web components nt allow complex types attributes support complex types like style class lists custom user data prefer model properties rather attributes property inherently broken dom missing functionality fix casebycase basis ideally behavior react props correspond dom properties instead dom attributes end whatever makes sense", "d": "5/2014"}, {"body": "sebmarkbage proposed solution uses clear nonboolean properties use unless interacts poorly techs mentioned nt seem like use properties would issue", "d": "5/2014"}, {"body": "workaround would allow nonescaped slashes rendered inside href attribute need render working anchor tags node", "d": "5/2014"}, {"body": "ericvicenti escaping react affect anchor may look funny source work exactly", "d": "5/2014"}, {"body": "jest help", "d": "5/2014"}, {"body": "possible fix", "d": "5/2014"}, {"body": "think problem means nt find files reason reacts changes nt functionality provided us explicitly provided npmmodule", "d": "5/2014"}, {"body": "linked question accepted answer closing", "d": "5/2014"}, {"body": "seems like reasonably solved curious though possible somehow cause inputs give anything numbers say manually enter text clear", "d": "5/2014"}, {"body": "personally fan specialcasing common operations operation going fast enough isolation increase complexity react easily find situations algorithm suddenly performs significantly worse apparent reason common operation matched uniformly slow preferred imho way actually reason performance application easily argue ways improve performance becomes problem imagine would quite cheap make current algorithm least directionneutral would solve biggest flaw imho important quality algorithm simplicity terms able understand result also plievone mentioned ever want actually support iframevideoaudoobject also needs aware nodes must nt move", "d": "5/2014"}, {"body": "fixed", "d": "5/2014"}, {"body": "see also", "d": "5/2014"}, {"body": "though kind unrelated personally would isolation lot cases becomes quite tedious visual annoyance able avoid without declare locally start every render would nice", "d": "5/2014"}, {"body": "note potential hazard pending state callbacks refer updated new references locally closures closures get access pending state likewise issue occur partial reconciliation think possible issue thisprops thisrefs nt case top head", "d": "5/2014"}, {"body": "sebmarkbage oh yeah right least allow user object like already assume neat whatever user provides gets like numbers also yeah exact thing would true props nt reuse object", "d": "5/2014"}, {"body": "fixed", "d": "5/2014"}, {"body": "see also publicwebevents list asked behavior", "d": "5/2014"}, {"body": "fixed", "d": "5/2014"}, {"body": "issue already resolved except really", "d": "5/2014"}, {"body": "closing duplicate", "d": "5/2014"}, {"body": "oops dupe", "d": "5/2014"}, {"body": "verify issue also exists chrome pretty certain due event firing documented bug firefox fix could csstransitiongroup", "d": "5/2014"}, {"body": "sure guys ontop intuitively simply listening tab switch treating like sounds like simplest approach", "d": "5/2014"}, {"body": "longer transitions could pose problem switch away tab back transition ended tab away could see long left transition clear end tab still backgrounded", "d": "5/2014"}, {"body": "small amount research done trivial detect end reliably perhaps waiting length transition duration best approach though unsure run lots problems sync actual animation", "d": "5/2014"}, {"body": "back dug issue one thing noted timeout always detects first occurrence problem production code timeout detection tried implement timeouts never got time properly would require getting transition time css require extra params user supply implement timeouts unbind transitionend particular transition timeout fires exploring potential performance issues", "d": "5/2014"}, {"body": "improved error message ago immediate action take", "d": "5/2014"}, {"body": "closing let know still problems", "d": "5/2014"}, {"body": "sorry nt written anymore eventually managed transition child way way component animated mount feel somehow hackish adds unneeded logic components still convinced cleaner way component animate mounting possible previous react thanks", "d": "5/2014"}, {"body": "running issue workaround mentioned unfortunately nt fix tests module bkonklecastaway clienttestscomponentscastawayappcoffee coffeescript nt thing compiles tips try next", "d": "5/2014"}, {"body": "setup work make sure passes machine adjust needs topic compiled coffeescript unreadable mess syntax highlighting gets even worse", "d": "5/2014"}, {"body": "bkonkle also require castawayapp beforeeach section since depends react want require time test passes run mocha", "d": "5/2014"}, {"body": "point taken syntax highlighting moved gist highlighting would work spicyj good catch exactly problem test passing grin", "d": "5/2014"}, {"body": "running problem even though using jsdom dom api rendering components string node mount run simple unit tests reason react required inside beforeeach instead globally case ps happens upgrading react works fine", "d": "5/2014"}, {"body": "requiring code top file instead beforeeach fine require react globals present time react required", "d": "5/2014"}, {"body": "need global window document objects even using dom tests nt rendercomponenttostring made need window api thursday may ben alpert notifications githubcom wrote requiring code top file instead beforeeach fine require react window document globals present time react required reply email directly view github best regards ovidiu chereche\u015f", "d": "5/2014"}, {"body": "nt problem using rendercomponenttostring", "d": "5/2014"}, {"body": "jaredly sounds like problem large parts entire app rerendering without shouldcomponentupdate simply costly ends slowing input", "d": "5/2014"}, {"body": "thought single input page nothing else noticeably laggy compared non react input rather underpowered netbook may andreas svensson notifications githubcom wrote jaredly sounds like problem large parts entire app rerendering without shouldcomponentupdate simply costly ends slowing input reply email directly view github", "d": "5/2014"}, {"body": "observed context seems propagate children explicitly created would also like know going change future", "d": "5/2014"}, {"body": "last point assuming mean would nt work domstringmap setting obj nt anything decide likely sharing logic style", "d": "5/2014"}, {"body": "safe try get patched", "d": "5/2014"}, {"body": "feel free take let know questions", "d": "5/2014"}, {"body": "already doable", "d": "5/2014"}, {"body": "fixed believe", "d": "5/2014"}, {"body": "please please", "d": "5/2014"}, {"body": "spicyj close", "d": "5/2014"}, {"body": "spicyj close solved irc btw", "d": "5/2014"}, {"body": "fixed", "d": "5/2014"}, {"body": "spicyj close", "d": "5/2014"}, {"body": "merging", "d": "5/2014"}, {"body": "fixes", "d": "5/2014"}, {"body": "commenting issue first result google exact problem even latest version npm particular issue nt git installed installed git restarted cmd npm install works correctly thanks terinjokes reactjs", "d": "5/2014"}, {"body": "fixed", "d": "5/2014"}, {"body": "gaearon perhaps another one", "d": "5/2014"}, {"body": "spicyj ok", "d": "5/2014"}, {"body": "since change invariant error message tweaks website nt heard much confusion around going close", "d": "5/2014"}, {"body": "yeah using props nice think terms functions thanks", "d": "5/2014"}, {"body": "would love see get attention improvement box would awesome lot work", "d": "5/2014"}, {"body": "think eventually want people build step server rendering ie webpack mode especially people start expressing static asset dependencies statements", "d": "5/2014"}, {"body": "using webpack enough solve thing browserify", "d": "5/2014"}, {"body": "browserify transform automatically activates package need set bundling thus browserify also used bundling server rendering", "d": "5/2014"}, {"body": "dhruvbhatia", "d": "5/2014"}, {"body": "preferred workarounds issue far able avoid children getting stuck placing styling eg inner wrapper child html foo", "d": "5/2014"}, {"body": "jbrantly really nice bit hack course nt invalidate courageous attempts thread think going steal approach sad thing still ca nt", "d": "5/2014"}, {"body": "see think reacttransitiongroup api flexible enough nt need anything", "d": "5/2014"}, {"body": "petehunt also lists good routing model objects integration jquery plugin sortable", "d": "5/2014"}, {"body": "done", "d": "5/2014"}, {"body": "method nt exist", "d": "5/2014"}, {"body": "think docs good enough nt heard much confusion", "d": "5/2014"}, {"body": "made jsfiddle test react seems listening triggering amp whenever occurs focusing slider pressing right browser event react event chrome change safari change chrome canary input change input change firefox input input change ie change firefox triggers blur additionally dragging browser event react event chrome input input change safari input change input change chrome canary input input change firefox input input change ie change browsers trigger drag end editing changeeventplugin listen change events input types appears fix react change amp input event handling browsers make pull request reason plugin listening events file inputs missing", "d": "5/2014"}, {"body": "ran problem trying port widget react someone core give feedback whether eddhannay suggestion wouldwould nt work thanks", "d": "5/2014"}, {"body": "locks would recommend implementing seems like html input elements come bunch inconsistencies hard normalize basically unstyle able", "d": "5/2014"}, {"body": "syranide think attempt support builtin inputs least mostlyreasonably", "d": "5/2014"}, {"body": "spicyj certainly lots weird things ca nt fix like able read value nt strictly numeric etc", "d": "5/2014"}, {"body": "passes routinely travis closing", "d": "5/2014"}, {"body": "please allow touchaction attribute", "d": "5/2014"}, {"body": "closing favor think covers spirit issue", "d": "5/2014"}, {"body": "testutils exposed addons since", "d": "5/2014"}, {"body": "addon", "d": "5/2014"}, {"body": "charuru working reactive version jade write ready smileycat", "d": "5/2014"}, {"body": "ca nt reproduce windows line endings os x machine windows closing", "d": "5/2014"}, {"body": "spicyj think happens happens mixed unixwindows although nt seen long time really looking would surprised accidentally fixed", "d": "5/2014"}, {"body": "ca nt repro mixed endings either", "d": "5/2014"}, {"body": "given trips people instead consistent dom consistent html support alllowercase attributes go back docs issue autocomplete attribute writing something looks like html work like html otherwise inconsistency consistency", "d": "5/2014"}, {"body": "agree would preferable attributes mapped", "d": "5/2014"}, {"body": "nt think much improve closing", "d": "5/2014"}, {"body": "apart ugliness see one problem approach guess right apple engineers fact disabled click event delegation memory considerations workaround create new memory problems lots lots divs must become clickable helped event delegation simply must work click event bruteforce expense memory bad safari iphone alternative force mobile safari since ca nt see cursor one care exist element clickhandler keep us away issue think play nice style though might trivial", "d": "5/2014"}, {"body": "actually possible messing around seem get work array children", "d": "5/2014"}, {"body": "never mind wrong future problem havers need remove elements inside csstransitiongroup csstransitiongroup", "d": "5/2014"}, {"body": "please allow touchaction attribute", "d": "5/2014"}, {"body": "react needs list properties knows whether use property accessor setattribute changing attribute also convert camelcasing dashcased though critical like make easy configure react custom attributes sorry nt easy right", "d": "5/2014"}, {"body": "still fixed spent hour trying figure wasnt working", "d": "5/2014"}, {"body": "sorry open", "d": "5/2014"}, {"body": "possible massage jsx transforming major issue see would intefere javascript would suddenly different meanings makes quite unappealing imho commenting potential close", "d": "5/2014"}, {"body": "syranide sorry sure understand", "d": "5/2014"}, {"body": "spicyj nt started editing thoughts posting mixed proposing proposal makes sense stand first sentence could probably massage jsx", "d": "5/2014"}, {"body": "nt seem template literals nt bad close maybe drop outer curlies someday", "d": "5/2014"}, {"body": "think made progress double setstate problem using cursorbased approach past discussion also", "d": "5/2014"}, {"body": "related", "d": "5/2014"}, {"body": "say kind related go way", "d": "5/2014"}, {"body": "pr landing jsx member expressions close", "d": "5/2014"}, {"body": "want quickly add using github atom kind highlights syntax within backticks", "d": "5/2014"}, {"body": "ok nt think going extend transformer ways discussed going close people found solutions working different languages", "d": "5/2014"}, {"body": "found appears jsx transformer coffeescript nt tried looks promising anyone tries would great could report back results", "d": "5/2014"}]