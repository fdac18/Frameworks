[{"title": "production development deadcode generated library", "body": "browsing code saw lot code like basically dead code major issue could help optimise size output standalone library remove definitely dead code knowledge manage source code sounds like instead preprocess approach", "num": "1629", "d": "5/2014"}, {"title": "component instance invalid mountingrendering string", "body": "simple unit test example worked react nt js var react require react var componentclass reactcreateclass render function return reactdomspan null nada describe foo function bar function var componentinstance componentclass react components need rendered mount reactrendercomponenttostring componentinstance componentinstancesetstate name john throws two errors ran invalid access component property setstate unknown top level see use static method instead typesetstate stacktrace referenceerror document defined getactiveelement reactreconciletransactionreactinputselectiongetselectioninformation reactreconciletransactionmixininitializeall reactreconciletransactionmixinperform reactcomponentmixinperformupdateifnecessary reactcompositecomponentmixinperformupdateifnecessary objectenqueueupdate reactcompositecomponentmixinreplacestate reactcompositecomponentmixinsetstate fnreactmembranefunction else access instance methods rendercomponenttostring returns string required", "num": "1628", "d": "5/2014"}, {"title": "props variable instead literal objects causes problem", "body": "following code causes two shown bbbbbb instead aaabbb one would expect replaced object literal component rendered correctly", "num": "1626", "d": "5/2014"}, {"title": "references elements nt work testutils", "body": "testcoffee using jest field testutilsfindrendereddomcomponentwithclass fanroot tapartistfield testutilssimulatefocus field testutilssimulatekeyup field key componentcoffee updatesearch gt searchterm refssearchfieldgetdomnode valuetrim tolowercase searchterm documentgetelementbyid searchfield valuetrim tolowercase searchterm render gt reactdominput classname formcontrol tapartistfield type text ref searchfield id searchfield onfocus startsearching onblur stopsearching onkeyup updatesearch test call focus works fine separately tested behaves expected call keyup throws happens either value commented fixed string issues either commented version works browser", "num": "1625", "d": "5/2014"}, {"title": "tapeventplugin dependencies calculated module loading time", "body": "tapeventplugin var dependencies topleveltypestopmousedown topleveltypestopmousemove topleveltypestopmouseup eventpluginutilsusetouchevents dependenciespush topleveltypestoptouchcancel topleveltypestoptouchend topleveltypestoptouchstart topleveltypestoptouchmove top level since usetouchevents wo nt set true require time even set true user code runs touch events never bound super high priority nt actually supportadvertise tapeventplugin yet would nice worked merging thanks ryanseddon reporting", "num": "1619", "d": "5/2014"}, {"title": "data binding nonstring values cause update html even value html", "body": "jsfiddle edit second input text cursor end input value gets unnecessary updated expect second input behaving exactly first storing number string state fixes problem convenient since need convert back number math", "num": "1618", "d": "5/2014"}, {"title": "allow overriding nonlifecycle component methods using mixin", "body": "like able override nonlifecycle component method without react throwing something like js var mymixin somemethod function default behavior var mycomponent mixins mymixin somemethod function needstooverridemixinbehavior override mixin behavior else mymixinsomemethodapply arguments ideally would eventually doable using sort hierarchy system possibly want ability override mixin method", "num": "1617", "d": "5/2014"}, {"title": "add findscry id test utils", "body": "testutils currently variant nothing like functionality would make testing lot easier", "num": "1616", "d": "5/2014"}, {"title": "addonsupdate directive precedence order", "body": "js var anarray reactaddonsupdate anarray set set push p u h unshift u n h f splice splice slice dice result splice slice dice set h n u p u h sane ordering handling directives never want recurse something already ed ed otherwise would included changes directives arguments originally think natural expectation would update recurse existing elements indices original array splice directive new elements ensure appear ends resulting array like certain cases programmer would introduce difficulttovisuallyinspect indextwiddling logic split changes among multiple calls produce desired result tests nt include cases multiple directives appear single value sure whether intentional whether anybody depends behavior especially dealing trees form current behavior really nt allow visual clarity makes helpful trees composed entirely objects", "num": "1615", "d": "5/2014"}, {"title": "warn reordering nodes moved outside react", "body": "moveexisting update type would nice domchildrenoperations checked warned child finds nt expected node", "num": "1610", "d": "5/2014"}, {"title": "pull reactaddonstestutils bower", "body": "lot browser based testing w karma love quick easy way pull testing tools without npm possible something today something could optin future workaround get today thanks advance", "num": "1607", "d": "5/2014"}, {"title": "documentation update required", "body": "component specifications documentation following note must added method update component state method using callback provided second argument methods invoked immediately may want shift callback", "num": "1606", "d": "5/2014"}, {"title": "changes classname path inside svg element working", "body": "draw svg path element classname setted state render change state event result redraw svgpath element expected result path new classname working result component redrawn classname path nt change example full source code example working html css js", "num": "1605", "d": "5/2014"}, {"title": "events binded", "body": "hey working react app quite big use backbonemodel react views backbonemodel attributes update call thisforceupdate react component sometime time events binded clicking wo nt anything sure happening see dom reactid sure start anyone experienced", "num": "1604", "d": "5/2014"}, {"title": "learnjson missing todomvcflux", "body": "referenced got", "num": "1603", "d": "5/2014"}, {"title": "following update", "body": "confused following behavior example takes prop first renders clicking gives us seems right clicking rerender everything clicking gives us realusecase context gave errors accessing pass thirdparty library displaying popup menu around given node given child responsible knowing popup logic instead sole purpose show contextual menu location given component pasting live jsx editor work believe seeing behavior general accessing ref", "num": "1602", "d": "5/2014"}, {"title": "event handler context using transferpropsto", "body": "hello sure bug feature set react components share behaviour events created mixin used getdefaultpropstransferpropsto methods share functionality js var highlight getdefaultprops function return onmouseover thishighlight highlight function consolelog lt window unhighlight function consolelog lt paragraph component var paragraph reactcreateclass mixins highlight render function return thistransferpropsto see adding event jsx local scope event callback binded component using getdefaultprops points window workaround obviously rebind scope manually wondering behaviour getdefaultpropstransferpropsto constant setting properties jsx maybe better way inherit event handlers components altogether js fiddle example code thanks advance daniel", "num": "1595", "d": "5/2014"}, {"title": "renderedchildren get sync dom render throws", "body": "reactmultichild nt properly handle errors thrown rendering children one child throws children updated time inconsistent values stored renderedchildren cause problems future updates unclear best way solve", "num": "1593", "d": "5/2014"}, {"title": "warning calling thisgetdomnode via reacttestutils", "body": "several people came jestjs irc asking thisgetdomnode returned null reason mounted reacttestutils maybe add warning case", "num": "1592", "d": "5/2014"}, {"title": "npm install fails", "body": "latest nodenpm git clone npm install gives npm http get npm http npm err error compatible version found commoner npm err valid install targets npm err npm err installtargetserror c program filesnodejsnodemodulesnpmli", "num": "1591", "d": "5/2014"}, {"title": "apply component spec mixins specs deterministically", "body": "right nt consistently could behavior varies depending put key class spec great example using master js var mixin componentdidmount function consolelog mixin var compa reactcreateclass mixins mixin componentdidmount function consolelog compa render function return var compb reactcreateclass componentdidmount function consolelog compb mixins mixin render function return b outputs think consistently behave like compb component mixin methods yungsters disagrees opinions petehunt sebmarkbage jordwalke potentially interested gaearon figure way go relatively contained testable take right core", "num": "1589", "d": "5/2014"}, {"title": "able mixin defined mixin", "body": "imho would useful able define per ie sometimes mixincode may rely methods defined mixesin case would make sense combinemixin defined included think", "num": "1588", "d": "5/2014"}, {"title": "feature request warn property proptypes passed component", "body": "would great debug mode react would warn pass property props specified proptypes object component ie way enforce props props specified proptypes others would prevent use undocumented properties also allow better code maintenance unused props would easily removed", "num": "1587", "d": "5/2014"}, {"title": "svg dx dy attributes work", "body": "", "num": "1586", "d": "5/2014"}, {"title": "add apply function directive immutability helpers", "body": "apply directive apply function part data structure replace returned result var mydata b function increment x return x var newdata reactaddonsupdate mydata b apply increment newdata b", "num": "1585", "d": "5/2014"}, {"title": "parse error confusing trying return two elements", "body": "opening esprimafb apparently nt accept issues write get unexpected identifier tries parse second div interpreted less think give nicer errors disallow less operator directly xjselement nt think prevents real uses could always wrap parens cc jeffmo syranide", "num": "1584", "d": "5/2014"}, {"title": "warn using proptypesinstanceof incorrectly", "body": "someone wrote instead would nice could give sort warning sure possible though cc zgotsch", "num": "1582", "d": "5/2014"}, {"title": "feature request commandmergeset", "body": "think ability merge set immutability helpers target undefined would nice addition open pr sounds reasonable", "num": "1581", "d": "5/2014"}, {"title": "setstate componentwillreceiveprops update state callback", "body": "example jsfiddle far understand proper behavior", "num": "1580", "d": "5/2014"}, {"title": "svg dy attribute ignored", "body": "rendering element attribute react actually render element simply ignored repro", "num": "1573", "d": "5/2014"}, {"title": "dangerouslyreplacenodewithmarkupbyid uses getnode unmountedpurged id", "body": "calls id unmounted purged sebmarkbage spicyj indicated working refactor perhaps already fixed ps really sure fix without taking big hammer", "num": "1569", "d": "5/2014"}, {"title": "un mountcomponent seems behave improperly root component update", "body": "logging reveals nt make sense least var container documentcreateelement div var mockcomponent reactcreateclass render function return var wrappercomponent reactcreateclass render function return thispropschildren reactrendercomponent container reactrendercomponent container", "num": "1567", "d": "5/2014"}, {"title": "context maintained rendering thispropschildren", "body": "following snippet code var reactcreateclass childcontexttypes x reactproptypesstring getchildcontext function return x render function thispropschildren return propschildren thispropschildren else return regular var b reactcreateclass contexttypes x reactproptypesstring render function return x thiscontextx reactrendercomponent output", "num": "1562", "d": "5/2014"}, {"title": "create test suite public api", "body": "like test suite tests public api contrast existing unit tests test internal modules test suite comprehensive enough allow us feel confident making breaking changes accidentally unlike current tests frequently change refactors would nt change tests except conjunction major release since tests would use public api could also run closure advanced mode verify everything works properly", "num": "1555", "d": "5/2014"}, {"title": "losing control", "body": "example start typing numbers nonnumber character wont update input field expected start typing nonnumber character first though seems input field becomes uncontrolled starts excepting anything type onchange nt fired anymore", "num": "1549", "d": "5/2014"}, {"title": "onclick called immediately page load", "body": "load page last event module triggered immediately example executed fix sidebarjs js module dependencies var react require react var router require page component moduleexports reactcreateclass displayname sidebar render function return reactdomaside classname sidebar reactdomul classname sidebarindex reactdomli null guide reactdomul null reactdomli null reactdoma href ux onclick handleclick ux ux reactdomul null reactdomli null reactdoma href visual onclick handleclick visual visual reactdomul null reactdomli null reactdoma href code onclick handleclick code code handle click param string url api private function handleclick url router url", "num": "1546", "d": "5/2014"}, {"title": "escaping curly brackets", "body": "thanks react jsx would possible escape curly brackets future like jsx use characters escape evaluate inline javascript", "num": "1545", "d": "5/2014"}, {"title": "evaluation escapes comments", "body": "hi thanks great work react jsx problem jsx comments containing curly brackets evaluated jsx even though writing consider comment literals jsx escape characters thisstatevalue example comment block evaluated", "num": "1544", "d": "5/2014"}, {"title": "transitionend called tab backgrounded", "body": "using background tab transition happens warning actually adding transition group displayed console transition tried perform animation without animationend transitionend event timeout either disable transition js add css animationtransition created reproducible version believe due bug pretty much modern browsers events emitted tabs backgrounded said figured worth bringing see react could something thoughts", "num": "1541", "d": "5/2014"}, {"title": "ca nt sudo npm install g reacttools", "body": "one dependencies reacttools esprimafb invalid version string blocks installing reacttools relevant error npm http npm err error invalid version npm err validversion npm err final npm err npm err cb npm err npm err npm err npm err objectoncomplete adittionally downloaded esprimafb package edited version string installed tarball correctly npm wants redownload thank", "num": "1538", "d": "5/2014"}, {"title": "tag attribute patternunits supported", "body": "really useful svg patterns nt appear transferred dom render component uses given following sample svg result display scan line pattern demonstrated raw svg however nt happen patternunits attribute never transferred note missing attribute within result executing svg markup", "num": "1535", "d": "5/2014"}, {"title": "distinguish svg tag head tag", "body": "per spec see link svg element may contain title element used display tooltip like title attribute html elements however react seems think title tag would normally contained head rendering causes error uncaught error invariant violation reactfullpagecomponenttitle tried unmount crossbrowser quirks impossible unmount toplevel components eg reliably efficiently fix funnily enough suggested fix omitted", "num": "1534", "d": "5/2014"}, {"title": "possible issue reactaddonstestutilsfindrenderedcomponentwithtype scryrenderedcomponentswithtype", "body": "sure bug documentation issue ran problem using findrenderedcomponentwithtype scryrenderedcomponentswithtype methods work fine reactdom except reactdomspan reactdomdiv may others nt work expected instances run describe reactaddonstestutils function using following react karma karmajasmine karmaphantomjslauncher karmareactjsxpreprocessor", "num": "1533", "d": "5/2014"}, {"title": "incorrect api documentation bug reactaddonstestutilssimulate", "body": "according reactaddonssimulate eventname reactcomponentdomelement element object eventdata able accept reactcomponent dom element wrote simple test fails reactcomponent passsed simulateclick bug invalid documentation please see describe reactaddonstestutilssimulateclick function using following react karma karmajasmine karmaphantomjslauncher karmareactjsxpreprocessor", "num": "1532", "d": "5/2014"}, {"title": "make jsxtransformer use async xhr", "body": "lazy used sync xhr make sure multiple scripts still executed right order however getting warning console firefox nightly says sync xhr deprecated synchronous xmlhttprequest main thread deprecated detrimental effects end user experience help let preemptive build minimal work switch async xhr ensure still process scripts order", "num": "1530", "d": "5/2014"}, {"title": "html jsx converter nt correctly parse classname parameter tag", "body": "visit paste live jsx editor observe conversion expected result classname still classname conversion actual result classname converted classname invalid jsx", "num": "1529", "d": "5/2014"}, {"title": "disabled reactdombutton stop user input", "body": "nt include touchevents etc", "num": "1527", "d": "5/2014"}, {"title": "add support strokedasharray", "body": "nt work tried set list supported svg attributes adding would nice", "num": "1524", "d": "5/2014"}, {"title": "add support head prefix attribute", "body": "hi guys since facebook using attribute element declare open graph namespace could add list supported attributes would useful generating templates see link details", "num": "1523", "d": "5/2014"}, {"title": "transferring props parent automatically", "body": "would nice component could declare property state transferred automatically parent property component example couple components inside form require transferring properties forced repeat properties many times would like hide represent kind internal details relation child parent would like able thanks could write stumbled across problem times already think requirement nt violate react data flow rules simply helps avoid boilerplate wonder react authors problem planning implement something like", "num": "1521", "d": "5/2014"}, {"title": "using routes server rendering", "body": "could please show example using flux routing say data store domain means route data store event helpers mean use router script dispatch actions route change case server side routing yes know speak client side apps react designd also server rendered possible use kind flux code server case want add server rendering seo purposes", "num": "1519", "d": "5/2014"}, {"title": "click event nt bubble outside svg", "body": "im something like div span text clicking triggers however svg never gets triggered", "num": "1509", "d": "5/2014"}, {"title": "provide build required polyfills separate reactpolyfillsjs", "body": "right somewhere buried react site list polyfills react requires links project intermingled bunch others would nice react optionally shipped polyfills polyfills needs function would make easier people fall pit success build browsercompatible react sites also would save bunch work every time start new project", "num": "1507", "d": "5/2014"}, {"title": "setprops update inline styles", "body": "settings props component update style attributes following jsfiddle example clicking link updates two props height amp name see name updated dom minheight remains", "num": "1506", "d": "5/2014"}, {"title": "uglify dev dependency todomvcflux", "body": "uglifyjs working npm build work well", "num": "1505", "d": "5/2014"}, {"title": "componentdidmount setstate two valid unequal nodes", "body": "kind related long debugging session irc turned issue moving solved assuming boiled version", "num": "1501", "d": "5/2014"}, {"title": "transitiongroup low level api available using csstransitiongroup", "body": "hi low level api available using csstransitiongroup none methods called componentwillenter componentdidenter componentwillleave componentdidleave intended check fiddle", "num": "1497", "d": "5/2014"}, {"title": "fail travis phantomjs", "body": "sauce setup nt reliable enough depend strong signal example failed though tests passed phantom", "num": "1496", "d": "5/2014"}, {"title": "reactemptycomponent errors", "body": "know previously switched unreliable seems suffer similar issues repro went different elements etc none seems work seemingly best alternative seems especially since already kind special react ie react wrap text great", "num": "1494", "d": "5/2014"}, {"title": "updating manyitem singleitem array rerender forced although item key nt changed", "body": "consider usually respected case elements nt get unmounted remounted unnecessarily match subsequent calls however elements one removed react reason nt realize component nt changed forces dom node update tried setting breakpoint inside debug issue looks like name slightly different one case includes leading nt anyway workaround curiously returning array one item rendering case react able understand component nt force unnecessary rerender sorry providing workable fiddle hosts old version react live go sleep fairly simple reproduce unless already fixed", "num": "1493", "d": "5/2014"}, {"title": "reacttransitiongroup requires key fire hooks", "body": "lists pretty obvious need set keys reacttransitiongroup single child node obvious key needed mentioned docs either documentation issue code issue opinion would intuitive key optional reacttransitiongroup single child least would nice throws warning jsxtransformation", "num": "1488", "d": "5/2014"}, {"title": "html rendered til", "body": "particular problem rendering html delayed animation happens browsers tested android webview ios chrome mac safari mac acts container pages every li represents page overflow property set hidden see one page time want transition new page set correct value along transitionduration property slides new page view funny thing new page nt rendered transition finished slides white page animation done view displayed see html inserted transition seems delaying rendering new element transition done also tried updateing property insert new element view rendered halfway animation remove transitionduration property course animation element rendered instantly way solve anyone experienced something similar example code", "num": "1485", "d": "5/2014"}, {"title": "defaultvalue state popualted via ajax call", "body": "code consolelog prints fine defaultvalue getting populated probably react already mounted component ajax call way populate defaultvalues server", "num": "1484", "d": "5/2014"}, {"title": "envify peerdependencies complicates use node", "body": "package uses packagejson envify use instead adoption low debated whether kept node browserifycdn tool requirebin uses requirebin nifty tool building modular examples sharing would like use react browserifycdn nt work well peerdependencies would extra work make work anyone building similar tool might extra work well would much like node packages designed used clientside rely peerdependencies", "num": "1482", "d": "5/2014"}, {"title": "minified react w addons expose testutils", "body": "minification may overmangled something current minified w addons website expose addons", "num": "1481", "d": "5/2014"}, {"title": "transitionleave false properly bypass need transition leave animation", "body": "docs state reactcsstransitiongroup keeps dom elements page animation completes thus necessitating leave transition want enter animation leave animation specify however dom elements still seem stick around occasionally throw transitionend warning even using repro case steps reproduce click add three components page click remove added components notice elements staying page instead removing expected remove jsx supplied leave transition runs removal works expected undesired leave animation occurs css transitions keyframe animations change workaround remove use leave transition disclaimer workaround nt seem bullet proof least complex view creating handful additionsremovals perhaps fairly rapidly produce transitionend warning leaving elements ui", "num": "1478", "d": "5/2014"}, {"title": "missing yield generator error jsx", "body": "upgrade newer version esprimafb removes error work around putting yield return works", "num": "1475", "d": "5/2014"}, {"title": "thinking react code examples broken", "body": "page jsfiddle based code samples missing see empty block instead note go bit json example graphic working jsfiddle js code samples nt fedora linux ff chrome tested android mobile phone chrome yesterday fiddles desktop yesterday today open fiddle mentioned page hand get page turn firebug get following errors chrome dev tools seem relevant form content security policy kicking nt kicking others phone see also closed issue", "num": "1472", "d": "5/2014"}, {"title": "onchange handler radio buttons fire according spec", "body": "described onchange handler input fire checked state changes however actually fires radio button clicked words fails fire checked radio button unchecked checking different radio button fires even without state change checked radio button clicked short missing checked transtions true false reporting spurious transitions true true", "num": "1471", "d": "5/2014"}, {"body": "currently stripped uglify build step think meaning devversion still since true still want code inside branches considering dev version may preferable keep asis make easier correlate source really matters either way", "d": "5/2014"}, {"body": "ok fair enough noticed behavior provided envify removed final production version definitely ok closing issue", "d": "5/2014"}, {"body": "ca nt setstate conjunction server rendering variable merely describes component instance mount instance setstate nt work nt way get component instance using server rendering want change state get new html string probably instead refactor logic props determine component shows rather state pass new descriptor rendercomponenttostring", "d": "5/2014"}, {"body": "think andreypopp reported sure another issue open", "d": "5/2014"}, {"body": "yep irc nt create issue", "d": "5/2014"}, {"body": "related pr think saw reverted afterwards", "d": "5/2014"}, {"body": "made slightly different issue", "d": "5/2014"}, {"body": "hm see factory descriptors mutates assigning", "d": "5/2014"}, {"body": "also experiencing master", "d": "5/2014"}, {"body": "nice stepped code saw", "d": "5/2014"}, {"body": "explicitly converting values strings would solve problem wondering makes sense seamlessly react", "d": "5/2014"}, {"body": "fixes", "d": "5/2014"}, {"body": "cc sebmarkbage", "d": "5/2014"}, {"body": "think simple helper fullblown class inheritancecomposition framework mixins nt work case simply modify reactcreateclass object whatever way feel like set limits ps also whenever lands", "d": "5/2014"}, {"body": "part future proposal highly discourage use inheritance way provide extensions composition powerful pattern code reuse", "d": "5/2014"}, {"body": "first instinct would say use exactly one directive nested updates", "d": "5/2014"}, {"body": "something fiddeling finished might interesting alternative avoids use directives favor regular manipulation", "d": "5/2014"}, {"body": "lots interest coming better user solutions problem right experimenting using json paths alternative example would set new value according existing path path exist possible build correct nodes object array according json schema available instead trying combine multiple update operations single line think best different mecanism batchingtransacting multiple operations desired", "d": "5/2014"}, {"body": "go check however remove pr dependency necessity validate nodes right type nt fewmany parent guess could also check parentnode indeed correct parent node ie node expected one", "d": "5/2014"}, {"body": "well perhaps could still check react node cache seen people get confused trying integrate react external sortable plugin plugin moves nodes around react ca nt find right ones", "d": "5/2014"}, {"body": "spicyj yeah definitely mentioned really given node nt cache evaluate usual expected children node types nt match including count order error default node cache tagged check parent make sure correct one nothing else think since elements would pretagged today", "d": "5/2014"}, {"body": "last time checked still place experimental features might get rolled core think pull", "d": "5/2014"}, {"body": "would need make call pulling library external repo", "d": "5/2014"}, {"body": "zpao autorisation create repo githubreactjs otherwise feel free submit pr", "d": "5/2014"}, {"body": "testutils currently tight integration react ca nt quite pulled sane way moving towards yet reactwithaddons separate build react distributed accessible going close better overall story pulling addons", "d": "5/2014"}, {"body": "thanks bower mention community followget touch follow testing progress big fan things testing like help bring learned ember community option", "d": "5/2014"}, {"body": "bug fixed docs update nt necessary", "d": "5/2014"}, {"body": "known bug prs open possible fixes like", "d": "5/2014"}, {"body": "nt heard anything like ca nt really help debug without information things consider clicks fail register events page work clicks fail work entire page load work intermittently single page load closing nt really actionable email group stack overflow would probably better place get help unless make small reproducible test case showing bug react", "d": "5/2014"}, {"body": "emroot safe side react listens events external event listener calls react wo nt receive", "d": "5/2014"}, {"body": "syranide def playing stoppropagation sure reproduce still happens randomly happened right trying debug reacttools chrome one tab bug clicking button wo nt anything one without though see listeners pages state however dig see inspector id value different click issue deleted screenshots since nt really public issue found without click issue deleted screenshots since nt really public issue found probably something wrong keep looking thanks responses code fyi", "d": "5/2014"}, {"body": "idea nt belong react least perhaps react dev tools adds anyway intuitively see two potential issues buttons stop working otherwise would assume stops working since send model props sure nt logic problem side prevents updating view try logging actual onclickhandler", "d": "5/2014"}, {"body": "yup buttons stop working higher component thisforceupdate model change triggered gon na try logging see", "d": "5/2014"}, {"body": "trying log onclick handle noticed nt call function wo nt output anything hum really helping guess haha", "d": "5/2014"}, {"body": "ok really weird assume public link could look perhaps", "d": "5/2014"}, {"body": "actually think found issue react related sorry use private bootstrap airbnb dropdownjs code happening click issue happening inside dropdowns think culprit", "d": "5/2014"}, {"body": "actually moved href inside dropdown drag drop console click work fine", "d": "5/2014"}, {"body": "yeah would problem react listens events external use prevents react seeing event would like react expose event handling manually subscribe element possible moment binding unbinding work though", "d": "5/2014"}, {"body": "awesome thanks tip", "d": "5/2014"}, {"body": "underscore front name suggests private react use code current way get reference mounted children instance use ref wrap another div hope helps", "d": "5/2014"}, {"body": "actually using example pinpoint problem inserting intermediate unfortunately violates assumptions eg css layout nt work svgs etc", "d": "5/2014"}, {"body": "sorry way right get ref children passed may possible using clonewithprops", "d": "5/2014"}, {"body": "thanks following actually following mentioning nt already get via following least seems work example coffeescript perhaps pitfalls using nt documented also random experimentation suggests least one way actually get dom node using passthrough component without extra coffeescript passthrough reactcreateclass render gt propschildren wrapper reactcreateclass render gt rdiv passthrough ref handle propschildren rbutton onclick gt consolelog refshandlegetdomnode inspect dom", "d": "5/2014"}, {"body": "ah yes right counts", "d": "5/2014"}, {"body": "straightforward solution would simply mark react unstable state simply shut would deterministic least seems like surgical tryfinally able take care issues would want keep hot code though probably could nt", "d": "5/2014"}, {"body": "would nice one misbehaving component nt break whole page guess careful make happen sure added tryfinally calls would significant cost hopefully though general case dom manipulation throw throw asynchronously think web workers error recovery might always possible", "d": "5/2014"}, {"body": "return null mounted reacttestutils nt make sense", "d": "5/2014"}, {"body": "case used original instance one returned", "d": "5/2014"}, {"body": "ignore", "d": "5/2014"}, {"body": "upgrade version", "d": "5/2014"}, {"body": "thanks much seems npm upgrade npm g nt work windows suspect nodejs msi reinstall update npm either deinstalled nodejs deleted things named node npm reinstalled nodejs get npm still get following nt seem fatal npm http get npm http npm warn optional dep failed continuing hawk npm err error enoent lstat f webreposothersreactnodemodulessaucetunne lnodemodulesrequestnodemodulesformdatanodemodulescombinedstreamtest npm err need help may report entire log thanks", "d": "5/2014"}, {"body": "sure deal run problems please report back", "d": "5/2014"}, {"body": "mixins first intuitive normally people write specs experience least", "d": "5/2014"}, {"body": "hi thanks mention like take nobody minds agree spicyj calling mixins first intuitive", "d": "5/2014"}, {"body": "gaearon go let know questions happy help", "d": "5/2014"}, {"body": "ok great try tomorrow", "d": "5/2014"}, {"body": "zpao spicyj mention something else take liked although task small scope introduced way actually works spec transforms component instance would cool could take small tasks areas rendering batching introduce areas", "d": "5/2014"}, {"body": "believe already happens let know nt", "d": "5/2014"}, {"body": "already", "d": "5/2014"}, {"body": "add emit console warning assume wanting use devonly behavior dev prod little weird", "d": "5/2014"}, {"body": "want sebmarkbage plans one idea recently bit tricky transferpropsto whatever instead might props need passed even nt consume eg renders want make even though nt explicitly say uses", "d": "5/2014"}, {"body": "syranide tangential discussion ultimately skip proptype checks prod slow perform every update ca nt use invariant different runtime behavior dev vs prod", "d": "5/2014"}, {"body": "convinced ca nt use invariant prop types dev especially given implementation warning aggressive", "d": "5/2014"}, {"body": "zpao spicyj tangential discussion agree state opinion agree different behavior dev prod bad warnings easily missed something nt provided error please tell nt see differently asserts usually shipped prod stops execution fail dev error exists dev nt really issue helpful error exists prod huge red flag", "d": "5/2014"}, {"body": "fixed unfortunately missed release", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "facebookesprima merged close version bump", "d": "5/2014"}, {"body": "sorry differ merge code example would helpful", "d": "5/2014"}, {"body": "heyo misread invariant thanks", "d": "5/2014"}, {"body": "oh man day misread invariant need caffeine example talking thinking adding directive thoughts", "d": "5/2014"}, {"body": "understand correctly want something like right", "d": "5/2014"}, {"body": "yes would one way get behavior thinking simply like replaced would handle use case well might bit flexible", "d": "5/2014"}, {"body": "problem nt really work intuitively use set primitives", "d": "5/2014"}, {"body": "problem seems called means callback executed immediately rather queued new state", "d": "5/2014"}, {"body": "fixes", "d": "5/2014"}, {"body": "merged work master", "d": "5/2014"}, {"body": "could add", "d": "5/2014"}, {"body": "note already present", "d": "5/2014"}, {"body": "hmm seems like probably master expecting error let em verify maybe already fixed", "d": "5/2014"}, {"body": "yes noticed otoh able reproduce issue master", "d": "5/2014"}, {"body": "ca nt quickly upgrade master tool seems drastically changed looks like code closing", "d": "5/2014"}, {"body": "added", "d": "5/2014"}, {"body": "less react think whitespace tool repo automatically upgrades files produce identical output newer versions", "d": "5/2014"}, {"body": "available npm", "d": "5/2014"}, {"body": "log thistypedisplayname something distinguish two rendercomponent calls", "d": "5/2014"}, {"body": "updated makes sense id sent wrong", "d": "5/2014"}, {"body": "believe intended context follows owner hierarchy meaning b get context nt create b", "d": "5/2014"}, {"body": "way overcome restriction whole context feature kind useless way di reliably", "d": "5/2014"}, {"body": "pass function create instead passing instantiated components prop", "d": "5/2014"}, {"body": "yeah noticed experimenting raw fields plain numbers value becomes go ahead recommend personal solution throw everything window implement less browser weirdness get style", "d": "5/2014"}, {"body": "syranide yeah planning side lose numeric keyboard mobile devices though", "d": "5/2014"}, {"body": "nonreact apps used successfully options caveats nt know pattern supported react though", "d": "5/2014"}, {"body": "jefffriesen supported also really good know thanks", "d": "5/2014"}, {"body": "without intending come across offensive misunderstood basic principle javascript always immediate functioncall ie sets return value really want return value new function called actually calls short replace", "d": "5/2014"}, {"body": "haha oh right silly thanks", "d": "5/2014"}, {"body": "bring valid issue escaping backslash would possible could introduce far serious issues actually want followed basically solution proper implementation would fully support escaping nt really mesh html imho simplest solution one pretty certain devs advocate well rather", "d": "5/2014"}, {"body": "yeah quoting plain js string way let us know poses problem somehow", "d": "5/2014"}, {"body": "hey spicyj sadly makes tags css blocks impossible embed jsx worked way around putting css property proof concept ish components", "d": "5/2014"}, {"body": "rickwong really want inline really nt recommend use instead define css string elsewhere", "d": "5/2014"}, {"body": "hehe inline makes component selfcontained almost comparable jsx inline html work around utilize optimal looks like crap instead template problem solution create tags invalidate css syntax", "d": "5/2014"}, {"body": "jsx ie inside tags support jsstyle comments treated inline text really equivalent jsx escape characters thisstatevalue", "d": "5/2014"}, {"body": "use javascript comments wrap comment curly braces jsx escape characters thisstatevalue", "d": "5/2014"}, {"body": "closing dupe", "d": "5/2014"}, {"body": "problem thanks reporting", "d": "5/2014"}, {"body": "upgrade npm error go away", "d": "5/2014"}, {"body": "yes fixed problem thank much", "d": "5/2014"}, {"body": "thanks closing dupe", "d": "5/2014"}, {"body": "ah yes searched first pardon git able work around wiring tooltips componentdidmountcomponentdidupdate looks nicer", "d": "5/2014"}, {"body": "problem thanks reporting", "d": "5/2014"}, {"body": "happens reactdominput secretly composite component instead pure dom component like div span unsure correct behavior benjamn sebmarkbage opinions", "d": "5/2014"}, {"body": "expected nt work currently closing dupe", "d": "5/2014"}, {"body": "thanks quick response perhaps api documentation clarified maybe signature certain cases reactcomponent valid param note included", "d": "5/2014"}, {"body": "good idea done", "d": "5/2014"}, {"body": "would nt actively mess expected behavior though ie scripts might longer loaded", "d": "5/2014"}, {"body": "jsx transformer scripts already loaded think using settimeout places code ka integrated properly build process necessary", "d": "5/2014"}, {"body": "yea already broken nothing could really worse", "d": "5/2014"}, {"body": "fixes", "d": "5/2014"}, {"body": "oops yeah weird", "d": "5/2014"}, {"body": "ah thought supported attributes converter would parse correctly", "d": "5/2014"}, {"body": "merges hmm think labeled little weirdly supposed paste html left ie see becomes jsx right think nt really make sense", "d": "5/2014"}, {"body": "issue partially supported jsx needed use converter check something large block markup correctly fixed problem spit aforementioned attribute nt supported", "d": "5/2014"}, {"body": "yea labeled weirdly pasting html left probably leave case intact unrecognized attributes cc", "d": "5/2014"}, {"body": "input field nt labelled live jsx editor initially built page guess recent change think issue classname attribute html jsx converter uses browser html parsing normalises case attributes could specialcase always gets changed alternatively use full proper html parser nt initially due time constraints", "d": "5/2014"}, {"body": "fail cc azich", "d": "5/2014"}, {"body": "never mind already master branch easy enough implement asyetunreleased fix end", "d": "5/2014"}, {"body": "understanding react actually bad idea consider component black box especially secretly reaches parent really nt reach parent additionally way reach parent also means ca nt easily use nt know previous state parent technically violate reacts flow rules violating flow rules react intended used verbosity actually feature makes obviously clear going allows intervene ever want work differently reuse components anyone look code understands ways ease pains though bunching relevant properties object pass components simply one nonblackbox property required control inputs readable extensible reusable required fix parentchild relationship another possibility contexts really documented yet think understand purpose correctly situations like also unless mistaken nt really propagate yet sure useful issue yet perhaps would possibly identical propsasobject solution", "d": "5/2014"}, {"body": "hi right meaning verbosity true someone else helpful understand going however perceive form textfield datefield etc one well documented library verbosity becomes annoying unwanted garbage remember change every time parent component changes internally heard somewhere contexts still nt know exactly could share link info grateful anyway still believe improving communication oneway course parent child necessary come better idea share naturally example one could satisfy nt hide anything shorter", "d": "5/2014"}, {"body": "question would following make sense usecase variation twoway binding could also implement twoway binding", "d": "5/2014"}, {"body": "real use case already something similar formfn function read set parent variables works wanted something shorter less verbose like previously proposed", "d": "5/2014"}, {"body": "hello try use undocumented child context childcontexttypesgetchildcontext inside parent contexttypes child level get data thiscontext childcontexttypes contexttypes proptypes", "d": "5/2014"}, {"body": "thank take look", "d": "5/2014"}, {"body": "closing context likely solve problem done", "d": "5/2014"}, {"body": "repro jsfiddle", "d": "5/2014"}, {"body": "ca nt repro", "d": "5/2014"}, {"body": "fond idea bundling though many reasons really useful able leave ugly workarounds past may write code needs reusable component ecosystem would affected would longer able rely shimsham fully available end people preemptively putting necessary shimsshams reusable component", "d": "5/2014"}, {"body": "probably dev build emit informative warning browser console shim required available", "d": "5/2014"}, {"body": "andreypopp", "d": "5/2014"}, {"body": "andreypopp", "d": "5/2014"}, {"body": "really", "d": "5/2014"}, {"body": "nt understand last comment jsfiddle using camelcased tried minheight still update clicking", "d": "5/2014"}, {"body": "minor nitpick think preferred way updating props calling node checked spicyj preferred way", "d": "5/2014"}, {"body": "replacing setprops setstate makes work", "d": "5/2014"}, {"body": "please nt call setstate outside component currently possible really private method state internal props external case height controlled state gets initial value props correct solution would use props specify getdefaultprops returns", "d": "5/2014"}, {"body": "specific post exact error message encountered", "d": "5/2014"}, {"body": "run got changing job pretty well", "d": "5/2014"}, {"body": "fix", "d": "5/2014"}, {"body": "guessing fixed", "d": "5/2014"}, {"body": "yes intended want control use reacttransitiongroup directly", "d": "5/2014"}, {"body": "would nice could fail tests actually fail time like seem often", "d": "5/2014"}, {"body": "cc chenglou", "d": "5/2014"}, {"body": "closed favor", "d": "5/2014"}, {"body": "ca nt immediately repro see source traverseallchildrenjs intent certainly treat single child array could post jsfiddle jsbin would helpful either case nt hard use nightly", "d": "5/2014"}, {"body": "tried repro ca nt however exists somewhat unintuitive problem wrap cases another array logic dictates result nt would assume problem seeing although thinking possible fix removing onechild specialcase react might unlikely", "d": "5/2014"}, {"body": "closing gaearon repro let know", "d": "5/2014"}, {"body": "syranide correct problem due nested array nt realize actually putting one array inside simplest repro repro exactly came problem accidentally introduced extra depth inner component one item special case broke spicyj design right makes sense taken account exactly depth inside array tried flatten arrays nested could clash maybe could document keys section immediately obvious work nested arrays depthposition matches exactly", "d": "5/2014"}, {"body": "gaearon yeah unfortunate sideeffect optimization component given one child points directly child given multiple children array children inorder optimization successfully reuse first child constructs node ids ignores outermost array one going one child many children nt affect id however probably imagine applied outermost array want arraydepth matter mentioned behaves differently even though logic says nt nt looked assume issue present afaik made intentional decision go way avoids unnecessary allocation cases single children makes behavior arrays objects children really rather unintuitive thinking problem briefly solution see keeping optimization would add simple logic detect entry goes component array array components vice versa updating id case currently feasible given another pr two might convinced would good idea", "d": "5/2014"}, {"body": "syranide sure understood correctly let rephrase react warn node definition jsx jumps levels like javascript render function var node useful cases novice user expect react understand node moved updown level whereas react nt support behavior would also catched previous use case different level nested arrays suggesting challenges make difficult implement potential false positives", "d": "5/2014"}, {"body": "gaearon keys react considered uniquereusable within container rendered inside etc see reused anywhere inside spot jump exists understanding things moving around without keys either reused destroyed put inside another div span array object unmounted destroyed new instance created mounted new place keyless components react given implicit key equal index among children parent meaning see none two components reused rendered next time since keys index changed destroyed recreated looking data exists information suggest related switch places", "d": "5/2014"}, {"body": "syranide see limitations current implementation prs seen trying change react finds node component plan get rid would eventually help reconciler understand node moved kind prs necessary solve would awesome react warned also recognized move updown arraycontainer valid operation", "d": "5/2014"}, {"body": "gaearon think misunderstood intent described flaw react designed related say relation inferred derived data contained within previous next snapshot hierarchy react sees nt explicitly add descriptor react explicitly set index component among children behavioraly identical considering render following next would behaviorally identical given snapshot previous next hierarchy react sees following happen destroyed exist next reused exists prev next created exist prev dealing nesting react sees following", "d": "5/2014"}, {"body": "syranide ah okay misunderstood paragraph elaborate thinking problem briefly solution see keeping optimization would add simple logic detect entry goes component array array components vice versa updating id case currently feasible given another pr two might convinced would good idea still questions relation inferred derived data contained within previous next snapshot hierarchy react sees risk suggesting something stupid react see jsx generator could possibly solve jsx generator constrained keeping simple syntax transform talking javascript render function var node translated something like javascript render function var node reactdomdiv uniquekey reactnextuniquekey huge downside sacrificing simplicity transform upside able reason node moving hierarchy", "d": "5/2014"}, {"body": "oh wait totally wrong fact jsx generator would need generate ids compile time really looks much bookkeeping place nowtransparent generator probably good direction still would nt mind separate optional tool processed jsx files amended calls component constructors extra uniqueasinsourcefile key react could recognize better reason nodes runtime", "d": "5/2014"}, {"body": "gaearon given react sets given react sets alternating rendering one without specialcase would reused would technically look like want first child reused react must ignore first array constructing id compensate fact either component array components optimization workaround work inserted array array arrays etc makes sense examples inferring identity something location source work well general imagine helperfunction component creates returns button buttons would although proposed something similar time ago able provide sorts perhaps special key object also scope reference component could move around freely scope used response nt enthustiastic back", "d": "5/2014"}, {"body": "syranide understand thanks taking time explain imagine helperfunction component creates returns button yeah right response nt enthustiastic back discussion web read", "d": "5/2014"}, {"body": "gaearon problem iirc log discussion mostly quick idea part really thorougly evaluated detailed something feel strongly make case say worth giving shot think makes lot sense theoretical perspective basically feature manual constructiondestruction components boast react ca nt", "d": "5/2014"}, {"body": "edit oops sorry wanted edit comment formatting screwed", "d": "5/2014"}, {"body": "problem also animating width time webkittransform last would wrap next line width reached final value would happen transition ends change css works properly example related react way", "d": "5/2014"}, {"body": "ahh struggled problem long someone stack overflow told ask thanks alot", "d": "5/2014"}, {"body": "want control input value probably want use controlled component instead described page need set onchange handler handle changes appropriately", "d": "5/2014"}, {"body": "nt need change handler controls trying edit existing record need populate current values controls case care hit save button end nt common case", "d": "5/2014"}, {"body": "using uncontrolled component also put input manipulate value directly react gives base component build higherlevel abstractions need controlled components applicable asis many scenarios see also", "d": "5/2014"}, {"body": "hmm purpose defavaulvalue appears dynamically set value like following componentwillmount function thissetstate employee name foo bar via ajax call nt work render function input type text defaultvalue thisstateemployeename", "d": "5/2014"}, {"body": "first thanks tip looks like value need set defaultvalue available time component mounts defaultvalue untouched html input value attribute taken react forcing add handler nt require case way populate value fields via ref value manipulation following code works componentdidmount function thisget function data thisrefsnamegetdomnode value dataname bind imagine noise generates form large number fields", "d": "5/2014"}, {"body": "way populate value fields via ref value manipulation also following many state properties form fields", "d": "5/2014"}, {"body": "use value framework warns missing handler input control nt need handlers controls", "d": "5/2014"}, {"body": "ah see curious defaultvalue nt show new state original example tried running instead idea would work worth shot", "d": "5/2014"}, {"body": "defaultvalue read initial render afterwards desired behavior unclear user changed field want blow away changes usually", "d": "5/2014"}, {"body": "bad idea event give chance populate default values event fired first state change transition", "d": "5/2014"}, {"body": "someone types input field ajax call returns unclear seem claim neither controlled components manual dom manipulation work use case", "d": "5/2014"}, {"body": "following code looks unnatural common case like populating exiting entity server think kind code declarative inlined html tags componentdidmount function thisget function data thisrefsfnamegetdomnode value datafname thisrefslnamegetdomnode value datalname thisrefsdobgetdomnode value datadob value another lines", "d": "5/2014"}, {"body": "would operation without react would look roughly right write wrapper around calls make elegant could also create dummy callback pass input fields wanted use value field setstate", "d": "5/2014"}, {"body": "right without react would write similar code", "d": "5/2014"}, {"body": "think move dependencies though little silly either case require people might using browserify install petehunt objections", "d": "5/2014"}, {"body": "nt seem like used code makes npm searched ag occurrences seem inside used build script nt make npm instead btw glad know envify made aware security issues credentials stored environment variables", "d": "5/2014"}, {"body": "used browserify transform building bundle needs required used npm nt belong devdependencies", "d": "5/2014"}, {"body": "yep searched source opposed npm installs", "d": "5/2014"}, {"body": "nonnpm browser builds envify referenced browserify array", "d": "5/2014"}, {"body": "see appears envify transform might noop info perhaps dependency transform removed envify keep used grunt created file ran removed transform ran ran shows output tried making change one source files nodemodulesreact make sure browserify used copy react generated new bundle change registered diff appears javascript npm package nt reference", "d": "5/2014"}, {"body": "see many times resulting file presumably means envify indeed working properly", "d": "5/2014"}, {"body": "fiddled found works processenvnodeenv set set processenvnodeenv development got different result however think better leave envify developer making bundle browserify rather including transform one good place concatenation minification uglifyify think change made good permanent solution issue", "d": "5/2014"}, {"body": "intentional since minified build solely production includes less possible perf still usecase", "d": "5/2014"}, {"body": "see also", "d": "5/2014"}, {"body": "curious use case generator never yields", "d": "5/2014"}, {"body": "common example think koajs var koa require koa var app koa appuse function thisbody hello world applisten also methods might take generators parameters might need pass one nothing except return", "d": "5/2014"}, {"body": "updating esprima make way back eventually", "d": "5/2014"}, {"body": "tested koa example transformed ed fbesprima", "d": "5/2014"}, {"body": "possible circumstances page nt get loaded https fiddles work nt know circumstances everywhere installed ff nt remember anything special chrome perhaps simply browsers nt content security policy somebody reported working chrome mac though previous issue could mistaken", "d": "5/2014"}, {"body": "confirm os x mavericks works safari chrome firefox firefox console", "d": "5/2014"}, {"body": "safari also messages error console warnings errors", "d": "5/2014"}, {"body": "happens jsfiddle nt support https", "d": "5/2014"}, {"body": "neither jsbin simple switching providers luckily chrome firefox desktop allow opt sticky pref seems persist real problem using github pages sites nt default none links either guessing either went wrong page extension used everywhere long time prime suspect much though likely move github pages eventually going close suggestions nt use disable load browser", "d": "5/2014"}, {"body": "right looks like everywhere thought saw redirecting behavior chrome checked mistaken must copied url ff chrome point still surprising issue first github supports redirect works fail afterward", "d": "5/2014"}, {"body": "believe intentional nt fire true false really want one event true true counted essentially getting change event radio group rather individual radio button", "d": "5/2014"}, {"body": "guess makes sense sure ideal dom case docs nt accurate true true issue remains", "d": "5/2014"}, {"body": "agree someone wants tackle would nice changing checked checked nt trigger onchange event also happy accept docs pr make expected behavior clearer", "d": "5/2014"}, {"body": "gaearon interested taking look one right changeeventplugin fires onchange event every receives browser checkboxes radio buttons guess necessary track current value event triggered sort like old ie sure tricky solve explains approximately onchange event currently works text inputs", "d": "5/2014"}, {"body": "spicyj yup interested take look closer weekend ok", "d": "5/2014"}, {"body": "sure rush", "d": "5/2014"}, {"body": "tested android mobile phone chrome yesterday information testing ff today fiddles missing chrome open fiddle mentioned page hand get page turn firebug get following errors blocked loading mixed active content blocked loading mixed active content blocked loading mixed active content chrome blocked page loaded https ran insecure content content also loaded https blocked page loaded https ran insecure content content also loaded https blocked page loaded https ran insecure content content also loaded https seem relevant form content security policy kicking nt kicking others phone", "d": "5/2014"}, {"body": "opened new issue information", "d": "5/2014"}, {"body": "react could technically warn children trying simply valid react use instead", "d": "5/2014"}, {"body": "dunno seems like might reasonably support salier would suggest", "d": "5/2014"}, {"body": "syranide correct though unfortunately even use pretty much need cede control contenteditable browser even flushing updated markup string back would surely break selection state would make contenteditable unusable anyway far tell simple middle ground react contenteditables either got permit full browser control maintain complete ownership everything including selection state spicyj mind support may approaches nt thought", "d": "5/2014"}, {"body": "salier oh right even kind bad idea hehe technically could probably allow implementation similar controlled inputs certain performance would take nosedive quickly read optionally write change voiding usefulness could avoid performance nosediving seriously interesting potential nt see reality end fairly certain even could made work performant would nt even make sense part react core would turned huge project sure really interesting potential core", "d": "5/2014"}, {"body": "nt solution mind merely meant seems odd rendering simple contenteditable component letting user interact causes react throw errors one thing considered using render children though unsure prevents real use cases work better maybe warn call day", "d": "5/2014"}, {"body": "think problem react dev tools initialize react initialized making pollute environment sure react used seems unpreferable documentation linked targeting installation page definitely good idea use general far aware acceptable solution problem nt involve manually disabling message", "d": "5/2014"}, {"body": "ever cases need different attr configs based attribute node like input hope", "d": "5/2014"}, {"body": "edit nevermind idiot element whole reason suggested first place reason subdividing would cleanliness reference documentation lists attributes per type think little practical reason spicyj must attribute property fairly certain special like could treated special case list attributes per ie", "d": "5/2014"}, {"body": "tomocchino talked something like ever since introduced", "d": "5/2014"}, {"body": "cc sebmarkbage benjamn zpao attributes handled properties react attributes supposedly significantly faster properties understand null undefined thus empty state becomes default property show dom setting show dom yay html benchmarking shows clear practice clear though slow browsers enormously faster dealing properties properties roughly times faster attributes mixed test roughly middle really interested removing attributes leaves us current implementation roughly faster although slowest appear fare badly good considering even poor churn property assignments attribute removes per second per frame fps per frame couple toggling values explicitly rather uncommon case huge amounts nodes properties would surprised see measurable real life impact switching seems unless tests seriously flawed switching could actually viable would keep dom clean would let us away ugly probing star apart actually faster edge browsers although sadly far slowest browser test call incidentally also solve preferable way even perhaps percentages relative current implementation vs vs respectively ops per second total assignments removes per second column test unless want go allout attributes first column interest", "d": "5/2014"}, {"body": "proper implementation", "d": "5/2014"}, {"body": "consequence leaving dom attribute messing css rules end problem caused leaving", "d": "5/2014"}, {"body": "sebmarkbage different probably exception know least cssrules obvious one guess although extremely rarely used seems legit uses mention pr ff chrome actually faster attribute methods although older browsers suffer slightly still blazingly fast though", "d": "5/2014"}, {"body": "think might make sense several different code paths based browser andor attribute used committing permanent supported solution like clarify common enough problem another reason like treat react props properties rather attributes general htmlsvg web components nt allow complex types attributes support complex types like style class lists custom user data prefer model properties rather attributes property inherently broken dom missing functionality fix casebycase basis ideally behavior react props correspond dom properties instead dom attributes end whatever makes sense", "d": "5/2014"}, {"body": "sebmarkbage proposed solution uses clear nonboolean properties use unless interacts poorly techs mentioned nt seem like use properties would issue", "d": "5/2014"}, {"body": "workaround would allow nonescaped slashes rendered inside href attribute need render working anchor tags node", "d": "5/2014"}, {"body": "ericvicenti escaping react affect anchor may look funny source work exactly", "d": "5/2014"}, {"body": "jest help", "d": "5/2014"}, {"body": "possible fix", "d": "5/2014"}, {"body": "think problem means nt find files reason reacts changes nt functionality provided us explicitly provided npmmodule", "d": "5/2014"}, {"body": "linked question accepted answer closing", "d": "5/2014"}, {"body": "seems like reasonably solved curious though possible somehow cause inputs give anything numbers say manually enter text clear", "d": "5/2014"}, {"body": "personally fan specialcasing common operations operation going fast enough isolation increase complexity react easily find situations algorithm suddenly performs significantly worse apparent reason common operation matched uniformly slow preferred imho way actually reason performance application easily argue ways improve performance becomes problem imagine would quite cheap make current algorithm least directionneutral would solve biggest flaw imho important quality algorithm simplicity terms able understand result also plievone mentioned ever want actually support iframevideoaudoobject also needs aware nodes must nt move", "d": "5/2014"}, {"body": "fixed", "d": "5/2014"}, {"body": "see also", "d": "5/2014"}, {"body": "though kind unrelated personally would isolation lot cases becomes quite tedious visual annoyance able avoid without declare locally start every render would nice", "d": "5/2014"}, {"body": "note potential hazard pending state callbacks refer updated new references locally closures closures get access pending state likewise issue occur partial reconciliation think possible issue thisprops thisrefs nt case top head", "d": "5/2014"}, {"body": "sebmarkbage oh yeah right least allow user object like already assume neat whatever user provides gets like numbers also yeah exact thing would true props nt reuse object", "d": "5/2014"}, {"body": "fixed", "d": "5/2014"}, {"body": "see also publicwebevents list asked behavior", "d": "5/2014"}, {"body": "fixed", "d": "5/2014"}, {"body": "issue already resolved except really", "d": "5/2014"}, {"body": "closing duplicate", "d": "5/2014"}, {"body": "oops dupe", "d": "5/2014"}, {"body": "verify issue also exists chrome pretty certain due event firing documented bug firefox fix could csstransitiongroup", "d": "5/2014"}, {"body": "sure guys ontop intuitively simply listening tab switch treating like sounds like simplest approach", "d": "5/2014"}, {"body": "longer transitions could pose problem switch away tab back transition ended tab away could see long left transition clear end tab still backgrounded", "d": "5/2014"}, {"body": "small amount research done trivial detect end reliably perhaps waiting length transition duration best approach though unsure run lots problems sync actual animation", "d": "5/2014"}, {"body": "back dug issue one thing noted timeout always detects first occurrence problem production code timeout detection tried implement timeouts never got time properly would require getting transition time css require extra params user supply implement timeouts unbind transitionend particular transition timeout fires exploring potential performance issues", "d": "5/2014"}, {"body": "improved error message ago immediate action take", "d": "5/2014"}, {"body": "closing let know still problems", "d": "5/2014"}, {"body": "sorry nt written anymore eventually managed transition child way way component animated mount feel somehow hackish adds unneeded logic components still convinced cleaner way component animate mounting possible previous react thanks", "d": "5/2014"}, {"body": "running issue workaround mentioned unfortunately nt fix tests module bkonklecastaway clienttestscomponentscastawayappcoffee coffeescript nt thing compiles tips try next", "d": "5/2014"}, {"body": "setup work make sure passes machine adjust needs topic compiled coffeescript unreadable mess syntax highlighting gets even worse", "d": "5/2014"}, {"body": "bkonkle also require castawayapp beforeeach section since depends react want require time test passes run mocha", "d": "5/2014"}, {"body": "point taken syntax highlighting moved gist highlighting would work spicyj good catch exactly problem test passing grin", "d": "5/2014"}, {"body": "running problem even though using jsdom dom api rendering components string node mount run simple unit tests reason react required inside beforeeach instead globally case ps happens upgrading react works fine", "d": "5/2014"}, {"body": "requiring code top file instead beforeeach fine require react globals present time react required", "d": "5/2014"}, {"body": "need global window document objects even using dom tests nt rendercomponenttostring made need window api thursday may ben alpert notifications githubcom wrote requiring code top file instead beforeeach fine require react window document globals present time react required reply email directly view github best regards ovidiu chereche\u015f", "d": "5/2014"}, {"body": "nt problem using rendercomponenttostring", "d": "5/2014"}, {"body": "jaredly sounds like problem large parts entire app rerendering without shouldcomponentupdate simply costly ends slowing input", "d": "5/2014"}, {"body": "thought single input page nothing else noticeably laggy compared non react input rather underpowered netbook may andreas svensson notifications githubcom wrote jaredly sounds like problem large parts entire app rerendering without shouldcomponentupdate simply costly ends slowing input reply email directly view github", "d": "5/2014"}, {"body": "observed context seems propagate children explicitly created would also like know going change future", "d": "5/2014"}, {"body": "last point assuming mean would nt work domstringmap setting obj nt anything decide likely sharing logic style", "d": "5/2014"}, {"body": "safe try get patched", "d": "5/2014"}, {"body": "feel free take let know questions", "d": "5/2014"}, {"body": "already doable", "d": "5/2014"}, {"body": "fixed believe", "d": "5/2014"}, {"body": "please please", "d": "5/2014"}, {"body": "spicyj close", "d": "5/2014"}, {"body": "spicyj close solved irc btw", "d": "5/2014"}, {"body": "fixed", "d": "5/2014"}, {"body": "spicyj close", "d": "5/2014"}, {"body": "merging", "d": "5/2014"}, {"body": "fixes", "d": "5/2014"}, {"body": "commenting issue first result google exact problem even latest version npm particular issue nt git installed installed git restarted cmd npm install works correctly thanks terinjokes reactjs", "d": "5/2014"}, {"body": "fixed", "d": "5/2014"}, {"body": "gaearon perhaps another one", "d": "5/2014"}, {"body": "spicyj ok", "d": "5/2014"}, {"body": "since change invariant error message tweaks website nt heard much confusion around going close", "d": "5/2014"}, {"body": "yeah using props nice think terms functions thanks", "d": "5/2014"}, {"body": "would love see get attention improvement box would awesome lot work", "d": "5/2014"}, {"body": "think eventually want people build step server rendering ie webpack mode especially people start expressing static asset dependencies statements", "d": "5/2014"}, {"body": "using webpack enough solve thing browserify", "d": "5/2014"}, {"body": "browserify transform automatically activates package need set bundling thus browserify also used bundling server rendering", "d": "5/2014"}, {"body": "dhruvbhatia", "d": "5/2014"}, {"body": "preferred workarounds issue far able avoid children getting stuck placing styling eg inner wrapper child html foo", "d": "5/2014"}, {"body": "jbrantly really nice bit hack course nt invalidate courageous attempts thread think going steal approach sad thing still ca nt", "d": "5/2014"}, {"body": "see think reacttransitiongroup api flexible enough nt need anything", "d": "5/2014"}, {"body": "petehunt also lists good routing model objects integration jquery plugin sortable", "d": "5/2014"}, {"body": "done", "d": "5/2014"}, {"body": "method nt exist", "d": "5/2014"}, {"body": "think docs good enough nt heard much confusion", "d": "5/2014"}, {"body": "made jsfiddle test react seems listening triggering amp whenever occurs focusing slider pressing right browser event react event chrome change safari change chrome canary input change input change firefox input input change ie change firefox triggers blur additionally dragging browser event react event chrome input input change safari input change input change chrome canary input input change firefox input input change ie change browsers trigger drag end editing changeeventplugin listen change events input types appears fix react change amp input event handling browsers make pull request reason plugin listening events file inputs missing", "d": "5/2014"}, {"body": "ran problem trying port widget react someone core give feedback whether eddhannay suggestion wouldwould nt work thanks", "d": "5/2014"}, {"body": "locks would recommend implementing seems like html input elements come bunch inconsistencies hard normalize basically unstyle able", "d": "5/2014"}, {"body": "syranide think attempt support builtin inputs least mostlyreasonably", "d": "5/2014"}, {"body": "spicyj certainly lots weird things ca nt fix like able read value nt strictly numeric etc", "d": "5/2014"}, {"body": "passes routinely travis closing", "d": "5/2014"}, {"body": "please allow touchaction attribute", "d": "5/2014"}, {"body": "closing favor think covers spirit issue", "d": "5/2014"}, {"body": "testutils exposed addons since", "d": "5/2014"}, {"body": "addon", "d": "5/2014"}, {"body": "charuru working reactive version jade write ready smileycat", "d": "5/2014"}, {"body": "ca nt reproduce windows line endings os x machine windows closing", "d": "5/2014"}, {"body": "spicyj think happens happens mixed unixwindows although nt seen long time really looking would surprised accidentally fixed", "d": "5/2014"}, {"body": "ca nt repro mixed endings either", "d": "5/2014"}, {"body": "given trips people instead consistent dom consistent html support alllowercase attributes go back docs issue autocomplete attribute writing something looks like html work like html otherwise inconsistency consistency", "d": "5/2014"}, {"body": "agree would preferable attributes mapped", "d": "5/2014"}, {"body": "nt think much improve closing", "d": "5/2014"}, {"body": "apart ugliness see one problem approach guess right apple engineers fact disabled click event delegation memory considerations workaround create new memory problems lots lots divs must become clickable helped event delegation simply must work click event bruteforce expense memory bad safari iphone alternative force mobile safari since ca nt see cursor one care exist element clickhandler keep us away issue think play nice style though might trivial", "d": "5/2014"}, {"body": "actually possible messing around seem get work array children", "d": "5/2014"}, {"body": "never mind wrong future problem havers need remove elements inside csstransitiongroup csstransitiongroup", "d": "5/2014"}, {"body": "please allow touchaction attribute", "d": "5/2014"}, {"body": "react needs list properties knows whether use property accessor setattribute changing attribute also convert camelcasing dashcased though critical like make easy configure react custom attributes sorry nt easy right", "d": "5/2014"}, {"body": "still fixed spent hour trying figure wasnt working", "d": "5/2014"}, {"body": "sorry open", "d": "5/2014"}, {"body": "possible massage jsx transforming major issue see would intefere javascript would suddenly different meanings makes quite unappealing imho commenting potential close", "d": "5/2014"}, {"body": "syranide sorry sure understand", "d": "5/2014"}, {"body": "spicyj nt started editing thoughts posting mixed proposing proposal makes sense stand first sentence could probably massage jsx", "d": "5/2014"}, {"body": "nt seem template literals nt bad close maybe drop outer curlies someday", "d": "5/2014"}, {"body": "think made progress double setstate problem using cursorbased approach past discussion also", "d": "5/2014"}, {"body": "related", "d": "5/2014"}, {"body": "say kind related go way", "d": "5/2014"}, {"body": "pr landing jsx member expressions close", "d": "5/2014"}, {"body": "want quickly add using github atom kind highlights syntax within backticks", "d": "5/2014"}, {"body": "ok nt think going extend transformer ways discussed going close people found solutions working different languages", "d": "5/2014"}, {"body": "found appears jsx transformer coffeescript nt tried looks promising anyone tries would great could report back results", "d": "5/2014"}, {"title": "vuejs error closure compiler", "body": "trying bundle vuejs rest code closure compiler getting errors like due automatic semi colon insertion really love vuejs major inconvenience involves hacking build process fit existing bundles", "num": "289", "d": "5/2014"}, {"title": "misbehaving used", "body": "check example alert supposed fire changes keypath however fires changes vm", "num": "288", "d": "5/2014"}, {"title": "looking clarity use vs", "body": "documentation seem roughly thing except allows choose individual property bind plays nice good way look missing something documentation also implies used together hard time imagining would", "num": "287", "d": "5/2014"}, {"title": "remove item list using vrepeat", "body": "based example using vrepeat two collections order add remove base list new list list trying add named list throw uncaught typeerror undefined function also tried use throw exception instead html update item still visible recreate", "num": "286", "d": "5/2014"}, {"title": "vue directive vonly", "body": "saying included imagine nt want throw kitchen sink framework adapted directive fire events given element children calling vuedirective isfn true bind function thiscontext thisbindingisexp thisvm thisbindingcompilervm update function handler typeof handler function return unbind function thiselremoveeventlistener thisarg thishandler", "num": "285", "d": "5/2014"}, {"title": "lazy model updating working array elements", "body": "lazy model updating work elements array loop elements updated every key press instead field loses focus sure something wrong could nt find explanations behavior docs bug expected behavior expected workarounds issue example code", "num": "284", "d": "5/2014"}, {"title": "component renders incorrect initial state", "body": "issue component rendering incorrect initial state created example issue jsfiddle example first run selected incorrectly selected even though value example functions correctly comment line", "num": "282", "d": "5/2014"}, {"title": "veffect remove instantly child vcomponent dom", "body": "hello made jsfiddle explain problem trying create transition using veffect vview modification problem effect starts child components viewmodel created vview directive instantly removed dom tell missing something please", "num": "281", "d": "5/2014"}, {"title": "vview refresh", "body": "trying refresh current view destroy create current state appmainview editor appmainview null appmainview editor nothing happens use settimeout work look jsfiddle right way refresh current view", "num": "280", "d": "5/2014"}, {"title": "support bracket notation vmodel directive", "body": "way support following use case binding html one limitation properties defined beforehand binding values seems would solve part second problem current vmodel directive support assigning expression brackets syncing model view works fine way around", "num": "279", "d": "5/2014"}, {"title": "support setting priority vstyle directive", "body": "currently rule ignored least instead assigning vstyle directive could parse string ending use", "num": "278", "d": "5/2014"}, {"title": "methods binded component got undefined", "body": "coffee vue require vue vuecomponent login template tllogin data methods str x gt jsonstringify x began run code compilation found code running online usage docs talked", "num": "277", "d": "5/2014"}, {"title": "venter never appended", "body": "edit venter according found online applied split second long enough trigger animation original content running vtransition enabled vleave appended classlist leaving element venter applied newly created element tested examples provided well notice bug increased transition delay could watch effect see view vleave old element view new element obviously breaking transitions also tried appending enterclass leaveclass vueconfig notice behaviour anyone else experienced know going unfortunately let know working versions vue new framework loving thanks excellent framework", "num": "276", "d": "5/2014"}, {"title": "vattr attribute empty value", "body": "sometimes want attribute empty value instance selectbox first option current attr directive removes attribute empty value", "num": "275", "d": "5/2014"}, {"title": "multiple clauses directive one instance element", "body": "would nt nice variation directive one instance element bind unbind would called update clause im trying would like create validator directive like bind would attach event listeners keyup change update would set validators need run change unbind would remove event listeners currently directive clause become instance validator clauses become separated needed result together element idea solve", "num": "274", "d": "5/2014"}, {"title": "using data attributes", "body": "hi good reason nt go data attributes invent standard addition search crawlers index data attributes values", "num": "273", "d": "5/2014"}, {"title": "documentation remove etc", "body": "even though figured reading source code would helped lot documentation functions remove", "num": "270", "d": "5/2014"}, {"title": "construction parameters views", "body": "working eventbased approach passing parameters new components even though somewhat cumbersome working fine today discovered approach used everywhere though implementing routing dispatchjs application created div directive mapped currentview broadcasting event vm owning directly setting value appropriate view possible due fact view initialised yet eventbased approach clean anyway would prefer possibility initialise view construction parameters would passed callback", "num": "269", "d": "5/2014"}, {"title": "directives evaluated observing elements", "body": "use case requires inject html code via vhtml works fine done receive data asynchronously changing respective field data correctly updates dom fails bind new directives example show alert message", "num": "268", "d": "5/2014"}, {"title": "vmodel delay update data", "body": "look example delay data properties update something wrong", "num": "266", "d": "5/2014"}, {"title": "vue directive vone", "body": "add vone directive make pull request agree", "num": "265", "d": "5/2014"}, {"title": "attached triggered binding property already true", "body": "made jsfiddle see problem basically set true hash false set true later component binded instanttruthy value call attached whereas properly call hook missing something bug", "num": "264", "d": "5/2014"}, {"title": "google autocomplete box keypress event nt fire", "body": "gmaps autocomplete functionality works give dom node input text listens adds element select suggestions input element wo nt work since hitting enter element body tag workaround", "num": "263", "d": "5/2014"}, {"title": "completely destroy", "body": "hi evan way completely destroy vue component instance usecase imperatively created component instance job removed stuck remove phase selfexplanatory filldle thank time", "num": "260", "d": "5/2014"}, {"title": "opportunity send data variable filter", "body": "example pass filter variable data without declare way filter", "num": "259", "d": "5/2014"}, {"title": "minor bug svg example ca nt remove stat", "body": "remove function needs use splice stat index instead per fiddle cheers", "num": "258", "d": "5/2014"}, {"title": "vrepeat component", "body": "ca nt understand component would nt work vrepeat", "num": "257", "d": "5/2014"}, {"title": "computed value object", "body": "hi set computed value object changing time example current set one items inside list array would like computed value fullname current object updated change first last saved object finish editing get object like posible", "num": "256", "d": "5/2014"}, {"title": "select element vmodel vrepeat options", "body": "hi following problem select element set vmodel vrepeat option element select shown points wrong option select shown show button clicked group ca nt set ready event would nt better case select element always first resolve inner elements vrepeat vmodel", "num": "255", "d": "5/2014"}, {"title": "make build process easier find", "body": "tendency checking new clientside js project try find built usually checking build tool packagejson one saw component support nt know used build found page docs include component command gruntfilejs add default task think easier people discover see also add support building everything single command", "num": "254", "d": "5/2014"}, {"title": "parsing error using namespace prefix", "body": "write template like error warning thrown", "num": "253", "d": "5/2014"}, {"title": "single curly brackets delimiters", "body": "hi since vue set custom delimiters write template like html title like code html title mean using single double curly brackets delimiters like rivetsjs thank vuejs", "num": "252", "d": "5/2014"}, {"body": "used registering child vm parent vm property name suggests provides reference child parent access directly used inheriting data parent child serves totally different purpose", "d": "5/2014"}, {"body": "created fiddle code sure whether bug remove function click add item multiple time added item set position however click remove click add item added list although item removed dom shows item actually removed list dom updated", "d": "5/2014"}, {"body": "using need supply appropriate css rules see transition effects documentation since missing css rules vue never notified transition finished thus element nt get removed dom section documentation happens removing element directive show becomes false vuejs apply vleave class element trigger transition wait transition finish listening event remove element dom remove vleave class", "d": "5/2014"}, {"body": "thanks quote updated fiddle adding css rules works", "d": "5/2014"}, {"body": "thank much see problem code read documentation thorough", "d": "5/2014"}, {"body": "due vrepeat instances inheriting lazy option parent easy fix", "d": "5/2014"}, {"body": "excellent thanks", "d": "5/2014"}, {"body": "implemented rough fix work given example let know still happens situations", "d": "5/2014"}, {"body": "actually nested child component removed instead vview fixed", "d": "5/2014"}, {"body": "thanks evan works nicely", "d": "5/2014"}, {"body": "think read somewhere docs updates append quickly vue wo nt notice changes batched within event loop use vuenexttick like fixed fiddle also sure needed explicity call creating component second thing aware hook using triggered vview variable change first time use", "d": "5/2014"}, {"body": "basically ayamflow said docs", "d": "5/2014"}, {"body": "oh see feature needed current use case attributes static enough produce right bindings html", "d": "5/2014"}, {"body": "sounds like good idea", "d": "5/2014"}, {"body": "jiyinyiyong value need stringified already also use case like would definitely use computed properties", "d": "5/2014"}, {"body": "brandonjpierce yes problem running supposed frank try step vue could nt find wrong another method another component works readlly hard believe", "d": "5/2014"}, {"body": "defined component twice one empty definition causes error", "d": "5/2014"}, {"body": "stupid mistake gt lt request warnings duplicated component definitions one writes skeleton project tends copy code inlitialize views problem may occur hard get infomation back code closing", "d": "5/2014"}, {"body": "actually issue could never figure enter leave animations nt fire using vview templates use vrepeat animations nt fire simple slide items page back would end quick bounce using vrepeat changing vrepeat full template including individual item array events fire items slide page new ones slide one appears issue vrepeat templates used along vtransition vview could someone please verify thanks", "d": "5/2014"}, {"body": "fiddle demonstrating issue menu vrepeat transitioning others animations fire menus using vrepeat animations jsfiddle", "d": "5/2014"}, {"body": "looks like bug take closer look time possible nice minimal fiddle better isolates issue", "d": "5/2014"}, {"body": "yeah produce one really quick copyedit code using display note rewrote app using static templates read vrepeat vanimation vtransition work using vrepeat vanimation works reason vleave transitionend nt appear caught using vrepeat even though vanimations fired using vrepeat template destroyed well vrepeated items inside container vleave added could nt figure even vanimations nt working set animation noticed drawing blank div upon inspection noticed vrepeated items deleted vleave appended basically rendering useless anyways angular ember ractive etc remove elements leave event completed something note besides issue vrepeat love total simplicity vuejs hope continued development cheers", "d": "5/2014"}, {"body": "fixed underlying cause issue example would still need css changes work properly though", "d": "5/2014"}, {"body": "thank already applied necessary css fixes posting fiddle needed absolute position container etc reason browserify nt create require function using standalone option set vue managed compile working copy dev branch working thus far vanimation vrepeat rewrite code prefer vtransition need keyframes post results thank", "d": "5/2014"}, {"body": "vtransition also works flawlessly thank patch", "d": "5/2014"}, {"body": "mean selectbox first option could give arbitrary value since nt matter value", "d": "5/2014"}, {"body": "found easiest solution add empty value nothing selected directly html like adding empty value options would result option without value attribute text would become value", "d": "5/2014"}, {"body": "also concern validator vuejs forked vuevalidator developing validator interesting please check project", "d": "5/2014"}, {"body": "great kazupon useful", "d": "5/2014"}, {"body": "thelinuxlich thanks project still wip please take note", "d": "5/2014"}, {"body": "way directives designed nt really allow happen possible create custom dsl filter arguments like kazupon take vuevalidator", "d": "5/2014"}, {"body": "use overwrite v", "d": "5/2014"}, {"body": "avoid potential conflicts using attributes still need prefix everything unnecessary verbosity obvious benefits vuejs removes directive attributes compiling rendered markup clean tidy etanxing said", "d": "5/2014"}, {"body": "vuejs removes directive attributes compiling rendered markup clean tidy well vuejs works html parsed browser means contains invalid attributes ok ca nt change know bit thank", "d": "5/2014"}, {"body": "think pretty selfexplanatory", "d": "5/2014"}, {"body": "well found documentation slightly confusing nt understand term target element referred vm also backticks obvious mean variable usage examples would also made documentation clearer", "d": "5/2014"}, {"body": "behavior jquery counterparts assume people know feel free submit pr doc site", "d": "5/2014"}, {"body": "mix additional properties construction option object entire object available vm example", "d": "5/2014"}, {"body": "well solve problem described depending route assign different strings could pass value", "d": "5/2014"}, {"body": "oh ok misunderstood problem updates asynchronously like directives emit events", "d": "5/2014"}, {"body": "tindzk ran similar problem recently solve method called main app changes value also property used send initialization parameters section component section dispatch event passing section id section instance handled main app handler simply extends sure fit needs clear let know", "d": "5/2014"}, {"body": "good idea certainly work used similar approach parts application long run would glad could better technique specifying construction parameters views think proposal pass parameters rafaelrinaldi understand solution correctly really different maintaining global variable", "d": "5/2014"}, {"body": "getting data asynchronously would recommend promise based approach instantiate vue instance received data ready method used vue compiled bindings real code get idea", "d": "5/2014"}, {"body": "contents inserted asis without compilation insert gets compiled rest template insert compilation already happened wo nt get compiled", "d": "5/2014"}, {"body": "reasons decided behaviour better performance would like see way flagging field update results directives parsed brandonpierce thanks looks like good workaround tell wrong", "d": "5/2014"}, {"body": "designed inserting static html want swappable dynamic content turn components use", "d": "5/2014"}, {"body": "still entirely convinced supposed work like fine workaround brandon suggested fiddle work use rather see working version would great could extend section accordingly people similar problem find solution quickly", "d": "5/2014"}, {"body": "tindzk also another route take turning directive component application flow would roughly like following javascript function promisefunc ajax data return promise vuecomponent foo data ajaxdata promiseall promisefunc function instantiate vm instance new vue working example found", "d": "5/2014"}, {"body": "similar example", "d": "5/2014"}, {"body": "change place everything works fine", "d": "5/2014"}, {"body": "pass method model binding", "d": "5/2014"}, {"body": "example nt work correct variant nt work brandonpierce", "d": "5/2014"}, {"body": "dmfilipenko", "d": "5/2014"}, {"body": "brandonpierce nt work", "d": "5/2014"}, {"body": "common pitfall events triggered synchronously updates applied asynchronously via first example handler function called updated data", "d": "5/2014"}, {"body": "also tripped behaviour surely sequence directives nt matter recommended way getting uptodate model value event listener equivalent vue angularjs apply use run digest cycle manually well batched update feature vue something like apply nt make sense though", "d": "5/2014"}, {"body": "ospatil unfortunately order matter cases mostly two way bindings like changes queued yet applied reliable way wait next event loop", "d": "5/2014"}, {"body": "closing expected behavior", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "like bind event", "d": "5/2014"}, {"body": "vonce sounds better", "d": "5/2014"}, {"body": "nt vonce keep vone president", "d": "5/2014"}, {"body": "agree wryk marfalkov sounds better think", "d": "5/2014"}, {"body": "use case could help see scenario would need without modifying something else eg hiding clicked element example", "d": "5/2014"}, {"body": "intended event triggered state element changes already attached beginning fire", "d": "5/2014"}, {"body": "ah thought would nice place setupclean things time node added dom like mediator dom events guess set variables false instantiation update hook viable solution thanks", "d": "5/2014"}, {"body": "use events instances fire even true startup", "d": "5/2014"}, {"body": "worried two vm one dom one disabled subscribe mediator event disabled one might fire unwanted method ahah moment vif totally deletescreates vm instance boolean update right subscribe mediator cleanup trick", "d": "5/2014"}, {"body": "yep use also vm destroyed listeners registered removed automatically", "d": "5/2014"}, {"body": "nice try close thanks followup", "d": "5/2014"}, {"body": "gmaps provide api listen enter event select suggestions might manually", "d": "5/2014"}, {"body": "closing due inactivity", "d": "5/2014"}, {"body": "hi zheneva use delete operator variable javascript properties eg write browser javascript evaluate work however jsfiddle wrapping code function therefore variable local function want deallocate really good news javascript", "d": "5/2014"}, {"body": "nt vote best way small helper inside filter get value path", "d": "5/2014"}, {"body": "use", "d": "5/2014"}, {"body": "filter arguments always passed plain strings retrieve value keypath nt exist current vm recursively fallback try parent", "d": "5/2014"}, {"body": "greate thanks", "d": "5/2014"}, {"body": "oops thanks catching fact changing api change forgot update example", "d": "5/2014"}, {"body": "dmfilipenko try add vuejs fiddle external resources", "d": "5/2014"}, {"body": "marfalkov seems post old link correct", "d": "5/2014"}, {"body": "dmfilipenko hope helps", "d": "5/2014"}, {"body": "marfalkov thanks", "d": "5/2014"}, {"body": "computed properties display persistence case manually compute save data ie making ajax call", "d": "5/2014"}, {"body": "solved using watch first last variable", "d": "5/2014"}, {"body": "hiding showing elements better use vshow instread vif vif instantiates another vm see fiddle", "d": "5/2014"}, {"body": "yes works thank", "d": "5/2014"}, {"body": "oops saw custom file maybe loading file individually gruntfilejs instead using would improve findability commandf gruntfile attempt find built", "d": "5/2014"}, {"body": "use add additional custom tasks creating files nt think hard figure", "d": "5/2014"}, {"body": "true simpler loading individually looks like would also trick think would also easier notice", "d": "5/2014"}, {"body": "right able find though know check tasks directory sorry distraction", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "think impossible configuration expect one character expand", "d": "5/2014"}, {"body": "wryk yes impossible maybe delimiter param vueconfig would array strings instead array characters example html title html get unescaped html delimiters vue double last character first string first character last string feature request think would difficult implement feature needs changes srctextparserjs send pull request present poor newbie thank", "d": "5/2014"}, {"body": "main concern unescaped html delimiters think suggestion sounds pretty good definitely consider since breaking change wait", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "great running problems exactly looking want note current behavior understand adds properties adds properties update properties also exists update value property already exists great think strong addition api wanted note experience perspective someone unaware implementation complexities admit nt work way expected assumption would add property nt already exist new property would getters setters enable binding watching also learned expected perform update keypath already existed superb work vue", "d": "5/2014"}, {"body": "would possible simply compile select attribute around line compilejs would allow back etc nt got time right install node amp component et al pull learn build try fix run tests etc etc liking vue lot far indeed feature would handy quite components least demo image slider", "d": "5/2014"}, {"body": "one solution handle arbitrary number pages make sub component access raw contents manually instantiate", "d": "5/2014"}, {"body": "steps replicate", "d": "5/2014"}, {"body": "closing since really related code base feel free add wiki move vuejsdiscussion", "d": "5/2014"}, {"body": "closing due inactivity", "d": "5/2014"}, {"body": "jsfiddle examples available would nice nt delete qa help lot", "d": "5/2014"}, {"body": "extend vue class like something test vm giving vm template data behaviour would test something dom clicked proper method vm executed way test vms outside browser", "d": "5/2014"}, {"body": "adrianmiu find answers documentation guide api reference extend vue class like accountview vueextend something yes see guide composition api global methods test vm way test vms outside browser see guide building larger apps unit testing", "d": "5/2014"}, {"body": "another lightweight routing lib via", "d": "5/2014"}, {"body": "consider add support browsers ie possible adding plugin extension know sounds bad idea specific countries lot people still using ie avalon framework made chinese developer seems perfect support major browsers hesitated say including legacy ones seems use tricks vbscript polyfill specific features like ability use custom object getterssetters avalon framework well regarded china javascript developer community would prefer vuejs avalon term size filesize cleaness api global community support probably use intensively future projects however still big concern browser support could also add support legacy browsers definitely sure people using china much possibility implement legacy ie compatibility plugin", "d": "5/2014"}, {"body": "andyhu issue none projects need support legacy browsers working legacy browser support nontrivial task essentially gives zero benefits daytoday work given limited time invest vuejs development rather focus featuresfixes benefit existing projects happy accept prs anyone would like contribute plugin legacy browsers although probably easy job", "d": "5/2014"}, {"body": "thanks quick reply time look code see actually possible worthy", "d": "5/2014"}, {"body": "way please shed light part code need fixed order make fully functional older ie thing mind currently support objectdefineproperty would like know specific grammar used parts framework thanks", "d": "5/2014"}, {"body": "vueresource idea would nt better lower level vuehttp first already exist missing", "d": "5/2014"}, {"body": "framework angular really impresses nowadays easilydecoupled architechtural fast apps really easy vuejs would good create default app bootstrap folder structure thanks", "d": "5/2014"}, {"body": "andyhu features shimmed exception simulating vbscript way based know works quite differently seems everything must defined object created", "d": "5/2014"}, {"body": "jtremback already well written http modules used intention reinvent every wheel", "d": "5/2014"}, {"body": "hwclass really basic example although bit outdated reference rather boilerplate", "d": "5/2014"}, {"body": "actually selecting one right maybe sticking basic browser requests guess seems possible vueresource module would include something could called vue make module", "d": "5/2014"}, {"body": "customized current vuejs component example using bootstrap starter template", "d": "5/2014"}, {"body": "ideas implementing complex router like something would able support subviewsstates kind like angulars ui router following", "d": "5/2014"}, {"body": "mattaitchison aggree tried create vue objects component indexjs files fails example idea easily lacked knowledge componentjs stuck", "d": "5/2014"}, {"title": "get error network problems", "body": "", "num": "3168", "d": "5/2014"}, {"title": "internal variables static properties builtin classes", "body": "ie js var methods collectionmethods var viewoptions viewviewoptions var optionalparam g routeroptionalparam g example use case would new application class creating marionette need copies routing params right done copying pasting directly backbone source would nt change existing behavior potential argument would allow monkeypatching although someone going monkey patch piece backbone least use clones values instead copy pasting source", "num": "3167", "d": "5/2014"}, {"title": "backbone view constructor adding call thisdelegateevents min version dev version", "body": "var view backboneview function options thiscid uniqueid view options options extend pick options viewoptions thisensureelement thisinitializeapply arguments var w eview function thiscid iuniqueid view iextend ipick e thisensureelement thisinitializeapply arguments thisdelegateevents", "num": "3166", "d": "5/2014"}, {"title": "modelcid ca nt loaded json", "body": "loaded jsonparse loadedsubjects subjects new subjects loaded put models collection subjectsmodels cid subjects new subjects loaded subjectsmodels cid wat", "num": "3164", "d": "5/2014"}, {"title": "emulatehttp overrides jquery beforesend", "body": "hi seems current implementation emulatehttp overrides jqueryajaxsetup beforesend seems bit destructive especially since parts app nt using backbone atm relay trigger add various properties need send server", "num": "3163", "d": "5/2014"}, {"title": "unable clear earlier rendered view even replacing element", "body": "rendering table data using jquery tabledata plugin within common container however rendering table container id table changes next time rendering every load container replaced newly built table using view cases different data try access table container using el receiving earlier table data try fetch using jquery javascript working fine could please let know thanks suggestion advance", "num": "3162", "d": "5/2014"}, {"title": "modelprototypechain", "body": "still method model prototype like done collection supposed take model attributes like collection takes models like javascript model backbonemodelextend defaults function return b c model new model modelchain pick b c values compact value could implemented", "num": "3161", "d": "5/2014"}, {"title": "need help parse responce", "body": "anyone help write parse method response tried days able fyi response sharepoint response response model response collection", "num": "3159", "d": "5/2014"}, {"title": "collectionsort always trigger event", "body": "call model change collection example emit event even order nt change nt think event trigger order nt change sending pr would like understand could use full keep event could improvement", "num": "3158", "d": "5/2014"}, {"title": "collectionset takes long amount time high number models", "body": "working cordova based mobile app utilising backbone employers choice personal collection could contain models stored websql using backbonesync adapter load attributes websql function takes long amount time process older mobile devices anyway improve function simply quickly add models collection", "num": "3157", "d": "5/2014"}, {"title": "backbone initialized firefox addons", "body": "backbone require mainjs file firefox addon jquery property set writeable firefox addon sdk defines method similar cjs environments except objects required frozen written workaround suggested work setting permitted moreover writing global object permitted set use changing bbjs umd section explicitly require jquery would resolve issue though understand creating hard dependency jquery would desirable unfortunately using workaround solely project feasible mozilla amo review process discourages packaging modified versions libraries sure issue resolved happy discuss options", "num": "3156", "d": "5/2014"}, {"title": "add property model shallow rails routes", "body": "currently method model uses rules pick property use base order model urlroot collection url common rails case shallow api maybe trello would look like boards member collection routes index create actions nested board member member routes top level index create actions nested list member nice given id card nt need care id list lists board long urls like ugly rails even syntactic sugar propose new check top model url check shallowapi property use shallowurl method calculate url return method would require putting collection model would provide easily interacting shallow apis rails routes look like send pull request showing might add feature", "num": "3154", "d": "5/2014"}, {"title": "amd support breaks non amd applications using global windowbackbone", "body": "tried updating latest backbone version today sadly seems break legacy code using amd least every part application global reference windowbackbone seems missing uncaught referenceerror backbone defined think due fact backbone attached window amd factorycallback one executed first least using almondjs similar perspective makes sense since nt want execute factory unless module really required", "num": "3151", "d": "5/2014"}, {"title": "use version throw error", "body": "typeerror invalid instanceof operand backbone line", "num": "3150", "d": "5/2014"}, {"title": "access huge json coming spring restful service spring mvc app using resttemplate", "body": "spring restful web service returning json form spring mvc app try access show jsp exception occurs sayingno suitable httpmessageconverter found please help going wronghere code inside controller class spring mvc app calling restful service comsongscontrollersfrontsongcontrollerjava requestmapping value alls methodrequestmethodpost public string getallsongs modelmap md httpheaders headers new httpheaders headerssetcontenttype mediatypeapplicationjson headerssetaccept arraysaslist mediatypeapplicationjson httpentity entity new httpentity headers string url resttemplate rtnew resttemplate songresourceclass representation incoming json see code line see browser logs responseentity listofallsongsrtexchange url httpmethodget entity songresourceclass mdaddattribute listname songs available repository systemoutprintln response entity object listofallsongs systemoutprintln response entity body listofallsongsgetbody tostring return sucess inside configservletxml spring mvc app calling restful service context annotationconfig inside songresourcejava spring mvc app trying use converting coming json songresourceclass object spring mvc app use jsp comsongsserviceresourcesongresourcejava public class songresource private string name private string film private string singer public songresource string name string film string singer thisnamename thisfilmfilm thissingersinger setter amp getters calling spring rest service spring mvc app browser saying error internal server error orgspringframeworkwebclientrestclientexception could extract response suitable httpmessageconverter found response type comsongsserviceresourcesongresource content type applicationjson orgspringframeworkwebclienthttpmessageconverterextractorextractdata httpmessageconverterextractorjava orgspringframeworkwebclientresttemplate responseentityresponseextractorextractdata orgspringframeworkwebclientresttemplate responseentityresponseextractorextractdata orgspringframeworkwebclientresttemplatedoexecute orgspringframeworkwebclientresttemplateexecute orgspringframeworkwebclientresttemplateexchange comsongscontrollersfrontsongcontrollergetallsongs", "num": "3149", "d": "5/2014"}, {"title": "using idattribute nested id object", "body": "sure common usecase rest services working return id literal json object support allowing nested id value extracted favor id attribute", "num": "3147", "d": "5/2014"}, {"title": "collection set handle deduplicating models idattribute nested", "body": "maybe call idattribute function use case objects nested key model type basically rails default little patch helps wrapunwrap places model collection change advanced function javascript model backbonemodelextend constructor function attrs options attrs amp amp attrs folder return new doppiomodelsfolder attrs options else return new doppiomodelsfile attrs options still limited backbone going use string notation attributes object case object looks like way using notation get id something nt work perhaps function receives attrs", "num": "3145", "d": "5/2014"}, {"title": "router callback params trailing null", "body": "writing jasmine tests router routes foo bar fooroute fooroute function bar test takes argument function var routespy spyon thisrouter fooroute var bar fails following error seems odd check browser outside jasmine visit route outputs curious trailing null appended arguments passed route callback realize really harming anyone means write janky garbage tests", "num": "3143", "d": "5/2014"}, {"title": "backbone collection get returns undefined even model exists", "body": "hi", "num": "3142", "d": "5/2014"}, {"title": "minified nt correspond source", "body": "hello found method minified version exactly code pos nt correspond full source version case called three arguments also check return value present override method using minified version undefined argument", "num": "3141", "d": "5/2014"}, {"title": "collection model field optionally function", "body": "reason model nt obtained via result collection preparemodel goal collection models base class different specializations example coffeescript class book extends backbonemodel class ebook extends book class books extends backbonecollection model attrs gt booksfactorygetclass attrs", "num": "3139", "d": "5/2014"}, {"body": "yes change added master yet current release therefore minified version issues see change behavior", "d": "5/2014"}, {"body": "recently inherited codebase using views abstract classes example js var abstractview backboneviewextend initialize function extend selfevents selfevents click element handler var myview abstractviewextend initialize function abstractviewprototypeinitializeapply abstractview events get attached min version dev version", "d": "5/2014"}, {"body": "better set method abstractview js var abstractview backboneviewextend events function return click element handler var myview abstractviewextend events function return extend abstractviewprototypeeventscall looks even nicer coffeescript coffeescript class abstractview extends backboneview events gt click element handler class myview extends abstractview events gt extend super click otherelement handler", "d": "5/2014"}, {"body": "yep example good strategy", "d": "5/2014"}, {"body": "agree solution better way handle attaching events abstract view however think guys missing point dev min version begs question many things different two indeed bug result different behavior based example despite suggested work around", "d": "5/2014"}, {"body": "dev min version minified file updated releases keep commit noise minimum", "d": "5/2014"}, {"body": "assume dev version correct thisdelegateevents removed backboneview constructor", "d": "5/2014"}, {"body": "markwise right already called found redundant call twice sorry breakage need call anyway always add override constructor migrate", "d": "5/2014"}, {"body": "right thanks", "d": "5/2014"}, {"body": "model cid nt attribute clientside id uniquely generated every time model created persisting standard model save prevents expect populated response instead using model id standard practice model id generated server possibly autoincrement database returned client", "d": "5/2014"}, {"body": "unique identifier model instance nothing contents model", "d": "5/2014"}, {"body": "case could probably wrapping beforesend instead patching right", "d": "5/2014"}, {"body": "sound reasonable nt difficult nt really played jqxhr object preferred use workaround", "d": "5/2014"}, {"body": "already wrap option passed suppose overrides version though looks like options stored though ca nt find documentation may part public api", "d": "5/2014"}, {"body": "sounds like jquery thing quote docs note global callback functions set respective global ajax event handler ajaxstop ajaxcomplete ajaxerror ajaxsuccess ajaxsend rather within options object ajaxsetup try see fixes problem", "d": "5/2014"}, {"body": "changing view element generally use setelement change reference", "d": "5/2014"}, {"body": "yep possible original pull included dropped jashkenas think original concept still holds allow chain means accessing advanced underscore methods like", "d": "5/2014"}, {"body": "ok feel free put back include decent tests might useful realworld models please", "d": "5/2014"}, {"body": "real world nt need test chain works access underscore methods use underscore methods whitelistblacklist params keep url model attributes sync ok feel free put back include decent tests might useful realworld models please reply email directly view github", "d": "5/2014"}, {"body": "collection parse method model parse method", "d": "5/2014"}, {"body": "model method first case parsing response model otherwise parsing item collection response js parse function response responsed return responsedmetadata return responsemetadata collection method", "d": "5/2014"}, {"body": "hi yethee thanks reply please look response message metadata one attribute still attribute", "d": "5/2014"}, {"body": "see need change method model like js parse function response responsed return responsed return response", "d": "5/2014"}, {"body": "hi yethee thank working fine", "d": "5/2014"}, {"body": "seem inconsistent model event wo nt fire unless model attributes change", "d": "5/2014"}, {"body": "totally agree", "d": "5/2014"}, {"body": "makes sense would even cooler every time collection reordered model fired model sort event model new index passed arguments since use case pretty much always going synchronise something else changes total resort might sound heavy events silentsort true could used also recommended strategy would queue debouce resulting updates view worried performance lots fun", "d": "5/2014"}, {"body": "similar issue collectionfetch sort event triggerd even models changed addremove", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "probably better keeping anything simpler data structure creating fullblown modelscollections whatever subset working time probably could get little faster functionality modelscollections provide nt designed super performant many records", "d": "5/2014"}, {"body": "supposed fast possibly make specific section code think needs looking specific patch like suggest feel free suggest see previous tickets said really want get metal javascript stop using external libraries write things hand reusable arrays full strings integers loops", "d": "5/2014"}, {"body": "sure issue resolved sounds like ca nt really resolve easily suggest making small modification version backbone including big note comment top explaining line changed pointing ticket justification hopefully review process reasonable", "d": "5/2014"}, {"body": "hi jashkenas thanks response appear something resolved bbjs broadly speaking party lib seems ff addons support using party libs way solution restructure ff addon code backbone loaded contentscript context mainjs addon context", "d": "5/2014"}, {"body": "revert setting jquery commonjs dependency wrapped trycatch node enviros already automatically import jquery amd pattern apply browserify using backbone browser likely using jquery tell build tool require node gracefully handle case present", "d": "5/2014"}, {"body": "seem reasonable creating small reusable ui components eg parcelify cartero feels weird verbose write stand alone components using jquery replacement edge case unreasonable require extra config optimize would however nice common case worked expected", "d": "5/2014"}, {"body": "sure need set backbone gotcha needs happen use anywhere become hairy wed may david beck notifications githubcomwrote seem reasonable creating small reusable ui components eg parcelify cartero feels weird verbose write require backbone stand alone components require jquery backbone require backbone backbone backbone careful write whatever app done using jquery replacement edge case unreasonable require extra config optimize would however nice common case worked expected reply email directly view github", "d": "5/2014"}, {"body": "also trusting host application set properly needed little widget seem quite right maybe host app even using backbone", "d": "5/2014"}, {"body": "another gotcha scenario multiple copies backbone running around due different dependency version requirements neglecting npm dedupe app sets main one modules may using another", "d": "5/2014"}, {"body": "revert setting jquery commonjs dependency node require server backbone usually nt want require jquery server browserify popular hack nt breaking making inconvenient actual use case node designed favor parasitic use case mean without value judgement connotes", "d": "5/2014"}, {"body": "many many people using commonjs client side whether foreseen spec created fact backbone decidedly client side lib almost certain people using backbone commonjs client side using backbone server side get clean solution one dismissing browserify client side commonjs implementations hack solve issue felt ground nt breaking making inconvenient actual use case node designed favor parasitic use case inconvenience maybe missing something seem like problem inconvenience extra jquery module installed server side use", "d": "5/2014"}, {"body": "interested see goes got bitten trying implement something like recently worse starting thought might backbone compatible way write api think problem using flat relational database structure server believe object database db wide unique id member unique id member group would make sense comes seamlessly synchronising collection server side relational mapping backbone claims approach agnostic generally positive want plug architecture would nice section website common persistence strategies backbone plugin least customisation", "d": "5/2014"}, {"body": "reference try plugin custom app logic first hairy specialcased merge master moment", "d": "5/2014"}, {"body": "think already able implement defining model collection urls pretty easily done backbone similar scheme backbone come railsspecific option box nt think", "d": "5/2014"}, {"body": "great points thanks taking look", "d": "5/2014"}, {"body": "ah yeah using amd need load via amd still available global loading need", "d": "5/2014"}, {"body": "several components nt use amd rely global reference windowbackbone available even though backbone nt required via amd point otherwise forced load amd modules first least one module requires backbone nonamd modules think whole point attaching window available even using amd throughout application missing something", "d": "5/2014"}, {"body": "yeah unfortunately way amd designed globally accessible required app even via amd whole notion amd asynchronous means ca nt guarantee backbone dependencies jquery underscore set time individual application parts need without using module system amd guys might better solution sat may dominik siebel notifications githubcomwrote several components nt use amd rely global reference windowbackbone available even though backbone nt required via amd point otherwise forced load amd modules first least one module requires backbone nonamd modules think whole point attaching window available even using amd throughout application missing something reply email directly view github", "d": "5/2014"}, {"body": "take look option requirejs", "d": "5/2014"}, {"body": "aware asynchronous nature amd philfreo using requirejs think stick thanks input guys", "d": "5/2014"}, {"body": "nt jquery exposed global amd module set", "d": "5/2014"}, {"body": "thanks much", "d": "5/2014"}, {"body": "try mailing list stackoverflow irc channel questions github issues maintaining framework", "d": "5/2014"}, {"body": "git hub posting questions", "d": "5/2014"}, {"body": "nope would get hand everyone posted questions try avenues first", "d": "5/2014"}, {"body": "suggest spring restful related post really need figure", "d": "5/2014"}, {"body": "best bet stackoverflow mailing list project", "d": "5/2014"}, {"body": "check merged would handle use case need create artificial attribute function", "d": "5/2014"}, {"body": "setting method results duplicate models calling see jsfiddle looked totally clear solution provides explain", "d": "5/2014"}, {"body": "little workaround js var model backbonemodelextend set model id property nested object parse function response responseid responsenestedid return response var collection backbonecollectionextend model model preparse response data using model parse method parse function response return responsemap thismodelprototypeparse solves duplicate models problem calling option imperfect workaround limitation must instance model factory thing method must reference model instance calls without context model yet created provide context called twice collection every model created could cause performance issues probably possible side effects nt yet thought", "d": "5/2014"}, {"body": "eschwartz example using js var videocollection backbonecollectionextend generateid attrs return attrsidunique var videos new videocollection id unique abc id unique def videosget abc first video videosget def second video", "d": "5/2014"}, {"body": "thanks example see comments", "d": "5/2014"}, {"body": "looks like addressed issue commit master", "d": "5/2014"}, {"body": "master came compare view nt show disappearing", "d": "5/2014"}, {"body": "previous fix issue reverted may want take look alternate solution cover use case might want look well", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "hi drmanitoba since last release route callbacks include argument query string seem odd would ever though seems like pass absence query string similar", "d": "5/2014"}, {"body": "ah ha ok perfectly reasonable explanation really confused nt know api change ca nt find mention docs probably looking hard enough feel free close changes going made thanks", "d": "5/2014"}, {"body": "glad could help smiley", "d": "5/2014"}, {"body": "github tickets nt helping debugging application friend", "d": "5/2014"}, {"body": "correct version looking repository current edge version look source still execute two arguments need minify current master wish use", "d": "5/2014"}, {"body": "oh thanks found argument usefull plans keep future versions", "d": "5/2014"}, {"body": "course would something worth adding opinion shoot pull request updated", "d": "5/2014"}, {"body": "right simple originally appreciated", "d": "5/2014"}, {"body": "polymorphic models", "d": "5/2014"}, {"body": "much coffeescript recently suppose lost focus real thing going underneath beauty thanks", "d": "5/2014"}, {"body": "worth wrote short summaryremainder covering topic", "d": "5/2014"}, {"body": "also using model function factory key known factory would nice preparemodel handled undefined return cancelled model creation edit kind patch suffisent", "d": "5/2014"}, {"body": "access creating model via need mess context", "d": "5/2014"}, {"body": "aware access collection way stated original post point behavior obvious documented would assume without read source code defining model function would context function collection class would least open pr attempts clarify documentation", "d": "5/2014"}, {"body": "would least open pr attempts clarify documentation feel free jashkenas decide whether extra documentation appropriate", "d": "5/2014"}, {"body": "would least open pr attempts clarify documentation sure", "d": "5/2014"}, {"body": "also following purpose additional client validation saving data validated saving presumably server server returns client validation fails response client could end nonworkable state also less impactful inconsistency created one adds promise listeners returned jqxhr done handler invoked otherwise synonymous success callback", "d": "5/2014"}, {"body": "also following purpose additional client validation saving data validated saving presumably server server returns client validation fails response client could end nonworkable state bit funny server returns client accepts data considered client delaying screwed next time modify save data making bug application harder find time state model changes validated defined validate function simple", "d": "5/2014"}, {"body": "guys somebody example thanks", "d": "5/2014"}, {"body": "maybe could valid solution", "d": "5/2014"}, {"body": "others wanted code snippet handle global jquery level", "d": "5/2014"}, {"body": "used form included mainjs global ajaxsetup beforesend function xhr settings function getcookie name var cookievalue null documentcookie amp amp documentcookie var cookies documentcookiesplit var lt cookieslength var cookie jquerytrim cookies cookie string begin name want cookiesubstring namelength name cookievalue decodeuricomponent cookiesubstring namelength break return cookievalue send token relative urls ie locally xhrsetrequestheader xcsrftoken getcookie csrftoken working fine thanks support", "d": "5/2014"}, {"body": "saw google bc searching way silent sync event using backbonesave way current version checked source code seems possible true add sync false option", "d": "5/2014"}, {"body": "afaik passing save fix stackoverflow irc question", "d": "5/2014"}, {"body": "saw google bc searching way silent sync event using backbonesave know experience nearly always bad idea want particular handler fire nt mean event handler fire instead check option handler want silence", "d": "5/2014"}, {"body": "thanks lot guysreally helpful", "d": "5/2014"}, {"body": "adding reset option model fetch", "d": "5/2014"}, {"body": "curiosity wrong leading slashes spent time googling found several statements eg jashkenas official docs note want avoid using leading slash route definitions word", "d": "5/2014"}, {"body": "well think leading slashes stripped routes handling takes place nothing else superfluous backbone routes", "d": "5/2014"}, {"body": "technical reason using hashchange ugly trendy brief period leading slashes make sense using pushstate", "d": "5/2014"}, {"body": "got thanks", "d": "5/2014"}, {"body": "different", "d": "5/2014"}, {"body": "hi fengdi right using recommended instead use parent directly", "d": "5/2014"}, {"title": "array contains creates enumerable nextsuper property", "body": "found really strange error creating tests another issue seems like ember wrappers creating enumerable property array instances prototypes using shouldjs var item foo bar var array item assertion succeeds arrayshouldeql item arraycontains assertion fails arrayshouldeql item try shouldjs failing assertion uses compare arrays bit hack begin know big disableable part ember extending prototypes object array function adding enumerable key directly array instance intended behavior one sometimes issometimes nt present", "num": "4970", "d": "5/2014"}, {"title": "array cps seem issues sharedglobal depkeys", "body": "sorry poor description still befuddled jsbin explains best", "num": "4967", "d": "5/2014"}, {"title": "subcontrollerslength wo subcontrollers gt uncaught typeerror", "body": "current canary see error certain situations probably introduced resetsubcontrollers function var controller var subcontrollers thissubcontrollers seems resetsubcontrollers invoked init", "num": "4966", "d": "5/2014"}, {"title": "metamorph crashes dom dynamically add tag text", "body": "playing markdownjs library ember app stuck problem domcrash dynamically add digging deeper realized problem ember side rather markdownjs simple example dynamically added tag via boundhelper indexhtml html", "num": "4964", "d": "5/2014"}, {"title": "add currenturi application controller", "body": "would fantastic could build url based currentpath within function reverse look model controller fills dynamic url pieces emberroutermap function thisroute index path thisresource translation path function thisroute index path translationhash emberrouterreopen location globalslocation globalslocation history ontransition function consolelog thisget routerreverseurl didtransition running apps phonegap cordova quickly find windowlocation nt work well nah mean", "num": "4963", "d": "5/2014"}, {"title": "trying set properties controller content produces cryptic error", "body": "helping kathrynhough debug issue caused accidentally using wrong name route resulting model present controller error message terrifying full really say model controller set", "num": "4962", "d": "5/2014"}, {"title": "unless seems work svgs", "body": "conditional block contents inserted elements appear inserted tree dom inspector nt actually rendered page chrome least see manually editing dom within chrome inspector insert element works fine interestingly manually editing tag causes elements inserted ember appear even changes made", "num": "4961", "d": "5/2014"}, {"title": "metamorph change scrollheight", "body": "hi probleme metamorph tag webkit browsers hidden tags like scripts taken account height calculation taken account scrollheight know seems crazy true remove metamorph tags dom browser scrollheight go good value try using comment nodes calculation good github accept fork repos pr wainting changes look like js var findcomments function el var arr var lt elchildnodeslength var node elchildnodes nodenodetype arrpush node else arr arrconcat findcomments node return arr emberfindcommentnode function commentid var nodes findcomments document function define metamorph function use strict project metamorph copyright tilde inc rights reserved js function addmetamorphcheck emberhandlebarseachviewreopen checkmetamorph emberon didinsertelement function emberassert metamorph tags thismorphstart thismorphend different parentsnthe browser fixed template output valid html example check properly closed tags used tbody tag creating table", "num": "4958", "d": "5/2014"}, {"title": "bindattr fails update svg elements attributes", "body": "binding values svg document seems work bindattr injects correct value pageload fails update bound property value change happens see tested chrome beta", "num": "4956", "d": "5/2014"}, {"title": "child route ca nt access parent model reloading page", "body": "using ember debug build quick jsbin threw together using example start root navigate mysql pick entry works great however try navigate directly code throw error model hook appmysqldatabaseroute called tries get parent using thismodelfor mysql null returned nt model resolved parent resource found somewhat similar issue upgraded ember issue still present", "num": "4954", "d": "5/2014"}, {"title": "bug queryparamsnew sharing state embedded controllers query params", "body": "jsbin objects added removed application template shown index template using query string share state controllers last object removed index template others added removed except last object index controller worked around using computed aliases parent controller get query params embedded controller", "num": "4952", "d": "5/2014"}, {"title": "queryparamsnew serialize dashes", "body": "query params favourite feature mine using production despite featureflagged usecases depending eager get works well issue would great one could serialize query params withdashes instead using camelcase love ember uses appropriate variable naming depending context eg aligns well htmlstandard using dashes used bindattr changed ember datas json serializer uses camelcase default since typical keying use json similarly would neat queryparamsnew would use dashes serializing query params url either default preferens least customizable serialize values keys also think response passed params hash guess functionality would need wired slightly different machty queryparamsnew hero thoughts", "num": "4951", "d": "5/2014"}, {"title": "read property logresolver null", "body": "running emberqunit locally getting error offending line introduced basically problem resolved object assigned property nt dug deep enough know expected problem emberqunit believe would give enough work know fixed cc rjackson stefanpenner", "num": "4949", "d": "5/2014"}, {"title": "array gets serialized string using query params linkto", "body": "jsbin click go action go back index get assertion failed array converted string also consolelog model method route logs params route first accessed logs array go action back using linkto logs string", "num": "4948", "d": "5/2014"}, {"title": "trouble getting button removes completed todos display", "body": "hi trouble getting button removes completed todos display receiving errors console feeling issue todos controller copied contents controller following gist would really appreciate assistance issue thanks time", "num": "4947", "d": "5/2014"}, {"title": "linkto helper model argument route param unbound passing modelid works", "body": "model passed helper route id taken path parameter works models already id models receive id later link updated jsbin", "num": "4944", "d": "5/2014"}, {"title": "bug queryparamsnew query params serialized string using linkto", "body": "jsbin using linkto without passing query params route query params defined controller array serialized string entering navigating directly page queryparamed controller exhibit behavior neither transitioning example jsbin click links things type object string", "num": "4942", "d": "5/2014"}, {"title": "bug reduce computed updating correctly depending reduce computed", "body": "trouble getting computedsum work correctly setup reduced property depends another reduced property referenced template able create small example array changes value sum still next array change get value previous change valsum removed template value correctly updated searching cause nt know related seems strange anyway reducecomputedpropertyinstancemetasetvalue cache set new value later propertydidchange called sets cached value undefined next property request old one", "num": "4941", "d": "5/2014"}, {"title": "bug reduce computed updating correctly depending reduce computed", "body": "trouble getting computedsum work correctly setup reduced property depends another reduced property referenced template able create small example array changes value sum still next array change get value previous change valsum removed template value correctly updated searching cause nt know related seems strange anyway reducecomputedpropertyinstancemetasetvalue cache set new value later propertydidchange called sets cached value undefined next property request old one", "num": "4940", "d": "5/2014"}, {"title": "sort id sorts strings", "body": "hey wanted sort entries id descending order arraycontroller wrote gave results etc suspected problem javascript sorting numbers strings changed code everything working expected something wrong thanks help advance", "num": "4938", "d": "5/2014"}, {"title": "emberapplicationprototypeinitializer documented", "body": "brief mention main class level documentation initializers exist details use", "num": "4934", "d": "5/2014"}, {"title": "queryparamsnew available beta", "body": "upgrading beta got following error", "num": "4933", "d": "5/2014"}, {"title": "queryparamsnew wrong state returning route query params", "body": "example jsbin scenario navigate list set navigate item clicking item link return list clicking back expected controllerlimit list contains items query string address bar contains limit present list reduced controllerlimit default value query string empty", "num": "4932", "d": "5/2014"}, {"title": "feature add events emberroute", "body": "would nice mixins add behavior emberroute nt use super place", "num": "4923", "d": "5/2014"}, {"title": "emberarray methods nt return emberarray causing chaining throw emberenvextendprototypes false", "body": "jsbin example following throws method returns native instead", "num": "4921", "d": "5/2014"}, {"title": "ember data relationships multiple computedsort cps cause error", "body": "issue seen jsbin", "num": "4919", "d": "5/2014"}, {"title": "bindattr substitutes spaces", "body": "template bindattr src attriubte image tag template simple however resulting html dom", "num": "4911", "d": "5/2014"}, {"title": "linkto active class eagerly update", "body": "recently helper modified eagerly update url response clicks better matches behavior users expect web example click link route url update immediately assumption transition complete successfully transition aborted would update url time previous path see currently class eager update response clicks instead waits transition complete including fetching models may take time class applied creates weird ui mismatch url indicates one state styling applied links indicates another also makes application feel sluggish unresponsive see attached image example note lag url updates link updates propose updating semantics match url", "num": "4908", "d": "5/2014"}, {"title": "feature toggle support", "body": "wrote wrong repository emberdata writing create plugin emberjs implement feature toggle pattern switching features fly based server pushes despite topic nt confuse featuresjson thing already whole draft design written put hands wish know something ember another third part package even official plan implement contribute instead writing", "num": "4907", "d": "5/2014"}, {"title": "testing helpers wait timers flush", "body": "working project current testing helpers nt able used ideas might able fix want understand current thinking first case list items kept sync via change notifications websockets another user deletes item list want briefly show notification overlay remove item list view seconds want write test verifies item removed deleted overlay shown unfortunately existing test helpers etc wait deferred behavior finish including pending timers case show overlay immediately schedule timer remove seconds time test helpers invoked results wanted test removed initial feeling carve exception timers wait deferred behavior helpers maybe use cases thinking", "num": "4906", "d": "5/2014"}, {"title": "using helper enumerable", "body": "linked list implementation implements enumerable mixin interface want use helper templates problem helper works array currently using toarray function enumerable however efficient helper changed work enumerable recommended way using enumerable templates", "num": "4903", "d": "5/2014"}, {"title": "problem relations class", "body": "problem saving relation object class parent check problem read easily set relationship promise fulfilled created another example info mind nt work expect expect create array box instances relation previous box instance question something wrong bug let know need informations", "num": "4902", "d": "5/2014"}, {"title": "runbind returns values sometimes", "body": "using promise callbacks return another promise bound function simply drops digging found returns values current run loop", "num": "4897", "d": "5/2014"}, {"title": "could get dynamic data view", "body": "", "num": "4895", "d": "5/2014"}, {"title": "extend functionobserves signature take array argument", "body": "situation would like pass array properties instead varargs list eg want observe given controller would consistent behavior property accessing method", "num": "4891", "d": "5/2014"}, {"title": "query params alternative", "body": "want website multiple filters example want filter city category brand would like index route handle uris citysomecity citysomecity amp categorysomecategory citysomecity amp categorysomecategory amp brandsomebrand categorysomecategory etc tried adding parameters ember redirect eliminating query params query params feature ready yet alternative get done best practice filtering like without query params feature", "num": "4890", "d": "5/2014"}, {"title": "view longer target", "body": "cc ebryn case found", "num": "4887", "d": "5/2014"}, {"title": "route renderroute disconnectoutlet pairing odd", "body": "connectoutletdisconnectoutlet used pair connectoutlet basically private point since render common api render needs opposite better name unrender derender options match eg instead", "num": "4886", "d": "5/2014"}, {"title": "route render docs confusing", "body": "need better description options including defaults effect", "num": "4885", "d": "5/2014"}, {"title": "arrangedcontent basically undocumented", "body": "", "num": "4884", "d": "5/2014"}, {"title": "access properties inside linkto group", "body": "occur canary beta seems content inside linkto bounded parent controller demo", "num": "4883", "d": "5/2014"}, {"title": "textfield helper missing readonly attributesbinding", "body": "documentation input type type text render html text input following html attributes set via helper readonly however readonly present attribute bindings code export default componentextend textsupport classnames embertextfield tagname input attributebindings type value size pattern name min max accept autocomplete autosave formaction formenctype formmethod formnovalidate formtarget height inputmode list multiple step width", "num": "4882", "d": "5/2014"}, {"title": "enhancement render helper use given controller type", "body": "currently helper creates new controller instance even model object already type using maintain overall expandedcollapsed state wrapping item controller maintains items expandedcollapsed state would useful instance nt drop rendering raw view helper", "num": "4881", "d": "5/2014"}, {"title": "integrate javascript file ember app", "body": "hi started learning emberjs days beforei want integrate javascript files ember app ui changes nt know clear code want integrate html css files put html files templatesfilenamehbs css stylesfilenamescss import appscss likewise merge js files coded outside without using ember thanks advance", "num": "4880", "d": "5/2014"}, {"title": "consider exposing promseobjectpromisearray", "body": "currently ember exposes add assume resolved value promise content things like ember data uses mixin end creating two subclasses cases given natural feels return promises computed properties broken returned promise proxies think would value making classes built framework every library app uses nt reinvent wheel", "num": "4877", "d": "5/2014"}, {"title": "router autolocation creates wrong redirect browsers nt support historylocation app url path", "body": "ember app located url path wwwexamplecomblog wrong redirect made browser nt support history api see example app url path router location go url browser nt support history api redirect made think put basehref front hashsign remove hash", "num": "4876", "d": "5/2014"}, {"title": "queryparams broken", "body": "error getting could find property queryparams object previous ember beta worked fine downgraded", "num": "4872", "d": "5/2014"}, {"title": "custom adapter exposing http verb put delete", "body": "hello ember world creating custom adapter work crazy java back end words tom wondering possible expose http verb adapter parameter something like would neato findquery function store type query verb debugger consolelog findquery custom adapter called return thisajax thisbuildurl typetypekey verb data query thanks support", "num": "4871", "d": "5/2014"}, {"title": "dsstore docs unclear", "body": "unclear method make ajax request return records already inmemory store", "num": "4870", "d": "5/2014"}, {"title": "isarray returns false extended arrayproxy class objects", "body": "javascript var collection objectcollection collection objectcollection collection emberarrayproxyextend objectcollection collectionextend collection collectioncreate content objectcollection objectcollectioncreate content emberisarray collection true emberisarray objectcollection false object objectat property objectcollectionget objectat yep object object length property objectcollectionget length yep expected behavior ran trying object got rejected", "num": "4865", "d": "5/2014"}, {"title": "named vs unnamed iterator block", "body": "sure intended found name iterator block use helper inside loop iterator available rendered controller nt name available sure intended confusing example versus first example controller property defined model second example property jsbin update seems problem properties read rendered controller coming parent controller instead better jsbin demonstrate", "num": "4863", "d": "5/2014"}, {"title": "nested components sending actions parent component", "body": "jsbin shows perfectly go textfield hit enter", "num": "4862", "d": "5/2014"}, {"title": "way binding nested component actions programmatically", "body": "cleanpublic way dynamically bind actions two nested ember components js spent fair amount time digging docs stack exchange posts seems like way via ember public api overlooked feature architectural constraint deliberate design decision background created number ember components dynamically instantiate instance two called dropdownlist choicelist clicked dropdownlist instantiates displays choicelist receives action item choicelist selected obviously easy handlebars template declare component map child action name parent action handler nt really option us largely child component dom structure nt subtree parent component dom tree displayed global modal layer instead basically looking js equivalent second half handlebars declaration helps dynamically instantiating child components within action handler parent component", "num": "4859", "d": "5/2014"}, {"title": "appinitializer injection initialize get called", "body": "important steps code listed runtime random application never gets function since happens random guess async problem nt find solution app emberapplicationcreate ready function appdeferreadiness var registersession function application session applicationregister session main session singleton false instantiate false emberonload emberapplication function application applicationinitializer name session initialize function container application random debugger nt get var store containerlookup store main storefind loading fine seems dom ready function could executed result event triggers injection never happens find strange coding always get called guess lack javascript knowledge appdeferreadiness seem appropriate effect get purpose", "num": "4855", "d": "5/2014"}, {"title": "nested resources issue template names", "body": "hello anyone noted ember nt generate template names nested resources way documentation defined example approutermap function thisresource foo function thisresource foobar path bar function thisroute baz foobarbaz according documentation ember look templates named foo foobar foobarbaz instead auto generates names like foo foobar foobarbaz using debug ember debug ember data debug handlebars debug jquery assetics handlebars filter wich uses handlebars node binary precompile hbs js generates right names documentation defines workaround bug thing since long time like cheers pd excuse bad english", "num": "4852", "d": "5/2014"}, {"title": "afterrender properly taking account simplehandlebarsviews", "body": "using emberrunscheduleonce afterrender thischildviewsdidrender inside didinsertelement working properly ensure simplehandlebarsviews rendered need way make sure view contents including handle bars generated views rendered", "num": "4848", "d": "5/2014"}, {"title": "double arguments slice computedjs", "body": "", "num": "4847", "d": "5/2014"}, {"title": "document", "body": "lightly documented could nt find anything", "num": "4844", "d": "5/2014"}, {"title": "documentation property misspelt", "body": "took long time wondering emberpromiseproxymixin isfullfilled property working read ember source code discovered property name misspelt documentation proper property name uses correct dictionary spelling", "num": "4842", "d": "5/2014"}, {"title": "render outlet option set undefined renders main outlet", "body": "came across issue least would think issue setting outlet option undefined variable like thisrender modal application outlet someundefinedvar template rendered main outlet ie outlet sure defaulting main outlet correctintentional behavior undefined variable passed outlet option made hard debug spelling variable wrong thus silently something different expected something like written var options outlet modal thisrender modal application outlet optionsoutlext would nice warning error message thrown outlet specified undefined ca nt think use case allowing undefined okright jsbin happening let know information needed", "num": "4838", "d": "5/2014"}, {"title": "failing tagname set empty", "body": "know jquery phased dependency soon cost hour fails tagname sure could done thought would report anyway", "num": "4837", "d": "5/2014"}, {"title": "queryparams nt get updates route belong active", "body": "currently using stumbled upon issue qps example route xyz respective controller property xyz route define qp default value controller property value qp present url expected lets say change value qp shows url reset value back default xyz route expected qp removed url issue happens set value nondefault one navigate xyz route xyz route active reset controller property default value navigate back xyz route url still shows qp url value state value reset expected behavior effect xyz route least way reset qps given route description example found jsbin", "num": "4836", "d": "5/2014"}, {"title": "cp watching cp recomputed even nt change", "body": "cp depends another cp first one gets invalidated changes dependencies recomputed even value second one nt changed computation jsbin ilustrate bugunexpected behavior changes secods recomputed every second instead changes nasty hard bug since lives inside guts cp implementation clearly unexpected behavior also faced problem implementing since application depends lot global clock auctions one countdown becoming performance killer main pain point framework right turn show paint rectangles see page full lights colors since views components depend cps depend cp end chain look seconds clock", "num": "4833", "d": "5/2014"}, {"title": "ember seems break indexeddb", "body": "try put object indexeddb pouchdb object array get error nt load ember set goes fine first guess would things added array prototype properly set nonenumerable error question js bin reproduce see pouchdbpouchdb", "num": "4832", "d": "5/2014"}, {"title": "using embercomputedsort itemcontroller computed properties leads index range error resort", "body": "made jsbin illustrate issue see default sort working initially displaying output clicking city button values correctly updated order list changed would expect change reflect new property values click highway city index range error thrown bug hitting using sorting mechanism wrong way", "num": "4831", "d": "5/2014"}, {"title": "silent failure misnamed component", "body": "created component knew work copied code directly working component template injected dom much worked never called errors console long time checking everything could think discovered problem added component app written rather way make ember scream bloody murder happens rather failing silently", "num": "4829", "d": "5/2014"}, {"title": "iterating associative arrays", "body": "seem work associative arrays even way provide key eg let x aa x key work invalid modifying provides way extend provide index value tried extend work collections problem internal resolution ember works strings buti return actually array object resolve emberhandlebarsregisterhelper eachc function eachhelper path options var keywordname item fn argumentslength emberassert pass one argument eachindexed helper must form eachindexed foo bar arguments emberassert arguments reserved word eachindexed inarray arguments index even odd keywordname arguments code added handle key argument argumentslength path arguments options arguments arguments arguments argumentslength var idx emberhandlebarsget arguments var col emberhandlebarsget arguments arguments col idx arguments path arguments path correct index object argumentslength options path path wrap callback function sets index value fn optionsfn function eachfn var keywords arguments datakeywords view arguments dataview index viewcontentindex list viewparentviewget content len listlength optionsfn eachfn render optionshashdatasourcebinding path optionsdatainsidegroup amp amp optionshashgroupedrows amp amp optionshashitemviewclass new emberhandlebarsgroupedeach path options render else return emberhandlebarshelperscollectioncall emberhandlebarseachview options would use handler like eachc aa key would iterate aa key object way get work really need able easily iterate collections providing dynamic key hard would modify path resolution code include something like key resolutionindexing eg aa key could resolved", "num": "4828", "d": "5/2014"}, {"title": "please add ability parse handlebars within handlebars", "body": "find difficult simple things along standard programming practices would nice could use handlebars inside handlebars evaluate eg name would first evaluate name attempt iterate similarly title name would first evaluate name concatenate title get titlemyname whatever evaluated difference suppose name used inside handlebars creates sort compound binding nt difficult resolve", "num": "4827", "d": "5/2014"}, {"title": "component sendaction received targetobject", "body": "sending named action component action received host controller even declared resorted using private method think bug may enable console jsbin click text notice received", "num": "4826", "d": "5/2014"}, {"title": "errors nt point developer code stack", "body": "quite often ember gives errors descriptive stack nt point dev code instead keeps pointing back ember ember data helpful", "num": "4825", "d": "5/2014"}, {"title": "emcomputedsort manually calling sort nt update template", "body": "attempting sort array objects property seeing inconsistent behavior different options available sorting wanted demonstrate differences get clarity expected behavior either get use cases behaviors pinpoint bug four sorting options arraycontroller function function jsbin demonstrating curious thing methods exhibit unexpected behavior computed properties seem computing consolelog updating template", "num": "4824", "d": "5/2014"}, {"title": "eachhelper itemcontroller broken context", "body": "works ok ok beta canary see context different expected potentially related braking change intentional please ignore issue", "num": "4822", "d": "5/2014"}, {"title": "documentation controller section", "body": "read doc today managing dependencies controllers first example list believe make independent route comments like comments fix think well correct wrong still fairly new ember think got ember way", "num": "4820", "d": "5/2014"}, {"title": "emberonerror handlers allow error bubbling", "body": "want handler captures error also lets bubble console print well seems returning let error bubble however using coffeescript returning value also let error bubble way let error bubble remove handler entirely using workaround using ember", "num": "4817", "d": "5/2014"}, {"title": "emberjs project emberjs site crash firefox nightly", "body": "hi latest version firefox nightly crashes visit emberjscom using latest osx mavericks describe complex way reproducing crash visit site browser crashes thing happens load one ember apps nightly point see anything console browser crashes log see safari debug debug ember emberjs line debug debug ember data emberjs line debug debug handlebars emberjs line debug debug jquery emberjs line sadly show publicly app due work someone happy debug get little bit help right really know attack issue ideas", "num": "4816", "d": "5/2014"}, {"title": "ca nt use linkto helper inside child view", "body": "found two possibly related issues ember regarding routes try use linkto helper inside child view associated route controller bound get javascript error emberapplication nt get generated dom error typeerror get container null example workaround first issue tried inside child view binding action thistransitiontoroute nt break rendering clicked action throw following javascript error error typeerror target null example", "num": "4815", "d": "5/2014"}, {"title": "mandatory setter check configurable", "body": "mandatory setter code debug build check objectgetownpropertydescriptor obj keyname configurable attempting install mandatory setter", "num": "4814", "d": "5/2014"}, {"title": "error emberjs safari", "body": "got use ember upload image button clicked trigger click event observe files change set controller js erpimageuploadview embertextfieldextend emberhandlebarshelper imgupload erpimageuploadview html upload imgupload type file multiple true id upload class hidden filesfiles file files filename error show safari emberjs emberprodjs emberminjs work fine use workaround solution change advice", "num": "4813", "d": "5/2014"}, {"title": "confusing error message observer named", "body": "core bug chalked user error tracking bug took good hours mostly error message stack trace misleading add init observer function ends get nondescript error message might seem like odd thing happen writing observers fire init change bound properties eg case reason allow bound properties could warning error calling function ending binding happy add pull request wanted see people thought first", "num": "4811", "d": "5/2014"}, {"title": "bindings updated handlebars expressions using pushobject segment literal notation", "body": "somearray get updated object pushed somearray already containing objects see fiddle pressing add third button object pushed array handlebars expression updated html jsfiddle primitives objects", "num": "4806", "d": "5/2014"}, {"title": "improve error message error loading route error assertion failed arrayproxy expects array emberarrayproxy passed object", "body": "error message pretty obvious means fix sometimes obvious specific route referred would useful kinds errors could provide name path route error message would make error less confusing easier act upon sure exact implementation needed searching source could find", "num": "4805", "d": "5/2014"}, {"title": "emberbeginpropertychanges private", "body": "suggest making emberbeginpropertychanges emberendpropertychanges part public api cases would convenient disable observers altogether looping objects calling beginpropertychanges method know emberobservable uses methods hood currently enough call beginpropertychanges object disable observers globally yet implementation detail thus sensible exploit production", "num": "4804", "d": "5/2014"}, {"title": "parent div starts changes actions nt get triggered", "body": "see js fiddle line css commented everything works simple component consisting input field followed div iterates collection creates child divs class initially parent div display none input focused gets css child element points action clicking child elements trigger action however instead div action get best way describe bug parent div starts changes actions nt get triggered", "num": "4803", "d": "5/2014"}, {"title": "messing array inside foreachmap loop", "body": "consider following example var aforeach function item consolelog call aremoveobject item case printed two times expect printed three times looked source using method source problem use normal loop way printer three times behaviour expect", "num": "4801", "d": "5/2014"}, {"title": "mapby parent yields window object nulls", "body": "function recurses tree source array leaf nodes collecting parents along way via normally yields undefined suppose ever yields null next pass array get parents parents function fell infinite loop led discover yields window object nulls refers back window nice", "num": "4798", "d": "5/2014"}, {"body": "jsbin boils see simplest case believe issue itempropertykeys points shared global structure eg global clock changes shared global property nt seem invalidate itemlevel cps used filter invalidation pretty sure reduce cps affected", "d": "5/2014"}, {"body": "machty seems aligned issues seen past believe related", "d": "5/2014"}, {"body": "fwoeck surprised occurs ever init could provide reproduction jsbin failing test form would help understand better", "d": "5/2014"}, {"body": "hmm fault nt include super controller init function exploded called appreset closing sorry confusion well might add assertion helpful hint", "d": "5/2014"}, {"body": "fwoeck sure assertion many things could break subclass something nt call super methods overwrite maybe", "d": "5/2014"}, {"body": "always call override internal methods also exactly recommend overriding first place causes large number problems folks", "d": "5/2014"}, {"body": "rjackson said init way ensure ordering initialize properties without emitting change events internals always prefer init super reasons", "d": "5/2014"}, {"body": "yup agreed point specifically related app code absolutely times need actually change default init behaviors would still require override basically advising use default app code resort overriding must vast majority scenarios seen app code would work perfectly well one less footgun", "d": "5/2014"}, {"body": "rjackson remember change event thing though properties set init nt cause extra change events object beings life variables set", "d": "5/2014"}, {"body": "trying nest tags valid html quoting p element represents paragraph contain blocklevel elements including p tag automatically ended next block element found following something somethingelse interpreted rendered browser something somethingelse browser autocorrects metamorphs sync since parent elements anymore", "d": "5/2014"}, {"body": "thanks man", "d": "5/2014"}, {"body": "cc stefanpenner krisselden", "d": "5/2014"}, {"body": "wycats happen know version ember ask since many changes happened master included betas next week", "d": "5/2014"}, {"body": "one", "d": "5/2014"}, {"body": "yep routedriven controllers probably say something like", "d": "5/2014"}, {"body": "wycats", "d": "5/2014"}, {"body": "think likely running issue seems imply since svg essentially supported jquery nt really expect work ember cd likely fixed htmlbars", "d": "5/2014"}, {"body": "believe heard ebryn svg issue jquery ca nt recall details top head though", "d": "5/2014"}, {"body": "unfortunate current effort htmlbars may satisfy issue would empty text node also cause issues", "d": "5/2014"}, {"body": "ok interesting jsbin created actually works great nt sure test directly going route saw popout button however production code similar action issue perhaps code parent resource returning promise via jquery ajax edit example tomorrow issue ca nt reproduced close bug", "d": "5/2014"}, {"body": "closing found work around creating clean jsbin problem proving difficult", "d": "5/2014"}, {"body": "provide bit detail specific testsetup globals mode embercli resolver throw test project step", "d": "5/2014"}, {"body": "rjackson actually running tests qunit need smile", "d": "5/2014"}, {"body": "duplicate", "d": "5/2014"}, {"body": "jsbin click go action go back index get assertion failed array converted string also consolelog model method route logs params route first accessed logs array go action back using linkto logs string", "d": "5/2014"}, {"body": "sorry double issue wanted edit something", "d": "5/2014"}, {"body": "patricklx need create another issue edit click edit link near top issue looks like pencil", "d": "5/2014"}, {"body": "closing favor", "d": "5/2014"}, {"body": "updates", "d": "5/2014"}, {"body": "rjackson line refered reopening class actual definition initialization", "d": "5/2014"}, {"body": "anshdesire first link made function directly related initializers running part setup second link referenced issue body significantly lacking details", "d": "5/2014"}, {"body": "specifically initializers number properties addition method also ability specify ordering via believe information documented", "d": "5/2014"}, {"body": "feature flags available beta builds", "d": "5/2014"}, {"body": "unfortunately made mistake earlier builds resulted available sorry troubles", "d": "5/2014"}, {"body": "rjackson use queryparamsnew need implement sortable table product going online bug make confused spent half day dig use", "d": "5/2014"}, {"body": "rayqian short somewhat rude answer ship ready comfortable final api great care insane amount work gone making reality jeopardize work public api rushing halfbaked feature said pushing hard query params enabled still bit work done next week make happen though", "d": "5/2014"}, {"body": "error present transition done controllertransitiontoroute routetransitionto linkto helper works expected", "d": "5/2014"}, {"body": "closed accidentally sorry", "d": "5/2014"}, {"body": "agreed would definitely preferable", "d": "5/2014"}, {"body": "throw", "d": "5/2014"}, {"body": "nothing kill die", "d": "5/2014"}, {"body": "cc hjdivad", "d": "5/2014"}, {"body": "fairly sure nt bug ca nt sure information provided would mind putting together jsbin demoing issue use base", "d": "5/2014"}, {"body": "seems work fine likely nt think reopen reproducing steps", "d": "5/2014"}, {"body": "yah works fine sorry bother forgot preceding tag case anyone runs future", "d": "5/2014"}, {"body": "confirm makes apps appear slow although nt ember thing ember apps utilize youtube style progress indicator seem give much faster experience maybe intercom guys would interested also adding", "d": "5/2014"}, {"body": "could solved using thinking active class eager would otherwise never get applied element would always going directly active inactive vice versa", "d": "5/2014"}, {"body": "jdjkelly good idea solution today perhaps could allow hash option set tomdale thoughts", "d": "5/2014"}, {"body": "seems like always default unless specified otherwise", "d": "5/2014"}, {"body": "expected applied transitioned nt seem case loading docs seem verify", "d": "5/2014"}, {"body": "cc machty might input", "d": "5/2014"}, {"body": "immediate plans roll framework let experimentation plugin ecosystem see one particular stands place adding plugins significantly easier today", "d": "5/2014"}, {"body": "ok thanks gon na write one see goes idea goes well present discussion page thanks", "d": "5/2014"}, {"body": "discussed previously helpers sync never implicitly pause execution instead used wait async needed js fillin username tom click saveuser andthen function see results asynchrony triggered sync actions additional test helpers function invoked lazily create promise fulfills current pendings settled reject action performed failed js example would alternatively become fillin username tom click saveuser function see results asynchrony triggered sync actions results considerably simpler implementation helpers work regardless ongoing timersasync etc making tests actually debugable", "d": "5/2014"}, {"body": "discussed previously stefanpenner discussions github discourse somewhere", "d": "5/2014"}, {"body": "tomdale last core team meeting", "d": "5/2014"}, {"body": "stefanpenner honest dark smokefilled rooms always make forgetful", "d": "5/2014"}, {"body": "thought wycats ebryn preferred helper escaped waiting like", "d": "5/2014"}, {"body": "krisselden correct would like discuss detail tomdale since seems like may missed details discussion", "d": "5/2014"}, {"body": "also breaks use cases example", "d": "5/2014"}, {"body": "ember data case worked correctly ember appears break used ember", "d": "5/2014"}, {"body": "u believe emberdata question repository githubcomemberjsdata sort question better suited stackoverflow", "d": "5/2014"}, {"body": "timevans promise callback need used runbind rsvp already always right thing said avoid confusing join never return value low hanging fruit would write test amp remove return", "d": "5/2014"}, {"body": "reference link changed stefanpenner spec runjoin says return new runloop already nt one remove feature completely", "d": "5/2014"}, {"body": "never return value", "d": "5/2014"}, {"body": "hwoarangzk specified function make computed property instead working fiddle", "d": "5/2014"}, {"body": "questions best asked stackoverflow tagged emberjs", "d": "5/2014"}, {"body": "got thank u find stackoverflow tag", "d": "5/2014"}, {"body": "hwoarangzk tags like emberjs embermodel emberappkit", "d": "5/2014"}, {"body": "thanks lot new could u please show url u mentioned emberjs tag stackoverflow", "d": "5/2014"}, {"body": "need go search emberjs embermodel emberappkit tages get solutions many questions", "d": "5/2014"}, {"body": "thank guy grateful \u539f\u59cb\u90ae\u4ef6 \u53d1\u4ef6\u4eba swapnil tripathi notifications githubcom \u53d1\u9001\u65f6\u95f4 \u661f\u671f\u4e09 \u6536\u4ef6\u4eba emberjsemberjs emberjs noreplygithubcom \u6284\u9001 \u6697\u591c\u7cbe\u7075 qqcom \u4e3b\u9898 emberjs could get dynamic data view need go search emberjs embermodel emberappkit tages get solutions many questions reply email directly view github", "d": "5/2014"}, {"body": "apologies problem case obviously reference global ns controller", "d": "5/2014"}, {"body": "hey nt really seem like bug try hard keep issue tracker focused issues could reopen question would likely better venue get help", "d": "5/2014"}, {"body": "probably appropriate stackoverflow query params going beta shortly probably makes sense wait", "d": "5/2014"}, {"body": "ready production", "d": "5/2014"}, {"body": "ship feature enabled default ready production trying include query params support hit stable release approximately weeks", "d": "5/2014"}, {"body": "look forward", "d": "5/2014"}, {"body": "expected able call ended", "d": "5/2014"}, {"body": "something better definitely", "d": "5/2014"}, {"body": "would protected api js thing people extend arrayproxy nt done composeable way mess break sortablemixin", "d": "5/2014"}, {"body": "cc machty ebryn stefanpenner", "d": "5/2014"}, {"body": "hitting", "d": "5/2014"}, {"body": "uses textsupport mixin provides attribute binding var textsupport mixincreate targetactionsupport value", "d": "5/2014"}, {"body": "jdjkelly mentioned inherited textsupport", "d": "5/2014"}, {"body": "targets parent controller may different though theory could skip intermediate controller give desire", "d": "5/2014"}, {"body": "ok thanks extra info see poke around come something pr", "d": "5/2014"}, {"body": "rupurt nt know understand well could workaround", "d": "5/2014"}, {"body": "cool nt know could closing", "d": "5/2014"}, {"body": "rupurt tbh sure possible seems like inject controller almost helpers obsviously could make sense", "d": "5/2014"}, {"body": "supposed work see", "d": "5/2014"}, {"body": "mmun correct", "d": "5/2014"}, {"body": "mmun basically tried op provided fiddle seems work nt know bad side effects sleeping errors something wrong perhaps go deeper doc actually nt know bestbad practices around anyway sorry giving bad workaround issue reopen", "d": "5/2014"}, {"body": "mmun rjackson quickly looking render helper code seems like right though", "d": "5/2014"}, {"body": "thanks tracking correct render helper offer specific support specifying controller mmum thought reason worked due bug withcontroller originally implemented subsequently fixed", "d": "5/2014"}, {"body": "rjackson problem actually bit confused since going use case helper instantiate new controller ca nt see passed controller set view solution seems work finally nt know really supposed", "d": "5/2014"}, {"body": "hey harishankarayandev harishankarayandev find help question ways stackoverflow tag question emberjs also ask irc channel emberjs chatfreenodenet", "d": "5/2014"}, {"body": "hey jdjkelly got response stackoverflow saying use grunt gruntcontribconcat concatenate files mean ca nt get asked nobody responded", "d": "5/2014"}, {"body": "place vendor folder load js indexhtml", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "see downside powerful primitives", "d": "5/2014"}, {"body": "prefer call expose ember", "d": "5/2014"}, {"body": "would like make promise subclasses object array proxy mixed would require refactoring proxy stuff would feel much less janky would nt constantly spawning wrapped promises", "d": "5/2014"}, {"body": "sounds like great step people rolling data layer earlier version app used promiseobject promisearray copied two lines emberdata stefanpenner would confusing lives namespace", "d": "5/2014"}, {"body": "joostdevries subclass live anywhere want today given spec compliant actually must complicated slow assimilation process convert back safe instances entry results slow path array object promiseproxy objects promises complicated slow assimilation process optimal case would fast path promises objectproxypromise arrayproxypromise result promiseall complicated slow assimilation process two options make objectproxypromise arrayproxypromise subclasses lt good idea concoct nonstandard coercion technique lt dubious idea note scenario etc", "d": "5/2014"}, {"body": "stefanpenner would basically make promiseproxymixin obsolete sounds like good solution primary concern making powerfull classes transparent developers think people trying ember first time helpful", "d": "5/2014"}, {"body": "joostdevries think powerful classes potentially overwhelming developers transparent realize exist become useful maybe solved expose front center async stuff", "d": "5/2014"}, {"body": "agree basically two steps refactor promiseproxies expose classes people writing data layer think tomdale aiming easy way get promisebased emberlike behaviour computed properties", "d": "5/2014"}, {"body": "always expose think reason nt wrote promise proxy stuff unsure outcome nervous points outlined", "d": "5/2014"}, {"body": "believe query params going release disabled currently track want keep using recommend switching canary builds though always inherent risk", "d": "5/2014"}, {"body": "ah explains stay working fine wait beta thanks", "d": "5/2014"}, {"body": "seems like emberdata question repo githubcomemberjsdata", "d": "5/2014"}, {"body": "thanks stefan", "d": "5/2014"}, {"body": "emberdata lives likely appropriate open issue", "d": "5/2014"}, {"body": "probably fix upstream rsvp check arraylike objects instead arrays think stefanpenner", "d": "5/2014"}, {"body": "workaround use convert native js array", "d": "5/2014"}, {"body": "fivetanley objects wont work correctly rsvp support maybe rsvp try coerce unsure rjackson add friday agenda", "d": "5/2014"}, {"body": "wonder couldshould override support behavior initial instinct workaround calling", "d": "5/2014"}, {"body": "nervous supporting nonnative arrays coercing coercion might fine", "d": "5/2014"}, {"body": "thanks looking two issues think one whether behaves correctly regard whether rsvp handle either", "d": "5/2014"}, {"body": "mehulkar believe sorted master confirm", "d": "5/2014"}, {"body": "stefanpenner way get build master tried canary build problem", "d": "5/2014"}, {"body": "common problem something love solution", "d": "5/2014"}, {"body": "thanks responding coworker pointed setting childaction parentaction child component js actually job sheepishly closed issue kosher way achieving additional magic going declared handlebars", "d": "5/2014"}, {"body": "happens initializer nt inside emberonload nt think need onload never seen used using modules work may dylanmensaert notifications githubcom wrote important steps code listed runtime random application never gets initializefunction since happens random guess async problem nt find solution app emberapplicationcreate ready function appdeferreadiness emberonload emberapplication function application applicationinitializer name session initialize function container application random nt get var store containerlookup store main browser tab focused loading fine execute storefind loading fine seems dom ready initialize function could executed result ready event triggers injection never happens appdeferreadiness seem appropriate effect get purpose reply email directly view github", "d": "5/2014"}, {"body": "already tried happens", "d": "5/2014"}, {"body": "assuming injection nt happen initializer always called deduced fact works nt call injection work need register injection create objects best time application initializer guaranteed run application starts currently registering injection asynchronously finding session means application started route controller adapter might created injection occurs another issue might issue since ca nt see code example code register tldr nt believe bug", "d": "5/2014"}, {"body": "teddyzeenny updated example additional code additionally though inject components set people inject ready event", "d": "5/2014"}, {"body": "dylanmensaert leaves first issue nt inject register application started objects created", "d": "5/2014"}, {"body": "teddyzeenny thank much although sure seem inject session every time problem remains first route called always session undefined transition route session set correctly first route load mostly indexroute session undefined edit fixed put appadvancereadiness initializer thanks lot", "d": "5/2014"}, {"body": "one thing inject inside initializer later fulfills application route hook wait session loading initial route", "d": "5/2014"}, {"body": "closing bug feel free ping freenode emberjs channel teddyz happy help", "d": "5/2014"}, {"body": "master also explode try add injection rules object rules apply already instantiated", "d": "5/2014"}, {"body": "dstauffer provide details would absolutely bug without jsbin version ember occurring example code hard impossible diagnose", "d": "5/2014"}, {"body": "suspect entering render queue", "d": "5/2014"}, {"body": "thought little secret", "d": "5/2014"}, {"body": "bjbrewster thanks rjackson ping merged asap probably", "d": "5/2014"}, {"body": "thoov think checking would involve hackier solution since option mandate", "d": "5/2014"}, {"body": "think raise property value undefined seems purely like selftroll case see edge cases wanted behavior cost selftroll seems much higher", "d": "5/2014"}, {"body": "completely agreed basically assert property exists value undefinednull", "d": "5/2014"}, {"body": "rjackson thinking something like emberassert outlet option set undefined optionshasownproperty outlet amp amp isempty optionsoutlet either normalize function added assertion broke several tests unsure submitting pr", "d": "5/2014"}, {"body": "also similar check done disconnectoutlet", "d": "5/2014"}, {"body": "likely error assertion bug production blow away outlet", "d": "5/2014"}, {"body": "think expected behaviour gets html element nt one would expect", "d": "5/2014"}, {"body": "probably using span tag imo guess expectation would get html node ie case textnode gets html element", "d": "5/2014"}, {"body": "understand issue makes sense maybe error message something sure exactly would good save someone else time finding like maybe even note docs", "d": "5/2014"}, {"body": "component element bit strange use case tag component nt pretty surprised anyone would actually nt think framework job tell something quite correctly ide documentation programmers helping otherwise end framework every possible error anyone ever made bloating codebase", "d": "5/2014"}, {"body": "applicable views components example use case viewcomponent contains two tr tags wrapper around break clean dom said sure ember policy kind issue hence opened issue instead submitting pr happy close scope", "d": "5/2014"}, {"body": "return tagname immediate children could collection would return strange collection collection might growshrink without correct hooks gets pretty confusing", "d": "5/2014"}, {"body": "hi ran issue agree responsis valid scenario think problem returning collection mistaken already returns jquery object interpreted collection would expect return child elements jquery object tagname property", "d": "5/2014"}, {"body": "first thing query params enabled betas ship tonight feature flags stripped true whole time needwant use feature flags need use canary builds", "d": "5/2014"}, {"body": "good know updates using canary embercli", "d": "5/2014"}, {"body": "mean queryparamsnew going make final", "d": "5/2014"}, {"body": "zonak correct unless feature value beta branch way next release", "d": "5/2014"}, {"body": "zonak confirm wo nt final targeting final working like crazy speak", "d": "5/2014"}, {"body": "machty working main repo fork still issues qpnew moment got running production app maybe help", "d": "5/2014"}, {"body": "plan final qp work done end weekend meeting stef final details today flesh last questions", "d": "5/2014"}, {"body": "cool think ran new bug qp arrays serialized multiple times probably caused merge want open issue", "d": "5/2014"}, {"body": "machty tall progress", "d": "5/2014"}, {"body": "machty works", "d": "5/2014"}, {"body": "opakalex certainly goal query params real answer ship ready", "d": "5/2014"}, {"body": "rjackson thanks", "d": "5/2014"}, {"body": "cc rjackson", "d": "5/2014"}, {"body": "known plans optimize case view layer absorb extra churn though", "d": "5/2014"}, {"body": "reputation truth fast", "d": "5/2014"}, {"body": "nt think responsability view lawyer turns talking pete hunt days ago conference sold making view responsable check something changes like react", "d": "5/2014"}, {"body": "view responsible turns binding layer absorbs extra cp churn showed view layer gets data via binding system virtue binding system absorbing change events view manifest even notice problem", "d": "5/2014"}, {"body": "extra change events currently propagating system cp keeping track original value known problem plan address time result breaking change krisselden already issue tracking", "d": "5/2014"}, {"body": "hmm meah right seeing repaints happening way example kind properties seems things repainted try make another jsbin anyway nt want example cp expensive computation recomputed without need know critical point framework since cp ground everything built", "d": "5/2014"}, {"body": "yeah struggling issue well least emberdata serialized object twice see repaint thought maybe specific emberdata seems happen ember", "d": "5/2014"}, {"body": "nope problem enumerablilty", "d": "5/2014"}, {"body": "generally looks like breaking ability structured clone something", "d": "5/2014"}, {"body": "though break web workers tell nt know structured cloning implemented way", "d": "5/2014"}, {"body": "fwiw used emberjs raw indexeddb without issue see pretty old gist", "d": "5/2014"}, {"body": "calling recordserialize objects putting indexdb well good ember app nt deal fact everything else using indexeddb broken ember page", "d": "5/2014"}, {"body": "stefanpenner ideas one", "d": "5/2014"}, {"body": "knownasilya nt chance look yet try find time weekend busy client work right", "d": "5/2014"}, {"body": "nt see city button", "d": "5/2014"}, {"body": "sorry seems jsbin nt saved yet", "d": "5/2014"}, {"body": "weird click times end beta gamma gamma", "d": "5/2014"}, {"body": "yep also index range error thrown see error way using embercomputedsort", "d": "5/2014"}, {"body": "sorry bit beyond seems sorting using asc computed property mentioned anything could find net api seems like found bug nt even know usage correct said sure code matching documentation provided reducecomputed computedsort might best provide function rather use static sort order going change sort direction sure supposed used way using even use would work correctly get asc syntax", "d": "5/2014"}, {"body": "saw example", "d": "5/2014"}, {"body": "cool maybe ask levelbossmike either way nt think great way something sort order changing like said means expert stuff sorry bringing noise", "d": "5/2014"}, {"body": "found solution seems expects property itemcontroller one sorting change one one time desired behaviour", "d": "5/2014"}, {"body": "running replaced using sortproperties array controller destroys controllers resort computedsort ca nt win solution eliminate let behaviour happen", "d": "5/2014"}, {"body": "im unsure anything sane ideas welcome", "d": "5/2014"}, {"body": "sorry think anything component perfectly valid without backing object template components definitely thing try start guessing missing object would stop might impact", "d": "5/2014"}, {"body": "figured case thought would check case point component perfectly valid without backing embercomponent object pretty much piece information needed know going careful", "d": "5/2014"}, {"body": "handlebars supports subexpressions version allow write concat function point would bound believe htmlbars future version handlebars binding code builds top handlebars would allow use bound sexprs would end syntax similar suggest closing issue really actionable directly various teams hard work making variation work stay tuned", "d": "5/2014"}, {"body": "closing issue terribly actionable point specific reproducible scenario please open issue specific error provide jsbin along steps needed reproduce track error please feel free open pull request adding helpful assertion error message make sure prefix pr commit get fix right branches definitely consider poor error messages bug want make developer experience easy enjoyable possible", "d": "5/2014"}, {"body": "saying tracking specific instance happens happens time good indication causing error problem begin idea ember reports errors neither average developer using ember would nt successful pull requests correct behavior", "d": "5/2014"}, {"body": "mgenev saying ember open source need help magically fix errors without feedback input provide scenario causing error specifically something easily testplay like jsbin absolutely fix thank much helping", "d": "5/2014"}, {"body": "ok try file instances find thanks", "d": "5/2014"}, {"body": "often result something queued runloop result user code working chrome team preserve virtual stacks currently lost someday finish end least buy", "d": "5/2014"}, {"body": "discussion people complaining exact issue google part ember definitely quite lacking", "d": "5/2014"}, {"body": "mgenev chromefirefox issue make sure also pester", "d": "5/2014"}, {"body": "weird seem template updating thing computed properties recomputed", "d": "5/2014"}, {"body": "worked mehulkar yesterday definitely looks like sort racehorse race condition cps recomputing template rerenders plot thickens wrapping child view race condition longer factor suspect may problem helper see", "d": "5/2014"}, {"body": "another interesting one click sort button addobj button ewot", "d": "5/2014"}, {"body": "tried using caused break", "d": "5/2014"}, {"body": "seems two nt working nt working different reasons one using working returning exact instance every time operates instance nt return copy array contrast return copy array first copy array notice working one using nt working actually updating property updating object inside therefor computed property nt know triggered update change magically works modified version jsbin proof probably close one", "d": "5/2014"}, {"body": "simpler expected thanks blesh", "d": "5/2014"}, {"body": "boom angular pro blesh solving ember issues", "d": "5/2014"}, {"body": "javascript thing work", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "another way use emcomputedsort define sort properties believe provides necessary dependencies works fiddle", "d": "5/2014"}, {"body": "missing examples behaviour changed previously buggy nt set item controller hth", "d": "5/2014"}, {"body": "agreed believe new behavior correct previously context always changed itemcontrollers even used keyword semantics", "d": "5/2014"}, {"body": "using resource nested way like give nested urls ie give root access route object would give access route", "d": "5/2014"}, {"body": "mattma knownasilya correct resets name route nests discovered use ember look using result looking since resource resets namespace scope", "d": "5/2014"}, {"body": "rjackson right thank", "d": "5/2014"}, {"body": "nt bug rather expected behavior", "d": "5/2014"}, {"body": "could", "d": "5/2014"}, {"body": "stack trace", "d": "5/2014"}, {"body": "visited emberjscom ff nightly issue particular page ember inspector add", "d": "5/2014"}, {"body": "krisselden suspect fixed ff nightlies", "d": "5/2014"}, {"body": "thing issue anymore firefox nightly updated times since crash gone reproduce anymore close issue", "d": "5/2014"}, {"body": "manually creating controllers assigning views work must let ember instantiate controllers", "d": "5/2014"}, {"body": "thanks helping find correct way using render helper case real code template files broken using precompiler using requirejs move precompiler something like embertemplates user templatetextgoeshere since original functionality asked nt supported could issue converted logging meaningful error message least debug build", "d": "5/2014"}, {"body": "going mark closed hoping time soon fork try create pr either documentation console logs", "d": "5/2014"}, {"body": "guess something debug version ember configure setter warn set nt use emberset observed try emberprodjs emberminjs build ember also jsbin jsfiddle would helpful", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "opened specific issue", "d": "5/2014"}, {"body": "disable feature debug build setting envmandatorysetter false binding properties nt configurable", "d": "5/2014"}, {"body": "felt pain huge amount well reckon would extremely simple fix whole class bugs around usererror bugs simply writing name thing get trying get ie backtrace specified arguments passed functions like get get quite generic means nothign without argument like send", "d": "5/2014"}, {"body": "reserved bindings rewritten one end property names intent otherwise must choose name", "d": "5/2014"}, {"body": "absolutely agreed choice property name wrong however complaining behavior error message bad documentation bug error messages type documentation reason allow event listeners using bound properties disallowing would one easy way give better error message example seems like invalid least provide warning", "d": "5/2014"}, {"body": "maybe another solution reason allow functions value property ending usually would expect string call emberbinding returns object error message trying assign function similar", "d": "5/2014"}, {"body": "zaius development assertion would pr would likely accepted", "d": "5/2014"}, {"body": "first render works properly handlebars appears support bound noticed think supported use case", "d": "5/2014"}, {"body": "reason supported support feature extend something write new helper", "d": "5/2014"}, {"body": "setting another array object also works", "d": "5/2014"}, {"body": "ember nt support binding handlebars syntax nt one support accomplish similar things custom helper would take array index parameters even computed property depending situation", "d": "5/2014"}, {"body": "use case seems like bad ie problematic thing imho", "d": "5/2014"}, {"body": "guess basically want something like following right rather ensure forcing runloop call execution want ensure runloop nt called function emberrun function updateproperties happen within one suspended beginpropertychanges endpropertychanges set", "d": "5/2014"}, {"body": "app supports pushbased updates server ui app bunch jqueryui sortable lists server pushes update user sorting something dom gets rerendered messes sorting functionality solution disable observers sorting right call emberbeginpropertychangesendpropertychanges kinda feels bad since methods private", "d": "5/2014"}, {"body": "like jump say similar use case ftokarev sometimes large batches changes need applied apply operation nt atomic things happen observers fired several times instead depending observers used cause dom reflow dozens times quick succession validation logic fail observers fired two dependent operations possibly different objects think ability universally pause change observers incredibly useful reasons pausing single object useful would love methods moved public api least something equivalent", "d": "5/2014"}, {"body": "yeah really want nt pause entire world wrapper set actions transaction imho ftokarev nt disabling property observers invoking kind transaction around objects wants change finished changes proceed would excellent addition imho perhaps renamed feature dom transactions", "d": "5/2014"}, {"body": "would ideal scenario overkill chances ember run loop going wrap operations single operation observers likely nt going able fire end anyway making public would guarantee would continue happen even run loop implementation details changed words javascript singlethreaded pausing observers transaction likely going pausing globally sense adding features code want practically already", "d": "5/2014"}, {"body": "gordonkristan observers currently synchronous happen soon set properties runloop wo nt wrap single operation something triggers observer multiple times docs think talk making asynchronous future though", "d": "5/2014"}, {"body": "right mistake remember reading article weeks back looks like mixed information binding propagation seen gets scheduled sync queue eventually executed runloop observers hand fire immediately watched property changes without first scheduled runloop queue really need learn run loop", "d": "5/2014"}, {"body": "correct way wrapping entire frame multiple pushes low level api encourage direct use", "d": "5/2014"}, {"body": "stefanpenner want clarify bit described need prevent ember changing dom user performs sorting suggest need call sorting starts sorting ends right", "d": "5/2014"}, {"body": "suggested using ember run", "d": "5/2014"}, {"body": "ftokarev private nt balance call break app public way wraps function beginend tryfinally", "d": "5/2014"}, {"body": "using run loop defer work later responds observers better approach general", "d": "5/2014"}, {"body": "gist though sortable maybe help", "d": "5/2014"}, {"body": "krisselden created fiddle illustrate point sort live list solution elegant run loop nt see help case", "d": "5/2014"}, {"body": "looks like probably nt issue ember", "d": "5/2014"}, {"body": "dentuzhik working solution hopefully pr soon originally reported", "d": "5/2014"}, {"body": "happy reopen different issue seems likely", "d": "5/2014"}, {"body": "see details fix", "d": "5/2014"}, {"body": "think needs reapplied without feature flag looks like got chucked", "d": "5/2014"}, {"body": "also possibly needs updating test support hashlocation still got problem", "d": "5/2014"}, {"body": "machty think talked point", "d": "5/2014"}, {"body": "would work force trailing slash instead throwing error land app rooturl app right ember asserts path start provided root url surely location auto smart enough know app means app think cases users would treat different things happy make changes think make sense", "d": "5/2014"}, {"body": "andremalan based current understanding issue unfortunately simple also convinced consider pretty strong assumption demonstrate otherwise please let move discussion back active ticket", "d": "5/2014"}, {"body": "nathanhammond felt pain seeing several error messages referring hashes like oh know js nt hashes ember must implemented using hash object could nt find implementation confused minutes realised error message referring pojo source using hash trouble ie ca nt say keys values useful debugging purposes even sometimes want hash native hash implementation much sure aware rationale one main cons seemed missed people need informed prevalent tendency js devs use object implement values keys finders fly words need think possibly guard cases people use pojo actually expecting dicthash annoying", "d": "5/2014"}, {"body": "julianleviston native supposed wo nt work goes away future probably work fine right got legacy browsers stubborn developers deal sides issue throughout ember codebase believe okay us use objects dictionaries long expecting dynamic keys begin expecting dynamic keys eg opinion move safe implementation", "d": "5/2014"}, {"body": "nathanhammond nt think going away part spec nathanhammond meta cache scary object", "d": "5/2014"}, {"body": "stefanpenner demoted appendix b implementation described terms using trending direction away using property said remains unreliable thing ca nt really work around truly gone realsafe dictionaries make agenda next core team meeting would like implement something decide done want familiarity ember internals contribute ways aside actively looking xss ember probably try abuse fact using full objects dictionaries seems like reasonable attack vector cc webreflection", "d": "5/2014"}, {"body": "nathanhammond correct", "d": "5/2014"}, {"body": "sure oversimplyfing way go performances wo nt compromised much template related object one level indirection", "d": "5/2014"}, {"body": "interesting similar construct already", "d": "5/2014"}, {"body": "need make safe adding prefix underscore fail maybe improve constructor also slightly slower getting returns useful info deleting plus many calls example wo nt actually need summary raw performance concern seeing class would say guys good go kind indirect logic", "d": "5/2014"}, {"body": "webreflection hope focus correctness result would fully expect go ember make sure played nicely safe dictionary implementation done way nt worry weird edge conditions smile rather reinventing wheel would probably adopt adapt hashmap implementation post nt trigger major version bump public api go back add checks cast object dictionary passed dictionary since current state broken exactly broken backwards incompatible changes ember appreciate incredibly detailed research done makes next steps process implementationoriented instead bunch research stefanpenner hey look rjackson snuck inheritingdict could start right appear using container seems handle container lookups added clever feature nt find current container hops parent container could easily built subclass safe dictionary", "d": "5/2014"}, {"body": "inheriting dict around year wonder extract shared rest ember", "d": "5/2014"}, {"body": "nathanhammond guys good go kind indirect logic meant stefanpenner found already adding fix could optional pull request example", "d": "5/2014"}, {"body": "guess get relying github history always forget github nt really understand well believe split create dict inheritingdict start using everywhere", "d": "5/2014"}, {"body": "annoying part prefix cost interned vs non interned string lookup fast object use cases like meta cache overhead pretty high x hasownprop atleast optimizes paths obviously things runtimes impact may tolerable embertemplates meta cache different performance needs seems lobby vendors provide us fast safe object current much slower allocating forcing object dictionary map", "d": "5/2014"}, {"body": "stefanpenner dynamically accessing properties either ways nt chose prefix bigger chars nt see relevantconcrete performance impact key also sure filtering would give better performance prefix concatenation need check imo even could become compromised first time template gets called know happen however since got templates special case accident already suggested specific piece code last least creation objects js fast enough never real concern realworld apps usage worries simply go use time want create non object instance take care", "d": "5/2014"}, {"body": "thoughts related template object objects safe fast webreflection approach good idea play benchmarks later see cost cache misses suspect much better modern browser cheap slower older browsers nt think care cache miss cost drops nicely would interesting see dictionary mode objects inherit behavior investigate tonight issue concat hotspots concat string even short enough nt immediately get interned concat nt free causes extra allocations importantly non interned string lookup fast objects costly interned key lookups eventually concat strings may interned meet correct criteria concat immediately lookup never happen", "d": "5/2014"}, {"body": "bear mind might improve performance fix shenanigans objects old browsers android mobile broken engine nashorn example", "d": "5/2014"}, {"body": "webreflection confirm somewhat alright slightly slower fallback older engines", "d": "5/2014"}, {"body": "please post code cc pushed thanks", "d": "5/2014"}, {"body": "stefanpenner amp nathanhammond issue outlines confusioninitial annoyance hashdicts error messages realise discussion hash object pollution amp performance fwiw", "d": "5/2014"}, {"body": "took dig bug found problem lies function context passedset function packagesemberhandlebarslibhelpersbindingsjs called normal context set correctly refer currently iterated object loop however called context set content view controller think currently iterated object causes problems set alternate flow handles alias notations passed function called end verified setting function context correctly currently iterated object would fix problem inner rendering function called compiled handlebars scripts compiled handlebars script passing wrong context function may related bigger issue one chrmod referenced sure", "d": "5/2014"}, {"body": "closing nt seem issue rather something open separate issue track", "d": "5/2014"}, {"body": "hai sorry delaied reply gordonkristan yes taught work properly like said nt nt know problem side please refer code tried thisset content thisget content pushobjects thisstorefindquery projects params thanks advance regards lokesh", "d": "5/2014"}, {"body": "lokeshkumar code incorrect open question github place report bugs request new features add code repository stackoverflow place get help whenever nt know problem side start stackoverflow like also suggest explain trying ask question otherwise left guessing please provide much context able ie much code around trying", "d": "5/2014"}, {"body": "julianleviston thanks reply sorry inconvenience", "d": "5/2014"}, {"body": "good lokeshkumar", "d": "5/2014"}, {"body": "would awesome", "d": "5/2014"}, {"body": "generally supportive", "d": "5/2014"}, {"body": "feature done fork consensus adding work tests submit pr", "d": "5/2014"}, {"body": "states state documented prefix though likely people used viewstate indom", "d": "5/2014"}, {"body": "submitted move underscored unsure make current names work deprecation", "d": "5/2014"}, {"body": "krisselden know fact brake apps although nt documented graceful", "d": "5/2014"}, {"body": "rjackson confirmed deprecation warnings nt pop scenario", "d": "5/2014"}, {"body": "sure understand access deprecation warning made value underscored property returned", "d": "5/2014"}, {"body": "words work accessing old value results deprecation warning", "d": "5/2014"}, {"body": "someone result deprecation", "d": "5/2014"}, {"body": "awesome sailboat reopened since noticed pulled yet automatically closed pr accepted", "d": "5/2014"}, {"body": "broke upgraded expected", "d": "5/2014"}, {"body": "yes fixed beta series pr referenced", "d": "5/2014"}, {"body": "resolve soon longer wait likely break apps come rely infinite loop bugfix", "d": "5/2014"}, {"body": "fwiw resorted using number places", "d": "5/2014"}, {"body": "behaviour sure bug ember willingly keeping detached dom tree", "d": "5/2014"}, {"body": "machty merged", "d": "5/2014"}, {"body": "matthooks opakalex jsbin local build query params stuff working getting errors original jsbin check seems working", "d": "5/2014"}, {"body": "machty good", "d": "5/2014"}, {"body": "bugs first comment appear fixed think found another bug though click list see list add filters clear list click list url updated filter array returned default state sure intended", "d": "5/2014"}, {"body": "seems latest iteration fixed posting pr shortly", "d": "5/2014"}, {"body": "great looking forward release using dynamic segments meantime little awkward use cases", "d": "5/2014"}, {"body": "beerlington sorry took long get around understand asking trouble thinking right solution seems like caught two desirable behaviors taking provided query param values account computing whether link active paginated list articles page qp would nt generally want link back page default qp value considered active case think full solution involves using sexpression helper pass value helper talked wanting think right use case meantime following hacky thing", "d": "5/2014"}, {"body": "dentuzhik submit pr pull assist bit easier", "d": "5/2014"}, {"body": "possible latest beta build without query params feature", "d": "5/2014"}, {"body": "ran people used use iterate object handlebars guides", "d": "5/2014"}, {"body": "rjackson problem may related linked list implementation ember made enumerable using enumerable mixin interface well want use ember helper expects array helper changed work enumerable implement helper case currently using toarray update linked list efficient", "d": "5/2014"}, {"body": "using embertouch think problem documented public api extended configurable dispatcher injected container docs could recommend inject extended class gain performance improvement", "d": "5/2014"}, {"body": "yes currently people need feature suffer cost", "d": "5/2014"}, {"body": "actually working already see recently implemented htmlbars well tildeiohtmlbars", "d": "5/2014"}, {"body": "mmun maybe problem grunt task check", "d": "5/2014"}, {"body": "reproduce original problem test please offer help seems ember setupfortesting acting differently case updating objects emberrun make linkto sync properly able genereate url instead object id bcardarella example", "d": "5/2014"}, {"body": "try write failing test maybe tomorrow", "d": "5/2014"}, {"body": "seeing issue fwoeck ember ember data updating property used criteria another controller try isolate reproduce bug needed", "d": "5/2014"}, {"body": "closing please post issue still need", "d": "5/2014"}, {"body": "also ran issue emberselect select proper option content array set value bug visible setting domains content array domain current value", "d": "5/2014"}, {"body": "done", "d": "5/2014"}, {"body": "still problem seeing bug fiddle", "d": "5/2014"}, {"body": "might suggest issue closed", "d": "5/2014"}, {"body": "seeing either", "d": "5/2014"}, {"body": "finished first pass managed remove dependencies expecting results ebryn tried removing sizzle broke quite bad supply alternative next pass going look failing tests see replace jquery native code", "d": "5/2014"}, {"body": "locks careful one example lot things implicitly rely keep memory consumption top head jquery unbinds events clear data may added otherwise leak changing using native dom manipulation introduce memory leak ember apps use example jquery ui jquery mobile", "d": "5/2014"}, {"body": "tomdale suggest make sure nt introduce regressions general plan err side aggressiveness reintroduce modules problems detected", "d": "5/2014"}, {"body": "reopen problem using itemcontroller observers async eg", "d": "5/2014"}, {"body": "nt bug explore patterns handle accessible", "d": "5/2014"}, {"body": "yeah bug seems really ugly without good pattern", "d": "5/2014"}, {"body": "gnarly stuff black hole promise need think way makes sense people nt maintain promise library", "d": "5/2014"}, {"body": "gah well sucks", "d": "5/2014"}, {"body": "nixpulvis enable", "d": "5/2014"}, {"body": "faced issue used uppercase computed property template changing lowercase resolved error", "d": "5/2014"}, {"body": "skeptical wagenet surprisingly confirmed chrome android nexus", "d": "5/2014"}, {"body": "opened remote debugging device discovered ember fault jsbin loads lib two finger gesture results following error stack trace says comes seems like bug third party lib related ember cc wagenet", "d": "5/2014"}, {"body": "jdjkelly thanks deep dive suspect close one reopen turn ember", "d": "5/2014"}, {"body": "jsbin demo zdenekkostal shared ember see still much issue ran recently working resolving performancememory leaks ember app explicitly call destroy item controllers", "d": "5/2014"}, {"body": "still issue fix forgot submit pr expect get home today", "d": "5/2014"}, {"body": "awesome thanks", "d": "5/2014"}, {"body": "stefanpenner thanks", "d": "5/2014"}, {"body": "noticed change recently find terrifying particularly changing bindings emcomputedalias instead much time idea whether observing computed property property comes mixin would possible support flag causes ember log warning whenever observer triggered computed property would allow developers set sort intermediate property make dependency explicit order avoid warning perfect since would nt definition time check think could prevent long debugging episodes way check init time object might even better suppose ember could even support debug mode eliminates performance improvement tells got bad dependency although sure developers would leave know use find problem andrew", "d": "5/2014"}, {"body": "default", "d": "5/2014"}, {"body": "explained issue closed", "d": "5/2014"}, {"body": "example capability would nice maybe easy alternative nt able figure one basically used render arraycontroller able take advantage sorting arraycontroller needs able access properties parent controller objectcontroller case whether certain columns sorted switch component looks like lose benefit arraycontroller backing model implement sorting manually", "d": "5/2014"}, {"body": "think question related nothing specific minimal case believe common design click item list get detailed view shown outlet", "d": "5/2014"}, {"body": "agree neverfox reason nested resource routes nt use like nested directory structure default would seem natural unless missing something using eak fwiw", "d": "5/2014"}, {"body": "davidbiehl learn get want way docs sort buried sense default know type point outlets though still relevant think would nice ember nt choke missing templates nothing rendered maybe missing something", "d": "5/2014"}, {"body": "wycats require controller explicitly defined case want render model template moment create empty controller", "d": "5/2014"}, {"body": "believe render accepts model relatively recent change sure stable version", "d": "5/2014"}, {"body": "feature emberroutingaddmodeloption available since", "d": "5/2014"}, {"body": "selvagsz thank", "d": "5/2014"}]