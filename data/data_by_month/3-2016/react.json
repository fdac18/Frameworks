[{"title": "support question serverside rendering rerender client", "body": "alright kind react newb react following principle least surprises one ask team really wants serverside rendering particular project nt need much special client however far learned need reference react components client server order actually get dynamic behavior events bound etc client question nt react setup frontend could call without react component first argument nt could nt react enough info go already need actual reference react component frontend well long react frontend reference root dom node could nt nt enough whole thing rerender client kinda unexpected sure missing something must good reason lib works way nt know want know writing thanks", "num": "6386", "d": "3/2016"}, {"title": "new proptype proptypesstyle would make sense", "body": "would implementing proptypesstyle make sense think useful many scenarios example one implements component accepting property valid object", "num": "6385", "d": "3/2016"}, {"title": "testutilsrenderintodocument lifecycle", "body": "hi everybody something nt understand testutils library want test react component testutils lifecycle component getinitialstate componentwillmount render componentdidmount componentwillreceiveprops shouldcomponentupdate componentwillupdate render componentdidupdate componentwillunmount use testutilsrenderintodocument methods never call componentwillreceiveprops shouldcomponentupdate componentwillupdate componentdidupdate new container recreated call renderintodocument renderintodocument function areactelement var div documentcreateelement div return reactdomrender areactelements div see fiddle nt understand suggest use renderintodocument method test reacts component think better use method likes create container let container documentcreateelement div call render method let component reactdomrender reactelement container test react components see fiddle opinion best regards", "num": "6384", "d": "3/2016"}, {"title": "server running include export line throwing error", "body": "facing weird error server running include export line throwing error able see application even shows webpack valid export sportstopportion including line start server facing error error invariant violation using webpack node react since using webpack build thinking error due webpack checked react code errors problem syntax tell fix reason using export write unit test case whole code test code seen gist debugging past four days able find", "num": "6382", "d": "3/2016"}, {"title": "reacttestutilssimulate logs unexpected console error", "body": "reproduce open error logged browser dev tools chrome amp firefox somehow safari happens latest master version assignment additional event data newly created syntheticevent triggers console error warning synthetic event reused performance reasons", "num": "6379", "d": "3/2016"}, {"title": "dangerouslysetinnerhtml issue", "body": "hello caught following issue today following get next one result lt p datareactid lt strong gt lt strong gt lt p gt lt p gt lt strong gt vluchtdetails en voorwaarden lt strong gt lt p gt beschikbaarheid bij het selecteren van een vlucht word je vlucht nog niet meteen geboekt je vlucht wordt definitief bevestigd na een succesvolle betaling op onze website lt p gt lt p gt see nt rendered one inside another change lt p gt lt div gt get right markup correct rendered data tried add key classname lt p gt nt help", "num": "6378", "d": "3/2016"}, {"title": "component setstate nt allow symbol keys", "body": "trying something like invoked properly undefined running confirmed define symbol properties", "num": "6372", "d": "3/2016"}, {"title": "uncaught invariant violation must mounted trap events replacing image link image", "body": "hard time narrowing repro seem lot required moving parts try give much information relevant snippet packagejson routes look something like simply wraps passes additional prop component rendered reactredux connected component dispatches action ultimately toggles go invariant violation fires action dispatch appears work fine replace appears work fine invariant violation tag tried building repro codepen similar structure calls simulate reactrouter redux suspect would require actually build repro w technologies would helpful work time hopefully repro maybe enough info however thanks", "num": "6371", "d": "3/2016"}, {"title": "reacttransisitiongroup nt allow option append prepend child siblings", "body": "reacttransistiongroup assumes children prepended siblings inserted parent think add optional prop allows configuration prepend append children working code submit pull request wanted make sure nt missing something", "num": "6369", "d": "3/2016"}, {"title": "input type email controlled component control white spaces", "body": "controlled input filed type email behave differently controlled field type text manage controlled input field type email actual state rendered dom different user digit spaces eg input element like try digit letters spaces always get rendered string stringfromthestate input element like try digit letters always get rendered string stringfromthestate try digit spaces get new rendered string compose state spaces problematic saving state need validate field force something smart like strip white spaces", "num": "6368", "d": "3/2016"}, {"title": "translate thinkinginreactmd japanese", "body": "", "num": "6366", "d": "3/2016"}, {"title": "text components reacttransitiongroup give element type invalid", "body": "throws invariant violation element type invalid expected string builtin components classfunction composite components got undefined check render method sure least error message terrible", "num": "6365", "d": "3/2016"}, {"title": "react appends", "body": "designnecessary seems inconsistent since append etc amp results empty duplicate", "num": "6358", "d": "3/2016"}, {"title": "make respondereventplugin crossplatform", "body": "dieppe worked making work dom put hold brings relevant files react repo start thinking creating issue keep track whether want happen plan regarding consensus look rebasing cc sebmarkbage jordwalke", "num": "6352", "d": "3/2016"}, {"title": "bundle react flat file", "body": "previously considered bundling react flat file without module map example somewhat outdated implementation rollup another tool mistaken bundles modules way really want problems solve us want try plan evaluate whether switch worth", "num": "6351", "d": "3/2016"}, {"title": "remove reactcurrentowner", "body": "remember twitter conversations sebmarkbage problematic several reasons intend remove point problems related sure whether solution used warnings profiler even new one helpful messages used string refs need deprecate started work outdated try avoid stale prs give much context anyways creating issue track work instead", "num": "6350", "d": "3/2016"}, {"title": "warn using overlapping styles eg border borderbottom", "body": "good first bug taken supertinou nt work unless discussed times think conclusion prs intending solve issue merged various reasons would like close prs outdated reboot discussion performance considered conclusion sebmarkbage syranide seems consider allowing conflicting style rules imho things considered better disallow overlapping warn dev radium ianobermiller came conclusion backlash afterwards react native seems allow style expansions attributes eg closing old pull requests creating issue track implementation behavior seem agree upon warn used time discuss specifics either ignored allow whitelisted properties warn others issue migration strategy suggest people use something like really need shortcuts also something need decide upon implementing integrated styling related issues related prs", "num": "6348", "d": "3/2016"}, {"title": "invalid unitless properties", "body": "noticed unitless properties invalid eg prefix added style name style names converted weird names prefix needed anymore unitless properties", "num": "6347", "d": "3/2016"}, {"title": "attract contributors sharing first contribution stories", "body": "dan abramov asked main reason holding back contributing react far answers code approachable directly related think current contributors shared stories first contributions react explaining got involved would encouraging others even linked official docs", "num": "6346", "d": "3/2016"}, {"title": "nested properties issue", "body": "hello code javascript class component extends reactcomponent render thispropsnestedprop thispropsparsenestedprop return component componentdidmount consolelog thispropsnestedprop componentdefaultprops nested prop default const nested prop const nested prop class application extends reactcomponent render return reactrender documentgetelementbyid app console output get variable reference separate components instead instanses every component saves last setted value instanses component mounting normal behavior think correct behavior different property values different instanses ps tested code", "num": "6344", "d": "3/2016"}, {"title": "requiring reactaddonscsstransitiongroup includes react webpack builds exclude react", "body": "trying use addon layout component react reactdom peer dependencies include build goes published npm module simply line code look reactlibreacttransitiongroup see line causes webpack pull react since defined external module could make reactaddonscsstransitiongroup external webpack build distributed script addon adds window variable similar including script adds adds module depends problem", "num": "6343", "d": "3/2016"}, {"title": "css values important", "body": "seems style values important doesnt work fiddle", "num": "6342", "d": "3/2016"}, {"title": "clarify usage dynamic children key prop", "body": "seen lot people dynamic lists items addremove actions like static lists probably ok index key using index key dynamic list wrong even article info docs added warning docs somewhere people could clearly see ca nt use index key dynamic lists", "num": "6339", "d": "3/2016"}, {"title": "get rid providesmodule", "body": "great us fb much everybody else long goal get rid use common js modules nt put time yet change require changes internally fb probably work fbjs going assign", "num": "6336", "d": "3/2016"}, {"title": "write contribution guide documenting design decisions", "body": "historically good explaining contribute react small guide offer crucial information build process design constraints guide gets conventions like infra around introduce breaking changes deprecations syncing react native facebook website affects contributions basic directory organization go either directory unfortunate decisions codebase want get away actively worked internal glossary elements public instances internal instances composite components native components reconciliation transactions update queue synthetic events think especially interested hearing people considered contributing react turned away internal complexity", "num": "6335", "d": "3/2016"}, {"title": "explore possibilities emmetstyle react plugin allows succinct templating", "body": "using emmet sublime occurred angle brackets repurposed actually provide useful utility nesting consider jsx component returning xmllike syntax return thispropsheader thispropscontent thispropsbutton vs see would much succinct remove brackets although easily readable much faster write currently angle brackets serving purpose delineating tag assume returned output tag therefore could useful repurpose usage stating nested hierarchy idea thought worth mentioning", "num": "6334", "d": "3/2016"}, {"title": "log warning console components written functions implemented incorrectly", "body": "example component throw errors ever actually render silly error make think warning cases like called warning incorrect usage mycomponent see return statement mycomponent fwiw correct code see easy miss sure difficult something like figure going continue looking someone idea go creating warning scenario please feel free point right direction smile", "num": "6329", "d": "3/2016"}, {"title": "stop exporting secret dom server stuff", "body": "reactjs export isomorphic stuff dependencies dom secret export stuff browserify package special case file rename way nt take dom dependencies npm package help react native unification", "num": "6328", "d": "3/2016"}, {"title": "deleting selection range input work", "body": "steps reproduce visit erase hello input box type lowercase transformed apple pple selected press delete backspace expectation pple erased instead nothing happens continue typing ir instance pple selection erased correctly though", "num": "6327", "d": "3/2016"}, {"title": "consider special casing certain dom attributes accept elements", "body": "use case example translation components rendering string content html spec unfortunate attributes behave kind like content seems like able accept react elements design similar react component would allow accept react elements since normalize usage could theory builtin react certain attributes like etc could accept react components render strings would probably go figure way render strings root react composite component", "num": "6325", "d": "3/2016"}, {"title": "firefox issue expected flush transaction stored dirtycomponents length match dirtycomponents array length", "body": "able come repro bug rely weird interactions js flash though happens firefox summary repro react component updating via setinterval loop input focused zoom inout trigger resize handler rerenders react component error triggered note happens firefox input focused seem happen chrome workaround suggested also applies ie wrapping resize handler body settimeout", "num": "6324", "d": "3/2016"}, {"title": "defined", "body": "using react redux relay trying achieve server render found following problem however right okay browser side debugging found valid difference classes browser side transform babel babelpolyfill add transformation node side turns okay wonder anything react bugs nodejs plz help", "num": "6323", "d": "3/2016"}, {"title": "performance improvement intensive react apps", "body": "realtime reduxreact app performance critical lot components page may update frequently noticed animations running jerkily general component updates lagging lots actions dispatched small space time say per second run mac latest chrome ran performance diagnostics using react tools optimised app much possible mainly using shouldcomponentupdate making sure time wasted unnecessary dom reconciliation rendering even app still lagging dug deeper running cpu profile chrome devtools noticed times animations running jerkily slow react setstate method calls taking ms ms average would allow maximum component updates second performance hits wall case unacceptable limit also ran timeline see browser painting slow turns see majority work done inside scripts rendering seemed odd looked function stack example setstate method took ms purely scripting rendering see large chuck spent reactinputselectionhasselectioncapabilities light blue method bottom row tracing back called reactreconciletransactionjs module supposedly react uses reactinputselection restore input selection components get updated naturally wanted see would happen turned took selectionrestoration task transaction wrapper guess happened extract setstate calls took notice aggregated total time went first example ms turning selectionrestoration others word gt performance increase app huge afterwards everything ran perfectly smooth questions reactinputselection called ferociously almost every element render even elements components reactinput selection restoration take long bug necessary cost way disable selection restoration performance critical apps need make use feature", "num": "6322", "d": "3/2016"}, {"title": "ca nt update checked attribute", "body": "consider input onchange function e thissetstate value etargetvalue first time component rendered input remain forever dom even appears unchecked visually instance happen using react", "num": "6321", "d": "3/2016"}, {"title": "document setstate callback guaranteed called component unmounts", "body": "currently info could find argument method second optional parameter callback function executed setstate completed component rerendered working small tool relies callbacks called found cases never happened state set callback pushed queue component unmounted callback lost never called nt say ca nt infer possibility scenario description info exactly callback considered lost would helpful findings suggest right place confident assurance creators react also description suggests returns component rerendered callback called case callback still gets called using react", "num": "6320", "d": "3/2016"}, {"title": "accessing params nonprimitive proptypes shape oneof etc", "body": "hi use case read proptypes component enhance development process way access arguments types like", "num": "6319", "d": "3/2016"}, {"title": "js click", "body": "", "num": "6318", "d": "3/2016"}, {"title": "input type color fires continuous change events", "body": "native color picker fire lot events single closing picker react version fires rate", "num": "6308", "d": "3/2016"}, {"title": "bind result errors onclick handler", "body": "create react component add attribute click report error uncaught invariant violation enqueuecallback called callback nt callable actually working state correctly updated nothing wrong annoying error think bug image could work exactly things", "num": "6306", "d": "3/2016"}, {"title": "disabled input button fire onclick", "body": "following button fire chrome mozilla ok using normal dom without react ok see plunker example reproduces issue open ie", "num": "6304", "d": "3/2016"}, {"title": "html tags missing content wrapped comments", "body": "notices since longer spans everything element wrapper comments content fails display ie edge", "num": "6299", "d": "3/2016"}, {"title": "require stateless functional component fails", "body": "behavior webpack differs regular react components react stateless functional components work see simple project reproduces issue apologies advance making obvious mistake configuration", "num": "6298", "d": "3/2016"}, {"title": "distinguish react elements plain old objects", "body": "using shorthand functions rapid prototyping need check arguments react elements objects normal ones using typeof moment reliable", "num": "6297", "d": "3/2016"}, {"title": "validatedomnesting figure inside p tag", "body": "hi using markdown jsx parser everything works ok see warning console react dom validation checking specs seems allows see permitted parent elements element accepts flow content valid flow content element question reason warning aware fyi using react", "num": "6295", "d": "3/2016"}, {"title": "incorrectly displaying html entities", "body": "bit jsx looks like compiles using babel however showing browser idea going", "num": "6294", "d": "3/2016"}, {"title": "checkproptypes suppresses repeat warning messages missing required proptypes", "body": "writing tests around behaviour required prop types supplied react component noticed added test suite break expected first tests check number times called failed number would increase following tests supply newly required prop trigger increase demonstrate behaviour browser please see jsfiddle discovered cause reactelementvalidator actually suppressing repeat warning messages missing proptypes see source even comment issue monitor failure tends lot error perspective nondeterministic behaviour unexpected would expect warnings appear time render component without props specified required even tends lot discussed team feel greater community may expect type behaviour point appreciate could either get perspective behaviour exists may missing something protects find solution patch behaviour remove suppression would optimal eyes relevant commit behaviour added quite ago", "num": "6293", "d": "3/2016"}, {"title": "wierd functionality try display complex array", "body": "hello got one strange errorlike thing got array commands special component eg class scenarioform extends component constructor props super props thisstate scenario propsscenario componentwillreceiveprops props thissetstate scenario propsscenario commandsupdated commandsarray thisstatescenariocommandscommandsarray thisforceupdate render thisstatescenario return nothing return skipped skipped command export class command extends component constructor props super props componentwillreceiveprops props thisprops props thisforceupdate render let children array parent command ix thisprops changeorder e let array command thisprops let index commandid arraysort b gt aid bid thiscommandsupdated array remove let array command thisprops let index commandid clone let array thisprops let array thispropsindex let newme jsonparse jsonstringify newmeid arraysplice newme let ix ix lt arraylength ix array ix id thiscommandsupdated commandsupdated args let parent thisprops parentcommandsupdated args class unknowncommand extends component constructor props consolelog props props super props componentwillreceiveprops props thispropsprops thisforceupdate render let command array parent thisprops consoleinfo unknow command command array parent let index commandid return select command type commandtypesmap c ix gt selecttype e let command array parent thisprops let index commandid consoleinfo unknow command st command array parent let id ecurrenttargetvalue let type commandtypes id consolelog change array array index typetype parentcommandsupdated array remove button command root main idea remove certain element array redraw sometimes see array spliced correctly identity stored correctly sometimes wrong element deleted exception explanation exception elements putted keys commands seems react nt handle elements property correctly try look available elements exists function called idea incorrect dom element removed since removed element left page correct array items method", "num": "6292", "d": "3/2016"}, {"title": "breaking error ie", "body": "replicate issue run windows ie virtualbox clone repo run npm start open ie try select different options select component error appear although fancy still need support ie months thanks", "num": "6291", "d": "3/2016"}, {"title": "fix coverage testing enable", "body": "introduced disabled consistently got test failures master appear caused processes running memory due coverage instrumentation overhead figure way add coverage reporting back heard cpojer potential optimizations made jest help mitigate overhead look helping jest deal way increase memory cap react tests travis maybe could one thing sure removing present branch used handle master removed consistent branch handles prs however sure first place maybe add back love learn let keep issue open specific plan integrate coverage without red time", "num": "6290", "d": "3/2016"}, {"title": "reactperfprintdom throws uncaught typeerror converting circular structure json", "body": "identical app call app loaded react react master fix releasing", "num": "6288", "d": "3/2016"}, {"title": "form input namenodename breaks onsubmit event handling", "body": "happened stumbled following edge case add attribute form input point react event handling call coincidentally property refers input invocation fails jsfiddle example", "num": "6284", "d": "3/2016"}, {"title": "react reactdom blocked chrome even running python", "body": "pasting exact code html file opening python http server reason gives following error chrome redirect origin blocked loading crossorigin resource sharing policy accesscontrolalloworigin header present requested resource origin therefore allowed access able work around completely removing attributes react reactdom script tags never issue chrome frequently include external scripts attributes problem lead believe may something way fbme configured", "num": "6283", "d": "3/2016"}, {"title": "testing pure function vs createclass component using scryrenderedcomponentswithtype", "body": "assumed although different ways creating components results would able find document uniform manner try use test utility method ca nt find components created using pure function const wrapper reactcreateclass render return thispropschildren const errormessage reactcreateclass render return thispropserrortostring const errormessagepurefunction error gt errortostring describe rendering pure function components gt able find document gt const output utilsrenderintodocument expect utilsscryrenderedcomponentswithtype output errormessage length tobe succeeds test pass another way getting pure function components document", "num": "6282", "d": "3/2016"}, {"title": "server rendering svg foreignobject body tag w results missing id error", "body": "using need svg tags rendering foreignobject svg tag according mdn put body tag inside tag whatever html want rendertostring server leaves body tag place gives reactdataid however rendered client body tag removed look live elements body inside foreignobjects gone along datareactid server source ie view page source shows body tag rendered missing reactdataid result get invariant violation unable find element id xx page updates somethings nt work removing body inside foreignobject tag seems solve problem nt know ok solution body tag necessary scenarios either case seems scenario server rendering results different domhtml client rendering problem body tag supposed anyway todd", "num": "6280", "d": "3/2016"}, {"title": "rendertostring still put datareacid markup", "body": "looks like reactdomserverrendertostring still puts datareacid attributes everywhere intended quick tests reactdomserverrendertostaticmarkup seems job since longer needs reactdataid need render methods going forward todd", "num": "6279", "d": "3/2016"}, {"title": "attempted assign readonly property", "body": "getting crash report react native app crashing react code ca nt really provide much detail stack trace know frequent crash far crashes one anyone else run", "num": "6277", "d": "3/2016"}, {"title": "add warning onfocusin onfocusout", "body": "per warn attributes used", "num": "6275", "d": "3/2016"}, {"title": "react issue unable get property nextsibling undefined null reference", "body": "nt know yet exactly causes update ticket find got long stack trace call stack trace enters reactjs code looks like render method pagecontainer component looks follows simplified code works fine chrome fails try see make minimal example displaying problem", "num": "6271", "d": "3/2016"}, {"title": "node warning possible eventemitter memory leak detected listeners added", "body": "hi classic fix time seems like removelistener method remove callbacks store javascript import eventemitter events let focusformid let class formfocusstoreclass extends eventemitter emitchange thisemit change addchangelistener callback consolelog added count count thison change callback removechangelistener callback count consolelog removed count thisremovelistener change callback updateformfocus action focusformid actionnextformid thisemitchange getformfocus return formid focusformid changing url react router forms removed dom new forms added corresponding add remove change listeners correctly catched store however seems like listeners removed since get message corresponding form component javascript export class form extends reactcomponent", "num": "6266", "d": "3/2016"}, {"title": "ie react", "body": "weird noticed today debugging wrapping hello label inside span ie would course trick guess issue also present perhaps", "num": "6265", "d": "3/2016"}, {"title": "support dom nodes children", "body": "would nice able equivalent seems entirely doable new fancy renderer think obviously would nt supported ssr though would provide fallback necessary", "num": "6263", "d": "3/2016"}, {"title": "break", "body": "hi fairly trivial application running reactjs since moved continues work perfectly chrome however appears render critical parts empty relevant piece code failing error output debug console dom explorer appears render missing data see application relevant behaviour running live enter network yield fastest return see issue edit non ie users see ss", "num": "6262", "d": "3/2016"}, {"title": "set input value got warning input uncontrolled using react", "body": "", "num": "6261", "d": "3/2016"}, {"title": "use life cycle hooks animation using react low level api", "body": "need work around bit animation react using low level api react ie react transition group want use provides life cycle hooks like componentwillenter callback componentwillleave callback struck problem use life cycle hooks herre mine code export default class app extends component componentwillleave callback consolelog component leaving componentwillenter callback consolelog component entering render const styles require appscss return life cycle hook function componentwillenter componentwillleave getting called please let know mistake making", "num": "6254", "d": "3/2016"}, {"title": "feature request innerhtml alternative", "body": "think many people agree api gross even though great reasoning behind issues beyond verbosity think could added static method react class issues verbose always dangerous ca nt mix safe unsafe html ca nt mix html react elements manually concat html strings better solution would provide way mark html safe js var react require react use marksafe method bypass reacts automatic html escaping var myreactel reactmarksafe still explicitly telling react trust html solves problems js mixing safe unsafe html reactmarksafe mixing html react elements reactmarksafe hello multiple innerhtml sets reactmarksafe reactmarksafe think api would much friendlier current html api probably would nt even require major version bump thoughts", "num": "6253", "d": "3/2016"}, {"title": "docs question refs callback vs string", "body": "reading docs clear difference defining ref callback vs string vs someone clarify please", "num": "6250", "d": "3/2016"}, {"title": "callback attribute behaving expected", "body": "seems callback nt behaving expected based docs docs say called component mounted times called called parameter however put one callback one callback called every whereas called component reffing nt even changing props misunderstanding something using react var value reactcreateclass componentdidmount consolelog mounted render return dummy var hello reactcreateclass getinitialstate return value componentdidmount setinterval gt thissetstate value thisstatevalue render function return thisstatevalue reactdomrender documentgetelementbyid container", "num": "6249", "d": "3/2016"}, {"title": "run least subset tests inbrowser releases", "body": "frankly scares little substantial ie text node bug made release candidate tests could fairly easily run saucelabs similar service actual browser verification", "num": "6248", "d": "3/2016"}, {"title": "seems skip text nodes ie", "body": "following results hello written jsfiddle realize changes way text nodes work update code use wanted check intended behavior since test written chrome", "num": "6246", "d": "3/2016"}, {"title": "gui automation testing react without datareactid", "body": "hi sorry open issue used leverage mechanism identify element gui automation testing framework like selenium using inlinestyle add several unique keys different components works well current version seems gon na removed react tried new rc version yet wondering react", "num": "6244", "d": "3/2016"}, {"title": "dangerouslysetinnerhtml error nesting html within react component", "body": "using library provides component called inputpassword returns input area need place block right beneath block animations work far made possible via following works like charm however console complains following message every keypress avoid error simply rewriting way trick", "num": "6241", "d": "3/2016"}, {"title": "pipe console logs specified logger", "body": "would great could pipe console errorwarnings specified logger treated logging application", "num": "6239", "d": "3/2016"}, {"title": "reactaddonscsstransitiongroup use require browser environment", "body": "reactdom library checks ran browser env uses window global get react reference reactaddonscsstransitiongroup library probably addons also supply dist folder important optimizing webpack development want set react library noparse alias react directly distreactminjs saves lot time however since libraries like csstransitiongroup require reactlib possible know reactdom addons truly divided separate packages future estimate reactaddonscsstransitiongroup reactdom javascript function f commonjs typeof exports object amp amp typeof module undefined moduleexports f require react requirejs else typeof define function amp amp defineamd define react f", "num": "6238", "d": "3/2016"}, {"title": "click event work correctly", "body": "", "num": "6237", "d": "3/2016"}, {"title": "enhance proptypes xor", "body": "hello tries react declare xor behavior props used component succeeded somehow post solution result lack simplicity could include react think think", "num": "6236", "d": "3/2016"}, {"title": "css unrepaint chrome rerendering", "body": "hi found issue chrome rerendering mobile desktop react component css properties repainted go inspector change property like fontsize color whatever see repaint ideas", "num": "6235", "d": "3/2016"}, {"title": "syntax error ca nt detected jsxtransformerjs keyword", "body": "think extends reactcomponent right syntax version react chrome browser version", "num": "6234", "d": "3/2016"}, {"title": "react dom tree root always node reference", "body": "built task execution pipeline utilizing react begun testing react noticed sudden getting invariant error react dom tree root always node reference comment line causing error everything works unit tests pass assume check important new internal updates made since able make work hacky bit code adds properties instance see believe issue able use server rendering code longer call without errors occurring way bypassing error using client renderer way calling server renderer", "num": "6232", "d": "3/2016"}, {"title": "onpaste div annoyances", "body": "certain react issue quite annoying help would greatly appreciate want able autofocus div onpaste register automatically ie immediately able press ctrlv trigger handlepaste handler component mounted however way able achieve combination hacks div needs tabindex set div needs contenteditable true throws really annoying warnings addition introducing blinking cursor also makes everything mutable terrible still need add dummy text source var hello reactcreateclass handlepaste function evt evtpreventdefault consolelog handling paste render function return text reactdomrender documentgetelementbyid container jsfiddle", "num": "6231", "d": "3/2016"}, {"title": "react reactaddonscsstransitiongroup reactaddonstransitiongroup warn", "body": "update react terminal show message build fix", "num": "6229", "d": "3/2016"}, {"title": "error trying run uiexplorer android", "body": "trying run uiexplore example app android steps followed cloned start package manager running device soon app launches get error stating unknown module named invariant required definitely nodemodulesfbjslib stack trace", "num": "6227", "d": "3/2016"}, {"title": "controlled inputs potential value", "body": "upgraded react today new warning appears cropped component referring indeed controlled component duration lifetime problem realized first render returns value populated text put input expect pretty common pattern controlled components otherwise loving release svg attributes disposal exciting", "num": "6222", "d": "3/2016"}, {"title": "react regression ontouchtap working", "body": "ontouchtap stops working react prepared reduction difference pane pane b version react used open touchscreen device devtools emulation see ontouchtap worked react ceases work react", "num": "6221", "d": "3/2016"}, {"title": "use semvar", "body": "react jumping developers ca nt make heads tails whether guys finally switched semantic versioning start using project please make clear first full version release many us consider react production usage able push past corporate overlords makes version later", "num": "6220", "d": "3/2016"}, {"title": "select option empty value regression", "body": "react emits empty string change react emits string value empty change react cuts option tag", "num": "6219", "d": "3/2016"}, {"title": "onrespondergrant called onresponderterminate", "body": "responder captures active responder seems called seems like wrong thing reasons behavior", "num": "6217", "d": "3/2016"}, {"title": "css property warnings nt contain contextorigin", "body": "version fiddle check console example providing css property result nan invalid value fontsize css style property aware error code idea component check would like something like nan invalid value fontsize style property check render method header happy try solve something want", "num": "6216", "d": "3/2016"}, {"title": "codemod svg attributes", "body": "previously whitelist supported svg attributes incomplete rather constantly playing catch svg attributes whitelist decided would better pass attributes directly example attribute deprecated favor attribute standard attribute svg elements would good codemod help svg users migrate rewrite known attributes including svg elements", "num": "6213", "d": "3/2016"}, {"title": "svg support focusable attribute", "body": "currently supply attribute svg shrinks seems happens key svgdompropertyconfigjs chance merge pr adds property list", "num": "6212", "d": "3/2016"}, {"title": "warning svg property classname deprecated", "body": "changed svg attribute logic pass svg attributes unchanged means example instead write reason change want maintain whitelist attributes since released rc saw report twitter saying also prints warning warning svg property deprecated use original attribute name svg tags instead way makes sense consistent us maintaining whitelist treat custom components hand svg elements seem special asking people use instead invites old discussion dom elements well would like doublecheck indeed change want make svg elements alternatively leave introducing special case alone", "num": "6211", "d": "3/2016"}, {"title": "rendertostring fails terminate comment node", "body": "run get foo sure bug thought friends gone also testing old project using much complex scenario returned following causing blank page wondering behavior server rendering changing thanks", "num": "6209", "d": "3/2016"}, {"title": "prebinding problematic binding causes performance issues", "body": "per article posted stackoverflow feel like use event handlers pattern could performance issues rerendering use method described article ca nt pass arguments single dry function create several functions handle different scenarios one answers post solution", "num": "6205", "d": "3/2016"}, {"title": "nested renders invalid html", "body": "nt really make sense nest instances happen unintentionally case react renders invalid html setup hmr ends causing invariant violations might worth adding warning case react version fixed due changes", "num": "6204", "d": "3/2016"}, {"title": "investigate travis failed build js files", "body": "parse error website important js files deleted manually restored maybe fluke looks like babel installed could nonissue branch cut switch babel wanted get books case somebody else notices knows", "num": "6203", "d": "3/2016"}, {"title": "jasmine broken", "body": "looks like broken fresh checkout locally results running running commands fresh checkout attempts run results failing unit tests", "num": "6198", "d": "3/2016"}, {"title": "svg textpath startoffset parameter ignored", "body": "see top image pure svg text displayed middle second image svg rendered react pictures show text location seems startoffset stripped react recognised within svg namespace textpath element startoffset valid attribute treated attributes react", "num": "6197", "d": "3/2016"}, {"title": "remove fbjs dependency", "body": "sure one linked reasons reactjs using fbjs core ca nt see way need coexist unless base code shared case become part reacjs shared library among", "num": "6196", "d": "3/2016"}, {"title": "shallow rendering stateless components vs stateful components different owner", "body": "related see test case reproduce reproduce issue rendered shallowrenderer outputs differ key see test output tap version compare statelesscomponent shallowrenderer getrenderoutput ok equivalent compare statefulcomponent shallowrenderer getrenderoutput ok equivalent tests pass fail", "num": "6194", "d": "3/2016"}, {"title": "react root index mathrandom causes invariant violations react compiled snapshot", "body": "using backend snapshots enabled optimize performance beneficial create snapshots improve server side rendering performance creating snapshot reactjs reactserverjs resulting server side component rendering errors follows logic causing error mathrandom function issues snapshots areas function used moment biggest problem server side rendering following location however also impact code reached mathrandom runtime js size reactroot id space generate random numbers react root ids collision events dom update system get confused future need way generate guids work smaller scale var globalmountpointmax mathpow var serverreactrootindex createreactrootindex function return mathceil mathrandom globalmountpointmax would possible fix server side heap snapshots generated without worry issues server could sort algorithm nt rely mathrandom used generate nodes root indexes etc os ubuntu react", "num": "6192", "d": "3/2016"}, {"title": "proposal get rid pooling synthetic event system", "body": "staring confusing mess synthetic event system today talking sebmarkbage longer confident need pooling system currently uses gcs gotten pretty good may experiencing diminishing returns point maybe losing benefits consider still support older browsers gcs nt benefit last several years worth innovations might premature probably worth investigating", "num": "6190", "d": "3/2016"}, {"title": "provide way defer checksum check initial mount", "body": "developed custom server side rendering solution allow asynchronous data loading everything done flush final html browser along asynchronously loaded data written dom also generating checksum way react server side rendering initial mount browser data needed app available data contract layer uses promises provide data request components nt know whether data available data layer components use following pseudocode loading data underneath hood model layer knows whether data available uses data otherwise makes ajax request data react render synchronous promises asynchronous way us take advantage reuseexistingmarkup logic within react tested return synchronous promise shimhack everything works expected know dangers way defer checksum checks somehow way render vdom memory trigger mounting logic nt want detached dom real dom nodes wanting react construct vdom mount tell thanks", "num": "6188", "d": "3/2016"}, {"title": "synthetic events proxy nt work normal synthetic events", "body": "blames cc kentcdodds sure yet affecting load events ones attached directly nodes eg image problem intercept operations subclasses like nt simplest repro still fail wo load listener", "num": "6187", "d": "3/2016"}, {"title": "document context param reactclass", "body": "param es documented particularly classes extending documentation bit scattered sure relevant places would think context react virtual dom terminology perhaps reusable components gt classes currently context nt mentioned reusable components authored component classes nt mentioned context", "num": "6186", "d": "3/2016"}, {"title": "title tab value rendering using react", "body": "hello react way show rendered element value title like var title title value output like value", "num": "6182", "d": "3/2016"}, {"title": "reconciliation chapter wrong description", "body": "reconciliation chapter wrong description guide react description react takes attributes new component calls component willdid receiveprops previous one react nt componentdidreceiveprops methond", "num": "6181", "d": "3/2016"}, {"title": "async thissetstate", "body": "since thissetstate callback would sweet could use await thissetstate", "num": "6179", "d": "3/2016"}, {"title": "setstate called", "body": "api call setstate triggered first consolelog statement works expected displays empty objects constructor function callback setstate never triggered state updated let sit like console errors strange part working another part app magically begins working idea missing something obvious componentdidmount thisinit init getdashboard function data consolelog thisstate thissetstate dashboard datadashboard learning datalearning items dataitems gt consolelog thisstate bind get result remove second callback simply place directly", "num": "6178", "d": "3/2016"}, {"title": "keyboard events behave expected mobile", "body": "onkeypress never triggered onkeydown eventkey always unidentified eventkeycode always eventcharcode always eventwhich always tested google nexus android google chrome", "num": "6176", "d": "3/2016"}, {"title": "request better documentation reactaddonsperf", "body": "imo insufficient supposed place api calls example code would great", "num": "6174", "d": "3/2016"}, {"title": "new core algorithm", "body": "going start thread give everyone notice work put core reconciliation algorithm need include features like incremental updates chunks maybe even two different versions tree time back forth yielding prerender support layout probably also includes new type context error boundaries catches updates make work existing tooling dev tools perf tools server rendering various renderers working fixing issues lifecycles core reconciliation parts like child reconciliation might want aware moving target might requests changes unrelated status quo related future work might require lot context commitment able contribute parts however fixing dom issues packaging builds diffing props styles react native etc probably unrelated work feel free send prs", "num": "6170", "d": "3/2016"}, {"title": "proposal remove reactdom dom component factories api release new module", "body": "api confused make sense greater scheme react api used rendering environments like react native gl api meant universal sense never going add reactios however factories nt actually implementation details rely actual dom details essentially map like ended universal react package reactdom would impact people nt currently use jsx held using function call syntax year transforms conveniences function syntax big deal many people especially coffeescript users strongly antijsx nt want break anybody would like migrate core react api proposal would new package exports exact set things currently makes available would require small changes code new package dependency otherwise identical change might look like js div span reactdom div span require reactsomeotherpackage", "num": "6169", "d": "3/2016"}, {"title": "nesting components", "body": "hello wanted add two another components one something like used like nt work required use reactcreatefactory message tried something like works fine however wanted add children like reference using nt work got message logged console looked like went react code find set false everything works correctly however guess problems approach future belive autobinding useful useful somewhere else outer component bug something wrong thank", "num": "6168", "d": "3/2016"}, {"title": "childrentypedisplayname impossible nodejs", "body": "import react component react import render reactdom class parent extends component render const children thispropschildren consolelog typeof childrentype function consolelog typeof childrentypedisplayname undefined return class child extends component render return children render", "num": "6167", "d": "3/2016"}, {"title": "proposals new reactproptypes", "body": "proptypesexactly took use case gitter chat justblackbird wanted property exactly maybe add comments use case instead proptypesrange common case need prop number range let say percent value inputs type range example use cases even another example", "num": "6166", "d": "3/2016"}, {"title": "svg renders children object object dom", "body": "see basic example assuming step new svg code need remove key consume react prop", "num": "6165", "d": "3/2016"}, {"title": "add detail missingkey warning", "body": "component must using array setting keys get warning problem render methods nt always simple sometimes quite hard find problematic array would awesome warning could enhanced provide information problematic dom something like even", "num": "6163", "d": "3/2016"}, {"title": "bug componentwillunmount overwritten extended inheritance chain", "body": "hi happen run odd issue regarding called top constructor leaves issue cleanups extended component sure bug dumb base components method called top level component one small line codepen reproduction issue jsx extending base component let composerfunction function component stuff class composercomponent extends component constructor super return composercomponent toplevel component constructor class mycomponent extends composerfunction reactcomponent method defined composercomponent never called uncomment composercomponent componentwillunmount called never componentwillunmount consolelog mycomponent componentwillunmount render return click unmount mycomponent check console logs render canvas mountunmount clicking see logs one log message shown class myapp extends reactcomponent constructor super thisstate show true handleshow thissetstate show thisstateshow render return remount reactrender documentgetelementbyid app console output clicking remounting js mycomponent componentwillunmount happend composercomponent componentwillunmount", "num": "6162", "d": "3/2016"}, {"title": "incorrect warning without handler render readonly field", "body": "use event handler accomplishes thing event handler humaninput purposes warning suppressed presence", "num": "6160", "d": "3/2016"}, {"title": "reactelement tests explicitly using jsx", "body": "reactelement tests beginning number instances jsx file example test note removed clarified jsx purged file adding tests file free jsx certain contexts others", "num": "6157", "d": "3/2016"}, {"title": "reactchildrenonly handle mapped children", "body": "let say component expects get single child works expected render since maps single child happily return child however using like throws gets array one element expecting also handle case return child array obviously write instead design miss something", "num": "6156", "d": "3/2016"}, {"title": "docs build bundle exec rake working babel update", "body": "commit babel updated change broke command necessary build examples docs since babel nt inbrowser transformation would replacement", "num": "6155", "d": "3/2016"}, {"title": "warn proptypes nt exist exist different case", "body": "js const foo onaction gt fooproptypes onaction proptypesfunction const bar gt warn currently nt warn properties nt exist set ie nt catch typos mostly legacy artifact many components nt define full set props eg spread used components also define prop even though use warning might much work initially however start small find missing properties corresponding properties different case suggest developer use instead essentially always bug technically possible property name two different case considered bad practice allow causes overhead test diffingrendering causes styleguide issues people pick style use also makes worth tooling searchreplace easily miss less commonly used variants react allows single case ideally custom components", "num": "6153", "d": "3/2016"}, {"body": "provide simplified jsfiddle demonstrates issue", "d": "3/2016"}, {"body": "thanks quick response actually figured turns happening another place together warning message tests pointing somewhere else", "d": "3/2016"}, {"body": "need reference react components client server order actually get dynamic behavior events bound etc client information event handlers add part react component serverside generated html know events bind still need hand component react well", "d": "3/2016"}, {"body": "hi oresoftware generally prefer issue tracker used exclusively feature requests bug reports questions get lost stackoverflow better place specific questions nt could nt react enough info go already need actual reference react component frontend well dom node dom contain javascript code related component event handlers method markup may arrive js even loaded makes server rendering useful however means react take updating markup give code component corresponds argument call possible call react take updates client would mean loading react alone enough code run javascript code app loaded however contradicts fact react guess make component markup dynamic without access component code necessary associate two note really rerender client markup identical react attach component instance existing dom however without access component code client side associate markup using call markup match forcibly rerender app use markup generated client side seems preferable silently failing hope helps please try use stackoverflow next time questions much easier search thanks", "d": "3/2016"}, {"body": "definitely helps thanks info asked nt think easy find questions online unfortunately questions unless like downvotes lol mar dan abramov notifications githubcom wrote hi oresoftware generally prefer issue tracker used exclusively feature requests bug reports questions get lost stackoverflow better place specific questions nt could nt react enough info go already need actual reference react component frontend well dom node dom contain javascript code related component event handlers render method markup may arrive js even loaded makes server rendering useful however means react take updating markup give code component corresponds argument reactdomrender call possible call reactdomrender documentgetelementbyid reactroot react take updates client would mean loading react alone enough code run javascript code app loaded however contradicts fact react guess make component markup dynamic without access component code necessary associate two note really rerender client markup identical react attach component instance existing dom however without access component code client side associate markup using reactdomrender call markup match forcibly rerender app use markup generated client side seems preferable silently failing hope helps please try use stackoverflow next time questions much easier search thanks receiving mentioned reply email directly view github", "d": "3/2016"}, {"body": "also thing sort hard find info actual need rerender client took several hours web searching unpleasant tinkering figuring sure easy way making obvious rerender needed maybe thickerheaded next one feedback maybe place higher level discussion react works docs full details think higher level documentation would help", "d": "3/2016"}, {"body": "unfortunately questions unless like downvotes lol think necessarily case stackoverflow community cares questions specific answered objectively carefully formatted explained titled question satisfy constraints docs definitely could better contributions welcome smile specific suggestions improvement maybe could give try send pull request know better docs looked context warning would make sense thanks", "d": "3/2016"}, {"body": "thanks dan yeah ideas tutorial wait bit experience last question real reason counterintuitive rerender client seems suggest need data client server data need sent along html example want render variable number child components cross fingers data frontend sent parent component matches data sent component rendered backend confusing correct see example", "d": "3/2016"}, {"body": "answer may copy question answer may help people", "d": "3/2016"}, {"body": "example want render variable number child components cross fingers data frontend sent parent component matches data sent component rendered backend yeah correct need send data results duplication hand something visible immediately js loaded picks tradeoff use something like redux manage state might enjoy reading think answers questions data hydration", "d": "3/2016"}, {"body": "thanks dan gon na ask another question article answers thanks", "d": "3/2016"}, {"body": "nt end react core use reactstyleproptype", "d": "3/2016"}, {"body": "thanks quick response looked quite style props missing etc instantly noticed flex related ones suppose list larger", "d": "3/2016"}, {"body": "thank suggestion try expand api surface area proptypes effectively maintenance mode longer term plan use something like flow instead indeed brigand project shows solved ecosystem react gets firstclass support inline styles blessed solution style react apps might reconsider please use feel free file issues supporting style props cheers", "d": "3/2016"}, {"body": "radubrehar try find better list thanks pointing continuing", "d": "3/2016"}, {"body": "thanks dan gaearon amp brigand seems like commonsense solution go opened issue since wondered might good idea get react wanted hear opinions well thanks feedback belief well small api surface area makes react easy jump", "d": "3/2016"}, {"body": "usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue takes radar feel free continue conversation move stackoverflow regards specifics question want test updates manually create divcontainer render twice mentioned nt need use renderintodocument nt find useful particular test", "d": "3/2016"}, {"body": "thks reply jimfb think would better render method optional parameter representing component container value parameter null container created value null container reused less change switch code beetween recreate container time reuse container next times", "d": "3/2016"}, {"body": "sounds much tied specific application unlikely bug react try keep gh tried posting stack overflow specific information link project people look see going posted lots unspecific information specific issue nt actually say invariant violated best guess need enable another transform export line transformed common js going close since nt bug react", "d": "3/2016"}, {"body": "hey tell transfer common js mar pm paul shannessy notifications githubcom wrote closed receiving authored thread reply email directly view github", "d": "3/2016"}, {"body": "babel", "d": "3/2016"}, {"body": "yeah using babel still problem mar pm paul shannessy notifications githubcom wrote babel receiving authored thread reply email directly view github", "d": "3/2016"}, {"body": "use preset last response put please use another medium support", "d": "3/2016"}, {"body": "thanks reporting get fixed", "d": "3/2016"}, {"body": "checking unexpected warnings tests curious crept unnoticed", "d": "3/2016"}, {"body": "node nt support proxies none code actually getting tested even running flag least nt enable since progress could probably run force", "d": "3/2016"}, {"body": "tag appear inside another tag html file like html outer inner results thing happens programmatically insert tag using", "d": "3/2016"}, {"body": "use case using symbols state keys state already private never shared clear benefit supporting symbols keys would mind sharing thoughts", "d": "3/2016"}, {"body": "sure check idea symbol provided prop map dynamic state property given could also accomplished unique strings use case least demonstrated", "d": "3/2016"}, {"body": "cc sebmarkbage basically boils fact polyfill inside react nt handle symbols use assign pending updates current state knew going first added long time ago symbols real thing browser support maybe", "d": "3/2016"}, {"body": "zpao pollyfill would nt already work browsers native implementation supports symbols curious edit oh see nt actually use native ever would making module return native supported resolve behavior implements native method nt", "d": "3/2016"}, {"body": "polyfill always use never fall back native implementation time adding spec changed around handling nullundefined think decided always use code consistency code", "d": "3/2016"}, {"body": "would open pr checks symbols well happy work something guys would like see", "d": "3/2016"}, {"body": "nt know yet would like get input sebmarkbage intent deciding fix personally think yes would likely get rid polyfill use babelpolyfillruntime even say must include polyfill like code", "d": "3/2016"}, {"body": "yea use native available either using module mandatory external polyfill probably best keep native available easy miss polyfill warning testing modern browsers", "d": "3/2016"}, {"body": "module could updated return native function exists symbol support could added nt using something similar objectassign pollyfill", "d": "3/2016"}, {"body": "clear purposed solution eventually rely consumer implement appropriate polyfill ie via replaced something like", "d": "3/2016"}, {"body": "gingur discusses later option using preferred solution far", "d": "3/2016"}, {"body": "would nice repo allowing consumer choose either supply pollyfills ie use ones needed run would also allow node run without need polyfills", "d": "3/2016"}, {"body": "trapping code got moved around bit paste stack repro consistent repro run would helpful appreciate trying let us know get working high level assumption special event code events nt bubble dom nodes case img header likely load error event possible event firing componentwillunmount happening turn triggering rerender removing img would thought happens outside current event loop b node removed event listener removed could happen unmount setstate handling code pretty confusing though perhaps spicyj knows", "d": "3/2016"}, {"body": "nt know offhand repro case would helpful nt ever see error", "d": "3/2016"}, {"body": "spicyj nailing tough keep trying get time available remote debugging work well zpao get stack trace get chance well", "d": "3/2016"}, {"body": "thank reporting believe duplicate closing feel free join discussion", "d": "3/2016"}, {"body": "would mind creating jsfiddle reproducing issue preferable use react verify happens latest code thank reporting", "d": "3/2016"}, {"body": "hey marcolanaro gaearon put together jsfiddle attempting reproduce describing nt seem two controlled inputs behave differently see least chrome event handler attached component reproduce behavior describing whitespace entered though controlled input require handler agree behavior likely throw warning", "d": "3/2016"}, {"body": "gaearon aweary goal validate email field striping spaces soon user typing jsfiddle see two controlled input fields behave differently type spaces thank lot help", "d": "3/2016"}, {"body": "marcolanaro see seems like examples demonstrate root issue elements handle vs", "d": "3/2016"}, {"body": "tested fiddle firefox controlled inputs behave correctly seems like due bug mozilla mozilla trim chrome already trimmed according hence react detect difference dom state internal state hence updates issue similar", "d": "3/2016"}, {"body": "tested chrome email input behave correctly", "d": "3/2016"}, {"body": "clarify new issue happening well edit tried looks like nt new come back see anything possibly ship thanks filing repro", "d": "3/2016"}, {"body": "type thing literally worst engineers try helpful automatically trimming value end making life difficult code ever trivially simple thing pass values along ironically fired onchange user hit space bar controlled email inputs would necessarily strip spaces even nt desired behavior suppose could try track keystrokes derive backing state sebmarkbage said supporting makes custom handling text input incredibly difficult borderline impossible get right almost tempted say wo nt fix unless someone idea could reasonably situation", "d": "3/2016"}, {"body": "keeping translations uptodate ongoing effort rather actionable issue nt need separate issue track language tracking improved translation management going close issue feel free submit pull request translation mentioned", "d": "3/2016"}, {"body": "think want use reactaddonscsstransitiongroup instead reactaddonstransitiongroup example give proper errors transition name etc", "d": "3/2016"}, {"body": "devinargenta thanks comment still case reacttransitiongroup nt error least give clear error transitiongroup csstransitiongroup related different sorry terse bug report confusing reporting bugs projects work often nt explain fully someone without context use issue almost notes", "d": "3/2016"}, {"body": "please provide jsbin replicating issue", "d": "3/2016"}, {"body": "sorry bug caused browser plugin", "d": "3/2016"}, {"body": "thanks taking time investigate", "d": "3/2016"}, {"body": "super interesting improved startup time critical seems like one trick would accommodate existing projects includes react internals badly would affect smooth upgrade path", "d": "3/2016"}, {"body": "relying react internals never supported first place edge cases still necessary renderers presumably would come public apis unstable exported modules", "d": "3/2016"}, {"body": "taking step want consider using bundled file npm single entry point dev check requiring amp rexporting either min dev version downside nt get shared deps everything comes fbjs anything else might depend future long deps stateless ok piece figure bridges packages like reactdom reactnative etc making sure right bits public apis unstable ones exposed", "d": "3/2016"}, {"body": "whatever opinion worth really like seen would cool rough numbers published react blog reference point projects", "d": "3/2016"}, {"body": "gaearon thank resurfacing crazy year since opened radium issue like idea warning shorthand properties like surprises merging style objects using longer property names question intent issue address analysis individual style objects also desire analyze warn possible collisions properties conditionally applied", "d": "3/2016"}, {"body": "question intent issue address analysis individual style objects also desire analyze warn possible collisions properties conditionally applied sure understand question elaborate", "d": "3/2016"}, {"body": "sure invalid element makes sense warn experience combination easy avoid difficult anticipate debug styles applied dynamically conditional logic based props state media queries radium etc passed props merged lower order style objects warning shorthand attribute occurs attributes might affect border involved warning seems like dogmatic rule helpful debugging tool since shorthand still technically valid however attribute separate style changing hover would affect border involved get applied runtime node already shorthand like warned early possible things tend break", "d": "3/2016"}, {"body": "ah good point probably warn know styles overlap sure easy tell thought much good solution", "d": "3/2016"}, {"body": "gaearon alternate solution like better use csstext per iirc cleanly solves superset issues", "d": "3/2016"}, {"body": "situations thirdparty component defines styles allows overrides say component defines style want override style", "d": "3/2016"}, {"body": "provide code sample like jsbin reproducing", "d": "3/2016"}, {"body": "use take look output console properties listed scroll see properties mentioned plus weird props", "d": "3/2016"}, {"body": "isunitlessnumber checks different browser prefixes affect actual used style name putting seeing invalid property names expected mean invalid property names actually used anywhere checks closing appears work designed extra checks careful avoid hardcoding every possible prefix permutation see incorrect behavior specific properties please provide jsfiddle reproducing happy reopen inspect worried performs tests invalid tradeoff lets us avoid keeping much larger whitelist hope explains missed something misunderstood please let know", "d": "3/2016"}, {"body": "mutating default prop passed line illegal usage question use github track bugs react core rather usage questions appropriate place usage questions stackoverflow going close issue feel free continue conversation thread move discussion stackoverflow", "d": "3/2016"}, {"body": "pass nested properties without manual mutation example javascript componentdefaultprops nested default default const props nested value let component guide code jsx spread attribute feature override lose default nested properties need implements recursive traversing nested objects stage jsx spread attributes parsing useful pattern case", "d": "3/2016"}, {"body": "moved stackoverflow", "d": "3/2016"}, {"body": "thanks bandwidth answer questions stackoverflow better place", "d": "3/2016"}, {"body": "yes modules work packaged module npm need access private apis want use prepackaged react addon recommend use use reactwithaddons map reactaddonscsstransitiongroup reactaddonscsstransitiongroup", "d": "3/2016"}, {"body": "ok works nt know webpack supported produces thanks", "d": "3/2016"}, {"body": "yes part change generate elements instead markup string turns would appear work worked first render never subsequent renders would set directly ignored result inconsitent behavior never supported feature currently need use css inline style library uses css want use", "d": "3/2016"}, {"body": "know generating elements also set important styles one line js example problem performance", "d": "3/2016"}, {"body": "warning added would pleasure concise relevant possible", "d": "3/2016"}, {"body": "would remove comments header comment file found really helpful searching component repo since relative import paths", "d": "3/2016"}, {"body": "found really helpful searching component repo since relative import paths remove use relative paths like everybody else", "d": "3/2016"}, {"body": "curious great everyone else bit primarily documentationmarketing issue businessasusual fb totally foreign referenced anywhere someone comes looking code casual observation haste seemed hindered outside contributors contributions rn project", "d": "3/2016"}, {"body": "incoherent notes made earlier design philosophy global config ex events dangerouslysetinnerhtml abstractions scale reacttarget benchmarking right thing nt put things core nt need moving flux core maybe simple gt easy eg cursor controlled components server rendering vs service workers optimize readabilitygreppability lifecycle names apis accept tooliberal data eg nulls helpful long run", "d": "3/2016"}, {"body": "looking good high level overview react internals work together could include something like well think really helpful", "d": "3/2016"}, {"body": "things break encapsulation potentially leaking implementation details across levels components favor modularity ability build outside react eg component unless something expect apps build eg component state", "d": "3/2016"}, {"body": "commonly requested explanation happens call start end granted change releases high level overview process would improve contributors understanding quite bit", "d": "3/2016"}, {"body": "things asked trying understand contribute codebase probably lot costs nothing lay things flow mount update really transaction reconciliation work use mixins inconsistencies regarding use globals globals work reactdom react tightly coupled insights concept renderer works injection works parts written goal performant cost dense ugly", "d": "3/2016"}, {"body": "everything mentioned looks great definitely feel like adding reactspecific contributing documentation must help people contribute also believe making things beginner friendly valuable people want contribute familiar git github may even know pull request even though technically react team responsibility teach people fundamental concepts think leading good solid resources would really helpful main motivation behind either way thanks giving thought making easier contribute react project good example projects community", "d": "3/2016"}, {"body": "overall impression got reading codebase facebook thought hard read full hackish things inconsistencies know great engineers written codebase must valid reasons historic performance architecture opinion backward compat would great know general history code also realized recently reactnative written different way modern like know plans regarding projects", "d": "3/2016"}, {"body": "ways react native modern lots builds top react little higherlevel otherwise tend think coding styles similar", "d": "3/2016"}, {"body": "find folder structure much easier follow example found less inconsistencies familiar react native codebase", "d": "3/2016"}, {"body": "may make sense compare", "d": "3/2016"}, {"body": "agree jide internal reliance mixins eg injection confusing want thread become place bikeshed different internal complexities definitely want document high level ideas behind code organization split module responsibilities well historical context behind", "d": "3/2016"}, {"body": "like contribute core react least understand found hard approach taking quick look discouraged felt time contribute minor fixes documentation github issues like guide yes", "d": "3/2016"}, {"body": "gaearon think list would really help least pretty difficult jump project without good notes guide personally take many hours takes read code reason sys works well least yet taking vacation soon maybe smile", "d": "3/2016"}, {"body": "moving flux core maybe spicyj nt want steer topic possible elaborate link thoughts", "d": "3/2016"}, {"body": "nhunzaker related discussion nothing decided yet", "d": "3/2016"}, {"body": "would contributed react really need", "d": "3/2016"}, {"body": "one projects talked creating sort readme contributing different contributing guides seem focus general things like code conventions project philosophies kind turned walkthrough codebase got pr proposal project section walkthrough could look like sometimes looking unfamiliar patterns hard tell vital organs sinews also type person learns best macro micro birdseye view project seemed helpful", "d": "3/2016"}, {"body": "started contributing accepted prs tests far information code better check eslint developer guide example read started much better understanding code yes require effort time write maintain however since react popular library open source think worth help identify current issues code maybe give idea optimize", "d": "3/2016"}, {"body": "aldo explains contribute documentation website built jsx properly highlighted code snippets big struggle love contribute documentation nt understand", "d": "3/2016"}, {"body": "make sure doc properly indexed algolia search bar great addition way sorry double comment mobile version gh nt edit button", "d": "3/2016"}, {"body": "extended example including composed component return thispropsheader thispropslogo thispropscontent thispropsbutton vs", "d": "3/2016"}, {"body": "interesting idea think something like would success userland babel plugin something rather react", "d": "3/2016"}, {"body": "yeah aweary exactly correct jsx transformed done babel react babel makes easy write transforms something like emmet userland without changes react transform becomes popular enough might even become babel preset people could enable regardless something track react repository", "d": "3/2016"}, {"body": "cool thanks", "d": "3/2016"}, {"body": "output warning warning mycomponent valid react element null must returned may returned undefined array invalid object detect function nt return valid return type print warning really nt much could detect case nt get warning please verify using dev build react instead production build issues please provide simple jsfiddle demonstrates issue", "d": "3/2016"}, {"body": "ah bad nt realize already dev builds idea get production", "d": "3/2016"}, {"body": "production vs dev builds refer two different build configurations using dev build developing devserver prod build package app deploy production servers example go downloads page notice development production builds available already published likely another rc final release", "d": "3/2016"}, {"body": "never mind user error", "d": "3/2016"}, {"body": "reproed either react bug firefox bug", "d": "3/2016"}, {"body": "please narrow reproducible test case show relevant code definitely bug react control handled one relevant result discovered searching error message posted apparently intended behavior likely class another class call something like need change call base constructor closing caused react hope helps", "d": "3/2016"}, {"body": "thx help based tips found class properties causes problem changing eliminates error btw redux rocks", "d": "3/2016"}, {"body": "using class properties node also using babel without class transform", "d": "3/2016"}, {"body": "yes totally right ran tests think answer using without", "d": "3/2016"}, {"body": "wow", "d": "3/2016"}, {"body": "amized tried reactperf printwasted particular", "d": "3/2016"}, {"body": "think reactperf would give results author already nailed specific issue selection restoration good knowledge part codebase wonder opt selection first place make faster", "d": "3/2016"}, {"body": "alexeyraspopov helps unnecessary renders piece puzzle op specifically digging reactside performance matters", "d": "3/2016"}, {"body": "yaycmyk eliminating unnecessary render cycles decrease amount work per frame", "d": "3/2016"}, {"body": "amized tried stripping code minimum experiencing bug ca nt really reproduce stack mentioning reactinput abilities followed selectionrestoration function matches name nt really see would responsible function taking long stack edit might connected getactiveelement edit really making progress", "d": "3/2016"}, {"body": "interesting amized couple questions might help debugging issue version react using tried possible using different versions react see still get performances findings env also", "d": "3/2016"}, {"body": "thanks tips using react done investigation mention seems important fact video playing page together react components updating jw player using flash streaming experiments addingremoving video test video selectionrestoration aggregated total time setstate test video selectionrestoration aggregated total time setstate test video selectionrestoration aggregated total time setstate test video selectionrestoration aggregated total time setstate given bug seems triggered flash would nt expect top priority list fix although may indicative problem selectionrestoration", "d": "3/2016"}, {"body": "initial flame graph showed taking red flag look implementation function see read couple short string properties couple equality checks wonder reading properties flash object requires expensive ipc context switches could potentially special case flash flash dying anyway sure worth headache would probably take pr probably would nt higher priority issues", "d": "3/2016"}, {"body": "ca nt reproduce maybe misunderstanding saying showing node unchecked dom might run issues use nt see code", "d": "3/2016"}, {"body": "zpao believe means even unchecking element still attribute inspect devtools seems case end least chrome fwiw", "d": "3/2016"}, {"body": "yes meant sorry nt clear tried firefox chrome really problem user experience functional testing although workaround set use class selector screenshot fiddle debugger showing button unchecked strange thing indeed devtools bug firefox chrome contrary effect also true initially unchecked inputs never get attribute clicked although get selected visually returns", "d": "3/2016"}, {"body": "ah see attribute set property nt solved remove attribute instead setting property false see code calls upgraded saw issue", "d": "3/2016"}, {"body": "zpao react add attribute element checked jsfiddle looks like nt add attribute handled checked state internally set attribute", "d": "3/2016"}, {"body": "good syranide discussion", "d": "3/2016"}, {"body": "zpao wasis separate discussion inputs value somewhere else cc spicyj sure ended going away native behavior seen actively update attribute dom edit perhaps intentionally result however noted behavior seen expected behavior get behavior native checkboxes well property updated attribute reflects initial state", "d": "3/2016"}, {"body": "ah know native behavior react issue nt think react try different behavior sucks though means instance one never use css selector anyway style currently selected element classnamechecked way selenium find", "d": "3/2016"}, {"body": "muraveill would assume works specifically added tests attribute", "d": "3/2016"}, {"body": "repeat make sense talk native behavior html concept going created concept html property assignment attribute assignment blow away entire thing replace whole node also user click decide behavior react matches none objectively correct native behavior misleading talk case seems like setting attribute least confusing people cases would work still clear whether best especially forms", "d": "3/2016"}, {"body": "repeat make sense talk native behavior html concept going decide behavior react matches none objectively correct native behavior misleading talk case still nt buy specification explicitly states attribute reflects initial value property reflects current value check without additional scripting applied behavior get also meant generally update via consistent user interaction asked something plain native checkboxes react something enables deviating yes react nt really fit html model perfectly fine think quite clearly native behavior anyway nt want derail", "d": "3/2016"}, {"body": "meant update property equal", "d": "3/2016"}, {"body": "want simulate user inputfilternormalizeetc use property nt change initial value want replace value ie changing data source use attribute similar setting key react resetting checkbox sense agree differentiation nt really work well react good reason difference nt really mind nt really major implications clearly different plain imho", "d": "3/2016"}, {"body": "conceptually upon every change throw away entire page rerender scratch ideally output initial render identical output initial render followed update render assuming final state", "d": "3/2016"}, {"body": "jimfb yes partial truth inputs also focus selection undo history etc context discussion also initial value reflected attribute currently control lifetime internal external state via react makes sense even seemingly controlled components nt agree htmldom reflecting initial value attribute fine weird html quirk interacting plain checkbox attribute updated react checkbox attribute updated produces different results react something differently imho fine clearly deviating normal htmldom behavior", "d": "3/2016"}, {"body": "working small tool relies callbacks called found cases never happened state set callback pushed queue component unmounted callback lost never called could calling believe known albeit undocumented definitely obvious issue", "d": "3/2016"}, {"body": "issue referring apparently fixed would great verify andor provide test case reproducing issue would hugely helpful", "d": "3/2016"}, {"body": "sure state changed component already mounted setting project bit complicated two components passed reactrouter routes one children children function saved called calls callback trigger situation route change function given router prop seems used callback router call saved functions children called called one however route component changed children unmounted along parent callbacks disappear traced function array components start callbacks however called parent component children components get destroyed callback queues set next iterations loop children callbacks called try simplify example post link jsfiddle", "d": "3/2016"}, {"body": "ok turned lot complicated thought demo try describe example components container b b contained contained container depending state container render without b first start components rendered something cases state container change render without b update prevented method returning important bit overlooked sorry callback update container fires ruins everything update forced state changed returns time nt cause b removed immediately batched changes update b forced changes invoked synchronously container callback update b callback attached changes batched first component rerenders finaly b unmounted causes callbacks registered b cleared callback lost forever conclusion seems callback passed called probably wo nt happen depends happens nt seem much apart call nt clue sorry complicated example", "d": "3/2016"}, {"body": "thanks working realize read description without paying enough attention missed part working small tool relies callbacks called found cases never happened state set callback pushed queue component unmounted callback lost never called imo expected behavior callback fires changes flushed dom since never flushed never called however probably communicate better documentation spicyj interpretation correct", "d": "3/2016"}, {"body": "also agree expected sorry unclear still leaves true returning maybe something like would second optional parameter callback function executed completed even component rerendered eg returns however component unmounted callback called wo nt called later anymore handle situations method", "d": "3/2016"}, {"body": "oh let forget callbacks nt checked callback pushed queue nt mention deprecated removed anyway", "d": "3/2016"}, {"body": "yes think setstate callback fires rerender componentdidupdate nt fire component unmounts first", "d": "3/2016"}, {"body": "talking nested prop types within way access least found looking source code", "d": "3/2016"}, {"body": "ic perhaps try using thanks", "d": "3/2016"}, {"body": "ok glad found solution works let keep usage questions stackoverflow proptypes legacymaintenance mode probably something adding react", "d": "3/2016"}, {"body": "description provided nothing actionable", "d": "3/2016"}, {"body": "prinzhorn browser use chrome mac acts like native color picker fires input change color picker change events closing picker react version", "d": "3/2016"}, {"body": "confirm cbrwizard windows chrome version", "d": "3/2016"}, {"body": "think intentional normalized across browsers please see event behaves would expect whenever form field changed event fired rather inconsistently blur intentionally break existing browser behavior misnomer behavior react relies event react user input real time see also", "d": "3/2016"}, {"body": "thanks replies exact behavior seems differ depending browser os chromium ubuntu fire close picker using x top right corner yeah great ux saying accept color value whereas firefox ubuntu cancel ok buttons trigger continuous since native behavior inconsistent well guess fine react tries make consistent first expecting see picker closed", "d": "3/2016"}, {"body": "would like investigate happens", "d": "3/2016"}, {"body": "related", "d": "3/2016"}, {"body": "happens api bind pass event callback event argument ends parameter obviously callable", "d": "3/2016"}, {"body": "ah right problem bind first argument second one becomes event event handler result thinks callback argument fails fix using second argument ignored probably provide better invariant message receive event instead callback common use case people encounter", "d": "3/2016"}, {"body": "would like reopen provide better error message decide necessary", "d": "3/2016"}, {"body": "appears better error message added however would still argue uncaught invariant violation enqueuecallback called callback type object function expected much better particular case explain problem much specifically", "d": "3/2016"}, {"body": "think good argument pages site invariant warning go much depth string show specific cases like show common bad code might triggering adding code react possible debugging gets tricky especially case like could probably check breaks boundary core dom would need go roundabout way", "d": "3/2016"}, {"body": "put address", "d": "3/2016"}, {"body": "close continue discussion", "d": "3/2016"}, {"body": "reproduce looked might happening", "d": "3/2016"}, {"body": "already issue pr", "d": "3/2016"}, {"body": "oh indeed closing duplicate", "d": "3/2016"}, {"body": "release candidate bug probably already fixed blog post", "d": "3/2016"}, {"body": "closing likely duplicate fixed still experience problem please let us know reopen thank reporting", "d": "3/2016"}, {"body": "fat arrow function makes difference use babel preset works", "d": "3/2016"}, {"body": "cody correct problem webpack fails parse arrow function compiled code replace module resolution mechanism see inspecting compiled code js var component reactcreateclass displayname component possible webpack beta problem checked either case likely want code run browsers want compile arrow functions babel adding preset babel configuration solve problem closing related react", "d": "3/2016"}, {"body": "thanks help", "d": "3/2016"}, {"body": "reactisvalidelement help let know missed something", "d": "3/2016"}, {"body": "thanks much gaearon", "d": "3/2016"}, {"body": "browsers alter code put inside example html html hey using inspect chrome shows dom different html html hey dom different react expects strange bugs happen rerender therefore react warns", "d": "3/2016"}, {"body": "alansouzati reading wrong flow content category accepts phrasing content part", "d": "3/2016"}, {"body": "thanks clarification guys", "d": "3/2016"}, {"body": "must problem browserencoding setup works fine chrome canary", "d": "3/2016"}, {"body": "mxstbr link works browser using react version btw", "d": "3/2016"}, {"body": "need set charset meta tag html doc", "d": "3/2016"}, {"body": "zpao oh wow thanks", "d": "3/2016"}, {"body": "think close favor definitely something plan improve testing purposes gradually moving warnings new devtools api make possible", "d": "3/2016"}, {"body": "whole day looking mistery thing code discovered main reason bug undefined moment one nasty chrome extension prepended two elements appended one element container react removed staff english madskills disabling extention solved problem made day completed work particular problem required rather suggested respectful developers implement small functionality hood filters nonreact elements hell tells noob like page state changes undefined way", "d": "3/2016"}, {"body": "yeah something considering help unrelated note antipatterns code relevant issue figure mention deriving state based props usually antipattern better move state management parent component provide callback child prop using also antipattern react automatically rerender component call parent assinging something directly anything inside antipattern suggest create new object based old one call update relevant part state reference new object treating state immutable lets add powerful performance optimizations later possible compare objects changed comparing references previous values never reason assign props immutable react update reference exits manually recommend read thinking react covers topdown data flow state ownership react provides escape hatches using absolutely primary way build react apps might problems later unless got back topics get familiar hope helpful cheers", "d": "3/2016"}, {"body": "assinging something directly anything inside thisstate antipattern would really appreciate advices achieve single instruction issue complex forms set properties seems actually started use never reason assign thisprops whoa since debuged react lot find reason issue see abilities prevent state needed immutable props knowledge affect lot previously done code", "d": "3/2016"}, {"body": "use something like react immutability helpers working plain objects immutablejs provides api deep updates general state complicated might want consider moving handling component library like disclaimer wrote lets describe changes state pure functions call reducer composition pattern used corresponds deep updates want implement finally even mutate state directly still need reassign props correct way go mutation perform component owns state call change propagate need anything props make happen", "d": "3/2016"}, {"body": "exact line code throwing error show call stack please", "d": "3/2016"}, {"body": "debugging experience truly abysmal smile able get break actual error site removing es react line question see related react apparently isequalnode supported since see also information quirksmode usage located reactselect code may ask fix sure using rather comparison case bug react close", "d": "3/2016"}, {"body": "seem two distinct things causing issue possible argument points dom nodes hidden field points component instances point dom nodes guess accepts argument better warning pulls component instances turn pull nodes turn pull components", "d": "3/2016"}, {"body": "ah nice find issue code actually point thanks magic named inputs properties screwing wonder cases like", "d": "3/2016"}, {"body": "zpao first thought case could specialcase window nt think quite right think issue occurs traverse dom hierarchy purposes synthetically bubbling event hitting node one magic expando properties bit complicated identify form nodes overwritten named inputs searching nodes cleanest solution think moment return false node sucky thing general solution likely places codebase going need play whackabug", "d": "3/2016"}, {"body": "yea updated comment mentioned form otherwise window properties due ids name whereas form properties names maybe something iframes debugger screwed", "d": "3/2016"}, {"body": "could instead ever checking nodename checks code would become risk environment nt globals expect maybe read instead amp wrap potential problems canusedom checks nt hit path node anyway nt think problem case maybe others", "d": "3/2016"}, {"body": "find mentions page help understand see", "d": "3/2016"}, {"body": "ah mistake comes copying elements downloads page tutorial page updated main post", "d": "3/2016"}, {"body": "thanks reproduce zpao give insight", "d": "3/2016"}, {"body": "something like gist enabling cors simplehttpserver might help", "d": "3/2016"}, {"body": "petetnt problem headers nt set fbme server python gist irrelevant solve issue security feature browsers since checking integrity leak information content response fbcdn allow origins fbme root cause error fbme serve anything directly always redirects always redirects might able blindly enable cors headers fbme without security impact thereby relying redirectdestination control cors permissions otherwise would need enable crossorigin headers individual urls require adding data fburl database probably intense task another option use different url fbme could link directly cdn instance think shortest term solution remove offending attributes script tag makes tags look cleanersimpler read less scary new user anyway", "d": "3/2016"}, {"body": "oh okay thanks jimfb", "d": "3/2016"}, {"body": "fbme always redirect thought set right worked thought checked headers added attributes docs maybe think ultimately nt use fbme nt gone done yet might set little minicdn since issues older fbme links corrupted cache somewhere thought tracked still see occasional issues cdnjs jsdelivr great external thirdparty options right definitely recommend fbme regardless need control ship releases relying entirely nt cards think keep attributes work moving towards world checks good thing help promote features shorterterm yea fine", "d": "3/2016"}, {"body": "might set little minicdn used cloudfront past certify totally awesome fwiw", "d": "3/2016"}, {"body": "thanks reporting known issue solved yet please subscribe order track closing one duplicate keep list focused", "d": "3/2016"}, {"body": "never render client side server side provide jsfiddle demonstrates invariant violation", "d": "3/2016"}, {"body": "thanks tracking specifically could browsers nt actually support body usage actually parsed markup body node nt exist seems likely matches see situations browser changes markup wo nt chance look days might best use alternate approach", "d": "3/2016"}, {"body": "remove body tag seems work ok whats clear point server sends body tag parsed dom node least mac chrome safari results error since datareactid body missing ie nt support foreignobject relevant ms edge nt tested", "d": "3/2016"}, {"body": "actually parsed markup body node nt exist seems likely matches see situations browser changes markup seems even without react get chrome firefox matter make actual node", "d": "3/2016"}, {"body": "gaearon fwiw manage put one", "d": "3/2016"}, {"body": "needed id still react mount markup use rendertostaticmarkup render dom thrown away bad large content might see flicker stateful elements like inputs mentioned twitter specific problem repro please file new issue see going", "d": "3/2016"}, {"body": "thanks", "d": "3/2016"}, {"body": "sounds like intended react native repository going close favor posting", "d": "3/2016"}, {"body": "found bug react core code base soooo pretty sure right place", "d": "3/2016"}, {"body": "elaborate reproduce core", "d": "3/2016"}, {"body": "jimfb sure reproduce core believe specific react native uses referenced react native issue discusses crash", "d": "3/2016"}, {"body": "yeah agree initially suggested posting reactnative repository something like would hide problem making difficult debugreproducewitness even fix would loosing events bad user experience going close favor nt think anything actionable rn team bounces back reinvestigate", "d": "3/2016"}, {"body": "hey jimfb submitted fix issue thanks", "d": "3/2016"}, {"body": "btw confirm code works fine react indeed seem regression keep investigating", "d": "3/2016"}, {"body": "first suspicion dupe issue new handling text nodes ie fixed included next rc", "d": "3/2016"}, {"body": "ah checked closed issues well manually applied confirm solved problem thanks", "d": "3/2016"}, {"body": "thumbsup glad help", "d": "3/2016"}, {"body": "good", "d": "3/2016"}, {"body": "create new function means different functions maybe reason work", "d": "3/2016"}, {"body": "stackoverflow place questions like need prebind pass store", "d": "3/2016"}, {"body": "since issue react stackoverflow would appropriate place ask noted correctly cody yaycmyk problem functions pass match binding early would fix problem", "d": "3/2016"}, {"body": "thanks posting solution", "d": "3/2016"}, {"body": "dupe fixed next rc", "d": "3/2016"}, {"body": "yes closing per iamdustan fixed latestmaster", "d": "3/2016"}, {"body": "thank super prompt response eta new release", "d": "3/2016"}, {"body": "eta within next week", "d": "3/2016"}, {"body": "seems fun would use case though", "d": "3/2016"}, {"body": "like react container creating empty container adding nodes would nice dynamically generated nodes could live directly alongside react nodes usecases people use today without requiring wrapping container", "d": "3/2016"}, {"body": "would useful actually behaviors like infinite tableview implementation attaching subtree", "d": "3/2016"}, {"body": "would also mean ca nt run worker anywhere requires crossing serialization boundary eg reactnative guess would nt want", "d": "3/2016"}, {"body": "edit nevermind see meant", "d": "3/2016"}, {"body": "jimfb far understand dom manipulation still occur main thread imagine similaralternative api would allow work worker yes ca nt pass raw node like render also imagine usecases reactnative obviously using equivalent native handles instead supported nt know anyway understand would low prio regardless considering empty containers blessed interop think would make sense also enable away containers improve interop librariestechs considering transparent node type", "d": "3/2016"}, {"body": "maybe another use case compositor worker", "d": "3/2016"}, {"body": "note mostly self another problem jsx elements inserted multiple times dom elements valid component", "d": "3/2016"}, {"body": "hmm clone elements", "d": "3/2016"}, {"body": "jarail ca nt clone dom nodes since whole point would retain referential identity", "d": "3/2016"}, {"body": "jimfb sure follow meaning regards external event handlers references dom node thinking concept way create template node never attached document cloning faster cases believe rather creating new element render include ref js object unattached element return element gets cloned rather attached would nt hot updates though well guess returning object means nt need clone", "d": "3/2016"}, {"body": "jimfb oh right true good error message go nt really see issue practice yeah right jarail cloning nodes technically possible really make sense context imho displaying hierarchy like node provided inserting exact node whatever created still function intended", "d": "3/2016"}, {"body": "quite sure seeing", "d": "3/2016"}, {"body": "agree syranide looks like duplicate mentioned bugs fix already merged master experience bug released soon masterfuture build eg ping us reopenreinvestigate", "d": "3/2016"}, {"body": "thanks everyone looking forward", "d": "3/2016"}, {"body": "correct fix code", "d": "3/2016"}, {"body": "agree nothing indicate bug react looks like usage errorquestion", "d": "3/2016"}, {"body": "usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue takes radar feel free continue conversation move stackoverflow", "d": "3/2016"}, {"body": "ahve posted question stack overflow link", "d": "3/2016"}, {"body": "first glance like api much better current api function name would need bit bikeshedding least would need live also given name indicates dangerous making html safe rather dangerously marking trusted cc syranide sebmarkbage thoughts api", "d": "3/2016"}, {"body": "jimfb agree function name could use work think still simpler dangerouslysetinnerhtml though think something like would great", "d": "3/2016"}, {"body": "jimfb think correct api intention propose time ago seems technically prohibitive using guarantee single react container housing user nodes user modifies outside control fine isolated api user nodes mixed react nodes tricky potentially fragile multiple user nodes adjacent updated independently nt really seem solvable cases edit perhaps comments would work delimiters actually html also represent one root nodes text complicates even nt mean ca nt change api allowing child alternatively would also workable could even implement today userland makes worse really edit however given new render might actually realistic", "d": "3/2016"}, {"body": "proposal sugar wrapper around reactcreateelement something differently bikeshedding name implies makes html safe nt done", "d": "3/2016"}, {"body": "syranide could something like wrapping user html two comment tags think allowing one child thing although still pretty looses advantages mentioned brigand different allows user html exist react html within parent container something acheivable userland since must return single react element", "d": "3/2016"}, {"body": "fwiw django called marksafe python snake case convention like short clear regardless name change direction", "d": "3/2016"}, {"body": "sthzg like updated example avoid initial bikeshedding syranide although initially agreed think ergonomically would annoying typically reactdom required root component need render would require anywhere html trusted really sure would make sense context rendering outside dom though since nt muchany mobile experience also generic", "d": "3/2016"}, {"body": "dylanpiercey thanks clarification like marksafe markassafehtml", "d": "3/2016"}, {"body": "really expertise seems logical api would something direction rather longer marking html safe creating html datatype understood react rendered nt really followed api discussions lately might make sense reasons ie put differently imho would make sense context perhaps practice", "d": "3/2016"}, {"body": "syranide understand restricting api internal benefit creating fragment api proposing familiar internals react outsider api certainly uglier said still much rather even fragment api current api reasons mentioned issue", "d": "3/2016"}, {"body": "naming proposal conceptually replaces dangerouslysetinnerhtml safe htmlobject may reactdomcreatecomment future may map special syntax jsx may need called manually nt know also possible simply mapped regular tag name say comment comment seems html among children problem thus solved way want preserve safeness goes ontop api even though may look gross would still ok conceptually casting string htmlobjectstring type understood createhtmlfragment would return element imaginary internal type reactdomhtmlfragment", "d": "3/2016"}, {"body": "api seem nicer namingwise though would mistake move away watch nature current api name lot value signally users action potentially risks like approach rust took keyword outing compiler guarantees memory safety point going write safe code inside signals compiler nt going help similarly intentionally opting safety provided react component model notion danger current api signally put dangerous html", "d": "3/2016"}, {"body": "jquense wondering though long term would nt nicer keep verbose warnings behind warning pops developer tools long app nt built production user opts means eg option flag explicit import like scala want use experimental advanced compiler features one advantage approach might warning messages could better articulated expressive name functionmethod might ever get", "d": "3/2016"}, {"body": "talked sebmarkbage results overall sebastian indicated new api probably ok change probably low priority main concern performance case react nodes siblings foreign markup updating foreign markup might require iterating nodes delete individually need figure nodes foreign react siblings located however wonder react even dangeroushtml feature setting inner html nonreacty pattern clearly escape hatch alternative attach ref dom node set innerhtml dom node fundamental reason ca nt handled entirely within userland", "d": "3/2016"}, {"body": "jimfb thanks update would second paragraph also hold true server side rendering understand approach would something like eg getting reference setting programmatically would always require dom environment would nt", "d": "3/2016"}, {"body": "fundamental reason ca nt handled entirely within userland jimfb caveat must wrapped container node nt transparent node put always work one could insert document fragments dom keep would agree ca nt realistically setting inner html nonreacty pattern clearly escape hatch afaik large part initial sell leave react feels perfectly natural many frameworks ca nt also would nt label escape hatch would interoperability overall sebastian indicated new api probably ok change probably low priority main concern performance case react nodes siblings foreign markup updating foreign markup might require iterating nodes delete individually need figure nodes foreign react siblings located imho implementing interms able dom nodes children way makes sense would predictable could even entirely userland feature nt care ssr sigh", "d": "3/2016"}, {"body": "ah thanks sthzg neglected consider ssr right need sort api back favor new api proposal", "d": "3/2016"}, {"body": "please keep ssr mind", "d": "3/2016"}, {"body": "define ref string available object example define callback ref free anything including saving like string refs eventually going deprecated callback refs introduced later cover use cases string refs downsides suggest always use callback refs new code write future please consider asking questions stackoverflow officially consider issue tracker support forum unfortunately github search work well stackoverflow search likely somebody going ask whereas posted stackoverflow likely get good answer question would get voted people would learned found future", "d": "3/2016"}, {"body": "thank gaearon use stackoverflow next time", "d": "3/2016"}, {"body": "problem please feel free submit pull request documentation feel like could make obvious recommend callback ref pattern new code", "d": "3/2016"}, {"body": "intended discussed elsewhere rather unintuitive behavior every time render generating new function supplying refcallback react way knowing intents purposes identical previous one react treats new ref callback different previous one initializes current reference ps blame javascript p", "d": "3/2016"}, {"body": "oh see simple work around thanks maybe example docs updated also using inline callback focus element would weird effect every render closing issue though since issue resolved", "d": "3/2016"}, {"body": "precisely prereleases capture bugs unit tests team missed development", "d": "3/2016"}, {"body": "definitely something want please refer related discussion sure specific roadblocks better ask existing issue", "d": "3/2016"}, {"body": "iamdustan absolutely relying community catch core bugs ludicrous", "d": "3/2016"}, {"body": "yea bad one got caught couple things could differently particular one including limited browser testing thanks bringing definitely minds", "d": "3/2016"}, {"body": "certainly bug cc spicyj zpao", "d": "3/2016"}, {"body": "reproduce edge seems fine though", "d": "3/2016"}, {"body": "seems domlazytree different behaviour ie causes bug also reproduced edge", "d": "3/2016"}, {"body": "every text node skipped minimal repro case jsfiddle reactdomtextcomponent returns domlazytree something like documentfragment inserted parent element children added fragment nothing rendered", "d": "3/2016"}, {"body": "darn remember considering months back must forgotten easiest solution might treat document fragments specially domlazytree open ideas cc mwiencek interested", "d": "3/2016"}, {"body": "thanks everybody quick find reduction exactly process work", "d": "3/2016"}, {"body": "implementation detail best avoid relying something like would suggest come system unique keys eg use instead unlike ones generated react set explicitly full control guaranteed go away help", "d": "3/2016"}, {"body": "thanks dan suggestion solution clear although still adds extra attributes could manage unique keys base components hierarchy keys needed certain ones btw anyone tried leverage idea react developer tools testing", "d": "3/2016"}, {"body": "ca nt render child elements second example gave us correct need use wrap input element inside label element", "d": "3/2016"}, {"body": "looks like specific usage question going close future please try work elsewhere perhaps specific library authors stack overflow try keep issues focused bugs react support think found bug react request create minimal test case run ideally jsfiddle jsbin", "d": "3/2016"}, {"body": "trying use webpack alias react reactdom however several libs requiring react libraries directly webpack tries process includes lib dependencies bundle regardless react andor reactdom already included either cdn webpack alias", "d": "3/2016"}, {"body": "unfortunate side effect combining npm modules dist versions nt really anything without exposing modules transtion group addon needs react object like secretdom nt going using dist version react addons simply incompatible suggest using npm package react everybody using code", "d": "3/2016"}, {"body": "make contained repro case jsfiddle", "d": "3/2016"}, {"body": "done work work work", "d": "3/2016"}, {"body": "work react second day mistake sorry", "d": "3/2016"}, {"body": "divined bug react rather nuance dom events travel document tree dom event system always node triggers event necessarily node captures event example plain js setup handler click eg button page button even though handler attached document overall access current element captured event use circumstances described triggers event node holding text label option child node onclick event fires node well set node set also works click whitespace case triggering event actual element attributes thus app works expected quick fix update handler replacing long fix pass necessary data handler instead using handler pull details dom jquery example var autocompletesuggestion reactcreateclass updateselection var placeid thispropssuggestionplaceid var value thispropssuggestionname aside using singletons like like might create dataflow difficult trace predict suggested react way would flip responsibilities pass property eg function business changes required update state parent component", "d": "3/2016"}, {"body": "thx", "d": "3/2016"}, {"body": "think could great declare xor behaviors improve usability may somthing like end either fill width integer fill minwidth optionally widthoffset imagine two configurations", "d": "3/2016"}, {"body": "question stackoverflow think looking", "d": "3/2016"}, {"body": "hum nt think mixing oneoftype amp shape guess work thank", "d": "3/2016"}, {"body": "provide jsfiddle demonstrates issue fork", "d": "3/2016"}, {"body": "really jsfiddle seen error locally gulping project devtool open think chrome issue", "d": "3/2016"}, {"body": "likely hitting browser bug might also possible bug react unfortunately enough information team investigate manage isolate issue fiddle please let us know close issue happy reopen provide way reproduce thanks", "d": "3/2016"}, {"body": "jsxtransformer deprecated use babel jsx transpilation references deprecation notice react preset babel simpily use", "d": "3/2016"}, {"body": "transform use testing yeah couple extra parenthesis", "d": "3/2016"}, {"body": "thanks use babel bowser", "d": "3/2016"}, {"body": "cc hellendag hear knows something", "d": "3/2016"}, {"body": "since div static order focusable seems paste event occurs even static div given programmatic focus though hunch may intentional browsers nt know recommend creating jsfiddle renders contents plain html hooks event listener old fashioned way react involved help clarify whether react getting way", "d": "3/2016"}, {"body": "sorry meant say sure react specific issue suspect", "d": "3/2016"}, {"body": "try sure think", "d": "3/2016"}, {"body": "davidcrespo thank much worked", "d": "3/2016"}, {"body": "perryao wrong repo", "d": "3/2016"}, {"body": "ugh sorry", "d": "3/2016"}, {"body": "ultimately really trying specify component controlled currently empty intentional specify setting value empty string value specified undefined react way knowing intended render component empty value intended component uncontrolled source bugs warning exists sounds return empty string instead undefined assuming initial value search box empty string alternatively could nullundefined check component passing value input nt received much push back one think uncommon enough benefit outweighs cost therefore probably nt going change nothing actionable bug however thinking changes matter certainly reconsider", "d": "3/2016"}, {"body": "fair enough makes perfect sense", "d": "3/2016"}, {"body": "someone proposed ontouchtap might integrated", "d": "3/2016"}, {"body": "finally thanks heads banging days trying fix side thinking everything wrong setup commented yesterday thought materialui give try react", "d": "3/2016"}, {"body": "tested works fine without even touch emulator", "d": "3/2016"}, {"body": "adamhess", "d": "3/2016"}, {"body": "actually following semver whole time already explained versioning change linked push past corporate overlords", "d": "3/2016"}, {"body": "nt know jsbin nt save changes", "d": "3/2016"}, {"body": "html html html html jsx jsx function log e consolelog etargetvalue const select empty filled reactdomrender select documentgetelementbyid app", "d": "3/2016"}, {"body": "want fix point right place believe reactdom issue virtual dom node looks ok", "d": "3/2016"}, {"body": "yeah spent minutes looking pr suspect responsible nt see moment without actually dug code intuition look nt rely tips heavily nt want send wild goose chase", "d": "3/2016"}, {"body": "believe commit introduces bug changes file code responsible setting attributes nodes created straightforward fix older version checked removed property pretty much setting attributes case current version checks property sets attribute falsy questionable whether current behavior correct basically checks whether attribute classified true least attribute quirky comparison set node property element sort unique position attribute value provided tag content used value attribute exists even empty attribute used value example also behaves similar cases returns value attribute provided returns attribute value exists even empty thing abovementioned check done attribute applied checkbox returns attribute set expected checkboxes radios set element behavior returning content provided nt seem mentioned still implemented browsers expected anyway summarize element looks unique sense needs attribute explicitly set even empty string pr fixes issue", "d": "3/2016"}, {"body": "jimfb pr looking", "d": "3/2016"}, {"body": "however noted bug applies well nt really notice problem due new renderer means first time set set using logic instead means case applied previously would set attribute first time regardless thus taken consideration hence actually bug new renderer sense going solution fixes properties goes away entirely handled wrappers instead cc spicyj", "d": "3/2016"}, {"body": "syranide think set terms whether stripping empty attribute bug general element needs specific browser handling es cases empty value left might user inteded cases though understand attributes classified left attributes empty stripped either handle attribute special case handle element special case", "d": "3/2016"}, {"body": "everdimension semantictechnical differences even though visual difference applies inputs nt really see reason specialcase opinion nt really mind either regardless problem final solution wants specialcase end seems fine anyway leave spicyj whoever", "d": "3/2016"}, {"body": "yep reasons stripped case", "d": "3/2016"}, {"body": "ok agree thought perhaps setting empty tags nt use like performance thing case may good idea something like check passes set updated pull request handle cases", "d": "3/2016"}, {"body": "one put tag could intended really weird tho let say jquery plugin uses value attribute divs make interactive something", "d": "3/2016"}, {"body": "fwiw mount something server side rendered get desired potential solution would stop treating special property set attribute means could also solved think", "d": "3/2016"}, {"body": "also looks like dispatched bug submitting pr little bit", "d": "3/2016"}, {"body": "going delegate spicyj know nt ton time might know code best also touched last import changes rn maybe sebmarkbage take look bring somebody rn knows would imagine things broken rn going hosed", "d": "3/2016"}, {"body": "commented already think jordwalke probably best contact", "d": "3/2016"}, {"body": "also looks like onrespondergrant dispatched onresponderterminationrequest bug submitting pr little bit double check reasoning note difference finding dispatches executing part function merely extracts dispatches without executing couple special cases actually executed order get return value negotiation let know missing something responder captures active responder seems onresponderterminate called onrespondergrant may true although always considered two events never guaranteed ordering amongst", "d": "3/2016"}, {"body": "couple special cases actually executed order order executed directly get boolean problem grantevent executed terminationrequestevent executed unless misunderstanding something means dispatched even rejects capture unless performance implications think logical thing ensure next responder comes active responder pr", "d": "3/2016"}, {"body": "oh yes sounds right wrote imported latest version plugin rn", "d": "3/2016"}, {"body": "oh looking originally imported version believe original version correct confirm understanding fixed would cause ton touch handling issues production", "d": "3/2016"}, {"body": "prod since august", "d": "3/2016"}, {"body": "pinged thanks spotting bug aleclarson feel free fix want know original intent change", "d": "3/2016"}, {"body": "original summary internally change panresponder allow views block native components becoming responder done panresponder onresponderreject work onresponderreject called native view already intercepted touch point late cancel native intercept similar android ios even wanted instead block native components intercepting touch first place js side set panresponders set whether js component block native components trying become responder ie range slider allowing scrollview viewpager getting responder image cropper allowing viewpager steal responder etc panresponder tell native block native components intercepting touches responder granted unblock setting responder released native side uimanager passes jsresponder changes nativeviewhierarchymanager get view given react tag call un blocknativeresponder parent view viewparent implements requestdisallowintercepttouchevent set let ancestors intercepting touch events required moving jsresponder uimanager nativeviewhierarchymanager nt seem much uimanager first place also create operation js responder changes qualify viewoperations", "d": "3/2016"}, {"body": "ben recalled discussing issue convinced ideal solution actually possible try perform negotiation asynchronously instead entirely js would avoided original issue attempted solve way could work reactnative scroll views begin without ability enable pan gesture logic enabling scroll view pan gesture performed react thread system enabled various react gestures would system enables scroll view enabled send message uiviewmanager tells react native uiscrollview may become activated native gesture takes thought possible later enable touches began iirc proved assumption invalid would much easier ifwhen eventually move main thread ubiquitous concurrency react believe approach would work would resolved many cases ran", "d": "3/2016"}, {"body": "definitely looks like bug surprised going long intent behind calling directly get result nt happen gets executed get pr asap thanks digging aleclarson", "d": "3/2016"}, {"body": "fixed lint errors good merge", "d": "3/2016"}, {"body": "still nt know original intent diff onresponderreject called native view already intercepted touch true looking return value something wants gesture lock nt always block native gestures say", "d": "3/2016"}, {"body": "without proper flag native side native scrollview intercept touch matter still happening ios fixed android remember correctly want set responder granted need return value", "d": "3/2016"}, {"body": "every time responder granted send event platform sufficient", "d": "3/2016"}, {"body": "something would like cc spicyj", "d": "3/2016"}, {"body": "yea could better would improvement stylerelated warnings position eg unsupported style property looks like function warning nt enough context caller reference dom component rendered get tag eg div think walk back owner add check render method bit interested amp soon try get final", "d": "3/2016"}, {"body": "relevant react pr", "d": "3/2016"}, {"body": "svg equivalents style object think direction svg intending go unify style models htmlcss nt recommend changed way back camelcase", "d": "3/2016"}, {"body": "kebabcase attributes nt styles instance", "d": "3/2016"}, {"body": "pretty sure svg fonts nt supported cross browser anyway nt expect one used mostly edge cases common one think commonality things passed spread forwarding properties eg classname important get right edge case little used attribute better keep rest consistent", "d": "3/2016"}, {"body": "nt know commonly used nt read spec understand spec nt mention popularity metrics disagree supposition better remain consistent crappy api avoid edge cases past present future imo would better fix legacy api decisions regardless least svg attributes kebab case today may introduced future think better remain consistent svg api pass everything rather introduce special edge cases every time something pops passing everything easy understand conforms spec future proof us future changes spec evergrowing whitelist clearly better route imho", "d": "3/2016"}, {"body": "mutually exclusive still recommend using style object instead attributes way recommendation still camel case mar jim notifications githubcom wrote nt know commonly used nt read spec understand spec nt mention popularity metrics disagree supposition better remain consistent crappy api avoid edge cases past present future would better fix legacy api decisions regardless least svg attributes kebab case today may introduced future think better remain consistent svg api pass everything rather introduce special edge cases every time something pops passing everything easy understand conforms spec future proof us future changes spec evergrowing whitelist clearly better route imho reply email directly view github", "d": "3/2016"}, {"body": "think disagree crappy api legacy decision promote properties attributes something much still thinks right call example html attribute property need state svg nodes well nt make controlled yet something need make controlled suspect special cases added handle likewise object also another special case web going away serialized form prefer rich complex data types eg cssom moving value objects color lengths etc instead strings clinging attributes actually encouraging legacy thing wish call instead avoid discussionsconfusions would another special case nt make rest propertyforward decisions wrong", "d": "3/2016"}, {"body": "point codemod would get rid warnings necessarily move everything even right thing long term moving everything distinct codemod let put", "d": "3/2016"}, {"body": "think easier story sure make blog post least though sure deprecating though", "d": "3/2016"}, {"body": "closing reverted", "d": "3/2016"}, {"body": "react removed whitelisting attributes svg completely names left whitelist print deprecation warnings find arbitrary attribute including get passed correctly version gt react shipped yesterday would suggest check would expect arrive shortly within weeks", "d": "3/2016"}, {"body": "thanks", "d": "3/2016"}, {"body": "seems like going go back change see browsers actually support add case quick look appear implemented", "d": "3/2016"}, {"body": "edge support unfortunately nt specify svg elements added tab order default browsers way removing ignored pretty annoying accessibility issue keyboard users browsers", "d": "3/2016"}, {"body": "cc tomocchino whitelists p", "d": "3/2016"}, {"body": "yes intentional could introduce special case behavior would different webcomponent behavior going divergent behavior either way change intentional simple rule pass svg attributes works well already released rc let close per discussion team chat provide codemod facilitate easy migration", "d": "3/2016"}, {"body": "nt remember rationale nt use class html elements svg perfectly fine property name interpreted change nt block attributes still make special cases like html web components different way support busted anyway discrepancy htmlsvg merged single integrated standard core features platform seems worse discrepancy core features feature nobody really uses nt really like discrepancy without clearer story around without major section describing blog post", "d": "3/2016"}, {"body": "still make special cases like html special cases suck differences anyway react html elements use camelcase svg attributes use kebabcase among things unless want write fancy logic try normalize differences automatically apply transforms recapitalize insert hyphens pointless perform computation specialcase checks could pass much cleaner simple passthrough rule svg apply rule consistently edit actually could nt write automatic rule svg inconsistent names attributes camelcase attributes like also kebabcase ones like going able get around inconsistencies svg html", "d": "3/2016"}, {"body": "property name html elements difficult tell story around svgs use instead especially beginners humble opinion even though might affect web components makes things easier internal consistency use property regarding special cases suck yes sucks even use different naming property html element svg", "d": "3/2016"}, {"body": "looks like discussion", "d": "3/2016"}, {"body": "attribute name change also caught surprise makes difficult write components work html svg contexts tooltip component like mostly worked save ierelated svg bugs present", "d": "3/2016"}, {"body": "plans using instead html elements guess sounds good seems react use property name reactelement react longer actively support objectarray literal extensionsreserved words property names reasons using instead", "d": "3/2016"}, {"body": "use cssinjs solution helper function splats mix match predefined styles true inline styles use html obviously svg override fill height etc kind annoying warning whatever decide least make consistent across html svg personally would prefer remove much whitelisting special casing possible", "d": "3/2016"}, {"body": "renaming html elements seems fine long run suggests sounds like much bigger breaking change prefer react kept prop name consistent across kinds elements chance might reverted official", "d": "3/2016"}, {"body": "warning message place special case class attribute good though include link blog post explaining reasoning behind warning message also filling want change classname class html elements near future would awesome", "d": "3/2016"}, {"body": "chance might reverted official exploring couple options think least make sure continues work extreme option might backout svg work get us back support obviously ideal available us think personally leaning towards backpedaling pass everything approach expand list supported attributes whitelist would mean longer support hyphenated attributes would go back camelcase mapping nt see huge problem maintains current behavior matches html attrs something continue handful attributes anyway namespaced attrs renaming html elements seems fine long run sounds like much bigger breaking change maybe could definitely big change might far path honestly time feel ready might using abstractions top dom something like reactnativeweb example might matter much agree think getting though probably live hybrid world svg uses one pattern html uses another", "d": "3/2016"}, {"body": "think personally leaning towards backpedaling pass everything approach expand list supported attributes whitelist would list fairly complete know previous iterations react missing quite large number tagsattributes tough one two missing make things lot painful application code said definitely agree live hybrid world svg uses one pattern html uses another", "d": "3/2016"}, {"body": "yea think would totally complete wednesday march jason killian notifications githubcom wrote think personally leaning towards backpedaling pass everything approach expand list supported attributes whitelist would list fairly complete know previous iterations react missing quite large number tagsattributes tough one two missing make things lot painful application code said definitely agree live hybrid world svg uses one pattern html uses another reply email directly view github", "d": "3/2016"}, {"body": "closing reverted", "d": "3/2016"}, {"body": "gone clientside rendering still exists serverside rendering expected behavior however desired output provide example componentrender generates output", "d": "3/2016"}, {"body": "happens root composite component returns", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "spent day trying trace root cause issue ended confirmed false alarm caused lib returns null root component rendering server currently working different approaches implement universal apps server client report back hit issues", "d": "3/2016"}, {"body": "ended confirmed false alarm clear valid bug react", "d": "3/2016"}, {"body": "update confirmed working fine apps regard server rendering removed one thing note though saw lot comments text like wondering necessary", "d": "3/2016"}, {"body": "right use case dittos mentioned clearly demonstrates bug necessary tracking separating text elements order apply updatesdiffs", "d": "3/2016"}, {"body": "understood thanks explanation", "d": "3/2016"}, {"body": "general react pretty fast box guess overthinking whole thing couple calls bind going makeorbreak application stackoverflow correct place usage question like", "d": "3/2016"}, {"body": "thank reporting appears fixed look like highpriority issue would suggest work around using empty switch leave open team members comment", "d": "3/2016"}, {"body": "confirmed fixed", "d": "3/2016"}, {"body": "fixed futuremaster", "d": "3/2016"}, {"body": "thanks nt know branch latest", "d": "3/2016"}, {"body": "fbjs used facebook react bits used core pulled rely fbjs assume helps fb reuse manage common code easier matter react depends core affect us users", "d": "3/2016"}, {"body": "exists react native react relay possibly facebook projects share code matter internal code organization indeed affect", "d": "3/2016"}, {"body": "external impact going close feel free continue conversation thread", "d": "3/2016"}, {"body": "also get rid caused engineers bang heads walls years think value persistent events nt underestimated favor even cost slowing legacy browsers long things acceptable latest versions browsers", "d": "3/2016"}, {"body": "yes would go away naturally result beholden normal gc rules", "d": "3/2016"}, {"body": "yasss strong ergonomic improvement general", "d": "3/2016"}, {"body": "agree desktop devices mobile use cases issue though strongly suspect removing cause noticeable gc pauses touchmove events gestures mobile devices building previous project years old ran issues generating lot garbage transforming shapes gestures ios considering jscore generally optimized mobile suspect noticeable android devices still interested seeing reality gc cost would without pooling", "d": "3/2016"}, {"body": "clarify little virtue using promises app advancing two different states initial mount data available synchronously due promises tick later promises resolve app enters new state would nice could allow initial mount happen without react constructing real dom mounting onto existing dom later point would like tell react mount point react sees checksum attempts reuse existing dom", "d": "3/2016"}, {"body": "kentcdodds similar use proxies", "d": "3/2016"}, {"body": "oops yea sorry getting blame wrong", "d": "3/2016"}, {"body": "ask wave thanks thinking let know help way", "d": "3/2016"}, {"body": "yeah would probably worth converting originallegacystyle components classes context page intentionally nt mention context outside context page context experimental feature likely change future releases", "d": "3/2016"}, {"body": "changed emphasize classes please retain example guess heading like stateless functional components", "d": "3/2016"}, {"body": "yes usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue takes radar feel free continue conversation move stackoverflow", "d": "3/2016"}, {"body": "duplicate", "d": "3/2016"}, {"body": "create simple jsfiddle demonstrates issue base fiddle fork", "d": "3/2016"}, {"body": "turns failing silently child component preventing state set closing issue", "d": "3/2016"}, {"body": "likely want look enable logging unhandled rejections whatever promise implementation using errors go unnoticed", "d": "3/2016"}, {"body": "thanks tip dan defintely look appreciate", "d": "3/2016"}, {"body": "provide jsfiddle demonstrates issue also things surprise eventkeycode always eventcharcode always eventwhich always verify native event correct eg native device", "d": "3/2016"}, {"body": "jimfb jsfiddle syntheticevent native event well well well tried native event yet appears triggered mobile mine least react syntheticevent triggered values unidentified way charcode always anyway seems really bug react side since native event event triggered although behavior syntheticevent weird understand mobile triggering keyboard events handle one", "d": "3/2016"}, {"body": "agree behavior synthetic event sounds weird given events firing probably weird side effect event api smoothing apparently bug causing nonsensical events fired tried fiddle android different modelversion get mysterious synthetic events least far tell got events android nt phone matching specs mentioned bit difficult debug end able debug end submit pr would much appreciated", "d": "3/2016"}, {"body": "phone specs victorientardif nexus chrome got results jimfb native synthetic events fired typing", "d": "3/2016"}, {"body": "jimfb jquense nt know see event either even synthetic event used see behavior seems normal native event synthetic event remaining question nt event pure html javascript fiddle see handle events thing keydown event triggered keypress event anyway event", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "starting sound increasingly like browser quirk rather bug react core suppose one question remaining api quirk want smooth", "d": "3/2016"}, {"body": "agreed great apis meant used code least commonly mostly meant used devtools console two articles really great explaining use reactperf going change somewhat would probably unwise spend time documenting right", "d": "3/2016"}, {"body": "supposed place api calls example code would great type code example looking would code example would want also gaearon links great totally ok linking docs release new react perf stuff", "d": "3/2016"}, {"body": "gaearon wow awesome links bookmarking thank missing official facebook docs exactly put perf calls console code exactly code", "d": "3/2016"}, {"body": "ok feel like access tools chrome console nt exist type nt exist", "d": "3/2016"}, {"body": "ffxsam easiest way use bower builds", "d": "3/2016"}, {"body": "yeah route wo nt work using meteor nt use tags include things", "d": "3/2016"}, {"body": "clarify react installed via npm used throughout project full meteorreactredux project already running need know use perf tools", "d": "3/2016"}, {"body": "usually development somewhere agreed far nice need better story around", "d": "3/2016"}, {"body": "yep going try next worked thanks", "d": "3/2016"}, {"body": "yes please going circles deprecated modules modules cycle back bad docs haha reactaddonsperf module apparently exist installed", "d": "3/2016"}, {"body": "nt seen bad docs till webpack page", "d": "3/2016"}, {"body": "would sweet integrated right chrome dev tools unless someone already working", "d": "3/2016"}, {"body": "yeah longer term plan", "d": "3/2016"}, {"body": "tj reactaddonsperf module apparently exist installed clarify able run put able refer console", "d": "3/2016"}, {"body": "personally worked import perf reactaddonsperf windowperf perf", "d": "3/2016"}, {"body": "hmm weird must something funky webpack", "d": "3/2016"}, {"body": "might want verify duplicate react maybe version issue got duplicate one", "d": "3/2016"}, {"body": "really looking forward page changes future smile", "d": "3/2016"}, {"body": "timdorr perhaps ironically page one things probably wo nt change details implementation specifically regards flow control change highlevel description remains", "d": "3/2016"}, {"body": "first two things really missed react happy help", "d": "3/2016"}, {"body": "might requests changes unrelated status quo related future work might require lot context commitment able contribute parts us interested fixing stuff areas working renderers tooling stuff requires deep knowledge internals would gain context work done open repo whether via rfc public branches live planning meetings public pr would great track engage contribute start instead towards end code mostly baked pushed cc iamdustan", "d": "3/2016"}, {"body": "jquense yep always best keep community informed involved currently theoretical discussions scheduling techniques tradeoffs certainly continue post updates become available", "d": "3/2016"}, {"body": "clap exciting turn events following along seems thouhh gh issues random twitter conversationblog posts primary way tracking current thinking expect continue context gathering come pr issue comments like formal design document describing potential paths tradeoffs ideas become solidified", "d": "3/2016"}, {"body": "commenting thread stay informed updates much needed feature edit yaycmyk nt realize thing hah thanks heads", "d": "3/2016"}, {"body": "others interested staying date click subscribe button", "d": "3/2016"}, {"body": "resource get know details current algorithm implementation least pointing us part current code base", "d": "3/2016"}, {"body": "haohcraft found method really useful understand reconciliation works today", "d": "3/2016"}, {"body": "gaearon neat thanks", "d": "3/2016"}, {"body": "discovered recently really confused think good idea separate package though would probably need major version increase depreciation warnings maybe", "d": "3/2016"}, {"body": "also work today", "d": "3/2016"}, {"body": "would make sense add part reactdom rather adding package fatigue another module", "d": "3/2016"}, {"body": "potentially would change api would code changes required anyway bad personally think would make sense standalone package ideally like move away whitelists like react reactdom nothing stopping maintaining whitelist requires new release versioned independently used different react versions adding would require new release would truly obnoxious add every possible version likely add next minor version backporting whereas separate package could get bump without pick react changes", "d": "3/2016"}, {"body": "also would nice get inspiration hyperscripthelpers especialy richer interface element functions", "d": "3/2016"}, {"body": "point dependency normal component specific renderer switch renderer", "d": "3/2016"}, {"body": "matystl really nt think change apis behaviors idea make methods flexible support different use cases simply move current location people welcome use hyperscript similar want apis instead", "d": "3/2016"}, {"body": "somethng pr would add another build step produce package main repo new repo factories perhaps reactjs org case happy pr something sure best way might", "d": "3/2016"}, {"body": "would probably move separate project org nothing anybody moment", "d": "3/2016"}, {"body": "future could implemented easily js import createfactory react reactdom reactdom export default new proxy objectcreate null get target type return createfactory type", "d": "3/2016"}, {"body": "chicoxyzzy care browser support gcc advanced optimization", "d": "3/2016"}, {"body": "already", "d": "3/2016"}, {"body": "yes however depends package would nt directly would probably peerdep supports adding extra properties eg isrendered also would nt", "d": "3/2016"}, {"body": "browser support said future gcc advanced optimization might issue think could solved", "d": "3/2016"}, {"body": "reason functions vs jsx compiling plain objects could userfriendly handwritten cases well need time add dep many components", "d": "3/2016"}, {"body": "full context give good reply know still concept owner dynamic thing set relies global state currently executing method think plan get rid would mean deprecating string refs gone generate objects time without screwing string refs added certain level protection xss user input tags every safe element coming code opposed user json symbol would bit pain write hand babel plugin makes jsx output inline objects however recommend production effectively bypasses validation useful developer warnings", "d": "3/2016"}, {"body": "sounds like autobinding might screwing factory somehow little surprised code mentioned nt work minimal jsfiddle yeah would nt recommend disabling autobinding copy react since make components interoperable third party components might try writing component class since classes nt autobinding also curious hear sounds like sort weird nested class logic general probably cleaner define another toplevel class mostly legacy point nt think going make major changes autobinding code point however would curious hear discover", "d": "3/2016"}, {"body": "tring encapsulates parts logically belongs together specific build tabs component first insidecomponent would tabs list second would tab panel since share logic better together one file next", "d": "3/2016"}, {"body": "live file without nested class arrangement", "d": "3/2016"}, {"body": "sounds like autobinding might screwing factory somehow little surprised code mentioned nt work minimal jsfiddle assume component looks like function would autobound thus longer look like component react anyway unless intend make dynamic received props really nt instance property rather static property component thus edit seems far better name component expose outside file", "d": "3/2016"}, {"body": "syranide need dynamic since part higher component", "d": "3/2016"}, {"body": "need dynamic mariusrak always store state parent pass explicitly child general anything done nested classes done without nested classes think nested classes like inheritance bit antipattern anyway would recommend finding alternative structure code mostly legacy point generally nt making large changes way works welcomed submit pr like take look decide makes sense merge based scope change nt think something fix reason going close feel free continue discussion thread particular curious hear classes solve problem since autobinding figure potential fix autobinding code could integrate react", "d": "3/2016"}, {"body": "would like avoid passing everything children via props since lot code since components tightly coupled belive pattern fine decided use classes since elminiate lot things like react like mixins require binding every function object really annoying seems redundant lot code opposite described article plan deprecate near future would possible find ways elminate problems classes thanks", "d": "3/2016"}, {"body": "mariusrak plans deprecate near future maintenance mode new development work goes optimizing classes stateless functions features mention mixins autobinding etc intentionally omitted api gained lot experience apis determined good patterns mixins make much difficult maintain code things get injected sideways autobinding leads issues exactly like one describing addition many edgecase issues recommendation still upgrade classes since believe better api continue work afaik", "d": "3/2016"}, {"body": "reproducable fixing see note borm please provide jsbinesnextbin next time helps lot thanks", "d": "3/2016"}, {"body": "class children parent div look console", "d": "3/2016"}, {"body": "mxstbr get displayname children component", "d": "3/2016"}, {"body": "nt know sorry provided code running bin somebody knowledge give answer", "d": "3/2016"}, {"body": "oh sorry waiting developer", "d": "3/2016"}, {"body": "rely name component use debugging informationmessages unreliable best may behave differently production borm sounds like using determine styling information recommend inline styles explicitly passing css class name use cases would curious hear going close issue nt think want support people accessing component names purposes like feel free continue discussion thread", "d": "3/2016"}, {"body": "ok thanks case several components import react component react import render reactdom class parent extends component render const children thispropschildren consolelog typeof childrentype function consolelog typeof childrentypedisplayname undefined return class extends component render return class extends component class extends component use want add dynamic classname parent component example displayname solution", "d": "3/2016"}, {"body": "borm want take look", "d": "3/2016"}, {"body": "jimfb see one solution add displayname defaultprops use parent", "d": "3/2016"}, {"body": "borm turning usage question since already open issue solving asking per use github track bugs react core redirect usage questions sites like stackoverflow thread linked mentions set static property child components using transform supports static class properties setting property creating class read property class thread also links discussion fixing general react wanted submit pr make react better could fix babel plugin recursively chase parents order determine specific component react component therefore get displayname assigned transform time prefer composition inheritance supporting inheritance pattern priority us happy take prs fix utilize workarounds mentioned thread wait someone fix moment think options", "d": "3/2016"}, {"body": "jimfb thanks detailed answer time", "d": "3/2016"}, {"body": "actually nt sure proptypesrange good idea prop may become invalid production lead potential errors developers rely proptypes nt validate props inside components leave proposal discussion", "d": "3/2016"}, {"body": "chicoxyzzy proptype checking disabled production", "d": "3/2016"}, {"body": "yaycmyk sure devs may warnings production validate data components lead potential productiononly errors bad thing", "d": "3/2016"}, {"body": "yeah also took second look current none granular beyond typing shape given prop specific matching criteria meant implemented custom prop type", "d": "3/2016"}, {"body": "prop either string using sounds bit like bad design", "d": "3/2016"}, {"body": "stands eg value", "d": "3/2016"}, {"body": "currently far know plans add new features longer term plan use flow instead potentially add optional runtime validation flow see", "d": "3/2016"}, {"body": "justblackbird used", "d": "3/2016"}, {"body": "rmilesson treat string condition actually matter point explicitly pass value component", "d": "3/2016"}, {"body": "justblackbird point use strings booleans interchangeably mean absolutely pretty bad form use want signify something might get value nt yet clearer", "d": "3/2016"}, {"body": "ok got even want use string use validator like matter used proposal adding validator", "d": "3/2016"}, {"body": "would suffice case unless add suggest reading edit better approach would allow values prop required least case", "d": "3/2016"}, {"body": "point string allows check value passed explicitly forgotten accident", "d": "3/2016"}, {"body": "justblackbird forgotten accident would passed explicitly simply value would interest api intuitiveness probably good idea use nonstandard sentinel value proptypes mostly legacy maintenance mode replaced tools like flow guess nt going add let close reopen thinking matter changes substantially worth noting proptypes validator functions define sharedistribute proptypes optimal outcome people download additional proptypes find useful", "d": "3/2016"}, {"body": "going leave open ensure block even though gaearon wrote fix finished submitting ever sleep dan", "d": "3/2016"}, {"body": "sleep incrementally fwiw fix", "d": "3/2016"}, {"body": "goes warning showing subset dom would helpful", "d": "3/2016"}, {"body": "could post plunker gist source example contains dom would want warnings result", "d": "3/2016"}, {"body": "believe recreation issue would following fiddle see hello world render world invalid element nt key error nt display created attempt fixing pull request please let know thoughts", "d": "3/2016"}, {"body": "given fiddle would warning text", "d": "3/2016"}, {"body": "currently basic warning need expand cover edge cases currently nt descriptive enough example multiple divs world text nt distinguish one culprit", "d": "3/2016"}, {"body": "cool would helpful info", "d": "3/2016"}, {"body": "grab constructor base component extend old fashion way ensure get called feels hackish jsx class composercomponent extends component constructor super", "d": "3/2016"}, {"body": "want make use child classes inheritance works code looks like something weird happens due composerfunction create base component class extend get called see", "d": "3/2016"}, {"body": "zpao well know normal inheritance works factory pattern lot tearup needs done going weird methods stack fine ie mixins without super call otherwise guess stick constructor extension", "d": "3/2016"}, {"body": "closing realized nt cover deletions confused", "d": "3/2016"}, {"body": "normally style use jsx within tests think tests explicitly nt using jsx point perhaps would better copypaste message tests nt use jsx since easy miss note top note top somewhat ambiguous", "d": "3/2016"}, {"body": "jimfb thanks feedback perhaps would better copypaste message tests nt use jsx since easy miss note top note top somewhat ambiguous yeah reasons say either splitting two files made sense would help ease missing top make alternative repeating within file unnecessary", "d": "3/2016"}, {"body": "happy submit pr either cases", "d": "3/2016"}, {"body": "think prefer inline comment copypasted little copypasting never hurt anyone mxstbr take pr assuming one else objects", "d": "3/2016"}, {"body": "cc sebmarkbage duplicate", "d": "3/2016"}, {"body": "point files need updated", "d": "3/2016"}, {"body": "sorry trying figure nt experience sweatsmile snapshot problem", "d": "3/2016"}, {"body": "probably want wget file cdn update site point file cdn actually build babel version monday february bjr matos notifications githubcom wrote sorry trying figure nt experience rake image sweatsmile snapshot problem image captura de pantalla las p reply email directly view github", "d": "3/2016"}, {"body": "thnks zpao", "d": "3/2016"}, {"body": "love take crack", "d": "3/2016"}, {"body": "wdhorton nt come around love try", "d": "3/2016"}, {"body": "wdhorton mxstbr love try nt come", "d": "3/2016"}, {"body": "would recommend upgrading first bugs", "d": "3/2016"}, {"body": "fault move check fails build command fails maybe even move top whole script thought reason nt originally", "d": "3/2016"}, {"body": "spicyj elaborate going case someone else runs asks also please upgrade current one sometimes nt complete even tests pass ready soon much better babel support", "d": "3/2016"}, {"body": "jest properly returning grunt since run stuff travis nt notice run counts pass last command status matters unless case bails first error", "d": "3/2016"}, {"body": "see original problem however worker thread unexpectedly quitting might one tests sideeffect killing nodeprocess bad reason", "d": "3/2016"}, {"body": "yeah maybe problem", "d": "3/2016"}, {"body": "running cleaned caches fetched latest matched", "d": "3/2016"}, {"body": "think travis right thing", "d": "3/2016"}, {"body": "jimfb seems unlikely since nt added travisyml sure", "d": "3/2016"}, {"body": "sure see travis jest failure recent diff though diff may syntax error possible failed harder unable parse", "d": "3/2016"}, {"body": "reading current travis file would nt expect jest failure cause travis job fail", "d": "3/2016"}, {"body": "yet sure witness travis saying jest task red yeah like said thinking jest task failed different point task due syntax error instead less severe expectation violation", "d": "3/2016"}, {"body": "removed sure necessary since trying make master behaves way branches removed master consistency add back", "d": "3/2016"}, {"body": "yes think", "d": "3/2016"}, {"body": "also enable prs discrepancy surprised", "d": "3/2016"}, {"body": "yes bug master prs builds", "d": "3/2016"}, {"body": "expected behaviour reactdom functions instead undefined gives manual inspection reactdom object shows nt maybe missing something somewhere else happy work issue fork amp patch monkeypatch would help would looking hints approach take", "d": "3/2016"}, {"body": "ah gotcha nearly forgot reactdom existed thus idea talking reactdom convenience wrappers around dom components could always use browsers constantly adding new element types maintaining huge whitelist scope goes svg looking move away maintaining whitelists eventually hit element whitelist need break use anyway reason going close issue since nt going track separate elements individually github issues want submit pr svg elements bet svg users would appriciate file want look pr reactdomfactoriesjs", "d": "3/2016"}, {"body": "ah awesome thankyou hoping missing something", "d": "3/2016"}, {"body": "code still runnable missing dependencies please create simple jsfiddle demonstrates issue forking fiddle", "d": "3/2016"}, {"body": "jimfb check video", "d": "3/2016"}, {"body": "sorry ca nt help without reduced test case video almost helps much going code know seems like small change making difference right still lot happening code nt support forum track bugs react right ca nt discern happening bug code react try stackoverflow jim mentioned reduce something much simpler try", "d": "3/2016"}, {"body": "zpao ok thanks nt know make question issue lots code share hard explain question without video", "d": "3/2016"}, {"body": "jimfb thanks response advise take look", "d": "3/2016"}, {"body": "yeah supposed use index key ifwhen avoid index defines identity step first three keys nodes preserved step nodes nt get mounted step keys nodes get reused example", "d": "3/2016"}, {"body": "moved", "d": "3/2016"}, {"body": "alternatively think could take would solve virtue fact use attributes everywhere makes work", "d": "3/2016"}, {"body": "record looks like picking", "d": "3/2016"}, {"body": "optionally pass second argument limited add data synthetic event exactly way get attached event instance assign call official way also pass fake able use exactly technique would bypass normalization code probably need tests anyway closing please let know missed something", "d": "3/2016"}, {"body": "mentioned well think issue react interface nt expose lib modules using react via nt seem fully supported", "d": "3/2016"}, {"body": "tried implementing support please let know made mistakes", "d": "3/2016"}, {"body": "react support onclose event also related dialog ludvigsen faster haha grats created example page took examplesbasicindexhtml source test new events gist check use easier debugging", "d": "3/2016"}, {"body": "thanks cbrwizard seems like would make lot sense support onclose event well definitely add although react guess would control dialog open attribute therefore know user closed dialog whereas cancel event fired user presses esc way know listen", "d": "3/2016"}, {"body": "really open dialog normal dialog modal afaik way attribute open modal", "d": "3/2016"}, {"body": "tleunen thats true would nice possible control modal well attribute", "d": "3/2016"}, {"body": "nt think trust library even getting started part wrong nt work poor quality", "d": "3/2016"}, {"body": "ping ryankaplan want propose pr status", "d": "3/2016"}, {"body": "hey jimfb thanks reminder still want fixed nt found time also little worried approach like change calls similarly methods called instance may inherit much good make sweeping change someone else add new call days later react codebase linter could add rule warn engineers use instead", "d": "3/2016"}, {"body": "yes linter see could also add bunch unit tests similar effect", "d": "3/2016"}, {"body": "taken stabs addressing manged fix way think architecturally helpful sending pr thought post rundown found updates enqueued run reconcile transaction want problem toplevelwrapper subtree enqueued processing dirty components runcatchedupdates since triggered right update queue fully processed closure transaction new components queued runs managed fix jumping issue runbatchedupdates loop check new component added resort mount order moves newly added subtree toplevelwrapper currently queued children components updates processed correct order main problem deferring newly queued updates makes sense triggered update renders subtree seems like two main approaches addressing make subtrees core concept reconcilers components track treat rendered subtrees way direct children way updates parent would naturally reconcile subtree instead two step process update flush rerendersubtree hacked fix adjust runbatchedupdates process newly enqueued subtree toplevelwrappers loop right though nt seem way reactupdates tell component root component let alone subtree root order pull process compared newly queued dirty components option easier feels leaky option seems like good idea would make current api sort untenable sure translate perhaps something like nt looked closely enough approach understand concerns might assume adding new special kind child nt exactly simple thing", "d": "3/2016"}, {"body": "hoped never write bundle css files like markup style together jukkacaalto working patchfork", "d": "3/2016"}, {"body": "qingweibinary similar issue ever able figure", "d": "3/2016"}, {"body": "yaycmyk would try perform binding constructor instead inside render", "d": "3/2016"}, {"body": "used reactcsstransitiongroup several times never experimented issue could provide bit code", "d": "3/2016"}, {"body": "hey guys really need help almost give mentioned try mix reactjs revealjs make keynotepowerpointlike app use save html snippet work around possible problem zpao said try use uuid every slide feature add slide current slide onnewslideclick e gt let temp thisstatestoreslice issue occurs actual dom order ridiculously different array state also vdom showed reactdevtool push whole thing github hard provide simple snippet demonstrate issue really sorry god save please", "d": "3/2016"}, {"body": "alright new progress issue seems happend tag replace actual dom order finally correct dont know seems nothing revealjs css issue still exists without reveal long use", "d": "3/2016"}, {"body": "well create jsbin things gon na perfectly nice said hard provide simple snippet since know issue really located", "d": "3/2016"}, {"body": "convinced issue closed updated react reactdom dependencies everythings works fine well still curious encountered react anyway continue work none guys interested close please thx", "d": "3/2016"}, {"body": "lot dom code changed might fixed one updates close please let us know see", "d": "3/2016"}, {"body": "sure fwiw thanks guys awesome work", "d": "3/2016"}, {"body": "ickata looks like scoping issue fixed let know run issues", "d": "3/2016"}, {"body": "difference minified unminified react wraps event handlers inside events development build get better devtool integration problem edge ie nt allow access property unless inside original event handler guessing production build wrapper events function call accessed normally could bug browsers perhaps microsoft extra cautious kinds security risks mentioned spec", "d": "3/2016"}, {"body": "working pr thought would check approach taking ideally event handlers work way dev production react retain good devtool integration since removing minority cases nt seem right approach detect environment works way skip wrapping event handlers drag events bad ca nt detect whether event handler actually try access property since event handlers nt try access work fine", "d": "3/2016"}, {"body": "pjackson sounds like reasonable approach", "d": "3/2016"}, {"body": "seem like common use case arbitrarily slow think something want support core glad found solution works closing let us know thoughts", "d": "3/2016"}, {"body": "pnuzhdin chance verify whether fixes issue", "d": "3/2016"}, {"body": "gaearon nope become important", "d": "3/2016"}, {"body": "small note anyone experiencing similar error message arrived googling got bit updated without updating time", "d": "3/2016"}, {"body": "valid pr first contribution sorry terrible commit noise made initial mistake pr master new github nt realize would happen started new master branch per pr", "d": "3/2016"}, {"body": "think rppc get one rppc feel free copy code pr essentially code thought pr rejected since untouched around months still learning things work thought would get notifications happened thread sorry stepping work", "d": "3/2016"}, {"body": "troydemonbreun ok really thought pinging zpao quite busy kept forgetting let go hard feelings", "d": "3/2016"}, {"body": "glad resolved happens smile worries please", "d": "3/2016"}, {"body": "rppc thank", "d": "3/2016"}, {"body": "istarkov sure intentional handle original promise fails original promise rejected handler gets called seem ideal may still want handle error original promise proposal handles rejection original promise jsx const makecancelable promise gt let hascanceled false const wrappedpromise new promise resolve reject gt promisethen val gt hascanceled reject iscanceled true resolve val promisecatch error gt hascanceled reject iscanceled true reject error return promise wrappedpromise cancel hascanceled true sure stand making cancelable promises good idea going make promises cancelable preserve underlying behavior", "d": "3/2016"}, {"body": "vpontis", "d": "3/2016"}, {"body": "istarkov original post referenced want update post message author post", "d": "3/2016"}, {"body": "vpontis thanks fix", "d": "3/2016"}, {"body": "probably get better incremental rendering implemented interested work track also suggestion using neat hack fake stack another suggestion make chrome async stack trace debugger see react components welcome explore ideas like", "d": "3/2016"}, {"body": "docs still date news", "d": "3/2016"}, {"body": "going throw usecase using meteor react trying tie meteor data source state component meteor tracking system data sources pass function data sources use function change reruns function get back object call tell stop listening make call stop method setup function run changes detected calls end function triggers warning meteor run function first time called move error obviously goes away stated integrations third party state managers might similar effects future", "d": "3/2016"}, {"body": "docs claim necessary appear testing put single child conditionally inside animate un mounting without assigning specific key case testing perhaps amend docs", "d": "3/2016"}, {"body": "gaearon mostly issue want change whole content inside group altogether see example example animating contents without explict keys react ca nt figure item animating animations plain stop working assign unique keys children everything works intended adding removing things works regardless keys see example sure intended usecase though usecase ran lot", "d": "3/2016"}, {"body": "going offer much granular stats closing issue favor", "d": "3/2016"}, {"body": "still experiencing issue might issue material ui although really seem use componentwillappear hook correctly nevertheless issue referenced reacttransitiongroup judging pr fix reactcsstransitiongroup correct mistaken", "d": "3/2016"}, {"body": "actually turned material ui issue fixed new alpha version everything fine", "d": "3/2016"}, {"body": "meh pretty sure dead end worth pursuing", "d": "3/2016"}, {"body": "fixed via", "d": "3/2016"}, {"body": "discussed mxstbr noted adding explicitly probably right call already support crossbrowser way tell people use instead internally already use focusin focusout ie implements bubbling behavior probably consider adding warning tells use attempt define", "d": "3/2016"}, {"body": "still seeing bunch putlistener events call trying diagnose performance issues sure going reading thread things led believe putlistener instrumentation removed output x using callback prop ok even though element receiving new function instance every render react nt touching dom question maybe reason showing react actually changing event handler dom question probably still try use take advantage pure rendering also avoid overhead repeated function construction greyquestion app probably slow something else entirely greyquestion", "d": "3/2016"}, {"body": "spicyj zpao gaearon insights", "d": "3/2016"}, {"body": "dived printdom event dispatching works say interested conclusions", "d": "3/2016"}, {"body": "fix merged master branch calls still seeing give try contain relevant fix", "d": "3/2016"}, {"body": "ah makes sense thanks", "d": "3/2016"}, {"body": "jest published along complete overhaul website facebookgithubiojest problem issue", "d": "3/2016"}, {"body": "spicyj course", "d": "3/2016"}, {"body": "would also love see give example current problem ca nt programmatically set files ca nt override currenttarget untestable event handler", "d": "3/2016"}, {"body": "ups completely forgot sorry spicyj yeah problem onclick ul want access dom ul click li really think valid case understand ideal world use component instance access whatever want access still need dig dom sometimes camstitt think case need attach event listener input use eventtarget instead eventcurrenttarget probably case least based code pasted", "d": "3/2016"}, {"body": "code nt allow use target see friday march adri\u00e1n seijo notifications githubcom wrote ups completely forgot sorry spicyj yeah problem onclick want access dom click really think valid case understand ideal world use component instance access whatever want access still need dig dom sometimes receiving mentioned reply email directly view github", "d": "3/2016"}, {"body": "onclick ul simulate event li point ul nonsimulated events", "d": "3/2016"}, {"body": "saying want simulate click event automatically propagate everything need using synthetic events eventually trigger onclick actually quite nice nt think neccessary work cases case original issue custom dropdown component list render individual list items custom component completely opaque component nt think try poke dom try use get right event onclick handler effectively make test dependant internals children defeat little beat point unit test think", "d": "3/2016"}, {"body": "target always element receives event currenttarget element event handler true whether simulating events quite sure use case describing maybe could provide code example", "d": "3/2016"}, {"body": "bit late uk p nt example right think vaguely resemble something like class test extends component onclick event const currenttarget target event const parentnode currenttarget const index parentnodechildrenindexof currenttarget renderdropdown options return render const dropdowns thisprops return dropdownsmap dropdown gt renderdropdown dropdownoptions onclick stuff nt remember point wa nt write unit test", "d": "3/2016"}, {"body": "oh almost forgot jsut case suggest p immediate solution would bind onclick use pass everything instead relaying dom actually nt allow binds render methods general really option us whole creating function every time render etc considered excessive know topic another day think", "d": "3/2016"}, {"body": "simulating events option obvious would structure", "d": "3/2016"}, {"body": "issue last element animated instead one removed react", "d": "3/2016"}, {"body": "possibility added future versions", "d": "3/2016"}, {"body": "yes never got back interested working something would make nice addition", "d": "3/2016"}, {"body": "zpao one assigned could pr", "d": "3/2016"}, {"body": "github make obvious cry usually people start working feature reference appears issue see existing pr", "d": "3/2016"}, {"body": "also ca nt assign issues people nt commit access making much harder communicate somebody outside core team working", "d": "3/2016"}, {"body": "shame seems related", "d": "3/2016"}, {"body": "issue trying test stateless components returning nil looks like wrapping help seem awkward fix progress issue", "d": "3/2016"}, {"body": "one way avoid null testutils altogether testing event handlers instantiate component constructor ie var comp new mycomp props interesting find article", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "closing appear like good way warning functional components classes anyway supporting seems inconsistent useful warn declaration site components defined user warn person used lowercase tag late anyway get custom element probably implemented lint rule please feel free suggest idea", "d": "3/2016"}, {"body": "nt replaced function still sure see also", "d": "3/2016"}, {"body": "still helpful safe downcast type systems great deprecate however also meant effectively remove runtime information runtime type check great perf nt need runtime check also equivalent keys preserved nested arrays think fix fix docs", "d": "3/2016"}, {"body": "another scenario supporting need react component tests verify calling given certain props running tests nodejs via first run everything works fine file modified tests fail continue fail process restarted would really appreciate hook force log sort ability reset data test run starts", "d": "3/2016"}, {"body": "issue expect get event disabled button nt work", "d": "3/2016"}, {"body": "works proper firefox nt work chrome safari", "d": "3/2016"}, {"body": "project set webpack hot module reload trigger error invalid code component triggers expected exception correcting invalid code causes hot module reload seems trigger typeerror summing case occurring every hot module reload results correcting javascript error", "d": "3/2016"}, {"body": "react longer uses client unless server rendering probably longer issue still please provide reproducible example jsbin thank", "d": "3/2016"}, {"body": "part effort move discussion intent issues close stale prs closed get merged reopened issue something want fix let discuss reach consensus first", "d": "3/2016"}, {"body": "quick research says updates value makes expected behavior others become clickable links chrome firefox many svg tagsattributes use getters like sure least worth see one organize need study properties w basevalanimval interface svganimatedstring already things like enable tagsattributes within svg tag nt know cource hope react achieves bigger support", "d": "3/2016"}, {"body": "maybe wrong think supporting namespace attribute least within svg good use instead case works tried", "d": "3/2016"}, {"body": "okay thanks followup xlinkhref react", "d": "3/2016"}, {"body": "see", "d": "3/2016"}, {"body": "today master get without server rendering think descriptive enough close issue", "d": "3/2016"}, {"body": "closing appears resolved nt added error nonstringfunction types said wanted add think good warning gives warning reactcreateelement type null undefined boolean number string dom elements reactclass composite components uncaught invariant violation element type invalid expected string builtin components classfunction composite components got undefined error stack also meaningful warning fires early lowercase would render unknown custom element tracking adding warning closing let know missed something", "d": "3/2016"}, {"body": "thanks spicyj saved life well least hours time", "d": "3/2016"}, {"body": "installation buildessential optional prerequisite otherwise nodegyp fail instructions debianbased installation reflect buildessential prerequisite", "d": "3/2016"}, {"body": "using delegated event fixes problem html js", "d": "3/2016"}, {"body": "closing duplicate", "d": "3/2016"}, {"body": "thinking could warn rendered element htmlunknownelement works think better solution transforms especially considering people using babel today anyway", "d": "3/2016"}, {"body": "thanks gaearon input try pick solve next week", "d": "3/2016"}, {"body": "jsx nt valid javascript js extension", "d": "3/2016"}, {"body": "sorry reply think point react users gone migration releasing think spending time adding warnings migrating patterns something plan point closing issue see others ways improve onboarding experience new users warn potential problems please feel free send pull request thanks", "d": "3/2016"}, {"body": "closing inactive appear specific plan improve perf dev problem keeps getting worse sure situation might want revisit", "d": "3/2016"}, {"body": "hello could use stateless components rxjs streams easily dont understand need another api wrote example board move mouse gets changes restart would love hear think way code", "d": "3/2016"}, {"body": "giltig learning way lately well like together cyclejs would appreciate able listen event handlers defined components somehow easily without pass subjects bridging understand correctly pretty much way around suggested alternatively could observe react vdom synthetic events maybe refs could used observing avoid css tags observe rxjs could support object combinelatest could use react functional components directly create larger components const myfancyreactcomponent surface number gameover gt gameover gameover surface number const liveapp rxobservablecombinelatest livesurface dynamicnumberview dynamicgameover myfancyreactcomponent", "d": "3/2016"}, {"body": "hi reason nt use cycle framework prefer libraries frameworks control developer also want enjoy community power react many render engines developed react pity use reactnative reactdom reactthree etc pretty simple use rxjs react example shown would made thinks easier react components could accept pojos long observables props possible shown way chose btw myfancyreactcomponent possible actually cases though also write jsx straightforward regarding subjects think valid way eventually react component using handler function could anything choose implement subject inside receives events someone else choose otherwise flexible", "d": "3/2016"}, {"body": "removing good first bug code rewritten anyway keeping open make sure fix new code", "d": "3/2016"}, {"body": "offcourse things simple composition javascript mean react particular provides good composition model instead js class button extends component getcolor return thispropscolor render return class lightbutton extends button getcolor return lighten supergetcolor write js class button extends component render return class lightbutton extends component render return encourage inheritance components closing unlikely add special conveniences make inheritance easier antipattern good migration way described please let know something inheritance gives composition love know chose use inheritance react components instead thanks", "d": "3/2016"}, {"body": "yeah pretty sure drag drop events work svg unfortunately nothing react far know closing", "d": "3/2016"}, {"body": "fyi closed quite get review outdated anyone still feels strongly moving away welcome pick chenglou started rebase resubmit try get better reviewing stuff", "d": "3/2016"}, {"body": "related issue still shows prominently search results", "d": "3/2016"}, {"body": "common use case see react rendering component api call data finished first render would render example list items api call finishes populated array", "d": "3/2016"}, {"body": "thank krasimir encountered problem due would never figured nt point", "d": "3/2016"}, {"body": "mnpenner welcome", "d": "3/2016"}, {"body": "due nt replicate simple logic standard dom works like nt know react would fail much wo nt fixed since wo nt official support rather let go rest peace use standards insead framework nt support", "d": "3/2016"}, {"body": "going reopen track op closed issue nt look nt aware nobody team chose ignore need dig want understand goes wrong explain better documentation etc normally recommend loading polyfills library seems like fix load also used shams things like fair maybe react specific checks nt normally things new maybe systemic problem bug ie maybe need recommenddo things differently places", "d": "3/2016"}, {"body": "could fallback using like normally actually things works polyfill would even nicer could use polyfilled used polyfilled version get consistent bubbling order things page since go polyfill event dispatching nice feature normally recommend putting polyfills first guarantee whole page consistency turns bug happens expecting able listen used set special case use capture version allows us implement event delegation propagates unlike bubble phase since nt bubble nt pick one solution would fix listen instead capture used special case simulate strange standard behavior would fix bug would also make trick work anyone else using however also going fix react prioritizing event available works around limitation polyfill also seems like good move since standards track good", "d": "3/2016"}, {"body": "start big thank sebmarkbage normally recommend loading polyfills library seems like fix load also used shams things like objectcreate mutually exclusive proposed guard runtime feature detection could happily write header make everything work letting react use logic recommendations polyfills always top order writing patches put would nt hurt much headers always oneoff effort yeah totally agree would nicer react could work capabilities although one solution would fix listen focusin instead focus capture used exactly polyfill works developer wants use focus focusin whatever reason developer rights able set two different events without intefeering would actually bad put undesired logic midle everything related based hacks specific polyfill exception course like fact managed find substitute capturing would nt fixed react could thought way swap focusin focus try force always focusin would mess terms polyfill responsibility last thought please bear mind capturing phase artifact hope special cases would involved process identical native unfortunately sum thanks investigating finding probably even better solution one proposed best regards", "d": "3/2016"}, {"body": "quite useful thanks tgriesser", "d": "3/2016"}, {"body": "never mind realized accomplished quite easily setting key unique value wherever wish remount entire tree would destroy existing dom though", "d": "3/2016"}, {"body": "see getting closed yet problem real preventdefault established pattern used many docs legitimate want control remain untouched code pushes new state people keep hitting wasting time could nt timeout trick setting checked internalised react inputwrapper", "d": "3/2016"}, {"body": "could try issue", "d": "3/2016"}, {"body": "first pull request sure whether make everything right", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "ca nt use cssmodules composition without feature fixed rblakeley found way getting csscoreaddclass takes single class name", "d": "3/2016"}, {"body": "use cssmodules composition elsewhere react cssmodules handles composition creates multiple classnames separate shared overridden styles nt yet support multiple classnames", "d": "3/2016"}, {"body": "little confused documentation makes seem though already possible achieve still get following errors try pass specified object transitionname prop uncaught invariant violation csscoreaddclass takes single class name object object enter contains multiple classes", "d": "3/2016"}, {"body": "please provide jsfiddle reproducing issue", "d": "3/2016"}, {"body": "gaearon nevermind think got working project must something weird", "d": "3/2016"}, {"body": "gaearon figured using css modules classes empty found empty classes get optimised away classname string passing old placeholder nt good enough", "d": "3/2016"}, {"body": "worth retract written pretty terrible code smart mixins longer use kind merging behavior encourages components keeping implicit state mixins turned trouble maintain app worked", "d": "3/2016"}, {"body": "yep agree gaearon", "d": "3/2016"}, {"body": "\u54c8\u54c8\u54c8", "d": "3/2016"}, {"body": "jimfb well issue resolved error code people wrote code nt use catch resolve errors promises reducer state nt getting updated properly hence change nt getting reflected props parent changes contexttype children get reflected thanks", "d": "3/2016"}, {"body": "really wrong using window one object storing globals", "d": "3/2016"}, {"body": "cauburtin nt really work serverside created components share global state context global wrt components rendered single tree local tree nt leak trees unlike global state side note question nt anything issue wink", "d": "3/2016"}, {"body": "fatfisz nt know well use cases could also require foo points window property client btw app ended passing object props components since context seems unclear since almost components use case thanks", "d": "3/2016"}, {"body": "team ran issue found thread comments hint react team working improving anyone comment progress made perhaps roadmap later release", "d": "3/2016"}, {"body": "danielsundberg yes basicunstable support added initial render support updates added future release documented becomes stable", "d": "3/2016"}, {"body": "need kind error handling render functions react workaround take following interceptorjsx jsx interceptor function returns jsxcomponent case error usage example render interceptor myclassmyfunc function code potentially generate exception hallelujah another soul saved param name function displayed console exception caught param renderfunction function exception raised param component optional component displayed case error returns function var interceptor function renderfunction component return function typeof config undefined amp amp configgeneral amp amp configgeneralstacktraceenabled console consoledebug consoledebug else consolelog try return renderfunctionapply arguments catch e consoleerror intercepted e component null return component redefine logic return default custom errorhandling component coreactionsinterfaceactionscrash return null moduleexports interceptor use like course workaround disadvantage wrap render functions interceptor project least app wo nt break tiny exception", "d": "3/2016"}, {"body": "fyi internet denizens coming upon weird issues adding elements dynamically key pun intended add dynamic property react properly catches schedules update parent element", "d": "3/2016"}, {"body": "please prepare fiddle demonstrates issue add steps reproduce unfortunately figure fiddle thanks", "d": "3/2016"}, {"body": "whoops never mind reproduced appears fixed closing please let know missed something", "d": "3/2016"}, {"body": "spicyj thinking longer relevant new renderer still perhaps", "d": "3/2016"}, {"body": "yeah got rid lot easier reason", "d": "3/2016"}, {"body": "per discussion plan add new features sorry", "d": "3/2016"}, {"body": "currently batch multiple calls made dom event handler cases calling multiple times issue recommend instead recommend use immutable values shallow equality checks best performance course optimize perf find specific bottlenecks good guide future might move batching calls outside dom event handlers well hope helps see anything actionable closing please feel free continue discussion", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "fixed amp", "d": "3/2016"}, {"body": "take hopefully someone find handy", "d": "3/2016"}, {"body": "eduardoboucas cool love interactive format", "d": "3/2016"}, {"body": "eduardoboucas looks good", "d": "3/2016"}, {"body": "isdefined isrequired", "d": "3/2016"}, {"body": "understand problem correctly unmounting component later calls data fetched causes error longer cause error replaced warning additionally advise use async primitive supports cancellation eg observables cancel requests callbacks way unmount children safely without worrying warnings requests complete hope helps please let know misunderstood reopen thanks", "d": "3/2016"}, {"body": "suggest react also run mounting lifecycle put code mountupdate inside usually code async data fetching according value given props change state data fetched good place", "d": "3/2016"}, {"body": "adding style seem fix use reacttappable get clicks recognized instantly", "d": "3/2016"}, {"body": "fixed already", "d": "3/2016"}, {"body": "nt", "d": "3/2016"}, {"body": "still seeing issue time related grammarly plugin tried change build react nt help still getting invariant error two valid unequal nodes sure correct thread report feel related original bug report around grammarly posted furthermore team around grammarly extension already changed apparently also nt help", "d": "3/2016"}, {"body": "spicyj issue horrible easy fix dvdplm pointed spent day trying figure trying compile react moment time suck update even custom react build lets change react id still issue grammarly possibly inject dom mine johanneslumpe found solution workaround update nothing else worked updated react tricked app think uses requiring v packagejs webpack", "d": "3/2016"}, {"body": "since movement longer explicitly care seems dead water", "d": "3/2016"}, {"body": "react uses instead initial mount also respects svg namespace elements inside solved original fiddle updated react api works correctly ie react closing please let know missed something", "d": "3/2016"}, {"body": "spicyj zpao possible since closed example support array may fluctuating number elements", "d": "3/2016"}, {"body": "arcanis yes possible setup callback ref save ref array info check docs ask usage question stack overflow", "d": "3/2016"}, {"body": "jimfb thought number elements shrinks extraneous elements removed asked first place people find react array refs google", "d": "3/2016"}, {"body": "arcanis use github issues track bugs react core explicitly send usage questions stackoverflow encourage crosslinking feel free post link question future travelers go place answer question elements removed answer callback ref fires null create closure capture nameidentitykey callback function accessremove value ref fires", "d": "3/2016"}, {"body": "ran today trying dynamically set background color semantic ui icon colors set presumably legitimate reasons fortunately could work around like thomassuckow would nice avoid extra step though", "d": "3/2016"}, {"body": "sounds rather broad explosion components around react something could maintain good shape inclined close community resources available hope helps", "d": "3/2016"}, {"body": "apparently fixed", "d": "3/2016"}, {"body": "far know current thinking maintenance mode get new features encourage people look immutablejs alternative libraries deal plain objects instead", "d": "3/2016"}, {"body": "actively supporting since closing unlikely somebody would work particular problem future however feel strongly submit pr fix discuss thanks", "d": "3/2016"}, {"body": "fixed comment outdated", "d": "3/2016"}, {"body": "longer appears problem chrome closing", "d": "3/2016"}, {"body": "reverted thus still require attribute whitelist good news however contains attributes scraped mdn expect cover use cases read whole issue linked issues prs manually added two missing properties expect changes land interestingly sure whether tag whitelist relevant anymore far able use tags requested issue linked prs without trouble master see fbjs still maintains svg tag whitelist know codebase well enough say tags missing worked today hopefully zpao spicyj clarify whether need also add missing tags complement unlocking issue attribute whitelist still relevant hopefully see lot less requests attributes spec implemented browsers supported something still supported final please let us know note apply passes svg attributes reverted behavior please use upcoming master final tell whether attributes interested currently supported", "d": "3/2016"}, {"body": "noticed seems quite lot confusion attribute currently supported would need write different way react correctly turn even see fiddle example", "d": "3/2016"}, {"body": "use case needed react recognize filter elements like specifically attributes etc appears fine worked around adding attributes dictionary exported first importing eg javascript needed set correct xmlns preserve attributes fefunc required may become unnecessary var svgdompropertyconfig require reactlibsvgdompropertyconfig var domproperty require reactlibdomproperty var mustuseattribute dompropertyinjectionmustuseattribute svgdompropertyconfigpropertiesin mustuseattribute svgdompropertyconfigpropertiesintercept mustuseattribute svgdompropertyconfigpropertiesslope mustuseattribute svgdompropertyconfigpropertiesxmlns mustuseattribute var react require react var render require reactdom render obviously hack find preferable", "d": "3/2016"}, {"body": "works officially exposed api may break minor patch release use risk something still missing please work us add glad hear issues", "d": "3/2016"}, {"body": "yep absolutely using comes rc status", "d": "3/2016"}, {"body": "see geertjan created plugin bring react netbeans someone wanted contribute searching grammar bring jsx support maybe someone help", "d": "3/2016"}, {"body": "phantom bump trying lot svg work react lot issues like please support svg attribute mostly solved support spec implemented browsers please give try would allow semantic attributes declared would applied modify attributes element sounds like really want custom component acts way rather override native component require changes core lets deviate much like potentially change tag render later use case covered react well think worth adding something invasive original suggestion would nice able wrap attributes general though things like autoprefixing yeah even case best take care rather let user override arbitrary attributes arbitrary ways autoprefixing could part integrated style solution see use case particular proposal inclined close please let know wrong reopen thanks", "d": "3/2016"}, {"body": "point maintenance mode unlikely receive future feature updates best use dedicated thirdparty npm module eg lodash andor others", "d": "3/2016"}, {"body": "love get conversation going conceptually clean provide perhaps could dropped plan majorly change point would break every react install seems like safe enhancement welldocumented api adding means team would fully commit comments whatever would able access time using would include pending state transactions", "d": "3/2016"}, {"body": "yaycmyk bad idea cases referencing certain point time necessarily currently set", "d": "3/2016"}, {"body": "syranide hmm yeah matter js knowledge referential equality", "d": "3/2016"}, {"body": "yaycmyk referential equality reference pointing old copy gives stale data matter kind equality using", "d": "3/2016"}, {"body": "comment would require implementor know cached version object variable may reflect current version object hence referential equality statement", "d": "3/2016"}, {"body": "yaycmyk yeah let call data management term referential equality implies something specific", "d": "3/2016"}, {"body": "fair enough", "d": "3/2016"}, {"body": "issue solved reacttransitiongroup nt require passing timeouts getting animation bug resolved using reactcsstransitiongroup exists using reactcsstransitiongroup", "d": "3/2016"}, {"body": "reacttransitiongroup nt issues since nt anything transition events", "d": "3/2016"}, {"body": "invariant replaced warning still best avoid warning possible use cancelable async primitive eg observable clean unmounting reason set flag eg check flag callback pretty makes problem lack cancellation apparent visible closing please let know something missed", "d": "3/2016"}, {"body": "hi would love status update targeted fix version date", "d": "3/2016"}, {"body": "support merged master days ago included rc going released soon stay tuned", "d": "3/2016"}, {"body": "fixed beta final well spicyj onclick still working ios fixed sill get stuck think", "d": "3/2016"}, {"body": "nt know changes would affected", "d": "3/2016"}, {"body": "problem due passing function property component binding function input field onchange value remove warning added function inside component calls function component props eg onchange function e epreventdefault thispropsonchange", "d": "3/2016"}, {"body": "inactive year appear like plans explosion javascript build tools polyfills trying careful add surprises touch builtins think right call react native actually running issues right conflicting polyfills great able avoid far touching builtins closing please let know making mistake reopen thanks", "d": "3/2016"}, {"body": "want traverse children recursively find specific type node use change props condition wrong method", "d": "3/2016"}, {"body": "happy quick test looks optimistic html iframe test think captures gist unclear effected flag", "d": "3/2016"}, {"body": "think anything actionable issue closing specific warnings confusing miss important information context please file issue instructions reproduce tag good first bug receive community contributions cheers", "d": "3/2016"}, {"body": "yup lots improved past two years", "d": "3/2016"}, {"body": "since longer listen scroll events except also stop officially supporting react far see effectively means issue longer relevant thank reporting please let know wrong close one", "d": "3/2016"}, {"body": "also ran amp would love see fixed thanks suggestions workarounds adding onclick onmouseup event helpful still suboptimal nothing happens user let go slider", "d": "3/2016"}, {"body": "uncontrolled components leading confusion one instance confused lot people thinking index keys cause data show wrong place really example uncontrolled components whose values simply nt update underlying data reordered illustrated uncontrolled components index keys fundamental problem created jsfiddle question convenience whether deal developer confusion react code polluted lot inappropriate uncontrolled components day", "d": "3/2016"}, {"body": "likewise really nt happy see official binding helpers react documentation", "d": "3/2016"}, {"body": "noted deprecated", "d": "3/2016"}, {"body": "aweary nice glad hear", "d": "3/2016"}, {"body": "", "d": "3/2016"}, {"body": "zpao open issue please", "d": "3/2016"}, {"body": "react team plans implement template engine integrations whether jade system communicated see plain js case jsx superset js nature react components advantage rather downside feel strongly welcome create jadetocreateelement transform working adding issue asking reopen help anyone unfortunate side effect clobbering everyone notifications please", "d": "3/2016"}, {"body": "problem error message limitation message telling limitation removed longer completely new react still keep running stupid barriers reason whatsoever someone idea separation something resulting percent programmer time spent drilling arbitrarily placed concrete walls get piece data api place code place simple heuristic create eg instantiate something probably using nt make hard", "d": "3/2016"}, {"body": "longer completely new react still keep running stupid barriers reason whatsoever someone idea separation something sure problem due someone idea separation something perhaps valid technical limitation exists reason maybe something could fix cases rather write comment tangentially related thread would productive create new issue describing trying achieve react gets way maybe help finding simpler way achieve maybe issue help us find better api unfortunately thread really good place discussion clear trying feature request correspond issue discussed would please create issue describing use case problem code snippets please believe nobody wants put barriers front force separate anything spite smile thanks", "d": "3/2016"}, {"body": "stumbled upon less issues outlined issue created little npm package called reactkeyhandler something react team willing integrate directly react happy help", "d": "3/2016"}, {"body": "transactional updates thing need read actual value without actually writing example following pseudocomponent listen sort global event listener toggle selectable internal flag however ca nt trust field actually set call means far know either manually keep track current state seems like quite nasty way solve issue wrap code inside dummy call would nt anything nt seem really elegant either nt think redefining pending state bcbreaking could still possible add official way get access pending state another name improve use case maybe able trust anywhere else call feels like waste js class foo extends component", "d": "3/2016"}]