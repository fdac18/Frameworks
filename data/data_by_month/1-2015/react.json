[{"title": "feedback beta", "body": "one biggest pro react simple nt things nt try overly complicated things docs nt greatest explaining api fortunately nt try sprinkle much magical fairy dust eyes explains however part syntactic acid code fashion statement less clear since butchered initial state default props generic meaningless concept constructor point things time much clearer separate functions one thing makes clearer code easier follow logic even see lot want easily scannable code less code since fall trap less readable code whole concept class gain never ever instanceof components case ridiculously rare even case hand lot mixins besides constructor making everything unnecessarily awkward mixins help properties state whole class construct says mixins please create giant monolithic unmanageable class hierarchies blunt classes uses solutions inheritance extremely naive solutions asking create problems give meaning code scale horribly unmaintanable giant scrabble tree hard mix together usually involving overcomplicated solutions would necessary inherent limitations practically taboo performance codelanguages given antihardware nature practice react component need terms composition able mix functionality nt repeat code nt want repeat clarity reasons centralize code feel worthwhile benefit whole concept class originally conceived purpose along multiple inheritance able mix thing great concept failed achieve largely due engineered amount languages copypasting said failure interest pandering simple minded programmers spoonfed oogospel change current react way actually managed achieved goal easy mixingreuse code quite well within context react nt see need move system less cabable even issues fact use come might well replace keyword class snakeoil useless seems", "num": "2992", "d": "1/2015"}, {"title": "reactmountnodecache repopulated purged nodes focused unmount", "body": "unmount currently focused node repopulated purged unless specific id revisited later remain forever mostly likely due focusselection restoration phase reconciliation repro nodecache output console", "num": "2988", "d": "1/2015"}, {"title": "markdown editor function goes bounds second line", "body": "using markdown editor function react site noticed text overflows longer strings user uses space start new line strings take full line editor overflow border displaying output", "num": "2986", "d": "1/2015"}, {"title": "onclick nt fire clonewithprops", "body": "seems onclick nt fire clonewithprops check example codepen intended behavior possible workarounds", "num": "2985", "d": "1/2015"}, {"title": "cloning component using clonewithprops overriding ref warning shown", "body": "doc makes clear use clonewithprops pass ref extraprops override ref get warning get warning specific case otherwise way set ref mycomponent created", "num": "2984", "d": "1/2015"}, {"title": "allow string arguments classset", "body": "hi sometimes want statical classes toggled classes eg looks like gets ugly fast let allow idk flexible needs simple implement version would flexible would", "num": "2983", "d": "1/2015"}, {"title": "access functions", "body": "following snippet demonstrate use case trying achieve javascript var parent reactcreateclass componentdidmount function reactchildrenforeach thispropschildren function child consolelog test child render function return thispropschildren var child reactcreateclass test function consolelog test render function return child reactrender documentbody like know iterating unable get reference actual component least able figure could access child component api anyway could edit aware add ref child component use goal parent care children restrict limit way", "num": "2982", "d": "1/2015"}, {"title": "always warns invalid prop", "body": "checked react running chrome safari firefox able reproduce issue following iconjsx var icon reactcreateclass proptypes icon reactproptypesstringisrequired render function return moduleexports icon wrapperjsx var icon require iconjsx var wrapper reactcreateclass proptypes icon reactproptypesinstanceof icon isrequired render function return thispropsicon moduleexports wrapper render instance var icon get error also able reproduce issue seems like proptype checker nt working expected maybe missed something", "num": "2979", "d": "1/2015"}, {"title": "scryrendereddomcomponents return dom order", "body": "code testing component simple list initialize props result one node add another node get using dom comes results true appears returning node inserted first var commentlist reactcreateclass render function var commentnodes thispropsdatamap function text return return commentnodes var var var node testutilsrenderintodocument nodesetprops data function var comments testutilsscryrendereddomcomponentswithclass node comment consolelog comments getdomnode innerhtml prints consolelog comments getdomnode innerhtml prints", "num": "2978", "d": "1/2015"}, {"title": "docs text code snippets tiny firefox", "body": "tested firefox left chrome right firefox", "num": "2977", "d": "1/2015"}, {"title": "style expecting object unfortunate consequences", "body": "hi pretty new react trying build div requests imagescaling service backend images specific resolutions need use css imageset css value need vendor prefixes css key problem ca nt duplicate keys style object ended manually setting style attribute componentdidupdate hack get around system suggest could perhaps also expect array key value pairs could like specific example css trying modify found", "num": "2976", "d": "1/2015"}, {"title": "broken componentwill update", "body": "updating state component corresponding method lifecycle get called every time component fact always current state comparing always return true mentioned methods return correct objects previous next state", "num": "2974", "d": "1/2015"}, {"title": "support indeterminate checkbox state", "body": "chrome firefox safari ie modern browsers support notion checkbox indeterminate state set cleared using property checkbox input node set using attributes state commonly used top list tree checkboxes indicate checkboxes underneath checked behavior seems reasonably welldefined modern chrome firefox safari ie checkbox indeterminate property set checkbox renders indeterminate state regardless checked state checked state programmatically toggled clicking checkbox clears indeterminate state unfortunately little bit inconsistency chrome firefox safari clicking indeterminate checkbox clears indeterminate state also toggles checked state triggering change click event ie clears indeterminate state leaves checked state alone triggering click event react support prop checkbox inputs supported uncontrolled checkboxes via similar prop clicking indeterminate checkbox follow browser checkedtoggling behavior claims come playing jsfiddle chrome firefox safari ie", "num": "2973", "d": "1/2015"}, {"title": "lexical binding class", "body": "trying beta version noticed would bomb afaik arrow function definitions throw error nt prototype well guess ca nt used class cc sebmarkbage", "num": "2972", "d": "1/2015"}, {"title": "dangerouslysetinnerhtml nt update replaced state properly", "body": "might bug scenario following state contains default value typing overwrite default value works expected using used yes still works rather replacing state concatenates default value values problematic example", "num": "2970", "d": "1/2015"}, {"title": "reactchildrenfilter", "body": "use case wrapping nonempty children divs js render return wrapchild child index child know probably wrong kind comparison nt care return nice also need know many valid children wrapped return number children including empty children want strip", "num": "2956", "d": "1/2015"}, {"title": "onchange fires event type input", "body": "hi onchange handler also capture input events yes would like able capture onchange oninput", "num": "2955", "d": "1/2015"}, {"title": "fbme nt contain", "body": "link script tags fbme get errors browser refused execute script mime type texthtml executable strict mime type checking enabled refused execute script mime type texthtml executable strict mime type checking enabled", "num": "2954", "d": "1/2015"}, {"title": "update cycles update mstransform", "body": "use quite bit inline transforms components recently encountered transforms updated ie component mounted mounting component receive correct transform styling remains unchanged subsequent update cycles update component unique key update cycle update nokey components components static keys verified styling properties seem update fine ie opacity", "num": "2950", "d": "1/2015"}, {"title": "add korean translated docs", "body": "seeing good chinese contributors contributing starting react docs translation project react korea group soon finish enough amount docs translated translation would like send pull request guys think interested see even though mostly korean", "num": "2945", "d": "1/2015"}, {"title": "jsx build tool documentation", "body": "ran issue commandline build tool would nt build folder full files get cryptic output empty array nothing happens caused hour two confusion tried checking docs eventually read source saw uses found digging turns requires input files extension rather think might help people put short section docs integrate build short correct wrong jsx files end js jsx use compile folder full jsx files plain js comment longer required effect using browserify nt use use thoughts", "num": "2943", "d": "1/2015"}, {"title": "nt touch proptypes production mode", "body": "currently validating proptypes production mode probably wasted effort since used also means play around proptypes without fear breaking production code", "num": "2938", "d": "1/2015"}, {"title": "consider using jsonml notation reactelement", "body": "nt get excited probably wo nt work issue documenting ca nt could consider using jsonml notation reactelement would make jsx currently looks like much nicer nonjsx declaration would also align us spec almost like standard children special jsonml designed way children distinguished attributes nt really care property already merged could undo nbd one problem constantly need slice children outer array passing component become performance problem problem jsonml nt way attach custom attributes element props ie important treated differently props available component conceptually parent responsible keying element changing key affect behavior component refs also important props transferred child without affecting behavior one possible solution would wrap elements another object still ugly also means reason two types element without wrapper children also ambiguous first position attributeless element constant destructuring time need clone reason element need destructure system nested arrays ca nt distinguish nested array elements element would work enforced children always provided flat lists explicitly flattened needed eg flattening makes difficult preserve keys though allowing component receives reactelement outside need reason two different kinds abstractions use two different patterns accessing type props important react community nt diverge far", "num": "2932", "d": "1/2015"}, {"title": "click events nt fired mobile devices table rows", "body": "could missing something handler table row mobile devices wo nt fire event unless add handler event empty function fiddle comment function fiddle mobile devices wo nt actually fire handler tapping row tried safarichrome ios iphone", "num": "2931", "d": "1/2015"}, {"title": "getchildcontext called getinitialstate", "body": "think bug prevents child context dependent component state var react require react var contexttypes name reactproptypesstring class test extends reactcomponent getinitialstate return name name getchildcontext return name thisstatename render return testchildcontexttypes contexttypes consolelog reactrendertostring results", "num": "2929", "d": "1/2015"}, {"title": "properties rx observable reactlike experiments", "body": "issue used track properties features available experimental frameworks build everything around rx observable streams liftable component boundaries identified already overlap well existing projects error propagation boundaries errors propagate hierarchy completion propagation signal tell component longer change used memory cleanupcollapsing async serverside rendering transition groups clean exit animations prerendering lifting components become opaque containers async reconciliation component block entire ui waiting data useful serverside rendering calling asynchronous fast apis client features probably built optimized imperative style core expose capabilities built observables nongoal particular task provide similar api surface area observables track capabilities exposed frameworks possible experiment alternative apis heavily rely observable semantics top features", "num": "2928", "d": "1/2015"}, {"title": "arrow functions nt properly bind jsx transform harmony option", "body": "seems jsx transform ca nt find use arrow function nt bind function probably since slow unfortunately appears namespacing jsx element jsx transform nt realize needs bind resulting function example var mydemoclass reactcreateclass subcomponent reactcreateclass render function return null transforms var mydemoclass reactcreateclass displayname mydemoclass subcomponent reactcreateclass displayname subcomponent render function return null", "num": "2927", "d": "1/2015"}, {"title": "possible add multiple event listeners react component possible programmatically assign listener", "body": "hello could please answer following questions possible add multiple event listeners react component possible programmatically assign listener ideally looking something like addeventlistener would great could suggest something thank andrei", "num": "2925", "d": "1/2015"}, {"title": "idea official nightly edge build npm", "body": "working master nt straightforward react js libraries typically possible point sha commit npm work version codebase since nt happen react due compile step nice official nightly devbuild react available npm one main benefit would library authors making easier check projects changes going master potentially weigh issues one example comes mind warnings around reactrouter due context changes", "num": "2924", "d": "1/2015"}, {"title": "componentdidupdate fire earlier case", "body": "know fires dom updated met problem working piece code like following component js function getstate return layers storegetlayers var component reactcreateclass getinitialstate function return getstate componentdidmount function storeaddchangelistener thisonchange thisupdatelayernode componentdidupdate function thisupdatelayernode componentwillunmount function storeremovechangelistener thisonchange render function return thisstatelayersmap function layer return updatelayernode function var self onchange function thissetstate getstate store js var changeevent change var layers function createlayer id var layer id id node null context null layerspush layer var store assign eventemitterprototype getlayers function return layers getlayer function id var lt layerslength layers id id return layers emitchange function thisemit changeevent addchangelistener function callback thison changeevent callback removechangelistener function callback thisremovelistener changeevent callback layer means node need create layer somewhere else eg click handler use draw something wrote demo works well work project invoked confused execution order update first create layer draw component rendered works move click handler nt work anymore js function onclick actionscreatelayer id var layer storegetlayer id layercontextfillrect reactrender documentgetelementbyid demo ideas solve problem", "num": "2922", "d": "1/2015"}, {"title": "componentdidupdate prevstate previous state", "body": "", "num": "2914", "d": "1/2015"}, {"title": "silent exception", "body": "turned anything might go wrong caught component dropped two undefined function calls separate branch everyone try reproduce fetch branch run build project quick debugging showed number blocks exception caught issue might relate also noticed bunch similar ones without code example might help", "num": "2912", "d": "1/2015"}, {"title": "deprecate reactaddonsclassset", "body": "dependencies think either publish standalone module direct people something else community inclined latter since means wash hands internal usage tied transforms said features would useful others outside fb concerned suggestions existing projects point", "num": "2910", "d": "1/2015"}, {"title": "deprecate reactaddonsupdate", "body": "easiest addon get rid see also todo figure shared dependencies live new name new repo file existing issues new repo update internal usage fb", "num": "2909", "d": "1/2015"}, {"title": "react developer tools malfunctioning chrome", "body": "inspecting props components panel nt functioning clicking element mouse dom tree nt select element keyboard navigation working", "num": "2908", "d": "1/2015"}, {"title": "reactcsstransitiongroup adding enter class", "body": "trouble one animations simple fade fade animation stepping chrome dev tools element rendered page class never applied however class gets applied seem getting added correctly example code almost identical getting started code docs running react help would appreciated thanks", "num": "2907", "d": "1/2015"}, {"title": "add delete mutability helper", "body": "js sparse arrays advantages setting elements deleting eg prints therefore mutability helper returns copy deleted entry javascript update reactaddons let let b update delete consolelog consolelog b ps course also applies objects", "num": "2906", "d": "1/2015"}, {"title": "switching react virtual dom element react tab selecting element inspecting", "body": "would great extension allows us see react dom element matches regular dom element mean click inspect button chrome devtools react tab becomes active shows us element chosen deeply nested dom quite annoying click lot times get nested element might checkbox within react extension works behaviour choosing elements needed", "num": "2905", "d": "1/2015"}, {"title": "passing first argument react methods", "body": "react methods start var self small sweet feature would pass first parameter far know would nt breakable change methods nt take parameters instead var mehcomponent reactcreateclass componentwillmount function var self render function var self would become var mehcomponent reactcreateclass componentwillmount function self somestuff function self render function self somestuff function self", "num": "2899", "d": "1/2015"}, {"title": "set context getinitialstate called", "body": "initial state depend context need make sure context set recent changes let make sure add test wink", "num": "2898", "d": "1/2015"}, {"title": "clear best practice trickling properties externallysupplied component children", "body": "suppose making custom radio button field shows like bunch toggleablebuttons components render wrapping hidden input needs use name parent component clear way correctly transfer prop automatically seems redundant set prop individually however use iterate children method objects get method instead cjsx buttontoggle reactcreateclass render reactchildrenforeach propschildren option gt xxx idea ok setprops available optionpropsname propsname antipatternbug perhaps added docs", "num": "2897", "d": "1/2015"}, {"title": "clarify harmony dependence transferring jsx docs", "body": "new react following tutorial ran snag copy pasting example transferring jsx example lead line chrome using inbrowser jsx transformer took awhile figure proposed javascript thing builtin react thing needed super unclear documentationtutorial reads somehow react taking care react specific syntax docs link destructuring assignment think docs clearly state browser environment must support harmony work", "num": "2896", "d": "1/2015"}, {"title": "optimize bindautobindmethods", "body": "running performance issues using react server side large component trees finding render time increases linearly case seeing render times relatively simple page components profiling found showing top trace went added hrtime calls inside see much time contributing rendering found used within method may seem like lot pretty dramatic effect throughput server rendering synchronously way optimize binding happens lazily server many methods may even called event handlers lifecycle events etc", "num": "2895", "d": "1/2015"}, {"title": "question immutable data react", "body": "may sound like noob question crazy ask anyway dom diffs may replaced immutable data diffs much faster sane require state immutable drop dom diff entirely virtual dom altogether react code actually require us explicitly declare every form field state big deal events derivatives architecture vice versa jquery believe missing", "num": "2891", "d": "1/2015"}, {"title": "detect react dom element wrong attribute name", "body": "dear pretty new react reasons want use without jsx faced issue ca nt resolve react element properties key instead key example console see warning okay really mean find mean supposed look first fb react plugin chrome nt see wrong attribute warning nt give stack trace either huge dom hard go thru manually without hints possible find workaround see example", "num": "2887", "d": "1/2015"}, {"title": "missing closing brace gives misleading warning", "body": "heres code gives following error spent bit time wondering tag nt closed noticing line nt right missing closing brace wonder error could descriptive case error pointy rather curly brackets problem", "num": "2886", "d": "1/2015"}, {"title": "removing object array inside state component refresh dom", "body": "suppose may bug fault code filter array state component question description problem plnkr", "num": "2885", "d": "1/2015"}, {"title": "invariant checking component classes passed mixins fully correct", "body": "javascript function mixspecintocomponent constructor spec invariant reactlegacyelementisvalidfactory spec reactcompositecomponent attempting use component class mixin instead use regular object changed javascript function mixspecintocomponent constructor spec invariant typeof spec function reactclass attempting use component class mixin instead use regular object however simply function nt correctly fully identify error example following code fluxxor javascript var fluxmixin function react return componentwillmount function fluxmixincomponentwillmount function throw new error fluxxorfluxmixin function takes react parameter returns mixin eg mixins fluxxorfluxmixin react tests around messaging started failing using react since technically function another conditional would better identify passing component class mixin", "num": "2883", "d": "1/2015"}, {"title": "warning unknown dom property autocomplete mean autocomplete", "body": "sure counts canonical source near tell input property downcased trouble form input showing firefox refresh noticed sure effect functionality though", "num": "2882", "d": "1/2015"}, {"title": "load example", "body": "run indexhtml examples jquerymobile chromium browser get uncaught typeerror read property reactautobindmap anonymous function", "num": "2880", "d": "1/2015"}, {"title": "add support svg image element", "body": "another issue tracking looks like got merged issue already closed never got fixed", "num": "2873", "d": "1/2015"}, {"title": "reactchildrenmap return array arraylike object", "body": "hey trying use conjunction create copy children however surprising behavior find map return array typical map function would value see returning array would enabling one perform array operations collection children reorderingsplicing inserting new elements etc since nt return array children meant opaque data structure unclear best practice type thing created rough jsfiddle demonstrates assume behavior optimization purposes case maybe way think problem thanks feedback cheers", "num": "2872", "d": "1/2015"}, {"title": "get original html rather compiled example react tutorial", "body": "return highlight area unexpectly get want html testleft somebodypx", "num": "2871", "d": "1/2015"}, {"title": "warning calls use", "body": "ditto invariant think ok already", "num": "2870", "d": "1/2015"}, {"title": "write custom lint rules", "body": "x make sure string literal first argument make sure jsdoc args match", "num": "2869", "d": "1/2015"}, {"title": "dangerouslysetinnerhtml nt update svg", "body": "suspect applies svg elements know sure due lack svg needing use created jsfiddle demonstrate issue switch two images tux second also dump console render every browser renders correctly initially chrome update chrome everything works expected firefox gets converted disappears assume html inside svg context safari looks fine image never changes ie looks fine image never changes", "num": "2863", "d": "1/2015"}, {"title": "style updates silently fail trailing semicolon style", "body": "first render works update silently fails expected would semicolon removed errorwarning development build tested chrome latest firefox latest master minimal jsbin js var app reactcreateclass getinitialstate function return color red handleclick function consolelog hello world thissetstate color blue render function consolelog rendering var style backgroundcolor thisstatecolor rabishah ran irc", "num": "2862", "d": "1/2015"}, {"title": "clonewithprops function type property points window", "body": "js var react require react require reactaddons function createcircle x r return var mycircle reactcreateclass render function var circle createcircle return reactaddonsclonewithprops circle onclick function consolelog reactrender documentgetelementbyid svgtest click circle sure whether bug nice refer element", "num": "2861", "d": "1/2015"}, {"title": "input pattern attribute value broken react", "body": "see rendered element pattern attribute value jsfiddle uses react noticed issue react imagine nt tested nt specific pattern attribute stripped something", "num": "2860", "d": "1/2015"}, {"title": "lack testutils method finds rendered component data attribute value", "body": "react test utilities currently expose following ways query contents rendered component certain elements type tag classname however common applications make use automated testing tools target elements classname tag name rather specific data attribute type reserved explicitly use testers paradigm allows developers modify class names purposes styling without worrying breaking existing test suites feel like could beneficial allow allow querying rendered components via data attributes like javascript reacttestutilsscryrendereddomcomponentswithdataattr function root attrname attrvalue return reacttestutilsfindallinrenderedtree root function inst var regex data var dataset key instprops regextest key dataset keyreplace regex instprops key return dataset attrname attrvalue reacttestutilsfindrendereddomcomponentwithdataattr function root attrname attrvalue var reacttestutilsscryrendereddomcomponentswithdataattr root attrname attrvalue would allow unit testing react elements rendering via validating contents rendered element querying data attributes might used complementary automated test suite figured even attempting put together formal pull request would open issue get feedback perceived value additions thanks", "num": "2858", "d": "1/2015"}, {"title": "bug eventcurrenttarget null even eventpersist", "body": "using properties kept intact reason jsfiddle thanks", "num": "2857", "d": "1/2015"}, {"title": "children depends order enumerating properties object", "body": "notice component children type returned reactchildrenmap object reactchildrenforeach use loop children type object think cause problem future spec guarantee order enumerating properties object ps try extract reactcsstransitiongroup heavily depends order enumerating properties object standalone package use children array type merge render need pull request reactcsstransitiongroup let know", "num": "2856", "d": "1/2015"}, {"title": "jsx parentheses around object literal transforms invalid js", "body": "comma right parenthesis emitted jsxtransforming line like title result following jsx source jsx var examplecommaissue reactcreateclass render function return transforms reactcreateelement div style margin classname test instead reactcreateelement div style margin classname test notably seems problem attribute follows one parenhugged object literal also test see arbitrary values parentheses also result", "num": "2855", "d": "1/2015"}, {"title": "bug event object properties null within setstate callback function", "body": "event object seems lose property values within callback function jsfiddle demonstrating behavior", "num": "2850", "d": "1/2015"}, {"title": "save component back references dev mode", "body": "purposes providing devtools support providing back traces error messageswarnings might useful keep back references component parent trace information cut amount time required find component responsible throwing warnings", "num": "2849", "d": "1/2015"}, {"title": "react wiki module reactgrowabletextarea", "body": "suggestion components wiki first attempt react component feedback welcome", "num": "2848", "d": "1/2015"}, {"title": "keyboard event handlers longer invoked documentbody get focus", "body": "example app root component rendered also set handle application keyboard shortcuts problem running user interaction like clicking around page causes obtain focus become case amp event handlers longer invoked know could register keydown keyup event handlers manually app component mounted would prefer stay within react", "num": "2846", "d": "1/2015"}, {"title": "allow template strings attributes jsx", "body": "cool myclass worked instead wrap template string", "num": "2845", "d": "1/2015"}, {"title": "keep drop replacestate", "body": "continuing conversation started considering dropping replacestate ideally state always keep consistent signature defined getinitialstate", "num": "2843", "d": "1/2015"}, {"title": "maven plugin available", "body": "hello maven plugin available integrate jsx precompilation build process seen gradle plugin would anyone recommend using gradle instead maven solve personally currently prefer maven still sufficient projects kind regards moritz", "num": "2841", "d": "1/2015"}, {"title": "onclick events components inside forms fire nt", "body": "making form component onclick event placing cursor input field form pressing enter onclick event component fires feels random something wrong actual bug jsbin illustrates problem", "num": "2840", "d": "1/2015"}, {"title": "catch invalid dom nesting initial render", "body": "currently get error react tries update dom things nt expected early errors much better development react give clear errors based valid html structures example select element valid child option option element valid child text node forms one invalid deep child form tables quite rules suggested error format forms element n means displayname childindexifnotzero invariantviolation foocomponent may deep children culprit form gt div gt form invariantviolation foocomponent may deep children culprit form gt div gt gt gt barcomponent gt div gt tables invariantviolation foocomponent may children encountered thead invariantviolation foocomponent may one child encountered thead thead invariantviolation foocomponent may one child encountered thead thead less frequently encountered situations pushed different release think important bad habits people used allowed situations examples people run problem selectoption nested forms tables", "num": "2839", "d": "1/2015"}, {"title": "include key using reactchildrenmap reactchildrenforeach", "body": "currently key property stripped children calling reactchildrenmap reactchildrenforeach seems would useful retain property leave user decide handle instance example docs showing following want retain key using clonewithprops nt work want loop clone child key already stripped code made test var hello reactcreateclass reactrender documentbody output omits key values", "num": "2838", "d": "1/2015"}, {"title": "track upcoming dom technology upgrades", "body": "x support hyphenated dom components jsx transform usage within html import x inserting components shadow dom fragment x arbitrary properties dom components proper event handling events fired inside shadow dom custom events component prototype provide change detection execute rerender want component able rerender instance component children effectively treated prop react changes detecting changes require default component implementation things like initialize mutationobserver potentially defer rendering dom per x remove tagname property per support complex types parameters web components react components take complex types whereas dom nodes take strings pass complex type web component need run code mount time passes additional parameters instantiated web component stateful imperative bridge per", "num": "2836", "d": "1/2015"}, {"title": "illogical architecture setstate", "body": "dear react developers community anyone please explain react throws hard error use setstate anything entails setting new state eg replacestate setstate work mounted component never works unmounted component harm using consolewarn instead code must use thisismounted amp amp thissetstate completely redundant please provide explanation allow using certain init option throwing error", "num": "2835", "d": "1/2015"}, {"title": "q transfer state server", "body": "wonder possible transfer state andor props server client imagine ways like stringifyparse json achieve properly use ajax initial state even isomorphic webapp", "num": "2834", "d": "1/2015"}, {"title": "question state serializable", "body": "according guide items state react component serializable would like store nonplain javascript object would consequences", "num": "2833", "d": "1/2015"}, {"title": "add support itemref", "body": "", "num": "2831", "d": "1/2015"}, {"title": "facebook cdn link react location breaks csp sites", "body": "try load https cdn location react browser gets redirected http resource rejected browsers everywhere requirements additionally sites explicit csp wo nt let redirect even browser told ignore enforcement", "num": "2829", "d": "1/2015"}, {"title": "uncaught typeerror read property mockedreactclassconstructor undefined", "body": "error caught twice hard debug perhaps extra check could make less hard debug location error happens javascript function instantiatereactcomponent element parentcompositetype var instance production processenvnodeenv production processenvnodeenv warning element amp amp typeof elementtype function typeof elementtype string functions strings mounted react components null cause always using undefined variable jsx tag like reason get error often forget export othercomponent directly using import like wrong obviously would help much assertion first parameter reactcreateelement right away called", "num": "2828", "d": "1/2015"}, {"title": "provide stack traces warnings", "body": "find often hard time tracking source various react warnings would idea setting throw warnings least stack trace", "num": "2827", "d": "1/2015"}, {"title": "onmouseentercapture onmouseleavecapture working", "body": "first thank building amazing library sharing rest us nt know whether bug code bug library design suspect latter", "num": "2826", "d": "1/2015"}, {"title": "define functions inside mixins", "body": "love mixins works limitations like use getdefaultproperties inside mixin component ca nt override property getdefatulproperties bigger problem nt know ok case component parent mount reactcomponent ca nt call someone know solve problem thanks", "num": "2825", "d": "1/2015"}, {"title": "explicitly bound setstate call fails callback argument passed", "body": "passing prop value actually trigger state change however passing function falsey value argument seems work javascript thissetstatebind key val setstate get called thissetstatebind key val work thissetstatebind key val null works thissetstatebind key val undefined works thissetstatebind key val function works thissetstatebind key val works fiddle thissetstatebind thisstatea change gets queued realized calling setstate third argument thissetstatebind b thisstateb null works thissetstatebind c thisstatec undefined works demo", "num": "2823", "d": "1/2015"}, {"title": "jsx cli class getter setter support", "body": "run following error thrown trying use library called isomorphic app needs serverside rendering module works fine clientside nt playing nice server even though server already set render react components jsx code stated seems transformation supported via flag nt supported say seems hard time believing ca nt thing missing", "num": "2820", "d": "1/2015"}, {"title": "facebook cdn serving compressed libraries", "body": "example surely served gzip compression quite odd indeed", "num": "2819", "d": "1/2015"}, {"title": "access private variables", "body": "component used private member knowing also used react overwrote variable got strange errors completely unrelated points time took figure react used private member name exposed inside component would useful actually hide variables otherwise mention documentation easily findable", "num": "2817", "d": "1/2015"}, {"title": "nt warn undefined key using arrays", "body": "using always result warning development mode understand reasoning using jsx aware user may something wrong using javascript api however seems odd arrays useful work performant dealing arguments would possible provide ability turn warning", "num": "2816", "d": "1/2015"}, {"title": "invalid values styles also throw errors", "body": "documentbodystylewidth invalid argument something want solve", "num": "2815", "d": "1/2015"}, {"title": "updating props element", "body": "react component renders component b receives another component c one props need update props component b rendering tried access available maybe right component something like b like access compc update props tried available move compc b needs stuff b nt need know", "num": "2813", "d": "1/2015"}, {"title": "boxflex missing ignore list automatic unit concatenation", "body": "boxflex value gets px suffix although unitless css property could please fix version", "num": "2812", "d": "1/2015"}, {"title": "jstransform dependency mismatch esprimafb", "body": "issues installing today using react node switched using version performed npm cache clear try start app get seems leading version numbers truncated check field reads unsure registry issue wondering anyone insight fix issue spent many hours trying get work edit also tried", "num": "2811", "d": "1/2015"}, {"title": "reactcreatecomment would nice", "body": "use come handy working inspector compiling react template systems", "num": "2810", "d": "1/2015"}, {"title": "umbrella", "body": "x refs make callbacks instead first class spicyj sebmarkbage x move proptype validation element instead class jsfb x warning classtype accessed sebmarkbage clean internal jsfb x expose reactcomponent base class sebmarkbage x fix context x deprecate keyed objects children warning jsfb sebmarkbage x add reactfragment api expose reactaddonsfragment x fix reactperf x change unmounted setstate checks invariant warning zpao x add enqueuestateupdate name enqueue updates depend thisstate consistent since thispendingstate gone sebmarkbage x fix devtools sebmarkbage x something refs timing sebmarkbage x warn uses within x warn maps children zpao needs syncup flow internal option zpao wo nt fix expose dom component refs actual dom nodes monkey patch props setprops getdomnode onto upgrade path warnings using dom component ref getdomnode props fix error utils guard see reactcompositecomponenterrortest deprecate setprops alternative expose clonewithprops react proper actual clonewithprops one deprecate replacestate", "num": "2809", "d": "1/2015"}, {"title": "make default initial state component", "body": "find writing way often lot components wait ajax requests setting state variables make things much easier", "num": "2804", "d": "1/2015"}, {"title": "appear selectable creation disabled", "body": "react implementation appear allow selected correct behavior user timeline initial creation html allows offer selected creation time wording disallow update select disabled option disallows form post disabled option still selected whereas explicitly allowing preloaded select major browsers permit html allow selected option time idiomatic disabled empty option one placeholder text pick color selected element load time believe example code load first instead loads second remove unshifted element selected load time jsx jsx reactdom var testcase reactcreateclass please advise", "num": "2803", "d": "1/2015"}, {"title": "svg tag prevents transpilation jsx js", "body": "steps reproduce create react component renders svg contains example puffsvg save component file try compile file get following error use transform get error use though nt take screenshot might similar issue tag worked around error building custom component building svg code setting using component", "num": "2798", "d": "1/2015"}, {"title": "expose devtools hook injection consumers react object", "body": "currently react looks global calls exists works fine one listener eg chrome react devtools love react supported arbitrary number independent hooks react hot loader reaching internals need get mounted instances wish could without ing internal module ideally wish react exposed modules available global hooks via kind would called automatically available object want library nt mean production libraries debugging aid libraries react hot loader potentially others", "num": "2797", "d": "1/2015"}, {"title": "clarify componentdidupdate fires", "body": "unclear called regards function docs state invoked immediately updating occurs unclear meant updating case refer either component whole updating meaning postrender refer setstate processed might mean prerender would good explicitly state function fires documentation even somewhere else site described text graphic form already", "num": "2796", "d": "1/2015"}, {"title": "add support", "body": "adding component jsx causes jsxtransformer throw error taking replacing makes error vanish missing formset whitelist somewhere", "num": "2794", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "large agree trying fit existing model classes ugly really ca nt see real benefits", "d": "1/2015"}, {"body": "think definitely transition period everything fits place neatly esx catches think vision behind current direction sound come instead using vendor specific vendor specific behaviors features interop libraries use native classes sure lack mixinsupport ways around property initializers yet uglies bit classes autobound kind sucks guess property initializers rescue well seems yeah using classes still early perhaps choose use early adopter way would say still great thing using native classes one way creating classes one prefer free use native classes ready eyes slowly migrate away whatever class helper using react longer decided best free use whatever want seems amazingly great ask nt see issue edit words react moving direction away unnecessary forced opinions library bloat react class library view framework forcing certain class library x z react focus best future implementation everything else community provide official addons absolutely necessary everyone different opinion right way everyone freedom choose", "d": "1/2015"}, {"body": "wrote briefly fashion oop classes really", "d": "1/2015"}, {"body": "go ahead put good first bug one may bit tricky find root cause quite easy narrow fix rather simple think perhaps easiest bug entirely new", "d": "1/2015"}, {"body": "yeah looks like warning changed case", "d": "1/2015"}, {"body": "implementation shortcoming clone elements keep original ref readd would owner original owner", "d": "1/2015"}, {"body": "hmmm see ironically case owner read doc fact says preserve key owner okay could probably explicit end way element point cloned ref", "d": "1/2015"}, {"body": "end way element point cloned ref right know implementation issue intentional ps accessing children generally considered antipattern unless explicitly uncontrolled controlled components preferable possible may thinking wrong way would find using controlled components preferable many ways", "d": "1/2015"}, {"body": "easily implement", "d": "1/2015"}, {"body": "course react addons exist useful would make useful", "d": "1/2015"}, {"body": "flyingsheep everyone different opinions usefulnecessarymeaningful though reactaddons mostly useful getting started originally designed compatible css class name mangling meaning simple class name easily discoverable", "d": "1/2015"}, {"body": "agree usual case combination fixed classnames dynamic classnames optionally applied classnames", "d": "1/2015"}, {"body": "going get rid helper see said issues implementation stuck tied facebook statically transform class names ca nt change implementation since really common request going get rid tell people use another one jedwatson plan point", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "ok great first one exactly idea anyway", "d": "1/2015"}, {"body": "aetet bem react work well together think linked addition something designed work normal class name strings ie classnames", "d": "1/2015"}, {"body": "contains elements component instances case foreach handler get result without jsx way want within parent well might reactchildrenmap clonewithprops refs nt recommend try restructuring code nt need", "d": "1/2015"}, {"body": "actually already using since also need pass props children however way give access", "d": "1/2015"}, {"body": "yeah appears way suggest finding way make requirement multiple levels confusing component invokes internal methods children without even hint ref construction child nt something want happen ever", "d": "1/2015"}, {"body": "simply react intended work work way work way create elements pass react basically becomes want view hierarchy look like react takes request createsreusesdestroys components according reconciliation algorithm need access instances approaching problem wrong way react components compared oop classical objectbased view hierarchies components sense thin complex logic logic exist outside react communicated propagates view hierarchy via props parent accessing child generally considered antipattern would say", "d": "1/2015"}, {"body": "syranide well perhaps share exact use case trying solve might throw light motivations perhaps add little sense might great idea releasing open source soon nt mind sharing idea built custom form amp field component form component simple enough besides wants hand certain props fields nt want care details markup field component abstraction form components easily make components inputfield emailfield selectfield etc using form idea consistent api abstracts displaying labels form components error messages etc based props basic form would look something like think looks really nice amp simple within want able loop children call api value get values fields reason becomes important important especially could complex nesting fields things like also groups fields together layout flexibility perspective form nt care fields children order really care return build amp pass entire form data hash parent moment done gone ahead used allows build hash simply form markup decent work around however fields responsible declaring values things would become lot deterministic believe think structure amp concept works quite well feels quite intuitive yet simple however share thoughts ideas", "d": "1/2015"}, {"body": "possible implementation way communicate via props passind data downward using callbacks going back one way use paradigm still nicelooking layout would basically form automatically gives children callback call state needs updated along current value way owns state children stateless form elements make sense nb tried might end much magic think would work", "d": "1/2015"}, {"body": "hm chance look expected case expects regular javascript class react class could explicit docs", "d": "1/2015"}, {"body": "yeah think correct", "d": "1/2015"}, {"body": "yeah makes sense guess blindly assumed returned class would work hopefully changes help line", "d": "1/2015"}, {"body": "use reactcreateelement render classes", "d": "1/2015"}, {"body": "computed element chrome firefox appears chrome somehow ignores fontsize first preceding element fontsize set would result computed fontsize resulting", "d": "1/2015"}, {"body": "rather video recording although computed value zero effect typography child elements unless manually set fontsize wish someone could explain", "d": "1/2015"}, {"body": "firefox right chrome wrong feel free fix either way hacky css want", "d": "1/2015"}, {"body": "zpao would guess yes take another look today way past midnight last night may missed something either way il like get bottom issue report bug chrome necessary", "d": "1/2015"}, {"body": "zpao hey pr found quite interesting discrepancies browsers render wrote short articles summarise findings", "d": "1/2015"}, {"body": "also tried add spaces backgroundimage key react reacted nt let", "d": "1/2015"}, {"body": "feature detection goto solution least believe edit supplying array rules complicated updating would require reapplying order could quite costly area nothing really decided yet believe feature detection solution use css probably preferable unless dynamic seems", "d": "1/2015"}, {"body": "yea suggested feature detection case bulletproof eg wo nt work serverrendering otherwise yes area unfortunately using objects nt work perfectly nt really anything going change string", "d": "1/2015"}, {"body": "example correctly yields however pretty sure issue seeing mutating objects stateprops react clone objects passed stateprops hence reference object react advocates sticking immutable data ie always create new object instead mutating existing", "d": "1/2015"}, {"body": "oh yeah problem occurs objects right example entirely complete anyway clone object assigning props component state either using underscorejs problem still exists", "d": "1/2015"}, {"body": "line mutating state object try compare", "d": "1/2015"}, {"body": "sure need manually set state call setstate able", "d": "1/2015"}, {"body": "noted modifying directly used", "d": "1/2015"}, {"body": "duplicate", "d": "1/2015"}, {"body": "nt think supported syntax yet see wait assigning properties seems like imperative way defining classes right however designed way idiomatic fully expect declarative syntax property initialization arrive future version javascript might look something like nevertheless would thrilled supported transpilers liberal experiments sebmarkbage kind spec talked sebmck nt mind getting", "d": "1/2015"}, {"body": "official proposal yet assume look something like typescript reflective aspects scoping rules probably differ bit", "d": "1/2015"}, {"body": "sebmarkbage currently midst writing spec", "d": "1/2015"}, {"body": "strange change suddenly worked expected", "d": "1/2015"}, {"body": "ejelome result markdown invalid markup browser mucks dom weird ways elements end outside updating hence behavior seeing react would also start throwing errors mutate elements around", "d": "1/2015"}, {"body": "see way invalid markup halts reactjs way thanks explanation syranide", "d": "1/2015"}, {"body": "another way solve give us childrentoarray", "d": "1/2015"}, {"body": "solved problem wish exposedsupported though", "d": "1/2015"}, {"body": "may wrong think generally problematic unless would replace filtered children rather compact array canshould filter way dynamic children nt keyed reconciliation suffer badly", "d": "1/2015"}, {"body": "right see exposing", "d": "1/2015"}, {"body": "returns keyed object deprecated keyed objects supported soon afaik polyfill wait", "d": "1/2015"}, {"body": "also see would solve", "d": "1/2015"}, {"body": "proper way counting nonempty children incrementing counter", "d": "1/2015"}, {"body": "need implement extra functions like bend map implement functions due js works example jsbingist", "d": "1/2015"}, {"body": "mention event behaves would expect whenever form field changed event fired rather inconsistently blur intentionally break existing browser behavior misnomer behavior react relies event react user input real time see forms details browsers already implemented event inconsistently decided long ago make people actually expected event tell value changed point input lost focus like use combination compare values recreate somethng like native event alternatively think one events actually make use build behavior could potentially still use react event handler run code", "d": "1/2015"}, {"body": "style property look like", "d": "1/2015"}, {"body": "compiled coffeescript cleaned brevity actual version would polyfills transform opacity correctly updated every time component selected transform would get set translatey mount time remain", "d": "1/2015"}, {"body": "prefix hence believe happening simply react setting unknown styles well initial markup goes update unknown property hence property change nt reflected dom zpao considering enforce camelcasing everything else bout vendorprefixes change etc least change consistent edit checktransform style names bah perhaps makes sense keep css whitelist much needed warnings", "d": "1/2015"}, {"body": "damn trying super smart ms everything else webkitmoz looks like changing back ms works seems accepting bad style mounting time grounds confusion though throw errornot apply style bad easier trace also ms left webkitmoz casing p", "d": "1/2015"}, {"body": "follow rules must follow setting styles directly js nt know history microsoft nt follow rules vendor prefixes fair rules might standardized started exception rule reason works first render transform js style name css one follows simple pattern take uppercase letter replace hyphen lowercase version becomes actually right thing updates nt update style actually try nt property ie knows parse actually warning bad vendor prefixes nt check perhaps syranide nt enforce camelcasing style properties browser us nt think deviate use", "d": "1/2015"}, {"body": "zpao used webkit enforce uppercase think always thought camelcasing react largely perspective javascript implementation dom html seems makes sense use rather also would hazard guess would say leading hyphen signifies unofficial nt make sense would added css property really intended read also matches fact vendorprefix javascript", "d": "1/2015"}, {"body": "ah guess problem always inconsistent casing vendor prefixes js indeed webkit js thanks help explanations guys", "d": "1/2015"}, {"body": "yea ca nt actually find anything talking official rules thought point ah well regardless webkit actually makes work sure primary used interchangably would say leading hyphen webkit signifies unofficial really sure mean css vendor prefixes unofficial intended live forever specs develop others totally offspec might never become standard", "d": "1/2015"}, {"body": "really sure mean css vendor prefixes unofficial intended live forever specs develop others totally offspec might never become standard zpao ah meant pretty sure meant read actually webkit browsers though even though technically due leading hyphen guess something said infavor would accidental conflicts however unlikely kind speaks unofficial nature regardless one preferred makes sense react normalize use casing vendorprefixes also really weird currently javascriptprefixes react set makes sense edit correct one assume one shown autocomplete list hence reaction used react rather", "d": "1/2015"}, {"body": "game eventually might want move docs elsewhere think great idea checked know fall date nt good job publicizing translations solve later send pr whenever ready", "d": "1/2015"}, {"body": "looks like also use x example handle files end quick start looks like new standard use though", "d": "1/2015"}, {"body": "would probably good idea add infonoticewarning transpiler notices jsx files nt converting since user probably intended devtools convert jsx files goodfirstbug ps hey dc glad see using react go dish run time curious hear webbased gpg client going", "d": "1/2015"}, {"body": "sure", "d": "1/2015"}, {"body": "proptypes mixins still merged skipped reactproptypes functions turned noops smaller code size etc", "d": "1/2015"}, {"body": "looks like proptype checking already surrounded block starting correct", "d": "1/2015"}, {"body": "yeah everywhere else checkproptypes used huh", "d": "1/2015"}, {"body": "one", "d": "1/2015"}, {"body": "sebmarkbage one referenced place needs updating thinking might good first bug", "d": "1/2015"}, {"body": "kentcdodds looks like jergason already working might want coordinate follow pr", "d": "1/2015"}, {"body": "ah duh find another low hanging fruit", "d": "1/2015"}, {"body": "kentcdodds", "d": "1/2015"}, {"body": "cc chenglou", "d": "1/2015"}, {"body": "oh boy gets excited anyways counterarguments plus arguments pros nonjsx declaration pretty much less reactspecific tooling good children special slicing children expensive mutable arrays yeah since maybe considering persistent collections even lazy splatdestructuring fine agree probably good perf static analysis help current fine plus explicit format component nt expect receive object strip passing props obj properly document harder justify old still obvious say constant destructuring beside perf concern pointed fact lazypersistent help right nt see problem much clearer prefer api smaller api surface really want could make use destructuring hood nt see problem nested arrays since specs nt set stone even nt follow closely propose format instead also solves problem spread previous destructuring point allowing nah lol nt think stick jsonml specs closely make sense example style value string object like react maybe influence specs pros ideally reactagnostic render functions library provides win future reactlike libraries since function nt depend react much nuanced know good start potentially dropping gon na implement every arraymanipulating functions like say perf reasons wanted keep underlying children data structure opaque eg ease switch linked list realistically nt think happening benefits working plain arrays optimized engines big good example problem seen weird passing prop child making parent read determine stuff theoretically better way hard manage might get sync even better way jordan case good excuse able read nothing array also happen render jsonml format come free also easier libraries like read intomanipulate children might slice children infinite scrolling something killing distinction ownerparent tree nt given much thoughts implication might nice pass around persistent children array would nt really know array always cloned mounted clojurescript people already except actually precompile react components play nice us wo nt anymore", "d": "1/2015"}, {"body": "weird passing prop child making parent read determine stuff see use case often code usually hesitate keeping stuff data array prop using wins looks clearer consuming side makes painful component", "d": "1/2015"}, {"body": "yep saying possible feels definitely excusable directly read normal collections think work vanilla js collections much possible including generation keep react edge would dangerously convenient allows us cram new concepts arrays still keep things superficially clean", "d": "1/2015"}, {"body": "oh sebmarkbage children comparison becomes easier also get whatever optimization want flow free eg pull immutable arrays outside avoid allocations probably lot insert optimizations normal arraystuples nt thought", "d": "1/2015"}, {"body": "worked performance standpoint get convergence libraries standard even shared conventions also make things like reactrouter use jsx describing routes sane tied explicitly react select option selected option mean quotes around select option supposed references", "d": "1/2015"}, {"body": "sure quoted", "d": "1/2015"}, {"body": "okay thanks also sake clarity compat think putting metadata last makes sense like optional parameter function usually go last makes handling kind data easier know props always also allows say props nt look right throw errorwarning vs metadata might intended edited sorry accidentally hit submit key shortcut typing", "d": "1/2015"}, {"body": "sebmarkbage seems current objectbased representation preferable technical perspective addition actually making sense try operate ie something consider supporting jsonml via runtimestatic transformation like jsx instead except would jscompatible nt tooling issues static transformation wrap react jsonml whatever statically transformed incur somewhat significant runtime overhead statically transformed equal jsx overhead get choose suitable technical representation without considering especially human readable jsonml seems like yet another dsl something dedicated syntax nt think solution problems like inventing ways making code less ugly magical arrays arrays minimal character overhead understanding view hierarchies require syntax designed html begin time languages catch", "d": "1/2015"}, {"body": "add ios emit click events expected", "d": "1/2015"}, {"body": "would nt opposed something like onclick aditional benefit letting style clickable elements making generated html clearer angular projects use css three birds one stone unless serious perf problems adding empty onclick attribute", "d": "1/2015"}, {"body": "supposed fixed mobilesafariclickeventplugin broke time ago nt fixed yet iirc workaround think", "d": "1/2015"}, {"body": "kept curious point react read references mean context change propagate thus forcing reconciliation twice somewhat related", "d": "1/2015"}, {"body": "correct way define component state terms modern api var react require react var contexttypes name reactproptypesstring class test extends reactcomponent constructor props context super props context thisstate name name getchildcontext return name thisstatename render return testchildcontexttypes contexttypes consolelog reactrendertostring works sorry", "d": "1/2015"}, {"body": "example using jsx executable reacttools", "d": "1/2015"}, {"body": "cc jeffmo dmitrysoshnikov nt bind properly xjsidentifier instead thisexpression cc sebmck seems issue", "d": "1/2015"}, {"body": "probably something needs solved parser side possible bug jsx spec since following correct grammar partially related note really transform arrow functions function binds", "d": "1/2015"}, {"body": "cc rreverser acornjsx", "d": "1/2015"}, {"body": "obvious jsx spec bug example could imagine could compile something nt use result conversely could compile something use seems like transforms need cooperate somehow guess hard transforms output strings", "d": "1/2015"}, {"body": "spicyj ah right true easy fix anyway investigating see larger issue push fix shortly", "d": "1/2015"}, {"body": "fixed", "d": "1/2015"}, {"body": "obvious jsx spec bug example could imagine could compile something nt use result spicyj tend agree spec bug wrote nt think using expressions incl inside element names want treat regular add spec explicitly", "d": "1/2015"}, {"body": "rreverser mean different transforms may want different things characters cases might mean js concept could imagine others nt", "d": "1/2015"}, {"body": "since jsx extension javascript seems pretty safe always assume", "d": "1/2015"}, {"body": "spicyj might wrong imo exactly one things actually standardized spec want people feel safe using assume work way everywhere nt catch weird runtime bugs sebmck agree", "d": "1/2015"}, {"body": "react event system nt way attach multiple listeners single node automatically always chain callback event emitter want curious use case never seen need seen lot react components could elaborate bit maybe something missing support", "d": "1/2015"}, {"body": "thank reply idea implement form validation mixin following functionality focus display helper info change checking entered info adjusting entered data displaying warning blur displaying possible warning wanted add handlers form inputs componentdidmount nt want overwrite handlers assign component previously", "d": "1/2015"}, {"body": "could use helper function behaves like simpler less powerful version react mixin strategy minimal example use realistic example mixin probably calling mergemethods internally accepting object component render method getformproperties would calling internally ensure user passes handlers called also puts position accept properties ignored native dom components like onsuccessfullysubmit remaining mixin sure good idea direct answer without saying use addeventlistener code js function f g return function fapply arguments gapply arguments function mergemethods objs var result arrayprototypeforeachcall arguments function obj objectkeys obj foreach function key typeof obj key function key result throw new error mergemethods non method keys multiple sources used key exists one source return result", "d": "1/2015"}, {"body": "thank guys seems like case becoming much complex business requirements perspective original ask longer actual also think might secure solution terms possible state change conflicts different event handlers thank suggestions keep mind anyway", "d": "1/2015"}, {"body": "think current plan going push tag week hopefully stable master still uptodate enough test latest changes zpao elaborate also automatic builds triggered travis always date", "d": "1/2015"}, {"body": "also good want play latest fiddlejsbin default jsbin comment spicyj installed docs want ensure points latest stable publish tags like", "d": "1/2015"}, {"body": "yea nt want push npm nightly often points know something broken would irresponsible pushing prerelease checkpoints npm generally always checkpoints bring use facebook want make use always bring next prerelease build currently published last friday install directly builds server spicyj mentioned one day clean looks official brigand latest builds server simply symlink recent build given branch corollary npm tags npm keep latest pointing stable use next prerelease channel ca nt actually publish tags look like semver versions anymore used rcs use next match npm tagged officially announced supported builds git repo words rcs final builds nt tagged alphas answer overall request nightlies wo nt publish npm going close", "d": "1/2015"}, {"body": "brigand sorry mean", "d": "1/2015"}, {"body": "sounds good thanks info", "d": "1/2015"}, {"body": "show code sure follow completely work project getcanvascontext invoked componentdidupdate put hard understand method definition example also wary saving anything domish stores hold data", "d": "1/2015"}, {"body": "gaearon thank updated code hope understand clearly also wary saving anything domish stores hold data agree nt thought better way", "d": "1/2015"}, {"body": "byelims could explain overall goal eg component supposed might way without things store", "d": "1/2015"}, {"body": "presumably array pushed called something like keep reference array instance prevstate state however actually cloned array would nt run reference issue unless looked nested objects nt think want make work properly would require deep cloning current state every transition get expensive libraries better things like immutablejs mori good examples cc sebmarkbage aware reopen think anything", "d": "1/2015"}, {"body": "tryfinally without catch nt suppress exceptions able reproduce error standalone jsfiddle", "d": "1/2015"}, {"body": "spicyj unfortunately tried code similar case works fine looks like need run project", "d": "1/2015"}, {"body": "chrome see promise created module swallowing exception notice put breakpoint catch promise code called error object corresponding call", "d": "1/2015"}, {"body": "spicyj whoa thanks exactly exception caught promise ca nt get looking call stack", "d": "1/2015"}, {"body": "understand native implementation promises turns exceptions promise rejections automatically ca nt see code call stack since written js", "d": "1/2015"}, {"body": "ca nt link bunch useful scripts docs leave people free usemodify implied maintained getting people started feel like lot people nt understand current state expect fullblown frameworks updated every feature conceivable publishing npm kind continues trend suspect noone team react really cares addons enough would say make available docs codefiles let community sort publishingimprovingdirection", "d": "1/2015"}, {"body": "steal code post somewhere else name need another css repo mine really reactspecific", "d": "1/2015"}, {"body": "talking jed conference think point people", "d": "1/2015"}, {"body": "let track devtools repo", "d": "1/2015"}, {"body": "something like", "d": "1/2015"}, {"body": "splice replaces items supplied elements two parameters third undefined eg calling elements removed three eeh test work sure make sure use browser console jsbin console see elements actually empty instead set undefined", "d": "1/2015"}, {"body": "oh sorry realized meant fact needed exact thing today objects", "d": "1/2015"}, {"body": "would cover", "d": "1/2015"}, {"body": "similar different behavior arrays mongo setting items flyingsheep use case sparse arrays react", "d": "1/2015"}, {"body": "honestly think behavior arrays makes sense following mongo rule thumb following something need able undo well since possible things array need able return previous state special nullifying behavior seems strange case edit thought favor nonholey rare people use sparse arrays purpose always write little helper use", "d": "1/2015"}, {"body": "yeah pretty strange special cases arrays without reason say change unconditionally", "d": "1/2015"}, {"body": "shortcut would jump updown closest composite component", "d": "1/2015"}, {"body": "select element elements tab using magnifying glass rightclick inspect element switch react tab corresponding component selected nt think better api chrome gives us", "d": "1/2015"}, {"body": "ca nt implement stepping updown composite components inside react tab something like ctrlup ctrldown oh silly parent many children nevermind", "d": "1/2015"}, {"body": "thank works exactly need", "d": "1/2015"}, {"body": "nah nt jsy ever write react python might happen make use built js features namely fyi would breaking change half lifecycle methods take arguments eg", "d": "1/2015"}, {"body": "makes sense argue could still pass last parameter without breaking change personally find bind everywhere pollute code makes harder read something deal code without necessary forcing everyone use self parameter convention", "d": "1/2015"}, {"body": "phzbox enable transforms use arrow functions equivalent self pattern js var mehcomponent reactcreateclass componentwillmount somestuff gt render somestuff gt realistic example think right js class comments extends reactcomponent componentdidmount get apicomments comments gt thisismounted thissetstate comments render return thisstatecommentsmap c gt", "d": "1/2015"}, {"body": "context available initial state perhaps creating dom descriptors outside context see example hope helps", "d": "1/2015"}, {"body": "dyscrete believe zpao referring master branch broken", "d": "1/2015"}, {"body": "indeed issue filed us remember since knew details sometimes forget people watching repo appreciate thorough testing though dyscrete hope stick around help people", "d": "1/2015"}, {"body": "think might looking", "d": "1/2015"}, {"body": "vsiao docs state clonewithprops usage component target child case nt owner components thought children owned parents parents children owner owned fungible parent child misinterpreted docs", "d": "1/2015"}, {"body": "think goes like owner parent nt buttontoggle owner option components think parent owner owner custom component uses yeah use", "d": "1/2015"}, {"body": "decided discard components owned toplevel scope using spin components owned button toggle still feels like workaround still rather perplexed makes sense parent components children specified shared ancestor scope", "d": "1/2015"}, {"body": "semirelated note expected behavior spread operator fails used like works like got unexpected error used extra whitespace confusing", "d": "1/2015"}, {"body": "decided discard components owned toplevel scope using spin components owned button toggle actually sensible idea say better passing props whoknowswhat children may even know props", "d": "1/2015"}, {"body": "well docs say perhaps move people like following along tutorial may bother keep reading", "d": "1/2015"}, {"body": "want send pr improve upon tutorial", "d": "1/2015"}, {"body": "dashed sure mess tonight", "d": "1/2015"}, {"body": "cc sebmarkbage talking changing autobinding recently might insight especially context classes", "d": "1/2015"}, {"body": "idea move explicit binding model using classes maybe property initializers lets choses whether bind construction time used render according optimizations maybe way could change optimization server side render doubt since theory need bind least even server possible call callback componentwillmount would also suggest try different strategy benchmarking profiling tools tend exaggerate small methods gets called lot comment call react profile manually timing whole operation without profiler enabled see results", "d": "1/2015"}, {"body": "wrt profiling manually test mentioned removed profiler used around calls added reactcompositecomponent mountcomponent printing end rendering gives total nanoseconds used try removing method see effects total rendering time concerned render would break removed instance", "d": "1/2015"}, {"body": "yeah unfortunately breaks components testing without calling ca nt test difference", "d": "1/2015"}, {"body": "mridgway safe considered cost calling ie move outside leave empty measure nt know rendering might expensive external call prevents optimizations could contribute significantly cost probably nt never know seems high", "d": "1/2015"}, {"body": "could also maybe try calling bindautobindmethods twice see adds", "d": "1/2015"}, {"body": "right contributing quite significantly well reran tests combining calls method able get single measurement around average removing debugging adding calls spicyj mentioned able get difference calling twice thrice altogether looks like taking per render nt nearly bad initially thought still surprising long takes number probably worth extra effort minimize impact sebmarkbage changes still trying figure render times high though", "d": "1/2015"}, {"body": "nt follow argument would immutable data structures replace need understand returned different value somewhere tree need opposed something else immutability helps determine bail comparing virtual dom shallowly equal know values immutable know deeply equal well nothing update however ca nt see replace virtual dom", "d": "1/2015"}, {"body": "like gaearon said immutable collections alone wo nt remove need diffing matter fact nt think makes much sense lol might thinking along line om techniques nt mean nt need diffing said diffing mostly optimization popular creative guess important part concept react imo given reasonably faster platform like opengl probably nt need diffing since redrawing everything would faster", "d": "1/2015"}, {"body": "feel free continue discussion nothing really actionable going close get point broken implementable replace virtual dom", "d": "1/2015"}, {"body": "gaearon would immutable data structures replace need understand render returned different opacity value somewhere tree need somenesteddomnodestyleopacity opposed something else returned different opacity incoming data changed pure causes right function detectable earlier stage state diff maybe dom mutations avoidable setting document title timer things etc seen solved corner cases chenglou see react view library created bottomup reached questions state flux whole bunch architectures created solve react point view dom diff essential endpoint users luxury question everything nt care backward compatibility etc look purely theoretical topic wonder react may look like created topbottom starting state questions maybe dom diff may never required important part concept react imo exactly everything open brave new architecture built react limitations weak places", "d": "1/2015"}, {"body": "detectable earlier stage state diff hard get mean without kind proof concept least pseudocode walkthrough", "d": "1/2015"}, {"body": "recursive file search help find quickly may feasible improve warning displayname components", "d": "1/2015"}, {"body": "brigand yeah thanks seems one possible solution think ways resolve kind issues expected see issue highlighted react tab maybe component name got issue example nt think hard implement", "d": "1/2015"}, {"body": "meant displayname shown dev tools addon errorwarning messages", "d": "1/2015"}, {"body": "brigand sorry got usual console warnings missing", "d": "1/2015"}, {"body": "yea good idea entirely sure actually access owner component point may pass extra information around mean time grep best option usually people see iterating relatively small surface area possible blame nt much issue would make react friendlier would support adding long nt make code much complicated", "d": "1/2015"}, {"body": "idea move proptype validation element creation instead mount treat warnings part validation step would get warning earlier stack trace would point created element bit problematic natives environment specific since validation probably special case", "d": "1/2015"}, {"body": "problem value classname passed would helped locate problem fast instead warning unknown dom property class mean classname show warning unknown dom property class value foo mean classname made pull request first pr sure made everything right", "d": "1/2015"}, {"body": "problem valid start expression js gt interpreted greater operator code nt actually invalid first replaced compile bit tricky problem solve get correct line number side note forgot curlies around", "d": "1/2015"}, {"body": "brigand indeed nt think going easy one maybe worth adding list gotchas sort silly thing easy lose quite bit time", "d": "1/2015"}, {"body": "dakuan could use lint tool like jsxhint islint help lot catching errors", "d": "1/2015"}, {"body": "gpbl get error jsxhint give resulting js jshint", "d": "1/2015"}, {"body": "going send since error actually coming part parse step specific message different one mentioned issue class problems think definitely making messages helpful possible want make sure solve problem right way", "d": "1/2015"}, {"body": "design react poll state triggers rerenders really bypass mutate state directly need make dummy call nt really recommend either work", "d": "1/2015"}, {"body": "react requires camelcasing dom attributes even though dom attributes lowercased sometimes hyphenated however react always output correct dom attribute name markup unless seeing something else everything", "d": "1/2015"}, {"body": "confirm works fine react version gives uncaught typeerror read property reactautobindmap undefined reactclasscreateclassconstructor anonymous function jquerymobile example using component constructors way makes new version explode gaearon lays", "d": "1/2015"}, {"body": "make sure examples working release final nontrivial change broken point time check latest stable branch working examples", "d": "1/2015"}, {"body": "also", "d": "1/2015"}, {"body": "confuses", "d": "1/2015"}, {"body": "programming english map function something type get back something type js built version array map children map maps children children children opaque data structure public properties methods behavior nt violate promises react could provide converter children array probably look something like js reactchildrentoarray function children var iselement reactisvalidelement children arrayisarray children return childrenslice single child else children typeof children object iselement avoid warning missing key prop iselement amp amp childrenkey return reactclonewithprops children key return children gt else return objectkeys children map key gt assuming directly set key overrides object key nt tested children key key var props key key return reactclonewithprops children key props return children key", "d": "1/2015"}, {"body": "thanks brigand great reply one thing confuses however typically invoke case children object however invocation works fine reactchildrenmap returns instance children even though given array argument see point fair map function obligated return arrays seems problematic accepts arrays thus violating formal definition map method provided think larger question around react elements children meant interact opaque interface updated jsfiddle tries demonstrate wants shuffle list children react elements would love get thoughts best practice solving problem converter children array seems plausible wondering nt problem others yet makes think missing bigger picture cheers", "d": "1/2015"}, {"body": "way complicated involves reactchildrenforeach reactchildrencount storing sorted indexes state handling changing array indexes componentwillreceiveprops better way sort data parent component glad complicated child sorting elements nt make lot sense sort data fun implementation side note nt store elements state element used update text listitem would nt show ui component still renders elements", "d": "1/2015"}, {"body": "brigand using slice code arrayisarray children return childrenslice", "d": "1/2015"}, {"body": "dyscrete returned array sometimes always would mean toarray could nt promise allowed modify returned array decide want mostly point consistency aware convenient way shallowly clone array", "d": "1/2015"}, {"body": "brigand thanks explanation familiar use nt think completely posted", "d": "1/2015"}, {"body": "react sees single text child whereas one tutorial treated two", "d": "1/2015"}, {"body": "zpao take bit detail looked thought codebase could nt understand", "d": "1/2015"}, {"body": "thanks kevinold", "d": "1/2015"}, {"body": "writing eslint rules making sure rules also work nonjsx code zpao second suggestion eslint jsdoc rule work proposing", "d": "1/2015"}, {"body": "exiting jsdoc rule noisy tried since nt use jsdoc consistently warns way much really want catch cases break tooling example sort thing want catch", "d": "1/2015"}, {"body": "say exiting jsdoc rule mean require return option turning requirereturn turned lint rules use options think available jsdoc rule maybe options added eslint jsdoc rule instead rules become numerous enough split several rules", "d": "1/2015"}, {"body": "sexitingexisting considered adding options upstream nt care enough short term priority code see requirements niche go upstream definitely consider", "d": "1/2015"}, {"body": "first instinct put warning dev nt incur costs prod would similar style key warning used backgroundcolor probably meant backgroundcolor whatever say", "d": "1/2015"}, {"body": "zpao sounds reasonable nt think valid reason semicolon", "d": "1/2015"}, {"body": "zpao warning worth considering valid css iirc", "d": "1/2015"}, {"body": "would nt warn", "d": "1/2015"}, {"body": "zpao oh right seen plenty invalid perhaps exercise time anyway might want ignore whitespace well", "d": "1/2015"}, {"body": "working issue added warning thinking may good idea trim semicolons well warning serve let developers know invalid syntax try fix problem", "d": "1/2015"}, {"body": "react issue bind function passing", "d": "1/2015"}, {"body": "andreypopp okbut code loop props prop works uncomfortable", "d": "1/2015"}, {"body": "entirely sure updated questionpost asking nt look like react bug going close let know still believe bug reopen bind method welldocumented react introduced feature called autobinding saved typing turns source lot confusion autobinding enabled react using classes", "d": "1/2015"}, {"body": "pattern attribute recent attribute used regexpbased validation text input", "d": "1/2015"}, {"body": "get rendered element pass react", "d": "1/2015"}, {"body": "react bug simply javascript works written strings need escape avoid unescaping performed strings", "d": "1/2015"}, {"body": "duh true sorry noise thanks react", "d": "1/2015"}, {"body": "currenttarget changes event bubbles event handler element receiving event others ancestors see different values currenttarget iirc nulling consistent happens native events let know reconsider behavior", "d": "1/2015"}, {"body": "always element event listener created change event bubbles", "d": "1/2015"}, {"body": "seems disagree open console click inner div", "d": "1/2015"}, {"body": "ahhh okay bad thanks demo react always going side current dom event spec go way jquery patch specific things", "d": "1/2015"}, {"body": "wo nt always follow dom unless good reason deviate case really event handlers getting notified naming currenttarget indicates handler currently executed think makes sense leave like change event bubbles making multiple event objects would also worse performance", "d": "1/2015"}, {"body": "duplicate", "d": "1/2015"}, {"body": "events pooled wipe values want use event outside current event loop need call pull event pooling note thing properties nulled talked nt issues handy nt talk website probably", "d": "1/2015"}, {"body": "thanks zpao really appreciate explanation using still noticed although properties kept intact reason updated jsfiddle", "d": "1/2015"}, {"body": "use instead", "d": "1/2015"}, {"body": "different", "d": "1/2015"}, {"body": "yup sorry misread assumed related events makes deepest children", "d": "1/2015"}, {"body": "created new ticket", "d": "1/2015"}, {"body": "something like react devtools aware chrome console returns currently selected element elements tab", "d": "1/2015"}, {"body": "add", "d": "1/2015"}, {"body": "said neat component", "d": "1/2015"}, {"body": "call duplicate reopen disagree", "d": "1/2015"}, {"body": "propose backtick part spec wrote ca nt even implement let revisit", "d": "1/2015"}, {"body": "done", "d": "1/2015"}, {"body": "immutability note started using fluxy uses mori internally store states started using object subtrees store state components like cursor component listens changes store cursor key array scope get diffs store changes replace state new cursor working pretty well hate lose time planning supporting something like immutablerecord might cool fluxy working abstracting immutable data structure implementation support immutablejs honest tying react specific implementation immutable data kinda defeats purpose comes modularity maybe hooks allow plugin use wether immutablejs mori", "d": "1/2015"}, {"body": "bit loop state setting merging still gon na work see convenient long time come go immutable rather return whole state object avoids merge uses structural sharing much possible whatever custom mechanism mentioned issue though nt think needed solution edit wan na type check well want accept full objrecord right", "d": "1/2015"}, {"body": "main place usesee use replacestate already done merge setstate would work also inefficient pattern tends arise react inability queue immutable updates js thissetstate incr thisstatea setstate async would throw changes thissetstate incr thisstatea async things final state depends batching strategy unless batching strategy nexttick race conditions asyncthing gt thissetstate incr thisstatea state gt stateab stateab vs hypothetical safe variant thisenquestate incr thisenquestate incr asyncthing gt thisenquestate incr state gt stateab", "d": "1/2015"}, {"body": "considering dropping replacestate ideally state always keep consistent signature defined getinitialstate always loved idea nt think negates value however requiring calls provide full state would surely make practical entirely obvious would keep useful without ruining part appeal brigand feel quite confident inefficient case really measurable real life scenario could wrong", "d": "1/2015"}, {"body": "presumably engine hidden classes optimization mutable object may dangerous think ideally clone freeze objects anyway already props createelement", "d": "1/2015"}, {"body": "use maven use successfully makes maven installs nodejs install build process includes gulp script runs browserify compile jsx", "d": "1/2015"}, {"body": "explicit support kahwee mentioned integrations maven js ecosystem integrate react transforms", "d": "1/2015"}, {"body": "may bug happening button form default type submit bug spec nt say emit click event submit button form submitted otherwise one many dom quirks cs js tabs spaces add props solve", "d": "1/2015"}, {"body": "yep solves thanks", "d": "1/2015"}, {"body": "mention think quite easily realistically solvable dev least cc zpao", "d": "1/2015"}, {"body": "think stored directly reactcomponentelement props trying example appears work", "d": "1/2015"}, {"body": "awesome work nt realize stored way thanks", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "going close refer issue let know nt enough answer questions give idea direction heading", "d": "1/2015"}, {"body": "could stringify state meta tag document", "d": "1/2015"}, {"body": "people couple different ways stringifying initial props making sure part initial call way typical route injecting global variable data script tag using meta tags interesting way go could see working pretty well requesting data way go obviously drawbacks might end least complicated way application works great drawbacks going close really issue react mailing list stack overflow probably better places continue discussion feel free keep going", "d": "1/2015"}, {"body": "requirement put anything however generally good idea stick plain objects example immutablejs types usually nt want object state mutated somewhere deeply inside would nt able compare previous next states example easier reason state immutable said hard requirement put whatever want object mutated elsewhere note react way know changed unless call object also note missing potential effortless optimizations purerendermixin state contents mutable since state longer shallowly compared", "d": "1/2015"}, {"body": "helpful thank", "d": "1/2015"}, {"body": "microdata props know already support specified nt appear anywhere schemaorg spec props please let us know", "d": "1/2015"}, {"body": "yea know fbme cdn really set real cdn suggest host files production environment use one real cdns link probably change wording around fbme links make clear limitations plan eventually better supported official cdn mean time going close fbme limitation nt something fix fbme redirect service nt support", "d": "1/2015"}, {"body": "yeah currently running browserifygulpconcat bundling keep everything single file atm alternative running sorting version latest react might location point docs instead fbme", "d": "1/2015"}, {"body": "think covered via master alpha", "d": "1/2015"}, {"body": "gearon yes agree thank", "d": "1/2015"}, {"body": "also got backported able update see warning", "d": "1/2015"}, {"body": "nice zpao thanks pointing", "d": "1/2015"}, {"body": "think covered", "d": "1/2015"}, {"body": "yeah nice already like specifically catch error way stack shows console nt anything get information", "d": "1/2015"}, {"body": "well catching would blow rendering best way however think might useful browsers support otoh sure stack trace would helpful full react stuff often directly related problem breaking warning would least allow inspect whatever failed check", "d": "1/2015"}, {"body": "another option use subclass instantiate error soon something detected used incorrectly consoleerror right debugging source errors huge time vampire gaearon long stack trace long enough contain function calls code nothing inherently wrong lots react stuff stack traces libraries black box except things fail things fail want able see happened ca nt see happened black box effectively debug errors causes incorrect usage libraryframework debugging problems react code becomes harder people encounter ca nt give much information contributors react figure something react needs fixed", "d": "1/2015"}, {"body": "suspect misunderstanding though certain issue phone react api supports event capturing phase eg pointerevents gotpointercapturereleasepointercapture events", "d": "1/2015"}, {"body": "event specifically", "d": "1/2015"}, {"body": "boljen mouseeventcapture events never heard also see list mouse events", "d": "1/2015"}, {"body": "mouseeventcapture events never heard also see list mouse events react react clearly also doc event handlers triggered event bubbling phase register event handler capture phase append event name example instead using would use handle click event capture phase say look like bug", "d": "1/2015"}, {"body": "oh nice missing part docs guess since enterleave bubble nt make sense capture", "d": "1/2015"}, {"body": "mixin functions like attach component nt access either parent would mean even static function want note nt specific mixins mixin fine closing", "d": "1/2015"}, {"body": "thanks response still nt understand component mixing use component parent ca nt access functions component know best idea little crazy im making find workaround thanks", "d": "1/2015"}, {"body": "still nt understand component mixing use component parent ca nt access functions component example specific component instance class many instances way convention use camelcase class names instead eg js top level var instance reactrender documentbody inside another component use refs var someothercomponent reactcreateclass componentdidmount function ref corresponds instance render function return reactrender documentbody however way normally make things happen react codebase hundreds react components neither exposes public methods also try hard use escape hatch instead embrace topdown data flow try toplevel updates drive changes application refs warns programmed several apps react first inclination usually going try use refs make things happen app case take moment think critically state owned component hierarchy often becomes clear proper place state higher level hierarchy placing state often eliminates desire use refs make things happen instead data flow usually accomplish goal thinking react shows proper way components communicate", "d": "1/2015"}, {"body": "thanks gaearon comments true im overusing refs start spend time see replace states thanks time comments", "d": "1/2015"}, {"body": "leaves rest arguments filled caller assign bound event handler get second argument fails also antipattern ing performant called time may lot unnecessary function allocations", "d": "1/2015"}, {"body": "error console explaining error invariant violation enqueueupdate called callback nt callable sure else really gaearon mentioned passed function gets called event callback nt callable hit invariant truthy check invariant nt hit null undefined nt add callback queue falsey though couple lines lower send without falsey check throwing well later cc spicyj handle", "d": "1/2015"}, {"body": "looking code ca nt figure nt always throw batchedupdates callback nt specified probably tired right", "d": "1/2015"}, {"body": "yea limitations service really cdn use another cdn service see comment", "d": "1/2015"}, {"body": "think gone hiding internal instance public one likely still couple though maybe could consider double underscoring react private things cc sebmarkbage", "d": "1/2015"}, {"body": "nt think anything js jsx differences use arrays nt specify keys react wo nt able efficiently tell moved item changed may result wasted time updating whether js jsx specifying child help react update dom efficiently specify key plan js pass children prop", "d": "1/2015"}, {"body": "error nt show use arguments instead arrays nothing say could nt put array reason see warning one case use jsx array means printing list items likely something keyed instead simply basic child dom elements", "d": "1/2015"}, {"body": "use arguments react implicitly uses order keys unlikely order could change elements staying jsx corresponds multiple explicitly defined children case would silly specify keys guess said last ca nt see reason difference plain js jsx behavior", "d": "1/2015"}, {"body": "following examples exactly one produces warning understand react chosen warn using arrays arrays might mean order may change obviously always case probably less likely working javascript api arrays useful structure work much performant pass around concatenating applying arguments like example provide ability simply turn warning always assume engineer using arrays without keys something wrong", "d": "1/2015"}, {"body": "probably less likely working javascript api would nt sure imo would common plain js code would shame miss cases somebody nt use jsx hand way suppress warning passing stuff around found use arguments spread array cleaner syntax assuming use transpiler", "d": "1/2015"}, {"body": "mlmorg offtopic primarily intended jsx afaik using exists nonjsx crowd however curious may wrong sense seeing issue lot dynamically constructing nonkeyed array items nt really done implicit key system used react work best elements fixed indices ie better construct maintaing holes like helps reconciliation without overzealous keying offtopic probably nt apply know nt might interest though using instead places issue believe still officially ok would give result want", "d": "1/2015"}, {"body": "believe still officially ok would give result want oh wait talking objects pardon", "d": "1/2015"}, {"body": "heuristic people gets keys wrong time even warning place likely forget key dynamic array nt think implicit key default ask optin keys really always provide explicit key even static set might switch two different static sets really warning children property extra children arguments really special cased way avoid providing implicit keys indicating static set items certainly trick system using however idiomatic use static notation var args would clearly indicate dynamic set spread operator makes lot easier use arrays rest arguments kind unfortunate end day prevent shooting foot heuristic use avoid common source errors come foolproof system different heuristic means let add instead closing since currently way avoid syranide pointed would recommend making common practice though since lack keys cause severe bugs", "d": "1/2015"}, {"body": "mean solve", "d": "1/2015"}, {"body": "zpao mean solving like done node properties enforcing types wrapping trycatch perf though simply continue let error invalid style values worth", "d": "1/2015"}, {"body": "want", "d": "1/2015"}, {"body": "something like", "d": "1/2015"}, {"body": "ca nt set props via see fiddle", "d": "1/2015"}, {"body": "oh see example class works need put props like example component create c specific props b get prop add something else rendering", "d": "1/2015"}, {"body": "nt think good practice maybe check would probably pass c props c seperate components var props thispropsc propsnewprop new", "d": "1/2015"}, {"body": "yeah thought changed code put c inside instead b avoid issue", "d": "1/2015"}, {"body": "figured application using", "d": "1/2015"}, {"body": "api would added took liberty update description issue nt see seems bit unnecessary", "d": "1/2015"}, {"body": "hmm comment dom element would part", "d": "1/2015"}, {"body": "set builtin helpers calling edit also note technically comment dom element dom node unless talking different anything would translate", "d": "1/2015"}, {"body": "ah yes agreed", "d": "1/2015"}, {"body": "would comments diffed part reconciliation stripped production btw make custom comment component renders null production visible devtools development sure benefits though", "d": "1/2015"}, {"body": "sebmarkbage hmm perhaps comment considered special case makes sense sure comment node universally useful really useful dom frontend behave like regular reactelement really make sense would considering elements share single dom svg composite etc makes sense universally useful like say fragment nt seem like would better specialcased something edit guess could make sense consider comments could helpful debugging tool frontend would map noop ca nt make use hmm", "d": "1/2015"}, {"body": "browser xmlhtml dom interesting kind nodes document dom class nodetype nodename attr attributenode thisname element elementnode thistagname text textnode text cdatasection cdatasectionnode cdatasection documentfragment documentfragmentnode documentfragment comment commentnode comment document documentnode document documenttype documenttypenode thisname processinginstruction processinginstructionnode thistarget useful able render use react serverside render arbitrary xml documents already support five dom constructor react constructor react signature documentcreateattribute key value key value documentcreateelement type reactcreateelement type props type props documentcreatetextnode txt string number documentcreatecdatasection txt string number documentcreatedocumentfragment array could add support final four well get complete support dom constructor react constructor react signature documentcreatecomment data reactcreatecomment data type comment data implementationcreatedocument reactcreatedocument props type document props implementationcreatedocumenttype name publicid systemid reactcreatedocumenttype name publicid systemid type documenttype name publicid systemid document createprocessinginstruction target content react createprocessinginstruction target content target content comment valid create using use think use api also different signature accepts string data field rather complete props object useful combination create document type well rest", "d": "1/2015"}, {"body": "sebmarkbage hmm bit confused thought idea universal interface creating elements understood interpreted active frontend right dom saying separation nt make sense nt mean dom frontend implementation details leak react api illustrate thoughts would make sense exposed would isolated react api frontends etc nt seem like apply universally react frontends map straight dom implementation think apply equally well frontends ie dom api well designed adopting ps react signature fragment nt thought able key important", "d": "1/2015"}, {"body": "syranide right however currently module already overloaded dom specific apis move separate namespace interesting exercise though would make sense ability define comment environments others probably unique dom ps might need additional representation keyed fragment discussion going space currently", "d": "1/2015"}, {"body": "sebmarkbage future guess expand context bit seems matrix debugginglogging human consumption informational data computer consumption semanticcontrol meaning computer consumption exists react avoids instancing overhead b exists react frontend renderer c exists react frontend renderer rendered representation makes sense level good developer tool abc make largely pointless seems legitimacy still think makes sense think props could make sense hypothetical scenario frontend might able gather present something interesting additional data currently used quite bit believe noop composite components abused quite frameworks good way around staticness html dom something would ever strive replicate elsewhere could make sense right makes sense seems could value comments universal api however slim might", "d": "1/2015"}, {"body": "deprecate keyed objects children sometime", "d": "1/2015"}, {"body": "ah yes", "d": "1/2015"}, {"body": "usually set variables null cases also serves kind documentation think react trying save allocations although sure", "d": "1/2015"}, {"body": "going gaearon explicitly setting allowed state properties good documentation also optimization two actually reduce allocations shadow classes also mention mention allowing set state properties exist else throwing think sounds like really great idea another reason would want explicit", "d": "1/2015"}, {"body": "also mention mention allowing set state properties exist else throwing think sounds like really great idea another reason would want explicit love case btw", "d": "1/2015"}, {"body": "gaearon speaking devil idea make state recordlike object fixed keys eg specify keys initial state never add extra keys ensures type stability type systems vms also ensures explicitly define initial descriptive value", "d": "1/2015"}, {"body": "fixed code bit work okay javascript var testcase reactcreateclass render function var options eisenhower map function x return", "d": "1/2015"}, {"body": "nt actually thing example entirely legal occasionally useful two different descriptive text placeholder match one placeholder longer selectable", "d": "1/2015"}, {"body": "say order control without subtle failure cases exist html selection actually needs occur rather", "d": "1/2015"}, {"body": "descriptive text give option attribute used set like", "d": "1/2015"}, {"body": "oh smile indeed solve problem thank cody still feel like possible documented may confuse others longer necessity far understand however still behavioral contrast html seems mildly undesirable", "d": "1/2015"}, {"body": "yeah think error aggressive catching things loosened restriction bit probably still tight commit nt going merged anyway workaround using directly invoke reactcreateelement bypasses jsx transformations since standard javascript put squiggly brackets jsx admittedly ideal error going removed soon anyway temporary migration hack cc sebmarkbage", "d": "1/2015"}, {"body": "using makes sense took quicker way since case static terms code svg idea error removed though also idea like namespace", "d": "1/2015"}, {"body": "idea error removed though think deprecations usually kept one version birdie whispered ear might come around early february guarantees", "d": "1/2015"}, {"body": "gaearon cool wait thanks jsfb keep issue open till required code merged released", "d": "1/2015"}, {"body": "needed error one version since used work different semantic meaning nt want silently swap semantics versions break one reenable different semantics", "d": "1/2015"}, {"body": "sounds good sebmarkbage leave issue open till comes go ahead close", "d": "1/2015"}, {"body": "let leave open jsfb lands pr master fix", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "one reasons added react may load immediately many tools wants notified react loaded available might also multiple reacts single page least multiple iframes idea tools override chain hook running devtools react loaded", "d": "1/2015"}, {"body": "chaining would cool nt work way devtools hook ran ca nt inject called somehow moreover devtools define nonwriteable way change hook api explicitly support chaining", "d": "1/2015"}, {"body": "think part makes clear happens dom updated postrender invoked immediately updating occurs method called initial render use opportunity operate dom component updated however overall agree descriptive visual lifecycle explanation would welcome", "d": "1/2015"}, {"body": "clear enough though react good job making sure normally nt work dom case really need explicit text says use opportunity operate dom finished without still entirely possible offering way mess dom updates subsequent render calls worked", "d": "1/2015"}, {"body": "finished would nt entirely correct though nt anything per se builds virtual dom tree", "d": "1/2015"}, {"body": "componentdidupdate componentdidmount always called dom updated update docs want send pull request", "d": "1/2015"}, {"body": "read cla carefully file prs mean time clarification deem addresses issue fine", "d": "1/2015"}, {"body": "pomax fact lets operate updated dom implies postrender", "d": "1/2015"}, {"body": "zeusdeux sure love know get actual words used text rather text read paired knowledge react case three people went dom updates sweet let change text longer implied explicit new users nt scratch head going mean updated tutorials mostly talk updating sense state props changing text also talks working dom nt clear enough", "d": "1/2015"}, {"body": "pomax looks like pr material", "d": "1/2015"}, {"body": "indeed filing one read cla issues clas filing issue instead hopefully people working code find opening docs file github hitting edit dropping much work", "d": "1/2015"}, {"body": "sure formset perhaps meant fieldset stupid let know reopen", "d": "1/2015"}, {"body": "nope totally brainfart could nt remember fieldset cheers", "d": "1/2015"}, {"body": "done", "d": "1/2015"}, {"body": "cc zpao", "d": "1/2015"}, {"body": "cc spicyj", "d": "1/2015"}, {"body": "updated", "d": "1/2015"}, {"body": "mixin mechanisms yui widget extension rickbeerendonk proposed reasonable", "d": "1/2015"}, {"body": "gaearon used constructing purposes used destructing constructed component builds something mixin already constructed removed mixin additions removed destructing reverse order constructing", "d": "1/2015"}, {"body": "mentioned briefly understand correctly mentioning posterity", "d": "1/2015"}, {"body": "hmm opted deterministic ordering calls instead special casing specific lifecycle methods see totally get coming consider cc yungsters originally proposed", "d": "1/2015"}, {"body": "clarify point protecting behaving differently", "d": "1/2015"}, {"body": "explicitly say documentation goal guard setstate right nt work cases", "d": "1/2015"}, {"body": "question point adds lot boilerplate possible build check unless call expensive nt see advantage making developer explicitly check time", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "yeah check rather tedious imo rather returning boolean could nt", "d": "1/2015"}, {"body": "however since would always use would see use sure need replace function entirely either way work fix issue", "d": "1/2015"}, {"body": "imagine setstatesafe would use internal logic determine safe rather using ismounted could even fail silently rather throwing error like currently might use case unsafe setstate ca nt think one certainly unlikely case", "d": "1/2015"}, {"body": "think general react pattern blowing face use wrong case point setstate component mounted plenty others general good however cases know would nice suppress errors would see distinction used component known mounted probably eg handlers etc asynchronous callbacks timer ajax call etc", "d": "1/2015"}, {"body": "sbrandwoo understanding supposed use componentwillunmount clean timers cancel async requests etc failure cleanup often code smell indicates memory leak even severe bug said case asynchronous callback easy imagine would easier ignore update rather attempt cancel callback ismounted could come handy guard component unmounted think effectively dead nt think remounted least opaque prerendered components supported really nt reason update anymore would strongly imply bug said nt see could nt set state unmounted component expected behavior would effectively noop intuition would remove error check make setstate forceupdate valid time maybe warning findbugs turned suspect sebmarkbage strong opinions topic", "d": "1/2015"}, {"body": "jsfb provide concrete example use case timer component counts seconds one method create interval another clear interval call method clear interval tick componentwillunmount first case want second ca nt way know know whether safe within method without passing parameter", "d": "1/2015"}, {"body": "checks see function validatelifecycleonreplacestate instance reactcompositecomponentjs wrote mixin due limited access internals happy result", "d": "1/2015"}, {"body": "yea reason error exist enforcing properly clean components could well ignore value think likely make warning least make sure nt break reconciliation throws would like deprecate really used escape bypass error error help easiest way avoid error add check circumvents whole purpose error first place fixing root problem know tend take shortcuts whenever practice go unfixed three separate scenarios play sometimes asynchronously times synchronously calling method might set state generally really bad idea race condition act differently depending timing system testing wo nt reveal scenarios end user hit write completely immutable style bad still considered bad practice cached values would like use instead causing two renders least build separate synchronous api eg getinitialstate better violating expectations promise async callback additionally current server rendering model best practice trigger async sideeffects since fire client however mostly nonissue solved since currently still allowed componentwillmount setstate componentwillunmount way unify resetting values clearing asynchronous callbacks pattern seems bit unnecessary unmounting reaching completion two different concepts usually different code paths even thing might worth separating make refactoring easier one changes nt see major issue even need error production could warn dev nt suffer consequences could even drop warning however question commonly mistake legit pattern legit pattern warn since warnings meant cleaned excessive warnings creates apathy however even legit warn anyway majority case mistake sure could go either way nt think common mistake sure calling setstate component completely unmounted strong indication asynchronous callback nt properly cleaned unfortunately mainstream js apis makes easy avoid cleaning hanging asynchronous callbacks one callback nt big deal however callback hangs objects intermediate callbacks promises subscriptions alot components quickly run memory issues case death thousand cuts always reason avoid complexity cleanup logic end convincing ok special case run gc memory issues blame react slow especially critical mobile devices memory issues cause browser crash two types callbacks infinite long living callbacks event handlers fire multiple times also single fire callbacks promises promises bad since resolve cleaned however also live long time eg data requests sometimes long timeouts handle lowlatencybandwidth environments example second timeout also example long living promise components frequently unmount remount accumulate lot hanging promises finally crash therefore really bothers js community adopted promises scale since nt come cleanup mechanism however pragmatic point view probably allow pattern work since promises common make difficult clean warned big issue ca nt really tell callback coming promise long living event failure cleanup long living event common dangerous mistake prevent mistake happening even current callstack coming promise guarantee promise could fired persistent event subscription called setstate eg flux store ultimately think solution build support promises state way easily make exception ignore warning promise resolves late also build support observables make easy get cleanup free could easily ignore setstate calls need another way ensure making common dangerous mistakes", "d": "1/2015"}, {"body": "sebmarkbage thanks points think position react police enforcing good practices subjective opinion blowing app throwing hard errors imo warning would good enough thank consideration", "d": "1/2015"}, {"body": "shubik react already fails pretty softly bunch places believe fatal complicated balance making abundantly clear developer exactly whenwhere things go wrong vs failing quietly agree sebmarkbage need way ensure developers making common dangerous mistakes provide escape hatches like ismounted developers know said intuition would setting state unmounted component would analogous noop tend favor removing error", "d": "1/2015"}, {"body": "jsfb completely agree ideally would ignore setstate unmounted component given log level print respective warning would expect hard error library internal error situation expected although desirable opinion use case", "d": "1/2015"}, {"body": "probably make warning however note treat react warnings errors except different code path error case ie strive never warnings code base even warning fully supported use case risk breaking would like able fully support use case api nt know distinguish clearly bad case hanging callback valid opinion pattern", "d": "1/2015"}, {"body": "sebmarkbage async xhr bad case also common case probably common timeouts intervals commenters talked hand others pointed forced check ismounted every setstate make sure react never errors said main argument makes sense throw error internal error react eg using wrong arguments react methods etc executing async callback case thanks lot time dialog us", "d": "1/2015"}, {"body": "common case nonreact eg event handlers although unbind still seem come calling fails without guard", "d": "1/2015"}, {"body": "gaearon sounds like bug either code react case able reproduce take look", "d": "1/2015"}, {"body": "sebmarkbage yeah see extract", "d": "1/2015"}, {"body": "mteichtahl wanted checkin regarding issue nt heard anything days mean got working believe bug react provide simple example demonstrating issue", "d": "1/2015"}, {"body": "jim sorry forgot close nt bug forgot enable harmony transpiler close sent iphone jan jim notifications githubcom wrote mteichtahl wanted checkin regarding issue nt heard anything days mean got working believe bug react provide simple example demonstrating issue reply email directly view github", "d": "1/2015"}, {"body": "enabling harmony transpiler fixed issue mteichtahl closing bug thanks good luck building app", "d": "1/2015"}, {"body": "attributes need set element injection order take effect also underlying issue react nt let set unknownunrecognized attributes perhaps duplicate", "d": "1/2015"}, {"body": "online react compiler seems use instead", "d": "1/2015"}, {"body": "easy reconstruct ids client render react go way like pr entire rendered tree would updated reconstructed first client render may may bit perf issue", "d": "1/2015"}, {"body": "syranide nice", "d": "1/2015"}, {"body": "spicyj sticking casesensitive makes sense especially svgtags actually casing", "d": "1/2015"}, {"body": "rickwong fastclick nt work react react faux events wish support tho include click helper mixin everywhere kinda gross", "d": "1/2015"}, {"body": "odd impression fastclick works properly react", "d": "1/2015"}, {"body": "spicyj people run working asking around everyone hacks around", "d": "1/2015"}, {"body": "hey zpao newbie happy help willing provide bit direction willing improve consistency tests", "d": "1/2015"}, {"body": "awesome sorry delay getting back though brought actually related testing warning messages bunch places set use assert calls wrap everything tryfinally reset consolewarn original jasmine built use bunch places thing less crazy way may patterns like consolewarn one thinking filed", "d": "1/2015"}, {"body": "sobering going take one could", "d": "1/2015"}, {"body": "kevinold feel free take already done", "d": "1/2015"}, {"body": "deciding write jsx jsx nt support namespace attribute value even transform ca nt namespace attribute value reason ca nt transform", "d": "1/2015"}, {"body": "afaik namespaced attributes need support approach makes sense think zpao", "d": "1/2015"}, {"body": "confused nt supposed working since release notes state lower case tag names always treated html tags upper case tag names always treated composite components yet try render getting linked gist also gives impression work", "d": "1/2015"}, {"body": "pekeler fixed", "d": "1/2015"}, {"body": "great thanks andrewrota", "d": "1/2015"}, {"body": "beginner web developer windows might get discouraged thought install python middle tutorial mentioning could help plus newer nodejs developers might excited discover package", "d": "1/2015"}, {"body": "solution suggested qingyun work used following snippet require scriptsreactbundlejs browser showed following code appjsx file got following warning windows console warning provided prop form field without handl er render readonly field field mutable use otherwise set either check render method using defaultvalue instead value solution however used placeholder instead value also worked actually appjsx file used routing following way postlist require componentspostlistjsx command prompt got warning message email input element however use attribute inside postlistjsx get warning message fields become readonly", "d": "1/2015"}, {"body": "maybe want try directly tag files loaded tag running different contexts guess problem caused difference context using load js files works", "d": "1/2015"}, {"body": "qingyun goes said need replace wrong got error", "d": "1/2015"}, {"body": "plain html file error message shows replaced put jsx file", "d": "1/2015"}, {"body": "qingyun yes file used files browserified", "d": "1/2015"}, {"body": "use directly js code seems jsx compiler escape js code tag text inside mean using use load root js file load js files use well js files loaded running context node instead webkit", "d": "1/2015"}, {"body": "qingyun react files ones browserified client side code use ask write files files avoid browserifying", "d": "1/2015"}, {"body": "problem caused using different contexts work fine nt use could show original error message guess maybe different problem mine", "d": "1/2015"}, {"body": "qingyun already shown require one inside tag wish use solution", "d": "1/2015"}, {"body": "think talking two different problems jsx files packed one single file nt need use course nt need face problem caused using two different contexts problem nt know nt load directly main html file like really want write js code tag rendered react think dangerouslysetinnerhtml want", "d": "1/2015"}, {"body": "ok see sounds like uses instead nt failing hard however think pretty reasonable us make assumption uses protect check mimicking browser environment something like nodewebkit using library made run browser add globals would expect actually little bit surprised nodewebkit nt see check could perhaps bit restrictive maybe add check nt think really worth protecting every potentially different environment", "d": "1/2015"}, {"body": "recently noticed severe issues csstransitiongroup android chrome attempted make reduced test case surprise found another issue exists browsers original android chrome issue nt trigger transitions triggering almost ever even single item issue reproduceable browsers test case codepen everything fine stuff relatively slow pace start hitting stuff browsers begin either trigger transitionend event react react fails notice event correctly end result elements remain dom longer exist depends lot browser easily issue triggers seems well make fail keep enter long enough firefox nt well chrome worst easy make fail even regular clicking notice clear design flaw made please tell ca nt see big issue seems like better use csstransitiongroup due bugginess lots elements nt good fallback fails receive transitionend event update fixed one small array push issue seems work perfectly browsers still fail though", "d": "1/2015"}, {"body": "mentioned elsewhere worth repeating timeouttransitiongroup much stable nt rely buggy event never mind jquery dependency tweak use yes bit extra hassle maintain matching durations css components worth stability hopefully matures much better transition group", "d": "1/2015"}, {"body": "think effectively duplicate going close duplicate please reopen incorrect action", "d": "1/2015"}, {"body": "also hit problem however stacktraces give clue happened meaningful error messages production", "d": "1/2015"}, {"body": "thanks", "d": "1/2015"}, {"body": "anyone else cares also found another way manage create two components use mixin component top level element inheriting component example new pattern javascript var button reactcreateclass getdefaultprops function return buttontext click buttonaction function noop render function return var custombutton reactcreateclass getdefaultprops function return buttontext text render function return somemethod function alert hey clicked seems might pretty decent solution like elegance mixins composition better pattern overall inheritance frameworks restriction think decent way go thisi created components way found pretty powerful naive examples like one one major downside see verbosity code especially since almost boilerplate lastly actually shared methods properties still using mixins many modular components made mixins single component", "d": "1/2015"}, {"body": "pretty much also find pretty powerful also combination", "d": "1/2015"}, {"body": "gaearon yeah children great despite methods think issue still valid confusing nt work way start", "d": "1/2015"}, {"body": "problem also occurs value extended jsfiddle show selectproblem", "d": "1/2015"}, {"body": "thought problem turns container removed animating node reinserted dom try breaking subtree modifications node removal find right node get removed several transitions works fine long new state nt require accidentally trigger modification dom corresponding animating node fact happening state nt require dom modifications specific part tree try adding key element containing transition group hope helps", "d": "1/2015"}, {"body": "try breaking subtree modifications node removal find right node get removed useful tool debugging reconciliation weirdness", "d": "1/2015"}, {"body": "seems use rewire replace way var rewire require rewire var mockcomponent require mockcomponentjsx var targetcomponent rewire targetcomponentjsx targetcomponentset requiredcomponent mockcomponent however hope depend allinone testing tool", "d": "1/2015"}, {"body": "since getting deprecated closing new version nt require filter lives", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "yeah makes sound actually use touch events", "d": "1/2015"}, {"body": "zpao ygrenzinger wasam problem put nashornreactfail minimal test case reproduce think nashorn react issue debugging stuff pain ass nt know sure find workaround tl dr certain conditions using react context error happens adding differently named nonlifecycle methods parent child seems make work", "d": "1/2015"}, {"body": "zertosh thanks repro cc jsfb know java background could look", "d": "1/2015"}, {"body": "zertosh yes thank great repo zpao confirm fails using npmreact hacked internal build error went away means likely either issue npm build process issue fixed master heisenbug bug nashorn npmbuild see happens think able close one", "d": "1/2015"}, {"body": "shimmed internal build nt work since sounds like broken least since appears resolved going close bug resolved zertosh may worth checkingbuilding master using version react run issue let reopen issue dig", "d": "1/2015"}, {"body": "thanks jsfb even working fine seems stable enough going keep using one nashorn apps see catch anything else", "d": "1/2015"}, {"body": "apparently onchange nt trigger file input loses focus ie lt nothing react canshould fix closing", "d": "1/2015"}, {"body": "thanks documenting issue confused got point tutorial encountered error console simply reordering two sections fixed perfectly submitted pull request change let know anything else help", "d": "1/2015"}, {"body": "way involving transpiller achieve goal possible change signature classset take object array like little ugly agree solves problem also possible make function cx polymorphic change backward compatible", "d": "1/2015"}, {"body": "unrelated react jsx transform already transpiler somewhat slower react transform unresolved minor jsx parser bug really happy going back", "d": "1/2015"}, {"body": "react support trigger method even better support custom event bubble like would easier parentchild management menumenuitem component", "d": "1/2015"}, {"body": "looks like nt really used much may able remove completely", "d": "1/2015"}, {"body": "made pull request fix selfclosing tags boolean attributes still leaves features implemented including xml namespaces required standalone documents valid polyglot html raw text elements tags xml lang attributes comments containing sequence extra whitespace added html elements pre textarea etc definitive reference generate markup parses parsing modes polyglot markup robust profile vocabulary long run able generate nonhtml vocabularies would nice standalone svg documents docbook atom etc", "d": "1/2015"}, {"body": "ping resolved uglifyjsmaster least react go way ask though", "d": "1/2015"}, {"body": "safari desktop ios several issues css transition first place anyone found whether react animation specific issue safari issue", "d": "1/2015"}, {"body": "rhobot think caused change bug recent version coreanimation safari uses hood wickynilliams said fix moving declaration fiddle works safari well older browsers", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "fyi faking shilpan mentioned may harder seems apparently native event fire transition ends offscreen case element may better react handle native behavior supported browsers let us handle custom code old browsers", "d": "1/2015"}, {"body": "update regarding feature", "d": "1/2015"}, {"body": "possibly related example invariant violation errors sometimes strange rerendering behavior discovered added whitespace children experience specifically table row jsx bug something add jsx gotchas", "d": "1/2015"}, {"body": "pain well particularly painful designer matter fact kind nice component could output node therefore nodelist fragment instead element", "d": "1/2015"}, {"body": "saying advocating returning multiple children component love methods extract js render function return rendersomething return lt gt thispropstitle thispropssubtitle amp amp thispropssubtitle probably shut use", "d": "1/2015"}, {"body": "gaearon already though need return array bit cumbersome though yes buuuuut work around hacked component translated array overloaded could also assume want avoid hacks edit bad overloaded", "d": "1/2015"}, {"body": "problem arrays trip designer need commas explicit keys", "d": "1/2015"}, {"body": "gaearon yeah avoid commas using either two workarounds find either acceptable mean explicit keys", "d": "1/2015"}, {"body": "use array syntax need specify element hard feels awkward know never change", "d": "1/2015"}, {"body": "gaearon ah yes choose mentally ignore warning really want avoid avoid edit although obviously ca nt use adjacent children could use flattening helper yeah", "d": "1/2015"}, {"body": "updates might blessed go master bucketful potential use cases love able start playing around see understanding still unstable", "d": "1/2015"}, {"body": "agreed use case animation library bugs roll shoddy version would nice know current thoughts release schedule", "d": "1/2015"}, {"body": "serverside see reason everyone ca nt share single flux store jsfb everything seen points stores fully synchronous actually asynchronous action action creator eventually triggers another action causes store update without pieces instanced per request appears stores act like serving every user find way determine done environment ie finish request ensure stores nt holding references data done ensuring hold client use alternative mechanism change events getting data source request could clarify get around thinking simple service modules export functions communicate callbackspromises rather flux", "d": "1/2015"}, {"body": "brigand yes singletons without drawbacks thus motivation pass flux stores context variables gt thus desire implement context variables interpretation correct use singleton store server side need stores act like serving every user may likely end different serverside store implementation conforming interface backed directly database since cost tradeoffs entirely different server side security enforcement policy inherently different etc backed database definition source truth go straight database therefore nt need worry tracking done state worry change events sacrifice little isomorphism gain simplicity implementation ie nt need track done state nt dealing change events serverside may wanted anyway securityperf reasons intent hijack thread merely point alternatives flux stores use singleton model long store implementations conform multiuser interface instead singleuser interface said implementing context variables think may valuable situations advocating one solution solutions tradeoffs natew even switch parent based contexts number design decisions surrounding contexts still need figure likely take us time feel comfortable publishing supported feature", "d": "1/2015"}, {"body": "thank clarification makes lot sense see simplify things", "d": "1/2015"}, {"body": "nt ton add tell story added around hidden input first put nonactive classes read docs sass newpass iconheight height iconheight overflowy hidden amp slideenter maxheight transition maxheight easeinout amp slideleave maxheight iconheight transition maxheight easeinout really old ipad gave weird jump end animation happily could reproduce emulator tapped add barcode would open jump closed jump open hidden autofocused input supposed take input barcode scanner found thread tried moving stuff classes sass newpass iconheight height iconheight overflowy hidden amp slideenter maxheight amp slideleave maxheight iconheight everything cake", "d": "1/2015"}, {"body": "spicyj right webpack smart enough strip dead requires strips dead code paths entirely build preminified code instead get much nicer", "d": "1/2015"}, {"body": "wow totally missed response zpao pushed updated version uses instead nt problem quick time benchmark vs extra uglify pass time difference negligible though able shave sec turning compress options first pass since dead code removal matters sec improvement prob less faster machines nt worth pring changes grunt task allow passing options transforms disappointed real killer", "d": "1/2015"}, {"body": "hi guys issue referenced looks reactjsreactrails related one input welcome", "d": "1/2015"}, {"body": "would really cool able verify right react component passed property docs little confusing looks like validating right react message component getting passed", "d": "1/2015"}, {"body": "yea current work around something like think need broader solution testing specific types usually want correspond specific interface actual implementation flexible certain set props defined", "d": "1/2015"}, {"body": "closing since deprecating new allocfree version lives", "d": "1/2015"}, {"body": "light firstclass refs think need wontfix thanks kimagure sending pr though appreciate even though going end taking", "d": "1/2015"}, {"body": "closing since deprecating new allocfree version lives", "d": "1/2015"}, {"body": "fantastic", "d": "1/2015"}, {"body": "huge fan idea definitely want enforce project tried manually freezing props objects various react internals end cloning object thereby nullifying freeze would nice able simply optin frozen props", "d": "1/2015"}, {"body": "davidtheclark using freeze problem note freezing recursive freeze directly actually freeze properties root object far know object recreated component render btw use", "d": "1/2015"}, {"body": "nt realize freeze nt recursive thanks pointing", "d": "1/2015"}, {"body": "thanks slorber deep freezing nt issue react internals cloning object passing freezing object within component passed component spread factory situation referring pass frozen object become props spread jsx element factory exposed component unfrozen see two places probably cause parameter object passed passedinpropsobject intended become component actually creates new object variable assigned properties becomes component original frozen object recursively frozen passedinpropsobject comes available component methods componentpropsobject new unfrozen object properties original object passed one passedinprops named array frozen componentprop would frozen array reference passed cloned object object longer frozen primitive properties passed still mutated without throwing error strict mode make sense essentially thing happens passing jsx spread attributes spread implementation creates new object assigned properties object pass way patching simple mixin refreezing props within component gone mentioned nt deep freeze object deep froze already properties deeply frozen still references sorry long course keep using course kind pain apply mixin every component bad others share issue think two ways solution could built library passedinprops cloned eg places mentioned check whether passedinprops frozen freeze cloned object well kind strict mode like slorber suggests would freeze component whether passed frozen", "d": "1/2015"}, {"body": "davidtheclark make short understand point freezing object injecting props throw error try modify object inside component prevent modifying object reference props object props always new unfrozen object mean ca nt still yes would nice react let use automatically froze properties maybe build component factory like framework atomreact automatically include mixins everywhere however problem jsx able infer component anymore", "d": "1/2015"}, {"body": "probably missing point freeze get want freeze deeper objects might references elsewhere since built react copying props passed way could mutated write something like inside component pass external method doubt first use case worth protecting really hard write something like accident second use case maybe think missing something", "d": "1/2015"}, {"body": "try concise clear slorber think page truly frozen could nt say without throwing error consider suggestion custom factory good idea gaearon reasons want freeze take full advantage unidirectional flow react allows nt want anyone working code mutating properties come topdown data stores definitely want inadvertently mutate contents stores reference also want component farther chain reflect exactly store times possibilities raise mutating passing another function real concerns think first worth protecting always worth automatically enforcing standard want uphold rather trusting everybody writing reviewing code manually catch flaw seems reason exists enforce way want object used right second pretty common source bugs think three ways pass props regular jsx attributes passed one time full object passed jsx spread attributes full object passed factory could addressed react check whether object passed frozen freeze correspondingly would make sure passed frozen objects every time want frozen props every time three could addressed mixin like freezes props componentlevel would make sure included every time reactstrictmode freezes props everywhere think none changes significant reactstrictmode optin would nt force anybody strict already change way use react", "d": "1/2015"}, {"body": "react warn automatically mutate thisprops", "d": "1/2015"}, {"body": "nice", "d": "1/2015"}, {"body": "sometimes take look might solve issues", "d": "1/2015"}, {"body": "textpath complete svg support general", "d": "1/2015"}, {"body": "svg fully supported decent workaround tell react svg attributes pass render declare elements need explicitly example accessed like var domproperty require reactlibdomproperty xlink href standardlysupported svg attribute tell react ok dompropertyinjectioninjectdompropertyconfig iscustomattribute function attributename return attributename xlink href var svgbutton reactcreateclass render function render var use reactcreateelement use xlink href thispropsicon return use thispropslabel", "d": "1/2015"}, {"body": "jeffkole careful react still call setattribute setattributens attribute changes update probably wo nt work properly", "d": "1/2015"}, {"body": "spicyj nt see namespace support react ie call codebase suggestion proper way set attribute namespace", "d": "1/2015"}, {"body": "nt figured namespaced attributes work nt support right sorry", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "little late discussion found easy solution jquery magic modify onchange monitor empty strings validity false manually set input value", "d": "1/2015"}, {"body": "seems like pretty major bug idled months anyone maintaining animation stuff", "d": "1/2015"}, {"body": "appsforartists think big plan drop dependency transitionend animations use js everything long term chenglou experimenting", "d": "1/2015"}, {"body": "hi error message mounted react component different div element different ids trying different components different things", "d": "1/2015"}, {"body": "seems classes actively worked presume targeted anyone confirm current plan classes mixins release assuming react core ship magic somehow handle mixins like today mixin functionality need handled outside react something along lines op shipped", "d": "1/2015"}, {"body": "yes scheduled release ship mixin helper requires support unusual current transpilers need roll use", "d": "1/2015"}, {"body": "proposal providing feature parity current react classes encouraged pattern sebmarkbage still case reactcreateclass still preferred way things nt think really illustrates opinion maybe lot confusion", "d": "1/2015"}, {"body": "rtorr moving towards native classes modern way things said many people including large portion facebook continue use reactcreateclass time options supported near term", "d": "1/2015"}, {"body": "sebmarkbage updating refs get called every rerender maybe even shouldcomponentupdate returns false", "d": "1/2015"}, {"body": "changes", "d": "1/2015"}, {"body": "render render top ref never called", "d": "1/2015"}, {"body": "would change ref like change ref name called", "d": "1/2015"}, {"body": "conventional usage though different function time yeah", "d": "1/2015"}, {"body": "good point nt think maybe fire goes null function", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "issue going fixed", "d": "1/2015"}, {"body": "ninjabiscuit suggested workaround one relies timeout rather assuming browser fire event browsers fire event properly probably thing", "d": "1/2015"}, {"body": "bradens suggested works alright less maintainable solution nt require extra parameters", "d": "1/2015"}, {"body": "good solution case solved", "d": "1/2015"}, {"body": "manually applying patch pulled core", "d": "1/2015"}, {"body": "using react render complete documents serving", "d": "1/2015"}, {"body": "adjavaherian nt need", "d": "1/2015"}, {"body": "actually think react mount higher body clientside caes want react render iframe current best breed iframe generation want react control iframe content seems largely impossible moment also dangerouslysetinnerhtml cause browser run js string also react diffing dangerous setting full replace would cause entire document iframe stutter update resources reload browsers set rather diffupdate think sure diffing would work sanboxed js running iframe though also react grouping component nt actually anything mount components kind silent component could nt seem see one probably learn internal architecture guess", "d": "1/2015"}, {"body": "also react grouping component nt actually anything mount components kind silent component could nt seem see one probably learn internal architecture guess nt know much saw links", "d": "1/2015"}, {"body": "thanks gaearon found nodelist glossary subsequent last comment yeah read zendesk article also implemented stuff degree large holes comes stuff body like styles script etc whole approach feels like big hackaround fighting code hence thread", "d": "1/2015"}, {"body": "movement wyuenho petehunt", "d": "1/2015"}, {"body": "far understand choose use extension react components forced explicitly specify extension every statement throughout code base eg instead order able navigate files aka navigate source primary reason currently used default reactjs starter kit", "d": "1/2015"}, {"body": "koistya depends bundler using webpack extensions configured explicitly resolveextensions pretty sure browserify allows something similar", "d": "1/2015"}, {"body": "oh get point nt really use ide regardless think issues filed ides use jsx ide already knowledge eg parse much expect also follow jsx imo", "d": "1/2015"}, {"body": "feels suspiciously like user agent string conundrum jsx distinctly javascript put files anyway tools use nt conveniently look propagate lie convenience", "d": "1/2015"}, {"body": "though break people current expectations could give error files found extension nt explicitly set say error nonzero exit code ci servers install latest version implicitly fail something like jsx found jsx files default extension changed js jsx restore old behavior add following command x js suppress error explicitly set extension x jsx information see", "d": "1/2015"}, {"body": "related", "d": "1/2015"}, {"body": "going close big deal obviously nt moving fast", "d": "1/2015"}, {"body": "anything new issue currently thinking making step towards using typescript addition react make software bulletproof would great possibility writing jsx ts since using plain js jsx option good one", "d": "1/2015"}, {"body": "fwiw fine using dom factory functions typescript", "d": "1/2015"}, {"body": "davidreher believe superseded flow supports typescript jsx syntax", "d": "1/2015"}, {"body": "unfortunately think need leave typescript team make decision want support jsx since syntax conflicts jsx using typescript without jsx still possible expected wo nt work quite well flow least quickly since flow developed intent support react concepts", "d": "1/2015"}, {"body": "since syntax conflicts jsx ones specifically suppose type casting nt flow intend syntax parity typescript note typescript calls type assertions casting generally implies runtime safety", "d": "1/2015"}, {"body": "basart flow intended work jsjsxoptional type annotations ideal case flow nt need type annotations plain javascript possibly jsx typescript adds lot stuff nt js things specific typescript fri jan basarat ali syed wrote since syntax conflicts jsx ones specifically suppose type casting nt flow intend syntax parity typescript note typescript calls type assertions casting generally implies runtime safety reply email directly view github", "d": "1/2015"}, {"body": "basarat yea type assertions conflicts flow nt support type assertions since attempts sound typescript brigand quite correct flow works well without type annotations definitely intents use type annotations three reasons documentation intent way catch mistakes would pass type inference nt intended work way intentionally limit api surface area even would currently work wider set inputs ie defining contract way speed type analysis large code bases enabling parallelized analysis flow aims unify typescript makes sense nt attempt support syntaxconcepts diverge areas", "d": "1/2015"}, {"body": "thanks clarifying fri jan pm sebastian markb\u00e5ge lt notifications githubcom wrote basarat yea type assertions conflicts flow nt support type assertions since attempts sound typescript brigand quite correct flow works well without type annotations definitely intents use type annotations three reasons documentation intent way catch mistakes would pass type inference nt intended work way intentionally limit api surface area even would currently work wider set inputs ie defining contract way speed type analysis large code bases enabling parallelized analysis flow aims unify typescript makes sense doesnt attempt support syntaxconcepts diverge areas reply email directly view github", "d": "1/2015"}, {"body": "typescript parser working typescript jsx cyrusnajmabadi method works fine never time finish properly idea pretty simple encounter tag try parse jsx tag parsing error ambiguous case attribute rewind parser state try parse type assertion optimal often report inadequate error least allows parse typescript constructs jsx ones time try finish", "d": "1/2015"}, {"body": "yeah pretty much brief demo early versions shows tags type asserts distinguished completion support etc decided give since typescript wasis breaking lot inner stuff order move implement final decision suspend caused release flow superseded features three worlds jsx typescript added even", "d": "1/2015"}, {"body": "rreverser sebmarkbage thanks suggestion since windows platform flow actually option moment thanks sharing suggestions think need think different solution either work jsx views ts rest nt make use jsx", "d": "1/2015"}, {"body": "davidreher honestly still think good solution would create ts fork jsx support problem takes time time nt actually rreverser tsx could good base", "d": "1/2015"}, {"body": "davidreher upcoming talk reactjs conf addressing issue using hack described earlier issue basically jsx ts preprocessing step posted example gulp conference show webpack ts fork jsx support would ideal sure creating one beyond realm average coders thus far nobody released one much less stable productionready one happens hope believe eventually believe hack works wonders average need get project done deadline developer edit realized fdecampredon fact release ts fork", "d": "1/2015"}, {"body": "jbrantly release anything sorry disappoint", "d": "1/2015"}, {"body": "fdecampredon meant release may strong word meant make available publicly", "d": "1/2015"}, {"body": "frag would absolutely awesome", "d": "1/2015"}, {"body": "would love see reactaddons build deprecated browserify builds mad special sauce browserifybased tools replicate mochify frustrating situation consistent entrance point react reactaddons would reduce conflict turmoil", "d": "1/2015"}, {"body": "pomax think found context mixin nt quite behave expected subcomponent click action ends removing component dom sourceparentnode loop breaks makes way back actual parent component case dropdown list items x icons delete items dropdown list whenever delete item outside click registered dropdown close", "d": "1/2015"}, {"body": "interesting jsbin drop maybe bit iterative improvement mixin robust enough npm publish reactonclickoutside like", "d": "1/2015"}, {"body": "pomax trying manually reinvent event propagation loop used example nt need check event belongs specific element event stopped bubbles handler listening document", "d": "1/2015"}, {"body": "willdady take available mixin form anything point people go solved problem even react yet", "d": "1/2015"}, {"body": "hey guys something new far thinking subject something simpler comes component contained class instance click something else nt sounds good maybe css resolve problem confirm selector us", "d": "1/2015"}, {"body": "even option one use would rely implementation detail without detail part react api also relies uses css classes functional roles literally reason like react much nt rely query selecting everything try publish reactonclickoutside mixin npm today based code mixed improvement willdady pointed", "d": "1/2015"}, {"body": "layered approach works fine normally use sometimes also want fade layer make dark instead transparent eg modals layer natural imo solving problem yes presumes dropdown top stacking context think making problems try keep somewhere else example dropdowns lived somewhere else would clipped parents also woes good luck mistake regretted really really want declare dropdown props etc inside components deep hierarchy always use portals dropdown still physically hosted top seems like weird thing want clicks effect handler says clicking outside context menu hide context menu execute actions underneath even button would possible ran actual handlers could stop immediate propagation feels like hack think wrong solution problem embrace layers note flux makes super easy trigger actions affect something top", "d": "1/2015"}, {"body": "great purposes also seems exclusively intended dealing modals level specialization nt want abuse genuine need listen clicks outside element behaviour nothing modal dialogs slightest like blur behaviour component level switching element editor content etc", "d": "1/2015"}, {"body": "pomax good point certainly using css fast amp easy way go worked right nt make sense unleash approach since using powerfulness react removed completely outsideclick approach app waiting mixin meanwhile users press close component lol", "d": "1/2015"}, {"body": "yeah see point use layers anything global single instance top eg modal context menu alert sidebar case one dimming layer listens decides whether show overlay transparent cases rare cases really need click outside component level ca nt use layers put component node handler set handler separately solves problem described nt even think needs mixin little code still explicit js componentdidmount function documentbodyaddeventlistener click thishandlebodyclick componentwillunmount function documentbodyremoveeventlistener click thishandlebodyclick render function return handleclick function e epreventpropagation handlebodyclick function something", "d": "1/2015"}, {"body": "gearon think mixin dry reachable code snippet also solution wise fresh man give shot soonish come back results yet still waiting pomax mixin still meant keep promise", "d": "1/2015"}, {"body": "promise made hours ago work day although publish run breakage issues tracked github", "d": "1/2015"}, {"body": "think mixin dry reachable code snippet kinda need forget click handler need remember attach root node like half code outside mixin anyway certainly implement loop instead rubs wrong way maybe aesthetics though boring pomax would nt better mixin stored functions private map removed automatically prevents accidental leaks amp removes need private function", "d": "1/2015"}, {"body": "point docs triggering functions automatically owning component reaches certain life cycle points happy work would nicer automatically hooked componentdidmount componentwillunmount simply binding unbinding whatever additional function routing required", "d": "1/2015"}, {"body": "need forget stoppropagation click handler thinking faced problem right lol boring thinking best fashion get done pomax kidding pressure lmao man thank far fast hell", "d": "1/2015"}, {"body": "would nicer automatically hooked componentdidmount componentwillunmount simply binding unbinding thisonclickoutside whatever additional function routing required fun part react mixins happens define mixin see example docs", "d": "1/2015"}, {"body": "excellent update mixin", "d": "1/2015"}, {"body": "updated mixin since different implementation simply add mixin define component using mixin", "d": "1/2015"}, {"body": "call convention function names convention prop names", "d": "1/2015"}, {"body": "fair point updated", "d": "1/2015"}, {"body": "never seen npm module updated much faster new record lol already using solution pomax gaearon collaborate mixin heroes hearteyescat", "d": "1/2015"}, {"body": "pretty usual first hour module push experience first hour immediate bug reports people linked", "d": "1/2015"}, {"body": "problem solved focus blur event click document dropdown lose focus hide dropdown menu", "d": "1/2015"}, {"body": "focus events click events drop disappears click outside stay open even change tabs switch outback browser application however actions cause blur events listening drop would closed two event types trigger differently", "d": "1/2015"}, {"body": "yiminghe said good idea imho nt think way mixin pomax saved lives", "d": "1/2015"}, {"body": "workaround get react fire synth onchange browser onchange range inputs", "d": "1/2015"}, {"body": "thought go ahead create pull request fix works wrapping innerhtmlsetting code execunsafelocalfunction", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "lib uses facebook fork esprima parts flow analyze js jsx abstract syntax trees generate documentation data structure optionally transform source files looked around luck finding similar existing library next step would create collection react components reactdoc provide documentation views react docs would updated static code analysis annotations less prone human error auto generate jsx supported htmlsvg elements attributes documentation currently date auto generate docs user created react components mixins property types defaults etc reactdoc components could tutorial building react components interacting documentation optionally prepend annotations documentation libs jsdoc yuidoc plugin", "d": "1/2015"}, {"body": "actually thinking flowbased documentation tool unfortunately none exist afaik still need jsdoc comment least description etc things jsdoc side note documentation nt date updated let know missing followup think idea reactdoc tool certainly interesting actually something internally fb talking pulling least proptypes handling inheritance tied specific ways write components would cool generalize could open sourced pretty tangential specific issue cc fkling anyway", "d": "1/2015"}, {"body": "ever direct resolution ticket possible missed things comments recap clear elegantly cause enter animations setting state known properties still nt see opposite effect accomplished illustrated following nonfunctional example javascript reactcreateclass getdefaultprops function return items getinitialstate function return items componentwillmount function thissetstate items thispropsitems render function return thisstateitemsmap function item index return componentwillunmount function obviously broken thissetstate items frustrating exercise trying accomplish effect complex application case one using router library flux pattern little control components one level hierarchy wishing animations possible capture perform leave animations illustrated able cut huge amount complexity ps please forgive lack write lot scala days", "d": "1/2015"}, {"body": "michaelahlers working wrapper animation libraryagnostic mostly bit messy right find free time pull see well sure brings back memories", "d": "1/2015"}, {"body": "chenglou leave dig nostalgia fuel smirk reading samples kind funny wrote enter exit transitions inadequate lot animation use cases struggling make work framework might result isolated shortterm gains bigpicture longterm losses work definitely looks several steps ahead state stream looks incredibly powerful functional programming intuitive combined tween state imagine lot sophistication ca nt accomplished purely css said looks like irvinebroque boat needing good baby step adds exit animation classes node removal css animations complete", "d": "1/2015"}, {"body": "eh sorry statestream unrelated wrapper mostly work conjunction anything else including simple change node removal", "d": "1/2015"}, {"body": "may lost bit appears similar usage pattern going apply certain css properties children based state state managed internally needs fundamentally differ think putting loosely particular case router library responsible building component tree got little control individual component mounted unmounted seeking means triggering arbitrary animation way allows transition group keep nodes dom animation done fullyencapsulated may need move state flux stores cleared effectively applies approach leave animations certain routing events", "d": "1/2015"}, {"body": "going close left open long time nt made progress apart improved error messages still hard problem solve reasonable way calling", "d": "1/2015"}, {"body": "zpao like mentioned datareactid pr possible catch immediately occurs really quite cheaply good fit dev least lines code well considering prodbehavior would stay lenient devprod inconsistency nt issue either", "d": "1/2015"}]