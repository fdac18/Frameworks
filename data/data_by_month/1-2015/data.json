[{"title": "feedback beta", "body": "one biggest pro react simple nt things nt try overly complicated things docs nt greatest explaining api fortunately nt try sprinkle much magical fairy dust eyes explains however part syntactic acid code fashion statement less clear since butchered initial state default props generic meaningless concept constructor point things time much clearer separate functions one thing makes clearer code easier follow logic even see lot want easily scannable code less code since fall trap less readable code whole concept class gain never ever instanceof components case ridiculously rare even case hand lot mixins besides constructor making everything unnecessarily awkward mixins help properties state whole class construct says mixins please create giant monolithic unmanageable class hierarchies blunt classes uses solutions inheritance extremely naive solutions asking create problems give meaning code scale horribly unmaintanable giant scrabble tree hard mix together usually involving overcomplicated solutions would necessary inherent limitations practically taboo performance codelanguages given antihardware nature practice react component need terms composition able mix functionality nt repeat code nt want repeat clarity reasons centralize code feel worthwhile benefit whole concept class originally conceived purpose along multiple inheritance able mix thing great concept failed achieve largely due engineered amount languages copypasting said failure interest pandering simple minded programmers spoonfed oogospel change current react way actually managed achieved goal easy mixingreuse code quite well within context react nt see need move system less cabable even issues fact use come might well replace keyword class snakeoil useless seems", "num": "2992", "d": "1/2015"}, {"title": "reactmountnodecache repopulated purged nodes focused unmount", "body": "unmount currently focused node repopulated purged unless specific id revisited later remain forever mostly likely due focusselection restoration phase reconciliation repro nodecache output console", "num": "2988", "d": "1/2015"}, {"title": "markdown editor function goes bounds second line", "body": "using markdown editor function react site noticed text overflows longer strings user uses space start new line strings take full line editor overflow border displaying output", "num": "2986", "d": "1/2015"}, {"title": "onclick nt fire clonewithprops", "body": "seems onclick nt fire clonewithprops check example codepen intended behavior possible workarounds", "num": "2985", "d": "1/2015"}, {"title": "cloning component using clonewithprops overriding ref warning shown", "body": "doc makes clear use clonewithprops pass ref extraprops override ref get warning get warning specific case otherwise way set ref mycomponent created", "num": "2984", "d": "1/2015"}, {"title": "allow string arguments classset", "body": "hi sometimes want statical classes toggled classes eg looks like gets ugly fast let allow idk flexible needs simple implement version would flexible would", "num": "2983", "d": "1/2015"}, {"title": "access functions", "body": "following snippet demonstrate use case trying achieve javascript var parent reactcreateclass componentdidmount function reactchildrenforeach thispropschildren function child consolelog test child render function return thispropschildren var child reactcreateclass test function consolelog test render function return child reactrender documentbody like know iterating unable get reference actual component least able figure could access child component api anyway could edit aware add ref child component use goal parent care children restrict limit way", "num": "2982", "d": "1/2015"}, {"title": "always warns invalid prop", "body": "checked react running chrome safari firefox able reproduce issue following iconjsx var icon reactcreateclass proptypes icon reactproptypesstringisrequired render function return moduleexports icon wrapperjsx var icon require iconjsx var wrapper reactcreateclass proptypes icon reactproptypesinstanceof icon isrequired render function return thispropsicon moduleexports wrapper render instance var icon get error also able reproduce issue seems like proptype checker nt working expected maybe missed something", "num": "2979", "d": "1/2015"}, {"title": "scryrendereddomcomponents return dom order", "body": "code testing component simple list initialize props result one node add another node get using dom comes results true appears returning node inserted first var commentlist reactcreateclass render function var commentnodes thispropsdatamap function text return return commentnodes var var var node testutilsrenderintodocument nodesetprops data function var comments testutilsscryrendereddomcomponentswithclass node comment consolelog comments getdomnode innerhtml prints consolelog comments getdomnode innerhtml prints", "num": "2978", "d": "1/2015"}, {"title": "docs text code snippets tiny firefox", "body": "tested firefox left chrome right firefox", "num": "2977", "d": "1/2015"}, {"title": "style expecting object unfortunate consequences", "body": "hi pretty new react trying build div requests imagescaling service backend images specific resolutions need use css imageset css value need vendor prefixes css key problem ca nt duplicate keys style object ended manually setting style attribute componentdidupdate hack get around system suggest could perhaps also expect array key value pairs could like specific example css trying modify found", "num": "2976", "d": "1/2015"}, {"title": "broken componentwill update", "body": "updating state component corresponding method lifecycle get called every time component fact always current state comparing always return true mentioned methods return correct objects previous next state", "num": "2974", "d": "1/2015"}, {"title": "support indeterminate checkbox state", "body": "chrome firefox safari ie modern browsers support notion checkbox indeterminate state set cleared using property checkbox input node set using attributes state commonly used top list tree checkboxes indicate checkboxes underneath checked behavior seems reasonably welldefined modern chrome firefox safari ie checkbox indeterminate property set checkbox renders indeterminate state regardless checked state checked state programmatically toggled clicking checkbox clears indeterminate state unfortunately little bit inconsistency chrome firefox safari clicking indeterminate checkbox clears indeterminate state also toggles checked state triggering change click event ie clears indeterminate state leaves checked state alone triggering click event react support prop checkbox inputs supported uncontrolled checkboxes via similar prop clicking indeterminate checkbox follow browser checkedtoggling behavior claims come playing jsfiddle chrome firefox safari ie", "num": "2973", "d": "1/2015"}, {"title": "lexical binding class", "body": "trying beta version noticed would bomb afaik arrow function definitions throw error nt prototype well guess ca nt used class cc sebmarkbage", "num": "2972", "d": "1/2015"}, {"title": "dangerouslysetinnerhtml nt update replaced state properly", "body": "might bug scenario following state contains default value typing overwrite default value works expected using used yes still works rather replacing state concatenates default value values problematic example", "num": "2970", "d": "1/2015"}, {"title": "reactchildrenfilter", "body": "use case wrapping nonempty children divs js render return wrapchild child index child know probably wrong kind comparison nt care return nice also need know many valid children wrapped return number children including empty children want strip", "num": "2956", "d": "1/2015"}, {"title": "onchange fires event type input", "body": "hi onchange handler also capture input events yes would like able capture onchange oninput", "num": "2955", "d": "1/2015"}, {"title": "fbme nt contain", "body": "link script tags fbme get errors browser refused execute script mime type texthtml executable strict mime type checking enabled refused execute script mime type texthtml executable strict mime type checking enabled", "num": "2954", "d": "1/2015"}, {"title": "update cycles update mstransform", "body": "use quite bit inline transforms components recently encountered transforms updated ie component mounted mounting component receive correct transform styling remains unchanged subsequent update cycles update component unique key update cycle update nokey components components static keys verified styling properties seem update fine ie opacity", "num": "2950", "d": "1/2015"}, {"title": "add korean translated docs", "body": "seeing good chinese contributors contributing starting react docs translation project react korea group soon finish enough amount docs translated translation would like send pull request guys think interested see even though mostly korean", "num": "2945", "d": "1/2015"}, {"title": "jsx build tool documentation", "body": "ran issue commandline build tool would nt build folder full files get cryptic output empty array nothing happens caused hour two confusion tried checking docs eventually read source saw uses found digging turns requires input files extension rather think might help people put short section docs integrate build short correct wrong jsx files end js jsx use compile folder full jsx files plain js comment longer required effect using browserify nt use use thoughts", "num": "2943", "d": "1/2015"}, {"title": "nt touch proptypes production mode", "body": "currently validating proptypes production mode probably wasted effort since used also means play around proptypes without fear breaking production code", "num": "2938", "d": "1/2015"}, {"title": "consider using jsonml notation reactelement", "body": "nt get excited probably wo nt work issue documenting ca nt could consider using jsonml notation reactelement would make jsx currently looks like much nicer nonjsx declaration would also align us spec almost like standard children special jsonml designed way children distinguished attributes nt really care property already merged could undo nbd one problem constantly need slice children outer array passing component become performance problem problem jsonml nt way attach custom attributes element props ie important treated differently props available component conceptually parent responsible keying element changing key affect behavior component refs also important props transferred child without affecting behavior one possible solution would wrap elements another object still ugly also means reason two types element without wrapper children also ambiguous first position attributeless element constant destructuring time need clone reason element need destructure system nested arrays ca nt distinguish nested array elements element would work enforced children always provided flat lists explicitly flattened needed eg flattening makes difficult preserve keys though allowing component receives reactelement outside need reason two different kinds abstractions use two different patterns accessing type props important react community nt diverge far", "num": "2932", "d": "1/2015"}, {"title": "click events nt fired mobile devices table rows", "body": "could missing something handler table row mobile devices wo nt fire event unless add handler event empty function fiddle comment function fiddle mobile devices wo nt actually fire handler tapping row tried safarichrome ios iphone", "num": "2931", "d": "1/2015"}, {"title": "getchildcontext called getinitialstate", "body": "think bug prevents child context dependent component state var react require react var contexttypes name reactproptypesstring class test extends reactcomponent getinitialstate return name name getchildcontext return name thisstatename render return testchildcontexttypes contexttypes consolelog reactrendertostring results", "num": "2929", "d": "1/2015"}, {"title": "properties rx observable reactlike experiments", "body": "issue used track properties features available experimental frameworks build everything around rx observable streams liftable component boundaries identified already overlap well existing projects error propagation boundaries errors propagate hierarchy completion propagation signal tell component longer change used memory cleanupcollapsing async serverside rendering transition groups clean exit animations prerendering lifting components become opaque containers async reconciliation component block entire ui waiting data useful serverside rendering calling asynchronous fast apis client features probably built optimized imperative style core expose capabilities built observables nongoal particular task provide similar api surface area observables track capabilities exposed frameworks possible experiment alternative apis heavily rely observable semantics top features", "num": "2928", "d": "1/2015"}, {"title": "arrow functions nt properly bind jsx transform harmony option", "body": "seems jsx transform ca nt find use arrow function nt bind function probably since slow unfortunately appears namespacing jsx element jsx transform nt realize needs bind resulting function example var mydemoclass reactcreateclass subcomponent reactcreateclass render function return null transforms var mydemoclass reactcreateclass displayname mydemoclass subcomponent reactcreateclass displayname subcomponent render function return null", "num": "2927", "d": "1/2015"}, {"title": "possible add multiple event listeners react component possible programmatically assign listener", "body": "hello could please answer following questions possible add multiple event listeners react component possible programmatically assign listener ideally looking something like addeventlistener would great could suggest something thank andrei", "num": "2925", "d": "1/2015"}, {"title": "idea official nightly edge build npm", "body": "working master nt straightforward react js libraries typically possible point sha commit npm work version codebase since nt happen react due compile step nice official nightly devbuild react available npm one main benefit would library authors making easier check projects changes going master potentially weigh issues one example comes mind warnings around reactrouter due context changes", "num": "2924", "d": "1/2015"}, {"title": "componentdidupdate fire earlier case", "body": "know fires dom updated met problem working piece code like following component js function getstate return layers storegetlayers var component reactcreateclass getinitialstate function return getstate componentdidmount function storeaddchangelistener thisonchange thisupdatelayernode componentdidupdate function thisupdatelayernode componentwillunmount function storeremovechangelistener thisonchange render function return thisstatelayersmap function layer return updatelayernode function var self onchange function thissetstate getstate store js var changeevent change var layers function createlayer id var layer id id node null context null layerspush layer var store assign eventemitterprototype getlayers function return layers getlayer function id var lt layerslength layers id id return layers emitchange function thisemit changeevent addchangelistener function callback thison changeevent callback removechangelistener function callback thisremovelistener changeevent callback layer means node need create layer somewhere else eg click handler use draw something wrote demo works well work project invoked confused execution order update first create layer draw component rendered works move click handler nt work anymore js function onclick actionscreatelayer id var layer storegetlayer id layercontextfillrect reactrender documentgetelementbyid demo ideas solve problem", "num": "2922", "d": "1/2015"}, {"title": "componentdidupdate prevstate previous state", "body": "", "num": "2914", "d": "1/2015"}, {"title": "silent exception", "body": "turned anything might go wrong caught component dropped two undefined function calls separate branch everyone try reproduce fetch branch run build project quick debugging showed number blocks exception caught issue might relate also noticed bunch similar ones without code example might help", "num": "2912", "d": "1/2015"}, {"title": "deprecate reactaddonsclassset", "body": "dependencies think either publish standalone module direct people something else community inclined latter since means wash hands internal usage tied transforms said features would useful others outside fb concerned suggestions existing projects point", "num": "2910", "d": "1/2015"}, {"title": "deprecate reactaddonsupdate", "body": "easiest addon get rid see also todo figure shared dependencies live new name new repo file existing issues new repo update internal usage fb", "num": "2909", "d": "1/2015"}, {"title": "react developer tools malfunctioning chrome", "body": "inspecting props components panel nt functioning clicking element mouse dom tree nt select element keyboard navigation working", "num": "2908", "d": "1/2015"}, {"title": "reactcsstransitiongroup adding enter class", "body": "trouble one animations simple fade fade animation stepping chrome dev tools element rendered page class never applied however class gets applied seem getting added correctly example code almost identical getting started code docs running react help would appreciated thanks", "num": "2907", "d": "1/2015"}, {"title": "add delete mutability helper", "body": "js sparse arrays advantages setting elements deleting eg prints therefore mutability helper returns copy deleted entry javascript update reactaddons let let b update delete consolelog consolelog b ps course also applies objects", "num": "2906", "d": "1/2015"}, {"title": "switching react virtual dom element react tab selecting element inspecting", "body": "would great extension allows us see react dom element matches regular dom element mean click inspect button chrome devtools react tab becomes active shows us element chosen deeply nested dom quite annoying click lot times get nested element might checkbox within react extension works behaviour choosing elements needed", "num": "2905", "d": "1/2015"}, {"title": "passing first argument react methods", "body": "react methods start var self small sweet feature would pass first parameter far know would nt breakable change methods nt take parameters instead var mehcomponent reactcreateclass componentwillmount function var self render function var self would become var mehcomponent reactcreateclass componentwillmount function self somestuff function self render function self somestuff function self", "num": "2899", "d": "1/2015"}, {"title": "set context getinitialstate called", "body": "initial state depend context need make sure context set recent changes let make sure add test wink", "num": "2898", "d": "1/2015"}, {"title": "clear best practice trickling properties externallysupplied component children", "body": "suppose making custom radio button field shows like bunch toggleablebuttons components render wrapping hidden input needs use name parent component clear way correctly transfer prop automatically seems redundant set prop individually however use iterate children method objects get method instead cjsx buttontoggle reactcreateclass render reactchildrenforeach propschildren option gt xxx idea ok setprops available optionpropsname propsname antipatternbug perhaps added docs", "num": "2897", "d": "1/2015"}, {"title": "clarify harmony dependence transferring jsx docs", "body": "new react following tutorial ran snag copy pasting example transferring jsx example lead line chrome using inbrowser jsx transformer took awhile figure proposed javascript thing builtin react thing needed super unclear documentationtutorial reads somehow react taking care react specific syntax docs link destructuring assignment think docs clearly state browser environment must support harmony work", "num": "2896", "d": "1/2015"}, {"title": "optimize bindautobindmethods", "body": "running performance issues using react server side large component trees finding render time increases linearly case seeing render times relatively simple page components profiling found showing top trace went added hrtime calls inside see much time contributing rendering found used within method may seem like lot pretty dramatic effect throughput server rendering synchronously way optimize binding happens lazily server many methods may even called event handlers lifecycle events etc", "num": "2895", "d": "1/2015"}, {"title": "question immutable data react", "body": "may sound like noob question crazy ask anyway dom diffs may replaced immutable data diffs much faster sane require state immutable drop dom diff entirely virtual dom altogether react code actually require us explicitly declare every form field state big deal events derivatives architecture vice versa jquery believe missing", "num": "2891", "d": "1/2015"}, {"title": "detect react dom element wrong attribute name", "body": "dear pretty new react reasons want use without jsx faced issue ca nt resolve react element properties key instead key example console see warning okay really mean find mean supposed look first fb react plugin chrome nt see wrong attribute warning nt give stack trace either huge dom hard go thru manually without hints possible find workaround see example", "num": "2887", "d": "1/2015"}, {"title": "missing closing brace gives misleading warning", "body": "heres code gives following error spent bit time wondering tag nt closed noticing line nt right missing closing brace wonder error could descriptive case error pointy rather curly brackets problem", "num": "2886", "d": "1/2015"}, {"title": "removing object array inside state component refresh dom", "body": "suppose may bug fault code filter array state component question description problem plnkr", "num": "2885", "d": "1/2015"}, {"title": "invariant checking component classes passed mixins fully correct", "body": "javascript function mixspecintocomponent constructor spec invariant reactlegacyelementisvalidfactory spec reactcompositecomponent attempting use component class mixin instead use regular object changed javascript function mixspecintocomponent constructor spec invariant typeof spec function reactclass attempting use component class mixin instead use regular object however simply function nt correctly fully identify error example following code fluxxor javascript var fluxmixin function react return componentwillmount function fluxmixincomponentwillmount function throw new error fluxxorfluxmixin function takes react parameter returns mixin eg mixins fluxxorfluxmixin react tests around messaging started failing using react since technically function another conditional would better identify passing component class mixin", "num": "2883", "d": "1/2015"}, {"title": "warning unknown dom property autocomplete mean autocomplete", "body": "sure counts canonical source near tell input property downcased trouble form input showing firefox refresh noticed sure effect functionality though", "num": "2882", "d": "1/2015"}, {"title": "load example", "body": "run indexhtml examples jquerymobile chromium browser get uncaught typeerror read property reactautobindmap anonymous function", "num": "2880", "d": "1/2015"}, {"title": "add support svg image element", "body": "another issue tracking looks like got merged issue already closed never got fixed", "num": "2873", "d": "1/2015"}, {"title": "reactchildrenmap return array arraylike object", "body": "hey trying use conjunction create copy children however surprising behavior find map return array typical map function would value see returning array would enabling one perform array operations collection children reorderingsplicing inserting new elements etc since nt return array children meant opaque data structure unclear best practice type thing created rough jsfiddle demonstrates assume behavior optimization purposes case maybe way think problem thanks feedback cheers", "num": "2872", "d": "1/2015"}, {"title": "get original html rather compiled example react tutorial", "body": "return highlight area unexpectly get want html testleft somebodypx", "num": "2871", "d": "1/2015"}, {"title": "warning calls use", "body": "ditto invariant think ok already", "num": "2870", "d": "1/2015"}, {"title": "write custom lint rules", "body": "x make sure string literal first argument make sure jsdoc args match", "num": "2869", "d": "1/2015"}, {"title": "dangerouslysetinnerhtml nt update svg", "body": "suspect applies svg elements know sure due lack svg needing use created jsfiddle demonstrate issue switch two images tux second also dump console render every browser renders correctly initially chrome update chrome everything works expected firefox gets converted disappears assume html inside svg context safari looks fine image never changes ie looks fine image never changes", "num": "2863", "d": "1/2015"}, {"title": "style updates silently fail trailing semicolon style", "body": "first render works update silently fails expected would semicolon removed errorwarning development build tested chrome latest firefox latest master minimal jsbin js var app reactcreateclass getinitialstate function return color red handleclick function consolelog hello world thissetstate color blue render function consolelog rendering var style backgroundcolor thisstatecolor rabishah ran irc", "num": "2862", "d": "1/2015"}, {"title": "clonewithprops function type property points window", "body": "js var react require react require reactaddons function createcircle x r return var mycircle reactcreateclass render function var circle createcircle return reactaddonsclonewithprops circle onclick function consolelog reactrender documentgetelementbyid svgtest click circle sure whether bug nice refer element", "num": "2861", "d": "1/2015"}, {"title": "input pattern attribute value broken react", "body": "see rendered element pattern attribute value jsfiddle uses react noticed issue react imagine nt tested nt specific pattern attribute stripped something", "num": "2860", "d": "1/2015"}, {"title": "lack testutils method finds rendered component data attribute value", "body": "react test utilities currently expose following ways query contents rendered component certain elements type tag classname however common applications make use automated testing tools target elements classname tag name rather specific data attribute type reserved explicitly use testers paradigm allows developers modify class names purposes styling without worrying breaking existing test suites feel like could beneficial allow allow querying rendered components via data attributes like javascript reacttestutilsscryrendereddomcomponentswithdataattr function root attrname attrvalue return reacttestutilsfindallinrenderedtree root function inst var regex data var dataset key instprops regextest key dataset keyreplace regex instprops key return dataset attrname attrvalue reacttestutilsfindrendereddomcomponentwithdataattr function root attrname attrvalue var reacttestutilsscryrendereddomcomponentswithdataattr root attrname attrvalue would allow unit testing react elements rendering via validating contents rendered element querying data attributes might used complementary automated test suite figured even attempting put together formal pull request would open issue get feedback perceived value additions thanks", "num": "2858", "d": "1/2015"}, {"title": "bug eventcurrenttarget null even eventpersist", "body": "using properties kept intact reason jsfiddle thanks", "num": "2857", "d": "1/2015"}, {"title": "children depends order enumerating properties object", "body": "notice component children type returned reactchildrenmap object reactchildrenforeach use loop children type object think cause problem future spec guarantee order enumerating properties object ps try extract reactcsstransitiongroup heavily depends order enumerating properties object standalone package use children array type merge render need pull request reactcsstransitiongroup let know", "num": "2856", "d": "1/2015"}, {"title": "jsx parentheses around object literal transforms invalid js", "body": "comma right parenthesis emitted jsxtransforming line like title result following jsx source jsx var examplecommaissue reactcreateclass render function return transforms reactcreateelement div style margin classname test instead reactcreateelement div style margin classname test notably seems problem attribute follows one parenhugged object literal also test see arbitrary values parentheses also result", "num": "2855", "d": "1/2015"}, {"title": "bug event object properties null within setstate callback function", "body": "event object seems lose property values within callback function jsfiddle demonstrating behavior", "num": "2850", "d": "1/2015"}, {"title": "save component back references dev mode", "body": "purposes providing devtools support providing back traces error messageswarnings might useful keep back references component parent trace information cut amount time required find component responsible throwing warnings", "num": "2849", "d": "1/2015"}, {"title": "react wiki module reactgrowabletextarea", "body": "suggestion components wiki first attempt react component feedback welcome", "num": "2848", "d": "1/2015"}, {"title": "keyboard event handlers longer invoked documentbody get focus", "body": "example app root component rendered also set handle application keyboard shortcuts problem running user interaction like clicking around page causes obtain focus become case amp event handlers longer invoked know could register keydown keyup event handlers manually app component mounted would prefer stay within react", "num": "2846", "d": "1/2015"}, {"title": "allow template strings attributes jsx", "body": "cool myclass worked instead wrap template string", "num": "2845", "d": "1/2015"}, {"title": "keep drop replacestate", "body": "continuing conversation started considering dropping replacestate ideally state always keep consistent signature defined getinitialstate", "num": "2843", "d": "1/2015"}, {"title": "maven plugin available", "body": "hello maven plugin available integrate jsx precompilation build process seen gradle plugin would anyone recommend using gradle instead maven solve personally currently prefer maven still sufficient projects kind regards moritz", "num": "2841", "d": "1/2015"}, {"title": "onclick events components inside forms fire nt", "body": "making form component onclick event placing cursor input field form pressing enter onclick event component fires feels random something wrong actual bug jsbin illustrates problem", "num": "2840", "d": "1/2015"}, {"title": "catch invalid dom nesting initial render", "body": "currently get error react tries update dom things nt expected early errors much better development react give clear errors based valid html structures example select element valid child option option element valid child text node forms one invalid deep child form tables quite rules suggested error format forms element n means displayname childindexifnotzero invariantviolation foocomponent may deep children culprit form gt div gt form invariantviolation foocomponent may deep children culprit form gt div gt gt gt barcomponent gt div gt tables invariantviolation foocomponent may children encountered thead invariantviolation foocomponent may one child encountered thead thead invariantviolation foocomponent may one child encountered thead thead less frequently encountered situations pushed different release think important bad habits people used allowed situations examples people run problem selectoption nested forms tables", "num": "2839", "d": "1/2015"}, {"title": "include key using reactchildrenmap reactchildrenforeach", "body": "currently key property stripped children calling reactchildrenmap reactchildrenforeach seems would useful retain property leave user decide handle instance example docs showing following want retain key using clonewithprops nt work want loop clone child key already stripped code made test var hello reactcreateclass reactrender documentbody output omits key values", "num": "2838", "d": "1/2015"}, {"title": "track upcoming dom technology upgrades", "body": "x support hyphenated dom components jsx transform usage within html import x inserting components shadow dom fragment x arbitrary properties dom components proper event handling events fired inside shadow dom custom events component prototype provide change detection execute rerender want component able rerender instance component children effectively treated prop react changes detecting changes require default component implementation things like initialize mutationobserver potentially defer rendering dom per x remove tagname property per support complex types parameters web components react components take complex types whereas dom nodes take strings pass complex type web component need run code mount time passes additional parameters instantiated web component stateful imperative bridge per", "num": "2836", "d": "1/2015"}, {"title": "illogical architecture setstate", "body": "dear react developers community anyone please explain react throws hard error use setstate anything entails setting new state eg replacestate setstate work mounted component never works unmounted component harm using consolewarn instead code must use thisismounted amp amp thissetstate completely redundant please provide explanation allow using certain init option throwing error", "num": "2835", "d": "1/2015"}, {"title": "q transfer state server", "body": "wonder possible transfer state andor props server client imagine ways like stringifyparse json achieve properly use ajax initial state even isomorphic webapp", "num": "2834", "d": "1/2015"}, {"title": "question state serializable", "body": "according guide items state react component serializable would like store nonplain javascript object would consequences", "num": "2833", "d": "1/2015"}, {"title": "add support itemref", "body": "", "num": "2831", "d": "1/2015"}, {"title": "facebook cdn link react location breaks csp sites", "body": "try load https cdn location react browser gets redirected http resource rejected browsers everywhere requirements additionally sites explicit csp wo nt let redirect even browser told ignore enforcement", "num": "2829", "d": "1/2015"}, {"title": "uncaught typeerror read property mockedreactclassconstructor undefined", "body": "error caught twice hard debug perhaps extra check could make less hard debug location error happens javascript function instantiatereactcomponent element parentcompositetype var instance production processenvnodeenv production processenvnodeenv warning element amp amp typeof elementtype function typeof elementtype string functions strings mounted react components null cause always using undefined variable jsx tag like reason get error often forget export othercomponent directly using import like wrong obviously would help much assertion first parameter reactcreateelement right away called", "num": "2828", "d": "1/2015"}, {"title": "provide stack traces warnings", "body": "find often hard time tracking source various react warnings would idea setting throw warnings least stack trace", "num": "2827", "d": "1/2015"}, {"title": "onmouseentercapture onmouseleavecapture working", "body": "first thank building amazing library sharing rest us nt know whether bug code bug library design suspect latter", "num": "2826", "d": "1/2015"}, {"title": "define functions inside mixins", "body": "love mixins works limitations like use getdefaultproperties inside mixin component ca nt override property getdefatulproperties bigger problem nt know ok case component parent mount reactcomponent ca nt call someone know solve problem thanks", "num": "2825", "d": "1/2015"}, {"title": "explicitly bound setstate call fails callback argument passed", "body": "passing prop value actually trigger state change however passing function falsey value argument seems work javascript thissetstatebind key val setstate get called thissetstatebind key val work thissetstatebind key val null works thissetstatebind key val undefined works thissetstatebind key val function works thissetstatebind key val works fiddle thissetstatebind thisstatea change gets queued realized calling setstate third argument thissetstatebind b thisstateb null works thissetstatebind c thisstatec undefined works demo", "num": "2823", "d": "1/2015"}, {"title": "jsx cli class getter setter support", "body": "run following error thrown trying use library called isomorphic app needs serverside rendering module works fine clientside nt playing nice server even though server already set render react components jsx code stated seems transformation supported via flag nt supported say seems hard time believing ca nt thing missing", "num": "2820", "d": "1/2015"}, {"title": "facebook cdn serving compressed libraries", "body": "example surely served gzip compression quite odd indeed", "num": "2819", "d": "1/2015"}, {"title": "access private variables", "body": "component used private member knowing also used react overwrote variable got strange errors completely unrelated points time took figure react used private member name exposed inside component would useful actually hide variables otherwise mention documentation easily findable", "num": "2817", "d": "1/2015"}, {"title": "nt warn undefined key using arrays", "body": "using always result warning development mode understand reasoning using jsx aware user may something wrong using javascript api however seems odd arrays useful work performant dealing arguments would possible provide ability turn warning", "num": "2816", "d": "1/2015"}, {"title": "invalid values styles also throw errors", "body": "documentbodystylewidth invalid argument something want solve", "num": "2815", "d": "1/2015"}, {"title": "updating props element", "body": "react component renders component b receives another component c one props need update props component b rendering tried access available maybe right component something like b like access compc update props tried available move compc b needs stuff b nt need know", "num": "2813", "d": "1/2015"}, {"title": "boxflex missing ignore list automatic unit concatenation", "body": "boxflex value gets px suffix although unitless css property could please fix version", "num": "2812", "d": "1/2015"}, {"title": "jstransform dependency mismatch esprimafb", "body": "issues installing today using react node switched using version performed npm cache clear try start app get seems leading version numbers truncated check field reads unsure registry issue wondering anyone insight fix issue spent many hours trying get work edit also tried", "num": "2811", "d": "1/2015"}, {"title": "reactcreatecomment would nice", "body": "use come handy working inspector compiling react template systems", "num": "2810", "d": "1/2015"}, {"title": "umbrella", "body": "x refs make callbacks instead first class spicyj sebmarkbage x move proptype validation element instead class jsfb x warning classtype accessed sebmarkbage clean internal jsfb x expose reactcomponent base class sebmarkbage x fix context x deprecate keyed objects children warning jsfb sebmarkbage x add reactfragment api expose reactaddonsfragment x fix reactperf x change unmounted setstate checks invariant warning zpao x add enqueuestateupdate name enqueue updates depend thisstate consistent since thispendingstate gone sebmarkbage x fix devtools sebmarkbage x something refs timing sebmarkbage x warn uses within x warn maps children zpao needs syncup flow internal option zpao wo nt fix expose dom component refs actual dom nodes monkey patch props setprops getdomnode onto upgrade path warnings using dom component ref getdomnode props fix error utils guard see reactcompositecomponenterrortest deprecate setprops alternative expose clonewithprops react proper actual clonewithprops one deprecate replacestate", "num": "2809", "d": "1/2015"}, {"title": "make default initial state component", "body": "find writing way often lot components wait ajax requests setting state variables make things much easier", "num": "2804", "d": "1/2015"}, {"title": "appear selectable creation disabled", "body": "react implementation appear allow selected correct behavior user timeline initial creation html allows offer selected creation time wording disallow update select disabled option disallows form post disabled option still selected whereas explicitly allowing preloaded select major browsers permit html allow selected option time idiomatic disabled empty option one placeholder text pick color selected element load time believe example code load first instead loads second remove unshifted element selected load time jsx jsx reactdom var testcase reactcreateclass please advise", "num": "2803", "d": "1/2015"}, {"title": "svg tag prevents transpilation jsx js", "body": "steps reproduce create react component renders svg contains example puffsvg save component file try compile file get following error use transform get error use though nt take screenshot might similar issue tag worked around error building custom component building svg code setting using component", "num": "2798", "d": "1/2015"}, {"title": "expose devtools hook injection consumers react object", "body": "currently react looks global calls exists works fine one listener eg chrome react devtools love react supported arbitrary number independent hooks react hot loader reaching internals need get mounted instances wish could without ing internal module ideally wish react exposed modules available global hooks via kind would called automatically available object want library nt mean production libraries debugging aid libraries react hot loader potentially others", "num": "2797", "d": "1/2015"}, {"title": "clarify componentdidupdate fires", "body": "unclear called regards function docs state invoked immediately updating occurs unclear meant updating case refer either component whole updating meaning postrender refer setstate processed might mean prerender would good explicitly state function fires documentation even somewhere else site described text graphic form already", "num": "2796", "d": "1/2015"}, {"title": "add support", "body": "adding component jsx causes jsxtransformer throw error taking replacing makes error vanish missing formset whitelist somewhere", "num": "2794", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "large agree trying fit existing model classes ugly really ca nt see real benefits", "d": "1/2015"}, {"body": "think definitely transition period everything fits place neatly esx catches think vision behind current direction sound come instead using vendor specific vendor specific behaviors features interop libraries use native classes sure lack mixinsupport ways around property initializers yet uglies bit classes autobound kind sucks guess property initializers rescue well seems yeah using classes still early perhaps choose use early adopter way would say still great thing using native classes one way creating classes one prefer free use native classes ready eyes slowly migrate away whatever class helper using react longer decided best free use whatever want seems amazingly great ask nt see issue edit words react moving direction away unnecessary forced opinions library bloat react class library view framework forcing certain class library x z react focus best future implementation everything else community provide official addons absolutely necessary everyone different opinion right way everyone freedom choose", "d": "1/2015"}, {"body": "wrote briefly fashion oop classes really", "d": "1/2015"}, {"body": "go ahead put good first bug one may bit tricky find root cause quite easy narrow fix rather simple think perhaps easiest bug entirely new", "d": "1/2015"}, {"body": "yeah looks like warning changed case", "d": "1/2015"}, {"body": "implementation shortcoming clone elements keep original ref readd would owner original owner", "d": "1/2015"}, {"body": "hmmm see ironically case owner read doc fact says preserve key owner okay could probably explicit end way element point cloned ref", "d": "1/2015"}, {"body": "end way element point cloned ref right know implementation issue intentional ps accessing children generally considered antipattern unless explicitly uncontrolled controlled components preferable possible may thinking wrong way would find using controlled components preferable many ways", "d": "1/2015"}, {"body": "easily implement", "d": "1/2015"}, {"body": "course react addons exist useful would make useful", "d": "1/2015"}, {"body": "flyingsheep everyone different opinions usefulnecessarymeaningful though reactaddons mostly useful getting started originally designed compatible css class name mangling meaning simple class name easily discoverable", "d": "1/2015"}, {"body": "agree usual case combination fixed classnames dynamic classnames optionally applied classnames", "d": "1/2015"}, {"body": "going get rid helper see said issues implementation stuck tied facebook statically transform class names ca nt change implementation since really common request going get rid tell people use another one jedwatson plan point", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "ok great first one exactly idea anyway", "d": "1/2015"}, {"body": "aetet bem react work well together think linked addition something designed work normal class name strings ie classnames", "d": "1/2015"}, {"body": "contains elements component instances case foreach handler get result without jsx way want within parent well might reactchildrenmap clonewithprops refs nt recommend try restructuring code nt need", "d": "1/2015"}, {"body": "actually already using since also need pass props children however way give access", "d": "1/2015"}, {"body": "yeah appears way suggest finding way make requirement multiple levels confusing component invokes internal methods children without even hint ref construction child nt something want happen ever", "d": "1/2015"}, {"body": "simply react intended work work way work way create elements pass react basically becomes want view hierarchy look like react takes request createsreusesdestroys components according reconciliation algorithm need access instances approaching problem wrong way react components compared oop classical objectbased view hierarchies components sense thin complex logic logic exist outside react communicated propagates view hierarchy via props parent accessing child generally considered antipattern would say", "d": "1/2015"}, {"body": "syranide well perhaps share exact use case trying solve might throw light motivations perhaps add little sense might great idea releasing open source soon nt mind sharing idea built custom form amp field component form component simple enough besides wants hand certain props fields nt want care details markup field component abstraction form components easily make components inputfield emailfield selectfield etc using form idea consistent api abstracts displaying labels form components error messages etc based props basic form would look something like think looks really nice amp simple within want able loop children call api value get values fields reason becomes important important especially could complex nesting fields things like also groups fields together layout flexibility perspective form nt care fields children order really care return build amp pass entire form data hash parent moment done gone ahead used allows build hash simply form markup decent work around however fields responsible declaring values things would become lot deterministic believe think structure amp concept works quite well feels quite intuitive yet simple however share thoughts ideas", "d": "1/2015"}, {"body": "possible implementation way communicate via props passind data downward using callbacks going back one way use paradigm still nicelooking layout would basically form automatically gives children callback call state needs updated along current value way owns state children stateless form elements make sense nb tried might end much magic think would work", "d": "1/2015"}, {"body": "hm chance look expected case expects regular javascript class react class could explicit docs", "d": "1/2015"}, {"body": "yeah think correct", "d": "1/2015"}, {"body": "yeah makes sense guess blindly assumed returned class would work hopefully changes help line", "d": "1/2015"}, {"body": "use reactcreateelement render classes", "d": "1/2015"}, {"body": "computed element chrome firefox appears chrome somehow ignores fontsize first preceding element fontsize set would result computed fontsize resulting", "d": "1/2015"}, {"body": "rather video recording although computed value zero effect typography child elements unless manually set fontsize wish someone could explain", "d": "1/2015"}, {"body": "firefox right chrome wrong feel free fix either way hacky css want", "d": "1/2015"}, {"body": "zpao would guess yes take another look today way past midnight last night may missed something either way il like get bottom issue report bug chrome necessary", "d": "1/2015"}, {"body": "zpao hey pr found quite interesting discrepancies browsers render wrote short articles summarise findings", "d": "1/2015"}, {"body": "also tried add spaces backgroundimage key react reacted nt let", "d": "1/2015"}, {"body": "feature detection goto solution least believe edit supplying array rules complicated updating would require reapplying order could quite costly area nothing really decided yet believe feature detection solution use css probably preferable unless dynamic seems", "d": "1/2015"}, {"body": "yea suggested feature detection case bulletproof eg wo nt work serverrendering otherwise yes area unfortunately using objects nt work perfectly nt really anything going change string", "d": "1/2015"}, {"body": "example correctly yields however pretty sure issue seeing mutating objects stateprops react clone objects passed stateprops hence reference object react advocates sticking immutable data ie always create new object instead mutating existing", "d": "1/2015"}, {"body": "oh yeah problem occurs objects right example entirely complete anyway clone object assigning props component state either using underscorejs problem still exists", "d": "1/2015"}, {"body": "line mutating state object try compare", "d": "1/2015"}, {"body": "sure need manually set state call setstate able", "d": "1/2015"}, {"body": "noted modifying directly used", "d": "1/2015"}, {"body": "duplicate", "d": "1/2015"}, {"body": "nt think supported syntax yet see wait assigning properties seems like imperative way defining classes right however designed way idiomatic fully expect declarative syntax property initialization arrive future version javascript might look something like nevertheless would thrilled supported transpilers liberal experiments sebmarkbage kind spec talked sebmck nt mind getting", "d": "1/2015"}, {"body": "official proposal yet assume look something like typescript reflective aspects scoping rules probably differ bit", "d": "1/2015"}, {"body": "sebmarkbage currently midst writing spec", "d": "1/2015"}, {"body": "strange change suddenly worked expected", "d": "1/2015"}, {"body": "ejelome result markdown invalid markup browser mucks dom weird ways elements end outside updating hence behavior seeing react would also start throwing errors mutate elements around", "d": "1/2015"}, {"body": "see way invalid markup halts reactjs way thanks explanation syranide", "d": "1/2015"}, {"body": "another way solve give us childrentoarray", "d": "1/2015"}, {"body": "solved problem wish exposedsupported though", "d": "1/2015"}, {"body": "may wrong think generally problematic unless would replace filtered children rather compact array canshould filter way dynamic children nt keyed reconciliation suffer badly", "d": "1/2015"}, {"body": "right see exposing", "d": "1/2015"}, {"body": "returns keyed object deprecated keyed objects supported soon afaik polyfill wait", "d": "1/2015"}, {"body": "also see would solve", "d": "1/2015"}, {"body": "proper way counting nonempty children incrementing counter", "d": "1/2015"}, {"body": "need implement extra functions like bend map implement functions due js works example jsbingist", "d": "1/2015"}, {"body": "mention event behaves would expect whenever form field changed event fired rather inconsistently blur intentionally break existing browser behavior misnomer behavior react relies event react user input real time see forms details browsers already implemented event inconsistently decided long ago make people actually expected event tell value changed point input lost focus like use combination compare values recreate somethng like native event alternatively think one events actually make use build behavior could potentially still use react event handler run code", "d": "1/2015"}, {"body": "style property look like", "d": "1/2015"}, {"body": "compiled coffeescript cleaned brevity actual version would polyfills transform opacity correctly updated every time component selected transform would get set translatey mount time remain", "d": "1/2015"}, {"body": "prefix hence believe happening simply react setting unknown styles well initial markup goes update unknown property hence property change nt reflected dom zpao considering enforce camelcasing everything else bout vendorprefixes change etc least change consistent edit checktransform style names bah perhaps makes sense keep css whitelist much needed warnings", "d": "1/2015"}, {"body": "damn trying super smart ms everything else webkitmoz looks like changing back ms works seems accepting bad style mounting time grounds confusion though throw errornot apply style bad easier trace also ms left webkitmoz casing p", "d": "1/2015"}, {"body": "follow rules must follow setting styles directly js nt know history microsoft nt follow rules vendor prefixes fair rules might standardized started exception rule reason works first render transform js style name css one follows simple pattern take uppercase letter replace hyphen lowercase version becomes actually right thing updates nt update style actually try nt property ie knows parse actually warning bad vendor prefixes nt check perhaps syranide nt enforce camelcasing style properties browser us nt think deviate use", "d": "1/2015"}, {"body": "zpao used webkit enforce uppercase think always thought camelcasing react largely perspective javascript implementation dom html seems makes sense use rather also would hazard guess would say leading hyphen signifies unofficial nt make sense would added css property really intended read also matches fact vendorprefix javascript", "d": "1/2015"}, {"body": "ah guess problem always inconsistent casing vendor prefixes js indeed webkit js thanks help explanations guys", "d": "1/2015"}, {"body": "yea ca nt actually find anything talking official rules thought point ah well regardless webkit actually makes work sure primary used interchangably would say leading hyphen webkit signifies unofficial really sure mean css vendor prefixes unofficial intended live forever specs develop others totally offspec might never become standard", "d": "1/2015"}, {"body": "really sure mean css vendor prefixes unofficial intended live forever specs develop others totally offspec might never become standard zpao ah meant pretty sure meant read actually webkit browsers though even though technically due leading hyphen guess something said infavor would accidental conflicts however unlikely kind speaks unofficial nature regardless one preferred makes sense react normalize use casing vendorprefixes also really weird currently javascriptprefixes react set makes sense edit correct one assume one shown autocomplete list hence reaction used react rather", "d": "1/2015"}, {"body": "game eventually might want move docs elsewhere think great idea checked know fall date nt good job publicizing translations solve later send pr whenever ready", "d": "1/2015"}, {"body": "looks like also use x example handle files end quick start looks like new standard use though", "d": "1/2015"}, {"body": "would probably good idea add infonoticewarning transpiler notices jsx files nt converting since user probably intended devtools convert jsx files goodfirstbug ps hey dc glad see using react go dish run time curious hear webbased gpg client going", "d": "1/2015"}, {"body": "sure", "d": "1/2015"}, {"body": "proptypes mixins still merged skipped reactproptypes functions turned noops smaller code size etc", "d": "1/2015"}, {"body": "looks like proptype checking already surrounded block starting correct", "d": "1/2015"}, {"body": "yeah everywhere else checkproptypes used huh", "d": "1/2015"}, {"body": "one", "d": "1/2015"}, {"body": "sebmarkbage one referenced place needs updating thinking might good first bug", "d": "1/2015"}, {"body": "kentcdodds looks like jergason already working might want coordinate follow pr", "d": "1/2015"}, {"body": "ah duh find another low hanging fruit", "d": "1/2015"}, {"body": "kentcdodds", "d": "1/2015"}, {"body": "cc chenglou", "d": "1/2015"}, {"body": "oh boy gets excited anyways counterarguments plus arguments pros nonjsx declaration pretty much less reactspecific tooling good children special slicing children expensive mutable arrays yeah since maybe considering persistent collections even lazy splatdestructuring fine agree probably good perf static analysis help current fine plus explicit format component nt expect receive object strip passing props obj properly document harder justify old still obvious say constant destructuring beside perf concern pointed fact lazypersistent help right nt see problem much clearer prefer api smaller api surface really want could make use destructuring hood nt see problem nested arrays since specs nt set stone even nt follow closely propose format instead also solves problem spread previous destructuring point allowing nah lol nt think stick jsonml specs closely make sense example style value string object like react maybe influence specs pros ideally reactagnostic render functions library provides win future reactlike libraries since function nt depend react much nuanced know good start potentially dropping gon na implement every arraymanipulating functions like say perf reasons wanted keep underlying children data structure opaque eg ease switch linked list realistically nt think happening benefits working plain arrays optimized engines big good example problem seen weird passing prop child making parent read determine stuff theoretically better way hard manage might get sync even better way jordan case good excuse able read nothing array also happen render jsonml format come free also easier libraries like read intomanipulate children might slice children infinite scrolling something killing distinction ownerparent tree nt given much thoughts implication might nice pass around persistent children array would nt really know array always cloned mounted clojurescript people already except actually precompile react components play nice us wo nt anymore", "d": "1/2015"}, {"body": "weird passing prop child making parent read determine stuff see use case often code usually hesitate keeping stuff data array prop using wins looks clearer consuming side makes painful component", "d": "1/2015"}, {"body": "yep saying possible feels definitely excusable directly read normal collections think work vanilla js collections much possible including generation keep react edge would dangerously convenient allows us cram new concepts arrays still keep things superficially clean", "d": "1/2015"}, {"body": "oh sebmarkbage children comparison becomes easier also get whatever optimization want flow free eg pull immutable arrays outside avoid allocations probably lot insert optimizations normal arraystuples nt thought", "d": "1/2015"}, {"body": "worked performance standpoint get convergence libraries standard even shared conventions also make things like reactrouter use jsx describing routes sane tied explicitly react select option selected option mean quotes around select option supposed references", "d": "1/2015"}, {"body": "sure quoted", "d": "1/2015"}, {"body": "okay thanks also sake clarity compat think putting metadata last makes sense like optional parameter function usually go last makes handling kind data easier know props always also allows say props nt look right throw errorwarning vs metadata might intended edited sorry accidentally hit submit key shortcut typing", "d": "1/2015"}, {"body": "sebmarkbage seems current objectbased representation preferable technical perspective addition actually making sense try operate ie something consider supporting jsonml via runtimestatic transformation like jsx instead except would jscompatible nt tooling issues static transformation wrap react jsonml whatever statically transformed incur somewhat significant runtime overhead statically transformed equal jsx overhead get choose suitable technical representation without considering especially human readable jsonml seems like yet another dsl something dedicated syntax nt think solution problems like inventing ways making code less ugly magical arrays arrays minimal character overhead understanding view hierarchies require syntax designed html begin time languages catch", "d": "1/2015"}, {"body": "add ios emit click events expected", "d": "1/2015"}, {"body": "would nt opposed something like onclick aditional benefit letting style clickable elements making generated html clearer angular projects use css three birds one stone unless serious perf problems adding empty onclick attribute", "d": "1/2015"}, {"body": "supposed fixed mobilesafariclickeventplugin broke time ago nt fixed yet iirc workaround think", "d": "1/2015"}, {"body": "kept curious point react read references mean context change propagate thus forcing reconciliation twice somewhat related", "d": "1/2015"}, {"body": "correct way define component state terms modern api var react require react var contexttypes name reactproptypesstring class test extends reactcomponent constructor props context super props context thisstate name name getchildcontext return name thisstatename render return testchildcontexttypes contexttypes consolelog reactrendertostring works sorry", "d": "1/2015"}, {"body": "example using jsx executable reacttools", "d": "1/2015"}, {"body": "cc jeffmo dmitrysoshnikov nt bind properly xjsidentifier instead thisexpression cc sebmck seems issue", "d": "1/2015"}, {"body": "probably something needs solved parser side possible bug jsx spec since following correct grammar partially related note really transform arrow functions function binds", "d": "1/2015"}, {"body": "cc rreverser acornjsx", "d": "1/2015"}, {"body": "obvious jsx spec bug example could imagine could compile something nt use result conversely could compile something use seems like transforms need cooperate somehow guess hard transforms output strings", "d": "1/2015"}, {"body": "spicyj ah right true easy fix anyway investigating see larger issue push fix shortly", "d": "1/2015"}, {"body": "fixed", "d": "1/2015"}, {"body": "obvious jsx spec bug example could imagine could compile something nt use result spicyj tend agree spec bug wrote nt think using expressions incl inside element names want treat regular add spec explicitly", "d": "1/2015"}, {"body": "rreverser mean different transforms may want different things characters cases might mean js concept could imagine others nt", "d": "1/2015"}, {"body": "since jsx extension javascript seems pretty safe always assume", "d": "1/2015"}, {"body": "spicyj might wrong imo exactly one things actually standardized spec want people feel safe using assume work way everywhere nt catch weird runtime bugs sebmck agree", "d": "1/2015"}, {"body": "react event system nt way attach multiple listeners single node automatically always chain callback event emitter want curious use case never seen need seen lot react components could elaborate bit maybe something missing support", "d": "1/2015"}, {"body": "thank reply idea implement form validation mixin following functionality focus display helper info change checking entered info adjusting entered data displaying warning blur displaying possible warning wanted add handlers form inputs componentdidmount nt want overwrite handlers assign component previously", "d": "1/2015"}, {"body": "could use helper function behaves like simpler less powerful version react mixin strategy minimal example use realistic example mixin probably calling mergemethods internally accepting object component render method getformproperties would calling internally ensure user passes handlers called also puts position accept properties ignored native dom components like onsuccessfullysubmit remaining mixin sure good idea direct answer without saying use addeventlistener code js function f g return function fapply arguments gapply arguments function mergemethods objs var result arrayprototypeforeachcall arguments function obj objectkeys obj foreach function key typeof obj key function key result throw new error mergemethods non method keys multiple sources used key exists one source return result", "d": "1/2015"}, {"body": "thank guys seems like case becoming much complex business requirements perspective original ask longer actual also think might secure solution terms possible state change conflicts different event handlers thank suggestions keep mind anyway", "d": "1/2015"}, {"body": "think current plan going push tag week hopefully stable master still uptodate enough test latest changes zpao elaborate also automatic builds triggered travis always date", "d": "1/2015"}, {"body": "also good want play latest fiddlejsbin default jsbin comment spicyj installed docs want ensure points latest stable publish tags like", "d": "1/2015"}, {"body": "yea nt want push npm nightly often points know something broken would irresponsible pushing prerelease checkpoints npm generally always checkpoints bring use facebook want make use always bring next prerelease build currently published last friday install directly builds server spicyj mentioned one day clean looks official brigand latest builds server simply symlink recent build given branch corollary npm tags npm keep latest pointing stable use next prerelease channel ca nt actually publish tags look like semver versions anymore used rcs use next match npm tagged officially announced supported builds git repo words rcs final builds nt tagged alphas answer overall request nightlies wo nt publish npm going close", "d": "1/2015"}, {"body": "brigand sorry mean", "d": "1/2015"}, {"body": "sounds good thanks info", "d": "1/2015"}, {"body": "show code sure follow completely work project getcanvascontext invoked componentdidupdate put hard understand method definition example also wary saving anything domish stores hold data", "d": "1/2015"}, {"body": "gaearon thank updated code hope understand clearly also wary saving anything domish stores hold data agree nt thought better way", "d": "1/2015"}, {"body": "byelims could explain overall goal eg component supposed might way without things store", "d": "1/2015"}, {"body": "presumably array pushed called something like keep reference array instance prevstate state however actually cloned array would nt run reference issue unless looked nested objects nt think want make work properly would require deep cloning current state every transition get expensive libraries better things like immutablejs mori good examples cc sebmarkbage aware reopen think anything", "d": "1/2015"}, {"body": "tryfinally without catch nt suppress exceptions able reproduce error standalone jsfiddle", "d": "1/2015"}, {"body": "spicyj unfortunately tried code similar case works fine looks like need run project", "d": "1/2015"}, {"body": "chrome see promise created module swallowing exception notice put breakpoint catch promise code called error object corresponding call", "d": "1/2015"}, {"body": "spicyj whoa thanks exactly exception caught promise ca nt get looking call stack", "d": "1/2015"}, {"body": "understand native implementation promises turns exceptions promise rejections automatically ca nt see code call stack since written js", "d": "1/2015"}, {"body": "ca nt link bunch useful scripts docs leave people free usemodify implied maintained getting people started feel like lot people nt understand current state expect fullblown frameworks updated every feature conceivable publishing npm kind continues trend suspect noone team react really cares addons enough would say make available docs codefiles let community sort publishingimprovingdirection", "d": "1/2015"}, {"body": "steal code post somewhere else name need another css repo mine really reactspecific", "d": "1/2015"}, {"body": "talking jed conference think point people", "d": "1/2015"}, {"body": "let track devtools repo", "d": "1/2015"}, {"body": "something like", "d": "1/2015"}, {"body": "splice replaces items supplied elements two parameters third undefined eg calling elements removed three eeh test work sure make sure use browser console jsbin console see elements actually empty instead set undefined", "d": "1/2015"}, {"body": "oh sorry realized meant fact needed exact thing today objects", "d": "1/2015"}, {"body": "would cover", "d": "1/2015"}, {"body": "similar different behavior arrays mongo setting items flyingsheep use case sparse arrays react", "d": "1/2015"}, {"body": "honestly think behavior arrays makes sense following mongo rule thumb following something need able undo well since possible things array need able return previous state special nullifying behavior seems strange case edit thought favor nonholey rare people use sparse arrays purpose always write little helper use", "d": "1/2015"}, {"body": "yeah pretty strange special cases arrays without reason say change unconditionally", "d": "1/2015"}, {"body": "shortcut would jump updown closest composite component", "d": "1/2015"}, {"body": "select element elements tab using magnifying glass rightclick inspect element switch react tab corresponding component selected nt think better api chrome gives us", "d": "1/2015"}, {"body": "ca nt implement stepping updown composite components inside react tab something like ctrlup ctrldown oh silly parent many children nevermind", "d": "1/2015"}, {"body": "thank works exactly need", "d": "1/2015"}, {"body": "nah nt jsy ever write react python might happen make use built js features namely fyi would breaking change half lifecycle methods take arguments eg", "d": "1/2015"}, {"body": "makes sense argue could still pass last parameter without breaking change personally find bind everywhere pollute code makes harder read something deal code without necessary forcing everyone use self parameter convention", "d": "1/2015"}, {"body": "phzbox enable transforms use arrow functions equivalent self pattern js var mehcomponent reactcreateclass componentwillmount somestuff gt render somestuff gt realistic example think right js class comments extends reactcomponent componentdidmount get apicomments comments gt thisismounted thissetstate comments render return thisstatecommentsmap c gt", "d": "1/2015"}, {"body": "context available initial state perhaps creating dom descriptors outside context see example hope helps", "d": "1/2015"}, {"body": "dyscrete believe zpao referring master branch broken", "d": "1/2015"}, {"body": "indeed issue filed us remember since knew details sometimes forget people watching repo appreciate thorough testing though dyscrete hope stick around help people", "d": "1/2015"}, {"body": "think might looking", "d": "1/2015"}, {"body": "vsiao docs state clonewithprops usage component target child case nt owner components thought children owned parents parents children owner owned fungible parent child misinterpreted docs", "d": "1/2015"}, {"body": "think goes like owner parent nt buttontoggle owner option components think parent owner owner custom component uses yeah use", "d": "1/2015"}, {"body": "decided discard components owned toplevel scope using spin components owned button toggle still feels like workaround still rather perplexed makes sense parent components children specified shared ancestor scope", "d": "1/2015"}, {"body": "semirelated note expected behavior spread operator fails used like works like got unexpected error used extra whitespace confusing", "d": "1/2015"}, {"body": "decided discard components owned toplevel scope using spin components owned button toggle actually sensible idea say better passing props whoknowswhat children may even know props", "d": "1/2015"}, {"body": "well docs say perhaps move people like following along tutorial may bother keep reading", "d": "1/2015"}, {"body": "want send pr improve upon tutorial", "d": "1/2015"}, {"body": "dashed sure mess tonight", "d": "1/2015"}, {"body": "cc sebmarkbage talking changing autobinding recently might insight especially context classes", "d": "1/2015"}, {"body": "idea move explicit binding model using classes maybe property initializers lets choses whether bind construction time used render according optimizations maybe way could change optimization server side render doubt since theory need bind least even server possible call callback componentwillmount would also suggest try different strategy benchmarking profiling tools tend exaggerate small methods gets called lot comment call react profile manually timing whole operation without profiler enabled see results", "d": "1/2015"}, {"body": "wrt profiling manually test mentioned removed profiler used around calls added reactcompositecomponent mountcomponent printing end rendering gives total nanoseconds used try removing method see effects total rendering time concerned render would break removed instance", "d": "1/2015"}, {"body": "yeah unfortunately breaks components testing without calling ca nt test difference", "d": "1/2015"}, {"body": "mridgway safe considered cost calling ie move outside leave empty measure nt know rendering might expensive external call prevents optimizations could contribute significantly cost probably nt never know seems high", "d": "1/2015"}, {"body": "could also maybe try calling bindautobindmethods twice see adds", "d": "1/2015"}, {"body": "right contributing quite significantly well reran tests combining calls method able get single measurement around average removing debugging adding calls spicyj mentioned able get difference calling twice thrice altogether looks like taking per render nt nearly bad initially thought still surprising long takes number probably worth extra effort minimize impact sebmarkbage changes still trying figure render times high though", "d": "1/2015"}, {"body": "nt follow argument would immutable data structures replace need understand returned different value somewhere tree need opposed something else immutability helps determine bail comparing virtual dom shallowly equal know values immutable know deeply equal well nothing update however ca nt see replace virtual dom", "d": "1/2015"}, {"body": "like gaearon said immutable collections alone wo nt remove need diffing matter fact nt think makes much sense lol might thinking along line om techniques nt mean nt need diffing said diffing mostly optimization popular creative guess important part concept react imo given reasonably faster platform like opengl probably nt need diffing since redrawing everything would faster", "d": "1/2015"}, {"body": "feel free continue discussion nothing really actionable going close get point broken implementable replace virtual dom", "d": "1/2015"}, {"body": "gaearon would immutable data structures replace need understand render returned different opacity value somewhere tree need somenesteddomnodestyleopacity opposed something else returned different opacity incoming data changed pure causes right function detectable earlier stage state diff maybe dom mutations avoidable setting document title timer things etc seen solved corner cases chenglou see react view library created bottomup reached questions state flux whole bunch architectures created solve react point view dom diff essential endpoint users luxury question everything nt care backward compatibility etc look purely theoretical topic wonder react may look like created topbottom starting state questions maybe dom diff may never required important part concept react imo exactly everything open brave new architecture built react limitations weak places", "d": "1/2015"}, {"body": "detectable earlier stage state diff hard get mean without kind proof concept least pseudocode walkthrough", "d": "1/2015"}, {"body": "recursive file search help find quickly may feasible improve warning displayname components", "d": "1/2015"}, {"body": "brigand yeah thanks seems one possible solution think ways resolve kind issues expected see issue highlighted react tab maybe component name got issue example nt think hard implement", "d": "1/2015"}, {"body": "meant displayname shown dev tools addon errorwarning messages", "d": "1/2015"}, {"body": "brigand sorry got usual console warnings missing", "d": "1/2015"}, {"body": "yea good idea entirely sure actually access owner component point may pass extra information around mean time grep best option usually people see iterating relatively small surface area possible blame nt much issue would make react friendlier would support adding long nt make code much complicated", "d": "1/2015"}, {"body": "idea move proptype validation element creation instead mount treat warnings part validation step would get warning earlier stack trace would point created element bit problematic natives environment specific since validation probably special case", "d": "1/2015"}, {"body": "problem value classname passed would helped locate problem fast instead warning unknown dom property class mean classname show warning unknown dom property class value foo mean classname made pull request first pr sure made everything right", "d": "1/2015"}, {"body": "problem valid start expression js gt interpreted greater operator code nt actually invalid first replaced compile bit tricky problem solve get correct line number side note forgot curlies around", "d": "1/2015"}, {"body": "brigand indeed nt think going easy one maybe worth adding list gotchas sort silly thing easy lose quite bit time", "d": "1/2015"}, {"body": "dakuan could use lint tool like jsxhint islint help lot catching errors", "d": "1/2015"}, {"body": "gpbl get error jsxhint give resulting js jshint", "d": "1/2015"}, {"body": "going send since error actually coming part parse step specific message different one mentioned issue class problems think definitely making messages helpful possible want make sure solve problem right way", "d": "1/2015"}, {"body": "design react poll state triggers rerenders really bypass mutate state directly need make dummy call nt really recommend either work", "d": "1/2015"}, {"body": "react requires camelcasing dom attributes even though dom attributes lowercased sometimes hyphenated however react always output correct dom attribute name markup unless seeing something else everything", "d": "1/2015"}, {"body": "confirm works fine react version gives uncaught typeerror read property reactautobindmap undefined reactclasscreateclassconstructor anonymous function jquerymobile example using component constructors way makes new version explode gaearon lays", "d": "1/2015"}, {"body": "make sure examples working release final nontrivial change broken point time check latest stable branch working examples", "d": "1/2015"}, {"body": "also", "d": "1/2015"}, {"body": "confuses", "d": "1/2015"}, {"body": "programming english map function something type get back something type js built version array map children map maps children children children opaque data structure public properties methods behavior nt violate promises react could provide converter children array probably look something like js reactchildrentoarray function children var iselement reactisvalidelement children arrayisarray children return childrenslice single child else children typeof children object iselement avoid warning missing key prop iselement amp amp childrenkey return reactclonewithprops children key return children gt else return objectkeys children map key gt assuming directly set key overrides object key nt tested children key key var props key key return reactclonewithprops children key props return children key", "d": "1/2015"}, {"body": "thanks brigand great reply one thing confuses however typically invoke case children object however invocation works fine reactchildrenmap returns instance children even though given array argument see point fair map function obligated return arrays seems problematic accepts arrays thus violating formal definition map method provided think larger question around react elements children meant interact opaque interface updated jsfiddle tries demonstrate wants shuffle list children react elements would love get thoughts best practice solving problem converter children array seems plausible wondering nt problem others yet makes think missing bigger picture cheers", "d": "1/2015"}, {"body": "way complicated involves reactchildrenforeach reactchildrencount storing sorted indexes state handling changing array indexes componentwillreceiveprops better way sort data parent component glad complicated child sorting elements nt make lot sense sort data fun implementation side note nt store elements state element used update text listitem would nt show ui component still renders elements", "d": "1/2015"}, {"body": "brigand using slice code arrayisarray children return childrenslice", "d": "1/2015"}, {"body": "dyscrete returned array sometimes always would mean toarray could nt promise allowed modify returned array decide want mostly point consistency aware convenient way shallowly clone array", "d": "1/2015"}, {"body": "brigand thanks explanation familiar use nt think completely posted", "d": "1/2015"}, {"body": "react sees single text child whereas one tutorial treated two", "d": "1/2015"}, {"body": "zpao take bit detail looked thought codebase could nt understand", "d": "1/2015"}, {"body": "thanks kevinold", "d": "1/2015"}, {"body": "writing eslint rules making sure rules also work nonjsx code zpao second suggestion eslint jsdoc rule work proposing", "d": "1/2015"}, {"body": "exiting jsdoc rule noisy tried since nt use jsdoc consistently warns way much really want catch cases break tooling example sort thing want catch", "d": "1/2015"}, {"body": "say exiting jsdoc rule mean require return option turning requirereturn turned lint rules use options think available jsdoc rule maybe options added eslint jsdoc rule instead rules become numerous enough split several rules", "d": "1/2015"}, {"body": "sexitingexisting considered adding options upstream nt care enough short term priority code see requirements niche go upstream definitely consider", "d": "1/2015"}, {"body": "first instinct put warning dev nt incur costs prod would similar style key warning used backgroundcolor probably meant backgroundcolor whatever say", "d": "1/2015"}, {"body": "zpao sounds reasonable nt think valid reason semicolon", "d": "1/2015"}, {"body": "zpao warning worth considering valid css iirc", "d": "1/2015"}, {"body": "would nt warn", "d": "1/2015"}, {"body": "zpao oh right seen plenty invalid perhaps exercise time anyway might want ignore whitespace well", "d": "1/2015"}, {"body": "working issue added warning thinking may good idea trim semicolons well warning serve let developers know invalid syntax try fix problem", "d": "1/2015"}, {"body": "react issue bind function passing", "d": "1/2015"}, {"body": "andreypopp okbut code loop props prop works uncomfortable", "d": "1/2015"}, {"body": "entirely sure updated questionpost asking nt look like react bug going close let know still believe bug reopen bind method welldocumented react introduced feature called autobinding saved typing turns source lot confusion autobinding enabled react using classes", "d": "1/2015"}, {"body": "pattern attribute recent attribute used regexpbased validation text input", "d": "1/2015"}, {"body": "get rendered element pass react", "d": "1/2015"}, {"body": "react bug simply javascript works written strings need escape avoid unescaping performed strings", "d": "1/2015"}, {"body": "duh true sorry noise thanks react", "d": "1/2015"}, {"body": "currenttarget changes event bubbles event handler element receiving event others ancestors see different values currenttarget iirc nulling consistent happens native events let know reconsider behavior", "d": "1/2015"}, {"body": "always element event listener created change event bubbles", "d": "1/2015"}, {"body": "seems disagree open console click inner div", "d": "1/2015"}, {"body": "ahhh okay bad thanks demo react always going side current dom event spec go way jquery patch specific things", "d": "1/2015"}, {"body": "wo nt always follow dom unless good reason deviate case really event handlers getting notified naming currenttarget indicates handler currently executed think makes sense leave like change event bubbles making multiple event objects would also worse performance", "d": "1/2015"}, {"body": "duplicate", "d": "1/2015"}, {"body": "events pooled wipe values want use event outside current event loop need call pull event pooling note thing properties nulled talked nt issues handy nt talk website probably", "d": "1/2015"}, {"body": "thanks zpao really appreciate explanation using still noticed although properties kept intact reason updated jsfiddle", "d": "1/2015"}, {"body": "use instead", "d": "1/2015"}, {"body": "different", "d": "1/2015"}, {"body": "yup sorry misread assumed related events makes deepest children", "d": "1/2015"}, {"body": "created new ticket", "d": "1/2015"}, {"body": "something like react devtools aware chrome console returns currently selected element elements tab", "d": "1/2015"}, {"body": "add", "d": "1/2015"}, {"body": "said neat component", "d": "1/2015"}, {"body": "call duplicate reopen disagree", "d": "1/2015"}, {"body": "propose backtick part spec wrote ca nt even implement let revisit", "d": "1/2015"}, {"body": "done", "d": "1/2015"}, {"body": "immutability note started using fluxy uses mori internally store states started using object subtrees store state components like cursor component listens changes store cursor key array scope get diffs store changes replace state new cursor working pretty well hate lose time planning supporting something like immutablerecord might cool fluxy working abstracting immutable data structure implementation support immutablejs honest tying react specific implementation immutable data kinda defeats purpose comes modularity maybe hooks allow plugin use wether immutablejs mori", "d": "1/2015"}, {"body": "bit loop state setting merging still gon na work see convenient long time come go immutable rather return whole state object avoids merge uses structural sharing much possible whatever custom mechanism mentioned issue though nt think needed solution edit wan na type check well want accept full objrecord right", "d": "1/2015"}, {"body": "main place usesee use replacestate already done merge setstate would work also inefficient pattern tends arise react inability queue immutable updates js thissetstate incr thisstatea setstate async would throw changes thissetstate incr thisstatea async things final state depends batching strategy unless batching strategy nexttick race conditions asyncthing gt thissetstate incr thisstatea state gt stateab stateab vs hypothetical safe variant thisenquestate incr thisenquestate incr asyncthing gt thisenquestate incr state gt stateab", "d": "1/2015"}, {"body": "considering dropping replacestate ideally state always keep consistent signature defined getinitialstate always loved idea nt think negates value however requiring calls provide full state would surely make practical entirely obvious would keep useful without ruining part appeal brigand feel quite confident inefficient case really measurable real life scenario could wrong", "d": "1/2015"}, {"body": "presumably engine hidden classes optimization mutable object may dangerous think ideally clone freeze objects anyway already props createelement", "d": "1/2015"}, {"body": "use maven use successfully makes maven installs nodejs install build process includes gulp script runs browserify compile jsx", "d": "1/2015"}, {"body": "explicit support kahwee mentioned integrations maven js ecosystem integrate react transforms", "d": "1/2015"}, {"body": "may bug happening button form default type submit bug spec nt say emit click event submit button form submitted otherwise one many dom quirks cs js tabs spaces add props solve", "d": "1/2015"}, {"body": "yep solves thanks", "d": "1/2015"}, {"body": "mention think quite easily realistically solvable dev least cc zpao", "d": "1/2015"}, {"body": "think stored directly reactcomponentelement props trying example appears work", "d": "1/2015"}, {"body": "awesome work nt realize stored way thanks", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "going close refer issue let know nt enough answer questions give idea direction heading", "d": "1/2015"}, {"body": "could stringify state meta tag document", "d": "1/2015"}, {"body": "people couple different ways stringifying initial props making sure part initial call way typical route injecting global variable data script tag using meta tags interesting way go could see working pretty well requesting data way go obviously drawbacks might end least complicated way application works great drawbacks going close really issue react mailing list stack overflow probably better places continue discussion feel free keep going", "d": "1/2015"}, {"body": "requirement put anything however generally good idea stick plain objects example immutablejs types usually nt want object state mutated somewhere deeply inside would nt able compare previous next states example easier reason state immutable said hard requirement put whatever want object mutated elsewhere note react way know changed unless call object also note missing potential effortless optimizations purerendermixin state contents mutable since state longer shallowly compared", "d": "1/2015"}, {"body": "helpful thank", "d": "1/2015"}, {"body": "microdata props know already support specified nt appear anywhere schemaorg spec props please let us know", "d": "1/2015"}, {"body": "yea know fbme cdn really set real cdn suggest host files production environment use one real cdns link probably change wording around fbme links make clear limitations plan eventually better supported official cdn mean time going close fbme limitation nt something fix fbme redirect service nt support", "d": "1/2015"}, {"body": "yeah currently running browserifygulpconcat bundling keep everything single file atm alternative running sorting version latest react might location point docs instead fbme", "d": "1/2015"}, {"body": "think covered via master alpha", "d": "1/2015"}, {"body": "gearon yes agree thank", "d": "1/2015"}, {"body": "also got backported able update see warning", "d": "1/2015"}, {"body": "nice zpao thanks pointing", "d": "1/2015"}, {"body": "think covered", "d": "1/2015"}, {"body": "yeah nice already like specifically catch error way stack shows console nt anything get information", "d": "1/2015"}, {"body": "well catching would blow rendering best way however think might useful browsers support otoh sure stack trace would helpful full react stuff often directly related problem breaking warning would least allow inspect whatever failed check", "d": "1/2015"}, {"body": "another option use subclass instantiate error soon something detected used incorrectly consoleerror right debugging source errors huge time vampire gaearon long stack trace long enough contain function calls code nothing inherently wrong lots react stuff stack traces libraries black box except things fail things fail want able see happened ca nt see happened black box effectively debug errors causes incorrect usage libraryframework debugging problems react code becomes harder people encounter ca nt give much information contributors react figure something react needs fixed", "d": "1/2015"}, {"body": "suspect misunderstanding though certain issue phone react api supports event capturing phase eg pointerevents gotpointercapturereleasepointercapture events", "d": "1/2015"}, {"body": "event specifically", "d": "1/2015"}, {"body": "boljen mouseeventcapture events never heard also see list mouse events", "d": "1/2015"}, {"body": "mouseeventcapture events never heard also see list mouse events react react clearly also doc event handlers triggered event bubbling phase register event handler capture phase append event name example instead using would use handle click event capture phase say look like bug", "d": "1/2015"}, {"body": "oh nice missing part docs guess since enterleave bubble nt make sense capture", "d": "1/2015"}, {"body": "mixin functions like attach component nt access either parent would mean even static function want note nt specific mixins mixin fine closing", "d": "1/2015"}, {"body": "thanks response still nt understand component mixing use component parent ca nt access functions component know best idea little crazy im making find workaround thanks", "d": "1/2015"}, {"body": "still nt understand component mixing use component parent ca nt access functions component example specific component instance class many instances way convention use camelcase class names instead eg js top level var instance reactrender documentbody inside another component use refs var someothercomponent reactcreateclass componentdidmount function ref corresponds instance render function return reactrender documentbody however way normally make things happen react codebase hundreds react components neither exposes public methods also try hard use escape hatch instead embrace topdown data flow try toplevel updates drive changes application refs warns programmed several apps react first inclination usually going try use refs make things happen app case take moment think critically state owned component hierarchy often becomes clear proper place state higher level hierarchy placing state often eliminates desire use refs make things happen instead data flow usually accomplish goal thinking react shows proper way components communicate", "d": "1/2015"}, {"body": "thanks gaearon comments true im overusing refs start spend time see replace states thanks time comments", "d": "1/2015"}, {"body": "leaves rest arguments filled caller assign bound event handler get second argument fails also antipattern ing performant called time may lot unnecessary function allocations", "d": "1/2015"}, {"body": "error console explaining error invariant violation enqueueupdate called callback nt callable sure else really gaearon mentioned passed function gets called event callback nt callable hit invariant truthy check invariant nt hit null undefined nt add callback queue falsey though couple lines lower send without falsey check throwing well later cc spicyj handle", "d": "1/2015"}, {"body": "looking code ca nt figure nt always throw batchedupdates callback nt specified probably tired right", "d": "1/2015"}, {"body": "yea limitations service really cdn use another cdn service see comment", "d": "1/2015"}, {"body": "think gone hiding internal instance public one likely still couple though maybe could consider double underscoring react private things cc sebmarkbage", "d": "1/2015"}, {"body": "nt think anything js jsx differences use arrays nt specify keys react wo nt able efficiently tell moved item changed may result wasted time updating whether js jsx specifying child help react update dom efficiently specify key plan js pass children prop", "d": "1/2015"}, {"body": "error nt show use arguments instead arrays nothing say could nt put array reason see warning one case use jsx array means printing list items likely something keyed instead simply basic child dom elements", "d": "1/2015"}, {"body": "use arguments react implicitly uses order keys unlikely order could change elements staying jsx corresponds multiple explicitly defined children case would silly specify keys guess said last ca nt see reason difference plain js jsx behavior", "d": "1/2015"}, {"body": "following examples exactly one produces warning understand react chosen warn using arrays arrays might mean order may change obviously always case probably less likely working javascript api arrays useful structure work much performant pass around concatenating applying arguments like example provide ability simply turn warning always assume engineer using arrays without keys something wrong", "d": "1/2015"}, {"body": "probably less likely working javascript api would nt sure imo would common plain js code would shame miss cases somebody nt use jsx hand way suppress warning passing stuff around found use arguments spread array cleaner syntax assuming use transpiler", "d": "1/2015"}, {"body": "mlmorg offtopic primarily intended jsx afaik using exists nonjsx crowd however curious may wrong sense seeing issue lot dynamically constructing nonkeyed array items nt really done implicit key system used react work best elements fixed indices ie better construct maintaing holes like helps reconciliation without overzealous keying offtopic probably nt apply know nt might interest though using instead places issue believe still officially ok would give result want", "d": "1/2015"}, {"body": "believe still officially ok would give result want oh wait talking objects pardon", "d": "1/2015"}, {"body": "heuristic people gets keys wrong time even warning place likely forget key dynamic array nt think implicit key default ask optin keys really always provide explicit key even static set might switch two different static sets really warning children property extra children arguments really special cased way avoid providing implicit keys indicating static set items certainly trick system using however idiomatic use static notation var args would clearly indicate dynamic set spread operator makes lot easier use arrays rest arguments kind unfortunate end day prevent shooting foot heuristic use avoid common source errors come foolproof system different heuristic means let add instead closing since currently way avoid syranide pointed would recommend making common practice though since lack keys cause severe bugs", "d": "1/2015"}, {"body": "mean solve", "d": "1/2015"}, {"body": "zpao mean solving like done node properties enforcing types wrapping trycatch perf though simply continue let error invalid style values worth", "d": "1/2015"}, {"body": "want", "d": "1/2015"}, {"body": "something like", "d": "1/2015"}, {"body": "ca nt set props via see fiddle", "d": "1/2015"}, {"body": "oh see example class works need put props like example component create c specific props b get prop add something else rendering", "d": "1/2015"}, {"body": "nt think good practice maybe check would probably pass c props c seperate components var props thispropsc propsnewprop new", "d": "1/2015"}, {"body": "yeah thought changed code put c inside instead b avoid issue", "d": "1/2015"}, {"body": "figured application using", "d": "1/2015"}, {"body": "api would added took liberty update description issue nt see seems bit unnecessary", "d": "1/2015"}, {"body": "hmm comment dom element would part", "d": "1/2015"}, {"body": "set builtin helpers calling edit also note technically comment dom element dom node unless talking different anything would translate", "d": "1/2015"}, {"body": "ah yes agreed", "d": "1/2015"}, {"body": "would comments diffed part reconciliation stripped production btw make custom comment component renders null production visible devtools development sure benefits though", "d": "1/2015"}, {"body": "sebmarkbage hmm perhaps comment considered special case makes sense sure comment node universally useful really useful dom frontend behave like regular reactelement really make sense would considering elements share single dom svg composite etc makes sense universally useful like say fragment nt seem like would better specialcased something edit guess could make sense consider comments could helpful debugging tool frontend would map noop ca nt make use hmm", "d": "1/2015"}, {"body": "browser xmlhtml dom interesting kind nodes document dom class nodetype nodename attr attributenode thisname element elementnode thistagname text textnode text cdatasection cdatasectionnode cdatasection documentfragment documentfragmentnode documentfragment comment commentnode comment document documentnode document documenttype documenttypenode thisname processinginstruction processinginstructionnode thistarget useful able render use react serverside render arbitrary xml documents already support five dom constructor react constructor react signature documentcreateattribute key value key value documentcreateelement type reactcreateelement type props type props documentcreatetextnode txt string number documentcreatecdatasection txt string number documentcreatedocumentfragment array could add support final four well get complete support dom constructor react constructor react signature documentcreatecomment data reactcreatecomment data type comment data implementationcreatedocument reactcreatedocument props type document props implementationcreatedocumenttype name publicid systemid reactcreatedocumenttype name publicid systemid type documenttype name publicid systemid document createprocessinginstruction target content react createprocessinginstruction target content target content comment valid create using use think use api also different signature accepts string data field rather complete props object useful combination create document type well rest", "d": "1/2015"}, {"body": "sebmarkbage hmm bit confused thought idea universal interface creating elements understood interpreted active frontend right dom saying separation nt make sense nt mean dom frontend implementation details leak react api illustrate thoughts would make sense exposed would isolated react api frontends etc nt seem like apply universally react frontends map straight dom implementation think apply equally well frontends ie dom api well designed adopting ps react signature fragment nt thought able key important", "d": "1/2015"}, {"body": "syranide right however currently module already overloaded dom specific apis move separate namespace interesting exercise though would make sense ability define comment environments others probably unique dom ps might need additional representation keyed fragment discussion going space currently", "d": "1/2015"}, {"body": "sebmarkbage future guess expand context bit seems matrix debugginglogging human consumption informational data computer consumption semanticcontrol meaning computer consumption exists react avoids instancing overhead b exists react frontend renderer c exists react frontend renderer rendered representation makes sense level good developer tool abc make largely pointless seems legitimacy still think makes sense think props could make sense hypothetical scenario frontend might able gather present something interesting additional data currently used quite bit believe noop composite components abused quite frameworks good way around staticness html dom something would ever strive replicate elsewhere could make sense right makes sense seems could value comments universal api however slim might", "d": "1/2015"}, {"body": "deprecate keyed objects children sometime", "d": "1/2015"}, {"body": "ah yes", "d": "1/2015"}, {"body": "usually set variables null cases also serves kind documentation think react trying save allocations although sure", "d": "1/2015"}, {"body": "going gaearon explicitly setting allowed state properties good documentation also optimization two actually reduce allocations shadow classes also mention mention allowing set state properties exist else throwing think sounds like really great idea another reason would want explicit", "d": "1/2015"}, {"body": "also mention mention allowing set state properties exist else throwing think sounds like really great idea another reason would want explicit love case btw", "d": "1/2015"}, {"body": "gaearon speaking devil idea make state recordlike object fixed keys eg specify keys initial state never add extra keys ensures type stability type systems vms also ensures explicitly define initial descriptive value", "d": "1/2015"}, {"body": "fixed code bit work okay javascript var testcase reactcreateclass render function var options eisenhower map function x return", "d": "1/2015"}, {"body": "nt actually thing example entirely legal occasionally useful two different descriptive text placeholder match one placeholder longer selectable", "d": "1/2015"}, {"body": "say order control without subtle failure cases exist html selection actually needs occur rather", "d": "1/2015"}, {"body": "descriptive text give option attribute used set like", "d": "1/2015"}, {"body": "oh smile indeed solve problem thank cody still feel like possible documented may confuse others longer necessity far understand however still behavioral contrast html seems mildly undesirable", "d": "1/2015"}, {"body": "yeah think error aggressive catching things loosened restriction bit probably still tight commit nt going merged anyway workaround using directly invoke reactcreateelement bypasses jsx transformations since standard javascript put squiggly brackets jsx admittedly ideal error going removed soon anyway temporary migration hack cc sebmarkbage", "d": "1/2015"}, {"body": "using makes sense took quicker way since case static terms code svg idea error removed though also idea like namespace", "d": "1/2015"}, {"body": "idea error removed though think deprecations usually kept one version birdie whispered ear might come around early february guarantees", "d": "1/2015"}, {"body": "gaearon cool wait thanks jsfb keep issue open till required code merged released", "d": "1/2015"}, {"body": "needed error one version since used work different semantic meaning nt want silently swap semantics versions break one reenable different semantics", "d": "1/2015"}, {"body": "sounds good sebmarkbage leave issue open till comes go ahead close", "d": "1/2015"}, {"body": "let leave open jsfb lands pr master fix", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "one reasons added react may load immediately many tools wants notified react loaded available might also multiple reacts single page least multiple iframes idea tools override chain hook running devtools react loaded", "d": "1/2015"}, {"body": "chaining would cool nt work way devtools hook ran ca nt inject called somehow moreover devtools define nonwriteable way change hook api explicitly support chaining", "d": "1/2015"}, {"body": "think part makes clear happens dom updated postrender invoked immediately updating occurs method called initial render use opportunity operate dom component updated however overall agree descriptive visual lifecycle explanation would welcome", "d": "1/2015"}, {"body": "clear enough though react good job making sure normally nt work dom case really need explicit text says use opportunity operate dom finished without still entirely possible offering way mess dom updates subsequent render calls worked", "d": "1/2015"}, {"body": "finished would nt entirely correct though nt anything per se builds virtual dom tree", "d": "1/2015"}, {"body": "componentdidupdate componentdidmount always called dom updated update docs want send pull request", "d": "1/2015"}, {"body": "read cla carefully file prs mean time clarification deem addresses issue fine", "d": "1/2015"}, {"body": "pomax fact lets operate updated dom implies postrender", "d": "1/2015"}, {"body": "zeusdeux sure love know get actual words used text rather text read paired knowledge react case three people went dom updates sweet let change text longer implied explicit new users nt scratch head going mean updated tutorials mostly talk updating sense state props changing text also talks working dom nt clear enough", "d": "1/2015"}, {"body": "pomax looks like pr material", "d": "1/2015"}, {"body": "indeed filing one read cla issues clas filing issue instead hopefully people working code find opening docs file github hitting edit dropping much work", "d": "1/2015"}, {"body": "sure formset perhaps meant fieldset stupid let know reopen", "d": "1/2015"}, {"body": "nope totally brainfart could nt remember fieldset cheers", "d": "1/2015"}, {"body": "done", "d": "1/2015"}, {"body": "cc zpao", "d": "1/2015"}, {"body": "cc spicyj", "d": "1/2015"}, {"body": "updated", "d": "1/2015"}, {"body": "mixin mechanisms yui widget extension rickbeerendonk proposed reasonable", "d": "1/2015"}, {"body": "gaearon used constructing purposes used destructing constructed component builds something mixin already constructed removed mixin additions removed destructing reverse order constructing", "d": "1/2015"}, {"body": "mentioned briefly understand correctly mentioning posterity", "d": "1/2015"}, {"body": "hmm opted deterministic ordering calls instead special casing specific lifecycle methods see totally get coming consider cc yungsters originally proposed", "d": "1/2015"}, {"body": "clarify point protecting behaving differently", "d": "1/2015"}, {"body": "explicitly say documentation goal guard setstate right nt work cases", "d": "1/2015"}, {"body": "question point adds lot boilerplate possible build check unless call expensive nt see advantage making developer explicitly check time", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "yeah check rather tedious imo rather returning boolean could nt", "d": "1/2015"}, {"body": "however since would always use would see use sure need replace function entirely either way work fix issue", "d": "1/2015"}, {"body": "imagine setstatesafe would use internal logic determine safe rather using ismounted could even fail silently rather throwing error like currently might use case unsafe setstate ca nt think one certainly unlikely case", "d": "1/2015"}, {"body": "think general react pattern blowing face use wrong case point setstate component mounted plenty others general good however cases know would nice suppress errors would see distinction used component known mounted probably eg handlers etc asynchronous callbacks timer ajax call etc", "d": "1/2015"}, {"body": "sbrandwoo understanding supposed use componentwillunmount clean timers cancel async requests etc failure cleanup often code smell indicates memory leak even severe bug said case asynchronous callback easy imagine would easier ignore update rather attempt cancel callback ismounted could come handy guard component unmounted think effectively dead nt think remounted least opaque prerendered components supported really nt reason update anymore would strongly imply bug said nt see could nt set state unmounted component expected behavior would effectively noop intuition would remove error check make setstate forceupdate valid time maybe warning findbugs turned suspect sebmarkbage strong opinions topic", "d": "1/2015"}, {"body": "jsfb provide concrete example use case timer component counts seconds one method create interval another clear interval call method clear interval tick componentwillunmount first case want second ca nt way know know whether safe within method without passing parameter", "d": "1/2015"}, {"body": "checks see function validatelifecycleonreplacestate instance reactcompositecomponentjs wrote mixin due limited access internals happy result", "d": "1/2015"}, {"body": "yea reason error exist enforcing properly clean components could well ignore value think likely make warning least make sure nt break reconciliation throws would like deprecate really used escape bypass error error help easiest way avoid error add check circumvents whole purpose error first place fixing root problem know tend take shortcuts whenever practice go unfixed three separate scenarios play sometimes asynchronously times synchronously calling method might set state generally really bad idea race condition act differently depending timing system testing wo nt reveal scenarios end user hit write completely immutable style bad still considered bad practice cached values would like use instead causing two renders least build separate synchronous api eg getinitialstate better violating expectations promise async callback additionally current server rendering model best practice trigger async sideeffects since fire client however mostly nonissue solved since currently still allowed componentwillmount setstate componentwillunmount way unify resetting values clearing asynchronous callbacks pattern seems bit unnecessary unmounting reaching completion two different concepts usually different code paths even thing might worth separating make refactoring easier one changes nt see major issue even need error production could warn dev nt suffer consequences could even drop warning however question commonly mistake legit pattern legit pattern warn since warnings meant cleaned excessive warnings creates apathy however even legit warn anyway majority case mistake sure could go either way nt think common mistake sure calling setstate component completely unmounted strong indication asynchronous callback nt properly cleaned unfortunately mainstream js apis makes easy avoid cleaning hanging asynchronous callbacks one callback nt big deal however callback hangs objects intermediate callbacks promises subscriptions alot components quickly run memory issues case death thousand cuts always reason avoid complexity cleanup logic end convincing ok special case run gc memory issues blame react slow especially critical mobile devices memory issues cause browser crash two types callbacks infinite long living callbacks event handlers fire multiple times also single fire callbacks promises promises bad since resolve cleaned however also live long time eg data requests sometimes long timeouts handle lowlatencybandwidth environments example second timeout also example long living promise components frequently unmount remount accumulate lot hanging promises finally crash therefore really bothers js community adopted promises scale since nt come cleanup mechanism however pragmatic point view probably allow pattern work since promises common make difficult clean warned big issue ca nt really tell callback coming promise long living event failure cleanup long living event common dangerous mistake prevent mistake happening even current callstack coming promise guarantee promise could fired persistent event subscription called setstate eg flux store ultimately think solution build support promises state way easily make exception ignore warning promise resolves late also build support observables make easy get cleanup free could easily ignore setstate calls need another way ensure making common dangerous mistakes", "d": "1/2015"}, {"body": "sebmarkbage thanks points think position react police enforcing good practices subjective opinion blowing app throwing hard errors imo warning would good enough thank consideration", "d": "1/2015"}, {"body": "shubik react already fails pretty softly bunch places believe fatal complicated balance making abundantly clear developer exactly whenwhere things go wrong vs failing quietly agree sebmarkbage need way ensure developers making common dangerous mistakes provide escape hatches like ismounted developers know said intuition would setting state unmounted component would analogous noop tend favor removing error", "d": "1/2015"}, {"body": "jsfb completely agree ideally would ignore setstate unmounted component given log level print respective warning would expect hard error library internal error situation expected although desirable opinion use case", "d": "1/2015"}, {"body": "probably make warning however note treat react warnings errors except different code path error case ie strive never warnings code base even warning fully supported use case risk breaking would like able fully support use case api nt know distinguish clearly bad case hanging callback valid opinion pattern", "d": "1/2015"}, {"body": "sebmarkbage async xhr bad case also common case probably common timeouts intervals commenters talked hand others pointed forced check ismounted every setstate make sure react never errors said main argument makes sense throw error internal error react eg using wrong arguments react methods etc executing async callback case thanks lot time dialog us", "d": "1/2015"}, {"body": "common case nonreact eg event handlers although unbind still seem come calling fails without guard", "d": "1/2015"}, {"body": "gaearon sounds like bug either code react case able reproduce take look", "d": "1/2015"}, {"body": "sebmarkbage yeah see extract", "d": "1/2015"}, {"body": "mteichtahl wanted checkin regarding issue nt heard anything days mean got working believe bug react provide simple example demonstrating issue", "d": "1/2015"}, {"body": "jim sorry forgot close nt bug forgot enable harmony transpiler close sent iphone jan jim notifications githubcom wrote mteichtahl wanted checkin regarding issue nt heard anything days mean got working believe bug react provide simple example demonstrating issue reply email directly view github", "d": "1/2015"}, {"body": "enabling harmony transpiler fixed issue mteichtahl closing bug thanks good luck building app", "d": "1/2015"}, {"body": "attributes need set element injection order take effect also underlying issue react nt let set unknownunrecognized attributes perhaps duplicate", "d": "1/2015"}, {"body": "online react compiler seems use instead", "d": "1/2015"}, {"body": "easy reconstruct ids client render react go way like pr entire rendered tree would updated reconstructed first client render may may bit perf issue", "d": "1/2015"}, {"body": "syranide nice", "d": "1/2015"}, {"body": "spicyj sticking casesensitive makes sense especially svgtags actually casing", "d": "1/2015"}, {"body": "rickwong fastclick nt work react react faux events wish support tho include click helper mixin everywhere kinda gross", "d": "1/2015"}, {"body": "odd impression fastclick works properly react", "d": "1/2015"}, {"body": "spicyj people run working asking around everyone hacks around", "d": "1/2015"}, {"body": "hey zpao newbie happy help willing provide bit direction willing improve consistency tests", "d": "1/2015"}, {"body": "awesome sorry delay getting back though brought actually related testing warning messages bunch places set use assert calls wrap everything tryfinally reset consolewarn original jasmine built use bunch places thing less crazy way may patterns like consolewarn one thinking filed", "d": "1/2015"}, {"body": "sobering going take one could", "d": "1/2015"}, {"body": "kevinold feel free take already done", "d": "1/2015"}, {"body": "deciding write jsx jsx nt support namespace attribute value even transform ca nt namespace attribute value reason ca nt transform", "d": "1/2015"}, {"body": "afaik namespaced attributes need support approach makes sense think zpao", "d": "1/2015"}, {"body": "confused nt supposed working since release notes state lower case tag names always treated html tags upper case tag names always treated composite components yet try render getting linked gist also gives impression work", "d": "1/2015"}, {"body": "pekeler fixed", "d": "1/2015"}, {"body": "great thanks andrewrota", "d": "1/2015"}, {"body": "beginner web developer windows might get discouraged thought install python middle tutorial mentioning could help plus newer nodejs developers might excited discover package", "d": "1/2015"}, {"body": "solution suggested qingyun work used following snippet require scriptsreactbundlejs browser showed following code appjsx file got following warning windows console warning provided prop form field without handl er render readonly field field mutable use otherwise set either check render method using defaultvalue instead value solution however used placeholder instead value also worked actually appjsx file used routing following way postlist require componentspostlistjsx command prompt got warning message email input element however use attribute inside postlistjsx get warning message fields become readonly", "d": "1/2015"}, {"body": "maybe want try directly tag files loaded tag running different contexts guess problem caused difference context using load js files works", "d": "1/2015"}, {"body": "qingyun goes said need replace wrong got error", "d": "1/2015"}, {"body": "plain html file error message shows replaced put jsx file", "d": "1/2015"}, {"body": "qingyun yes file used files browserified", "d": "1/2015"}, {"body": "use directly js code seems jsx compiler escape js code tag text inside mean using use load root js file load js files use well js files loaded running context node instead webkit", "d": "1/2015"}, {"body": "qingyun react files ones browserified client side code use ask write files files avoid browserifying", "d": "1/2015"}, {"body": "problem caused using different contexts work fine nt use could show original error message guess maybe different problem mine", "d": "1/2015"}, {"body": "qingyun already shown require one inside tag wish use solution", "d": "1/2015"}, {"body": "think talking two different problems jsx files packed one single file nt need use course nt need face problem caused using two different contexts problem nt know nt load directly main html file like really want write js code tag rendered react think dangerouslysetinnerhtml want", "d": "1/2015"}, {"body": "ok see sounds like uses instead nt failing hard however think pretty reasonable us make assumption uses protect check mimicking browser environment something like nodewebkit using library made run browser add globals would expect actually little bit surprised nodewebkit nt see check could perhaps bit restrictive maybe add check nt think really worth protecting every potentially different environment", "d": "1/2015"}, {"body": "recently noticed severe issues csstransitiongroup android chrome attempted make reduced test case surprise found another issue exists browsers original android chrome issue nt trigger transitions triggering almost ever even single item issue reproduceable browsers test case codepen everything fine stuff relatively slow pace start hitting stuff browsers begin either trigger transitionend event react react fails notice event correctly end result elements remain dom longer exist depends lot browser easily issue triggers seems well make fail keep enter long enough firefox nt well chrome worst easy make fail even regular clicking notice clear design flaw made please tell ca nt see big issue seems like better use csstransitiongroup due bugginess lots elements nt good fallback fails receive transitionend event update fixed one small array push issue seems work perfectly browsers still fail though", "d": "1/2015"}, {"body": "mentioned elsewhere worth repeating timeouttransitiongroup much stable nt rely buggy event never mind jquery dependency tweak use yes bit extra hassle maintain matching durations css components worth stability hopefully matures much better transition group", "d": "1/2015"}, {"body": "think effectively duplicate going close duplicate please reopen incorrect action", "d": "1/2015"}, {"body": "also hit problem however stacktraces give clue happened meaningful error messages production", "d": "1/2015"}, {"body": "thanks", "d": "1/2015"}, {"body": "anyone else cares also found another way manage create two components use mixin component top level element inheriting component example new pattern javascript var button reactcreateclass getdefaultprops function return buttontext click buttonaction function noop render function return var custombutton reactcreateclass getdefaultprops function return buttontext text render function return somemethod function alert hey clicked seems might pretty decent solution like elegance mixins composition better pattern overall inheritance frameworks restriction think decent way go thisi created components way found pretty powerful naive examples like one one major downside see verbosity code especially since almost boilerplate lastly actually shared methods properties still using mixins many modular components made mixins single component", "d": "1/2015"}, {"body": "pretty much also find pretty powerful also combination", "d": "1/2015"}, {"body": "gaearon yeah children great despite methods think issue still valid confusing nt work way start", "d": "1/2015"}, {"body": "problem also occurs value extended jsfiddle show selectproblem", "d": "1/2015"}, {"body": "thought problem turns container removed animating node reinserted dom try breaking subtree modifications node removal find right node get removed several transitions works fine long new state nt require accidentally trigger modification dom corresponding animating node fact happening state nt require dom modifications specific part tree try adding key element containing transition group hope helps", "d": "1/2015"}, {"body": "try breaking subtree modifications node removal find right node get removed useful tool debugging reconciliation weirdness", "d": "1/2015"}, {"body": "seems use rewire replace way var rewire require rewire var mockcomponent require mockcomponentjsx var targetcomponent rewire targetcomponentjsx targetcomponentset requiredcomponent mockcomponent however hope depend allinone testing tool", "d": "1/2015"}, {"body": "since getting deprecated closing new version nt require filter lives", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "yeah makes sound actually use touch events", "d": "1/2015"}, {"body": "zpao ygrenzinger wasam problem put nashornreactfail minimal test case reproduce think nashorn react issue debugging stuff pain ass nt know sure find workaround tl dr certain conditions using react context error happens adding differently named nonlifecycle methods parent child seems make work", "d": "1/2015"}, {"body": "zertosh thanks repro cc jsfb know java background could look", "d": "1/2015"}, {"body": "zertosh yes thank great repo zpao confirm fails using npmreact hacked internal build error went away means likely either issue npm build process issue fixed master heisenbug bug nashorn npmbuild see happens think able close one", "d": "1/2015"}, {"body": "shimmed internal build nt work since sounds like broken least since appears resolved going close bug resolved zertosh may worth checkingbuilding master using version react run issue let reopen issue dig", "d": "1/2015"}, {"body": "thanks jsfb even working fine seems stable enough going keep using one nashorn apps see catch anything else", "d": "1/2015"}, {"body": "apparently onchange nt trigger file input loses focus ie lt nothing react canshould fix closing", "d": "1/2015"}, {"body": "thanks documenting issue confused got point tutorial encountered error console simply reordering two sections fixed perfectly submitted pull request change let know anything else help", "d": "1/2015"}, {"body": "way involving transpiller achieve goal possible change signature classset take object array like little ugly agree solves problem also possible make function cx polymorphic change backward compatible", "d": "1/2015"}, {"body": "unrelated react jsx transform already transpiler somewhat slower react transform unresolved minor jsx parser bug really happy going back", "d": "1/2015"}, {"body": "react support trigger method even better support custom event bubble like would easier parentchild management menumenuitem component", "d": "1/2015"}, {"body": "looks like nt really used much may able remove completely", "d": "1/2015"}, {"body": "made pull request fix selfclosing tags boolean attributes still leaves features implemented including xml namespaces required standalone documents valid polyglot html raw text elements tags xml lang attributes comments containing sequence extra whitespace added html elements pre textarea etc definitive reference generate markup parses parsing modes polyglot markup robust profile vocabulary long run able generate nonhtml vocabularies would nice standalone svg documents docbook atom etc", "d": "1/2015"}, {"body": "ping resolved uglifyjsmaster least react go way ask though", "d": "1/2015"}, {"body": "safari desktop ios several issues css transition first place anyone found whether react animation specific issue safari issue", "d": "1/2015"}, {"body": "rhobot think caused change bug recent version coreanimation safari uses hood wickynilliams said fix moving declaration fiddle works safari well older browsers", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "fyi faking shilpan mentioned may harder seems apparently native event fire transition ends offscreen case element may better react handle native behavior supported browsers let us handle custom code old browsers", "d": "1/2015"}, {"body": "update regarding feature", "d": "1/2015"}, {"body": "possibly related example invariant violation errors sometimes strange rerendering behavior discovered added whitespace children experience specifically table row jsx bug something add jsx gotchas", "d": "1/2015"}, {"body": "pain well particularly painful designer matter fact kind nice component could output node therefore nodelist fragment instead element", "d": "1/2015"}, {"body": "saying advocating returning multiple children component love methods extract js render function return rendersomething return lt gt thispropstitle thispropssubtitle amp amp thispropssubtitle probably shut use", "d": "1/2015"}, {"body": "gaearon already though need return array bit cumbersome though yes buuuuut work around hacked component translated array overloaded could also assume want avoid hacks edit bad overloaded", "d": "1/2015"}, {"body": "problem arrays trip designer need commas explicit keys", "d": "1/2015"}, {"body": "gaearon yeah avoid commas using either two workarounds find either acceptable mean explicit keys", "d": "1/2015"}, {"body": "use array syntax need specify element hard feels awkward know never change", "d": "1/2015"}, {"body": "gaearon ah yes choose mentally ignore warning really want avoid avoid edit although obviously ca nt use adjacent children could use flattening helper yeah", "d": "1/2015"}, {"body": "updates might blessed go master bucketful potential use cases love able start playing around see understanding still unstable", "d": "1/2015"}, {"body": "agreed use case animation library bugs roll shoddy version would nice know current thoughts release schedule", "d": "1/2015"}, {"body": "serverside see reason everyone ca nt share single flux store jsfb everything seen points stores fully synchronous actually asynchronous action action creator eventually triggers another action causes store update without pieces instanced per request appears stores act like serving every user find way determine done environment ie finish request ensure stores nt holding references data done ensuring hold client use alternative mechanism change events getting data source request could clarify get around thinking simple service modules export functions communicate callbackspromises rather flux", "d": "1/2015"}, {"body": "brigand yes singletons without drawbacks thus motivation pass flux stores context variables gt thus desire implement context variables interpretation correct use singleton store server side need stores act like serving every user may likely end different serverside store implementation conforming interface backed directly database since cost tradeoffs entirely different server side security enforcement policy inherently different etc backed database definition source truth go straight database therefore nt need worry tracking done state worry change events sacrifice little isomorphism gain simplicity implementation ie nt need track done state nt dealing change events serverside may wanted anyway securityperf reasons intent hijack thread merely point alternatives flux stores use singleton model long store implementations conform multiuser interface instead singleuser interface said implementing context variables think may valuable situations advocating one solution solutions tradeoffs natew even switch parent based contexts number design decisions surrounding contexts still need figure likely take us time feel comfortable publishing supported feature", "d": "1/2015"}, {"body": "thank clarification makes lot sense see simplify things", "d": "1/2015"}, {"body": "nt ton add tell story added around hidden input first put nonactive classes read docs sass newpass iconheight height iconheight overflowy hidden amp slideenter maxheight transition maxheight easeinout amp slideleave maxheight iconheight transition maxheight easeinout really old ipad gave weird jump end animation happily could reproduce emulator tapped add barcode would open jump closed jump open hidden autofocused input supposed take input barcode scanner found thread tried moving stuff classes sass newpass iconheight height iconheight overflowy hidden amp slideenter maxheight amp slideleave maxheight iconheight everything cake", "d": "1/2015"}, {"body": "spicyj right webpack smart enough strip dead requires strips dead code paths entirely build preminified code instead get much nicer", "d": "1/2015"}, {"body": "wow totally missed response zpao pushed updated version uses instead nt problem quick time benchmark vs extra uglify pass time difference negligible though able shave sec turning compress options first pass since dead code removal matters sec improvement prob less faster machines nt worth pring changes grunt task allow passing options transforms disappointed real killer", "d": "1/2015"}, {"body": "hi guys issue referenced looks reactjsreactrails related one input welcome", "d": "1/2015"}, {"body": "would really cool able verify right react component passed property docs little confusing looks like validating right react message component getting passed", "d": "1/2015"}, {"body": "yea current work around something like think need broader solution testing specific types usually want correspond specific interface actual implementation flexible certain set props defined", "d": "1/2015"}, {"body": "closing since deprecating new allocfree version lives", "d": "1/2015"}, {"body": "light firstclass refs think need wontfix thanks kimagure sending pr though appreciate even though going end taking", "d": "1/2015"}, {"body": "closing since deprecating new allocfree version lives", "d": "1/2015"}, {"body": "fantastic", "d": "1/2015"}, {"body": "huge fan idea definitely want enforce project tried manually freezing props objects various react internals end cloning object thereby nullifying freeze would nice able simply optin frozen props", "d": "1/2015"}, {"body": "davidtheclark using freeze problem note freezing recursive freeze directly actually freeze properties root object far know object recreated component render btw use", "d": "1/2015"}, {"body": "nt realize freeze nt recursive thanks pointing", "d": "1/2015"}, {"body": "thanks slorber deep freezing nt issue react internals cloning object passing freezing object within component passed component spread factory situation referring pass frozen object become props spread jsx element factory exposed component unfrozen see two places probably cause parameter object passed passedinpropsobject intended become component actually creates new object variable assigned properties becomes component original frozen object recursively frozen passedinpropsobject comes available component methods componentpropsobject new unfrozen object properties original object passed one passedinprops named array frozen componentprop would frozen array reference passed cloned object object longer frozen primitive properties passed still mutated without throwing error strict mode make sense essentially thing happens passing jsx spread attributes spread implementation creates new object assigned properties object pass way patching simple mixin refreezing props within component gone mentioned nt deep freeze object deep froze already properties deeply frozen still references sorry long course keep using course kind pain apply mixin every component bad others share issue think two ways solution could built library passedinprops cloned eg places mentioned check whether passedinprops frozen freeze cloned object well kind strict mode like slorber suggests would freeze component whether passed frozen", "d": "1/2015"}, {"body": "davidtheclark make short understand point freezing object injecting props throw error try modify object inside component prevent modifying object reference props object props always new unfrozen object mean ca nt still yes would nice react let use automatically froze properties maybe build component factory like framework atomreact automatically include mixins everywhere however problem jsx able infer component anymore", "d": "1/2015"}, {"body": "probably missing point freeze get want freeze deeper objects might references elsewhere since built react copying props passed way could mutated write something like inside component pass external method doubt first use case worth protecting really hard write something like accident second use case maybe think missing something", "d": "1/2015"}, {"body": "try concise clear slorber think page truly frozen could nt say without throwing error consider suggestion custom factory good idea gaearon reasons want freeze take full advantage unidirectional flow react allows nt want anyone working code mutating properties come topdown data stores definitely want inadvertently mutate contents stores reference also want component farther chain reflect exactly store times possibilities raise mutating passing another function real concerns think first worth protecting always worth automatically enforcing standard want uphold rather trusting everybody writing reviewing code manually catch flaw seems reason exists enforce way want object used right second pretty common source bugs think three ways pass props regular jsx attributes passed one time full object passed jsx spread attributes full object passed factory could addressed react check whether object passed frozen freeze correspondingly would make sure passed frozen objects every time want frozen props every time three could addressed mixin like freezes props componentlevel would make sure included every time reactstrictmode freezes props everywhere think none changes significant reactstrictmode optin would nt force anybody strict already change way use react", "d": "1/2015"}, {"body": "react warn automatically mutate thisprops", "d": "1/2015"}, {"body": "nice", "d": "1/2015"}, {"body": "sometimes take look might solve issues", "d": "1/2015"}, {"body": "textpath complete svg support general", "d": "1/2015"}, {"body": "svg fully supported decent workaround tell react svg attributes pass render declare elements need explicitly example accessed like var domproperty require reactlibdomproperty xlink href standardlysupported svg attribute tell react ok dompropertyinjectioninjectdompropertyconfig iscustomattribute function attributename return attributename xlink href var svgbutton reactcreateclass render function render var use reactcreateelement use xlink href thispropsicon return use thispropslabel", "d": "1/2015"}, {"body": "jeffkole careful react still call setattribute setattributens attribute changes update probably wo nt work properly", "d": "1/2015"}, {"body": "spicyj nt see namespace support react ie call codebase suggestion proper way set attribute namespace", "d": "1/2015"}, {"body": "nt figured namespaced attributes work nt support right sorry", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "little late discussion found easy solution jquery magic modify onchange monitor empty strings validity false manually set input value", "d": "1/2015"}, {"body": "seems like pretty major bug idled months anyone maintaining animation stuff", "d": "1/2015"}, {"body": "appsforartists think big plan drop dependency transitionend animations use js everything long term chenglou experimenting", "d": "1/2015"}, {"body": "hi error message mounted react component different div element different ids trying different components different things", "d": "1/2015"}, {"body": "seems classes actively worked presume targeted anyone confirm current plan classes mixins release assuming react core ship magic somehow handle mixins like today mixin functionality need handled outside react something along lines op shipped", "d": "1/2015"}, {"body": "yes scheduled release ship mixin helper requires support unusual current transpilers need roll use", "d": "1/2015"}, {"body": "proposal providing feature parity current react classes encouraged pattern sebmarkbage still case reactcreateclass still preferred way things nt think really illustrates opinion maybe lot confusion", "d": "1/2015"}, {"body": "rtorr moving towards native classes modern way things said many people including large portion facebook continue use reactcreateclass time options supported near term", "d": "1/2015"}, {"body": "sebmarkbage updating refs get called every rerender maybe even shouldcomponentupdate returns false", "d": "1/2015"}, {"body": "changes", "d": "1/2015"}, {"body": "render render top ref never called", "d": "1/2015"}, {"body": "would change ref like change ref name called", "d": "1/2015"}, {"body": "conventional usage though different function time yeah", "d": "1/2015"}, {"body": "good point nt think maybe fire goes null function", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "issue going fixed", "d": "1/2015"}, {"body": "ninjabiscuit suggested workaround one relies timeout rather assuming browser fire event browsers fire event properly probably thing", "d": "1/2015"}, {"body": "bradens suggested works alright less maintainable solution nt require extra parameters", "d": "1/2015"}, {"body": "good solution case solved", "d": "1/2015"}, {"body": "manually applying patch pulled core", "d": "1/2015"}, {"body": "using react render complete documents serving", "d": "1/2015"}, {"body": "adjavaherian nt need", "d": "1/2015"}, {"body": "actually think react mount higher body clientside caes want react render iframe current best breed iframe generation want react control iframe content seems largely impossible moment also dangerouslysetinnerhtml cause browser run js string also react diffing dangerous setting full replace would cause entire document iframe stutter update resources reload browsers set rather diffupdate think sure diffing would work sanboxed js running iframe though also react grouping component nt actually anything mount components kind silent component could nt seem see one probably learn internal architecture guess", "d": "1/2015"}, {"body": "also react grouping component nt actually anything mount components kind silent component could nt seem see one probably learn internal architecture guess nt know much saw links", "d": "1/2015"}, {"body": "thanks gaearon found nodelist glossary subsequent last comment yeah read zendesk article also implemented stuff degree large holes comes stuff body like styles script etc whole approach feels like big hackaround fighting code hence thread", "d": "1/2015"}, {"body": "movement wyuenho petehunt", "d": "1/2015"}, {"body": "far understand choose use extension react components forced explicitly specify extension every statement throughout code base eg instead order able navigate files aka navigate source primary reason currently used default reactjs starter kit", "d": "1/2015"}, {"body": "koistya depends bundler using webpack extensions configured explicitly resolveextensions pretty sure browserify allows something similar", "d": "1/2015"}, {"body": "oh get point nt really use ide regardless think issues filed ides use jsx ide already knowledge eg parse much expect also follow jsx imo", "d": "1/2015"}, {"body": "feels suspiciously like user agent string conundrum jsx distinctly javascript put files anyway tools use nt conveniently look propagate lie convenience", "d": "1/2015"}, {"body": "though break people current expectations could give error files found extension nt explicitly set say error nonzero exit code ci servers install latest version implicitly fail something like jsx found jsx files default extension changed js jsx restore old behavior add following command x js suppress error explicitly set extension x jsx information see", "d": "1/2015"}, {"body": "related", "d": "1/2015"}, {"body": "going close big deal obviously nt moving fast", "d": "1/2015"}, {"body": "anything new issue currently thinking making step towards using typescript addition react make software bulletproof would great possibility writing jsx ts since using plain js jsx option good one", "d": "1/2015"}, {"body": "fwiw fine using dom factory functions typescript", "d": "1/2015"}, {"body": "davidreher believe superseded flow supports typescript jsx syntax", "d": "1/2015"}, {"body": "unfortunately think need leave typescript team make decision want support jsx since syntax conflicts jsx using typescript without jsx still possible expected wo nt work quite well flow least quickly since flow developed intent support react concepts", "d": "1/2015"}, {"body": "since syntax conflicts jsx ones specifically suppose type casting nt flow intend syntax parity typescript note typescript calls type assertions casting generally implies runtime safety", "d": "1/2015"}, {"body": "basart flow intended work jsjsxoptional type annotations ideal case flow nt need type annotations plain javascript possibly jsx typescript adds lot stuff nt js things specific typescript fri jan basarat ali syed wrote since syntax conflicts jsx ones specifically suppose type casting nt flow intend syntax parity typescript note typescript calls type assertions casting generally implies runtime safety reply email directly view github", "d": "1/2015"}, {"body": "basarat yea type assertions conflicts flow nt support type assertions since attempts sound typescript brigand quite correct flow works well without type annotations definitely intents use type annotations three reasons documentation intent way catch mistakes would pass type inference nt intended work way intentionally limit api surface area even would currently work wider set inputs ie defining contract way speed type analysis large code bases enabling parallelized analysis flow aims unify typescript makes sense nt attempt support syntaxconcepts diverge areas", "d": "1/2015"}, {"body": "thanks clarifying fri jan pm sebastian markb\u00e5ge lt notifications githubcom wrote basarat yea type assertions conflicts flow nt support type assertions since attempts sound typescript brigand quite correct flow works well without type annotations definitely intents use type annotations three reasons documentation intent way catch mistakes would pass type inference nt intended work way intentionally limit api surface area even would currently work wider set inputs ie defining contract way speed type analysis large code bases enabling parallelized analysis flow aims unify typescript makes sense doesnt attempt support syntaxconcepts diverge areas reply email directly view github", "d": "1/2015"}, {"body": "typescript parser working typescript jsx cyrusnajmabadi method works fine never time finish properly idea pretty simple encounter tag try parse jsx tag parsing error ambiguous case attribute rewind parser state try parse type assertion optimal often report inadequate error least allows parse typescript constructs jsx ones time try finish", "d": "1/2015"}, {"body": "yeah pretty much brief demo early versions shows tags type asserts distinguished completion support etc decided give since typescript wasis breaking lot inner stuff order move implement final decision suspend caused release flow superseded features three worlds jsx typescript added even", "d": "1/2015"}, {"body": "rreverser sebmarkbage thanks suggestion since windows platform flow actually option moment thanks sharing suggestions think need think different solution either work jsx views ts rest nt make use jsx", "d": "1/2015"}, {"body": "davidreher honestly still think good solution would create ts fork jsx support problem takes time time nt actually rreverser tsx could good base", "d": "1/2015"}, {"body": "davidreher upcoming talk reactjs conf addressing issue using hack described earlier issue basically jsx ts preprocessing step posted example gulp conference show webpack ts fork jsx support would ideal sure creating one beyond realm average coders thus far nobody released one much less stable productionready one happens hope believe eventually believe hack works wonders average need get project done deadline developer edit realized fdecampredon fact release ts fork", "d": "1/2015"}, {"body": "jbrantly release anything sorry disappoint", "d": "1/2015"}, {"body": "fdecampredon meant release may strong word meant make available publicly", "d": "1/2015"}, {"body": "frag would absolutely awesome", "d": "1/2015"}, {"body": "would love see reactaddons build deprecated browserify builds mad special sauce browserifybased tools replicate mochify frustrating situation consistent entrance point react reactaddons would reduce conflict turmoil", "d": "1/2015"}, {"body": "pomax think found context mixin nt quite behave expected subcomponent click action ends removing component dom sourceparentnode loop breaks makes way back actual parent component case dropdown list items x icons delete items dropdown list whenever delete item outside click registered dropdown close", "d": "1/2015"}, {"body": "interesting jsbin drop maybe bit iterative improvement mixin robust enough npm publish reactonclickoutside like", "d": "1/2015"}, {"body": "pomax trying manually reinvent event propagation loop used example nt need check event belongs specific element event stopped bubbles handler listening document", "d": "1/2015"}, {"body": "willdady take available mixin form anything point people go solved problem even react yet", "d": "1/2015"}, {"body": "hey guys something new far thinking subject something simpler comes component contained class instance click something else nt sounds good maybe css resolve problem confirm selector us", "d": "1/2015"}, {"body": "even option one use would rely implementation detail without detail part react api also relies uses css classes functional roles literally reason like react much nt rely query selecting everything try publish reactonclickoutside mixin npm today based code mixed improvement willdady pointed", "d": "1/2015"}, {"body": "layered approach works fine normally use sometimes also want fade layer make dark instead transparent eg modals layer natural imo solving problem yes presumes dropdown top stacking context think making problems try keep somewhere else example dropdowns lived somewhere else would clipped parents also woes good luck mistake regretted really really want declare dropdown props etc inside components deep hierarchy always use portals dropdown still physically hosted top seems like weird thing want clicks effect handler says clicking outside context menu hide context menu execute actions underneath even button would possible ran actual handlers could stop immediate propagation feels like hack think wrong solution problem embrace layers note flux makes super easy trigger actions affect something top", "d": "1/2015"}, {"body": "great purposes also seems exclusively intended dealing modals level specialization nt want abuse genuine need listen clicks outside element behaviour nothing modal dialogs slightest like blur behaviour component level switching element editor content etc", "d": "1/2015"}, {"body": "pomax good point certainly using css fast amp easy way go worked right nt make sense unleash approach since using powerfulness react removed completely outsideclick approach app waiting mixin meanwhile users press close component lol", "d": "1/2015"}, {"body": "yeah see point use layers anything global single instance top eg modal context menu alert sidebar case one dimming layer listens decides whether show overlay transparent cases rare cases really need click outside component level ca nt use layers put component node handler set handler separately solves problem described nt even think needs mixin little code still explicit js componentdidmount function documentbodyaddeventlistener click thishandlebodyclick componentwillunmount function documentbodyremoveeventlistener click thishandlebodyclick render function return handleclick function e epreventpropagation handlebodyclick function something", "d": "1/2015"}, {"body": "gearon think mixin dry reachable code snippet also solution wise fresh man give shot soonish come back results yet still waiting pomax mixin still meant keep promise", "d": "1/2015"}, {"body": "promise made hours ago work day although publish run breakage issues tracked github", "d": "1/2015"}, {"body": "think mixin dry reachable code snippet kinda need forget click handler need remember attach root node like half code outside mixin anyway certainly implement loop instead rubs wrong way maybe aesthetics though boring pomax would nt better mixin stored functions private map removed automatically prevents accidental leaks amp removes need private function", "d": "1/2015"}, {"body": "point docs triggering functions automatically owning component reaches certain life cycle points happy work would nicer automatically hooked componentdidmount componentwillunmount simply binding unbinding whatever additional function routing required", "d": "1/2015"}, {"body": "need forget stoppropagation click handler thinking faced problem right lol boring thinking best fashion get done pomax kidding pressure lmao man thank far fast hell", "d": "1/2015"}, {"body": "would nicer automatically hooked componentdidmount componentwillunmount simply binding unbinding thisonclickoutside whatever additional function routing required fun part react mixins happens define mixin see example docs", "d": "1/2015"}, {"body": "excellent update mixin", "d": "1/2015"}, {"body": "updated mixin since different implementation simply add mixin define component using mixin", "d": "1/2015"}, {"body": "call convention function names convention prop names", "d": "1/2015"}, {"body": "fair point updated", "d": "1/2015"}, {"body": "never seen npm module updated much faster new record lol already using solution pomax gaearon collaborate mixin heroes hearteyescat", "d": "1/2015"}, {"body": "pretty usual first hour module push experience first hour immediate bug reports people linked", "d": "1/2015"}, {"body": "problem solved focus blur event click document dropdown lose focus hide dropdown menu", "d": "1/2015"}, {"body": "focus events click events drop disappears click outside stay open even change tabs switch outback browser application however actions cause blur events listening drop would closed two event types trigger differently", "d": "1/2015"}, {"body": "yiminghe said good idea imho nt think way mixin pomax saved lives", "d": "1/2015"}, {"body": "workaround get react fire synth onchange browser onchange range inputs", "d": "1/2015"}, {"body": "thought go ahead create pull request fix works wrapping innerhtmlsetting code execunsafelocalfunction", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "lib uses facebook fork esprima parts flow analyze js jsx abstract syntax trees generate documentation data structure optionally transform source files looked around luck finding similar existing library next step would create collection react components reactdoc provide documentation views react docs would updated static code analysis annotations less prone human error auto generate jsx supported htmlsvg elements attributes documentation currently date auto generate docs user created react components mixins property types defaults etc reactdoc components could tutorial building react components interacting documentation optionally prepend annotations documentation libs jsdoc yuidoc plugin", "d": "1/2015"}, {"body": "actually thinking flowbased documentation tool unfortunately none exist afaik still need jsdoc comment least description etc things jsdoc side note documentation nt date updated let know missing followup think idea reactdoc tool certainly interesting actually something internally fb talking pulling least proptypes handling inheritance tied specific ways write components would cool generalize could open sourced pretty tangential specific issue cc fkling anyway", "d": "1/2015"}, {"body": "ever direct resolution ticket possible missed things comments recap clear elegantly cause enter animations setting state known properties still nt see opposite effect accomplished illustrated following nonfunctional example javascript reactcreateclass getdefaultprops function return items getinitialstate function return items componentwillmount function thissetstate items thispropsitems render function return thisstateitemsmap function item index return componentwillunmount function obviously broken thissetstate items frustrating exercise trying accomplish effect complex application case one using router library flux pattern little control components one level hierarchy wishing animations possible capture perform leave animations illustrated able cut huge amount complexity ps please forgive lack write lot scala days", "d": "1/2015"}, {"body": "michaelahlers working wrapper animation libraryagnostic mostly bit messy right find free time pull see well sure brings back memories", "d": "1/2015"}, {"body": "chenglou leave dig nostalgia fuel smirk reading samples kind funny wrote enter exit transitions inadequate lot animation use cases struggling make work framework might result isolated shortterm gains bigpicture longterm losses work definitely looks several steps ahead state stream looks incredibly powerful functional programming intuitive combined tween state imagine lot sophistication ca nt accomplished purely css said looks like irvinebroque boat needing good baby step adds exit animation classes node removal css animations complete", "d": "1/2015"}, {"body": "eh sorry statestream unrelated wrapper mostly work conjunction anything else including simple change node removal", "d": "1/2015"}, {"body": "may lost bit appears similar usage pattern going apply certain css properties children based state state managed internally needs fundamentally differ think putting loosely particular case router library responsible building component tree got little control individual component mounted unmounted seeking means triggering arbitrary animation way allows transition group keep nodes dom animation done fullyencapsulated may need move state flux stores cleared effectively applies approach leave animations certain routing events", "d": "1/2015"}, {"body": "going close left open long time nt made progress apart improved error messages still hard problem solve reasonable way calling", "d": "1/2015"}, {"body": "zpao like mentioned datareactid pr possible catch immediately occurs really quite cheaply good fit dev least lines code well considering prodbehavior would stay lenient devprod inconsistency nt issue either", "d": "1/2015"}, {"title": "xsrf per rfc prefix parameter names x", "body": "angular builtin support sending xsrf token back header uses header rfc recommends using x prefix nonstandard http headers would nice angular switch header recommend use documentation link rfc copy angularangularjs case nt make", "num": "508", "d": "1/2015"}, {"title": "support creating view variables templates", "body": "toggle see alt syntax code allows creation view variable injected available use shown pointers get started viewsetlocal setting value protoviewvariablebindings propertybindingparserprocess steps needed compiler extracts syntax template make sure var information gets assign element variable creation", "num": "507", "d": "1/2015"}, {"title": "special case binding hidden property", "body": "element property mostly work need special case purposes animation sure much work needs done", "num": "506", "d": "1/2015"}, {"title": "special case binding class property", "body": "binding attribute result binding properties result merging class names considerations properties considered fixed changes merge existing names rather override could several formats space delimited strings array names hash map keys becoming class names value truthy given platform evaluates truthy given platform sets removes class name collision resolved order", "num": "505", "d": "1/2015"}, {"title": "create dom adapter compiler execute outside browser", "body": "compiler relies browser parse html dom walks dom detect directives expressions statements order able run compiler outside browser need refactor code remove dom dependency pretty straight forward since compiler already uses facade talk dom since js dart apis different work needed x html parser would crete tree performed browser html parser tree dom x create facade tree model created step allows compiler walk tree x remove cyclic dependencies compiler operations limited reading element name reading attributes reading text nodes walking tree using removing rewrapping subtrees tags work completed compiler able execute outside browser environment", "num": "503", "d": "1/2015"}, {"title": "generate change detection classes instead getter setter stubs", "body": "depends executing change detection using getter stubs see two issues causes polymorphic calls limits execution speed prevents proper tree shaking address instead generating getters stubs generate changedetector class changedetector class bit complicated significant performance size impact js code generation already working implementation seen equivalent dart version needs implemented changedetectionjitgeneratordart js run generator runtime dart version needs execute transform time", "num": "502", "d": "1/2015"}, {"title": "parse html templates extract stubs expressions amp statements generate getterssetters stubs reflection", "body": "depends html templates contain expressions statements need extracted generate getters setter stubs subsequent iteration generate changedetection classes efficient given html listname itemdescription generate getters angular already parser extract getters template parser part angular compiler consumes template generates protoview contains protochangedetector turn contains protorecord contains field corresponds getter transformer needs pass template compiler iterate collect getters note compiler works dom api order execute outside browser need create dom facade execute transformer see note example type information added information extracted added subsequent improvements", "num": "501", "d": "1/2015"}, {"title": "generate setter stubs directives", "body": "transformer comes across directive needs extract setter stubs binding given code example transformer needs extract ings generate allows angular write changes change detection directive bindings note one directive setter may use nearest common supper class stub devise accurate mechanism later", "num": "500", "d": "1/2015"}, {"title": "transformers include annotations constructor stub", "body": "fill annotation information given source component selector mycomponent class mycomponent main bootstrap mycomponent generate import package pathtoabovefile import package reflectionreflectiondart show reflector setupreflection reflectorregistertype factory paramaters annotations new component selector mycomponent", "num": "498", "d": "1/2015"}, {"title": "tree shake constructor stubs", "body": "generating constructor stubs see resulting hash map may contain stubs needed running application result retaining much code tree shaking phase correct transformer needs tree shake stubs output ones actually needed find bootstrap method find root component recursively find injectable items root component include whole set generated method see given component definition list items need recurs recurse labeled", "num": "497", "d": "1/2015"}, {"title": "transformers create constructor stubs", "body": "create method registers constructor stubs given source component class mycomponent mycomponent myclass dep injectable class myclass myclass url string name main bootstrap mycomponent generate import package pathtoabovefile import package reflectionreflectiondart show reflector setupreflection reflectorregistertype factory dep gt new dep paramaters const cost reflectorregistertype factory string name gt new name paramaters const cost url string types annotated need corresponding stubs generated", "num": "496", "d": "1/2015"}, {"title": "remove indexstaticjs helloworld example", "body": "dart transformers work able remove indexstaticjs source code since transformers generating file requires issue x transformers create constructor stubs tree shake constructor stubs x transformers include annotations constructor stub x generate setter stubs directives parse html templates extract stubs expressions amp statements generate getterssetters stubs reflection x mock dom api compiler execute outside browser generate change detection classes instead getter setter stubs x remove import dart mirrors", "num": "495", "d": "1/2015"}, {"title": "insanity warning", "body": "spoiler alert angular noob follows may emphasize fact debugger tells throwing exception insanity warning scope depthfirst traversal yes code bit crazy works tests prove piece kept sync traversal digest though differs due extra check listenercount next current listenercount name amp amp current childhead current target amp amp current nextsibling current target amp amp next current nextsibling current current parent mean found proof crazy least working flawlessly actual error chrome uncaught typeerror read property nextsibling null", "num": "493", "d": "1/2015"}, {"title": "dart style opt library toplevel members classes static members", "body": "eg dart library setwrapper set createfromlist list l return new setfrom l bool set key return scontains key use site simply import library", "num": "492", "d": "1/2015"}, {"title": "dart style annotate methods without return values void", "body": "", "num": "491", "d": "1/2015"}, {"title": "dart style prune unused imports generated dart libraries", "body": "use analyzer help helps make dependencies clear", "num": "490", "d": "1/2015"}, {"title": "zone nt support websockets", "body": "using websockets angular zone nt pick changes websocket callback code work around needed update view example project found javascript import ng angularangular import lifecycle corelifecyclelifecycle import injector didi component selector myapp class mycmp constructor injector injector", "num": "487", "d": "1/2015"}, {"title": "something goes wrong uglify scripts", "body": "hi scripts works well however goes wrong run task flowing code codes works well however goes wrong scripts code angularmodule ngtestapp provider testservice function var thisaddpluginfactoryfunction b c b c get injector function b var c return angularforeach function c binvoke getplugin function return c", "num": "484", "d": "1/2015"}, {"title": "format generated code dartstyle dartformat", "body": "activated dartstyle added right path environment run directly scripting gulp way go", "num": "480", "d": "1/2015"}, {"title": "injecting lifecycle root component results cyclic dependency", "body": "think simplest way fix inject lifecycle manually look method see", "num": "477", "d": "1/2015"}, {"title": "update async dart webdriver", "body": "preferred way writing tests dart right using dartsyncwebdriver however sync version requires dart native extension hard build automated build scripts dart getting asyncawait soon async version preferred way writing tests dart right async webdriver dart year old needs updated", "num": "475", "d": "1/2015"}, {"title": "implement view caching view factory", "body": "currently created time needed caching mechanism reusing instances", "num": "465", "d": "1/2015"}, {"title": "question horizontal visibility directive injection", "body": "documentation visibility constraints specified vertical ancestor parent child descendant horizontal ones please considered raising question would quite quite natural elegant write something like template helloelse helloelse implement directive visibility constraint like previous needed generally seems good idea able link sibling directives without create extra parent directive think please information quick dirty implementation find could done moving forward implementing cleaner way wanted discuss", "num": "462", "d": "1/2015"}, {"title": "change detection add test pure functions", "body": "vsavkin discussed current dynamic change detector would evaluate pure function every single run even arguments changed reason former behavior yet ported new cd architecture soon however seems like nt test make sure pure function evaluated needed add test xited added feature reintroduced", "num": "461", "d": "1/2015"}, {"title": "rails assets gem ruby gems", "body": "rails assets ruby gem bower proxy makes including angular inside rails applications easier far manageable purpose issue notify angular team someone decided make angularjs ruby gem rubygemsorg name rails asset gem source code points bowerangular repo setting version number", "num": "458", "d": "1/2015"}, {"title": "polish chars angular variables templates ie", "body": "specific bug variable placed polish character resolved angular instead plain text remove char everything good happens internet explorer variable right special char example var somevariable var currency pln using angularjs version custom start end symbol interpolateprovider ie version windows", "num": "456", "d": "1/2015"}, {"title": "support autofocus attribute", "body": "hi tells browser focus element page load would great angular support builtin also works browsers nt support creating elements dynamically like forms example directive perhaps used asis might need adapting case many elements attribute get created", "num": "455", "d": "1/2015"}, {"title": "disabled buttons run ngclick triggered jquery", "body": "disabled button elements supposed respond propagate click events however angular far back disabled button elements ngclick directives respond javascript click events though respond actual mouse clicks method disabling nt matter either disabled attribute ngdisabled work triggered javascript click event eg expect ngclick expression button execute instead executes problem testing one would expect click event disabled button run ngclick fiddle seem issue", "num": "451", "d": "1/2015"}, {"title": "better support mocking components", "body": "need come plan address angular context", "num": "450", "d": "1/2015"}, {"title": "uncaught error injector modulerr failed instantiate module", "body": "", "num": "446", "d": "1/2015"}, {"title": "angular persistence help", "body": "open project angular persistence help move ideas following doc forward", "num": "444", "d": "1/2015"}, {"title": "broken npmbower packages", "body": "file repositories syntax error javascript require angularsanitize moduleexports angularsanitize link makes bit complicated use browserify could nt find script used generate repos fix would simple rewriting file another option would add spec file already done", "num": "443", "d": "1/2015"}, {"title": "camelcase atributes svg accidentally deleted", "body": "hi noticed angular sanitize nt treat certain svg attributes properly svg allows camelcased attribute names whitelisted code however converts attribute names lowercase thereby removes attributes whitelist consider bug fix would lowercase whitelisted checked attributes normalize solve problem", "num": "441", "d": "1/2015"}, {"title": "cut copy paste using angularjs", "body": "possibility perform cut copy paste using anuglarjs seen ngclip copy data clipboardbut copies total model want work selected text need cut copy need paste particular control cursor focusedand works browsers", "num": "438", "d": "1/2015"}, {"title": "benchpress rewrite chromedriver integration use tracing data", "body": "right using old timeline data however timeline devtools already uses tracing data see use category open problem get process id page chromedriver performance log contains tabs", "num": "434", "d": "1/2015"}, {"title": "bowerangularresource broken browserify", "body": "indexjs generated valid javascript changing fixes also looks like packagejson used instead using indexjs", "num": "433", "d": "1/2015"}, {"title": "rewrite existing benchmarks atscript", "body": "currently test driver code written js ported atscript xcompiled js dart depends", "num": "432", "d": "1/2015"}, {"title": "rewrite benchpress atscript", "body": "includes making sure run benchmarks written atscript depends", "num": "430", "d": "1/2015"}, {"title": "create js amp dart facades webdriver api", "body": "support benchmarks written js dart", "num": "429", "d": "1/2015"}, {"title": "protractor wait integration implement whenstable testability api", "body": "issue angular provide way tell list pending tasks turn first step inject js script calling main method js including main script dart allows protractor call browser see", "num": "428", "d": "1/2015"}, {"title": "better component test coverage", "body": "angular apps made dartjs well template code dart js good code coverage tools however high coverage dartjs translate well tested angular app bindings could broken templates could errors angular provide way test measure completeness component test watching templates bindings exercised test metrics could aggregated report teams would set goals based metrics like code coverage", "num": "427", "d": "1/2015"}, {"title": "tests rewrite atscript", "body": "build dart also contain", "num": "426", "d": "1/2015"}, {"title": "benchpress rewrite atscript", "body": "benchmarks also written dart", "num": "425", "d": "1/2015"}, {"title": "performance improvements view instanation", "body": "prod dev mode prod mode strips bindings template make cloning faster instead use small templates instead use anchor last element instead first element make efficient starting anchor dev mode", "num": "424", "d": "1/2015"}, {"title": "implement ultra fast change detection", "body": "reflective mode dartcsp generation mode js using eval transformer dart", "num": "423", "d": "1/2015"}, {"title": "implement dom write dom read queues", "body": "every queue dom write operations queue dom read operations dom operations ran queues write operations must run bottom child view parent view need flush queues digest", "num": "422", "d": "1/2015"}, {"title": "support", "body": "add html template insert css shadow dom component emulated mode insert style", "num": "421", "d": "1/2015"}, {"title": "distinguish map property access expressions", "body": "issue angulardart foobar template would reach getter instead try get value via angulardart checks ignores getter angular separate syntax map access makes explicit expression whether map access property access used example", "num": "420", "d": "1/2015"}, {"title": "implement templateloader", "body": "", "num": "419", "d": "1/2015"}, {"title": "benchpress support exploring script slow via cpu profile", "body": "want compare cpu profile baseline numbers production profiles represent number iterations benchmarks names cpu profiles contain timestamp benchmark name current git sha flag whether local changes right implement manual loop forces gc see note bug devtools gc time included script time either force gc runs subtract somehow else cpu profile contains idea look cpu profile whether contains gc script times", "num": "418", "d": "1/2015"}, {"title": "view dehydration", "body": "views automatically dehydrated removed viewport hydrated created removes views items removed list items items moved lists items items moved need dehydrate view view still present end dom however views removed dehydrated remove attached view probably also dehydrated", "num": "416", "d": "1/2015"}, {"title": "proposal expose viewportwidth viewportwidth functions ng window service", "body": "would great help quickly get viewportwidth viewportwidth window width height css viewport", "num": "414", "d": "1/2015"}, {"title": "directive requiring ca nt find camelcased directive", "body": "either configuration issue parsing issue keep getting errors code plnkr would expect consistent camelcasing work doesnt see case", "num": "409", "d": "1/2015"}, {"title": "ngrequired overrides typeemail initial validation chrome", "body": "details plnkr seems since ngmodel set controller get nginvalid initially use typeemail ngrequired latest chrome works fine firefox required attribute", "num": "401", "d": "1/2015"}, {"title": "skip marker record creation cases", "body": "always create marker records cd view need view records viewport know proto time many records skip marker record creation reuse real records", "num": "396", "d": "1/2015"}, {"title": "asynchronous ngoptions loading results select selected option", "body": "issue select using ngmodel ngoptions ngmodel value available immediately ngoptions array loaded asynchronously ngoptions array arrives select rendered options correct option select selected tried using latest build time nt look like issue fixed yet example jsfiddle", "num": "394", "d": "1/2015"}, {"title": "coalesce common expressions", "body": "currently create records could crate three records record deliver change record", "num": "393", "d": "1/2015"}, {"title": "return change detection stats detect changes", "body": "currently returns number changed records return number changed records number enabled records walked total number records system", "num": "392", "d": "1/2015"}, {"title": "perf inline constants destination argument array skipping creation record", "body": "assume bindings result int record dereference record constant record pure function executed arguments efficient version would record dereference record pure function executed arguments", "num": "391", "d": "1/2015"}, {"title": "support shadowdom chromedriver", "body": "vojtajina could add contact persons already tried get working", "num": "389", "d": "1/2015"}, {"title": "add macro directive type compiler", "body": "way get original element directive replace template possible add precompile option would function receive original element directive definition object making new angular want use original element directive take effect thx", "num": "384", "d": "1/2015"}, {"title": "script execution slower gc happens", "body": "even though gc time subtracted script time see tree benchmark", "num": "381", "d": "1/2015"}, {"title": "benchmarks add buttons loop createdestroy benchmarks", "body": "helps manual debugging", "num": "379", "d": "1/2015"}, {"title": "change detection special expression interpolation", "body": "saves records change detection also need filter", "num": "378", "d": "1/2015"}, {"title": "ngsubmit work mobile brower", "body": "close", "num": "374", "d": "1/2015"}, {"title": "weird interaction locationhash chromefirefox", "body": "enter following chrome turns also happens running without hashes url causes need check repeated function get simple already check since chrome messes url always blank makes url fwiw ideas work around", "num": "372", "d": "1/2015"}, {"title": "benchpress store cpu timeline data numbers stabilized", "body": "cpu profile timeline data loaded chrome devtools", "num": "371", "d": "1/2015"}, {"title": "benchpress add metrics", "body": "frames per second forced layouts script execution", "num": "370", "d": "1/2015"}, {"title": "benchpress report result csv file", "body": "easily copy amp pasted graph", "num": "369", "d": "1/2015"}, {"title": "benchpress show gc activity better way", "body": "add separate column says gc force mode gc happens script independent whether gc forced add columns gc time gc amount per run", "num": "368", "d": "1/2015"}, {"title": "investiage force gc makes changedetection baseline benchmark slow", "body": "reproduction add statement first line start timeline click button baseline detect changes multiple times look timline numbers go taking benchmark reimplementing plain happen bisect find problem", "num": "367", "d": "1/2015"}, {"title": "benchpress measure memory usage", "body": "measure heap delta produced gc benchmarks multiple steps", "num": "366", "d": "1/2015"}, {"title": "benchpress integrate ie", "body": "ie webdriver needs get performance log command forcing gc", "num": "365", "d": "1/2015"}, {"title": "publish modules tools npm", "body": "open questions language want publish atscript module system use modules need multiple ones eg usable nodejs browser", "num": "364", "d": "1/2015"}, {"title": "cache busting sends malformed requests iis using integrated authentication", "body": "used appconfig block cache busting internet explorer however get following back iis iis detailed error bad request body fontsize fontfamily verdana arial helvetica sansserif background code color fontweight bold configsource code fontsize color pre wordwrap breakword ul ol ulfirst olfirst fieldset summarycontainer fieldset legendnoexpandall legend color solid ededed solid ededed solid solid background fontweight bold link visited color fontweight bold hover textdecoration none color fff color color header fontfamily trebuchet ms verdana sansserif color fff backgroundcolor content position relative summarycontainer contentcontainer background fff position relative configsource background contentcontainer p detailsleft float left detailsright float left overflow hidden serverversion color ffffff backgroundcolor solid solid fontweight normal color fff textalign right serverversion p table border none td th verticalalign top textalign left fontweight bold border none th textalign right fontweight normal thead th backgroundcolor ebebeb detailsright th table tralt td table tralt th backgroundcolor ebebeb highlightcode color fontweight bold fontstyle italic clear clear preferred fontweight normal background color fff fontsize server error application myweb internet information services error summary http error bad request bad request detailed error information modulestaticfilemodule notificationexecuterequesthandler handlerstaticfile error requested url physical pathc svnframeworkwebwebapplicationstylecache logon methodnegotiate logon useraculgmerwe likely causes things try create tracing rule track failed requests http status code information creating tracing rule failed requests click links information request could understood server due malformed syntax view information microsoft knowledge base articles remove everything works strange using angularjs", "num": "362", "d": "1/2015"}, {"title": "nested decorators work", "body": "hello world example app component template changed nested application would generate error instantiated", "num": "359", "d": "1/2015"}, {"title": "benchpress add unit tests", "body": "", "num": "358", "d": "1/2015"}, {"title": "benchpress spread word discuss teams", "body": "inside outside google", "num": "357", "d": "1/2015"}, {"title": "benchpress cache results bigquery draw graphs", "body": "need cache get charged per query create doc explains needs done", "num": "356", "d": "1/2015"}, {"title": "benchpress run benchmarks google latency lab", "body": "needed regressions desktop browsers", "num": "355", "d": "1/2015"}, {"title": "benchpress integrate ios safari", "body": "appium ios driver already support reporting performance logs ios safari however forcing gc missing projects appium actually contribute little update ioswebkitdebugproxy throws errors right using needs periodically restarted see workaround appium", "num": "354", "d": "1/2015"}, {"title": "benchpress integrate desktop firefox", "body": "firefox webdriver needs get performance log command forcing gc", "num": "353", "d": "1/2015"}, {"title": "benchpress add cpu profiling measure time per file", "body": "needs extension chromedriver recorded cpu profile contain sourcemap urls need listen scriptparsed event match cpu profiler protocol also collect time spent calling dom methods separately note using sourcemaps work well", "num": "352", "d": "1/2015"}, {"title": "ngclick called twice", "body": "using google chrome canary angular realize created single ngclick logged console click triggered twice html js controller output click appears twice bug removed ngtouch module project worked normally", "num": "350", "d": "1/2015"}, {"body": "question variable refer component directive element decorator directive fri jan pm mi\u0161ko hevery notifications githubcom wrote toggle see code allows creation view variable mydiv injected available use shown reply email directly view github", "d": "1/2015"}, {"body": "essadji wrong repo guess wanted open issue need provide live reproduce scenario using plunker jsfiddle similar believe bug angularjs sure bug rather looking general help please use support forums", "d": "1/2015"}, {"body": "show example may due way facades work js dart", "d": "1/2015"}, {"body": "track", "d": "1/2015"}, {"body": "issue seems firebase uses websocket rather way register callback looking nt see patched", "d": "1/2015"}, {"body": "angularangular new repository work next version angular angularangularjs support questions asked github indepth hands helpful support obtained places like angularjs freenode stackoverflow said issue annotating plugins registering config block solve look like js testserviceprovideraddpluginfactory hello log function log return hello function loglog hello testserviceprovideraddpluginfactory log function log return hello function loglog", "d": "1/2015"}, {"body": "fyi directory app format code recursively skipping sym links default", "d": "1/2015"}, {"body": "awesome metal", "d": "1/2015"}, {"body": "sounds interesting vsavkin thoughts", "d": "1/2015"}, {"body": "translate vertical ones spirit would create previous next previous next would inject directive previousnext element considering comment nodes would inject directive element beforeafter sure elements created interfere think", "d": "1/2015"}, {"body": "vicb keep test consider feature rather optimization agree forget planning reintroduce behaviour next days sure worth adding disabled test", "d": "1/2015"}, {"body": "sounds like issue angularjs repo please reopen repo upcoming", "d": "1/2015"}, {"body": "hey could reopen repository thanks", "d": "1/2015"}, {"body": "hmmm accidentally created opened instead", "d": "1/2015"}, {"body": "please reopen issue repo", "d": "1/2015"}, {"body": "document looks awesome good work jeffbcross", "d": "1/2015"}, {"body": "supplement prior art document also quite interesting handles offlineonline realtime", "d": "1/2015"}, {"body": "wrong repo duplicate", "d": "1/2015"}, {"body": "wrong repo please direct issues", "d": "1/2015"}, {"body": "bhimisetty wrong repo guess wanted open issue honest support questions like one best fit github issues please use one support channels listed", "d": "1/2015"}, {"body": "wrong repository issue could please open try get resolved tomorrow", "d": "1/2015"}, {"body": "caitp sorry thank", "d": "1/2015"}, {"body": "also use general design allows use benchpress repeatable benchmarks non repeatable benchmarks basic abstractions stopwatch start markname metrics stop markname forcegc forcegc whether gc forced marking timeline split markname forcegc getmeasurevalues measure values calls startstopsplit return value start without stopsplit splits return measure values every lap also time since start gt geared towards needing get results realtime batches perflognormalizer normalizes differences perflogs different browsers eventually go implementation different webdriver drivers helpers browserreadywait wait silencedelay waits script network activity since silencedelay uses stopwatchsplit getmesaurevalues collect stream measure values benchmarkloop repeat benchmark multiple times without reloading window wait numbers get stable eg measuring regression line slope reporters consolereporter cloudreporter reports bigquery google internal reporters statistics regressionslope mean error calculation", "d": "1/2015"}, {"body": "maybe really needed perf tests", "d": "1/2015"}, {"body": "brainstorming ideas vsavkin class changedetector valuenames list context user username items itemslength itemslength null itemsmethod user stubs list mementos list values list null null null null null opcodes list", "d": "1/2015"}, {"body": "closed", "d": "1/2015"}, {"body": "closing already case", "d": "1/2015"}, {"body": "reopening issue tests docs feature", "d": "1/2015"}, {"body": "related", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "yep correct bug fixing bit tricker support move correctly", "d": "1/2015"}, {"body": "repo could please reopen", "d": "1/2015"}, {"body": "wrong repo", "d": "1/2015"}, {"body": "closing new cd rely records", "d": "1/2015"}, {"body": "wrong repo one looking", "d": "1/2015"}, {"body": "mhevery last time discussed conclusion worth supporting coalescence would speed cases ie one comment would require store one pointer every single records unused time think speed would worth increased memory usage", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "relevant due new cd implementation", "d": "1/2015"}, {"body": "juliemr would great could look get chromedriver please talk igorminar vojtajina", "d": "1/2015"}, {"body": "looks like progress happening yet released get details follow", "d": "1/2015"}, {"body": "wow cool", "d": "1/2015"}, {"body": "right possible generic way thought called macro directives would able big downside directives change dom compile introduce new directives therefore analyzing template ides tools gets really hard without executing directives could explain use case little", "d": "1/2015"}, {"body": "use functionality angular modifying templates runtime basically loading generic template customizing using runtime environment information feature present seriously reduce flexibility power angularjs", "d": "1/2015"}, {"body": "current work need functionality template overwrite runtime like biiiipy said", "d": "1/2015"}, {"body": "fall macro directive need macro directives use case would covered", "d": "1/2015"}, {"body": "see checked today chrome canary canary also flag mentioned bug problem still exists", "d": "1/2015"}, {"body": "duplicate", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "soliury could reopen issue repository version", "d": "1/2015"}, {"body": "think could reopen issue would fantastic definitely wrong thing rewriting changing file url directory url backends wo nt always even usually treat identical probably warrants investigation", "d": "1/2015"}, {"body": "lives", "d": "1/2015"}, {"body": "sparkles", "d": "1/2015"}, {"body": "needed cloud reporter", "d": "1/2015"}, {"body": "also add command line option force gc force gc", "d": "1/2015"}, {"body": "happen chrome canary canary", "d": "1/2015"}, {"body": "heap delta needed benchmarks made reproducible createdestroy everything run interesting number gc amount added", "d": "1/2015"}, {"body": "vote goes", "d": "1/2015"}, {"body": "smile", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "nt think anything angularjs sends tell send quick googling reveals one problem ex anyway support question asked elsewhere still believe bug angularjs please narrow clearly describe difference current expected behavior thnx", "d": "1/2015"}, {"body": "wrong repo btw guess wanted interact one", "d": "1/2015"}, {"body": "thanks tue jan pm pawel kozlowski notifications githubcom wrote wrong repo btw guess wanted interact one reply email directly view github", "d": "1/2015"}, {"body": "initial idea send command like via webinspectorservice libimobiledevice ios device command exists chrome remote debug seem exist webkit remote debugger protocol", "d": "1/2015"}, {"body": "juliemr know way person could talk", "d": "1/2015"}, {"body": "maybe see", "d": "1/2015"}, {"body": "wrong repo", "d": "1/2015"}, {"body": "already created", "d": "1/2015"}, {"body": "yes think right problematic could try create unit test produces error order mismatch", "d": "1/2015"}, {"body": "try come test fix also investigate collecting could better term perf", "d": "1/2015"}, {"body": "resolved resolved closing issue duplicate", "d": "1/2015"}, {"body": "thanks", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "closing per new ultra fast change detection", "d": "1/2015"}, {"body": "understand create different behavior js think case actually benefiting user helpful already deviate js null suppression without property error hard use vote throwing", "d": "1/2015"}, {"body": "rkirov tbosch still work done", "d": "1/2015"}, {"body": "already working", "d": "1/2015"}, {"body": "already implemented master closing", "d": "1/2015"}, {"body": "done components combination switch action item closing", "d": "1/2015"}, {"body": "vsavkin close", "d": "1/2015"}, {"body": "valid approach chosen closing relevant", "d": "1/2015"}, {"body": "already implemented master see", "d": "1/2015"}, {"body": "done tbosch", "d": "1/2015"}, {"body": "closing moving remainder", "d": "1/2015"}, {"body": "decided home atscript eventually js", "d": "1/2015"}, {"body": "sure recent change prompted jade seems support parentheses brackets attributes", "d": "1/2015"}, {"body": "agree deborahk expressive better syntactical syntax could mean shorter code compromise typing approachability scope variables may appear inside brackets lt gt outside outside content assumed javascript expression binding would oneway reminds linux command prompt expressions entered prefer general use cases think hello visitor hello username hello b username visitor hello myfactorygetusername inside attributes want second kpentchev proposal attribute assignments without ng beginning something like onclick event binding syncvalue twoway binding value property bindvalue oneway binding value property setvalue value string literals pointed important syntax must clearly distinguish string literal expression binding expression events declaration variables onclick always expression onclick click onclick textstyle bold syncvalue variable name otherwise twoway binding wo nt work bindvalue variable name expression processed expression bindvalue username bindvalue myfactorygetusername setvalue special case bindvalue may ambiguity regarding stringliterals expressions etc kpentchev proposal clarifies attributes takes care oneway twoway", "d": "1/2015"}, {"body": "eisenbergeffect syntax aurelia looks really nice", "d": "1/2015"}, {"body": "aurelia", "d": "1/2015"}, {"body": "think syntaxes aurelia already proposed eisenbergeffect please stop voting", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "think need force everything function arguments fields variables maybe nt need force tell people using problematic types ie ones need rewritten dart eg array", "d": "1/2015"}, {"title": "using vcomponent templatetag paramattribuets amp replace options work", "body": "plz see fiddles compileparamattributes amp copyattributes expected elementnode actually received documentfragment", "num": "699", "d": "1/2015"}, {"title": "possible bind component fields letting others inlined paramattributes", "body": "made component encapsulation using plugin tag component initializes plugin created clears deleted would nice use like thus declared also need vue instance containing components somehow react changes data user types something textarea currently using nonspecific form way wo nt able use way solve problem ca nt update parentmsg childmsg changes", "num": "698", "d": "1/2015"}, {"title": "vm object deleted leave transition function", "body": "like access dom object overlay vm element leave transition function template js object empty entering leave function", "num": "697", "d": "1/2015"}, {"title": "\u76f8\u6bd4 \u4f7f\u7528 component \u65f6 viewmodel \u4f5c\u7528\u57df\u53d8\u4e86\u5bfc\u81f4\u4e0d\u517c\u5bb9", "body": "\u4ee5 vue \u5b98\u65b9\u7684 treeview item \u589e\u52a0\u4e86\u4e2a dataname modelname vue \u5728 jsfiddle \u5bf9\u4e8e treeview \u4e2d\u7684\u4e0b\u9762\u7247\u6bb5 \u5bf9\u4e8e viewmodel \u7684 name \u4e4b\u540e \u89e3\u91ca\u4e3a\u5176\u7236 viewmodel \u7684 name \u6e32\u67d3\u7ed3\u679c hello \u6e32\u67d3\u7ed3\u679c hello \u7248\u672c \u5728\u4e0a\u8ff0\u73af\u5883\u4e0b\u4e5f\u89e3\u91ca\u4e3a", "num": "696", "d": "1/2015"}, {"title": "component option inherited", "body": "currently inspecting shows would make sensebe possible show instead", "num": "695", "d": "1/2015"}, {"title": "transition stuck leave", "body": "trouble transitions api upgraded recently ca nt get work html less directionscontent transition height ease opacity ease height margintop bordertop solid eee padding js methods toggledirectionsform function var show get showdirectionsform result toggling initial state html", "num": "694", "d": "1/2015"}, {"title": "allow specifying private assets using camelcase", "body": "would nice could specify private assets dashes names eg components directives using camelcase way moving take advantage object literal property value shorthands", "num": "693", "d": "1/2015"}, {"title": "tag may enough serve insertion points", "body": "writing component amp vue compile template compiled saw tag moved outside opinion add attribute well tag name serve insertion points transcludejs sorry poor english", "num": "692", "d": "1/2015"}, {"title": "cancelled event continuing traverse dom horizontally", "body": "quite sure correct behaviour maybe wrong want break event first captured node navigating nodes like last node gets selected instead first one spawning new events single thread broadcast gets cancelled stopping execution case good things however current implementation neither first second possibly code altered", "num": "690", "d": "1/2015"}, {"title": "vmodel reactivity issue iterating object", "body": "snagged quirky behavior iterating object referencing model way get reactivity working item key way input blur keypress unless attribute supplied also counterpoint array use case key supplied vmodel using instance renders name input also noticed filled empty values blurring field copy entire field value across next model using skip cursor next input field aside loving vue thanks much", "num": "689", "d": "1/2015"}, {"title": "ready triggered android", "body": "seems ready function component never triggered android browser android attached compiled others well triggered ready quite buggy solution found time put setinterval compiled function check dom contains element template nt find ready triggered could caused buggy interpretation documentcontains android browser android documentcontains used indoc function vuejs", "num": "688", "d": "1/2015"}, {"title": "different behaviors changing object array", "body": "expected output assumed may intended though actual output", "num": "687", "d": "1/2015"}, {"title": "form handlers", "body": "hey please check simple examples", "num": "686", "d": "1/2015"}, {"title": "uncaught typeerror read property update undefined", "body": "error points code problem occurs setting big amount data single property complex component ca nt reproduce fiddle looks like array changes length iterating giving saving length fixes problem", "num": "685", "d": "1/2015"}, {"title": "components nt get attached transcluded parent components", "body": "transcluded component rendered dom event never fires fiddle parent component html child component visible hardcoded html transcluded component deleted everything works using incorrectly bug", "num": "684", "d": "1/2015"}, {"title": "", "body": "html value js var testvm new vue", "num": "682", "d": "1/2015"}, {"title": "vref working element", "body": "nt know working planned would like vref work cases also ca nt find references docs case ps thank implementing waitfor mechanism saved lot trouble", "num": "681", "d": "1/2015"}, {"title": "vwith working element", "body": "specific issue seems happening elements jsfiddle showing behaviour basically value passed via defined first rows second rows difference templates code fiddle html output value extra value extra value extra extra extra extra", "num": "680", "d": "1/2015"}, {"title": "initialize template dynamically result ajax call", "body": "want load template vuejs component dynamically like make ajax call using jquery whatever server returns template vuejs component simplified version code ajax call removed since irrelevant data coming example using created hook thought would suitable newer template never rendered older one possible achieve", "num": "679", "d": "1/2015"}, {"title": "directiveslength error read property length null", "body": "using vueify app compiled dev get following error use custom directives error occurs sometimes weird idea anyone thanks context scriptjs javascript linker function called already compiled piece dom instantiates directive instances param vue vm param elementdocumentfragment el return functionundefined", "num": "678", "d": "1/2015"}, {"title": "vif array", "body": "could vif exclude empty arrays another way instance imagine given vue list things item new vue el container data function return list events list add function item thislistpush item empty array would prefer content included dom would prefer included push items array", "num": "677", "d": "1/2015"}, {"title": "new option preventing vue upgrade", "body": "process upgrading codebase using vue run several issues regarding automatic conversion component id child component key function constructor name registry components looks like map gets sent iterated calls vue seems want try coerce function name using function support forward slashes ostensibly characters valid id valid function names really blocking issue us mean time fork vue allow upgrade happen timeframe allotted opinion conversion id function constructor name much magic essentially debugging feature thanks", "num": "676", "d": "1/2015"}, {"title": "vue nt work", "body": "error warning nt work screenshot", "num": "675", "d": "1/2015"}, {"title": "deep watching computeds", "body": "support deep watching computed dependencies case computed whose dependency array objects objects ie selected true boolean property like computed return result anding values field currently change one objects array trigger reevaluation computed way unsupported feature edit attaching fiddle", "num": "674", "d": "1/2015"}, {"title": "uncaught typeerror read property childnodes undefined", "body": "wrong code get error located function makechildlinkfn linkfns uncaught typeerror read property childnodes undefined nt get running put simpler content like got error trying build example isolate possible memory leak appears content span vtext options thanks", "num": "673", "d": "1/2015"}, {"title": "watch options", "body": "notice pass options vm instance method achieve thing also want instance option", "num": "672", "d": "1/2015"}, {"title": "vevents callbacks bind child vm", "body": "html", "num": "671", "d": "1/2015"}, {"title": "vmodel select elements honor number attribute", "body": "changing value select element sets model value string even number attribute specified select element example jsfiddle", "num": "670", "d": "1/2015"}, {"title": "nested vrepeat adding objects inner array page scrolls top automatically", "body": "please see click add days populate list click xxx make page scroll top anyway prevent", "num": "669", "d": "1/2015"}, {"title": "template variables nt work elements sometimes", "body": "use certain computed value svg element follows get error yet use different computed exactly html works yet output right svg correct get object title choose category icon noselection category overview object title portrait icon switzerland noselection category overview press continue button twice debugging works loads correct icon computed looks follows currenttitle get function experienced similar problems using variables vclass element vcomponent", "num": "668", "d": "1/2015"}, {"title": "vref references updated", "body": "experiencing behaviour nt know normal one issue using array containing child references updated datas actually thanks", "num": "667", "d": "1/2015"}, {"title": "possible memory leak calling vm destroy true", "body": "use case vuejs create vrepeat divs bootstrap tabs parent div say main click call vm destroy true replacing parent div another vm w divs using chrome task manager see memory usage growing took several memory snapshots amp saw huge number detached dom tree corresponding vrepeats divs", "num": "666", "d": "1/2015"}, {"title": "mustache binding nt work starting underscore", "body": "seems vuejs properly parse mustache bindings start underscore like type works fine handlebarsjs could please add support kind binding demo", "num": "665", "d": "1/2015"}, {"title": "filterwrite going model back dom", "body": "think addressed another issue ca nt find case scenario problem edit another example problem", "num": "664", "d": "1/2015"}, {"title": "invalid expression generated function body scopeprof scopecprof", "body": "tried use variable value inside nt work right syntax edit tried worked nt find variable repeat nt happend", "num": "663", "d": "1/2015"}, {"title": "frozen data models", "body": "suggest allow frozen trees data model example current version rejects frozen model frozen objects nt need observed several instances vue share template means compile template current code would like", "num": "662", "d": "1/2015"}, {"body": "probably use vcomponent tag start use template block must define template component dom opposed using templating engine like jade handlebars", "d": "1/2015"}, {"body": "far know ca nt make input components limitations vue made thread discussion nt heard anything yet", "d": "1/2015"}, {"body": "replicate behavior jsfiddle make easier solve issue", "d": "1/2015"}, {"body": "seems like nt working debug looks like changes value traversed looks fine", "d": "1/2015"}, {"body": "btw using directly appending google maps infowindow everything worked fine", "d": "1/2015"}, {"body": "template changes well since tried added comments element", "d": "1/2015"}, {"body": "possible make isolated reproduction issue", "d": "1/2015"}, {"body": "found issue setting instantiation worked fine nt work changed everything works", "d": "1/2015"}, {"body": "way change one attribute time something like", "d": "1/2015"}, {"body": "use anyway trigger one update cycle", "d": "1/2015"}, {"body": "oh good", "d": "1/2015"}, {"body": "useful path string eg", "d": "1/2015"}, {"body": "thanks working replaced nt bug breaking change bug", "d": "1/2015"}, {"body": "clarify issue using list children generated", "d": "1/2015"}, {"body": "yes exactly", "d": "1/2015"}, {"body": "suspicion inputs blurring actually deleted recreated next frame means lose focus guess though would mean vue reruns entire change one object element seems unnecessary anyway fiddle anyone wants look", "d": "1/2015"}, {"body": "thank codepen tmiguelt think suspicion absolutely correct", "d": "1/2015"}, {"body": "guide avoid directly setting elements databound array indices changes picked vuejs instead use agumented set method instead use fiddle fixed also fixed coffeescript getting rid entirely", "d": "1/2015"}, {"body": "zhouzhuojie probably close issue seems like question answered tmiguelt", "d": "1/2015"}, {"body": "assuming question along lines nt function get called call submit form directly cause submit button clicked suspicion js problem vue mdn says form onsubmit event handler example onsubmit return false triggered invoking method geckobased applications general guaranteed invoked html user agents", "d": "1/2015"}, {"body": "couple times seems watchedreferenced property nt originally specified data section adding property usually cures", "d": "1/2015"}, {"body": "issue also repeats try nullify data property bind several times example html customerid customername try set raise error first run modify raise error next loop", "d": "1/2015"}, {"body": "changing fixes problem", "d": "1/2015"}, {"body": "try fiddle html value", "d": "1/2015"}, {"body": "thanks", "d": "1/2015"}, {"body": "although reason nt work fiddle html value", "d": "1/2015"}, {"body": "weird behavior trying something weird tag nt really make sense explicitly hidden dom components designed add content dom look dom code runs appears html gfd gfd reason completely disappeared anyway might want rethink code want component nt put want reference element use instead", "d": "1/2015"}, {"body": "nt see problem using vcomponent also believe planned behavior disappears compilation nice want divide html files blocks block container contents place like component loses vm context one el also present points comment node nt see problem link vref component vm", "d": "1/2015"}, {"body": "ca nt change template component created property component instances parameter pass constructor initial template sort loading barspinner replaced content loaded way create component spinner component new content loaded used dynamic vcomponent parent template changed variable bound new component loaded server causing component change spinner new component also wo nt need scope data functions also use dynamic vpartial", "d": "1/2015"}, {"body": "thanks comment use case different trying display html markup returned server page html markup vuejs directives eg vtext etc want reactive figured part template fine suppose could load html data part different component creating component instance pass template", "d": "1/2015"}, {"body": "still think situation look fiddle code duplicated html javascript create default component vuecomponent default template replaced seconds create parent viewmodel var vm new vue el body data currentview default pretend load data server would actually get url data function windowsettimeout function", "d": "1/2015"}, {"body": "absolutely right actually using currentview pattern described main website nt think would also apply case well thanks showing light", "d": "1/2015"}, {"body": "experiencing error revert back make app work almost definitely bug could try investigations", "d": "1/2015"}, {"body": "actually pretty weird indicates linker called target vm already destroyed would need isolated reproduction identify cause", "d": "1/2015"}, {"body": "kvdmolen repro issue jsfiddle look", "d": "1/2015"}, {"body": "vif conditionally insert remove element based truthyness binding value need think javascript expression evaluate false array empty", "d": "1/2015"}, {"body": "like checking mutation graph array become empty set false", "d": "1/2015"}, {"body": "nt check array mutation vue", "d": "1/2015"}, {"body": "could", "d": "1/2015"}, {"body": "html fiddle", "d": "1/2015"}, {"body": "oh okay nt realize could access array properties inside directive thanks", "d": "1/2015"}, {"body": "issue nt function believe issue vue dynamically creates constructor function using camelized name inherently name variable valid javascript identifier slashes camelize ignores slashes see annoying see thinks believe recommended way namespacing components use hyphens camelize correctly also able used directly html may working library extent", "d": "1/2015"}, {"body": "also think generally recommended use hyphens component identifier dealing web components example polymer required use name attribute component", "d": "1/2015"}, {"body": "script tags bottom page code wrapped dom ready callback element nt exist try instantiate vue", "d": "1/2015"}, {"body": "thanks right", "d": "1/2015"}, {"body": "edit actually trouble figuring exactly causing difference code fiddle going close reproduce consistently", "d": "1/2015"}, {"body": "able reproduce fiddle closely replicating code ca nt tell exactly problem seems something setting parent list compilation", "d": "1/2015"}, {"body": "vue nt support deep watching dependencies vue nt register dependency initially nt exist list objects exactly issue posted couple weeks ago simplified fiddle absolute minimum notice still nt work allselected nt change however define property start even nullundefined value code work fiddle thing changed making list equal", "d": "1/2015"}, {"body": "thanks explanation seems add function exists order add things compile reregister dependencies fixed code close issue related one already open", "d": "1/2015"}, {"body": "put work sure getting error since element html inside nt break though think issue child nodes directive bound gone update honestly shot dark run situation seems like want array seem like right tool job", "d": "1/2015"}, {"body": "fixed", "d": "1/2015"}, {"body": "going assume nt possible watch object convenient form might manually lot code", "d": "1/2015"}, {"body": "closing inactivity", "d": "1/2015"}, {"body": "bad figured", "d": "1/2015"}, {"body": "think problem value correct amp html always handle strings", "d": "1/2015"}, {"body": "think actually bug works elements nt look like works", "d": "1/2015"}, {"body": "yep right could problem case arithemics value like", "d": "1/2015"}, {"body": "looks like fixed dev branch hope works selects allow multiple values tonumber function support arrays", "d": "1/2015"}, {"body": "okay figured issue apparently data passed parent vwith following way caused inconsistent behaviour nt know whether bug desired way working hope helps someone else might run issue", "d": "1/2015"}, {"body": "yep normal vue behaviour afaik update dom frame model changes checking components nt created yet next frame fiddle need access components soon created get dispatch event ready callback parent view model listen perfect example vue guide right", "d": "1/2015"}, {"body": "check memory usage vuenexttick vue deliberately lot things asynchronously avoid blocking ui probably nt delete immediately addition might keep deleted vms longer case need transition rate dom items removed eventually might immediately", "d": "1/2015"}, {"body": "done try isolate code amp get back", "d": "1/2015"}, {"body": "hi isolated code end memory leak even obvious changing thanks note behavior associated pjax framework may know pjax also used github noticed github growing used memory aka memory leak example click repeatedly issue button", "d": "1/2015"}, {"body": "ended conclusion core vue creating leaks source compiler probably closure somewhere", "d": "1/2015"}, {"body": "hmm ran fiddle checked chrome task manager memory usage definitely grow although think still possible could issue code rather vue either way might want look gets back", "d": "1/2015"}, {"body": "hmm looking code suspect memory leak might code calling vue constructor multiple times run modify data necessary", "d": "1/2015"}, {"body": "hi thanks reply pjax application corresponds new page display click app menu button new html content loaded via ajax put main content div corresponding vue object related data initialized remove jquery events call destroy previous view object removing suggest case keep vue object replace el content dynamically", "d": "1/2015"}, {"body": "ca nt speak memory usage situation many better ways going read page guide want make spa vue change pages etc first make pages modules see link use routing library module hash change using webpack put dynamic directive page changes main page component module loaded", "d": "1/2015"}, {"body": "long solves memory leak problem least try trying build alternative heavy angular proto built please help escape monster", "d": "1/2015"}, {"body": "read link provided nt think solve mainly packaging solution could come vcomponent usage wich test", "d": "1/2015"}, {"body": "ah sorry meant whole page section mention routing although highly recommend packaging pages modules anyway since allow lazy load", "d": "1/2015"}, {"body": "tried sample uses deprecated vview vcomponents see memory leaks sadly conclude vue ready prod", "d": "1/2015"}, {"body": "yeah tried new version seem legitimate issue", "d": "1/2015"}, {"body": "ran first example locally chrome dev tools heap snapshots heap recording shows pretty clean garbage collection mind posting heap snapshotrecording results", "d": "1/2015"}, {"body": "tried another way check see memory grows seems chrome choose run gc performance reasons manually forcing gc memory seems recovered red arrow still exist detached dom trees shows leak exists post another capture show step click button problem even recover manually find crazy go app eat smthing like per menu click maybe point chrome would decide recover", "d": "1/2015"}, {"body": "detached dom trees reading using debubgger know retainers object tab maybe example incorrect app bad jquery interaction", "d": "1/2015"}, {"body": "outside task manager initial stage mutliple clicks counter reach click force gc easy interpret even gc lost last column shows pure js memory lower gc", "d": "1/2015"}, {"body": "think heap usage seeing perfectly normal believe see similar usage using frameworks snapshots probably want take lot see keep growing indefinitely gc complex long gc produces proper collection nt affect user experience fine addition chrome lot jit compilation js code compiled machine code gced possibly contributing growing usage even forced gc", "d": "1/2015"}, {"body": "nt bug vue intentional feature guide bottom section hood vuejs attaches hidden property ob recursively converts object enumerable properties getters setters enable dependency collection properties keys starts skipped means nt proxied onto still attached data field accessed fiddle however workaround idea started variable underscore probably private variable probably nt binding dom stuck data structure workaround fine change remove underscore since nt private anyway", "d": "1/2015"}, {"body": "thanks lot", "d": "1/2015"}, {"body": "another case access index key value adding deleting property whoes key starts underscore workaround case fiddle thanks advance", "d": "1/2015"}, {"body": "hmm sure behaviour happening might actually bug think making things difficult using underscores properties trying bind", "d": "1/2015"}, {"body": "actually using underscores really choice data structure defined found easy way change addition found another wired behaviour add another normal property along adding property underscore works fiddle", "d": "1/2015"}, {"body": "properties observed changes use store static data change time need change data structure create beforecompile hook js var data id new vue created function set id dataid also probably keep reference view model instance created properties instead manipulating data object like jsfiddle provided", "d": "1/2015"}, {"body": "yet another example time currency", "d": "1/2015"}, {"body": "currently write filters work better tool condition user interface example application write filter used disable alpha keys disambiguate character used separate decimal places would nice keep functionality though maybe different kind filter", "d": "1/2015"}, {"body": "vue tag attribute requires expression valid javascript code expression array object number case could hand simple html attribute requires string hence use mustache bindings variable interpolation see ref", "d": "1/2015"}, {"body": "suggestions going hope vuecomponent already precompiles templates nt know sure", "d": "1/2015"}, {"body": "template compilations cached long string frozen object usage seems interesting take look vacation", "d": "1/2015"}, {"body": "thanks informal question plan integrate formatjs considering contributing feature", "d": "1/2015"}, {"body": "tarh personally plan feel free contribute", "d": "1/2015"}, {"body": "think questions coming confusion components guide says vuecomponent asset registration method means return navbar component store manipulate rather defines navbar components created actually instantiate component need use somewhere html template guide mentions ways use vcomponent directive like html use component name tag name like use create component location dom used classical inheritance like defining class using like instantiating class address questions property vue instance automatically populated child components instantiate html along vref directive like html could modify uinav component accessing properties wanted however modifying data child object often better using event system decouples components allowing reused modified lot less difficulty example happens put uinav component inside another component change code accesses child component another level component chain", "d": "1/2015"}, {"body": "documentation vref registers reference child component parent easier access add child component parent vm conversely adding component parent vm add references vm automatically documentation due limitations vue detect properties directly added deleted object therefore expected addingremoving references vm object done via vm add vm delete following documentation one way add components dynamically parent vm well creating vref javascript create root vm var vm new vue el body create classtype profile root vm attached per desired dynamic behavior var profile vueextend name profilecomponent el function return documentcreateelement p template firstname lastname aka alias create instances type profile var new profile data firstname edward lastname snowden alias citizen appendto documentqueryselector somenode var new profile data firstname anne lastname frank alias appendto documentqueryselector somenode add vm add vm add access components via reference directly consolelog vm therefore following might useful instead use framework provided api set add delete", "d": "1/2015"}, {"body": "tmiguelt builtap thanks guys reason make something like library component frontend making something like common admin cp type applications lot components added admit documentations vuejs far basic sample application uses vueloader using plain javascript thanks pointers appreciated happy new year", "d": "1/2015"}, {"body": "nt contain first pass computed property wo nt pick dependency essentially got dead computed property never updates think mentioned docs best practice predictable data structure ie explicitly list tab objects compilation builtap solution also works", "d": "1/2015"}, {"body": "yes recognize nt data structure intentionally requesting either way dependencies updated defined possibly better vue log warning message something bound undefined property case lot trouble working dom behaving strangely warning might save people issue", "d": "1/2015"}, {"body": "use add property observed", "d": "1/2015"}, {"body": "actually reason nt defined example really sure jsfiddle anyway vote vue warning situation think plenty warnings development version good idea", "d": "1/2015"}, {"body": "yeah agree usage feels cumbersome would fairly easy extend proposed method nt need unfortunately deal possible situations handled", "d": "1/2015"}, {"body": "hi briansakal code works fine check ps fiddle use vuejs", "d": "1/2015"}, {"body": "closing inactivity", "d": "1/2015"}, {"body": "close duplicate feel free continue discussion briefly looked tds file vue nt time actually write maybe indus solution help", "d": "1/2015"}, {"body": "cyancat sure understand trying explain multi root template exactly nt see reason would want set data property view model use vwith override value many ways", "d": "1/2015"}, {"body": "agonbina set default data issue issue vwith work properly case simple one without default data multi root template single root template multi root template case comment block make template multi root type complicated example include cases could see different caused structure template", "d": "1/2015"}, {"body": "please append jsfiddle example", "d": "1/2015"}, {"body": "root cause issue computed setter triggered compilation phase means dom altered compilation linker work properly brandonjpierce pointed recommended perform dom manipulations computed setters want achieved simply using watchers instead", "d": "1/2015"}, {"body": "write directive implement sorting functionality close issue", "d": "1/2015"}, {"body": "ayamflow oh meant want keep content use vue manipulating visual changes right find problem edge version", "d": "1/2015"}, {"body": "yes using vuecomponent vuevueextend", "d": "1/2015"}, {"body": "ayamflow although bit tricky still achievable using method mentioned may want start separate thread someone fixes", "d": "1/2015"}, {"body": "yep thanks try", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "also problem used filters", "d": "1/2015"}, {"body": "one example events would useful see elegant way please let know thank", "d": "1/2015"}, {"body": "nt need events vstyle", "d": "1/2015"}, {"body": "bdaglish great answer much simpler slight modification used sliders", "d": "1/2015"}, {"body": "problem could nt find easy fix inside vue instead made sure comment always end list sorting sortable options javascript onend function evt thislistsplice evtnewindex thislistsplice evtoldindex", "d": "1/2015"}, {"body": "could use polyfill reliable estimates show around internet still using sad true", "d": "1/2015"}, {"body": "nt think work code seems try neither exist also tries native defineproperty works dom nodes need work ordinary js objects nt way testing however", "d": "1/2015"}, {"body": "yeah think right say partial support common case getters setters values", "d": "1/2015"}, {"body": "looks good nt impractical support input types", "d": "1/2015"}, {"body": "awesome try make work collections fun relevant people existing backbone apps amp want get rid bb view part", "d": "1/2015"}, {"body": "made test works partially works partially incomplete see lot complete much work sync way update newly added models stuff created must performed ends maintainning two arrays objects syncrhonized unless choose refresh full array array change", "d": "1/2015"}, {"body": "ahmadibrahim ratchet vue work deciding vue ratchet ionic would prefer vue solution course", "d": "1/2015"}, {"body": "vue great ratchet pain ass think ratchet dead tried ionic nt like used vue bootstrap", "d": "1/2015"}, {"body": "went ionic nt want deal mobilerelated browser issues active angular painful compared vue project deadline angular right tool hybrid app took several hours understand subtle differences provider service factory feature angular like vue dependency injection makes testing easier end appreciate vue even simplicity", "d": "1/2015"}, {"body": "tested several routers route bootstrap tabs change pathjs nt work director works fine course big minified without server code dispatch works fine bytes minified dispatchjs wins tested crossroadsjs bigger scaleapp seems good complete framework size director anyway", "d": "1/2015"}, {"body": "boussou great success one", "d": "1/2015"}, {"body": "looks good name router director", "d": "1/2015"}, {"body": "recently held vuejs meeup events japan want know future vuejs loadmap sorry poor english", "d": "1/2015"}, {"title": "event execution stoplistening call another object prevent handler executing", "body": "two related objects listening event appears event execution one object call stoplistening another object prevent handler callback execution looks like events get cached somewhere trigger stoplistening change let illustrate example var parent new backbonemodel var child new backbonemodel var vent new backbonemodel parentlistento vent alert function alert parent childstoplistening childlistento vent alert function alert child venttrigger alert expectation parent handler called first child alert come however alerts issued backbonejs", "num": "3466", "d": "1/2015"}, {"title": "router confusion", "body": "spent hours trying debug first backbone app none urls handled router set router like js var approuter backbonerouterextend routes index contact contact newsletter newsletter jobs jobs ran app like js var app approuter new approuter approuteron route function route params consolelog route params function use strict click link webpage browser refreshes request nt router history api supposed jump catch links use app route nowhere documentation allude fact manually hijack links page run router nowhere way docs worded expecting set told use confusing explained somewhere", "num": "3464", "d": "1/2015"}, {"title": "issue requiring bower installed backbone browserify", "body": "please see issue opened browserify repository details sounds like file omitted backbone installed bower like bower install node dependencies anyways let know think", "num": "3462", "d": "1/2015"}, {"title": "trigger object", "body": "currently calling object prepend prop value arguments get triggered desired functionality ca nt find tests behavior javascript objon event function consolelog arguments objtrigger event first arg logs first arg", "num": "3460", "d": "1/2015"}, {"title": "anyone please let know get text ui similar gettext method selenium", "body": "", "num": "3458", "d": "1/2015"}, {"title": "suggestion backbonemodelclone", "body": "currently issue could arise attribute value type object newly cloned model attribute refers object original model propose something like", "num": "3457", "d": "1/2015"}, {"title": "confusing docs viewel", "body": "docs viewel say thisel created view tagname classname id attributes properties specified el empty div contradicted example since assigned string seems make equivalent unclear would use case instead", "num": "3454", "d": "1/2015"}, {"title": "memory leak stoplistening", "body": "hi issue related ticket think feel free close reference fix still leak nt apply listentoonce take look following example example runs backbone master works way problem listening listener well cleaned correctly line nt empty therefore keep reference correct project causes problems since object listened always listeners using references old objects kept forever might rethink solution workaround issue albin", "num": "3453", "d": "1/2015"}, {"title": "give collectionset parse option undocumented feature", "body": "please add description docs", "num": "3451", "d": "1/2015"}, {"title": "create modules login facebook google popup home page magento", "body": "create modules login facebook google popup home page magento give idea like type popup", "num": "3450", "d": "1/2015"}, {"title": "listentoonce spaceseparated events attaching callback", "body": "js eventsonce foo bar callback eventstrigger foo eventstrigger foo eventstrigger bar eventstrigger bar consolelog count gt gt true js eventslistentoonce target foo bar callback targettrigger foo targettrigger foo targettrigger bar targettrigger bar consolelog count gt gt false removing seemingly overkill would fix", "num": "3448", "d": "1/2015"}, {"title": "url inconsistencies", "body": "hello spotted couple inconsistencies url formats used backbone wondering thoughts resolving router told use urls pattern yet models pattern personally experience leans towards patterns preceding slash way differing patterns resolved", "num": "3447", "d": "1/2015"}, {"title": "validate set", "body": "reading old tutorial see model used validate set well save understand would reduced save definitely found case breaks model set model defined validate function set invalid value field set another invalid value another field validate save two invalid values fallback first set invalid value like way previous values saved fallbacks replaced invalid validation discovered quite foolproof system validation set definitely foolproof invalid values ca nt get passed inadvertently remain model thoughts jashkenas love hear reasoning reduced set learning added following model key value key value style arguments typeof key object attrs key options val else attrs key val overrides behaviour every model get tiresome", "num": "3446", "d": "1/2015"}, {"title": "documentation unclear", "body": "hi firstly love backbone new enjoying far finding documentation difficult understand without resort searching online tutorials know quite free framework lock people much figuring little bits hard example looking explanation default validate called also called passed supposed pass option case trying extend want attributes validated obviously passing function supposed pass defined function general even though love stuff feel documentation could really benefit lists available options function like method like way noob could easily ascertain default however thanks great tool", "num": "3445", "d": "1/2015"}, {"title": "invalid parameters", "body": "backbone route parameters decoded via parameter malformed eg thrown since user control url happen even caution taken encode parameters truly exceptional case things broken execution stop return parameter", "num": "3440", "d": "1/2015"}, {"title": "change event bound modelfetch nt work", "body": "tried following binding model today long story short model sent jqueryajax option jquery tries make sense url method appends functionbody url seems really counterintuitive", "num": "3439", "d": "1/2015"}, {"title": "chance unattach view layer backbone", "body": "hey guys backbone lightweight library enables us solid foundation create web apps period long time using view layer although lightweight well want know chance remove backbone core two years ago started use backbone since way think modularization changed decoupled due extension possibilities facilities create plugins top comes really easy get hence times used builtin view layer design something barely unnecessary think weakest point backbone however making library slightly heavier words every project make using backbone almost views layer dead waiting opportunity excluded totally unusable dust surface thought plan make plugin discussing guys react irc see something really easy attach independent disclaimer question followed opinion nt far absolute truth maybe something related nt know", "num": "3438", "d": "1/2015"}, {"title": "backbone view updated unexpected", "body": "newbi backbone try write simple applications learn backbone application contains list items user adddelete items user hover one item view item changed color red othewise color black full codes app however works move mouse items one one slowly move quickly found may one items colored red expected going", "num": "3433", "d": "1/2015"}, {"body": "actually discussing cause behavior", "d": "1/2015"}, {"body": "fyi jmeas created hijacking form submissions", "d": "1/2015"}, {"body": "good utility know thanks", "d": "1/2015"}, {"body": "nt router history api supposed jump catch links use app route designermonkey felt way first learning backbone time though come think actually concern view one role views link dom rest app right would weird router history reached changed behavior dom elements also big fan ambient management things way routerhistory could task much rather configure perlink might sound like hypocrite given backboneintercept works lib intended temporary solution time sit work substantial overhaul bb routing agree docs mention explicitly guide route information would naturally fit backbone nt really guides though sort information sort baked api marionette docs way frowning perhaps note could added section router method", "d": "1/2015"}, {"body": "get point backbone reason like compared angular nt assume anything yeah learning actually making sense router think confusing first", "d": "1/2015"}, {"body": "think confusing first yeah totally relate whip pr adds note docs sure would considered merge would definitely help future developers", "d": "1/2015"}, {"body": "whip pr adds note docs", "d": "1/2015"}, {"body": "maaaaaaybe smile", "d": "1/2015"}, {"body": "nt think time let know make one", "d": "1/2015"}, {"body": "see length jmeas plugin ton different ways handle app different requirements sometimes nice able cancel route route within specific context instance doc note would great", "d": "1/2015"}, {"body": "solved installing backbone npm rather bower", "d": "1/2015"}, {"body": "hey jridgewell thanks pointing think docs cover though bit removed backbone event methods also support event map syntax alternative positional arguments nt seem make much sense though confused", "d": "1/2015"}, {"body": "nt seem make much sense trigger though agree issue nt object syntax value prepended arguments working refactoring post one gotchas noticed two others open separate issues", "d": "1/2015"}, {"body": "see last comment others backbone attributes shallow design easily change base model", "d": "1/2015"}, {"body": "yep thanks florianr generally considered bad idea store anything primitives hash proposing would better handled deep structured clone base model perfect place", "d": "1/2015"}, {"body": "florianr thanks feedback guys", "d": "1/2015"}, {"body": "case selector tagname definitely unclear fix", "d": "1/2015"}, {"body": "thanks thu jan pm adam krebs notifications githubcom wrote case el selector tagname definitely unclear fix reply email directly view github", "d": "1/2015"}, {"body": "pull request already open address issue although seems desire merge time", "d": "1/2015"}, {"body": "types things open pull see looks need open issue first", "d": "1/2015"}, {"body": "hi thejameskyle thanks pointing right function evaluated spaceseparated event nt think removing right approach pull fix shortly", "d": "1/2015"}, {"body": "nt think removing right approach", "d": "1/2015"}, {"body": "needed", "d": "1/2015"}, {"body": "found lt line routes converted history part defined could use router pre post slashes optional problem seen history part match routes slashes yet nt resolve functions functions nt slashes", "d": "1/2015"}, {"body": "defining line regexs adding replace line trick send pr like", "d": "1/2015"}, {"body": "hi designermonkey thanks pointing see mean think problem conflating urls fragments model urls primarily meant making requests server fragments necessarily entire url meant clientside routing said model urls used fragments enabled stripping leading slash hope helps smiley", "d": "1/2015"}, {"body": "ok order make consistent across areas use router fragments urls well could nt tiny change added", "d": "1/2015"}, {"body": "figured example still point options lists would still helpful", "d": "1/2015"}, {"body": "user nt really control url feed bizarro urls website give invalid pages either form type graceful invalid urls emitting error way allows app handle think around historystart nt good enough", "d": "1/2015"}, {"body": "user nt really control url feed bizarro urls website give invalid pages either form type graceful right urls nt always created domestically search urls especially problematic often fed external source eg invalid urls emitting error way allows app handle think trycatch around historystart nt good enough nt think someone errantly navigate like app allow modify query wrapping means execution stopped route executed option dump whoops url malformed message possible happen even url correctly escaped", "d": "1/2015"}, {"body": "think nicer api developer writing router would", "d": "1/2015"}, {"body": "might event work better ie error matching route route unmatched edit thinking would better doh", "d": "1/2015"}, {"body": "event nt bad idea nearly use cases fine passing along parameter otherwise could handle event know route anything better broken page", "d": "1/2015"}, {"body": "arguments mismatch change event calls callback expects first param treating need guard", "d": "1/2015"}, {"body": "found prodding since last used backbone logical connection property model changed sync server seemed natural expected work box agree seems logical backbonemethods events objects connectable perhaps using model unconventional way intend model hold state searchform somewhat surprised nt stumbled upon problem earlier", "d": "1/2015"}, {"body": "hi whitefire thanks bringing stage game api unlikely change much recommend bit explicit much typing much less error prone", "d": "1/2015"}, {"body": "agreed thank time", "d": "1/2015"}, {"body": "best way use view layer make views otherwise feel free delete copy backbone", "d": "1/2015"}, {"body": "checkout henrikjoreteg excellent ampersandjs modular fork backbone created solve exact issue", "d": "1/2015"}, {"body": "jashkenas using react top bottom using backbone builtin view layer okay thanks clarifying tgriesser already heard long time ago seeing sounds exactly want give shot thank", "d": "1/2015"}, {"body": "hi mention comment javascript pass value reference mention references objects stored prototype shared amongst instances default attributes property backbone init two objects reference happening example think model constructor clone defaults add attributes thanks", "d": "1/2015"}, {"body": "want clone defaults initialize general bad idea store objects prototype backbone nt going help", "d": "1/2015"}, {"body": "sure similar precedent languages everyones favourite gotcha mutable default parameters python argue scope bb handle instance competition mootools shallow clone objects models prototype spyropress make defaults function wo nt run issue", "d": "1/2015"}, {"body": "hey asparagino thanks reporting always wondered edge cases would bite us know smiley actually use deal unicode escapes firefox maybe browsers research see instead", "d": "1/2015"}, {"body": "work newsy site seo friendly urls pages like fail raises exception whereas url without urlencoded percent sign succeed ideally valid url would work regardless whether fragment urldecoded twice without error", "d": "1/2015"}, {"body": "fyi call added deal fact browsers ie firefox returns unicode characters percent encoded", "d": "1/2015"}, {"body": "think fixed mind giving try", "d": "1/2015"}, {"body": "might making leaps think correct behavior browser return valid uri uri components location object attributes value href attribute must absolute uri reference percent character part uriencoded octet valid character uri percent character always reserved purpose escape indicator must escaped order used data within uri page would nt expect solved anytime soon fix backbone still great idea think would value following browser vendors besides firefox clarifying implementing standard behavior", "d": "1/2015"}, {"body": "think would value following browser vendors besides firefox clarifying implementing standard behavior hope smiley", "d": "1/2015"}, {"body": "bug filed webkit internet explorer nt really expect much action old component browser maybe folks lot experience least chime question", "d": "1/2015"}, {"body": "macgyver debugging looks problem url decoding process within backbone even construct valid url part calling encodeuricomponent param construct url decodeuri called locationhref first url split apart decodeuricomponent called param browser returns invalid uri location object backbone partially decoded deescaped already decodeuri call second attempt decodeuricomponent throws urierror braddunbar looks good think better fix hack let know pick edge cases testing", "d": "1/2015"}, {"body": "thanks taking look asparagino", "d": "1/2015"}, {"body": "jridgewell", "d": "1/2015"}, {"body": "thanks jashkenas clear", "d": "1/2015"}, {"body": "cbroome need revert isequal back override megawac solution put many condition check like make sure conflict instanceof check", "d": "1/2015"}, {"body": "midnightwonderer let say trust underscore isequal safer anything fellow coders would cook use isequal portions app idea running complex conditional logic every time appealing strikes bad practice bring back original point really think would beneficial objects define equality checks", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "perhaps due bug two routes tests fail safari mac", "d": "1/2015"}, {"body": "hi kadishmal test suite passing locally using master branch", "d": "1/2015"}, {"body": "yes forked yesterday ran test master branch", "d": "1/2015"}, {"body": "working correctly safari confused details might help reproduce issue", "d": "1/2015"}, {"body": "ok guide run tests maybe something wrong things better described readme everybody try would also make sure every contributor easily run tests make sure changes pass reason ran tests plan send pr", "d": "1/2015"}, {"body": "tests static load browser", "d": "1/2015"}, {"body": "checked latest code tests green", "d": "1/2015"}, {"body": "thread lying dead long time identifiable area start working upon", "d": "1/2015"}, {"body": "hi jasonslyvia right nt exactly explain loop consider example event made second change means need fire another event notify listeners otherwise listeners fired previously inconsistent state clear", "d": "1/2015"}, {"body": "oh see trick event makes things inconsistent thank brilliant explanation mind copying answer question", "d": "1/2015"}, {"body": "oh see trick event makes things inconsistent nah example without event handler crux matter changes made event happens another event needs triggered maybe better example try statement statement", "d": "1/2015"}, {"body": "yeah seems like rushed conclusions thank patience expertise", "d": "1/2015"}, {"body": "deanapeterson also using hp fortify issues backbone flagged similar situation critical issues fortify need addressed order compliant wondering ended order pass fortify scans", "d": "1/2015"}, {"body": "initial suggestion used pass security scans came since moved angularjs", "d": "1/2015"}, {"body": "since never used backbone router took entire router module source since moved angular jan pm simon collierbaker notifications githubcom wrote deanapeterson also using hp fortify issues backbone flagged similar situation critical issues fortify need addressed order compliant wondering ended order pass fortify scans reply email directly view github", "d": "1/2015"}, {"body": "happens response seems like something really wrong open ticket", "d": "1/2015"}, {"body": "nt get problem response must include messagebody thus always terminated first empty line header fields", "d": "1/2015"}, {"body": "get response error code error callback object key expected", "d": "1/2015"}, {"body": "brettshwom anyone else using brettshwom solution value null fails recommend", "d": "1/2015"}, {"body": "stumbled upon agree binarykitchen fixed core overridden way around needed nt really moment halfassed surprising functionality would open discussion doubt nt break things sane people rest adjust", "d": "1/2015"}, {"body": "two weeks passed comment nt seem relevant anymore huzzah", "d": "1/2015"}, {"title": "default block components use yield", "body": "creating component sometimes want use block times editabletext texttext editabletext texttext text markdowntext text editabletext way yet new block params block stored somewhere component could check eg", "num": "10319", "d": "1/2015"}, {"title": "tests pretenderjs broken upgrade latest rsvpjs", "body": "use pretenderjs tests huge ember app tests fine ember unfortunately pretenderjs work together actual ember builds problem inside rsvpjs problem already solved rsvpjs repository emberjs project updated still using v latest version rsvpjs verison following promiseprototype constructor promise version promiseprototype constructor promise wondering possible update rsvpjs emberjs beta channel maybe", "num": "10314", "d": "1/2015"}, {"title": "create container registry calling", "body": "seems like latest changes ember registry resulted errors way ed registers ember canary ed canary throws error demo repo rwjblue fivetanley thoughts", "num": "10313", "d": "1/2015"}, {"title": "split emberset module", "body": "remember reading release notes emberset would split module included need still planned", "num": "10312", "d": "1/2015"}, {"title": "exception swallowing within willtransition", "body": "exception thrown within exception gets swallowed router breaks subtle way took quite awhile triage originally thought bug within queryparams linkview steps reproduce type anything input notice queryparam updates expected click bar notice query param pushed onto new route url side effect bug notice console nt see stacktrace excepted emit stacktrace console", "num": "10311", "d": "1/2015"}, {"title": "container registry split routing refactor causes global app integration test issues", "body": "changes application boot canary seem broken ability call callback prepare next test likely affects globals style apps embercli applications due fact new instance created integration test issue routing started happens first calling attempt register see however due registry container split registry persistent across calls making second call fail following error demos fails canary builds jsbin works beta builds jsbin dgeb wycats tomdale directly related yall work area definitely appreciate feedback suggested path forward", "num": "10310", "d": "1/2015"}, {"title": "chained computed map properties run map function often", "body": "computed map properties chained together later properties call map functions often gets worse chain gets longer created js bin demonstrate issue really two problems first events getting multiplied go chain second map functions getting called items removed understand might need trigger extra events first map property nt think multiply go chain betting extra events causing items get remapped often", "num": "10309", "d": "1/2015"}, {"title": "documentation ember cli htmlbars emberhandlebarscompile function", "body": "found using html bars ember cli use function work box got view following code work box htmlbars maybe behaviour documented elsewhere maybe rwjblue know documentation belongs", "num": "10307", "d": "1/2015"}, {"title": "async test helper nt work expected", "body": "attempted create helper pause test execution stop qunit eventually helper executes js test visiting function visit sleep andthen function equal currentpath index cc quantuminformation", "num": "10306", "d": "1/2015"}, {"title": "input helper action work expected", "body": "im basically trying get work doable per docs problem action triggers value passed always character short actual value input element eg input value add value passed action ad failing bin also noted using events like dont trigger action found issue solving question", "num": "10305", "d": "1/2015"}, {"title": "application view rerender uncaught typeerror read property append null", "body": "embercli debug ember debug ember data debug jquery stack called anonymous function erroring line function rendererinsertelement view parentview element index element null element undefined return trying refresh views modifying locale translations code using refresh top level application view originally posted", "num": "10304", "d": "1/2015"}, {"title": "handlebars bindattr nt preserve case", "body": "noticed preserve case eg result mostly minor annoyance nt really change since html case sensitive anyway however found something perculiar using elements see controller property used element however generated nt really know going guess initial value inserted camelcase name value updated inserted lowercase name", "num": "10303", "d": "1/2015"}, {"title": "srcset attribute nt supported using bindattr", "body": "using bindattr srcset resulting markup looks like expect test using view work around since srcset part responsive image spec something bind bindattr questions srcset works see docs talk wilto want human touch thanks frog", "num": "10301", "d": "1/2015"}, {"title": "doc deprecated docs containerview", "body": "see shows setting container deprecated following code taken docs results warning deprecation setting container deprecated viewextendinit apply superwrapper init apply new class functionclassmixinpropscreate seems like whole page needs refreshment nt feel competent submit pr", "num": "10299", "d": "1/2015"}, {"title": "sending actions components application work", "body": "considering example expected result alerts first blub however first alerted example wrong usage components actions docs need updates correctly", "num": "10298", "d": "1/2015"}, {"title": "registerboundhelpergenerated helpers support use handlebars blocks", "body": "update handlebars got deprecation rewrite code using boundhelper got helper look like", "num": "10295", "d": "1/2015"}, {"title": "non closing block matches wrong block uncaught error audioplayer nt match", "body": "following block code gave follow error console due matching feel error message verbose", "num": "10294", "d": "1/2015"}, {"title": "emberselect multiple mode trigger computed property setter used emberselect selection", "body": "simple app js appindexroute emberrouteextend model function return id name ember id name rocks id name id name planet appindexcontroller embercontrollerextend foo embercomputed function key value prevvalue consolelog computed value choose something selectbox see computed value console expected set selectbox multiple mode choosing items selectbox trigger computed property see nothing console according docs support multiple mode element content currently selected array elements demo sparkles sparkles two chunks code one one difference two chunks one deals single item deals array items notice every time make choice selectbox property updated computed property see message every time make changes selectbox property updated fired though get filled newly selected content please confirm whether legit bug ps background use case array records displayed page selectbox record content select box comes property record user configure record either singleselect multiselect example code would make normal property computed property ember data attrs computed properties another reason computed property also depends matter content dynamic content changes removed items listed selected", "num": "10286", "d": "1/2015"}, {"title": "feature request indirect computed property", "body": "like add new indirect computed property inspired ms excel function makes possible property holding path another property using second property bound path eg javascript emberobjectextend foo bar path value embercomputedindirect path create oget value foo oset value something oget something oset path oget value bar oset value anything oget anything use case form builder client describe nested data structure input data using form generated structure data stored along format right use magic names special properties say client name field used title displaying data instance list want traverse data format provided client find path first required text field use title much logical explain customers first required text field used title ui excuse coffeescript kind working example technique behind example dynamically create extra bound property object add observer property guess easier ways one thanks wonderful work guys amazing", "num": "10278", "d": "1/2015"}, {"title": "styleguidemd misleading notes unobvious perfomance improvementdegradation resulting new array", "body": "styleguidemd contains following inadequate anymore statements nt reassign arguments perfectly fine strict mode nt result perfomance degrade result perfomance degradation using direct scope sloppy mode assume ember contributors sane reference script run following command leaking directly still results deoptimisation know exact length know array going grow use new array n nt obvious deal requires deeper thinking firefox results better perfomance objects nt got hidden class results degraded perfomance objects got hidden class results degraded perfomance objects nt got hidden class results increased perfomance objects got hidden class optimisation spidermonkey probably important little bit slower engine", "num": "10275", "d": "1/2015"}, {"title": "feature automated api documentation", "body": "pipedream found working api team would quite nice tool uses existing model information serializer adapter information help create documentation exported hosted shared seems like pieces perhaps opportunity leverage comments permodel basis supplement definition", "num": "10273", "d": "1/2015"}, {"title": "add ability know proxied object equal unproxied object", "body": "something like would make life whole lot easier", "num": "10272", "d": "1/2015"}, {"title": "routerecognizerversion incorrectly set ember version", "body": "since merged change way routerecognizer built uses similar string replacement add number property since emberjsbuild consumes package via bower module nt get chance instead replaced ember though nt believe internal code depends version correct clearly wrong probably fix change found", "num": "10269", "d": "1/2015"}, {"title": "call compile without template compiler loaded", "body": "hi ember component wrapper library jqueryui examples hosted github cli app things used work get error call compile without template compiler loaded please load embertemplatecompilerjs prior calling compile downloaded included embertemplatecompilerjs course without full cli machinery gives referenceerror exports defined onthefly compiling taken latest canary one work around handlebars version thanks broken example", "num": "10265", "d": "1/2015"}, {"title": "generated acceptance test failing newly created app", "body": "creating new app using embercli updating ember canary adding route generated acceptance test failing pushed failing example everything generated embercli apart minor template changes ember ember data", "num": "10264", "d": "1/2015"}, {"title": "undefined wait test helper", "body": "using authenticatesession test helper test suite crashes crash happens inside method returns undefined line acceptance test basic import ember emberimport startapp helpersstartapp app null module acceptance login setup app startapp teardown emberrun app destroy test redirects already logged authenticatesession visit login andthen equal currentpath remove call test runs without issue known conditions may cause undefined anything get information debugging ember ember data jquery ember simple auth ember simple auth devise", "num": "10263", "d": "1/2015"}, {"title": "query params updated transitiontoreplacewith active transition", "body": "entering route call update query params called prior hook example clicking set qp", "num": "10262", "d": "1/2015"}, {"title": "poor performance views andor components involved", "body": "issue table creating via take seconds render initially andor sorted rows requirement row dozen components nested components discovered one components parsehtml done multiplied number rows performance really bad merely updating objects rows performance quite good sort takes another seconds seconds seems gc whatever going internally well already discussed issue ebryn wanted make sure issue recorded github eyes land track progress facing rewrites refactors work around ember performance arrays listview nt ideal solution requirements inflight efforts help happy resolving performance issue top list cc jayphelps", "num": "10261", "d": "1/2015"}, {"title": "sticky query params confusing", "body": "using query params awhile default stickiness seems cause lot subtle non obvious sides effects completely obvious consistently reset query params transitions would suggest either following provide global nonsticky option params words provide easy configure flag forces query params set transition possibly model hooks feasible perhaps something along lines provide clear documentation guide reset params googled around behavior front center documentation section query params", "num": "10260", "d": "1/2015"}, {"title": "queryparams set bound variable undefined", "body": "controller bind destination property global variable use destination property queryparam variable empty default route desitination property still empty te model hook init controller also still empty gets corrupted empty undefined remove desitnation property queryparams working fine hope helps app emberapplicationcreate destination appsearchindexcontroller emberarraycontrollerextend needs currentuser queryparams destination destinationbinding appdestination", "num": "10257", "d": "1/2015"}, {"title": "emberapplicationreset clear controller properties defined arrays controller defined", "body": "applies ember controller arrays persist accumulate data tests reset function nt clear declare controller property empty array programmatically assign property empty array use add object ember application run destroyed still contains object pushed onto jsfiddle demonstrating screenshots capture", "num": "10255", "d": "1/2015"}, {"title": "bug ember data beta unlabeled debug version", "body": "started new app declaring script dependencies localstorageadapter nothing else html head body tags ember data debug throws error uncaught syntaxerror unexpected token typeof ember switch ember dataprod ember datamin bug nt appear guess use one two versions", "num": "10253", "d": "1/2015"}, {"title": "using mandatorysetters observing nonexistent property result value undefined even property exists", "body": "demonstration issue copy relevant stuff javascript var person emberobjectextend var person personcreate firstname yehuda init function since using setter behind ember back yes wrong exposes interesting behavior later mandatory setters ca nt protect course thislastname katz thisunwatchedproperty foo works expected personget unwatchedproperty foo since property watched existed getter broken return undefined mandatory setters enabled personget lastname undefined returns even though property exists underlying object point might thinking cares went behind ember back set properties init method stop use typescript wrote base typescript class allows typescript object model work ember object model ability manually set properties like object creation time key getting typescript object model work ember typescript properties classes simply assigned object constructor ability construction time still use ember methods later properties works fine long nt use mandatory setters observers would still work nt subtle bug mandatorysetter happens properties observed creation time nt exist object yet reason comes lines code ember normally watch property current value gets placed however watch property construction property nt yet exist object entry add metavalues get code return undefined even though defined fixesworkarounds add following lines adds property metavalues things work expected however nt take care defining mandatorysetter property would called property make custom debug build ember compiles mandatorysetters allow disable mandatorysetters development build mentioned issue debug using emberproduction give niceties try find workaround typescript base class would involve sort iteration properties typescript initialized calling make ember aware sure feasible honestly since required debug mode would add overhead every object created nt know want jump hoops prefer solution number makes sure mandatory setter code nt mask underlying object point returning even though property defined underlying object however realize obscure use case fact worked happy accident perhaps appeal principle least surprise surprised debug vs production code would vary certainly surprised see property values according ember even though properties value know might bigger fish fry like open source typescript base class unite typescript object model ember minor bug major impediment potential consumers help workaround offer would greatly appreciated", "num": "10252", "d": "1/2015"}, {"title": "rfc make computedor return truthy object rather true", "body": "current behavior embercomputedor return true propose would useful instead return truthy object moreclosely matches semantics javascript could make moreuseful rendering templates seldom want render may want render one ed objects example use case see tripping people written implementations depending property words potential break apps depending existing behavior", "num": "10251", "d": "1/2015"}, {"title": "using protocol relative urls rest adapter cause issues", "body": "using protocol relative url rest adapter issues happen attempting retrieve related models example library adapter store dsstoreextend adapter dsrestadapterextend namespace host mylibrarycom appregister library main store appinject route library library main library model iterating template get following errors problem url wrong correct url forcing protocol adapter declaration fixes issue", "num": "10248", "d": "1/2015"}, {"title": "handlebars subexpressions nt pass values helpers", "body": "demo value returned nested helper passed current result reproduce issue canary fix somehow ember", "num": "10247", "d": "1/2015"}, {"title": "document path based componenthelper names", "body": "handlebars allows path based helper names eg mycomponentsub started using feature soon available organize code nice organization embercli pods ability use naming structure nt documented components anywhere find addition use path based names provide parameters helper must wrapped like nested components found answer issue thread believe would helpful document ability nest component paths stipulations using paths correctly example", "num": "10243", "d": "1/2015"}, {"title": "firefox bug parentview undefined", "body": "able run ember app safari chrome fails error parentview undefined firefox function ember causing error line function appendview route view options optionsinto var parentview routerouterlookupactiveview optionsinto var teardownoutletview generateoutletteardown parentview optionsoutlet routeteardownoutletviews routeteardownoutletviews replace routeteardownoutletviews teardownoutletview parentviewconnectoutlet optionsoutlet view else var rootelement get routerouter namespacerootelement tear view one already rendered routeteardowntoplevelview routeteardowntoplevelview routerouterconnectactiveview optionsname view routeteardowntoplevelview generatetoplevelteardown view viewappendto rootelement", "num": "10241", "d": "1/2015"}, {"title": "router supports didtransition willtransition", "body": "currently router supports route didtransition event however router support route willtransition event words ca nt specific reason supporting willtransition happy submit pr like able saverecord state right transition happens general level specific individual route something along lines intercepting time linkto happens", "num": "10235", "d": "1/2015"}, {"title": "opening ember application link target blank attribute failed load", "body": "ember application using torri open application page link whose target attribute blank tab opens application failed load", "num": "10233", "d": "1/2015"}, {"title": "emberjs future ember views", "body": "apologize isnt correct forum really need speak authors framework figure upcoming changes may affect us significantly recently huge debate current contract related components vs views aware components preferred views however extremely complicated presentation layer views able deal complexity far future views specifically ember ember expected released upcoming plans begin deprecated views going supported", "num": "10232", "d": "1/2015"}, {"title": "click testing helper nt trigger focusin contenteditable element", "body": "see looks like fired inputs however seems make sense fire element contenteditable happy fix seems reasonable", "num": "10229", "d": "1/2015"}, {"title": "sortable mixin assuming arrangedcontent always sorted", "body": "sortable mixin assume arrangedcontent array always sorted leads invalid ordered results sortproperties modified bulk using beginpropertychanges endpropertychanges performed sort operations using comparaisons item item left right invalid underlying data already updated jsbin illustrating problem click reorder link multiple times check console see problem", "num": "10225", "d": "1/2015"}, {"title": "canary regression referenceerror defaultfeatures defined", "body": "discussed rwjblue defaultfeatures supposed replaced config ember default feature list", "num": "10224", "d": "1/2015"}, {"title": "weird issue mixindetect", "body": "issue provides instructions checking whether class mixin found following weirdness though trying use methods love offer suggestion nt make sense", "num": "10222", "d": "1/2015"}, {"title": "documentation child routes getting started guide unclear", "body": "hi trying wrap head around emberjs first time working way getting started guide things pretty clear adding child routes section point presented following instructions next split single template set nested templates transition different lists todos reaction user interaction indexhtml move entire todos new template named adding new handlebars template tag inside document file moved exactly user create file extension instead coming without prior knowledge handlebars works typical situation newcomers imagine docs say move new template clear templates go named would really helpful file structure clearly explained stage process tree diagram page would great js bin html single file clear things organized real world", "num": "10220", "d": "1/2015"}, {"title": "returning rejected promise prevents url updated eagerly", "body": "jsbin reproduce try clicking works updates url would expect go back index page back button click boom server causes error response rejected promise url still eagerly updated allows back button refresh button etc work correctly go back index page back button click boom client causes error rejected promise however url updated breaks back button way go back sure falls bugimprovementquestion right place feel free close tell code might working expected eager url update code aborted transition aborted runloop however unclear happening within runloop work around impression promise publication stuff happening asynchronously assuming returning would return progress promise reject accurately publish rejection next tick essentially semantics ajax request would suppose use work around feels bit strange need go way seems like would almost always want url update eagerly error occurs locally otherwise would end broken back button problem mentioned probably good reasons ca nt work way though cc machty", "num": "10219", "d": "1/2015"}, {"title": "retried transitions enter route", "body": "jsbin reproduce try clicking post trigger logged check postroute beforemodel redirecting login page upon finish login step click go transition retried end correct post page go back index click post see error page post exist refresh app clear logged state click post like would redirect login page finish login procedure like expect postroute model returns rejected promise however expected app transition route rejection model like step actual app stuck broken state", "num": "10218", "d": "1/2015"}, {"title": "endtoend testing using selenium webdriver", "body": "starting think using approach similar protractor allow writing endtoend acceptance tests node use selenium webdriverjs bindings looking protractor guidessource noticed angular directly exposes way know timerseventspending updates flushed application back steady state official way ember", "num": "10216", "d": "1/2015"}, {"title": "include development build", "body": "currently dev build emberjs take account bad means features missing even promoted beta channel exacerbated master right due fact handlebars support removed htmlbars still behind feature flag development builds broken box ticket filed request rwjblue", "num": "10212", "d": "1/2015"}, {"title": "embermap must use emberset set property", "body": "must use emberset set property object object receive error adding value map version upgrading option stage trace ember assert get mandatory setter complaining value wrong problem insert first item overcome without upgrading", "num": "10209", "d": "1/2015"}, {"title": "query params connecting lazy loading resolver resolvecontroller used", "body": "query params works fine settimeout removed however functional otherwise", "num": "10207", "d": "1/2015"}, {"title": "properties available element prototype get set", "body": "check see property exists given attribute set prop use case elements property fallback leads added dom demo", "num": "10202", "d": "1/2015"}, {"title": "overly aggressive autolocation rooturl assertion", "body": "two invariants maintained autolocation via assertions caused regression skylight nt know exactly change caused break trying untangle thread bottom line believe autolocation aggressive handle case gracefully two invariants causing problems autolocation enforces must always end slash example set raise exception unless change autolocation verifies contained url inside raises exception problematic ember app served rails app links generated rails link guessed trailing slash point app started throwing exceptions hitting directly instead perversely everything works fine comment abovelinked assertion seems like much case ember automatically redirects nt know robust way handle case seems like loosen constraints automatically normalization code rather pushing complexity user cc cibernox jayphelps", "num": "10201", "d": "1/2015"}, {"title": "add autocomplete emberselect view", "body": "would enable chrome autofill similar mechanisms know value select select box", "num": "10199", "d": "1/2015"}, {"title": "warning attempting render view passing propertybinding view helper without quoted value syntax ambiguous either surround propertybinding value quotes remove propertybinding", "body": "ember embercli code snippet works fine chrome errors wrap detailcategory quotes nt give warning course passes string object also get following two errors hav nt yet isolated likely related also appear chrome", "num": "10196", "d": "1/2015"}, {"title": "linkto classname stuck", "body": "embercanary link pointing route set repro click link page transitioned click link link background red see css tab removed transitioning another route yet correct behavior show classname already target route", "num": "10195", "d": "1/2015"}, {"title": "replace foreach arrayslice dependentarraysobserverdependentarraydidchange", "body": "noticed big performance bottleneck implementation primarily regards working larger data sets seems certain circumstances using iterate subsection array creates ton unnecessary work doubles garbage collection time slice otherwise used anything obvious candidate optimization case chaining dataset grows every page retrieved items replacing simple iterator function traverses improved performance method nearly times according chrome performance profiling example implementation javascript packagesemberruntimelibcomputedreducecomputedjs function runthrough arr start end ctx fn var index sliceindex index start sliceindex index end fncall ctx arrobjectat index sliceindex sliceindex index dependentarraysobserverprototype dependentarraydidchange function dependentarray index removedcount addedcount runthrough dependentarray normalizedindex endindex function item sliceindex usage case described refactor took average time propagating changes record array inserting items store around boost average performance", "num": "10191", "d": "1/2015"}, {"title": "queryparams pluses nt converted spaces", "body": "see link technically bug standard supposed encoded decoded nt convert spaces right send link facebook receiver get link converted link broken link ember canary problem version thanks", "num": "10190", "d": "1/2015"}, {"title": "parent component willdestroyelement called", "body": "component extension another willinsertelement chain works uses chain nt coffeescript mycomponent emberselectextend didinsertelement consolelog insert mycomponent super myextendedcomponent mycomponentextend didinsertelement consolelog insert myextendedcomponent super", "num": "10189", "d": "1/2015"}, {"title": "value attributebinding rendered attribute", "body": "component used ember nt render attribute interestingly use attributebinding ember render attribute", "num": "10183", "d": "1/2015"}, {"title": "set uses strict equality", "body": "currently emberset uses strict equality compare current new values determine object updated works primitives dates objects call set objectname objectval update since strict equality always fail emberisequal already method compare objects implement isequal function using check set object object date properties would updated values actually changed modified ember fork fix issue added tests tests passing reason nt included core ember build", "num": "10182", "d": "1/2015"}, {"title": "using syntax notempty computed properties cause computed arrays function", "body": "summary creating whose source property uses syntax produces property cause array computed properties reference misbehave true believe means change ember commit references actually breaking changes may actually general problem computed property depends sample code also jsfiddle javascript var item emberobjectextend children null embercomputednotempty children embercomputednotempty children collection emberobjectextend items null embercomputedfilterby items true embercomputedfilterby items true col collectioncreate items itemcreate children emberassert first item nt children colget emberassert first item nt children colget emberassert empty colget emberassert empty colget colget itemsfirstobjectchildren pushobject emberassert first item children colget emberassert first item children colget emberassert empty colget emberassert empty colget none assertions fire secondtolast one words aggregated property array computed property uses syntax array computed property update properly severity causes array computed properties using computed properties keys function think pretty severe know need use syntax anymore used bug caused nasty regression code still using syntax words looks like change removed need unintentionallybreaking change think bug fixed least deprecation warning using syntax investigation cause investigation get closer source issue looks like immediate problem fires twice fires remains array changes never flushed firing twice following two pseudostacks looks like fire twice calls nt reach following pseudostack executing calls time get longer watching return instead calling back point pretty well depth hoping hand expert diagnose fix problem", "num": "10181", "d": "1/2015"}, {"title": "current route name easily accessible within router didtransition hook", "body": "problem certain circumstances desirable logic hook based previouscurrent route currently way obtain container request would possible get info argument callback hook maybe even transition object indicating fromto routes back story use case led scenario trying get google analytics tracking app something like ember guides suggest problem running getting events doubled whenever slow transition occured firing substate second time model promise resolved desirable correct behaviour however need ignore transition route matches page view tracking purposes javascript approuterreopen notifygoogleanalytics function get current route name hacky way currentroute appcontainerlookup controller application get currentroutename didtransition ideally could little nicer something like javascript approuterreopen notifygoogleanalytics function transition assuming transition originalroute targetroute obtain current route arguments property router currentroute transitionto didtransition", "num": "10180", "d": "1/2015"}, {"title": "ca nt nt know basic loop operations emberhandlebars htmlbars", "body": "trying steps step get error array go create junk array manually exists reason loop array seeing handlebars supposed able output index index nt work basically way performing one fundamental functions javascript wrong possible giant hole framework", "num": "10178", "d": "1/2015"}, {"title": "deprecation called registry call directly associated container instead", "body": "hi upgrading htmlbars getting lots deprecation notices like stack nt really provide way helping find need update code new style remember reading important move away registry container maybe tom dale blog post read missing documentation address message anyone offer advice fix thanks", "num": "10177", "d": "1/2015"}, {"title": "attribute binding override", "body": "could nt find information trying extend behaviour trying add logic inputs able bind datetyped variables directly know input values strings dates new class extends need new property bound input basically date converted string input expects ideally would like reopen apply logic input type bound value questions way change attribute binding defined superclass possible could write viewcomponent subclass would override previous binding definition date binding support feature desired core", "num": "10176", "d": "1/2015"}, {"title": "fiddle link contrib page broken", "body": "works jsfiddle appears contributingmd work interest solving problems rather reporting new fiddle cloned settings working jsbin see also really old idea owns idea even update fiddle without changing url", "num": "10175", "d": "1/2015"}, {"title": "attributes without value disappear", "body": "embercanary html rendered html renders element correctly jsbin", "num": "10169", "d": "1/2015"}, {"title": "ember application booting safari private mode", "body": "hello everyone interesting problem solve able come agreement ember everything needed well done job thanks problem app simply start opened safari private mode bug error console nothing aware localstorage issue problem application would load properly know app works properly private mode chrome firefox app works properly safari nonprivate mode application used initialize work properly one earlier versions started development ember current version url current production version though impresive mytennishotelcom aware giving useful informations users likely use configuration boss willing donate ember guys help us solve problem provide whole lot details asked", "num": "10167", "d": "1/2015"}, {"title": "inconsistent behaviour linked component instantiation properties", "body": "exists inconsistent behaviour components accessing property setter another property eg foobarjs appfoobarcomponent embercomponentextend content null result function key value var content argumentslength gt content thisget content consolelog content prints null return value property content ember content property retrieved inside setter result computed property working jsbin ember content property accessible working jsbin strange thing changed usage component template foobar resultsomestring contentsomeproperty works working ember jsbin tried setting result static value template breaks working ember jsbin sure issues independent volatile behaviour preventing us upgrading ember", "num": "10165", "d": "1/2015"}, {"title": "add index optional parameter block params", "body": "would like change dom styling items according position following image example app would ideally like write components look index rendering different display information", "num": "10158", "d": "1/2015"}, {"title": "environmenthasdom check broken", "body": "check pass specifically", "num": "10155", "d": "1/2015"}, {"title": "disconect outlets issue", "body": "method returns promise lead outlets disconnected reconnected promise resolves path see example", "num": "10154", "d": "1/2015"}, {"title": "htmlbars helper passing simplestream params", "body": "helper call template works remove stops working print params gives going", "num": "10153", "d": "1/2015"}, {"title": "transitionto enhancement", "body": "wo nt anything point route model calls workarounds like action router call controller instead also causes complications template conditionally use instead think pagination perhaps add optional parameter function enable reload model behavior needed", "num": "10151", "d": "1/2015"}, {"title": "streams htmlbars helpers accessible developers", "body": "working migrating app encountering difficulties trying slowly simplify helpers written switch htmlbars causing pain points helpers disobey assertion creating helper must dash got away using finding unwrapping call returns original parameters htmlbars helpers take could expose helper functions well stream helpers understand low layer api frustrating helpers longer work find tool belt missing several important tools", "num": "10150", "d": "1/2015"}, {"title": "beta packages include emberdebugjs", "body": "even though tagged builds page includes ember release bower package include file instead bower package includes leads console warning using", "num": "10148", "d": "1/2015"}, {"title": "ember checkbox click event firing", "body": "internal modal system made ember background div placed whole screen inner modal window placed top recently added click event background div fades screen would close modal clicked unfortunately seems method choose seems causing errors ember specifically checkboxes nt consistently fire toggle value jquery click events like used start file upload file input box also firing jsbin checkbox problem structured similar modals work", "num": "10146", "d": "1/2015"}, {"title": "computed property firing change", "body": "lesson student model onetoone association following computed properties controller actions scheduling canceling lesson gets appropriately updated never called called page loads changing student property via actions believe idiom work run issue lot ember wondering something obvious wrong", "num": "10145", "d": "1/2015"}, {"title": "canary generated controller using id modelid", "body": "obviously controllerjs viewjs computed model", "num": "10144", "d": "1/2015"}, {"title": "canary add documentation objectcontroller deprecation", "body": "says migrate modelpropertyname example given documentation tests best practice define", "num": "10143", "d": "1/2015"}, {"title": "removed content property relationships ember", "body": "used work fine ember js segment many messages var messages segmentget messages get plain array var messagesarray messagesget content need", "num": "10142", "d": "1/2015"}, {"title": "emcomputedsort triggers computed property twice", "body": "problems seems triggered twice ends causing bunch issues app see question jsbin simplified version basically one components app copies maps model sorts slices loops data javascript initial property copied initial function return thisget model slice property model sorted sortprop age desc sorted embercomputedsort initial sortprop slice loop function runs twice final function return thisget sorted slice property sorted issue triggered twice model changed first time runs still using data old model contains items second time use new updated model data contains items sure sort function runs twice whether messed something actually bug", "num": "10133", "d": "1/2015"}, {"title": "queryparams routerefresh debounce emberjs reverts property", "body": "hello scenario controller property property bound queryparams property also bound text field property observed changes observer sends action emberrundebounce avoid sending multiple times action user typing text field action handled route refresh route model hook calls ember getjson call takes time complete scenario type text field ember sometimes overwrite whatever typing issue seems extremely timing sensitive sometimes observe sometimes nt depending speed type created jsbin tries simulate issue tuned timings simulation observe issue every single time things might differ machines please adjust timings accordingly simulation simulation works simulating typing string aaaa selecting everything cmda typing string bbbb issue triggered see aaaa typed bbbb typed final value text field aaaa debugging sure right track especially first contact ever ember like days ago debugging session issue seems caused line emberjs one linked jsbin inside object seems contain sets queryparams one called called something like first one quickly returned contains old value query params one contains correct value hope enough analyze issue thanks ps know goal code filter text field list user types text field need debounce typing send request server refresh list based results case intent nt clear", "num": "10120", "d": "1/2015"}, {"title": "better htmlbars error dumb html attributes closing tag", "body": "upgrading ember app use htmlbars got cryptic error bad html would cool get kind error saying something like invalid markup line closing tags attributes", "num": "10117", "d": "1/2015"}, {"title": "legacy bindattr throws undefined function", "body": "latest canary noticed using deprecated helper threw undefined function error line seems bindattr helper object function expected helper looks like console works without problem using deprecated syntax throws error", "num": "10116", "d": "1/2015"}, {"title": "ember object support property method", "body": "ember embercli jquery emberdata emberjspackagesemberruntimelibmixinsenumerablejs line every function callback target object nt support property method using following brocfilejs", "num": "10113", "d": "1/2015"}, {"title": "rendering child named outlet blanks content parent named outlet", "body": "named outlet parent overwritten child blank go back parent see following jsbin steps reproduce notice sidebar displayed click settings link admin displayed instead click home link go back application sidebar gone asked", "num": "10104", "d": "1/2015"}, {"body": "see available template best approach", "d": "1/2015"}, {"body": "opsb yes works", "d": "1/2015"}, {"body": "think needs addressing", "d": "1/2015"}, {"body": "upgrade rsvp possible still last time attempted update odd errors nt tracked yet also pretender requests actually done asynchronously previously sync understanding issue describing solve", "d": "1/2015"}, {"body": "thanks response hopefully going solve problem however update tests compatible new asynchronous behaviour", "d": "1/2015"}, {"body": "however update tests compatible new asynchronous behaviour likely good thing async real life async tests", "d": "1/2015"}, {"body": "seems like defined application registry runinitializers executed defined application instance", "d": "1/2015"}, {"body": "containerregistry initializersinstanceinitializers code recently changed landed might related", "d": "1/2015"}, {"body": "failing jsbin line causing error emberdata store initializer definitely seems like regression tomdale dgeb mind taking look one", "d": "1/2015"}, {"body": "oh god one constantly trolls machty promised would fix brokenheart", "d": "1/2015"}, {"body": "think problem resetting app container registry appinstancespecific registry see appinstancespecific registry introduced receive registrations instead appspecific registry destroy whole instance including registry container could either fix quick patch canary wait merge branch", "d": "1/2015"}, {"body": "dgeb discussing rwjblue let get merged fallback registry improvements place", "d": "1/2015"}, {"body": "merged bootreform branch believe pending resolve issue tomdale correct", "d": "1/2015"}, {"body": "rwjblue yes branch instance destroyed reset clear instancespecific registry container well", "d": "1/2015"}, {"body": "rwjblue verify fixed merged", "d": "1/2015"}, {"body": "previously failing jsbin passes properly thanks yall hard work", "d": "1/2015"}, {"body": "nt include template compiler browser default primarily meant build tool steps mostly slow abused cause suboptimal experiences users additionally unsure compiler browser compatibility ember suspect limited developers really need need include template compiler", "d": "1/2015"}, {"body": "stefanpenner thank think compatibility ember rework views use normal templates via views", "d": "1/2015"}, {"body": "might relevant", "d": "1/2015"}, {"body": "lolmaus mentioned return helper", "d": "1/2015"}, {"body": "thanks naming method bit confusing", "d": "1/2015"}, {"body": "return promise helper way know long wait name helper executes difference async sync helpers js embertestregisterasynchelper sleep function app time consolelog sleeping emberrunlater function consolelog finished sleeping time return wait embertestregisterasynchelper asynclog function consolelog async log embertestregisterhelper synclog function consolelog sync log sleep asynclog synclog output sync log sleeping finished sleeping async log", "d": "1/2015"}, {"body": "could sleep helper added ember core", "d": "1/2015"}, {"body": "quantuminformation nt really think adding random sleep tests generally great idea much better wait actual time need fairly straightforward wrapping promises async helper", "d": "1/2015"}, {"body": "quantuminformation helps situations debuggingdeveloping", "d": "1/2015"}, {"body": "blessenm tried events officially listed dasherized nt work completely e g nt trigger action completely astonished", "d": "1/2015"}, {"body": "jsbin without errors works properly outlet errors setting renderer outlet view errors setting unable replicate exact error zyllorion reporting though clearly thing fix zyllorion tweak one jsbin trigger specific error getting", "d": "1/2015"}, {"body": "code path changed significantly beta channel canary believe exact case viewbox svg elements actually used example newer tests update jsbin beta retest", "d": "1/2015"}, {"body": "yep looks like works properly canary", "d": "1/2015"}, {"body": "hrm ok issue passing string pass function controller works", "d": "1/2015"}, {"body": "nt think test working looks like default ember jsfiddle start maybe wrong link gut dynamic data raw string nothing bind instead variable available view bind template even fun compute string based fine grained pieces js mediumsrc mediumjpg mediumsize largesrc largejpg largesize srcsetsizes function var msrc thisget mediumsrc var msize thisget mediumsize var lsrc thisget largesrc var lsize thisget largesize return property mediumsrc mediumsize largesrc largesize", "d": "1/2015"}, {"body": "definitely feels like bug ca nt use string", "d": "1/2015"}, {"body": "soooo sorry slexaxton fixing jsfiddle bmac explained could nt use string", "d": "1/2015"}, {"body": "fivetanley binding attribute static string", "d": "1/2015"}, {"body": "seems ripe something go wrong since strings could property names static strings collision etc", "d": "1/2015"}, {"body": "perhaps warn pass string seems like footgun strange sense confusion", "d": "1/2015"}, {"body": "clear handled differently first place see something wholly custom like data attribute native attribute work right box", "d": "1/2015"}, {"body": "think great warning something like problem initial example went added property view like technically bind real silly example probably would nt silly lots cases nt initialize view think string sudden property", "d": "1/2015"}, {"body": "wilto different handling nt need bound like attribute nt bound perfectly valid works equally invalid nt work equally", "d": "1/2015"}, {"body": "ahh okay way outta depth ember make stretchy pictures", "d": "1/2015"}, {"body": "hi wilto yes hi id like make pictures wideangle thnx", "d": "1/2015"}, {"body": "wide stretchy pictures low low price directly paypal order", "d": "1/2015"}, {"body": "believe duplicate", "d": "1/2015"}, {"body": "yes closing", "d": "1/2015"}, {"body": "components isolated default must subscribed facilitate reuse", "d": "1/2015"}, {"body": "documented likely unclear ideas improve let us know", "d": "1/2015"}, {"body": "read section top bottom clear pass name property component holds name action actually send know last paragraph section even makes sense could agree reopen issue call something like improve documentation create new one additionally say way trigger action name directly component", "d": "1/2015"}, {"body": "feel free open issue website repo contains guides", "d": "1/2015"}, {"body": "ah ok confused api generated doccomments", "d": "1/2015"}, {"body": "way trigger action directly component one could even use pass return value send action logic", "d": "1/2015"}, {"body": "interested resolution regarding well similar helper equal need maintain", "d": "1/2015"}, {"body": "beta able able use subexpression", "d": "1/2015"}, {"body": "thanks works versions", "d": "1/2015"}, {"body": "version ember using error messages better", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "oh quite old beta would suggest upgrading", "d": "1/2015"}, {"body": "fixed number bugs demo updated link new link another demo shows property associated multiple mode observed well using observer valid workaround demo", "d": "1/2015"}, {"body": "lolmaus simplified jsbin think accomplishes trying first instinct use nt seem work familiar maybe bug someone knowledgable explain nt work", "d": "1/2015"}, {"body": "seem bug jsbin demonstrates issue think traced problem far lines used instead value form nt get updated template", "d": "1/2015"}, {"body": "xtian also looked line carefully line blame means bug emberselect rather fundamental bug property changes ember notify observers computed properties depending nt notify computed property behind issue might exist many ember classes computed property setters nt popular us discover issues also code written ember also prone reasonable statement", "d": "1/2015"}, {"body": "yeah think array computed properties address issue signified brackets sure apply case though", "d": "1/2015"}, {"body": "would prefer bake ember addon", "d": "1/2015"}, {"body": "need something like always cobbled together custom solution wanted little bit challenge spice monday created small ember addon nt published yet want make sure nt make obvious mistakes everything checks implementation pretty simple js export default function indirect middlepropertyname var sourcepropertyobserver lastsourceproperty return function key value var sourceproperty thisget middlepropertyname property middlepropertyname see working ssured example code", "d": "1/2015"}, {"body": "gordonkristan nice implementation much concise one thing though leaks observers removed destroy mmun prefer code core indirect primitive enables lot functionality takes little code open possibilities", "d": "1/2015"}, {"body": "ssured lack primitives require built core seems better suited", "d": "1/2015"}, {"body": "nt reassign arguments perfectly fine strict mode nt result performance degrade debugging performance cases reassigning argument results dev tools updating properly reflecting actually changed leads much annoying debugging know exact length know array going grow use new array n nt obvious deal requires deeper thinking agreed", "d": "1/2015"}, {"body": "cases reassigning argument results dev tools updating properly reflecting arguments actually changed consider devtools bug expected behavior sloppy mode buggy strict mode", "d": "1/2015"}, {"body": "consider devtools bug expected behavior sloppy mode buggy strict mode totally agreed would absolutely love upstream browser dev tool bugs fixed written guide impact performance potential aid debugging put rule squarely camp subjective style guide responsible seems like winwin potentially wintie", "d": "1/2015"}, {"body": "come across issue well best work around time moment checking either objects proxies getting content javascript instanceof emberobjectproxy aget content b b instanceof emberobjectproxy bget content b emberisequal b", "d": "1/2015"}, {"body": "yes using workaround like javascript apputilsproxyhelpersjs import ember ember export function isproxy obj note added emberarrayproxy arrproxy intanceof emberobjectproxy gt false return obj instanceof emberobjectproxy obj instanceof emberarrayproxy export function withoutproxies obj isproxy obj obj objget content return obj export function isequalproxied b return emberisequal withoutproxies withoutproxies b real issue instance ember array proxied objects reference object without proxies want know index array wo nt work reliably also relates emberselect issue although ca nt find issue right created following function workaround javascript apputilsindexofproxiedjs import withoutproxies isequalproxied utilsproxyhelpers function itemat arr index typeof arrobjectat function return arrobjectat index else return arr export default function arr object fromindex fromindex null fromindex else fromindex lt fromindex mathmax thislength fromindex arr withoutproxies arr arr null return var fromindex lt arrlength var item itemat arr isequalproxied item object return return updated findings", "d": "1/2015"}, {"body": "anyone interested working rough outline needs change routerecognizer needs generate folder contains preprocessed aka version string replaced part prepublish script update emberjsbuild pull routerecognizer npm use source tree instead bowercomponents htmlbars pulled works well", "d": "1/2015"}, {"body": "replicated well", "d": "1/2015"}, {"body": "think guys need include embertemplatecompilerjs thejchap", "d": "1/2015"}, {"body": "thank workmanw absolutely correct", "d": "1/2015"}, {"body": "hi rwjblue workmanw gladly retry including embertemplatecompilerjs report back however mentioned original issue leads referenceerror exports defined error could related changes getting mixed simply including embertemplatecompiler trick switch ember back handlebars everything works fine thanks", "d": "1/2015"}, {"body": "workmanw thanks temporary issue documentation weshould contribute somewhere", "d": "1/2015"}, {"body": "fyi handlebars longer needed temporary supposed writing blog post explaining new template compilation process better get", "d": "1/2015"}, {"body": "thejchap huh worked one many available embertemplatecompilerjs use used one npm get referenceerror exports defined since library live examples desperate get working pl advise offline himansudesai gmailcom getting voluminous issues page try rwjblue suggestion remove handlebars", "d": "1/2015"}, {"body": "rwjblue wait writeup thanks hard work recent improvements currently get uncaught typeerror read property compilerrevision undefined embertemplatecompilerjs line include compiler handlebars thanks", "d": "1/2015"}, {"body": "please make sure using embertemplatecompilerjs published specific build", "d": "1/2015"}, {"body": "sounds like old embertemplatecompiler package file thay paired ember build", "d": "1/2015"}, {"body": "rwjblue bet right sorry sounding like noob nt know find right pairing thought one using might old published npm months ago went emberjscombuilds canary obviously mention embertemplatecompiler thanks", "d": "1/2015"}, {"body": "rwjblue found url one ember jsbin examples nice lt canaryembertemplatecompilerjs easy enough url remember ps canary based examples currently broken missing embertemplatecompiler go compile list broken ones wish", "d": "1/2015"}, {"body": "hi folks wanted chime run problem using cli thought manual inclusion compiler mentioned would simply matter adding following brocfile done still getting compile error want amounts act desperation switched htmlbars cursing breath noticed variation message surprised nearly close enough intricaciesdependencies htmlbars anyway small new project starting wanted hit cutting edge ember wondering must step back edge little help getting back edge would much appreciated", "d": "1/2015"}, {"body": "tested successfully ember breaking change canary", "d": "1/2015"}, {"body": "full stack trace edit link incorrect lot changes", "d": "1/2015"}, {"body": "stack trace reported test failure", "d": "1/2015"}, {"body": "yeah line ember data error happens ember canary right play around see figure causing", "d": "1/2015"}, {"body": "confirm definitely result using canary branch ember data removing ember data whilst still running canary resolves issue odd thing test app nt done anything include ember data ember data models routes empty", "d": "1/2015"}, {"body": "getting error dig", "d": "1/2015"}, {"body": "strange reliably replicate issue repository linked anything else may affecting system currently node followed nukereinstall project directory also effect", "d": "1/2015"}, {"body": "kevinansfield edited post clear everything", "d": "1/2015"}, {"body": "ember data bug please reopen ember data", "d": "1/2015"}, {"body": "fixed latest ember data canary could check kevinansfield", "d": "1/2015"}, {"body": "confirmed fixed latest ember data canary", "d": "1/2015"}, {"body": "iirc router setup running first call", "d": "1/2015"}, {"body": "thanks adding call fixes particular error open pull request updates embersimpleauthtesting docs", "d": "1/2015"}, {"body": "think fixed usually point visiting route session authenticated except activate router described eg test like guess would ok change nt perform check active transition router nt running yet", "d": "1/2015"}, {"body": "fixed", "d": "1/2015"}, {"body": "thanks", "d": "1/2015"}, {"body": "clarify aware ember listview suit needs workaround underlying poor performance badly need rewrite came sproutcore destroys views underlying changes even sort instead moving views around one reasons performs poorly", "d": "1/2015"}, {"body": "ebryn magicked collection view work may interesting news erik", "d": "1/2015"}, {"body": "cc machty", "d": "1/2015"}, {"body": "yup array instance currently shared instances think maybe something could warn work around return computed property gets new array instance reset properly", "d": "1/2015"}, {"body": "fivetanley honestly sure error condition legitimate cases wanting use shared state amongst instances although agree much rarer", "d": "1/2015"}, {"body": "may thinking naively surprised behavior documentation indicates emberapplicationreset deactivate existing routes destroy objects container create new application container reroute existing url would think part process would recreating controller empty array defined controller definition think unexpected need manually clear properties careful array defined test nt start breaking previous test cause objects stored array mind ca nt define controller properties arrays boss telling anyway least without using computed property would helpful docs causes tests break way difficult figure nt mean critical general really like way ember going guys great job first time reported issue using ember months", "d": "1/2015"}, {"body": "rustytoms storing mutable data prototype object shared instances emberobject thing normal javascript thing javascript function person personprototypelisting var bob new person var alice new person boblisting alicelisting gt true clears container instantiated singleton controllers live way clear data stored prototype controller instead instance solution set array instance object prototype plain javascript example would look like javascript function person thislisting var bob new person var alice new person boblisting alicelisting gt false lets apply standard js knowledge first example storing mutable data prototype javascript var person emberobjectextend listing var bob personcreate var alice personcreate boblisting alicelisting gt true without storing prototype javascript var person emberobjectextend init function thislisting var bob personcreate var alice personcreate boblisting alicelisting gt false", "d": "1/2015"}, {"body": "rwjblue thank detailed explanation helpful nt thinking way understand better singletons thinking properties instance instead prototype", "d": "1/2015"}, {"body": "likely issue emberdata emberjs", "d": "1/2015"}, {"body": "tauranjanitor recreate issue emberdata thanks", "d": "1/2015"}, {"body": "nt know obscure going happen time try integrate external object model example ran issue rendering property native xhr nt available reached certain point like experience really surprising nasty track vote option something similar", "d": "1/2015"}, {"body": "thanks cowboyd relieved hear one folks might run interest full disclosure discover another workaround typescript base class digs internal guts ember finds properties watched nt entries metavalues yet inserts values appears work however fragile ugly sounds", "d": "1/2015"}, {"body": "worries btw says profile austin totally stop say hi come next emberatx meetup would love talk shop sometime", "d": "1/2015"}, {"body": "would also love see backwards compatible issues also", "d": "1/2015"}, {"body": "would something could get pr quickly move forward extremely useful", "d": "1/2015"}, {"body": "likely yes", "d": "1/2015"}, {"body": "problem putting pr expect one tonight nobody else gets first", "d": "1/2015"}, {"body": "problem putting pr expect one tonight nobody else gets first", "d": "1/2015"}, {"body": "different", "d": "1/2015"}, {"body": "ahacking nt deprecate reason", "d": "1/2015"}, {"body": "stefanpenner ok cool support deprecating calling getting speed ember first reached numerous occasions later discovering implementing cp get semantics wanted", "d": "1/2015"}, {"body": "week came across issue even searched api could nt find method returns instead ended writing btw still nt know reference argument next noticed ahacking comment", "d": "1/2015"}, {"body": "implementationwise slightly different returns rather sure matters anyone", "d": "1/2015"}, {"body": "thinking little null return value probably important template rendering way javascript works returns last value makes sense well", "d": "1/2015"}, {"body": "believe ticket belongs", "d": "1/2015"}, {"body": "opened", "d": "1/2015"}, {"body": "might mistaken nt believe ever made custom subexpressions public api ember indeed bound correctly due limitations handlebars forward expected work become common template code sure might need get working want", "d": "1/2015"}, {"body": "mixonic correct bound subexpressions able supported versions prior", "d": "1/2015"}, {"body": "sorry roughly way implement without massive changes closing supported", "d": "1/2015"}, {"body": "sglanzer definitely look know every handlebars feature actually supported ember sounds like already used without issue however verify nt unknown sideeffects document", "d": "1/2015"}, {"body": "confirm error occurs chrome built application", "d": "1/2015"}, {"body": "dremora mean built", "d": "1/2015"}, {"body": "created serve folder likely get issue chrome", "d": "1/2015"}, {"body": "provide steps reproduce", "d": "1/2015"}, {"body": "stefanpenner unfortunately big project nt know start reproduce error happens every single route also using ember htmlbars", "d": "1/2015"}, {"body": "case happens selected routes steps reproduce go look test click album appears list check error console source code serve run please note bug occur running", "d": "1/2015"}, {"body": "confirm well seen ember firefox release new version january perhaps change release issue seems unlikely issue would lurking around ember long without notice suddenly multiple people stumbled across time", "d": "1/2015"}, {"body": "need reproducible case jsbin demo embercli app steps reproduce error help track", "d": "1/2015"}, {"body": "asakusuma think might able achieve want using activate deactivate hooks blog post", "d": "1/2015"}, {"body": "chadhietala tried activatedeactivate ember works route expected router sure router code distributed elsewhere routerjs appears line triggering didtransition event nt see events like deactivate willtransition", "d": "1/2015"}, {"body": "would need added tildeiorouterjs since actual originally invoked router seems fairly trivial gladly pr core ok addition seems like exist parity", "d": "1/2015"}, {"body": "jayphelps thanks wait ok core open pr", "d": "1/2015"}, {"body": "seems reasonable lets check mr router sure", "d": "1/2015"}, {"body": "asakusuma seems like good idea add routerjsember router pr", "d": "1/2015"}, {"body": "awesome submit pr shortly", "d": "1/2015"}, {"body": "teh tildeiorouter pr open another pr emberjs", "d": "1/2015"}, {"body": "asakusuma looks like tildeiorouterjs merged", "d": "1/2015"}, {"body": "pr merged closing thanks", "d": "1/2015"}, {"body": "similar issue", "d": "1/2015"}, {"body": "topqualityua recreate without torii", "d": "1/2015"}, {"body": "mixonic try today recreate without torii nt think torii main reason ember application running", "d": "1/2015"}, {"body": "mixonic ive updated torii works great thank quick response", "d": "1/2015"}, {"body": "might want look perhaps scroll comment tom dale", "d": "1/2015"}, {"body": "gist highlights upcoming shifts ember gist find links various presentations videos links topic ember emberjs releases plans items roadmap commitment made date release may releases use feature flags optin new features beta want try early give feedback far know series releases prevent continuing use views links gist info using components address behind shift toward components tom robert stefan given talks details changes ember bring rfc post highlights roadmap invites comments good listen well", "d": "1/2015"}, {"body": "think pixelhandler joostdevries pointed great resources emberjsrfcs probably correct venue", "d": "1/2015"}, {"body": "pixelhandler joostdevries fivetanley thanks wealth information helpful trying still trying get make sense references routeable components many people noticed controllers ember look lot like components arbitrary division responsibilities agree current versions ember route entered builds controller associates model hands oldstyle view rendering view invisible write template correct name plan transition route entered renders component passing along model attr eliminates vestigial use oldstyle views associates toplevel template regular component biggest challenge switching components application business logic shared components concern controllers represented place put common business logic one action multiple views views could contain ui specific computed properties validation controllers business logic specific computed properties validation set want echo pradeek wrote use view amp controller different templates render coursedate thiscoursedate render coursedatemobile thiscoursedate controller coursedate view coursedate also use controller different views amp different templates render sections modelsections render sectionstoc modelsections controller sections ember moves really interested seeing use components achieve encapsulation reusability current amp rudimentary understanding components seems nt support find similiar manner presentation layer complex truly need way components ability communicate challenge using components since isolated default knowledge views shined us past ui many things need observer react based selections make situations like talks new ways handle understanding stated views go bye bye top level component", "d": "1/2015"}, {"body": "embercli addon chose use custom dom events components communicate see repo components eocviewport parent listens custom events components fire instead event handler component converting event ember action simply convert click event custom dom event bubbles parent component template components sued together embercli addons provides dummy app type communication components uses event pooling approach uses custom events components work together similar post opinion ember actions powerful useful sometimes using native dom events instead may right contextual solution problem still choices mix ember provides browser provides", "d": "1/2015"}, {"body": "wanted sprinkle alfredo sauce call done appreciate considerate ember community interested word street checkout", "d": "1/2015"}, {"body": "paddyobrien looked contenteditable focus work together moments seems reasonable thing support focusing contenteditable indeed thing demo case anyone else curious", "d": "1/2015"}, {"body": "sweet get pr together weekend", "d": "1/2015"}, {"body": "hit wall minutes ago updating embercli glad see nt clue getting error", "d": "1/2015"}, {"body": "ya broke build fix asap", "d": "1/2015"}, {"body": "aexmachina think might better demonstrate issue running calling class mixin seems cause prototype mutated returns true function calls second time new class nt created thus sideeffect calling persists second test new class created returns false prototype", "d": "1/2015"}, {"body": "okay outcome bulletproof way detect whether class contains given mixin nice improve close issue leave", "d": "1/2015"}, {"body": "would use hbs using templates file done tutorial time tutorials add templates script tag blocks body would give two templates html html script tag set considered template keep mind naming also important", "d": "1/2015"}, {"body": "okay makes lot sense thanks clarifying might still good emphasize guide templates individual files notion template quite bit different something like rails elaboration point getting started guide would good addition think", "d": "1/2015"}, {"body": "fwiw guides live repo please track issues", "d": "1/2015"}, {"body": "case helps understand context came across working tutorialblog post pushed draft case want dig deeper actual use cases", "d": "1/2015"}, {"body": "eager url updating removed due number bugs cropped last releases", "d": "1/2015"}, {"body": "removal land initially", "d": "1/2015"}, {"body": "ah bummer read related issues leading removal feature completely agree tricky issue complex one solve might turn issue completely unrelated eagerness updating url though fundamental problem whenever transition error substate updated url point eagerly otherwise reason shown jsbin final state ui original route torn replaced error template people probably instinctively reach back button hoping bring back last working state app probably temporarily solved accident via eager url updates appears discussion around feature around loading use case shown already nt work synchronous errors today even eager url update imagine correct solution make sure update url settled error state sure url would though", "d": "1/2015"}, {"body": "chancancode initial response bit hip mobile could nt really review jsbin detail mostly let know eager updating feature removed case fundamental issue try review detail soon", "d": "1/2015"}, {"body": "response helpful able find related materials understand background", "d": "1/2015"}, {"body": "good question seems like better question stackoverflow discourse forum bug something broken prevents working please feel reopen", "d": "1/2015"}, {"body": "tomdale rwjblue move issue emberjsbuild", "d": "1/2015"}, {"body": "size nonobservable currently mean observing template likely causes issues seems really crappy", "d": "1/2015"}, {"body": "stefanpenner crappy", "d": "1/2015"}, {"body": "indeed observing size property template though", "d": "1/2015"}, {"body": "crappy crappy framework kind bummer mandatory setter ca nt really use manipulate pojos ever put template either", "d": "1/2015"}, {"body": "good know remember problem code worked believe exceptions thrown lucky callers map class observe changes manually", "d": "1/2015"}, {"body": "fivetanley stefanpenner thanks explanation create workaround issue unfortunately qualify good enough contribute source otherwise would done pr resolve issue thanks wonderful job done already", "d": "1/2015"}, {"body": "duplicate", "d": "1/2015"}, {"body": "mixonic confirm summary may propattr thing backwards", "d": "1/2015"}, {"body": "way looks like camelcased property expected camelcase property looks like works", "d": "1/2015"}, {"body": "wagenet normalization code caught believe issue would tests around elsewhere using maxlength example perhaps unearth bug caching code something", "d": "1/2015"}, {"body": "turns new regression last worked rendered", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "seeing issue anything help", "d": "1/2015"}, {"body": "normalization canary point good news fix since would go normalization happens attrnodes sadly think make beta pretty big change make late beta cycle", "d": "1/2015"}, {"body": "kiwiupover top head believe related try dig around confirmdeny", "d": "1/2015"}, {"body": "rwjblue thanks thanks heaps", "d": "1/2015"}, {"body": "tomdale dig old convos explaining choices made", "d": "1/2015"}, {"body": "tomdale tl dr historyhash location classes assume different paths cause extra history states created several users reported redirect issues index path path app index inside app comment assertions try noted redirected try nonhistory supported browser like many servers cause infinite redirect battle visitor lands ember redirects via support server redirects back etc etc", "d": "1/2015"}, {"body": "jayphelps try support browsers naively considered carefully case hash routes particular index state given probably makes sense us app either mandate trailing slash rails seems pretty easy via likely always use history location thanks info", "d": "1/2015"}, {"body": "tomdale problem complex situation explain manywish easy way support btw would guess nt want serve routes trailing slashes via one otherwise normal emberroute urls get trailing slash incorrectly gt wrong", "d": "1/2015"}, {"body": "try support browsers pushstate use autolocation", "d": "1/2015"}, {"body": "closing", "d": "1/2015"}, {"body": "use property name let us know problem persists suspect issue", "d": "1/2015"}, {"body": "sorry luck warning attempting render view passing ddbinding view helper without quoted value syntax ambiguous either surround ddbinding value quotes remove ddbinding would nt surprised related setattribute comment", "d": "1/2015"}, {"body": "zyllorion given try canary", "d": "1/2015"}, {"body": "based zyllorion comments related htmlbars issue believe resolved closing happy reopen needed", "d": "1/2015"}, {"body": "actually running issue tried follow zyllorion comment htmlbars could nt find anything similar tips narrowing code could causing issue", "d": "1/2015"}, {"body": "update latest canary ember bug htmlbars", "d": "1/2015"}, {"body": "looks like fixed", "d": "1/2015"}, {"body": "wagenet keep ticket open fix lands emberjsmaster since requires pr merged version cut pr made emberjs updating merged think important record open", "d": "1/2015"}, {"body": "reopening dep updated", "d": "1/2015"}, {"body": "arg typo parent", "d": "1/2015"}, {"body": "would nice way possible inspector logging stepping viewroute etc lifecycle demand teddyzeenny sound reasonable handwaving around describing magic", "d": "1/2015"}, {"body": "trek understand correctly mean something like pause lifecycle hook click next hook continue unless use something like breakpoint halts js execution need builtin async support return blocking promises halt transition seems currently feasible routes views nt enough info know possible let look", "d": "1/2015"}, {"body": "teddyzeenny exactly automatic resolution objects easy get trolled silent failures misspellings placing items wrong place get used double checking think would obvious walked lifecycle messages like called didinsertelement view subclass generated framework", "d": "1/2015"}, {"body": "happening ember special casing attribute named whole codepath removed", "d": "1/2015"}, {"body": "see", "d": "1/2015"}, {"body": "closing favor pr", "d": "1/2015"}, {"body": "cowboyd thanks sure missed pr applied code pr repo tests still ran looks good", "d": "1/2015"}, {"body": "reason ca nt observe applicationcontroller guide", "d": "1/2015"}, {"body": "thing container lookup works nice also nice access actual emberroute object", "d": "1/2015"}, {"body": "excellent question stackoverflow try use issues report manage bugs", "d": "1/2015"}, {"body": "getting index indeed feature missing framework long time thankfully tim evans implemented read enabling feature flags canary builds reading configuration need sure put script tag loading ember also add block pregenerated ember cli", "d": "1/2015"}, {"body": "need array sequential integers could use subexpression generate range javascript emberhtmlbarsregisterhelper range function values var start values var count values var ret var lt count retpush istart return ret handlebars range item item", "d": "1/2015"}, {"body": "fivetanley workmanw thank helpful trek much make something fundamental take minute take hour trial error going forums bug kind issue attitude makes framework less usable", "d": "1/2015"}, {"body": "make something fundamental take minute take hour trial error going forums bug everyone different levels experience aggregate every feature every library takes someone hour trial error stackoverflow excellent place triage types questions ember community great answer rate always direct people questions stackoverflow think best location type communication use issue specifically tracking bugserrors read issue submission guidelines link also posted top new issue page like large projects significant amount community volunteer team spent reading organizing issues part contributing document ask difficulties using emberjs question usage please ask question stack overflow helps us prioritize errors need fixing next release glad someone able answer question try communicate venue think questions best serve community issue example way surface many answers bestcorrect answer answering questions issues also tendency turn long semitraining experiences immensely useful person asking also fills every project collaborator inbox every new reply makes harder us manage project people least ember community also tend search stackoverflow github issues problems like one experienced problem answered means next person runs hurdle nt benefit answered could please repost question stackoverflow sure fivetanley workmanw also reply giving chance select best answer letting future people upvote answers worked", "d": "1/2015"}, {"body": "agree topic belongs stackoverflow irc creating issue bug lack understanding compose two ember tools specific use case case two tools helper array filled numbers array could handled static array computed property subexpression wesley comment", "d": "1/2015"}, {"body": "mmun must read either original message fivetanley message index missing go create junk array manually exists reason getting index indeed feature missing framework long time thankfully tim evans implemented", "d": "1/2015"}, {"body": "trek nt buy reasoning everyone different levels experience aggregate every feature every library takes someone hour trial error talking something fundamental programming language loop integer input denying usage simply makes using framework harder merit feature issue asking fact provide answer original post go create junk array manually exists reason fact question asked solution issue", "d": "1/2015"}, {"body": "core principle handlebars ca nt add two numbers either despite fundamental operation programming languages suggest improve documentation", "d": "1/2015"}, {"body": "explaining principle merit proper way merit would mean better way nt better way principle flawed nt exist", "d": "1/2015"}, {"body": "flawed perfectly natural solutions problem array junk functional languages fine without loops", "d": "1/2015"}, {"body": "flaw imo need redundant array memory another lines code words principle makes harder less efficient task", "d": "1/2015"}, {"body": "future could support generators alleviate memory concerns", "d": "1/2015"}, {"body": "mmun thats cool idea handlebars block syntax yield generator function values block", "d": "1/2015"}, {"body": "mmun pretty sure generators already work react", "d": "1/2015"}, {"body": "trek yes react uses dom builderjsx templates allow full js expressiveness features importantly preserve js context scope prefer power lesser overhead approach compared forced propertycp land feed rather simple handlebars templates approaches seen said handlebars templates friendlier designers workflow lets edit application templates even severe limits ca nt expect allow designer refactor view make changes willy nilly unless understand ember apps specific naming conventions refactors also require developer involvement likely result change stuff within moustaches well ideally ember framework allow certainly interested dom builder rendering capability support native jsjsxlike apporaches preferably layered within embers core failing via addon new isomorphic support may make much easier injectable renderers nt looked details", "d": "1/2015"}, {"body": "chrism coming calls registry likely result calling initializer one easy way find deprecations triggered set throw error instead printing deprecation console use stack determine offenders app going close dupe basically message helpful", "d": "1/2015"}, {"body": "demo flag open dev tools setup break exceptions able take look stack see calling", "d": "1/2015"}, {"body": "hi thanks much rwjblue makes perfect sense trying break exceptions chrome try see stack amp find containerlookups", "d": "1/2015"}, {"body": "great question stackoverflow try use issues reporting bugs check contributing guidelines information ways post please link stackoverflow question back posted", "d": "1/2015"}, {"body": "miguelcobain able post get help", "d": "1/2015"}, {"body": "trek yes working solution rather see ember supporting something like overridable concatenated properties overridable attributeclass bindings", "d": "1/2015"}, {"body": "feature desired core would happy try make pr probably behind feature flag", "d": "1/2015"}, {"body": "submitted failing test htmlbars yesterday plan attack needs someone pick", "d": "1/2015"}, {"body": "fixed master beta using htmlbars", "d": "1/2015"}, {"body": "still seeing issues embercli ember emberclihtmlbars", "d": "1/2015"}, {"body": "see", "d": "1/2015"}, {"body": "wagenet originally reported issue issue plain html template using quite different screenshot original jsbin demonstrating working properly", "d": "1/2015"}, {"body": "wagenet closing favor specifically issue jsbin", "d": "1/2015"}, {"body": "rwjblue right mistake", "d": "1/2015"}, {"body": "try date version ember confirm work nt know bug already fixed going guess related use strict bugs beta canary", "d": "1/2015"}, {"body": "get back updated thing", "d": "1/2015"}, {"body": "start looking advanced ways debug hoping someone webkitsafari teams info stefanpenner know anybody", "d": "1/2015"}, {"body": "update initial checks iphone show change able push changes production tomorrow", "d": "1/2015"}, {"body": "get isolated reproduction private access app public url hit investigate", "d": "1/2015"}, {"body": "mytennishotelcom public url minified code", "d": "1/2015"}, {"body": "update console indeed return error one would expect find localstorage calls application code safariprivate localstorage issue really pain back far issue goes problem actually fixed question remains error localstorage removed place used infinite page reload loop chrome maybe ember killed error message way mytennishotelcom still version load throws error seems leak ember file guys want investigate close issue", "d": "1/2015"}, {"body": "killapl case nt known available safari private browsing mode design need feature detect whether available act accordingly see info unrelated ember", "d": "1/2015"}, {"body": "question remains error wonder ember swallowed error mistake along im closing nt believe ember related merely feature safari", "d": "1/2015"}, {"body": "sure thanks time sorry nt actually bring value", "d": "1/2015"}, {"body": "killapl might actually surprised value sure one notice change ticket helps others correlate diagnose symptoms debugging certainly nt vain", "d": "1/2015"}, {"body": "mmun stefanpenner", "d": "1/2015"}, {"body": "shripathee seems fixed canary", "d": "1/2015"}, {"body": "mmun changing order component properties instantiation breaks canary believe behaviour dependent order properties also issue set static value component property still exists canary", "d": "1/2015"}, {"body": "behaviour though correct", "d": "1/2015"}, {"body": "nt see could change behaviour order independent working setters example expect log", "d": "1/2015"}, {"body": "another specific example dependent property indeterminism cps recall also issue dealing undefined inputs cps due assignment order object create occurs init called mmun example cant really work reliably clear mutual dependencecircular dependency regard impossible kind thing going easy address given cps work without maintaining dag ordering dependencies assignment could applied proper order could possibly detect direct indirect circular deps feat attemot sink hole performance", "d": "1/2015"}, {"body": "ahacking really nothing cps dependency keys problems would arise using native setters problem setter pattern general order matters equivalent setters example personally never use setter aspects cps", "d": "1/2015"}, {"body": "mmun something related template compiler look properties order compiled template", "d": "1/2015"}, {"body": "manoharank yes good catch must bug handlebars ember depended regardless fixed htmlbars currently beta", "d": "1/2015"}, {"body": "mmun honestly didnt look minute detail particular issue happens set b depends b b regular property know problem inside objectcreate assigns passed props property setter would get undefined b nt set yet", "d": "1/2015"}, {"body": "also since js nt defined order object keys likely get different assignment ordering different browsers", "d": "1/2015"}, {"body": "would amazing wonder multiple block params mmun mixonic rwjblue", "d": "1/2015"}, {"body": "fivetanley able index would lovely", "d": "1/2015"}, {"body": "timevans easy add think change", "d": "1/2015"}, {"body": "ok seems strange test belongs emberhtmlbars tad confusing", "d": "1/2015"}, {"body": "quantumking working expected want ember take care stream stuff use js var registerhelper emberhtmlbarsregisterhelper var makeboundhelper emberhtmlbarsmakeboundhelper registerhelper humanreadabletype makeboundhelper function params switch params case information return information case text return freeform text", "d": "1/2015"}, {"body": "mmun need every bound helper", "d": "1/2015"}, {"body": "wraps", "d": "1/2015"}, {"body": "could", "d": "1/2015"}, {"body": "think shim", "d": "1/2015"}, {"body": "quantumking curiosity using register helpers", "d": "1/2015"}, {"body": "mmun previous example registering view helpers would replace", "d": "1/2015"}, {"body": "right using simulate previous behaviour", "d": "1/2015"}, {"body": "nt want conflate bound helpers view helpers become deprecated anyways prefer separate registerviewhelper", "d": "1/2015"}, {"body": "ok well thanks help mmun really appreciate", "d": "1/2015"}, {"body": "needs serious documentation like new approach streams arguments passed helper much cleaner", "d": "1/2015"}, {"body": "favor separate functions modules world embercli specifically simply done need separate functions keeping api relatively small composable much better results trying make every single possible scenario single function call", "d": "1/2015"}, {"body": "absolutely possible make addon folks want everything kitchen sink style api strongly prefer keep public api focused point", "d": "1/2015"}, {"body": "registerboundhelper nt seem crazy common glue would normally sort thing kind common patterns ember wraps glue code rather manually wiring things together seems like burden put user upgrading using embercli world", "d": "1/2015"}, {"body": "fivetanley embercli supposed true modules build ember helper module point exactly want matter fact helper dash name nt even need use resolver work", "d": "1/2015"}, {"body": "specific use case trouble refreshing model click page link already page think web page users expect happen cc machty wycats tomdale", "d": "1/2015"}, {"body": "pass model transitionto linkto explicitly saying use model ready go want cause lookup transition id instead becomes", "d": "1/2015"}, {"body": "issue second case nt refresh model linkto arguments", "d": "1/2015"}, {"body": "router look params pass see match serialized params existing model loaded route without calling model hooks", "d": "1/2015"}, {"body": "ah nt realize optimized like carry", "d": "1/2015"}, {"body": "ditto trying migrate helper today found hard work debug streams wrapped closures little documentation might go long way", "d": "1/2015"}, {"body": "see timevans workmanw explain types helpers require manually working streams migrate", "d": "1/2015"}, {"body": "two helper use cases deals looking custom action targets components need able target parent view target currently supported embercomponenttargetobject nt allow provide target arg look via stream basic input components inputtextarea select checkbox button etc use custom view mixin errormixin tl dr components setup custom stream dynamically value bound ember data model handle validation errors lookup valuebinding setup secondary dynamic binding errors hash eg valuebinding userage setup stream keep sync regards sure going catch loads flack ember proper eds validation handling dserrors creates lot boiler plate attempt reducing", "d": "1/2015"}, {"body": "custom translation helper named localization helper named binds interpolated string string ends dynamically created using bindings would like decompose helpers string concatenation translation means need write join helper returns stream nt currently see solution providing dynamic concatenation strings passed helper left use cases involve shorthand action helpers trigger events router controller action would prefer keeping helpers terse since used app helper creation function bypass requirement components important use case especially using localization internationalization html attributes", "d": "1/2015"}, {"body": "timevans great thanks may also interested writing htmlbars ast transform rewrites status compile time possible write ember addons workmanw sorry hard time understanding could show example use helper template", "d": "1/2015"}, {"body": "mmun would fantastic way change code thanks idea", "d": "1/2015"}, {"body": "merged need go next weekly meeting", "d": "1/2015"}, {"body": "fixed componentsember updated tagged build", "d": "1/2015"}, {"body": "thanks", "d": "1/2015"}, {"body": "never reported bug ember community bit surprised nt got reply yet hoping nt report incorrectly", "d": "1/2015"}, {"body": "appears duplicate explanation work", "d": "1/2015"}, {"body": "brilliant using preventsdefaultfalse parent element fact fix checkboxes also case file inputs triggered click thanks much", "d": "1/2015"}, {"body": "mean instead", "d": "1/2015"}, {"body": "wooow yes thank", "d": "1/2015"}, {"body": "provide jsbin", "d": "1/2015"}, {"body": "easily would try recreate scratch much company logic complex models see recreate get mo warning moment show stopper suspect case adding model generator code somewhere happy inspect debug point look", "d": "1/2015"}, {"body": "without steps reproduce clarity versions using issue nt actionable", "d": "1/2015"}, {"body": "sorry thought canary would enough debug ember debug ember data debug jquery take quick look source try find generator code try mock something reproduce", "d": "1/2015"}, {"body": "duplicate", "d": "1/2015"}, {"body": "template using instead message indicates", "d": "1/2015"}, {"body": "aha nested component could error message enhanced name viewcomponent error currently says controller bit misleading thanks help", "d": "1/2015"}, {"body": "absolutely need add deprecations guide deprecation link guide information interim probably best list things checkwork references made deprecation updated ghost remove usage emberobjectcontroller", "d": "1/2015"}, {"body": "great thanks related issue changes method controller property access issues latest build passing controller property array objects ca nt see anything obvious commit history componentname parammycontrollerarray passes null used work fairly sure hav nt changed anything area code", "d": "1/2015"}, {"body": "think documentation could really use example load multiple models controller especially area changing", "d": "1/2015"}, {"body": "componentname parammycontrollerarray passes null zyllorion still work properly jsbin demo think documentation could really use example load multiple models controller especially area changing maybe really sure document differently hooks present route hooks documented general", "d": "1/2015"}, {"body": "reason mention started took ages find forum post worked ending slightly obscure export default emberrouteextend model function params var self may able remove wrapping promise return new emberrsvppromise function resolve new emberrsvphash selfstorefind paramssomeid selfstorefind paramssomeid selfstorefindall function results resolve issue reason asking removing proxying behaviour specifying modelfieldname logically expect requirement controllerpropertyname viewpropertyname hence made sense code nt work anymore though hav nt found access property yet working", "d": "1/2015"}, {"body": "zyllorion shorter version work also need wrap promise call function hash model hook wait promises resolve template loads set model return value model previously", "d": "1/2015"}, {"body": "aha great suspected simpler way thanks slightly tangential question would recommended way propogate handle feedback errors ajax calls wrapping promise could set failure function reroute erroradvice page without probably ember magic need know", "d": "1/2015"}, {"body": "mentioned blog post reason need get plain array", "d": "1/2015"}, {"body": "also sorry inconvenience reopen githubcomemberjsdata issue nt think related ember", "d": "1/2015"}, {"body": "opened githubcomemberjsdata", "d": "1/2015"}, {"body": "known issue", "d": "1/2015"}, {"body": "closing favor meta", "d": "1/2015"}, {"body": "fyi tried well canary see issue", "d": "1/2015"}, {"body": "kind question probably best asked stackoverflow guess route probably setting query params controller transition completes overwriting value user entered meantime two sources truth ie user input routeurl param unavoidable timing issues deal may want think separating user editable property route param property better control one authoritative time already debounce user input control propagation user input property value route param property", "d": "1/2015"}, {"body": "believe understand mean however still inclined think issue emberjs hence continuing discussion instead asking stackoverflow keep reading reasoning behind statement able work around issue solve introduce new properties controller properties handle use case properties bound text field bound query param bound anything idea observe send debounced actions router like one crucial difference debounced notifications sent initialize property controller based query param needed hook access query params controller used route seems something route responsibility code something like works truly smells thing even though sources truth user editing one time one user modifying authoritative one new value flow thing user editing property things bound property nt make sense since apparently notion flowing changes one source bound things use manage properties add hook deal branches feels counter intuitive missing something thanks bruno", "d": "1/2015"}, {"body": "yes feel pain ember user come conclusion computed properties cps observers path hell part problems dealing set aware route driven controllers get created persist life application modelcontent changed router make sure observe modelcontent property reset ininitialized flag router ugly largely ember way due cp observer side effect architecture enough shenanigans use private functions suspend observers run loop deferred processing run guards eventually get something works avoids multiple recomputations ember fragile takes immense amount time dealing corner cases feedback loops nt use embers array computed properties either broken many surprising ways may like review ember rfc put experiences views forward rather critical computed properties observers based experiences ember think deprecated unidirectional data flow adopted tame complexity", "d": "1/2015"}, {"body": "whip jsbin showing example", "d": "1/2015"}, {"body": "mitchlloyd never getting errors like bug compiler template causing", "d": "1/2015"}, {"body": "get trying htmlbars take care unless someone else wants", "d": "1/2015"}, {"body": "oneeman please", "d": "1/2015"}, {"body": "sorry markdown fail original post see template causing error oneeman correct", "d": "1/2015"}, {"body": "thanks quick fixes issues everyone awesome work", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "submitted fix", "d": "1/2015"}, {"body": "mitchlloyd thanks reporting", "d": "1/2015"}, {"body": "closing removal shimsham definition fixed", "d": "1/2015"}, {"body": "zyllorion specify clearly fixed packages error get without including vendorfiles", "d": "1/2015"}, {"body": "came workaround using component instead named outlet", "d": "1/2015"}, {"body": "tell us like customize", "d": "1/2015"}, {"body": "request really two parts wrote embermobiletouch dropin addon enabling full gesture support embercentric approach eventing includes removing click default action linkview event favor tap part make easy change event triggers action click tap action helper requires overwriting helper like see part make possible listen one event action helper often mobile one event trigger behavior instance ios style slidetoggles trigger tap press pan critical instance allow one gesture initiate tap many users especially older ones conflate tapping pressing default working towards allowing either tap press event trigger linkview action", "d": "1/2015"}, {"body": "incidentally open pring changes acceptable nt require much", "d": "1/2015"}, {"body": "boom done", "d": "1/2015"}, {"body": "may miss something would nt good also rename first parameter initializers doc examples embercli generators", "d": "1/2015"}, {"body": "ilkkao stable yes kinda makes wonder need generators specific versions ember", "d": "1/2015"}, {"body": "currently proper way getting service container register global callback popup window came instantiating using instantiate false better way course could bypass moment defaultcontainerlookup say real solution coming", "d": "1/2015"}, {"body": "addressed emberjswebsite feel free close rwjblue", "d": "1/2015"}, {"body": "guess closed", "d": "1/2015"}, {"body": "documentation updated reflect actual behavior", "d": "1/2015"}, {"body": "lolmaus sure policy already updated master see branch consider done believe updated web next stable release", "d": "1/2015"}, {"body": "ah okay see reference thread references nt produce email notifications thx pointing", "d": "1/2015"}, {"body": "bubble action passed bcardarella looking", "d": "1/2015"}, {"body": "yes suspect issue camelcasing thanks", "d": "1/2015"}, {"body": "case actual view function invoked instance calls currentvalue event annoying conflicting method name action name", "d": "1/2015"}, {"body": "confirm another wtfminute", "d": "1/2015"}, {"body": "conflict resolved drop setting properties root viewscomponent template set sometime soonish maintain root properties properties throughout semver", "d": "1/2015"}, {"body": "bitten well extract input focusing behavior helper separate function use right finding forspareparts would mind taking stab fixing", "d": "1/2015"}, {"body": "closing favor", "d": "1/2015"}, {"body": "seems problem caused sortsolutions function routerecognizer comment top function mentions general strategy mention purpose first place first intuition using router routes priority based order adding router would match route first route search matched think behaviour easier document easier predict developer suppose changing release nogo backwards compatibility maybe could addressed", "d": "1/2015"}, {"body": "drogus refile", "d": "1/2015"}, {"body": "posted fix", "d": "1/2015"}, {"body": "pulled beta stable cc rwjblue", "d": "1/2015"}, {"body": "commenting stops showing needs attention list", "d": "1/2015"}, {"body": "test latest stable canary provide example jsbin failing test us dive quickly", "d": "1/2015"}, {"body": "made super simple demo showing pass index general definitely need jsbin reproduction showing issue able track happening situation", "d": "1/2015"}, {"body": "created jsbin find later ember release work tried use report error failed reproduce issue sorry sure jsbin fail later version works think maybe issue related older versions fine close thank time", "d": "1/2015"}, {"body": "thanks confirming us", "d": "1/2015"}, {"body": "chatting oneeman irc fairly sure fix awesome work salzhrani oneeman done upstream htmlbars beta line needs updated parse namespace pass third parameter call", "d": "1/2015"}, {"body": "mentioned oneeman following work canary today", "d": "1/2015"}, {"body": "thanks salzhrani first thought issue closed maybe keep open also works", "d": "1/2015"}, {"body": "merged issue closed", "d": "1/2015"}, {"body": "tried take look could nt figure change codepen ember version likely obtuse test", "d": "1/2015"}, {"body": "ok made jsbin canary", "d": "1/2015"}, {"body": "thanks robert see got rough idea problem lies", "d": "1/2015"}, {"body": "merged fixed htmlbars version bump", "d": "1/2015"}, {"body": "updated canary beta htmlbars seems working properly", "d": "1/2015"}, {"body": "see behavior persists", "d": "1/2015"}, {"body": "regression nothing htmlbars fixed badbehaving jsbin note space list wellbehaving jsbin space list bad behavior quirk way use template isolation combined bug rendering engines chrome safari check first jsbin fine firefox clean fix nt think dropping handlebars template compiling clean think would justify point release regardless behavior correct", "d": "1/2015"}, {"body": "mixonic nt think justifies point release mainly affects windows users far see perfectly good work around remove compiling templates around corner think anyone run wait", "d": "1/2015"}, {"body": "imo think cut bitten always trivial upgrade next sub version many large apps make use publicprivate apis fluxing lot lately core team job keep private apis stable providing patches regressions shows community take seriously know answer nt always well upgrade happy help anything also realize workaround sends wrong message edit rwjblue clarified fixed nt use compiler anymore nt trivial sounds since needs fixed upstream anyone tracked offending area handlebars", "d": "1/2015"}, {"body": "jayphelps discussed options best one would stripping windows newlines templates compiling nt develop windows nt feel comfortable landing patch may sideeffects needs testing offending area rendering engines chrome safari incorrectly consider significant whitespace inserting insignificant whitespace nt opened ticket jayphelps really sorry feel letting community need choose focus efforts please nt think serious fixing bugs imo unwarranted reaction spent significant amount time nailing problem something reproducible specific lot people thread use windows ember happy help land patch also happy advocate release nothing ruled", "d": "1/2015"}, {"body": "mixonic sorry confusion thought edit clarified mistakenly thought trivial known fix already place choosing back port digging quite bit well came conclusions also comment response jonnii comment", "d": "1/2015"}, {"body": "jayphelps happy happy", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "works latest embercanary thanks oneeman", "d": "1/2015"}, {"body": "mixonic believe something working currently cd", "d": "1/2015"}, {"body": "focusing attr bindings piece cake", "d": "1/2015"}, {"body": "mixonic believe something working currently cd", "d": "1/2015"}, {"body": "underway tests failing large number changes", "d": "1/2015"}, {"body": "need deprecated nt ever public api legacy support appendchild string buffer", "d": "1/2015"}, {"body": "seanpdoyle sorry losing track holidays look moment regroup", "d": "1/2015"}, {"body": "fix released ember still broken ember", "d": "1/2015"}, {"body": "mutewinter correct changes included already included betas", "d": "1/2015"}, {"body": "oh bad issue causes serious bugs application hard diagnose incorporated rsvp patch ember version worries developers partial runloop finish results strange bugs", "d": "1/2015"}, {"body": "mutewinter yep agreed weird hard diagnose implementing bypasses issue affected versions right around corner", "d": "1/2015"}, {"body": "closed", "d": "1/2015"}, {"body": "jcbvm ended anyone curious change line", "d": "1/2015"}, {"body": "thing tried variation courthead solution works chrome half time really wrote jasmine spec keep pressing browser half times spec passes half fails error guess sort race condition involved", "d": "1/2015"}, {"body": "guys suggest update libraries using problem solved updated several libraries latest versions incompatible current ember version", "d": "1/2015"}, {"body": "ruslanzavacky libraries talking libraries using ember requirejs jquery latest versions", "d": "1/2015"}, {"body": "nikolas throw error update error", "d": "1/2015"}, {"body": "longer require package longer issue closing happy reopen repro repo latest canary", "d": "1/2015"}, {"body": "jacdx nt need shim handlebars requirejs config newer handlebars defines module via umd", "d": "1/2015"}, {"body": "everyone else thread make nt including shims vendor clobbering handlebars module update handlebars export module sees amd define instead global since shim would end breaking", "d": "1/2015"}, {"body": "longer require handlebars package rwjblue curious templates get compiled beta assuming want compile browser know recommended currently use handlebars gone", "d": "1/2015"}, {"body": "tfga yes actually aliased internally", "d": "1/2015"}, {"body": "even easier fix include handlebarsjs file almondjs order relevant includes", "d": "1/2015"}, {"body": "stefanpenner needs done", "d": "1/2015"}, {"body": "need made performant", "d": "1/2015"}, {"body": "initial implementation done definitely still room improvement prsissues welcome", "d": "1/2015"}, {"body": "bug today", "d": "1/2015"}, {"body": "ya lame shifting goes away entirely item controllers become deprecated suspect may see fix unless someone spare time dig", "d": "1/2015"}, {"body": "would want use without specified case use", "d": "1/2015"}, {"body": "sure smilecat still regression lol maybe set value cp changes later", "d": "1/2015"}, {"body": "research attribute set initialized empty string embertextsupport embertextfield removing default values fixes issue reported odd using case specified assume input checkbox", "d": "1/2015"}, {"body": "create another component use instead inherit possibly making inherit common base something mixonic thoughts", "d": "1/2015"}, {"body": "weird indeed sounds little logical jan robert jackson notifications githubcom wrote research value attribute set initialized empty string embertextsupport embertextfield removing default values fixes issue reported odd using embertextfield case type submit specified assume input checkbox embertextfield reply email directly view github", "d": "1/2015"}, {"body": "rwjblue general button class seem ripe become series mixins views general working changes attribute bindings definitely noted places bindings seem unexpected test see changes address issue regardless slimmer viewcomponent makes sense", "d": "1/2015"}, {"body": "please provide reproduction nt think much without one", "d": "1/2015"}, {"body": "fixed must miss tagged fixed", "d": "1/2015"}, {"body": "stefanpenner flesh assume mean modify clear translation would needed", "d": "1/2015"}, {"body": "nt methods properties really conflict", "d": "1/2015"}, {"body": "igort something comply spec says definitely conflict", "d": "1/2015"}, {"body": "nt exist spec", "d": "1/2015"}, {"body": "igort internal key listing prop never implement method spec know object single thing named", "d": "1/2015"}, {"body": "keys nt exist spec keys since functions pinned properties conflicts", "d": "1/2015"}, {"body": "wanted return fascinating conversation original issue beartrap lurking ember codebase plan action pr warning docs feature", "d": "1/2015"}, {"body": "favor pr deprecating arraycomputed reducecomputed people want keep using could directed addon would warning removal", "d": "1/2015"}, {"body": "simple replacements broken mapreduce whole array change wed jan edward faulkner notifications githubcom wrote favor pr deprecating arraycomputed reducecomputed people want keep using could directed addon would warning removal reply email directly view github", "d": "1/2015"}, {"body": "working", "d": "1/2015"}, {"body": "timevans mind making pr", "d": "1/2015"}, {"body": "would love help suggestions", "d": "1/2015"}, {"body": "ground shifted little bit since opened proposal continue updating ember dependencies instead updating latest move esperanto contributor project well eager find fix bugs may present nt hesitate file issues find behavior expect", "d": "1/2015"}, {"body": "salzhrani since opened ticket lot changed would want eviltrout samsaffron much problem newer versions loader upmost move microlibraries esperanto", "d": "1/2015"}, {"body": "eventualbuddha ember passing tests using esperanto required many fixeschanges locally last major hurdle plan try implement today", "d": "1/2015"}, {"body": "lol issue cached last night nt brian comment", "d": "1/2015"}, {"body": "sorry long delay reporting back yes setup init routes controllers", "d": "1/2015"}, {"body": "things resolved satisfaction", "d": "1/2015"}, {"body": "less nt able satisfactorily solve problem setting primary controller use queryparams defined secondary controller default value queryparam secondary controller null used primary controller fact null converted string value primary controller manually set default value queryparam empty string controllers working queryparams useful seems like better supported option sharing controllers", "d": "1/2015"}, {"body": "queryparams useful seems like better supported option sharing controllers agreed wonder use mixin", "d": "1/2015"}, {"body": "going go ahead close however someone proposal making things better please share", "d": "1/2015"}, {"body": "updates would like help fix nt think understand internals router well enough", "d": "1/2015"}, {"body": "sorry taking long response going close deprecated think changing way works interim", "d": "1/2015"}, {"body": "shawnam sorry lack response delay agree odd since working properly going close", "d": "1/2015"}, {"body": "using ember use controller change param via thisset action handler controller get error second invocation action first one always works time constrained debug noting anyone following", "d": "1/2015"}, {"body": "also issue since ember prevented updates fix remove used display spinner overlay graphic looks like loading route deprecated nt able replicate jsbin hope helps others fix issue", "d": "1/2015"}, {"body": "another round testing ember seems working fine windowsxp without thanks guys cc mixonic", "d": "1/2015"}, {"body": "broken anyway", "d": "1/2015"}, {"body": "confirm nt working used conjunction ember anyone workaround used", "d": "1/2015"}, {"body": "told fixed let know turns case", "d": "1/2015"}, {"body": "confirm strange behavior also seems bug moving item top bottom moving items bottom top nt seem trigger problem also interesting extra items created nt appear ember view tree debugger extension like dom associated views nt remove", "d": "1/2015"}, {"body": "vincz confirm persists", "d": "1/2015"}, {"body": "mixonic yes made test current canary current beta current release", "d": "1/2015"}, {"body": "let know bug still nt fixed ember", "d": "1/2015"}, {"body": "seems still broken even fix", "d": "1/2015"}, {"body": "balaf please open new issue reproducing jsbin", "d": "1/2015"}, {"body": "disregard ca nt reproduce anymore must mistake works fine", "d": "1/2015"}, {"body": "sorry comment closed issue updated hoping catch bug fix unfortunately app still getting error moved another milestone way easily see release available", "d": "1/2015"}, {"body": "kelsin yes easy way see click pr find got merged click merge commit top commit description see commit meaning earliest release fix", "d": "1/2015"}, {"body": "ok bug must variation one thanks much", "d": "1/2015"}, {"body": "example click link wo nt get query param remove settimeout work fine", "d": "1/2015"}, {"body": "ya known bug really blocker query params entering system suspect ember approach help solve issue", "d": "1/2015"}, {"body": "jdalton", "d": "1/2015"}, {"body": "machty thoughts", "d": "1/2015"}, {"body": "selvagsz mixonic mmun gentlemen thoughts handle particularly tried amend mergedomviewbindings first step arrays currently treated depending length inside introduced lives", "d": "1/2015"}, {"body": "news one", "d": "1/2015"}, {"body": "yeah got hit", "d": "1/2015"}, {"body": "think close", "d": "1/2015"}, {"body": "also happens extending regulary would work jsbin wo nt jsbin", "d": "1/2015"}, {"body": "debugging mergemixins seems sets prototype current mixin chain applied nt get chance modify hash part mixin chain extending another class already exists base point safely work think easy way fix seems many people mix often guys thing important fix code maybe update docs specify mixing works applied abstract classes", "d": "1/2015"}, {"body": "minefield initialization also unfortunately minefield discussion deprecating least deprecating instance created think real answers lie", "d": "1/2015"}, {"body": "dgeb take look items let us know fixed recent refactoring", "d": "1/2015"}, {"body": "nt support childcontainers one fixed two depend future refactoring remove internal extend", "d": "1/2015"}, {"body": "rwjblue stefanpenner confirm issue one addressed deliberately tried avoid changing internal behavior refactoring apis refactoring complete good time resolve", "d": "1/2015"}, {"body": "issue keyword scope hit local path lookup see sets initially inherit parent template scope case outer context helper called", "d": "1/2015"}, {"body": "sorry missed post pressed hi got similar issue trying make kind smart forms exactly problem wish could find way catch actions components maybe ca nt find idea component catch action without controller mediator example option example declare actions catches example still nt solve problem still property controller binded component connect least make controller less bloated", "d": "1/2015"}, {"body": "creating component would like use attribute named got depreciation notice ok use name needs goof something view", "d": "1/2015"}, {"body": "safe override viewcomponent subclasses viewcomponent nt proxy internalprivate property used track views current rendering state", "d": "1/2015"}, {"body": "rwjblue hum still get depreciation notice ok tried couple different ways seem called depreciation notice", "d": "1/2015"}, {"body": "ran bug spent time investigating today underlying issue adds array observer content depends things array proxy content items changed array proxy content changed results calls calls done first invoked result believe could fixed keeping meta information number running array observers skipping runs already ran try come example solution ideas please let know", "d": "1/2015"}, {"body": "forgot example setup without javascript var arrayproxy arrayproxyextend arrangedcontent embercomputed content function return thisget content create embera firstitem var wrapper emberarrayproxyextend content arrayproxy create run function arrayproxyset content embera newfirstitem setup invoke twice twice", "d": "1/2015"}, {"body": "stefanpenner application route actually good place go misses possibility inject stuff kinds entities like possible intializer far see di initializer without abusing course missing something", "d": "1/2015"}, {"body": "currently implementing url fragment behavior query parameters thanks work done far bump", "d": "1/2015"}, {"body": "sorry late response besides usual channel watching changelogs may include minor changes personally care github show branch tag commit lives example merged see landed stable release yet code actually scroll page though changes made allow sort code happen talked core members implementation still plan try add core meantime definitely use add code fairly straight forward simple cases somethine like totally untested find cycles work working example suggest plow ahead", "d": "1/2015"}, {"body": "wycats status addenumerableobserver still shows member emberarray started using enumerable observers months back issue came across post switch something else need", "d": "1/2015"}, {"body": "issue wasted several days development time user new ember starting test existing ember app absolutely idea promise nt resolving tests timed hint might causing problem horrible experience put sample code continuous redrawing views app unable run integration tests app jsbin illustrates problem", "d": "1/2015"}, {"body": "also bitten couple weeks ago additional documentation testing guide would helpful", "d": "1/2015"}, {"body": "stefanpenner seeing seems show production builds app via embercli seems like sort timing issue", "d": "1/2015"}, {"body": "ember currently running", "d": "1/2015"}, {"body": "fwiw old stackoverflow question shows issue jsbin showing error click one links top get error code throwing nt seem changed since release days fun fact enough points see op final solution posted deleted sad", "d": "1/2015"}, {"body": "investigation shows something apparently destroying top level view contains outlet next view added outlet still digging", "d": "1/2015"}, {"body": "issue funny one embercli moved inline creation ember app creating ember app output script file updated embercli nt remove inline app creation indexhtml applications running page", "d": "1/2015"}, {"body": "app use organizations array controller set index controller list organizations received want ui blocked data loading right way javascript model function thiscontrollerfor organizations set loadingdata true nt like setupcontroller called data loading", "d": "1/2015"}, {"body": "wagenet saying add observer like responsible calling controller torn lack documentation leaves huge possibility memory leaks suggest reopening issue according stack overflow thread requirement exist using guessing example require cleanup", "d": "1/2015"}, {"body": "aldendaniels required example provided", "d": "1/2015"}, {"body": "wagenet refactored fiddle like work reason console output tell array sort change reflected page effect reason workaround found set property new array e g nasty would prefer leaner way notifying property change please explain notifying property change nt work make work", "d": "1/2015"}, {"title": "hide stops event propagation", "body": "see explanation edit looks like changing css display property previous sibling target stops propagation calling empty target previous sibling effect", "num": "2049", "d": "1/2015"}, {"title": "fix event delegation selectornative", "body": "event delegation started using sizzle seed handling scoped matches broke event delegation selectornative replaced sizzle worse comes worse defer matchesselector eat scope issue", "num": "2048", "d": "1/2015"}, {"title": "simplification native method signatures", "body": "prime candidates moment third argument branch second argument branches see", "num": "2047", "d": "1/2015"}, {"title": "release remove npm publish tag beta nonpre releases", "body": "coming release changes", "num": "2046", "d": "1/2015"}, {"title": "release ensure version packagejson changed", "body": "coming release changes", "num": "2045", "d": "1/2015"}, {"title": "alias jqueryclone", "body": "hi make alias found already secret undocumented function used two times code easily modify think", "num": "2044", "d": "1/2015"}, {"title": "elemis visible calls native webkitmatchesselector", "body": "yesterday spent time profiling effect shown article live myelp page profiling interesting things two specific jquery called jquery handler seems slow one punt another ticket closer look stack method looking total stack accounts full time cpu including js recalc paint etc effect certainly trivial still strikes odd first place nt think would ever want native qsa matchesselector handle sort call would", "num": "2042", "d": "1/2015"}, {"title": "issue return sizzleattr", "body": "get issue return message error version line error idea", "num": "2040", "d": "1/2015"}, {"title": "feature request parse url querystring", "body": "sure alone dozens questions asking parse url querystring jquery lot answers nt accept multi valued keys keys without values eg end repeating code several projects think could included jquery core", "num": "2037", "d": "1/2015"}, {"title": "css minheight fails cssdisplayproperty set table", "body": "jqueryversion browser os modernie virtualmachine div want read minheight maxheight minwidth maxwidth cssstyleproperties css function jquery works well basicly define div table display table get reasonable values back anymore happens google chrome mac firefox mac safari mac problem example", "num": "2035", "d": "1/2015"}, {"title": "ajax type first parameter", "body": "another overloaded version ajax function ajax type url settings type post etc", "num": "2034", "d": "1/2015"}, {"title": "ajax load page fragment xhtml gives error doctypexml declaration", "body": "trying load page fragment xhtml document fails giving syntaxerror invalid illegal string specified least firefox happ ens latest versions happens xhtml document xml declaration doctype think regular html file doctype also fail removed xhtml fragment loaded correctly changing lines buildfragment function problem goes away fix works versions change tmpinnerhtml wrap elemreplace rxhtmltag wrap regex first removes processing instructions second doctype var rprocessinginstructions lt w gt gi var rdoctype gt gi tmpinnerhtml wrap elemreplace rxhtmltag replace rdoctype replace rprocessinginstructions wrap", "num": "2025", "d": "1/2015"}, {"title": "svg loaded file fadeout fadein loses properties", "body": "observed strange behaviour", "num": "2024", "d": "1/2015"}, {"title": "document references prs issues", "body": "referring github tickets prs use common gh notation github tickets prs want avoid using notatation entirely commits issues avoid confusion two trackers avoid github accidentally linking refs old tracker meeting week discussed using notation commits either use short notation full url ref", "num": "2019", "d": "1/2015"}, {"title": "remove singlepromiseable exception jquerywhen", "body": "single deferred passed promise object subset deferred methods returned consistency always create new master deferred follow library complicated needs result upcoming major version bump chance unify single multipleargument calls agree valuable", "num": "2018", "d": "1/2015"}, {"title": "webbased chat", "body": "btw guess github replacement jquerymeeting channel huh hipchat seems good many alternatives use gitter jsdelivr public amp private nice nice linking github amp markdown handy eats cpu though", "num": "2017", "d": "1/2015"}, {"title": "css vendor prefix error", "body": "css automaticly add vendor prefixes firstly call css function prefixes styles autoadding break run example safari", "num": "2015", "d": "1/2015"}, {"title": "descendant selector event handlers called unexpected order", "body": "according event handlers bound element called order bound however two event handlers bound element one bound descendant selector handler descendant selector always fires first regardless order bound example tested jquery", "num": "2014", "d": "1/2015"}, {"title": "progress nt fire resolved promises", "body": "suppose deferred object try set handlers progress objects works expected progress handlers fire try set progress handlers resolved deferred result different first handler fire problem tuples order tuple come last therefor newdefernotify called newdefer already resolved nt accept notifying bug similar slightly different", "num": "2013", "d": "1/2015"}, {"title": "evalurl nt contentsecuritypolicy csp compatible", "body": "using html html string contains script tag fetches script source xhr evals expect instead insert script tag dom let browser handle csp policy inserting script tag referencing js file works evaling source nt test case ran test case using chrome observed behavior jquery attempts eval source causes csp violation refused evaluate string javascript unsafeeval allowed source script following content security policy directive scriptsrc self noncefoo codejquerycom desired behavior script node source attribute inserted dom browser executes self allowed scriptsrc csp policy know possible script external src like script tag gets inserted instead xhreval thing presumably sameorigin policy wo nt allow xhr examplecom", "num": "2012", "d": "1/2015"}, {"title": "pipe nt forward progress alreadyresolved deferred", "body": "analogous cause solution new promise never sees progress called", "num": "2010", "d": "1/2015"}, {"title": "drop event dragevent well", "body": "fixed missed also per list complete looks like omission", "num": "2009", "d": "1/2015"}, {"title": "jquery selector find empty inputs working", "body": "affected jquery version code find empty inputs consider case form blank inputs input typetext value css bordercolor red found code working fine jquery seems work expected set border color empty inputs current behaviour fails find empty inputs", "num": "2008", "d": "1/2015"}, {"title": "jquery load ajax follow redirect crossdomain chrome", "body": "site hosted one domain write iis return redirect static content another domain something like wwwxxxcomindextxt redirect use jquery code like bodyload wwwxxxcomindextxt could redirect load properly firefox chrome", "num": "2007", "d": "1/2015"}, {"title": "add tests namespaced tags", "body": "like etc see discussion info cc", "num": "2006", "d": "1/2015"}, {"title": "improve tag name related regexes", "body": "see discussion related pull specifically comment", "num": "2005", "d": "1/2015"}, {"title": "fndata issue", "body": "typeerror thisfirequeryshared undefined logoevents data", "num": "2004", "d": "1/2015"}, {"title": "simplification manipulation wrappers", "body": "talking remove wrappers element effectively removing entirely remove wrappers since needed pr tomorrow", "num": "2002", "d": "1/2015"}, {"title": "resize event fired certain situations internet explorer", "body": "reproduce use internet explorer newer emulating multiple ie hacks etc used windows vmware unsure os matters open javascript console necessary bug occur demo uses consolelog show wrong clear cache view either test page large image page loading resize browser window text logged resize listener however ready ready lines printed surround call add resize listener confirm adding listener executed page assets fully loaded future resize events fire fine ones missed simply lost image finishes loading everything works expected plainhtml resize triggered conditions either think case jquery shimming spot needs demo links jquery jquery demo code", "num": "2001", "d": "1/2015"}, {"title": "simulate external servers nodejsjavascript instead php", "body": "allow us set tear server grunt track dependencies packagejson requires reimplementing php scripts probably hopefully also establishing mechanism communicating listening port qunit", "num": "1999", "d": "1/2015"}, {"title": "parsehtml return null", "body": "behaviour since version version like propose changing method documented taking string html returning array return null nonstring input fair empty strings probably return empty array maybe array empty text node", "num": "1997", "d": "1/2015"}, {"title": "nt test patch requests working browsers ie", "body": "browserstack frequent recurring problems patch requests working proxy since special logic request type browsers ie might well skip patch test browsers testswarm", "num": "1994", "d": "1/2015"}, {"title": "datauri append", "body": "test sometimes fails iosopera attach link next time see", "num": "1993", "d": "1/2015"}, {"title": "jquery ajax fire success origin non cors requests internet explorer", "body": "internet explorer issues load event xmlhttprequest jquery relies order call success callback workaround revert back listening onreadystatechange", "num": "1992", "d": "1/2015"}, {"title": "locking memoryless callbacks aborts current execution", "body": "note aborts active execution unless memory flag set arguably design seems purpose method preventing effects future interruption properly provided stoponfalse flag probably gone unnoticed lack use internal callbacks memory nonetheless would breaking fix called major version bump code assertion fails", "num": "1990", "d": "1/2015"}, {"title": "singlefire callbacks report initially locked", "body": "note flag breaks code assertion fails", "num": "1989", "d": "1/2015"}, {"title": "core issue creating dashdelimited nodes", "body": "jquery fails cases create dashdelimited notes javascript works fine creates element create element since documentcreateelement works fine documentcreateelement trd reported first", "num": "1987", "d": "1/2015"}, {"title": "support passing urldata object post get", "body": "spent yet another minutes helping someone debug issue generates post request foo reason course signature method correct signature problem accept things former format oh easy forget course jquery standard allow configuration objects places course make mistake difficult figure going still generate post request current page object object parameter making question sanity must spent days years debugging helping others debug feature request post get please support passing configuration object first parameter passing object least generate hint might going", "num": "1986", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "reason done stable releases", "d": "1/2015"}, {"body": "still", "d": "1/2015"}, {"body": "reason latest release newer latest beta user likes bleeding edge uses get latest release discussed ago added explicitly purpose", "d": "1/2015"}, {"body": "ah see missed conversation beta release guess fine case", "d": "1/2015"}, {"body": "would confusing two methods named different things new proposed method nt saving lot typing either unlike dom clone objects ca nt support magic might occur constructor copies properties call making clear since starting plain object", "d": "1/2015"}, {"body": "nt think two different things foreach dom collection foreach basic array think intuitive understand cloning dom elements cloning basic objectsarray agree best saving typing year coherence code think better read instead user cloning something also right constructor etc think nobody expect comportement example underscorejs thing", "d": "1/2015"}, {"body": "example great one fneach implemented using would case vs would clone different types objects different semantics case easily plugin like name", "d": "1/2015"}, {"body": "nt try parse selector js run native method native method throws exception try parsing way could know avoid would parse string would penalize people use standard selectors talks strongly recommend selectors besides jquery custom selectors take sizzle path rejected native methods also force layout dirty time easily trackable classes docs warn well", "d": "1/2015"}, {"body": "talks strongly recommend visible hidden selectors great wikipedia new visual editor tremendous amount app slowness directly attributable using baaad anyway moving native method throws exception try parsing see case obviously invalid selectors better even go patch bouncing exception follow total time column end matchesselector returning exception thing everytime overhead throw extra regex test along two going submillisecond timescale since already running two regex string overall vm overhead minimal", "d": "1/2015"}, {"body": "pull timmywil maybe could quick regex look obvious offenders discussing issue irc perhaps move things like really slow custom selectors jquery migrate course brings sizzle questions well", "d": "1/2015"}, {"body": "suggestion essentially match custom pseudos would save legitimate uses force false positives eg slow words net win however identifying trick given extension mechanism property assignment object containing matchers standard pseudos removing custom pseudos standard builds see core would mourn loss although last one essentially impossible add back without knowledge undocumented effects internals may also want look jquery ui", "d": "1/2015"}, {"body": "little surprised takes long webkitmatchesselector parse selector determine whether invalid wonder improved natively", "d": "1/2015"}, {"body": "please provide test case", "d": "1/2015"}, {"body": "thanks opening issue think best place start would jquery irc channel stackoverflowcom", "d": "1/2015"}, {"body": "ok timmywil thanks", "d": "1/2015"}, {"body": "maybe embedding something like argjs good idea", "d": "1/2015"}, {"body": "pretty simple plugin look size argjs definitely would nt want increase size jquery much something already solution available need", "d": "1/2015"}, {"body": "seems little hard never know url type url parameter leagacy jquery lt", "d": "1/2015"}, {"body": "zhanhb mean url version ajax obsolete", "d": "1/2015"}, {"body": "zhanhb type amp url strings settings object", "d": "1/2015"}, {"body": "first parameter url ajax url settings source code line main method ajax function url options", "d": "1/2015"}, {"body": "deprecated", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "reason add another signature nt simplify usage", "d": "1/2015"}, {"body": "provide complete example sounds like may attempting load complete document including doctype using read docs load warning related", "d": "1/2015"}, {"body": "uploaded test simple xhtml strict validated buttons load html load fragment simple html file validated load fragment works load html doctype load fragment html strict file validated load fragment fails load xhtml load fragment xhtml strict file validated load fragment fails looked docs linked nt saw warning", "d": "1/2015"}, {"body": "mentioned indirectly jquery uses browser innerhtml property parse retrieved document insert current document probably figure host xhtml document restrictive handle doctype markup afraid issue much edgecase us handle", "d": "1/2015"}, {"body": "warning state tags lost html title added document document wont loaded browser fail load fragment validated htmlxhtml documents still think fixed nt seem hard make valid htmlxhtml documents work well least", "d": "1/2015"}, {"body": "want load full xml document would nt load xml pick part document want inject trying inject whole thing", "d": "1/2015"}, {"body": "fawzibr warning state tags lost html title nt talk part meant jquery uses browser innerhtml dmethvin trying inject whole thing think expects work", "d": "1/2015"}, {"body": "oh well convinced browsers tend sloppy plain old html try make sense even clear decided choose xhtml document type expect sloppy parsing instead specific want happen test case seems want sloppy throw away anything inconvenient part thing browser unwilling throw away doctype wants jquery remove rest sloppy", "d": "1/2015"}, {"body": "jquery html dom library stuff happens work svg main goal harm long nt use jquery manipulate svg alone difficult two mixed single document see wo nt fix page said diagnose problem fix simple enough would consider", "d": "1/2015"}, {"body": "sure thing read wo nt fix actually easy fix code animate opacity worries thank instant reply", "d": "1/2015"}, {"body": "line items issue closed acting notification sounds good", "d": "1/2015"}, {"body": "linking tickets gh issues discussions like cleanliness notation although link markdown trac links commits lean towards full urls since unambiguous really sure write agree others see happen harder break rules whether read", "d": "1/2015"}, {"body": "agree makes sense create new deferred rather borrow first one good well", "d": "1/2015"}, {"body": "read correctly reusing original object ensuring always resolves array currently idempotent meaning resolve string matter number calls making less complicated needs would mean would become forget using handling inputs may may deferredpromise would effectively change change mean obfuscatecomplicate resolve value process actual solution another utility would used arrays explicitly", "d": "1/2015"}, {"body": "want accept kind thenable standard promise think want handle case create new always creating new one seems like best way go consistency predictability think changing array case would lot visible breaking separate api might best way document confusion people trying call array", "d": "1/2015"}, {"body": "want accept kind thenable standard promise think want handle thenable case create new deferred always creating new one seems like best way go consistency predictability perfectly right", "d": "1/2015"}, {"body": "fact double request shame sounds like agreement always creating new deferred bit correctly identified jaubourg going halfcocked yet another inconsistency api currently idempotent single arguments multipleargument case behaves entirely differently incongruity chafing moment resolve string matter number calls making less complicated needs would mean would become forget using handling inputs may may deferredpromise would effectively change change mean obfuscatecomplicate resolve value process let stop mixing cast operation operation nt even know primary function though ticket implicitly assumes latter suggestion another utility would used arrays explicitly implicitly assumes former maybe ca nt even stop could certainly pave way providing distinct functions eg", "d": "1/2015"}, {"body": "currently idempotent single arguments multipleargument case behaves entirely differently incongruity chafing moment wikipedia idempotence property certain operations mathematics computer science applied multiple times without changing result beyond initial application case point js var output outputdone function b c amp amp b amp amp c output done function b c amp amp b amp amp c pretty consistent ask nt idempotent would following nt think desirable lot people want toy arrays deferreds confusing say let create whatever wan na call let stop mixing cast operation operation nt even know primary function arguments treated exactly like returned values handler js string done function string string string mirrors resolveddeferredthen function return string done function string string string var deferred deferred resolve string deferred done function string string string mirrors var deferred deferred resolve string resolveddeferredthen function return deferred done function string string string fact manner speaking behaves like handler would return multiple values hence give multiple resolution arguments nt really get confusion consistent", "d": "1/2015"}, {"body": "going die hill resolved keep current interfaces analogous analogous update description covers eliminating reuse single input deferred", "d": "1/2015"}, {"body": "nah one time exceptional nt really intention meeting think still like irc also nice docs community infrastructure irc", "d": "1/2015"}, {"body": "thanks opening issue wo nt moving away irc anytime soon thoroughly integrated every jquery project", "d": "1/2015"}, {"body": "yes trying safari via browserstack agree failing problem seems explicitly set vendorprefixed property style safari starts responding property totally bizarre someone else verify see happening well nt know something fix reason nt let us prefixes", "d": "1/2015"}, {"body": "bug caused find neither original style property prefixed one return original one saved line linked first setter checks first since safari recognizes neither saved later try set something cached maps obviously wo nt work fix", "d": "1/2015"}, {"body": "expected behavior term one bound descendant selector means delegated event order stop propagation delegated event delegation point handlers descendants must run directly bound events element think delegated event bound selector point case conceptually event handled bubbling think way event order seems clear suggestions clarify documentation could open issue suggested wording docs repo", "d": "1/2015"}, {"body": "think dup let make final call would say may work near future make strictly promisea compatible need use deferredspecific methods nt decided best practice would good expect standard behavior standard names", "d": "1/2015"}, {"body": "extremely similar quite duplicate homm would like submit pr code new tests straightforward", "d": "1/2015"}, {"body": "thanks report fixed need wait jquery meantime could check make sure works fine scenario closing reopen still nt work", "d": "1/2015"}, {"body": "jquerygit nt work difference inline script used instead eval ie used", "d": "1/2015"}, {"body": "actually ticket would fix plan land big breaking change right run scripts synchronously come domain sure effect might world", "d": "1/2015"}, {"body": "wrote code probably hopelessly naive break something else makes work patch diff git asrcmanipulationevalurljs bsrcmanipulationevalurljs index asrcmanipulationevalurljs bsrcmanipulationevalurljs define function jquery jqueryevalurl function url return jqueryajax url url type get datatype script cache true async false global false throws true var documentcreateelement script ssrc url documentbodyappendchild return jqueryevalurl", "d": "1/2015"}, {"body": "ah right dmethvin guess stay closed since already", "d": "1/2015"}, {"body": "think track yeah", "d": "1/2015"}, {"body": "sounds like trying use selector get current property rather attribute lacking example guess please ask help stackoverflow", "d": "1/2015"}, {"body": "thanks dave attention scenario want select inputs value want achieve using selector way find elements version code working yes want check current value instead value attribute thing working gives inputs whose current value empty", "d": "1/2015"}, {"body": "code actually broken value property represents current value value attribute try instead", "d": "1/2015"}, {"body": "sounds like version chrome use could create jsfiddle example even try native xhr", "d": "1/2015"}, {"body": "used chrome like said fix think related fail xml", "d": "1/2015"}, {"body": "could please provide code example", "d": "1/2015"}, {"body": "leonardobraga interested providing fix", "d": "1/2015"}, {"body": "marklog yes definitely work pr asap", "d": "1/2015"}, {"body": "please ask help forums stack overflow also seem issue firequery plugin jquery", "d": "1/2015"}, {"body": "would definitely like see done", "d": "1/2015"}, {"body": "plainhtml resize triggered conditions either case jquery detect simulate event pretty rare case perhaps workaround app desperately needs would use timer check size window manually trigger event", "d": "1/2015"}, {"body": "given reported case nt think something work around core", "d": "1/2015"}, {"body": "complication testswarm requires ability execute tests previous commit current one otherwise would done long time ago krinkle info", "d": "1/2015"}, {"body": "move away testswarm suggested infra team browserstacktunnel karma candidates replacement requires good amount time least karma preference", "d": "1/2015"}, {"body": "intern looks like option well", "d": "1/2015"}, {"body": "intern offers qunit support impression framework cc csnover", "d": "1/2015"}, {"body": "could certainly load qunit wanted heard people dumping mocha kind inception since comes quite robust unit testing builtin actually got mostlyworking branch full qunit api compatible interface small amount work address todos probably day two work able drop existing qunit tests intern wrapping work fingers crossed convince team qunit come amp help get cool new stuff intern quickly well prior recent qunit release slightly outdated easy update since could see qunit update adding features intern already easy map", "d": "1/2015"}, {"body": "brain dump assumption dynamic server would autostarted grunt uses automatic port choosing order run concurrently services computer eg projects developers run locally well concurrent builds jenkins alternatively block migrating travis ci port clash andor pick unique ports git branch git repo long testswarm used unless okay ajax tests running testswarm ca nt entry points automatically served common installations apache nginx hence php used server set grunt wo nt exist time testswarm distributes test urls browserstack test urls point notsostatic static web server serving build artefacts jenkins jobs upto days unique subdirectories htmljscss php served nginx also reran testswarm point future within days even remove rerun feature testswarm qunit would still know hostname port server url would publicly exposed browserstack though course would nt issue using ssh tunnel browserstack sure feasible current testswarmbrowserstack setup", "d": "1/2015"}, {"body": "purposes ci generally opposed local development testswarm particular imagine still use stable servers buildsjenkinsjquerycomjquery build urls defer gruntmanaged nodejs servers dynamic responses many ways skin cat one example inbound request build url php handler verifies corresponding port known spawns build checks output little discover suitable failure handling perhaps kill spawned process respond php gets responses forwarding request port suitable failuretoconnect handling perhaps decrement available tries replay original request grunt task leverages gruntcontribconnect possibly also nodeproperlockfile something like js connect alreadyrunning server listening port specified runfile tryconnecting function tryconnecting try port fsreadfilesync runfile req port port invalid function consolelog server running port port catch err trystarting err function trystarting err consolewarn errmessage lock runfile use lockfilelock runfile consider existing locks stale seconds stale", "d": "1/2015"}, {"body": "since summoned already seeing replies would also point dojo core jsgi server mock services set intern test suite need much work could take code adapt use used thing jquery php test scripts used testing dojo io code services directory", "d": "1/2015"}, {"body": "testcase", "d": "1/2015"}, {"body": "like empty array idea would behavior parsing natively nt affect", "d": "1/2015"}, {"body": "empty textnode would inconsistent browser behaviour empty array seems like nice solution", "d": "1/2015"}, {"body": "related", "d": "1/2015"}, {"body": "fixed", "d": "1/2015"}, {"body": "one example", "d": "1/2015"}, {"body": "safari seems fail lot", "d": "1/2015"}, {"body": "ca nt seems repo could try fate propose fly blind increase timeout", "d": "1/2015"}, {"body": "ca nt reproduce locally happens time time testswarm seems require enough large sample enough us hit since test much try increasing timeout see happens nt like control test fully", "d": "1/2015"}, {"body": "nt like control test fully yeah cc dmethvin", "d": "1/2015"}, {"body": "commited moment gon na close fix verified", "d": "1/2015"}, {"body": "seems timeout increase help committing", "d": "1/2015"}, {"body": "cc jaubourg", "d": "1/2015"}, {"body": "judging conversation ticket issue hard reproduce also ca nt see problem could please post link jquerycode shows bug", "d": "1/2015"}, {"body": "definitely want repro solution rare case requires going back polling easiest solution would use jquery compat case local file access via xhr example", "d": "1/2015"}, {"body": "looks like issue websites use protection mechanism overrides xml internet explorer identifies internet explorer later sorry mess", "d": "1/2015"}, {"body": "would page valid html tag name since hyphen considered custom element custom elements part web components characters could used tag name custom elements described xml specification like also included class fully support custom elements need add tests names characters discussion could deferred let dmethvin answer apart looks like real usecase real bug two problems particular case first regexp second one one commit mentioned ticket would resolve case even fails check still works since nt feel need wrap special parent tag would like send us pr", "d": "1/2015"}, {"body": "would like send us pr preferable two commits one core one manipulation module nt forget read feeling", "d": "1/2015"}, {"body": "thanks instructions yes like submit pr clear fair issue initially reported patched gkalpak angularjs repo happened bumped time tried share load", "d": "1/2015"}, {"body": "even clear fair elaijuh first reported angularjs repo submitted pr angularjs richardaday leonardobraga glad sharing load since familiar jquery contributing conventions smiley seems like whole lot people involved onecharacter addition laughing cool", "d": "1/2015"}, {"body": "cool see thanks helping", "d": "1/2015"}, {"body": "know version going included sorry familiar jquery release process", "d": "1/2015"}, {"body": "know version going included", "d": "1/2015"}, {"body": "frustrating", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "ah dreaded post pretty easy recognize agreement warning help people nt already made mistake times", "d": "1/2015"}, {"body": "really wish nt shortcut methods make things worse pretend nt exist also use stubs code ensure called going start checking args runtime spewing console warnings period take look code shortcut methods see much code takes make accept object much could consider", "d": "1/2015"}, {"body": "get argument existing usually wrap ajax facade really point long stuff exists people keep using incorrectly wasting many hours debugging accident take saying pr considered", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "yes sure include unit tests also stop annoying guys", "d": "1/2015"}, {"body": "stop", "d": "1/2015"}, {"body": "provide timeline need pr next week able land next version also need updates docs get post adding new signature seems like several people want see happen hope pitch docs pr probably get need docs entry", "d": "1/2015"}, {"body": "yeah trying ca nt seem get async tests passing reliably always get failing tests needing constantly restart php asking around jquerydev seems like people issues well suppose guys aware testing infrastructure mess recommendation workflow type thing", "d": "1/2015"}, {"body": "gmauer either ignore errors need create full setup proper apache serwer builtin php one limitations sometimes hit edge cases setup links readme project automating elegant solution would switch server running node may require lot effort judging many php tests may happen soon", "d": "1/2015"}, {"body": "togakangaroo close random tests failing go ahead pull request wish test infra robust people get mocking tricky parts ajax particular ca nt mocked often need test workarounds obscure xhr bugs like", "d": "1/2015"}, {"body": "togakangaroo yeah builtin php web server little underpowered apache amp nginx work well official jquery docs recommend installing lmw amp development computer personally using vagrant vm nginx mzgol switching node server would awesome ticket", "d": "1/2015"}, {"body": "mzgol switching node server would awesome ticket nt believe nt really discussed seriously due effort needed", "d": "1/2015"}, {"body": "created", "d": "1/2015"}, {"body": "think difficulty getting environment running jquery development absolutely stopper people contributing saying following order complain hopefully help team see pain points could addressed also complain bit mostly js net developer working windows done php ages ago know linux basics far comfortzone installing php run tests annoying enough install figure apache setup definitely would given moment hours pr ultimately changes two lines code coincidentally catching right people irc way would known special incantation even ajax module getting frequent nondeterministic test failures ultimately comment tests able test specific feature addition found read source lot testing infrastructure clear use things like parameter next fan build tools building jquery breeze however testing testing matter starting php one terminal another terminal directing browser right page figuring options necessary get right files load use unminified example would seem like grunt least start server open right page correct configurations run tests headless browser fullon also note still nt able get documentation vm running attempt api vm get error need xmlsoft windows means installing virtually unknown piece software even chocolatey package manager maintained single developer machine run work vms something comfortable working setting vm inside try deploy vagrant vm running issues vagrant vm wo nt finish starting debug order continue realize house cards would seem order enable contributions people php space also happen know use nodegrunt significant amount effort could justified even solution package single vm tools necessary develop jquery built", "d": "1/2015"}, {"body": "togakangaroo develop windows try installing wamp", "d": "1/2015"}, {"body": "togakangaroo thank writing getting started stable setup hard part hazed hope stay around continue contribute maybe even help us solve issues definitely think process harder since need actually test bunch real browsers never easy make things worse need real server talk send back specific requests test browser fixes ajax patches inside jquery sometimes even configuration web server becomes issue issues moving tests apache nginx past work windows well wamp definitely way go along msysgit share troubles docs vm well moment nt working setup either put together untested suggestions docs pull request take rest way", "d": "1/2015"}, {"body": "simplifying test setup discussed", "d": "1/2015"}, {"body": "spec changed see makes sure decision jump ship implement support selectors available one browser would nt like need support obsolete versions api made something like available need support", "d": "1/2015"}, {"body": "fixed merge latest sizzle", "d": "1/2015"}, {"body": "dmethvin yes working using text insteand html makes sense think still issue usng html nt behavior browsers nt remember exactly try digg issue", "d": "1/2015"}, {"body": "devantoine saying set inside script tag html seems wrong nt usually script nonhtml content inside script tag even htmllike would nt want parsed placed tag nt think need ensure works consistently across browsers document used", "d": "1/2015"}, {"body": "dmethvin right seems good", "d": "1/2015"}, {"body": "moved", "d": "1/2015"}, {"body": "back sorry guys confusions nothing uglifier using webview ipad uses file uri scheme reading jquery docs says type data expecting back server none specified jquery try infer based mime type response mime type response file uri scheme hence problem", "d": "1/2015"}, {"body": "patch fixes dragstart drag dragend dragover dragenter dragleave however fix drop event admit regexpert adjustment fixes", "d": "1/2015"}, {"body": "gtristan thanks note new issue created", "d": "1/2015"}, {"body": "nt fixed", "d": "1/2015"}, {"body": "ref", "d": "1/2015"}, {"body": "markelog recall issues encountered problem maybe remembering wrong", "d": "1/2015"}, {"body": "long time ago bit busy today refresh memory tomorrow", "d": "1/2015"}, {"body": "talking breaking changes nt look like one special behavior exactly nt understand related references creation recall markelog trying remove early days jquery involve probably thinking according spec always present true implementation autoinserted table created html serialization declared html property regardless content present created dom methods used otherwise improperly render according spec could ommited autoinserted table tags modern browsers create html serialization empty table behave according specification specific content dommethods created regardless content even opera ff behave way creation nessary empty table statically created property used basically ca nt use node environments longer use directly tables even true method codepath could safely removed", "d": "1/2015"}, {"body": "tbody creation nessary empty table statically created innerhtml property used basically ca nt use innerhtml node environments bit info", "d": "1/2015"}, {"body": "worth noting selectors api spec explicitly mentions support xhtml well html note script operates dom works independently syntax used create document thus script also work correctly equivalent table created wellformed xhtml instead html dynamically created inserted document using dom apis sure browser coverage though seem remember long ago using style attributes js fine strict xhtml running compatibility problems real problem elements generated jquery xhtml host document generated pretty sure change little detecting namespace switching generated elements anything going significant amount work going testing", "d": "1/2015"}, {"body": "assign clear list unassigned issues need wait npm changes anyway", "d": "1/2015"}, {"body": "done using npm", "d": "1/2015"}, {"body": "javascript elemcreateshadowroot var rect elemgetboundingclientrect disconnected hidden rectheight amp amp rectwidth return box box rect else make sure disconnected dom node jquerycontains docelem elem return box box elemgetboundingclientrect another way fix issue method need traversation tree detect element disconnected nothing disconnected nodes returns always zeroes also returns zeroes hidden elements element hidden disconnected return zeroes visible tree anywhere tree return real box one problem hidden elements jquery currently returns box disconnected elements returns always know artifact useful someone uses probably might break compatibility anyway leave alternative solution", "d": "1/2015"}, {"body": "also far see tests behavior think method break compatibility even drop condition execute always first part", "d": "1/2015"}, {"body": "possible could use something like solution nekr proposes docs offset specifically say nt work hidden elements", "d": "1/2015"}, {"body": "dmethvin case code simplified", "d": "1/2015"}, {"body": "think point missing ever simple nazarpc indicates case check whether disconnected dom node exist first place workaround browsers longer needed optimisation step prevent needless call potentially expensive function former sure latter think performance", "d": "1/2015"}, {"body": "thanks phpstorm integrates git found code started", "d": "1/2015"}, {"body": "question becomes bug still affect browsers supported jquery seems like fairly decent solution offset sure whether solution would work issues reported working elements shadow dom though would ostensibly function uses jquerycontains method filtering disconnected nodes think", "d": "1/2015"}, {"body": "actually ticket nazarpc references seems indicate trying support return value topleft disconnected elements change preserve", "d": "1/2015"}, {"body": "anything uses native functions work fine like without redundant check work even faster need check usages every particular case determine whether need many cases might replaced native dmethvin gives really big overhead handle disconnected nodes especially shadowdom support maybe performance consideration number elements dom tree shadowdom might much bigger drop support edge case opinion worth especially new major version also break wellwritten code something wrong getting offset disconnected node", "d": "1/2015"}, {"body": "also break wellwritten code something wrong getting offset disconnected node agree completely problem people write bad code time sometimes accident cases like quietly return values make seem like everything okay would preferred ticket closed getting offset element document update docs state valid possible though code depends zero return values concerned opinions", "d": "1/2015"}, {"body": "api perspective best behavior would throw offset meaningless eg truly disconnected elements nonelements documentation perspective best behavior would exclude elements range valid input case return value unspecified allowed crossversioncrossbranch inconsistent good anything else perfectly content nekr proposal provided nt introduce inconsistency handling shadow dom elements edit added examples meaningless input", "d": "1/2015"}, {"body": "well guys chromium native support shadowdom stuff guess outputs clientrect height width left bottom right firefox nightly guess output domrect x width height top right bottom left need check anything already gives correct zeros problem comes used returning value disconnected nodes independently whether inside shadowdom likely browser need call whatever else finally pretty straightforward sure nt way beginning think", "d": "1/2015"}, {"body": "moreover check falsy mdn states called document makes sense call cases check redundant", "d": "1/2015"}, {"body": "dmethvin wrote actually ticket nazarpc references seems indicate trying support return value topleft disconnected elements change preserve ticket removes scroll positions disconnected nodes hidden nodes use getboundingclientrect also remove scroll positions hidden nodes seems correct hidden elements always zeroes nazarpc wrote well guys chromium native support shadowdom stuff guess get comment mean attached visible nodes always returns zeroes strange chrome works correctly summarize work shadowdom expect match nodes shadowdom work expected least chrome returns zeroes top left bottom right hidden disconnected element regardless node shadow light dom nazarpc wrote problem comes var docelem elemownerdocumentdocumentelement used returning value undefined disconnected nodes independently whether inside shadowdom likely browser need call contains whatever else finally works nice way sure disconnected nodes really disconnected anyone test", "d": "1/2015"}, {"body": "get comment mean attached visible nodes always returns zeroes strange chrome works correctly example next line see returns zeros disconnected node anyone test jquery support old browser meant compat version", "d": "1/2015"}, {"body": "example next line see returns zeros disconnected node oh yes overlooked sorry exactly proposed use without traversing dom tree works jquery support old browser meant compat version really know version talk seems like versions broken shadowdom fixed wrong please correct", "d": "1/2015"}, {"body": "apiwise jquery jquery compat difference browsers support odd one course want api work consistent results latest chrome site using either branch definitely needs experimenting done calling disconnected element throws error sure whether tree climb expensive trycatch wrapper really dislike trycatch though", "d": "1/2015"}, {"body": "honestly prefer throwing error instead returning inaccurate could abandon disconnected elements excluded valid input", "d": "1/2015"}, {"body": "making small steps resolve issue branch fork github already showed download soon winxp virtual machine test things find correct solution mean time tests fails without changes screenshot errors ok errors honestly prefer throwing error instead returning inaccurate top left could abandon disconnected elements excluded valid input hmm think might broke compatibility since jquery never throwed errors", "d": "1/2015"}, {"body": "unfortunately run tests even checkout compat branch tested case property exists even disconnected nodes may see use condition uses useragent shadowdom excludes older browsers called disconnected nodes questions make pull request right need discuss merged compat branch fix compat branch merging course write tests need tests shadowdom disconnectedhidden elements make sure always return top left rect", "d": "1/2015"}, {"body": "hmm think might broke compatibility since jquery never throwed errors nt violate currentlydocumented api already includes jquery support getting offset coordinates hidden elements even case backwardsincompatible changes allowed upcoming major version bump nt like conflation unrelated behaviors make pull request right need discuss please make pull request discussion take place merged compat branch fix compat branch merging general guideline separate pr required solution looks sufficiently different two branches cherrypick impractical ticket one enough course write tests need tests shadowdom disconnectedhidden elements make sure always return top left rect depends whether want guarantee return values limit new tests shadow dom", "d": "1/2015"}, {"body": "tests shadowdom fork", "d": "1/2015"}, {"body": "nt violate currentlydocumented api already includes jquery support getting offset coordinates hidden elements even case backwardsincompatible changes allowed upcoming major version bump ok problem wondered possible problems think much problem probably ok answers pr", "d": "1/2015"}, {"body": "hmm nt think necessary deferred simply hard dependency coreready deferred removed custom build coreready could easily add gruntfile making custom builds usually also accustomed placing scripts end body making coreready wasted space maybe docs issue instead", "d": "1/2015"}, {"body": "pretty important api nt think go away someone nt want also thought still cases putting scripts end body nt enough think might remember case", "d": "1/2015"}, {"body": "used think conversation ago turned sufficient also deferred important api used internally areas besides coreready coreready probably least important", "d": "1/2015"}, {"body": "think limitation large document probably prefer start downloading script immediately still defer browser download parse dom parallel case doc ready still play role case script loads document ready think script loaders often covered", "d": "1/2015"}, {"body": "ah conversation thinking overlaps nt remember finding evidence putting scripts end body would nt work", "d": "1/2015"}, {"body": "know think already gone side sorry brain dump notifications could useful users question handle lack native promise certain environments", "d": "1/2015"}, {"body": "recently used divide support tests two parts one nt require attaching anything document invoked start one invoked doc ready therefore use jquery earlier aka latest run code doc ready risk stumbling upon bugs one linked timmywil thread second part support tests lazy elements attached documentdocumentelement happen anytime attached documentbody results documentbody exists fine put scripts end body bothers depend coreready consume via amd get deferred pulled automatically requirejs later builder course determined relying coreready longer necessary importance fact decreases thinking exclude defered coreready youre required provide windowpromise approach blow people using amd modules use ajax animate deferred use coreready micha\u0142 go\u0142\u0119biowski", "d": "1/2015"}, {"body": "think reasonable focus dependency reduction master compat deferred missing something simple like convert would nt need maintain queue browser maintain fifo order handlers throw exceptions nt affect subsequent ones moment undocumented stated intention document thenable specifically consistency behavior edge cases think best use deferred docs tell anyone custom build without need provide shim", "d": "1/2015"}, {"body": "would nt break usage event occurred", "d": "1/2015"}, {"body": "current ready module already plumbing handle although might complicated", "d": "1/2015"}, {"body": "closing lack information anyone thinks jqueryrelated jqueryfixable please post info", "d": "1/2015"}, {"body": "split separate issues tackle", "d": "1/2015"}, {"body": "documentation element said positioned css position attribute relative absolute fixed least method behave means would behaviour change code sizespeed issue worried well make offsetparent always climb tree element ignore dom offsetparent property need look nonnone transform webkittransform property method climb tree probably special cases anticipated plus appears open issues spec looks like nobodies decided sounds horrible possible dirty workaround perf byte size hit since spec incomplete stuck code logic nt want whereas fix user side sounds like pretty easy thing add transform node although understand might easy least always crucial third party libraries use jquery like library semantic ui need determine correct offsetparent using contexts library use algorithm offsetparent search although given proposed logic hard call method since would deviate spec significantly", "d": "1/2015"}, {"body": "practical use know getting calculate values relative local coordinate system means anyone using expecting return element offsets calculated transformed parent element present currently returning value practical use developers jquery became quite ubiquitous good returning conforming values era browsers implemented specs way even though spec undecided certainly already implemented implementations vary browser try solve", "d": "1/2015"}, {"body": "call make discussion subject sure reiterate concerns spec nt ready might stack code nt want support spec nt account transformation properties related properties explicitly disregard transformation properties huge impact performance relatively big hit byte size less edge case easy fix user side errorprone implementation bzbarsky maybe could consult us correctly interpret spec would advise us go", "d": "1/2015"}, {"body": "talking massive changes untested pseudocode would imagine implemented javascript offsetparent function return thismap function var parentnode thisparentnode traversing properties much slower made test case uses levels deep nesting actually performs better machine granted actual implementation would property lookup step still seems negligible actually getting useful value back offsetparent", "d": "1/2015"}, {"body": "well yes course imagine dom tree elements deep root element others property set user would like know offsetparent still called deepest element tree current code one loop iteration code loop iteration every single parent would access css twice even could considered worst case scenario still pretty bad", "d": "1/2015"}, {"body": "markelog correct builtin offsetparentoffsetleftoffsetright affected transforms spec implementations problem generally pretty insane terms offsetparent eg compare interaction interaction pretty much block container break face subpixel layout problem highdpi displays subpixel things happen time weird stuff elements upshot browsers spec writers basically treating legacy properties nt changed way response transforms whatnot well really clear sort thing would even mean world transforms ideal world people would move away apis things like getboundingclientrectgetclientrects sort api get rects one element relative another element various proposals ca nt locate moment think advice would expose apis along lines tell people use ideally map directly browser builtin apis modern browsers", "d": "1/2015"}, {"body": "bzbarsky seem good company suggestion think difficult regards ui everything comes setting two values positioning set correctly context browser positioning context likely returned sometimes pity nt better way limited primitive positioning system css left us certainty context without bit digging javascript", "d": "1/2015"}, {"body": "hello workaround similar", "d": "1/2015"}, {"body": "problem seems obscure enough would nt attempt fix inside jquery microsoft much responsive recently introducing fixes slipstream updates nt reported directly microsoft via", "d": "1/2015"}, {"body": "miketaylr ca nt believe nt ping ca nt find existing ticket looks like firefox bug see fiddles", "d": "1/2015"}, {"body": "changes land would good time circle back see need change anything", "d": "1/2015"}, {"body": "closing ticket workaround within jquery core fixes problem focus event asynchronous ie anticipated handled application widget level see also trac", "d": "1/2015"}, {"body": "updated version current second param analogouous jqueryparsehtml js globaleval function code context context context document var script contextcreateelement script scripttext code contextheadappendchild script parentnoderemovechild script", "d": "1/2015"}, {"body": "rather leaving open potentially forever referenced roadmap reopen ever become feasible", "d": "1/2015"}, {"body": "cc rwaldron", "d": "1/2015"}, {"body": "markelog following nt activity lately", "d": "1/2015"}, {"body": "grab alright rick", "d": "1/2015"}, {"body": "timmywil sure nt much work tbh mostly deleting code paths associated tests tricky part making sure manipulation tests pass well since data tests exist also", "d": "1/2015"}, {"body": "related", "d": "1/2015"}, {"body": "trac issue referred github", "d": "1/2015"}, {"body": "resolve get bug selectornative", "d": "1/2015"}, {"body": "small problem render multiple html elements inside document node easiest way test literally make document html nodes load second way make standard html document javascript create second one memory remove original dom append new html node dom append old one render really comes lt recognizes element html css selector gt html nt valid", "d": "1/2015"}, {"body": "sorry festercluck following comment related get height body", "d": "1/2015"}, {"body": "document amp html reference point thing document nt height documentelement html node window amp body without doubt independent unfortunate thing actually makes two separate question becomes one code standard use code accuracy situations lt report different numbers numbers reporting accurate problem developer nt understand css sizing parent element nt exist say op test case one mean point understanding browsers insert node documentelement window behavior supported", "d": "1/2015"}, {"body": "unless regression apis returning values years change values returned cases probably trip existing code expects current values suspect right barring recent regression drop browser", "d": "1/2015"}, {"body": "think issue lost sufficient animus warrant leaving open", "d": "1/2015"}, {"body": "notes realizeddiscovered thinking ticket implementation write somewhere although object easily set petkaantonov describes individual event must attached via call method low level want work properly methods like cloning events new element removing listeners caller set native jquery needs maintain bookkeeping information inside object actually possible attach two handlers per event type one possible value complicates bookkeeping like use interface foundation existing event layer need define hooks called object methods like manage jquery handlers", "d": "1/2015"}, {"body": "related pr", "d": "1/2015"}, {"body": "since using eval inline scripts landing ticket longer applies", "d": "1/2015"}, {"body": "dmethvin sum idea leave asis add scroll bar width although think scottgonzalez still makes good case", "d": "1/2015"}, {"body": "actually read comment looks like okay scottgonzalez clarify agree possible break code somewhere hand ca nt think would nice expose way get dimension", "d": "1/2015"}, {"body": "related trac ticket moved github", "d": "1/2015"}, {"body": "please consider executing handler deferred one thing every promise always defer execution handlers always log hello world promise implementation jquery hand log either hello world world hello sometimes based whether promise resolved called steady source bugs developers rely order exposed race conditions think fixing mistake next major revision jquery could really help lot developers help prevent race condition related bugs", "d": "1/2015"}, {"body": "benjamingr changes bring promisea run test suite sure landing soon", "d": "1/2015"}, {"body": "dmethvin landing jquery would awesome means also address correctly huge answer promise questions stackoverflow pretty often bringing standard would help ton people think got confused issue date migrated", "d": "1/2015"}, {"body": "means also address correctly mean turn exceptions rejections rather allowing uncaught yes although working report reasonably visible way related issue opened easy programming errors lost see problem people start working promises imagine someone drops promiseheavy piece code web page written third party problem wo nt know working visible errors", "d": "1/2015"}, {"body": "bluebird pretty good job detecting unhandled rejections simple heuristic promises nt add catch handler next turn recently made survey people use bluebird hook lets determine library thinks rejection vast majority people stick default behavior log error console developer see example note bluebird track rejections stitches stack traces wraps primitives implicitly logging much bigger api etc different important considerations jquery file size might want implement debugging stuff bluebird honestly compliance huge compliance unhandled rejection handling crossing line good news interoperability able use jquery main promise implementation frontend project", "d": "1/2015"}, {"body": "fyi good amount tooling native promises asynchronous callstacks already available dedicated promises panel coming soon think worth considering using native promise impl falling back deferred code older browsers developers would end enjoyable debugging experience", "d": "1/2015"}, {"body": "removing functionality use internally native promise nt extensions goal provide standard promisea behavior implement native promise shim someone wants native promise decent debugging supported platforms want use definitely instead platforms like android die people want crossbrowser behavior use someone better plan please let us know", "d": "1/2015"}, {"body": "paulirish nonnative promise hook tooling", "d": "1/2015"}, {"body": "dmethvin guess paulirish meant use native promises available enhanceextend methods interpreted right would create two codepaths would increase size performance might suffer judging although sure matters browser envs preserve consistency routes understand reason us consider improve debug process", "d": "1/2015"}, {"body": "markelog native promises really slow still likely much much faster jquery promises least today", "d": "1/2015"}, {"body": "markelog native promises really slow still likely much much faster jquery promises pretty sure accurate currently fastest promises since nt guarantee async execution therefore nt wait next event loop iteration", "d": "1/2015"}, {"body": "markelog think might want run benchmarks fun glory also run bluebird sync zalgo build guarantee async operation bluebird petkaantonov actually wrote sync build prove performance benefits guaranteeing async execution marginal best trick instead something native like using every time want create async behavior queue pending async executions together batch next turn gnerally pretty sure bluebird least two orders magnitude faster jquery deferreds moment native promises using microtask queue probably least one order magnitude faster jquery feel free benchmark", "d": "1/2015"}, {"body": "think might want run benchmarks since imp compatable promisea need trick instead something native like using settimeout every time want create async behavior queue pending async executions together batch next turn popular trick used many promises libs still need wait next iteration gnerally pretty sure bluebird least two orders magnitude faster jquery deferreds moment see conclusion argument lead native promises using microtask queue probably least one order magnitude faster jquery would talk microtasks vs macrotasks would relevant doenst require non code nt require async execution always faster alternative feel free benchmark besides points made nt really fair compare async vs sync execution since one inherently faster", "d": "1/2015"}, {"body": "markelog try clearer point bluebird promises run circles around jquery defererds day even jquery uses sync zalgo execution model thankfully fixed bluebird promises consume less memory jquery deferred using flags less state variables closures trivial microbenchmark async execution involved bluebird defers jquery performs nothing asynhronous typical load completely synchronous code bluebird performs times faster jquery kind benchmark sync execution supposed shine nothing actually asynchronous worth even disable async deferral bluebird marginally faster", "d": "1/2015"}, {"body": "main focus interop per topic someone perf issues wants use bluebird native promise really like native promise nt think people use monolithic jquery file would appreciate weight two implementations order use solve problem decently platforms support way back android", "d": "1/2015"}, {"body": "nothing actually asynchronous tests force benchmarkjs execute tests async manner ie putting call therefore make jquery test report later really nt want argue implementation change bluebird reputation crazy optimizations considered one fastest promisea impl nt understand trying prove", "d": "1/2015"}, {"body": "btw worth even disable async deferral bluebird marginally faster nt benchmarkjs could nt give exact ops number async tests diff fall margin error type thing", "d": "1/2015"}, {"body": "dmethvin sorry helping derail conversation oleg understood going yes would require feature detect forked codepath yay jquery would likely end adding code complexity boo think jquery position kind thing mixed past users miss debugging help tools understand trivial handle otherwise markelog benjamingr carried conversation promises performance would love feedback", "d": "1/2015"}, {"body": "nt think likely get time release strictly tied release", "d": "1/2015"}]