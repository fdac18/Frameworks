[{"title": "split doc react repository", "body": "want request feature report bug feature current behavior documentation tightly coupled react repository expected behavior many pros keep doc repo git clone react discovered project huge lead much slower cloned forked docs folder size git folder docs think want src folder also project like vue webpack split doc repository", "num": "9079", "d": "2/2017"}, {"title": "react perf scenarios", "body": "wanted write perf scenarios think might important incrementalfiber avoiding unscheduled work unscheduled work synchronous easily lead dropped frames synchronous work setstate componentdidmountupdate causing synchronous work lifecycles lot work rather minimal work schedule follow work event handlers processing handler rather deferring work component ric starvation hit starvation deadline expiration time something gone wrong nt able idle cycles reasons much work done animations leaves us little time idle might react animations js animations css animations even gifs much work done main thread parallelism better utilized worker eg video processing etc high priority updates happen high tree end rerendering whole tree enough shouldcomponentupdatepurecomponents high priority updates nt bail cause whole tree rerender high priority updates touch small part tree enough shouldcomponentupdatepurecomponents ca nt reuse enough work safely resume tree causing resumes rerender everything something causing new trees get dropped resumed probably bad fiber heuristic keep started tree throw away", "num": "9075", "d": "2/2017"}, {"title": "fiber dom reviving dom walking seems blocked reactfiberreconciler api", "body": "discussion sebmarkbage fiber client renderer revive serverrendered dom started dip toe seeing hard would implement first thought implementation use crawl existing dom elementbyelement comparing existing dom elements arguments would look something like parts simplified js createinstance type props todo actual check make sure markup correct probably little complicated conditional currentdomelement amp amp currentdomelementtype type amp amp compareprops currentdomelement props current dom element document reused return currentdomelement else todo warn markup mismatch const newelement newelement elementindocumenttoreplace currentdomelement return newelement appendchild parent child child elementindocumenttoreplace need patch dom tree markup mismatch parentreplacechild child child elementindocumenttoreplace else childparentnode null either ssr markup tree descendant node needed patched parentappendchild child else instance already correctly document ssr call appendchild noop seems fairly straightforward one big problem ca nt figure good way figure unfortunately nt take argument identifying parent instance far tell way determine tree call looked using currently used pass ancestors tree fairly certain nt good enough get access current dom node though method generates host context particular node nt receive parent instance parent host context type one truly silly way solve current api defer creation dom instances know tree instance supposed solution would return element metadata type amp props instance instead real dom element make decision whether use existing markup make new dom element information need tree strikes pretty bad solution though since whole point two calls least understand calls multiple frames calls synchronously one frame idea would put work frame would kind defeat point fiber knowledge fiber codebase minimal best could totally wrong think signature may need change support dom revival client took parent instance closest preceding sibling instance arguments problem would solved sure solutions thoughts", "num": "9072", "d": "2/2017"}, {"title": "fiber investigation internals direct dependencies stack modules", "body": "research following modules react codebase form direct dependency react stack module ideally want move away form using internal module requires use public api requires possible reacttestutils pr already open resolve lelandrichardson spicyj says renderers one test makes use directly move inline within test spicyj says one tests internals nt test anything observable originally added part minor perf improvement deleted renderers reactdom test suite uses spicyj says test added old devtools relied important break dan rewrote integration fiber devtools nt need test fine delete two tests require stack modules spicyj says tests rewritten terms public apis revisit ssr working spicyj says single whitespace test spicyj says let rewrite one terms public apis though probably move reactdomcomponenttest let ensure initial render updates work properly since historically used different codepaths might also diverge future renderers reactdom ssr revisit ssr working spicyj says renderers reactart couple stack modules required art spicyj says need worry delete delete stack bvaughn says renderers native spicyj says need worry delete delete stack bvaughn says scripts refactor use public api instead spicyj says nt really public api reflecting oninspecting react trees script almost bookmarklet need rewrite top fiber want use nt super important okay leave using stack modules work stack someone wants use upgrades fiber", "num": "9069", "d": "2/2017"}, {"title": "reactproptypes nt handle undefined well", "body": "example shows sometimes make typo mistake eg enter result pic abovethis make us confused sometimes spend us minutes find typo first check code first see error oh god nt use error says func check finally find typo react treat check think friendly doc mentionmaybe could improved", "num": "9068", "d": "2/2017"}, {"title": "feature setstate defer render apply new state immediately", "body": "want request feature report bug feature resolves bug current behavior call defers internal update thus trying access return set react batching algorithm assume setup like constructor props super props thisstate tabs focusedtab null opennewtab path thissetstate extend thisstate tabs thisstatetabs path thisfocustab path focustab path since react nt actually update yet got updated calling function get overwritten value still old one thissetstate extend thisstate focusedtab path expected behavior react batch let change take effect immediately way code would introduce unexpected behavior versions react browser os affected issue work previous versions react latest version na", "num": "9066", "d": "2/2017"}, {"title": "documentation epub format", "body": "hello way get react documentation epub format thanks", "num": "9065", "d": "2/2017"}, {"title": "opened mistake", "body": "", "num": "9062", "d": "2/2017"}, {"title": "rfc distribute files react", "body": "rfc regarding distributing typedef files react would generally useful possibly useful extract reactjs definitions flow especially rendererimplementers would especially nice renderer implementers manually extracted minimal required react renderer possible solutions ensure works generates files packages add custom step build tooling include public renderer type def public package minimal typedef package receives file", "num": "9061", "d": "2/2017"}, {"title": "reacttransitiongroup rendering single child", "body": "want request feature report bug bug current behavior rendering single child documentation coders encouraged pass prop like truthy js function firstchild props const childrenarray reactchildrentoarray propschildren return childrenarray null null however passed eg js var reacttransitiongroup reactaddonstransitiongroup var hello reactcreateclass render function return reactdomrender documentgetelementbyid container following console error thrown current behavior bug please provide steps reproduce possible minimal demo problem via similar see open console expected behavior error thrown passed prop nothing render versions react browser os affected issue work previous versions react latest version react chrome macos unsure previous versions presumably also broken", "num": "9056", "d": "2/2017"}, {"title": "possible remove ref key children props", "body": "currently extracting refkey props propskeypropsref compiled js lanuages scalajs bukclescriptreasonml ca nt use native classes props currently wrapping inside js literal inline elements use native classes props fails component childrenref point view props component props ref key children placed different location", "num": "9052", "d": "2/2017"}, {"title": "disabling destroying event target stops event propagation", "body": "disabling submit button within form stops event propagation forms handler fiddle import react react class someform extends reactcomponent constructor props super props thisstate disabled false handleclick thissetstate disabled true consolelog clicked button handlesubmit e alert submitted form render let opts optsdisabled thisstatedisabled disabling button stops event propagation reactdomrender documentgetelementbyid jsbin live example expected behavior event gets propagated unless explicitly swallowed via react version browser chrome unfortunately tell happens older versions", "num": "9046", "d": "2/2017"}, {"title": "change warning suggest empty array rather empty string", "body": "want request feature report bug bug current behavior setting value gt deselect currently selected option current behavior bug please provide steps reproduce possible minimal demo problem via similar template jsfiddle expected behavior rendering value set empty string expect selection rendered select box mainly expectation comes react warning use instead fiddle change line get behavior expect versions react browser os affected issue work previous versions react gotten react whichever version used fiddle nt know worked previous versions tested using chrome os x", "num": "9038", "d": "2/2017"}, {"title": "error performupdateifnecessary unexpected batch number react reactdom", "body": "spun closed request reproducible testcases filed separate issues testcase filed failed still failing node version npm version git clone git githubcomwkingperformupdateifnecessarybuggit bug cd bug npm install npm install performupdateifnecessarybug tmpbug react fbjs corejs isomorphicfetch nodefetch encoding iconvlite isstream whatwgfetch promise asap setimmediate uaparserjs looseenvify jstokens objectassign reactdom reactscripts npm test consoleerror warning performupdateifnecessary unexpected batch number current pending fail srcbugtestjs duplicate requests loaded nodes duplicate requests loaded nodes local calls code really much code example p may bugs catches deeper stack direct dependencies seems like issue facebookmaintained repository possibly one dependencies case facebookmaintained dependency may need bumped", "num": "9037", "d": "2/2017"}, {"title": "plans release build package", "body": "hi plans release release build package latest release done previous releases could nt see releases page thanks k", "num": "9036", "d": "2/2017"}, {"title": "doc function component maybe needs review", "body": "doc describtion mount function mount element var type elementtype typeof type function userdefined components return mountcomposite element else typeof type string platformspecific components return mounthost element component like call somewhere call function handles elements composite type example handles function mountcomposite element var type elementtype var props elementprops var renderedelement isclass type component class var publicinstance new type props set props publicinstanceprops props call lifecycle necessary publicinstancecomponentwillmount publicinstancecomponentwillmount renderedelement publicinstancerender else typeof type function component function renderedelement type props recursive eventually reach bottom recursion element host eg rather composite eg return mount renderedelement call type functionthis makes consider react nt instance function component call receive returned valuebut see src code reactcompositecomponentjs shows react create instance named wrong please let knowif think add tips", "num": "9035", "d": "2/2017"}, {"title": "dom rendered componentdidupdate", "body": "understanding componentdidupdate called component rerendered however take code facebook react tutorial add functions class game codepen sleep milliseconds let start new date gettime let lt new date gettime start gt milliseconds break componentdidupdate thissleep takes seconds every click react update page instead updating dom sleep seconds expected behavior need function triggers page updated use", "num": "9033", "d": "2/2017"}, {"title": "licence clarification", "body": "question regarding licence faqs additional patent grant facebook bsdpatents license terminate sue facebook something patent infringement right facebook infringes patent mine sue facebook lose right use react would mean move applications another technology", "num": "9030", "d": "2/2017"}, {"title": "provide mechanism marking react type identified html", "body": "would helpful analysis debugging especially unfamiliar code base able identify components looking html instance datareacttype foo might nice formalize", "num": "9029", "d": "2/2017"}, {"title": "npm test failed reacttestrenderertestjs", "body": "want request feature report bug want request bug current behavior cloning react installing dependencies ran npm test found one test suites failed current behavior bug please provide steps reproduce possible minimal demo problem via similar template run command npm test expected behavior fail srcrendererstestingtestsreacttestrenderertestjs test suite failed run find module prettyformat reacttestrenderertestjs versions react browser os affected issue work previous versions react", "num": "9025", "d": "2/2017"}, {"title": "unexpected behavior wrapped handlers", "body": "want request feature report bug bug current behavior code snippet make one input follow react expression user changes field manually accomplished wrapping reach component ideally property work including handlers specifically intended let follow value regular element element wrapped component changed react synthetic event expected desired created sent handlers however followed element changed component triggered afaik regular nonsynthetic object current behavior bug please provide steps reproduce possible minimal demo problem via similar template events written console open take look expected behavior component handler receives react synthetic event versions react browser os affected issue work previous versions react react chrome macos", "num": "9024", "d": "2/2017"}, {"title": "eventpreventdefault click handler prevent onchange called", "body": "want request feature report bug bug current behavior rendering element type handler still called even though called handler current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior calling handler prevent default action occurring undo effect update value element stop event listener invoked see expected behavior versions react browser os affected issue work previous versions react tested using build master macos verified chrome firefox safari calls event listener cases", "num": "9023", "d": "2/2017"}, {"title": "doubleclickclick event firing", "body": "hello trying generate doubleclick documentgetelementbyid id ondoubleclick success tried onclick beside working fine without react idea working thank", "num": "9022", "d": "2/2017"}, {"title": "load data constructor", "body": "reading docs componentdidmount recommended load data method itit runs well still question load data earlier like ps maybe fault search much related docs issues plz point mei appreciate", "num": "9021", "d": "2/2017"}, {"title": "good way shallow compare element", "body": "good way shallow compare two elements two variables want shallow compare value like jsx let myfunc gt alert let let b let c iselementswallowequal b return true iselementswallowequal c return false reactcreateelementchildrenpropsreact provide function job thank", "num": "9020", "d": "2/2017"}, {"title": "feature best error tracking react special props errors", "body": "currently using react error displayed console warning li prop trying access result returned need access value within child component pass different prop printwarning warning warnaboutaccessingkey dehydrate dehydrate anonymous flushbufferslice flushbufferwhileidle ca nt track easily component trigger error binary search code find", "num": "9016", "d": "2/2017"}, {"title": "question forceupdate", "body": "hello new user react use make webapp creating cssbased animations div shows preview animation adding div certain classes node problem animations must timed correctly sync adding new div react feature smart dom update found way must update node containing animated divs tried use forceupdate seems nt use correct way nt find enough information method would glad someone could help", "num": "9012", "d": "2/2017"}, {"title": "key property svg elements causes warning", "body": "want request feature report bug bug current behavior use property svg elements line text circle see current behavior bug please provide steps reproduce possible minimal demo problem via similar template ca nt reproduce jsfiddle tried fresh project created expected behavior warnings versions react browser os affected issue work previous versions react project created react version macos chrome", "num": "9011", "d": "2/2017"}, {"title": "perf doc printoperations image update", "body": "misunderstood please let know apologize clear describe want request feature report bug maybe bug current behavior look perf doc saw field print printoperations function different doc image image printoperations print owner gt node operation payload flush index owner component id dom component id current behavior bug please provide steps reproduce possible minimal demo problem via similar template doc expected behavior would awesome change image sync printoperation print explain new fields versions react browser os affected issue work previous versions react doc thanks", "num": "9008", "d": "2/2017"}, {"title": "bug read property remove undefined simpleeventpluginjs", "body": "sorry reported could find issues section getting error unable replicate error occuring also stackoverflow link issue also using let know need details thanks", "num": "9007", "d": "2/2017"}, {"title": "reactcsstransitiongroup animated component removed dom", "body": "want request feature report bug bug current behavior reacttransitiongroup used like also compare versions react browser os affected issue react safari ios native android browser android codepen", "num": "9001", "d": "2/2017"}, {"title": "bring back jsx gotchas doc", "body": "following document useful however seems disappeared entirely replacement ca nt find anywhere current documentation explains react escapes html passed default trying explain someone today right seems like something know section custom html attributes seems useful", "num": "8998", "d": "2/2017"}, {"title": "react seems skip rendering semicolon inline styles", "body": "want request feature report bug bug current behavior ssr get warning using inline styles sure browser adding semicolon react skipping server expected behavior get warning markup client server match versions react browser os affected issue work previous versions react chrome linux firefox linux", "num": "8986", "d": "2/2017"}, {"title": "add new typechecking rule class inherit", "body": "sure possible necessary got trouble please see example code javascript class grandpa extends reactcomponent class parent extends grandpa class childone extends parent class childtwo extends parent class childthree extends parent class testcomponent extends reactcomponent render const customcomponent thispropscomponent return testcomponentproptypes component reactproptypesclassinheritof parent component reactproptypesclassinheritof grandpa class main extends reactcomponent render return add common function class component passed inherit classes component work correctly tested correct necessary add rule", "num": "8983", "d": "2/2017"}, {"title": "setstate errors", "body": "hey guys im new react wanted know setstate always gives uncaught promise typeerror read property setstate undefined code", "num": "8980", "d": "2/2017"}, {"title": "disabled attribute ignored div role button onclick clicked", "body": "using aria rolebutton div elements disabled times disabled attribute ignored react onclick event triggered created fiddle illustrating issue expect onclick would triggered elements disabled true especially role button using react jsfiddle", "num": "8977", "d": "2/2017"}, {"title": "react error reporting bugsnag", "body": "good guide connecting react bugsnag solution error reporting appreciate good example one thanks", "num": "8972", "d": "2/2017"}, {"title": "onchange firing controlled input element updated", "body": "found appears bug bug controlled element changes updating value nt called reproduction made codepen illustrates problem expected behaviour expect gets called since change world react nature much controlled written docs also mentioned various threads problem fact inputs function gets called problem need logic validation inputs changed comments tried using also nt get called either", "num": "8971", "d": "2/2017"}, {"title": "onchange oninput unlike dom", "body": "confusing normally change event called enter key field changed input used changes put events thing practical", "num": "8969", "d": "2/2017"}, {"title": "chrome breaks touch events", "body": "want request feature report bug bug current behavior react attaches events node causes latest version chrome issue following warning appears chrome treats document level touch events passive current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior allowed means react pass adding event listeners versions react browser os affected issue work previous versions react react chrome windows", "num": "8968", "d": "2/2017"}, {"title": "transitiongroup throws warnings component unmounted", "body": "react every time create animations using transitiongroup get errors change page animation still running", "num": "8966", "d": "2/2017"}, {"title": "inline border style rendering correctly", "body": "want request feature report bug reporting bug certain changes inline border styles nt updated correctly dom current behavior incorrect rendering current behavior bug please provide steps reproduce possible minimal demo problem via similar template changing inline style div results borderrightcolor undefined ie black rather green expected behavior rendering div inline style give border regardless border style set previous render versions react browser os affected issue work previous versions react tested latest versions chrome firefox safari unaware working properly previous versions react sure", "num": "8957", "d": "2/2017"}, {"title": "proposal fire event send data component", "body": "proposal fire event send data component create events lib const events events listeners init name state callback thisevents name state callback getstate name return thisevents name state addlistener name callback thislisteners name thislisteners name push callback else thislisteners name callback emit name state let key state thisevents name state key state key windowevents events lib easy call event component example header section export default class header extends reactcomponent constructor super thisstate title eventsinit headertitle title state gt thissetstate title statetitle easy call headertitle event send title easy listener component headertitle event use lib project reactjs easy without complex", "num": "8956", "d": "2/2017"}, {"title": "improve proptype warning mention received prop type", "body": "warning include actual type detected invalid something like", "num": "8955", "d": "2/2017"}, {"title": "rename proptypesfunc proptypesfunction deprecate proptypesfunc", "body": "want request feature report bug bug inconsistent naming leads poor user experience developers current behavior using proptypesfunction proptypes object react class produces warning error read property isrequired undefined must use proptypesfunc every time typing proptypes look whether func function sometimes makes wonder object obj none proptypes names truncated poor user experience current behavior bug please provide steps reproduce possible minimal demo problem via similar template myreactclassproptypes somefunction proptypesfunctionisrequired expected behavior works errors warnings versions react browser os affected issue work previous versions react previous", "num": "8951", "d": "2/2017"}, {"title": "confusion setting state almost developers data mutation bad need proof", "body": "want request feature report bug current behavior setstate behaviour current behavior bug please provide steps reproduce possible minimal demo problem via similar template bug raising issue among developers may create bugs expected behavior explanation versions react browser os affected issue work previous versions react latest version simple example setting initial state constructor setstate questions display none later updating like var questions thisstatequestions questions display block thissetstate questions questions approach bad bad anybody explain examples approach take lead ugly codes", "num": "8947", "d": "2/2017"}, {"title": "dynamic rendering react component", "body": "case list component names left side window sign click sign component get displayed list like click order component render following order", "num": "8944", "d": "2/2017"}, {"title": "clear button ios date input return correct event value", "body": "bug ios pressing date input event fired showing original value rather empty string current behavior chrome android clear button pressed onchange event value ios clear button pressed onchange event value demo try chromeandroid ios expected behavior value returned empty string versions affects react amp ios unsure previous versions", "num": "8938", "d": "2/2017"}, {"title": "docs tutorial mention getdomnode", "body": "current live docs contain following incorrect example according big change making release exposing refs dom components dom node means looked ref react dom component realized useful thing call thisrefsgiraffegetdomnode get underlying dom node starting release thisrefsgiraffe actual dom node perhaps example changed tried click edit github link top tutorial got thing could think open issue hope helps thanks heart", "num": "8935", "d": "2/2017"}, {"title": "slow performance react code", "body": "function gets passed renderednodes array contains nodes supposed rendered time node added removed function gets called parent desc const node childnodes childnodes node data renderednodesincludes parent desc const rendered recursiverender renderobj childnodes node childnodes node renderednodes id removeorrendernode arr arrconcat rendered else renderobj childnodes node groupedby employeename base else base problem render kind slow advice may case", "num": "8933", "d": "2/2017"}, {"title": "setstate nt call render testing react components", "body": "first case using ref function holds rendered instance taking action const rendercomponent element callback gt reactdomrender element const mydiv documentcreateelement div rendercomponent mydiv instance gt spyon instance render andcallthrough testutilssimulateclick mydivqueryselector call setstate expect instancerender tohavebeencalledtimes throws error render nt called since rendering called asynchronously guess second case without using ref deprecated const rendercomponent element callback gt const instance reactdomrender element callback instance const mydiv documentcreateelement div rendercomponent mydiv instance gt spyon instance render andcallthrough testutilssimulateclick mydivqueryselector call setstate expect instancerender tohavebeencalledtimes works since rendering called right away issue necessary batch rendering first case presented way disable batching react useful testing matters", "num": "8932", "d": "2/2017"}, {"title": "use highresolution time measuring performance reactperf", "body": "reactperf could give submillisecond precision using new performance api seems pretty well supported", "num": "8929", "d": "2/2017"}, {"title": "missing property props getting respective defaultprops property ref instead copy correct", "body": "want request feature report bug bug undocumented behavior props defaultprops understanding defaultprops could wrong current behavior props readonly nonprimitive object value supplied parents props missing value expected make copy respective defaultprops value instead hold ref defaultprops minimal demo problem link self explanatory expected behavior props readonly props missing value expected make copy respective defaultprops value value supplied parents versions react browser os affected issue work previous versions react latest version reactjs", "num": "8925", "d": "2/2017"}, {"title": "child array need unique key", "body": "note keys const welcomeuser thisstateexistingcookieusername amp amp welcome thisstateexistingcookieusername please log return want request feature report bug current behavior pass around array jsx without unnecessary keys current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior react nt care put keys elements versions react browser os affected issue work previous versions react latest", "num": "8920", "d": "2/2017"}, {"title": "problems click events ie edge", "body": "would like point specific behaviour using react ie edge building usercomputer chat application users presented prompts navigate user journey one steps user enters street namepostcode presented list addresses choose therefore step text input field user submits disappears list addresses appear example two ways submitting one clicking send button hitting enter keyboard user uses mouse submission everything ok browsers however user presses keyboard key click events work expected ie edge assumption problem comes field focus deleted dom ca nt sure make things stranger could reproduce issue putting addresses list two nested div elements display flex set styles link fiddle expected value entered input enter pressed send clicked would expect list addresses provided clickable actual value entered end send clicked mouse events list items tracked value entered enter pressed events list ca nt tracked using react ie edge", "num": "8912", "d": "2/2017"}, {"title": "pasteoncapture triggers dom event bubbling phase", "body": "want request feature report bug bug current behavior setting handler react provides two choices cases dom eventcurrenttarget document reasonable given react delegate behavior works aka bubbling cases current behavior bug please provide steps reproduce possible minimal demo problem via similar expected behavior expected fires dom event capture phase needed able manipulate paste handler properly playing focus games edge versions react browser os affected issue work previous versions react latest version react affects least chrome edge suspect browseros independent", "num": "8909", "d": "2/2017"}, {"body": "assume mean rather", "d": "2/2017"}, {"body": "think api would require us add additional fields fiber type nt ideal although seen problem come contexts commit phase insert dom node traverse parents find nearest dom ancestor siblings solve one probably solve", "d": "2/2017"}, {"body": "rendercommit phase distinction seems like harder bit", "d": "2/2017"}, {"body": "assume mean createinstance rather createelement argh right fixed original post thanks", "d": "2/2017"}, {"body": "added comments inline summary looks good assuming nt miss anything couple tests need rewritten expect pass gate fiber enabled since anything nt implemented mind rewriting sending pr", "d": "2/2017"}, {"body": "solved setstate form takes updater function updaters guaranteed receive fresh state enqueue several form chain would expect way never need manually merge state existing state already points documented", "d": "2/2017"}, {"body": "thank response works expected sake clarity two ways updating state serve different purposes way never need manually merge state existing state setstate already nt aware mentioned culprit bad file produced squiggly red lines definition file installed using repo always uptodate speaking plans official definition file react special thank great contribution", "d": "2/2017"}, {"body": "two ways updating state object updater function serve different purposes updater overload added later use cases like however using simple updates nt depend previous state verbose might find different api later point yes definition seems wrong tried using guide help", "d": "2/2017"}, {"body": "thank much god interwebz highly doubt left unturned", "d": "2/2017"}, {"body": "adobe extension chrome lets convert web page pdf pdf epub unless writes scriptbot job instead highly doubt likely reading date docs", "d": "2/2017"}, {"body": "benoitmaudet extension wink directly converts web page epub shipit", "d": "2/2017"}, {"body": "another extension", "d": "2/2017"}, {"body": "thanks suggestions neeksandhu danielizquierdo recommend reading docs website since partially interactive need epubpdfmobiwhatever take markdown source convert hope helps", "d": "2/2017"}, {"body": "believe duplicate", "d": "2/2017"}, {"body": "ah thanks aweary looked issue flow repo updating description hit publish prematurely", "d": "2/2017"}, {"body": "note process deprecated recommended upgrade path switching reacttransitiongroup maintained community suggest file issue instead unlikely changes made addon", "d": "2/2017"}, {"body": "inline elements refs make compiler add ensure consistently correct types eg anything like children converted property validated keys guarantee keys correctly applied compile children property native class", "d": "2/2017"}, {"body": "sebmarkbage thanks info regarding children scala var ireactcreateelement x x man var typeof jsx type constructor props props key ref null typeof greactelementtype type constructor props props key ref null var constructor x even though valid keys inner array still getting warning need ignore warning", "d": "2/2017"}, {"body": "issue react form submit active elements active submit elements sure browser specific specific recreate run following pure html js test place cursor text field press enter alert message shown change repeat steps error message shown order work around add small delay marking field disabled thus changing order events executing edit example jsbincom", "d": "2/2017"}, {"body": "issue react agree happening chrome safari works correctly ie edge firefox tested macos windows form submit active elements active submit elements nt quite agree statement see updated jsbin example tl dr withwithout active difference point want make around expectations consistent behavior crossbrowser using react layer top virtualdom syntetic events crossbrowser compatibility problem ages still need ways achieve consistent behavior library", "d": "2/2017"}, {"body": "nt quite agree statement see updated jsbin example tl dr withwithout active difference point input allow try submit form pressing enter means submitting form pressing button please check example explained happening believe browser implementation specific question react try standardize fix behavior break things fact chrome submit form element currently please confirm running provided jsbin event flow application user clicks button lets call action action leads onclick handler firing state updated lifecycle fired thus changing input disabled response action browser tries submit form button child element browser implementation detects form active element discards submit action please see updated copy jsbin working example uses settimeout push setstate call next execution tick gets around issue", "d": "2/2017"}, {"body": "think equivalent html version look like disable submit button submit var button documentqueryselector button var form documentqueryselector form buttonaddeventlistener click function e disabling submit button would prevent chrome submitting form try submit handler instead ensure form submitted etargetdisabled true consolelog clicked formaddeventlistener submit function e epreventdefault consolelog submitted try disable submit button inside submit handlerthis ensures form submitted browsers", "d": "2/2017"}, {"body": "opinion iswas intended behavior empty string valid option value also least earlier browsers support option selected means browsers controlled input would broken would option selected visually user value would still changed browsers support way set value would good idea yes", "d": "2/2017"}, {"body": "syranide thanks pointing nt aware browsers handle sort thing say still true change request issue make work want revise misleading consider using empty string error message", "d": "2/2017"}, {"body": "example passed result code throws throwing inside callback breaks react getting inconsistent state producing cryptic errors think consistent said see cryptic error like always means earlier error component code causes react break need scroll console find original error error component code throwing breaks react react support throwing errors user code eg lifecycle methods callbacks etc breaks react current version causes cryptic errors future versions fully unmount tree result also provide way catch errors components case want show custom error message hope helps", "d": "2/2017"}, {"body": "tue feb dan abramov wrote throwing inside callback breaks supported throw errors user code eg lifecycle methods callbacks etc probably worth documenting grepping error throw nt turn hits future versions fully unmount tree result also provide way catch errors components case want show custom error message way catch handle errors thrown callbacks nice certainly nicer writing callback code never throws errors", "d": "2/2017"}, {"body": "probably worth documenting feel free send pr honestly think nt worth effort right since changing anyway next release grepping error throw nt turn hits sad status quo ui libraries uncaught errors randomly break libraries really unique react fixing", "d": "2/2017"}, {"body": "wed feb dan abramov wrote probably worth documenting feel free send pr filed honestly think nt worth effort right since changing anyway next release nt take long write easy clobber docs new method", "d": "2/2017"}, {"body": "hey nesmalltown code implementation details doc pseudocode correspond react actually handles elements meant describe highlevel approach react takes makes consider react nt instance function component call receive returned valuebut see src code reactcompositecomponentjs shows react create instance named statelesscomponent implementation detail makes easier consistent composite components handled internally wrap return value functional component far public api goes stateless functional components instances pseudocode mostly conceptually accurate let know recommendations making clearer hope helps", "d": "2/2017"}, {"body": "aweary thanks replyi think maybe add tips mounting components note chapternow content really pseudocode nt similar real implementation also cause stack overflow nt discussed stop recursion would better like really pseudocode nt similar real implementation also cause stack overflow nt discussed stop recursion hand nt means react nt create instance function component read statelesscomponent wrap return value functional component details whole sections listed pseudocode implementation details huge may discrepant sorry ca nt describe whole codebase integrated accurateso doubt please present issue happy discuss thought hope helpful", "d": "2/2017"}, {"body": "aweary hello nt describle clear please let know", "d": "2/2017"}, {"body": "gaearon dan aweary nt reply comments nt know appropriate send prplease let know thanks lot", "d": "2/2017"}, {"body": "nesmalltown sorry nt able respond nt work react full time sometimes work gets way would say nt want specific actual differences pseudocode actual implementation whether actually instantiate functional components one many differences might confusing note single difference always free open pr proposed docs changes whole team review decide best course action", "d": "2/2017"}, {"body": "aweary thanks reply sorry bother younow get thanks", "d": "2/2017"}, {"body": "expected behavior called rendering dom yielding browser browser new dom yet rendered new viewport talks async versions well solution defer somehow etc", "d": "2/2017"}, {"body": "thanks would nice something like works", "d": "2/2017"}, {"body": "says choose sue fb infringing patents first fb may sue back infringing patents return whether lose right use react result determined court found helpful explanations lawyer give legal advice though need help please contact concerns cheers", "d": "2/2017"}, {"body": "tried chrome react devtools extension", "d": "2/2017"}, {"body": "seems nt installedcan see directory", "d": "2/2017"}, {"body": "checked module installed directory tried install get error suggestion fix", "d": "2/2017"}, {"body": "closing issue initial error got fixed", "d": "2/2017"}, {"body": "misunderstood please let know apologize clear describe bug maybe closure event variable react component lifecycle first react event work clear speculate take look code saw javascript componentwillreceiveprops nextprops thisstatedofollow thissetstate value nextpropsfollow try deliver app component handlechange function scope event variable call throw error think every hook react component lifecycle also variable try demo also print native dom event thanks", "d": "2/2017"}, {"body": "actually available dom event handler called see", "d": "2/2017"}, {"body": "event created response handler even called call plugin trying figure value checkbox change yes queue event uses functionality compare previous value next value make decision take directly dom like problem value temporarily true point first click correct incorrect next click checkbox event longer fired values incorrect incorrect overall problem seems react asking dom value node preventdefault could called thanks karelskopek mintaffee help digging", "d": "2/2017"}, {"body": "hi first link react working fine osbrowser version using", "d": "2/2017"}, {"body": "succeed generate ondoubleclick documentgetelementbyid id ondoubleclick without clicking mouse using xubuntu firefox try also nightly version", "d": "2/2017"}, {"body": "hey thanks report reason example nt work react nt attach event listeners directly element single event listener using capturing implement synthetic event system means event handler attached element wanted force event handler called could call pass another component via invoked another point must generate actual event would call instance see jsfiddle working example hope helps", "d": "2/2017"}, {"body": "ahh misread", "d": "2/2017"}, {"body": "take look", "d": "2/2017"}, {"body": "hey hopelyn technically could load data docs say recommend using likely wo nt see noticeable difference loading earlier lifecylce method complicates things ever serverside rendering also use issue tracker bug reports feature requests support usage question recommend using one many communities oriented around stackoverflow reactiflux discussreactjsorg hope helps", "d": "2/2017"}, {"body": "tryingtoimprove aweary thanks lot", "d": "2/2017"}, {"body": "mean one shallowcompare innerused exposed", "d": "2/2017"}, {"body": "need functionality product code test considered enzyme shallow rendering", "d": "2/2017"}, {"body": "zjuasmn expand use case want shallowly compare two react elements testing finnigantime recommendation enzyme good one trying compare elements update typically would compare instead element case use issue tracker bug reports feature requests support usage question recommend using one many communities oriented around stackoverflow reactiflux discussreactjsorg hope helps", "d": "2/2017"}, {"body": "coming components accidental mistake introduced react devtools update react devtools latest version disappear", "d": "2/2017"}, {"body": "updated extension works thanks gaearon", "d": "2/2017"}, {"body": "sorry disruption", "d": "2/2017"}, {"body": "viorelrj view forceupdate skip shouldcomponentupdate react offical docs", "d": "2/2017"}, {"body": "hey viorelrj welcome community issue tracker meant bug reports feature requests recommend asking one various community platforms oriented around support reactiflux discussreactjsorg stackoverflow hope helps", "d": "2/2017"}, {"body": "kind issue piece code simple following produces kind warning whether", "d": "2/2017"}, {"body": "nseptier provide full runnable example code rather single method", "d": "2/2017"}, {"body": "skuridin appreciate could understand probably simple please provide complete code snippet reproduces issue", "d": "2/2017"}, {"body": "ca nt reproduce reinstalling nodemodules", "d": "2/2017"}, {"body": "unable reproduce jsbin", "d": "2/2017"}, {"body": "oops actually comes react devtools update pushed", "d": "2/2017"}, {"body": "fixed upload update chrome extension soon take hour two get published thanks reporting", "d": "2/2017"}, {"body": "thanks reporting details may change later feel free send pr accurate picture", "d": "2/2017"}, {"body": "thanks gaearon glad take stab replace picture", "d": "2/2017"}, {"body": "honest entirely sure worth others outdated said change", "d": "2/2017"}, {"body": "said release new perf doc soon", "d": "2/2017"}, {"body": "hey tarundugar thanks report order us help really need small test case reproduces issue investigate also pretty old release possible bugs resolved newer releases test latest release see reproduce issue", "d": "2/2017"}, {"body": "aweary able replicate issue solve issue mentioned stackoverflow link question trying access passed parent component undefined render function hierarchy parentcomponent render childcomponent render thispropsdataget something leads error stated question let know need details also chrome thanks", "d": "2/2017"}, {"body": "thanks update tarundugar case nt seem bug react go ahead close", "d": "2/2017"}, {"body": "thanks filing issue would like ask file instead intend deprecate transitiongroup favor repository maintaining cheers", "d": "2/2017"}, {"body": "thank helping creating potentially save lots time beginners", "d": "2/2017"}, {"body": "mentioned think feel free contribute think something missing", "d": "2/2017"}, {"body": "provide code reproducing", "d": "2/2017"}, {"body": "since using ssr seems hard provide fiddle try extract code basic ssr using rendertostring rendertostaticmarkup", "d": "2/2017"}, {"body": "give precisions looking output server rendering react seems never add semicolon last item style attribute", "d": "2/2017"}, {"body": "maybe html minifier strips server", "d": "2/2017"}, {"body": "oh yeah right htmlminifier server side seems remove semicolon thanks help", "d": "2/2017"}, {"body": "hey zslucky thanks idea nt encourage using inheritance patterns react components check composition vs inheritence docs details since pattern encourage unlikely want provide api support hope helps", "d": "2/2017"}, {"body": "thanks aweary", "d": "2/2017"}, {"body": "binding correctly", "d": "2/2017"}, {"body": "yup could also use arrow functions good article works javascript hope helps", "d": "2/2017"}, {"body": "hey joshbroton thanks report fiddle expected behavior far know disable events div using attribute see elements disabled html spec fiddle using plain html demonstrates even though attribute specified click handler still triggered possible use actual form element need able disable hope helps", "d": "2/2017"}, {"body": "thanks impression role button made behave exactly like button since screen readers see button til", "d": "2/2017"}, {"body": "hey refaelos recommend checking bugsnag asking one many community driven platforms discussing react like reactiflux use issue tracker bug reports feature requests sorry could nt answer question", "d": "2/2017"}, {"body": "actually works every time change input field see change text inside console problem input always empty nt dispatch action change firstname inside props except click button check pen fix", "d": "2/2017"}, {"body": "hi eduardbcom yeah know guess example nt clear try click button watch change inside console nt get one updating touching input update codepen clear adding functionality thought missing edit updated codepen make clear problem trying update passing new value", "d": "2/2017"}, {"body": "thanks report pudgereyem example really useful expected behavior event handler meant act like typical event handler meaning invoked dom dispatches appropriate event although treat special case changing behavior better match user expectations still meant standard event handler check example uses plain javascript js var input documentgetelementbyid input called input value changed via dom changed programmatically using inputvalue inputonchange e gt windowalert etargetvalue settimeout gt inputvalue changed change event fired updated technically change event mirrors react see might useful react invoke whenever detects changed expected behavior fact inputs onchange function gets called problem need logic validation inputs changed value coming always check new value", "d": "2/2017"}, {"body": "add use refs emit change event hand", "d": "2/2017"}, {"body": "aweary thanks alot fast response see might useful react invoke onchange whenever detects value changed expected behavior got yes interesting discussion think understand meant standard event handler however input change would neat would trigger also eduardbcom yes know thanks adding", "d": "2/2017"}, {"body": "hi aweary eduardbcom new pen solution problem manually trigger handler input updated achieved using suggested aweary closing issue", "d": "2/2017"}, {"body": "explained docs intentional reason explained docs link well", "d": "2/2017"}, {"body": "leoasis absolutely correct intentional behavior consistent browsers users expect fire input value actually changed linked documentation make clear hope helps", "d": "2/2017"}, {"body": "thanks answers still redundant helpful least events thing diverging main browser like chrome", "d": "2/2017"}, {"body": "recommend using provides similar semantics also consistent across input types browsers sorry caused confusion try explicit documentation think provides better user experience way", "d": "2/2017"}, {"body": "would link issue mstijak looking workaround manually use dom api right option", "d": "2/2017"}, {"body": "oliviertassinari manually attaching listeners seems wrong think fixed react", "d": "2/2017"}, {"body": "fiddle see warning open console switch device mode touch events", "d": "2/2017"}, {"body": "ok interesting deal chrome makes breaking change mean libraries respond unbreaking effectively undoing purpose whole thing complicated fact react fiber whole shift able write apps active event listeners world defaulting active makes sense flip side quite yet ecosystem action apps able make palatable need careful consideration make right choices defaults", "d": "2/2017"}, {"body": "rather set passive false much better apply appropriate touchaction disable scrolling desired see", "d": "2/2017"}, {"body": "rbyers would best thing component uses mouse touch events", "d": "2/2017"}, {"body": "rbyers let disable scrolling outer window bottom inner scrollable surface right sidebar facebook without disabling scrolling sidebar", "d": "2/2017"}, {"body": "mstijak mouse touch orthogonal canshould still call also set indicate declaratively touch gestures want disabled sebmarkbage least scenarios disable scrolling via toucheventpreventdefault safari ie scrolling started ca nt change may want set bottom", "d": "2/2017"}, {"body": "relevant chromium issue context", "d": "2/2017"}, {"body": "closing per code wo nt living soon", "d": "2/2017"}, {"body": "behavior correctly borderstyles state change removed borderrightcolor red change inherit color please see example", "d": "2/2017"}, {"body": "mean sorry second fiddle making right hand border go back green setting explicitly nt necessary setting border div surely render", "d": "2/2017"}, {"body": "please see", "d": "2/2017"}, {"body": "state state borderrightcolor red removed reactjs remove borderrightcolor set inherit update style", "d": "2/2017"}, {"body": "trying explain bug might happening sure follow although inspect element initial fiddle shows final style div rather implying either way pretty sure react nt supposed give different result depending previous state ask div style expect regardless", "d": "2/2017"}, {"body": "explanation correctly react set borderrightcolor inherit removed", "d": "2/2017"}, {"body": "overlapping styles supported", "d": "2/2017"}, {"body": "ah ok apologies spotting existing issues close thanks syranide", "d": "2/2017"}, {"body": "oh looks like yet another dataflow package good job", "d": "2/2017"}, {"body": "uxitten glad excited new library please nt abuse react issues tracker promote", "d": "2/2017"}, {"body": "rule thumb reserved name javascript avoid using api identifier safe use help using would nt valid contexts eg destructuring similarly surprising perhaps could offer warning development though want send pr unlikely make vast changes proptypes point mostly maintenance mode encourage people use static typing flow typescript", "d": "2/2017"}, {"body": "thanks detailed understanding response yes helps nt thought reserved word nt aware encourage people use static typing would able point info", "d": "2/2017"}, {"body": "help", "d": "2/2017"}, {"body": "mostly maintenance mode encourage people use static typing flow typescript gaearon said awhile nt really consistent number prs open extendaffect proptypes someway anyway specific things want proptypes right", "d": "2/2017"}, {"body": "technically supported makes harder good performance larger apps ca nt referentially compare data structure bail updates anymore explanations optimizing performance", "d": "2/2017"}, {"body": "also future versions react able delay certain updates split work chunks keep ui responsive prioritize updates efficiently app would nt able take advantage directly mutate data", "d": "2/2017"}, {"body": "elaborate gaearon initial point certain lifecycle methods like take parameter mutating would unable compare previous current values limiting lifecycle methods example implements counter really basic implementation meant ensure component updates updated seems reasonable jsx increment thisstatecount thissetstate count thisstatecount shouldcomponentupdate nextprops nextstate return nextstatecount thisstatecount example mutates means check tell state updated since equal component never update updated example thing except nt mutate see component update expected summarize number public apis assume mutated allowing compare previous current state make decisions based whether differ mutating state makes impossible", "d": "2/2017"}, {"body": "thanks comments complex nested state objects updating whole structure cause performance issue var tasks user name comments text value text value text value state state gt tasks tasks nt want mutate state create new array loop users loop comments set one comment value yes maybe use reactaddonsupdate set merge push hard consume widget", "d": "2/2017"}, {"body": "one common solution normalize data example shallow etc way changing single comment would nt cause user map copied alternatively use library providing persistent data structures like immutable allows write code efficient deep changes use pretty extensively facebook exact purpose", "d": "2/2017"}, {"body": "ulugbekov found redux documentation normalizing state pretty good recommend looking information topic even using redux gives good overview normalize state general", "d": "2/2017"}, {"body": "also since usage question use issue tracker bugs feature requests going close feel free ask clarifying questions", "d": "2/2017"}, {"body": "hey use issue tracker exclusively feature requests bug reports support usage questions directed elsewhere like stackoverflow discussreactjsorg reactiflux hope helps", "d": "2/2017"}, {"body": "purely speculative wonder restoring input stored attribute controlled fields much like react controlled inputs nt support happy triage aweary", "d": "2/2017"}, {"body": "updating use nt seem effect", "d": "2/2017"}, {"body": "nhunzaker feel free look shallowquick debugging tell ios safari updating dom element property cleared still old value opposed chrome resets would worth seeing could reproduce behavior without react", "d": "2/2017"}, {"body": "without react seems pick problem ios emulator", "d": "2/2017"}, {"body": "reproduce locally using build curiously nt seem like clear button even triggers change event edge build master aside awesome super easy", "d": "2/2017"}, {"body": "jquense need dig deep changes jump biggest difference immediate thoughts", "d": "2/2017"}, {"body": "took quick pass using core mechanic behind seems work fine work way sorry bit user error going keep digging", "d": "2/2017"}, {"body": "current docs chenglou old fork docs tutorial rewritten different example hope helps", "d": "2/2017"}, {"body": "crap page ranked high google", "d": "2/2017"}, {"body": "must thoughtleadering", "d": "2/2017"}, {"body": "thanks cheng maybe could take old pages nt confuse beginners like", "d": "2/2017"}, {"body": "unfortunately would still issue forks react maybe add detection code adds banner top doc page", "d": "2/2017"}, {"body": "jaredbeck link access fork", "d": "2/2017"}, {"body": "maybe add detection code adds banner top doc page would better nothing worried spent hours learning outdated techniques jaredbeck link access fork nt remember sorry", "d": "2/2017"}, {"body": "whatever reason got linked fork nt make sense delete mine dan whoever else ca nt disable ghpages updated latest react ghpages way anyone stumbles upon fork least see uptodate info", "d": "2/2017"}, {"body": "hard tell code slow may many contributing factors recommend look different profiling tools chrome timeline get sense slow also make sure running production version react see guide details close issue since support request rather bug listed appropriate support channels hope helps", "d": "2/2017"}, {"body": "never mind solved issue anyone needs const rendercomponent element callback gt let instance reactdomrender element gt callback instance const mydiv documentcreateelement div rendercomponent mydiv instance gt spyon instance render andcallthrough testutilssimulateclick mydivqueryselector call setstate expect instancerender tohavebeencalledtimes work call render synchronously yayy", "d": "2/2017"}, {"body": "pretty sure using", "d": "2/2017"}, {"body": "nt see meaningful results searching performance github maybe called different way way display submilliseconds units results printed etc", "d": "2/2017"}, {"body": "using polyfill fbjs way show default numbers really actionable displayed people would overobsess optimizing little optimize think get raw measurements want", "d": "2/2017"}, {"body": "thanks issue repo reproducing issue value supplied parents props missing value expected make copy respective defaultprops value instead hold ref defaultprops react pass values directly props copies values see code reactelementjs freeze props development mode unfortunately nt prevent mutating already existing values nt recommend mutating anything coming regardless whether coming parent component better pass methods update data parent component example instead react make copies values general good idea avoid mutating anything coming first place hope clears things bit let know questions", "d": "2/2017"}, {"body": "thanks pointing code really helpful change repo readme bad practice avoid using default props thanks lot", "d": "2/2017"}, {"body": "hey neaumusic thanks issue react cares keys using arrays arrays typically represent mapped data many cases data reorganized eg todo list addremovereorder items keys help react efficiently nt required warning error highly recommended case issue using array fragment presumably avoid return single wrapping node around two works react differentiate array mapped data array representing fragment since explicit support fragments moment assumes array represents mapped data react fiber provides way return fragments future major releases make easier said going close nt think want increase complexity handling arrays support right", "d": "2/2017"}, {"body": "right nt want use wrapping node reason appease react thanks reply yea arrays sequential maps data even looks like jsx difference array mapped data fragment nt understand saying difference user wants put template twice definitely able react create index really ca nt keep instances straight think saying react ca nt tell user reverses order templates user uses exact template updating exactly number one complaint react render method becomes slalom order use refs another example bad template management react part imo", "d": "2/2017"}, {"body": "difference array mapped data fragment nt understand saying difference difference mapped data typically dynamic array representing fragment dynamic arrays far common use case greatly benefit unique keys warning place jsx dynamic data likely reordered resized thisstatefoomap foo gt static fragment likely reordered difference react perspective get warning even though mapping anything dynamic updates array understand pain point mentioned future versions react address see background", "d": "2/2017"}, {"body": "future version jsx think aiming support syntax like make sense especially next version react since allow returning arrays component think separate syntax would solve problem still produces array could let react distinguish case keys necessary dynamic lists static lists unfortunately good gets sorry frustrated maybe show examples find annoying suggest patterns work better love learn complaints apart one first post thanks", "d": "2/2017"}, {"body": "thanks report able verify behavior described definitely super weird occurs using look get better idea going suspecting kind bug ieedge since nt affect react could also reproduce without react using would really helpful may difficult case", "d": "2/2017"}, {"body": "case people affected proactively removing focus text input unmounts resolves issue", "d": "2/2017"}, {"body": "aweary reproduced without react suggested removing focus input removed solves problem", "d": "2/2017"}, {"body": "react uses one global event handler per event type event handler always called bubbling phase dom might capture event types property looks like react juts copies native event onto therefore always case gathers handlers simulating capturebubble phases get events later run event queue know point synthetic phrase handler gathered works events reimplementing event system change value accordingly calling provided callbacks", "d": "2/2017"}, {"body": "listen events capture phase possible handle event correct phase look", "d": "2/2017"}, {"body": "checked code edited comment clarify faster", "d": "2/2017"}, {"body": "happy take stab rewriting clarifying section one else working", "d": "2/2017"}, {"body": "pr pending bunch refactoring includes part docs think pr improvement lot sorts changes seem somewhat stylistic could go either way walk people every step tutorial get verbose curious get feedback one", "d": "2/2017"}, {"body": "got stuck exactly board make function like square use props parameters ok happens functions inside board completely new react clarification tutorial would really helpful", "d": "2/2017"}, {"body": "looks like hot mess back forth showing us rather vaguely stating remove constructor board change board takes squares via props onclick prop specified game like transformation made square earlier pass location square click handler still know square clicked makes load assumptions primarily assuming reader ever done anything react fail point tutorial quoted sentence sample code seen previously tutorial entire tutorial essentially useless beginner complete without guess eventually give one thing learned teaching people never really verbose attempt teach someone nt understand done nt verbose enough thus failed teaching anything want quick solution delete storing history everything", "d": "2/2017"}, {"body": "kspen feedback hot mess provide pull request general think nature tutorials judgmentbased code might end something nt satisfy everyone maybe actually something would make different sides happy feedback honest real feedback someone really using tutorial", "d": "2/2017"}, {"body": "lacker thanks response think maybe better option initial introductory tutorial would variant variant official react maintainers would great basically new tutorial would read static html file add script src explanation script source reactjs vs reactdomjs convert simple static html simple static react spa next convert use remote data source via fetch way see react tutorial exists provide working example purposes learning main goal actually sell technology idea proposing aims concrete practical example intentions showing code react well works explaining reactjsreactdomjs split maybe another way say would code react explain moving parts work together think react terms hope helps regards", "d": "2/2017"}, {"body": "gaearon curious remove good first bug label would like get started", "d": "2/2017"}, {"body": "abdulhannanali good first bug label identifies bugs think would easy firsttime contributors gaearon may removed felt issue complex new contributors nt mean ca nt work feel free look send pr like also answer questions along way", "d": "2/2017"}, {"body": "thanks lot aweary encouragement get started right away jsfiddle reproduces interested looking reproduce locally debug code keep asking questions time", "d": "2/2017"}, {"body": "jsfiddle reproduces one exception happens reactperf parameter used maybe related maybe case abdulhannanali thanks take look", "d": "2/2017"}, {"body": "sure really issue jochenberger union type none types pass matters union type failed single nested prop nt sitting union type get custom error", "d": "2/2017"}, {"body": "yes noticed thought since react already knows object could provide detailed message however problem something like yes know would nt way pass problem union types rather shape sure could improved technically broken somehow error message seems wrong", "d": "2/2017"}, {"body": "think see sides argument yes foo nt match proptype criteria one predicates failed union type failed degree nt care failed know however also see side wrapped shape union type nt change behaviour think tend agree latter think shape give expected behaviour whether union type willing stab alright everyone", "d": "2/2017"}, {"body": "ok dug better understanding niole saying seems completely missed point making laughing get let take example checks oneoftype array positive way looking wanting prop match least one criteria interesting discussion though talk negative point view state check fails fails expect checks iterated checks failed currently react reports oneoftype validator failed theory gives good place go look proptype validation failed assuming nt like want information could technically facilitate delivering information way see got two courses action either report way failed report way one failed ie first last failure neither feels right showing failures nt seem useful match one plus report checks unlikely scenario yes physically impossible either equally showing one nt seem right either failed tests right reporting one developer meaning meet one proptype validators reported first one would confusing turn events think believe given said current functionality might right one instance react report prop using oneoftype check failed validation react dust hands feel good pointed developer right direction fix problem", "d": "2/2017"}, {"body": "live showing details feels strange example say either certain shape eg react telling valid feels wrong check could probably rule options wrong type altogether passing react knows passing option match single option left include error message overall error maybe worth effort tradeoff providing much information possible error report making things overly complicated userfacing error dev mode warning developer probably able figure causes", "d": "2/2017"}, {"body": "would better reword error message returned instead stating could instead state something like would make little clear error message", "d": "2/2017"}, {"body": "test renderer agnostic rendering target domnative think treating dom attributes specially test renderer verifies components intend render necessarily appears browser rendering results test renderer somewhere thus noticing inconsistency solve taking test renderer json output converting react elements actually using reactdom render html dom way would go domspecific code path hope helps", "d": "2/2017"}, {"body": "ca nt repro seems like working check codepen final working code accepted pr update tutorial link hopefully clearer people future suspicion missed something explicitly laid code rather described text", "d": "2/2017"}, {"body": "see reactcsstransitiongroup addon soon deprecated working similar project time needs exposure check reactcsstransition", "d": "2/2017"}, {"body": "cvle want join forces taion jquense", "d": "2/2017"}, {"body": "gaearon open collaboration though projects quiet different moment idea way project heading almost feature complete though needs testing battlefield know gon na open issue discuss", "d": "2/2017"}, {"body": "question react deprecates removes separate package released time separate package repo organization like", "d": "2/2017"}, {"body": "gaearon issue also part", "d": "2/2017"}, {"body": "aweary work one since new community might need bit direction start", "d": "2/2017"}, {"body": "already done part forgot close issue sorry", "d": "2/2017"}, {"body": "passing function calls anywhere outside react like event listener something like react event listener api typescript may correctly compiling class method may helpful inspect compiled output see anything obviously wrong", "d": "2/2017"}, {"body": "friendly heads item outdated nt quite right generally items issue fairly complex even smaller ones hard outside contributor complete easier contribute core pieces place best identify opportunities come edit comment responded deleted \u30c4", "d": "2/2017"}, {"body": "async work poorly nt shouldcomponentupdate everywhere reuse mechanism nt good maybe mechanisms cover", "d": "2/2017"}, {"body": "sebmarkbage thinking interesting accepted best practice today use really need time takes compare props could wasteful tradeoff might adjust timeslicing", "d": "2/2017"}, {"body": "since response going go ahead close chenlizhan still issue please provide reduced test case uses react happy look help thanks", "d": "2/2017"}, {"body": "note server build reactdom affected fails way react use case operation loading minified version react inside atom", "d": "2/2017"}, {"body": "magv accidentally happened work package boundaries fake real however sure could support even wanted umd bundles however loading commonjs environment would expect find one another know locations since commonjs set globals like browser guess react located understand frustrating work anymore never officially supported find usage suggested anywhere docs far understand even feasible support true package split real solution bundle code rely bundle code eg webpack browserify rollup always specify equivalent tell bundler use instead instead since bundler resolves paths everywhere would also override path refer correct react without bundler let know missed something far seems like fix sorry server rendering performance intend provide flat precompiled bundles future effect", "d": "2/2017"}, {"body": "using webpack reason working even using environment think closing bug could acceptable time focus making serverside usage clear docs components", "d": "2/2017"}, {"body": "webpack using configuration work well", "d": "2/2017"}, {"body": "gaearon case atom fact set globals using alternatively could wanted provide additional set minified files correct minified counterparts thus work server environments something effect understanding glue uses find minimal moment using bundling tools certainly option rather inconvenient one far atom extension development goes since introduces build stage course decided support importing minified files packages wo nt argue", "d": "2/2017"}, {"body": "main reason team use production build ca nt run js unit tests since test utils included", "d": "2/2017"}, {"body": "close nt simple clean example provide reopen find something", "d": "2/2017"}, {"body": "aweary lastest version seem fix bug solve old version", "d": "2/2017"}, {"body": "closing since response believe expected behavior", "d": "2/2017"}, {"body": "cool", "d": "2/2017"}, {"body": "yeah works really wonderful library thank much", "d": "2/2017"}, {"body": "may bug plain javascript version example also submits form button type importance resolved possible prevent form submit explicit note using like fbarrailla example decide really bug would propose fix detect situation button changes type introduce events ignored could tell next submit target form effect suggestion stay current version", "d": "2/2017"}, {"body": "middleclicking app broke chrome would appreciate support order make work correctly", "d": "2/2017"}, {"body": "trying dick asdfasdftrytospotthisasdfasdf know mean", "d": "2/2017"}, {"body": "thanks report githubitsme could provide reduced example reproduces issue use starting point unfortunately hard help debug example contains lot imports integrations libraries like redux cristianeriomenco please nt comment nt anything add helpful thanks", "d": "2/2017"}, {"body": "small reproducible example bug create example repo triggers needed", "d": "2/2017"}, {"body": "seems fiddle stopped working reason captbaritone go ahead edit fixed mine first post well", "d": "2/2017"}, {"body": "bsharou reason using reactdomrender twice values removed one solved warning removed", "d": "2/2017"}, {"body": "mrgurdeep internal itemmap object gets damaged react reactdomserver render methods used next render method called tries use damaged itemmap triggers warning note nt think matters whether second reactdomrender called data first one", "d": "2/2017"}, {"body": "noticed searching looks like issue closed", "d": "2/2017"}, {"body": "thanks pedrottimark", "d": "2/2017"}, {"body": "solved problem changed code way pointdown", "d": "2/2017"}, {"body": "found better way", "d": "2/2017"}, {"body": "hi gaearon investigation order answer facing issue tried see reactisvalidelement recognizing react elements looking react reactdom code thought reason react reactdom would agree unless require polyfill requiring react reactdom first time importing together cause problem indeed declared module loading time used everywhere library generating elements reactdomrender issue come somewhere else ended finding elements causing issue created babelruntime logic reactelementsymbol duplicated presence polyfill issue closed wo nt fix babelruntime react wo nt share variable case guessing issue due upgrade change structure application understand need import polyfill beforehand babelruntime react hope help others scenario", "d": "2/2017"}, {"body": "sure closed still experiencing issue check different versions codepen example specifically although used button guess babelrc causes render disabled even still fire onclick even disabled", "d": "2/2017"}, {"body": "hi zargold saw sample tag trigger tag disabled property element reading", "d": "2/2017"}, {"body": "yes code babel add story top html add story top work", "d": "2/2017"}, {"body": "sorry follow saw code codepen obviously tag react render function put wrong code codepen", "d": "2/2017"}, {"body": "ok thanks correct monkindey actually issue babel reinstalling babel switching worked fully yes could definitely considered closed thank help", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "better define getting react inconsistent state common problems would lead happen", "d": "2/2017"}, {"body": "react component throws render lifecycle method likely get state next update already broken tree throw meaningless errors fixed future versions support error boundaries", "d": "2/2017"}, {"body": "hi folks making steady progress workflow community driven localization helped get one oss project yarnpkgwebsite working using system learned lot things move along rather quickly point hoping jisupark gbezyuk others thread still able assist thanks", "d": "2/2017"}, {"body": "happy get localization need us", "d": "2/2017"}, {"body": "ericnakagawa totally tell us", "d": "2/2017"}, {"body": "ericclemmons course tell us need thanks", "d": "2/2017"}, {"body": "wish help korean localization", "d": "2/2017"}, {"body": "hi like help translating docs spanish searching guidelines could nt find", "d": "2/2017"}, {"body": "nt started process yet write issue everything ready", "d": "2/2017"}, {"body": "gaearon also include section code splitting happy help", "d": "2/2017"}, {"body": "current thoughts learning resources section per list tylermcginnis proposed one closed due docs rewrite know seen lot people complain react docs nt tell build fullblown app agree core docs focus react especially given variety ways people use react minimum pointer additional resources would good biased reactredux links list actually covers several topics listed example sections discussing use children rendering modals wrapping nonreact code like jquery plugins making ajax calls performance optimization much much also per comment earlier put together bestof guided learning version links list new reactiflux site later updated front page list show would nt bad topics directly docs enough good quality articles already think docs could simply point couple selected articles topics maybe point list tim arney react faq sources information", "d": "2/2017"}, {"body": "gaearon aweary know beating dead horse similar issue discussed thread reading following docs handling events careful meaning jsx callbacks javascript class methods bound default forget bind thishandleclick pass onclick undefined function actually called reactspecific behavior part functions work javascript walk away thinking bind methods following code javascript class test constructor thissomeproperty test const c new test chi obviously true paragraph really trying say needs better", "d": "2/2017"}, {"body": "kalmanh send pr", "d": "2/2017"}, {"body": "support bind context like vuejs need bind function manually", "d": "2/2017"}, {"body": "ssuhat list things need get parity existing implementation finish might look adding new features", "d": "2/2017"}, {"body": "ssuhat think explicitly decided long time ago magical using experimental property initializer syntax nice way deal also try party plugin like reactautobind", "d": "2/2017"}, {"body": "aside magical problem autobinding performance cost binding methods wasteful autobind ones nt need", "d": "2/2017"}, {"body": "something akin inferno linkevent would good though skipping binding allowing data passed often find code loop would benefit eg thingsmap thing gt thisdosomething thingid gt thingsomething able drop binding would nice", "d": "2/2017"}, {"body": "let create separate issue discussions", "d": "2/2017"}, {"body": "wanted give update proof concept helps solve problem linked gist convenience", "d": "2/2017"}, {"body": "seems fixed safari ca nt reproduce aweary fiddle", "d": "2/2017"}, {"body": "fix suggested rikani worked also note prepending symbol also enable navigating backwards using tab", "d": "2/2017"}, {"body": "bsonntag", "d": "2/2017"}, {"body": "kaibakker absolutely right fixed snippet help copypasting", "d": "2/2017"}, {"body": "confirmed fixed alpha release", "d": "2/2017"}, {"body": "gaearon work large company spoken google microsoft apple attorneys said legal policy prevents employees using react usage removed future lawyers came conclusion believe large companies hurt patent grant helped use apache license patent protections everyone else", "d": "2/2017"}, {"body": "obviously predict future microsoft actively contributing react native ecosystem apple using react relatively new products google problem using react know situation might change keeping eye however prevent employees using react seem true even true point past going lock issue bumping productive made position clear many times plan sue facebook patents nothing worry plan engage patent litigation fb withdraws additional protections given grant even first place open source libraries like mit yes grant conditions broader apache far works well many companies choose sue software patents intend change strategy near future sorry helpful company concerns please feel free email talks legal team thanks", "d": "2/2017"}, {"body": "topic microsoft preventing employees using react one interesting fact new skype app built using facebook react native framework could possibly mean skype users ios get similar app soon", "d": "2/2017"}, {"body": "proof concept created gist function wraps hyperscript style vdom function enables full control props attributes events including custom events vdom implementation supports even allows one pass custom element constructor component name details implementation readme gist", "d": "2/2017"}, {"body": "issue caused facebook sharing button fixed adding condition jsx render client side rendershare typeof window undefined return", "d": "2/2017"}, {"body": "getting error intermittently often throws first time load page reload page see error much go though update issue missing element inside element mavericken", "d": "2/2017"}, {"body": "problem would like possibility skip rendering component already rendered server side syranide could make example hack problem would look like", "d": "2/2017"}, {"body": "error error performupdateifnecessary unexpected batch number appears component error see uncaught typeerror read property currentelement null appears another component crash method example caused code components parent", "d": "2/2017"}, {"body": "thread everybody seems enumerating different possible errors javascript apps however relevant solving issue helpful others thread focuses symptoms underlying cause explained several times threads going lock thread reduce noise help people finding google focus solution rather symptom explained solution please read comment problem commonly occurs promises occur code exceptions nt log see cryptic error like always means earlier error component code causes react break need scroll console find original error nt see earlier error components means code swallowing errors common use catch promises accidentally swallow errors inside react also seen libraries like redux saga people error without checking network failure something else third party libraries may also swallow errors recommend enable break exceptions debugger error throws check call stack find silently catching error error irrelevant symptom need figure code crashes component swallows crash fact react produces cryptic errors next updates component crash unfortunate fix next versions react however case need fix underlying problem code crashing first sure bug react please file new issue minimal reproducing test case", "d": "2/2017"}, {"body": "swlilike thanks solution", "d": "2/2017"}, {"body": "added new pr", "d": "2/2017"}, {"body": "happened unhandled exception method component error happened google console fetch google nt appropriate polyfill googlebot agent run code properly particular case offending line called changing solved problem", "d": "2/2017"}, {"body": "following would result whenever page navigating remedy wrap things one element new root level", "d": "2/2017"}, {"body": "using react reactdom typescript webpack transpiling support chrome edge app works fine getting error unable get property undefined null reference polyfillminjs unable get property reactinternalinstance undefined null reference reactdomminjs", "d": "2/2017"}, {"body": "btw fixed changing polyfill cdn webpack entry", "d": "2/2017"}, {"body": "still seeing issue", "d": "2/2017"}, {"body": "please open new issue simplified repro case still seeing", "d": "2/2017"}, {"body": "getting argument callback someone really get fired hope", "d": "2/2017"}, {"body": "correct assume currently way server render stream react", "d": "2/2017"}, {"body": "job", "d": "2/2017"}, {"body": "rafaelbiten thanks problem solution seems work know solution works case certain calling twice closeportal hook still fails wondering kind event bubbling", "d": "2/2017"}, {"body": "mhuggins thanks works thinks problem call inside event handler whle root element actually removed event handler completed", "d": "2/2017"}, {"body": "still facing problem faced issue non worked slorber rendersubtreeintocontainer causes issue case rendering child component outside parent modal component renders side parent using context provider pass context modal caused problem making parent component rerender every time loses state fixed using provides rendering outside parent", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "future reference official new home transition group", "d": "2/2017"}, {"body": "javascript let idcounter typeof window undefined amp amp windowid function id return idcounter export default id javascript const seed id const rendered rendertostring const markup components jsx import id utilsidjs render nameid id return agree would nice react provided standard way syncing values client server said nt know api would look like pretty easy", "d": "2/2017"}, {"body": "hacked something recently seems trick noticed rendered serverside dom nodes attribute set function first check rendered dom node see attribute set simply return means nt rendered serverside nt worry keeping sync use autoincrement approach suggested code looks something like undoubtedly optimized way recent observation methodology appears sound least usage", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "fact shallow render renders one level deep nt imply wo nt called nt said anywhere react enzyme documentation", "d": "2/2017"}, {"body": "simple workaround const mycomponent pure msg style gt mycomponentcontexttypes style reactproptypesstring unlike recompose memoization turns stateless functional component", "d": "2/2017"}, {"body": "recmo new react welcome correctionexplanation think want include defaultprops assignment pure function also tangent basically hoc wrap approach slorber mentioned earlier", "d": "2/2017"}, {"body": "problem us well like free performance boost benefits production build ca nt use ca nt run unit tests", "d": "2/2017"}, {"body": "agree well fix prevent warnings course however argument nt displayed", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "react implementation transitiongroup moved", "d": "2/2017"}, {"body": "like propose three possible paths forward flow automatically read files definitions could ensure works generates jsflow files packages write custom step build tooling include public renderer type def public package minimal typedef package receives file everything else considered internal move react defs proscons first two options benefit working consumers install automatically get defs automatically read cons two either depending unstable feature flow maintaining custom solution additionally react def maintained flow benefit definition able take advantage unstable flow features allow flow team flexibility though loses ability track react versions bit eg stateless functional components children react maintained distributed react source downside breaking changes flow releases may cause undesirable errors consumers update one approach typedefs written specific versions react specific versions flow eg cost losing outofthebox experience consumers would need use cli tool install react definitions whatever version react flow using", "d": "2/2017"}, {"body": "zpao searched far wide official answer looks like might close confirm use", "d": "2/2017"}, {"body": "jemarjones listed boolean property htmldompropertyconfig either boolean true false otherwise passed string asis whatever value html attribute expects one pass different different attributes", "d": "2/2017"}, {"body": "automatic property merging much nicer needing multilevel class hierarchy base class sub class calling break functionality base class right recommended pattern rather", "d": "2/2017"}, {"body": "happens react iterates twice first thread found far mentioned issue wondering guys keep using iterates twice using first directly iterate", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "know old issue sad see closed think one like use proptypes nonreact projects anything change last year", "d": "2/2017"}, {"body": "curious documentation says contrived example component js class carousel extends component constructor props super props using bound method needed thisrefhandler thisrefhandlerbind elementsinview currently getting lot errors thiscontainerrefanonymous would null const elements thiscontainerrefanonymous queryselectorall stuff elements componentdidmount thisscrollhandler debounce thiselementinview bind windowaddeventlistener scroll thisscrollhandler componentwillunmount windowremoveeventlistener scroll thisscrollhandler refhandler domelement thiscontainerref domelement render return assuming replace instances code like approach need bound constructor like event handlers b style ever get called null edit clarify situation abit mixed two approaches example currently using getting null references instead wrapping functions like statement check reference nt null hoping bound method approach would never get called", "d": "2/2017"}, {"body": "okeydoke create small example reproducing problem generally nt problem fields nt time arbitrary event handlers run reason class field avoids problem function reference ref constant case react need detach reattach every update called unmounting anyway think problem example debounced handler still runs unmounting far think nothing updates unsubscribing cancelling debounce last debounce fire unmounting either cancel debounce check ref existence method since know called unmounting", "d": "2/2017"}, {"body": "gaearon ah make good point debounced calls think seen components use debounced call make sense point curious bound method would perf slightly better since nt detach reattach plus would referential equality using shouldcomponentupdate thanks pointing debounced though", "d": "2/2017"}, {"body": "might slightly better would nt assume problem cases", "d": "2/2017"}, {"body": "encountered race condition controlledselects results select change reverted js attaches existing dom would expected onchange event triggered instead dom attaches", "d": "2/2017"}, {"body": "experiments", "d": "2/2017"}, {"body": "sure forwarding ref comprehensive solution relatively simple hocs makes sense hoc wants add another instance method maybe serve adapterdecorator think need choose ref get instance methods ability filter methods add override instance methods actually lots cases hoc indistinguishable wrapped component users reminds inheritance oop hocs little bit dull knowing oop unpopularity days", "d": "2/2017"}, {"body": "exactly solved meant solved unstablehandleerror react add method next see uncaught typeerror read property currentelement null", "d": "2/2017"}, {"body": "posted explanation problem locking thread reasons locked hope explanation helps", "d": "2/2017"}, {"body": "gaearon mentioned intentionally outside class optimizing compiler could inline call site mean optimized using class instance fields andor class static fields guess trying understand approach preferred", "d": "2/2017"}, {"body": "final answer want stick assign bottom using create react app comfortable experimental syntax enabled class properties transform approaches completely equivalent note also using decorators might weird bugs combining transforms nt recommend using decorators together class properties hope helps mean optimized using class instance fields andor class static fields guess trying understand approach preferred difference assigning end using class properties class properties desugar assignment please use repl babel website check code compiles", "d": "2/2017"}, {"body": "workaround react released", "d": "2/2017"}, {"body": "issue closed still facing issue get response consolelog consolelog thisprops undefined please give work around helpful", "d": "2/2017"}, {"body": "actually fixed somewhere along way", "d": "2/2017"}, {"body": "sure jquery problem able simulate triggering click handlers jquery click keyboard events however work jquery", "d": "2/2017"}, {"body": "probably two years late despite using time noticed nt docs stumbled across issue deprecate adding two cents defend continued existence use none four patterns describe op yet still use adopted immutable data structures practice nt use immutablejs instead either use lenses ramda tools yield new objects deep modifications without touching original object need shallow merge capability happy could choose use define state properties never add drop properties modify values use cases break need add another state value makes refactoring pain thought would nt need nt understand claim never experienced issue adding new property state object forced painful refactoring exercise maybe using immutablejs work plain old javascript objects pojos someone provide concrete example adding another state value induces painful refactoring magically solves substantial litters api really kill api docs keep us find valuablerelevant needs reading issue disappointed arguments seem superficial based anecdotes nt elaborated upon minimal api worthy pursuit nt subscribe notion one way two similar yet different functions still considered minimal api give amp take technical arguments eg impacts optimizations react like read detail please", "d": "2/2017"}, {"body": "ok technical argument one effective signature means give object object becomes new state component works well synchronous code fails miserably asynchronous code end result asynchronous call may rollback properties earlier state bit past could handle synchronous asynchronous code fine argument function instead object ie similar alternative form would ensure order asynchronous execution state modifications always modifies latest state instead carrying around stale state changing signature errorprone form callback form apibreaking change unless pr welcome doubt may well die", "d": "2/2017"}, {"body": "stumbled upon also making form library encapsulated fields similar dhruvasagar method trick whereby transparently add child form element method works fields onelevel deep might want use halthammerzeit method deeper hierarchies alternatively deeper hierarchies one could also compose fields hoc spicyj would say docs make clear data structure contain references component instances quite confusing unintuitive used array access component instance using array access component instance intuitively one would think child exact interface nt clear different unsure docs children change mentioned different places without much detail children jsx reactchildren api etc", "d": "2/2017"}, {"body": "ideally also preserve existing ref exists quite confusing unintuitive used array refs access component instance using thispropschildren array access component instance docs mention elements descriptions want see screen react compares elements createsupdatesdestroys instances based elements change described detail find helpful", "d": "2/2017"}, {"body": "ideally also preserve existing ref exists noted thanks docs mention elements descriptions want see screen react compares elements createsupdatesdestroys instances based elements change described detail find helpful gaearon element vs component instance part confused albeit difference really mentioned docs note rendering elements rather data structure nt really ever clearly described pun opaque data structure unintended instance docs barely mentioned specifically contains section refs docs use term child children stating child could instance react component could dom element say grants incorrect understanding contain elements component instances use term child think confusing usage words child children necessitate explicit mention different ref section probably first place clarification could made ref side children side sure exactly difference could stated side note using react years follow changes closely every look docs see multiple differences docs always improving existing users may notice clarification made eg note referenced even though clarifications may improve understanding certain concepts perhaps would good idea section summarize docs changes release notes well", "d": "2/2017"}, {"body": "rather children data structure nt really ever clearly described pun opaque data structure unintended think elements described thoughts need add links section instance docs barely mentioned children specifically contains perhaps link section want send pr section refs docs use term child children stating child could instance react component could dom element say grants incorrect understanding thispropschildren contain elements component instances use term child agree suggest better way phrasing bit tough child means relationship components element instance specifically otherwise hard docs sound natural open suggestions", "d": "2/2017"}, {"body": "seems current versions promises nt require done spicyj noting see", "d": "2/2017"}, {"body": "food thought create reactcommunity organization could extract addons like repos stipulate reactcommunity projects actively developed used facebook prs bugfixes community still welcome elm uses method extend functionality core libraries certain said functionality belongs core fork new repo nominate persistentupdate project name idea original object persists update nt appear used npmjsorg", "d": "2/2017"}, {"body": "keyanzhang zpao got problem looks like timing problem delaying rendering react browserside password field cleared without delay traced problem reactdominput nodevalue password field empty string even browser autofilled clears created repository reproduce since writing test hard tested chrome edit someone confirm misbehaviour react", "d": "2/2017"}, {"body": "think good one adapted understanding context like global variables hence restrained using however nt mean user make declaration access global variables global variables always accessible regardless whether declare contexttype declaration work validation purpose like proptypes please think cause lot trouble us using react relay hide context objects", "d": "2/2017"}, {"body": "commented arguing context update everything serves decide component needs rerender children verified regardless context updates way costly less costly forcererendering entire tree currently way get context updates make components context supposed change much better options fastchanging updates eg redux", "d": "2/2017"}, {"body": "caseys lol true ca nt access keys provide getter hard use case accesing keys useful jsxtostring npm module transform jsx string use syntax highlight create react component displays code children useful examples useful want display code using keys pass component keys ca nt see key great ok yeah react wants add keys components time deny access keys react internals nt available user first place", "d": "2/2017"}, {"body": "erasmomarin conclusion wrong key available inside component readily available element use case commented way officially maintain recommend use prettyformat reactelement plugin printing jsx", "d": "2/2017"}, {"body": "erasmomarin curious usecase already purpose seems trying add second meaning used component seems like bad idea convenience ie add another property similar value", "d": "2/2017"}, {"body": "gaearon yeah figured thanks explanation syranide check comment gaearon clarifies whole thing", "d": "2/2017"}, {"body": "hey bug seems open since long got free time try", "d": "2/2017"}, {"body": "hey feel free give shot previous pr open check read comments get good idea approach feel free ping questions", "d": "2/2017"}, {"body": "hi open pull request addresses issue way described sebmarkbage waiting code review", "d": "2/2017"}, {"body": "thanks reminding iansu missed pr nt link issue add mention top comment try make sure gets reviewed soon", "d": "2/2017"}, {"body": "aweary skimmed iansu pr looks great nt work guess aweary point issue help easy solve issues someone already working thanks", "d": "2/2017"}, {"body": "heads found lots value created anyone wants uses hood implementation detail currently support exclusive ranges ie range allows integers happy entertain feature requests variations", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "status", "d": "2/2017"}, {"body": "firasdib still waiting react devs comment think", "d": "2/2017"}, {"body": "", "d": "2/2017"}, {"body": "google indexing problems demand ssr baggage described us deal thus issue important react succeed general library think whole async rendering necessary javascript provided proper way waiting promise could pass parameter indicating weather want data loading synchronous ssr async real web browser data loading logic could start promise react component constructor wait could done componentwillmount however understand react devs shown doubt usefulness componentwillmount recommended make constructor work either way work people argued making components pure views addresses issue partially correct unfortunately work generic case nt know data load render tree done core issue render function logic select components add domtree makes react powerful badly suited server side rendering imo true solution able register issued data loading promises react data loading promises complete react calls us back render result number implications domtree get rendered several times like live system settles unstable data loading state stable loaded state risk system arive stable loaded state buggy system time introduced deal result much computing intense use library server side process fast thus still thinking workaround compromise generic case favor getting things done", "d": "2/2017"}, {"body": "mean time solve ssr async data loading environment data loading calls derived request url reactrouter example collect data loading promises single list promises use promiseall promise promise completes pass loaded data server rendering function model tied particular design architecture seems fluxredux might benefit slightly sure abandoned redux model application problem model item simple application knows data loading calls complex application independent modules model requires kind replication original react component tree even render logic nt see ssr made work complex project without repeating logic already written render function flux might solution experienced sure item implementation vague reactrouter example router returns us top level components belong route think instantiate components top level components longer pure components components play role top level controller due ability trigger data loading flux model make better simply moves route data loading function association different module unfortunately continuing data loading way children top controllers results duplication object graph created react rendering purpose keep things simple possible put data loading top controller level see realized ssr implications would thought twice usefulness react google indexable applications perhaps flux solution flux makes application whole level complicated simple react application instead simple data loading function chase logic across multiple files theoretical level looked really really good project running new people hard time get started problem pulling redux code base thought answer ui design complexities", "d": "2/2017"}, {"body": "hi parent div child div handle onclick mouse child calling eventstoppropogation working works fine regular html react", "d": "2/2017"}, {"body": "problem used thirdparty component means binding vanila event stop propagation feasible", "d": "2/2017"}, {"body": "problem", "d": "2/2017"}, {"body": "solution", "d": "2/2017"}, {"body": "reactstrictproptypes nt support recursion eg proptypesshape pr welcome", "d": "2/2017"}, {"body": "webstorm atleast gives parsing issues makes code reformat incorrectly solution nt really happy function curlystart return function curlyend return", "d": "2/2017"}, {"body": "please file issue webstorm sure happy fix cc prigara", "d": "2/2017"}, {"body": "hi timuric related issue tracker hope get fixed soon", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "official repo transitiongroup", "d": "2/2017"}, {"body": "love practice implemented would recommended method ing performant way thanks", "d": "2/2017"}, {"body": "please reopen issue easily implemented mandatory feature", "d": "2/2017"}, {"body": "one uses underscorejs use uniqueid method works node browser", "d": "2/2017"}, {"body": "veob deterministic deterministic id requires considering entire component tree assure changes markup changes", "d": "2/2017"}, {"body": "thread come quite long way since originally made understand properly actual official solution original problem cursor jumping force rerender every modification us nt using reactdom manually render components instead dealing component deep component hierarchy way accomplish without reactdom", "d": "2/2017"}, {"body": "use light wrapper component insulate input value outside changes focused dropin replacement standard input elements", "d": "2/2017"}, {"body": "future reference snippet broken per", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "checkout project alternative", "d": "2/2017"}, {"body": "johndous think solution works desktop mobile devices touch events trigger click events suggestions handle", "d": "2/2017"}, {"body": "love still relevant today thank internet archives", "d": "2/2017"}]