[{"title": "view undefined even though already declared", "body": "really confuses think stupid searched ever whenever declare view call always returns undefined function view code javascript windowlocationview backboneviewextend initialize function create new marker first thismarker new googlemapsmarker title thismodelget name draggable true animation googlemapsanimationdrop position new googlemapslatlng thismodelget lat thismodelget long give position declared javascript thisview new locationview model thislocation even basic one thisview new locationview neither ones work thanks watching stupid question", "num": "703", "d": "10/2011"}, {"title": "new underscore method initial missing", "body": "current underscore methods backbonecollection seems missing unintentionally perhaps omissions suffle compact flatten uniq union intersection difference zip intentional considering use cases collections", "num": "702", "d": "10/2011"}, {"title": "overriding backbonesync", "body": "try override backbonesync backbonejs use modeladd add objects nt work nt contain object gets backbonesync new backbone hope someone help problem code datalocationset", "num": "691", "d": "10/2011"}, {"title": "error object lost wrapped error callback successful update failed validation", "body": "hi guys read error handling issues suggestions seems like got another problem scenario model updates success callback set updated attributes validation fails ok error callback model instead error object able give user feedback wraperror function returns wrapped callback one param called resp function resp onerror onerror model resp options else modeltrigger error model resp options performvalidation calles three params first one model performvalidation function attrs options var error thisvalidate attrs error optionserror optionserror error options wrapped error callback takes first given param model instead error object function resp thismodel onerror onerror model resp options onerror model model options save optionserror model model note happens called validation update called ajax error like update fails also gives three params proper first param resp read expected check convert responsetext error object handle client server side validation one callback check inside works fine validation fails update error callback wrapped everyth fine please assist", "num": "690", "d": "10/2011"}, {"title": "collection sort model change", "body": "documentation collectionsort says collection comparator function maintain proper sort order times yet comparator change name change event use indexof get wrong index collection resort automatically change think documentation change preferably thissort silent collectiononmodelevent occur", "num": "689", "d": "10/2011"}, {"title": "better native support nonrest applications", "body": "like see backbone better support rest nt used application methods like collectioncreate dependencies backbonesync url nt defined object error thrown currently using something like following skip trying run sync operations url found love see way tell backbone url present throw error instead process success callback natively understand rest huge part backbone every application platform supports conversion take maybe best solution would implement backbonenorest flag default false behavior would continue throw error set true backbonesync would run success callback attempt contact server url defined url defined object would behave normally", "num": "687", "d": "10/2011"}, {"title": "chrome history strange behavior", "body": "chrome backbone router couple urls linked handlers walking app hash current handler calling previously called handlers step see calling growing chain handlers happens typing hash hands calling routernavigate manualy ok", "num": "685", "d": "10/2011"}, {"title": "add support registering backbone amd module", "body": "underscore properly register amd module detects amd loader load underscore amd loader try load backbone backbone fail underscore exist global scope backbone similar check asynchronously load underscore dependency prior underscore would use underscore backbone requirejs like following underscore backbone amd aware like underscore could following modified backbone branch check amd loader load underscore properly unit tests still pass", "num": "684", "d": "10/2011"}, {"title": "unbinding events callback context", "body": "let say model two views listening change events model javascript initialize function thismodelbind change function initialize function thismodelbind change function removed page currently understand still fire model events call event bindings model removed lose callbacks seems like view removed bindings refer view cleaned somehow possible somehow context callback something like entirely possible multiple views listening change events model bad idea general guidance best practice creative event namespacing would appreciated", "num": "682", "d": "10/2011"}, {"title": "add specific model collection inside collection corruption", "body": "adding model contains collection one model attributes collection inner collection one model attributes became simple array objects models inner collection became simple objects contains model attributes example code var model new backbonemodel innercollection new backbonecollection modelget innercollection add new backbonemodel someattr shithappens var outercollection new backbonecollection outercollectionadd model", "num": "681", "d": "10/2011"}, {"title": "request silent save", "body": "like way save models without triggering event data comes back later tried javascript var task new task taskfetch trigger change event taskset status started trigger change event data comes back tasksave perhaps something like would nice real world use case making task management application task many states probably bind event tasks collection update ui state changes like user able click task start finish deliver buttons rapid succession user clicks fast event saving trigger may happen late revert state task ui", "num": "679", "d": "10/2011"}, {"title": "make unit testing routers easier", "body": "currently unit testing router requires knowledge router history internals currently use helper trigger router duplicating testsuite rely many backbone internals test router maintainable", "num": "678", "d": "10/2011"}, {"title": "pushstate true nt match routes correctly", "body": "start app point browser say wo nt match route think routes always start slash see getfragment strips first slash character nt understand could use ca nt use find rather odd", "num": "676", "d": "10/2011"}, {"title": "modelperformvalidation pass options validate", "body": "one line change line would allow consider passed etc", "num": "674", "d": "10/2011"}, {"title": "serving backbone app subdirectory nt supported router", "body": "user able specify parameter router say root mydir specify app served subdirectory specifying prefix parameter prepended route within router routes properly handled even backbone application served subdirectory", "num": "672", "d": "10/2011"}, {"title": "url set collection initialization", "body": "create new collection object url attribute passed collection attribute var mycollection new backbonecollection url users mycollectionfetch console url property function must specified break error throw new error url property function must specified", "num": "669", "d": "10/2011"}, {"title": "collectionadd modelinstance set collection model", "body": "feature would mind explain bug happy provide patch send pull request adjust code set collection case unless already set", "num": "666", "d": "10/2011"}, {"title": "backbone pushstate bug back next buttons", "body": "foreword using backbonejs pushstate like create routes html catch jquery call code works well route caught changes content div bug problem came pushstate used use back next buttons browser example click route node js node js displayed click route coffee script coffee script displayed press back button browser root displayed url coffeescript problem present pushstate hashchange problem solution found solution writting issue solution remove first link route backbone become maybe solution future developers bug", "num": "665", "d": "10/2011"}, {"title": "feature request historyreplacestate", "body": "would like backbone able replaces state instance enabled backboneapp check user logged redirects login however makes impossible click back browser get pushed back login everything run client important able mimic way redirect http nt leave history therefore would like could implemented legacynavigation using believe possible using windowlocationreplace login nt tried", "num": "664", "d": "10/2011"}, {"title": "respect jqueryajax request type option modelsave", "body": "feature request would like something like currently backbone uses model isnew determine save request type setting type options helps quitenotreststandard backends also makes jqueryajax options support consistent backbone", "num": "662", "d": "10/2011"}, {"title": "pass options collection initialize", "body": "model pass data options like options object get passed along article function yay true collection api pass model options backbone uses options setting comparator collection pass options along collection function seems like sake consistency pass along options use case nested collection want pass option parent model nested collection initialize access pass along reference models contrived silly example farmer model turkeys collection want turkeys know farmer belong plot thanksgiving", "num": "661", "d": "10/2011"}, {"title": "tojson looks like includes references instead copies nested objects", "body": "var test new backbonemodel foo bar obj true var json testtojson consolelog jsonstringify json json obj bak consolelog jsonstringify json consolelog jsonstringify testtojson appears modifying json modified model making think tojson copied reference instead copy nested object bug", "num": "658", "d": "10/2011"}, {"title": "bug collectioncreate attributes vs model validation", "body": "album collection validate function fail attribute artist prince bogus call create function pass purplerainattributes error callback raised object sent server creation good call create function pass purplerain error callback raised object sent server creation bad object sent server created bug backbone docs states create method accept either attributes hash existing unsaved model object var purplerain new album artist prince bogus title purple rain tracks title lets go crazy url", "num": "657", "d": "10/2011"}, {"title": "viewevents set constructor", "body": "events one defined viewoptions pass events object backboneview constructor events set attribute resulting view object delegateevents executed constructor checks events attribute view object adding events viewoptions would ensure event bindings passed view constructor would applied initial delegateevents otherwise appears initial execution delegateevents effect would need set events prototypes", "num": "656", "d": "10/2011"}, {"title": "filters views", "body": "hi idea simply able specify code needs run initalizing view maybe filter nt correct term could nt think anything better currently backboneview call initialize filters could something like backboneview could give developers ability better extend views example want bindall attribute views appview backboneviewextend appviewaddbeforefilter function isarray thisbindall amp amp bindallapply concat thisbindall someview appviewextend bindall show hide show function code hide function code quick prototype sure api could probably think something better", "num": "655", "d": "10/2011"}, {"title": "pressing backbutton browser causes many actions called", "body": "click links updates state backbonejs application clicks back browser previous actions called previous one example start loading root page printed continue clicking finally click back button browser console output expected output would looks like previous actions called right one called since planing animating changes cause lot trouble", "num": "653", "d": "10/2011"}, {"title": "routernavigate nt call router unless hash changed", "body": "trying use urls without hashbangs causing grief test url updated router nt called first thought route nt match refresh page route successfully matched tried everything works fine seems like router called hashchange triggered", "num": "652", "d": "10/2011"}, {"title": "stacked success method wrapping fetch", "body": "looks like multiple calls method make success called many times", "num": "651", "d": "10/2011"}, {"title": "add argument context unbind", "body": "proposal problem multiple objects eg views bind event model pass callback unbind reliable unbind first callback matches event name callback combination callbacks array example var myview backboneviewextend initialize function thismodelbind change thisrender unbindchange function thismodelunbind change thisrender var new myview model var new myview model oh oh unbound callback possible solution allow optional argument context unbind way context passed unbind make sure context matches unbinds context passed behavior fully backwards compatible", "num": "649", "d": "10/2011"}, {"body": "thanks question without context difficult determine going code difficulty bindall please direct support requests questions documentcloud freenode irc like case something like stackoverflow issues tracker really reporting bugs tracking feature requests", "d": "10/2011"}, {"body": "thanks reply", "d": "10/2011"}, {"body": "first trailing comma example second instantiating view seem misunderstanding really reserved use within given constructor lest get confusing needed basic example properly initialize model view furthermore generic error best way track something like using debugger allows set manual breakpoints break error something built chrome check docs", "d": "10/2011"}, {"body": "new underscore method still needs added next version backbone released", "d": "10/2011"}, {"body": "returning data optionssuccess callback example javascript override sync method lookup appropriate call api backbonesync function method model options api function something url map correct data api modelurl function err object err return optionssuccess object", "d": "10/2011"}, {"body": "hey mind formatting code easier read edit ticket indent code least four spaces", "d": "10/2011"}, {"body": "sorry nt know gfm syntax highlighting issue posted formattingspaces killed even editing able format dots actually code piece code backbone sources used explain bug", "d": "10/2011"}, {"body": "great thanks", "d": "10/2011"}, {"body": "test case describing unfortunately line documentation quote referring collectionsort usage conjunction collectioncomparator comparator section comparator run inserting model collection called model updated since comparator functions potentially expensive large collections makes sense behavior default need sort collection change need call change event handler see example jashkenas tbranyen probably cool close one", "d": "10/2011"}, {"body": "understand could performance implications although would interesting compare vs insertion certainly possible manually sort however since collection allowed become unordered updates model get correct insertion index underscore uses binary search determine sortedindex user perspective insert could seem placed randomly suggest invalidates documentation reference maybe fair trade use comparator insert nt documentation least clear change comparator field ordering guarantee goes window look source confirm updates nt sort automatically assumed something wrong added sort change handler line quoted instead said something like believe would saved time edit also believe go way define comparator would seem odd would want inserts maintain ordering", "d": "10/2011"}, {"body": "agreed clearing documentation", "d": "10/2011"}, {"body": "sure bug per se seems like patch would enhancement jashkenas care chime intended behavior", "d": "10/2011"}, {"body": "think fixable backbonejs currently sorting plain transformation model sort key collections collections comparators cache sort keys models model changes collection check sort key changed trigger resort", "d": "10/2011"}, {"body": "nevermind change sort key ten models row certainly nt want resort collection ten times better current behavior call necessary", "d": "10/2011"}, {"body": "right nt use instead", "d": "10/2011"}, {"body": "one problem add method nt return reference new model like create two lines return different values probably different issue altogether seems like collectionadd return either new model created array models created sure would break code could use collectionadd since private method felt wrong", "d": "10/2011"}, {"body": "first sounds broken previously called handlers called second nt want set hash manually always use", "d": "10/2011"}, {"body": "patch branch sort thing update use latest underscore post back believe may robust patch allows jquery loaded via amd uses one suggested formats sort multiple format registration", "d": "10/2011"}, {"body": "link branch", "d": "10/2011"}, {"body": "updated branches optamd branch commit diff placed define call line function define level indent backbonejs code would trigger noisy diff however place line indent code preferred also optamdwithtest branch testrequirejshtml file showing working amd loader also tested code node simple test backbonemodel commit node test since simple code check backbone probably want test page put core registration changes optamd branch however problem merging test page optamd branch desired treasonx everyone else diff looks good pull request mention ticket", "d": "10/2011"}, {"body": "yeah diff looks good pretty much branch minus tests think pull request order thanks", "d": "10/2011"}, {"body": "would excellent addition", "d": "10/2011"}, {"body": "let move conversation pull request ticket", "d": "10/2011"}, {"body": "good idea create close destroy method views find always needed though particular case need unbind bound method model stay alive far longer view might note two completely separate methods confused one functionality case wanted outside scope view whilst reference call collectiondriven workflow might change bit purposes", "d": "10/2011"}, {"body": "using close destroy methods views remove wo nt cut", "d": "10/2011"}, {"body": "duplicate", "d": "10/2011"}, {"body": "dunno code works app doesnt sorry opening issue", "d": "10/2011"}, {"body": "inside save method notice part comes options provide setting work expect please reopen solve problem", "d": "10/2011"}, {"body": "bad suppose assumed nt exist nt see docs indeed works said would", "d": "10/2011"}, {"body": "sounds like need alert testing strategy router code rather testing specific routes bound something underlying test coverage backbone focus testing router functions instead greatly simplifies matters need instantiate router test custom methods directly whether relying routes variables testing specific routes present routing working nt something needs test coverage one internals match routes test coverage backbone testing route working triggering route externally really integration test backbones internals better focus unit testing route handlers tbranyen care chime best practices router testing", "d": "10/2011"}, {"body": "two example routes need testing probably agree actual router methods pretty boring nothing really test instantiate models views testing separately", "d": "10/2011"}, {"body": "ok making bit sense since backbone handling attachment regular expressions already form test coverage granted specifics regex capture fwiw addresses least part pain accounting query strings routes without need custom regex reason first example ca nt look something like case needs tested validity regular expressions necessarily integrate backbone", "d": "10/2011"}, {"body": "looks interesting nt actually address testing issue example secret optional way express yeah need test regular expressions extracting separate structure able test would nt really improve things either", "d": "10/2011"}, {"body": "always navigate without slash prefix get value href strip slash prefix passing navigate", "d": "10/2011"}, {"body": "seems like reasonable addition currently patch wont apply cleanly due unrelated work gone spot", "d": "10/2011"}, {"body": "check gist wrote subrouting", "d": "10/2011"}, {"body": "thanks code tbranyen seems exactly functionality looking big question one incorporate prefix parameter like shown tbranyen code would go testing presume want test several different types prefixes sub sub subsubsub subsub properly test cases would nt require instantiating several routers backbone current testing scheme routers routerjs seems single router referenced following tests reason keep testing scheme still process familiarizing backbonerouter backbonehistory well qunit appreciate opinion best way go adding tests different instances router", "d": "10/2011"}, {"body": "root option already supported precisely fashion need extra code", "d": "10/2011"}, {"body": "oh man thats incredible thanks jashkenas edit seems happens global level see exactly subrouting", "d": "10/2011"}, {"body": "thanks pointing jashkenas looking wrong place looking backbonehistory instead backbonerouter", "d": "10/2011"}, {"body": "second argument options instance properties inside initialize need set manually javascript mycollection backbonecollectionextend initialize function models options thisurl optionsurl var mycollection new mycollection url users mycollectionfetch feel address issue please feel free reopen", "d": "10/2011"}, {"body": "thanks dude", "d": "10/2011"}, {"body": "great thank helped fix similar issue", "d": "10/2011"}, {"body": "currently discussed", "d": "10/2011"}, {"body": "use already server uses approach different rest overwrite backbonesync implementation compatible case probably share applicable", "d": "10/2011"}, {"body": "ping jashkenas close please", "d": "10/2011"}, {"body": "definitely able manually overwrite backbonedefault options hash", "d": "10/2011"}, {"body": "test case invalidate", "d": "10/2011"}, {"body": "addressed following commit", "d": "10/2011"}, {"body": "example", "d": "10/2011"}, {"body": "came looking thing dove figured javascript farmvillecollectionsturkeys backbonecollectionextend model farmvillemodelsturkey url turkeys initialize function models options consolelog options consolelog optionsfarmer return new farmvillecollectionsturkeys sizeinkg sizeinkg farmer yourfarmer wrap model attributes array options get treated another set model attributes", "d": "10/2011"}, {"body": "line shows works arguments forwarded initialize method mdeering shows eloquently pass options using array models property", "d": "10/2011"}, {"body": "yeah tojson clone thisattributes underscore clone shallow copy references bit outputting modeltojson mucking json rendering template model comes server seems like able template abandon cause problems model", "d": "10/2011"}, {"body": "afaik nt use nonprimitives values anyway deepclone method could implemented used imo", "d": "10/2011"}, {"body": "yeah probably rathole around deep clone tojson might ought deal", "d": "10/2011"}, {"body": "solution use flatten references return clean referencefree object address problem please feel free reopen", "d": "10/2011"}, {"body": "admittedly tbranyen slow solution large datasets probably fine nt happen often", "d": "10/2011"}, {"body": "slexaxton said would make feel better p", "d": "10/2011"}, {"body": "curious made seems fine reasonably large sets", "d": "10/2011"}, {"body": "documentation validate called set save passed attributes updated maybe docs need explicit point validation nt get run instantiation also would instantiate model recreate via better add model instance collection", "d": "10/2011"}, {"body": "use way model binding library forms means new models directly instatiate new model bind form save want object created server server create works want object added collection nt want temporary object collection actually created server", "d": "10/2011"}, {"body": "think core duplicate", "d": "10/2011"}, {"body": "sounds like something better solved avoiding situations need custom events single instance view events conditional nature include first make view put whatever logic need handler could also handled making parent view class views inherit", "d": "10/2011"}, {"body": "nt come assume users extend view constructor case agree support custom events single instance view already customized process defining reusable view constructors eg widgets render dropdown autocomplete support selection models collection come across cases would convenient able take advantage delegateevents construction cases reason user would need extend view constructor timing first call delegateevents users certainly invoke delegateevents construction convenient might", "d": "10/2011"}, {"body": "could nt make dynamically binding whatever part initialize function main class provide real world example customizing class constructor bind things optionsevents insufficient", "d": "10/2011"}, {"body": "yes could make call delegateevents initializer point functionally insufficient nt seem reason events accepted constructor argument useful case reusable views possible supported case hope", "d": "10/2011"}, {"body": "nt seem reason events accepted constructor argument take crack answering events supported constructor args represent potentially large piece given view core functionality consider special properties set via constructor model collection el id classname tagname properties view nt contain functionality seems make sense alter something core function like event handlers good case either abstract reusable code parent class write custom initializer allows extending happen instantiation believe adhering l uncle bob martin solid design principles", "d": "10/2011"}, {"body": "delegateevents invoked view object time whether would make uncle bob sad bigger different issue", "d": "10/2011"}, {"body": "absolutely right call delegateevents view instantiated events object set view class extend represent merely initial state view events removed delegated afresh call delegateevents reason passing view constructor nt default behavior assumption made events object set properly prior invoking constructor already seem several fairly elegant ways handling scenario without needing add another special property automatically set via constructor options", "d": "10/2011"}, {"body": "think going agree disagree appreciate taking time considering request please consider withdrawn", "d": "10/2011"}, {"body": "thanks taking time file ticket", "d": "10/2011"}, {"body": "hmm seems like would add extra layer confusion class instantiation need share code backbone classes cleanest approach way multiple inheritance simple example", "d": "10/2011"}, {"body": "yes agree starting use far better techniques adding magic", "d": "10/2011"}, {"body": "using expected action nt even called previous happens routes start remove slash behave hashes", "d": "10/2011"}, {"body": "similar problem", "d": "10/2011"}, {"body": "routes never start meaning hash url fallbacks", "d": "10/2011"}, {"body": "even without beginning nt work actions called anyway complete runnable demo", "d": "10/2011"}, {"body": "gents looks like bug chrome console backbone routing ansman try run demo replacing consolelog handlers alerts another logger blackbirdjs example suppose consolelog something like stdout buffer nt get cleared pressing backbutton typing hash prints stack previous log messages handlers called though", "d": "10/2011"}, {"body": "indeed use alert fires ones good catch", "d": "10/2011"}, {"body": "whew thanks ilikefm", "d": "10/2011"}, {"body": "works remove inital guess must exact match routes", "d": "10/2011"}, {"body": "indeed interesting behavior run trying force route reload ended explictly documented part api certainly gets job done seems reasonable trigger route handler called anyone else care chime", "d": "10/2011"}, {"body": "method called see reference function pass option saved variable called success original success property provided overwritten new wrapped function called request completes successfully whatever domajax library using finishes success function originally passed truly exists meaning nt call success function originally passed normalized signature incredibly powerful smart way handling normalized success return varying different ajax libraries questions feel free continue commenting", "d": "10/2011"}, {"body": "implementation modify options data success field call fetch method options object several times success method options called several times per fetch increasing nesting actually good idea modify options methods always contain original data fetch method either restore original success method success optionssuccess success success model resp use another design pattern modify options", "d": "10/2011"}, {"body": "absolutely right investigate prevent perhaps extend", "d": "10/2011"}, {"body": "yes think extend work example tested fetch function options options options var model var opts extend options error wraperror optionserror model options success function resp status xhr modelset modelparse resp xhr options return false optionssuccess optionssuccess model resp return thissync backbonesync call read opts", "d": "10/2011"}, {"body": "would need happen though also prevalent etc", "d": "10/2011"}, {"body": "yes fixed well", "d": "10/2011"}, {"body": "still need add tests facing difficulty way tests currently constructed", "d": "10/2011"}, {"body": "hmm picking distinct similarities braddunbar smithclay care chime ball wax like mark issues duplicates", "d": "10/2011"}, {"body": "looks like ball wax well feel free mark duplicate issue captures looking well", "d": "10/2011"}, {"body": "smithclay thanks confirmation", "d": "10/2011"}, {"body": "nt think related issue seems granularity unbind behavior trigger think similar wookiehangover nt run specific case yet see utility removing callback specific context", "d": "10/2011"}, {"body": "braddunbar mistake thought tangentially connected issues since deal event lifecycle stuff bad", "d": "10/2011"}, {"body": "jspillers already accomplished using function property javascript mymodel backbonemodelextend example property format json define function instead string url function dynamically construct url return mymodel thisformat thisid feel achieve discussing please reopen provide pseudo code use case us discuss", "d": "10/2011"}, {"body": "mlanza sure still relevant use method achieve functionality javascript mymodel backbonemodelextend constructor function customize set method instance thisset function attrs options override satisfy problem please feel free reopen", "d": "10/2011"}, {"body": "arvidjanson noticed currently using backbone jquery date could please give shot latest see fixes issue versions backbone jquery please reopen issue still reproducible thanks", "d": "10/2011"}, {"body": "test case describing behavior case backbone fires reset event rather separate add events model could huge performance hit fetching large collection best way access model returned fetch bind handler reset iterate models example technique", "d": "10/2011"}, {"body": "yep", "d": "10/2011"}, {"body": "nt care breaking api means quite easy search replace projects change bind could make bind alias list bind deprecatedto removed future versions", "d": "10/2011"}, {"body": "terebentina docs clear deprecated probably accessible future release", "d": "10/2011"}, {"body": "agree terebentina yuchi", "d": "10/2011"}, {"body": "", "d": "10/2011"}, {"body": "experiencing whenever navigate external url handled backbone app close tab go back open tab seeing json sure provide test case share details might give clue happening application uses delay function sync model collection server collectionfetch server ror app serves app json sync url uses headers decide needs serve whole app json array data models could problem idea browser caches latest request made server press back renders manage leave app quickly first sync request going back renders app json ideas overcome", "d": "10/2011"}, {"body": "solved problem", "d": "10/2011"}, {"body": "thanks enough", "d": "10/2011"}, {"body": "bruth maybe start proofofconcept plugin illustrating would work way right core could still available others use", "d": "10/2011"}, {"body": "personally find whole thing quite awesome idea requiring client side computation trims requests lot status standard", "d": "10/2011"}, {"body": "tbranyen yes yuchi nt know written draft wish way show support newrevised standards", "d": "10/2011"}, {"body": "actually one jk possible contact maintainers draft get insight", "d": "10/2011"}, {"body": "emailed paul pointed mailing list read latest updates spec", "d": "10/2011"}, {"body": "created general purpose library applying patches next part create diff utility generate patch two objects would patch request body", "d": "10/2011"}, {"body": "patch allow override backbonesync options kick tires let know working", "d": "10/2011"}, {"body": "hey kevsmt get figured like close longer issue", "d": "10/2011"}, {"body": "yes sorry already mistake code sorry havent got back closed", "d": "10/2011"}, {"body": "problem man glad got figured", "d": "10/2011"}, {"body": "run problem today hard time debugging backbone changing attribute change attr handler competely weird handlers called random order previous values messed", "d": "10/2011"}, {"body": "use form databinding places silent triggered events attributes databinding trigger led trouble couple times forgot trigger changes attributes using moment", "d": "10/2011"}, {"body": "jashkenas seemingly understand jish trying explain obvious calling intended behavior model state updated consistently individual change events without guarantee ordering generic fired jish commit seems solve problem also wasted headscratching period time tracing always understood bulkset ie atomic change operation interpretation otherwise signature would thus since unordered nonsensical individual attribute events triggered attributes changing please enlighten application current behavior otherwise please accept jish pull jsermeno example convincing could elaborate part model state view state example seems support fixing issue rather keeping current behavior accepting fix current behavior could reconstructed simply calling ie sequential calls simpler tighter faster trying fix wrappers etc also provides ordering guarantee", "d": "10/2011"}, {"body": "yes modelset country se year also expected able reference latest value year example even though view listened country attribute changes jish thanks pull", "d": "10/2011"}, {"body": "tribalvibes probably difference perceived behavior event handler part view state param passed event handler model state believe following meant inconsistent view state example two parts view state event handler implies type behavior changes example returns current view state however bulk update done view state model state would dictated result view state model state sync event handler gets fired value actually gets set bulk update view state inconsistent model state firing agree may entirely intuitive however nt think example worry also backwards compatibility consider since many applications developed model", "d": "10/2011"}, {"body": "jsermeno could desired behavior equally well implemented calling need make ordering explicit otherwise seems stale cached value bug view code could nt merely refresh complementary value using eg although may mean needing make small changes app coded seems obviously consistent api simple efficient implement behavior explicitly whereas everyone else current behavior obviously misfeature easy efficient work around also hit dynamic data bindings model control input may want update multiple attributes depending values ie may mutate passed batch state change applied atomically consistently model clients views see via event callbacks", "d": "10/2011"}, {"body": "jashkenas added provide npm access seems like require jquery commonjs would go backbone able run either zepto jquery think best approach requiring backbone also think amd registration preferred way going forward let move conversation", "d": "10/2011"}, {"body": "still giving trouble feel free send us failing nodejs test case add test suite", "d": "10/2011"}, {"body": "hi disturbs also think model updated call server succeeds current version one following achieve pass save method error callback performs rollback thanks previousattributes method makes model change change back initial state like make server return object unchanged case error makes rollback automatic still makes object change change back initial state like either use save perform call directly server case success server returns updated object json use invoke modelset update model working fine ensures us model always sync server makes lot code write", "d": "10/2011"}, {"body": "sure problem htink internal plugins able iternal storage without calling server could get conflicts sad see movements backbone development", "d": "10/2011"}, {"body": "ran issue chrome backbone version javascript document ready function var new var new backbonehistorystart results uncaught typeerror call method start undefined", "d": "10/2011"}, {"body": "verify bug exists steps reproduce load page say googlecom nt matter long page browser history prior backbone app load backbone app start history navigate another backbone route hit back button notice goes back page step", "d": "10/2011"}, {"body": "use mycollectionget modelid mycollectiongetbycid modelcid implemented maps think cid client id automatically generated collection models saved yet nt id maybe set cid key override way backbone assign", "d": "10/2011"}, {"body": "reference indexes stored maps", "d": "10/2011"}, {"body": "anyone runs across page suffered backbone error nt instantly know meant definition list common ones", "d": "10/2011"}, {"body": "jsfiddle test case described", "d": "10/2011"}, {"body": "similar rulfzid suggests coercion modify extend passed rather overriding", "d": "10/2011"}, {"body": "bump discussion kmalakoff issue emerged afaik long lived querelle unelegant es elegant patterns still prefer aesthetics es form definitely powerful particular one sorting level exempli gratia sort author title one sorting exempli gratia sort title aithortitle let user choose workaround possible every sorting level made strings numbers simply concat order still forces sorting different domain fact think even know things different way domain domain b domain b objects convenience port sortered order back domain kmalakoff done interesting work defining method underscore leverages present else compares objects directly discussion eventually came possibility declaring convention similar namely function present compared objects sidnicious replaced current bb implementation ecmascript compatible one consider instead hybrid solution checks presence found considered explicit want use sortby pattern defaults es compliant pattern waiting jashkenas community feedback personally think issue deserves attention", "d": "10/2011"}, {"body": "technically use whatever sort want collection sort reset back collection", "d": "10/2011"}, {"body": "tbranyen would concerned performance proposal use case made find solution wanted incrementally resort model list user editing name imagine reseting collection case two constraints string localized wanted handle order strings like name correctly splitting string number correctly combining sort results related note submitted pull request ago sortattribute autosort parameter useful type use case", "d": "10/2011"}, {"body": "except unbind callbacks associated context pull request", "d": "10/2011"}, {"body": "looks like issue set please reopen need investigate", "d": "10/2011"}, {"body": "maybe late like click function e appnavigate attr href true return false use links normally like user nt javascript link trigger server otherwise backbone", "d": "10/2011"}, {"body": "extending bit atinux example want actions bound yet loaded views routes working back button please mind backbonehistory root option", "d": "10/2011"}, {"body": "duplicate", "d": "10/2011"}, {"body": "resolution closed pull request nt merged plugin wiki page nt router plugins wrong triggering route event along router xxx events would match behaviour events elsewhere eg change change xxx deleteme monkey patch triggers event history object instead router already inherits backboneevents route events triggered usecases whenever something needs happen routes decoupled actual handlers ala route xxx events like cleaning existing views", "d": "10/2011"}, {"body": "also curious use similar patch return silently model already exists collection error need thrown case", "d": "10/2011"}, {"body": "would happen fix bradneuberg globally defined sync method would used changes semantics functionality", "d": "10/2011"}, {"body": "unable reproduce latest backbone could review test case reopen address issue", "d": "10/2011"}, {"body": "meleyal thank documenting found useful project working", "d": "10/2011"}, {"body": "old issue ie may helpful someone backbonehistorystart called dom built domelement body defined fix backbonehistorystart called dom built jquery document ready function backbonehistorystart", "d": "10/2011"}, {"body": "see pattern model method ajaxrelated trigger method success method save events however destroy method currently triggers destroy event upon success make things backwardcompatible consistent guess method method error events", "d": "10/2011"}, {"body": "taking liberty implementing events realize backbone actually triggers event ajaxrelated methods nt passed error callback see document however says event triggered model validation fails save call fails server incorrect would like fix sure fixed source code document triggering event ajaxfailed methods bad idea possible app display different error messages different ajaxrelated methods ie error deleting comment vs error saving comment using event makes hard impossible differentiate error events simply binding listener finished implementing triggering method event ajaxrelated method fairly simple stuck error events sure left change method error different methods", "d": "10/2011"}, {"body": "version jquery also supporting moving events see new event apis time jquery evolved three ways attach events elements bind live delegate underneath though three event apis call browser event system lead surprising interactions example document unbind click remove live click events since delegated events attached document also use event namespaces current event apis going away soon address inconsistencies introduced new simple pair event methods work three elems events selector data fn elems events selector fn selector provided delegated event otherwise directly bound features old apis example events spaceseparated string event names andor namespaces object keys events values event handler functions looks like good time start supporting backbone well", "d": "10/2011"}, {"body": "currently tracking", "d": "10/2011"}, {"body": "agree appspecific answer jashkenas implemented way seems simpler though see pull request", "d": "10/2011"}, {"body": "believe may settled already", "d": "10/2011"}, {"body": "seem way see reply", "d": "10/2011"}, {"body": "thank contributing patch currently evaluating pull requests", "d": "10/2011"}, {"body": "use either solutions inside model validate function particular next run model created however since collection indexof returns adding direciton next return ie model incorrectly compared first element array adding extra check cause function return false instead incorrect element little messy add collection methods model validation case building velocitytime graph segment represented model need add validation ensure breaking laws physics", "d": "10/2011"}, {"body": "answer issue could nt get working sub views", "d": "10/2011"}, {"body": "somehow get problem overwrite fetch method like fetch function options queryobj var url thisurl use fetch query params", "d": "10/2011"}, {"body": "please reopen questions", "d": "10/2011"}, {"title": "effect calls scassert ie performance", "body": "getting lot long running script warnings ie due largely large number calls scassert throughout framework calls scassert uncommon application single event loop clearly many times given ie throws long running script warnings based number operations rather time spent able dramatically reduce number times function called removing scget scset scmeta feels like limited value ordinary usage framework many places scassert quite useful great see removed functions considering impact ie", "num": "192", "d": "10/2011"}, {"title": "willinsertelementdidinsertelement called", "body": "using view wrapped inside handlebars willinsertelementdidinsertelement callbacks note called willinsertelementdidinsertelement callbacks myappmyview wo nt called view appended dom failing testcase javascript test callbacks view inside handlebars template function var parentview var willinsertelementcalled false var didinsertelementcalled false templatetestsviewwithcallback scviewextend willinsertelement function willinsertelementcalled true didinsertelement function didinsertelementcalled true parentview scviewcreate template schandlebarscompile condition view templatetestsviewwithcallback condition false scrun function parentviewappend parentviewset condition true ok willinsertelementcalled willinsertelement called ok didinsertelementcalled didinsertelement called parentviewdestroy templatetestsviewwithcallback undefined", "num": "185", "d": "10/2011"}, {"title": "sc tree brought sc", "body": "tree view sc estimated timeline feature", "num": "184", "d": "10/2011"}, {"title": "get object keys", "body": "javascript scobjectcreate sckeys want get order work", "num": "183", "d": "10/2011"}, {"title": "buttons within nt work anymore", "body": "application use current master metamorph changes included master buttons inside handlebars nt fire anymore buttons inside working fine basically handlebars template looks follows precise button works conditional helper already evaluates true initial rendering nt state changes page lifetime see comments details", "num": "182", "d": "10/2011"}, {"title": "nt compile using rake", "body": "error", "num": "179", "d": "10/2011"}, {"title": "consider making scapplication ready trigger easily overridable", "body": "scapplication currently calls ready method document ready occurs phonegap context would want trigger based deviceready event instead currently replace entire init method would preferable override something isolated think", "num": "178", "d": "10/2011"}, {"title": "storeloadrecords save real changes datahashes", "body": "hey sproutcore team started building first real project sproutcore amazed nice parts fit together still want share one thing nt find logical maybe would even call bug app periodically fetch records different types backend see properties changed arrive data source push records store loadrecords suggested problem althought records would stay data hashes data loadrecords method invokes datahashdidchange results refreshing complete view layer fetch made impossible stay specific scroll position since short time case pretty complex tree gone rebuilt even nt obvious like case short lookup actually anything changed data hash would far better please tell totally messed concepts hacky solution used app var patchedstore scstoreextend overrides scstoreloadrecord since original loadrecord method doesnt check datahash actually changed monkey patch introduce store class otherwise bindings would fire whole view rebuild alhought nothing changed record loadrecord function recordtype loadedhash id loadedhash id var key thisstorekeyfor recordtype loadedhashid loadedhashid id var existinghash thisreadeditabledatahash key", "num": "176", "d": "10/2011"}, {"body": "created pull request instead", "d": "10/2011"}, {"body": "nt figured get work helper nt called child view nt inserted metamorphbased virtual view inserted block rendered initially nt noticing ed property changes interestingly put callback test pass well versed enough binding internals figure", "d": "10/2011"}, {"body": "trek nt think description quite right helper get called child view get created even transitions correctly find scviewviews see hook nt updated fire children metamorph views root issue test passes set anything chance render case calls propagates children already rendered change view responsible inserting child fire", "d": "10/2011"}, {"body": "closing pull request also closes issue", "d": "10/2011"}, {"body": "guess sproutcore longer provide ui widgets tree view sproutcoreui", "d": "10/2011"}, {"body": "sproutcore nt differentiate beween keys added keys added sckeys already delegating environment implementing style function looking loop object specific keys could create property returns new object specific keyvalue scobjectcreate attributes function return thisget b thisget b property b cacheable oget attributes often comes loading json data another environment sproutcore specific situation might interested sproutcore ajax", "d": "10/2011"}, {"body": "thanks example helps post interesting", "d": "10/2011"}, {"body": "got pull request adding getproperties make trek example even simpler", "d": "10/2011"}, {"body": "forgot declaration", "d": "10/2011"}, {"body": "really code abstracted structure corrected nothing actual issue", "d": "10/2011"}, {"body": "see button rendered another renderingbinding issue metamorph might related", "d": "10/2011"}, {"body": "see button able click nothing happens time yet test proposed pull request code", "d": "10/2011"}, {"body": "tested current master issue still exists work first time exit view destroy create work still case bindings within conditionals created conditional changes case myrecordisloaded", "d": "10/2011"}, {"body": "provide information command running", "d": "10/2011"}, {"body": "tried compiling sc issues running rake using exact ruby version os x via rvm", "d": "10/2011"}, {"body": "used compile sproutcorejs sproutcoreminjs time ruby working fine today checked latest pull working fine ca nt reproduce closing issue", "d": "10/2011"}, {"body": "turned combination things firstly related memory leak secondly performance issue datastore local query api local query sort based single property records throwing long running script dialog refactored use local query filter array sort manually problem disappeared along huge improvement performance", "d": "10/2011"}, {"body": "seems issue render buffer empty elements add wrappers", "d": "10/2011"}, {"body": "fixed", "d": "10/2011"}]