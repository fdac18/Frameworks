[{"title": "array cps seem issues sharedglobal depkeys", "body": "sorry poor description still befuddled jsbin explains best", "num": "4967", "d": "5/2014"}, {"title": "subcontrollerslength wo subcontrollers gt uncaught typeerror", "body": "current canary see error certain situations probably introduced resetsubcontrollers function var controller var subcontrollers thissubcontrollers seems resetsubcontrollers invoked init", "num": "4966", "d": "5/2014"}, {"title": "metamorph crashes dom dynamically add tag text", "body": "playing markdownjs library ember app stuck problem domcrash dynamically add digging deeper realized problem ember side rather markdownjs simple example dynamically added tag via boundhelper indexhtml html", "num": "4964", "d": "5/2014"}, {"title": "add currenturi application controller", "body": "would fantastic could build url based currentpath within function reverse look model controller fills dynamic url pieces emberroutermap function thisroute index path thisresource translation path function thisroute index path translationhash emberrouterreopen location globalslocation globalslocation history ontransition function consolelog thisget routerreverseurl didtransition running apps phonegap cordova quickly find windowlocation nt work well nah mean", "num": "4963", "d": "5/2014"}, {"title": "trying set properties controller content produces cryptic error", "body": "helping kathrynhough debug issue caused accidentally using wrong name route resulting model present controller error message terrifying full really say model controller set", "num": "4962", "d": "5/2014"}, {"title": "unless seems work svgs", "body": "conditional block contents inserted elements appear inserted tree dom inspector nt actually rendered page chrome least see manually editing dom within chrome inspector insert element works fine interestingly manually editing tag causes elements inserted ember appear even changes made", "num": "4961", "d": "5/2014"}, {"title": "metamorph change scrollheight", "body": "hi probleme metamorph tag webkit browsers hidden tags like scripts taken account height calculation taken account scrollheight know seems crazy true remove metamorph tags dom browser scrollheight go good value try using comment nodes calculation good github accept fork repos pr wainting changes look like js var findcomments function el var arr var lt elchildnodeslength var node elchildnodes nodenodetype arrpush node else arr arrconcat findcomments node return arr emberfindcommentnode function commentid var nodes findcomments document function define metamorph function use strict project metamorph copyright tilde inc rights reserved js function addmetamorphcheck emberhandlebarseachviewreopen checkmetamorph emberon didinsertelement function emberassert metamorph tags thismorphstart thismorphend different parentsnthe browser fixed template output valid html example check properly closed tags used tbody tag creating table", "num": "4958", "d": "5/2014"}, {"title": "bindattr fails update svg elements attributes", "body": "binding values svg document seems work bindattr injects correct value pageload fails update bound property value change happens see tested chrome beta", "num": "4956", "d": "5/2014"}, {"title": "child route ca nt access parent model reloading page", "body": "using ember debug build quick jsbin threw together using example start root navigate mysql pick entry works great however try navigate directly code throw error model hook appmysqldatabaseroute called tries get parent using thismodelfor mysql null returned nt model resolved parent resource found somewhat similar issue upgraded ember issue still present", "num": "4954", "d": "5/2014"}, {"title": "bug queryparamsnew sharing state embedded controllers query params", "body": "jsbin objects added removed application template shown index template using query string share state controllers last object removed index template others added removed except last object index controller worked around using computed aliases parent controller get query params embedded controller", "num": "4952", "d": "5/2014"}, {"title": "queryparamsnew serialize dashes", "body": "query params favourite feature mine using production despite featureflagged usecases depending eager get works well issue would great one could serialize query params withdashes instead using camelcase love ember uses appropriate variable naming depending context eg aligns well htmlstandard using dashes used bindattr changed ember datas json serializer uses camelcase default since typical keying use json similarly would neat queryparamsnew would use dashes serializing query params url either default preferens least customizable serialize values keys also think response passed params hash guess functionality would need wired slightly different machty queryparamsnew hero thoughts", "num": "4951", "d": "5/2014"}, {"title": "read property logresolver null", "body": "running emberqunit locally getting error offending line introduced basically problem resolved object assigned property nt dug deep enough know expected problem emberqunit believe would give enough work know fixed cc rjackson stefanpenner", "num": "4949", "d": "5/2014"}, {"title": "array gets serialized string using query params linkto", "body": "jsbin click go action go back index get assertion failed array converted string also consolelog model method route logs params route first accessed logs array go action back using linkto logs string", "num": "4948", "d": "5/2014"}, {"title": "trouble getting button removes completed todos display", "body": "hi trouble getting button removes completed todos display receiving errors console feeling issue todos controller copied contents controller following gist would really appreciate assistance issue thanks time", "num": "4947", "d": "5/2014"}, {"title": "linkto helper model argument route param unbound passing modelid works", "body": "model passed helper route id taken path parameter works models already id models receive id later link updated jsbin", "num": "4944", "d": "5/2014"}, {"title": "bug queryparamsnew query params serialized string using linkto", "body": "jsbin using linkto without passing query params route query params defined controller array serialized string entering navigating directly page queryparamed controller exhibit behavior neither transitioning example jsbin click links things type object string", "num": "4942", "d": "5/2014"}, {"title": "bug reduce computed updating correctly depending reduce computed", "body": "trouble getting computedsum work correctly setup reduced property depends another reduced property referenced template able create small example array changes value sum still next array change get value previous change valsum removed template value correctly updated searching cause nt know related seems strange anyway reducecomputedpropertyinstancemetasetvalue cache set new value later propertydidchange called sets cached value undefined next property request old one", "num": "4941", "d": "5/2014"}, {"title": "bug reduce computed updating correctly depending reduce computed", "body": "trouble getting computedsum work correctly setup reduced property depends another reduced property referenced template able create small example array changes value sum still next array change get value previous change valsum removed template value correctly updated searching cause nt know related seems strange anyway reducecomputedpropertyinstancemetasetvalue cache set new value later propertydidchange called sets cached value undefined next property request old one", "num": "4940", "d": "5/2014"}, {"title": "sort id sorts strings", "body": "hey wanted sort entries id descending order arraycontroller wrote gave results etc suspected problem javascript sorting numbers strings changed code everything working expected something wrong thanks help advance", "num": "4938", "d": "5/2014"}, {"title": "emberapplicationprototypeinitializer documented", "body": "brief mention main class level documentation initializers exist details use", "num": "4934", "d": "5/2014"}, {"title": "queryparamsnew available beta", "body": "upgrading beta got following error", "num": "4933", "d": "5/2014"}, {"title": "queryparamsnew wrong state returning route query params", "body": "example jsbin scenario navigate list set navigate item clicking item link return list clicking back expected controllerlimit list contains items query string address bar contains limit present list reduced controllerlimit default value query string empty", "num": "4932", "d": "5/2014"}, {"title": "feature add events emberroute", "body": "would nice mixins add behavior emberroute nt use super place", "num": "4923", "d": "5/2014"}, {"title": "emberarray methods nt return emberarray causing chaining throw emberenvextendprototypes false", "body": "jsbin example following throws method returns native instead", "num": "4921", "d": "5/2014"}, {"title": "ember data relationships multiple computedsort cps cause error", "body": "issue seen jsbin", "num": "4919", "d": "5/2014"}, {"title": "bindattr substitutes spaces", "body": "template bindattr src attriubte image tag template simple however resulting html dom", "num": "4911", "d": "5/2014"}, {"title": "linkto active class eagerly update", "body": "recently helper modified eagerly update url response clicks better matches behavior users expect web example click link route url update immediately assumption transition complete successfully transition aborted would update url time previous path see currently class eager update response clicks instead waits transition complete including fetching models may take time class applied creates weird ui mismatch url indicates one state styling applied links indicates another also makes application feel sluggish unresponsive see attached image example note lag url updates link updates propose updating semantics match url", "num": "4908", "d": "5/2014"}, {"title": "feature toggle support", "body": "wrote wrong repository emberdata writing create plugin emberjs implement feature toggle pattern switching features fly based server pushes despite topic nt confuse featuresjson thing already whole draft design written put hands wish know something ember another third part package even official plan implement contribute instead writing", "num": "4907", "d": "5/2014"}, {"title": "testing helpers wait timers flush", "body": "working project current testing helpers nt able used ideas might able fix want understand current thinking first case list items kept sync via change notifications websockets another user deletes item list want briefly show notification overlay remove item list view seconds want write test verifies item removed deleted overlay shown unfortunately existing test helpers etc wait deferred behavior finish including pending timers case show overlay immediately schedule timer remove seconds time test helpers invoked results wanted test removed initial feeling carve exception timers wait deferred behavior helpers maybe use cases thinking", "num": "4906", "d": "5/2014"}, {"title": "using helper enumerable", "body": "linked list implementation implements enumerable mixin interface want use helper templates problem helper works array currently using toarray function enumerable however efficient helper changed work enumerable recommended way using enumerable templates", "num": "4903", "d": "5/2014"}, {"title": "problem relations class", "body": "problem saving relation object class parent check problem read easily set relationship promise fulfilled created another example info mind nt work expect expect create array box instances relation previous box instance question something wrong bug let know need informations", "num": "4902", "d": "5/2014"}, {"title": "runbind returns values sometimes", "body": "using promise callbacks return another promise bound function simply drops digging found returns values current run loop", "num": "4897", "d": "5/2014"}, {"title": "could get dynamic data view", "body": "", "num": "4895", "d": "5/2014"}, {"title": "extend functionobserves signature take array argument", "body": "situation would like pass array properties instead varargs list eg want observe given controller would consistent behavior property accessing method", "num": "4891", "d": "5/2014"}, {"title": "query params alternative", "body": "want website multiple filters example want filter city category brand would like index route handle uris citysomecity citysomecity amp categorysomecategory citysomecity amp categorysomecategory amp brandsomebrand categorysomecategory etc tried adding parameters ember redirect eliminating query params query params feature ready yet alternative get done best practice filtering like without query params feature", "num": "4890", "d": "5/2014"}, {"title": "view longer target", "body": "cc ebryn case found", "num": "4887", "d": "5/2014"}, {"title": "route renderroute disconnectoutlet pairing odd", "body": "connectoutletdisconnectoutlet used pair connectoutlet basically private point since render common api render needs opposite better name unrender derender options match eg instead", "num": "4886", "d": "5/2014"}, {"title": "route render docs confusing", "body": "need better description options including defaults effect", "num": "4885", "d": "5/2014"}, {"title": "arrangedcontent basically undocumented", "body": "", "num": "4884", "d": "5/2014"}, {"title": "access properties inside linkto group", "body": "occur canary beta seems content inside linkto bounded parent controller demo", "num": "4883", "d": "5/2014"}, {"title": "textfield helper missing readonly attributesbinding", "body": "documentation input type type text render html text input following html attributes set via helper readonly however readonly present attribute bindings code export default componentextend textsupport classnames embertextfield tagname input attributebindings type value size pattern name min max accept autocomplete autosave formaction formenctype formmethod formnovalidate formtarget height inputmode list multiple step width", "num": "4882", "d": "5/2014"}, {"title": "enhancement render helper use given controller type", "body": "currently helper creates new controller instance even model object already type using maintain overall expandedcollapsed state wrapping item controller maintains items expandedcollapsed state would useful instance nt drop rendering raw view helper", "num": "4881", "d": "5/2014"}, {"title": "integrate javascript file ember app", "body": "hi started learning emberjs days beforei want integrate javascript files ember app ui changes nt know clear code want integrate html css files put html files templatesfilenamehbs css stylesfilenamescss import appscss likewise merge js files coded outside without using ember thanks advance", "num": "4880", "d": "5/2014"}, {"title": "consider exposing promseobjectpromisearray", "body": "currently ember exposes add assume resolved value promise content things like ember data uses mixin end creating two subclasses cases given natural feels return promises computed properties broken returned promise proxies think would value making classes built framework every library app uses nt reinvent wheel", "num": "4877", "d": "5/2014"}, {"title": "router autolocation creates wrong redirect browsers nt support historylocation app url path", "body": "ember app located url path wwwexamplecomblog wrong redirect made browser nt support history api see example app url path router location go url browser nt support history api redirect made think put basehref front hashsign remove hash", "num": "4876", "d": "5/2014"}, {"title": "queryparams broken", "body": "error getting could find property queryparams object previous ember beta worked fine downgraded", "num": "4872", "d": "5/2014"}, {"title": "custom adapter exposing http verb put delete", "body": "hello ember world creating custom adapter work crazy java back end words tom wondering possible expose http verb adapter parameter something like would neato findquery function store type query verb debugger consolelog findquery custom adapter called return thisajax thisbuildurl typetypekey verb data query thanks support", "num": "4871", "d": "5/2014"}, {"title": "dsstore docs unclear", "body": "unclear method make ajax request return records already inmemory store", "num": "4870", "d": "5/2014"}, {"title": "isarray returns false extended arrayproxy class objects", "body": "javascript var collection objectcollection collection objectcollection collection emberarrayproxyextend objectcollection collectionextend collection collectioncreate content objectcollection objectcollectioncreate content emberisarray collection true emberisarray objectcollection false object objectat property objectcollectionget objectat yep object object length property objectcollectionget length yep expected behavior ran trying object got rejected", "num": "4865", "d": "5/2014"}, {"title": "named vs unnamed iterator block", "body": "sure intended found name iterator block use helper inside loop iterator available rendered controller nt name available sure intended confusing example versus first example controller property defined model second example property jsbin update seems problem properties read rendered controller coming parent controller instead better jsbin demonstrate", "num": "4863", "d": "5/2014"}, {"title": "nested components sending actions parent component", "body": "jsbin shows perfectly go textfield hit enter", "num": "4862", "d": "5/2014"}, {"title": "way binding nested component actions programmatically", "body": "cleanpublic way dynamically bind actions two nested ember components js spent fair amount time digging docs stack exchange posts seems like way via ember public api overlooked feature architectural constraint deliberate design decision background created number ember components dynamically instantiate instance two called dropdownlist choicelist clicked dropdownlist instantiates displays choicelist receives action item choicelist selected obviously easy handlebars template declare component map child action name parent action handler nt really option us largely child component dom structure nt subtree parent component dom tree displayed global modal layer instead basically looking js equivalent second half handlebars declaration helps dynamically instantiating child components within action handler parent component", "num": "4859", "d": "5/2014"}, {"title": "appinitializer injection initialize get called", "body": "important steps code listed runtime random application never gets function since happens random guess async problem nt find solution app emberapplicationcreate ready function appdeferreadiness var registersession function application session applicationregister session main session singleton false instantiate false emberonload emberapplication function application applicationinitializer name session initialize function container application random debugger nt get var store containerlookup store main storefind loading fine seems dom ready function could executed result event triggers injection never happens find strange coding always get called guess lack javascript knowledge appdeferreadiness seem appropriate effect get purpose", "num": "4855", "d": "5/2014"}, {"title": "nested resources issue template names", "body": "hello anyone noted ember nt generate template names nested resources way documentation defined example approutermap function thisresource foo function thisresource foobar path bar function thisroute baz foobarbaz according documentation ember look templates named foo foobar foobarbaz instead auto generates names like foo foobar foobarbaz using debug ember debug ember data debug handlebars debug jquery assetics handlebars filter wich uses handlebars node binary precompile hbs js generates right names documentation defines workaround bug thing since long time like cheers pd excuse bad english", "num": "4852", "d": "5/2014"}, {"title": "afterrender properly taking account simplehandlebarsviews", "body": "using emberrunscheduleonce afterrender thischildviewsdidrender inside didinsertelement working properly ensure simplehandlebarsviews rendered need way make sure view contents including handle bars generated views rendered", "num": "4848", "d": "5/2014"}, {"title": "double arguments slice computedjs", "body": "", "num": "4847", "d": "5/2014"}, {"title": "document", "body": "lightly documented could nt find anything", "num": "4844", "d": "5/2014"}, {"title": "documentation property misspelt", "body": "took long time wondering emberpromiseproxymixin isfullfilled property working read ember source code discovered property name misspelt documentation proper property name uses correct dictionary spelling", "num": "4842", "d": "5/2014"}, {"title": "render outlet option set undefined renders main outlet", "body": "came across issue least would think issue setting outlet option undefined variable like thisrender modal application outlet someundefinedvar template rendered main outlet ie outlet sure defaulting main outlet correctintentional behavior undefined variable passed outlet option made hard debug spelling variable wrong thus silently something different expected something like written var options outlet modal thisrender modal application outlet optionsoutlext would nice warning error message thrown outlet specified undefined ca nt think use case allowing undefined okright jsbin happening let know information needed", "num": "4838", "d": "5/2014"}, {"title": "failing tagname set empty", "body": "know jquery phased dependency soon cost hour fails tagname sure could done thought would report anyway", "num": "4837", "d": "5/2014"}, {"title": "queryparams nt get updates route belong active", "body": "currently using stumbled upon issue qps example route xyz respective controller property xyz route define qp default value controller property value qp present url expected lets say change value qp shows url reset value back default xyz route expected qp removed url issue happens set value nondefault one navigate xyz route xyz route active reset controller property default value navigate back xyz route url still shows qp url value state value reset expected behavior effect xyz route least way reset qps given route description example found jsbin", "num": "4836", "d": "5/2014"}, {"title": "cp watching cp recomputed even nt change", "body": "cp depends another cp first one gets invalidated changes dependencies recomputed even value second one nt changed computation jsbin ilustrate bugunexpected behavior changes secods recomputed every second instead changes nasty hard bug since lives inside guts cp implementation clearly unexpected behavior also faced problem implementing since application depends lot global clock auctions one countdown becoming performance killer main pain point framework right turn show paint rectangles see page full lights colors since views components depend cps depend cp end chain look seconds clock", "num": "4833", "d": "5/2014"}, {"title": "ember seems break indexeddb", "body": "try put object indexeddb pouchdb object array get error nt load ember set goes fine first guess would things added array prototype properly set nonenumerable error question js bin reproduce see pouchdbpouchdb", "num": "4832", "d": "5/2014"}, {"title": "using embercomputedsort itemcontroller computed properties leads index range error resort", "body": "made jsbin illustrate issue see default sort working initially displaying output clicking city button values correctly updated order list changed would expect change reflect new property values click highway city index range error thrown bug hitting using sorting mechanism wrong way", "num": "4831", "d": "5/2014"}, {"title": "silent failure misnamed component", "body": "created component knew work copied code directly working component template injected dom much worked never called errors console long time checking everything could think discovered problem added component app written rather way make ember scream bloody murder happens rather failing silently", "num": "4829", "d": "5/2014"}, {"title": "iterating associative arrays", "body": "seem work associative arrays even way provide key eg let x aa x key work invalid modifying provides way extend provide index value tried extend work collections problem internal resolution ember works strings buti return actually array object resolve emberhandlebarsregisterhelper eachc function eachhelper path options var keywordname item fn argumentslength emberassert pass one argument eachindexed helper must form eachindexed foo bar arguments emberassert arguments reserved word eachindexed inarray arguments index even odd keywordname arguments code added handle key argument argumentslength path arguments options arguments arguments arguments argumentslength var idx emberhandlebarsget arguments var col emberhandlebarsget arguments arguments col idx arguments path arguments path correct index object argumentslength options path path wrap callback function sets index value fn optionsfn function eachfn var keywords arguments datakeywords view arguments dataview index viewcontentindex list viewparentviewget content len listlength optionsfn eachfn render optionshashdatasourcebinding path optionsdatainsidegroup amp amp optionshashgroupedrows amp amp optionshashitemviewclass new emberhandlebarsgroupedeach path options render else return emberhandlebarshelperscollectioncall emberhandlebarseachview options would use handler like eachc aa key would iterate aa key object way get work really need able easily iterate collections providing dynamic key hard would modify path resolution code include something like key resolutionindexing eg aa key could resolved", "num": "4828", "d": "5/2014"}, {"title": "please add ability parse handlebars within handlebars", "body": "find difficult simple things along standard programming practices would nice could use handlebars inside handlebars evaluate eg name would first evaluate name attempt iterate similarly title name would first evaluate name concatenate title get titlemyname whatever evaluated difference suppose name used inside handlebars creates sort compound binding nt difficult resolve", "num": "4827", "d": "5/2014"}, {"title": "component sendaction received targetobject", "body": "sending named action component action received host controller even declared resorted using private method think bug may enable console jsbin click text notice received", "num": "4826", "d": "5/2014"}, {"title": "errors nt point developer code stack", "body": "quite often ember gives errors descriptive stack nt point dev code instead keeps pointing back ember ember data helpful", "num": "4825", "d": "5/2014"}, {"title": "emcomputedsort manually calling sort nt update template", "body": "attempting sort array objects property seeing inconsistent behavior different options available sorting wanted demonstrate differences get clarity expected behavior either get use cases behaviors pinpoint bug four sorting options arraycontroller function function jsbin demonstrating curious thing methods exhibit unexpected behavior computed properties seem computing consolelog updating template", "num": "4824", "d": "5/2014"}, {"title": "eachhelper itemcontroller broken context", "body": "works ok ok beta canary see context different expected potentially related braking change intentional please ignore issue", "num": "4822", "d": "5/2014"}, {"title": "documentation controller section", "body": "read doc today managing dependencies controllers first example list believe make independent route comments like comments fix think well correct wrong still fairly new ember think got ember way", "num": "4820", "d": "5/2014"}, {"title": "emberonerror handlers allow error bubbling", "body": "want handler captures error also lets bubble console print well seems returning let error bubble however using coffeescript returning value also let error bubble way let error bubble remove handler entirely using workaround using ember", "num": "4817", "d": "5/2014"}, {"title": "emberjs project emberjs site crash firefox nightly", "body": "hi latest version firefox nightly crashes visit emberjscom using latest osx mavericks describe complex way reproducing crash visit site browser crashes thing happens load one ember apps nightly point see anything console browser crashes log see safari debug debug ember emberjs line debug debug ember data emberjs line debug debug handlebars emberjs line debug debug jquery emberjs line sadly show publicly app due work someone happy debug get little bit help right really know attack issue ideas", "num": "4816", "d": "5/2014"}, {"title": "ca nt use linkto helper inside child view", "body": "found two possibly related issues ember regarding routes try use linkto helper inside child view associated route controller bound get javascript error emberapplication nt get generated dom error typeerror get container null example workaround first issue tried inside child view binding action thistransitiontoroute nt break rendering clicked action throw following javascript error error typeerror target null example", "num": "4815", "d": "5/2014"}, {"title": "mandatory setter check configurable", "body": "mandatory setter code debug build check objectgetownpropertydescriptor obj keyname configurable attempting install mandatory setter", "num": "4814", "d": "5/2014"}, {"title": "error emberjs safari", "body": "got use ember upload image button clicked trigger click event observe files change set controller js erpimageuploadview embertextfieldextend emberhandlebarshelper imgupload erpimageuploadview html upload imgupload type file multiple true id upload class hidden filesfiles file files filename error show safari emberjs emberprodjs emberminjs work fine use workaround solution change advice", "num": "4813", "d": "5/2014"}, {"title": "confusing error message observer named", "body": "core bug chalked user error tracking bug took good hours mostly error message stack trace misleading add init observer function ends get nondescript error message might seem like odd thing happen writing observers fire init change bound properties eg case reason allow bound properties could warning error calling function ending binding happy add pull request wanted see people thought first", "num": "4811", "d": "5/2014"}, {"title": "bindings updated handlebars expressions using pushobject segment literal notation", "body": "somearray get updated object pushed somearray already containing objects see fiddle pressing add third button object pushed array handlebars expression updated html jsfiddle primitives objects", "num": "4806", "d": "5/2014"}, {"title": "improve error message error loading route error assertion failed arrayproxy expects array emberarrayproxy passed object", "body": "error message pretty obvious means fix sometimes obvious specific route referred would useful kinds errors could provide name path route error message would make error less confusing easier act upon sure exact implementation needed searching source could find", "num": "4805", "d": "5/2014"}, {"title": "emberbeginpropertychanges private", "body": "suggest making emberbeginpropertychanges emberendpropertychanges part public api cases would convenient disable observers altogether looping objects calling beginpropertychanges method know emberobservable uses methods hood currently enough call beginpropertychanges object disable observers globally yet implementation detail thus sensible exploit production", "num": "4804", "d": "5/2014"}, {"title": "parent div starts changes actions nt get triggered", "body": "see js fiddle line css commented everything works simple component consisting input field followed div iterates collection creates child divs class initially parent div display none input focused gets css child element points action clicking child elements trigger action however instead div action get best way describe bug parent div starts changes actions nt get triggered", "num": "4803", "d": "5/2014"}, {"title": "messing array inside foreachmap loop", "body": "consider following example var aforeach function item consolelog call aremoveobject item case printed two times expect printed three times looked source using method source problem use normal loop way printer three times behaviour expect", "num": "4801", "d": "5/2014"}, {"title": "mapby parent yields window object nulls", "body": "function recurses tree source array leaf nodes collecting parents along way via normally yields undefined suppose ever yields null next pass array get parents parents function fell infinite loop led discover yields window object nulls refers back window nice", "num": "4798", "d": "5/2014"}, {"body": "jsbin boils see simplest case believe issue itempropertykeys points shared global structure eg global clock changes shared global property nt seem invalidate itemlevel cps used filter invalidation pretty sure reduce cps affected", "d": "5/2014"}, {"body": "machty seems aligned issues seen past believe related", "d": "5/2014"}, {"body": "fwoeck surprised occurs ever init could provide reproduction jsbin failing test form would help understand better", "d": "5/2014"}, {"body": "hmm fault nt include super controller init function exploded called appreset closing sorry confusion well might add assertion helpful hint", "d": "5/2014"}, {"body": "fwoeck sure assertion many things could break subclass something nt call super methods overwrite maybe", "d": "5/2014"}, {"body": "always call override internal methods also exactly recommend overriding first place causes large number problems folks", "d": "5/2014"}, {"body": "rjackson said init way ensure ordering initialize properties without emitting change events internals always prefer init super reasons", "d": "5/2014"}, {"body": "yup agreed point specifically related app code absolutely times need actually change default init behaviors would still require override basically advising use default app code resort overriding must vast majority scenarios seen app code would work perfectly well one less footgun", "d": "5/2014"}, {"body": "rjackson remember change event thing though properties set init nt cause extra change events object beings life variables set", "d": "5/2014"}, {"body": "trying nest tags valid html quoting p element represents paragraph contain blocklevel elements including p tag automatically ended next block element found following something somethingelse interpreted rendered browser something somethingelse browser autocorrects metamorphs sync since parent elements anymore", "d": "5/2014"}, {"body": "thanks man", "d": "5/2014"}, {"body": "cc stefanpenner krisselden", "d": "5/2014"}, {"body": "wycats happen know version ember ask since many changes happened master included betas next week", "d": "5/2014"}, {"body": "one", "d": "5/2014"}, {"body": "yep routedriven controllers probably say something like", "d": "5/2014"}, {"body": "wycats", "d": "5/2014"}, {"body": "think likely running issue seems imply since svg essentially supported jquery nt really expect work ember cd likely fixed htmlbars", "d": "5/2014"}, {"body": "believe heard ebryn svg issue jquery ca nt recall details top head though", "d": "5/2014"}, {"body": "unfortunate current effort htmlbars may satisfy issue would empty text node also cause issues", "d": "5/2014"}, {"body": "ok interesting jsbin created actually works great nt sure test directly going route saw popout button however production code similar action issue perhaps code parent resource returning promise via jquery ajax edit example tomorrow issue ca nt reproduced close bug", "d": "5/2014"}, {"body": "closing found work around creating clean jsbin problem proving difficult", "d": "5/2014"}, {"body": "provide bit detail specific testsetup globals mode embercli resolver throw test project step", "d": "5/2014"}, {"body": "rjackson actually running tests qunit need smile", "d": "5/2014"}, {"body": "duplicate", "d": "5/2014"}, {"body": "jsbin click go action go back index get assertion failed array converted string also consolelog model method route logs params route first accessed logs array go action back using linkto logs string", "d": "5/2014"}, {"body": "sorry double issue wanted edit something", "d": "5/2014"}, {"body": "patricklx need create another issue edit click edit link near top issue looks like pencil", "d": "5/2014"}, {"body": "closing favor", "d": "5/2014"}, {"body": "updates", "d": "5/2014"}, {"body": "rjackson line refered reopening class actual definition initialization", "d": "5/2014"}, {"body": "anshdesire first link made function directly related initializers running part setup second link referenced issue body significantly lacking details", "d": "5/2014"}, {"body": "specifically initializers number properties addition method also ability specify ordering via believe information documented", "d": "5/2014"}, {"body": "feature flags available beta builds", "d": "5/2014"}, {"body": "unfortunately made mistake earlier builds resulted available sorry troubles", "d": "5/2014"}, {"body": "rjackson use queryparamsnew need implement sortable table product going online bug make confused spent half day dig use", "d": "5/2014"}, {"body": "rayqian short somewhat rude answer ship ready comfortable final api great care insane amount work gone making reality jeopardize work public api rushing halfbaked feature said pushing hard query params enabled still bit work done next week make happen though", "d": "5/2014"}, {"body": "error present transition done controllertransitiontoroute routetransitionto linkto helper works expected", "d": "5/2014"}, {"body": "closed accidentally sorry", "d": "5/2014"}, {"body": "agreed would definitely preferable", "d": "5/2014"}, {"body": "throw", "d": "5/2014"}, {"body": "nothing kill die", "d": "5/2014"}, {"body": "cc hjdivad", "d": "5/2014"}, {"body": "fairly sure nt bug ca nt sure information provided would mind putting together jsbin demoing issue use base", "d": "5/2014"}, {"body": "seems work fine likely nt think reopen reproducing steps", "d": "5/2014"}, {"body": "yah works fine sorry bother forgot preceding tag case anyone runs future", "d": "5/2014"}, {"body": "confirm makes apps appear slow although nt ember thing ember apps utilize youtube style progress indicator seem give much faster experience maybe intercom guys would interested also adding", "d": "5/2014"}, {"body": "could solved using thinking active class eager would otherwise never get applied element would always going directly active inactive vice versa", "d": "5/2014"}, {"body": "jdjkelly good idea solution today perhaps could allow hash option set tomdale thoughts", "d": "5/2014"}, {"body": "seems like always default unless specified otherwise", "d": "5/2014"}, {"body": "expected applied transitioned nt seem case loading docs seem verify", "d": "5/2014"}, {"body": "cc machty might input", "d": "5/2014"}, {"body": "immediate plans roll framework let experimentation plugin ecosystem see one particular stands place adding plugins significantly easier today", "d": "5/2014"}, {"body": "ok thanks gon na write one see goes idea goes well present discussion page thanks", "d": "5/2014"}, {"body": "discussed previously helpers sync never implicitly pause execution instead used wait async needed js fillin username tom click saveuser andthen function see results asynchrony triggered sync actions additional test helpers function invoked lazily create promise fulfills current pendings settled reject action performed failed js example would alternatively become fillin username tom click saveuser function see results asynchrony triggered sync actions results considerably simpler implementation helpers work regardless ongoing timersasync etc making tests actually debugable", "d": "5/2014"}, {"body": "discussed previously stefanpenner discussions github discourse somewhere", "d": "5/2014"}, {"body": "tomdale last core team meeting", "d": "5/2014"}, {"body": "stefanpenner honest dark smokefilled rooms always make forgetful", "d": "5/2014"}, {"body": "thought wycats ebryn preferred helper escaped waiting like", "d": "5/2014"}, {"body": "krisselden correct would like discuss detail tomdale since seems like may missed details discussion", "d": "5/2014"}, {"body": "also breaks use cases example", "d": "5/2014"}, {"body": "ember data case worked correctly ember appears break used ember", "d": "5/2014"}, {"body": "u believe emberdata question repository githubcomemberjsdata sort question better suited stackoverflow", "d": "5/2014"}, {"body": "timevans promise callback need used runbind rsvp already always right thing said avoid confusing join never return value low hanging fruit would write test amp remove return", "d": "5/2014"}, {"body": "reference link changed stefanpenner spec runjoin says return new runloop already nt one remove feature completely", "d": "5/2014"}, {"body": "never return value", "d": "5/2014"}, {"body": "hwoarangzk specified function make computed property instead working fiddle", "d": "5/2014"}, {"body": "questions best asked stackoverflow tagged emberjs", "d": "5/2014"}, {"body": "got thank u find stackoverflow tag", "d": "5/2014"}, {"body": "hwoarangzk tags like emberjs embermodel emberappkit", "d": "5/2014"}, {"body": "thanks lot new could u please show url u mentioned emberjs tag stackoverflow", "d": "5/2014"}, {"body": "need go search emberjs embermodel emberappkit tages get solutions many questions", "d": "5/2014"}, {"body": "thank guy grateful \u539f\u59cb\u90ae\u4ef6 \u53d1\u4ef6\u4eba swapnil tripathi notifications githubcom \u53d1\u9001\u65f6\u95f4 \u661f\u671f\u4e09 \u6536\u4ef6\u4eba emberjsemberjs emberjs noreplygithubcom \u6284\u9001 \u6697\u591c\u7cbe\u7075 qqcom \u4e3b\u9898 emberjs could get dynamic data view need go search emberjs embermodel emberappkit tages get solutions many questions reply email directly view github", "d": "5/2014"}, {"body": "apologies problem case obviously reference global ns controller", "d": "5/2014"}, {"body": "hey nt really seem like bug try hard keep issue tracker focused issues could reopen question would likely better venue get help", "d": "5/2014"}, {"body": "probably appropriate stackoverflow query params going beta shortly probably makes sense wait", "d": "5/2014"}, {"body": "ready production", "d": "5/2014"}, {"body": "ship feature enabled default ready production trying include query params support hit stable release approximately weeks", "d": "5/2014"}, {"body": "look forward", "d": "5/2014"}, {"body": "expected able call ended", "d": "5/2014"}, {"body": "something better definitely", "d": "5/2014"}, {"body": "would protected api js thing people extend arrayproxy nt done composeable way mess break sortablemixin", "d": "5/2014"}, {"body": "cc machty ebryn stefanpenner", "d": "5/2014"}, {"body": "hitting", "d": "5/2014"}, {"body": "uses textsupport mixin provides attribute binding var textsupport mixincreate targetactionsupport value", "d": "5/2014"}, {"body": "jdjkelly mentioned inherited textsupport", "d": "5/2014"}, {"body": "targets parent controller may different though theory could skip intermediate controller give desire", "d": "5/2014"}, {"body": "ok thanks extra info see poke around come something pr", "d": "5/2014"}, {"body": "rupurt nt know understand well could workaround", "d": "5/2014"}, {"body": "cool nt know could closing", "d": "5/2014"}, {"body": "rupurt tbh sure possible seems like inject controller almost helpers obsviously could make sense", "d": "5/2014"}, {"body": "supposed work see", "d": "5/2014"}, {"body": "mmun correct", "d": "5/2014"}, {"body": "mmun basically tried op provided fiddle seems work nt know bad side effects sleeping errors something wrong perhaps go deeper doc actually nt know bestbad practices around anyway sorry giving bad workaround issue reopen", "d": "5/2014"}, {"body": "mmun rjackson quickly looking render helper code seems like right though", "d": "5/2014"}, {"body": "thanks tracking correct render helper offer specific support specifying controller mmum thought reason worked due bug withcontroller originally implemented subsequently fixed", "d": "5/2014"}, {"body": "rjackson problem actually bit confused since going use case helper instantiate new controller ca nt see passed controller set view solution seems work finally nt know really supposed", "d": "5/2014"}, {"body": "hey harishankarayandev harishankarayandev find help question ways stackoverflow tag question emberjs also ask irc channel emberjs chatfreenodenet", "d": "5/2014"}, {"body": "hey jdjkelly got response stackoverflow saying use grunt gruntcontribconcat concatenate files mean ca nt get asked nobody responded", "d": "5/2014"}, {"body": "place vendor folder load js indexhtml", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "see downside powerful primitives", "d": "5/2014"}, {"body": "prefer call expose ember", "d": "5/2014"}, {"body": "would like make promise subclasses object array proxy mixed would require refactoring proxy stuff would feel much less janky would nt constantly spawning wrapped promises", "d": "5/2014"}, {"body": "sounds like great step people rolling data layer earlier version app used promiseobject promisearray copied two lines emberdata stefanpenner would confusing lives namespace", "d": "5/2014"}, {"body": "joostdevries subclass live anywhere want today given spec compliant actually must complicated slow assimilation process convert back safe instances entry results slow path array object promiseproxy objects promises complicated slow assimilation process optimal case would fast path promises objectproxypromise arrayproxypromise result promiseall complicated slow assimilation process two options make objectproxypromise arrayproxypromise subclasses lt good idea concoct nonstandard coercion technique lt dubious idea note scenario etc", "d": "5/2014"}, {"body": "stefanpenner would basically make promiseproxymixin obsolete sounds like good solution primary concern making powerfull classes transparent developers think people trying ember first time helpful", "d": "5/2014"}, {"body": "joostdevries think powerful classes potentially overwhelming developers transparent realize exist become useful maybe solved expose front center async stuff", "d": "5/2014"}, {"body": "agree basically two steps refactor promiseproxies expose classes people writing data layer think tomdale aiming easy way get promisebased emberlike behaviour computed properties", "d": "5/2014"}, {"body": "always expose think reason nt wrote promise proxy stuff unsure outcome nervous points outlined", "d": "5/2014"}, {"body": "believe query params going release disabled currently track want keep using recommend switching canary builds though always inherent risk", "d": "5/2014"}, {"body": "ah explains stay working fine wait beta thanks", "d": "5/2014"}, {"body": "seems like emberdata question repo githubcomemberjsdata", "d": "5/2014"}, {"body": "thanks stefan", "d": "5/2014"}, {"body": "emberdata lives likely appropriate open issue", "d": "5/2014"}, {"body": "probably fix upstream rsvp check arraylike objects instead arrays think stefanpenner", "d": "5/2014"}, {"body": "workaround use convert native js array", "d": "5/2014"}, {"body": "fivetanley objects wont work correctly rsvp support maybe rsvp try coerce unsure rjackson add friday agenda", "d": "5/2014"}, {"body": "wonder couldshould override support behavior initial instinct workaround calling", "d": "5/2014"}, {"body": "nervous supporting nonnative arrays coercing coercion might fine", "d": "5/2014"}, {"body": "thanks looking two issues think one whether behaves correctly regard whether rsvp handle either", "d": "5/2014"}, {"body": "mehulkar believe sorted master confirm", "d": "5/2014"}, {"body": "stefanpenner way get build master tried canary build problem", "d": "5/2014"}, {"body": "common problem something love solution", "d": "5/2014"}, {"body": "thanks responding coworker pointed setting childaction parentaction child component js actually job sheepishly closed issue kosher way achieving additional magic going declared handlebars", "d": "5/2014"}, {"body": "happens initializer nt inside emberonload nt think need onload never seen used using modules work may dylanmensaert notifications githubcom wrote important steps code listed runtime random application never gets initializefunction since happens random guess async problem nt find solution app emberapplicationcreate ready function appdeferreadiness emberonload emberapplication function application applicationinitializer name session initialize function container application random nt get var store containerlookup store main browser tab focused loading fine execute storefind loading fine seems dom ready initialize function could executed result ready event triggers injection never happens appdeferreadiness seem appropriate effect get purpose reply email directly view github", "d": "5/2014"}, {"body": "already tried happens", "d": "5/2014"}, {"body": "assuming injection nt happen initializer always called deduced fact works nt call injection work need register injection create objects best time application initializer guaranteed run application starts currently registering injection asynchronously finding session means application started route controller adapter might created injection occurs another issue might issue since ca nt see code example code register tldr nt believe bug", "d": "5/2014"}, {"body": "teddyzeenny updated example additional code additionally though inject components set people inject ready event", "d": "5/2014"}, {"body": "dylanmensaert leaves first issue nt inject register application started objects created", "d": "5/2014"}, {"body": "teddyzeenny thank much although sure seem inject session every time problem remains first route called always session undefined transition route session set correctly first route load mostly indexroute session undefined edit fixed put appadvancereadiness initializer thanks lot", "d": "5/2014"}, {"body": "one thing inject inside initializer later fulfills application route hook wait session loading initial route", "d": "5/2014"}, {"body": "closing bug feel free ping freenode emberjs channel teddyz happy help", "d": "5/2014"}, {"body": "master also explode try add injection rules object rules apply already instantiated", "d": "5/2014"}, {"body": "dstauffer provide details would absolutely bug without jsbin version ember occurring example code hard impossible diagnose", "d": "5/2014"}, {"body": "suspect entering render queue", "d": "5/2014"}, {"body": "thought little secret", "d": "5/2014"}, {"body": "bjbrewster thanks rjackson ping merged asap probably", "d": "5/2014"}, {"body": "thoov think checking would involve hackier solution since option mandate", "d": "5/2014"}, {"body": "think raise property value undefined seems purely like selftroll case see edge cases wanted behavior cost selftroll seems much higher", "d": "5/2014"}, {"body": "completely agreed basically assert property exists value undefinednull", "d": "5/2014"}, {"body": "rjackson thinking something like emberassert outlet option set undefined optionshasownproperty outlet amp amp isempty optionsoutlet either normalize function added assertion broke several tests unsure submitting pr", "d": "5/2014"}, {"body": "also similar check done disconnectoutlet", "d": "5/2014"}, {"body": "likely error assertion bug production blow away outlet", "d": "5/2014"}, {"body": "think expected behaviour gets html element nt one would expect", "d": "5/2014"}, {"body": "probably using span tag imo guess expectation would get html node ie case textnode gets html element", "d": "5/2014"}, {"body": "understand issue makes sense maybe error message something sure exactly would good save someone else time finding like maybe even note docs", "d": "5/2014"}, {"body": "component element bit strange use case tag component nt pretty surprised anyone would actually nt think framework job tell something quite correctly ide documentation programmers helping otherwise end framework every possible error anyone ever made bloating codebase", "d": "5/2014"}, {"body": "applicable views components example use case viewcomponent contains two tr tags wrapper around break clean dom said sure ember policy kind issue hence opened issue instead submitting pr happy close scope", "d": "5/2014"}, {"body": "return tagname immediate children could collection would return strange collection collection might growshrink without correct hooks gets pretty confusing", "d": "5/2014"}, {"body": "hi ran issue agree responsis valid scenario think problem returning collection mistaken already returns jquery object interpreted collection would expect return child elements jquery object tagname property", "d": "5/2014"}, {"body": "first thing query params enabled betas ship tonight feature flags stripped true whole time needwant use feature flags need use canary builds", "d": "5/2014"}, {"body": "good know updates using canary embercli", "d": "5/2014"}, {"body": "mean queryparamsnew going make final", "d": "5/2014"}, {"body": "zonak correct unless feature value beta branch way next release", "d": "5/2014"}, {"body": "zonak confirm wo nt final targeting final working like crazy speak", "d": "5/2014"}, {"body": "machty working main repo fork still issues qpnew moment got running production app maybe help", "d": "5/2014"}, {"body": "plan final qp work done end weekend meeting stef final details today flesh last questions", "d": "5/2014"}, {"body": "cool think ran new bug qp arrays serialized multiple times probably caused merge want open issue", "d": "5/2014"}, {"body": "machty tall progress", "d": "5/2014"}, {"body": "machty works", "d": "5/2014"}, {"body": "opakalex certainly goal query params real answer ship ready", "d": "5/2014"}, {"body": "rjackson thanks", "d": "5/2014"}, {"body": "cc rjackson", "d": "5/2014"}, {"body": "known plans optimize case view layer absorb extra churn though", "d": "5/2014"}, {"body": "reputation truth fast", "d": "5/2014"}, {"body": "nt think responsability view lawyer turns talking pete hunt days ago conference sold making view responsable check something changes like react", "d": "5/2014"}, {"body": "view responsible turns binding layer absorbs extra cp churn showed view layer gets data via binding system virtue binding system absorbing change events view manifest even notice problem", "d": "5/2014"}, {"body": "extra change events currently propagating system cp keeping track original value known problem plan address time result breaking change krisselden already issue tracking", "d": "5/2014"}, {"body": "hmm meah right seeing repaints happening way example kind properties seems things repainted try make another jsbin anyway nt want example cp expensive computation recomputed without need know critical point framework since cp ground everything built", "d": "5/2014"}, {"body": "yeah struggling issue well least emberdata serialized object twice see repaint thought maybe specific emberdata seems happen ember", "d": "5/2014"}, {"body": "nope problem enumerablilty", "d": "5/2014"}, {"body": "generally looks like breaking ability structured clone something", "d": "5/2014"}, {"body": "though break web workers tell nt know structured cloning implemented way", "d": "5/2014"}, {"body": "fwiw used emberjs raw indexeddb without issue see pretty old gist", "d": "5/2014"}, {"body": "calling recordserialize objects putting indexdb well good ember app nt deal fact everything else using indexeddb broken ember page", "d": "5/2014"}, {"body": "stefanpenner ideas one", "d": "5/2014"}, {"body": "knownasilya nt chance look yet try find time weekend busy client work right", "d": "5/2014"}, {"body": "nt see city button", "d": "5/2014"}, {"body": "sorry seems jsbin nt saved yet", "d": "5/2014"}, {"body": "weird click times end beta gamma gamma", "d": "5/2014"}, {"body": "yep also index range error thrown see error way using embercomputedsort", "d": "5/2014"}, {"body": "sorry bit beyond seems sorting using asc computed property mentioned anything could find net api seems like found bug nt even know usage correct said sure code matching documentation provided reducecomputed computedsort might best provide function rather use static sort order going change sort direction sure supposed used way using even use would work correctly get asc syntax", "d": "5/2014"}, {"body": "saw example", "d": "5/2014"}, {"body": "cool maybe ask levelbossmike either way nt think great way something sort order changing like said means expert stuff sorry bringing noise", "d": "5/2014"}, {"body": "found solution seems expects property itemcontroller one sorting change one one time desired behaviour", "d": "5/2014"}, {"body": "running replaced using sortproperties array controller destroys controllers resort computedsort ca nt win solution eliminate let behaviour happen", "d": "5/2014"}, {"body": "im unsure anything sane ideas welcome", "d": "5/2014"}, {"body": "sorry think anything component perfectly valid without backing object template components definitely thing try start guessing missing object would stop might impact", "d": "5/2014"}, {"body": "figured case thought would check case point component perfectly valid without backing embercomponent object pretty much piece information needed know going careful", "d": "5/2014"}, {"body": "handlebars supports subexpressions version allow write concat function point would bound believe htmlbars future version handlebars binding code builds top handlebars would allow use bound sexprs would end syntax similar suggest closing issue really actionable directly various teams hard work making variation work stay tuned", "d": "5/2014"}, {"body": "closing issue terribly actionable point specific reproducible scenario please open issue specific error provide jsbin along steps needed reproduce track error please feel free open pull request adding helpful assertion error message make sure prefix pr commit get fix right branches definitely consider poor error messages bug want make developer experience easy enjoyable possible", "d": "5/2014"}, {"body": "saying tracking specific instance happens happens time good indication causing error problem begin idea ember reports errors neither average developer using ember would nt successful pull requests correct behavior", "d": "5/2014"}, {"body": "mgenev saying ember open source need help magically fix errors without feedback input provide scenario causing error specifically something easily testplay like jsbin absolutely fix thank much helping", "d": "5/2014"}, {"body": "ok try file instances find thanks", "d": "5/2014"}, {"body": "often result something queued runloop result user code working chrome team preserve virtual stacks currently lost someday finish end least buy", "d": "5/2014"}, {"body": "discussion people complaining exact issue google part ember definitely quite lacking", "d": "5/2014"}, {"body": "mgenev chromefirefox issue make sure also pester", "d": "5/2014"}, {"body": "weird seem template updating thing computed properties recomputed", "d": "5/2014"}, {"body": "worked mehulkar yesterday definitely looks like sort racehorse race condition cps recomputing template rerenders plot thickens wrapping child view race condition longer factor suspect may problem helper see", "d": "5/2014"}, {"body": "another interesting one click sort button addobj button ewot", "d": "5/2014"}, {"body": "tried using caused break", "d": "5/2014"}, {"body": "seems two nt working nt working different reasons one using working returning exact instance every time operates instance nt return copy array contrast return copy array first copy array notice working one using nt working actually updating property updating object inside therefor computed property nt know triggered update change magically works modified version jsbin proof probably close one", "d": "5/2014"}, {"body": "simpler expected thanks blesh", "d": "5/2014"}, {"body": "boom angular pro blesh solving ember issues", "d": "5/2014"}, {"body": "javascript thing work", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "another way use emcomputedsort define sort properties believe provides necessary dependencies works fiddle", "d": "5/2014"}, {"body": "missing examples behaviour changed previously buggy nt set item controller hth", "d": "5/2014"}, {"body": "agreed believe new behavior correct previously context always changed itemcontrollers even used keyword semantics", "d": "5/2014"}, {"body": "using resource nested way like give nested urls ie give root access route object would give access route", "d": "5/2014"}, {"body": "mattma knownasilya correct resets name route nests discovered use ember look using result looking since resource resets namespace scope", "d": "5/2014"}, {"body": "rjackson right thank", "d": "5/2014"}, {"body": "nt bug rather expected behavior", "d": "5/2014"}, {"body": "could", "d": "5/2014"}, {"body": "stack trace", "d": "5/2014"}, {"body": "visited emberjscom ff nightly issue particular page ember inspector add", "d": "5/2014"}, {"body": "krisselden suspect fixed ff nightlies", "d": "5/2014"}, {"body": "thing issue anymore firefox nightly updated times since crash gone reproduce anymore close issue", "d": "5/2014"}, {"body": "manually creating controllers assigning views work must let ember instantiate controllers", "d": "5/2014"}, {"body": "thanks helping find correct way using render helper case real code template files broken using precompiler using requirejs move precompiler something like embertemplates user templatetextgoeshere since original functionality asked nt supported could issue converted logging meaningful error message least debug build", "d": "5/2014"}, {"body": "going mark closed hoping time soon fork try create pr either documentation console logs", "d": "5/2014"}, {"body": "guess something debug version ember configure setter warn set nt use emberset observed try emberprodjs emberminjs build ember also jsbin jsfiddle would helpful", "d": "5/2014"}, {"body": "", "d": "5/2014"}, {"body": "opened specific issue", "d": "5/2014"}, {"body": "disable feature debug build setting envmandatorysetter false binding properties nt configurable", "d": "5/2014"}, {"body": "felt pain huge amount well reckon would extremely simple fix whole class bugs around usererror bugs simply writing name thing get trying get ie backtrace specified arguments passed functions like get get quite generic means nothign without argument like send", "d": "5/2014"}, {"body": "reserved bindings rewritten one end property names intent otherwise must choose name", "d": "5/2014"}, {"body": "absolutely agreed choice property name wrong however complaining behavior error message bad documentation bug error messages type documentation reason allow event listeners using bound properties disallowing would one easy way give better error message example seems like invalid least provide warning", "d": "5/2014"}, {"body": "maybe another solution reason allow functions value property ending usually would expect string call emberbinding returns object error message trying assign function similar", "d": "5/2014"}, {"body": "zaius development assertion would pr would likely accepted", "d": "5/2014"}, {"body": "first render works properly handlebars appears support bound noticed think supported use case", "d": "5/2014"}, {"body": "reason supported support feature extend something write new helper", "d": "5/2014"}, {"body": "setting another array object also works", "d": "5/2014"}, {"body": "ember nt support binding handlebars syntax nt one support accomplish similar things custom helper would take array index parameters even computed property depending situation", "d": "5/2014"}, {"body": "use case seems like bad ie problematic thing imho", "d": "5/2014"}, {"body": "guess basically want something like following right rather ensure forcing runloop call execution want ensure runloop nt called function emberrun function updateproperties happen within one suspended beginpropertychanges endpropertychanges set", "d": "5/2014"}, {"body": "app supports pushbased updates server ui app bunch jqueryui sortable lists server pushes update user sorting something dom gets rerendered messes sorting functionality solution disable observers sorting right call emberbeginpropertychangesendpropertychanges kinda feels bad since methods private", "d": "5/2014"}, {"body": "like jump say similar use case ftokarev sometimes large batches changes need applied apply operation nt atomic things happen observers fired several times instead depending observers used cause dom reflow dozens times quick succession validation logic fail observers fired two dependent operations possibly different objects think ability universally pause change observers incredibly useful reasons pausing single object useful would love methods moved public api least something equivalent", "d": "5/2014"}, {"body": "yeah really want nt pause entire world wrapper set actions transaction imho ftokarev nt disabling property observers invoking kind transaction around objects wants change finished changes proceed would excellent addition imho perhaps renamed feature dom transactions", "d": "5/2014"}, {"body": "would ideal scenario overkill chances ember run loop going wrap operations single operation observers likely nt going able fire end anyway making public would guarantee would continue happen even run loop implementation details changed words javascript singlethreaded pausing observers transaction likely going pausing globally sense adding features code want practically already", "d": "5/2014"}, {"body": "gordonkristan observers currently synchronous happen soon set properties runloop wo nt wrap single operation something triggers observer multiple times docs think talk making asynchronous future though", "d": "5/2014"}, {"body": "right mistake remember reading article weeks back looks like mixed information binding propagation seen gets scheduled sync queue eventually executed runloop observers hand fire immediately watched property changes without first scheduled runloop queue really need learn run loop", "d": "5/2014"}, {"body": "correct way wrapping entire frame multiple pushes low level api encourage direct use", "d": "5/2014"}, {"body": "stefanpenner want clarify bit described need prevent ember changing dom user performs sorting suggest need call sorting starts sorting ends right", "d": "5/2014"}, {"body": "suggested using ember run", "d": "5/2014"}, {"body": "ftokarev private nt balance call break app public way wraps function beginend tryfinally", "d": "5/2014"}, {"body": "using run loop defer work later responds observers better approach general", "d": "5/2014"}, {"body": "gist though sortable maybe help", "d": "5/2014"}, {"body": "krisselden created fiddle illustrate point sort live list solution elegant run loop nt see help case", "d": "5/2014"}, {"body": "looks like probably nt issue ember", "d": "5/2014"}, {"body": "dentuzhik working solution hopefully pr soon originally reported", "d": "5/2014"}, {"body": "happy reopen different issue seems likely", "d": "5/2014"}, {"body": "see details fix", "d": "5/2014"}, {"body": "think needs reapplied without feature flag looks like got chucked", "d": "5/2014"}, {"body": "also possibly needs updating test support hashlocation still got problem", "d": "5/2014"}, {"body": "machty think talked point", "d": "5/2014"}, {"body": "would work force trailing slash instead throwing error land app rooturl app right ember asserts path start provided root url surely location auto smart enough know app means app think cases users would treat different things happy make changes think make sense", "d": "5/2014"}, {"body": "andremalan based current understanding issue unfortunately simple also convinced consider pretty strong assumption demonstrate otherwise please let move discussion back active ticket", "d": "5/2014"}, {"body": "nathanhammond felt pain seeing several error messages referring hashes like oh know js nt hashes ember must implemented using hash object could nt find implementation confused minutes realised error message referring pojo source using hash trouble ie ca nt say keys values useful debugging purposes even sometimes want hash native hash implementation much sure aware rationale one main cons seemed missed people need informed prevalent tendency js devs use object implement values keys finders fly words need think possibly guard cases people use pojo actually expecting dicthash annoying", "d": "5/2014"}, {"body": "julianleviston native supposed wo nt work goes away future probably work fine right got legacy browsers stubborn developers deal sides issue throughout ember codebase believe okay us use objects dictionaries long expecting dynamic keys begin expecting dynamic keys eg opinion move safe implementation", "d": "5/2014"}, {"body": "nathanhammond nt think going away part spec nathanhammond meta cache scary object", "d": "5/2014"}, {"body": "stefanpenner demoted appendix b implementation described terms using trending direction away using property said remains unreliable thing ca nt really work around truly gone realsafe dictionaries make agenda next core team meeting would like implement something decide done want familiarity ember internals contribute ways aside actively looking xss ember probably try abuse fact using full objects dictionaries seems like reasonable attack vector cc webreflection", "d": "5/2014"}, {"body": "nathanhammond correct", "d": "5/2014"}, {"body": "sure oversimplyfing way go performances wo nt compromised much template related object one level indirection", "d": "5/2014"}, {"body": "interesting similar construct already", "d": "5/2014"}, {"body": "need make safe adding prefix underscore fail maybe improve constructor also slightly slower getting returns useful info deleting plus many calls example wo nt actually need summary raw performance concern seeing class would say guys good go kind indirect logic", "d": "5/2014"}, {"body": "webreflection hope focus correctness result would fully expect go ember make sure played nicely safe dictionary implementation done way nt worry weird edge conditions smile rather reinventing wheel would probably adopt adapt hashmap implementation post nt trigger major version bump public api go back add checks cast object dictionary passed dictionary since current state broken exactly broken backwards incompatible changes ember appreciate incredibly detailed research done makes next steps process implementationoriented instead bunch research stefanpenner hey look rjackson snuck inheritingdict could start right appear using container seems handle container lookups added clever feature nt find current container hops parent container could easily built subclass safe dictionary", "d": "5/2014"}, {"body": "inheriting dict around year wonder extract shared rest ember", "d": "5/2014"}, {"body": "nathanhammond guys good go kind indirect logic meant stefanpenner found already adding fix could optional pull request example", "d": "5/2014"}, {"body": "guess get relying github history always forget github nt really understand well believe split create dict inheritingdict start using everywhere", "d": "5/2014"}, {"body": "annoying part prefix cost interned vs non interned string lookup fast object use cases like meta cache overhead pretty high x hasownprop atleast optimizes paths obviously things runtimes impact may tolerable embertemplates meta cache different performance needs seems lobby vendors provide us fast safe object current much slower allocating forcing object dictionary map", "d": "5/2014"}, {"body": "stefanpenner dynamically accessing properties either ways nt chose prefix bigger chars nt see relevantconcrete performance impact key also sure filtering would give better performance prefix concatenation need check imo even could become compromised first time template gets called know happen however since got templates special case accident already suggested specific piece code last least creation objects js fast enough never real concern realworld apps usage worries simply go use time want create non object instance take care", "d": "5/2014"}, {"body": "thoughts related template object objects safe fast webreflection approach good idea play benchmarks later see cost cache misses suspect much better modern browser cheap slower older browsers nt think care cache miss cost drops nicely would interesting see dictionary mode objects inherit behavior investigate tonight issue concat hotspots concat string even short enough nt immediately get interned concat nt free causes extra allocations importantly non interned string lookup fast objects costly interned key lookups eventually concat strings may interned meet correct criteria concat immediately lookup never happen", "d": "5/2014"}, {"body": "bear mind might improve performance fix shenanigans objects old browsers android mobile broken engine nashorn example", "d": "5/2014"}, {"body": "webreflection confirm somewhat alright slightly slower fallback older engines", "d": "5/2014"}, {"body": "please post code cc pushed thanks", "d": "5/2014"}, {"body": "stefanpenner amp nathanhammond issue outlines confusioninitial annoyance hashdicts error messages realise discussion hash object pollution amp performance fwiw", "d": "5/2014"}, {"body": "took dig bug found problem lies function context passedset function packagesemberhandlebarslibhelpersbindingsjs called normal context set correctly refer currently iterated object loop however called context set content view controller think currently iterated object causes problems set alternate flow handles alias notations passed function called end verified setting function context correctly currently iterated object would fix problem inner rendering function called compiled handlebars scripts compiled handlebars script passing wrong context function may related bigger issue one chrmod referenced sure", "d": "5/2014"}, {"body": "closing nt seem issue rather something open separate issue track", "d": "5/2014"}, {"body": "hai sorry delaied reply gordonkristan yes taught work properly like said nt nt know problem side please refer code tried thisset content thisget content pushobjects thisstorefindquery projects params thanks advance regards lokesh", "d": "5/2014"}, {"body": "lokeshkumar code incorrect open question github place report bugs request new features add code repository stackoverflow place get help whenever nt know problem side start stackoverflow like also suggest explain trying ask question otherwise left guessing please provide much context able ie much code around trying", "d": "5/2014"}, {"body": "julianleviston thanks reply sorry inconvenience", "d": "5/2014"}, {"body": "good lokeshkumar", "d": "5/2014"}, {"body": "would awesome", "d": "5/2014"}, {"body": "generally supportive", "d": "5/2014"}, {"body": "feature done fork consensus adding work tests submit pr", "d": "5/2014"}, {"body": "states state documented prefix though likely people used viewstate indom", "d": "5/2014"}, {"body": "submitted move underscored unsure make current names work deprecation", "d": "5/2014"}, {"body": "krisselden know fact brake apps although nt documented graceful", "d": "5/2014"}, {"body": "rjackson confirmed deprecation warnings nt pop scenario", "d": "5/2014"}, {"body": "sure understand access deprecation warning made value underscored property returned", "d": "5/2014"}, {"body": "words work accessing old value results deprecation warning", "d": "5/2014"}, {"body": "someone result deprecation", "d": "5/2014"}, {"body": "awesome sailboat reopened since noticed pulled yet automatically closed pr accepted", "d": "5/2014"}, {"body": "broke upgraded expected", "d": "5/2014"}, {"body": "yes fixed beta series pr referenced", "d": "5/2014"}, {"body": "resolve soon longer wait likely break apps come rely infinite loop bugfix", "d": "5/2014"}, {"body": "fwiw resorted using number places", "d": "5/2014"}, {"body": "behaviour sure bug ember willingly keeping detached dom tree", "d": "5/2014"}, {"body": "machty merged", "d": "5/2014"}, {"body": "matthooks opakalex jsbin local build query params stuff working getting errors original jsbin check seems working", "d": "5/2014"}, {"body": "machty good", "d": "5/2014"}, {"body": "bugs first comment appear fixed think found another bug though click list see list add filters clear list click list url updated filter array returned default state sure intended", "d": "5/2014"}, {"body": "seems latest iteration fixed posting pr shortly", "d": "5/2014"}, {"body": "great looking forward release using dynamic segments meantime little awkward use cases", "d": "5/2014"}, {"body": "beerlington sorry took long get around understand asking trouble thinking right solution seems like caught two desirable behaviors taking provided query param values account computing whether link active paginated list articles page qp would nt generally want link back page default qp value considered active case think full solution involves using sexpression helper pass value helper talked wanting think right use case meantime following hacky thing", "d": "5/2014"}, {"body": "dentuzhik submit pr pull assist bit easier", "d": "5/2014"}, {"body": "possible latest beta build without query params feature", "d": "5/2014"}, {"body": "ran people used use iterate object handlebars guides", "d": "5/2014"}, {"body": "rjackson problem may related linked list implementation ember made enumerable using enumerable mixin interface well want use ember helper expects array helper changed work enumerable implement helper case currently using toarray update linked list efficient", "d": "5/2014"}, {"body": "using embertouch think problem documented public api extended configurable dispatcher injected container docs could recommend inject extended class gain performance improvement", "d": "5/2014"}, {"body": "yes currently people need feature suffer cost", "d": "5/2014"}, {"body": "actually working already see recently implemented htmlbars well tildeiohtmlbars", "d": "5/2014"}, {"body": "mmun maybe problem grunt task check", "d": "5/2014"}, {"body": "reproduce original problem test please offer help seems ember setupfortesting acting differently case updating objects emberrun make linkto sync properly able genereate url instead object id bcardarella example", "d": "5/2014"}, {"body": "try write failing test maybe tomorrow", "d": "5/2014"}, {"body": "seeing issue fwoeck ember ember data updating property used criteria another controller try isolate reproduce bug needed", "d": "5/2014"}, {"body": "closing please post issue still need", "d": "5/2014"}, {"body": "also ran issue emberselect select proper option content array set value bug visible setting domains content array domain current value", "d": "5/2014"}, {"body": "done", "d": "5/2014"}, {"body": "still problem seeing bug fiddle", "d": "5/2014"}, {"body": "might suggest issue closed", "d": "5/2014"}, {"body": "seeing either", "d": "5/2014"}, {"body": "finished first pass managed remove dependencies expecting results ebryn tried removing sizzle broke quite bad supply alternative next pass going look failing tests see replace jquery native code", "d": "5/2014"}, {"body": "locks careful one example lot things implicitly rely keep memory consumption top head jquery unbinds events clear data may added otherwise leak changing using native dom manipulation introduce memory leak ember apps use example jquery ui jquery mobile", "d": "5/2014"}, {"body": "tomdale suggest make sure nt introduce regressions general plan err side aggressiveness reintroduce modules problems detected", "d": "5/2014"}, {"body": "reopen problem using itemcontroller observers async eg", "d": "5/2014"}, {"body": "nt bug explore patterns handle accessible", "d": "5/2014"}, {"body": "yeah bug seems really ugly without good pattern", "d": "5/2014"}, {"body": "gnarly stuff black hole promise need think way makes sense people nt maintain promise library", "d": "5/2014"}, {"body": "gah well sucks", "d": "5/2014"}, {"body": "nixpulvis enable", "d": "5/2014"}, {"body": "faced issue used uppercase computed property template changing lowercase resolved error", "d": "5/2014"}, {"body": "skeptical wagenet surprisingly confirmed chrome android nexus", "d": "5/2014"}, {"body": "opened remote debugging device discovered ember fault jsbin loads lib two finger gesture results following error stack trace says comes seems like bug third party lib related ember cc wagenet", "d": "5/2014"}, {"body": "jdjkelly thanks deep dive suspect close one reopen turn ember", "d": "5/2014"}, {"body": "jsbin demo zdenekkostal shared ember see still much issue ran recently working resolving performancememory leaks ember app explicitly call destroy item controllers", "d": "5/2014"}, {"body": "still issue fix forgot submit pr expect get home today", "d": "5/2014"}, {"body": "awesome thanks", "d": "5/2014"}, {"body": "stefanpenner thanks", "d": "5/2014"}, {"body": "noticed change recently find terrifying particularly changing bindings emcomputedalias instead much time idea whether observing computed property property comes mixin would possible support flag causes ember log warning whenever observer triggered computed property would allow developers set sort intermediate property make dependency explicit order avoid warning perfect since would nt definition time check think could prevent long debugging episodes way check init time object might even better suppose ember could even support debug mode eliminates performance improvement tells got bad dependency although sure developers would leave know use find problem andrew", "d": "5/2014"}, {"body": "default", "d": "5/2014"}, {"body": "explained issue closed", "d": "5/2014"}, {"body": "example capability would nice maybe easy alternative nt able figure one basically used render arraycontroller able take advantage sorting arraycontroller needs able access properties parent controller objectcontroller case whether certain columns sorted switch component looks like lose benefit arraycontroller backing model implement sorting manually", "d": "5/2014"}, {"body": "think question related nothing specific minimal case believe common design click item list get detailed view shown outlet", "d": "5/2014"}, {"body": "agree neverfox reason nested resource routes nt use like nested directory structure default would seem natural unless missing something using eak fwiw", "d": "5/2014"}, {"body": "davidbiehl learn get want way docs sort buried sense default know type point outlets though still relevant think would nice ember nt choke missing templates nothing rendered maybe missing something", "d": "5/2014"}, {"body": "wycats require controller explicitly defined case want render model template moment create empty controller", "d": "5/2014"}, {"body": "believe render accepts model relatively recent change sure stable version", "d": "5/2014"}, {"body": "feature emberroutingaddmodeloption available since", "d": "5/2014"}, {"body": "selvagsz thank", "d": "5/2014"}]