[{"title": "fetch success response vs destroy success response", "body": "believe using success callback fetch function response object directly access properties response looks like response json parsed sent callback hand defining success handler destroy method response parsed string object returned access properties response must jsonparse behavior inconsistent nt responses consistent across success callbacks", "num": "2786", "d": "9/2013"}, {"title": "collectionfetch add true still removes original models", "body": "trying options add true reset false update true remove false together various combinations cases fetch remove original models collections replace new ones trying append new models existing models collection following simple code collectionfetch data offset add true reset false update true remove false success function", "num": "2782", "d": "9/2013"}, {"title": "wrong repo fail", "body": "", "num": "2781", "d": "9/2013"}, {"title": "allow passing custom merge function collection set", "body": "merge routine collection set makes assumption modelmodels passed merging using modelattributes sufficient always case might important instance members model modelattributes optional merge function collection set would allow total control merged one model merge routine broken set safely overridden without completely override set", "num": "2779", "d": "9/2013"}, {"title": "collections care order items insert", "body": "collection comparator etc array json objects loop array objects calling collectionadd object resulting collection original order collectionset arrayofobjects get yet another ordering objects close reality gives", "num": "2777", "d": "9/2013"}, {"title": "calling set collection merge false data ignored matching model found", "body": "calling set collection already existing model id using merge false new model values ignored would expect new values respected trumping old example var c new backbonecollection id foo value old var carlcollectionget foo cset id foo value new merge false cget foo consolelog mget value new fals", "num": "2776", "d": "9/2013"}, {"title": "byid getting lost collection model function", "body": "found bug edge version working collections extending function problem method forgetting check existence passing non model objects overridden model function possibilities may return model instance already added collection bug achieved use cases also example fails javascript var cache var model new backbonemodel id var collection new backbonecollection model cache model backbonecollectionprototypemodel function attrs options return cache attrsid new backbonemodel attrs options consolelog collectionmodels collectionbyid byid collectionset id consolelog collectionmodels collectionbyid byid", "num": "2775", "d": "9/2013"}, {"title": "backbone unavailable using lmd commonjs jquery", "body": "hello using lmd files commonjs style update jquery backbone ca nt see jquery understand reason part jquery commonjslike environments global object thus find jquery object solve problem", "num": "2774", "d": "9/2013"}, {"title": "fix way modeldefaults merged passed attributes", "body": "regression regarding attributes passed model merged defaults introduced usecase document model attributes declaring attributes eg person instantiate model pass values actually want use new behaviour impossible pass attributes value override defaults nt seem like change intentional", "num": "2773", "d": "9/2013"}, {"title": "good idea use backbone reactivejs", "body": "app uses backbone handlebars many elements maintain views tightly coupled makes hard seperate subviews tired manipulating dom elements refactoring legacy code found reactivejs invented solve problems like angular crazy suppose angular breaks solutions use use developing apps might great hard learn people like question reaplcing templates reactivejs possible backbone", "num": "2772", "d": "9/2013"}, {"title": "rangeerror maximum call stack size exceeded collectionset", "body": "chrome nodejs fire exception try call collectionset many entities something", "num": "2767", "d": "9/2013"}, {"title": "ignore hashpart", "body": "working app rely solely browsers nt support simply fall back regular page loads opened issue really way backbone handles routes declared hash backbone intelligently treat hash urls equivalent nonhash urls even possible hash containing url replaced nonhash version well good default behaviour treat url complete unit becomes problem also want support urls hashes case route match unless declared tackle currently override default version strips hash calling original personally would interested seeing either new configuration setting would enabled behaviour backbone core finding combination current configuration would behaviour would definitely interested contributing pr deemed worthy idea otherwise suppose keep monkey patching", "num": "2765", "d": "9/2013"}, {"title": "problem append collection", "body": "working add console see names li json file add next object immediately rendered code windowapp models views collections windowtemplate function id appmodelstable backbonemodelextend appcollectionstables backbonecollectionextend appviewstables backboneviewextend appviewstable backboneviewextend var tablescollection new appcollectionstables var tablesview new appviewstables collection tablescollection thanks answers", "num": "2763", "d": "9/2013"}, {"title": "every event", "body": "propose make fire additional events every regular event came idea thinking problem consistency transitions webapp states cases inner transitions transitions outer world inner transitions mean changes made using app example click ui element transitions outer world mean case user launches webapp certain state visiting url whole issue developing technique universally handle inner outer cases app state write implying webapp built eventdriven architecture use case lets say blogging webapp list blog posts area selected blog post content element list clicked highlighted blog post content must appear inner case user clicked list clear click listview triggers event passes info post selected app highlights element corresponding post contentarea view reacts event shows blog post content somewhere process current url changes something like outer case user visits clicking bookmark browser case nt want write initialization webapp particular url want fire event route visited function universally serves cases event two problems appears problem avoid unnecessary rerenders views function must universal must fully responsible whole apps tate consistency must render views user goes one blog post another rerender blog post list unnecessary solution well solution check something already rendered render example listview already initialized rendered consistencyfunction sees app already view class instantiated rendered certain area document rerenders problem bring views proper state instantiation assume consistencyfunction found view instantiated rendered make listview highlight element instantiation store somewhere state app information post selected listview use information nt like want list view listen event highlight post passed additional data event case already fired caused invocation consistencyfunction checks listview existance case creates want somehow let listview know fired let highlight element solution situation event useful makes possible checks initialization actual event release actual event application shaped consistent state difference app cases fired click ui visit url consistencyfunction check views instantiated document proper state needed data requested instantiate render views needed query server data app serve regular event", "num": "2762", "d": "9/2013"}, {"title": "collectionset peformance issues large data sets", "body": "working large datasets today discovered unfortunate performance issues backbonecollectionset following code hang browser good seconds running profile see time spent processing set function specifically preparemodel eventson get speed also affected exponentially start adding attributes data object anything done improve performance nt think unreasonable", "num": "2760", "d": "9/2013"}, {"title": "callback element created", "body": "callback element created sometimes needed pass attribues constructor extend default view attributes attributes constructor apply element viewjs var view backboneviewextend attributes datarole view beforecreateelement function apply attribues thisattributes extend thisattributes thisoptionsattrs appjs var view new view attrs class hello datatype world", "num": "2758", "d": "9/2013"}, {"title": "attributes nt applied el passed constructor", "body": "logically attributes view applied element constructor html viewjs var view backboneviewextend attributes datarole view appjs var view new view el target case attribue datarole would nt applied el target guess backboneview add attributes necessary replace", "num": "2757", "d": "9/2013"}, {"title": "name conversion methodsproperties initializeattributeschangedattributes", "body": "good naming conversions jquery world like init possible following changes initialize init attributes attrs changedattributes changedattrs", "num": "2756", "d": "9/2013"}, {"title": "collectionon myevent original model", "body": "hi guys way get original model trigger event inside collection without passing limitation experiment different projects existing way get model without pass trigger time workaround found quite boring something like", "num": "2754", "d": "9/2013"}, {"title": "model set update haschanged property correctly", "body": "consider following code mymodel foo bar id mymodelset foo baz changed consolelog mymodelhaschanged gt true mymodelset id unchanged consolelog mymodelhaschanged gt false mymodel foo bar id mymodelset foo baz id changed consolelog mymodelhaschanged gt true design set hashes separately haschanged property reflects last call", "num": "2753", "d": "9/2013"}, {"title": "clone options model fetch model destroy collection fetch", "body": "hello clone options functions", "num": "2752", "d": "9/2013"}, {"title": "changes collection models nt change tojson", "body": "possible remove attributes collection models nt translate view via steps reproduce", "num": "2750", "d": "9/2013"}, {"title": "appsync stringifying object object object", "body": "network panel see call working almost exactly want except turning object object object var data username fubar password thissync create contenttype applicationxwwwformurlencoded data data success function res status thisset res thisloginhandle null res error function model res spec thisloginhandle login time res silent true", "num": "2743", "d": "9/2013"}, {"title": "deprecation jqxhrsuccess jqxhrerror jqxhrcomplete", "body": "jqxhrsuccess jqxhrerror jqxhrcomplete callbacks deprecated jquery prepare code eventual removal use jqxhrdone jqxhrfail jqxhralways instead", "num": "2741", "d": "9/2013"}, {"body": "hi positlabs many reasons enumerated others sprinkled throughout issues interested", "d": "9/2013"}, {"body": "reproduce bug jsfiddlecodepen investigate also version backbone using", "d": "9/2013"}, {"body": "using backbone try setup jsfiddle codepen", "d": "9/2013"}, {"body": "option pass tell models remove", "d": "9/2013"}, {"body": "case let reopen ticket provide failing test case current master ask help irc mailing list", "d": "9/2013"}, {"body": "best know setup jsfiddle echo", "d": "9/2013"}, {"body": "close issue mistake", "d": "9/2013"}, {"body": "merge em case custom merge function would much", "d": "9/2013"}, {"body": "seems like merging involve duplicating lot logic collection set uses determine merges need performed hooks available operations collection set performing type customization would lot cleaner making merge function part model could take another model default behavior would simply call set routine model attributes", "d": "9/2013"}, {"body": "merge method model pretty elegant solution", "d": "9/2013"}, {"body": "", "d": "9/2013"}, {"body": "like suggestion lot would allow primary actor control gets merged passed model could easily override", "d": "9/2013"}, {"body": "order respected provide jsfiddlecodepenetc demonstrating broken behavior", "d": "9/2013"}, {"body": "dead wrong someone modified parent object w broken comparator function told noone hah", "d": "9/2013"}, {"body": "would expect new values respected trumping old exactly working expected imo looking wipe old models use want events", "d": "9/2013"}, {"body": "caseywebdev disagree expected abstract sense calling set object never case set completely ignored regards directly collection set nt want replace every model collection using reset explicitly setting mergefalse expect set collision ids", "d": "9/2013"}, {"body": "caseywebdev would solve case model reflecting version resource update happens resource whole new different set attributes want model reflect new resource retain anything old resource", "d": "9/2013"}, {"body": "never case set completely ignored ignoring duplicate models based functionality least two years wanted replace existing models incoming matching ones presumably etc option would need good use case reasoning existing functionality suffice would solve case model reflecting version resource update happens resource whole new different set attributes saying columns resource change values changing option works great understanding correctly provide realworld example", "d": "9/2013"}, {"body": "updated house longer room mergetrue get room number model may trigger unwanted behavior might logic check room attribute want correct representation model entry user bob", "d": "9/2013"}, {"body": "limitation either way seems data model setting correct send back expected result", "d": "9/2013"}, {"body": "see changes add example work expected", "d": "9/2013"}, {"body": "hey caseywebdev kind weird set attribute inside function prototype request pull fix less macgyver way hahah", "d": "9/2013"}, {"body": "mateusmaso take look overriding actually could fetch cache create new instance", "d": "9/2013"}, {"body": "require jquery solve problem break everyone else app standard part javascript yet like use feel free patch backbone source carry", "d": "9/2013"}, {"body": "hi strange fine underscore suggestion replace current way update smth like anyway thank answer", "d": "9/2013"}, {"body": "backbone models intended able used server used node standard way load scripts using jquery node nt make much sense depending fancy getting course", "d": "9/2013"}, {"body": "still looks broken", "d": "9/2013"}, {"body": "bradleyayers version underscorejs using believe use gt see expected behavior", "d": "9/2013"}, {"body": "tgriesser underscore yes looks like master underscore changed semantics work perhaps documentation bug actual minum required version underscore either good list caveat", "d": "9/2013"}, {"body": "seems reasonable pull see people think", "d": "9/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "really interesting question going look mess", "d": "9/2013"}, {"body": "looks like might way work backbone", "d": "9/2013"}, {"body": "fine question fine bug ticket try irc mailing list", "d": "9/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "hey nikcorg thanks issue try latest develop version believe behavior looking enabled take look information", "d": "9/2013"}, {"body": "hey tgriesser looks like prs reference address issue ignoring hashpart sense nt convert url nonhash version concern really matching routes hash url contains hash matching currently done using complete url including hash afaict neither two issues mentioned address achieve looking change would either happen latter run routers configured former probably option", "d": "9/2013"}, {"body": "nikcorg would able provide failing test case behavior looking", "d": "9/2013"}, {"body": "absolutely start working", "d": "9/2013"}, {"body": "hey tgriesser think test case demonstrate mean commit fork copypaste", "d": "9/2013"}, {"body": "urgh sorry noise sailed fail boat today", "d": "9/2013"}, {"body": "hi nikcorg thanks issue see issue describing thanks test case wondering would need functionality use instead words need support hash url submit patch consider yet certain good direction", "d": "9/2013"}, {"body": "braddunbar nt want simply want hash url useful bookmarkingsharing purposes well scrolling page intended position triggered route merely want able use hashes still able match defined routes like hash nt want generalise issue desire defined routes match either hash part path part url depending configuration definitely submit patch well nt yet wanted feedback idea first", "d": "9/2013"}, {"body": "pulled nikcorg changed strip query hash matching building url seems work well enough", "d": "9/2013"}, {"body": "brilliant thanks", "d": "9/2013"}, {"body": "please use mailing list irc channel types questions", "d": "9/2013"}, {"body": "yep yep irc mailing list appropriate place sort question", "d": "9/2013"}, {"body": "related", "d": "9/2013"}, {"body": "instead push objects instance model instead regular objects see difference compare first thing strikes nonmodel code path creates new object possibly triggers modelvalidationerror anonymous objects array doubt events get triggered though would modify code create model instead anonymous object see improves performance put breakpoint backbone source preparemodel see portion nonmodel codepath code traverses", "d": "9/2013"}, {"body": "much difference creating model instead object improvement minimal see test case", "d": "9/2013"}, {"body": "well poked around bit tests nt able significantly best performance second test really need models collection best recommend move web worker might better determine really need overhead putting many models collection initializing collection models may first many bottlenecks could encounter using collection large sort underscorelodash functions may also show performance problems could use smaller set models move collection needed nt know use case seems representing say rows table nt make sense one process much data nt know necessitates collection size someone else may able help", "d": "9/2013"}, {"body": "globexdesigns might look streak method jquerydatatables backgridjs good implementations starting ideas storing many models collection lead headaches", "d": "9/2013"}, {"body": "glad brought examples exactly ie rendering html tablegrid using data backbone collection right trying evaluate whether using backbone collection able achieve performance looking hoping use collection object could make use lot builtin features sorting filtering events etc takes long initialize may stick using backbone events bypass collection initialization together regardless thought backbone team still consider investigating slow initialization models perhaps maybe offer suggestions moment still nt able track exact methodfunction bottleneck gut feeling says probably clone function somewhere", "d": "9/2013"}, {"body": "docs say core usefulness backbone collections actually implemented underscore collection methods able use underscore methods plain array add syncing events whatever behavior back models need might also look lodash lazyjs underscorecompatible apis focus speed", "d": "9/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "confirming improved performance somewhat new tests seeing opssec improvement item dataset scared try anything larger suspect wo nt usable real world scenario firefox profiler reports preparemodel accounts operational time instead seeing bulk majority processing time still spent backbonemodel set attribute cloning time setting backbone events collection sure anything done", "d": "9/2013"}, {"body": "performance improving patches always welcome said javascript javascript want squeeze possible performance browser especially ie going use raw arrays lots loops intermediate functions objects possible", "d": "9/2013"}, {"body": "right callback please stop opening tickets ask irc channel first", "d": "9/2013"}, {"body": "nope attaching existing element element get otherwise would catch", "d": "9/2013"}, {"body": "nope", "d": "9/2013"}, {"body": "problem simply passing model first arg convention backbone uses everywhere core", "d": "9/2013"}, {"body": "yep yep passing model first argument preferred way think find works rather well", "d": "9/2013"}, {"body": "looks dry would prefer trigger method anyway fine thanks", "d": "9/2013"}, {"body": "yes design considers differences last quick dirty dirty flag implementation looking", "d": "9/2013"}, {"body": "cloned mutated later function would unexpected side effect user options object passed methods suddenly different values nt set", "d": "9/2013"}, {"body": "nt seem like bug performing noop resetting ids model collection since default collection set attrs nt going go away try adding call object work missing something", "d": "9/2013"}, {"body": "philfreo correct want", "d": "9/2013"}, {"body": "sure nt want regardless question stackoverflow irc channel please reserve github issues bug reports pull requests etc", "d": "9/2013"}, {"body": "also sending data needs stringified", "d": "9/2013"}, {"body": "said anything json sending json string sending form data replaced backbone sync method standard jquery method works perfectly issue", "d": "9/2013"}, {"body": "issue sync meant sending data restful resources specific option need send urlencoded data overriding arbitrary options send ajax end sync produce unexpected results", "d": "9/2013"}, {"body": "correct way apparently following processdata true thanks patience sorry waste time", "d": "9/2013"}, {"body": "backbone uses success error callback handlers passed options deprecated aliases deferred callback handlers removed", "d": "9/2013"}, {"body": "ok thank explanation", "d": "9/2013"}, {"body": "sure thing thanks opening issue sake crossreference issue came always good idea search opening issues smilecat", "d": "9/2013"}, {"body": "works also notverygreat way create clientsideonly view onto data simply method model generates url way nicer keep data sync", "d": "9/2013"}, {"body": "thanks jeremy looks like staying away setting properties attributes way go instead use instancegenerated variables", "d": "9/2013"}, {"body": "henrahmagix think referring fact ca nt use neither allow early iteration exit sintanial solutions gaining early iteration exit swap lodash instead underscore lodash supports early iteration exit return return jquery recommended", "d": "9/2013"}, {"body": "correct tack situations need break iteration present collection instances", "d": "9/2013"}, {"body": "ok fair enough understood thank", "d": "9/2013"}, {"body": "would great example wrote plugin simply catch malformed urls way page occasionally times user could click something leads malformed route case definitely bug want somebody notified nt want break app either fire event would nice router fired events begin say route routemethodname route notfound easy patch source needed", "d": "9/2013"}, {"body": "even collection option really internal thing think documented folks like var new model collection c msave posts correct resourceid endpoint never add collection perhaps collection client side supposed contain subset models oneoff model nt really belong despite sharing common url endpoint change could make would remove documentation misleading actually let clarify", "d": "9/2013"}, {"body": "use case sounds like simple trick", "d": "9/2013"}, {"body": "fixed master believe", "d": "9/2013"}, {"body": "also running series errors love use master lot package management asset pipeline tools based around version bumps either bump patch number guidance get ready ship would great jashkenas tickets particular need get completed next version help", "d": "9/2013"}, {"body": "larkin package managers bower npm volo component know allow specify location git url version git sha hash pretty work next version bump", "d": "9/2013"}, {"body": "specifically using backboneonrails gem nt really want toss bower rails project months without even patch version bump commits timespan given number reports issues collection urls conflicting model urls number common use cases pagination search collections think fixes worthy patch version bump even jashkenas said time version months ago reason ca nt take current stable master tag version bump holding us back put ticket set milestone let get done", "d": "9/2013"}, {"body": "like see failing test case merged browser fragmentpushstate url encoding compatibility real headache ask braddunbar", "d": "9/2013"}, {"body": "test case let close one arrives", "d": "9/2013"}, {"body": "know nt stack overflow code linked good test case", "d": "9/2013"}, {"body": "marcomatarazzo one code using backbone better approach would pull request failing test suite test current would make possible address reliably", "d": "9/2013"}, {"body": "marcomatarazzo fair enough", "d": "9/2013"}, {"body": "ok try best put one together thank answer", "d": "9/2013"}, {"body": "thanks finding quite right sortedindex existed used use previous implementations collections comparators longer use internally nt exposed anymore remove course underscore function remains available wish", "d": "9/2013"}, {"body": "anyone thought change would work defaults without doubleparsing", "d": "9/2013"}, {"body": "get work defaults created assigned initialize function pass could applied parsing step nt know design decision would want nt able think alternate solution", "d": "9/2013"}, {"body": "let move conversation open pr", "d": "9/2013"}, {"body": "think makes sense order arguments even though error available model well", "d": "9/2013"}, {"body": "fixed added test case", "d": "9/2013"}, {"body": "many thanks", "d": "9/2013"}, {"body": "yes thanks jashkenas", "d": "9/2013"}, {"body": "fixed tim", "d": "9/2013"}, {"body": "braddunbar able find firefox bugzilla quirk", "d": "9/2013"}, {"body": "actually using firefox unable reproduce anymore dominictobias looks though fixed firefox never really able much still reproduce", "d": "9/2013"}, {"body": "issue bit today hope fix gon na released soon", "d": "9/2013"}, {"body": "affected", "d": "9/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "fixed master", "d": "9/2013"}, {"body": "always felt missing solid event driven getter setter defaults values also wondered views followed thought borrowed ideas emberjs coffeescript class documentsquareview extends backboneview defaults editable true transient false uploaded false initialize options gt change editable updateeditbutton updateeditbutton gt text get editable edit else ok button html text onchangeedit gt set editable true", "d": "9/2013"}, {"body": "mateusmaso check backboneattributes tiny plugin wrote add getter setter methods object would love feedback usecase", "d": "9/2013"}, {"body": "might need little work pretty sure push unshift longer return model", "d": "9/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "fixed", "d": "9/2013"}, {"body": "hey jashkenas could come back discussion", "d": "9/2013"}, {"body": "behavior fully reflect stated view constructor documentation compound objects fully copied uses underscorejs recursive means something like js scopemyview backboneviewextend attributes datafoo foo databar bar injected element", "d": "9/2013"}, {"body": "hey jseto correct underscore nt deep merge objects number reasons see jashkenasunderscore background good workaround might merge attributes view", "d": "9/2013"}, {"body": "real solution example need fat arrow need reference variables collection instance inside comparator method", "d": "9/2013"}, {"body": "gucki nt need fat arrow context set collection instance call comparator get need collection instance", "d": "9/2013"}, {"body": "escaping nt sufficient assumes data output either tags within quoted attributes tags simple example template using quoteless attributes", "d": "9/2013"}, {"body": "", "d": "9/2013"}, {"body": "used dotmaster autobind gist backbone projects checking better ways become available came across issues correct implemented issue closed positive comment indicates autobind suggestion implemented looking backbone source code nt seem case something else place take care individual developer extend backbone functionality please help confused", "d": "9/2013"}, {"body": "find sort functionality usually necessary due context parameter methods underscore methods example need bind method following example js var view backboneviewextend initialize function thislistento thismodel change attr thisrender render function return others generally simply constructor", "d": "9/2013"}, {"body": "thanks good advice still using good old would better use listento instead see goes good know autobinding implemented one would like use automatic binding could look options mentioned", "d": "9/2013"}, {"body": "multiple usecases collection shown one order reverse comparator sort implementations pick one direction nt seem collectionreverse able quickly switch sort directions ascending vs descending", "d": "9/2013"}, {"body": "maintain collection instances collection clone may help", "d": "9/2013"}, {"body": "particularly useful take example situation collection represents grid data repeatedly sorting multiple directions nt make sense try maintain two different sources data switch one data object manipulate needed", "d": "9/2013"}, {"body": "stored multiple comparators collection swapped needed js var collection backbonecollectionextend comparators function b function setcomparator function key thiscomparator thiscomparators key return var collection new collection collectionsetcomparator sort collectionsetcomparator b sort", "d": "9/2013"}, {"body": "better workaround although still nt understand workaround necessary instead backbone simply supporting reverse method", "d": "9/2013"}, {"body": "could also", "d": "9/2013"}, {"body": "posabsolute wrapping return underscore collection backbone collection get backbone collection backbone methods like available wrap whatever collection using inherits backbonecollection instead example applying op code", "d": "9/2013"}, {"body": "thanks asked years ago p", "d": "9/2013"}, {"body": "posabsolute haha yea know passing thought answer future readers", "d": "9/2013"}, {"body": "thanks guys helpful", "d": "9/2013"}]