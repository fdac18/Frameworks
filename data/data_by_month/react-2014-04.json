[{"title": "uncaught error using contenteditable true within chrome", "body": "basically pressing enter within contenteditable creates new p tag reactid", "num": "1466", "d": "4/2014"}, {"title": "ca nt insert root element type form inside createclass", "body": "whenever try insert form inside createclass method get following error uncaught error invariant violation findcomponentroot unable find element probably means dom unexpectedly mutated eg browser usually due forgetting using tables nesting tags please help", "num": "1465", "d": "4/2014"}, {"title": "csstransitiongroup segue nonnull null children", "body": "got bit trouble trying renderonethingornot wrapped seems gracefully handle going nonnull child empty array children back ca nt handle going something nonnull child something null child test case dies component null", "num": "1457", "d": "4/2014"}, {"title": "zindex component", "body": "try set div inside component via nt work element inspector becomes zindex workaround", "num": "1456", "d": "4/2014"}, {"title": "jstransform breaks jsxtransformer", "body": "caused upgrading downgrading jstransform sourcemap reverting old dep fixes jeffmo", "num": "1454", "d": "4/2014"}, {"title": "skip prompting installing chrome devtools already installed", "body": "right print message console every time according chrome document easy way achive devtools script insert content tag documentgetelementsbytagname head first child reactjs detect existence content tag delete temp content tag", "num": "1451", "d": "4/2014"}, {"title": "idea pernode dom configuration", "body": "highly unscientific delta nt significantly affected addition behaviors proper contains bunch attributes currently react also duplicates list node names exist create dom components ps less complete list nodes attributes exception obscure ones nt listed deprecatednot standard raw gz sizes buildjsxtransformerjs buildreactwithaddonsjs buildreactwithaddonsminjs buildreactjs buildreactminjs raw gz sizes buildjsxtransformerjs buildreactwithaddonsjs buildreactwithaddonsminjs buildreactjs buildreactminjs", "num": "1449", "d": "4/2014"}, {"title": "attributes removed set null updates", "body": "behavior attributes value inconsistent first render present element subsequent renders attribute sticks around empty value example renders expect value changes first render get case likely others empty attribute unintended side effects see fiddle", "num": "1448", "d": "4/2014"}, {"title": "expose reactlinkproptypeslink", "body": "reactaddons exposes linkedstatemixin best way expose reactlinkproptypeslink options think mutate reactproptypes sideeffect including mixin expose directly reactaddonsproptypes", "num": "1447", "d": "4/2014"}, {"title": "let reacttestutilssimulateclick work nondom components", "body": "sebmarkbage suggested avoid silly tagname requirement anything resolve node getdomnode work", "num": "1445", "d": "4/2014"}, {"title": "avoid escaping url attribute", "body": "hi wondering way avoid url attribute escaping react", "num": "1444", "d": "4/2014"}, {"title": "fix grunt test coverage", "body": "would nice fix make sure using lcov format report back codeclimate", "num": "1442", "d": "4/2014"}, {"title": "bump", "body": "due bug see", "num": "1438", "d": "4/2014"}, {"title": "invariant violation reactmount two valid unequal nodes", "body": "happen master sorry could make reproducible test case stack trace master generaly happen things main component render first time componentdidmount get data via ajax response update state render replaced another component moment later call react trap load event previous exception happen appreciate feedback help issue public link debuging could share public someone want see action let know pls", "num": "1436", "d": "4/2014"}, {"title": "issue running jasmine tests getting typeerror instanceof called object invalid prototype property", "body": "hi new react maybe missing something obvious using following relevant node modules gulpkarma karmareactjsxpreprocessor karmajasmine karma using following bower dependencies react bindpolyfill polyfill phantomjs bind method test file getting stack trace insight appreciated", "num": "1433", "d": "4/2014"}, {"title": "add media attribute", "body": "media element tag media attribute specify mime type target content helps browser know attempt download url skip support format", "num": "1432", "d": "4/2014"}, {"title": "nullifying value return component indeterminate state", "body": "expected given component value property transitions float expect attribute tag become unspecified putting control indeterminate state state animating barbershop pole pattern actual transitioning float value attribute tag becomes test case", "num": "1431", "d": "4/2014"}, {"title": "animation", "body": "great react support native element animate instead csstransitiongroup", "num": "1430", "d": "4/2014"}, {"title": "mixins input form validation", "body": "understand react focuses v mvc think primary focus web view support interaction user nice react support input form validation stumbled across stackoverflow demonstrates mixins make easier handle user input validation react plans add html form related tools like something official", "num": "1429", "d": "4/2014"}, {"title": "reacttools appjsx changed never ends", "body": "hi guys created issue stack overflow", "num": "1427", "d": "4/2014"}, {"title": "string values input typenumber amp input typerange", "body": "enhancement proposal create make etargetvalue return value type number input types amp reasoning input type number would expect value string duh thing might historical attainment linkedvalueutils seems different handling handling string amp boolean values init state number amp use valuelink initialize input properly second change input value change string possibly explode something say child property depending type number partial work around would using according docs demonstration number amp range inputs react amp vanilla js jsbin", "num": "1425", "d": "4/2014"}, {"title": "server side helper make somehow componentwillmount like method", "body": "hello nt want bother make big changes something like would like know intention something like application router route ran gathers data views needs instance views well little bad bigger applications new design route instance view subview load data needs subview b loads data needs componentwillmount called server notice server client uses exact routes views see live example thanks understanding", "num": "1423", "d": "4/2014"}, {"title": "dom updates minimal moving last child first place", "body": "rerender requires last child moved first place update dom minimal instead removing child question reinserting children removed readded instead bad two reasons unnecessary churn dom slowing things children contains video element video reset using keys shuffle children around pretty common implementing infinite scroll react dom element reuse work screencast showing dom changed scroll notice scroll first element correctly removed top inserted bottom scroll back instead moving last element react moves four using react", "num": "1422", "d": "4/2014"}, {"title": "react use markup wrap toplevel html setting", "body": "broken nt use setting html toplevel component editor incompatible anyway preview shows problem", "num": "1421", "d": "4/2014"}, {"title": "make possible use harmony transforms browser script tags", "body": "already option enabled browser transform export function takes option use reactrails et al nt make possible pass options blocks let since js data types html let ed attribute single option right need support options added easily come", "num": "1420", "d": "4/2014"}, {"title": "react handle click event mobile safari", "body": "get react handle click events element mobile safari see fiddle example browsers tested click alert triggered three elements tappedclicked except mobile safari tested ipad mini test example first element handled directly using use react second element rendered using react element trigger click alert tapped mobile safari third element button also rendered using react trigger click alert tapped mobile safari would indicate problem react since method works element works using react", "num": "1418", "d": "4/2014"}, {"title": "componentdidmount runs", "body": "hi im trying something always render componentdidmount called state change render way run method always render even state prop change", "num": "1416", "d": "4/2014"}, {"title": "add support html manifest attribute", "body": "could useful generating static html pages", "num": "1414", "d": "4/2014"}, {"title": "state set setstate callback componentwillmount", "body": "think alluded yungsters comment merged call callback called state set using react", "num": "1413", "d": "4/2014"}, {"title": "rendering component dom fails", "body": "following line inside fails dom yet reproing easy tested current master", "num": "1411", "d": "4/2014"}, {"title": "update refs example code use onchange", "body": "mentioned comments", "num": "1408", "d": "4/2014"}, {"title": "ondragleave event triggered enter amp leave", "body": "title using latest chrome react", "num": "1401", "d": "4/2014"}, {"title": "reactmount two valid unequal nodes", "body": "seems mainly cause invalid nesting tags etc know issuesprs regarding already afaik trying solvedetect seems reasonable improve noninformative error message meantime ps probably seen people get bitten think", "num": "1400", "d": "4/2014"}, {"title": "provide react cdn supports also https", "body": "using react page served https currently requires packaging app since oficial cdn supports http would nice also supported thanks", "num": "1399", "d": "4/2014"}, {"title": "reactrendercomponenttostaticmarkup nt generate selected attributes valuedefaultvalue", "body": "using static markup unit testing newforms output also like support using render forms static html adding nt generate static html appropriate attributes however get generated manually add components get warning messages console using development build react possible support use cases without manually setting attributes live warnings jsfiddle showing static html output", "num": "1398", "d": "4/2014"}, {"title": "refs break add domelements variables", "body": "react var render function thisrefs myref returns correct object thisrefs yourref returns undefined", "num": "1397", "d": "4/2014"}, {"title": "rendercomponent callback little awkward", "body": "right write nt defined callback called callback currently called synchronously component instance available obvious perhaps always call callback asynchronously cc", "num": "1396", "d": "4/2014"}, {"title": "add support svg tag", "body": "", "num": "1395", "d": "4/2014"}, {"title": "refs updated even shouldcomponentupdate returns false", "body": "reordering list components changing refs refer index nothing else would nice refs updated nt appear currently", "num": "1392", "d": "4/2014"}, {"title": "warn shouldcomponentupdate returns undefined", "body": "wrote accident puzzled components nt updating undefined treated false would nice warn case", "num": "1391", "d": "4/2014"}, {"title": "problem shouldcomponentupdate", "body": "using ajax request gets html updates state looks like works see little test top comparing next state current state see ajax request needed fired problem nextstate thisstate equal even show returning variable state nt happen update update section simply calling update function lives inside mixin inside another component top level component state passed prop wondering setting state mixin problem wondering going want ajax request fired twitter url changed things see current file", "num": "1388", "d": "4/2014"}, {"title": "function props state", "body": "comes discussion several people around animation feel like important enough warrant issue already insist pure function taking pass compositecomponent way write time still call internally able react even user able test water would valuable future example heard also solve problems pendingstate familiar issue jordwalke sebmarkbage petehunt", "num": "1387", "d": "4/2014"}, {"title": "xss facebookgithubio xd hahaha", "body": "screen shot", "num": "1383", "d": "4/2014"}, {"title": "rfc add doc tips shouldcomponentupdate false nonmanaged nodes", "body": "seems like something bunch people would find useful personally nt aware possible solution", "num": "1382", "d": "4/2014"}, {"title": "proposal porting react mixin apis generic primitive", "body": "currently react mixins allow multiple mixins implement method multiple mixin whitelist would like decouple mixin system react therefore need way solve without whitelist idea every mixin call super allow predictable chaining mixin mixins function would essentially create new prototype chain mixin set functions stacked top order object treated prototype function treated classconstructor gets static methods prototype merged javascript var componentdidmount super end calling empty function placed mixin consolelog class b static getqueries super end calling empty function placed mixin consolelog b componentdidmount consolelog b super class c extends mixin b static getqueries super consolelog c componentdidmount super consolelog c cgetqueries b c new c componentdidmount b c issue warnings mixin function called overlapping methods missing super calls solvable confusingcomplex issues javascript class c extends mixin b state intializer overrides state initializer base class current react class system merges two also valid since nt property initializers yet based typescript syntax state b true componentdidmount forgot put super call warning since mixin logic happens class created clear mixins escape hatch work around reusability limitations system idiomatic react idiomatic react reusable code primarily implemented terms composition inheritance", "num": "1380", "d": "4/2014"}, {"title": "need way force component reload", "body": "building component allows create social widgets problem run adding google plus twitter buttons remove react node id parse using google plus twitter api makes perfect sense way ignore fact react ca nt find node id rerender whole component situation would great component live updates type info gets invariant violation ca nt update widget little code case confused componentdidupdate function fbxfbmlparse twttrwidgetsload gapiplusonego gapiplusgo gapipagego componentdidmount function twttrwidgetsload fbxfbmlparse gapiplusonego gapiplusgo gapipagego functions remove react node id trying update twitter share button anything else user types information throws error", "num": "1377", "d": "4/2014"}, {"title": "unmounting svg title tag throws exception", "body": "example jsbin clicking first time works mounts svg clicking button unmount recttitle react throws exception clue get around help much appreciated thanks advance", "num": "1376", "d": "4/2014"}, {"title": "rfc pointer events", "body": "stumbled across days ago ms seemingly pushing become standard looking solutionsimplementations seem align practically seems like great thing support even react nt provide core polyfill simply adding support events users free polyfill using library choice seems like great thing nt mind providing pr simple matter agree", "num": "1375", "d": "4/2014"}, {"title": "error using amp strings", "body": "fails unexpected token illegal think problem safe html implementation jsx reactdom var hello reactcreateclass render function return hello thispropsname reactrendercomponent documentbody", "num": "1374", "d": "4/2014"}, {"title": "implement better refs api", "body": "ref api broken several aspects refer thisrefs myname strings closure compiler advanced mode compatible nt allow notion multiple owners single instance magical dynamic strings potentially break optimizations vms needs always consistent synchronously resolved means asynchronous batching rendering introduces potential bugs currently hook get sibling refs one component refer sibling context reference works one level breaks ability wrap one encapsulation ca nt statically typed cast use languages like typescript way attach ref correct owner callback invoked child ref attached callback issued current owner think solution must ultimately kind first class ref passed around refs chained create multiowner refs efficiently creating object ref also get rid keeping track owners descriptors saving perf common idiomatic case using refs secondary goal may may important idea making resolution refs asynchronous respond batched flushreconciliation concept first class ref basically reference object nt exist yet luckily first class notion language already called promise create new ref instance promise object eventually resolve actual instance javascript class foo mydivref reactcreateref handletick thismydivrefthen mydivnode gt thissetstate width mydivnodeoffsetwidth render return since builds top promises would able get asyncawait language features allow us something like solves use cases afaik asynchronous api little difficult deal makes less weird alternative batching involved unsolved problem refs update point different instance case promise would need reresolved promises good enough ultimately need something like observable handle multiple values ca nt wait spec though maybe allow promises reset call get new value", "num": "1373", "d": "4/2014"}, {"title": "warn using dangerouslysetinnerhtml incorrectly", "body": "happened times resulting confusion let either warn maybe allow string cc syranide", "num": "1370", "d": "4/2014"}, {"title": "warning second param reactdom undefined", "body": "sometimes forget set first param lets say parameters write giving warning second param undefined first param string react component", "num": "1369", "d": "4/2014"}, {"title": "special lifecycle hooks called using", "body": "using component special lifecycle hooks called think would useful nice know transition occurs state transition owns guess special methods meant expose states make work unless use way css classes applied transition documentation states reacttransitiongroup basis animations children declaratively added removed example special lifecycle hooks called example using one would expect special hooks called seems nt", "num": "1368", "d": "4/2014"}, {"title": "show warning throw error event handler function", "body": "could simplify debugging lot easy change believe whenever passed event handler etc valid function example warn developer", "num": "1367", "d": "4/2014"}, {"title": "setprops server render", "body": "tl dr nt seem work server since mounting nt really thing server appears ca nt update properties component instance tl dr positive react way would scenario let try explain got isomorphic code handles clientside actions code course runs server well render react pages browser strategy using react mount root component update new data comes server requests socket connections etc key client gets mostly empty component updates data comes server otherhand trouble code since server never mounts component hard time updating component properties returns error requires component mounted far aware nt possible server currently passing whole render process custom render function attached react componet manually merges new data object allows isomorphic code base since manually merging objects feels dirty brittle would sane person mutate component properties prior rendering server", "num": "1361", "d": "4/2014"}, {"title": "debounce onchange", "body": "hello problem text input onchange event need debouncing user input debounce onchange handle etarget opportunity extract input value hack situation example", "num": "1360", "d": "4/2014"}, {"title": "serve react unminified docs site", "body": "sometimes helpful playground grokking react features like use live editor docs site sketch ideas see code called library huge help site react source served unminified apparent going covers", "num": "1359", "d": "4/2014"}, {"title": "css property values strings nt px appended", "body": "weird gets turned think add value actual number", "num": "1357", "d": "4/2014"}, {"title": "touchmove nt fire removed element", "body": "ontouchstart handler removes div maybe replaces another one place useful certain draggable interactions ontouchmove handler nt fire events detached element longer bubble document probably bind touchmove handler element receives touchstart instead delegating document sort related cc merbs eater", "num": "1355", "d": "4/2014"}, {"title": "setstate componentwillmount render componentdidmount causes invariant violation", "body": "situation simultaneously render multiple instances component componentwillmount check made one props passed component event may raised causes components update state like example problem seems one components render method called component yet mounted call setstate throws exception uncaught error invariant violation findcomponentroot unable find element probably means dom unexpectedly mutated eg browser try inspecting child nodes element react id", "num": "1353", "d": "4/2014"}, {"title": "allow components optout reactinputselection handling", "body": "experimenting building new text editor component atom noticed ms per keystroke spent restore selection functionality could add property input like something along lines prevent dom access code requires flame graph showing access happens bit confusing due stack depth limit chromium profiler highlighted operations question", "num": "1350", "d": "4/2014"}, {"title": "better debugging duplicatedkeys invariant violation", "body": "would great tool could pull report elements virtual dom match given key would really help tracking causes error messages like invariant violation flattenchildren encountered two children key children keys must unique", "num": "1349", "d": "4/2014"}, {"title": "syntax highlight atomio", "body": "", "num": "1348", "d": "4/2014"}, {"title": "problem using jsx", "body": "jsx included code like given following error console seemed work added line return render function", "num": "1344", "d": "4/2014"}, {"title": "add support svg enablebackground property", "body": "", "num": "1343", "d": "4/2014"}, {"title": "consider providing default key dynamic children", "body": "many times performance issue find things like would make sense something like default", "num": "1342", "d": "4/2014"}, {"title": "gives problems", "body": "throws error tag nt exist rendered dom js jsx reactdom var hello reactcreateclass render function return thispropsx null reactrendercomponent documentbody reactrendercomponent documentbody thanks matthewwithanm pointing version", "num": "1341", "d": "4/2014"}, {"body": "works fine chrome mac probably problem jsfiddle", "d": "4/2014"}, {"body": "works fine well happens go directly going close unless find systemic problem", "d": "4/2014"}, {"body": "two nested elements html disallows please post minimal example showing problem", "d": "4/2014"}, {"body": "nested forms component post example child components necessary parent examplecomponentclass reactcreateclass onsubmit function e code componentwillmount function code render function return rendering component examplecomponentinstance reactrendercomponent documentgetelementbyid someid", "d": "4/2014"}, {"body": "please post working example jsbin jsfiddle reproduces problem", "d": "4/2014"}, {"body": "well tried making one looks similar code however problems component runs inside twitter bootstrap tab", "d": "4/2014"}, {"body": "going close let know make example problem", "d": "4/2014"}, {"body": "need bootstrap order repro problem okay include well", "d": "4/2014"}, {"body": "sorry found larger containing form nt noticed", "d": "4/2014"}, {"body": "use work correctly wo nt quote really warn open adding warning", "d": "4/2014"}, {"body": "oops accident let fix", "d": "4/2014"}, {"body": "ok fixed npm published patch react packagejson coming next", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "cc zpao", "d": "4/2014"}, {"body": "zpao updated roughly copy behaviors would probably look also cleared list html dom names reactdom constructed improved dom config instead result total bytes would dare say surprisingly accurate reflection expect added bunch attributes currently supported react react currently handful nonconformingdeprecated attributes currently listed config least seems surprisingly viable especially sense scalablemaintainable even considering svg nt really much common dom also possibility make dom nodes output properties default equivalent thus would need ship full config production build could use warn debug personal opinion sending invalid props nodes either intentional nt know bad practice never know happens valid property given node never rely strict never wrong", "d": "4/2014"}, {"body": "oh man discovered issue want", "d": "4/2014"}, {"body": "addons say", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "big deal forget using library scrapping react html generated files looking also nicer read", "d": "4/2014"}, {"body": "perhaps nt escape slashes see", "d": "4/2014"}, {"body": "seems good story back decision", "d": "4/2014"}, {"body": "gathered escaping seems extreme fear xss particular already solved escaping attribute values properly quoted pose danger wellconstructed html might inclined agree staying safe side argument quoting used attack properly quote attributes sidenote perhaps disallow possibly protocols anchor href", "d": "4/2014"}, {"body": "also would cool add object concise methods visitors plugged active", "d": "4/2014"}, {"body": "andreypopp object concise methods manually enable browserify config", "d": "4/2014"}, {"body": "could related also advertised ircchannel want direct communication", "d": "4/2014"}, {"body": "syranide yes message cause looks different first image unmounted later load happen uses previous dom representation old reactid already used another node thanks idea irc write today", "d": "4/2014"}, {"body": "hard tell could run bug nt remember exact cause bug something like root child issue update root root directly issues update child setprops setstate forceupdate child updates afterrwards initial update root propagate usual causing child update causes dom incorrectly overwritten sounds like could related totally", "d": "4/2014"}, {"body": "nope rather complex case", "d": "4/2014"}, {"body": "right stop irc could take look link ok nt think way send private information via github", "d": "4/2014"}, {"body": "spicyj zpao error apparently related seems like really update error message helpful", "d": "4/2014"}, {"body": "want submit pr close favor", "d": "4/2014"}, {"body": "ok never mind nt look like react issue tried removed polyfill tried chrome works", "d": "4/2014"}, {"body": "upon research found issue including completeness", "d": "4/2014"}, {"body": "hmm got media type mixed media exists nt thought guess nt need", "d": "4/2014"}, {"body": "first time contributing react project probably take time get around giving careful look see proposed solution acceptable one", "d": "4/2014"}, {"body": "hey danielschonfeld thanks pitching try fix left general comments writing code tests commits see introduced new attribute named aliased concerned degree breaks standard client programmers expect able set value dom control setting either property specialcasing element require set instead breaks away nt time look problem yet take say grain salt could plain old fixable bug respect elements indeterminateness property", "d": "4/2014"}, {"body": "interesting never heard spec looks quite new probably nothing another year two questions though sure much familiar use cases support scenario animated effects fading shifting required synchronization animations animations scripted actions removing table row dom animations completed mean animation somehow magically animates dom elements removed could huge also spec allow us define physicsbased animation general arbitrary animations js", "d": "4/2014"}, {"body": "familiar implementation spec maybe able receive answers", "d": "4/2014"}, {"body": "awesome asked two questions discussion group might might gamechanger react currently hard things animation unmounting physicsbased animation two supported cool issue draft wo nt stable perhaps another two years brief look seems easily fittable react lifecycle events case thirdparty integration time comes naturally feasible react changes necessarily might worth let zpao decide whether temporarily close issue edit thanks headsup edit update based replies received wo nt builtin facilities ease physicsbased animation nt surprising hey hoped animation unmounting planned api wo nt support animation removal however player events allow removal deferred removal completed bad api makes sense reason react ca nt defer whatever animation wrapper end using api like offload css animation css", "d": "4/2014"}, {"body": "nice react support input form validation random guy think would bad course tons nice schema validation type coercion libs already example could write wrapper mixin publish npm registry separated module", "d": "4/2014"}, {"body": "nt think input validation ever core react simply speaking something vanilla js handles need impose reactspecific api convenience mixin actually encouraged makes things less obvious", "d": "4/2014"}, {"body": "chenglou hmmm shame ask libraries facebook instagram use form validation input validation uis", "d": "4/2014"}, {"body": "novabyte like saw mixin vanilla js let way vanilla js reusable js input validation nt special category least react need special case facebook runs fine without special handling", "d": "4/2014"}, {"body": "chenglou seems odd using form validation mixins large web applications nt see value extracting code something reusable useful react addon part react core advocating pull third party libraries react handle form validation since react documentation advocates building forms examples require input field kind seems odd interactive aspect web ui least well catered library close issue shame plans helper mixins kind help form validation web ui", "d": "4/2014"}, {"body": "novabyte maybe miscommunicated nt mean necessarily extract mixin js method reason use handler directly got say backbone app side also reuse wrapperless vanilla js backbone app would nt able reuse code reactspecific", "d": "4/2014"}, {"body": "chenglou guess going wrong trying use react without frameworks libraries build web ui rest app guess look using backbone something else fill gaps build model validate etc", "d": "4/2014"}, {"body": "react much better jquery fullstack system unfortunately nt time build support andor endorse fullstack solution time relying community see wiki page future probably build tooling better enable community efforts solve specific problem check", "d": "4/2014"}, {"body": "try workaround componentwillreceiveprops instantiate component pass new props setprops method never tried way also reactasync seen reactquickstart andreypopp already", "d": "4/2014"}, {"body": "interesting think stick reactasync problem see dependency fibers last time tried nt work way need without fibers", "d": "4/2014"}, {"body": "componentwillmount method called server rendering let know missing something", "d": "4/2014"}, {"body": "yeah unfortunately case right could look finding actual minimal set mutations reordering list think reduces longest increasing subsequence", "d": "4/2014"}, {"body": "every policy causes node removed dom making decision actually remove node impossible know ones developer intends removed dom unfortunate dom api nt provide better way perform reordering without side effects maybe create way mark node pivot point reorderings occur around", "d": "4/2014"}, {"body": "see also way keep nodes iframes etc attached dom arranging nodes around also one could experiment optimizing common cases common head common tail", "d": "4/2014"}, {"body": "like idea specialcasing common operations like moving firstlast element lastfirst position probably take care use cases without introduce complex algorithms extra apis", "d": "4/2014"}, {"body": "solve problem btw specialcasing certain tags going take care case special tags occur inside children reordered example changing move even though video like children", "d": "4/2014"}, {"body": "well could similar used specify js language versions firefox", "d": "4/2014"}, {"body": "guessing dupe try adding rendering anything confirm case", "d": "4/2014"}, {"body": "spicyj seem fix see updated jsfiddle", "d": "4/2014"}, {"body": "ahh believe touchstart listener mobilesafariclickeventplugin nt ever get attached add note issue close one though workaround set css style element ios safari trigger click event", "d": "4/2014"}, {"body": "ok yep add works would cool fixed anyways thanks quick response", "d": "4/2014"}, {"body": "function looking componentdidupdate run updating occurs initial render", "d": "4/2014"}, {"body": "jkimbo right props change see componentwillreceiveprops closing", "d": "4/2014"}, {"body": "necessarily blocker related", "d": "4/2014"}, {"body": "good catch nt fix guessing wo nt fix afterwards", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "like living edge steadicat thumbsup", "d": "4/2014"}, {"body": "yup also running latest version", "d": "4/2014"}, {"body": "lol", "d": "4/2014"}, {"body": "sorry quite sure mean could elaborate little bit", "d": "4/2014"}, {"body": "oops little test jsbin works pretty well turns something goes wrong code issue sorry rudeness", "d": "4/2014"}, {"body": "repro nt think invalid nesting cause error", "d": "4/2014"}, {"body": "spicyj debugging session irc encountered error turns browser turned assume react sometimes happened upon second found element expecting ie first", "d": "4/2014"}, {"body": "nt believe browsers though nested links confused nt believe newlycreated elements datareactid attributes", "d": "4/2014"}, {"body": "demo showing datareactid nt end duplicated case let know see otherwise", "d": "4/2014"}, {"body": "reproduced ie yes nt may still make sense warn could cause", "d": "4/2014"}, {"body": "curious thank", "d": "4/2014"}, {"body": "issue", "d": "4/2014"}, {"body": "oh informed cdnjs guess would still better facebook hosted http could least link cdnjs version", "d": "4/2014"}, {"body": "jakubholynet talked briefly reason promote fb cdn control publish releases immediately aware https issue cdnjs often significant delay believe issue let answer authoritatively information meantime least", "d": "4/2014"}, {"body": "ok thank", "d": "4/2014"}, {"body": "right way file sent via fbme link bit hacky plan action make better supporting redirect use domain less likely blocked nt gotten around yet meantime use cdnjs", "d": "4/2014"}, {"body": "great thanks", "d": "4/2014"}, {"body": "assuming would problem serverside rendering well except unlikely initial page react take nodes fast enough would unlikely significantly affected insin btw warnings following code source something going change apparently", "d": "4/2014"}, {"body": "unfortunately hard fix right easier upcoming refactors sebmarkbage planning", "d": "4/2014"}, {"body": "see pull request", "d": "4/2014"}, {"body": "code works fine example", "d": "4/2014"}, {"body": "shoot tag actually problem ref failing need isolate better", "d": "4/2014"}, {"body": "also say passing result first parameter feels common notable exception jquery helper functions documentation either helps alleviate somewhat", "d": "4/2014"}, {"body": "context setstate makes sense agree nt intuitive rendercomponent", "d": "4/2014"}, {"body": "fair intuitive setstate", "d": "4/2014"}, {"body": "problem call nt swap state completely creates copy state given changes merged means nt give new url property keep old one could see adding call fixes", "d": "4/2014"}, {"body": "updating url state though updated separate form even tested adding url back state like suggested nt change", "d": "4/2014"}, {"body": "looks like mutating thisstatetwitter directly react nt deepcopy state want able compare old new state treat everything state immutable copy object updating something like using underscore clone could also use jquery similar helper", "d": "4/2014"}, {"body": "mentioned end api change nt considered isolation life cycle events correspond prevcurrentnext every stage", "d": "4/2014"}, {"body": "cf pending state updates may confusing store pending state updates directly thisstate", "d": "4/2014"}, {"body": "fair entire page less designed run arbitrary javascript testing purposes way change value text box via query string addition implementations markdown designed accept arbitrary html going call wo nt fix", "d": "4/2014"}, {"body": "note nt need typing enough", "d": "4/2014"}, {"body": "khanacademy fb woah", "d": "4/2014"}, {"body": "pointing compile typescript useful classes make easy people using typescript", "d": "4/2014"}, {"body": "good point nt think way create composable interfaces way typescript see alternatives", "d": "4/2014"}, {"body": "typescript way see implements something similar propose would something like typescript declare function applymixins target mixins void declare function supermixin class componentdidmount mymethoda return class b componentdidmount mymethodb return b class c implements b componentdidmount void supermixin componentdidmount consolelog c mymethoda gt string mymethodb gt string applymixins c b already tried wrap react logic class typescript usage obtained following result similar way way mixin roadmap typescript clue plan implement guess soon", "d": "4/2014"}, {"body": "nt see better way fdecampredon recommending notice contextual keyword would given ts error well used class", "d": "4/2014"}, {"body": "luckily mixins completely optional use whatever system want presumably typescript would build similar features use even frowned upon overused completely optional handwave punt", "d": "4/2014"}, {"body": "road map react soon", "d": "4/2014"}, {"body": "attach need way modifying nodes owned react node created react nt care", "d": "4/2014"}, {"body": "ended works looks horrible", "d": "4/2014"}, {"body": "either work", "d": "4/2014"}, {"body": "future record using seems preferable initial solution creating node owned react although result", "d": "4/2014"}, {"body": "speaking spicyj irc seems like neatest solution problem something like untested work generic container like", "d": "4/2014"}, {"body": "nt think completely work react still assume wo nt remove root element add another wrapper around fine", "d": "4/2014"}, {"body": "spicyj ah right confused thinking progressive enhancement jquerylibs usually modify children updated code", "d": "4/2014"}, {"body": "adding extra div something tried still causes problems trying live update change url sent mailbox iphone wed apr andreas svensson notifications githubcom wrote spicyj ah right confused thinking progressive enhancement jquerylibs usually modify children reply email directly view github", "d": "4/2014"}, {"body": "zackify yeah need always return false need change url need make url key either instance possibly rootdiv work need add check shouldcomponentupdate", "d": "4/2014"}, {"body": "ah react nt let unmount html element nt believe workaround right sorry cc petehunt", "d": "4/2014"}, {"body": "cover also cc joshduck think something point", "d": "4/2014"}, {"body": "zpao right saw issue forgot apparently basically discussion guess difference becoming proper standard meaning reason support prefixed events polyfills actually ready used browsers today seems quite straightforward point believe right path", "d": "4/2014"}, {"body": "close issue keep going go ahead adding lowerlevel polyfill might able take allow events added", "d": "4/2014"}, {"body": "nt mind providing pr simple matter agree syranide yes please", "d": "4/2014"}, {"body": "sebmarkbage sure", "d": "4/2014"}, {"body": "html entities interpreted within jsx attribute values use enclose string curly braces use ordinary js string parsing", "d": "4/2014"}, {"body": "thanks quick answer clarification makes sense", "d": "4/2014"}, {"body": "spicyj hmm may bit dirty escaping amp almost universally safe form \u00edt concerns developer code user input browsers deal gracefully simply reading treating way feels like logical thing based nondangerous nature makes lot edgecases visual eyesore ie urls variables short texts amp virtually guaranteed confused actual htmlentity generally features ambigious nature seems sane enough without detrimental obvious way", "d": "4/2014"}, {"body": "top could build dynamic refmap lazily creates ref promises allows easy creation refs sets data also makes nicer upgrade path existing code assumes strings javascript class foo refs new reactrefmap handletick thisrefsget mydiv mydivnode gt thissetstate width mydivnodeoffsetwidth render return also probably need provide synchronous api upgrade path similarly need ref maps", "d": "4/2014"}, {"body": "makes lot sense though guess totally convinced need async expect uses mountready handlers though suppose possible dom event handler called update pending", "d": "4/2014"}, {"body": "plan descriptors mounted one place", "d": "4/2014"}, {"body": "descriptors mounted one place refs guess warning maybe dom events want batch timers data fetching events goal flush happens raf therefore callback could refs pending additionally behavior didmount didupdate handlers currently undefined regards fire relation children therefore refs example componentdidupdate guaranteed fire children fully mounted", "d": "4/2014"}, {"body": "actually current state since queued dom generation queue guess guaranteed right may able preserve behavior sure alternative api would force refs extracted two lifecycle hooks store ever might lead memory leaks", "d": "4/2014"}, {"body": "second thought didmountdidupdate enough keep ref handles uptodate since child choose unmountremount descriptor point events enough potentially ref lifecycle callback could connected owner instance flexible first class ref guess however want something like resize handle child actually mountedremounted might troublesome set componentlevel subscription child ie call point however maybe handled explicit callback", "d": "4/2014"}, {"body": "mean child never mounts argument ref hang never resolve sounds odd", "d": "4/2014"}, {"body": "yea", "d": "4/2014"}, {"body": "suppose promise rejected next flush nt lead ref resolved", "d": "4/2014"}, {"body": "presumably thing happen ref nt used guess would make reasonable api unless missing something ref object wo nt know component belongs alternatively component wo nt list refs thus ca nt know mark rejected", "d": "4/2014"}, {"body": "every ref object go resolved unresolved back track way attachdetach ref eg unmounted act calling register ref pending next flush done pending refs gets callback invokes", "d": "4/2014"}, {"body": "api wrote way get component instance dom node means ca nt call methods etc child components intentional", "d": "4/2014"}, {"body": "actually imagine component instance reactdomcomponent could become dom node still controversial though alternative empty object getdomnode method", "d": "4/2014"}, {"body": "well sometimes want ref composite right nt thought much sounds like odd plan uniform across types browser components right pretty nice", "d": "4/2014"}, {"body": "yes ref composite would still composite instance unless stateless component would allowed ref resolve null problematic api since leaks internals component drills multiple levels abstractions without explicitly allowing expected return single node composite returning fragment multiple nodes also needs go base class every composite even art composites render tree composites markdown composites whatever unless every component wants required optin special dom base class nt guarantee ref method though think much better api would would work even instance real dom node would return", "d": "4/2014"}, {"body": "case need figure wrapper components dom node instances diverge composites going odd write expecting dom node get composite return", "d": "4/2014"}, {"body": "yea wonder passthrough reactdominput nt really make sense something like would cool", "d": "4/2014"}, {"body": "alternative idea make descriptors refpromises also provides nice reset functionality ref ever swapped javascript handleclick thisfoothen inst gt instdox render thisfoo ugh sideeffect render puke return also works nice multiple owners", "d": "4/2014"}, {"body": "perspective seems like name enough persuade lost souls turn back way easily guessed way know first place explicitly looked necessarily read docs seems like serves clutter confuse perfectly valid feature possibly presume broken solution problem obviously technically easy fix allow old syntax strings perhaps guys philosophical reasons wanting keep way ps nt mind providing pr need know ok sending plain strings", "d": "4/2014"}, {"body": "nt think going sorry see", "d": "4/2014"}, {"body": "put little jsfiddle demonstrate", "d": "4/2014"}, {"body": "believe lifecycle methods nt available cc petehunt confirm", "d": "4/2014"}, {"body": "thanks way let component know transition occurs guess animations need better explanation docs clear use animations performed special callbacks handling transitions timing", "d": "4/2014"}, {"body": "see intentional sometimesnull event handler", "d": "4/2014"}, {"body": "actually allowing disallowing", "d": "4/2014"}, {"body": "would mean user would forced specify instead simply omitting unless convert reason approach take components defaulting handlers empty function could make default function warns executed would meet requirement", "d": "4/2014"}, {"body": "oh forgot obvious solution declare type prop warn passed prop function exactly want", "d": "4/2014"}, {"body": "ohh thanks", "d": "4/2014"}, {"body": "create new component instance time data updated client get new data call reactrendercomponent app data data element sun apr pm lee olayvar notifications githubcomwrote tl dr componentsetprops nt seem work server since mounting nt really thing server appears cant update properties component instance tl dr positive react way would scenario let try explain got isomorphic code handles clientside actions code course runs server well render react pages browser strategy using react mount root component update new data comes server requests socket connections etc key client gets mostly empty component updates data comes server otherhand trouble code since server never mounts component hard time updating component properties compsetprops returns error requires component mounted far aware isnt possible server currently passing whole render process custom render function attached react componet manually merges new data componentprops object allows isomorphic code base since manually merging objects componentprops feels dirty brittle would sane person mutate component properties prior rendering server reply email directly view github andrey popp gmailcom", "d": "4/2014"}, {"body": "creating new components expensive exercise figured optimally wanted components live especially since creating new ones would destroy life cycles", "d": "4/2014"}, {"body": "component pass rendercomponent descriptor containing little json object specifying type props component want render rendercomponent simply update props run react entire diffing algorithm update dom necessary changes see componentwillunmountcomponentwillmount methods called least top level change props way fact reactrendercomponent ends calling reactmountjs implementation detail using rendercomponent instead setprops generally preferred declarative apis make app easier reason", "d": "4/2014"}, {"body": "bigger issue ca nt workaround scenario updating value input right away cause react actively revert old value readonly thus later update value cursor reset always end need debounce someone typing supersonic become issue also react takes care case anyway unless handler something ridiculously expensive", "d": "4/2014"}, {"body": "solution", "d": "4/2014"}, {"body": "think would helpful", "d": "4/2014"}, {"body": "think okay want send pr", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "chime mentioned chat last time think great solution means providing raw cssstring would mean providing raw cssstring makes sense logically however suddenly two different outcomes component passes value asis styleobject see intuitive way sure enforcing numbers technically right solution obvious new users document thoroughly potentially error prone user base accustomed html especially designers would assume nt mind making right way seems like way enforce runtime without developer burden understood entirely optional feature eyes seems kind fragile", "d": "4/2014"}, {"body": "dom spec kind strange", "d": "4/2014"}, {"body": "sorry strange unlike mousemove touchmove always fires element received touchstart limited testing browsers happily send events removed element", "d": "4/2014"}, {"body": "test device chromefirefox touch events enabled touch monkey disappear move finger get alert", "d": "4/2014"}, {"body": "hmmmm maybe nt supposed work sort feel like still work react well browser though", "d": "4/2014"}, {"body": "interesting summary mounting something like b calls setstate b componentwillmount dom wo nt populated html yet suppose setstate call queued componentdidmount called cc sebmarkbage", "d": "4/2014"}, {"body": "two keystrokes sure top head would called", "d": "4/2014"}, {"body": "sure keystroke stack depth limit flame graph creating confusion center single call pyramid could wrong think first segment reading selection information second restoring previous selection", "d": "4/2014"}, {"body": "well see mixininitializeall appears separately two get selectionstart calls two separate updates occurring sure exactly triggering updates perhaps combine one make things faster sounds like used maintain selection state avoiding moving reconciliation jordwalke vjeux know", "d": "4/2014"}, {"body": "yeah likely triggering many updates try reduce typing several things change underlying model cursor moves screen lines change etc tried using delay update seemed impact responsiveness negatively try way batching updates together without relying event loop anyway point taken probably lot room end improve things said trying make editor performance fast possible would great able opt selection restoration specific case know nt need maybe could restore selection know input removed readded dom", "d": "4/2014"}, {"body": "right problem nt know save selection removing element something along lines currently proactive react event handler things magically batched already try requiring like react combine setstate calls one", "d": "4/2014"}, {"body": "boom really appreciate tip really cleaned flame graph things looking much sane annotated portion associated selection restoration much clearer time going feel better potential optimize areas well", "d": "4/2014"}, {"body": "great hear sorry part publicdocumentedsupported api yet working making automatic raf batching work well also open expose batchedupdates function", "d": "4/2014"}, {"body": "also remind run nodeenv production code faster", "d": "4/2014"}, {"body": "also still looks like running two updates triggering update componentdidupdate similar", "d": "4/2014"}, {"body": "also remind run nodeenv production code faster performance sensitive environment nodeenv used require built reactjs bundle directly npm version see", "d": "4/2014"}, {"body": "related guess", "d": "4/2014"}, {"body": "likely future case crash give warning see also like able show problems like context dev tools", "d": "4/2014"}, {"body": "thanks spicyj either solutions would helpful", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "believe automated conversion textmate grammar", "d": "4/2014"}, {"body": "initial conversion found includes syntax snippets contributions greatly appreciated", "d": "4/2014"}, {"body": "nitpick would nt jsx opposed react", "d": "4/2014"}, {"body": "meh atom one based orktes thanks taking helpful many people anybody stumbling later repo bug reports fixes", "d": "4/2014"}, {"body": "sure fixed appears release", "d": "4/2014"}, {"body": "comment top file says", "d": "4/2014"}, {"body": "make sure using jsx well whether jsxtransformerjs reacttools", "d": "4/2014"}, {"body": "blargh using gruntreact build process date thanks tip", "d": "4/2014"}, {"body": "nt really need right", "d": "4/2014"}, {"body": "understand coming please nt ever made mistake one examples really bad actually end recreating nodes every render key different might hurt today one day couple points key really performance identity turn leads better performance randomly assigned changing values identity ca nt realistically provide keys without knowing data modeled would suggest maybe using sort hashing function nt ids already internal keys use arrays index array insert new element keys wrong said key warning pretty annoying driving people end solutions like probably spend time thinking better way tl dr", "d": "4/2014"}, {"body": "sure understand implications use single key per children apart degraded performance course something related future plans maybe agree random key worst key one use still better key one always spend time better solution performance becomes issue understandable trying avoid approach definitely working entities children components based value objects alternatives nt seem much appealing basically thinking keeping map objects ad hoc synthetic keys", "d": "4/2014"}, {"body": "ok think got identity point could think case state dom element previously linked another component inherited another similar component reuses element approach solved well enough imho see key unique persistent time opposite case still applies every time component rendered state handled react simply disappears hopefully future easier handle cases weakmaps", "d": "4/2014"}, {"body": "agree random key worst key one use still better key keys provided react uses index array almost always better random key", "d": "4/2014"}, {"body": "hmm going ruin best laid plans", "d": "4/2014"}, {"body": "assume mean", "d": "4/2014"}, {"body": "fixed internally use", "d": "4/2014"}, {"body": "chenglou commit done serverside rendering", "d": "4/2014"}, {"body": "matthewwithanm ugh sorry meant spicyj referring", "d": "4/2014"}, {"body": "totally makes sense want give go", "d": "4/2014"}, {"body": "sure would rather changed serialization default attributes could minimized value create new type", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "similar problem chrome nt tested browsers yet sure helps able get elements remove clearing readding opacity property inspector one element causes stuck ones removed well", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "reason ca nt perform animation componentdidmount", "d": "4/2014"}, {"body": "performing animation componentdidmount really easy might say mine think real problem performing animation component unmounting would nice adopt pattern reacttransitiongroup also animating onechild component", "d": "4/2014"}, {"body": "already use reacttransitiongroup single child correct", "d": "4/2014"}, {"body": "far tests saying least could would nt get special lifecycle methods called", "d": "4/2014"}, {"body": "give example something nt work transition children child vice versa animation hooks executed proper time", "d": "4/2014"}, {"body": "could result typo mistakte slow clap", "d": "4/2014"}, {"body": "wish values well event somehow exposed", "d": "4/2014"}, {"body": "going replace page wiki feel free edit directly", "d": "4/2014"}, {"body": "user care mouse moves fromto perhaps handled internally problem due bubbling may need dive code little get better understanding stop saying nonsense p", "d": "4/2014"}, {"body": "yes due bubbling dom structure mouse moves c c b receive mouseleave events receives mouseenter event receives nothing events bubble root perhaps good enough make simulated mouseenter mouseleave events bubble", "d": "4/2014"}, {"body": "would work least trying test testing generally nt need anything complex making sure right behavior triggers event happens hopefully way others well", "d": "4/2014"}, {"body": "discussion closed pull request came following suggestion sebmarkbage provide unique function approach needs wait relax checks master", "d": "4/2014"}, {"body": "could also copy prototype temporarily hack fnprototype genericomcomponenttypeprototype", "d": "4/2014"}, {"body": "sebmarkbage interesting one last question nt clear pull request thread get hold pass", "d": "4/2014"}, {"body": "benjamn take look", "d": "4/2014"}, {"body": "require react defining ie function believe error go away confirm", "d": "4/2014"}, {"body": "nope working tried variety solutions gotten following errors add react utils foreach also add foreach move end foreach suggestions got feeling mostly jsdom issue", "d": "4/2014"}, {"body": "confirm put line beforeeach well react nt use variables called source assume missing problem", "d": "4/2014"}, {"body": "get saying added correctly nt cause problem suggestions familiar yet react jsdom internals yet uncertain one", "d": "4/2014"}, {"body": "sorry make sure globalnavigator defined variables declared set value toplevel scope react required beforeeach utils set beforeeach based result react require work error get", "d": "4/2014"}, {"body": "fixed apparently declared sans value outside foreach loop work solution seems bit arcane could explain fixed js module dependencies var require var mocha require mocha var jsdom require jsdom var react var utils initialize variables var document var window initialize jsdom beforeeach function globalwindow jsdomjsdom createwindow globaldocument globalwindowdocument globalnavigator globalwindownavigator react require reactaddons utils reactaddonstestutils", "d": "4/2014"}, {"body": "declared beforeeach block variables scoped function one else access way variables shared across file initialized start test", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "currently event listeners attached react inserts nodes dom wondering handle thinking letting reacteventemitterlistento create bag local events later used new function addlocaleventlisteners called reactcomponentmountcomponentintonode thoughts", "d": "4/2014"}, {"body": "sure dom nodes created regardless probably want tie transaction see reactreconciletransaction stores queue componentdidmount callbacks ondomreadyqueueingreactmountready queue listeners put putlistenerqueueingreactputlistenerqueue put listener queue ca nt easily modified want though guessing make new transaction wrapper add list", "d": "4/2014"}, {"body": "matthewwithanm guessing problems saw wo nt problem want try rendertostaticmarkup approach", "d": "4/2014"}, {"body": "sure really fits know people wo nt using js control content since could browsers would nt shown safe assumption iframes", "d": "4/2014"}, {"body": "correct wrong contents used browser nt support iframes basically browsers support js", "d": "4/2014"}, {"body": "sure iframe support correlates js support whether disable matter browser changes content would thought would trigger error even elements nt react ids", "d": "4/2014"}, {"body": "react nt look inside iframe unless change contents later", "d": "4/2014"}, {"body": "similar problem make ajax call result comes back component unmounted getting invariant error breaks react app completely longer mount components etc wrapping response handlers option bit cumbersome", "d": "4/2014"}, {"body": "mrjoes one way could push ajax requests handlers array go array componentwillunmount abort course need remove array complete ajax call", "d": "4/2014"}, {"body": "ustun wo nt work data access layer separated ui returns promise nt access underlying ajax request object ca nt cancel cancelling requests option", "d": "4/2014"}, {"body": "exactly reason left data layer accumulates potentially long running request death thousand cuts need way handle canceling many data layers set infinite subscriptions data updates clean mechanism clearly memory leak bring entire react subtree streams observables good primitives cleanup semantics consider purely promise based data layer inherently flawed reason want output always promise based pass kind handler data layer cancelability hook ultimately think solution streamobservable based soon proposal would build native support cancelation mixin", "d": "4/2014"}, {"body": "well case dal handles timeout caller promised either response error problem react handling setstate unmounted component ok warning debug mode sure fail error", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "add native support smile meantime solved follows coffeescript transitionevents require reactlibreacttransitionevents moduleexports reactcreateclass displayname component render invoke follows component onanimationend handleanimationend", "d": "4/2014"}, {"body": "recreated issue simulate jsdom confirmed works dom element react component fails works", "d": "4/2014"}, {"body": "yanns test code change", "d": "4/2014"}, {"body": "interesting work dom component", "d": "4/2014"}, {"body": "josephsavona thanks feedback tried suggestion still failling tried update react got following error", "d": "4/2014"}, {"body": "problem seems getting set components test remove seems work okay sure implications would though also case using browser dom running karma jsdom", "d": "4/2014"}, {"body": "simplest test case think made test appears elements problem included button form input select option textarea ie everything want trigger events", "d": "4/2014"}, {"body": "brigand thanks huge help syranide fix", "d": "4/2014"}, {"body": "going close wrap thanks lot hunting anybody interested taking issue sounds like would help quite people", "d": "4/2014"}, {"body": "ever since ondemand event listening added mobilesafariclickeventplugin broken touchstart nt always listened okay workaround fix real somehow probably onclick handlers turn markup", "d": "4/2014"}, {"body": "think fixed sure solid unit test cover", "d": "4/2014"}, {"body": "flockonus going close nt think going support instead feel free open pr docs make clearer", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "nt heard problem nt think necessary", "d": "4/2014"}, {"body": "believe vendor prefixes supported consistently capitalization", "d": "4/2014"}, {"body": "return null render script", "d": "4/2014"}, {"body": "nt leak implementation detail relies parsing html strings certainly possible programmatically construct dom nested tags besides documenting would also helpful highlight cases exist least pointing another resource", "d": "4/2014"}, {"body": "one possible solution actually replace componentwillmount constructor since descriptor change constructor componentwillmount called time also clarifies componentdidunmount", "d": "4/2014"}, {"body": "sebmarkbage sounds reasonable spontaneous reaction really like obvious nature whereas using constructor instead removes obviousness becomes interms intuitively see", "d": "4/2014"}, {"body": "idea replace getinitialstate property initializer nt currently exist proposing similar typescript idea follow future idiomatic way handle initialization destruction primitive like net ever introduced would correspond mental model follow normal initialization process class add notion mountunmount since distinction model might able shorten mountunmount probably creates problems willdidupdate", "d": "4/2014"}, {"body": "sebmarkbage ah makes lot sense ps preally impressed overall discussion going api exciting stuff", "d": "4/2014"}, {"body": "may deserve thread related sebmarkbage comments figured post fact currently de facto constructor seems get way potential asynchronous rendering since definition called part synchronous rendering process agree decision switch current synchronous signature fwiw means stepping outside react stuff rendering example illustrates might create custom initializer invoke manually since de facto nt called try render component seems pretty strong argument kind initialization decoupled synchronous rendering formalized part life cycle", "d": "4/2014"}, {"body": "closing every instance seen fixed upgrading npm", "d": "4/2014"}, {"body": "use phantomjs react unit tests polyfill bind closing let know anything else unclear", "d": "4/2014"}, {"body": "spicyj idea happy last comment made neck deep debugging jasmine would nt run specs applying shim referenced works thanks", "d": "4/2014"}, {"body": "closing due lack activity let know help lrowe post mailing list may also helpful", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "sure really see motivation current solution compresses better", "d": "4/2014"}, {"body": "fixed filter option", "d": "4/2014"}, {"body": "lately simply using wrapped module works great could consider switching npm package scheme downsides", "d": "4/2014"}, {"body": "first attempt add top every file unfortunately uglify nt smart enough dead code removal wonder vendorconstantsjs essentially make two copies code one dev one prod transforms pay getter cost per module require time benjamn easy recast obvious interacts well cloning ast", "d": "4/2014"}, {"body": "talked cpojer probably solved", "d": "4/2014"}, {"body": "suggestion supporting typescript new file type effectively simple file replace multiline strings using logic jsx js files depend typescript support multiline strings tracked", "d": "4/2014"}, {"body": "wanted share dealt problem waiting permanent solution took idea edgejs project foreign code inserted multiline comment write render method typescript reactjsx declared function using bindings fdecampredon build process use simple transform using gulp var gulp require gulp typescript require gulptsc replace require gulpreplace react require reacttools gulptask compile function return gulpsrc ts pipe replace reactjsx rn gm function match fullcomment commentcontents return reacttransform jsx reactdom commentcontents slice pipe gulpdest dest typescript requires actual files disk memory pipe typescript compiledjs pipe gulpdest dest get intellisense etc get full typescript checking jsx code build time since transformed prior passed typescript compiler also source code line numbers preserved hope helps", "d": "4/2014"}, {"body": "epeli sorry later answer idea simply represents document fragment ie list nodes without parent currently reach seems implementationwise seems like want feature good enough unless css set strictly workaround solves everything kind makes sense today long single parent node multiple parents need use textnodes needx use things get bad provides single parent usecases thus allowing currently huge fan jsx conditionals suspect need think differently experimented separating separate methods seems work good seems make sense", "d": "4/2014"}, {"body": "thanks response guess makes simpler use javascript conditionals jsx think would also make possible implement something like tal example usage anything like considered reactjsx", "d": "4/2014"}, {"body": "epeli relaying interpretation answer yes considered adding dedicated syntax conditionals feel wrong solution intend go route still finding way around halfway inclined agree suggesting intuitive goto solution kind flawed seems said make clear conditionals currently possible react form cond cond amp amp currently recommended approach conditionally inserting elements personally branches contain lots code usually refactor individual methods individual components makes sense thus cond thisrenderloggedin thisrendernotloggedin actually introduce similar constructs really want strongly recommended could look untested sugar making actual component function logic pretty nifty stuff however mentioned strongly recommended generally speaking big issue templating languages syntax really poor conditionals sometimes solve allowing elseclause sometimes nested sometimes weird specialcase etc sure best solution really seems like using markup flawed though recommended approach top like theoretical perspective practical perspective ugly looking works great content refactored methods", "d": "4/2014"}, {"body": "would like see tutorial express rest api react without backbone", "d": "4/2014"}, {"body": "unify two concepts eliminate convenience constructors altogether people trusted point special proprietary handling overridden methods like componentwillmount componentwillreceiveprops nt classical oo equivalents trick typescript class reactcomponent componentwillmount consolelog base implementation class typeahead extends reactcomponent componentwillmount supercomponentwillmount perhaps missing something", "d": "4/2014"}, {"body": "see close issue since info stale", "d": "4/2014"}, {"body": "done", "d": "4/2014"}, {"body": "compiling pr based put shortly", "d": "4/2014"}, {"body": "progress original issue singledouble quotes get output looks like javascript input logout output reactdoma href logout datalink action logout mix types quotes making linter complain", "d": "4/2014"}, {"body": "btw good enough yes solved issue", "d": "4/2014"}, {"body": "chenglou allows successfully lint jsx syntax still need relax quote settings jshintrc bug nt think close yet", "d": "4/2014"}, {"body": "months ago", "d": "4/2014"}, {"body": "case always want pass callback little boring p reasons bound", "d": "4/2014"}, {"body": "think reasoning goes something like functions autobound often used event handlers callbacks user provided weird way object pass nt really everything gets copied different object originally nt autobinding would need place made opt class creation realized everybody autobinding everything time defaulted behavior actually thought people would complain since bit magical word company nt autobound never intended called outside component usual case binding internally never really ran issue common case data fetching usually involved passing function called setstate bound eg complicated could even callback defined component autobound passing another component callback something would discourage inherently wrong think makes state ownership less obvious callback data fetching function promises ajax callbacks etc nt totally unreasonable though fn pass must return promise setstate nt could happen future nt heard internally lot data fetching interested hear much problem people specific problems solving data fetched normalized error handled external component", "d": "4/2014"}, {"body": "ka codebase two uses thisforceupdatebind none setstatebind one uses forceupdate similar", "d": "4/2014"}, {"body": "generally rarely pass callback except use react rxjs see use case rxjs often ends wanting subscribe observer variable store bound version problem autobound would avoid repeating code components", "d": "4/2014"}, {"body": "hey guys want zpao think setstate forceupdate etc used callbacks nt describe behavior component internal api ca nt used outside component mean javascript var foo reactcreateclass componentwillmount function apigetuserbyid thispropsuserid thissetstate bad thissetuser good setuser function user thissetstate user user one day need extend method example idea case spicyj btw describe docs developers actually happens inside componentdidmount bit difficult describe prefer write something like hope thoughts clear thanks", "d": "4/2014"}, {"body": "include closures render function callbacks similar problems likewise refs inconsistent also props parent nt flush callback invoked deferred reconciliation batching puts whole system inconsistent state correctly really reconcile anything may dependencies sideeffectful operation turns much complex issue thisstate alone", "d": "4/2014"}]