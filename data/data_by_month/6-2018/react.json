[{"title": "update reactprovider without rerendering entire tree", "body": "possible update react provider without rerendering entire tree consumer", "num": "13128", "d": "6/2018"}, {"title": "static variable declaration node module", "body": "made custom component declare static variable working fine publish publish package given error error nodemodulesreactjsvalidatorsrcinputsletterinputjs module parse failed unexpected token may need appropriate loader handle file type valid data import valid letter alphanumeric email customrx numeric required dummy function import react component react export class numberinput extends component constructor props super props thisstate input errorstatus errormsg false static return false numeric e isnan etargetvalue numberinputreturn false thissetstate errorstatus true errormsg please enter number react version react", "num": "13122", "d": "6/2018"}, {"title": "tic tac toe sample code bug", "body": "want request feature report bug bug current behavior following tutorial final result code pen start game click example times first field first row continue without creating winning row finish game two fields remaining unfilled game end without winner expected behavior either say max moves false moves count give warning like left moves one able complete game versions react browser os affected issue work previous versions react react reactdom reactscripts", "num": "13119", "d": "6/2018"}, {"title": "react npm aws codebuild", "body": "want request feature report bug bug npm deployment current behavior build started failing today since think react starting moving npm packages think maybe fine something causing install builds stable months current behavior bug please provide steps reproduce possible minimal demo problem add packagejson react reproduce using node boron docker container ca nt even get react install locally ubuntu anymore expected behavior intstall aws codebuild tried forcing npm cache clean versions react browser os affected issue work previous versions react seems broken", "num": "13118", "d": "6/2018"}, {"title": "component constructor called multiple times using cloneelement", "body": "want request feature report bug bug current behavior component constructor called multiple times using reactcloneelement clicking button changes components rendered withconstructor element displayed shows many times constructor called clicking button repeatedly causes constructor called every time component displayed however change line click button component constructor called expected behavior component constructor called component created versions react browser os affected issue work previous versions react happening browsers react unsure worked previous versions", "num": "13116", "d": "6/2018"}, {"title": "onmouseleave false triggering using svg", "body": "want request feature report bug bug current behavior see example onmouseleave parent element get triggered every time hover svg get element render probably lower works expected browsers regular inside svg also native event work expected see expample identify bug react current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior trigger onmouseleave mouse nt leave parent element versions react browser os affected issue work previous versions react tested react", "num": "13115", "d": "6/2018"}, {"title": "moving react portal touchstart swallows future touch events", "body": "want request feature report bug bug current behavior move component react portal response events swallowed rest interaction current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example example either need touch device enable touch sensors browser see steps add listener component response move component portal touchmove events touchend events blocked rest touch interaction component already component touchstart event events emitted correctly also created vanilla js example portal implementation moves element portal touch start correctly allowing touch touchmove touchend events expected behavior touchmove touchend events published versions react browser os affected issue work previous versions react reproduced bug firefox chrome react version tested", "num": "13113", "d": "6/2018"}, {"title": "warn setstate function nt return", "body": "want request feature report bug proposing adding warning development current behavior valid javascript meaningless react eslint nolabel helps catch probably one better building warning devmode react sandbox demo expected behavior warn function applied setstate returns undefined user wants indicate nothing changed return null", "num": "13111", "d": "6/2018"}, {"title": "get size widthheight element using ref", "body": "want request feature report bug current behavior trying get element height using ref always getting current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior getting element height versions react browser os affected issue work previous versions react react mac os yandex browser code element reactcreateref componentdidmount consolelog thiselementcurrentclientheight render const children thisprops", "num": "13108", "d": "6/2018"}, {"title": "missing property packagejson file", "body": "want request feature report bug neither feature bug report maybe invalid behaviour current behavior current packagejson file property according npm docs required expected behavior unless global configuration chance missing added versions react browser os affected issue work previous versions react latest version", "num": "13107", "d": "6/2018"}, {"title": "react nested input wrong index errors update", "body": "create nested attribute nested form react backend rails json test rails work fine create action work fine problem update edit product found errors frontend rails used react problem data params json index right update product getting double nested attribute find id existing nested item product productspecificationsattributes id product productspecificationsattributes destroy product productspecificationsattributes title product productspecificationsattributes title specificationtitle action action second use code work fine action attributesparams update getting double problem update product empty value nested attriubtes render json error index index right input field start index product productspecificationsattributes id product productspecificationsattributes destroy product productspecificationsattributes id product productspecificationsattributes title product productspecificationsattributes title specificationtitle u change value parent field without json action frontend action getting right error index must change parent field value first get right index errors anybody help issue problem use react redux handle form", "num": "13106", "d": "6/2018"}, {"title": "add support synthetickeyboardevent iscomposing", "body": "want request feature report bug bug current behavior synthetic keyboard events contain value true per spec expected behavior synthetickeyboardevent iscomposing true keydown even fired compositionstart compositionend versions react browser os affected issue work previous versions react versions least", "num": "13104", "d": "6/2018"}, {"title": "react fiber released yet use create demo", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "13103", "d": "6/2018"}, {"title": "replacement onchange fire event choose selected option select", "body": "event instead onchange use listening option selected need change state every time select changes even selected option selected use onchange select fires unselected option selected understand logical behavior looking another event unfortunately onclick option nt work pure demo playing around demo try select selected option nothing changed pieces code better understanding jsx handleselectchange e side gt const state thisstate", "num": "13101", "d": "6/2018"}, {"title": "navigating legacy php page outside react inside domain react app", "body": "components route using react router dom deploying application existing php application created links inside application point domain path external php application lives link clicked navigation takes user page obviously still inside react application would assume able navigate outside react application even though domain assume react removing ability bug version react reactrouterdom test case deploying react application part existing website cases need navigate users outside react application keep inside domain example using react router dom app try login steps reproduce create react project create link navigates component react application make link navigates php page outside react application domain expected behavior link navigate correct page inside react application actual behavior app navigates blank react page showing header footer words leave react application", "num": "13099", "d": "6/2018"}, {"title": "add support hydrating portals", "body": "want request feature report bug probably bug arguably feature request suppose current behavior attempted best effort fiddle shows particular issue obviously server side rendering impossible via jsfiddle markup equivalent rendered div id server side render seen fiddle attempt reactdomhydrate portal results additionally failing hydrate react renders component appends resulting duplicated section dom expected behavior ideal world calling hydrate component portals would allow dom containers hydrate components rendered versions react browser os affected issue work previous versions react tested confirmed behavior chrome firefox given really looking edge case doubt worked previously edgecasey nonsense currently using multiple react roots pages portions pages rendered react yet serverside rendered like able hydrate single react root page share contexts without difficulty without repeating context components memory cases good number roots perhaps searching found potentially related bugs seemed like really nt line hopefully valid use case thanks", "num": "13097", "d": "6/2018"}, {"title": "reactdomcreateportal issue portal used new window ie errors calling windowgetcomputedstyle", "body": "want request feature report bug bug current behavior used container new window calling called dom node found container thrown ie seems work fine chrome firefox ie running version throws error issue seen following codesandbox expected behavior calling element portal located new window work ie like browsers versions react browser os affected issue work previous versions react see issue reactreactdom ie running virtualbox mac", "num": "13096", "d": "6/2018"}, {"title": "uninstall lodash project", "body": "hi guys use createreactapp create project run eject noticed install lodash uninstall npm start failed following message note use lodash import lodash codes error find module lodash functionmoduleresolvefilename functionmoduleload modulerequire require object c home path testwebnodemodules modulecompile objectmoduleextensionsjs moduleload trymoduleload functionmoduleload react version lodash", "num": "13095", "d": "6/2018"}, {"title": "specify key portal element", "body": "want request feature report bug either reporting oversight documentation feature already implemented documented would bug request supported way adding keys portal elements would feature current behavior ca nt see existing way add key portal element least using officially documented means means reconciler somewhat crippled rerendering component emits multiple portals bad things eg render portals b c remove b rerender emits c react ends tearing original c component instance trees creating new ones way hint reconciler new c sufficiently unfamiliar implementation logic nt understand knows unchanged suspect missing something able specify hints portals would enable react avoid recreating c instances example current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example codesandbox demonstrates without keys portals suffer expected reconciliation issues disappear interestingly see currently undocumented third parameter allow key specified using fixes problem also demonstrated codesandbox mentioned portal documentation omission documentation deliberately hidden unsupported feature right assume latter expected behavior would supported way adding keys portal elements versions react browser os affected issue work previous versions react react", "num": "13094", "d": "6/2018"}, {"title": "flowtype definition style property", "body": "possible add flowtype support property example type would warn use found party definition would great official support", "num": "13093", "d": "6/2018"}, {"title": "reacttimeout inside hidden element", "body": "want request feature report bug bug current behavior using inside element react keeps rendering children every tick promise resolved minimal demo look console repo expected behavior render called times change works expected versions react browser os affected issue work previous versions react tested chrome version official build react built commit june flag jsx let done false let promise null const waitfor text gt consolelog waitfor done return text promise promise new promise resolve gt settimeout gt done true resolve throw promise const asynctext text gt waitfor text const app gt loading reactdomrender documentgetelementbyid root", "num": "13089", "d": "6/2018"}, {"title": "node rerenders due new context api update siblings rerender", "body": "want request feature report bug bug current behavior nodes use new context api force siblings nodes rerender expected behavior siblings rererender node updates due context updates versions react browser os affected issue work previous versions react background use reactnative reactnavigation uses new contextapi hoc wraps component context consumer example get unexpected rerenders const somethingthathasnavigation withnavigationfocus class extends reactcomponent render rerender whenever navigation changes fine value context return null const shouldnotrerender class extends reactcomponent render consolelog rerender sibiling updates return null const test class extends reactpurecomponent render consolelog test renders return wrong design", "num": "13086", "d": "6/2018"}, {"title": "means determining component order hierarchy", "body": "apologise raising issue intending annoying disrespectful previous issue closed suggestion believe mitigate feature request simply aware take hint go away bit backlog hang missed assuming latter beg forgiveness case want go away thanks trying build container component child component whereby children sit anywhere hierarchy beneath container know relative orderindex within hierarchy usecase build helper wrapper css grids allowing subcomponents render row component knows must next index may may progress row counter next row component found order looked two possible avenues recursing using reactchildren component stops hits component without propschildren eg reduxconnect ed one passing means counting via context fails seems render methods child components nt always called dom order background would great feature react might allow aweary previously suggested context could nesting however raised thought would give indication recursion depth relative position", "num": "13084", "d": "6/2018"}, {"title": "vuejs stars wake boiis let move vue", "body": "", "num": "13083", "d": "6/2018"}, {"title": "context api prop name", "body": "want request feature report bug bug current behavior happen use value name pass prop child components value example snippet example component context provider import react react import examplecomponenttwo examplecomponenttwo import examplecontext examplecontext class examplecomponentone extends reactcomponent constructor props super props export default examplecomponentone import react react import examplecontext examplecontext class examplecomponenttwo extends reactcomponent constructor props super props export default examplecomponenttwo import react react const examplecontext reactcreatecontext export default examplecontext expected behavior unless keyword behave prop name example defined react docs context api example details chrome version official build os mac os high sierra react", "num": "13081", "d": "6/2018"}, {"title": "sompongkarnsanga gmailcom", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "13079", "d": "6/2018"}, {"title": "new warning encountered two children key adding state item", "body": "want request feature report bug bug current behavior add item state file app crashes error message keeps showing web browser google chrome crashes remove state related components app behaves normally know people experienced error described think might new bug code explain code minimal way remove notice component app nt crash see key different since data mongodb unique code attached files listtxt listitemtxt maintxt matchitemtxt progresstxt since pause error messages took screen shot expected behavior app crash versions react browser os affected issue work previous versions react react google chrome version official build osx previous version react unknown", "num": "13074", "d": "6/2018"}, {"title": "error possiblepluginextractevents function", "body": "want request feature report bug want report bug current behavior arrayprototypepush get error trigger element event current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior element event trigger normally versions react browser os affected issue work previous versions react nt known reason file use suggest add parameter check", "num": "13073", "d": "6/2018"}, {"title": "map render working", "body": "hi hava ideia map render consolelog working return thisstateofficehoursmap value index gt consolelog value valuedescription return", "num": "13070", "d": "6/2018"}, {"title": "react busy idle", "body": "using react ui layer webgl projects see example concern reactreactdom might stuff unexpectedly due new improvement take advantage idle time react anything called", "num": "13068", "d": "6/2018"}, {"title": "ca nt edit wiki page", "body": "want request feature report bug bug wiki page current behavior edit wiki page permission given go click link expected behavior gives way edit wiki make pull request", "num": "13067", "d": "6/2018"}, {"title": "text input doubled new character japanese language", "body": "want request feature report bug bug current behavior happens safari macos hiragana katakana keyboard layout text entered textarea new character whole current text plus new character appended text example enter value textarea example", "num": "13066", "d": "6/2018"}, {"title": "caret goes end controlled input calling checkvalidity method", "body": "want request feature report bug bug current behavior case form uses controlled inputs checkvalidity method called every change user tries fix text position inside input form invalid caret goes end immediately typing one symbol caret behaves similarly checkvalidity method called invalid input fine form valid current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example example expected behavior caret saves position user input forminput state valid versions react browser os affected issue work previous versions react tested react chrome firefox ubuntu react nt bug behaves expected bug easily reproduced", "num": "13065", "d": "6/2018"}, {"title": "error creating new application", "body": "trying get started react run run get error", "num": "13064", "d": "6/2018"}, {"title": "minor constructor name syntheticevent subclasses", "body": "risibly minor issue wanted bring case super easy fix older versions react synthetic events would report constructor class name right reports generic due way syntheticevent extended process bringing small tool date upgraded react react get lots logs workaround assume class subclass syntheticevent would nice precise name", "num": "13063", "d": "6/2018"}, {"title": "textarea rerendering get new value", "body": "want request feature report bug bug current behavior textarea nt update getting new value eg state updates input update span update ca nt see changes textarea js fiddle expected behavior textarea render updated value versions react browser os affected issue work previous versions react react firefox chrome bits mac os high sierra", "num": "13062", "d": "6/2018"}, {"title": "input", "body": "", "num": "13061", "d": "6/2018"}, {"title": "functional components behave like reactcomponent reactpurecomponent", "body": "want request feature report bug sure current behavior docs say functional component behavior reactcomponent nt behavior reactpurecomponent expected behavior impression functional component already behavior reactpurecomponent case docs updated case one two things happen functional components behavior reactpurecomponent docs recommend using reactpurecomponent instead functional components since performance would better suppose understand functional component could pure unless sort antipattern versions react browser os affected issue work previous versions react", "num": "13060", "d": "6/2018"}, {"title": "really like vue solution css similar one like react", "body": "want request feature report bug feature expected behavior really like vue solution css similar one like react js appjs import scoped scopedcss import style appcss const app gt welcome react get started appcss app header intro css apply elements current component parent component styles leak child components", "num": "13059", "d": "6/2018"}, {"title": "prop circular reference set state mutates prop", "body": "want request feature report bug bug maybe current behavior pass prop circular references set state changing state mutate prop current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example reproduce pass tree circular references prop component set state variable manipulate state variable turn manipulate prop expected behavior believe props supposed immutable versions react browser os affected issue work previous versions react", "num": "13057", "d": "6/2018"}, {"title": "react property createcontext exist type typeof react", "body": "hello kinda new react trying delve bit contexts however aforementioned method refuses exist import react react export const urleditcontext reactcreatecontext new urlviewitem really code got happens react react libraries reactdom reacthotloader came project created visual studio reactrouterdom typescript version anyone idea would receive aforementioned error google literally yes literally nothing topic thanks huggy", "num": "13053", "d": "6/2018"}, {"title": "children updating expected", "body": "want request feature report bug really sure whether really bug maybe react team could examine whether following demo behaves intended current behavior please check following demo outputs current time two times first time output updated second second nt note please aware short abstract demo show issue line code possible implementing clocks proper state handling proper side effect handling setstate vs forceupdate react design patterns general etc nobody wants implement components extremely ugly way demo show issue without stuff expected behavior would expect second time output also updated second second line jsfiddle demo easily switch ui library react preact inferno dio nerv see behave way would expected versions react browser os affected issue work previous versions react react windows react behaves like current react version", "num": "13052", "d": "6/2018"}, {"title": "use getderivedstatefromprops cause thisprops update render componentdidupdate", "body": "bug use getderivedstatefromprops cause thisprops update render componentdidupdate current behavior use static getderivedstatefromprops thisprops wo nt update render componentdidupdate use componentwillreceiveprops thisprops update render componentdidupdate expected behavior use static getderivedstatefromprops thisprops also update render componentdidupdate versions react browser os affected issue work previous versions react react react chrome", "num": "13051", "d": "6/2018"}, {"title": "getderivedstatefromprops shoud renamed getstatefromprops", "body": "thanks clarification reading truely thought called component rerendered parent easy misunderstand also executed name named addition exist getstatefromprops called every time component rendered regardless cause update getderivedstatefromprops called component rerendered parent", "num": "13050", "d": "6/2018"}, {"title": "native fibers", "body": "native fibers code react dramaticaly simplified suspense api less limitations performance could support promote fibers proposal need champion", "num": "13049", "d": "6/2018"}, {"title": "expose createportal reactreconciler", "body": "want request feature report bug feature current behavior available shared private package symbol also shared package means renderer wishing allow portals needs react codebase current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example na expected behavior possibility creating portals custom renderers exposed renderer developers making available versions react browser os affected issue work previous versions react chrome windows nonpublic reconciler never worked react version write corresponding patch maintainers ok change", "num": "13048", "d": "6/2018"}, {"title": "error entering proptypes documentation", "body": "want request feature report bug report bug current behavior whenever enter link get redirected page expected behavior route works expected suffix versions react browser os affected issue work previous versions react joining actual webpage computer firefox macos high sierra", "num": "13047", "d": "6/2018"}, {"title": "react unmount entire tree uncaught errors", "body": "want request feature report bug feature request current behavior whole app unmounts uncaught errors expected behavior good unmount affected tree versions react browser os affected issue work previous versions react react hi guys feel like new error handling approach react harsh app plenty plugin entrypoints external react components consider error prone errorboundary solution prefer affected component tree unmounted case components even internal components spits error way achieve new error handling system would behavior could optin defined component tree something like class variable flag component threw error rerender whole tree render flagged components effect would like default wrapping every component tree boundary spits instead crashing whole app think", "num": "13045", "d": "6/2018"}, {"title": "allow portals used reparenting", "body": "want request feature report bug feature current behavior reparenting unsolved issues react dom far possible hack around missing support relying unstable api render update subtree inside different container important note api using react diffing algorithm similar possible keep components mounted js reactdomrender container wo nt get unmounted mounted reactdomrender container reactdomunstablerendersubtreeintocontainer parentcomponent container also wo nt get unmounted mounted matter change parentcomponent thus call different parent reactdomunstablerendersubtreeintocontainer parentcomponent container however unstable api going deprecated soon recent features like introduction new context api introduced additional issues alternative unstable api introduced however api unsuitable reparenting issue since always create new mount point inside instead applying diffing called different parent check codesandbox calling portal different portal cause new uuid reason want multiple portals able render inside makes perfect sense common use cases like popovers etc going remove suggest find way portal specific node instead appending diff contents instead implement solution although seems complicated similar", "num": "13044", "d": "6/2018"}, {"title": "element property reset reconciled", "body": "want request feature report bug inclined believe bug may rationale behind expected behaviour current behavior component sets value underlying element via ref component child another component given stable key value reset reconciled example table horizontally scrollable rows custom scrollbars scroll offset maintained via ref using scrollleft property table also sortable sort table rows properly reconciled render methods called row yet scrollleft value reset row remove key row works expected simple case reproducing behaviour expected behavior would expected properties set ref would maintained reconciliation process versions react browser os affected issue work previous versions react version react also behaviour", "num": "13042", "d": "6/2018"}, {"title": "key event sent ipad bluetooth keyboard", "body": "demo using fiddle focusing sending key events correctly logs ekey device aside ipad however connecting ipad bluetooth keyboard debugging key events seem make correctly arrow keys everything else comes dead note using fiddle key events appear correct ipad version react ipad browser safari", "num": "13040", "d": "6/2018"}, {"title": "child component constructor called multiple time", "body": "child component constructor called multiple times changing state rerendering force updating forceupdating anywhere upgrade react happening", "num": "13039", "d": "6/2018"}, {"title": "source includes require reactdom reactdom included packagejson", "body": "reactdomcjsreactdomtestutilsdevelopmentjs line require reactdom reactdom dependency list packagejson line reactdomcjsreactdomtestutilsdevelopmentjs var reactdom require reactdom normally would probably result problems build environment crash problem problem reactdom", "num": "13038", "d": "6/2018"}, {"title": "calling static methods inside getderivedstatefromprops", "body": "playing new way sync props amp state found strange behaviour want call another static method need use component name rather undefined according mdn calling static methods another static method fine maybe expected flow guess note docs fine playground reproduce case", "num": "13037", "d": "6/2018"}, {"title": "add way compare relative positions deep children", "body": "hey seems like currently way take two mounted component instances tell one coming earlier application structure could mounted asynchronously tracking instantiationrendermount time enough ideologically traverse application tree understandable though relative positions needed sometimes use case track focusable elements application using context focusable element reports existence focus manager provided context needed able limit focusablilityaccessibility elements outside currently shown modal dialogpopup focus trapped inside sake better accessibility need automatically focus first focusable modal dialog keyboard navigation mode references focusable elements inside dialog tell one comes first using public react api web workaround finddomnode comparedocumentposition nt work react native something similar comparedocumentposition react component instances thanks", "num": "13036", "d": "6/2018"}, {"title": "styling affect react way rerendering", "body": "dynamic data changes browser rerenders spans dynamic data changes browser rerenders second span spans displayed flex read react diff algorithm supposed recurse chilren making changes changed dom elements first image spans rerender", "num": "13035", "d": "6/2018"}, {"title": "means determining component order hierarchy", "body": "trying build container component child component whereby children sit anywhere hierarchy beneath container know relative orderindex within hierarchy usecase build helper wrapper css grids allowing subcomponents render row component knows must next index may may progress row counter next row component found order looked two possible avenues recursing using component stops hits component without eg redux ed one passing means counting via context fails seems methods child components nt always called dom order background would great feature react might allow", "num": "13034", "d": "6/2018"}, {"title": "fabric", "body": "found issue mentioned fabric difference fabric fiber", "num": "13032", "d": "6/2018"}, {"title": "share ref multiple ref handlers", "body": "react able proxy element ref multiple listeners example grab hold element internal purposes also expose publicly like jsx class mycomponent extends component attachref el gt thisbuttonel el thispropsbuttonref el something render return react complicated ref prop function object jsx class mycomponent extends component buttonref reactcreateref attachref el gt thisbuttonrefcurrent el something render return first right approach typescript types say prevents us assigning nt readonly", "num": "13029", "d": "6/2018"}, {"title": "shallow renderer handling getderivedstatefromprops properly", "body": "want request feature report bug bug current behavior using enzyme called older version state current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example jsx import shallow enzyme class demo extends component static getderivedstatefromprops props state return value statevalue state value old render return const wrapper shallow wrappersetstate value new assert wrapperstate value new throws nt standalone demo tracked problem method inside called called might related change called expected behavior versions react browser os affected issue work previous versions react reacttestrenderer enzyme", "num": "13027", "d": "6/2018"}, {"title": "suggest return", "body": "building function return disposal function common usage lot api example suggest return javascript export class xx extends reactcomponent componentdidmount let timeoutid settimeout otherwise must augment scope instance member code javascript export class xx extends reactcomponent componentdidmount thistimeoutid settimeout", "num": "13026", "d": "6/2018"}, {"title": "react props unable access key object array index passed props", "body": "working react project trying access key object element array using index getting undefined issue seems getting array objects props index props well try access id publicid objects array using index props get error simplified version getting happening resolve consolelog thispropsimages id publicid id publicid consolelog thispropsimageindex consolelog thispropsimages publicid consolelog thispropsimages thispropsimageindex id publicid consolelog thispropsimages thispropsimageindex publicid read property publicid undefined", "num": "13025", "d": "6/2018"}, {"title": "react depends older version corejs breaking usage new babel", "body": "want request feature report bug bug current behavior react relying older version corejs goes conflict newer beta version babel older version gets installed instead newer results errors like versions react browser os affected issue work previous versions react react", "num": "13018", "d": "6/2018"}, {"title": "popping ssr providers n n number providers stack", "body": "see details sure matters practice people often many dozens providers deep inside tree remove loop would nice", "num": "13016", "d": "6/2018"}, {"title": "getderivedstatefromprops executed setstate", "body": "want request feature report bug bug current behavior whenever state update via setstate method getderivedstatefromprops also executed even props changed sure bug kind unexpected clear post published see jsfiddle sure version react used reproducible expected behavior update state via setstate getderivedstatefromprops executed unless prop changed versions react browser os affected issue work previous versions react react node v npm v operating system windows browser version chrome official build", "num": "13015", "d": "6/2018"}, {"title": "map function error", "body": "hello team json follows products id product name tomato qty uom map function used iterate values productsqty uom giving error space qty uom tried products qty uom still error option access values pointers would great thanks", "num": "13014", "d": "6/2018"}, {"title": "react", "body": "compatible recommended use react framework", "num": "13013", "d": "6/2018"}, {"title": "support code property synthetic events", "body": "mdn site mozilla saying eventcode new way distinguish button user pressing pull native event pain since new standard nice react synthetic events", "num": "13011", "d": "6/2018"}, {"title": "refs listener ca nt scroll scrollview reactnative android", "body": "got proximity sensor listener added like componentdidmount proximityaddlistener thisproximitylistener scrollview trying scroll list proximity ca nt get refs listener undefined trying something like", "num": "13010", "d": "6/2018"}, {"title": "exposing prevprops getderivedstatefromprops persistent view animations", "body": "want request feature report bug request feature current behavior expose expected behavior expose cleaner implementation use case mentioned versions react browser os affected issue work previous versions react react know similar discussion issues regarding exposing previous props believe came across use case useful specific yet required replicate lot previous props state component use reactnative add animation screens crossfade nt unmount instantly also checks next route overlay preserves screen behind see create work think terrible yet results lot repetition perhaps implementation missing something remove repetition maybe understanding exposing prevprops js flow import react component react import animated reactnative import durationnormal easeinquad easeoutquad servicesanimation import type node react type props pathname string data overlay boolean children node authenticated boolean type state prevpathname string prevchildren node prevdata overlay boolean animation animatedvalue activechildren node pointerevents boolean authanimation boolean class routefadeanimation extends component state prevpathname null prevchildren null prevdata null animation new animatedvalue activechildren null pointerevents true authanimation true static getderivedstatefromprops nextprops props prevstate state const pathname data children nextprops const prevpathname prevdata prevchildren prevstate returned always store previous props state compare future getderivedstatefromprops like use prevprops const prevpropsstate prevchildren children prevpathname pathname prevdata data check pathname changed ie going another view pathname prevpathname check current visible view modal go default return prevdata prevdataoverlay check future view modal data dataoverlay preserve current view animationg even though pathname changed return activechildren prevchildren pointerevents false prevpropsstate future view modal preserve current view visible behind else dataoverlay return activechildren prevchildren prevpropsstate previous view modal normal view follow modal reset view persistance use children opposed activechildren return activechildren null prevpropsstate persist prevprops state return prevpropsstate handles animation based cases componentdidupdate prevprops props const pathname data authenticated thisprops const authanimation thisstate authenticated amp amp authanimation thisanimate else pathname prevpropspathname prevpropsdata prevpropsdataoverlay data dataoverlay thisanimate animate value gt let delay value const authanimation thisstate authanimation delay animatedtiming thisstateanimation tovalue value duration durationnormal delay easing value easeinquad easeoutquad usenativedriver true start gt thisanimationlogic value animationlogic value gt value thissetstate activechildren null gt thisanimate else thissetstate pointerevents true authanimation false render const animation pointerevents activechildren thisstate const children thisprops return export default routefadeanimation usage example explanation component used wrap several routes pathname change preserve previous view animate replace new view animate idea comes reactrouter documentation use basic implementation look like js outside similar component called overlays component similarly animates views routerpropsdata set see original component checks preserves view appears behind modal would otherwise dissapear due route change", "num": "13008", "d": "6/2018"}, {"title": "html value attribute input type number element updated blur", "body": "want request feature report bug bug current behavior element attribute attribute html updated blur however nt case input element type check open developer tools look dom elements changing values need react side everything seems correct first look onchange handler getting fired value changed updating via attribute changed stepping browser input arrows keyboard arrow keys always stepping correct step value dom element nt correct value value attribute example step arrow key expected behavior attribute dom element also update change input type versions react browser os affected issue work previous versions react latest react version tested chrome firefox macos windows", "num": "13007", "d": "6/2018"}, {"title": "reactreconciler questions", "body": "want request feature report bug trying build custom renderer react using documentation examples able find support rendering target rerendering able discover looking info allows generate diff old props new props examples found say return array sure items array look like returning true method run old new props call instance tell update based props examples found rely props rather rely come methods appears run none various methods called leading reflect children tracked inside class case curious perhaps missing method implementation necessary nt know exists also noticed order called must also pass correct property get working examples see projects also object host config includes essentially copies methods host config try renderer methods never seem called also curious correct paradigm attaching underlying instances one another currently elements render method call render method children add children sub views instance cases children might change called render would end duplicate children parent seen examples elements attach parents rather rendering children attaching children seems like would resolve issue brings another question custom element correct time addremove children underlying instance examples seen use methods keep track children internally method renders children adds sub views question mind whether methods adding children subviews instance example instance method called add subview child element called remove subview instance rather simply using methods keep track children render time rather", "num": "13006", "d": "6/2018"}, {"title": "error missing key", "body": "using gatsby new gatsby react seeing following warning would like remove read key trying apply nt work warning child array iterator unique key prop check toplevel render call using see information unknown unknown created componentrenderer componentrenderer created route route created defaultlayout div created defaultlayout div created sidebarpusher sidebarpusher created defaultlayout mypagetsx main page passes value slug obtained graphql mycardtsx key specified card", "num": "13005", "d": "6/2018"}, {"title": "maintain data component state redux complex enterprise applications", "body": "suppose four components one screen container component component b component c component four developers working four components first approach follow maintaining data within state component approach redux created reducer component maintaing data component reduxand need send combine data components simply combine reducers send server api approach follow", "num": "13004", "d": "6/2018"}, {"title": "reactdom throws referenceerror requestanimationframe defined ssr environment since", "body": "want request feature report bug bug current behavior change seems broken serverside rendering attempting test getting following error serverside load page points line expected behavior referenceerror serverside environment versions react browser os affected issue work previous versions react published time writing node environment serverside rendering response browser request", "num": "13000", "d": "6/2018"}, {"title": "ca nt yield children generator render", "body": "want request feature report bug bug current behavior via thread passing result generator child nt work renders children without error warning current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example repro expected behavior example hundred numbered versions react browser os affected issue work previous versions react browsers appears validation logic drains iterator finally try get children returns nothing", "num": "12995", "d": "6/2018"}, {"title": "onblur onfocus nt bubble firefox macos using mouse events", "body": "tested react firefox macos nt bubble parent component focusing blurring button clicking outside almerosteyn writes bubble correctly firefoxwindows", "num": "12993", "d": "6/2018"}, {"title": "access ssr rendered markup component", "body": "want request feature report bug like request feature access ssr rendered markup component working custom pagination rendered server side dynamically connected client example ssr sends markup want grab order hydrate pagination component websocket got hash perform quick query server connect component websocket pushes however calling see component renders first without pagination information lazy loads solved issue creating list hashes server sending client blob seems little unwieldy could far simplified one able access ssr rendered markup like propose calling return ssr rendered markup", "num": "12992", "d": "6/2018"}, {"title": "explanation react behaving weird combining setstate animation scrollleft container", "body": "want request feature report bug bug current behavior application currently developing multiple cards carousel scrolled card card cards overflowing content scrollbars case unfortunately though depending number cards content issue wherein scrolling mousewheel scroll card content scrolling carousel one manifestation bug shown gif scroll card content move forward back sudden second card content scrolled anymore moving mouse outside carousel back without actually clicking works times felt reactthe browser thinks card still old place thus nt perform default behavior trying scroll relaying default scroll behaviour card current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example mwe repo found please use open build folder check issue chrome electron behaviour seen gif occuring corresponding block source file issue first iteration code clicking button calling animation react apparently expects old coords elements surprise work either expected animation called right react updates rerenders everything conversely adding callback animation like seems work prevent internal mismatch positions like know whether explain second variant nt working expected react issue scrolled elements", "num": "12991", "d": "6/2018"}, {"title": "trigger parent function nested child", "body": "hello team getting speed react following query parent component child child another child component structure parent component gt leve child component gt level child component parent component call back function handler gt thissetstate messageshown true passing handler function prop child wiithin child component within component button way trigger parent function handler component anypointers would great", "num": "12990", "d": "6/2018"}, {"title": "consider removing mobile safari empty onclick hack", "body": "see historical context still relevant code even relevant feature test hack browsers seems like waste memory event handlers even though function every time", "num": "12989", "d": "6/2018"}, {"title": "reactdom internet explorer exception thrown caught notfounderror", "body": "want request feature report bug bug current behavior reason ie raising exception pointing reactbatchprototypeoncomplete function thisdidcomplete return thisdidcomplete true const callbacks thiscallbacks callbacks null return todo error handling let lt callbackslength const callback callbacks callback expected behavior guess would nt throw exception callback call handled versions react browser os affected issue work previous versions react sure started seeing last month half thing exception pops randomly see happens project lot lately logs ill make fork seems easy handle posting visibility insight code actually would break ie welcome thanks", "num": "12988", "d": "6/2018"}, {"title": "componentwillupdate discussion", "body": "want request feature report bug feature componentwillupdate discussion current behavior current behavior calls function rerendering render target however indication rerender method called current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior expected behavior call function rerendering render target returned conditional statement true trigger rerender false versions react browser os affected issue work previous versions react questions try solve problem gets rejected assuming team decided move direction removing willupdates react together labeled unsafe seen lot issues functionalities well curious providing conditional statement inside functions would satisfy unexpected renders shouldcomponentupdate trigger call functions however functions run render always controlled conditional statement getting comfortable code base however curious team removing functionality together using static function getderivedstatefromprops instead react lover little confusing may break lot legacy code updating versions believe may solve problem unexpected renders change lifecycle event curious case removing lifecycles next steps react lifecycles work instead love react curious future react whole love tackle bugs feature requests time writing clean code create tests new features bugs well", "num": "12986", "d": "6/2018"}, {"title": "nested contexts nt unwind correctly server side rendering", "body": "want request feature report bug bug current behavior different contexts nested different types unwind correctly rendering via snippet demonstrates issue import react react import rendertostring reactdomserver const valuea letter const valueb letter b const lettercontext reactcreatecontext valuea const numbercontext reactcreatecontext undefined const html rendertostring lettervalue gt lettervalueletter innervalue gt innervalueletter value gt valueletter consolelog html results valueletter typeerror read property letter undefined objectchildren reactdomserverrendererrender reactdomserverrendererread rendertostring object modulecompile loader objectrequireextensions anonymous function js moduleload trymoduleload expected behavior context providers nested correctly unwind contexts return correct value level exception generated output versions react browser os affected issue work previous versions react uncovered using version osx using node shows using works expected browser note wonder might due following snippet previous provider added stack assumed type provider popped investigating hope provide pull request soon", "num": "12984", "d": "6/2018"}, {"title": "improve error message got unexpected object createelement", "body": "feature current behavior running edge case view reason gets object createelement triggering error unfortunately finding really hard debug set break errors reason breaking perhaps bug setup using chrome remote debugger componentdidcatch think area could improved lot outputting object got unfortunate good way log object error without hacky stringify things would certainly saved lot time years using react run type error times ideal would log warning dev mode error throws something like", "num": "12983", "d": "6/2018"}, {"title": "getderivedstatefromprops invoked update phase", "body": "want request feature report bug question lifecycle current behavior docs says invoked right calling render method initial mount subsequent updates diagram shows expected behavior exactly question versions react browser os affected issue work previous versions react react hot loader version react node v npm v operating system browser version", "num": "12982", "d": "6/2018"}, {"title": "get state error message using getderivedstatefromprops lifecycle even initializing state constructor", "body": "want request feature report bug bug current behavior component using life cycle import connect reactredux import component react class myapp extends component constructor props super props thisstate currenttab unsafecomponentwillreceiveprops nextprops thisstatecurrenttab nextpropstabnumber thissetstate currenttab nextpropstabnumber connect state gt tabnumber statecommoneditmyapptabstabnumber myapp import connect reactredux import component react class myapp extends component constructor props super props thisstate currenttab static getderivedstatefromprops props state statecurrenttab propstabnumber return currenttab propstabnumber return null connect state gt tabnumber statecommoneditmyapptabstabnumber myapp properly initialize state construction expected state object undefined error occurred state nullconnect function versions react browser os affected issue work previous versions react react os ubtunu", "num": "12981", "d": "6/2018"}, {"title": "render delayed execution based props working v working", "body": "want request feature report bug bug current behavior render runs immediately provided unique props initial mainparent rendering component v current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example render executed immediately called followed code path shouldcomponentupdate delayed execution nonunique props followed code path componentwillmount worked shouldcomponentupdate immediately ran calling reactdomrender childcomponent parentcomponent nt work componentwillmount ran current function parentcomponent finished executing please let know insufficient info expected behavior reactjs render always runs runs immediately whether props unique versions react browser os affected issue work previous versions react last working working", "num": "12979", "d": "6/2018"}, {"title": "mouseevent nt recognize react synthetic onmouseleave", "body": "want request feature report bug bug current behavior javascript mouseevent nt recognize react synthetic event code example current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example nt work whereas class app extends reactcomponent handlemouseleave gt consolelog left handleclose gt const evt new mouseevent onmouseleave view window bubbles true cancelable true render return reactdomrender documentgetelementbyid container click button nt trigger onmouseleave event expected behavior mouseevent sees synthetic event handles onmouseleave correctly versions react browser os affected issue work previous versions react react version browsers know", "num": "12978", "d": "6/2018"}, {"title": "modify state directly works", "body": "want report bug maybe current behavior expected behavior modify state directly modify state directly works setstate strange", "num": "12977", "d": "6/2018"}, {"title": "events nt work creating portal element shadow dom", "body": "want request feature report bug bug current behavior events emitted synthetic event system portal created element within shadow dom reproduction see expected behavior createportal detect element inside shadow dom versions react browser os affected issue work previous versions react probably major bug source confusion react however either support add warning development", "num": "12973", "d": "6/2018"}, {"title": "plan designing scopes chaining context api like old context", "body": "want request feature report bug feature current behavior although react new context api solved many pain points old unsafe context api still wish appropriate communication mechanism access scope context descendant component always reads context value closest ancestor context value expected behavior another new context api support context scopes chainingcascading components read context bottom contexts could shadowed components api also prevent old context api react issues eg update blocking reasonable situation like context api components libarary setted scoped theme context theme effects children also use control scope size scope privilege scope locale scope behaviours", "num": "12972", "d": "6/2018"}, {"title": "question lines reactfiberschedulerjs", "body": "want request feature report bug neither wanted ask question code specifically function comment says within max mirroring similar comments directly function code seems indicate otherwise comment needs updating something missing", "num": "12971", "d": "6/2018"}, {"title": "please help deleting issue", "body": "please help deleting issue", "num": "12969", "d": "6/2018"}, {"title": "react context issue", "body": "want request feature report bug bug current behavior one context consumer value another contexts provider current behavior bug please provide steps reproduce possible minimal demo problem example js const react require react const rendertostring require reactdomserver const provider locationcontextprovider consumer locationcontextconsumer reactcreatecontext location const provider basecontextprovider consumer basecontextconsumer reactcreatecontext base const e reactcreateelement const html gt rendertostring e locationcontextprovider value location e basecontextconsumer null basecontextvalue gt e locationcontextconsumer null locationcontextvalue gt e basecontextprovider value base e span null consolelog attempt html consolelog attempt html output expected behavior attempt attempt produce result versions react browser os affected issue work previous versions react react os issue appear version prior react using createreactcontext polyfill notes issue found trying use ryan new reachrouter ssr something like example communicating ryan opened following issue repository", "num": "12968", "d": "6/2018"}, {"title": "allow second parameter reactdomrender css selector", "body": "want request feature report bug request feature would lovely allow second parameter string like try implement wanted feature estimate bare basics done loc plus testing documentation current behavior need specify html element second parameter great api would allow lot flexibility cleaner code try pass string error thrown expected expected behavior second parameter accept string would used internally versions react browser os affected issue work previous versions react far", "num": "12967", "d": "6/2018"}, {"title": "returning empty fragment throws confusing error", "body": "rendering component like throws error foo nothing returned render usually means return statement missing render nothing return null error confusing clearly returning value nt know want support rendering empty fragments case error confusing nt allowed explicitly call component return fragment children cc gaearon", "num": "12964", "d": "6/2018"}, {"title": "signaling reusable instances", "body": "want request feature report bug feature common case list items keyed id items addedremoved time example say list users button refresh list new data server simple function component say produces following user elements later get new user list resulting elements operations remove destroy instance dom nodes move update create instance dom nodes would option tell react reuse instances dom nodes make sense list diff react information understand remove key type user index create key type user index signaled react reuse elements since type could reduce operations updating identity underlying instance key key update instance normally could also require move nt used reduces combined createdestroy operations instances dom nodes course optin behavior components wo nt clear internal state dom nodes hold uncontrolled state also cases could slower wager rare syntax secondary mostly want hear thought idea explicitly permitting react reuse instances simplest idea core ca nt think reasonable way user space less reasonable ways require duplicating effort diffing list allowing react simplify operations intends perform provides another performance hook react code people attempt apply optimizing react reactnative apps makes sense situation", "num": "12963", "d": "6/2018"}, {"title": "fetch never executed componentwillmount getderivedstatefromprops present", "body": "want request feature report bug bug current behavior found suspicious behavior happen component method never invoked request sent never called method gets called invoked wo called works ok called warning unsafe legacy lifecycles called components using new component apis called works ok called send request called expected behavior alone versions react browser os affected issue work previous versions react react hot loader version react node v npm v operating system ubuntu lts xenial browser version chrome version official build component", "num": "12962", "d": "6/2018"}, {"title": "reactstrictmode setstate function getting called twice", "body": "want request feature report bug bug current behavior calling setstate function gets called twice components wrapped reactstrictmode codesandbox set state calls thispropsname render return thispropsname const app gt output expected behavior setstate function called strictmode versions react browser os affected issue work previous versions react react browsers chrome firefox safari", "num": "12961", "d": "6/2018"}, {"title": "reactdomhydrate removing ssr dom error", "body": "want request feature report bug feature current behavior fails hydrate currently removes dom inside mount point jsx class app extends reactcomponent render throw new error return hydration successful reactdomhydrate documentqueryselector root eg expected behavior defaults replacing server side rendered dom error hydrating optional parameter versions react browser os affected issue work previous versions react react oss browsers", "num": "12960", "d": "6/2018"}, {"title": "multiple custom renderers time", "body": "want request feature report bug bugquestion current behavior get warning unexpected pop running two reconcilers time two custom renderers one main app ui one devonly debug ui react trees separate host component different works fine long dont stress seems get error work performed reconcilers time current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example sorry nt minimal repro yet indeed bug running two reconcilers time supported might spend time minimal repro expected behavior would expect two reconcilers work independently running time versions react browser os affected issue work previous versions react reactreconciler", "num": "12959", "d": "6/2018"}, {"title": "chinese translation bug", "body": "bug think situation make beginners doubting indentation code right check page", "num": "12958", "d": "6/2018"}, {"body": "take one", "d": "6/2018"}, {"body": "dcthetall", "d": "6/2018"}, {"body": "please see reply", "d": "6/2018"}, {"body": "nt appear related react static properties still stage proposal standard javascript yet need build system parse example could use babel babelplugintransformclassproperties plugin question please check community support resources", "d": "6/2018"}, {"body": "impression clicking field many times nt anything indeed game may end tie good find mentioned end list followup suggested exercises extra time want practice new react skills ideas improvements could make tictactoe game listed order increasing difficulty one wins display message result draw", "d": "6/2018"}, {"body": "bug seeing game end diagonal xxx line", "d": "6/2018"}, {"body": "oclock morning time go bed sorry talking crap", "d": "6/2018"}, {"body": "haha problem thanks taking time report", "d": "6/2018"}, {"body": "hey chris react contributor saw one try jump looks like might npm issues working perfectly right status returning certain registry reads better error build steps could help narrow nt seem like react thing weeks probably build territory", "d": "6/2018"}, {"body": "chrisschaub please provide full example reproducing issue details actual error getting impossible help without release published two weeks ago issue started occurring probably react issue tylerlee pointed issues npm could affecting build", "d": "6/2018"}, {"body": "thanks tyler looks issue literally ca nt find packages know exist wait til morning thanks wed jun pm tyler lee notifications githubcom wrote hey chris react contributor saw one try jump looks like might npm issues working perfectly right status returning certain registry reads better error build steps could help narrow nt seem like react thing weeks receiving authored thread reply email directly view github mute thread christopher schaub", "d": "6/2018"}, {"body": "looks like expected behavior true nt render component anymore gets unmounted false component gets rendered mounts constructor called component mounts behavior expected see constructor gets called even without cloneelement keep mind class component nt instantiated call see element never rendered constructor never called sugar returns representation react component nt actually called functionclass yet element actually gets rendered component react create class instance call lifecycle methods longer rendered instance eventually get gc element gets rendered even element react start whole process constructor called every time element rendered make sense close since expected please feel free ask clarifying questions", "d": "6/2018"}, {"body": "aweary thanks response makes sense value like example cloneelement wo nt retain value component unmounted however remains mounted like example cloneelement retain correct", "d": "6/2018"}, {"body": "curious would instance get garbage collected keeping reference via private member internal representation component garbage collected even though retain reference outerpublic representation", "d": "6/2018"}, {"body": "wish earlier might late probably lot code using pattern strictmodeonly", "d": "6/2018"}, {"body": "strictmodeonly works sure understand would lot code using pattern accidental noop far likely intentional noop also warning reckon people think know let ignore warning dunno inline react warning philosophy", "d": "6/2018"}, {"body": "sure understand would lot code using pattern accidental noop far likely intentional noop probably something like", "d": "6/2018"}, {"body": "sure understand would lot code using pattern accidental noop far likely intentional noop nt think necessarily likely also warning reckon people think know let ignore warning add warning nt want people ignore devalues warnings", "d": "6/2018"}, {"body": "strict mode", "d": "6/2018"}, {"body": "swyx want submit pr", "d": "6/2018"}, {"body": "yup attempt weekend thats ok tue jun pm brandon dail notifications githubcom wrote swyx want submit pr receiving commented reply email directly view github mute thread", "d": "6/2018"}, {"body": "ok rough day felt like needed psychological pickup going try anyone following along marking thought process fork facebookreact swyxreact open new branch search realize nothing note actually done eventually find find progress first argument called payload search rest codebase payload find finally find payloadcall could skipped ceremony known search updater function commented everywhere setstate executed unsure whats difference finally site insert warning yay done adding warning realize old way warning things strict mode warnings done seem track warnings already issued guess spam warnings realize kind warning doesnt place reactstrictmodewarnings rather add whole new category reactstrictmodewarnings leave unless powers decide necessary time write tests find test called inside basically want look absolute simplest test close particular piece code copy also colocate idea reactincremental looks like incremental rendering thingy based tests copy comment irrelevant bits intentionally return undefined updater test add strictmode test warning look similar warnings file fortunately one basically says use ok thats test done run docs say yarn test watch testname handy thats tests pass first try thats necessarily good want make sure tests fail supposed fail replace reactstrictmode reactfragment tests still pass uh oh return null updater test fails yes good broken test look like means strictmode condition nt anything either test wrong warning wrong revert updater return undefined still testing without reactstrictmode test pass every test tests reactstrictmode straightforwardly means warning implementation probably culprit use constant derived boolean misusing looks like call instead cool next step according docs better apparently options choose amp git commit add warning setstate updater function returning undefined strict mode branch fork react open pr facebookreact master", "d": "6/2018"}, {"body": "use typescript error assign state constant readonly property write constructor props super props thisstate", "d": "6/2018"}, {"body": "sorry dont think anything pr commenting right issue also want help react typescript please see", "d": "6/2018"}, {"body": "ref value native dom node returning may hidden collapsed browser bug ca nt think place react could buggy since object native browser object react nt styling layout things would cause zero height report zero height", "d": "6/2018"}, {"body": "nt think react problem think check content css well btw children function", "d": "6/2018"}, {"body": "elementclientheight readonly property zero elements css inline layout boxes otherwise inner height element pixels including padding horizontal scrollbar height border margin mdn try also sure current", "d": "6/2018"}, {"body": "name package packagejson private published may name", "d": "6/2018"}, {"body": "thanks clarifying trysound closing since resolved", "d": "6/2018"}, {"body": "hey use issue board track issues specific react sounds like might issue specific application please take look community support resources discuss challenges particular app", "d": "6/2018"}, {"body": "sure understand asking fiber codename core architecture rewrite became react use react using fiber async mode enabled default enable build master setting special build flag note buggy ready production yet works well enough demos patch bugs", "d": "6/2018"}, {"body": "nt think event unfortunately react limited browser natively fires browser nt fire change value nt change nt much appear least chrome native change events fired selecting option", "d": "6/2018"}, {"body": "react anything related routing bug react best guess something wrong set clientside routing takes navigation hard guess exactly without seeing complete reproducing example provide one might able help probably otherwise feel free check resources help", "d": "6/2018"}, {"body": "jbgarr try reproduce without react see get error guessing might works called node different window work", "d": "6/2018"}, {"body": "aweary thanks reply looks like issue indeed due ie handles sadly created jsfiddle shows issue vanilla js suggested yes work little trickier since call actually made thirdparty component reactselect using hacked together monkey patch solution might work definitely clean solution hoping anyone else ideas ears", "d": "6/2018"}, {"body": "thanks verifying since nt bug react going close best place usage questions community support resources may want try work author reactselect see provide better solution", "d": "6/2018"}, {"body": "issue react probably issue package manager using make sure mix find minimal way reproduce please feel free file bug yarn npm depending one using nothing actionable us closing future reference using react issue tracker bugs react library", "d": "6/2018"}, {"body": "gaearon sorry went wrong place", "d": "6/2018"}, {"body": "problem sorry able help", "d": "6/2018"}, {"body": "documentation omission please send pr", "d": "6/2018"}, {"body": "flow definitions react actually defined flow repo third party library definitions good solution direct flow related bugs feature requests flow repo directly thanks", "d": "6/2018"}, {"body": "makes sense thanks direction created", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "pomber wan na look happens", "d": "6/2018"}, {"body": "hi pomber thanks filing issue nt much context suspense works works fine switch following usage try look discuss people open kind discussion", "d": "6/2018"}, {"body": "hmm tried still happening found far updatehostcomponent sets fibers prop expirationtime never added effecttags without added effecttags", "d": "6/2018"}, {"body": "macrozone please test latest release", "d": "6/2018"}, {"body": "sure understand whole setup try answer yo best knowledge whenever context provider rerenders descendants rerender would happen normal component context api addition normal rules rerendering governed methods component tree forces updates consumers regardless whether pure component would normally bail update view consumer children rerender hope answer", "d": "6/2018"}, {"body": "danburzo understand component rerenders due props state context changes descendants rerender unless purecomponent setup sibling rerenders affected parent siblings rerender expected full chain provider parent b siblings component update b consumer context changes would expect b update updates well parent case update shouldcomponentupdate return false edit remove b wo nt rerender context changes never experienced react rerenders component something happening child even tried wrap b components result rerender context changes long b provider somewhere deep check whether setup simple reproduction wanted ask scenario could happen react aweary reactnative project simple use react", "d": "6/2018"}, {"body": "aweary could install result", "d": "6/2018"}, {"body": "macrozone correct assumption sibling consumer inside pure component normally rerender fact behaves exactly like jsx const ctx reactcreatecontext class app extends reactcomponent state count thispropscount incrementcount e gt thissetstate currentstate gt count currentstatecount render return class pureparent extends reactpurecomponent render return const consumerchild props gt count gt count count let rendercount const othersibling props gt sibling rendercount reactdomrender documentqueryselector app see codepen component rerenders due props state context changes descendants rerender unless shouldcomponentupdate purecomponent true except context updates push tree update consumers", "d": "6/2018"}, {"body": "macrozone please provide complete example using react codepen thanks", "d": "6/2018"}, {"body": "danburzo thank much help codepen works exactly would expect something else try reproduce reactnative would come back insights", "d": "6/2018"}, {"body": "note rn might include bug fixed updating react package help case reconciler code manually synced rn need wait matching release", "d": "6/2018"}, {"body": "gaearon indeed could reproduce bug reactnative tried mimick reactnavigations tab navigator dom rn rn expo snack dom tab change sibling rerenders rn wrong behaviour dom right behavior gaearon proceed fix landed rn might serious impact performance", "d": "6/2018"}, {"body": "think fix would", "d": "6/2018"}, {"body": "gaearon try update see works altough react seems use react edit fixed reactnative", "d": "6/2018"}, {"body": "good bey see", "d": "6/2018"}, {"body": "cool", "d": "6/2018"}, {"body": "cittalab provider nt prop using see documentation unless context keyword behave prop name example value defined react docs context api example behave like prop case provider component nt use behavior would even removed prop get passing initial value using prop provider", "d": "6/2018"}, {"body": "ahh missed bad thank", "d": "6/2018"}, {"body": "never mind nested setstate react dom handle", "d": "6/2018"}, {"body": "isolate selfcontained example could look guess bug probably put item multiple times unique enumerate", "d": "6/2018"}, {"body": "thank gaearon yes right bug nested many setstate code stuck infinitive loop", "d": "6/2018"}, {"body": "provide reproducing case", "d": "6/2018"}, {"body": "easy case reproduce run code arrayprototypepush click button look records explain detail chinese upload reproducing case github later detail", "d": "6/2018"}, {"body": "mutate prototype arrays application effectively breaking array operations react issue react requires array prototype tact recommend avoid modifications global prototypes", "d": "6/2018"}, {"body": "philippspiess think problem generally feel improve adding parameter check catch error", "d": "6/2018"}, {"body": "use case code think removed avoid issues module using", "d": "6/2018"}, {"body": "use code inadvertently found lead bugsthe program continue used removed code nt think reasonable check whether parameter empty even internal call", "d": "6/2018"}, {"body": "nt think reasonable check whether parameter empty even internal call guard every possible change global objects javascript possible rewrite prototype methods arrays also strings objects html elements etc would totally scope react verify modification occurred warn implications idea done reasonable amount code react development builds sure react team consider accepting contribution", "d": "6/2018"}, {"body": "guard every possible change global objectsin javascript possible rewrite prototype methods arrays also strings objects html elements etc nt think nt think resonable used function extrctevents without checking may suggest check parameter using thanks time javascript var possibleplugin plugins check parameter using possibleplugin amp amp typeof possiblepluginextractevents function", "d": "6/2018"}, {"body": "every single function uses arrays really acceptable", "d": "6/2018"}, {"body": "thanks get nt know habit like check whether functions undefined use functions variables", "d": "6/2018"}, {"body": "problem javascript insert ignore rest code need open paren line", "d": "6/2018"}, {"body": "gaearon thank", "d": "6/2018"}, {"body": "react nt anything idle time default version future reconciliation state updates might deferred idle time instead processed synchronously likely api opt specifics decided", "d": "6/2018"}, {"body": "react nt anything idle time default version think accurate iirc use requestidlecallback refactor implementation ric", "d": "6/2018"}, {"body": "used use polyfill async mode turned default react", "d": "6/2018"}, {"body": "mind would accurate say async mode react additional work idle albeit negligible scenarios ui layer gamedev might important", "d": "6/2018"}, {"body": "schedule lowpriority work exact mechanism determined react wo nt make random stuff slower spending idle time idea something nt need synchronous better deferred chunks react wo nt create work thin air amount work overall async sync blocks thread", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "think locked used spam maybe remove page move somewhere", "d": "6/2018"}, {"body": "maybe team accept pull requests websites verify using dev tools react ensure spamming", "d": "6/2018"}, {"body": "point sure lot value maintaining official list like great showcase users page little visibility gotten long nt really serve great showcase anymore", "d": "6/2018"}, {"body": "manually setting value textarea change via method component causing issue create unexpected results someone using imes compose characters nonlatin scripts removing part seems solve issue", "d": "6/2018"}, {"body": "good rule thumb remember need choose whether control something react manual dom manipulation since vdom element provided props dom element value property controlled react manually change", "d": "6/2018"}, {"body": "see fault sorry taking time thanks advice", "d": "6/2018"}, {"body": "solution problem essentially reflection happening others example essentially need call native functions get render keeping state check validity render rendering caret maintains position particular example result exact ever rerender inputs change cause change state validity check also ever get different value inputs change", "d": "6/2018"}, {"body": "thanks lot deecewan worked also found another way fix behavior react adds event listener invalid event every time call method emits simple invalid event form input invalid forces react rerender form inputs property property contains input validity state nt emit event calling forms method pretty similar looping form inputs taking validity state something like force react rerender hope help somebody nt want save validity state", "d": "6/2018"}, {"body": "version node running run node inside docker worked perfectly expected also issue probably", "d": "6/2018"}, {"body": "please check community support resources filing issue deecewan said find bug filed createreactapp repo", "d": "6/2018"}, {"body": "annoying wonder extended usual", "d": "6/2018"}, {"body": "specific reason want report constructor name implementation detail", "d": "6/2018"}, {"body": "little tool help debugging ui events inside react contenteditable pretty useful figuring debug things like richtext editors work well across devices eg weird behaviors like various imes like autocorrect really significant issue tiny thing used work", "d": "6/2018"}, {"body": "synthetic event construct name help debugging curious value provides using event type really wanted report constructor name could manually map event types corresponding constructor rarely changes ever", "d": "6/2018"}, {"body": "curious value provides using event type might also helpful unless specifically debugging react", "d": "6/2018"}, {"body": "yes actually showing well native event originated synthetic one bit extra info know search react codebase live without wanted hear opinion thank realize would nexttolast priority also recreate mapping added bonus use production ie minified version react website", "d": "6/2018"}, {"body": "easy fix happy merge looked problem", "d": "6/2018"}, {"body": "anything easy comes mind make pr thank", "d": "6/2018"}, {"body": "nevermind docs says using value props instead children provide value adding warning someone provide children textarea", "d": "6/2018"}, {"body": "ok nevermind warning xd cheers folks", "d": "6/2018"}, {"body": "functional components shallow equality checks default would necessarily faster add shallow equality checks fact make app slower even components always shallowly different props would still perform useless shallow equality checks would also make impossible convert commonly used components functional apps rely mutation afraid cause confusion word pure functional components pure computer science sense word named way superseded performed shallow equality checks thing perhaps would better name hard spell correctly went", "d": "6/2018"}, {"body": "thanks explanation", "d": "6/2018"}, {"body": "think styledjsx css modules already achieve thinking", "d": "6/2018"}, {"body": "aesthetic prefer cssinjs approach selfplug", "d": "6/2018"}, {"body": "jss nice cssinjs option used guys behind materialui react library needless say take pick solutions react issue", "d": "6/2018"}, {"body": "vue approach bit different would actually need kind internal support work probably nothing babel transform basically add key every single dom element directly generated file classes modified require attribute present match far know recursive affect dom elements generated components would implementable core", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "thanks everyone replying helpful resources change react think would improve styling please consider filing proposal react rfcs repo mean time close", "d": "6/2018"}, {"body": "react nt anything special clone object otherwise prevent mutating state one best way decide handle find difficult update nested immutable objects libraries like immer help", "d": "6/2018"}, {"body": "react ship type definitions typescript uses community provided types date using package management need", "d": "6/2018"}, {"body": "sounds like typescript error react one search exist type find errors coming typescript nt know fix probably need update ts react definitions", "d": "6/2018"}, {"body": "gaearon even closing comment helpful whatsoever pretty sure know exist type message means problem idea solve context react means reactrelated issue", "d": "6/2018"}, {"body": "sorry reply frustrating trying say neither react maintainers typescript users ca nt help error messages coming typescript welcome reach typescript community forums ask using typescript would nt see assume choice specifically understanding use library react typescript need install typings instruct typescript library nt maintain react typings somebody else typings using probably outdated probably update make typescript see new apis however nobody maintains react repository using typescript ca nt advise update typings ask typescript forum discussion board bet get prompt response note react require use typescript individual developers make choice cheers", "d": "6/2018"}, {"body": "closing using issue tracker bug reports feature requests react neither try respond questions case right people answer question maintain list community resources might typescript users check hope helps", "d": "6/2018"}, {"body": "gaearon nothing frustrating useless nmain answer solved problem cheers mate obviously people help least let us discussion please close away", "d": "6/2018"}, {"body": "rufix sorry useless already explained literally nt know answers get better responses typescript error messages typescript forums closed got response thanks nmain closing nt stop discussion way removes action list issue actionable us", "d": "6/2018"}, {"body": "react nt perform child reconciliation child element referentially equal previous version words renders every time rendered skip updating rendered js const constantelement function app return constantelement course update inside rerender nevertheless three reasons works way performance optimization ends pretty important components accept state unrelated children like hover would wasteful reconcile children whenever interact wrapper lets smart compilers give hints react certain elements static hoist avoid rendering unnecessarily assumed want pass mutable data components via props thus create new elements every render general nt recommend accessing globals like render hoping component rerenders component instead make component stateful let set interval update cares value hope helps", "d": "6/2018"}, {"body": "gaearon thanks lot always detailed helpful answer", "d": "6/2018"}, {"body": "use static getderivedstatefromprops cause thisprops render componentdidupdate wo nt updated anymore getderivedstatefromprops nextprops nextprops update hope render thisprops update componentdidupdate thisprops update use componentwillreceiveprops insteadof static getderivedstatefromprops thisprops render componentdidupdate update need", "d": "6/2018"}, {"body": "hard understand problem provide code example", "d": "6/2018"}, {"body": "please provide code example could run clear asking", "d": "6/2018"}, {"body": "please read blog post think need code probably already bugs implementation nt buggy would nt change behavior react learn bugs occur rely parent rerender specifically examples section learn preferred solutions nt involve nt plan change method name think main misunderstanding attempt copy props parent instead deriving props change blog post details hope find helpful remember cases nt need use exists rare use cases hopefully recommendations guide simpler solutions", "d": "6/2018"}, {"body": "gaearon learned lot articles related issues nice answers thank", "d": "6/2018"}, {"body": "use issue tracker bug reports feature requests use appropriate platform promote proposal document contributing ecmascript likely good starting point", "d": "6/2018"}, {"body": "mean proposal useless react react dev team nt interesting", "d": "6/2018"}, {"body": "wrong place ask feedback support proposal follow standard proposal process outlined document linked react team involved provide feedback committee", "d": "6/2018"}, {"body": "tried", "d": "6/2018"}, {"body": "would appropriate expose renderers like nt decided final api portals wanted make work use cases eg universal clientserver crossrenderer portals kind stalled think want use portals custom renderers today feel free copy paste something like js const hassymbol typeof symbol function amp amp symbolfor const reactportaltype hassymbol symbolfor reactportal export function createportal children containerinfo implementation key null reactportal return typeof reactportaltype key key null null key children containerinfo implementation unlikely change either constant object shape near future", "d": "6/2018"}, {"body": "going stable figure final api fine thank", "d": "6/2018"}, {"body": "also simplify importing symbol well", "d": "6/2018"}, {"body": "rather thanks", "d": "6/2018"}, {"body": "worked perfectly thanks thank way long time since able properly use react things clearly evolved right direction moreover writing renderer daunting task either managed get fully featured react matter weeks completely different environment dom continue awesome work", "d": "6/2018"}, {"body": "neat wan na share details love learning unusual react targets", "d": "6/2018"}, {"body": "got ta make sure first eventually discuss reactiflux twitter dms point", "d": "6/2018"}, {"body": "get link", "d": "6/2018"}, {"body": "links reactjsorg seem html end", "d": "6/2018"}, {"body": "find let us know please file issue instead thanks", "d": "6/2018"}, {"body": "sorry late response got googling proptypes seems problem google docs today clicking link google search works expected", "d": "6/2018"}, {"body": "sometimes suggested better solution would leave place failing components think might sound better intuitively pretty bad practice things randomly popping screen errors leads pretty jarring user experience imagine js whenever function threw error would treated returned instead might work sometimes cause errors cases lead wrong behavior yet cases example imagine shopping cart ui items checkout form disappear might accidentally buy things need imagine status update form privacy selector disappearing might accidentally post something public visibility thinking sharing friends overall pretty dangerous idea wo nt default feel strongly good solution always explicitly wrap every component error boundary eg via hoc recommend instead suggest design errors intentional states appropriately coarse granularity level", "d": "6/2018"}, {"body": "see also past discussions", "d": "6/2018"}, {"body": "cool gaearon thanks links feels bad bringing topic totally get point errorboundary wagon really improved handle errors react read others discussions nt seem generic see benefit brings think could optin could supress errors intentionally subtree could something like make sure developers understand dangerous another alternative could component instead returning could return component show error place happened case ui would hide errors also fallback every component without errorboundary sure retry would work clear flags rerender const defaulterror something went wrong rendering componentretry class myexternalwidgerrenderer extends purecomponent needs help naming things defaulterrorboundary error info gt node defaulterror supresserrorcomponent error info gt node defaulterror see point implementing something like would encourage writing less error boundaries nt sound crazy anyways get point react encourage good practices writing boundaries grin", "d": "6/2018"}, {"body": "use reparenting today", "d": "6/2018"}, {"body": "use reparenting today use pspdfkit avoid recreating large subtrees like page pdf annotations etc example change layout hierarchy also use cases worked around userland like avoiding call render pdf backend could solved custom cache", "d": "6/2018"}, {"body": "another option would fix continue work reparenting support react remove", "d": "6/2018"}, {"body": "performance optimization preserve state", "d": "6/2018"}, {"body": "performance optimization preserve state performance optimization necessary state hoisted edit well also preserve state right worked around custom cache", "d": "6/2018"}, {"body": "company ongoing backbone react migration done avoiding recreations backbone components change hierarchy layout happens relatively easy component implementations rely internal state eg show animations cases migration react happens would need reparenting order preserve internal component state", "d": "6/2018"}, {"body": "one posts gets issue remove dom element tree add back tree guaranteed keep certain transient properties particular scroll state may part result flow layout affected element old location reset often reset browsers note react remove readd somebody handle reordering particular case handle problem gsbu cdu note change work optimal ways", "d": "6/2018"}, {"body": "nmain thank much quick reply links rather unfortunate case makes sense least", "d": "6/2018"}, {"body": "look understand", "d": "6/2018"}, {"body": "imaginetom sure asking", "d": "6/2018"}, {"body": "chrisgbaker check kind events receive ipad native dom vs react may help shed light situation also one fiddles uses onkeyup onkeydownonkeypress get way check similar setups nt ipad bluetooth keyboard test", "d": "6/2018"}, {"body": "another thing try read synthetic event see helps", "d": "6/2018"}, {"body": "danburzo thanks check site monday update issue accordingly far differences two fiddles extension trying multiple methods result regardless", "d": "6/2018"}, {"body": "ca nt help without reproducing example", "d": "6/2018"}, {"body": "yes faced kind situation wrong thing assigning new value state variable follows thissetstate thisstatevarname newvalue correct form thissetstate varname newvalue might reasons well code required resolving specific", "d": "6/2018"}, {"body": "close clear issue description", "d": "6/2018"}, {"body": "sounds like problem build environment package able require follow node resolution mechanism commonjs bundles", "d": "6/2018"}, {"body": "gaearon right far know also listed dependency list even dependency module still dependency custom build environment rely", "d": "6/2018"}, {"body": "js depends caller defining static methods give automatically call get got called however call get decided equivalent second way calling react primarily static lifecycle method supporting confuse lot people also another reason want share call methods usually want private case would better completely extract class anyway move functions call functions class", "d": "6/2018"}, {"body": "ok got static method rather pure function case autobind fix", "d": "6/2018"}, {"body": "determine rerenders", "d": "6/2018"}, {"body": "decide dynamic elements need rerenders static elements nt therefore splited understand document react checks nodes children updates nodes changed case element rerendered console choose tools rendering paint flashing shows element repainted case think highlights part page need rerendered since effect included", "d": "6/2018"}, {"body": "need reproducing example better understand issue", "d": "6/2018"}, {"body": "could similar raised", "d": "6/2018"}, {"body": "context solve use case render provider within consumer increments updates levelorder descendant consumers questions please check community support resources", "d": "6/2018"}, {"body": "wouldnt give depth order ie adjacent consumers would depth", "d": "6/2018"}, {"body": "assuming mistaken reopen issue comment mean take community resources unfortunately tried believe gap react functionality", "d": "6/2018"}, {"body": "nt mean make nuisance really ca nt see proposed solution solves aweary forgive mention really something need go away community accept nt something react", "d": "6/2018"}, {"body": "quick google search found", "d": "6/2018"}, {"body": "think question commits rn repo fabric experimental rewrite core pieces react native architecture goal improving threading model interop native code", "d": "6/2018"}, {"body": "want send fix", "d": "6/2018"}, {"body": "sure something hrs", "d": "6/2018"}, {"body": "interesting direction would introduce lot churn class api nt solve composability issue rx example ideas make use cases easier share fully formed thanks", "d": "6/2018"}, {"body": "hey chikarao since prop make sure getting updated parent componentcontainer value still also check type make sure coercion happening although nt related question clean code bit following cheers", "d": "6/2018"}, {"body": "okay thanks ended checking emptiness images prop worked fine imageindex apparently updated images", "d": "6/2018"}, {"body": "glad figured cheers", "d": "6/2018"}, {"body": "react nt really depend corejs practice anything true dependency tree kinda unfortunate nt end using modules react ca nt possibly break app seeing kind conflict probably means package manager bug incorrectly hoists package version", "d": "6/2018"}, {"body": "yarn issue nt really know hoisting works provide basic reproducible repo submit issue", "d": "6/2018"}, {"body": "ca nt tell screenshot nt show attempting import module", "d": "6/2018"}, {"body": "packagejson root project tested isolation yarn npm behaviour different npm installs correctly updated dependency whereas yarn gives precedence one make repo submit issue yarn hopefully look", "d": "6/2018"}, {"body": "nt understand saying asking package attempting load failing", "d": "6/2018"}, {"body": "sorry flag using async iterators async iterators present corejs", "d": "6/2018"}, {"body": "saying depends nt get version expects", "d": "6/2018"}, {"body": "yup using yarn checked corejs version nodemodules manually packagejson edit maybe something wrong let create repo", "d": "6/2018"}, {"body": "version top level folder necessarily matters matters following node resolution algorithm package imported gives right version tools like npm yarn choose put package folder long nt break expectations nt matter looking reproducing example version get package manager nt anything wrong long require inside everything work exist without explicit dependency", "d": "6/2018"}, {"body": "thanks time investigating gaearon yup right issue yarn turns require outside basically babel described docs transforms import actually done application babel tells add dependencies corejs gets installed also dependencies using import application gets resolved different version think happening", "d": "6/2018"}, {"body": "makes sense", "d": "6/2018"}, {"body": "solved adding also dependency", "d": "6/2018"}, {"body": "probably want peer dependency instead", "d": "6/2018"}, {"body": "rather want peer dependency thus forcing user preset install correct version", "d": "6/2018"}, {"body": "cc samypesse aweary case interested look", "d": "6/2018"}, {"body": "fixed", "d": "6/2018"}, {"body": "expected see details change breaks code means code already bug causes state reset often", "d": "6/2018"}, {"body": "gaearon thank clarification", "d": "6/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "6/2018"}, {"body": "according browser support section docs react support polyfills ie ist list", "d": "6/2018"}, {"body": "duplicate", "d": "6/2018"}, {"body": "hey use issue tracker bug reports feature requests react core question please check community support resources believe bug react native open issue facebookreactnative sure provide requested information", "d": "6/2018"}, {"body": "discussed lot", "d": "6/2018"}, {"body": "exposing good value could use would nt drawbacks another reason want discourage use gdsfp altogether repetitive intentional cases people nt actually need guess case might exception although honest nt fully understand trying hard advise simplify code maybe could create equivalent example codesandbox reactdom mock code demonstrates behavior going would easier", "d": "6/2018"}, {"body": "maybe help put inline comments gdsfp explaining want happen user point view every ifelse condition branch", "d": "6/2018"}, {"body": "gaearon added inline comments example usage link docs idea originally taken note using reactrouter custom routing solution think linking page help explain part looked see guys trying achieve terms encouragement needs used however still feel cases comparison needed previous incoming props without access require duplicating state see example store every return via hurts inside little ps nt think correct use getsnapshotbeforeupdate", "d": "6/2018"}, {"body": "transition animations based props one rare areas gdsfp probably makes sense yeah looks like need using commit kind implicit api modals particularly good news logic trying implement quite complex used obscure complexity always forces confront think quite likely code buggy concerning unconditional return value end also concerning side effects guarded check involving previous next props think might ways simplify code suggest without able run debug better understand exactly practice", "d": "6/2018"}, {"body": "gaearon alright believe discussion substantial enough close issue thank feedback add condition checks last return actually needs update state values ie changing next props first attempt gdsfp bit rushed", "d": "6/2018"}, {"body": "one thing helps debug kind code put fast interval force update parent component forces child rerender often check breaks transitions", "d": "6/2018"}, {"body": "neat trick issues popped still added extra checks however works made peace duplicating things state guess use case requires thank much time", "d": "6/2018"}, {"body": "note also put whole object state eg helps", "d": "6/2018"}, {"body": "yeh actually way beginning personal preference lays specifying whats used specific level hence added fields", "d": "6/2018"}, {"body": "found solution prevent odd behaviour add prop working nt know", "d": "6/2018"}, {"body": "hey mamiu thanks writing great issue examples helpful behavior intentional host issues occur value attribute assigned user inserting text involve messing cursor position rounding offreplacing value unexpected ways compromise landed synchronize value attribute blur edge cases could least mitigated user interacting form super frustrating user long term discussion removing value attribute syncing altogether however time tradeoff make avoid lot issues number inputs still second example curious dug bit deeper pulled logic example attempted recreate closely possible outside react behavior consistent looks like browser dynamically calculating minmax value fly really hard check way could figure report force form validation every change curious also makes believe nt bug react strange standard browser behavior unfortunately nt think anything react side thank sending", "d": "6/2018"}, {"body": "prepareupdate allows generate diff old props new props examples found say return array sure items array look like returning true method return anything typically use arrays required whatever return passed second argument first method lets calculate diff props second one apply methods separated diffing happen asynchronously actual mutation performed everything ready typically use form like props changed use format commitupdate run prepareupdate old new props call instance tell update based props examples found rely children props rather rely children come methods appendchildremovechild right correctly handle children need reimplement react instead react calls appropriate methods adding removing moving appears commitupdate run none various child methods called leading newprops commitupdate reflect children tracked inside class sure mean specific example would help react take care calling appendinsertbeforeremovechild appropriate anything special work maybe reactdom implementation would help also noticed order commitupdate called must also pass supportsmutation correct property get working yes examples see projects also mutation object host config includes essentially copies child commitupdate methods host config try renderer methods never seem called examples use older reconciler version new one removes mutation object instead uses supportsmutation property puts methods top level object approach correct also curious correct paradigm attaching underlying instances one another currently elements render method call render method children add children sub views instance cases children might change called render would end duplicate children parent seen examples elements attach parents rather rendering children attaching children seems like would resolve issue brings another question struggling understand description need explicitly manage children nodes except implementing methods like appendchild react call need attach anything manage parentchild relationships please refer dom implementation help custom element correct time addremove children underlying instance also struggling understand asking exactly first code example paragraph looks reasonable second one understand second one reconciler call method called render", "d": "6/2018"}, {"body": "sure mean specific example would help react take care calling appendinsertbeforeremovechild appropriate anything special work think answers answered question struggling understand description need explicitly manage children nodes except implementing methods like appendchild react call need attach anything manage parentchild relationships please refer dom implementation help examples seen keep track children inside custom elements example method call render attach children subviews underlying instances method render children methods called way typically kind way following initial render also struggling understand asking exactly first code example paragraph looks reasonable second one understand second one reconciler call method called render examples along lines referring using keep track children internally method use actually render underlying views children libui widgets case curious correct approach cases work attaching subviewsremoving subviews underlying ui library methods called brings another question list methods call operations addingremoving children list able put together reading projects sure even correct", "d": "6/2018"}, {"body": "examples seen keep track children inside custom elements well guess depends whether exists api manages underlying children api case dom use whole premise using reconciler lets translate declarative render operations imperative platformspecific appendinsertremove calls translation way around sounds like losing valuable information overall recommend looking projects intended way use methods look code already linked dom implementation methods help curious correct approach cases work attaching subviewsremoving subviews underlying ui library methods called calling underlying library appendinsertremove methods definitely intended approach list methods reactreconciler react call operations addingremoving children yes linked dom renderer host config every export method need implement several sets common mutation persistence hydration probably need commonmutation also find full list", "d": "6/2018"}, {"body": "pattern keeping track children custom element also suggested way", "d": "6/2018"}, {"body": "awesome look react dom implementation super helpful really appreciate willingness help understand better", "d": "6/2018"}, {"body": "cool updated readme reactreconciler remove guide fixed also filed issue sorry nt realize guide offered confusing advice thanks bringing attention", "d": "6/2018"}, {"body": "gaearon persistence mode expose new method invoked change orderarguments common methods called difference", "d": "6/2018"}, {"body": "look whole list renderers know include common methods mutation persistent renderer includes common persistence instead either could optionally support hydration", "d": "6/2018"}, {"body": "shichongrui updated tutorial making custom react renderer also code custom components let know", "d": "6/2018"}, {"body": "awesome thanks great tutorial one could find detailed", "d": "6/2018"}, {"body": "ghernando applying key component child need apply key component returned future reference use issue tracker bug reports feature requests question please check community support resources", "d": "6/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "6/2018"}, {"body": "ok thanks", "d": "6/2018"}, {"body": "fixed", "d": "6/2018"}, {"body": "workaround use iterable like", "d": "6/2018"}, {"body": "think workaround iterators work right seems expected note iterable support primarily things like immutable lists etc", "d": "6/2018"}, {"body": "yes suppose agree seemed unexpected", "d": "6/2018"}, {"body": "yeah get issue like every months maybe could materialize early", "d": "6/2018"}, {"body": "look source reactchildren reactelementvalidator see easy win", "d": "6/2018"}, {"body": "biggest problem works fine production builds", "d": "6/2018"}, {"body": "embed result twice think expect see twice would actually see even production mode", "d": "6/2018"}, {"body": "gaearon embed iterable renders first result always make multiple calls generator think would common definitely confusing nt understand generators though", "d": "6/2018"}, {"body": "tested exact example firefox windows events bubble parent tag browsers tested windows", "d": "6/2018"}, {"body": "necessarily seeing behavior tabbing components results logs expect tested ff mac sierra", "d": "6/2018"}, {"body": "jquense right buggy behavior clicking tabbing elements works ffmac updated issue reflect", "d": "6/2018"}, {"body": "nearautomata scroll", "d": "6/2018"}, {"body": "whsdothk browser use chrome electron get issue surprisingly edge cause issue", "d": "6/2018"}, {"body": "nearautomata using ff also works chrome", "d": "6/2018"}, {"body": "tried windows macos mac nt work chrome worked windows though still work whsdothk os using payed attention move mouse carousel area", "d": "6/2018"}, {"body": "nearautomata nt understand code carousel scrolling would affect scroll div", "d": "6/2018"}, {"body": "whsdothk ah misunderstanding fact carousel scrolling works issue content breaking news card scrolled scrolling carousel back forth shaking around mouse gif try scroll inside card moving carousel back", "d": "6/2018"}, {"body": "hey use issue tracker bug reports feature requests question please check community support resources", "d": "6/2018"}, {"body": "yes example class parent extends component handler thissetstate messageshown true render return class extends component render return class extends component render return need pass props use wherever required", "d": "6/2018"}, {"body": "thanks", "d": "6/2018"}, {"body": "like limit safari looks like still need noninteractive elements quick checks using definitely still issue ios looks like nt problem desktop safari wonder best way detect safari generally apply fix", "d": "6/2018"}, {"body": "literally featuretest like dispatching event seeing bubbles something", "d": "6/2018"}, {"body": "problem relying useragent etc get messed webviews", "d": "6/2018"}, {"body": "ah totally agree feature detect check later today wonder could something like let nobubble true document come let parent documentcreateelement div let child documentcreateelement div let event documentcreateevent event parentappendchild child eventinitevent click true false parentaddeventlistener click gt nobubble false childdispatchevent event", "d": "6/2018"}, {"body": "thanks report bole need example reproducing issue help", "d": "6/2018"}, {"body": "closing since follow", "d": "6/2018"}, {"body": "curious personally prefer focus less state props brings back appropriate page source server side react initial renders initial state every curious future react stay current new directions react", "d": "6/2018"}, {"body": "condense specific question struggling understand asking expanding contract let return value wo nt solve problems us", "d": "6/2018"}, {"body": "best using lifecycles going deprecated may break lot code updating new versions react", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "suspect nt see searched existing issue apologies", "d": "6/2018"}, {"body": "problem still happy take fix", "d": "6/2018"}, {"body": "working", "d": "6/2018"}, {"body": "analysis nt think exactly issue issue revolves around multiple renders whereas one single render suspect area nt", "d": "6/2018"}, {"body": "issues symptoms root bug related handling context providers track", "d": "6/2018"}, {"body": "fixed react", "d": "6/2018"}, {"body": "natew using componentdidcatch second argument object property stack trace components useful locating source errors like demo unfortunately finding really hard debug set break errors reason breaking perhaps bug setup using chrome remote debugger componentdidcatch think area could improved lot outputting object got pause exceptions wo nt work react handles failures reconciliation even work would pause inside react scheduler would nt helpful using best way handle debugging errors like", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "aweary thank ah stack saying name root view nt realize meant one children returning fragment stack basically says happened somewhere view nt know meant happened exactly root view could children within view guess specifying index perhaps would helped either way worst thing glad clear", "d": "6/2018"}, {"body": "glad helps component stack pretty accurate comes reporting error occurred component named top stack almost always component throwing error start work way since nt bug feature request going close let know questions", "d": "6/2018"}, {"body": "diagram wrong made based buggy version unfortunately react expected behavior fire cases", "d": "6/2018"}, {"body": "try replacing code think resolve issue expecting return something case", "d": "6/2018"}, {"body": "mrgurdeep thanks proposition got error", "d": "6/2018"}, {"body": "slimhmidi code works well nt see error could happen try create simplified version app still exhibits problem", "d": "6/2018"}, {"body": "debug component app realized first load called constructor point confused constructor called first", "d": "6/2018"}, {"body": "debug code nt understand constructor called changed life cycle however got eslinterror mentioned included based eslintpluginreact found updating state component update trigger second render call lead propertylayout thrashing propositions", "d": "6/2018"}, {"body": "slimhmidi stack trace looks like using higher order components would suggest looking components seeing implement use buggy version versions less similar pattern bug library incorrectly hoisted parent hoc example jsx import hoist hoistnonreactstatics const ahigherordercomponent component gt class wrapped extends reactcomponent initialize state render return hoist wrapped component might lift components getderivedstatefromprops method return wrapped", "d": "6/2018"}, {"body": "debug component app realized first load called constructor definitely happening unless something hoisting lifecycle methods component another component eg copying onto component initialize hocs sometimes hamlim mentioned specifically library might fault since using look like latest version library knows copy suggest trying either update dependency", "d": "6/2018"}, {"body": "holdoffhunger mean worked nt work mean nonunique props current function parent component", "d": "6/2018"}, {"body": "holdoffhunger checkout first three choice construct mount class instance may true prevent run immediately run think say run bug nt know bug please provide example jsfiddle codesandbox", "d": "6/2018"}, {"body": "hey gaearon whsdothk thanks getting back sorry confused description really put together code sample instructions state drag amp drop red box left right right left back right causes event nonunique properties new component nt render fact render actually run much needed let know think thanks", "d": "6/2018"}, {"body": "holdoffhunger allowed react update existing component instead using render", "d": "6/2018"}, {"body": "hrm exact code works v looking running may nonunique keys may cause children duplicated andor omitted using nonunique keys never supported previously hard error going look", "d": "6/2018"}, {"body": "whsdothk innerhtml vs unmount made coding change recommended swapping innerhtml unmountcomponentatnode course tried console suggests however innerhtml cleared component unmountcomponentatnode effect first time called although subsequent first call unmountcomponentatnode work try solution would fit overall needs work tested reactjs v reactjs v state rendering app desktop grid icons placed cell icons made brand new components icons removed remove originally mounted components instantiating new component match new icon placing needed reactdomrender feels like cleaner approach app needs many apps use drag drop make new components delete old components desktop almost entirety application demo really simple example happening anyway let know using unmountcomponentatnode incorrectly suggestions dynamically making new components runtime", "d": "6/2018"}, {"body": "solution unmountcomponentatnode work innerhtml work using together still feels like bug unmountcomponentatnode though", "d": "6/2018"}, {"body": "holdoffhunger think hint also codesandbox warning said move unmount function parent component", "d": "6/2018"}, {"body": "whsdothk yes mentioned code sample unmount parent component nt work come node attempting unmount rendered react toplevel container instead parent component update state rerender order remove component also stated inapplicable application developing", "d": "6/2018"}, {"body": "dannyvanholten works see think mean child ca nt fire parent event event fire everywhere nt need react use instead", "d": "6/2018"}, {"body": "solution inverted click mouseleave leave simulate onclick click still nt simulate mouseleave", "d": "6/2018"}, {"body": "dannyvanholten yes indeed bug looking", "d": "6/2018"}, {"body": "hey dannyvanholten due way react shims correct support across browses see shim enterleaveeventplugin curious since browser fire well work around issue dispatching events instead", "d": "6/2018"}, {"body": "sorry closed accident", "d": "6/2018"}, {"body": "react prevent modifying state directly something avoid want components behave predictable way reason examples work even modifying state directly call setstate lets react know needs update component", "d": "6/2018"}, {"body": "danburzo thanks state chaos", "d": "6/2018"}, {"body": "nt know mean state chaos react could potentially freeze state object may future would breaking change though often see people deep mutations unless froze state deeply would pretty slow even development would nt able prevent anyway rare legit use cases technically react supports mutable data sources seeing issue nt mutate recommendation", "d": "6/2018"}, {"body": "wow nice catch seems need retarget event hopefully help wan na try learn contribute react look around react core code though", "d": "6/2018"}, {"body": "believe root issue", "d": "6/2018"}, {"body": "supposed current context api support requirement like", "d": "6/2018"}, {"body": "thx awesome tip", "d": "6/2018"}, {"body": "guess need update comment feel free send pr please", "d": "6/2018"}, {"body": "thanks report zenios looked bit wrote failing test background", "d": "6/2018"}, {"body": "fixed", "d": "6/2018"}, {"body": "thanks suggestion franciscop unlikely change current api without good reason allowing css selectors would introduce potential ambiguity since selectors potentially match multiple nodes example pass happens page multiple elements class since typically called query dom node straightforward going say nt change want make thanks", "d": "6/2018"}, {"body": "also nt throw using", "d": "6/2018"}, {"body": "think bug", "d": "6/2018"}, {"body": "rendering empty fragments work", "d": "6/2018"}, {"body": "fixed react", "d": "6/2018"}, {"body": "would option tell react reuse instances dom nodes make sense performance bottleneck understanding nt typically noticeable performance problem generally speaking performance optimizations internal implicit without imposing additional cognitive load user apis like current exceptions exists solve common significant performance problems even still escape hatches clear significant problem react current reconciliation algorithm already significant memoization avoid work like putting aside letting users control instances reused problematic whether instance reused recreated implementation detail nt leak user code users probably wo nt know means component reusable either also introduces nondeterminism since might know part app working marked reusable like elaborate proposal recommend open rfc proposals like belong thanks", "d": "6/2018"}, {"body": "react guess call fetch break fetch expected components using new lifecycles able use older ones warning cwm firing gdsfp present sounds like bug create demo please host jsfiddle codesandbox", "d": "6/2018"}, {"body": "happens remove fetch", "d": "6/2018"}, {"body": "follow assuming user error wzup think bug please follow requested information look reopening thanks", "d": "6/2018"}, {"body": "intentional strictmode exists doubleinvoking happens development mode", "d": "6/2018"}, {"body": "would support raising pr add feature already acting intended", "d": "6/2018"}, {"body": "think warning console says need add error boundaries app protect crashes true whether clean client render hydrate", "d": "6/2018"}, {"body": "may bug try latest", "d": "6/2018"}, {"body": "yeah try soon get time troubleshoot upgrade bumping flattening host config enough make work", "d": "6/2018"}, {"body": "reproducing case would help", "d": "6/2018"}, {"body": "got upgrade reactreconciler working project reproduce issue closing", "d": "6/2018"}, {"body": "official chinese doc think report bug", "d": "6/2018"}, {"body": "yep nt maintain official translation yet", "d": "6/2018"}, {"body": "promising extremely difficult taking one", "d": "6/2018"}, {"body": "current behavior", "d": "6/2018"}, {"body": "stateful component use example function component element created supported refs must owner warning", "d": "6/2018"}, {"body": "talking past concerned ref sense reference dom node merely want create element attribute called ref htmlattribute like except react codesandbox example illustrates quite nicely attribute treated reference available thisrefs html attribute", "d": "6/2018"}, {"body": "stefanprobst use case nt appear standard html attribute standard attribute something like would probably really confusing", "d": "6/2018"}, {"body": "custom elements part html standard take arbitrarily named attributes custom attributes react issue custom elements working pass required attributes swallowed reactcreateelement", "d": "6/2018"}, {"body": "punycode parsing \u0441yrillic letter email example try copypast browser url \u043a\u043e\u0448\u043a\u0430\u0440\u0444 become xn think value mutable bug moment input set cursor start sometimes input mutable value sometimes", "d": "6/2018"}, {"body": "tested native input element example page chrome letter \u0434 encoded firefox safari letter encoded convert unicode format manually punycodetounicode method things expected see example also use input add email validation personally think chrome bug feature", "d": "6/2018"}, {"body": "thanks additional research think resolved", "d": "6/2018"}, {"body": "event listeners nt explicitly removed gc nothing references dom element something keeps reference sounds like bug generally react expected clean reference something deleted next update", "d": "6/2018"}, {"body": "want look holding onto element", "d": "6/2018"}, {"body": "gaearon sure look would mark good beginner bug though literally started reading source yesterday either way get stuck see go", "d": "6/2018"}, {"body": "happy help answer questions please nt hesitate reach", "d": "6/2018"}, {"body": "profiling extensions enabled tried running test app locally see listener count increases time eventually get gc", "d": "6/2018"}, {"body": "performance tab indicating increase node count even gc taken heap snapshots clear indicator dom nodes nt cleaned positive delta things like", "d": "6/2018"}, {"body": "see detached dom tree transitioning states matches count new nodes recorded performance tab updated code bit smaller order eliminate native listeners input fields etc", "d": "6/2018"}, {"body": "think detached nodes would expected since fiber may store reference previous node short time next update node dereferenced though would expect constant number detached dom nodes", "d": "6/2018"}, {"body": "yeah looks case multiple state changes delta previous snapshot change see meaningfull maybe error chrome profiller anyone checked firebug", "d": "6/2018"}, {"body": "aweary profiled incognito extensions based screenshot posted listeners nt get gc neither nodes yellow green lines never drop back original positions relatively new performance tooling please let know interpreting incorrectly trouble accurately tracing exact listeners nodes heap snapshot comparison looked like listener gets added directly one leaking btmpl use elements listeners attached based testing listeners attached directly nodes leak added around saw two listeners added increased leak per iteration expected could see additional listeners heap snapshot comparison battle hardened perf guy please let know reading wrong running tests multiple iterations see nodes listeners would eventually cleaned based tests iterations continued accumulate would anyone mind pointing towards piece code handles node references interest read reconciler scheduling updates yesterday still little disoriented honest", "d": "6/2018"}, {"body": "alright profiling using production build test application provided profile clicking edit button without interacting input element valleys graph manually triggering gc event time total nodelistener count returned value profile thing except every time input appears typed content appears indicate leak related actual input event processing suggests likely related calls since would called regardless whether input interacted somewhere event handling code path reference retained dom node causing gc", "d": "6/2018"}, {"body": "ok seeing increase listeners node count change transition two lines overlap perfectly one shown manually triggering gc resets nodelisteners count", "d": "6/2018"}, {"body": "aweary oh awesome going crazy yes exactly getting end focusing input iteration listeners getting leaked another look event handling code shortly try track reference node might held", "d": "6/2018"}, {"body": "ooops nt mean close reopening", "d": "6/2018"}, {"body": "might answer made modification example adds revision counter flush prior dom tree think illustrates nt leak try following steps first initial snapshot gc listeners dom nodes clear gc click record button performance tab click edit open form close view close form click flush purge last tree clear gc end session dom nodes increase however see event listeners increase listeners precisely blur change focus input keydown keyup selection change attached document support event plugin system input attaches page one time bindings also worth noting attached form element attached input cleaned flush button clicked nodes purged memory gc without refreshing page clear gc click record button performance tab click edit open form type text input click view collapse form click flush purge last tree clear gc see net increase event listeners dom nodes final js performance graph dom nodes chart actually went think probably something else confirmation nodes leak empirically evident performance tab recording", "d": "6/2018"}, {"body": "time morning chrome seems bug performance memory profiling makes axis max obscuring chart ca nt get chart show canary chromium either frustrating anyone else experiencing lodged bug chromium team nhunzaker thanks taking time detailed explanation findings unfortunately downloading older version chrome nontrivial finally profiling changes could nt see difference number gc listeners flushing reconciler node references firing additional added listeners accumulate number listeners nt drop back original number high level position even flush release references entirely sure would satisfied behaviour appears stringing together particular interactions would cause accumulation listeners update scheduled chance allows references released side note installed preact example repo interest stable digging code later evening nzt", "d": "6/2018"}, {"body": "high level position even flush release references entirely sure would satisfied behaviour totally struggle intended behavior well familiar enough data fiber component data structure seems like memory growth flatline similarly forcing unrelated update via still seeing looks like event listening attachment leaking sideeffect dom nodes failing gc far tell leak nt happening postmount step local listeners attach really curious find", "d": "6/2018"}, {"body": "yeah nt officially support equivalent browsers without compatibility need use custom postprocessor quote reserved keys need", "d": "6/2018"}, {"body": "fixed react", "d": "6/2018"}, {"body": "assume decision use array single child made avoid unnecessary array allocations really subtle issues children prop handling react generally nt recommend using explicit prop users also use jsx instead directly calling issues mentioned nt typically problem", "d": "6/2018"}, {"body": "aweary thanks answer", "d": "6/2018"}, {"body": "gaearon another scenario bad solution often people want keep edits form local state like statevalue commit place redux store event like button click happen working something similar additional points list would love input believe something address example single input form comments envision app upon navigation route loads json representation form model renders model using react along model data fetched api generated ui populated app enables user edit form send back server dead simple model fetched upon navigation data change given point due server side pushes data model come props redux store since want dispatch action store key stroke changes cached locally form component state validated integrated data upon submission suggestion indicates child components said form controlled render method said form would invoked whenever child changes operation albeit light thanks react quite redundant since model changed value single input element adding task repeat unnecessarily mobile devices worse iot devices ui order try avoid long scu treated hint form component rerenders either model data changed event could originate change store state forces element handle state changes notify form changes enables single elements rerender without affecting siblings turn creates tiny redundancy since changed element state duplicated something willing live element gdsfp method implemented initial value stored local state next call method comes local state reset value differs initially passed value happens server decided change something missed makes element susceptible bug described implementation considered problematic regard compatibility future react versions another way implement said form without causing form rerender albeit virtually element change sincerely eyal perry", "d": "6/2018"}, {"body": "putting scupurecomponents inputs bail think might overestimating cost updating whole form", "d": "6/2018"}, {"body": "something missed makes element susceptible bug described yes change would make form rerender often eg subscribes redux piece state updates independently input local state reset inputs may bug right fragile rely ever happening", "d": "6/2018"}, {"body": "thanks taking time reply indeed put scu stateful form elements guess clear cost trying avoid stems parsing json model final result returned formrender call despite fact cases except initial render one bail second comment well described desired expected behavior said form store wins thing way state ever gets updated user receives notification incoming change takes explicit action apply changes local state either way understand words react way version gdsfp implemented idempotent risk free practice lift state thing official way tell whether state change order due props change lead length thread kin perhaps sort recommended pattern appear gdsfp documentation component reference section thanks lot", "d": "6/2018"}, {"body": "cost stems parsing json model final result returned formrender call despite fact cases except initial render one bail memoize extra cost example using second comment well described desired expected behavior said form understand point form state win imagine add different kind state global store form cares necessarily form state would nt want state reset form state words generally expected adding something result nt break application risk free practice lift state necessarily one gives flexibility publish blog post soon overview different approaches pros const", "d": "6/2018"}, {"body": "thanks look blog post welcome also understand point really healthy outlook best regards thanks taking time", "d": "6/2018"}, {"body": "gaearon always considering alternatives classes done past four years local component state essential feature react pretty much important one going away anywhere thanks stating reassures lot functional purist use local state lot combined mobx observables know people like", "d": "6/2018"}, {"body": "fwiw nt think local state odds functional topic another day", "d": "6/2018"}, {"body": "gaearon context professionally backend developer recently learning javascript react personal project verdict nt know talking probably nt know talking smile relatively simple case works failing addition hoping shed light wrong hope newbie experience inform upcoming post component consists radio button text inputs state useful externally single value may positive negative zero invalid ie selected one top two lines nt input number represent get impression controlled components preferred occasionally reset value implemented controlled component state component fully determined controlled value user selects one top two radio options entering number value either case parent needs know input invalid state make cleaner hid detail inside component deal using approximately user input update state call prop exported value changed called sees two match nothing happens likewise upon unrelated rerender two continue match nothing happens seeing call old value new state returns default state old value meaning component never change accidentally elided anything important actual code cheers", "d": "6/2018"}, {"body": "hi onethreeseven working blog post week hope publish today covers topic detail along examples explanations hopefully read blog post published comment link well live code shown would expected break changes made changes made help expose existing inconsistently reproducible bugs blog post explain much greater detail case could quickfix component explicitly tracking input props see change updating state happens", "d": "6/2018"}, {"body": "okay thanks look forward post posterity managed fix problem much later last night changing roughly former avoid manually computing updated state latter seems work well triggers one expected call hope turns kosher end", "d": "6/2018"}, {"body": "blog post", "d": "6/2018"}, {"body": "issue thismarcoantonio plus lot components needed access multiple contexts within methods outside render pain wrap every instance every component prior export honest nt look good ended userland create hoc consumes multiple contexts pass props sort op mentions issue many take look", "d": "6/2018"}, {"body": "encountered problem well maximum update depth exceeded error stack traces pointing react code miracle got single log showed component conversations", "d": "6/2018"}, {"body": "appear bug checked attribute initially set input looks like bug since think need addremove checked attribute postmount wrapper", "d": "6/2018"}, {"body": "hava problem react", "d": "6/2018"}, {"body": "thaddeusjiang nt help us way help us provide reproducing case thanks", "d": "6/2018"}, {"body": "somebody figure svgs nt call throws hidden elements something else", "d": "6/2018"}, {"body": "sorry forgot workaround solved make pr try figure applies classes well", "d": "6/2018"}, {"body": "thanks", "d": "6/2018"}, {"body": "gaearon user drags element focus supported exception thrown environment react", "d": "6/2018"}, {"body": "ok somebody want send pr reverts", "d": "6/2018"}, {"body": "yes", "d": "6/2018"}, {"body": "fixed", "d": "6/2018"}, {"body": "fixed react", "d": "6/2018"}, {"body": "hey benlonsdale memory serves lot boils touching password input value propertyattribute least definitely fixed eye icon expose password might fixed made changes prevent premature validation ff required inputs might also fix issue testing get prompt show take look fork confirm", "d": "6/2018"}, {"body": "nhunzaker backported", "d": "6/2018"}, {"body": "hey sorry delay good question sure another release planned bring team report back tomorrow", "d": "6/2018"}, {"body": "point seems unlikely another release", "d": "6/2018"}, {"body": "gaearon looks like sent fix detailed picking one send pr days", "d": "6/2018"}, {"body": "asiniy send pr minutes", "d": "6/2018"}, {"body": "", "d": "6/2018"}, {"body": "got point arbitrary code traversal though fully convinced shouldcomponentupdate arbitrary code well critical traversal path well gaearon using context global state container without selector feasible everything render change leading grave performance issues using small values atomics wasted potential would selector make things slower present react go usual route present users explicit intent shallowdiff userprovided props like purecomponent equally explicit performs shallowdiff props case good would come rendering particular usertied view change store change user nt concern view statelibs wrap consumers hocs select cause complication one small addition state react would solved issue", "d": "6/2018"}, {"body": "drcmda difference js class user extends reactpurecomponent render state gt", "d": "6/2018"}, {"body": "would inhibit inline views mean could redux connect components state containers root spread values leave purecomponent would dan mark agree good pattern guess people would prefer mstp makes less verbose explicit perhaps faster selector nt affect consumers working right selector given react traverses like always one diffs react would scaleable statemodel straight forward easy understand even beginners", "d": "6/2018"}, {"body": "want run selectors model consumer scu component right one bimask lower level api extreme use cases like relay", "d": "6/2018"}, {"body": "gaearon picking ca nt find really critical issue newbie react open source thus may take weeks investigate amp finish", "d": "6/2018"}, {"body": "lmenus antipattern feel free use achieve kind functionality", "d": "6/2018"}, {"body": "thank asiniy", "d": "6/2018"}, {"body": "lmenus done let look long would take turn master", "d": "6/2018"}, {"body": "asiniy amazing thank", "d": "6/2018"}, {"body": "related", "d": "6/2018"}, {"body": "see new behavior jest closing", "d": "6/2018"}, {"body": "gaearon think similar problem sure provider updating consumers fully reproduced define context prop equal noop functionprototype setting context prop equal routerredirect method attaching state set contextvalue routerstate thus hoping consumers rerender updating componentdidmount state updated see router rerendering console logging consumers never logs rerender wrong context", "d": "6/2018"}, {"body": "damianobarbati looks like components rendered outside router context see layoutjs indexjs currently nav component rendered router meaning links fallback default value passed", "d": "6/2018"}, {"body": "thanks hamlim solved", "d": "6/2018"}, {"body": "mrkev opened close", "d": "6/2018"}, {"body": "also opened facebookflow close facebookflow facebookflow", "d": "6/2018"}, {"body": "reznord may take", "d": "6/2018"}, {"body": "fixed react", "d": "6/2018"}, {"body": "gaearon use react yet problem ie ff possible issue still exists fix send pr", "d": "6/2018"}, {"body": "passed fragment library library trying add class names fragment children think happens", "d": "6/2018"}, {"body": "seeing error switching guessing may need updated support better", "d": "6/2018"}, {"body": "ah saw maybe resolved", "d": "6/2018"}, {"body": "sahrens sure using create small repro case would help", "d": "6/2018"}, {"body": "gaearon works upgrading", "d": "6/2018"}, {"body": "although cause similar problems easy work around wrapping trivial component", "d": "6/2018"}, {"body": "prepare test case please expect see problem type need work around thought fixed full reproducing case would help see missing", "d": "6/2018"}, {"body": "future searchers see error enzyme guess issue react", "d": "6/2018"}, {"body": "gaearon ultimately think problem blocker unfortunate react widening supported types semver major change nt like reasoning freedom release change major version bump reason whatsoever technical breaking changes breaking changes released patch minor change spirit semver think lot risk related packages using react break even none existing narrower type support react broken think perfectly reasonable conscientious release major version bump", "d": "6/2018"}, {"body": "think getting little bit confused breaking change react side technically breaking change component package authors wrap exported components still debatable whether type export long renderable react truly breaking change packages react depending new method nt exist previous react minor versions breaking change imagine anybody adds topmost component already makes breaking change package", "d": "6/2018"}, {"body": "gaearon know breaking change react side saying nt prohibit releasing new major version", "d": "6/2018"}, {"body": "point releasing new major version react without breaking change would help ecosystem would nt solve problem experiencing would add churn everyone", "d": "6/2018"}, {"body": "let imagine came react instead started using minor version would still break app problem nt react versioning using minor release bump versioning", "d": "6/2018"}, {"body": "depends new major version react nt receive major version bump well", "d": "6/2018"}, {"body": "case idea fix component passed function wrap function forwards arguments attach magic symbol wrapper perhaps add wrapped function prop extracted react return component passed class create new class extends attach magic symbol new class constructor return way return value work existing hoc libraries expect class could released patch afaik would solve everyone problems", "d": "6/2018"}, {"body": "mycomponentlibrary depends new major version react nt mycomponentlibrary receive major version bump well sure make argument starting depend new feature introduced minor version react results observably different behavior nt exist exactly point relying new feature breaking change whereas adding new feature nt understand suggesting nt accept component accepts rendering function good reasons returned type function see last paragraph nt plan cut patch change library adopting constitute major bump library even react something magical ensure return value function still different observable behavior namely changes ref points depends method exist older versions library would bump major version anyway", "d": "6/2018"}, {"body": "relying new feature breaking change whereas adding new feature yeah totally agree rub new code checks defined use thought would nt need release breaking change", "d": "6/2018"}, {"body": "think may talking different aspects library adopting constitute major bump library even react something magical ensure return value function still different observable behavior namely changes ref points depends method dpes exist older versions library would bump version anyway believe dan saying uses breaking change regardless react implements applications using older version react eg lt would break believe andy might referring third party library accepts react component may hardcoded assumption react component always function class functional component newer versions react exotic component types eg fragments modes forward refs etc sort hardcoded assumption caused problems handful places seen since release", "d": "6/2018"}, {"body": "rub new code reactjss checks reactforwardref defined use seems pretty fragile would nt recommend anyone leads subtly different behavior versions", "d": "6/2018"}, {"body": "gaearon yup think good point observable behavior particular merely using new feature dependency necessarily breaking change instance library starts using new feature observable behavior remains released patch minor change", "d": "6/2018"}, {"body": "another use case broken know inheriting component discouraged react team reactleaflet project uses extensively pun intended quite elegantly ask point point inheriting component possible thing back ca nt extend component uses check babel making failing issue reactleaflet", "d": "6/2018"}, {"body": "happens add dom node new window react wo nt know next render triggered solve moving reference state using", "d": "6/2018"}, {"body": "zanisis get solution stumbled upon issue", "d": "6/2018"}, {"body": "fixed react", "d": "6/2018"}, {"body": "still encountering issue end give insights fix codeuniquely", "d": "6/2018"}, {"body": "going close know inconvenient cases existing apps nt really ui error handling taking time implement error boundaries pays better longer term proposed alternatives sufficiently bad drawbacks keeping broken inconsistent ui screen lead wrong actions like sending message wrong person bad erodes users trust ui making broken components automatically disappear also leads bad consequences like failing show item shopping cart hiding privacy selector post input reason function throws javascript return previous function value handle error choose appropriate level granularity applies ui hope makes sense sorry trouble", "d": "6/2018"}, {"body": "hi update means pretty much react broken inline styles way make work problem", "d": "6/2018"}, {"body": "mean broken bug report false positive warning nt prevent code running correctly would nice fix warning since people nt develop pretty low priority welcome send fix affecting correctness please file another bug description", "d": "6/2018"}, {"body": "ended updating react latest version seems something else indeed breaking app dangerouslysetinnerhtml html tags read somewhere else fixed latest versions react using believe sorry", "d": "6/2018"}, {"body": "general always suggest trying latest versions react since fixed quite bugs since", "d": "6/2018"}, {"body": "gaearon magicmark update issue pr", "d": "6/2018"}, {"body": "reviewed pr", "d": "6/2018"}, {"body": "display list arrays reactvirtualized table", "d": "6/2018"}, {"body": "curious looks like behavior occurs use something like something happening changeevent plugin causes revert text nodes undoing wonder", "d": "6/2018"}, {"body": "confirm adding whatever reason working lifting feels like regression", "d": "6/2018"}, {"body": "would open new issue bug resurfaced maintainers nt typically look notifications closed issues", "d": "6/2018"}, {"body": "analysis seems unintended interplay getderivedstatefromprops still need get used new patterns emerging", "d": "6/2018"}, {"body": "flq mean working intended indeed regression issue", "d": "6/2018"}, {"body": "appears work advertised ie sequence setsate getderivedstatefromprops setstate callback overwrite state derived static expect weirdness", "d": "6/2018"}, {"body": "worked changing select menu compiled react page making sure appropriate change events fire", "d": "6/2018"}, {"body": "aweary hack slate uses test beforeinput support generates false negative chrome might something tests property input event instead trick firefox nt support input events level support less meatyinformative events fire events nt exist chrome support input events level fires safari support input events level fires might splayed handle arbitrarily old browsers something like", "d": "6/2018"}, {"body": "know hardly useful ping issue awhile yet seem like genuine requirement upgrade react means losing checksummismatch error reporting useful helping us identify sorts weird frequent bugs sebmarkbage gaearon like echo redonkulus request could get direction react team", "d": "6/2018"}, {"body": "compare running react maybe also find exact mismatch string diff nt work cases react nt always correct html client side reuses server generated html someone writes attribute mismatches nt corrected fix mismatched ssrgenerated html attributes react attempts change html subtree match comparing html would catch differences also compare hash react store json data suppose give react react runs servers side versus client side maybe would nt find errors problem mentioned slightly different react store json used server side versus client side right app compare hash json react store server side hash json use client side sometimes bit different currently although nt hash mismatch use instead print original html server console print html run react compare strings amp find problem", "d": "6/2018"}, {"body": "error caused greater char css using reactdom server renders client", "d": "6/2018"}, {"body": "please file new issue reproducing case nt track discussions closed issues new bugs reported essentially stay unreported", "d": "6/2018"}, {"body": "problem adding onfocus nt help though case simply changed number text moment", "d": "6/2018"}, {"body": "warning occurs use tag href href null could work perfectly without warning", "d": "6/2018"}, {"body": "hey guys sure makes page shows invalid character code browsers iphone change lowercase works normal must render string use replace avoid case", "d": "6/2018"}, {"body": "file new issue specifically reproducing case could look thank", "d": "6/2018"}, {"body": "done use object spread operator setstate function alldata function object textbox textbox input area data entry completed example using different handle change event different value use one setstate older version code tried data change one text box changes data handle change event", "d": "6/2018"}, {"body": "src attached file appjs homejsx file main file home file logic", "d": "6/2018"}, {"body": "brandonbloom misguided pausing exceptions pause uncaught exceptions keep running thing like dev tools stop right exception happens code still fly nt enable say plenty libraries internally use exceptions never found pause caught exception ever useful since produces incredible number false positives yes example babel routinely throws catches exceptions exceptions longer exceptions norm feels wrong unfamiliar constraints babel development faced one reasons avoid babel new projects prefer bubl\u00e9 transpilation development rather well covered browsers general prefer transpilation removed development time browser reload latency sourcemap needs exception pollution etc relegated become part release build automated tests sure community cling transpiling large codebases every single line change done shops short trying use facility available decades stack exception happens without libraries constraining freedom sebmarkbage takes popular libraries agree change momentum everyone game theory plays pausing uncaught exceptions winning strategy therefore think proposal effectively becomes pausing exception viable default react apps side question adding default flag makes happen maybe browser vendors could help restore sanity comes uncaught exception browser blackboxing could generalized something analogous could cover suppression uncaught exceptions yes sounds weird think uncaughtblackboxing libraries jquery babel would help restore otherwise useful function sure hassle specific project may handful offending libraries onetime blackboxing step maybe could blackboxed one app code whitelisted btw like blackboxing performance measurement kovensky completely agreeing comment think flag would feasible", "d": "6/2018"}, {"body": "facing following issue anybody help issue occurs trying use callback function reactxeditable component uncaught typeerror thisupdaterenqueuecallback function trsetstate tnonsubmit htmlunknownelementcallcallback objectinvokeguardedcallbackdev objectinvokeguardedcallback objectinvokeguardedcallbackandcatchfirsterror executedispatch executedispatchesinorder executedispatchesandrelease executedispatchesandreleasetoplevel foreachaccumulated runeventsinbatch runextractedeventsinbatch handletoplevel batchedupdates batchedupdates dispatchevent interactiveupdates interactiveupdates dispatchinteractiveevent rsetstate nonsubmit callcallback invokeguardedcallbackdev invokeguardedcallback invokeguardedcallbackandcatchfirsterror executedispatch executedispatchesinorder executedispatchesandrelease executedispatchesandreleasetoplevel foreachaccumulated runeventsinbatch runextractedeventsinbatch handletoplevel batchedupdates batchedupdates dispatchevent interactiveupdates interactiveupdates dispatchinteractiveevent", "d": "6/2018"}, {"body": "merged master fix next release", "d": "6/2018"}, {"body": "hi friends think must something wrong pretty simple demo function shown getting error example getting error seems indicate property descriptor tried prototype issue sounds like working lot people assuming probably making silly mistake simple sure could wrong save click whole example html const textarea documentgetelementsbytagname textarea function setnativevalue element value const valuesetter objectgetownpropertydescriptor element value set const prototype objectgetprototypeof element const prototypevaluesetter objectgetownpropertydescriptor prototype value set valuesetter amp amp amp amp valuesetter prototypevaluesetter prototypevaluesettercall element value else valuesettercall element value setnativevalue textarea text textareadispatchevent new event input bubbles true missing", "d": "6/2018"}, {"body": "sure missed looks like actually value setter prototype nt always one element adjusted version works html const textarea documentgetelementsbytagname textarea function setnativevalue element value const set valuesetter objectgetownpropertydescriptor element value const prototype objectgetprototypeof element const set prototypevaluesetter objectgetownpropertydescriptor prototype value lt p gt prototypevaluesetter amp amp valuesetter prototypevaluesetter prototypevaluesettercall element value else valuesetter valuesettercall element value else throw new error given element value setter setnativevalue textarea text textareadispatchevent new event input bubbles true good luck friends stay safe", "d": "6/2018"}, {"body": "latest screen recording click expand", "d": "6/2018"}, {"body": "lucasconstantino read article medium nicolas charpentier think point context react gaearon mentionned bind method constructor anyway ultimately creates copy function every instance like way using arrow functions arguments presented article crumble context react cents", "d": "6/2018"}, {"body": "dienluong nt create copy function creates shallow bind proxy meat function shared prototype thus much optimizeable fact constructorbinding much better crumble context javascript react otherwise", "d": "6/2018"}, {"body": "ljharb thanks input stand corrected copy exact copy function however find source demonstrating constructorbinding offer much better performance compared class property syntax fact official react documentation recommend constructorbinding class property syntax caveat latter still experimental note point nt constructorbinding bad approach point arguments put forth medium article way disagrees accepted conclusion thread ie methods essentially might questionable", "d": "6/2018"}, {"body": "another concern testability prototype methods mock prior creating enzyme wrapper form creating elements testing arrows class properties create element get instance mock property force rerender", "d": "6/2018"}, {"body": "problem able eliminate superfluous event calling within like reference suppress default behavior tap generation click event call inside listener", "d": "6/2018"}, {"body": "case others fighting react consoleerrors way getting rid consoleerror annoying debugging important broken stuff warnings situation make debugging almost impossible warnings warnings errors errors strongly suggest change consolewarn", "d": "6/2018"}, {"body": "hoc", "d": "6/2018"}, {"body": "think far easier option would use enzyme instead reacttestrenderer mocking get hand pretty quickly working libs lot components eg material design based ones", "d": "6/2018"}, {"body": "encountered issue element tabindex removed next render example element tabindex prop gets removed clicked onblur never fired native implementation works native implementation works javascript focus click let button documentqueryselector button buttononclick function buttonremoveattribute tabindex buttononblur function alert onblur handler called react component nt fire blur handler javascript class extends reactpurecomponent state tabindex", "d": "6/2018"}, {"body": "fixed react", "d": "6/2018"}, {"body": "note generally read discussions closed issues still relevant please file new issue focused description struggling demos", "d": "6/2018"}, {"body": "gaearon would nt better reopen one", "d": "6/2018"}, {"body": "tkrotoff write wrapper context provider pass context whatever want example old context class contextprovider extends reactcomponent static childcontexttypes mycontext proptypesobject getchildcontext gt mycontext test render return thispropschildren later wrap component want test one needs context like", "d": "6/2018"}, {"body": "errorpro used solve problem ooooold react codebase started working thanks ton", "d": "6/2018"}, {"body": "came across issue trying figure accessing ref componentdidmount fire focus event workingi stumped refs one fundamental use cases componentdidmount accessing dom reason ref focus focus particular browser restrictions cases element entirely visible trying focus eg animations example animations gsap focus events work element invisible security reasons hackers could trick people focusing hidden text form gsap transition brought mounted element took seconds naked eye almost indistinguishable visible setting settimeout nametextfocus seconds way get focus event work componentdidmount", "d": "6/2018"}, {"body": "closing since follow reproducing example provided", "d": "6/2018"}, {"body": "reactlinter", "d": "6/2018"}, {"body": "closed thanks jasonwilliams", "d": "6/2018"}, {"body": "encapsulation behaviour really strange unpredictable expected solved", "d": "6/2018"}, {"body": "upstreamed dependencies get things working dom latest hackery beyond", "d": "6/2018"}, {"body": "hit indeed surprised confused", "d": "6/2018"}, {"body": "supertinou wanted check anything help", "d": "6/2018"}, {"body": "sophiebits hi nt want step anybodies toes taken look issue replicated would love take stab nt know supertinou still working", "d": "6/2018"}, {"body": "maybe serverside rendering server could scan generated html style attributes automatically add hashes attribute values csp header response defeats point csp someone injected inline styles mark acceptable header", "d": "6/2018"}, {"body": "graingert defeats point csp someone injected inline styles mark acceptable header yes mechanism register acceptable dynamic styles rendering actual components would perhaps needed example render component showing web shop product productspecific url unaffected direct user input inline styles one could context object similar one could report trusted style snippets rendering would merged proper csp header generated", "d": "6/2018"}, {"body": "issue seems continue living stagnant status write new solution problem nothing new javascript world deals serverside universal rendering issue allowing reset generated uniqueids next render provides hoc modern react syntax allows working around issues like previously problem hocs hoc simply provides prop allows developer decide use example omit using prop given generated ids running number starting id prefix part customized per hoc usage defaults get via check code good look github repo package stuff well much construction moment unique ids feature confident enough label stable could still consider extending method similar would possible get many unique ids loop within component render throw issue repo want see implemented", "d": "6/2018"}, {"body": "seems like solved sufficiently userland abstractions like disposables callback queues use case nt seem common enough warrant increase api surface disagree please feel free open rfc detailed proposal", "d": "6/2018"}, {"body": "dsifford react warning browsers bring anyway would nt browser issue", "d": "6/2018"}, {"body": "dsifford even though examples nt use tbody canshould wrap tbody around elements col colgroup live outside browsers insert one nt provide identical accessibility perspective browsers insert one warning browser inserts one react nt expect react get confused time warning added concluded encouraging people manually add tbody would simpler fix teaching react specialcase one tag possible could change event would nt trivial implement would nt expect see anytime soon unless like contribute fix", "d": "6/2018"}, {"body": "thanks detailed reply sophiebits questioning knowledge subject since unquestionably much deeper mine could bother explain mean browsers insert one nt provide identical accessibility perspective browsers insert one warning browser inserts one react nt expect react get confused referring subset common browsers looking specifically chrome nt appear happening something done render phase actually applied browsers visible html possible could change event would nt trivial implement would nt expect see anytime soon unless like contribute fix potentially willing contribute fix behavior first received team blessing would considered hate put bunch work find something guys gals think fits project roadmap speaking directly potential fix mind change could instead require scope attribute elements unless overlooking something huge think would cover exact accessibility issues currently covered requirements allow irregular multilevel headers anyway regardless response thanks much kind response clarification thanks continue react project smile", "d": "6/2018"}, {"body": "referring subset common browsers looking specifically chrome nt appear happening something done render phase actually applied browsers visible html interesting looks like right inserting tbody tag automatically use insert markup using insert tbody tag tested latest chrome firefox safari seems consistent sophiebits revisited since react started using dom apis instead generating string markup", "d": "6/2018"}, {"body": "new browser transform library jsx", "d": "6/2018"}, {"body": "maybe", "d": "6/2018"}, {"body": "thanks loti stuck hours issuecheers", "d": "6/2018"}, {"body": "issue status open started submitted done issue funding eth usd attached would like work issue start work gitcoin issue details page questions checkout gitcoin help gitcoin slack funded oss work available gitcoin issue explorer", "d": "6/2018"}, {"body": "looks like behavior fixed firefox", "d": "6/2018"}, {"body": "seems related", "d": "6/2018"}, {"body": "nt hack store vdom tree variable add different parents", "d": "6/2018"}, {"body": "esseswann would caching example react element wrapper object contains type props ref etc elements templates used create component instances dom nodes reparent element react throws away recreates component node nice overview elements components nodes", "d": "6/2018"}, {"body": "oh surely right head little clouds thinking another performance issue stumbled upon thread point whole lot elements object generation vdom tree becomes expensive noticeable deleting single element huge collection interestingly case dom operation extremely cheap compared reconciliation even created helper component maps allows reuse previously created reactelements mutating special local variable directly calling rerender callback called plans researching lower performance impact scenarios", "d": "6/2018"}, {"body": "even created helper component maps allows reuse previously created reactelements mutating special local variable directly calling rerender onremove callback called quite sure describing careful mutation like upcoming async mode even current error boundaries plans researching lower performance impact scenarios little unsure scenario describing nt want hijack gh issue thread maybe could chat somewhere else", "d": "6/2018"}, {"body": "similar issue solved react portals easily find node replaced string div rendered react component using createportal div", "d": "6/2018"}, {"body": "rmtngh curious need seems like might overkill interlacing nonreact code regarding solutions problem like rerecommend author battle timetested multiple environments also quite small entire library file usage example regex import replace stringreplacetoarray api designed match native stringreplace except handle nonstring replacements replace hello hermione granger hermione granger g function fullname firstname lastname offset string return output hello", "d": "6/2018"}, {"body": "oztune thanks reply case string html markup coming wysiwyg editor cms like place react components certain places inside markup think would better use library instead using portals think portal render component inside another node instead nearest node would nt expensive rendering normal component extra step replace string done native js replace missing anything advantages using library instead", "d": "6/2018"}, {"body": "rmtngh say depends trying trying sprinkle react components different areas dom tree tree nt already rendered react portals way go method mentioned useful parts trying replace already rendered inside react component", "d": "6/2018"}, {"body": "rfc would appropriate since feature request likely require significant review discussion someone would like pursue please", "d": "6/2018"}, {"body": "comes scala would good see self natively javascript difference self refers current method self refers class containing function confusing use function currently usually ends scope limited self makes scope reference really clear", "d": "6/2018"}, {"body": "merging", "d": "6/2018"}, {"body": "aweary mean link different issue", "d": "6/2018"}, {"body": "chrisblossom fixed thanks", "d": "6/2018"}, {"body": "seeing issue within happens result clicking link cursor input field wfocus link hit results link click ignored", "d": "6/2018"}, {"body": "tested latest release appears correct keydownkeyup events chrome firefox chrome firefox fire keypress keydown events enter keyboard event fixture indicates browsers firing keyup events according fixture chrome fires keydown event capslock enabled keyup event disabled firefox fires keydown event cases react consistent except fire keyup event chrome", "d": "6/2018"}, {"body": "going close since scheduled deprecated nt appear significant issue", "d": "6/2018"}, {"body": "remember ring us getting married planning future together please end come see time worked always love", "d": "6/2018"}, {"body": "anyone still trying pass object dataset component gist might help", "d": "6/2018"}, {"body": "gaearon syranide would deal event handlers lists without attribute example jsx import react react class list extends reactcomponent constructor super render return thisstatelistmap value index gt alternative solution know problem use arrow functionsfunction closure bind index create specific item event handler nt create new function every render lot rows would nt generate lot gc garbage", "d": "6/2018"}, {"body": "leidegre yes would preferred approach yes create functions every rerender please see react inline functions performance discussion performance real concern situation try memoizing rendering nt recreate bound functions every time rerender well virtualizing list nt actually putting rows dom", "d": "6/2018"}]