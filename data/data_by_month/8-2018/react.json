[{"title": "app nt render mobile", "body": "want request feature report bug bug current behavior app renders nothing mobile browsers current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example app link render desktop mobile expected behavior app render normally versions react browser os affected issue work previous versions react mobile chrone browser samsung internet", "num": "13524", "d": "8/2018"}, {"title": "provide way throw error maybe asynchronous handled componentdidcatch", "body": "want request feature report bug feature request current behavior handle synchronous error expected behavior capability error boundaries handle asynchronous error error boundaries example docs similar asynchronous error handled react javascript class withasyncdata extends reactcomponent constructor props super props thisstate error null value null using componentdidmount instead componentdidcatch componentdidmount doasynchronousthing value gt thissetstate value catch error gt thissetstate error render thisstateerror return error occured return thispropschildren unfortunately new lifecycle aware synchronous error think good provide way throw error asynchronously like javascript class withasyncdata extends reactcomponent constructor props super props thisstate error null value null componentdidmount doasynchronousthing value gt thissetstate value catch error gt thisthrowerror error throwing error asynchronously render thisstateerror return error occured return thispropschildren network error handled single place networkerrorboundary component example", "num": "13523", "d": "8/2018"}, {"title": "running cpu async rendering demo fail", "body": "finished steps successfully according readmemd reactfixturesunstableasynctimeslicing run yarn start reported error like enviroment npm node forget dependences could give tips thanks lot", "num": "13522", "d": "8/2018"}, {"title": "access react component underlying dom tree", "body": "want request feature report bug feature current behavior form component form field children input checkbox etc validated custom rules form submitted validation works fine expected behavior form invalid would like scroll page first invalid element form submitted unfortunately components expose underlying dom three except via fiber object get ref component makes scrolling possible since nt dom reference trying avoid ref forwarding form field components would like form handle validation related code encapsulation purposes case want publish library instance versions react browser os affected issue work previous versions react react way achieve", "num": "13520", "d": "8/2018"}, {"title": "add dom fixtures", "body": "maybe missed nt see case dom fixtures seems important easy accidentally gloss stop syncing attributes edit bunch jsdom tests", "num": "13518", "d": "8/2018"}, {"title": "import component twice ensure life cycle functions different", "body": "current behavior import component twice father component change visible popover component componentwillreceiveprops execution twice want keep independent expected behavior import component life cylce functions independent functions belong", "num": "13514", "d": "8/2018"}, {"title": "nodeumd bundles broken master", "body": "see need remember fix one way cutting release", "num": "13512", "d": "8/2018"}, {"title": "updating component makes resource request triggers update warning", "body": "want request feature report bug bug minor annoyance current behavior tl dr updating component makes resource request trigger state updates causes warning displayed description based modified version example given component makes resource call triggers react updates js const someresource createresource fetchuserdata function userdetails props another component plugged resource calling read trigger setstate calls component const data someresourceread propsid return data resource requesting component mounting indeterminate component updates known functional component instances component called get return value difference known functional component renderer phase set calling function js mountindeterminatecomponent const value userdetails updatefunctionalcomponent setcurrentphase render const value userdetails setcurrentphase null phase set functional component get warning react current behavior bug please provide steps reproduce possible minimal demo problem demo modified add button navigate user details user page click user besides warning triggered data cached click button console warning updating existing state transition expected behavior warning versions react browser os affected issue work previous versions react master build", "num": "13510", "d": "8/2018"}, {"title": "relax tostring consistency guarantees", "body": "recently chatted related work eg sebmarkbage raised good point seems like overall treating consistently adding significant overhead implementation readability undoubtedly runtime overhead two separate issues warning invalid values ensuring output invalid values consistent eg functions always skipped conclusion came keep warning bad values long warn consistency necessary fine sometimes stringify function sometimes skip long always warn cases guiding principle invalid inputs handle least amount overhead runtime terms code size always handled way one exception probably symbols throw stringified seems like skipping actually desirable unless okay errors", "num": "13508", "d": "8/2018"}, {"title": "key warning", "body": "want request feature report bug bug current behavior react throws warning render arrays fragments component like jsx import component react class formcontent extends component render return thispropschildren export default formcontent use like jsx import proptypes proptypes import children component react import content formcontent import actions formactions class form extends component static proptypes title proptypesstring classname proptypesstring inline proptypesbool withoutwell proptypesbool disabled proptypesbool onsubmit proptypesfunc static defaultprops title classname inline false withoutwell false disabled false onsubmit gt render const children childrentoarray thispropschildren handlesubmit e void epreventdefault estoppropagation thispropsonsubmit e export default form warning tells unique key inside simply wrapped children class split future form component fix current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior show warning versions react browser os affected issue work previous versions react chrome version official build ubuntu lts", "num": "13506", "d": "8/2018"}, {"title": "getderivedstatefromprops responding change props", "body": "documentation states method exists rare use cases state depends changes props time however read appears way achieve checking props prevprops respond change copying props state appears directly contradict article derived state anti patterns say least bit confused documentation changed used responding changes props go ahead antipattern approach copying props state pls something missing tia", "num": "13505", "d": "8/2018"}, {"title": "reactdom amp amp panresponder bug", "body": "steps reproduce defaults copy appjs jsx import react react import animated panresponder reactnative export default class app extends reactcomponent constructor super thisstate pan new animatedvaluexy thispanresponder render return open srcappjs start working app changes make automatically reload shake phone open developer menu componentdidmount thispanresponder panrespondercreate onstartshouldsetpanresponder gt true onpanrespondermove animatedevent null dx thisstatepanx dy thisstatepany thisforceupdate draggable albeit slightly buggy textbox nt move still nt move behold moves", "num": "13504", "d": "8/2018"}, {"title": "previous render cleared state change", "body": "want request feature report bug bug current behavior state change occurs previously rendered page fully cleared leaving artifacts previous render current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior previous render fully cleared versions react browser os affected issue work previous versions react react safari version macos high sierra checked works previous versions react however issue specific safari issues chrome firefox", "num": "13501", "d": "8/2018"}, {"title": "angular react", "body": "way migrate existing angual app completely react", "num": "13500", "d": "8/2018"}, {"title": "number input breaks letter e entered", "body": "want request feature report bug bug current behavior input typenumber allows entering numbers letter e input native input input event called numbers letter e react event called numbers way catch e e even filled input controlled way think work around bug right use e e pressed current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior pass anything filled input onchange handler break controlled component versions react browser os affected issue work previous versions react react chrome windows", "num": "13499", "d": "8/2018"}, {"title": "unknown component", "body": "react classname setting classname", "num": "13498", "d": "8/2018"}, {"title": "find module reactscriptspackagejson", "body": "happens use npm start npm run eject", "num": "13497", "d": "8/2018"}, {"title": "react code base coverage results appear incorrect", "body": "want request feature report bug bug current behavior order contribute react going coverage results find code needs additional testing noticed coverage results appear incorrect example file notice coveralls says branches covered actually function call ran jest workspace gave ifelse path missing line shown screenshot appears bug", "num": "13496", "d": "8/2018"}, {"title": "prevent encoding href attribute", "body": "want request feature report bug featurequestion current behavior react escapes everything inside href attribute belive cases undesirable using render emails sent sengrid sendgrid provides functionality inject links autogenerated preferences unsubscribe pages replacing placeholders within emails actual urls placeholders looks like problem react encodes placeholder becomes wondering solution doomed hack current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior way different avoid escaping versions react browser os affected issue work previous versions react", "num": "13494", "d": "8/2018"}, {"title": "efficent way using dangerouslysetinnerhtml set svg string", "body": "parsing markdown text string whose content svg file far seems way render svg string use wan na ask way inefficent efficent way react thanks reading issue looking forward awesome answers", "num": "13493", "d": "8/2018"}, {"title": "touch events nonbutton elements nt trigger react mouse event handlers mobile safari", "body": "touch events trigger simulated mouse events described tested using native event handlers worked described also works described react event handlers except nonbutton elements safari mobile want request feature report bug report bug current behavior touch events nonbutton elements trigger react mouse event handlers mobile safari trigger react mouse event handlers mobile chrome trigger dom event listeners mobile safari expected behavior touch events nonbutton elements trigger react mouse event handlers mobile safari versions react browser os affected issue work previous versions react ios safari android chrome reactdom", "num": "13492", "d": "8/2018"}, {"title": "consider keeping legacy context api nonstate usages", "body": "want request feature report bug feature request question according react docs ways avoid passing props many levels new context api composition inversion control using new context api consumer component must know explicitly import context raises quite big disadvantage comparing legacy context api component ca nt reusable different contexts unless making prop version component wrapping another one uses context directly fact means component ca nt contextual reusable different contexts time using composition many cases feels wrong solving quoting docs however right choice every case moving complexity higher tree makes higherlevel components complicated forces lowerlevel components flexible may want example component struggle understand import context javascript import react react import propstypes proptypes export class link extends reactpurecomponent static contexttypes navto propstypesany handleclick e gt epreventdefault const path thisprops thiscontextnavto path render const path props thisprops return already discussed answered apologize could nt find related issues", "num": "13490", "d": "8/2018"}, {"title": "question reconciliation", "body": "think understood reconciliation react however one thing would like clarify let say first render render duke key villanova key next render connecticut key duke key villanova key understood reconciliation correctly second render react check types eg keys first two items first second render match hence add new item key new output hence generate following result duke key villanova key villanova key however think react generate seems issue understanding especially bold part previous paragraph someone explain missed understanding", "num": "13489", "d": "8/2018"}, {"title": "reacttestrenderer possible test lifecycle functions", "body": "want request feature report bug question current behavior trying use notice lifecycles methods ex need fired manually solves problem reveals want use shallow render test component test api minimal rendering expected behavior expecting would support testing component reaction different lifecycles capable use rendering way use scenario better move another library like", "num": "13487", "d": "8/2018"}, {"title": "uiwebview access react", "body": "production environment browser access uiwebview access react react route follows deployed nodejs express issue accessing browser display normally access ca nt access passed test request enter appjs nt know issue express problem react nt know asking questions hope friends answer thank much", "num": "13485", "d": "8/2018"}, {"title": "getderivedstatefromprops called calling setstate", "body": "using version till hours ago things expected read made much sense far upgraded things stopped working mainly cause getderivedstatefromprops called calling setstate desired behaviour doubt cause props nt changed entire goal method unify props preprocessing logic new updated component unify way developers apply props state checked version setstate trigger getderivedstatefromprops", "num": "13480", "d": "8/2018"}, {"title": "input checkbox updating rerender", "body": "react version checkbox dom checked state change constructor props super props componentdidmount thissetstate checked thispropschecked render let checked console logging checked first render returns reactelement type input following props second render state change however app checkbox checked explicit set defaultchecked property true checked default statechecked true checked tried removing onchange listener suspecting may culprit current workaround constructor props super props feels messy", "num": "13477", "d": "8/2018"}, {"title": "us", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "13471", "d": "8/2018"}, {"title": "nd", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "13470", "d": "8/2018"}, {"title": "get keys reactreconciler", "body": "struggling implement reusable views mobile platforms make need get key values explicitly set generated reactreconciler match two different view trees somewhere outside react way achieve thanks", "num": "13469", "d": "8/2018"}, {"title": "purecomponent shallowequal", "body": "simple demo shows click event triggers render every time demo however according source code reactpurecomponent shouldcomponentupdate shallowly compares objects like following click event nt trigger render performs equality iterating keys object returning false key values strictly equal arguments returns true values keys strictly equal", "num": "13468", "d": "8/2018"}, {"title": "ability intercept syntheticevent", "body": "want request feature report bug think feature would like intercept event trigger order record events", "num": "13467", "d": "8/2018"}, {"title": "problem render smart tv", "body": "created app using createreactapp installed dependencies yarn install started yarn start tried open page smart tv samsung nothing rendered downgraded version react reactdom install start page rendered normally happens lg tv", "num": "13466", "d": "8/2018"}, {"title": "react onchange events bubbling unmount", "body": "want request feature report bug reporting bug current behavior attaching handler jsx element calling handler leads element unmounted event never bubbles dom means ca nt listen basically anything else element current behavior bug please provide steps reproduce possible minimal demo problem example code try open console click around bit notice single checkbox never changes position triggers listeners whereas checkboxes get moved lists trigger events expected behavior would expect event handled way event versions react browser os affected issue work previous versions react tested conditions react macos opera firefox dev edition chrome canary behaviour changed versions", "num": "13459", "d": "8/2018"}, {"title": "npm install error", "body": "hello", "num": "13458", "d": "8/2018"}, {"title": "potential performance issues using forwardref", "body": "want request feature report bug bug assuming potential drop perf counts bug current behavior setting rudimentary perf benchmark harness reactredux compare performance builds reactredux work version harness runs one benchmark apps headless puppeteer running capture fps values second time capture chrome trace reports automatically currently one benchmark app stock ticker type stress test measures fps using package relies rough show meaningful differences fps values swap different reactredux builds change number connected components benchmark two wip candidate prs reactredux initial testing showed pr almost fast existing version pr slower runs however initial push branch include use branch already added spent saturday adding couple pieces functionality branch reran benchmarks per ourcomments issue saw branch suddenly gotten slower removing branch sped things fps admittedly artificial stress test scenario also likely reactredux apps hundreds thousands connected components potential slowdown seems concerning current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example current perf benchmark repo uses umd builds reactredux easily switch build used several umd builds already committed root repo branch branch reproduced building respective branches prs handcopying umd build artifact reactredux clone benchmark folder renaming whatever seems appropriate clone repo install build run benchmark number connected components modified requires rebuilding harness determines umd build versions run based array around line expected behavior would minimal impact perf used wrap component hoc hoc used widely application versions react browser os affected issue work previous versions react testing puppeteer windows looks like locally installed version chromium current version react umd build reactredux umd expects react redux also global variables tested prior version react specifically targeting next version reactredux", "num": "13456", "d": "8/2018"}, {"title": "forwardref precludes use composite component test utils methods", "body": "want request feature report bug bug file new issue per current behavior using reacttestutils navigate trees composite components unable find instances components wrapped current behavior bug please provide steps reproduce possible minimal demo problem jsfiddle link hoc returns forwardref pretty much exactly like one written docs except using react context jsx const mycontext reactcreatecontext somedefault const withmycontext component gt class mycontextconsumer extends reactcomponent render const forwardedref rest thisprops return reactforwardref props ref gt withmycontext class myhocforwardedcomponent extends reactcomponent render return hello expected behavior would hope could still navigate tree able find rendered instance versions react browser os affected issue work previous versions react react everywhere believe thank time", "num": "13455", "d": "8/2018"}, {"title": "componentprototypesetstate callback receiving arguments", "body": "want request feature report bug bug current behavior callback receiving parameters though line states current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example please check console clicking button display empty array indicating nt get called parameters expected behavior comment mentions get updated state props context arguments versions react browser os affected issue work previous versions react checking behaviour react using chrome mac os high sierra also nt seem work previous versions though nt go back version history", "num": "13452", "d": "8/2018"}, {"title": "ancestor stoppropagation prevents controlled working", "body": "want request feature report bug bug current behavior react component mounted descendent dom element stops propagation event event react component occur current behavior bug please provide steps reproduce possible minimal demo problem html structure html react component reproduction codepen expected behavior works well like versions react browser os affected issue work previous versions react issue occurred react tested older react newest chrome firefox edge windows", "num": "13451", "d": "8/2018"}, {"title": "umd builds enabled unpkg", "body": "visiting displays cjs build umd build displayed instead also noticed issue reactdom assume packages need fixed please refer usage instructions bottom", "num": "13450", "d": "8/2018"}, {"title": "map render array elements", "body": "current behavior support return array components example render return export default arraydemo want map reactchildrenmap example import arraydemo xxxxxx reactchildrenmap arraydemo item index gt return span item arraydemo become single element reactchildrentoarray got expected behavior expected since react return array map sometimes want wrap element array versions react browser os affected issue work previous versions react missing something important thx lot", "num": "13449", "d": "8/2018"}, {"title": "tools endtoend testing", "body": "may question moreso feature request ca nt seem find answer around web seems people working small apps ignoring issue working large react application seeing issues endtoend testing webdriverioselenium setup seems rather common understand use tools click buttons type text etc find affected dom elements assertions however problem react synchronously perform operations read dom use various methods schedule work done asynchronously later time found tests assertions random see real dom still previous state rather new state results clicked button whatnot every large test run seen many posts internet even acknowledge issue one found suggests adding timeouts throughout tests however obvious reasons slow nondeterministic suggested way know react application finished performing scheduled work discussion happening somewhere", "num": "13447", "d": "8/2018"}, {"title": "element type invalid expected string builtin components classfunction composite components got object", "body": "want request feature report bug bug current behavior ed stateless functional components usual way actually component use causes error ed objects returned components properties like etc app breaks gives error message element type invalid expected string builtin components classfunction composite components got object check render method closer inspection initial error message console warning reactcreateelement type invalid expected string builtin components classfunction composite components got object check code line uses replace contents get error however error disappears comment object source problems looks like looks like immediately original definition inside component uses simplified component use get error import react react const companyiconinheader debugger export default companyiconinheader module uses react says check render method import react react import connect reactredux import createstructuredselector reselect import getcompanyname companyinfostateglobalcompanyselectors import companyiconinheader companyiconinheader const companyheaderpartwithoutstructure companyname gt companyname export default connect createstructuredselector companyname getcompanyname companyheaderpartwithoutstructure fruitless attempts get rid error undefined point get error take also remove use related imports also import still errors component turn uses connected even reduce point importing react returning without connecting error still thinking maybe go way tree disconnect everything maybe error disappear would nt solve problem wo nt go also get error point react ends error message check render method current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior error versions react browser os affected issue work previous versions react react redux reactredux get behavior react redux reactredux also reactredux react redux also redux react reactredux also old reactredux redux newest react app made createreactapp ejected", "num": "13445", "d": "8/2018"}, {"title": "link click fire click event witch bind window componentdidmount", "body": "page b bind event window page click change router b event triggered feels strange bind event b triggered event", "num": "13440", "d": "8/2018"}, {"title": "cache provider add hooks read preload dev mode", "body": "topic originally came discussion want request feature report bug feature current behavior package presently provide hooks understand pulled resource first time hit cache dropped something cache due due tools provide interface around cached resources makes debugging inspection harder expected behavior would great way expose callbacks events cache resource resolved idea would fire callbacks events existing switch statement mode information could reduxdevtools esque interface better understand data coming hitting cache dev mode tools like would also useful people new suspend api visually see resources transition various record states", "num": "13439", "d": "8/2018"}, {"title": "doubt behaviour using purecomponent", "body": "current behavior met strange behaviour using purecomponent normal unincrease number click add button follow shallowequal return true js class b extends reactpurecomponent constructor props super props thisstate count thisclick thisclickbind click thissetstate count thisstatecount render return thisstatecount doubt normal increase number using like follow link js click const state objectassign thisstate thissetstate count statecount option effect count thisstatecount count statecount nt know second way thanks replying", "num": "13438", "d": "8/2018"}, {"title": "suspense fixturedemo page scrolls top unnecessarily", "body": "open demo lives repo fixtures folder small screen tapping one rows bottom ex name causes page scroll top immediately means see inline loading indicator scroll top data loads", "num": "13436", "d": "8/2018"}, {"title": "react page returns ios wkwebview", "body": "react app following routes xyzcom xyzcompolicy try access ios app wkwebview rendering proper homepage try access nginx returns error wkwebview pages seems work normally mobiledesktop browsers accesslog accessing normal browsers accessing route ios app wkwebview accesslog like know issue react router prevents rendering content although sure problem content", "num": "13433", "d": "8/2018"}, {"title": "rendertostring supports html minify", "body": "think optionally minify html string returned believe possible current react think method placed document possible thanks", "num": "13432", "d": "8/2018"}, {"title": "feature request react element", "body": "angular element develop custom elements render external application like bellow js feature react", "num": "13429", "d": "8/2018"}, {"title": "host components outside setstate path sometimes unnecessarily diffed updated", "body": "extracted currently diff host node complete phase even bailed begin phase means little bit work necessary also observable effects particular would rare probably worth fixing made worse end committing update inputs another component fix filing posterity", "num": "13425", "d": "8/2018"}, {"title": "onchange nt fire input rerenders due setstate nonreact capture phase listener", "body": "extracting issue always react reproduce react however probably extremely rare practice nt worth fixing filing posterity minimal example js class app extends reactcomponent state value handlechange e gt thissetstate value etargetvalue componentdidmount documentaddeventlistener input gt comment line fix thissetstate true render return reactdomrender documentgetelementbyid container typing nt work unless comment call capture phase listener say input empty typing happens capture phase nonreact listener runs first rerendering due first empty input props still contain old value dom node value new equal set dom node value according props remember current value tries decide whether emit change event asks tracker whether value changed tracker compares presumably new set earlier stored also also updated changes update lost never get change event never actually get chance set correct state", "num": "13424", "d": "8/2018"}, {"title": "eslint ca nt find module error", "body": "want request feature report bug maybe bug current behavior clone react run eslint inspection fail due seems use wrong value npm support file sure change comments expected behavior error versions react browser os affected issue work previous versions react react repo master branch macos yes previous works", "num": "13418", "d": "8/2018"}, {"title": "small issue test ensure componentdidmount called", "body": "glancing tests get better handle update batching like noticed possible logic omission test case file moves looks like js call render component deleted gt var rendercount var componentb null truly intended check whether component mounted additional end test otherwise seems superfluous since never checked otherwise used test", "num": "13417", "d": "8/2018"}, {"title": "replace content", "body": "want request feature report bug feature current behavior use render replace body content got warning message warning render rendering components directly documentbody discouraged since children often manipulated thirdparty scripts browser extensions may lead subtle reconciliation issues try rendering container element created app creating whole website according better elements elements said better directly body example says content unique page use per page put directly inside ideally nt nested within elements think common case replace whole content current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior maybe remove warning versions react browser os affected issue work previous versions react reactdom", "num": "13415", "d": "8/2018"}, {"title": "fragments rendered strange elements", "body": "react reactdom trouble reproducing raising hope someone give clues cause large application using places like everything internet explorer renders expect html child child child child jsx child child child child reactcreateelement reactfragment think correct way symbol polyfill works react recognize something html tag even weirder happens sometimes two components app using fragments first one render may issue second may affected component rerenders rendered dom corrected nt found solid pattern yet fairly typical webpack babel setup using babelpolyfill symbol support really sure parts setup relevant please let know need extra info trying create reproduction outside application anyone offer clues meantime incredibly grateful", "num": "13414", "d": "8/2018"}, {"title": "umbrella chopping block", "body": "wanted create list things whose existence makes react bigger complicated necessary makes likely need deprecated actually removed future version clue happen recommended upgrade path nt take issue advice move away clear upgrade advice might make worse overlap seem longer term unsafe life cycles without unsafe prefix keep ones prefixed unsafe indefinitely original ones likely deprecated removed legacy context old context full edge cases accidentally supposed work way designed requires react code become slower support feature string refs requires current owner exposed runtime likely form owner remain particular semantics likely want rather two owners remove feature also requires extra field every reactelement otherwise needed module pattern components little used feature lets return class instance regular function without extending useful practice ecosystem moved around es class like usage language compiling js tries comply model well existence feature means nt know something functional component testing function extending instead extra feature testing every functional component also prevents us passing ref second argument default functional components without using since would nt valid class components uncontrolled oninput described support uncontrolled polyfilling event pretty invasive operations dom like attaching setters support imperative usage dom outofscope react setstate componentdidcatch currently support error recovery support might want consider deprecating old mechanism automatically first commits null semantics bit weird requires complicated code likely get wrong sometimes context object consumer right possible use context object consumer render prop artifact reusing object allocation documented want deprecate make provider instead gc unmounted roots likely wo nt come warning breaking behavior memory usage call component wo nt cleaned almost always cleaned anyway since least one subscription still holds onto arguably even breaking change unstablerendersubtreeintocontainer replaced portals already problematic since ca nt used lifecycles also add lots special case code transfer context since legacy context likely deprecated serves purposes x reactdomrender hydration already deprecated requires extra code requires us generate extra attribute html autoselect hydration people using reactdomhydrate instead need remove old behavior attribute reactdomserver", "num": "13413", "d": "8/2018"}, {"title": "keyboardeventrepeat normalized", "body": "want request feature report bug bug current behavior documentation syntheticevent claims react normalizes events consistent properties across different browsers documentation keyboard events lists supported field natively support react normalize event set keydown event repeats ie key held edge open bug course abandonware current behavior bug please provide steps reproduce possible minimal demo problem tab div repro hold key bug repeat alert appear expected behavior alert dialog showing repeat appear browser react supports versions react browser os affected issue work previous versions react current version react browser natively support ieedge particular chrome always supported ff since safari since unknown worked previous versions react", "num": "13411", "d": "8/2018"}, {"title": "investigate selectwrapperstateinitialvalue necessary", "body": "uncovered raunofreiberg select work ever assigned never referenced removed example would great someone could investigate figure removed", "num": "13410", "d": "8/2018"}, {"title": "createsubscription call getvalue constructor early", "body": "want request feature report bug bug current behavior made example show execution order lifecycle functions remounting component calls save result state called changes ignored remount component wrapped component something modify source value get wrong value new component expected behavior versions react browser os affected issue work previous versions react latest", "num": "13405", "d": "8/2018"}, {"title": "callback function setstate faster real dom render", "body": "hello dear problem project want get dom documentgetelementbyid password dom unrendered untill modal opened like bellow visible control modal display works well react using react tell addeventlistener function deal bellow works well like em nt know reason update react version thy reactdom find dom refs receive answer browser wish get answer u", "num": "13402", "d": "8/2018"}, {"title": "boolean dom properties coerce empty string false contrary html standard", "body": "kind space offshoot attempt better model react dom props flow tl dr react warn value passed known boolean dom prop want request feature report bug depends interpretation possibly bug definitely inconsistency worth mitigating imho current behavior react normalises values supplied known dom boolean props eg passing empty string falsy javascript results corresponding attribute omitted html output however html empty string truthy value context one values standard specifically allows boolean attributes potential source confusion react handling unknown attributes gives rise following hypothetical scenario new dom boolean attribute introduced people write jsx code uses passed html truthy later react adds internal whitelist minorpatch version starts processing boolean js falsy omitted html would technically breaking change people current behavior bug please provide steps reproduce possible minimal demo problem expected behavior definitely clash expectations interface js html coming js falsy treating boolean prop fine perspective current behaviour justifiable coming html might obvious react extra processing deviating clearly stated html spec perspective current behaviour surprising probably nt justification changing react actual handling least fear breaking code relies longstanding behaviour see version information perhaps warning ambiguity warranted la note warning wo nt fully mitigate worstcase scenario mentioned since ca nt warn prop nt know dom boolean least would give signal react version update code might expected thing anymore versions react browser os affected issue work previous versions react versions react far back probably way older process whitelisted boolean dom props way", "num": "13400", "d": "8/2018"}, {"title": "reacttestrenderer find render function reactnative component", "body": "want request feature report bug bug current behavior run tests render component using shallow function enzyme fails ca nt find render function typeerror thisinstancerender function current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example developing reactnative application running default jest command run tests happens ca nt reproduce small project expected behavior run tests versions react browser os affected issue work previous versions react using babelcore proptypes react reactdom reactnative babelcore babelcore babeljest babelpresetreactnative babelruntime enzyme jest jestfetchmock jsdom reacttestrenderer jest configuration jestconfigjs babel config babelconfigjs", "num": "13399", "d": "8/2018"}, {"title": "avoid reconciliation alternative component interface", "body": "hello want ask question way avoid reconciliation process today see following process component wants rerender component render method provides new virtual dom react diff library tries find nonoptimal way morph old virtual dom new one please fix wrong familiar react codebase see information docs worry exactly changes every update solution complexity n even worse user care changes sometimes user knows changed able provide log n even solution example working huge data list receiving information websocket morph list appendprepend remove swap items etc nt want render huge component list run reconciliation process mutation tell virtual dom morph efficiently way user provide morph method imagine api like render defined morph component componentappend else prependto componentfind key plans implement thank please feel free ask questions", "num": "13396", "d": "8/2018"}, {"title": "reactdom support solve problem", "body": "error message set undefined error line var labelsincurrentcommit new set anyone encountered problem solved", "num": "13390", "d": "8/2018"}, {"title": "createanewapphtml", "body": "createanewapphtml error word npx createreactapp myapp cd myapp npm start", "num": "13383", "d": "8/2018"}, {"title": "provide property facilitate context testing", "body": "want request feature report bug feature request current behavior provides property provide property allowing context tests expected behavior return object containing instance current context versions react browser os affected issue work previous versions react least", "num": "13382", "d": "8/2018"}, {"title": "reactcloneelement remove existing props", "body": "want request feature report bug feature current behavior element cloned reactcloneelement possible add new props modify existing ones remove existing props relevant code example works right desired behavior would great add way remove props passing value guess could use directly afaik also worry special attributes like rather mess internals versions react browser os affected issue work previous versions react think worked way react versions use case applying map transformation elements recursively need remove virtual props passing elements react render contrived example console shows want avoid", "num": "13381", "d": "8/2018"}, {"title": "reactchildrenmap incompatible reactchildrenonly function", "body": "return value reactchildrenmap incompatible reactchildrenonly function return error message invariant violation invariant violation reactchildrenonly expected receive single react element child", "num": "13380", "d": "8/2018"}, {"title": "npm install react nt run", "body": "hello everyone want install reactjs project created run command npm react causes error package json name reactlab version description lab sur reactjs main indexjs scripts test echo error test specified amp amp exit author orion wambert license isc dependencies bootstrap createreactapp expressjs jquery latestversion mobx reactredux reactrouter redux webpack", "num": "13371", "d": "8/2018"}, {"title": "try listening mouse keyboard event reactjs", "body": "anyway detect mouse keyboard event browser minimize need suggestion thank", "num": "13370", "d": "8/2018"}, {"title": "epreventdefault work safari later", "body": "want request feature report bug bug current behavior epreventdefault work safari later current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example reproduction link steps reproduce page safari page safari beyond expected behavior page scrolled versions react browser os affected issue work previous versions react react browser safari os", "num": "13369", "d": "8/2018"}, {"title": "onchange triggered option changes even human", "body": "want request feature report bug bug current behavior consider options external data say b users could choose option say b since data outside possible later option b longer option automatically adjust display left option case yet triggered means unless users click choose option already displayed nt make sense internal state would nt able change correct perceived value current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example simulate external data input text commaseparated choices try following sequences events select option b element edit text box value changed displayed value current choice internal state still b expected behavior triggered internal state adjusted versions react browser os affected issue work previous versions react chromefirefox", "num": "13366", "d": "8/2018"}, {"title": "want use crypto module nodejs work", "body": "want use cryptocreatediffiehellman dh encryption react code followed error reactjs work fine nodejs followed code reactjs import react component react import logo logosvg import appcss import crypto crypto class app extends component constructor props super props thisstate text componentdidmount render return welcome react get started edit save reload export default app exception like", "num": "13365", "d": "8/2018"}, {"title": "reacteventlistener listen onclick events", "body": "listen onclick events need listen onclick events app get access reacteventlistener", "num": "13363", "d": "8/2018"}, {"title": "might time update package readmes", "body": "npm package get immediate access react without also requiring jsx transformer especially useful cases want browserify module using react", "num": "13359", "d": "8/2018"}, {"title": "ability use return value reactchildrenmap reactchildrenonly", "body": "stated docs shown return value incompatible function return error message invariant violation invariant violation reactchildrenonly expected receive single react element child used incompatibility causes fairly annoying restrictions however understand means ca nt edit properties component children runtime contain component requires single child eg ca nt dynamically set disabled prop child component parent believe due type differences parameter return value former valid element latter see like make request return type type fix quirks much intuitive separate static function converts return type type would also solve issue feels like sort fix order since broad strange restriction components use", "num": "13355", "d": "8/2018"}, {"title": "setstate unexpectedly update nonstate properties", "body": "nt know known issue intended feature found interesting problem know want render reactive value react put value state use setstate js constructor super thisstate counter thisincrementbuttonlistener e gt epreventdefault thissetstate prevstate gt counter prevstatecounter render return thisstatecounter clicked counter increments rerenders make field property render catch snapshot component created even incremented result displayed reactively render js constructor super thiscounter thisincrementbuttonlistener e gt epreventdefault thiscounter render return thiscounter clicked counter increments difference rendered right basic stuff however interesting occurence try fiddle around code keeps counter field property everything else intact difference going add js constructor super thiscounter thisincrementbuttonlistener e gt epreventdefault thiscounter add thissetstate pass object even empty thissetstate wo nt work render return thiscounter surprise surprise thiscounter update state time updates state assumption every time setstate called even empty object parameter render runs get recalculated thus incremented course wo nt reactive state property use case time would change click button put setstate listener would work state sure accepted behavior unexpected hack whether make use could anybody help elaborate fiddle want see behavior action comment bit line see difference", "num": "13354", "d": "8/2018"}, {"title": "persistent state storing parent", "body": "hi use reactvirtualize render list sub component row carries state state obviously gets reinitialized every remount store state parent object pass object tree props set object every time state update javascript constructor props super props thisstate propsstatecachechildstate thissetstate property gt thispropsstatecachechildstate thisstate", "num": "13352", "d": "8/2018"}, {"title": "bug lastest version getting images", "body": "hi page loaded lot errors getting images reactdom message like path file error react please fix tell please wrong", "num": "13350", "d": "8/2018"}, {"title": "reactcreatecontext singleton enforcement", "body": "want request feature report bug bit current behavior old context api involved components provided consumed context using shared string key words requirement communication components providing consuming context string key used side effect allowing easy communication via react context across packages ie separate nodemodules using shared context might one two forms entirely different components using context key perhaps spread around source code even nodemodules one packages importing context providingconsuming components another usage pattern line abstraction new api works much differently instead communication work correctly consumer provider must always come exact function call unlike old api means provider consumer imported another package implicit singleton otherwise separate instances think intuitive reasonable form work new api less form best way handling far best approach thought using peer dependencies enforce package calling never duplicated nodemodules potential drawback brought original reactcreatecontext rfc ca nt seem find reference limitation docs anywhere recommended way handling listed documentation caveat using way make less errorprone nt seem issue regarding already figured create one kick discussion expected behavior context communication work across package boundaries see note old context api versions react browser os affected issue work previous versions react concerns versions react api", "num": "13346", "d": "8/2018"}, {"title": "ca nt call findbytype instance reacttestrenderer", "body": "bug current behavior ca nt call findbytype instance typeerror instancefindbytype function expected behavior want get fieldmapper componen child fieldmapping peace code test testrenderer create versions react browser os affected issue work previous versions react react reacttestrenderer typescript typesreacttestrenderer", "num": "13345", "d": "8/2018"}, {"title": "rfc omit end tags possible reactdomserverrenderer", "body": "background lot instances defined html spec end tags omitted still maintaining valid markup examples li element end tag may omitted li element immediately followed another li element content parent element p element end tag may omitted p element immediately followed address article aside blockquote details div dl fieldset figcaption figure footer form header hr main nav ol p pre section table ul element content parent element parent element html element audio del ins map noscript video element autonomous custom element see utilizing rules think may possible reduce amount html needed initially downloaded user serverside rendering depending rendered could significant decrease html size example pulled table element utilizing rules difference bytes compared decrease size html tee electric powered rail car train functions abbreviated function control unit central station headlights interior lights electric locomotive operating sounds engineer cab lighting station announcements swiss caveats even though rules spec still feel like quirks probably browsertobrowser differences handled even handled react could see babel plugin something like good fit optimization like possible roadmap research end tags would stable omit roll optimization subset tags gauge realworld load time improvements continue adding omission cases everything looking good", "num": "13342", "d": "8/2018"}, {"title": "feature request unmount component", "body": "want request feature report bug request feature want able unmount component think life cycle could good maybe returning special value provided react render also good jsx class mycomponent extends reactcomponent rest render thisstateshouldunmount return reactshouldunmount", "num": "13338", "d": "8/2018"}, {"title": "imperative wrappers ca nt access current context value commit phase", "body": "sometimes imperative wrapper like js componentdidmount rendersomethingimperatively thisprops componentdidupdate rendersomethingimperatively thisprops render return null portals eliminated need regular dom jumps still need embedding renderers eg use cases like vue inside react crossrenderer embedding maybe could extend portals still imperative use cases crosslibrary rendering though one thing becomes annoying new context wo nt propagate imperative boundary nt maintain stack commit phase traversing flat linked list effects nt actually know context value current time fires friends means context host app accessible quite annoying could hack around something like neither obvious convenient anticipate contexts get used seems even less convenient imperative cases like vue inside react js componentdidmount rendersomethingimperatively thisprops componentdidupdate rendersomethingimperatively thisprops render value gt return seems like could use would put state use lifecycles maybe sufficient still means need explicit contexts want remember though wonder find better solution use cases", "num": "13336", "d": "8/2018"}, {"title": "excessive iteration multiple roots scheduled lifecycle", "body": "looking seemed suspicious consider case js class app extends reactcomponent componentdidmount let lt reactdomrender documentcreateelement div render return null reactdomrender documentgetelementbyid root profiling tells spend lot time searching root adding logging shows eg roots run loop iteration times first root times second root times third root etc oops surely bug", "num": "13334", "d": "8/2018"}, {"title": "bug onpointerup nt fire tablet pen input", "body": "example component current behavior onpointerup event fails fire using wacom tablets tested chrome mac windows past used reactpointable wrapped functions also longer works", "num": "13333", "d": "8/2018"}, {"title": "support crossrenderer portals", "body": "currently works within current renderer means want embed one renderer another eg option imperative render committime hook like outer renderer component fact exactly works today approach nested renderers like ca nt read context outer renderers similarly ca nt timeslice updates inner renderers update inner container host renderer commit time time originally discussed portals wanted make work across renderers could something like js super clear work renderers bundle incompatible fiber implementations whose implementation takes charge want figure something eventually filing future reference", "num": "13332", "d": "8/2018"}, {"title": "question rendering arrays components implementations behave", "body": "want request feature report bug possible bug though likely expected behavior misinterpreting current behavior say array components like render also want weave tags item example jsx const delimited props gt propsitemsreduce b gt b works however components array state forget state parent refreshes seems bad rewrite delimited component produces result inserting array items keep internal state jsx render items state retained parent refreshes const delimited props gt const results propsitems let resultslength gt resultssplice return results adding prop nt change outcome current behavior bug please provide steps reproduce possible minimal demo problem first click one toggle buttons click add toggled buttons retain state click use reduce renders buttons using repeat steps time toggle buttons forget state click add expected behavior seems like component getting remounted using updates existing component use loop nt implementations update existing component versions react browser os affected issue work previous versions react react chrome osx high sierra", "num": "13331", "d": "8/2018"}, {"title": "including css cdn react project", "body": "hi trying use react slick project unable import css provides documentation says something like cant dont know people get use kinda importing exactly wrote include styles cdn indexhtml like question including like cdn good bad react project effects react performance even effect react side project build css help webpack", "num": "13330", "d": "8/2018"}, {"title": "shouldcomponentupdate called thissetstate callback", "body": "want request feature report bug bug probably current behavior seems unintuitive fired callback way around callback feels like called immediately state updated actually method called callback fiddle open devtools see console trying say fiddle expected behavior believe callback called shouldcomponentupdate versions react browser os affected issue work previous versions react", "num": "13329", "d": "8/2018"}, {"title": "propschildren slot feature", "body": "feature request thinking need sort slot feature introduced inside propschildren existing feature proposal would allow use specific directive inside children markup let say jsx side would able write instead uniq syntaxe intent open discussion feedback eventual feature thx", "num": "13328", "d": "8/2018"}, {"title": "prop rendering element iif children render", "body": "want request feature report bug feature current behavior every react project worked always sort code looks like looks ugly scalable imagine mycomponent children instead knowledge way achieve intended behavior expected behavior prop nullifempty naming sugestions welcome defaults false specified true render element children looks better scales better keeps probably ocd ease", "num": "13327", "d": "8/2018"}, {"title": "using prototypes classes component src", "body": "browsing curiosity source code component saw actually use prototypes classes accurate missing something make decision", "num": "13326", "d": "8/2018"}, {"title": "event handler support get second param current instance", "body": "event handler support get second param current instance usually write component link follow write link follow babel transform js var component function react component inherits component react component reactcomponent event handler support get current instance second param nt worry write handler strict method compatibility old version", "num": "13324", "d": "8/2018"}, {"title": "error handling", "body": "difficult handle kind error difficult find bug whenever mistake use curly braces instead parenthesis console showing error able find file got error rather shows main building block file", "num": "13322", "d": "8/2018"}, {"title": "feature react behaves bad performance updating huge array", "body": "want request feature report bug feature current behavior bad performance want update small part array method causes method triggered every time update array entire array traversed array gets larger larger react takes resource computer especially cpu cases calling dom method feature react makes lot better performance react way however calling dom method lot react graceful solution come across scenario times example written pseudocode jsx class datalist extends reactcomponent constructor props super props thisstate datasourcelist getdata gt data fetched server piece data assigned variable say thissetstate datasourcelist deepclone thisstatedatasourcelist push newdata render return thisstatedatasourcelistmap v gt return getdatarendermapgetdata method however scenario costs lot cpu resource wrote streaming log component line log printed screen every time websocket receive message server one piece message renders counterpart component sometimes server sends hundreds thousands messages within one second causes method method triggered thousands times accordingly behavior even makes current web page occupy cpu computer got frozen updating process finished order solve issue use web api method mount dom node carrying messages directly dom node steaming log component wrapper solution avoids part complexity n n length array snippet pseudocode jsx class datalist extends reactcomponent getdata gt data fetched server piece data assigned variable say dataitem documentcreateelement div dataiteminnerhtml newdatavalue thiscontainernodeappend dataitem render return append improves behavior greatly always elegant solution possible react way update small part array pushing element array rendered current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example bug probably flaw react architecture expected behavior expected behavior may update array scenario original react api rather directly calling dom node method versions react browser os affected issue work previous versions react present version browser os work previous versions either", "num": "13316", "d": "8/2018"}, {"title": "test", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior versions react browser os affected issue work previous versions react", "num": "13315", "d": "8/2018"}, {"title": "profiler durations sometimes incorrect", "body": "working devtools profiler noticed durations sometimes incorrect seems vaguely related highlow priority state updates need track filing issue", "num": "13309", "d": "8/2018"}, {"title": "create form using json data reactjs", "body": "need create form using json data done creating run time textbox showing times need one times textbox select also print times need times anyone help renderform gt return mdmap", "num": "13308", "d": "8/2018"}, {"title": "someone else think hoc poor name", "body": "thought boggles mind like share see anyone feels higher order function function takes another function argument returns third function call hoc takes component returns component component function takes props returns nodeselements props nodes definition hoc take props return nodeselements higherorderwhatever component even define starting lowercase letter nt name pascalcase like actual components nt try use tag names jsx pretty sure hoc component call maybe component factory instead hoc would better name course term hoc widely used name confusing word component misused think", "num": "13307", "d": "8/2018"}, {"title": "umbrella releasing time slicing", "body": "let use track missing time slicing usable internally open source list probably incomplete feel free add initial release mvp core x decide recommended lowhigh pri split pattern x fix respected interactive event handlers reproducible fixture x fix provide workaround issue chain synchronous commits expiration reproducible fixture resuming offscreen api scheduler decide naming flarnie react core team adding support priority flarnie may involve bikeshedding iteration require changes react fiber scheduler add fixture showing using js scheduler react also external js better handle tab backgrounded flarnie improvements polyfill raf integrate dogfood internal fb products see internal task flarnie create final api rendererdependent make depend publish open source flarnie others internally related suspense umbrella", "num": "13306", "d": "8/2018"}, {"title": "warning tag unrecognized browser", "body": "want request feature report bug bug electron users current behavior running jest components containing webview element rendered warning rendered console many tests run output littered warnings current behavior bug please provide steps reproduce possible minimal demo problem bug get fixed much faster run code nt dependencies react paste link jsfiddle codesandbox example expected behavior warning logged console versions react browser os affected issue work previous versions react react electron unknown worked prior versions react", "num": "13299", "d": "8/2018"}, {"title": "set static variable reactcomponent manage state global variable set context", "body": "import react react export class assigncomponent extends reactcomponent syncsetstate state gt const return new promise function reslove mesetstate state gt reslove mestate assigncomponentreducer import react react import assigncomponent src const actions function dispatch return async function actions dispatch actions export default class testa extends assigncomponent constructor props super props thisstate name xh age height thiscreatestore assger actions function assger action assign switch actiontype case return assign name cxh case b return assign age", "num": "13297", "d": "8/2018"}, {"body": "love reducing bundle size class prop changes welcome great work", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "attention form library authors", "d": "8/2018"}, {"body": "great", "d": "8/2018"}, {"body": "classname class fantastic others seems weird still etc", "d": "8/2018"}, {"body": "adopting major breakthrough making library friendly beginners congratulations", "d": "8/2018"}, {"body": "awesome curious move actually going work props seems like would initially present reserved keyword problem", "d": "8/2018"}, {"body": "fantastic news thanks gaearon", "d": "8/2018"}, {"body": "love every points except change seems downright contradictory goal points pursuing aligning dom api react binds dom properties html attributes even articulated first point dom element property named classname would named react", "d": "8/2018"}, {"body": "fantastic goal bundle size reduction", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "others seems weird still clippath htmlfor tabindex etc open discussion argue changes worth except maybe", "d": "8/2018"}, {"body": "think rewrite event system interesting aspect significant opportunity reduce bundle size ease community contributions let", "d": "8/2018"}, {"body": "wonder would worthwhile also work releasing jsx time people going need relearn handful things anyway maybe better relearn bunch one time rather things twice period time thought occurred read", "d": "8/2018"}, {"body": "love every points except classname change seems downright contradictory goal points pursuing aligning dom api react binds dom properties html attributes even articulated first point yet pass unknown keyvalue pair treated attribute since react already inconsistent also comment users wrong expecting react set attribute whether react api uses attribute name property name api compeletely orthogonal defended side argument years think friction worth gain anything letting people use negative effects except work destructuring migration cost everybody complains learn react think people expect case important pedantic since changing dom things anyway let batch together", "d": "8/2018"}, {"body": "long react fire blazing fast", "d": "8/2018"}, {"body": "changes fantastic way excited implications reacttestinglibrary particular events bound react root maybe even drop event delegation altogether may necessary modern environments anymore potentially removingrewriting synthetic events seriously improve implementation experience using tool love provide feedback implemented", "d": "8/2018"}, {"body": "maybe even drop event delegation altogether may necessary modern environments anymore considered think might oversimplification event delegation lets us avoid setting bunch listeners every node initial render swapping updates aspects ignored likely benchmarking done though", "d": "8/2018"}, {"body": "tannerlinsley unfortunately kill jsx object short hand notation would super super nice could finally take objects arrays btw next strings", "d": "8/2018"}, {"body": "goal bundle size reduction dropping third react dom would nice see hard say early best", "d": "8/2018"}, {"body": "wow enumeration almost design decisions mention people ask react cons love direction going", "d": "8/2018"}, {"body": "would upgrade path libraries use want support multiple versions react", "d": "8/2018"}, {"body": "gaearon maybe big deal today nice say props dom properties html attributes except classname one html name also like able copypaste svg wo minutes messing around attributes match react", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "feels like transition done carefully probably extended period time going cause lot issues ecosystem virtually every component need changed even trivial ones mostly fine code codemod dependent party libraries largely mercy maintainers rest changes seem relatively low risk ecosystem point view getting rid really cause lot pain seems like possible split separate issue release different schedule rest changes", "d": "8/2018"}, {"body": "agree felixfbecker everything sounds awesome would improve quality developers users classname change beeing able deconstruct properties one would certainly cause confusion harder explain new users need use classname class keyword clearly see misstake made colored differently working around class deconstructing requires introducing new syntax completely different way read specific property would work untill need use rest property creates many problems save four characters", "d": "8/2018"}, {"body": "felixfbecker could jsx js version would", "d": "8/2018"}, {"body": "great plan nice", "d": "8/2018"}, {"body": "awesome ca nt wait dig new stuff", "d": "8/2018"}, {"body": "drastically simplify event system react delegate handler custom elements without extending reactdom definition means react set custom handler custom element like gaearon plan", "d": "8/2018"}, {"body": "changes excellent biggest meta change size reduction opinion react mean dx fat enough downloading parsing average networks particular mobile problem could", "d": "8/2018"}, {"body": "would rewriting event delegation open door fixing events degrade perf node attached react means whole app also long shot considered synthetic dataset props able type allowable html props data leads ton bugs forwarding props dom nodes currently typed react components choose exact types props allowing data attributes", "d": "8/2018"}, {"body": "excited", "d": "8/2018"}, {"body": "ryanflorence bit offtop kinda sad one far know idea make htmlcsssvg jsx transfomer order ease migrations react many trivial changes map html attrs react props many manhours wasted perfoming mostly findandreplace", "d": "8/2018"}, {"body": "strange see following issue comments goal make react better aligned dom works classname class seems weird still clippath htmlfor tabindex etc direct counterparts dom apis argument nt pass muster defended side argument years think friction worth gain anything letting people use class negative effects except react always thin layer top js everything else besides jsx angle brackets js direct counterpart dom apis things directly related dom classname clippath htmlfor tabindex etc etc etc decision introduce react stops thin layer reserved word js breaks away declared goal compatible dom apis especially jarring see want migrate onchange oninput inconsistent dom become inconsistent dom migrating additionally opens full worms people demand already demanding changes parts comments use instead maybe valid js much like consistent dom apis nt change reserved word dom apis etc etc etc", "d": "8/2018"}, {"body": "yet pass unknown keyvalue pair treated attribute since react already inconsistent gaearon also reason react library scoring bad customelements everywhere interop test many issues asking change", "d": "8/2018"}, {"body": "may nonissue similarity react fire react fiber going confusing nonnative english speakers often thought newark penn station new york penn station train line nyc particularly cruel joke tourists real concern could call react flame still keep fire emoji", "d": "8/2018"}, {"body": "would rewriting event delegation open door fixing events degrade perf node attached react means whole app fixing form definitely something like see also long shot considered synthetic dataset props want commit something like bigger surface richer interface dom makes sense clear much want invest react dom versus higher level library gives richer dom api since changes cosmetic high surface area hold", "d": "8/2018"}, {"body": "react blazing", "d": "8/2018"}, {"body": "ryanflorence bit offtop kinda sad one far know idea make htmlcsssvg jsx transfomer order ease migrations react many trivial changes map html attrs react props many manhours wasted perfoming mostly findandreplace jxub", "d": "8/2018"}, {"body": "excited new changes humans facebook making history migration components migrated react fire test suites must tight lt", "d": "8/2018"}, {"body": "similarity react fire react fiber going confusing nonnative english speakers maybe hardofhearing folks conditions affecting word discrimination", "d": "8/2018"}, {"body": "thanks sharing gaearon amasing love see jsx release solving white space new lines issue occurs compile code babel typescript different issues opened tried contribute got told cause react team needs review everything around jsx issue relates dom anyway cause way translate jsx js allow says issue comment end", "d": "8/2018"}, {"body": "think ok let nt add insult injury", "d": "8/2018"}, {"body": "someone please clarify affects existing handlers stop reflecting input values value attribute react still controlled inputs accurate updates handlers affect reading values refs dom nodes", "d": "8/2018"}, {"body": "nickmccurdy affects see browser devtools", "d": "8/2018"}, {"body": "tomdale react ember", "d": "8/2018"}, {"body": "nice waiting see full list changes react believe new era reactjs", "d": "8/2018"}, {"body": "tomdale hmm yarn fiber fabric maybe another clothing related term could used", "d": "8/2018"}, {"body": "yet pass unknown keyvalue pair treated attribute since react already inconsistent gaearon also reason react library scoring bad customelements everywhere interop test reason custom normal elements completely separate code paths reason already old behavior nt want break backwards compat unless new behavior solid think would make sense tackle better custom element interop part umbrella similarity react fire react fiber going confusing nonnative english speakers internal codenames really carry significance projects completed react fire effort make react dom better time becomes productionready react dom react still controlled inputs accurate eventtargetvalue updates handlers affect reading values refs dom nodes yes property talking stopping updating attributes popular libraries afaik causes countless problems nt affect code unless relying css selectors value probably bad anyway nice waiting see full list changes react note committing ready might", "d": "8/2018"}, {"body": "nice see steady development good library like react make usability much better worth imo", "d": "8/2018"}, {"body": "gaearon custom normal elements completely separate code paths seems like something fix reason treat elements intention html dom specs", "d": "8/2018"}, {"body": "justinfagnani discussed previously reason nt time convention tell whether set property attribute risk using check risk making impossible web platform add new properties prototype think already sort consensus rfcs prs robdodson working probably pick", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "react fire also allow us apply clever performance optimizations inferno nt able apply breaking changes exciting times", "d": "8/2018"}, {"body": "lgtm", "d": "8/2018"}, {"body": "related proposed rename love property took array strings would save trouble lot string manipulation use classnames components think disadvantage prop would arrays containing strings order would cause rerender pure component string css classes would nt honestly though seems like minor issue think react devs already know tradeoffs arrays amp objects props", "d": "8/2018"}, {"body": "remove redux devtools extension see error probably want fix part make like nt support arguments", "d": "8/2018"}, {"body": "thank help try fast possible get back", "d": "8/2018"}, {"body": "still nt work", "d": "8/2018"}, {"body": "could remove reduxdevtools entirely", "d": "8/2018"}, {"body": "think might looking", "d": "8/2018"}, {"body": "sorry master broken moment roll back days wait land please", "d": "8/2018"}, {"body": "prevents getting ref field dom traversal", "d": "8/2018"}, {"body": "hi gaearon thanks prompt answer sure meant getting ref field component implementation form mean javascript class input extends reactcomponent inputref reactcreateref case trying avoid implementing validation related code field components trying delegate anything involves validation form since form recurses children check field values getting ref clone invalid field elements add couple validation props implemented posted question sure efficient way achieve need works", "d": "8/2018"}, {"body": "case trying avoid implementing validation related code field components trying delegate anything involves validation form proposing adding ref form feel free similar nt think need traverse react tree seems like simplest solution", "d": "8/2018"}, {"body": "job thanks", "d": "8/2018"}, {"body": "react rerenders children call nt problem code breaks code brittle ways hard say without understanding issue regardless bug better suited discussion forums", "d": "8/2018"}, {"body": "would possibly create following error test fixtures", "d": "8/2018"}, {"body": "reverting definitely fixed roll back commit triage dom stuff", "d": "8/2018"}, {"body": "b e fixed", "d": "8/2018"}, {"body": "fix try top", "d": "8/2018"}, {"body": "turn failing test", "d": "8/2018"}, {"body": "calling read trigger setstate calls component seems wrong result exactly warning open example plane wifi", "d": "8/2018"}, {"body": "create smaller repro one pretty involved", "d": "8/2018"}, {"body": "pared demo show file loading option controls whether function calls triggers warning called warning happens requests cache misses might need hard refresh toggling state", "d": "8/2018"}, {"body": "still lot stuff etc boil essence problem occurs synchronously leads think fine unsupported debugger hack demo meant used way however problem legit fix example happens nt reset current method throw", "d": "8/2018"}, {"body": "cleaned little bit think would lose functionality cut anything else guess boils resource fetcher performing side effects calls function triggers behavior discouraged really worried also side effect update works two react roots render root state update render phase lost case warning useful", "d": "8/2018"}, {"body": "nt understand fetcher synchronously calls see async call technically nt happen render means might react bug", "d": "8/2018"}, {"body": "never mind wrong missed promise constructor callback fires synchronously case behavior makes sense indeed render nt encouraged example hacky", "d": "8/2018"}, {"body": "bit perplexed symbol case maybe could call instead least might get rid concern stringifying symbols case think avoiding need ensure consistency would let us drop calls gettostringvalue would nice win", "d": "8/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources probably bug react hard say provide runnable snippet code instead get help reports like best thing reduce example smallest possible code still reproduces issue post site run eg jsfiddle codesandbox closing attempt treat bug", "d": "8/2018"}, {"body": "den ons aug skrev dan abramov notifications githubcom closed receiving subscribed thread reply email directly view github mute thread", "d": "8/2018"}, {"body": "lifecycle used absolutely need copy use case need react prop changes move code method component", "d": "8/2018"}, {"body": "lifecycle getderivedstatefromprops used absolutely need copy props state nt agree mean name derived state props ie want derive state props need react prop changes move code render method component need react change prop render differently based props let give simplified example use case jsx class tripmap extends reactcomponent state followregion true render return focus region need way setting back true region passed props changes indicates new dataset achieved causes unnecessary rerender triggers eslint rule exact reason afforementioned believe totally valid attempted usecase", "d": "8/2018"}, {"body": "thanks providing example ensures conversation nt going circles need way setting followregion back true region passed props changes indicates new dataset written blog post preferred alternative reset state key nt id property increment integer every time change something like mechanism suggesting automatically reset changes discouraged notion change often nt really make sense example might want update unrelated reason later without triggering state reset nt option components assume every object identity change reset nt want use recommended solution sure need keep better state nt contradict article solution explicitly mentioned less recommended plausible verbose usually unnecessary like hope helps", "d": "8/2018"}, {"body": "ca nt go cause full rerender expensive map component load async displays loader go storing state thanks beers", "d": "8/2018"}, {"body": "may also worth mentioning causing eslint complain unused state field referenced via param passed rather via ergo eslint ca nt tell referencing state field", "d": "8/2018"}, {"body": "although eslint issue already reported", "d": "8/2018"}, {"body": "sounds like something fixed eslint rule", "d": "8/2018"}, {"body": "guess using version change try later", "d": "8/2018"}, {"body": "confirmed", "d": "8/2018"}, {"body": "seems like browser painting issue react one try recreate demo without using react see unrelated", "d": "8/2018"}, {"body": "right unrelated react", "d": "8/2018"}, {"body": "sure please use links discussion thanks", "d": "8/2018"}, {"body": "browser behavior cause also validfloatingpointnumber set react throw warning give empty input", "d": "8/2018"}, {"body": "could experiment codesandbox still called empty value type e additionally type anything e send value properly believe happening string ending e valid number eg string e followed integer eg remember valid number pointed notice called empty value nonnumber string eg looks quite consistent", "d": "8/2018"}, {"body": "yurickh spot thanks type characters see three change events valid number believe everything behaving intended however please let know case missed also super confusing part inputs happy continue conversation anything else needs clarification missed something", "d": "8/2018"}, {"body": "thanks guys look getting never gets called input becomes uncontrolled believe bug native event gets called correctly", "d": "8/2018"}, {"body": "get called see console log input get empty string setstate react see diff input change", "d": "8/2018"}, {"body": "correct numbers start invalid chrome reports empty string numbers added value reports empty string change occurs", "d": "8/2018"}, {"body": "sorry clear asking think bug react please provide complete reproducing example snippet need help find cheers", "d": "8/2018"}, {"body": "run", "d": "8/2018"}, {"body": "escaping attributes important security perspective could solve issue using different placeholder eg running string replacement output note would safe output nt include usercreated content otherwise risk security issue", "d": "8/2018"}, {"body": "could solve issue using different placeholder nt control party library placeholders would safe output nt include usercreated content user created content", "d": "8/2018"}, {"body": "hello let try clarify gaeron suggested approach output simple string feed sendgrid templating engine order replace tags variables want problem hand need tag inside react encodes workaround issue use different tag like react code running replace feeding sendgrid receives tags expected make clear use react code get string replace instances string feed resulting string sendgrid way need change party library placeholder feel free correct misunderstood suggestion well gaearon", "d": "8/2018"}, {"body": "yep suggested totally able", "d": "8/2018"}, {"body": "thanks guys makes sense", "d": "8/2018"}, {"body": "performance problems careful make sure html string coming trusted source since otherwise create security issue", "d": "8/2018"}, {"body": "also use html parser avoid using", "d": "8/2018"}, {"body": "shipping html parser client parse pregenerated svg seems excessive would create performance issue unless compile time", "d": "8/2018"}, {"body": "gaearon yep valid point", "d": "8/2018"}, {"body": "intentional people write expect fire regardless whether apple engineers agree react normalizes behavior", "d": "8/2018"}, {"body": "hmm never mind misread post", "d": "8/2018"}, {"body": "component ca nt reusable different contexts unless making prop version component wrapping another one uses context directly exactly would suggest bold part nt see anything wrong fact means component ca nt contextual reusable different contexts time nt see disadvantage reusable different contexts valuable", "d": "8/2018"}, {"body": "maybe could provide information used old approach practice significantly convenient would need show code usage site well compare", "d": "8/2018"}, {"body": "elaborating want add one note understating one main problems new context api solves rerender problem legacy api problem irrelevant nonstate context callback functions actions exactly would suggest bold part nt see anything wrong wrong less flexible imo elaborating nt see disadvantage reusable different contexts valuable component would use contextual component practically becomes nonreusable different contexts javascript export class contextuallink extends reactpurecomponent render return navto gt export class loginform extends reactpurecomponent render return sign export class signup extends reactpurecomponent render return login loginbox signup reusable use contextual component would make configurable maybe passing link component prop version would feel like passing props levels legacy context api components reusable javascript export class link extends reactpurecomponent static contexttypes navto propstypesany handleclick e gt epreventdefault const path thisprops thiscontextnavto path render const path props thisprops return export class loginform extends reactpurecomponent render return sign export class signup extends reactpurecomponent render return login", "d": "8/2018"}, {"body": "give complete example reusing different context helpful", "d": "8/2018"}, {"body": "reusing within different apps mock app testing utilizing different routing implementations javascript export class extends reactpurecomponent navto path gt thissetstate path gt historypush path getchildcontext return navto thisnavto render const path thisstate return path login amp amp path signup amp amp export class extends reactpurecomponent navto path gt thissetstate path gt windowlocationhash path getchildcontext return navto thisnavto render const path thisstate return path login amp amp path signup amp amp test app window browser export class testapp extends reactpurecomponent navto path gt thissetstate path gt consolelog path changed getchildcontext return navto thisnavto render return", "d": "8/2018"}, {"body": "rendering different values undesirable", "d": "8/2018"}, {"body": "knew missing something see done wrong kept using reactcreatecontext high level modules instead low level modules thank", "d": "8/2018"}, {"body": "problem", "d": "8/2018"}, {"body": "kobiburnley could please elaborate understanding found thoughts pretty interesting thread sure follow last comment solve problem reusability previously describing thank", "d": "8/2018"}, {"body": "gbarthos sure start mentioning still find implicitly legacy api bit elegant crucial understanding wrong new api realized get result wrong conception use reactcreatecontext short always used nearby providers actual context data existed instead nearby consumers example consumer component link provider component app let say link separated module dependencies app top level module depends link module first done app module javascript import react react import link link export const consumer provider reactcreatecontext navto gt export class app extends reactpurecomponent service navto path gt thissetstate path gt windowlocationhash path render return link module javascript import consumer app export class linkio handleclick e gt epreventdefault const path navto thisprops navto path render const path navto props thisprops return export class link extends reactpurecomponent render const path props thisprops return navto gt clear break modularity app depends link link depends app think confused name createcontext tricked always put actual instance context actually create context name implies utility components provide consume contexts opposite link nt depends app javascript import react react export const consumer provider reactcreatecontext navto gt export class linkio handleclick e gt epreventdefault const path navto thisprops navto path render const path navto props thisprops return export class link extends reactpurecomponent render const path props thisprops return navto gt javascript import react react import link provider link export class app extends reactpurecomponent service navto path gt thissetstate path gt windowlocationhash path render return", "d": "8/2018"}, {"body": "complement explicit nature intentional problem implicitness old api start running name clashes different libraries different parts large app share namespace kind like global variables", "d": "8/2018"}, {"body": "ok clearer thank", "d": "8/2018"}, {"body": "react wo nt ignore node keys type react treat update resulting dom operations example would change text content li key change text content li key add list item key content specified keys stable nt would prepend first item without updating two specifying keys important", "d": "8/2018"}, {"body": "gaearon thanks maybe could explicitly stated relevant section docs also think author exactly correct suggesting react would also compare child node hence redraw thanks good luck ps ah basically docs comparing two react dom elements type react looks attributes keeps underlying dom node updates changed attributes changes attributes case happen children", "d": "8/2018"}, {"body": "maybe could explicitly stated relevant section docs open source prs welcome", "d": "8/2018"}, {"body": "gaearon ok thanks said previous comment docs state react update changed attributes case changed attributes happen child nodes right", "d": "8/2018"}, {"body": "recurse children section looking children case text nodes updated", "d": "8/2018"}, {"body": "nt need fire lifecycle hooks manually share example please", "d": "8/2018"}, {"body": "expecting reacttestrenderer would support testing component reaction different lifecycles capable use shallow rendering nt understand means test renderer shallow renderer two different renderers mean test renderer support shallow rendering complete example would help clear asking", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "gaearon example second test fails nt know get component updated state rerender possible get rerender state", "d": "8/2018"}, {"body": "think might misunderstanding test fails nt need call react already however inside test wo nt wait tests synchronous default asserting callback fired normally depending actually want test could mock mock data fetching layer something else", "d": "8/2018"}, {"body": "gaearon thanks understood exemplify real scenario call asynchronous function test succeeded need wait asynchronous execution sure mock could solves problem googling found examples using mocks want know way asynchronous test", "d": "8/2018"}, {"body": "fabricioffc handling asynchronous code tests responsibility test runner using eg jest mocha jasmine etc using jest check testing asynchronous code docs page", "d": "8/2018"}, {"body": "aweary must confusing something using function need get rerender version component think possible seems intended synchronous testing need test async function need mock turn synchronous sorry missing something know mocking solve problem want know alternative make integration test component data fetch layer", "d": "8/2018"}, {"body": "test renderer opinions whether code synchronous asynchronous like reactdom nt care using create function reacttestrenderer need get rerender version component think possible call component rerender reactdom test renderer", "d": "8/2018"}, {"body": "sorry nt seem related react use issue tracker bugs react welcome consult support resources", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "gaearon ok seems like works designed please rename misleading method name getderivedstatefromprops implies need derive state props", "d": "8/2018"}, {"body": "want write", "d": "8/2018"}, {"body": "derivestate", "d": "8/2018"}, {"body": "purpose method still derive state props call often prevent common bugs mean purpose method changed case likely using method without good reason please see blog post describe simpler alternatives", "d": "8/2018"}, {"body": "yeah kind need component remains screen new instance created props cause renders new object way getting props preprocessing props think issue fact order use method correctly forceassume developer would id able understand change need preserve prop state order know got new props let ask point making method static actually stateful pass prevstate method static manage component classes hierarchy implement method nt get yet see coming", "d": "8/2018"}, {"body": "please read existing conversation around method including blog post linked asking folks resay everything said already thanks", "d": "8/2018"}, {"body": "really appreciate guys responsiveness still disagree", "d": "8/2018"}, {"body": "component remains screen new instance created props cause renders new object way getting props preprocessing props way also force recreated providing key changes need reset state described preprocessing props also vague want calculate data based props nt need state instead calculate right use eg render method memoize necessary described point making method static actually stateful pass prevstate discourage people putting side effects mutating instance fields would defeat purpose introducing new method manage component classes hierarchy implement method nt use inheritance hierarchies react insist course figure manage", "d": "8/2018"}, {"body": "gaearon dude extremely patient appreciate posts detailed replies read lot also force recreated providing key changes need reset state described understand components controlled uncontrolled types everything custom checkbox object properties editor object type complex object tens fields also subeditors preprocessing props also vague get object editor might missing properties old version bug preprocessing initialize objects arrays editable properties assign default values purpose editor edit create object type discourage people putting side effects mutating instance fields would defeat purpose introducing new method thought nt use inheritance hierarchies react insist course figure manage luckily fair share hierarchy vs composition java developer years yes places need abstraction force commonality inheriting objects editors example another post problem parents rerender getderivedstatefromprops would also get called component example even react parent rerender would reset selection values though document id changed analytics call would also fire twice choice pass prop would act unique id case controlled component distinct new object render thanks", "d": "8/2018"}, {"body": "dude extremely patient appreciate posts detailed replies read lot haha thanks glad help get object editor might missing properties old version bug preprocessing initialize objects arrays editable properties assign default values purpose editor edit create object type might want check sounds relevant particular solve applying default values point need instead trying propagate upwards", "d": "8/2018"}, {"body": "maybe provide reduced runnable example trying accomplish could look refactoring", "d": "8/2018"}, {"body": "haha thanks glad help might want check sounds relevant comment particular solve applying default values point need instead trying propagate upwards point could definitely even move rendering method create one instance future use instance properties used children editor must managed parent thanks ton", "d": "8/2018"}, {"body": "maybe provide reduced runnable example trying accomplish could look refactoring nt understand difficult accept concept breaks barrier new props new state know mean", "d": "8/2018"}, {"body": "provide example still try look", "d": "8/2018"}, {"body": "help", "d": "8/2018"}, {"body": "try", "d": "8/2018"}, {"body": "think confused props state works want controlled parent remove local state try sync props state instead let component accept props parent owns state pass please read documentation lifting state similarly despite suggestion thread want use please read blog post hope helps", "d": "8/2018"}, {"body": "saying state change intended checkbox stays unchecked even value true proven console log state returns true checkbox unchecked checking checkbox state changes false checkbox state true parent pass every props every etc input props controlled parent capture changes inputs form component think form user create new edit edit populate form values passed parent set values form props else value never change user tries edit example state may updated value input always remain form mounted edit blank form default value needed props passed parent local state needed thisstate name age male false female false componentdidmount thispropsforms thissetstate thispropsforms thispropsforms name john age male true female false hope makes sense use workaround", "d": "8/2018"}, {"body": "state may updated value input always remain thispropsvalue normally parent would nt pass prop becoming hard discuss without runnable example create something codesandbox similar help otherwise afraid going keep talking past one another", "d": "8/2018"}, {"body": "sum components react either fully uncontrolled case custom would take prop pass dom state would inside component prop value would ever used component first rendered ignored parent would way force state become something else ever need reset input mount different key fully controlled case custom would receive props pass dom scenario would nt state instead would need manage state many inputs writing separate handler annoying use handler nt try mix controlled uncontrolled paradigms one component makes confused receive something prop nt try put state sync instead either keep fully uncontrolled lift shared state remove child hope helps", "d": "8/2018"}, {"body": "ca nt reproduce error codepen error went away try replicate yesterday love programming thanks great learning experience", "d": "8/2018"}, {"body": "describe plan use detail pseudocode examples would help", "d": "8/2018"}, {"body": "ca nt get keys react elements could make keys call something else pass props", "d": "8/2018"}, {"body": "async views react native application looks like normal one put list mobile app one nice features mobile views reused reason need ability match views different rows update carefully make work need keys specified source layout generation keys reconciler function nt help since need stable way generate thanks", "d": "8/2018"}, {"body": "purecomponent shallow equal related props state rerender props passed component shallowly equal previous ones nt check state values equal compare state however example would still nto work shallowly equal value new object every set", "d": "8/2018"}, {"body": "purecomponent shallow equal related props state correct doc says shallow prop state comparison src code", "d": "8/2018"}, {"body": "oops yes right p thinking clearly second point still holds shallow ly equal example", "d": "8/2018"}, {"body": "performs equality iterating keys object returning false key values strictly equal arguments returns true values keys strictly equal function shallowequal obja mixed objb mixed boolean obja objb return true typeof obja object obja null typeof objb object objb null return false const keysa objectkeys obja const keysb objectkeys objb keysalength keysblength return false test keys different b let lt keysalength hasownpropertycall objb keysa obja keysa objb keysa return false return true purecomponent shallow equal related state wrote demo prove also shallowequal like see source code", "d": "8/2018"}, {"body": "shallowly equal two different objects therefore shallow equality check fails", "d": "8/2018"}, {"body": "gaearon actually want know difference purecomponent shallowequal according src code", "d": "8/2018"}, {"body": "mean individual properties afaik compared using algorithm slightly different also handles nan", "d": "8/2018"}, {"body": "set documentlevel capture listener nt seem like needs done react also override element prototype", "d": "8/2018"}, {"body": "exactly web browsers running tvs react supports later equivalent may require polyfills depending environment", "d": "8/2018"}, {"body": "events fired order although recommendation click event fired change event try remove dom element click action place dom change event ignored moment event firing element part document dom wrote sample vanilla try safari chrome firefox current browser safari mac fires change click chrome fires click dynamically generated checkboxes chromes behavior actually expected behavior change event occur result click event fired afterwards", "d": "8/2018"}, {"body": "think unexpected behavior difference native elements caused fact react listens events trigger synthetic events better crossbrowser support behavior subject change one thing try work around attaching native event listeners event trigger dom update inside listener", "d": "8/2018"}, {"body": "thanks feedback sounds like best bet moment await outcome remove prop element try use native listeners instead element would longer controlled input would also problematic workaround moment trigger listen events instead cases would bubble happens external script outside react exists sigh tracking purposes", "d": "8/2018"}, {"body": "supported contribute react npm need use yarn", "d": "8/2018"}, {"body": "thanks run yarn build fails find module react", "d": "8/2018"}, {"body": "need run yarn first needs least yarn running yarn old", "d": "8/2018"}, {"body": "thanks much upgrade yarn build", "d": "8/2018"}, {"body": "paste comments cellog discord noticed behavior saturday pasting comments greg discord pm acemarke oh wow pm acemarke commits pushed way slower prior version pm acemarke think lot forwardref stuff pm acemarke dropped pm acemarke components pm acemarke could also implementation nt good pm cellog dammit pm cellog try removing forwardref see happens pm cellog speeds need add back withref pm cellog right pm cellog probably tell react team pm cellog huge issue performanceagnostic nt passing actual ref pm cellog ok running latest version uses forwardref withref set text forwardref catch folks using withref set true warn rely getwrappedinstance since nt exist pm cellog implementation better let see matches pm acemarke yeah thinking introduce new forwardref option something pm cellog ok pushed commit pm cellog version get slightly faster old one still fps slower pm cellog ballpark going rerun see change pm cellog disabling forwardref mine faster pm cellog fps pm cellog", "d": "8/2018"}, {"body": "clarify disabling forwardref unless explicitly asked fps doubled significant performance increase happened running large numbers stocks stocks performance patches fps performance hits occurred stocks also note showed fps measure chrome traces also generated benchmark app separate run turnaround time processing state updates double length milliseconds passed forwardref clarity important note refs actually passed benchmark app nt specific ref handling forwardref refs passed", "d": "8/2018"}, {"body": "benchmark use reproduces problem react react redux", "d": "8/2018"}, {"body": "sure redux part benchmark minimal needs stripped need post ready", "d": "8/2018"}, {"body": "good go run env variable forward set enable forwardref leave disable nt figured modify benchmark pass env variables perhaps nt needed since trace manually chrome version basically redux quite slow changed number components adjust make smaller", "d": "8/2018"}, {"body": "measuring record traces production build see versus kind difference referring", "d": "8/2018"}, {"body": "case measuring overall fps app running script print recorded fps puppeteer running benchmark well recorded chrome perf stats second run tracing enabled example kinds numbers seeing recently copied pasted issue ran another perf benchmark set connected components fps avg minmax chrome trace time split results one test runs fps scripting painting rendering general seeing wrapping components drops overall app fps several digits matter internal implementation using know best possible benchmark managed put together far", "d": "8/2018"}, {"body": "compare wrapping functional component instead forwardref", "d": "8/2018"}, {"body": "okay got benchmark numbers add builds order current build branch stuff added branch related changes previous using functional component instead previous wrapping exporting branch always using branch made optin build avg fps scripting rendering painting attaching zip file captured chrome perf traces reference note per benchmark repo avg fps chrome trace captured separate runs build trace capture nt slow fps react issue reactredux perf benchmark traceszip per branch results looks like using using functional component around rest slow things noticeably compared extra component wrapper bit slower functional component", "d": "8/2018"}, {"body": "think worth looking worse results add component layers eg wrap extra n extra n passthrough functional components show similar slowdown means application code thin even extra reconciliation layer starts matter case problem per se even optimize milliseconds still increase number rows find next spot adding reconciliation layer prohibitively high words arguing adding expensive enough shows bench might adding layer expensive point might well reconsider using react altogether part app consider using virtualization point ca nt add one component tree without going budget", "d": "8/2018"}, {"body": "yep weakness one benchmark app far measures one primary metric like get us set several benchmark apps well would run scenarios", "d": "8/2018"}, {"body": "yes part trying measure heavy reactredux stressful environment like stock ticker app little things naturally amplified benchmark helpful finding several unnecessary slowdowns also proved decisively using dramatic positive effect blowing performance water however highlight forwardref expensive situation think useful react perspective fact forwardref also expensive benchmark even refs present presents opportunity look whether necessary expense concluded better avoid forwardref unless user explicitly asks similar reactredux works anyways based learned conclude yes risk expense worth issue closed perhaps mark documentation issue want note library authors forwardref expense certain environments lots components updating rapidly", "d": "8/2018"}, {"body": "however highlight forwardref expensive situation think dan trying tease tho whether forwardref expensive thing slow result components forwardref fault may something optimize latter tho question may app complex enough approximate complex react app eg replaced every forwardref extra hoc would slow comparable", "d": "8/2018"}, {"body": "per benchmarks pasted bit earlier looks like bit expensive trivial functional component fps vs fps run vs fps neither", "d": "8/2018"}, {"body": "right assume forwardref expensive component life cycle weight yes", "d": "8/2018"}, {"body": "lifecycle weight expect roughly equivalent functional component way one get render function also means nt use lifecycles move rendering logic forwardref callback thus removing layer inside go back one layer", "d": "8/2018"}, {"body": "equivalent functional component would interesting profile makes different obvious", "d": "8/2018"}, {"body": "yeah problem class component absolutely needs lifecycle stuff try rerunning benchmark couple times obviously lot difference wrapping wrapping functional component implementationwise enough difference seems like actually something different", "d": "8/2018"}, {"body": "currently use lifecycle", "d": "8/2018"}, {"body": "hmm pr using outerinner component approach bulk work inner component outer component binding couple methods constructor pr connectadvanced greg pr huh okay also binding couple methods constructor pr connectadvanced cases class method given render prop context consumer bound safely access also memoized selector function created percomponentinstance selector reference saved instance field component actually lot nt immediately see way functional component", "d": "8/2018"}, {"body": "see suggesting way create perinstance cache functional component would happily convert toplevel component one use forwardref benchmark", "d": "8/2018"}, {"body": "ok tried way create perinstance cache outside class component figure wo nt work basically order prevent unnecessary rerender unimportant part state updating use something save state functional component ca nt ways solve api change future focusing getting something legacy apps use path migrate new api without complete rewrite", "d": "8/2018"}, {"body": "want release something works might help cases take months get", "d": "8/2018"}, {"body": "depends get comprehensive benchmark suite running pr follow still internal maybewillhappen", "d": "8/2018"}, {"body": "definitely happen nt expect definitely see pr end october", "d": "8/2018"}, {"body": "ok probably best pretend nt exist unless allowed give hint prepare code ready mysterious exciting releasing new iphone", "d": "8/2018"}, {"body": "think works expected component instance merely passes ref receives second argument nt know going happen ref example attached later gets attached way know could passed completely different child since component nt instance nt return anything understand annoying truth traversal utilities nt great general better traversal api test renderer react dom nt expose might want revisit part later", "d": "8/2018"}, {"body": "thanks gaearon afraid honest find utilities useful simply finding instance component asserting props passed finding difficult think may bypass using altogether recommended approach use mix enzyme shallow rendering raw thank", "d": "8/2018"}, {"body": "considered keeping original type attached property wrapped one search tests see difficulty", "d": "8/2018"}, {"body": "nt think might work sure completely understand mean try dive react internals application code suggesting something like attaching property object returned tree traversal methods use pick sorry already see referring", "d": "8/2018"}, {"body": "thinking something like jsx const withmycontext component gt class mycontextconsumer extends reactcomponent render return reactforwardref props ref gt type component call things like referring thanks time", "d": "8/2018"}, {"body": "sure spreading function like would work mean yes search type", "d": "8/2018"}, {"body": "gotcha spread function return object seems work fine thanks tip", "d": "8/2018"}, {"body": "ahh right object yeah", "d": "8/2018"}, {"body": "gaearon solution worked beautifully development oddly deployed production production build caused time worked instances component reliably time cases noticed called infinite loop debugging bit nt come anything concrete try put together fiddle next couple days really concerning worked well dev prod ran issues heard anything like one last piece info kept backup branch using react context mentioned earlier conversation used worked perfectly dev prod think related", "d": "8/2018"}, {"body": "mean used testutils production need reproducing case something work", "d": "8/2018"}, {"body": "sorry nothing testutils reactcontext hoc returns forwardref written first comment try repro worried difficult instances app nt work one nt work different need spend time figure replicate wanted raise case seenheard anything insight happens production build", "d": "8/2018"}, {"body": "aware issues latest version", "d": "8/2018"}, {"body": "digging little believe issue uglify maybe compression step use webpack setup prod build operates correctly run issues pinpoint exactly make one comment reference file", "d": "8/2018"}, {"body": "unfortunately uglify notably buggy input suggest always transpiling uglifying", "d": "8/2018"}, {"body": "branch longer maintained either switch terser fork branch uglify always use uglify mode", "d": "8/2018"}, {"body": "longer maintained webpack still using", "d": "8/2018"}, {"body": "branch uglify still maintained webpack still uses default semver concerns webpack change minifier used default nt know terser used least decouple uglifyjswebpackplugin direct dependency webpack core also", "d": "8/2018"}, {"body": "nt actually think true know experience shipping minified code nt changed default minifier imagine using branch minify code would nt work", "d": "8/2018"}, {"body": "yes still work happen hitting bugs uglify branch", "d": "8/2018"}, {"body": "comment likely outdated idea supposed provided", "d": "8/2018"}, {"body": "setstate calling updater callback among arguments parameter never gets passed point", "d": "8/2018"}, {"body": "record would like get new state parameter callback recompose library allow us access inside callback", "d": "8/2018"}, {"body": "looking right implementation shim right one like propose change react api include please feel free send pr removes comment comment seems wrong", "d": "8/2018"}, {"body": "thanks information", "d": "8/2018"}, {"body": "react binds events document level experiencing selects specifically react actually uses browser event selects inputs textarea currently uses event see exact issue inputs block event think close duplicate would solve", "d": "8/2018"}, {"body": "please see discussion intentional", "d": "8/2018"}, {"body": "antibeginner opinion standard unpkg urls point development builds breaking user expectations much worse default url literally error browsers support common js serve development build displayed react devtools extension anyway", "d": "8/2018"}, {"body": "way concern user knowing development build provided default would probably already know using unpkg packages unpkg redirects user full umd file path making path used default clear example redirects clearly unminified build development", "d": "8/2018"}, {"body": "antibeginner opinion react nt make choice antibeginner react antiperformance either way somebody unhappy see discussion educate developers differences builds way force choose one think drop script tag page without thinking whether dev prod build going keep seeing sites ship development versions production hurting user experience unpkg redirects user full umd file path making path used default clear read redirect result url standard unpkg urls point development builds breaking user expectations mean standard libraries libraries dev builds several times larger smaller like react dev build much worse default url literally error browsers support common js serve development build agree nt know attempts serve commonjs entry point stands instead would great served page suggested find proper umd build inside", "d": "8/2018"}, {"body": "unpkg could provide firstclass support multiple explicitly chosen umd versions example works versions since reserved wo nt cause clashes could work special fields eg packages opted unpkg could display better error page attempt load directly show disambiguating links right seems like best worlds", "d": "8/2018"}, {"body": "unpkg interested implementing could", "d": "8/2018"}, {"body": "still disagree using stopgap solution like suggestion unpkg way choose alternative entry points without knowing full file path maybe could even make obvious package nt default entry point development production crosspost issue", "d": "8/2018"}, {"body": "provide complete example please example codepen codesandbox", "d": "8/2018"}, {"body": "sorry familiar codepen view render really really sorry code find filteritem rendered filters component well position wrapped component example wrapped layout component like row col expected filters component fault good codepen sorry bother gaearon", "d": "8/2018"}, {"body": "ca nt access component renders using utilities might support something like future different api possible today", "d": "8/2018"}, {"body": "really appreciate taking time question thanks lot gaearon like", "d": "8/2018"}, {"body": "gaearon currently thought share us iirc write recursive walk tree util gist call get component renders thought problems new api similar", "d": "8/2018"}, {"body": "component wants receive element argument", "d": "8/2018"}, {"body": "however problem react synchronously perform operations read dom use various methods schedule work done asynchronously later time provide example far know current versions react perform work synchronously", "d": "8/2018"}, {"body": "sorry probably way familiar react mostly worked attended talks works internally however impression react use things like order schedule work actually goes modify real dom quick search shows methods used source code tests exist assert used though apologize take time see exactly used case actually modify real dom synchronously stateprop change", "d": "8/2018"}, {"body": "react currently use practice plans use optin", "d": "8/2018"}, {"body": "catdad tried using wait utility async operations may want wait specific changes making assertions using timeouts may still make tests flaky quick example using protractor api top selenium webdriver promise manager disabled javascript example let assume need get list names rendered link button clicked async function openuserlist let trigger await element somebutton return triggerclick async function getusernamelist ensure necessary root element available subsequent element queries await browserwait gt isuserlistpresent optional timeout continue necessary queries transforms let useritems await elementall userlist listitem let usernames await promiseall useritemsmap item gt itemgettext return usernames async function isuserlistpresent let userlist await element userlist return userlistispresent show user list async gt await openuserlist let usernames await getusernamelist expect usernames toequal liza ann", "d": "8/2018"}, {"body": "exporting react element component change js import react react const companyiconinheader export default companyiconinheader js import react react function companyiconinheader return export default companyiconinheader alternatively call site change words something like nt work", "d": "8/2018"}, {"body": "write deal nt think good way", "d": "8/2018"}, {"body": "hi use issue tracker bug reports feature requests react looks like question either react router dom apis question please check community support resources", "d": "8/2018"}, {"body": "muyunyun use copy values target object object anymore js const state objectassign thisstate thisstate state true safe use operator object since object anymore means mutating directly also would nt use use case since nt need copy values operation would", "d": "8/2018"}, {"body": "recommended way", "d": "8/2018"}, {"body": "yordis thanks reply much maybe want know little js const count const count true true known effect objectassign create another obj ok value count equal think value like value count problem operation", "d": "8/2018"}, {"body": "muyunyun already change state new version", "d": "8/2018"}, {"body": "aliast surprised understand thanks writen post issue chinese", "d": "8/2018"}, {"body": "hi sophie would nt mind picking issue thats alright local debugging seems like condition checking changed true scrolling top page instead checking either showdetail changed currentid changed", "d": "8/2018"}, {"body": "sure send pr guess current id change showdetail already true would want scroll top guess possible current ui though", "d": "8/2018"}, {"body": "seems like issue closed right", "d": "8/2018"}, {"body": "hi use issue tracker bug reports feature requests react react nt anything routing definitely unrelated react question react library please check community support resources", "d": "8/2018"}, {"body": "nt think output html safe minify plan later hydrate client example comment nodes text like important react hydrate correctly", "d": "8/2018"}, {"body": "gaearon hydrate used client check match checksum minify said unsafe including comment node learned lot thank much", "d": "8/2018"}, {"body": "react nt checksum comparisons since react emitted comments server expects find client", "d": "8/2018"}, {"body": "gaearon yeah comment earlier thank politely", "d": "8/2018"}, {"body": "sure", "d": "8/2018"}, {"body": "gaearon would love take one whats difficulty level", "d": "8/2018"}, {"body": "sure since always broken guess easiest one even sure solved nicely", "d": "8/2018"}, {"body": "gaearon solved passing input value moment along running setstate", "d": "8/2018"}, {"body": "maybe nt dived deep send pr", "d": "8/2018"}, {"body": "wat one else trying track", "d": "8/2018"}, {"body": "sorry ca nt figure another way add another snapshot argument ugly let", "d": "8/2018"}, {"body": "yarn version", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "close due resolved seems run rather", "d": "8/2018"}, {"body": "nothing nt think expect reason need reference call used line", "d": "8/2018"}, {"body": "sorry noise", "d": "8/2018"}, {"body": "problem appreciate filing issue", "d": "8/2018"}, {"body": "take recommendations grain salt single wrapping div wo nt make meaningful difference case rendering directly body fragile thirdparty scripts like google web fonts many browser extensions put stuff app break cases warning good reason absolutely must follow recommendation make html like render react app element", "d": "8/2018"}, {"body": "thanks also would like render better put inside", "d": "8/2018"}, {"body": "make root component render get appended nt show dom", "d": "8/2018"}, {"body": "possible load loaded one thinks symbol supported one thinks symbol nt supported would get sync lead confusing behavior see similar problem search checks bundles put logs verify agree whether exists", "d": "8/2018"}, {"body": "thanks reply getting somewhere deconstructing app bitbybit surprising cause appears google maps loading google maps javascript api script tag loading bundled app another script tab reverse works looks like google maps api includes symbol polyfill somehow confusing things still none wiser though looking lines code suggested even confused three instances see react libraries react reactdom reactis checking three say exist appear point function far tell corejs implementation google maps irrespective whether google maps loaded first last bundled application react libraries appear use corejs polyfill symbol issue mystery loading google maps first influence also since mentioned case google maps thing red herring pretty sure loading babelpolyfill everything else following webpack config far aware load polyfill anything else thanks", "d": "8/2018"}, {"body": "reduce reproducible example know something google maps take look", "d": "8/2018"}, {"body": "thanks think got bare bones able run look dom internet explorer see weird tag click update button component rerenders tag goes away reverse script tags indexhtml google maps loaded last weird tag never appears first place", "d": "8/2018"}, {"body": "thanks wo nt time dig close future leave somebody motivated", "d": "8/2018"}, {"body": "dealt issue instantsearchjs using preact fix", "d": "8/2018"}, {"body": "check though", "d": "8/2018"}, {"body": "problem corejs polyfill uses global symbol nt get polyfilled already defined gmaps however maps implementation symbol returns string correct implementations return actual symbol object possible check symbol returns value valid type quite hacky though sure whether check implemented corejs react", "d": "8/2018"}, {"body": "sanniassin pointed google maps polyfill causing return strings various places react code check typeof element often checking string types checking symbol eg", "d": "8/2018"}, {"body": "google maps polyfill causing symbol return strings jeez okay report", "d": "8/2018"}, {"body": "issue solved fixing version google maps tried example working fine", "d": "8/2018"}, {"body": "mean newer version fixes older one", "d": "8/2018"}, {"body": "unfortunately older one", "d": "8/2018"}, {"body": "seems issue symbol polyfill implementation closure compiler see sam saccone tweet", "d": "8/2018"}, {"body": "filed nt think adding bad symbol polyfill checks imo something gcc fix", "d": "8/2018"}, {"body": "according one workaround would ensure code run via executes earlier google maps bundle guess could load google maps api asynchronously assume loaded yet app code creating dynamic script tag hooking event", "d": "8/2018"}, {"body": "thanks ended bundled app first script run corejs gets install polyfill first adding google maps library also done loadgooglemapsapi library ensure done within polyfilled app parts app use works well thanks help", "d": "8/2018"}, {"body": "gaearon given documentation suggests works seems like bug feature request", "d": "8/2018"}, {"body": "craigkovatch see coming given pressure reduce react bundle size bar polyfilling something especially ie really high technically missing functionality tagged feature request fix small get complicated likely amend docs needs investigation fix", "d": "8/2018"}, {"body": "gaearon gotcha clear though ie also edge safari lt think significant surface area although sure browser support policy nonie", "d": "8/2018"}, {"body": "need look normalization would involve lot code think", "d": "8/2018"}, {"body": "nominating raunofreiberg nt want create work", "d": "8/2018"}, {"body": "want say artifact older defaultvalue handling selects", "d": "8/2018"}, {"body": "removing completely appears effect test suite", "d": "8/2018"}, {"body": "nhunzaker take one first time contributing react purely reading code seems like assessment initialvalue used seems correct happy investigate", "d": "8/2018"}, {"body": "go", "d": "8/2018"}, {"body": "hey nhunzaker raised pr change", "d": "8/2018"}, {"body": "fixed thanks kartiklad", "d": "8/2018"}, {"body": "createsubscription calls getvalue constructor save result state componentdidmount called changes ignored right however checks value changed case handled remount component wrapped createsubscription component something componentwillmount modify source value get wrong value componentdidmount new component provide live example demonstrating nt think fully understand clear example provided corresponds example actually uses would helpful", "d": "8/2018"}, {"body": "js const source new behaviorsubject status initial loading error aborted complete const controller load gt abort gt const subscription createsubscription class content extends reactcomponent componentdidmount initial aborted includes thispropsstatus controllerload componentwillunmount controllerabort render class container extends reactcomponent render return remount loading", "d": "8/2018"}, {"body": "rx could provide example could easily run eg codesandbox sorry extra work takes lot time look issues preparing runnable example greatly increases chances looking depth", "d": "8/2018"}, {"body": "gaearon tried make runnable example yesterday found umd version createsubscription npm gave joy take look codesandbox try make online example later", "d": "8/2018"}, {"body": "gaearon click remount button loading status hardcoded time see happened expected behavior componentdidmount get status aborted try reload current behavior componentdidmount get status loading incorrect", "d": "8/2018"}, {"body": "nt look like bug eventually gets right value guaranteed uptodate value inside happens child runs first time nt know outdated yet parent runs know value changed parent schedules state update however time child already run late hope props reflect update seems logic checks insufficient add similar check possibly also checking nt status avoid extra work every update sufficient", "d": "8/2018"}, {"body": "gaearon could aborted user eg clicking button labelled abort case nt try reload anymore remount component try reload even aborted user checking status enough detect whether aborted user", "d": "8/2018"}, {"body": "add another status may resolve problem makes code complex check check confusing", "d": "8/2018"}, {"body": "opinion main problem use createsubscription get value case check value something lifecycle render", "d": "8/2018"}, {"body": "mental model guarantees rendered value screen recent one subscription cleaned unmount think pull interface underlying value fact even sure guarantee called every intermediate value eventually latest one view nt great place async control flow mechanics trying implement think like final consumer async value want control already use rx sounds like moving outside component sort observables subscriptions combinators would make sense lets pull display latest values thispropsstatus stategetvalue status componentdidmount props latest pulled copy pull screen gets updated guarantee particular lifecycle reading recent value props rather guarantee end screen reflects latest value case value changes initial render mount second pull happen parent wrapper mounts cause child update", "d": "8/2018"}, {"body": "want control already use rx sounds like moving outside component sort observables subscriptions combinators would make sense difference two things imho ways rely lifecycle mount unmount check status something load abort difference get status createsubscription subject directly", "d": "8/2018"}, {"body": "anyway thanks detailed explanation", "d": "8/2018"}, {"body": "difference like eventually consistent pull mechanism unlike rx combinators guaranteed execute every value change happens", "d": "8/2018"}, {"body": "props latest pulled copy yes right problem createsubscription stand clear thanks", "d": "8/2018"}, {"body": "thanks repro cases helpful discussion", "d": "8/2018"}, {"body": "seems similar description ca nt response transition data changing comment", "d": "8/2018"}, {"body": "please provide complete example enough reproduce problem", "d": "8/2018"}, {"body": "raise example link work well js const modal button antd class app extends reactcomponent state visible false showmodal gt thissetstate visible true gt consolelog documentgetelementbyid test handleok e gt consolelog e thissetstate visible false handlecancel e gt consolelog e thissetstate visible false render return contents null contents contents reactdomrender mountnode link nt work project think setstate callback called untill dom rendered like get real dom directly get dom setinterval wait dom really rendered one get dom another get null", "d": "8/2018"}, {"body": "nt seem react issue example without antd using react portals see works expected therefore issue antd library works react please file issue library thanks", "d": "8/2018"}, {"body": "ok thank", "d": "8/2018"}, {"body": "another fun inconsistency noticed props eg treat truthy way html opposite props behave case since react earlier", "d": "8/2018"}, {"body": "maybe always warn passing string boolean attribute seems like always counterintuitive get", "d": "8/2018"}, {"body": "gaearon yeah definitely board way unify although thinking case newlyspecced html attribute looks like currently reliable thing behave whether react dom whitelist maybe one tentative argument blanket warning string values passed boolean attributes focusing actuallyambiguous cases instead", "d": "8/2018"}, {"body": "hmm lot searching found say might related jest babel create default reactnative project awesome project added packages create simple component render function returns run test render function error thrown", "d": "8/2018"}, {"body": "problem upgrading reactnative tests wo nt run done lot digging debugging found class components etc render method instance however make items stateless functional components render method exists instance expected removing going directly jest processor worked lost hoisting capabilities mocks nt work still unsure going", "d": "8/2018"}, {"body": "sorry nothing help react repository already said issue caused react define class method nt work problem transformation pipeline nt know problem react native preset definitely react issue people fix nt maintainers repository keep discussing wo nt see please file issues jest react native babel thanks", "d": "8/2018"}, {"body": "likely best place file issue react native repository issue likely related babel upgrade might version mismatch related babel preset", "d": "8/2018"}, {"body": "looked reproducing example able fix running particular issue project mistakingly pulled incompatible react native uses fix remove unnecessary wrong toplevel dependency check see remove least ensure version metro depends make sure nt see two different versions hope helps", "d": "8/2018"}, {"body": "sorry came online thanks help", "d": "8/2018"}, {"body": "thanks tip dan nt seem work case unfortunately created issue along repo highlights regression", "d": "8/2018"}, {"body": "diving deeper considered virtualizing list eg see reconciliation bottleneck sign might rendering items necessary", "d": "8/2018"}, {"body": "hello nt bottleneck today nt want receive tomorrow complexity n reconciliation gt n complexity gt n could nt ok createlistcomponentjs includes overcomplicated still returns element reconciliation process process still game", "d": "8/2018"}, {"body": "complexity n reconciliation gt n complexity gt n could nt ok think oversimplifying vs n nt matter practical sense talking something takes less millisecond either way takes n might large enough need worry things number dom nodes complexity calculating styles painting often affects performance significantly react reconciliation reducing n notation missing crucial details way juxtapose n also nt acknowledge differences deep shallow reconciliation significant practice react nt let skip shallow reconciliation tiny slice time would take deep reconciliation definitely skip deep one either something like caching react elements likely find skipping shallow reconciliation nt bring measurable benefits encourage ground discussion practical example experience n vs starts mattering reconciling eg list insertion point much significant ways optimize app either windowing technique bailing reconciling children hope makes sense", "d": "8/2018"}, {"body": "sorry simple example returns generic subtree components complexity could like generic data reconciliation take much millisecond result append single item move could take comparable amount time become issue could nt provide simple solution trap let consider stock exchange managing huge list stocks complexity best available amount server events huge mutations price changes position changes price change leads fast useless shallow deep reconciliation stocks price mutation could become issue time method could mutations windowing technique wo nt generic solution could nt select content ctrl hotkey use content search ctrl f hotkey print page etc wo nt possible fix native browser functionality requires dom elements sittings places ok countrystate selection autocompletes etc data important", "d": "8/2018"}, {"body": "say something like stock exchange pretty much worst case pick react everything updating time nt optimize react use case relatively uncommon apps significantly stable uis performancecritical piece might make sense completely skip react update text nodes manually using refs still use normal react data flow rest app optimize specific piece separately hard say whether even necessary without specific example become issue could nt provide simple solution trap still productive way discuss hypothetical performance problem build small stress test demonstrates many rowscolumns going many updates per second deep component tree think would take hours build artificially increase rendering time component simulate deeper tree worried look example discuss specific fixes could get trap purely theoretical consider tradeoffs case never want trapped best way ensure use library", "d": "8/2018"}, {"body": "seems scenario little like timeslicing demo dan shows talk btw nt use threejs corresponding react library rather plain react", "d": "8/2018"}, {"body": "sure provide later small example investigate react code bit provide better performance measurement wondering one interface react component method sure strongly connected reconciliation process nt want say process bad omitted every day saw issues reconciliation etc think react provide better abstraction around process give user chance provide custom reconciliation avoid sometimes", "d": "8/2018"}, {"body": "reconciliation moving nodes around upcoming features like time slicing suspense require lot internal coordination exposing even simple hooks userland leave us unable implement features efficiently common case ultimately custom mechanism hand use refs need component everything imperatively fact even combine approach portals continue declarative rendering parts trying skip", "d": "8/2018"}, {"body": "please check section docs need include polyfills older environments", "d": "8/2018"}, {"body": "error seeing", "d": "8/2018"}, {"body": "read source code could enabled reactfiberjs reacttestrendererjs", "d": "8/2018"}, {"body": "mean legacy context nt think want add apis supporting given new context api fully supersedes clear suggestion would work new context api single particular context component reads context uses think test component uses nt need test whether context works something already test inside react", "d": "8/2018"}, {"body": "hey gaearon thanks quick answer use case built provider wrapper around prebuilt components would like test provider actually passes context wrapped components example js const component renderercreate text let button componentrootfindbytype button expect buttoncontext tohaveproperty theme solution transform context prop inside wrapper", "d": "8/2018"}, {"body": "sounds like really testing react need plenty tests context want verify something context testing output presumably uses context somehow", "d": "8/2018"}, {"body": "hmm see point trying test implementation provider wrapper matter fact essentially react test", "d": "8/2018"}, {"body": "achieve using destructuring function example use following object could remove using jsx const demo key ref classname button button primary label click onclick gt consolelog button clicked const classname demo value key ref classname removed label click onclick gt consolelog button clicked however left unused var could also create function returns values interested jsx function removeprops key ref label onclick return key ref label onclick const demo key ref classname button button primary label click onclick gt consolelog button clicked const removeprops demo nt classname prop pass cloneelement function key ref classname removed label click onclick gt consolelog button clicked", "d": "8/2018"}, {"body": "guess could use directly reactcreateelement afaik also worry special attributes like key ref rather mess internals think maybe misunderstand tokland says props nt talking allow us define element control props nt need set something overrideremove something rather clone needs us provide nt agree tokland suggestion think need add judgement gaearon right dan", "d": "8/2018"}, {"body": "point view props removed even cloned element although seems logic href property undefined may also valid value use cases props also difficult even impossible follow clone cloned elements removed props reactjs users backward incompatible", "d": "8/2018"}, {"body": "another issue like reported first issue page please see tldr poorly named method really means something like error pass anything react element behavior want nt use", "d": "8/2018"}, {"body": "please try command npm react istead npm react", "d": "8/2018"}, {"body": "solved problem", "d": "8/2018"}, {"body": "cool going close hit issues take look support resources", "d": "8/2018"}, {"body": "nt think possible dom form know browser needs focus order fire events anyway react question going close issue", "d": "8/2018"}, {"body": "hey issue react caused recent movement browser vendors improve performance mobile devices events usually would fire scroll getting passive default google great article want know event passive call way browser render next frames scroll animation without wait javascript engine check comment mine talk way work around adding native nonpassive listener going close issue since track support passive event listeners feel free follow questions", "d": "8/2018"}, {"body": "browsers nt trigger change events programmatically change value observation see specific react pen consolidating value state single source truth value attempting set sync possible options", "d": "8/2018"}, {"body": "afraid nt really know consolidating value state single source truth anyone problem way workaround explicitly add invalid option means invalid option displayed users know must change something else however option dropdown way display state always sync", "d": "8/2018"}, {"body": "react javascript library influence code page works question seems using module clientside app since node module server side expect available frontend code image reason works webpack bundles kind polyfill polyfill might incomplete outdated please bring problem webpack related react thanks", "d": "8/2018"}, {"body": "use regular dom api want listen events app one place", "d": "8/2018"}, {"body": "help", "d": "8/2018"}, {"body": "thanks wanting help think good first step take look repository readme see reuse text packages open pr definitely iterate wording need perfect first try", "d": "8/2018"}, {"body": "agree current situation confusing thanks digging links see also attempt analyze behavior let keep open guess keeps coming suggestions work please file rfc discuss see way forward makes sense thanks", "d": "8/2018"}, {"body": "according docs reactchildrenonly reactchildrenonly kind test function filtering function expects single otherwise throws error assume name childrenonly confusing und sounds like filtering function returns valid child children would rename something like reactchildrenisonly reactchildrenischild reactchildrenisvalid reactchildrenissingle case expected result sounds like return value boolean function throws error case unexpected arguments better use conjunction componentdidcatch described error handling react", "d": "8/2018"}, {"body": "hi phiboi happening method called every time component updates happens update whenever props state changed like said catch snapshot property runs wo nt trigger rerender change call effectively trying update state triggers rerender method called taking another snapshot value updating view seems like state using properties like quite brittle tho would nt recommend go line hope got message across cheers", "d": "8/2018"}, {"body": "yurickh said right strongly recommend avoid code like easy break something changes keep state call explicitly ask update cheers", "d": "8/2018"}, {"body": "purpose duplicating need keep parent keep parent nt try sync state child parent leads complex hardtodebug code hope helps", "d": "8/2018"}, {"body": "pascalsenn future reference use issue tracker bug reports feature requests question please check community support resources", "d": "8/2018"}, {"body": "react nt load images see error like means rendered tag source url could nt load reason hope helps reproducing minimal example necessary us provide guidance", "d": "8/2018"}, {"body": "words requirement communication components providing consuming context string key used yeah upside easier share context intentionally big downside easy context clashes components nt actually want context best way handling far best approach thought using peer dependencies enforce package calling reactcreatecontext never duplicated nodemodules sounds reasonable like libraries already peer dependency react", "d": "8/2018"}, {"body": "hey aslanovsergey nt call instance returned call root example little confusing method renderer nt return test instance docs return instance corresponding root element available provides want returns root test instance object useful making assertions specific nodes tree hope helps", "d": "8/2018"}, {"body": "hi aweary thing root null typeerror read property findbytype undefined", "d": "8/2018"}, {"body": "react provide api", "d": "8/2018"}, {"body": "dan please say get documentation specific version react could nt find", "d": "8/2018"}, {"body": "documentations past versions starting sorry try looking likely missing test renderer new point documented yet case test renderer nt traversal api finding something type otherwise traversing hierarchy ca nt done without using private apis like enzyme", "d": "8/2018"}, {"body": "think point people wanted us xhtmlcompatible possible tried err side maybe nt really needed first place happy consider pr although promises whether going proceed would probably good could research past work eg somebody mentioned xml xhtml relation server rendering issues prs", "d": "8/2018"}, {"body": "sweet initial code already tinkering around idea spruce send", "d": "8/2018"}, {"body": "wo nt unmount component make render nothing cases equivalent want specifically unmount done parent rendering conditionally", "d": "8/2018"}, {"body": "solution always explicit upfront contexts going use", "d": "8/2018"}, {"body": "aside crossrenderer portals right implement render phase work", "d": "8/2018"}, {"body": "wo nt allowed sideeffectful things hard vue react thing", "d": "8/2018"}, {"body": "personal preference value gets automatically set like old one single values use one need hard conversation context abuse", "d": "8/2018"}, {"body": "vue react use case nt immediately use one probably want whole vue world access different contexts", "d": "8/2018"}, {"body": "sebmarkbage explicit amp transparent would pretty important able introspect set available contexts one example usecase vue react case building gutenberg components vue main reason context passing able use gutenberg builtins utilize context context usage party code work vue react library needs able either transparently pass contexts introspect contexts set pass", "d": "8/2018"}, {"body": "hacky workaround seems function could stand generalized javascript flow import react react import import settingsprovider settingsconsumer settingscontext todo react currently support seamlessly passing context portals therefore renderers including reactkonva canvas renderer see type props children reactelement barrierrender reactelement gt reactelement const contextbridge barrierrender children props gt gt settingsvalue gt barrierrender export default contextbridge usage example reactkonva javascript gt locale gt", "d": "8/2018"}, {"body": "whatever solution needs benchmark lt roots see tradeoff", "d": "8/2018"}, {"body": "hey danfessler adding native dom event listeners tried reproduce issue using html javascript without react pointer events fire case", "d": "8/2018"}, {"body": "appears indeed bug chrome tried suggestion vanilla js nt fire pointerup event either works firefox", "d": "8/2018"}, {"body": "post link jsfiddle anything found sometimes needed chrome behave properly", "d": "8/2018"}, {"body": "also tried adding touchaction manipulation div style nt help", "d": "8/2018"}, {"body": "check added makes event appear expected chrome using mobile emulation suggest chrome recognizing gesture thus firing pointer released work recommend register pointer capture see produces reliable result anyway seem bug react think issue closed", "d": "8/2018"}, {"body": "work tree structure changes example every time add another layer nodes move tree since types match react considers new mounts could fix using reversing order innermost item would still lose state essentially replacing yeah bug two examples equivalent one flat list another tree either outermost parent innermost child type depending reduce method use change type every add", "d": "8/2018"}, {"body": "including html work fine", "d": "8/2018"}, {"body": "hey dan found solution putting remember solved like always find go inside folder find folder inside find slick folder open create two seperate files names inside style folders project copy put newly created files import file using webpack like guessing getting ca nt resolve error cant resolve font error fact files used css self simple go inside newly created find lines slider slicklist slickloading amp background fff slickimageurl ajaxloadergif center center norepeat icons slickfontfamily slick fontface fontfamily slick src slickfonturl slickeot src slickfonturl slickeot iefix format embeddedopentype slickfonturl slickwoff format woff slickfonturl slickttf format truetype slickfonturl slicksvg slick format svg fontweight normal fontstyle normal comment", "d": "8/2018"}, {"body": "also stackoverflow question made ask question question says works add css indexhtml cdn rather avoid network call believe affecting rendering page initial load", "d": "8/2018"}, {"body": "called determine whether react rerender ca nt possibly run callback purpose give author opportunity prevent update altogether time callback fires late", "d": "8/2018"}, {"body": "lol sorry posting nt know exactly thinking thanks response gaearon", "d": "8/2018"}, {"body": "already slots", "d": "8/2018"}, {"body": "yes need special feature react ui elements firstclass entities pass around regular props fact nothing special prop except jsx containment uses elements like use content however technically equivalent something like also works", "d": "8/2018"}, {"body": "looks better aware precise semantics although sure either see last sentence paragraph look better somebody familiar operation need google means handles edge cases etc think case imposes much cost first example understood anyone familiar js basics react second example requires detailed understanding works many open questions example work passed custom component general suggestion avoid focusing much repetitive code like truly affect app scales completely local fact argue introducing extra abstraction scales better precise control happening need apply special rules guess behavior however could make bit simpler using fragment lets us remove first condition need wrapping element neither child exists dom nodes need emitted want take sure add abstraction eg js function nullifempty content wrap content content false content null return null return wrap content class mycomponent extends reactcomponent render return nullifempty thispropsfoo foo gt foo nullifempty thispropsbar bar gt bar nullifempty thispropsfoobar foobar gt foobar nt find much clearer like take js function omitemptychildren fragment fragmenttype reactfragment throw new error expected fragment const newchildren reactchildrenfilter fragmentpropschildren child gt typeof childtype function childpropschildren null amp amp childpropschildren false amp amp childpropschildren return newchildren class mycomponent extends reactcomponent render return omitemptychildren thispropsfoo thispropsbar thispropsfoobar fact even make component automatically think adds complexity worth wo nt handle advanced cases anyway like custom components hope helps", "d": "8/2018"}, {"body": "gaearon thank indepth answer like last solution nt polute render method much mine look better somebody familiar operation need google means handles edge cases etc well agree nomenclature could clearer new feature believe everyone would google logic many open questions example work passed custom component well came across need prop noncustom components think work normal prop passed custom component lets us remove first condition need wrapping element neither child exists dom nodes need emitted actually need element made clearer example bad almost markup small logics node childrentext render recursive like eg issue adds complexity worth agreeing statement perhaps help extending last snippet something achieves result javascript function omitemptynodes fragment fragmenttype reactfragment throw new error expected fragment class mycomponent extends reactcomponent render return omitemptynodes thispropsfoo thispropsbar thispropsfoobar mycomponent output nothing foo bar foobar falsy thanks attention", "d": "8/2018"}, {"body": "want keep outer div fragment useless remove change code check fragment instead strongly recommend writing code like brittle many edge cases handle well want imply future readers good idea might seem like simplifies code really obscures meaning sets future bugs debugging woes", "d": "8/2018"}, {"body": "right maybe overestimated need feature even though stubborn keep thinking way achieve without compromising mentioned thank insights much apreciated", "d": "8/2018"}, {"body": "think main reason seems brittle adapt code changes well happens extract header component way parent component know child empty rendering moved layer happens need wrap potentially empty div another div need remember apply logic levels accidentally render whole thing might want add component middle would break", "d": "8/2018"}, {"body": "food thought create tests concerns back without hopefully answers soon", "d": "8/2018"}, {"body": "back examples prop renamed something clearer would work examples possible returns render method mycomponent javascript base case outputs null children foo base case outputs null iff foo one false null undefined true foo base case nested outputs null iff foo one false null undefined true foo bar base case many children outputs null iff foo bar one false null undefined true edge case behave base case foobar render value complex viable performance assume custom components seen content simply treat means example would never output null simply passes named prop custom component implement sort like children prop extracting custom component gives render method implement omitifempty logic go something like initially thought nicetohave feature builtin components bic seek find generic solution bic clean repeated logic react projects seem around render methods actual builtin markup hope covered brittleness feature forgot anything please point eager hear thoughts", "d": "8/2018"}, {"body": "seems like maybe want js function createwrapper tag function wrapper props propschildren propschildren false propschildren null propschildren undefined return null const tag tag return wrapperdisplayname tagtouppercase return wrapper const createwrapper const createwrapper const createwrapper class mycomponent extends reactcomponent render return thispropsfoo thispropsbar thispropsfoobar guess still would nt work parent divs could also put special flag would check children", "d": "8/2018"}, {"body": "general main reason wary api proposing implementation complexity although likely easy creates spooky action distance one core promises react general component renders affect whether displayed proposal entire tree influences behavior also affects statefulness children clearly deeper issue react allow component pierce hierarchy necessary use cases like userland layout something keeping mind proposal hyperspecific version though unlikely go direction however might future work generic feature also allow something like aiming", "d": "8/2018"}, {"body": "well denying complex guess run workarounds cleaner solution comes appreciate time took dan thanks", "d": "8/2018"}, {"body": "want react work older browsers using classes letting babel compile make sense us output would worse written hand library matters", "d": "8/2018"}, {"body": "obvious useful know thanks dan", "d": "8/2018"}, {"body": "wait sec still use imports instead commonjs guess case babel compilation good enough", "d": "8/2018"}, {"body": "gkatsanos rollup bundling best babel used another syntax like arrow functions shorthand properties", "d": "8/2018"}, {"body": "using babel import statements", "d": "8/2018"}, {"body": "way react know instance pass event handler could passed many components feasible also somewhat confusing people expect class methods work javascript thanks suggestion though", "d": "8/2018"}, {"body": "sorry report nt details error seeing screenshots way help additionally sounds like error referring syntax error something react help provided details maybe able help", "d": "8/2018"}, {"body": "gaearon", "d": "8/2018"}, {"body": "yuqingc maybe reactvirtualized help rendering array item time surely cause problem", "d": "8/2018"}, {"body": "also use list items rendering lot list items frequently strong suit react also generally performant vanilla dom depending big list mentioned recommend using windowing technics render visible items via reactvirtualized reactlist similar", "d": "8/2018"}, {"body": "samundrak jquense thanks", "d": "8/2018"}, {"body": "another thing keep mind make inherit props shallowly equal rendering unchanged items skipped", "d": "8/2018"}, {"body": "anecdotally seems value underlying cause least cases unexpectedly long still digging minimal repro edit seems might always case least might caused delta fiber marked later recorded might unexpected either point", "d": "8/2018"}, {"body": "interestingly simplify test harder becomes reproduce started profiling full io suspense demo could triggered relatively reliably began stripping nonessential components reduce console noise became significantly harder edit might misleading observation reducing number fibers app reduced number possible bad measurements also made app faster maybe needed also reduce threshold logging error", "d": "8/2018"}, {"body": "hi use issue tracker bug reports feature requests question please check community support resources", "d": "8/2018"}, {"body": "yeah ship sailed", "d": "8/2018"}, {"body": "thanks creating would change figure needs priority api implement try priority api pick work next week", "d": "8/2018"}, {"body": "flarnie feel free edit", "d": "8/2018"}, {"body": "hi gaearon questions timeslicing react reactdom specific feature reason currently part reactdom api opposed another method eg", "d": "8/2018"}, {"body": "api placeholder removed imagine actual api end rendererindependent", "d": "8/2018"}, {"body": "special tags electron", "d": "8/2018"}, {"body": "looking docs seems tag", "d": "8/2018"}, {"body": "case mind adding whitelist send pr", "d": "8/2018"}, {"body": "beat punch thanks much gaearon philippspiess", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "nt understand asking want propose api change please see", "d": "8/2018"}, {"body": "lets set html html string ca nt interpolate function html string like", "d": "8/2018"}, {"body": "question react", "d": "8/2018"}, {"body": "emnn go back question", "d": "8/2018"}, {"body": "hey markerikson nt want disappoint tried github issues chats video calls still nt feel like discussion moving forward think mostly things sound abstract get better idea one needs play features substitute working hard getting features closer state usable enough start experimenting think important thing discussions without practical demos already seen tend go circles asking please give us time prepare ready publish examples detailed explanations behavior able see mean exactly case think try implement behavior eg redux see issues trying solve point discussion significantly productive point afraid nt offer yet sorry keep waiting", "d": "8/2018"}, {"body": "yeah think basically asking demos show difficult patterns explanations pain points etc got something concrete compare", "d": "8/2018"}, {"body": "something starting point add examples explanations gets solid", "d": "8/2018"}, {"body": "going close since ca nt help without reproducing case find one please file new issue thanks", "d": "8/2018"}, {"body": "still ca nt reproduce figure code throw error trust react info use styledcomponents next code maxwidth marginright fontsize textalign left later component renders symbol eth chrome devtools component looks like two assume problems hiding ca nt reproduce machine know errors happend next environment json browser name chrome version os name windows version nt versionname platform type desktop engine name blink browser name chrome version os name windows version nt versionname platform type desktop engine name blink idea try reproduce bug please let know thanks", "d": "8/2018"}, {"body": "guess either equivalent", "d": "8/2018"}, {"body": "seems right thanks lot", "d": "8/2018"}, {"body": "ca nt make work changing source want change build scripts target esm build", "d": "8/2018"}, {"body": "fyi working", "d": "8/2018"}, {"body": "clear exactly proposing ideas changes react apis feel free propose thanks", "d": "8/2018"}, {"body": "please create isolated example uses plain reactdomserverreactdom third party libraries demonstrates issue", "d": "8/2018"}, {"body": "nt understand reproduce cloned ran added log comment seeing provided data available consumer nt know expect see nt seem anything wrong context works confident issue reactrelated please try create focused example provide instructions reproducing actual vs expected behaviors thanks", "d": "8/2018"}, {"body": "closing per lack response", "d": "8/2018"}, {"body": "nt understand asking example would help", "d": "8/2018"}, {"body": "concerned make timings pretty noisy want send pr take look", "d": "8/2018"}, {"body": "hey dan gaearon nitpicking want figure said nt use new features nt want old patterns keep working would suggest code new react way old react eg could use life cycle methods way etc right however bvaughn says getderivedstatefromprops componentwillreceiveprops could called many times one update hence solution fetch data inside question seem ca nt use new react exactly way right afaik current react componentwillreceiveprops nt get called many times one update nt", "d": "8/2018"}, {"body": "giorgim yes lifecycle methods changing point suspense optin feature existing react render methods react rendering behavior work asis however opt adding tag part app begin using suspense approach indicating async data needs take advantage none happens nt add codebase", "d": "8/2018"}, {"body": "giorgim used instead", "d": "8/2018"}, {"body": "markerikson say bvaughn said getderivedstatefromprops called many times one update necessarily case nt enabled sorry asking questions popup time time nt find resource would cover ps bvaughn also nt mention optionality linked thread hence raised suspicion", "d": "8/2018"}, {"body": "method enqueueing asynchronous updates eg class components opposed rendererspecific added core checklist understanding updates fibers async asynchronous theory means would unnecessary however unstableasyncsuspense demo mixes synchronous update async update sure accomplished mode universal components", "d": "8/2018"}, {"body": "check list time slicing umbrella", "d": "8/2018"}, {"body": "support promise component type related heuristics lifecycles would get called children resolved including promise case means wo nt get called given promise never resolved immediate host children rendered", "d": "8/2018"}, {"body": "thysultan called commit phase ui tree fully rendered applied dom based understanding suspense think answer instance would never actually mount get resolved one descendants also attempted wait promise never resolves would never mount thus would never executed examples someone feel free correct assumptions wrong", "d": "8/2018"}, {"body": "yea execute commit phase executes whole tree resolved tree might include placeholders explicitly put depending whether something inside still suspends waited long enough explicitly render child without placeholder around never end situation ready", "d": "8/2018"}, {"body": "really looking forward able play even browsed lot source code figure nt put working version world wide web yet anything help get released", "d": "8/2018"}, {"body": "compile master wan na play see instructions", "d": "8/2018"}, {"body": "reproduce development build production builds devonly memory leaks temporary example render component nodes released", "d": "8/2018"}, {"body": "gaearon thanks", "d": "8/2018"}, {"body": "minimal repro js const react require react const reactdom require reactdom const jsdom require jsdom require rafpolyfill const jsdom new jsdom globalwindow jsdomwindow globaldocument jsdomwindowdocument globalnavigator jsdomwindownavigator consoleerror error gt throw new error error class bad extends reactcomponent componentdidupdate throw new error noo render return null mount function const div documentcreateelement div try reactdomrender reactcreateelement bad div reactdomrender reactcreateelement bad div catch e reactdomrender reactcreateelement div div crashes least interestingly nt crash move import jsdom initialization", "d": "8/2018"}, {"body": "going continue investigation part indeed fixed master another part nt", "d": "8/2018"}, {"body": "thanks brokentone repro case helpful", "d": "8/2018"}, {"body": "thank much minimal repro case gaearon actually spent hours stripping enzyme figure cases learned lot never got useful conclusion building far better idea use case elaborate initial concern", "d": "8/2018"}, {"body": "methodology remove imports one one noticed adapter causing issue noticed statement causing issue inside adapter import told order imports matters gradually got one file removed everything nt effect", "d": "8/2018"}, {"body": "reason bug reconciler assumed function reports errors never throws throws setup overridden throw", "d": "8/2018"}, {"body": "fixed", "d": "8/2018"}, {"body": "sebinsua calls thissetstate within commit phase eg componentdidmount componentdidupdate synchronous test base react local build asynchronous ie still alert bvaughn gaearon iirc suspenseasync render wo nt change setstate behavior commit lifecycle eg setstate async wo nt synchronous even asyncrender test local build react could give unit test case link thanks bvaughn createsubscription handles possible case checking value rendered sync latest value scheduling new render calling setstate ensures component nt display stale data hi brian little question ca nt response transition data changing eg event dispatcher dispatch foo dispatch bar dispatch receive end due want something missing action createsubscription nt data changing list internal value internal situation data still stale iam wrong please let know thanks way deopts deopting mean", "d": "8/2018"}, {"body": "nesmalltown test base react local build asynchronous ie still alert could wrong think meant synchronous nt suggesting think idea calling point guarantees state updating state flushed screen intention appears correctness quote bvaughn state updates scheduled processed synchronously flushed user sees ui update important certain use cases eg positioning tooltip measuring rendered dom element case describing means users application never even see temporary stale value react process new value synchronously yielding mean immediately calling updated way deopts deopting mean presumably deoptimises optimisation lost asynchronicity", "d": "8/2018"}, {"body": "sebinsua think idea calling setstate point guarantees state updating state flushed screen intention appears correctness even async mode state updating state flushed screen still applicable think correctness asynchronous synchronous always correct imo synchronous bvaughn want say commit phase method called suspend call synchronous contrast async rendersuspense suspendyield render phase method would cause methods called maybe call asynchronous mean immediately calling thissetstate thisstate updated yea thinks maybe need adjust description calls thissetstate within commit phase eg componentdidmount componentdidupdate synchronous little bvaughn gaearon wrong please let know thanks", "d": "8/2018"}, {"body": "guarantees user see previous state technically synchronous sense flushing synchronous sense flushed react exits toplevel javascript call stack", "d": "8/2018"}, {"body": "gaearon thanks clarification dan one question iirc seems toplevel javascript call stack call stack", "d": "8/2018"}, {"body": "sure mean saying nt exit top level frame committing", "d": "8/2018"}, {"body": "thanks clarifying dan wording little misleading guess state updates processed react finishes batch work gives browser time paint updates words never actually see ui original update call either ui state update results example js class example extends reactcomponent state count componentdidmount nt actually thissetstate count componentdidupdate prevprops prevstate thisstatecount amp amp prevstatecount nt actually thissetstate count render return count thisstatecount component render count user would never actually see calls", "d": "8/2018"}, {"body": "gaearon sorry fault mistakenly treat word top bottom understanding identical bvaughn yea batch update works think irrelative createsubscription asyncrender thread even react already batch update async render fiber chunk timeslicing expriationtime way could please answer second question comment thanks", "d": "8/2018"}, {"body": "confused recent comment nesmalltown example nt really anything batch rendering ever one state update queue time trying clarify state updates handled commit phase sure know second question referring", "d": "8/2018"}, {"body": "bvaughn yes multiple update time wrong description try describe thoughts clear sorry wasting time state updates componentdidmount componentdidupdate processed react finishes batch work gives browser time paint updates words never actually see ui original update call setstate either ui state update results mean imo executedcalled cdmcdu method know state change finally think ca nt batch work actually mean batch means work batched rather update batched work means fiber beginwork commitwork something else example code call setstate either ui state update results imo result special methods ie cdmcdu eg cwm cause render react merged state ie render method called ie return new state gdsfp cause result gives browser time paint updates imo console dom textcontent different final result see even ca nt perceive ui change never actually see ui original update think calling method whether commit phase reduce interval twothreefour updates reduce update timesmerge updates make browser paint quickly sure know second question referring sorry ambiguous try command f search key little question page", "d": "8/2018"}, {"body": "little trouble understanding asking sorry saying essentially calling either cause another render user see know react work synchronously finishing execution someone pointed react update synchronously call synchronously rerender component finished running", "d": "8/2018"}, {"body": "bvaughn think mean", "d": "8/2018"}, {"body": "yikes thanks", "d": "8/2018"}, {"body": "ok maybe need time understand thread thanks guys bvaughn gaearon clarification thanks", "d": "8/2018"}, {"body": "react issue see removing dependencies removing configuration section fixes must either jest babel issue likely advice relevant", "d": "8/2018"}, {"body": "looked reproducing example able fix running particular issue project mistakingly pulled incompatible react native uses fix remove unnecessary wrong toplevel dependency check see remove least ensure version metro depends make sure nt see two different versions hope helps", "d": "8/2018"}, {"body": "nt think good way fix side unless give putting warning getters say safari issue fix", "d": "8/2018"}, {"body": "tracking fix webkit", "d": "8/2018"}, {"body": "burg appreciate followup indeed deep traversal problem would trigger warnings define getters reachable one reason another", "d": "8/2018"}, {"body": "tracking fix webkit addressed show safari technology preview soon one yet continue see issues please nt hesitate send message file another webkit bug details", "d": "8/2018"}, {"body": "josephpecoraro thank much", "d": "8/2018"}, {"body": "gaearon looks like released days ago change aweary included reason intentional change missed", "d": "8/2018"}, {"body": "released security hotfix nt include changes except vulnerability fix avoid situation people ca nt upgrade due newly introduced bug next version include changes master", "d": "8/2018"}, {"body": "ah thanks update", "d": "8/2018"}, {"body": "sweet issue today glad fix incoming thanks", "d": "8/2018"}, {"body": "update available version downgrade avoid issue", "d": "8/2018"}, {"body": "documentlevel native handler sounds like solution nt understand point call means want reach top right regardless nt look like bug report like support question feature request try keep support outside repo check resources instead feature request follow nothing planned short term though", "d": "8/2018"}, {"body": "bug though dom works element technically different one unless missing something", "d": "8/2018"}, {"body": "indeed dom behaves normally issue touch events locked event occurs given touch event read spec mdn pretty good explanation issue note target element removed document events still targeted hence wo nt necessarily bubble window document anymore risk element removed touched best practice attach touch listeners directly target dan pointed issue rendering inside portal create new dom element since element different parent reconciler always create new element since original element longer attached document events bubble anymore vanilla example case since element moved instead recreated check example shows issue workaround probably add native event listeners dom node using componentdidmount remove touchendtouchcancel use pointer events suffer issue since target always latest intersection like mouse events make sure eventual polyfill handles correctly though", "d": "8/2018"}, {"body": "philippspiess action take react side considering closing wanted check first", "d": "8/2018"}, {"body": "nhunzaker nope think works intended", "d": "8/2018"}, {"body": "okay thanks giving fantastic break problem possible solutions close", "d": "8/2018"}, {"body": "thanks philippspiess detail much appreciated see work around dom behaviour end", "d": "8/2018"}, {"body": "right example moving dom element rather creating new one problem side point codesandbox great sharing things", "d": "8/2018"}, {"body": "also thanks following gaearon", "d": "8/2018"}, {"body": "linking historical purposes", "d": "8/2018"}, {"body": "want send pr", "d": "8/2018"}, {"body": "ca nt reproduce master likely fixed", "d": "8/2018"}, {"body": "sounds use case call return experiment deleted nt happy api implementation nt really anything offer right currently know order time commit late render unless willing always render two passes slow let keep open", "d": "8/2018"}, {"body": "actually going close duplicate", "d": "8/2018"}, {"body": "issue updating react", "d": "8/2018"}, {"body": "sorry even bug way fix somebody nt provide reproducing example going lock discourage comments nt helpful problem please file new bug reproducing example fix thanks", "d": "8/2018"}, {"body": "managed investigate", "d": "8/2018"}, {"body": "closing since followup", "d": "8/2018"}, {"body": "approach suggesting work yeah complicated also nt encourage often breaks encapsulation property usually readonly way currently used case fair want write possible ask change type writeable future nt maintain typings", "d": "8/2018"}, {"body": "sure create new issue question way forward context another renderer example trying implement custom render views reactnative want provide context main renderer like graphql client short way implement something like portals custom renderer", "d": "8/2018"}, {"body": "think best option right capture context need context boundary pass providers boundary", "d": "8/2018"}, {"body": "biggest problem works fine production builds disagree would big problem worked development builds nt work production builds current behavior actually safer highlights problem early reason problem enumerating generator mutation passing generator react forcing react perform mutation render phase bad async rendering cases sync rendering example js class container extends reactcomponent handleclick gt thissetstate render return function app return renderchildren function renderchildren let lt yield reactdomrender documentgetelementbyid container even production version show first render erase click erased first render consumed generator next render nt anything read think start trying detect pattern warning supported", "d": "8/2018"}, {"body": "agreed warning right solution", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "going start warning", "d": "8/2018"}, {"body": "seeing chrome native event target firefox document ca nt determine component clicked nt receive event", "d": "8/2018"}, {"body": "nt appear react issue seems like known inconsistency browsers macos nonreact test case html click", "d": "8/2018"}, {"body": "solved issue creating list hashes server sending client blob seems little unwieldy could far simplified one able access dataattributes ssr rendered markup sounds like good solution disagree proposed solution simpler encourages client server markup diverge ca nt tell intentional regardless like propose api change thanks", "d": "8/2018"}, {"body": "hectorcoronado feel free dig need research great", "d": "8/2018"}, {"body": "look coming days update accordingly thanks", "d": "8/2018"}, {"body": "quick checks using definitely still issue ios nt seem check whether particular strategy attaching every node click handler necessary checks click nt bubble root maybe", "d": "8/2018"}, {"body": "oh target element ancestors including explicit event handler set mouse events event handler may empty function explains works also means might get away setting root click delay grey overlay issue solved version support", "d": "8/2018"}, {"body": "also means might get away setting root click delay grey overlay issue solved version support give additional information grey overlay tap highlight shown element pressed ios safari safari detect interactive elements eg buttons tapable default adding handler also make noninteractive elements eg div tapable important ux wise respect proper granularity adding listeners otherwise tap highlight shown whole container source code back original topic realized tightly intertwined tap highlight color maybe feasible feature test would check browser supports maybe check webkittaphighlightcolor css property supported", "d": "8/2018"}, {"body": "hectorcoronado still want work issue try explore css property based featuredetection want see comment", "d": "8/2018"}, {"body": "philippspiess gaearon yes spend time work tomorrow report back seems beyond capabilities present thank", "d": "8/2018"}, {"body": "meant used top level similarly supported call container already part another react tree instead rendering child nodes managed react use state drive rendering js state currentbox left handleleftdrop e canceldefaultbehavior e thissetstate currentbox left handlerightdrop e canceldefaultbehavior e thissetstate currentbox right render return thisstatecurrentbox left amp amp thisstatecurrentbox right amp amp working example", "d": "8/2018"}, {"body": "come node attempting unmount rendered react toplevel container instead parent component update state rerender order remove component also stated inapplicable application developing nt know would applicable indeed source problem intended solution use state", "d": "8/2018"}, {"body": "nt feel like action item react intentionally using different events internally provide solid polyfill", "d": "8/2018"}, {"body": "posterity caused rather function definition invariant correct", "d": "8/2018"}, {"body": "agree problem sure reasonable solution also problem future props react may use internally could use attribute name directly common custom element attribute name custom elements nt think make exception custom elements unless already popular pattern need support using react custom elements may one small limitation", "d": "8/2018"}, {"body": "ever move ref element config object could", "d": "8/2018"}, {"body": "want pick one packages default minified bundle intended production declaring entry points packagejson software consumes library could know bundles published rather needing make assumptions directory structure nt think using array tools expect single string would toolfriendly anything likely break tools would likewise great react included es module entry point packagejson standard one would module sure issues tracking", "d": "8/2018"}, {"body": "gaearon sorry forgot ticket needed close earlier suggestions help continue exploring potential suspense amazing far gaearon aweary thank responses especially weekend guys amazing", "d": "8/2018"}, {"body": "opted include polyfill react dom avoid increase bundle size bother including features even say behavior defined unfortunate would increase bundle size huge amount something saying valid reason include bundle reason wanting increase bundle size nt transparent reason could applied literally existing feature react", "d": "8/2018"}, {"body": "see comment planned core features roadmap consider important add react given community recent complaints growing bundle size strict prioritising gets unfortunately means features directly roadmap require lot extra code tougher chance getting would increase bundle size huge amount something know define huge amount yes comparatively event polyfills already significant part react almost half currently afford grow part sorry frustrating gave talk core features working currently adding react hope watch see consider important polyfills given community focus bundle size sacrifice much polyfill please trust love polyfill events feasible", "d": "8/2018"}, {"body": "still bit perplexed understand idea controlled uncontrolled data got places want two examples code one using react react two intentions control button selected change object contents based form inputs react react intentions want make copy external prop value save internally equally want external changes overwrite internal state silly example cases always controlled however one want store copy object component state manipulate component view correctly updated publish changes parent component external prop changes let say another component updates object want changes overwrite internal state nt doubt probably antipattern react working like feel like lifecycle method still good thing include future updates amiable still trying understand implications antipattern new behaviour better", "d": "8/2018"}, {"body": "get chance read blog post", "d": "8/2018"}, {"body": "gaearon still wanting sweetness behaviour attempted something like warning mildly untested code ahead think pseudocode import memoize memoizeone export default class editobject getobject memoize propsobject stateobject gt propsobject amp amp propsobject stateobject return propsobject return stateobject render let useobject getobject thispropsobject thisstateobject problem finding nt want compare objects render changes always revert prob fault logic changes would perhaps use something like memoization locally store propsobject compare whenif changes wonder legal use memoised function realise written comment working stuff time modify codesandboxes play around get back", "d": "8/2018"}, {"body": "nt think use case memoization trying seems covered including fragile probably good idea", "d": "8/2018"}, {"body": "gaearon yeah approach definitely right idea however trying figure alternative wanting sandbox information may change due external sideeffects thought still relevant something like perhaps right idea well need figure right path", "d": "8/2018"}, {"body": "updated example works changes compared broken version posted removed unnecessary state fully controlled removed unnecessary instead mirroring state separated coming locally edited fields nt attempt sync instead merge render method want confirm edits send merged objects upwards parent component replaces state need reset switch different objects parent however mentioned blog post brittle comparing next previous props even solution nt work well need update object unrelated reasons reset form state instead added field objects reset state using uncontrolled component key approach hope helpful", "d": "8/2018"}, {"body": "gaearon helpful thanks update clear breakdown much appreciated use cool thanks taking time", "d": "8/2018"}, {"body": "gaearon anything react team warn users install newer gdsfp behaviour changes component fundamentals instance transition component reactspring hence get issues posted every instance one gdsfp assuming going called setstate used transition exitout transitions completed direct result old transitions stuck limbo new render pass begins", "d": "8/2018"}, {"body": "nt think serious enough bug deprecate way warn try use npm deprecations sparingly either security vulnerabilities guaranteed crashes otherwise people wo nt treat seriously sorry react bug affecting users one thing could cut major release raise minimal required react version least clear new users", "d": "8/2018"}, {"body": "maybe override behavior current one", "d": "8/2018"}, {"body": "development environment react uses trick caught exceptions thrown inside fake dom event makes reported react actually catches nt propagate case error boundary otherwise rethrown production errors caught error boundaries stay caught", "d": "8/2018"}, {"body": "see issue closed seems fairly relevant question like experiment exactly concept reactredux unstable likely feature changed removed future marked unstable shortly released first place", "d": "8/2018"}, {"body": "mostly know would useful libraries limited want release something relying yet", "d": "8/2018"}, {"body": "thing found last night callback apparently passed nt looked things carefully originally assumed passed instead makes things potentially lot complicated original train thought reactredux could kind default keys plain object changed bits calculation function allow user pass callback calculate changed bits something like immutablejs map current experiments using singleton entry created file way let end user customize behavior absolute immediate priority something like experiment potential perf optimization approach", "d": "8/2018"}, {"body": "useful decouple mind filing rfc proposed behavior justification", "d": "8/2018"}, {"body": "sure sure able give really detailed writeup least explain thinking skimmed relevant chunks code nt seem like would much change implement first glance reference currently stored context fiber calls references uses available see presumably given prop could pulled instead used", "d": "8/2018"}, {"body": "filed rfc looks like pretty simple addition possibly changed added loc", "d": "8/2018"}, {"body": "likely wo nt plans make consuming context convenient though", "d": "8/2018"}, {"body": "discovered reactcontextual think indeed nice functionality separate small package", "d": "8/2018"}, {"body": "gaearon hi dan could give info would change future look recent prsissues previous understanding react ca nt control behavior nt belong react except react provide new method something replace like react use ridc", "d": "8/2018"}, {"body": "stack reliable error far setstate visible stack nested update sure react takes js stack updates need synchronous trigger aa pg enqueuesetstate setstate onclose user code lt update htmldocumentthandledocumentclick user code htmldocumentd", "d": "8/2018"}, {"body": "test renderer support", "d": "8/2018"}, {"body": "nt please provide reproducing example", "d": "8/2018"}, {"body": "closing since reproducing case", "d": "8/2018"}, {"body": "close favor think real issue", "d": "8/2018"}, {"body": "gaearon reactart using nt think", "d": "8/2018"}, {"body": "nt support crossrenderer portals initial vision portals never implemented portals would mechanism put one renderer another", "d": "8/2018"}, {"body": "also filed bit concrete use case", "d": "8/2018"}, {"body": "component prepares array items within able render without keys using thanks ialexryan", "d": "8/2018"}, {"body": "somewhat related discussion also relevant", "d": "8/2018"}, {"body": "related sebmarkbage comment alternative might export something allows plugging custom reconciler reactdom renderer possible someone could create wrapper dom reconciler maintains idea component tree well passing everything underlying dom reconciler means representation component tree thirdparty developer rather inside react sure harder original suggestion depends bit coupled dom render dom reconciler", "d": "8/2018"}, {"body": "nt backport anything old majors except critical issues risky accidentally break havoc especially release process complicated two sidebyside codebases worth risk touching bug special quite regressions like hopefully fixed closing since reported fixed latest version react sorry could nt help", "d": "8/2018"}, {"body": "works thanks", "d": "8/2018"}, {"body": "seems working edge react still nt work react ie react edge react ie code sandbox example code sandbox editor nt support ie preview open ie", "d": "8/2018"}, {"body": "reopening track issue", "d": "8/2018"}, {"body": "quick tests indicate setting results loss behavior next thing want figure matters input attached page difference attributes attached adding dom", "d": "8/2018"}, {"body": "fixed", "d": "8/2018"}, {"body": "solution best offer nt think changing future", "d": "8/2018"}, {"body": "create reproducible example", "d": "8/2018"}, {"body": "future reference reproducing example js import react react import reactdom reactdom function index return reactdomrender documentqueryselector root splashes author referring occur click button click body several times quick succession", "d": "8/2018"}, {"body": "problem specific react also reproduces", "d": "8/2018"}, {"body": "polymer", "d": "8/2018"}, {"body": "hmm clearly issue testing appears codesandbox preview mode buggy need look previous conclusions might wrong", "d": "8/2018"}, {"body": "okay testing codesandbox really confusing code bundles think got minimal repro though js var btn documentcreateelement button btninnertext hi documentbodyappendchild btn documentaddeventlistener mousedown e gt etarget btn alert hi two things fix remove beginning flash gone change get even specific flash also gone seems like proper solution meantime probably work around adding mouse event listeners touch devices instead using touch event listeners sorry", "d": "8/2018"}, {"body": "seems minimal example reproduce issue strange happens whenever clickish seem work attached document add following css tap still grey even though button might turn red zooming also make disappear removing fix well gaearon pointed earlier try without codesandbox chrome using url downloading older ios versions see added", "d": "8/2018"}, {"body": "gaearon beat another workaround found", "d": "8/2018"}, {"body": "nt think would fix issue mount react app container big enough fill whole screen react apps probably add click listener container issue persists different non listeners though behavior always reproducible matter add use remove filed webkit issue behavior seeing seems inconsistent", "d": "8/2018"}, {"body": "want make client server space client performance issue nt good solution temporary mismatches sorry probably future", "d": "8/2018"}, {"body": "gaearon okay solved rendering root element child component ex instead component loading asynchronously", "d": "8/2018"}, {"body": "fixed biggest difference jumped differences dev eg react nt emit perf measurements default react fixed cost production get better next patch release includes presumably note general though nt recommend using many roots avoidable supported course makes react job difficult far see use method instead many calls performance significantly improves even version react currently published general think goal abstracting away react make difficult benefit reactspecific optimizations like time slicing future another thing consider thanks repro case", "d": "8/2018"}, {"body": "gaearon use createportal render method instead many reactdomrender calls react tests use calling many times use way test root component", "d": "8/2018"}, {"body": "difference significant enough matter tests", "d": "8/2018"}, {"body": "sorry closing nt think reason believe react encourage try vanilla dom apis react sets attribute broken reason nothing react fix", "d": "8/2018"}, {"body": "think paired react devtools issue", "d": "8/2018"}, {"body": "testing development version react representative production additionally react keeps reference previous tree one update released switching two views back guaranteed free tree however freed real application user click one checkbox many times reproduce memory leak production version complex scenario please file issue instructions thanks", "d": "8/2018"}, {"body": "going close nt seem like comes often", "d": "8/2018"}, {"body": "order siblings handled implementation detail suggest depend code", "d": "8/2018"}, {"body": "opening pr nobody minds", "d": "8/2018"}, {"body": "please go ahead", "d": "8/2018"}, {"body": "wow interesting bug digging minimal repro js import react component react import render reactdom class app extends component handlechange alert hi componentdidmount documentaddeventlistener click gt thissetstate true render return render documentgetelementbyid root", "d": "8/2018"}, {"body": "would fix nt think really solves underlying problem input tracking mechanism repro case uses regular inputs checkboxes js class app extends reactcomponent state value handlechange e gt thissetstate value etargetvalue componentdidmount documentaddeventlistener input gt comment line fix thissetstate true render return reactdomrender documentgetelementbyid container typing nt work unless comment call capture phase listener say input empty typing happens capture phase nonreact listener runs first rerendering due first empty input props still contain old value dom node value new equal set dom node value according props remember current value tries decide whether emit change event asks tracker whether value changed tracker compares presumably new set earlier stored also also updated changes update lost never get change event never actually get chance set correct state", "d": "8/2018"}, {"body": "reproduce going far back react", "d": "8/2018"}, {"body": "seem difference behavior though sure limited checkboxes inputs maybe different components", "d": "8/2018"}, {"body": "particular nt understand example end committing update even reconciling get complete phase expect bail maybe bail nt prevent complete phase running would explain wrapping fixes seems like generic problem fix js class counter extends reactcomponent state componentdidmount documentaddeventlistener click thisincrement true componentwillunmount documentremoveeventlistener click thisincrement true increment gt thissetstate render return hi class app extends reactcomponent handlechange val alert ok render return reactdomrender documentgetelementbyid container", "d": "8/2018"}, {"body": "split two issues generic issue existed forever probably nt worth fixing regression react causes happen often fix", "d": "8/2018"}, {"body": "particular regression fixed via get fix next patch", "d": "8/2018"}, {"body": "seems like address better", "d": "8/2018"}, {"body": "hydrating portals supported message nt make sense need investigate fix", "d": "8/2018"}, {"body": "gaearon purpose fix detects portal used hydrate throw properly error message invariant eg add test portal used hydrate throw error message right willing nt urgent planning ssr doc draft website repo familiar hydrate mechanism think investigation helpful plan", "d": "8/2018"}, {"body": "portals supported ssr even render nothing", "d": "8/2018"}, {"body": "seem like rendering nothing best see makes portal contents different consider worth server rendering likely come back together revamp server renderer suspense", "d": "8/2018"}, {"body": "portals conceptually clientonly components used things like modals one generally want render server also take dom element rendertostring dom see anything meaningful done server also see anything valuable throwing", "d": "8/2018"}, {"body": "used things like modals one use case also others like sidebars similar necessarily clientonly also take dom element right current design could change also see anything valuable throwing value throwing explicitly acknowledge portal wo nt work easily work around similar already kind checking determine whether get dom node point enough data choose emit portal", "d": "8/2018"}, {"body": "u dis", "d": "8/2018"}, {"body": "got lost discussion action item seems like question discussion stalled", "d": "8/2018"}, {"body": "think probably going overboard terms explanation specific issue seem like use case previous context api supported new nt said whole pattern could bad practice absolutely fine new api cover use case intentional change would good know case though", "d": "8/2018"}, {"body": "provide basic example old new api easier unless think really actionable issue", "d": "8/2018"}, {"body": "probably set value child tried initialisation valueupdaterinput component componentdidmount method would called every render surely valueupdaterinput would rerendered time nt understand part fires mount every render", "d": "8/2018"}, {"body": "sorry nt mean say rerendered meant initialised ie function create new instance component whenever called although writing thinking perhaps missing something react internals logic child inside parent render method would also reinitialised time render called", "d": "8/2018"}, {"body": "yeah literally answered already sorry taking time makes much sense coming back wisdom hindsight", "d": "8/2018"}, {"body": "haha problem yeah react create one instance element rendered place type key otherwise every single update would lose state every component", "d": "8/2018"}, {"body": "closing per nt seem like react could make choice", "d": "8/2018"}, {"body": "memorebolledo incorrect logo licensed creative commons attribution like documentation see also fb trademark guidelines hope helps", "d": "8/2018"}, {"body": "purpose requiring keys iterator array involved instance always exactly three children always order must react demand write", "d": "8/2018"}, {"body": "nt need three children write like jsx guarantees positions stable move react need keys case", "d": "8/2018"}, {"body": "react seems assumes arrays unstable need keys argue case example component may look react like unstable reality always constant true checkboxes want label checkbox false otherwise example optional trailing items example actually dynamic items ever added removed end would react need keys help update adding key component adds visual noise", "d": "8/2018"}, {"body": "ended overriding filter warning", "d": "8/2018"}, {"body": "qwertie confident array stable use exact mechanism suppress warning react uses jsx js export function label p return reactcreateelement label omit p labelattrs plabelafter pchildren labelspan p labelspan p pchildren warnings suppressed export function label p return reactcreateelement label omit p labelattrs plabelafter pchildren labelspan p labelspan p pchildren example actually dynamic items ever added removed end would react need keys help update adding key component adds visual noise sure next person working component idea constraint exists try avoid implicit assumptions react components silence warnings explicitly spreading children call know", "d": "8/2018"}, {"body": "sounds like browser bug sorry", "d": "8/2018"}, {"body": "aggridreact behavior problem cells", "d": "8/2018"}, {"body": "sorry never officially supported api reason starts", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "pass extra data apis say leave also recommend dispatching real browser events tests instead", "d": "8/2018"}, {"body": "fix", "d": "8/2018"}, {"body": "closing really portals focus reparenting issues", "d": "8/2018"}, {"body": "sorry post totally relevant another change causes inability use similar methods search tree composite components would recommend instead", "d": "8/2018"}, {"body": "sanfilippopablo see issue specific always explicit inheritance best method code reuse react already work functional components think something close spirit functional component sense makes sense work another change causes inability use scryrenderedcomponentswithtype similar methods search tree composite components mind filing separate issue take look sounds accidental", "d": "8/2018"}, {"body": "seems like leak", "d": "8/2018"}, {"body": "think asking existing tests reactdomserverintegration updated fail accurately testing happening serverclient identical behavior yep", "d": "8/2018"}, {"body": "hi everyone decided go first issue hope fine really happy take part small way first test demonstrates html output looks indeed mismatch branch referenced contains failing test maybe look result test timoruetten array generated html looks like server side invalid like client side believe two problems first timoruetten fully understand try insert invalid html parts children react nodes sure safe manipulate actual html tags rendered react rendered strings since string supposed inner html actually contain child nodes nt add whatever closing div tags missing string put react container need manipulate react use portals please correct wrong want give constructive criticism secondly think dangerous try parse incomplete html react react tries use prevent crosssite attacks client side seems html automatically cleaned end invalid html work safely make sense throw error html working properly hand html rendered serverside seems clean inner html could vulnerability crosssite attacks guess suggest either throw error make safer way client rendering gaearon define html generated end look attempt fix issue thanks lot", "d": "8/2018"}, {"body": "ooh completely missed inserted html invalid thank aliin explaining indeed unsupported ca nt possibly support client client nt construct html tree could nt work even wanted problem load html data database need replace special words real react components plan something like yeah nt think plan would work could instead leave special placeholders html eg js content content render second pass clientonly imperatively components comment node placeholders note need careful html never change client since otherwise next client update would wipe also need remember clean parent unmounts else get memory leak could consider format different html", "d": "8/2018"}, {"body": "sorry supported need keep parent type", "d": "8/2018"}, {"body": "jpkempf separate issue best something nt look like described issue title otherwise unsearchable thanks", "d": "8/2018"}, {"body": "gaearon sure problem created first issue hope everything fine", "d": "8/2018"}, {"body": "closing per lack follow", "d": "8/2018"}, {"body": "issue first creating dom node one document moving another one however react already bound event handlers first document react nt expect would move dom node documents something rendered would nt say bug react ca nt detect fix change code move node rendering something react like js class window extends reactcomponent constructor props super props thisstate win null el null componentdidmount let win windowopen windocumenttitle react portal window let el documentcreateelement div windocumentbodyappendchild el thissetstate win el componentwillunmount thisstatewinclose render const el thisstate el return null return reactdomcreateportal thispropschildren el", "d": "8/2018"}, {"body": "aweary mentionned synching issue field sync field blurred added consolelog figured etargetvalue etargetgetattribute value sync field blurred workaround add etargetsetattribute value etargetvalue force update value works expected", "d": "8/2018"}, {"body": "send pr look proposal", "d": "8/2018"}, {"body": "reported asynchronously since react correct reported synchronously looked test case tests fail use directly instead enzyme maybe enzyme issue reduce react please let know take another look", "d": "8/2018"}, {"body": "seems like got fixed", "d": "8/2018"}, {"body": "create deep copies nt expect using clone objects deeply deeply nested object models like might want consider using something like immer lets write code mutable manner using immutability behind scenes alternatively might want consider flattening object structure commonly called normalization good reasons example nt multiple copies data around keep flat cache like database tables hope helps", "d": "8/2018"}, {"body": "guess could specific benefits aside", "d": "8/2018"}, {"body": "get get delegation first place guess", "d": "8/2018"}, {"body": "fair enough curious going something particular", "d": "8/2018"}, {"body": "oh found analysing react code specific use case", "d": "8/2018"}, {"body": "ailrun thanks bringing created pr try seems work across browsers", "d": "8/2018"}, {"body": "garethsmall version issue using reactnative", "d": "8/2018"}, {"body": "sufficiently covered", "d": "8/2018"}, {"body": "think conceptual issue examples code works correctly one prop tree given time new registration name happens old registration removed wrong one ends removed tells problem using name registration key really want register unregister individual input individual name one solution could generate unique id input register input form pass unique id name unregistering importantly keep data form component keyed id rather name way order would nt matter even fields exists time input would read correct data actually need name eg form submission could enforce one field exist ignore first example even weird overlapping time new component mount old one nt unmounted yet mentioned unavoidable unlock future react features also reason nt recommend using especially mutations like mutations constructor also recommended alternative one thing could move registration way order one expect however first render field would data exists one way fix teach field something like first render would nt data parent yet read default data registration pass default data upwards thus registering form state seems like second solution line react works hope helps", "d": "8/2018"}, {"body": "current behavior intentional although escape hatches please see react expects rendered content identical server client patch differences text content treat mismatches bugs fix development mode react warns mismatches hydration guarantees attribute differences patched case mismatches important performance reasons apps mismatches rare validating markup would prohibitively expensive single element attribute text content unavoidably different server client example timestamp may silence warning adding element works one level deep intended escape hatch overuse unless text content react still attempt patch may remain inconsistent future updates intentionally need render something different server client twopass rendering components render something different client read state variable like set true way initial render pass render content server avoiding mismatches additional pass happen synchronously right hydration note approach make components slower render twice use caution remember mindful user experience slow connections javascript code may load significantly later initial html render render something different clientonly pass transition jarring however executed well may beneficial render shell application server show extra widgets client learn without getting markup mismatch issues refer explanation previous paragraph hope helps", "d": "8/2018"}, {"body": "bug please see explanation", "d": "8/2018"}, {"body": "thank clear", "d": "8/2018"}, {"body": "mainly due wrong importexport path change correct path error gone", "d": "8/2018"}, {"body": "yeah looks cause", "d": "8/2018"}, {"body": "fixed extra regression test", "d": "8/2018"}, {"body": "closing since nt seem come often also track docs issues", "d": "8/2018"}, {"body": "please direct api change proposals repository generally binding passing closure idiomatic way", "d": "8/2018"}, {"body": "seems like leak growth devonly expected", "d": "8/2018"}, {"body": "utilities general consistent also symptom lacking primitives features react typically solutions using flaws could implemented cleanly react allowed way call components say never willing change feels like backwards compatibility cost high clear worth compared creating idiomatic powerful ways address use cases speaking specific issue naming problem nt intended guarantee one child per se safe downcast intention arbitrary could use sure dealing element get runtime invariant handy cases component nt support dealing multiple children wants make explicit early case even passing singleitem array violation array might dynamic might discover length limitation deploying production handy able throw every array well anything else element gives perhaps would accurate name think ship sailed changing nt worth effort want provide better story fundamental flaws api eg ca nt see userdefined components unlike issue pointed ca nt worked around userland seem worthy address try avoid mistakes new apis though", "d": "8/2018"}, {"body": "recommendation something want unmount say pushing current timestamp last time object edited", "d": "8/2018"}, {"body": "meetbryce say one cancel code may potentially reference instance unmount instance timers network requests may reference component instance corresponding callbacks", "d": "8/2018"}, {"body": "hey pravi mentor issue exactly repro bug exactly fixed", "d": "8/2018"}, {"body": "still relevant point resuming add general resuming umbrella", "d": "8/2018"}, {"body": "nt block resuming nt think", "d": "8/2018"}, {"body": "restrictions like sound quite artificial note designed case one direct child component toggled work inside multiple conditional children requires one child rendered time try avoid introducing apis react work limited subset cases work others might seem nice first need change code little bit hit wall change whole approach instead prefer limited set apis work way circumstances learn apply techniques everywhere without tweak code whenever run limitation convenience shortcut approaches mentioned either lifting state parent component hidingshowing suffer limitations work regardless many children lifecycles also handled predictable way either get full unmount remount children state preserved parent children stay mounted way thus need special lifecycle calls consistent react works general require special behavior user switch pages pages refreshed status preserved sounds like recipe memory leaks keep components instantiated forever app keep eating memory navigate pages caching data alone would okay exactly react lets keeping component instances state sounds like would create problems app becomes complex point late fix app heavily relies pattern think want introduce apis encourage irresponsible memory usage react said definitely want make caching use case easier people rightly noted brining something like redux cache network responses overkill working something stay tuned announcements thanks everyone links discussion hope answer frustrating think react way might feel annoying used helper like also think used react bit appreciate explicitness control react gives case", "d": "8/2018"}, {"body": "fair enoughthank explanation gaearon understand everything trade offs", "d": "8/2018"}, {"body": "dev creates following component know think scenario dev nt fully understand tainting works would nt write code like tainting security hole idea tainting use key trusted inputs reason would trusted dev understood tainting wanted create reusable component accepts html prop would make accept object would consumer component specify object idea tainting able search codebase audit instance righthand side always safe nothing would guarantee would safe however safe object able pass around freely regarding react native gracefully degrade necessary dangerouslysetinnerhtml nothing sure see problem inconsistent inconsistency nt always obviously bad typically exposes fundamental problems api", "d": "8/2018"}, {"body": "think scenario dev nt fully understand tainting works always thought naming dangerouslysetinnerhtml bit heavyhanded nt mitigate developer incompetence decent developers understand injection let inexperienced andor bad developers make mistakes", "d": "8/2018"}, {"body": "let inexperienced andor bad developers make mistakes react needs accessible safe developers skill levels making easier less experienced developers introduce security issues bad users react community general", "d": "8/2018"}, {"body": "developers experience levels make mistakes especially data goes many layers hard say gets sanitized strong guarantees regardless let keep thread topic avoid turning debate usefulness scary naming", "d": "8/2018"}, {"body": "explain use case symbols useful keys", "d": "8/2018"}, {"body": "well kind simple really even na\u00efve perhaps since keys need unique application logic kind purposeless thought would nice using symbols always unique without even worry coming unique names", "d": "8/2018"}, {"body": "think misunderstanding purpose keys keys nt need unique globally need unique among siblings nt need unique avoid clashes something like need represent stable identity data iterating typically would come data customer id username see explanations need come unique names already available data every time iterate list something users rows items products comments posts able use ids items keys see practical use case allowing symbols except misunderstanding", "d": "8/2018"}, {"body": "another potential problem using symbols might obscure issues unintentional data duplication since two symbols never equal even value wo nt get useful key warning duplicate items even symbol inputs identical would also problematic users defined symbols keys inline would different every render would force react remount elementcomponent always use avoid problems would easy pitfall users", "d": "8/2018"}, {"body": "shipped", "d": "8/2018"}, {"body": "thank", "d": "8/2018"}, {"body": "thank", "d": "8/2018"}, {"body": "reference case helps someone got working adding note might nodejs installation filesystem owner indeed rather user perhaps root cause issue environment", "d": "8/2018"}, {"body": "calling npm commands sudo going get issues future instead need uninstall node reinstall making sure install sudo", "d": "8/2018"}, {"body": "next release", "d": "8/2018"}, {"body": "fixed slowyn", "d": "8/2018"}, {"body": "work around right calling hydrate remove amp reappend elements direct children head body bottom nodes sounds like workaround hesitant go specific proposal nt feel like fully understand pros cons however feel strongly right solution please file new issue pr detailed description heuristic work instead best worst cases nt think change behavior without comprehensive analysis", "d": "8/2018"}, {"body": "problem like application digging firefox console conclusion error came library reactdom method setvalueforstyles code seem code party library pass null argument nodestyle temporary solution add null checking code become like also min version still hand nt know build minfied version simple way", "d": "8/2018"}, {"body": "ported example react fiddle behaviour seems identical chrome safari firefox got confused mean worked correctly mean always worked incorrectly", "d": "8/2018"}, {"body": "versions incorrect behaviour", "d": "8/2018"}, {"body": "wonder could use one checks could something like however depends reporting number actually hard time figuring get number input accept commas even setting page language attribute suggestions", "d": "8/2018"}, {"body": "mistaken russian locale use commas maybe set system language russian", "d": "8/2018"}, {"body": "going start warning", "d": "8/2018"}, {"body": "made error message clearer thanks reporting", "d": "8/2018"}, {"body": "seems like issue think disable event emitter avoid situation reacttriggered change causes event triggers react change causes event etc maybe events still pass", "d": "8/2018"}, {"body": "seems like interaction tracking thing bvaughn building might better fit longer term", "d": "8/2018"}, {"body": "related links profiler rfc interaction tracking proposal profilerinteraction integration devtools profiler plugin", "d": "8/2018"}, {"body": "gaearon issue would possible beginner noticed good first issue label added difficulty medium love get involved react looks like great way want sure something would tricky first contribution", "d": "8/2018"}, {"body": "need access reproduce would nt expect bug complicated debugging pain", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "gaearon nt exist anymore fixed", "d": "8/2018"}, {"body": "going assume fixed since nobody followed", "d": "8/2018"}, {"body": "feel free grab nt know fixed worth checking", "d": "8/2018"}, {"body": "gaearon still open claim", "d": "8/2018"}, {"body": "krrishdholakia yes still grabs already fixed feel free start looking reach issues along way", "d": "8/2018"}, {"body": "checked earlier might wrong quite sure fixed earlier nhunzaker produces indicates symbols functions stringified still went ahead added warnings prop maybe useful", "d": "8/2018"}, {"body": "although seems behave differently sure intentionally functions get stringified appended text symbol crashes application reproducing", "d": "8/2018"}, {"body": "raunofreiberg thanks looking agree textarea behave", "d": "8/2018"}, {"body": "looks perfect thank much want followup task could work fix elements philippspiess mean working tag happy investigate well", "d": "8/2018"}, {"body": "whoops yeah select tag forgot escape html perfect thank", "d": "8/2018"}, {"body": "raunofreiberg remaining work know", "d": "8/2018"}, {"body": "input textarea select covered ca nt think form elements attributes might issue good", "d": "8/2018"}, {"body": "right thanks contributions", "d": "8/2018"}, {"body": "somebody please update attribute table run fixture save markdown file put folder", "d": "8/2018"}, {"body": "ack send new snapshot shortly", "d": "8/2018"}, {"body": "pr sent looks like ssr still needs covered textareas options", "d": "8/2018"}, {"body": "longer forked", "d": "8/2018"}, {"body": "appears fixed", "d": "8/2018"}, {"body": "hey guys still progress would happy take", "d": "8/2018"}, {"body": "benbakhar like please take look review see room improvement goes diegoborda isaacchien et al changes requested gaearon contributors love pass baton one", "d": "8/2018"}, {"body": "sorry dropped past months pretty intense", "d": "8/2018"}, {"body": "fixed", "d": "8/2018"}, {"body": "thanks worries glad officially done little bit make react better", "d": "8/2018"}, {"body": "seems like might browser issue closing someone reproduce consistently verified nt happen raw dom api please file new issue including code snippets tried", "d": "8/2018"}, {"body": "nt think release anymore", "d": "8/2018"}, {"body": "feel old", "d": "8/2018"}, {"body": "year ago", "d": "8/2018"}, {"body": "context latest thinking", "d": "8/2018"}, {"body": "looks like issue feel free report chrome", "d": "8/2018"}, {"body": "want kill hover events touch input ontouchstart trigger onmouseover stopimmediatepropagation cancels internal cascade could please provide example demonstrates", "d": "8/2018"}, {"body": "shuhei thanks great analysis", "d": "8/2018"}, {"body": "guess worked react inserted much derided comments around text nodes relied comments way hold onto node position even text node got replaced react nt care", "d": "8/2018"}, {"body": "nt think possible make react resilient arbitrary mutations scope resilient replacement text nodes maybe make work", "d": "8/2018"}, {"body": "posted proof concept", "d": "8/2018"}, {"body": "soo nt think fix react without making legitimate mistakes hard find making performance worse common cases talked google folks got issue filed affected please feel free star andor share details affects important get fixed finally workaround use fix error make app little bit slower try determine whether tradeoff worth equivalent react would fix react would nt better solution anyway workaround looks like js typeof node function amp amp nodeprototype const originalremovechild nodeprototyperemovechild nodeprototyperemovechild function child childparentnode console consoleerror remove child different parent child return child return originalremovechildapply arguments const originalinsertbefore nodeprototypeinsertbefore nodeprototypeinsertbefore function newnode referencenode referencenode amp amp referencenodeparentnode console consoleerror insert reference node different parent referencenode return newnode return originalinsertbeforeapply arguments run code rendering application note cause legitimate errors logged console opposed thrown sufficient work around issues google translate causing react google translate fixes gets traction hard tell able remove hack since nothing else see actionable closing hope helps", "d": "8/2018"}, {"body": "risk stupid nonperformant idea consider approach try normal insertbefore nt work check expected parent node contains descendant node confirmed step search tree ancestor element child expected parent node use element instead", "d": "8/2018"}, {"body": "welcome implement something like sure react overhead even small checks", "d": "8/2018"}, {"body": "ok see", "d": "8/2018"}, {"body": "epreventdefault worked synthetic events way works vanilla js native events believe issue would go away guess answer something synthetic events calling preventdefault synthetic event real event vanilla js calling synthetic event definitely call underlying native event difference react using event delegation attaches listeners document level", "d": "8/2018"}, {"body": "baharev quite confusing pushed workaround master cloned repository took figure need roll commits back reproduce", "d": "8/2018"}, {"body": "gaearon sorry apologies verdict issue", "d": "8/2018"}, {"body": "issue appears caused react using event delegation better performance attaching every handler example nodes see chrome respects event handler example using event delegation js html body width height lt p gt box width height margin touchaction none documentaddeventlistener touchstart e amp gt epreventdefault etargetremove documentaddeventlistener mousedown e amp gt etargetremove see chrome nt respect attached document might chrome bug please feel free file another report reproducing cases maybe intentional related nt fully understand browser intended behavior interesting attaching appears sufficient probably get resolved regardless workaround attach local event listener manually right spirit nt understand needs complicated react want touch dom manually use ref example fix using react ref api diff asrccomponentsappjs bsrccomponentsappjs const swallow e gt class tile extends purecomponent node reactcreateref constructor props super props thistoggle thistogglebind componentdidmount thisnodecurrentontouchstart thistoggle toggle e swallow e consolelog id thispropsid class tile extends purecomponent render return tile ref thisnode onmousedown thistoggle ontouchstart thistoggle ontouchend swallow gt note reused might confusing sometimes receives native sometimes synthetic event real code probably duplicate extract common logic outside hope helps close nothing directly actionable us workaround simple enough", "d": "8/2018"}, {"body": "gaearon perfect thank much detail explanation", "d": "8/2018"}, {"body": "yeah seems regression introduced", "d": "8/2018"}, {"body": "iamdustan end working around somehow", "d": "8/2018"}, {"body": "modern browsers including mobile versions support esm esm longer future module system current defactostandard please aware providing standardized module critical problem especially defactostandard web library typical code apply react libraries fact actually libraries imported instead party transpilers bundlers emulate import process slightly justified providing real esm since browsers supported native esm anyway obviously time time provide esm specified typical sample code", "d": "8/2018"}, {"body": "started working", "d": "8/2018"}, {"body": "trysound thanks contribution place grab test esm build", "d": "8/2018"}, {"body": "ready reactis package", "d": "8/2018"}, {"body": "trysound ok found branch built know meant looking forward", "d": "8/2018"}, {"body": "think react community discussed issue quite enough please decide official module specification publish soon", "d": "8/2018"}, {"body": "kenokabe way nt force us please easy", "d": "8/2018"}, {"body": "current plan migrating packages named exports change wo nt affect libraries code nt introduce breaking changes since docs uses named exports another packages need handle default named exports work differently various tools", "d": "8/2018"}, {"body": "trysound apologies nt mean since head mention topic ca nt quite easily nt really decided toplevel es exports would look like package example react bunch named exports also default export called react encourage people import better tree shaking day mentioned ago thought discussed react community wanted suggest decision would clear thanks", "d": "8/2018"}, {"body": "going start warning", "d": "8/2018"}, {"body": "good example might necessary interacting component interface provide way initialize values form component store input values state nt option callback returns jquery form object points iframe anyway way found initialize form manipulating inputs dom manually triggering react pick changes fwiw would agree problem reacthubspotform interface necessarily react leave thought provide context", "d": "8/2018"}, {"body": "meh think likely everybody using recent enough versions nt matter", "d": "8/2018"}, {"body": "cc gaearon happy try grabbing one yall still need someone work", "d": "8/2018"}, {"body": "sounds good looked yet proof concept would help conversation", "d": "8/2018"}, {"body": "wonderful putting queue ty quick response gaearon", "d": "8/2018"}, {"body": "likely wrong place ask question could nt get irc discord getting error running yarn root running node yarn went docs watched youtube video anyone point right direction getting project running machine osx", "d": "8/2018"}, {"body": "yarn sounds super old nt current version something", "d": "8/2018"}, {"body": "also using noscript tag project similar fashion stephenlast long page images lazy loaded ones lazy loaded coresponding noscript tag containing image tag target source google recommended way provide seo content lazy loaded images react hydration occurs looks like img tag within noscript tag gets executed image getting downloaded browser look network tab chrome see noscript wrapped images requested block react hydration rely ssr html noscript wrapped images get downloaded react components contain noscript tags attach child contents actual dom nodes", "d": "8/2018"}, {"body": "yes mere construction dom node causes browser preemptively download image download starts node even attached document therefore irrespective whether eventually become child element", "d": "8/2018"}, {"body": "adding case ssr fixture verified today jsx gt still works master jsx still broken way described unnecessarily downloads image also verified solution proposed comment adding indeed make second case work expected would still happy send pr including updated fixture might go ahead weekend better place discuss proposed solution", "d": "8/2018"}, {"body": "another case really annoying using material ui component renders nonnative mode want nothing selected immediately pops head instead nonintuitive time wasted petty little issues like really add sometimes find annoying major bugs like ernestopye suggestion would say ideal name prop rather input marked controlled even allow personally wish uncontrolled case optin via property", "d": "8/2018"}, {"body": "takeaway far changing semantics suggested comments thread reduce confusion think people come complaints valid ones thread unexpectedly treated differently obvious treating uncontrolled today confusing react today nt mean changing behavior make less confusing cost changing behavior high clear understandably frustrating agree core issue ambiguous clear means maybe one would like submit rfc prop alternative", "d": "8/2018"}, {"body": "nt use uncontrolled inputs struggling see ca nt changed comment sophiebits mentioned someone might use think safe say uncontrolled input defined afterall defaultvalue property mentioned uncontrolled components documentation gaearon scenarios think cause people complain gets changed use cases would break see facebook codebase somewhere", "d": "8/2018"}, {"body": "seems like solved concerns closing wrong please open focused rfc thanks", "d": "8/2018"}, {"body": "gaearon remaining question ambitious one deprecate ref prop entirely convinced unnecessary", "d": "8/2018"}, {"body": "think really considered important imperative escape hatch think necessarily tied host instances proposal completely removing refs custom components would need consider broad set use cases provide alternatives think proposal done", "d": "8/2018"}, {"body": "status one wish remove support reconciling iterables would include changes function", "d": "8/2018"}, {"body": "raunofreiberg want remove support treating functions iterables meaning literally function values iterator attached worked accidentally feel free pr", "d": "8/2018"}, {"body": "gotcha try start working thanks", "d": "8/2018"}, {"body": "fixed", "d": "8/2018"}, {"body": "sebmarkbage allowed direct access top hierarchy regardless component position either within hierarchy part separate packaged framework comparatively see problems slot solution solution assumes access position hierarchy ok bubble events definitely case components component frameworks assumes ok bubble events level hierarchy events still bubble slot position craigkovatch mentioned", "d": "8/2018"}, {"body": "also usecase probably similar ones already mentionned surface users select things mouse lasso basically widthheight root app use event surface also buttons open portals like modals dropdowns mousedown event inside portal actually intercepted lasso selection component root app see many fix problem render portal one step root lasso component convenient would probably need resort contextbased lib like reactgateway maybe slot system mentionned stop propagation manually inside portal root could lead unwanted sideeffects mentionned ability stop propagation react portals btw filter events come portal solution filter events js const approotnode documentgetelementbyid root const isinportal element gt isnodeinparent element approotnode clearly best solution us nice nested portals current usecase one currently works nt want add new context lib complex refactor solve wanted share solution", "d": "8/2018"}, {"body": "able accomplish blocking event bubbling noted elsewhere thread another seemingly thornier issue running syntheticevent bubble rather traverses common parent component component described means mouse pointer enters outside browser window every handler top dom component createportal triggered order causing sorts events fire never since nt bubble ca nt blocked portal level seem issue event respect virtual hierarchy sequence body content rather descended directly subtree anyone ideas prevent events propagating top dom hierarchy divert directly portal subtree please let know", "d": "8/2018"}, {"body": "reproduce think maybe clemmy missed using arrow keys part crucial reproducing", "d": "8/2018"}, {"body": "seems like browsers would better positioned nt mind taking pr kind way opt feel strongly though", "d": "8/2018"}, {"body": "seems like bvaughn upcoming devtools profiler help", "d": "8/2018"}, {"body": "sounds super interesting place progress followed", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "give idea widely supported", "d": "8/2018"}, {"body": "gaearon according supported major desktop browsers plans implement sure whether mark issue resolved nt use", "d": "8/2018"}, {"body": "thanks everyone still outstanding tests think close", "d": "8/2018"}, {"body": "condition looks like seems like addressed", "d": "8/2018"}, {"body": "johan right interesting little investigating looks like tests end depending whether testing input events level support safari chrome opera input events level support safari seems like react nt need distinguish purposes level test way go also level test seems bit fishy anyways", "d": "8/2018"}, {"body": "consider button sets disabled thisstatehassent onclick thisstatehassent null thissendmoney sendmoney sets hassent true product developer expectation onclick fire otherwise two fast clicks send money twice errorprone conceptual model example set disabled attribute checked flag onclick handler mean sufficient set disabled attribute also need check inside click handler prevent kinds click issues", "d": "8/2018"}, {"body": "thanks gaearon everyone learned lot following thread", "d": "8/2018"}, {"body": "fwiw since stopped using aggressive need instead use polyfill internally implemented top although conceptually still use idle work", "d": "8/2018"}, {"body": "ability set srcobject video element common webrtc applications sure even possible according docs mdn seems property object attribute html element proposal would mean react would add stream programmatically cool maybe bit beyond scope ui library cover", "d": "8/2018"}, {"body": "thanks seems like since solved improving message", "d": "8/2018"}, {"body": "craigkovatch someone working would probably post thread welcome propose solution outlined ideas maybe nt make much sense since looked somebody fresh perspective would probably make progress", "d": "8/2018"}, {"body": "think might plan try send pr soon", "d": "8/2018"}, {"body": "thanks dan sorry lack response proposal versed internals react nt feel competent comment", "d": "8/2018"}, {"body": "right merged fix think strikes reasonable balance giving control warning noise preventing accidentally swallowed errors specifically next react release likely wo nt log extra message three conditions true development mode dom environment error successfully caught error boundary called error custom event handler let unpack means adjust tests short summary new helper react starting react yet able suppress rendering errors tests using special helper variation technique put example wo nt generate warnings intentionally thrown errors use reactdom development mode jsdom environment however fail tests unintentionally thrown errors even silenced nested error boundaries helper sufficient reason eg using test renderer instead reactdom please keep mocking nothing wrong approach curious let guide works way current behavior react inclusively consider example js const react require react const reactdom require reactdom function darth throw new error father errors gt const div documentcreateelement div expect gt reactdomrender div tothrow father change older version jsdom one ships currently stable create react app output looks like pass srcapptestjs errors consoleerror error occurred component darth bad although warning bit annoying however still change gets worse update recent version jsdom jest update pass srcapptestjs errors consoleerror error uncaught error father reportexception lt gt promisethen processtickcallback consoleerror error occurred component darth see test still passing two annoying warnings let dig see emits warnings see two warnings first one coming jsdom second one coming react new jsdom warning great mimics browsers allows us report errors even accidentally swallowed component code example react error would swallowed react still surfaces user feature bug great jsdom good default tests especially application tests annoying libraries opt jsdom warning cases nt want see browsers opt calling custom event handler object js function onerror event note swallow reports unhandled errors use extreme caution eventpreventdefault windowaddeventlistener error onerror used extreme caution easy accidentally mute information important warnings granular approach use tests intentionally throw errors js const react require react const reactdom require reactdom function darth throw new error father let expectederrors let actualerrors function onerror e epreventdefault actualerrors beforeeach gt expectederrors actualerrors windowaddeventlistener error onerror aftereach gt windowremoveeventlistener error onerror expect actualerrors tobe expectederrors expectederrors errors gt expectederrors remember one error expected const div documentcreateelement div expect gt reactdomrender div tothrow father note using silence expected warnings however deeper component thrown error accidentally caught silenced test would still fail get extra unexpected error use approach make sure every call matching call intentionally put even test fails calls still always match alternative nt like use blocks test suite effectively silenced noisy jsdom warning still see component stack react pass srcapptestjs errors consoleerror error occurred component darth let see fix opt seeing react component stack note section work next react release likely still writing future reference component stack important print helps locate source error changed logic wo nt print stack error silenced described error handled error boundary example using error boundary see extra stack fix extracting method called uses error boundary js const react require react const reactdom require reactdom function expectrendererror element expectederror noop error boundary testing class testboundary extends reactcomponent constructor props super props thisstate diderror false componentdidcatch err thissetstate diderror true render return thisstatediderror null thispropschildren record errors let toplevelerrors function handletoplevelerror event toplevelerrorspush eventerror prevent logging eventpreventdefault const div documentcreateelement div windowaddeventlistener error handletoplevelerror try reactdomrender element div finally windowremoveeventlistener error handletoplevelerror expect toplevelerrorslength tobe expect toplevelerrors message tocontain expectederror suggesting copy paste helper every test probably best define project even put npm approach test simple js function darth throw new error father errors gt expectrendererror father mentioned beginning put helper feel free republish npm turn jest matcher etc conclusion hope helps sorry disappointing nt disable warning hope see rationale think extremely important prevent app developers accidentally swallowing errors even comes cost additional bookkeeping library developers want make assertions thrown errors finally approach nt work like clarify nothing bad mocking either time react suite written custom matchers assist perhaps want something similar lot tests around throwing errors react components cheers", "d": "8/2018"}, {"body": "banga done investigation conclusion far trouble worth point may revisit point later", "d": "8/2018"}, {"body": "stale", "d": "8/2018"}, {"body": "skrpk work updated reactrouter extra configuration", "d": "8/2018"}, {"body": "romeofolie hi looks like reactrouter bug related prop types working reactrouter stackoveflow reactrouter issue think jsx indexjs import react react import reactdom reactdom import provider reactredux import createstore applymiddleware redux import router browserhistory reactrouter import reducers reducers import routes routes const createstorewithmiddleware applymiddleware createstore reactdomrender documentqueryselector container jsx routesjs import react react import router indexroute reactrouter import app componentsapp export default works", "d": "8/2018"}, {"body": "nt seem like strong evidence react issue rather firefox bug something happens react nt happen vanilla dom please file another issue vanilla dom example demonstrating issue specific react thanks", "d": "8/2018"}, {"body": "filed issue firefox nt think react anything wrong browsers appear consistent even including jsdom", "d": "8/2018"}, {"body": "aweary know actively worked looks like could good first issue get teeth", "d": "8/2018"}, {"body": "worked sure", "d": "8/2018"}, {"body": "cheers gaearon able point right direction files looking error logging functions react uses etc problem look around", "d": "8/2018"}, {"body": "probably relevant", "d": "8/2018"}, {"body": "thought could reproduce past ca nt manage even close figure reproducing case please share thanks", "d": "8/2018"}, {"body": "hmm reproduce add pressure replacing html const component react const render unstabledeferredupdates deferredupdates reactdom let lastlogged class foo extends component constructor super thisbar thisstate thing onwheel e gt thisbar const bar thisbar deferredupdates gt thissetstate prevstate props gt lastlogged amp amp lastlogged bar throw new error oops lastlogged bar return thing mathrandom componentdidmount setinterval thisonwheel render return div style background red gt inner onwheel thisonwheel style height gt wheel real fast class inner extends component onwheel e gt epreventdefault thissetstate otherthing mathrandom thispropsonwheel render return div style width height background red onwheel thisonwheel gt thispropschildren render documentqueryselector container also reproduce nt manage reproduce recent versions assume got fixed whatever", "d": "8/2018"}, {"body": "going close nt sufficient details proceed issue isolated deprecated driver worst case scenario acceptable tradeoff better longterm stability", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "ca nt reproduce chrome emitting events outside window dom elements way get working handler top level ca nt make toplevel handlers react least currently without code examples hard understand issue discussed", "d": "8/2018"}, {"body": "nhunzaker found able create iframe use ref mount something onto however running issues submitted form form disappears unless disabled default action subsequent nt getting iframe submission messages sent help much appreciated", "d": "8/2018"}, {"body": "played around bit fixture awesome btw starting think need load completely new page instead using portal seems like something gets hung form submitted messes history think ideally use main fixtures page navigate back forth iframe contents totally different document might require deeper changes fixtures time wonder could vet idea creating static framehtml public directory pulled latest react umd modules", "d": "8/2018"}, {"body": "see give try mean fixture test would embedding actual iframe url fixture test somehow mount react form", "d": "8/2018"}, {"body": "mean fixture test would embedding actual iframe url framehtml fixture test somehow mount react form framehtml yes like could host document time anyway", "d": "8/2018"}, {"body": "confusing sentence still exists latest docs", "d": "8/2018"}, {"body": "send pr please", "d": "8/2018"}, {"body": "gaearon may send pull request", "d": "8/2018"}, {"body": "tested", "d": "8/2018"}, {"body": "thanks", "d": "8/2018"}, {"body": "current plan unify", "d": "8/2018"}, {"body": "nt see anymore react seems like works", "d": "8/2018"}, {"body": "acdlite createroot api close", "d": "8/2018"}, {"body": "warning warning happening avoid warning thanks", "d": "8/2018"}, {"body": "mqliutie ca nt help without reproducing case", "d": "8/2018"}, {"body": "likely means empty client empty server", "d": "8/2018"}, {"body": "gaearon thanks reply right fault", "d": "8/2018"}, {"body": "mondwan gaearon like grab one looks bit stale still needed love take crack", "d": "8/2018"}, {"body": "sure feel free look note obvious fix nt actually solve problem want extra steps production", "d": "8/2018"}, {"body": "seems like issue chrome made breaking change broke us workaround attach event listener directly node via ref example linked issue diff asrccomponentsappjs bsrccomponentsappjs const swallow e gt class tile extends purecomponent node reactcreateref constructor props super props thistoggle thistogglebind componentdidmount thisnodecurrentontouchstart thistoggle toggle e swallow e consolelog id thispropsid class tile extends purecomponent render return tile ref thisnode onmousedown thistoggle ontouchstart thistoggle ontouchend swallow gt attach listener manually would work longer term fix since workaround exists particular issue actionable us close favor would solve longer term", "d": "8/2018"}, {"body": "got feedback nt clear enough problem chrome made breaking change documentlevel listeners nt work anymore react binds events document level better performance react nt currently work work around attaching listener individual node level refs showed previous comment longer term plan change react attach events root container level instead document level anyway implement problem go away workaround ref manual listener work fine", "d": "8/2018"}, {"body": "indiesquidge believe still controlled component note still green hopefully everything saying correct difference function update component state inline function since nt middle step altering input fairly straight forward inline function understanding component holds state intent pass state submit eg form controlled component nt think using vs going provide much difference field going used say posting info server component state simply referencing part component state nt data stored state purpose uncontrolled component use instead uncontrolled component however functionality see losing using refs ca nt easily provide form validation onthefly probably benefits using controlled component aware well", "d": "8/2018"}, {"body": "please file issues documentation longer tracking main repository discussion read anyone team thank", "d": "8/2018"}, {"body": "anyone else experiencing issue nashorn would best make sure scriptengine invocation wrapped syncronized block avoid issues multithreaded access nashorn engine", "d": "8/2018"}, {"body": "dam dude worked", "d": "8/2018"}, {"body": "nt need workaround react later supports ref forwarding", "d": "8/2018"}, {"body": "object refs landed solve inconvenience cases", "d": "8/2018"}, {"body": "encountering today reactrouterdom links work fine back button broken ui nt change maierson solution fixed seems like bug needing documentation packages edit packages", "d": "8/2018"}, {"body": "discussion turning react router discussion issue react therefore lock avoid confusion problem react router please bring repository support forums use issue tracker bugs react", "d": "8/2018"}, {"body": "unfortunately webpackbin appears ca nt reproduce regardless seems like niche bug people report take look", "d": "8/2018"}, {"body": "gaearon bestpractice documentation somewhere code runs needs node attached document eg seems settimeout probably right approach actions taken ref callback instead", "d": "8/2018"}, {"body": "ref callback wo nt help either react manages dom respect container pass react point view moment dom attached container react job done react ca nt know node attached document something code thus control could attach calling react always document time ref callback fires could attach later imagine case one knows gets attached attaching best way add callback queue notify attach container hope helps", "d": "8/2018"}, {"body": "going close duplicate appreciate extra details issue include original issue", "d": "8/2018"}, {"body": "fixed", "d": "8/2018"}, {"body": "ca nt reproduce anymore whether react draft chrome bug seems like got fixed", "d": "8/2018"}, {"body": "came upon issue upgrading enzyme enzyme anyone experiences upgrading enzyme fixed disabling testing lifecycle methods", "d": "8/2018"}, {"body": "similar problem changed code change state input got replaced new one loosing focus old input problem wrote custom form component cloned child inputs via however suggested prop works fine still wonder solution could look like would keep eventual inputs place", "d": "8/2018"}, {"body": "case fetch content cms contains html forms forms displayed part react application inputs nt work issue html forms directly appended words iframe ca nt use iframe workaround react ignore attribute thank much help advance", "d": "8/2018"}, {"body": "nt understand displaying html react encounter issue share small example", "d": "8/2018"}, {"body": "sure nevertheless seems like something library use parse html content freezes input hand using method everything works perfectly know third party library maybe help get idea happening anyways fault saying code nt work issue sorry setting fire", "d": "8/2018"}, {"body": "nevertheless seems like something reacthtmlparser library use parse html content freezes input seems like nt use controlled attribute instead convert please file issue thanks", "d": "8/2018"}, {"body": "tried get around using state used class variable state would recreate children hence typing resulted superslow recreating children props change found good way get around problem using new valuescontext form field inside valuecontextconsumer recreate via clone props values changes", "d": "8/2018"}, {"body": "sorry hard understand problem short description solution helped without specific code examples confuse future readers see specific bug react please file new issue reproducing example lock avoid future confusion", "d": "8/2018"}, {"body": "anybody finding thread still problem react helpful comment related rfc seems exactly looking similar eliseumds proposing note current behavior keep current content content set different combination produces desired behavior already", "d": "8/2018"}, {"body": "long time updated description issue provide coherent description proposal", "d": "8/2018"}, {"body": "could comment reason close", "d": "8/2018"}, {"body": "hey ran problem google send instead stackoverflow everyone ending issue hope could help someone additional information problem number inputs", "d": "8/2018"}, {"body": "remaining issues sufficiently covered linked issues", "d": "8/2018"}, {"body": "removing fixed", "d": "8/2018"}, {"body": "experience please file new issue complete reproducing example commenting closed issue helpful nt track thank", "d": "8/2018"}, {"body": "going start warning", "d": "8/2018"}, {"body": "bvaughn could optional enhancement interaction tracking eg dev mode", "d": "8/2018"}, {"body": "sorry enhancement suggesting", "d": "8/2018"}, {"body": "could attach every time new work begins happens interaction lets us track stack trace things happened put break point render trace commits display stacks caused commit happen first place", "d": "8/2018"}, {"body": "ah suggesting could add stack field interaction dev mode make use info somehow sources tab integration seems tricky since might multiple interactions active update store interactions individual least assuming pr lands asis would nt good way knowing interaction caused render misunderstanding something", "d": "8/2018"}, {"body": "getting error quite frequently whenever component removedunmounted", "d": "8/2018"}, {"body": "said every comment thread error symptom another real error code swallowed code example due incorrect promise handling point say easiest way fix upgrade react react errorresilient point real error earlier code react going lock actionable items us", "d": "8/2018"}, {"body": "seems like nt fixed need figure thought fixed", "d": "8/2018"}, {"body": "might mismatch originally referenced issue focused password reveal icon", "d": "8/2018"}, {"body": "believe works edge still confirming need step away bit found setup fixture issue getting remember password flow made test fixture case associated diff holds true master react react additionally issue triggering password flow luisrudge example also see passwords saved manager", "d": "8/2018"}, {"body": "looks like already came conclusion work tracked issue", "d": "8/2018"}, {"body": "misterblblbl please file new issue problem still relevant tracking closed issues thanks", "d": "8/2018"}, {"body": "happening", "d": "8/2018"}, {"body": "shallow renderer nt supposed trigger method usually touches dom would nt work without dom", "d": "8/2018"}, {"body": "meh", "d": "8/2018"}, {"body": "yeah react bug think problem create synthetic event awaiting fix react devs", "d": "8/2018"}, {"body": "bug discussed avoid confusion locking issue experience bug react please file new issue reproducing example thanks", "d": "8/2018"}, {"body": "problem react", "d": "8/2018"}, {"body": "file new issue details please thanks nt track closed issues", "d": "8/2018"}, {"body": "believe correct behavior looks like html specification chrome adopted march source spec submitting detached form yields following warning speculate security reasons nt found definitive answer still attempted modern version react yield exact warning react presently appears consistent htmljs approach html specification closing please let know missed something", "d": "8/2018"}, {"body": "really better name reason compatibility js libraries automatically add dblclick events like ca nt use doubleclick zoom react nt allow property dblclick tag", "d": "8/2018"}, {"body": "think might confused something whether react uses specific event name nothing library would react uses event delegation better performance nt literally attach event listeners every node anyway file new issue runnable code example demonstrates problem happy look", "d": "8/2018"}, {"body": "locking prevent confusion experiencing problem related please file new issue runnable code example discuss thanks", "d": "8/2018"}, {"body": "far understand supported closing please let know missed something", "d": "8/2018"}, {"body": "got rid fbjs actually seem prefer scripts watching seems like might complicated pipeline maybe worth", "d": "8/2018"}, {"body": "fwiw mention using input type rather allows many benefits brings without many drawbacks illustrated using still allows mobile phones display number pad input little closer semantic truth text obviously still ideal way overcome usage", "d": "8/2018"}, {"body": "sure suggested already makes sense anyone however would make passing options natural way would also match addeventlistener schema", "d": "8/2018"}, {"body": "moving towards phaistonian suggestion would remove need handlers exist today", "d": "8/2018"}, {"body": "alexreardon really think option since plain js expression evaluates construction mean would require changing way jsx compiles js would breaking change doubt react team would go route opinions", "d": "8/2018"}, {"body": "regarding expression could done differently intention probably lot options options include js import handler react ontouchstart handler listener options", "d": "8/2018"}, {"body": "like idea passing object though either way needs solution", "d": "8/2018"}, {"body": "solution yet", "d": "8/2018"}, {"body": "solution yet classic respectively yep sucks", "d": "8/2018"}, {"body": "anyone update us progress nt see updates means updates agree would great solve write proposal work migration steps would would help move progress forward", "d": "8/2018"}, {"body": "", "d": "8/2018"}, {"body": "gaearon would mind add tipsreasons explain", "d": "8/2018"}, {"body": "made codepen recapexplain going gaearon sophiebits let know forgot something", "d": "8/2018"}, {"body": "agree testutils limitations nt great encourage try something like reacttestinglibrary instead sorry nt better solution nt fully understand trying get dom node point getting react instance search dom node might well search input directly first dom node got something like regardless think might add better testonly traversal api reactdom point would solved probably worth adding churn current api replacement meantime reacttestinglibrary really nice might work better", "d": "8/2018"}, {"body": "fork fiddle used instead", "d": "8/2018"}, {"body": "nt necessarily want dom element coresponding custom editor like able find rendered component instance overview rendered row component instance cell sfc locate test api divcell customeditor component instance like able find div test api run assertions use locate inner customeditor component instance check props simulate event etc ui hierarchical expect able traverse like basic react test api built entire suit helpers similar reacttestinglibrary enzyme top works fine pretty fast thing keep fighting issue regardless thanks reply appreciate someone taking time look btw codepen gives right", "d": "8/2018"}, {"body": "indeed docs indicate expected behavior nt know sure historical context behind guess done maps intuitively engineers tend use events disagree rationale please file new issue change proposal close nt seem bug", "d": "8/2018"}, {"body": "resources allow setting use modern javascript modulesfeatures", "d": "8/2018"}, {"body": "leaving reference similar question nt get much attention took find discussion want crosslink edit nt seem happen long object state onelevel deep ie use js object contain class tsx import component react import react react export class app extends component render return class foo constructor text thistext text get value return thistext interface istate foo foo class main extends component lt istate state istate foo new foo componentdidmount thissetstate foo new foo react render consolelog thisstate return thisstatefoovalue", "d": "8/2018"}, {"body": "issues described collections iterated multiple times likely related react devonly validations nt frequently requested feature hesitant adding explicit support specific library data structures cost users pay even would better rfc like write formal rfc please thanks", "d": "8/2018"}, {"body": "however solve issue really want less hacky way passing controlled input", "d": "8/2018"}, {"body": "agree jimfb null items valid taken childrenmap function map function childrenmap function looping though specific children list apply function child map responsible rendering something formatting children list developers reactjs users may need render null children differently null children mean null doest always mean rendered may rendered differently forexample element valid element null element valid element valid element null element valid opinion bug works intended web developers take account design solutions accordingly example initial snippet yordis", "d": "8/2018"}, {"body": "agree value removing nulls remove nulls already use nt believe worth churn change given many people may code relies current behavior general nt see best practice going forward since hard make use without reimplementing lot rules react hand inevitably making apis nt consistently work expected going forward hopefully document alternatives like createcontext closing", "d": "8/2018"}, {"body": "never mind actually right function instance different pass null old one component new one nt read whole thing curious js engine leaked passing passed", "d": "8/2018"}, {"body": "reference problem cases like js class foo extends reactcomponent whenwehavethediv div gt divqueryselector foo something render return simply intuitive called per reference really need clean touching dom", "d": "8/2018"}, {"body": "trusktr nt read whole thing curious js engine leaked passing null null passed believe already filed two issues year ago responded long form explanation exact question add already said code example last comment seem like needs use ref callback use object refs introduced react lifecycle hook note would work element ref returned unconditionally render otherwise still use null checks ref unmounts hope helps", "d": "8/2018"}, {"body": "constructor props super props use", "d": "8/2018"}, {"body": "somebody please help understand problem strictly extra calls middle get incorrect value end", "d": "8/2018"}, {"body": "test fix attempt passes remove assertion number times called suppose issue extra calls", "d": "8/2018"}, {"body": "extra onchange calls getting incorrect value end seems like oncomposition problem", "d": "8/2018"}, {"body": "crochefluid create failing test similar tried test incorrect value", "d": "8/2018"}, {"body": "gaearon gon na try try test safari macios", "d": "8/2018"}, {"body": "node test encodes sequences captured different browsers devices please see source need add sequences failing", "d": "8/2018"}, {"body": "hit surprised find normalized react", "d": "8/2018"}, {"body": "possible normalize unfortunately viable approaches timeout based caveats failure cases probably marked similar really nt anything react practically generally avoid individual usecases app specific workarounds approach outlined generally works deal timeout", "d": "8/2018"}, {"body": "jquense ie least sets blur events fire wrong using available", "d": "8/2018"}, {"body": "craigkovatch interested topic pulled exactly trick recently make work ie basically uses ie otherwise", "d": "8/2018"}, {"body": "possible normalize unfortunately viable approaches timeout based caveats failure cases probably marked wontfix similar really nt anything react practically generally avoid sure need reiterate topic issue normalizing would impossible issue browser supporting trying normalize like obsolete versions firefox issue ie support problem react binds wrong event react listens events nt instead proper events request never asked react attempt polyfill something nt available asked react listen correct event already code targeting handle discrepancy gotten worse time knowledge firefox fixed issue implemented removing issue one browser supporting resulting browsers supporting however stuck around yet nt work react despite like browsers notable userbases supporting", "d": "8/2018"}, {"body": "well chrome input type date pop date selector produce correct valid date still get onchange event using version react", "d": "8/2018"}, {"body": "experience problem please file new issue reproducing example nt track closed issues enough open ones likely unrelated original problem creates confusion", "d": "8/2018"}, {"body": "locking stale many things thread might changed since issue filed welcome file new one long provide specific code example nt work browser details look try fix thanks", "d": "8/2018"}, {"body": "sounds like ended different model suspense cache context cache might get support subscriptions track remaining work suspense also provide subscription package isolated cases", "d": "8/2018"}, {"body": "issue closed need fix bug used ugly hack simulate synthetic event", "d": "8/2018"}, {"body": "devbazilio file new issue please describe problem detail thanks posting stale issues helpful", "d": "8/2018"}, {"body": "wanted add use case redux store data along data fetched error etc component requires error prop display error user data could nt fetched null data loaded successfully populated error", "d": "8/2018"}, {"body": "passing loader component nt want render loader pass afaik function return instead rendering anything passing value looks like correct way", "d": "8/2018"}, {"body": "ca nt first way", "d": "8/2018"}, {"body": "avoid breaking anything could", "d": "8/2018"}, {"body": "like know well case change state render called component child component invoke render parent componentdidupdate never fired file real dom actually changed fire postrender whether real dom changed fyi real dom change method never called inquiring minds want know", "d": "8/2018"}, {"body": "flyingace pointed clarification docs seems reverted issue reopened", "d": "8/2018"}, {"body": "issue documentation please file documentation repository somebody else address reading closed issues hard enough keep open ones feedback unfortunately going void thank", "d": "8/2018"}, {"body": "almost year new firefox esr old one still worth", "d": "8/2018"}, {"body": "probably worth current browsers fine", "d": "8/2018"}, {"body": "quantuminformation", "d": "8/2018"}, {"body": "tend agree using sin want support least give warning user", "d": "8/2018"}, {"body": "like using important makes feel like code important lol", "d": "8/2018"}, {"body": "trying use important background colors print using chrome maybe better way nt found \u30c4", "d": "8/2018"}, {"body": "nt want load full cssinjs solution minimal implementation codesandbox gist technique breaks certain input also would touch simpler modified wrapped element dom property using set apis rather target css allow inlinestyle overrides properties", "d": "8/2018"}, {"body": "like others ran trying build reactpowered widget used third party sites spent couple hours super confused one point styles would work soon threw disappeared frustrating", "d": "8/2018"}, {"body": "fine approach compared solution gaearon suggested js export default function checkbox props const setcheckboxref checkbox gt checkbox checkboxindeterminate propsisindeterminate return checkboxproptypes isindeterminate proptypesbool checkboxdefaultprops isindeterminate false", "d": "8/2018"}, {"body": "yes fine", "d": "8/2018"}, {"body": "simple", "d": "8/2018"}, {"body": "example person people share similar interfaces makes easier mix stateful stateless components means less work decide convert one type component yes often start stateless component function later find need convert stateful component class findreplace thisprops becomes bit tedious able write method component class using interface stateless component would super nice", "d": "8/2018"}, {"body": "see discussion left response understand inconvenient going address however use particular solution", "d": "8/2018"}, {"body": "mentioning probably related", "d": "8/2018"}, {"body": "update issue", "d": "8/2018"}, {"body": "update issue updates would issue please nt post nt anything meaningful add spamming everyone subscribed issue thanks", "d": "8/2018"}, {"body": "also raised issue dev sure going fixed fix unfortunately nt coordinated react team nt aware chrome ios sets property accidentally happened trigger change handler past versions nt intentional side support already made change removed behavior nt aware chrome started relying working browser adding reactspecific hack please make sure loop somebody react team", "d": "8/2018"}, {"body": "wanted", "d": "8/2018"}, {"body": "nt know still relevant able solve issue keeping track carat position updating necessary note may may compile asis pasted complex component whittled mostly bare essentials show works import react react class input extends reactcomponent static defaultprops shouldcommitvalue value gt true example disallowing certain types strings bet set value example limit input valid css selectors", "d": "8/2018"}, {"body": "think guys realized managed using react refs necessary use statefull component need use callback function updated state javascript class app extends component class custominput extends reactcomponent constructor props super props thisstate cursor", "d": "8/2018"}, {"body": "acusti possible resolved merger", "d": "8/2018"}, {"body": "yes indeed issues refers previous uses global objects", "d": "8/2018"}, {"body": "woooooo cheers closing year old issue", "d": "8/2018"}, {"body": "looks like issue still exist using tag nest issue fixed replacing container", "d": "8/2018"}, {"body": "experience something similar three years later original issue closed sure different unrelated issue please file new one nt keep track closed issues feedback unfortunately going void filing new issue please provide reproducing example using dangerouslysetinnerhtml tag nest sounds like browsers work ca nt nest react warns except case react ca nt validate", "d": "8/2018"}, {"body": "modernized version example given class bigbutton extends reactcomponent childhandleclick e gt alert big button clicked thispropsonbigbuttonclick render return class parent extends reactcomponent parenthandleclick gt alert parent clicked render return", "d": "8/2018"}]