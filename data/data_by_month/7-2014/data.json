[{"title": "nt add toplevel events uncontrolled inputs", "body": "documentwide handlers native events perform synthetic event dispatch execute milliseconds machine realize nt seem like much time really trying shave nonessential source latency typing cursor movement atom every little bit helps disabling synthetic events saving latency keystroke fork added ability add property native event opt synthetic dispatch interested official mechanism opting feature certain event types even better perhaps react could maintain cache event types actually listened bail soon possible handling event", "num": "1964", "d": "7/2014"}, {"title": "reacttextcomponent string props clashes clonewithprops", "body": "effect seen gist uses reactbootstrap relevant excerpts source trying fix boostrap lib seem like bit gotcha anyway documented way decide safe supposed work current descriptor scheme things", "num": "1962", "d": "7/2014"}, {"title": "transitiongroup nt call willenter correctly child callback immediate", "body": "code outputted instead one missing works correctly uncomment", "num": "1959", "d": "7/2014"}, {"title": "error thrown definemanymerged duplicates sucks", "body": "mergeobjectswithnoduplicatekeys tried merge two objects key understandably general given used merge couple things actual use case shh used mixin component return object key make error mention something methods people idea look instead coming irc rightfully confused", "num": "1957", "d": "7/2014"}, {"title": "key event issues", "body": "documents things confusing seemingly broken around key events let fixclarify things cc syranide salier", "num": "1955", "d": "7/2014"}, {"title": "nit jsx command adds trailing whitespaces compiled files", "body": "happens using least possibly others js jsx reactdom var trailing space compiles js jsx reactdom var foo p bar trailing space added qux null please ignore invalid comment syntax added highlight issue unwanted trailing spaces easily mess use vcs probably good practice version compiled files sometimes nt option could use another tool chain cleanup tbh seem obvious jsx compiler nt add trailing spaces compiled files", "num": "1954", "d": "7/2014"}, {"title": "transitiongroup wrapper interferes component refs", "body": "hello encountered unexpected behaviour wrapping list items refs eg refs longer found component unless wrap item extra element eg problem seems occur works fine created test wrapper component also worked please see attached fiddle contrived example focus new list item click button many thanks brendan", "num": "1950", "d": "7/2014"}, {"title": "transitiongroup buggy null children", "body": "feel like million issues seems like switching nt perform exit animation two components probably", "num": "1949", "d": "7/2014"}, {"title": "functions statics get chained duplicate keys", "body": "logs js var statics moo function consolelog var x reactcreateclass mixins statics moo function consolelog b render function xmoo seems weird inconsistent behavior nonstatic functions change give error", "num": "1947", "d": "7/2014"}, {"title": "iscomponentoftype missing", "body": "reactaddonstestutils seems missing iscomponentoftype still documented alternative", "num": "1946", "d": "7/2014"}, {"title": "investigate returning arrays flattenchildren small lists children", "body": "transitjs map implementation uses arrays store mappings small numbers keys sounds like give performance benefits cases swannodette transit map set faster object set probably worth investigating whether performance gains get adopting similar strategies related transit source", "num": "1945", "d": "7/2014"}, {"title": "unnecessary reflow due setstate componentwillreceiveprops", "body": "see mailing list post reproduced convenience following reduced test case jsfiddle unnecessary reflow javascript var input reactcreateclass getinitialstate function return text thispropstext componentwillreceiveprops function nextprops thissetstate text nextpropstext render function return reactdomdiv null thisstatetext var app reactcreateclass getinitialstate function return value foo render function var return reactdomdiv null reactdominput value thisstatevalue onchange function e thatsetstate value etargetvalue input text thisstatevalue reactrendercomponent app null documentbody screenshot timeline tab chrome dev tools showing reflow equivalent implementation jsfiddle using reflow javascript var input reactcreateclass render function return reactdomdiv null thispropstext var app reactcreateclass getinitialstate function return value foo render function var return reactdomdiv null reactdominput value thisstatevalue onchange function e thatsetstate value etargetvalue input text thisstatevalue reactrendercomponent app null documentbody", "num": "1940", "d": "7/2014"}, {"title": "running two copies react page give errors use id", "body": "maybe something smarter root index generation client side seems like work", "num": "1939", "d": "7/2014"}, {"title": "jsxtransformer provide event script fully loaded", "body": "page mixed jsx script use jsxtransformerjs js script jsx script get loaded js script refer react classes created inside componentjsx appjs workaround rename appjs appjsx jsxtransformer kind even callback called jsx script loaded ready used", "num": "1938", "d": "7/2014"}, {"title": "objectassign polyfill included", "body": "see commit introduced method however nt appear anywhere latest release version result unable glob jsx attributes following", "num": "1935", "d": "7/2014"}, {"title": "speed min builds", "body": "minifiying twice thanks need remove dead requires also nt minify way still need well nt actually looked see better way", "num": "1933", "d": "7/2014"}, {"title": "perfprintwasted prints newly inserted dom nodes list waste time", "body": "first attempt show bug found weird behavior show time wasted user click action nt know one show wasted time use shouldcomponentupdatetrue see time waste grows list size well number instances table finally demonstrate problem see implemented correctly shouldcomponentupdate time add new element list considered waste time table always show instance one got inserted problem app dealing paginated list loading items server user scrolls nt think newly inserted node printed", "num": "1931", "d": "7/2014"}, {"title": "checkedlink documented", "body": "checkedlink seems used data binding checkboxes really documented except release note makes hard find useful information using checkboxes quite common", "num": "1930", "d": "7/2014"}, {"title": "support element svg", "body": "could really useful order perform animations svg elements based reactive state updates plan support", "num": "1928", "d": "7/2014"}, {"title": "repo components", "body": "hello love react sometimes difficult search readyforuse components built react want share community new supercool component possible make package manager components cool jquery tonns plugins nt place searching installing etc people try reinventing wheel already exists job better", "num": "1927", "d": "7/2014"}, {"title": "docs better body font choice", "body": "issues make docs hard read high color contrast lack contrast exacerbated thin sansserif font choice body thin sansserifs used fancy headings still ca nt see shit even zoom cause font god damn thin lack typography choices sansserifs everywhere everywhere like looking bowl oats use serif font body text georgia acceptable palatino linotype exceptional afford", "num": "1926", "d": "7/2014"}, {"title": "reactaddonsupdate return input object replace value", "body": "code shows problem var root prop propvalue nested nestedprop nestedpropvalue var rootcopy reactaddonsupdate root nested set rootnested var reactaddonsupdate root nested nestedprop set rootnested consoledebug root rootcopy root rootcopy consoledebug rootprop rootcopyprop rootprop rootcopyprop consoledebug rootnested rootcopynested rootnested rootcopynested consoledebug root root rootcopy consoledebug rootprop rootprop consoledebug rootnested rootnested root rootcopy false rootprop rootcopyprop true rootnested rootcopynested true root false rootprop true rootnested false woould expect equality true think point immutabilitystructural sharing create useless objects inner properties equally call makes sense object returned object arguments ensuring help avoid unexpected behavior shouldcomponentupdate prevent useless renderings encountered user clicks twice menu element exemple", "num": "1923", "d": "7/2014"}, {"title": "nt bundle reacttestutils nodeenv production", "body": "using reactaddons webpack compile production version bundles test helpers along production code helpers appear small moment big issue test helpers added production build", "num": "1921", "d": "7/2014"}, {"title": "unexpected behaviour input element onkeypress event", "body": "element reactdominput onkeypress thisonkeypress onkeypress function event eventkeycode enter key eventpreventdefault react preventdefault working focus input pressing enter form submit reloads page also tried preventdefault onkeydown event luck", "num": "1920", "d": "7/2014"}, {"title": "proptypesoneof warning include expected types", "body": "proptype warnings oneof say instead actual expected type example proptype get following warning example react", "num": "1919", "d": "7/2014"}, {"title": "react jsx error", "body": "open chrome official build page show hello world nothing shown page got error", "num": "1917", "d": "7/2014"}, {"title": "isvalidcomponent returns false component instances", "body": "returns passed component instance descriptor sure intended behaviour seems counter intuitive intended perhaps could mentioned docs fiddle showing behaviour fiddle showing previous behaviour", "num": "1916", "d": "7/2014"}, {"title": "ship", "body": "needs cherrypicked x x x aka cleanup x x x x activities x update changelogblog post mention descriptors see change proptypes validation x blog post also refer missed items blog changelog x everything else", "num": "1915", "d": "7/2014"}, {"title": "lifecycle methods naming", "body": "take look api component get things like fine however lifecycle methods named like component talking using third person ca nt use normal method names gain space consistency", "num": "1914", "d": "7/2014"}, {"title": "notify application jsxtransformer completed processing jsx", "body": "first discussed use case application code react code file development included along way reliably reference components defined production jsx first translated js files combinedcompiled together issue noted comment workarounds", "num": "1913", "d": "7/2014"}, {"title": "setstate working", "body": "following component renders expected use setstate version however upgrade jsfiddle use setstate longer works says undefined missed something bug", "num": "1911", "d": "7/2014"}, {"title": "custom validators run twice error", "body": "updating code react ran something took time track root issue used consolewarn custom proptypes validation usually wants error returned nt appear documented part docs changes also appear additional sideeffect proptypes appear initialised multiple times see fiddle turn console run bit contrived excerpt dynamic form generator hence multiple mixins interesting thing note testproperty function props propname componentname validator logs twice without testproperty fails validation time testproperty props original code consolewarn meant second run validator never happened resulting property set suspect something catches error retries validation different setup clear intended behaviour fiddle seems good test case start tracking", "num": "1910", "d": "7/2014"}, {"title": "expose reactlib plugins", "body": "currently difficult impossible create plugins react use stuff without using crazy hacks best way separate modules", "num": "1906", "d": "7/2014"}, {"title": "mutating content throws", "body": "execute goes boom throws away children render violently screams way try add children afterwards mutating nt imagine reality quite simple could look something like count items error ever changes practically though content useless clientside see reason nt discard children passed clientside performance gains children left serverrendering stay asis removed dom later time could easily done adding simple component returns serverrendering could whip pr guys think good idea zpao", "num": "1905", "d": "7/2014"}, {"title": "rerender entire dom key property value changes", "body": "using lodash uniqueid function key property value experiencing bug would rerender entire dom scrollable window checkboxes checkbox change entire dom would rerender causing window scroll top using purerendermixin treated state components immutably changed key property use value andor removed key property completely bug longer persisted", "num": "1904", "d": "7/2014"}, {"title": "reactrendercomponent fails svg nodes firefox ie", "body": "trying mount component node react nothing internet explorer firefox appends elements without proper svg namespace", "num": "1900", "d": "7/2014"}, {"title": "array references", "body": "eg generate list buttons want assign every button array accessible perform operation every button easily something like square bracket syntax html", "num": "1899", "d": "7/2014"}, {"title": "keypress event broken", "body": "hello troubles using latest version handler functions keyboard synthetic events receive seem broken check type anything input watch result console something wrong", "num": "1898", "d": "7/2014"}, {"title": "enable safe use elements", "body": "reduced absolute minimum enables use semantic elements currently breaks react nothing none older browsers issues elements nt necessarily proper styles like would bring game without use shiv nt actually injectmodify browser environment corrects behavior reason think worth considering would totally understand prefer keep external", "num": "1897", "d": "7/2014"}, {"title": "expose mixin method created classes", "body": "would helpful static variant accessible returned descriptor way components need defined giving someone ability mixin someone else component wish limited experience stuff also really helpful using react larger app framework context instance dependency injection emberesque way would really easy allowing inject propsmethods typeclasses basis stead current albeit undocumented global injection functionality react also seems like unnecessary restriction keeping dynamic nature language embrace prototypal nature js bless redefiningreopening classes rudimentary experiments gone well enough fits nicely compositionfocused abstractions react admittedly knowing ultimate plan makes hard guess possible conflicts approach one escape hatch might additional ability seal classes strong reason fro exposing methods descriptor", "num": "1896", "d": "7/2014"}, {"title": "jsx watch nt autogenerate file change", "body": "versions os x node jsx shell zsh set destination source directory builds initial files changes source ignored tried changing destination different dir nt fix", "num": "1890", "d": "7/2014"}, {"title": "test component methods right way", "body": "component calls another method testing jest want replace method called mock verify called correct way tried replacing method nt seem effect autobinding react resorted replacing method course ideal since uses react internals better way currently missing update path question persists though", "num": "1887", "d": "7/2014"}, {"title": "fyi regenerate entire style instead diffing", "body": "zpao brought idea using instead diffing styles day nt think would good idea apparently much wrong cost seems identically properties style styles really takes performance also seems consistent across browsers messed test buuuuuut significant benefit persistent styles even emphasized slower browsers thing sticks lot uniform performance whereas using properties significantly worse worstcase however persistent styles inplace loses bigtime seems much depends want suck every last piece performance could implement fast routine good thresholds probably biggest issue could intelligently use properties could quite big win though real nt think different paths good thing would applicable certain cases perhaps rather common still persistent styles persistent styles", "num": "1886", "d": "7/2014"}, {"title": "docs stateful children typo", "body": "", "num": "1884", "d": "7/2014"}, {"title": "docs confusing explanation go state", "body": "end confusing explanation duplicated data props section go state duplicated data props try use props source truth possible props change time appropriate store props state able know previous values perhaps trying said something like duplicated data props try use props source truth possible one valid use store props state able know previous values props change time", "num": "1883", "d": "7/2014"}, {"title": "support important styles", "body": "currently nt support set using trivially easy implement something want support although sure performance implications edit although ca nt imagine would measurable would string test cheap ok apparently nt support might still worth implementing future nt care experimentation apparently priority part value apparently wrong well way set seems acceptable workaround may use detect style seldom enough performance nonissue important consideration already support initial render subsequent updates fail nt recognized properties", "num": "1881", "d": "7/2014"}, {"title": "transferpropsto deprecation codemod", "body": "release package like jsx whitespace changes", "num": "1878", "d": "7/2014"}, {"title": "remove functionality appends px unitless numbers style prop", "body": "dangerous assume number distance unit omitted pixelbased working within svg user space sometimes required number values left unitless proportionate userdefined matrix also additional overhead maintaining property accepts unitless number value whitelist instead allowing passthrough", "num": "1873", "d": "7/2014"}, {"title": "list react addons modules", "body": "know talks set guidelines building reusable components react think central place maintains list know react utilities addons extensions reusable modules", "num": "1868", "d": "7/2014"}, {"title": "referenceerror document defined", "body": "upgrading react handler fires serverside rendering ends requires access dom ie redacted stack trace", "num": "1866", "d": "7/2014"}, {"title": "tag", "body": "apparently nt tag", "num": "1861", "d": "7/2014"}, {"title": "add warning passing root node unmountcomponentatnode", "body": "tricky could actually use react root element cc dylanvee", "num": "1858", "d": "7/2014"}, {"title": "svg elements created proper namespace firefox", "body": "reproduce following complete minimal example javascript var bar reactcreateclass render function return reactdomrect width height thispropsi x fill rgb stroke rgb strokewidth var barchart reactcreateclass render function var paths map function return bar key render fails firefox function render var svg documentcreateelementns svg svgsetattributens null width svgsetattributens null height documentbodyappendchild svg works fine function rendersvg var div documentcreateelement div documentbodyappendchild div work google chrome", "num": "1857", "d": "7/2014"}, {"title": "add immutability helpers", "body": "hello like idea immutability helpers react find incomplete still time time switch underscore complex operations data make sense add helpers like map filter fold set like operations uniondifferenceintersection course implemented terms fold think guys thanks", "num": "1856", "d": "7/2014"}, {"title": "minify jsxtransformerjs", "body": "jsxtransformerjs build directory minify provide jsxtransformerminjs", "num": "1855", "d": "7/2014"}, {"title": "parent refs empty child componentwillunmount", "body": "believe repro bug ran child component called passedin handler clean triggered parent unmounting well handler belonging parent tries pause parent audio node already empty worth inserted breakpoint dom node still mentioned irc zpao suggested might bug", "num": "1853", "d": "7/2014"}, {"title": "initialize state empty object getinitialstate specified", "body": "hareth sometime feel adding mixin component getinitialstate return vjeux hareth surprised already case hareth vjeux hareth see already github issue opened itcreate one curious see people say would avoid force wen need state object need initialize content", "num": "1851", "d": "7/2014"}, {"title": "add key warning transitiongroup single child", "body": "wrapping item giving upon addingremoving item nothing happens item removed normally warning missing key output bit confusing could warning key missing edit clarify item removed transition performed due classes added", "num": "1850", "d": "7/2014"}, {"title": "problem highchart implementation", "body": "big problem highchart tried add reactjs highchart error said mast return right type reactcomponent need add link small proj repository roman ivanov ps may wrong way please add example using reactjs highchart", "num": "1849", "d": "7/2014"}, {"title": "dynamic key support reactlibcx", "body": "although reactlibcx handy shame based object syntax whereby key must static think would handy allow dynamic keys reactlibcx helper class could work using nested array syntax made quick improvement see think", "num": "1847", "d": "7/2014"}, {"title": "rfc observables minimal dom changes", "body": "nt really thought extensively yet figured could worth discussion must currently run entire function every change happens regardless insignificant change animating often want change position color single element still run entire every frame give idea mean could look something like code imagine also fancy ways could instead get observable variable stateprops avoiding creation mutable observables state making react edit clear nt replace render function meant feature really need squeeze every last bit performance animations performance intensive individually simple updates food thought", "num": "1846", "d": "7/2014"}, {"title": "array state using input ca nt reset defaultvalue", "body": "state value array item using children children change state value change see", "num": "1845", "d": "7/2014"}, {"title": "inline float style update firefox", "body": "jsfiddle demonstrating issue works chrome firefox", "num": "1841", "d": "7/2014"}, {"title": "updates componentdidmount batched initial render", "body": "spicyj knows reminder crappy code reproduce performancewise generally minor issue additional updates properly batched demonstrated gist", "num": "1839", "d": "7/2014"}, {"title": "rfc introduce dom property definitions", "body": "integer positive negative add integers nonnegative assume would necessitate boolean third indeterminate state would need added map indeterminate expects regular boolean attribute except defaults explicitly set disable expects default redundant add something like thoughts missed something also yes lots new properties sadly worth discussion least", "num": "1838", "d": "7/2014"}, {"title": "proptypes define children component type", "body": "looking something like however nt work course could nt find another way would nice supported", "num": "1836", "d": "7/2014"}, {"title": "quoting props keys", "body": "hi really love react jsx one big problem using google closure compiler advancedmode production script causes errors sice gcc renames props keys jsx compiler product scripts quoted props keys course could use react without jsx like work fine jsx like form writing component structure would possible add option jsx compiler quoting props keys solution overlooked", "num": "1834", "d": "7/2014"}, {"title": "unhelpful proptypes warning invalid prop supplied", "body": "use pattern often javascript jsx reactdom var hello reactcreateclass proptypes modifiers reactproptypesarrayof reactproptypesoneof large colored fill render function return hello thispropsname useful flags change often go straight css without imposing logic onto component say pass unsupported modifier react spits unhelpful warning unhelpful idea string index corresponds look code would save lot time hassle see actual array value failed check reason nt show value may serializable workarounds", "num": "1833", "d": "7/2014"}, {"title": "simple line comments jsx", "body": "would possible add syntax line comments jsx something along lines moment little clunky", "num": "1831", "d": "7/2014"}, {"title": "avoid unnecessary object allocation classset", "body": "get rid save one allocation potentially commonly used function except guys running internal transform yes", "num": "1830", "d": "7/2014"}, {"title": "ca nt insert html tag svg", "body": "run react gives uncaught error invariant violation danger expected markup render nodes rendered idea", "num": "1829", "d": "7/2014"}, {"title": "put states using several components", "body": "make tiny app tower hanoi run problem repotiyemereacthanoi drag disks different stacks hovering stack give feedbacks like dimming background color add class stack remove tha class disks leave stacks need know state disks need reference state change dragging finished ondragend means put components find last put state model holds three stacks refers stack dragging event started refers stack dragging disk hovering still bad idea put state model better solution case", "num": "1828", "d": "7/2014"}, {"title": "update recast amp constantsjs", "body": "recast breaking changes let update fix going give thedekel right first refusal", "num": "1824", "d": "7/2014"}, {"title": "jsxtransformer download execute async scripts async", "body": "changed actually use async xhr continue execute scripts order script specifies attribute allow break ordered execution super low priority anybody interested feel free go", "num": "1823", "d": "7/2014"}, {"title": "warning unknown dom property mean htmlfor", "body": "get warning whenever attempt use property element see description attribute", "num": "1819", "d": "7/2014"}, {"title": "document reactaddonspurerendermixin", "body": "", "num": "1816", "d": "7/2014"}, {"title": "document reactaddonsupdate apply command", "body": "needs bullet point though would great actually examples page whole cc brandonbloom", "num": "1815", "d": "7/2014"}, {"title": "reactaddonsperf documentation", "body": "let chenglou write would nice get spot checked petehunt andor joshduck", "num": "1814", "d": "7/2014"}, {"title": "missed opportunity rename flux stores flux capacitors", "body": "early days generating good amount interest pattern surely still time get name right paint dry", "num": "1811", "d": "7/2014"}, {"title": "improve reacttools readme", "body": "splitting readme reacttools npm package look less clowny npm however really poor job making readme good make better ship like real soon let make sure document actually available command line api protip hidden ones api since pass options object sourcemap api", "num": "1810", "d": "7/2014"}, {"title": "refs always exist", "body": "always object component without currentlyrendered refs empty object currently guard dynamic refs example searchable component search input appears contents reach certain length", "num": "1808", "d": "7/2014"}, {"title": "addonsupdatejs work expected prototypes", "body": "able use prototype seems goal addon according line since use object constructor instead updating object prototype prototype kept expected copypropertiesjs include prototype methods object properties probably loop see think loop instead would nice pollute object attributes unnecessary methods keep prototype", "num": "1807", "d": "7/2014"}, {"title": "structure package allow single dependency", "body": "possible depend react every single reactrelated thing across entire stack call react code also able require jsx files everywhere pull unnecessary code client bundle eg jsx transformer okay slashes requires mainly want avoid confusing mysterybugs like one seems errorprone pull different tooling utils may slightly different versions react", "num": "1806", "d": "7/2014"}, {"title": "tips navigation titles run together", "body": "hard tell tip title starts ends since padding ideally would small amount padding set apart", "num": "1805", "d": "7/2014"}, {"title": "transformer cdn trouble compiling local files running file protocols", "body": "sure worth fixing hard debug filing posterity setup open browser file pathtoindexhtml result cautious solved downloading transformer local folder", "num": "1804", "d": "7/2014"}, {"title": "proptypes could set default values", "body": "find typing time sadly pokemon javascript var pokemon reactcreateclass proptypes type reactproptypesoneof normal fire water bird really like frame data schema component could skip step something like", "num": "1800", "d": "7/2014"}, {"title": "add way specify indeterminate checkboxes", "body": "way similar right attribute ignored need figure interacts though", "num": "1798", "d": "7/2014"}, {"title": "keyboard events dont fire unless focussed form input", "body": "binding keyup events fire form input focus prevents various scenarios like keyboard navigation list grid also things like keyboard shortcuts fiddle demo understand may performance reasons couldnt see code caused great change happy submit pr someone points choice bind focussed happening", "num": "1795", "d": "7/2014"}, {"title": "onpaste working", "body": "onpaste event appear firing since jsfiddle nt play nice create simple demo page shows issue", "num": "1794", "d": "7/2014"}, {"title": "testing react components wrapping componentdidupdate", "body": "working library generative testing well testing state system feeding series commands seeing breaks one key issue asynchronous obviously test system needs use promisescallbacks step test order make work gist used following function wrap react components componentdidupdate one shot part question part feature request acceptable way listen act upon dom update intention modify component test b worth putting function testutils module cover use case obviously bunch error checking", "num": "1792", "d": "7/2014"}, {"title": "add api focus management", "body": "currently couple problems focus management react current problems guarantee node documentvisible visibility hard detect due components firing render guarantee x finished pending renders renders focus lost fires child nodes parents case ca nt focus want show focus button component focusing componentdidupdate affect still hidden discussion looks like prs react using raf timeouts achieve fixes problems listed cause race conditions fixed lifecycle addition hidden lifecycle purely focus management issue comes lifecycle able fire function rendering done individual component would suggest add simple api componentblur componentfocus queues requests fires rendering done fix fairly simple wonder people feel", "num": "1791", "d": "7/2014"}, {"title": "disabled input still clickable", "body": "", "num": "1790", "d": "7/2014"}, {"title": "ca nt move different position", "body": "heya seems move one div another get error contains react components since already mounted intuitively feels like something work use raw strings behaves expected jsfiddle demonstrating remove tag children works expected tried using get around since nt clone children nests problem one level deeper works nt", "num": "1789", "d": "7/2014"}, {"title": "consider warning get nonbool values hasbooleanvalue attributes", "body": "saw case somebody making use conditionally disable button clever necessary think warning might prove useful", "num": "1785", "d": "7/2014"}, {"title": "react nt handle duplicate refs well", "body": "presumably accidentally use ref two components remove second one would expect ref point first one nt either test pass javascript work removing ref duplicate name function var component reactcreateclass render function return thispropsshowb amp amp b var instance reacttestutilsrenderintodocument second tramples first expect instancerefsduprefgetdomnode innerhtml tobe b instancesetprops showb false first child exists ref point expect instancerefsduprefgetdomnode innerhtml tobe throw error upon first render trying use single ref two places", "num": "1782", "d": "7/2014"}, {"title": "add component api", "body": "could please expose instance variable method component currently get via component class use case like prefix error messages thrown component without repeating dry eg found issue believe covers request", "num": "1781", "d": "7/2014"}, {"title": "documentation inaccuracy component specs", "body": "component spec reads occur mount occur mounting reality occurs accurate state may depend props wording reflect", "num": "1778", "d": "7/2014"}, {"title": "help jsx js transform without nodejs", "body": "like convert jsx files js files linux machine direct internet access examples talk running npm obviously wo nt work case alternatives ideally would like use watch method jsx executable heacy lifting behind scenes maven task builds web app", "num": "1777", "d": "7/2014"}, {"title": "sourcemaps external file", "body": "looking source looks like source maps supported onwards thats great news looking source seems like version supported inline source maps based implementation wondering hard would add option would allow select inline vs sidebyside file", "num": "1775", "d": "7/2014"}, {"title": "regression statics convenience constructor", "body": "refer convenience constructor especially useful mixins longer valid master seems", "num": "1773", "d": "7/2014"}, {"title": "mention docs nodeenvproduction envify uglify browserify users", "body": "downloads page mentions npm package mention without nodeenvproduction envify uglify missing free performance gain sources say many packages make distinction dev production mode unusual big difference development production builds newer users browserify may know dance may naively expect use react browserify equivalent use one provided builds", "num": "1772", "d": "7/2014"}, {"title": "ship", "body": "time x update x update authors list x release notes x blog post x update dependencies x update supported attributes x update polyfill list incl reactjs warning x document anything new addons perf tap plugin makes x document change getdefaultprops cached ca nt inspect thisprops x write better reacttools readme x make sure examples work x make sure samples website work x exclude todomvcflux starter kit many dependencies x merge x update commoner update dep packagejson x x update versions readme x update changelog rc blog post x destructuring harmony x details react perf postrelease x prs cdns x cdnjs x jsdelivr x update version master x push gem even postrelease x update todomvcflux example update reactart x update reactrails", "num": "1771", "d": "7/2014"}, {"body": "imagine way react binds event handlers document react provides overloaded synthetic event dispatcher correctly stops propagation likely take separate mount roots consideration another argument binding event handlers mount roots perhaps chenglou", "d": "7/2014"}, {"body": "thanks dupe", "d": "7/2014"}, {"body": "react attach toplevel handlers events using components seeing otherwise", "d": "7/2014"}, {"body": "nathansobo curious whether simulated dispatcher ie capturing bubbling etc initialization synthetic event costly assume simulated dispatcher currently lot ugly string hacking thing chenglou working believe lot polyfills simple nt imagine issue perhaps browsers", "d": "7/2014"}, {"body": "also easily optout react event dispatcher using calling inside instead pay slight upfront cost though ps imagine since operating single modern fast environment react entire event dispatcher quite redundant could probably replace internally immediate calls", "d": "7/2014"}, {"body": "sure attaching event handlers events via react properties anywhere code perhaps attached dom component flame chart keystroke events processed react upon consideration probably events never reach handler reason indeed handled nontrivial amount time quite intrigued idea using native apis directly skipping global handling assuming would require logic fork interpret event handler properties dom components", "d": "7/2014"}, {"body": "nathansobo ah explains yeah overloaded always attaches handler behave like html implemented listens quite number events using controlled inputs obviously required seems like possible discard uncontrolled inputs sure without examination code using uncontrolled inputs probably something look see avoided using controlled inputs best bet probably implement controlled inputs ontop uncontrolled inputs look change handler avoided however remove right get raw input component instead could use implement controlled inputs using native events want using native apis directly super familiar event system code react apart different equivalent believe events represent equivalent events simply discardingignoring entire synthetic react event system updating necessary look etc perhaps could update instead add native event listeners directly piece cake hack pay higher upfront cost event listener though may preferable case probably want remove etc regardless decide switch reactdom native events", "d": "7/2014"}, {"body": "thanks thoughtful explanation yeah input definitely uncontrolled even visible exists receive input render editor stopping propagation events seems eliminate expensive handling flame graph hesitant remove controlled inputs entirely case users want use elsewhere exporting copy react users multipleinstance issue addressed like inputs work expected sure disabling synthetic event system warranted yet see costing us time elsewhere definitely take crack going close thanks conversation", "d": "7/2014"}, {"body": "pretty sure nt need attach event handlers uncontrolled components check let know", "d": "7/2014"}, {"body": "nathansobo stopping propagation removed controlled inputs broken instead edit perhaps true read seems preventing events tree easily reimplement controlled inputs raw input component something want expose users nt want replace synthetic event system entirely real harm done said synthetic event system react exists two reasons afaik normalize browser inconsistencies lots especially old browsers drop upfront n addeventlistener cost slightly expensive event handling irrelevant probably important faster modern environment also dropping frames far noticeable say popup taking frames longer open worstcase food thought definitely see atom becoming oneandonly editor future happy help", "d": "7/2014"}, {"body": "simple example outside bootstrap reacttextcomponent supposed implementation detail shortcut use string props perf since internal perhaps need make object work sebmarkbage alternatively make clonewithprops skip reacttextcomponents", "d": "7/2014"}, {"body": "interesting nt supposed strictly internal ie children stringsnumberswhatever passed rather would thought", "d": "7/2014"}, {"body": "yes syranide right think converted legacy reasons shared code path traverseallchildren need fixed part effort hide internal implementation detail jul andreas svensson notifications githubcom wrote interesting nt reacttextcomponent supposed strictly internal ie children stringsnumberswhatever passed rather reacttextcomponent would thought reply email directly view github", "d": "7/2014"}, {"body": "need investigate polyfill intentional shortcoming something fully polyfill although work significantly better reason differs browsers use native whenever available polyfill nonprintable keys reliably keydownup difference keypress ff largely intentional although check enter got caught crossfire", "d": "7/2014"}, {"body": "pushed fix missing enter ff far understand concerns everything else support seriously crappy browsers even available stay away everything nonprintable keys long since authored pr iirc even using onkeypress disaster believe polyfilled browsers nt support fall back native implementation broken evergreen browsers memory serves right work numeric keys odd things like iirc moral story take lot years use crossbrowser accurately unless mistaken ca nt use predicting key going end input anyway practical use quite questionable documenting works nt", "d": "7/2014"}, {"body": "weighing whether jsx generally accepted common practice always leave empty line end text files editors default said unless good technical reason nt see jsx nt mirror got", "d": "7/2014"}, {"body": "always leave empty line end text files leaving trailing spaces end every transformed line", "d": "7/2014"}, {"body": "bad looked end file saw empty line anyway intentional shortcoming currently result pr improved whitespace behavior jsx output fixing tailing whitespace technically quite nonintuitive due way works postponed time personally really keen digging code moment someone else feeling adventurous", "d": "7/2014"}, {"body": "syranide start looking", "d": "7/2014"}, {"body": "reactvendorfbtransformtransformsreactjs xjsjs find bunch problem easy way know next actually going newline think since esprimaterritory like step back remove whitespace fact", "d": "7/2014"}, {"body": "longer term going switch away using jstransform use recast jstransform ast assisted string string transforms recast ast ast allow us use consistent printing hand insert whitespace characters", "d": "7/2014"}, {"body": "zpao although necessarily mean nt care whitespace", "d": "7/2014"}, {"body": "transitiongroup clones children ref hold actually used cloning onelevel deep wrap random wrapper inner indeed kept intact outer cloned check console warning", "d": "7/2014"}, {"body": "recent descriptor change made change name nt updated docs yet sebmarkbage", "d": "7/2014"}, {"body": "right would make sense close issue leave reminder", "d": "7/2014"}, {"body": "faster opposite true chrome talking millions operations per second map preform equally well comes around sincerely doubt anything gain cost setting traversing map definitely nonissue bigger picture", "d": "7/2014"}, {"body": "see also", "d": "7/2014"}, {"body": "use version number prefix could work would nt version react twice else nt dedupe correctly", "d": "7/2014"}, {"body": "could solve drop ids dom somewhat supported would use internal map translating node instance fallback property could randomly generated run marker compromise want support multiple versions would also randomly generated however multiple versions really play nice would probably optionally need attach event listeners root nodes instead document suggested playing nice frameworks", "d": "7/2014"}, {"body": "planning implement atom workspace views react packages provide react components panels pane items ideally different packages could rely independent versions atom packages would nt break upgraded react core correct thinking might little unrealistic nt imagine guys plan supporting interoperation components written different versions react thought would awesome instead plan export instance react use core use package authors building views everything interoperates downside upgrading react core could break packages may need supply shim old packages happens ease transition hopefully wo nt difficult thought share use case case shapes design decisions change api moving forward", "d": "7/2014"}, {"body": "nathansobo atom plugins prompted issue going support using multiple versions react seamlessly together near term though possible work far future best approach may plugins populate iframes plugin contents scripts run isolated window", "d": "7/2014"}, {"body": "think give everyone reference react instance iframe approach unfortunately isolated kinds things people packages hopefully shim api changes guys planning bunch", "d": "7/2014"}, {"body": "multiple versions react cooperating technically advanced think biggest issue events handlers always bound document events would playing nice shimming probably going viable strategy unless referring maintaining separate branch even could probably turn major headache changes come nathansobo one possibility maintain separate atombranches major react releases play well multiple versions generally complex think would probably realistic approach think although targeting different jsx versions interesting problem applies", "d": "7/2014"}, {"body": "syranide interesting mean multiple numeric versions react multiple instances talking component version embedded component tree version something could possible would amazing", "d": "7/2014"}, {"body": "nathansobo multiple numeric versions react library matter mistaken two parts react dom currently prevents event system dom reactids fixing dom reactids simple simplest solution suffixing randomunique string startup react version sees dom managed event system little complicated problem event listeners bound document play nice libraries event handlers proposed moving event listeners mount root preferable would also play nice event handlerslibraries theoretically simple require lines code set listeners tracked per mount root instead prevent event acted multiple times instance unless missed something needed support multiple numeric versions react require maintaining separate atomcompatible branch react version possible rebase fix onto new version react without complications nt know devs feel rather simple fixes nt see would nt want apply one way another future mentioned nt know ifhow use jsx today something would also available different versions one breaking jsx update back seems like one two future", "d": "7/2014"}, {"body": "sorry one clarifying question saying makes sense regard multiple root components coexisting still clear scenario parent composite component one version react owns child component another version say example implemented atom workspace react also want implement atom treeview package react imagining treeview component would referred directly workspace method end getting owned workspace nt contract components bit involved react id missing", "d": "7/2014"}, {"body": "regarding react ids random suffixes wo nt break reconciliation server side prerendered react markup nt looked internals wanted make sure", "d": "7/2014"}, {"body": "nathansobo fire away nt really full picture intending nt take word anything idea one would use bridge rendering component versions could simply custom generic component calls roughly equivalent render works internally something visualize mean assume required react version stored statically component class rendered would allow composition components different react versions instance bridge actual component meat component preferably depend react version everything behave would expect updates callbacks etc however descriptors version specific could nt pass unwrapped component classes descriptors bridge expect work props provide component reactspecific nature depending tightly integrating react could significant issue batching would nt happen default across bridgesboundaries definitely imagineable one could rip virtual domtransactions react versions react cooperate nt know practical certainly neat using single react version top bottom think merit something like implementation ultimately becomes independent whatever side react comes around modules would simply adopt new versions please rather abandoned also sounds like might integrating quite deeply react never able improve api react would support react version indefinitely could equally horrible perhaps applicable mind said makes sense guys interesting problem hands think lot comes long far willing support old addons", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "object spread syntax nt supported yet probably use note commits cherrypicked direct cut master quite ready release yet", "d": "7/2014"}, {"body": "ahh good know thanks", "d": "7/2014"}, {"body": "believe webpack smart enough strip unneeded requires even uglification might faster", "d": "7/2014"}, {"body": "spicyj nt actually checked use apply shim working really doubt stripped unless really smart knows module sideeffects", "d": "7/2014"}, {"body": "meant webpack wo nt include module", "d": "7/2014"}, {"body": "zpao similar problem dead requires put together unreachablebranch browserify transform jstransform visitor underthehood comment unreachable branches ternaries logical operations", "d": "7/2014"}, {"body": "petehunt vacation right hopefully chance chime gets back josh might able help around", "d": "7/2014"}, {"body": "probably joshduck", "d": "7/2014"}, {"body": "oops sorry josh want send gh staff help debug", "d": "7/2014"}, {"body": "curiously seems inconsistent leave third page open watch update", "d": "7/2014"}, {"body": "yes seen something like spicyj real app seems print table constantly maybe inserted node considered waste sometimes works fine", "d": "7/2014"}, {"body": "agreed want write docs", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "hi zimok look future svg support", "d": "7/2014"}, {"body": "thanks pointing sorry nt read", "d": "7/2014"}, {"body": "probably leverage npm rather reinventing wheel happen also need asset bundling solution css images unsolved problem afaik petehunt", "d": "7/2014"}, {"body": "may solution like componentjson help", "d": "7/2014"}, {"body": "put reactcomponent keyword packagejson fine future component registry", "d": "7/2014"}, {"body": "think aetet talk premoderated catalog good react components style like kendoui dojo", "d": "7/2014"}, {"body": "oatmeal", "d": "7/2014"}, {"body": "fixed", "d": "7/2014"}, {"body": "respectfully disagree serif often prefer body typefaces wo nt change point consider redesign colors contrast ratio normal body text actually well wcag aaa level font weights bit light fact light variant could probably drop bit normal", "d": "7/2014"}, {"body": "well ofcourse easy ca nt change body palatino need fix menus navigation use font everywhere something definitely wrong could explain design choices instead respectfully disagreeing ignoring feedback might ways improve readability", "d": "7/2014"}, {"body": "disagreeing disrespecting ignoring edit", "d": "7/2014"}, {"body": "nt need reply ticket nt time explain like one expects take action argument disagreement otherwise disrespectful disregard feedback would nt workplace would saying would nt called nt fake respectfully disagree sugarcoating response", "d": "7/2014"}, {"body": "job handle issues could closed issue entirely without sort response rude instead told would would given multitude constraints working really appreciate feedback disregard going make change based design personal amp difficult thing everybody agrees looks right rarely objective right wrong example nt like text shadows website find screenshot harder read bumping fontweight proxima nova make wrong apple wrong changing system font lucida helvetica google probably using wrong shade blue honestly design decisions came mockup designer made spare time months ago outgrown nt spent much time really deviating big picture level things way time redesign pretty low priority actionable incremental improvements make meantime great constructive criticism keep coming", "d": "7/2014"}, {"body": "thanks elaborating nt necessarily want exactly like screenshot darker color body fonts nt weight unless another font name looks quite different pure black would keep roughly looks improved contrast", "d": "7/2014"}, {"body": "currently see removed see maybe make text darker though probably nt want go way right looks noticeably nonblack presumably intentionally definitely highercontrast looks almost black eyes note almost one uses black text example google search results white", "d": "7/2014"}, {"body": "well yes nt use thin fonts white background solve user styles really wanted fixed people", "d": "7/2014"}, {"body": "second screenshot shows nonthin fonts disagree", "d": "7/2014"}, {"body": "quite good change thanks ionel fri jul ben alpert notifications githubcom wrote second screenshot shows nonthin fonts disagree reply email directly view github", "d": "7/2014"}, {"body": "mistaken might typo fairly positive intentional lightweight meant used primary data structure apps fine tuning petehunt thus nt try smart structural sharing nt supposed able use like manually comparing fields mori looking perhaps", "d": "7/2014"}, {"body": "chenglou sure agree structural sharing simply detecting equivalence oldnew properties mutating nt many lines code mori library structural sharing vastly complex problem sincerely doubt reasonably common js app usecase could turn overhead benefit", "d": "7/2014"}, {"body": "yes syranide oi nt want use full structural sharing library like mori unless deal large lists things like yes really easy implement code fixed behavior", "d": "7/2014"}, {"body": "minifying code assume reacttestutils would stripped nt used", "d": "7/2014"}, {"body": "syranide sure case react addons requires require reacttestutils still included production builds using uglify defaults set webpack perhaps alternative options", "d": "7/2014"}, {"body": "using defineplugin webpack need something like make webpack inline nodeenv properly believe smart enough require test utils also write explicitly nt want specify command line", "d": "7/2014"}, {"body": "spicyj excellent looking thanks", "d": "7/2014"}, {"body": "see enter key using keydown event still ca nt get work onkeydown post jsfiddle showing problem note also write instead want", "d": "7/2014"}, {"body": "tried onkeydown already let jsfiddle", "d": "7/2014"}, {"body": "marcbelmont need use onkeypress however polyfilled lot use instead", "d": "7/2014"}, {"body": "quick example problem test var myinput reactcreateclass handlekeydown function event eventpreventdefault press enter form submitted submitted render function return reactdomform reactdominput onkeydown thishandlekeydown reactrendercomponent myinput documentgetelementbyid react tested ubuntu linux adding onsubmit handler form element prevent form submit", "d": "7/2014"}, {"body": "marcbelmont seems work fine", "d": "7/2014"}, {"body": "syranide problem ubuntu linux chrome fine", "d": "7/2014"}, {"body": "marcbelmont weird tested saucelabs browser got incorrect behavior refreshed nt get anymore ca nt reproduce", "d": "7/2014"}, {"body": "wanted oneoftype probably make message better", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "ca nt repro fixed might released soon", "d": "7/2014"}, {"body": "cc sebmarkbage come couple times terminology around component vs descriptor vs class gotten hazy think work like js would need revert current behavior reactisvalidcomponent reactrendercomponent comp true reactisvalidcomponent comp false reactisvalidcomponent comp false would need add api reactisvaliddescriptor reactrendercomponent comp false reactisvaliddescriptor comp true reactisvaliddescriptor comp false actually work like already reactisvalidclass reactrendercomponent comp false reactisvalidclass comp false reactisvalidclass comp true", "d": "7/2014"}, {"body": "direction heading actually thing component statically verified internal discussion direct many different signatures valid components needs precise instanceof particularcomponenttype certain categories like xhp anything getdomnode method jul pm paul shannessy notifications githubcom wrote cc sebmarkbage come couple times terminology around component vs descriptor vs class gotten hazy think work like would need revert current behavior reactisvalidcomponent reactrendercomponent comp true reactisvalidcomponent comp false reactisvalidcomponent comp false would need add api reactisvaliddescriptor reactrendercomponent comp false reactisvaliddescriptor comp true reactisvaliddescriptor comp false actually work like already reactisvalidclass reactrendercomponent comp false reactisvalidclass comp false reactisvalidclass comp true reply email directly view github", "d": "7/2014"}, {"body": "warn make upgrade path clear", "d": "7/2014"}, {"body": "need document change custom prop types api", "d": "7/2014"}, {"body": "mentioned like recommend quite serious issue affected targetting", "d": "7/2014"}, {"body": "spicyj returning error already updated made pr back unless talking something else maybe note say new api", "d": "7/2014"}, {"body": "mention blog post", "d": "7/2014"}, {"body": "blog post text changes put pr soon", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "brought ca nt find issue nt think anything happened personally really sure prefer always instinctively drawn short methods really clarity trumps concise opinion use excellent reminder less common magic methods makes stand would never include naming methods instinctively assume getinitialstaterenderetc every component always put topbottom willmount could easy miss obvious place always put top though always relative unfamiliar code would prefer author spent another second wrote rather carefully scan methods make sure nt overlook anything also official jsx styleguide would awesome zpao opinion", "d": "7/2014"}, {"body": "nt really get point could argue every methods every objects ever object onto methods attached provides context nt know want prefix methods nature object maybe symptom something else like stuffing many things pointer component method named component crystal clear component update attached updatelike methods precise names component one going follow rule methods component somewhere sounds suboptimal stands naming follows rule methods framework methodshooks called react", "d": "7/2014"}, {"body": "disparity naming various component methods provides clear indication functions intrinsically linked stateful retainedmode dom react tries abstract away logical notify end user methods hooks react internals opposed preparing component rendering virtual dom create component one needs pure function takes props returns descriptor without special measures mounting unmounting treating methods level co would signify prove equally important regards virtual dom simply ring true", "d": "7/2014"}, {"body": "sidenote really recommend use util instead jsxtransformer inherently flawed respect script loading use jsxtool identical behavior dev prod also correct sources errors browsers", "d": "7/2014"}, {"body": "see breaking change missed", "d": "7/2014"}, {"body": "sorry gotten warnings development build probably", "d": "7/2014"}, {"body": "cc zpao", "d": "7/2014"}, {"body": "made minor change fiddle issue seems slightly different error red herring seems validators always run twice setup warning printed always rendered obvious case clear validator run twice though actual issue guess", "d": "7/2014"}, {"body": "yeah believe run proptypes validation silently upon descriptor creation emit error mounting master run descriptor creation returning error object indeed correct api change new oversight release notes fix sorry", "d": "7/2014"}, {"body": "ah indeed totally missed warningerror change release notes", "d": "7/2014"}, {"body": "eh bad seems far away thought", "d": "7/2014"}, {"body": "much agree issue way reactbootstrap project able support amdbower cjsnpm environments whilst using stuff copying react files project", "d": "7/2014"}, {"body": "everyone interested list specific modulesfunctions interested intentionally ship small public api feel free make internal changes", "d": "7/2014"}, {"body": "guess main ones using right also use would pretty trivial implement", "d": "7/2014"}, {"body": "big one us nightmare configure across amdbower cjsnpm really option also use could understand need keep private", "d": "7/2014"}, {"body": "cx public reactaddonsclassset falls almost category clonewithprops using eventlistener", "d": "7/2014"}, {"body": "use eventlistener bind global events support", "d": "7/2014"}, {"body": "okay going count feature request vote", "d": "7/2014"}, {"body": "yes would prefect also longer needed rely", "d": "7/2014"}, {"body": "key property works using random id key almost always anti pattern instead try use sort id data set like array index db primary key", "d": "7/2014"}, {"body": "petehunt discussion irc motivation issue scrolls top believe code inplace prevent get wrong apparently nt work case", "d": "7/2014"}, {"body": "example reproduces issue firefox innerhtml createelement fail second expected chrome createelement fails expected ca nt test ie right someone would greate end solution think best since nt know specify namespaceuri attribute tried xmlns node nt work make work react think check setting innerhtml svg node case instead ussing innerthtml use domparser importnodeadoptnode afaik works ie gt better nothing", "d": "7/2014"}, {"body": "added cases static xmlns nt work ff chrome static xmlns attr node works dynamic xmlns attr node nt work ff opera ones work static domparser importnode static xmlns attr node", "d": "7/2014"}, {"body": "someone helped ie thanks mguillech ones nt work innerhtml createelement createelementns text dynamic xmlns", "d": "7/2014"}, {"body": "currently possible though could access", "d": "7/2014"}, {"body": "well giving ref unique name chenglou said access components refs something like trying call method perhaps check name begins button etc agree array references would also useful though wishing", "d": "7/2014"}, {"body": "likely possible", "d": "7/2014"}, {"body": "going close try open issues even currently failing let make explicit goalnongoal", "d": "7/2014"}, {"body": "assume referring keycode wrong mdn docs keypress event unicode value key pressed stored either keycode charcode property never access keycode via reference", "d": "7/2014"}, {"body": "yeah normalized corrected receives receives receive aliased quite useless code relies however unless specific needs new polyfilled property preferred whenever possible", "d": "7/2014"}, {"body": "nt know property thanks browniefed syranide exactly need closing issue", "d": "7/2014"}, {"body": "nt think react job make sure react works properly included see like react nt ship polyfills nt ship also nt need code unless app uses new elements", "d": "7/2014"}, {"body": "agreed thought worth checking given noninvasive nature minimal size", "d": "7/2014"}, {"body": "seems react moving away current magic features relying instead new ecmascript classesmodulesetc mixins feature react probably going go away infavor users using whatever utilities want handling extend also focusing heavily making sure code statically analyzable personally seems like dependency injection wrong solution especially context react strengths react simplicity props state render component extendable reason ca nt via props instead anyway summary best understanding heading devs authority obviously", "d": "7/2014"}, {"body": "nt see mixins magical anyway looks like simple functionobject composition sure magical mixin method creates prototype chain relying user call super anyway would much rather composition based approach inheritance general note also left feedback components classes issue regard always case made di larger applications especially want view layer behave integrate nicely rest application abstractions injecting store instances controllerviews good example rather rely users including mixin fluxxor style needed admit di overused looking angular mitigate advantages react way place managing complicated apps think larger case made aside di reasonable might able willing finish class single go would use component lib mixin application specific behaviors etc would want extend subclass component nt think request making components extendable way nt open continued composition p", "d": "7/2014"}, {"body": "theporchrat mixins magical mixins classes currently implemented react really nt concern proposal commented effectively removes react custom magic classesmixins relies ecmascript proposals instead seems favorable free use much di want given technically possible think react say matter", "d": "7/2014"}, {"body": "hear though actually get language support mixinstraitswhatever react picking sort mixin system nt spec whether via function creates prototype chain mixins current magic want blessed path addingoverridingmerging methods class prototype initial class declaration wo nt let shoot foot break component going mean extending via class syntax exposed fine tho abandon nice composition stuff sugar pseudo classical inheritance different issue expectation wait hits browsers going expected transpile years away full support would love expose mixin method", "d": "7/2014"}, {"body": "theporchrat jsx already includes number static transforms es harmony proposals look reactjsfuture might even go way classes bad modules functions decided shove module transform jsx done wait browser adoption anyway devs authority nt think demand di devs remember developedused facebook instagram pete mentioned irc day fb number components might nearing figures di necessary scale would pushed made work perhaps doubt", "d": "7/2014"}, {"body": "sort wish never brought di example sole reason issue fact relatively small one perhaps ignore fact brought p larger issue found seemingly unnecessarily restrictive trying integrate react view layer applications exposing said methods would keeping nature javascript one generally expectation accessible prototypes", "d": "7/2014"}, {"body": "huh source destination want", "d": "7/2014"}, {"body": "want ideal need way get around build problems spent bunch time trying get different jsx grunt tasks properly work browserify lineman long story short nt work ended putting watch directory jsx file changes triggers jsx command watch js changes triggers js concatminifying single appjs also gitignore entry js files generated jsx hacky works longer relying jsx watch still wanted file bug like said first post nt work even source dest different michael jul andreas svensson notifications githubcom wrote huh source destination want reply email directly view github", "d": "7/2014"}, {"body": "currently simple way seen nt guarantee stableness", "d": "7/2014"}, {"body": "ah ok thank checked code method testing also utilizes internal autobind map looks like approach stay time sent iphone jul cheng lou notifications githubcom wrote currently simple way seen nt guarantee stableness reply email directly view github", "d": "7/2014"}, {"body": "yeah unfortunately hard right changes making classes make simpler", "d": "7/2014"}, {"body": "spicyj elaborate mean using autobindmap nt super complex comfortable could", "d": "7/2014"}, {"body": "sorry nt anything point right come back update issue something", "d": "7/2014"}, {"body": "think docs correct outer braces tell jsx everything inside javasript could write also like javascript var mystyle display none paragraph", "d": "7/2014"}, {"body": "yes docs correct case thanks looking though", "d": "7/2014"}, {"body": "appropriate store props state able know previous values ah perhaps really referring basically edit pages might want diff send changed variables really reads quite weirdly especially beginners", "d": "7/2014"}, {"body": "horribly abused css people write css properly never need said nt think included people use bad practices apps styles personally inline styling react bad enough", "d": "7/2014"}, {"body": "jsx syntax implemented yet", "d": "7/2014"}, {"body": "yup", "d": "7/2014"}, {"body": "oh awesome although curious actually safely codemod number specialcases nt spread operator ps guess could codemod safe leaves unsafe ones", "d": "7/2014"}, {"body": "discussed bit implicit super nice also walks quite slippery road nothing decided either way far afaik something nt feel quite right implicit", "d": "7/2014"}, {"body": "agree current workaround specifying unit less numbers nt great also hard keep track user might unfrequent nice nt extra number string since number certainly nice rather might live latter", "d": "7/2014"}, {"body": "someone working looks around meanwhile put stuff", "d": "7/2014"}, {"body": "problem", "d": "7/2014"}, {"body": "problem happy see finally added hreflang attribute support tried upgrade immediately unfortunately problem keeping upgrading", "d": "7/2014"}, {"body": "fyi worked around using might work case depending use case", "d": "7/2014"}, {"body": "wow sounds like big regression construct simple repro case", "d": "7/2014"}, {"body": "try probably able sunday earliest frankly error happen every handler might something wrong", "d": "7/2014"}, {"body": "might happen always setstate within componentwillmount agree need fix", "d": "7/2014"}, {"body": "happens setstate componentwillmount try come simplest repro case", "d": "7/2014"}, {"body": "oh setstate probably going reactupdates using browserspecific reactreconciletransaction think", "d": "7/2014"}, {"body": "yes using failing handler bad practice", "d": "7/2014"}, {"body": "gasl maybe vs", "d": "7/2014"}, {"body": "part stack trace offending handler", "d": "7/2014"}, {"body": "simple example reproduces problem javascript var react require react var hellomessage reactcreateclass displayname hellomessage componentwillmount function thissetstate name pete render function return reactdomdiv null hello thispropsname consolelog reactrendercomponenttostring hellomessage name john", "d": "7/2014"}, {"body": "trying figure right move fix instead forbid favor thoughts spicyj", "d": "7/2014"}, {"body": "former always said supported", "d": "7/2014"}, {"body": "support seems like one way", "d": "7/2014"}, {"body": "one use case computing something based props componentwillmount componentwillreceiveprops make helper call places", "d": "7/2014"}, {"body": "js getinitialstate return helper thisprops componentwillreceiveprops nextprops thissetstate helper nextprops thing", "d": "7/2014"}, {"body": "petehunt way method written reusable vs return values use also understanding called dom environment based example see calling elegant disallowing would breaking change based current documentation ok breaking change releases long documented \u00e0 la change", "d": "7/2014"}, {"body": "going put couple ridealongs thanks bringing attention", "d": "7/2014"}, {"body": "thanks smile", "d": "7/2014"}, {"body": "good call always forget", "d": "7/2014"}, {"body": "longer issue", "d": "7/2014"}, {"body": "never mind see", "d": "7/2014"}, {"body": "personally run much simplified helper instead supports equivalent allows work immutable data mutable regular functions mutating something like simply shallow clones", "d": "7/2014"}, {"body": "immutate implementation looks like", "d": "7/2014"}, {"body": "nt really vetted yet work fine nextobject immutate prevobject keystomutateormutator var prev value permissions ids var next immutate prev function user username next userpermissions immutate objpermissions ids function ids idspush idsshift prev name previous permissions ids prev name previous permissions ids next name next permissions ids also thought getting rid redundancy mutating providing second argument callback could look like nt thought much yet ps always use risk", "d": "7/2014"}, {"body": "well still would love complete helpers react need rich api immutable data operations course adopt underscore integrate mori react question need helpers react incomplete", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "spicyj oooh interesting use spread operator whatever called", "d": "7/2014"}, {"body": "supposed used production precompile jsx purpose", "d": "7/2014"}, {"body": "okay thank looking", "d": "7/2014"}, {"body": "assuming refs cleaned opposed life cycle methods current transaction called parent apparently notified children touches another interesting question imho nt notification unmounting occur child parent ie reverse mounting", "d": "7/2014"}, {"body": "ah realize parents get notified unmount children agree order reversed since child may prop dependencies parent eg parent refs also since sense child components ultimately get unmounted parent esp since parent nt always unmounted notifying order seems make sense", "d": "7/2014"}, {"body": "well think parent needs notified unmount child actually gets unmounted clean event handlers etc rendered child component might work notify children first wait parents notified actually unmounting children", "d": "7/2014"}, {"body": "spicyj yeah would expect notifications flow children parents affected instances notified unmounted unspecifiedundefined way", "d": "7/2014"}, {"body": "problem accessing uninitialized state properties", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "nt integrated highcharts react app integrated approaches well jquery another library manipulates dom generally create little island tells react leave component alone library manipulate section dom using great example stack overflow example highcharts code may replace code dom manipulation", "d": "7/2014"}, {"body": "please nt use gh issues debugging find bug react behavior implementation reopen stack overflow mailing list irc great places get help specific integration point questions specific use", "d": "7/2014"}, {"body": "previously mentioned statically transformed facebook series string concatenations planning change course make helper works however want also note syntax able write cx block true block active thisstateactive transform nt supported yet though", "d": "7/2014"}, {"body": "expressions keys sounds great originally supported trees arrays objects strings got transform converted string concats avoid allocations seems worth tradeoff constrained api joecritch feel free publish npm module others use", "d": "7/2014"}, {"body": "aha makes sense great learn something anyway jordwalke might", "d": "7/2014"}, {"body": "already subscribing boundwidth inside calling thisforceupdate goal high perf subset app keep track update need make imperative action occurred think would make sense", "d": "7/2014"}, {"body": "petehunt yeah forgot mention intention unboxed react could use prop component far insight seems quite intuitive also seems kind lowlevel mistake would make rendered dom fall sync would nt dangerous least anyway curious go instead guess upside version error even element disappears animation unless want", "d": "7/2014"}, {"body": "would equivalent basically perhaps allow owner returns false would basically flip react initialrenderwithimperativeupdatemode", "d": "7/2014"}, {"body": "petehunt hmm actually sounds interesting life cycle method would call seems like must happen life cycle method right need new one", "d": "7/2014"}, {"body": "believe would called event handler xhr timer maybe key component spec", "d": "7/2014"}, {"body": "petehunt perhaps fell train thought would come picture intuition proposed component could choose avoid full could still choose act lesser differences update specific rendered component could look something like would still stateful could even mount component midanimation really want ie becomes strictly optimization nt stateful would deal render animation would nt overwrite props animated perhaps even something like removed code edit stratch really nt good idea", "d": "7/2014"}, {"body": "animated charts pairing easing function fair amount success ended moving direction way faster clearer dom animation svg paths think produces lot garbage used trigger many fps animations mixin using demo works really well clearly see chrome timeline tool animation frames firing sequentially single write dom beautiful", "d": "7/2014"}, {"body": "nhunzaker definitely invokes potentially really quite costly want animate single attribute unless isolate animating node separate component quite cumbersome", "d": "7/2014"}, {"body": "use set value resolve problem", "d": "7/2014"}, {"body": "yes firefox inline style float debatable react suppose fix anyway better use two classes like twbs", "d": "7/2014"}, {"body": "apparently needs hurtrealbad", "d": "7/2014"}, {"body": "ping", "d": "7/2014"}, {"body": "practical advantage would checks give nt feel like existing numeric checks much us", "d": "7/2014"}, {"body": "spicyj right nt think major benefit browser throws error invalid values throws errors ie versions say correctness output junk dom really clear currently turn assuming actually leaves enabled thing would nice able send boolean values work expected currently really really use depending attribute", "d": "7/2014"}, {"body": "personally also wondering perhaps good idea warnerror user supplies invalid values providing invalid values hardly something intentionally alerted fact could really good thing", "d": "7/2014"}, {"body": "used work longer work upcoming descriptor changes sebmarkbage ideas", "d": "7/2014"}, {"body": "two pieces simple one expecting single component special proptype simple someone send pullrequest second part want accept one several unknown components considered compatible xhp hack use something called categories third part want combine two types checks set items want allow union type want first item certain type remaining items another type azich ideas around", "d": "7/2014"}, {"body": "another case want accept composite renders example sure covered xhp categories", "d": "7/2014"}, {"body": "jsx react gcc compatible afaik intentionally quote keys meaning nt use quoted strings either way benefit key mangling gcc", "d": "7/2014"}, {"body": "believe react quite closure compatible happily take pull requests fix small issues missed", "d": "7/2014"}, {"body": "actually stopping working today understanding gcc would crush keys value accessed component would work wrong understanding gcc works", "d": "7/2014"}, {"body": "believe possible use react appropriate gcc externs file listing properties though nt currently one ideally could compile react gcc believe wo nt work properly right", "d": "7/2014"}, {"body": "already good one externs file react dom element react properties sufficient talking components created react users example simplecomponent anothercomponent know jsx compiler transform simplecomponent anothercomponent comes trouble gcc compilation produce something like used react externs file simple component render function renaming simplecomponent ba ok gcc rename also simplecomponent reactcreateclass ba reactcreateclass ba x null anothercomponent render funcion reactdomdiv null reactdomspan null thispropsk reactdomspan null thispropsc see names props properties doesnt match isnt way tell gcc pojo passed simpecomponent available anothercomponent nt pair names could solve problem would quoting keys like using props name bracket notation anothercomponent unfortunatelly second control first automated compilation process", "d": "7/2014"}, {"body": "isnt way tell gcc pojo passed simpecomponent available anothercomponent nt pair names impression gcc would always munge property key way appears even two objects unrelated base compiling advanced optimizations selected gives looks like mapping cases", "d": "7/2014"}, {"body": "right case rule bigger amount code project understand gcc right call gcc determine react externs file called third party method doesnt care happening inside nt know object use key aliases acessing", "d": "7/2014"}, {"body": "understanding gcc wo nt munge property keys appear externs file regardless whether specific callsite refers thirdparty library", "d": "7/2014"}, {"body": "suggest list names components app specific externs file true didnt tried solution nt sound like correct way using externs file however im going try", "d": "7/2014"}, {"body": "include externs file react build app js together gcc munge appspecific properties leave ones react cares alone", "d": "7/2014"}, {"body": "earlier already probably found problem key prop named looks gcc recognize standard keyword nt munge object key object munge choose different name prop key quoting neccessary many thanks participation hunt", "d": "7/2014"}, {"body": "seems straight wrong prop name actually probably need proper error message nt see truncated value could nt shown", "d": "7/2014"}, {"body": "haha pending change internally already", "d": "7/2014"}, {"body": "said irc personally kind favor sure really like idea jsx tags working part js syntax special parser state issues see intended occurence text would invalid would quoted etc common occurence really nt think", "d": "7/2014"}, {"body": "perhaps parser could taught understand line comment sortof logically follows currently", "d": "7/2014"}, {"body": "glenjamin nt really understand comments today simply escapes js comments understood simple fix rewritten sake messing output would nice jscomments could used anywhere sounds intuitive", "d": "7/2014"}, {"body": "ah quite meant one could expand fairly consistent usual jsx expansion rules think", "d": "7/2014"}, {"body": "looks quite magic nt think anything suggest whether would consistent entirely different beast comes longer jsx anything closing think actually make sense written assume actually works today perhaps due jsx intricasies would ever want use syntax anyway closing suggesting comes comment actually jsx closing actually part comment well still affects parser seems like odd feature alternatively could make sense positive would common inside comments make practical sense also mess nonjsxaware highlighters sidestepping intuitively seems kind weird valid whereas invalid cc jeffmo opinion", "d": "7/2014"}, {"body": "though process behind usual jsx rules thought treat following js essentially gets extra meaning jsx transform still stops parsing js appears comment", "d": "7/2014"}, {"body": "glenjamin right practice nt basically void entire purpose could nt use line comments even following line occurs nt want stop", "d": "7/2014"}, {"body": "hrm think explaining reasoning well currently produces mental model interprets start javascript means stop javascript suggesting currently errors produce something similar basically line comment currently seems override suggesting nt", "d": "7/2014"}, {"body": "would like see flexible version classset something allows dynamic class names var myclassname bar classsetex foo true myclassname true baz false implementation function classsetex var args arrayprototypeslicecall arguments classes", "d": "7/2014"}, {"body": "twobit free implement version see fit think idea behind classset fixed classnames mangledminified use considerably less space", "d": "7/2014"}, {"body": "quite straightforward support apparently", "d": "7/2014"}, {"body": "state needs shared among multiple children live parent child needs update state done using callbacks parent provides child calls information flow parent child uses props information flow child parent uses callbacks", "d": "7/2014"}, {"body": "thx parent child ok putting special state model", "d": "7/2014"}, {"body": "feel free keep discussing closing bug", "d": "7/2014"}, {"body": "practically actually work understand correctly script wait previous non script load non scripts consider scripts continuing", "d": "7/2014"}, {"body": "also perhaps revert script loading async simply set async flag xhr accordingly way get proper browser behavior slow use async becomes fast right really makes sense jsxscripts since otherwise syncasync executing independently jsjsx overthinking", "d": "7/2014"}, {"body": "perhaps revert script loading async none scripts downloaded page loaded already getting proper browser behavior since never able get real proper behavior l think probably overthinking p honestly super unimportant could support somebody wanted", "d": "7/2014"}, {"body": "well could always", "d": "7/2014"}, {"body": "spicyj oh wow interesting hack sounds kind fragile though may interfere expected lowlevel behavior zpao ah right yeah first question stands expected behavior async wait previous sibling sync script finish right sync scripts nt wait async", "d": "7/2014"}, {"body": "syranide yea think right since nonasync scripts block async scripts would nt reached", "d": "7/2014"}, {"body": "using jsx suppose use instead", "d": "7/2014"}, {"body": "find docs", "d": "7/2014"}, {"body": "thanks update reactjade fix", "d": "7/2014"}, {"body": "sorry confusion hope docs cleared reasoning would linked note part docs", "d": "7/2014"}, {"body": "cool clear reasoning surprised applies jsx well react library would also seem simpler encourage quoted attributes generated code looked like nt suffer problems warning thing mention given warning would expect still output attribute even though recommends renaming htmlfor", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "awesome guys love support see collaborator badges cpojer petehunt yungsters jbonta aside clear win dr brown capacitor fits beautifully think enough store electrostatic charge considered also primary example reactive electronic component would like put together pr docs", "d": "7/2014"}, {"body": "downer flux capacitor sound intuitive sounds like bufferflush batching already people questioning legitimacy flux sincerely nt think would benefit naming obviously tries cute rather descriptive", "d": "7/2014"}, {"body": "think funny point actually pretty fitting idea internet points dansowter agree syranide nt think actually", "d": "7/2014"}, {"body": "fair enough ca nt say nt worth shot", "d": "7/2014"}, {"body": "gets done time want make sure makes readme", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "always empty object since upcoming", "d": "7/2014"}, {"body": "perhaps supposed use mergeinto instead copyproperties", "d": "7/2014"}, {"body": "using mergeinto seems like sane option think want kill copyproperties anyway cc petehunt", "d": "7/2014"}, {"body": "seems fine mergeinto yes way would nice document fact use update function prototyped object really related nt know worth opening issue wonder unset operator way current operators delete attribute tree tried sets undefined remove element", "d": "7/2014"}, {"body": "slorber disagreeing idea generally preferable set rather delete per handles objects", "d": "7/2014"}, {"body": "problem packager react nt yes indeed problem module depends react b depends making depend likely produce even confusing errors even guarantee work think best right keep modules update always possible thirdparty stuff dedupe browserifywhatever use", "d": "7/2014"}, {"body": "well nt really problem packager problem multiple versions different modules depending different versions going get worse pile plugins components depend different version end copies react blessing curse package managers local version scoping versions doubt dedupes different packages incompatible dependency listing nt know going solve nt really sound like helps love hear suggestions nothing jumping holy grail", "d": "7/2014"}, {"body": "make common tools utils accessible via npm package port core things repo currently foreign packages like require ids like pull react clientside bundle currently pull addons client bundle currently dropin substitute dropin substitute directly access transformer stuff probably naive nt see would nt work would solve immediate concerns example would prevented anyhow idea", "d": "7/2014"}, {"body": "greim intuitively question end modules nt part core modules really maintained devs less common sugarspackagers also really weird tools would tied release schedule react using standalone bundles react kind also goes whole idea npmdecentralizing see duping react versions may issue npm edgecases nt sound like invitation bring things react package rather create tool add necessary code react ensures one version react throws error nt", "d": "7/2014"}, {"body": "end maybe enough stuff cover use cases usage patterns fragmented impossible maybe nt right path take goes whole idea npmdecentralizing npm folks seem struggling find general solution problem guess raises question even one true npm way things would offer guidance create tool add necessary code react ensures one version react throws error nt sort failfast mechanism seems acceptable least error happens nose obvious reasons rather obscurely later production", "d": "7/2014"}, {"body": "use cases mine ruby rails developer packaging like would solved browserify users problem people using webpack requirejs owned every single reactrelated tool component would never chance improve draw line somewhere supporting coffeescript nongoal happy let people figure make work going continue changing jsx desugars characters react escapes needed might cases like work messaging ensure downstream developers test things stay date way buildmaintain everything definitely need figure public api parts plan plugins probably reach npm team see thinking know problem talking projects issue goes though think close feel free carry discussion reopen get actionable place", "d": "7/2014"}, {"body": "oh looks like already fixed master", "d": "7/2014"}, {"body": "never mind think pebkac due misnamed file closing embarrassed", "d": "7/2014"}, {"body": "used actually nt look prod also making optimizations around getdefaultprops going go back like thinking though", "d": "7/2014"}, {"body": "general consensus fix unfortunate fact javascript nt static type system similar type annotations unfortunately checked runtime instead statically since fulfill role static types like static types completely separate values two become entangled harder separate systems like typescript", "d": "7/2014"}, {"body": "zpao interesting documented anywhere dev", "d": "7/2014"}, {"body": "nhunzaker yep second paragraph", "d": "7/2014"}, {"body": "additionally nice property allocates new objects version user decided mutate prop hey happens since default props would share reference get mutated", "d": "7/2014"}, {"body": "zpao nt see caching assume referring would exclude possibility since would static values well added default props object freezing proptypes could less empty shells prod like already assume agree decision", "d": "7/2014"}, {"body": "petehunt getdefaultprops called cached master", "d": "7/2014"}, {"body": "fun play impossible support annoying", "d": "7/2014"}, {"body": "sorry annoying", "d": "7/2014"}, {"body": "correct combination indeterminate checked eg indeterminatetrue checkedtrue impossible indeterminatetrue checkedfalse ok edit even explicitly say checkedfalse", "d": "7/2014"}, {"body": "yes key events work js want bind key events window nt currently way closing dupe", "d": "7/2014"}, {"body": "want sort thing wiki complementary tools links able easily bind window keypress events class context expect", "d": "7/2014"}, {"body": "spicyj thanks quick reply key events adding tab index make html element valid js key events rather using window working example hence thinking may possible without full solution browniefed cheers seen plugin happy using plugin workaround nice react way reactevents plugin also keen avoid people falling back bad habbits using react backboneesque way thats probably stylistic thing anything else", "d": "7/2014"}, {"body": "bakesteve setting react effect", "d": "7/2014"}, {"body": "eh sure tried anyways updated jsfiddle prove wrong", "d": "7/2014"}, {"body": "add list events nt bubble assume priority work around manually installing event listener input instead", "d": "7/2014"}, {"body": "syranide correct onpaste event nt bubble updated example demo already using listener obviously add remove listener fine shall close", "d": "7/2014"}, {"body": "brendanmoore keep open probably fixed core nonbubbling events believe nt think remove safe", "d": "7/2014"}, {"body": "going close favor believe would solve issue", "d": "7/2014"}, {"body": "yep perfect figured would nt first issue testing", "d": "7/2014"}, {"body": "thought thought using prevent updates happening form element focused would guess might prevent issues focus lost component gets updated", "d": "7/2014"}, {"body": "volkanunsal complex approach would need still check problems listed still cover manage example since button would component focused component completely separate maybe nt understand use", "d": "7/2014"}, {"body": "suggesting making component rather grabbing reference ref way pass props would checked callback say whether node rerendered", "d": "7/2014"}, {"body": "volkanunsal delaying focus next requestanimationframesettimeout probably safest bet seems even though elements finished rendering attached dom guarantee focus succeeding personally would nt mind adding focus method base domcomponent could incorporate fix tricky decision think since lot features could considered equally necessary nt really supported react external focushelper makes sense keep required features part react core anything optional core", "d": "7/2014"}, {"body": "volkanunsal took bit grok said add properties like component accessed ref example move focus tracking outside react keep data layer ensuring aptly named alternative occurs right place works well enough data layer wants track transient ui state events occur however would like bring basic reason really want able use focus management really handles major actions activation describe basically simply gives focus keyboard event handling node delegation describes used provide means activate child action occurs usually things like dialog opening accordion opening rich text area activating screen change etc ignoring pretty simple ignores request mostly used things like containing focus modal dialog activation works fine well depending want wrap reactdom components flatten components get odd cases delegation needs able delegate child unsure would work without setting component may relate component could setting state child components since ca nt change child components render occurs child props changed every child delegates want sure handle property state transition uniform way mixin seems possible however means nothing component actually cause focus change see property occurs updates means events need callback data layer data layer track current focus preserved really problem delegation present since activation use singleton binds ui state data rather direction unsure people feel feel right tracking transient ui state data layer ignoring works fine well long data layer filter components would valid targets focus means need use result reactrendercomponent fire methods based upon current bit odd works", "d": "7/2014"}, {"body": "chrome ok chrome canary canary", "d": "7/2014"}, {"body": "actually added workarounds make sure disabled actually behave correctly holds disabled inputs seems", "d": "7/2014"}, {"body": "one main motivators recent changes separate component instances descriptors specifying works correctly master work released hopefully soon", "d": "7/2014"}, {"body": "wonderful thanks", "d": "7/2014"}, {"body": "perhaps mentioned moving children like causes unmounted mounted retain state reuse dom preferable move around rather addremove css classes achieve desired effect", "d": "7/2014"}, {"body": "true believe chenglou actually working solution preserve state case", "d": "7/2014"}, {"body": "syranide right believe nt possible case trying use important keep mind", "d": "7/2014"}, {"body": "humbly disagree javascript anything boolean many pass around numbersstringsobjects use booleans also feeling hesitant towards issue encourage good practices whenever programmatic cure basic misunderstandings worms imho warning likely emitted perfectly valid cases", "d": "7/2014"}, {"body": "perhaps strings lucky empty string falsey could quite confusing nt feel strongly figured quick discussion would nt complete waste time", "d": "7/2014"}, {"body": "fun jsfiddle last element ref one recognized element seems", "d": "7/2014"}, {"body": "think error first place though perhaps expensive cc sebmarkbage jordwalke could good bug thedekel chenglou jump know expected behavior", "d": "7/2014"}, {"body": "solution reactowner reactcomponent anyone feeling strongly one side another think looks ugly kind reaches reactowner scope ears edit implemented", "d": "7/2014"}, {"body": "would probably make sense reactowner addcomponentasrefto attachref would sort analogous existing check removecomponentasreffrom", "d": "7/2014"}, {"body": "said pr conflict trying enforce ref uniqueness way way ref hopping supported since public release git blame nt go thoughts keeping validation tossing", "d": "7/2014"}, {"body": "realize could define constant module eg reuse later rather first class api smile", "d": "7/2014"}, {"body": "available perhaps never remember", "d": "7/2014"}, {"body": "syranide thanks tip indeed works closing issue", "d": "7/2014"}, {"body": "talking page easy change invoked invoked something else hoping already says method invoked getinitialstate therefore rely thisstate use thissetstate", "d": "7/2014"}, {"body": "specifically referring", "d": "7/2014"}, {"body": "perhaps install jsx machine internet tar nodemodules folder send", "d": "7/2014"}, {"body": "willing give try novice node npm repository files get saved", "d": "7/2014"}, {"body": "something like mkdir throwaway cd throwaway npm install reacttools tar czvf nodemodulestgz nodemodules tar xzvf nodemodules nodemodulesbinjsx work", "d": "7/2014"}, {"body": "many thanks assumed went somewhere central", "d": "7/2014"}, {"body": "think want tar whole reacttools directory send still depend available uses ruby python package capable transforming jsx js based asset pipelines eg ruby rails make use jsxtransformer ship browser loading js environment eg directly assuming java nashorn doable well really anything else actionable moment going close", "d": "7/2014"}, {"body": "cc zpao", "d": "7/2014"}, {"body": "almost certainly caused sebmarkbage expected behavior sebastian let add test ensure least know change", "d": "7/2014"}, {"body": "statics defined twice constructor convenience constructor previously got two different constructors called would get two different values consistently constructor inline reactfuture proposal get rid convenience constructor around components case would able access statics real constructor", "d": "7/2014"}, {"body": "sebmarkbage would expect yield result perhaps wrongly nt inside static method true second one errors", "d": "7/2014"}, {"body": "refers class convenience constructor aka descriptor factory new work create component instance master able reactcreatedescriptor create descriptor class change introduced previously possible call static methods two different also preparing move descriptor factory createclass consumer jul andreas svensson notifications githubcom wrote sebmarkbage var comp reactcreateclass render function return reactdomspan var descr comp var comp reactcreateclass statics create function return render function return reactdomspan var descr compcreate would expect yield result second one fails reply email directly view github", "d": "7/2014"}, {"body": "sebmarkbage interpreted previous post changing gives trying project gives sure difference add empty object like stays quiet try render get code produces error", "d": "7/2014"}, {"body": "sebmarkbage assume createdescriptor meant used errors createdescriptor cut everything else brevity anyway gives", "d": "7/2014"}, {"body": "yea suppose return instance ca nt rendered accessed unit testing whatever currently also call construct weird always broken basically temporary place holder newer jsx transforms work older versions react accepts descriptor factory type argument newer one landed internally nt synced yet accepts either descriptor factory constructor type argument ca nt pull everything else work next version nt think necessarily need fix since earlier behavior undefined ambiguous unfortunate alternative solution mixins right though curious using pattern could give details seen similar patterns used internally upgraded switched descriptors using instance methods belive", "d": "7/2014"}, {"body": "sebmarkbage pattern pretty much boils code temporary artifact transition crappier frameworks depending fix would fix call sites rather later primarily floating seems weird way create descriptor within static method seems good standing way", "d": "7/2014"}, {"body": "thumbsup also put interested adding note", "d": "7/2014"}, {"body": "zpao sure add note need sign cla", "d": "7/2014"}, {"body": "awesome planning shipping asap sooner better yes need cla signed changes", "d": "7/2014"}, {"body": "fixed", "d": "7/2014"}, {"body": "petehunt want expose reactperf addons time", "d": "7/2014"}, {"body": "oh hey document", "d": "7/2014"}, {"body": "wondering sourcemaps release tell confirming", "d": "7/2014"}, {"body": "would possible add hook packagejson get added package npm right downloadable zip file people using built file directly npm package server side react however one wants avoid using one must use npm package either generate add packaged version app well", "d": "7/2014"}, {"body": "wvl care move discussion going block", "d": "7/2014"}, {"body": "would nice get dispatcher addons well cc jingchen", "d": "7/2014"}, {"body": "vjeux general nt move addons nt touch core separate npmpackages believe plan", "d": "7/2014"}, {"body": "dispatcher unless somebody going actually support checked tests even rather", "d": "7/2014"}, {"body": "static functions autobound class instance breaks code js var buttons reactcreateclass statics buttonsetstype reactproptypesarrayof basic trig prealgebra proptypes buttonsets buttonsbuttonsetstypeisrequired longer defined function sebmarkbage suck rearrange code instead", "d": "7/2014"}, {"body": "hm crap nt rearrange code pattern begin work remove convenience constructors descriptor factories around classes maybe also copy properties function bind", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "think actually broken right sure", "d": "7/2014"}, {"body": "chenglou merge internally status", "d": "7/2014"}, {"body": "going regression deferring sebmarkbage sounds like noop going", "d": "7/2014"}, {"body": "fix could unless frequently used think punt coming soon", "d": "7/2014"}, {"body": "fyi objections pushing ignoring", "d": "7/2014"}, {"body": "shipped", "d": "7/2014"}, {"body": "sent iphone", "d": "7/2014"}, {"body": "nice spicyj also thought react used props state set nt seem case like seen syranide irc failfast strict mode dev would nice freeze props deeply state sure component actually updated place drawback really enable failfast requires user add mode everywhere mutable updated simply ignored without error thrown", "d": "7/2014"}, {"body": "slorber arguable bad practice change state inplace react enforce immutability strongly encourages", "d": "7/2014"}, {"body": "spicyj failing fast default able disable behavior per file basis like suggested syranide", "d": "7/2014"}, {"body": "mean react would rather simplify always use array chenglou btw troubles following var useraction reactcreateclass var userpicturewithcontent reactcreateclass client code gives strange warning bu works fine anyway nt warning modify client code client code one children issue warning idea", "d": "7/2014"}, {"body": "proptypes checks always warn let proceed anyways strict type system children warning precisely js thispropschildren array array whose first item array children whose second element component proper one point say extreme fine sure warning could happen", "d": "7/2014"}, {"body": "thanks chenglou understand maybe would make sense react simplify always inject array components children maybe react could flatten structure case array array something similar may useful validate childrens failfast mode see see", "d": "7/2014"}, {"body": "flatten making child always array warning docs extensively discussed array nt think reconsidering anytime soon unfortunately anyways particular issue resolved closed", "d": "7/2014"}, {"body": "yes thanks ok", "d": "7/2014"}, {"body": "code update come separately", "d": "7/2014"}, {"body": "spicyj actually machinereadable translation would refer react id perfectly appropriate use purpose example utilizes simplicity sake could also appropriately use attribute point element bind given view data something application find useful related contentview data case useful something would react id point tag attributes allow application developers utilize way best suites application purpose browser outside applications search engine crawlers read attempt interpret syranide absolutely agree however still causes issues using focussed css selectors without form identification like id class eg following selector thanks considering improvement zpao totally understand love contribute project someday unfortunately nt believe familiar comfortable enough project yet attempt contribute though playing around things love contribute near future however", "d": "7/2014"}, {"body": "nt think going use tag suggest going close hope eliminate extra spans entirely later version", "d": "7/2014"}, {"body": "add tags manually components spans created", "d": "7/2014"}, {"body": "would also easy build version react swap tags really want could probably quite easily search replace prebuilt files", "d": "7/2014"}, {"body": "indeed however updating newer version react would prove bit tedious though one make personal modifications library already active development thanks considering change though", "d": "7/2014"}, {"body": "figured ca nt decide firefox issue something wrong problem seems pass urls eg firefox chokes pass filename eg examplejs sourcemap usable short term going pull actual filename use inline scripts nt appear problem supporting url theory cc fitzgen firefox devtools team might worth looking end well ca nt remember filed bug", "d": "7/2014"}, {"body": "zpao keep full path drop domainpart perhaps", "d": "7/2014"}, {"body": "syranide good idea changed", "d": "7/2014"}, {"body": "zpao would love minimal test case repro mozillasourcemap using devtools", "d": "7/2014"}, {"body": "file similar issue main reason duplicate error handling isrequired changed example documented led issues code migration separately nice ux error messages stay consistent code looks something like really duplication code createchainabletypecheckerchecktype", "d": "7/2014"}, {"body": "cc zpao blocker would nice could merged", "d": "7/2014"}, {"body": "binaries actually mean prebuilt versions react include web page react nt really binary components", "d": "7/2014"}, {"body": "yep mean", "d": "7/2014"}, {"body": "using project would love able include react way last conversation ended", "d": "7/2014"}, {"body": "yeah one confused minutes seems like behavior syranide described would make sense least warning current behavior desired", "d": "7/2014"}, {"body": "hi marker attributes added thanks cassus stated adding related svg element", "d": "7/2014"}, {"body": "realized need good overview", "d": "7/2014"}, {"body": "add random element attribute person needs approach gotten hand either need support everything nothing alternatively add reasonable set things freeze scraped almost everything counting namespaced attributes came however adds minified build though would crush well closure compiler nt want take size increase right talked separate svg build shipping separately addon", "d": "7/2014"}, {"body": "zpao right full svg support could addon depreciation warning need set inform example reactdomcircle become reactsvgcircle", "d": "7/2014"}, {"body": "reactsvgcircle", "d": "7/2014"}, {"body": "zpao full svg addon sounds like good approach many projects nt need svg nt weigh code projects need nt make sense go halfway support", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "also seen works however would nice document reading doc took assumption supported first spicyj tried update using splice read source understand finally arrays supported indices regular properties edit saw documented", "d": "7/2014"}, {"body": "pedroteixeira agree build similar path mecanism instead using object path", "d": "7/2014"}, {"body": "note change made sebmarkbage made change cache result getdefaultprops across instances ca nt refer current instance proper solution js handlemouseover function e thispropsonmouseover return thispropsonmouseover e default behavior", "d": "7/2014"}, {"body": "nt understand show example involving getdefaultprops amp transferpropsto changed way", "d": "7/2014"}, {"body": "getdefaultprops ca nt access called refers class instead new instance created default props looked shared instead twice way original example aiming using transferpropsto specify handler explicitly rendering", "d": "7/2014"}, {"body": "hmmm ok kind breaking change seen lot people use pattern share properties behaviour components would recommend architecting first code example wanted share highlight mixin two different components could say specify handlers actual components case dry like components sharing behaviour adding new event handler mixin require edit components instead mixin", "d": "7/2014"}, {"body": "breaking change telling mentioned prominently release notes mixins generally preferred way share functionality nt know exact use case might able something similar composition like js var highlight reactcreateclass highlight function unhighlight function render function return var paragraph reactcreateclass render function return hello", "d": "7/2014"}, {"body": "jameslong another idea could also strict config jsx compiler refuse compile jsx files use components without passing declared proptypes would work jsx components however affect react runtime dev prod way like guaranteeing component used typesafe way clients nt know something like would easy suppose could complicated things like", "d": "7/2014"}, {"body": "slorber since set props nt necessarily static ca nt resolved compiletime especially consider must also verify type prop", "d": "7/2014"}, {"body": "yes compilation time best effort try find obvious component misusages really typesafe props static parent string props passed child least verified type passed parent child could issue warning parent proptype child string casting may unsafe", "d": "7/2014"}, {"body": "slorber ca nt guarantee something compiletime still pay full cost runtime dev agree though may potential basic checks static types compiletime also doubtful would really worth nt even bother testing dev would throw error face going prod bigger issues deal end", "d": "7/2014"}, {"body": "like chime say love feature always start best intentions documenting props develop proptypes inevitably get forgotten mind proptypes contractinterface nondocumented props treated violation even error preferable warning mismatch would better currently", "d": "7/2014"}, {"body": "called apply map update probably single element got sorry", "d": "7/2014"}, {"body": "applying function see would make sense though closing since exists", "d": "7/2014"}, {"body": "onchange triggered change true false", "d": "7/2014"}, {"body": "spicyj ca nt add method", "d": "7/2014"}, {"body": "itrelease point handlechange called value already changed want fire onchange event radio button becomes checked", "d": "7/2014"}, {"body": "accessible npm build javascript var reactlink require reactlibreactlink proptypes valuelink reactlinkproptypeslinkisrequired maybe", "d": "7/2014"}, {"body": "perhaps drop addons add put mixin", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "remove default value argument require users pass type link value jgebhardt", "d": "7/2014"}, {"body": "petehunt people could still pass goal make explicit forcing specified", "d": "7/2014"}, {"body": "yeah thinking may saner default sent iphone jul jonas gebhardt notifications githubcom wrote petehunt people could still pass goal make explicit forcing specified reply email directly view github", "d": "7/2014"}, {"body": "general arguments passing props state render function", "d": "7/2014"}, {"body": "ctaggart place anyway help get faster eg issues would need resolved create pull requests", "d": "7/2014"}, {"body": "possibility something less inheritence based seems like something la traits would compositionally focused approach worry makes rubyesque problem clever module ordering order get right combination super calls also means need know overriding method mixin makes mixins less reusable alternative would require class definer resolve conflicts non lifestyle methodsprops provide utility functions making really easy admittedly nt know limitations class syntax current one var comp reactcreateclass", "d": "7/2014"}, {"body": "theporchrat code op based ecmascript proposals although changing day day seems", "d": "7/2014"}, {"body": "syranide class syntax proposals method react language solid approach mixinsmodulestraitswhatever react providing mechanism flattening bunch object literalsprototypes adding derived component prototype sure one mixin however want since component constructor prototype great except destroys interoperability mixins definitely possible mixin system works took goal needed class syntax function returns func object strikes method nt seem keeping language progressing current methods also unreactlike mixins nt inheritence based concept seems odd try push way", "d": "7/2014"}, {"body": "theporchrat showed sebmarkbage would probably exposed react would simple way tied react core likely react wo nt go way classes", "d": "7/2014"}, {"body": "ooo interesting thanks link", "d": "7/2014"}, {"body": "react core opinionated build classes generally prefer composition already possible using components proposal providing feature parity current react classes encouraged pattern native trait features ecmascript language likely similar feature sets jul pm theporchrat notifications githubcom wrote ooo interesting thanks link reply email directly view github", "d": "7/2014"}, {"body": "making syntax less awkward issuing warning default time used unless waiver set reactacceptfullconsequencesofdangerouslysettinginnerhtml true disable warning", "d": "7/2014"}, {"body": "noble thought play well party components sent iphone", "d": "7/2014"}, {"body": "addition point cumbersome name make think time use setting global config option wo nt effect", "d": "7/2014"}, {"body": "old issue btw sure stand right nobody seemed opposed guess really want enlighten people could put warning console first use details dangers pitfalls way people would unlikely miss perhaps would add console spam", "d": "7/2014"}, {"body": "sebmarkbage expressed concern making easier came arrangement could remember", "d": "7/2014"}, {"body": "wrapping object pass result blessed interfaces unblessed interfaces could however also introduce innerhtml takes string would linted facebook would nt allow anyone manual string manipulation without going appropriate security channels", "d": "7/2014"}, {"body": "ah right leave current interface also add innerhtmlstring", "d": "7/2014"}, {"body": "nt see advantage adding innerhtml people invariably use introduce xss holes", "d": "7/2014"}, {"body": "perhaps", "d": "7/2014"}, {"body": "wrong sounds scary", "d": "7/2014"}, {"body": "sounded like wanted different name also namingwise uses quite weird implied props", "d": "7/2014"}, {"body": "question likely related", "d": "7/2014"}, {"body": "also", "d": "7/2014"}, {"body": "able work around changing following grunttasksjsxjs obviously change windowsonly provide possible workaround", "d": "7/2014"}, {"body": "changing", "d": "7/2014"}, {"body": "yes verify worked machine sorry used leftover code executing batch files requires going cmd", "d": "7/2014"}, {"body": "cool put pr unless time jbrantly", "d": "7/2014"}, {"body": "sure thanks help", "d": "7/2014"}, {"body": "also rerequire libraries call tests make sure test completely separate see example jest", "d": "7/2014"}, {"body": "still issue android least samsung galaxy android however changing webkittransition transition order suggested marcins fixes issue", "d": "7/2014"}, {"body": "frikille transitionevent defined undefined browser unprefixed version exists better use general forwardscompatible", "d": "7/2014"}, {"body": "syranide fixed", "d": "7/2014"}, {"body": "clearing old old issues seemed like fixed apparently", "d": "7/2014"}, {"body": "would nice always async callbacks sometimes synchronous tends lead confusing behavior bugs", "d": "7/2014"}, {"body": "tested think might fixed fixed believe idea setstate become always async soon afaik", "d": "7/2014"}, {"body": "nt kind hard know without digging code though always async", "d": "7/2014"}, {"body": "reverted", "d": "7/2014"}, {"body": "issue well using cursor pointer ca nt work several case since set cursor helpzoomin place would nice react include awesome fix", "d": "7/2014"}, {"body": "mentionned documented somwhere", "d": "7/2014"}, {"body": "slorber", "d": "7/2014"}, {"body": "syranide whenever need display information relative current time commonly also want keep current passage time hence likely store age value component state keep date timer rather calculate age rendertime generally think want wedge people place render methods depend component state props much possible componentexternalglobal state little possible preferably thoughts", "d": "7/2014"}, {"body": "steveluscher sounds kind fragile think time ubiquitous enough exported react rendering inside react takes place time frozen subsequent calls returns time frozen time would also added root element next checksum would used initial rendering client reusing dom aside fixing mismatches client server rendering would also prevent edgecase inconsistencies rendering two identical timer components currently show slightly varying times say item could show expired one place expired another timing right would prevent entirely petehunt spontaneous reaction", "d": "7/2014"}, {"body": "syranide intrigued idea frozen renderpass timestamp idea let explore might certainly help catch edgecases mentioned useful sync clientserver rendering specific example age aside general point wanted make depending external state like time render methods means renders wo nt behave like pure functions pure renders bit easier reason optimize test respect storing agedisplayage state like able surgically update display age using timer lets vary update frequency commented x minutes ago gt set timer go result minutes beats call whole component calculate fresh relative timestamp", "d": "7/2014"}, {"body": "sounds like super confusing one component uses reactnow another one messes uses datenow would prefer monkeypatched datenow mathrandom friends log friendly warning called reconcile", "d": "7/2014"}, {"body": "petehunt see point unless mistaken would confusingbroken component uses sure understand intention monkeypatching datenow mathrandom warn user agree part nt time ubiquitous enough provide utility rather everyone invent especially since far know way user know freeze thaw time appropriately react", "d": "7/2014"}, {"body": "think monkey patch add warning good idea never want call nonpure function inside personally would thread specific moment possibly date instance props appreciate many find cumbersome people maybe something based context would enough", "d": "7/2014"}, {"body": "samwgoldman propagating time hierarchy make sense theoretically every component instance update every microsecond time ubiqutious ui goes back time time would still continue forward simply belong props imho", "d": "7/2014"}, {"body": "syranide opinion surprises considering react frames components functions props state official docs even say render method pure depending current time inherently impure also nt agree component instances update every microsecond would want could see component needed update second rendering subsecond worst nt problem rerender new moment props second", "d": "7/2014"}, {"body": "also nt agree component instances update every microsecond would want could see component needed update second rendering subsecond worst nt problem rerender new moment props second making precision timer animations would want update every screen refresh would would consider unacceptable entire app rerender settle significantly less optimal timer precision full rerender reasonably large app take significantly long time simply unacceptable rerender entire app also object idea chosing inferior implementation accommodate interpretation someone subjective recommendation fact make significant sacrifices fidelity valuetime accommodate propagating hierarchy means flawed see merits sending props root convinced endall beall treating components isolated instances access circumstancially relevant data fantastic many reasons entail transport irrelevant data perspective component inherently fantastic food thought want show image following put prop url resource identifier impure b raw image data pure", "d": "7/2014"}, {"body": "curious hear others think seem fundamental disagreement regarding food thought disagree passing url impure sure resource end url may changed nothing purity pure output must depend input long nt actually dereference url produce output still pure", "d": "7/2014"}, {"body": "progress bringing doctypes react", "d": "7/2014"}, {"body": "balanceiskey react ca nt mount higher clientside doubt much pressure get done sure understand issue ca nt prepend fixed doctype react output", "d": "7/2014"}, {"body": "syranide prepending doctype feels touch hacky said right probably huge issue", "d": "7/2014"}, {"body": "anyone interested created demo using force layout rendering react using quite completely new react might better ways example using react actually visibly slower using manipulate dom directly used slashdotdash excellent examples template", "d": "7/2014"}, {"body": "jmstewart quick thought probably already aware react example creating complex hierarchy objects used determine required dom mutations tick whereas example operation already almost optimal directly mutates dom via existing selection almost optimal typical force layout simulation almost nodes actually require update tick mutate state existing react components instead starting scratch time expect improved performance", "d": "7/2014"}, {"body": "pretty much worst case react mutating entire dom every tick nt gain anything diffing personally find react example easier reason even simple example like hundreds nodes updating frame may find better dom manipulations hand", "d": "7/2014"}, {"body": "spicyj mind explaining worst case react slower using predefined selections direct dom manipulation could improved immutable data structures andor raf batching started building app lots charts transitioning every action similar dcjs basically worstcase scenario", "d": "7/2014"}, {"body": "wondering happening sourcemap support", "d": "7/2014"}, {"body": "still open nt merged yet", "d": "7/2014"}, {"body": "spicyj thanks pointing missed wondering shooting release", "d": "7/2014"}, {"body": "probably sorry looks like still several unaddressed comments", "d": "7/2014"}, {"body": "spicyj thanks letting know get better understanding things done different looks like go besides support inline vs external files etc", "d": "7/2014"}, {"body": "one option produce source map files bit complicated needs integrate properly file watching system currently nt expect multiple outputs single input added support returning source map used node library nt change command line tool", "d": "7/2014"}, {"body": "spicyj ok using uses comes able inline source maps putting aside baked option external source maps carried would see different unit work trying put pieces together head", "d": "7/2014"}, {"body": "familiar gulpreact particular possible support source maps new version", "d": "7/2014"}, {"body": "question baked option external source maps carried would see different unit work", "d": "7/2014"}, {"body": "would probably make sense separate pr probably nt want transform api actual file writing instead need return source map somehow perhaps object containing transformed source source map since would nt able return single string", "d": "7/2014"}, {"body": "eteeselink could get using arrow functions", "d": "7/2014"}, {"body": "wow hidden feature thanks", "d": "7/2014"}, {"body": "best way integrate jsx typescript create typecript compiler fork support natively jsx syntax started work repo wait typescript internal stabilize resuming work fact think jsx easiest part typescript type system incompatible react multiple reason private type see discussion mixins make working react typescript painful experience yes planned support might help wo nt resolve every problems", "d": "7/2014"}, {"body": "fdecampredon mixins handy tool fundamental part react free substitute anything like nothing nt good fit typescript ofc could potentially conflict thirdparty helpers choose use assuming would nt work box regardless", "d": "7/2014"}, {"body": "syranide yes agree however quite used every third party library anyway main problem private type see codeplex discussion pointed", "d": "7/2014"}, {"body": "hey guys ts developer guy wrote current parser nt read entire thread however looking examples asking seems like would easy add fork typescript parser one willing algorithm would pretty darn simple first prescan file looking xml close tag candidates ie regexp would match strings like allowing spaces things table mapping potential end tags locations file need augment scanner parser parser would updated hit potential opentag would need speculatively parse ahead see actually xml cast endtag table would helpful would allow even decide worthwhile speculative parse ie saw never seen doc would point speculatively parsing hand tag later would worth going forward never find end tag rewind parsing go ahead parsing entity type assertion expression approach similar one already need take today deal ambiguity type assertion expressions generic arrow function expressions speculative lookahead necessary already done stretch augment support xml little trick get end tags ensure nt speculatively parse every time time going fruitful", "d": "7/2014"}, {"body": "documented somewhere", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "oh thanks renamed guess", "d": "7/2014"}, {"body": "sorry clarify onlychild internal name reactchildrenonly public one", "d": "7/2014"}, {"body": "hey guys something helps today still case jsx", "d": "7/2014"}, {"body": "also got bit problem reactcsstransitiongroup gets unmounted middle transition prints warning message console transition happened would expect reactcsstransitiongroup unmounted would consider active animations canceled would show warning message", "d": "7/2014"}, {"body": "meh", "d": "7/2014"}, {"body": "think documentation cssgroup pretty good think lower level transition group additions would really help example fact callbacks asynchronous wo nt work etc", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "nt think right solution problem exists much flexible simple solutions would also applicable events click", "d": "7/2014"}, {"body": "yes yes ftw future", "d": "7/2014"}, {"body": "maybe help grunt server compiles haml html puts folder usage relies compiled html files use approach angular project may help react", "d": "7/2014"}, {"body": "since react nt allow specify dom element since attribute works conjunction attribute make work", "d": "7/2014"}, {"body": "react definitely allows specify element", "d": "7/2014"}, {"body": "ahh mistake error code well", "d": "7/2014"}, {"body": "ever track docsets", "d": "7/2014"}, {"body": "nt think annotated source helpful thing could done pretty good set comments code right public api small lot code makes work backbone underscore code file smaller expose lot code public apis", "d": "7/2014"}, {"body": "year ago pretty sure sync setstate happening going direction workaround fine", "d": "7/2014"}, {"body": "syranide definitely option consider imo whatever worth p would certainly contribute making much less ambiguous esoteric new users", "d": "7/2014"}, {"body": "syranide said referring using standard properties react js properties might good idea especially users nt familiar reactjs use something like properties suffixed reactspecific attributes sure big change talking though could getting much larger discussion regarding react js essentially works core introduces developers certainly something trying instigate", "d": "7/2014"}, {"body": "swivelgames sure understand intention rather align coming would translate directly attributes node would yield", "d": "7/2014"}, {"body": "oh see saying apologize misunderstood", "d": "7/2014"}, {"body": "anyone paying attention improved cursor example consider idiomatic double setstate problem uses implement shouldcomponentupdate", "d": "7/2014"}, {"body": "tried new version seems fix version missing something", "d": "7/2014"}, {"body": "nsakhan supposed work right trying return multiple components root return one edit oh wait docblock need add top files", "d": "7/2014"}, {"title": "", "body": "\u53ef\u4ee5\u5b9e\u73b0\u5417", "num": "380", "d": "7/2014"}, {"title": "seems broken", "body": "know used utilize worked perfectly fine cooked basicsimple jsfiddle use components amp nt get expected results latest build unless dun goofed ie used sample docs seems replace template content completely children ie missing", "num": "379", "d": "7/2014"}, {"title": "using grouping svg container tag g work templates", "body": "using g tag templates nt seem working jsfiddle g tag jsfiddle without g tag adding mapg fragmentjs seems fix issue mapg maptext mapcircle mapellipse mapline mappath mappolygon mappolyline maprect reason lovin vuejs way awesome job", "num": "378", "d": "7/2014"}, {"title": "vuejs server jsdom", "body": "trying make bothside templating vuejs jsdom seem work mostly still got problems rendered vue component gets undefined content instead proper string template param seems jsdom wo nt fully emulate modern object functions changing data objects vue initialization wo nt result dom updates help", "num": "377", "d": "7/2014"}, {"title": "vrepeat amp vstyle nt work", "body": "like html", "num": "375", "d": "7/2014"}, {"title": "property manipulated ui nt get updated values set code", "body": "example provided example move one amount sliders height slider gets set correct value also test computed even though amount height properties get modified time lines purpose seems provide desired result times times causes ui sync model way force ui updated changing property code", "num": "374", "d": "7/2014"}, {"title": "plan", "body": "", "num": "373", "d": "7/2014"}, {"title": "vmodel working input type hidden", "body": "nt know missed something vmodel nt seem update value value hidden input changes example", "num": "372", "d": "7/2014"}, {"title": "feature filter support function values", "body": "think would great could filter functions created jsfiddle demonstrate provide particular usage examples clear enough", "num": "371", "d": "7/2014"}, {"title": "computed property updating properly", "body": "compute value conjunction two boolean values data object result update access getters boolean values returning result get expected value click b button notice b value remains false c works expected", "num": "370", "d": "7/2014"}, {"title": "default data shared reference viewmodels", "body": "run strange behavior assumed created new instance component would clone values definition instead seems copied everything reference think right way structure use case found one would assume insantiated pages home settings key passed mode however happens time component created user key present pages array gains new settings value means component recreated several times throughout flow program extra values added list quick fix something like ready function think nt intuitive automatically called vue would better solution", "num": "369", "d": "7/2014"}, {"title": "computed properties get called even used", "body": "computed properties seem called unexpectedly initialisation even used purpose thanks", "num": "368", "d": "7/2014"}, {"title": "show view ready shown", "body": "lets assume views first list items second edit form items every view loading logic rest calls loading done view shown works great initial start page loaded switch one view another time new view shown data fully loaded changing current view triggers data loading switches html time causes page content blink little shown data yet loaded solve ok loading logic views parent controller manages views", "num": "367", "d": "7/2014"}, {"title": "bad low level api call", "body": "big deal vuesrcdirectivesonjs reset function reset function var el thisiframebind thiselcontentwindow thisel thishandler amp amp elremoveeventlistener thisarg thishandler added code thishandler amp amp reason init call removeeventlistener thishandler null according specs calls must always handler happens update function thisreset line called thishandler line defined", "num": "366", "d": "7/2014"}, {"title": "vrepeat copies first bound element", "body": "use vrepeat put elements use bindings inside tried vtext repeat statement copies elements first bound child ie using datamodel list example following html wo nt display expected static see jsfiddle", "num": "365", "d": "7/2014"}, {"title": "vstyle working properly", "body": "hi vstyle nt working expected please see jfiddle console also see exception initialization otherwise opacity changes properly width height amp scale", "num": "364", "d": "7/2014"}, {"title": "use amp amp operation expression", "body": "using expression display user gender first variable user null error seems amp amp operation work expected", "num": "363", "d": "7/2014"}, {"title": "best way cleanup vue object", "body": "code clears parent dom using jquery empty function context pjax website sure every event listener created vuejs cleanly removed calls removeeventlistener avoid memory leaks looking code appears unbind public methods remove amp destroy latter right", "num": "362", "d": "7/2014"}, {"title": "vrepeat object differing behavior accessing properties via dot vs bracket notation", "body": "sure bug could arguably design seems like vrepeat nt like accessing key value properties using dot notation fine using brackets notation demonstration", "num": "361", "d": "7/2014"}, {"title": "opportunities bind date obj input type date like dominputvalueasdate", "body": "spec", "num": "360", "d": "7/2014"}, {"title": "directive persistent views", "body": "something like vpersistentview would hide view instead destroying course user know created ready events would fired", "num": "359", "d": "7/2014"}, {"title": "possible watch value owned parent inside component", "body": "call something like parent watch property watcher destroyed automatically switch vview", "num": "358", "d": "7/2014"}, {"title": "populate select element options nt select vmodel update", "body": "", "num": "357", "d": "7/2014"}, {"title": "event boots vuejs", "body": "understand vuejs starts booting parsing dom mustaches etc understood right reasons nt done earlier fires", "num": "356", "d": "7/2014"}, {"title": "standard way reveal body everything loaded", "body": "", "num": "355", "d": "7/2014"}, {"title": "get vm instance dom element", "body": "event delegate scenes example listening document click event know dom element clicked get vm instance element clicked demo", "num": "353", "d": "7/2014"}, {"title": "event used inside component template inserted", "body": "tried ready event nt find element login inside settimeout attached event nt seem fire way", "num": "352", "d": "7/2014"}, {"title": "von click handler still trigger click event even mousemoved", "body": "title element try mousedown mousemove mouseup click event triggered bug", "num": "351", "d": "7/2014"}, {"title": "watch whole data except properties", "body": "see code use right way", "num": "350", "d": "7/2014"}, {"title": "support complex propertise", "body": "handling serverside errors need able something like errerrors ulastname thereabouts however throws exception work around something note love vuejs way", "num": "349", "d": "7/2014"}, {"title": "retrieving encapsulated component", "body": "hello months still loving vue stumbled upon something registered amp encapsulated private components vm created via dom others need created procedurally tried returns possible moment also remember issue bpierre specific way instanciate given component without retrieve first", "num": "348", "d": "7/2014"}, {"title": "triggering nondom connected component", "body": "trying test vue component without currently adding dom triggered least consolelog gives something data changes nt triggering output wrong", "num": "346", "d": "7/2014"}, {"title": "loading indicator best practice", "body": "would recommended implementation loading indicator inside componet template", "num": "345", "d": "7/2014"}, {"title": "computed property dependency collection", "body": "sibling components one depends value get computed property works expected put dependent component second dom vice versa true source issue seems dependency collection mechanism however use sibling vm computed property vm must ready first else collected dependency way explicitly specify keypath separate vm dependency computed property force components load specific order fiddle showing issue app works markup wrong perhaps sign poor application design goal many pages one global footer like communicate one another also able show hide footer easily pagebypage basis component definition opposed adding lifecycle callback every page change visibility", "num": "342", "d": "7/2014"}, {"title": "component render without node", "body": "strange issue sure something wrong template use render add html element like works fine", "num": "341", "d": "7/2014"}, {"title": "support nested keypaths filters computed properties", "body": "vue data supports nested objects navigated using operator like normal javascript objects defining filters computed properties however one currently limited flat structure improved organisation readability sometimes would useful able describe filters computed properties also hierarchical way", "num": "340", "d": "7/2014"}, {"title": "firefox warning typeerror mutating prototype", "body": "line firefox gives warning typeerror mutating prototype object cause code run slowly instead create object correct initial prototype value using objectcreate", "num": "339", "d": "7/2014"}, {"title": "access child components", "body": "access child components loaded via vview", "num": "338", "d": "7/2014"}, {"title": "get currentview model", "body": "trying get multi page setup similar example get current view model would like set data", "num": "337", "d": "7/2014"}, {"title": "option actual template node auto use", "body": "", "num": "335", "d": "7/2014"}, {"title": "csp compliant build", "body": "basically use different uses esprima since size nt matter much cspenforcing environments extra code acceptable tradeoff", "num": "334", "d": "7/2014"}, {"body": "\u624b\u52a8\u521b\u5efa\u4e00\u4e2a vm \u554a", "d": "7/2014"}, {"body": "guess want use tag rather one also want instantiate vue component definition", "d": "7/2014"}, {"body": "doh yes silly thanks", "d": "7/2014"}, {"body": "full svg tag list really long current map includes commonly used ones probably include possible tags though", "d": "7/2014"}, {"body": "yah would love full svg support well using coming react element js mapping really sucks add lot elements makes wonder way tunnel things without specifying everything disclaimer nt looked code saying past react project quite painful add multiple unsupported tags", "d": "7/2014"}, {"body": "huh right longer thought least", "d": "7/2014"}, {"body": "jsdom compatibility roadmap current focus getting fleshed branch meanwhile appreciate effort determining cause issues", "d": "7/2014"}, {"body": "thanks response work matter", "d": "7/2014"}, {"body": "input updated model write locked avoid circular updates modify model sliding ignored computed property locked got changed general avoid side effects computed properties getters", "d": "7/2014"}, {"body": "right currently way opening exceptions lock mechanism", "d": "7/2014"}, {"body": "tests limiting value setter works value slider forcing ui directly seem work using filter almost works except slider gets jerky idea", "d": "7/2014"}, {"body": "filter values applied async think direct ui manipulation proper work around vue dom updates applied async model changes hand jsut set slider", "d": "7/2014"}, {"body": "would good idea however specific case min still needs adjusted dynamically variable value since also requires direct dom manipulation think prefer limiting value looks little bit better thank input", "d": "7/2014"}, {"body": "probably interested branch", "d": "7/2014"}, {"body": "branch released intended version leading however since full rewrite expect take iron potential new issues", "d": "7/2014"}, {"body": "pretty excited see vue maturing grown big fan would mind expanding reasons behind rewrite presumably api change primarily implementation change pm evan wrote next branch released intended version leading however since full rewrite expect take iron potential new issues reply email directly view github", "d": "7/2014"}, {"body": "full rewrite", "d": "7/2014"}, {"body": "guotie see post", "d": "7/2014"}, {"body": "way clean concise neat words still ones applying design want happy knowing vue become monster", "d": "7/2014"}, {"body": "gaydenko absolutely certain tradeoffs made terms correctness vs conciseness overall scope size library remain close right things belong vue core lib always live plugin", "d": "7/2014"}, {"body": "great", "d": "7/2014"}, {"body": "wait long time next branch", "d": "7/2014"}, {"body": "guotie expect take another month fixed timeline yet", "d": "7/2014"}, {"body": "handler need change model changing directly dom element documentqueryselector", "d": "7/2014"}, {"body": "yes made purpose external library changes hidden inputs values need changes reflected vue data model", "d": "7/2014"}, {"body": "case interaction different worlds would use events sending pubsub guess conceptually correct different worlds share data send messages see probably external library nt events aware", "d": "7/2014"}, {"body": "vue detect changes directly setting input elements design know external lib changed input value manually trigger event input element notify vue sync value back model", "d": "7/2014"}, {"body": "yes solved problem", "d": "7/2014"}, {"body": "also got issue resolve defined easy accessible place function finish handlers way markup kept clean also results less typing strongly sure vue api must extended way", "d": "7/2014"}, {"body": "reason works change back use stops working strange", "d": "7/2014"}, {"body": "preprocessing vue filter functions function body contains filter inlined compiled getter think directly setting works bypasses step meanwhile definitely try make function filters work intended upcoming version", "d": "7/2014"}, {"body": "expected behaviour see dependency collection gotcha section", "d": "7/2014"}, {"body": "expected behavior defining component definition like setting something constructor prototype shared across instances type native javascript objects instance properties defined constructor similarly vue component instance data defined hook", "d": "7/2014"}, {"body": "add watcher inside ready event watcher readded every time component created", "d": "7/2014"}, {"body": "hmm yeah makes sense chance advising users sort structuring guide time future", "d": "7/2014"}, {"body": "thelinuxlich afaik ready triggered per instance component", "d": "7/2014"}, {"body": "oh okay", "d": "7/2014"}, {"body": "getter andor setters executed initialization determine data dependencies computed properties need recalculated dependency modified", "d": "7/2014"}, {"body": "thank", "d": "7/2014"}, {"body": "solved issue changed view directive vuedirective xview bind function", "d": "7/2014"}, {"body": "good concern consider adding official", "d": "7/2014"}, {"body": "thanks usually fine call listener value since spec says calling removeeventlistener arguments identify currently registered eventlistener eventtarget effect case checking handler first avoid expensive call still good change", "d": "7/2014"}, {"body": "good monitoring event bindings useful", "d": "7/2014"}, {"body": "understand html specification", "d": "7/2014"}, {"body": "missing closing div brackets", "d": "7/2014"}, {"body": "check regarding selfclosing tags", "d": "7/2014"}, {"body": "thanks replies using self closing never realized xhtml vs sorry derp amp thanks quick reply", "d": "7/2014"}, {"body": "fixed dev branch already thanks noting", "d": "7/2014"}, {"body": "really problem way vue data observation works least nt like nondeterministic data structures basically sees reference something template eg assume exists nt exist create placeholder thing conditional nt work easiest workaround stub user object nt user behavior go away next release uses different strategy problem", "d": "7/2014"}, {"body": "method call unbinds directiveslisteners etc removes element dom keeps instance alive reinsertion", "d": "7/2014"}, {"body": "thanks", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "achieve simply", "d": "7/2014"}, {"body": "would nt insert component template dynamically like vview", "d": "7/2014"}, {"body": "since want keep views alive created together one visible one time", "d": "7/2014"}, {"body": "okie dokie", "d": "7/2014"}, {"body": "watcher stay belongs parent unwatch hook though", "d": "7/2014"}, {"body": "ok solved using broadcast", "d": "7/2014"}, {"body": "mean populating", "d": "7/2014"}, {"body": "yeah", "d": "7/2014"}, {"body": "currently issues used together populated options compiled time options present yet someone suggested introducing separate directive might make easier work dynamic options", "d": "7/2014"}, {"body": "oh got", "d": "7/2014"}, {"body": "thelinuxlich", "d": "7/2014"}, {"body": "great gaydenko", "d": "7/2014"}, {"body": "vue nt boot automatically compilation starts explicitly create top level instance", "d": "7/2014"}, {"body": "ooh see btw excellent job crafting api vuejs", "d": "7/2014"}, {"body": "thanks glad like", "d": "7/2014"}, {"body": "vcloak", "d": "7/2014"}, {"body": "exactly", "d": "7/2014"}, {"body": "sure understand example fully could put clickhandler logic inside text component listening dom event component logic handle stored within component make code reusable edit see want change behavior sibling elements vms one actually received event run issues managing kind behavior cleanly end day components ideally deal children recommend registering child vm parent vm using manage event api check", "d": "7/2014"}, {"body": "got thank", "d": "7/2014"}, {"body": "template mean partials", "d": "7/2014"}, {"body": "yeah using like vuespa example", "d": "7/2014"}, {"body": "supposedly partials inserted ready hook look", "d": "7/2014"}, {"body": "native browser behavior", "d": "7/2014"}, {"body": "ermmm right element dragging mistake", "d": "7/2014"}, {"body": "could know property get changed data problem solved", "d": "7/2014"}, {"body": "ways make properties separate object watch documentation says additional properties attached viewmodel data object ready hook observed introduce thisresult alternatively docs say comes processing object data properties keys starts skipped rename result result", "d": "7/2014"}, {"body": "thank bdaglish made test result still want way use wrapper scope watching result solve problem feel good way try demo saw property attached ready hook still observed way use result truly make observed result dose nt render html template demo", "d": "7/2014"}, {"body": "interesting use case make improvements interface event includes exact path changed inside object wait till next major release im meanwhile grouping different objects seems easiest workaround", "d": "7/2014"}, {"body": "okay using grouping way fit case looking forward watch new feature", "d": "7/2014"}, {"body": "closed fast grouping way make code fatter enhancement tag", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "asip key problem async function case", "d": "7/2014"}, {"body": "thanks working next major release address issue", "d": "7/2014"}, {"body": "internal single example quotes really obligatory treat content string literal nt evaluating number current context", "d": "7/2014"}, {"body": "encapsulate", "d": "7/2014"}, {"body": "oops forgot put fiddle used instantiation option like thecomponentjs moduleexports template require thecomponenthtml indexjs var root new vue components thecomponent require thecomponent", "d": "7/2014"}, {"body": "dug source found private components stored hash fix interested know shorter way though", "d": "7/2014"}, {"body": "ignore apparently tangled wires untangle gt lt sorry noise", "d": "7/2014"}, {"body": "nt define component definition since component nt template vue way tell expect observe property way vue initializes data observing twostep process first observe properties option scan template see thing user expect bind template found property found process observed add new observed property best practice define data fields option even value", "d": "7/2014"}, {"body": "fabulous info thanks best seriously", "d": "7/2014"}, {"body": "loading indicator indicate images component", "d": "7/2014"}, {"body": "component date fetched remote source", "d": "7/2014"}, {"body": "would create loader component nest", "d": "7/2014"}, {"body": "sounds like great idea thanks", "d": "7/2014"}, {"body": "hmm general avoid depending another vm computed properties design perspective ideally page components nt aware footer logic whether show footer depending current page seems belong footer put pagefooter relationship object footer component instead scattered component assume using switch pages property app vm footer computed property like", "d": "7/2014"}, {"body": "seems missing closing bracket p", "d": "7/2014"}, {"body": "a\u0155rr im idiot", "d": "7/2014"}, {"body": "sure one especially computed properties bring extra complexity internals filters able nest seems purely readabilitysyntax preference thing one way define filters object first gradually build js var filters group filterscurrency validators filtersemail filtersname", "d": "7/2014"}, {"body": "verison ff warning error breaks execution", "d": "7/2014"}, {"body": "ok looks like recently added ff annoying message affect behavior vue since lot libraries depend hack ff maintain backwards compatibility perf implications negligible use cases vue", "d": "7/2014"}, {"body": "use", "d": "7/2014"}, {"body": "give view", "d": "7/2014"}, {"body": "ah thank nt know give id first", "d": "7/2014"}, {"body": "give example behave afaiu remove need things like right", "d": "7/2014"}, {"body": "well currently template option accepts three things template string id selector template node either node native node documentfragment already fix intended make possible example removes need call extra", "d": "7/2014"}, {"body": "also consider acornjs alternative potentially slightly faster parser esprima played shimmingmodifying today could nt get far esprimaacorn solid parsing javascript syntax object even instrumenting string nt get us much closer goal actually executing without breaking strict unsafeeval csp maybe missing something ideas", "d": "7/2014"}, {"body": "nt got time dig yet take look", "d": "7/2014"}, {"body": "definitely useful thanks references", "d": "7/2014"}, {"body": "worth able get working strict csp environment using browserified version notevil package nt time right test thoroughly could heavily optimized get job done anyone looking quick dirty solution may good starting point complete implementation commit", "d": "7/2014"}, {"body": "finally figured caused infinite loop within data binding nt properly distinguishing regular objects nodedocument like objects thus indexing forever extend convertkey function also check special objects specific fields documenturi documents stylesheets used shadowroots objects nt really know implement less fuzzy way shadowroots really lacking identifying attribute think never want watch either think thanks alessandro", "d": "7/2014"}, {"body": "closing since addressed different issue", "d": "7/2014"}, {"body": "figured required dragover event", "d": "7/2014"}, {"body": "favor backbone like event object would clean methods many components dmfilipenko dynamically binding event handlers viewmodels initialization seems like recipe unnecessary state ca nt picture reasonable situation following would nt work case checking current state expensive would implicate issues design", "d": "7/2014"}, {"body": "first version vuets typescript approach using vue currently depends next build vue given uses within call super map class members vue config important part aligns configuration api runtime api vue typescript class allows finding interfacetype errors deep within project handy team development larger apps actively using vue larger project continue refine approach ongoing sorry delay ted thu jun pm nathan ridley notifications githubcom wrote hey going updates reply email directly view github", "d": "7/2014"}, {"body": "use consolelog view debug data", "d": "7/2014"}, {"title": "add reset method backbonemodel", "body": "needed update model data came server currently two options call set directly nt want changes recorded also could nt use needed respective views update wrote monkey patch coffeescript backbonemodelprototypereset attributes options attrs attributes optionsparse attrs thisparse attrs options wondered nt reset method like", "num": "3253", "d": "7/2014"}, {"title": "add option allow change default put method patch", "body": "using save function sends put requests need patch request simlest way solve like makes crazy use everywhere need simple patch request think adding smth like global setting would great thanks advance", "num": "3252", "d": "7/2014"}, {"title": "backbonecollection constructor wrong optional params", "body": "checking current former documentation shows andor optional would say needs read optional passed either param passed passed passed pass object without passing instantiation takes place object ends", "num": "3248", "d": "7/2014"}, {"title": "collectionadd partial models merge default", "body": "hi using backbone like set collection passing json representing partial models resulting models attributes arguments model defaults creating model directly testing works model object arguments defaults attributes collectionset nt work model collection console current result model expected result bug", "num": "3247", "d": "7/2014"}, {"title": "add option validate single property modelset", "body": "suggestion add option single name validate property set whole model backbonemodelvalidate look similar", "num": "3245", "d": "7/2014"}, {"title": "unable use global jqueryajaxsetup beforesend delete request", "body": "need add csrf token requests backend use following approach unfortunately executed following case var options wait true emulatehttp true processdata true url delete data id backbonesync delete model options nt understand xcsrftoken header added request backbone bug", "num": "3244", "d": "7/2014"}, {"title": "poor add performance sorted collections", "body": "significant performance problems adding items separately sorted collection appears wholelist sort happens every time item added case roll additions single addition operation would trigger one sort performance could improved using binary search find insertion point unfortunately underscore sortedindex take comparator inserting record appropriate location instantly", "num": "3242", "d": "7/2014"}, {"title": "optimize code setting temporary attributes", "body": "remove flower brackets setting temporary attributes code one statement inside condition way follow similar set temporary attributes restore attributes", "num": "3241", "d": "7/2014"}, {"title": "documentation patch missing backbonesync", "body": "lists four crud methods patch even though possible gets argument hidden feature oversight documentation", "num": "3238", "d": "7/2014"}, {"title": "modelhaschanged getting set empty object use", "body": "codepen click menu item supposed get highlighted individually instead get highlighted run code works fine still looking root cause assume modelset figured open issue incase one solved", "num": "3235", "d": "7/2014"}, {"title": "tojson option argument", "body": "takes argument models collections however nt anything argument function simply clones model arguments vestige old code would break anything argument removed never used", "num": "3233", "d": "7/2014"}, {"title": "patch support transforming keys server client", "body": "got server accepts keys snake case client everything camel cased get around converting back forth inside like working great especially scenario want send certain attributes server nt override left case sending complete representation server app also however ran problem line appears pass going get model instance snakecased run camelcased sure something backbone support feels fairly common need transform keys client server nt think always place completely takes away true support want send partial version model easy fix would simply run new extended object rather suppose could potential problems remodifying existing value something nt know ideascomments thanks", "num": "3232", "d": "7/2014"}, {"title": "objectobserve integration", "body": "since largely built listening views models collections objects way utilization thanks chrome stable release reasonably implemented much manageable performant told nt word alternative underlying methods come know love proposing completely away anything simply given presence capable browser utilize instead listening updatingdeleting objects looked everywhere discussion topic nt seem anyone public posts pages even found couple addons well years old inactive however overlooked something even something master branch please point right direction issue closed thanks ps would love take pull nt already worked nt want duplicate anyone current work avoid", "num": "3231", "d": "7/2014"}, {"title": "events selector name complex id names", "body": "input complex name problem comes want assign name id event work", "num": "3230", "d": "7/2014"}, {"title": "success callback executed", "body": "context backbonecollectionfetch would optionsuccess function map directly ajax success callback seem case looking difference success complete success called level returns case seeing success called server returns naively playing backbone etag ifnonematch try get conditional requests working bit tough time best way skipping call optionssuccess", "num": "3229", "d": "7/2014"}, {"title": "listentoonce creates unexpected memory leak listeningto object", "body": "using expect posttrigger free associations listener object much like calling however even though event listener cleans object reference still maintained object potential create unexpected memory leaks example parent view creates child view acts modal parent view close event children views event parent listening child close event fires parent view callback satisfied child view performed everything thought cleaned child view able gc though parent still reference case long living parent view become incremental leak perform view creations normal backbone user idea reference maintained object listened would expectation events watched nt know need perform manually proposal differentiate let perform callback thereby removing association event watched inelegant solution strikes crux problem javascript var listenmethods listento listentoonce inversionofcontrol versions tell object listen event another object keeping track listening listenmethods function implementation method events method function obj name callback var listeningto thislisteningto thislisteningto var id objlistenid objlistenid uniqueid l listeningto id obj callback amp amp typeof name object callback thoughts", "num": "3226", "d": "7/2014"}, {"title": "order routes router guaranteed", "body": "since iteration order object guaranteed described arbitrary order defining routes object safe never run problems wondering behavior browser implementation dependent reason asking issues object iterators returning things different orders contexts node mongo specialized browser used samsung smart tvs called maple would making routes array safer", "num": "3225", "d": "7/2014"}, {"title": "cool library backbonejs", "body": "working neck library backbonejs time year library takes best backbone opinion great model collection modules adds number trendy features like databinding controller view tiny modules view logic model management dependency injection looking developers like contribute library test projects draft api docs writing test get coverage use library work production projects fully usable tell think link neck", "num": "3224", "d": "7/2014"}, {"title": "", "body": "trying use scripts written import dta files directly matlab trouble two things trying using importdta command get importdtaprivate work properly using importmultipledta computer trouble codistributed believe nt parallel computing toolbox wondering way around without buying software anyone could help would much appreciated thanks", "num": "3223", "d": "7/2014"}, {"title": "modeldestroy requiring set noted idattribute send delete", "body": "summary using mongodb setting idattribute id model requires set variable instance id field order modeldestroy actually send delete request server using jquery underscorejs backbonejs example var foo backbonemodelextend urlroot foo idattribute id var editfoo backboneviewextend el page events click delete deletefoo lt lt gt gt deletefoo function ev set id field destroy reason expecting id vs id even though model decl set idattribute id thisfooset id thisfooget id thisfoodestroy success function foo routernavigate trigger true return false notes without thisfooset id thisfooget id call thisfoodestroy runs success delete request sent server since expecting id vs id modeldestroy expect id id", "num": "3221", "d": "7/2014"}, {"title": "routernavigate function called hashchange event function gets call", "body": "code var initialize function window hashchange reset var reset function alert hello reset therouterfunction function routernavigate trigger true replace true emptyfunction function alert hello emptyfunction routernavigate trigger true replace true call emptyfunction defined routes therouterfunction gets called clicking button click button webpage site therouterfunction gets called since hash changed hashchange event took place call reset function therouterfunction navigates calling routernavigate trigger true replace true emptyfunction first call reset emptyfunction order different first calls emptyfunction completes execution call reset function someone please help happening nt like", "num": "3219", "d": "7/2014"}, {"title": "router silent true initialize view without calling render", "body": "slider homeview initialized method runslider homeview loaded need method runslider called call runslider homeview render works navigate home first load automatically initialize slider others events without replacing dom calling render silent true set router could use backboneview initialize method view even initialized code", "num": "3218", "d": "7/2014"}, {"title": "maintain lodash branch backbone", "body": "possible backbone support lodash branch pulled directly component build realize could potentially mean releasing two tags per release one underscore another lodash helpful remove need teams maintain versions backbone lodash customizations alternatively way dynamically inject value way injected", "num": "3216", "d": "7/2014"}, {"title": "question collection attributes events", "body": "assume collection holds set models following attributes playlist attribute show song playing whenever changes right since listen collection attributes events manually set currentsong call learned basics backbone clearly want naturally listening events one alternative thought moving attributes different model eg musicplayer setting collection model attribute like extra info built chrome extension instant music learn backbone first time middle refactoring make code less awful issue past might related update ran across faqnested think good solution rename collection collection make another model contain", "num": "3213", "d": "7/2014"}, {"title": "need trigger event adding multiple models", "body": "add models collection get triggered events performance issue dom operations every adding models also removing ones better add something like", "num": "3212", "d": "7/2014"}, {"title": "hardly depends jquery since version", "body": "typeof define function amp amp defineamd define underscore jquery exports function exports export global even amd case case script loaded others may still expect global backbone rootbackbone factory root exports", "num": "3211", "d": "7/2014"}, {"title": "history accept route matching behavior", "body": "default backbonehistory resolves route first match think possible also use another strategies like match matching routes match specific route ie multiple routers distributed many modules one module defines another module defines specific route strategy would avoid conflicts would nt trigger callback route starting", "num": "3210", "d": "7/2014"}, {"title": "urls collection", "body": "documentation collectionurl states models within collection use url construct urls documentation correct nt see actually happening", "num": "3209", "d": "7/2014"}, {"body": "two options create method override save directly quite common enough use case need add backbone core", "d": "7/2014"}, {"body": "hey tomascasas right potential confusing find syntax pretty ugly think note docs passing first argument collection model constructors create instance options passed might helpful want open pull", "d": "7/2014"}, {"body": "happy point right repo procedure ie branching pr", "d": "7/2014"}, {"body": "documentation lives repo indexhtml fork account create branch master make changes push branch back repo open pr master", "d": "7/2014"}, {"body": "hopefully pr already let know ok also wanted note warnning applies cases could handled checking array first param could considered", "d": "7/2014"}, {"body": "mind using jsfiddle template show mean looks like created correctly", "d": "7/2014"}, {"body": "thanks nt think point validating model certain combinations properties going valid invalid together state validating single value also done easily setter", "d": "7/2014"}, {"body": "using application startup function init options", "d": "7/2014"}, {"body": "looks similar code nt execute method", "d": "7/2014"}, {"body": "always pass sort false option add call using type loop exit loop call sort collection", "d": "7/2014"}, {"body": "worth adapting comparators something like work case", "d": "7/2014"}, {"body": "say updating sortedindex way important comparators native way js uses describe sorting makes sense support libraries like underscore", "d": "7/2014"}, {"body": "good catch thanks", "d": "7/2014"}, {"body": "supposed get highlighted individually instead get highlighted seems work fine one thing noticed creating model like actually setting attributes actually setting properties model ie returns undefined returns change events may firing initially want set property contain values want set default actually happening creating menu items passing raw objects collection documentready handler setting property still undefined please future use stackoverflow mailing list irc channel questions like github issues developing framework", "d": "7/2014"}, {"body": "code meant allow highlight one item time click item highlight items unhighlight switch backbone version see intended result still think bug", "d": "7/2014"}, {"body": "reread docs retrieve hash model attributes changed since last none check comes set models false invocation naturally check return true particular model nt happened yet might want change logic either set collection models false set kind active model prop collection avoid looks like interpreting changed since last changed since model called would doc update help clarify things", "d": "7/2014"}, {"body": "think doc update would clarify things still curious logic works later versions", "d": "7/2014"}, {"body": "clue work version changed may hold answer clue start computechanges work outward", "d": "7/2014"}, {"body": "tested every version work guessing something broke investigate suggest", "d": "7/2014"}, {"body": "hi funkedgeek argument present remind folks argument present usable see context", "d": "7/2014"}, {"body": "anything wrong overriding fact probably best way look line backbonesync object pass advanced get sent instead calling jsonstringify model attributes try plugin pretty straightforward support userland current state things", "d": "7/2014"}, {"body": "think missed point calling attrs immediately later pass get model overriding even nt fix basically saying need transform keys serverclient never utilize function furthermore handle case want conditionally send complete representation model partial pass object add argument getting ugly reason pass", "d": "7/2014"}, {"body": "little confused problem want able pass snakecased attributes store camelcased server using keep attributes client camelcased snakecased whichever want switch sending server would model ever need get set using something nt going store locally saying transmogrifying attributes client server usually bad idea dead set going override methods get work", "d": "7/2014"}, {"body": "want model use camel cased attributes convert snake case sending server want able complete representation model via results calling also partials via transforming attributes nt evil ruby server speaks snake javascript client speaks camel trivial transform object two naming cases big deal fact way written seems like backbone made support cases perhaps oversight unless nt tell one offending line code", "d": "7/2014"}, {"body": "ok see line always sets pass would like backbone maybe check existence setting passedin way overridden could set snakecase first without affecting set model diff diff git abackbonejs bbackbonejs index abackbonejs bbackbonejs wraperror options method patch optionsattrs attrs method patch amp amp optionsattrs optionsattrs attrs xhr thissync method options", "d": "7/2014"}, {"body": "right yeah seems like good solution tad inconsistent api standpoint since still unable call understand basically proxy guess also makes sense would responsibility perform lines call essentially recreating would done normal circumstances", "d": "7/2014"}, {"body": "overridden method would monkeying yes would like nt need call override part", "d": "7/2014"}, {"body": "ahh see course sending complete representation override return work perfect thanks", "d": "7/2014"}, {"body": "closing favor", "d": "7/2014"}, {"body": "coming exciting new features", "d": "7/2014"}, {"body": "would love take pull nt already worked hey buddy go would make awesome pull request", "d": "7/2014"}, {"body": "good luck awesome", "d": "7/2014"}, {"body": "let know need extra hand", "d": "7/2014"}, {"body": "thanks support large enough delay replies started another project pushing queue hopefully redesigning wwwsheppardafmil wo nt take long though", "d": "7/2014"}, {"body": "hi bichotll believe need escape inner brackets slashes", "d": "7/2014"}, {"body": "great thanks", "d": "7/2014"}, {"body": "scope backbone backbone dutifully accepts whatever jquery tells statusfailure jquery success", "d": "7/2014"}, {"body": "neat mailing list better avenue types announcements might want post", "d": "7/2014"}, {"body": "thisfooset id thisfooget id attributes unchanged backbone wo nt add attribute model fails either use preference strikes", "d": "7/2014"}, {"body": "think missed issue functions work fine id modeldestroy expecting id otherwise nt send delete rest api server issue noted specific modeldestroy sending delete request server everything else works need reopen issue look closely nt send delete server var foo backbonemodelextend urlroot foo idattribute id var editfoo backboneviewextend el page events click delete deletefoo lt lt gt gt deletefoo function ev thisfoodestroy success function foo routernavigate trigger true return false send delete server var foo backbonemodelextend urlroot foo idattribute id var editfoo backboneviewextend el page events click delete deletefoo lt lt gt gt deletefoo function ev set id field destroy reason expecting id vs id even though model decl set idattribute id thisfooset id thisfooget id thisfoodestroy success function foo routernavigate trigger true return false", "d": "7/2014"}, {"body": "really question stackoverflow irc channel mailing list try luck github issues feature requests problems framework think find issue line property id attribute model must set create url correctly set property backbone use determine model id", "d": "7/2014"}, {"body": "point backbone still using id id destroy method expecting id set nt issue backbone btw using mongodb backend mon jul pm adam krebs notifications githubcom wrote really question stackoverflow irc channel mailing list try luck github issues feature requests problems framework think find issue line id property id attribute model must set create url correctly set idattribute property backbone use determine model id reply email directly view github eom", "d": "7/2014"}, {"body": "amintora problem still occur try using latest master version backbone", "d": "7/2014"}, {"body": "try hours mon jul pm jeremy ashkenas notifications githubcom wrote amintora problem still occur try using latest master version backbone reply email directly view github eom", "d": "7/2014"}, {"body": "ok issue master version", "d": "7/2014"}, {"body": "create small jsfiddle reproduce issue", "d": "7/2014"}, {"body": "adam looks like right error code issue backbone tue jul pm adam krebs notifications githubcom wrote create small jsfiddle reproduce issue reply email directly view github eom", "d": "7/2014"}, {"body": "cool glad hear worked relationship properties attributes models get bit murky around js var mongomodel backbonemodelextend idattribute id urlroot widgets var new mongomodel id var b new mongomodel id consolelog aid aget id aget id undefined undefined consolelog bid bget id bget id undefined consolelog aurl widgets consolelog burl", "d": "7/2014"}, {"body": "hi sharmamanish understand correctly concerned order handler route handler called source appears hash set router handler called expected would mind providing working example code reproduces issue jsfiddlejsbinetc", "d": "7/2014"}, {"body": "issue tracker feature suggestions problems framework try mailing list stackoverflow", "d": "7/2014"}, {"body": "lodash useful nonstandard jdalton dedicated good amount work making true dropin underscore work minimal fuss alternatively way dynamically inject backbone value way backbone injected pattern works well jquery used places throughout code lazilyassigning variable useful underscore hand used times place would muddy code great needs eagerly required backbone work correctly feel free keep fork keeping date trivial", "d": "7/2014"}, {"body": "forking needed lodash supports aliased underscore fact many projects like yeomangeneratorbackbone use lodash instead underscore default alias backbone amd loader example using requirejs aliases another example using lodashamd build config try moderncompat build lodash first problems always drop back lodashunderscore build", "d": "7/2014"}, {"body": "using backdash really like works well browserify aliasing modules nt quite easy require", "d": "7/2014"}, {"body": "browserify also aliasify allows aliasing", "d": "7/2014"}, {"body": "yep shimming path great way go browserify webpack support aliasing", "d": "7/2014"}, {"body": "thanks jdalton component package management nt support aliasing though afaict maintaining fork internal repo named underscore lodash underneath wanted move formal approach thanks", "d": "7/2014"}, {"body": "question issue framework try stackoverflow mailing list irc channel check backboneattributes adding setters change events collection", "d": "7/2014"}, {"body": "closing duplicate others", "d": "7/2014"}, {"body": "nt add event example backbonejs core debounce advice desired due async nature", "d": "7/2014"}, {"body": "see got new argument feel free introduce", "d": "7/2014"}, {"body": "hi ramoncaldeira matching styles may work think generally useful style first match backbone stick said easily replace matching logic overriding history loadurl", "d": "7/2014"}, {"body": "yep right", "d": "7/2014"}, {"body": "noticed two lines code might affected putting one model multiple collections js destroy function options options options clone options var model var success optionssuccess still glad find events would work thx", "d": "7/2014"}, {"body": "idea pushed official package new version ran issue well", "d": "7/2014"}, {"body": "similar workaround component would solve need addressing", "d": "7/2014"}, {"body": "drjoke mistake facing similar issue", "d": "7/2014"}, {"body": "adding reset option save sometimes server logic may update one attribute causes another attribute change far tell ca nt make backbone update dependent attribute model even use wait true", "d": "7/2014"}, {"body": "hey want believe parts backbone useful well written find mixing objects would great able import modules backbone thereby avoiding code duplication importing parts application one example backboneevents agree jashkenas keeping backbone one file easy read probably draw new users contributors however think able output commented assembled version able take care users bit contributors nt think serious contributors would dissuaded contributing backbone series imported modules versus one file still annotated built source able read modules think broken backboneevents backboneextend backonesync least every major chunk file", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "gist gather thread sending ajax data server contenttype preferred could give explanation source see sites like github google twitter use latter ajax requests reason preference", "d": "7/2014"}, {"title": "promiseproxymixin rejectsaborts old promise setting new one", "body": "given controller like one long running call call set property instance controller one sets another short running jsoncall call b promise fulfills finished content set b result short time soon also finished content set result actually wrong one see example open jsconsole calls actually print new result promise object stored nowhere proxy object even done manually", "num": "5292", "d": "7/2014"}, {"title": "error transitionto running tests", "body": "upgraded regression one unit tests test controller send action action handler calls call generating following stack please note happening running tests happen running application also causing tests fail", "num": "5291", "d": "7/2014"}, {"title": "sendaction test component working", "body": "may duplicate closed tl dr specifying action method nt work however action placed calling works need specify action send want pass parameters along action", "num": "5287", "d": "7/2014"}, {"title": "embercollectionview ui content upate controllers property volatile", "body": "come issue using embercollectionview volatile property controller current setup objectcontroller collectionview currently basically filters attributes based couple rules addremove attributes method controller triggers verified collection view object controllers ui collection view nt rerender sure however notice remove setting everything works perfectly runs need use since allow users update attributes nt cached otherwise could see older version attribute another thing nested object filteredattributes method basically takes hash transforms going post stackoverflow thought would appropriate place given unexpected behavior either way help would greatly appreciated since banged head wall hours", "num": "5284", "d": "7/2014"}, {"title": "routeargs undefined", "body": "app running ember canary today wanted upgrade latest betacanary release got error look routeargs property using ember animated outlet kind outdated worked fine since new ember release problem comes line var ret get linkview routeargs slice get linkview routeargs returns undefined anybody help one", "num": "5283", "d": "7/2014"}, {"title": "regression controller else", "body": "seems regression using falsy value controller shows else block shows main block", "num": "5282", "d": "7/2014"}, {"title": "testing promise resolution", "body": "trying write test action handler one components stubbing method one models return resolved promise using component chain promise using pattern use lot serverside use promise library however clientside never end inside function block assert functionality unit tests anyone provide insight best way", "num": "5280", "d": "7/2014"}, {"title": "feature queryparams boolean default value set true", "body": "edited existing jsbin shows example boolean values changed variable default value see demo click links show hide routers model hook always set default value working intended ember version", "num": "5275", "d": "7/2014"}, {"title": "feature queryparams removing queryparams links explicitly", "body": "good work queryparams beta works well app except one thing ca nt figure queryparam set link links bare route without queryparams query params appended automatically ie results route hash ok great question generate queryparamless urls param set earlier transition tried leads course work around like prefer clean url btw tried hash historybased routing strategies summarizing way clear queryparams explicitly helper would frameworkprescribed way solving problem", "num": "5274", "d": "7/2014"}, {"title": "cleanup arraycomputed", "body": "nt replace items place property changes consider compound dependent keys", "num": "5268", "d": "7/2014"}, {"title": "cleanuprefactor collectionview arraycontroller", "body": "two things pretty tightly coupled may want split collectionview work itemcontroller able sort arraycontroller computed property itemcontroller", "num": "5267", "d": "7/2014"}, {"title": "cleanuprefactor container", "body": "non singleton injections treated singleton x child containers nt clobber resolver delegation presume extend ember extend", "num": "5266", "d": "7/2014"}, {"title": "triggerevent helper possibly broken using keypress", "body": "following get empty array args triggerevent helper resulting failed element lookup possible something incorrectly else help debug issue latest build thanks running great oss project", "num": "5265", "d": "7/2014"}, {"title": "improverefactor outlets view creation", "body": "get polluted template rendered named template able use outlet support rendering outlet created template render transition static segment dynamic clean content avoid unnecessary view reinstantiation changing model", "num": "5264", "d": "7/2014"}, {"title": "refactor object model", "body": "mixinprototypereopen call didapply x emberrequired work extend", "num": "5263", "d": "7/2014"}, {"title": "refactor controllers", "body": "resolve issues", "num": "5262", "d": "7/2014"}, {"title": "refactor view layer", "body": "resolve issues allow application view receive multiple rerenders examine classname reset issues", "num": "5261", "d": "7/2014"}, {"title": "deprecate slash namespace", "body": "currently slash lookups used namespaces deprecating next release deprecate subsequent release remove code", "num": "5260", "d": "7/2014"}, {"title": "new ember select", "body": "existing emberselect many known issues eventual plan create new simpler version deprecate old one rwjblue preliminary work", "num": "5259", "d": "7/2014"}, {"title": "nested async test helpers fire correct order", "body": "affects fixed acceptance test async test helpers nested test helpers run proper order example visit andthen function fillin inputfirst something fillin inputsecond something else click button andthen function fillin inputfirst happened fillin inputsecond happened click button happened yet example jsbin", "num": "5251", "d": "7/2014"}, {"title": "node undefined", "body": "added polyfil ensure older firefox versions break check unfortunately introduced regression specific failing line", "num": "5250", "d": "7/2014"}, {"title": "registerboundhelper bound options working expected", "body": "example jsbin working emberjsemberjs trying make inputhelper work bound helper process run two issues returning bound value expecting based documentation bound helper reevaluated options see jsbin format seems work according documentation quoteless version also work sure related", "num": "5245", "d": "7/2014"}, {"title": "access computed properties itemcontroller sorting multiple times", "body": "trying combine sorting filtering array controller works beginning keep changing sortproperties template fails render cp item controller failing bin click sort button multiple times template stops showing computed properties item controller already asked link multiple work arounds get working listed answers comments feel work works ok beginning sure related tried debug ember computed code league", "num": "5239", "d": "7/2014"}, {"title": "invalid state rootdeleted", "body": "apparently ember allow invalidate delete request returns default message deletion allowed embers raises since object error ca nt retrieve error message try delete get right error response server error messages returned", "num": "5234", "d": "7/2014"}, {"title": "addmetamorphcheck defensive", "body": "function coded defensively running scenario documentgetelementbyid returning null parentnode calls throwing read property parentnode null", "num": "5233", "d": "7/2014"}, {"title": "enhancement relax selection property inside emselect", "body": "scenario instance array want display element via object instance property object absolutely needs element array enforced comparison object elements array instead would way specify long ids object match good go ids could convention maybe would way override different property see jsbin example talking exactly pull request something develop one suppose", "num": "5231", "d": "7/2014"}, {"title": "incorporate morph emberjs", "body": "part ongoing effort ensure whole emberjs ecosystem internally migrating several microlibs included repositories put pipeline brocfile next list however written rwjblue discussed library brought updated accordingly wanted keep track", "num": "5227", "d": "7/2014"}, {"title": "create polymorphic record bug", "body": "asked question think think bug emberdata create record polymorphic relationship assertion barfs saying wrong type however use prod version emberdata nt assertion test code creates record fine sets id type correctly perhaps assertion test wrong nt allow polymorphism anyway jsbins question show believe correctly maybe proper way create polymorphic record searched high low found good documentation thanks advance bfcoder", "num": "5218", "d": "7/2014"}, {"title": "expose lookup application instance", "body": "think legitimate use cases would want get reference singleton container via application instance example increase performance want send initial json payload client code however distributed service environment frontend web server makes n concurrent calls backend services nt want block instead want stream base page using chucked encoding keep socket open requests resolved stream browser something like appcontainerlookup store main push someresource id title foo appcontainerlookup store main push id title foo appcontainerlookup store main push id title foo backend calls resolve streamed client frontend web server packet format knows push records store options would add unique identifiers script tags polling services pushed records store seems kind hacky technique known big pipe comes facebook however built similar systems past deal aggregating ui ssr applications tl dr like forced use api never touch allow us populate data store streamed base page", "num": "5213", "d": "7/2014"}, {"title": "query params replace seems broken", "body": "fiddle would expect replace true would cause history entries click change button expectation incorrect something wrong actually broken", "num": "5211", "d": "7/2014"}, {"title": "cleanup eager urls abort", "body": "eager url updates nice everything manages abort transition runloop aborts amp transitions happen subsequent run loops case leave application broken state abort case end url nt reflect real current state next time user hits back button nothing happens redirect case break back button leaving intermediate state user history often redirect back discussed machty agreed would good work likely router keep track eager url pushes unwind similar abort happens", "num": "5210", "d": "7/2014"}, {"title": "component actions thissendaction default behavior", "body": "say component three actions internal functionality seems pretty redundant specify action hash component like reason ca nt default action nt specify custom handler", "num": "5209", "d": "7/2014"}, {"title": "transitionretry captures previous router state transition aborted", "body": "transitionretry seem always working example one follows links sequentially finally clicks button transitionretry url reflects product undefined", "num": "5208", "d": "7/2014"}, {"title": "ember select select option", "body": "view emberselect contentindustries valueindustryid optionvaluepath contentid optionlabelpath contentname configuration export default emberrouteextend setupcontroller function controller model thissuper controller model var borrowinglimits ember getjson function items itemsforeach function item borrowinglimitspushobject id itemid description itemdescription model function params var return ember getjson geturl model renders industryid selected values id fix problem", "num": "5206", "d": "7/2014"}, {"title": "accessing controllers within component", "body": "within component programmatically creating new view want specify controller view using seem work directly looking controller using works feels wrong passing reference controller component surrounding template works also feels wrong correct pattern creating viewsassigning controllers within component", "num": "5204", "d": "7/2014"}, {"title": "possible super bug", "body": "essentially new super wrapper requires methods called scope object housing method sure bug intentional worked pre appfooroute emrouteextend blah function alert foo appindexroute appfoorouteextend blah function alert index model function var blah thisblah blah return red yellow blue super simple example showing problem working", "num": "5198", "d": "7/2014"}, {"title": "meta missing aliasedproperty", "body": "upgraded got error thrown emberdata value passed aliasedproperty nt meta function run never see aliasedproperty come ever see computedproperty", "num": "5184", "d": "7/2014"}, {"title": "mergedproperties unexpected deleting behavior", "body": "see jsbin seems nt specify property object marked mergedproperty never gets passed basically deleted set", "num": "5182", "d": "7/2014"}, {"title": "computed leaks observers", "body": "using computed problem observers removed example test within console fast noticeably slower unchanged", "num": "5181", "d": "7/2014"}, {"title": "helper subexpression within component causes component render incorrectly", "body": "helper component renders fine add helper subexpression resulting html gets borked tested canary resulted issue edit also issue", "num": "5180", "d": "7/2014"}, {"title": "findbyid", "body": "ca nt seem find documentation storefindbyid search ember site shows search actual info thanks", "num": "5176", "d": "7/2014"}, {"title": "ability define itemcontroller inline", "body": "opening discussion currently define inline like would nice able thing itemcontrollers like broader note seem like natural fit think makes sense unify api use semantics define looking feedback attempt implement", "num": "5174", "d": "7/2014"}, {"title": "metalviews master childviewsproperty replace nt special case containerview", "body": "insted merely defer replace backing view object also fixes cycle stuff", "num": "5173", "d": "7/2014"}, {"title": "input two way binding via bindattr", "body": "seems provide one way binding value updated model property updated ps helper input valuepropertyname works see", "num": "5172", "d": "7/2014"}, {"title": "high order function property manipulation", "body": "would nice function update property without using pair often find writing code like javascript foo objget foo something newfoo something else objset foo newfoo getting value property modifying way setting back examples ember would action updating property easily abstracted high order function simply little benefit javascript due verbosity anonymous functions coffescript nicer tiny example love versus features find nice variant less vars property name string vote used harder make typo obvious value updated ie wo nt return less typing implicit scope defined pair made explicit", "num": "5171", "d": "7/2014"}, {"title": "unit tests emberdata models", "body": "create new model unit test property model already set right way reset write unit tests verify property updated correctly controllers modify models", "num": "5170", "d": "7/2014"}, {"title": "qp uses global json object nt old browser safe", "body": "likely drop replacement usecase cc machty unfortunately might challenging another approach likely good practice going forward maybe prepare compatibility shim instead one includes", "num": "5169", "d": "7/2014"}, {"title": "set readonly property upgrading canary", "body": "upgrading canary version ember morning receive following error currently something like filters null filters computedbinding function key value argumentslength gt thisset filters value null value null filterconditions computedreads filters segmentnames function return thisdecodeconditions thisget filters aliased like computedbinding emcomputed computedreads function var args args lt argumentslength slicecall arguments return emcomputedapply em args readonly stacktrace help would awesome thanks advance", "num": "5168", "d": "7/2014"}, {"title": "feature queryparams regression beta routerhandlerinfoshandlerreset set true", "body": "extending custom object property causes transitions route break throwing typeerror jsbin example list handlerinfos run outputs function isexiting transition error gets thrown routerjs seems happen extending route reset set true put inside normal cause happen happen master happen beta canary metal views nt tested others", "num": "5167", "d": "7/2014"}, {"title": "detect warn goofy use", "body": "came across desk today meant silently failing confusing", "num": "5163", "d": "7/2014"}, {"title": "query params test failures", "body": "basic issue comparing object one without comparison fails spoke machty chat think easiest thing create custom use", "num": "5158", "d": "7/2014"}, {"title": "view gets recreated model updated", "body": "rails backend returns updated model json put change dsmodel save ember view belongs model eg userview user model gets destroyed recreated sure correct behavior causes trouble use animation didinsertelement view supposed run however runs whenever model changes content returned server instead updated model json everything works expected opened issue emberdata since sure belongs", "num": "5157", "d": "7/2014"}, {"title": "actions fired within yield fired containing component", "body": "using construction action fired within template included component used work previous version ember using ie action correctly intercepted containing component however since moving version nt work anymore shown jsbin sure way using intended behavior bug someone clarify", "num": "5155", "d": "7/2014"}, {"title": "dsstoreupdate updating bindings route model object dsstore", "body": "model bunch properties would like update json returned server however two similar methods giving different results method controllerstoreupdate form data var formcontrollerstoregetbyid form dataformid formsetproperties dataform relationship route model store initialized model hook expected behavior update", "num": "5152", "d": "7/2014"}, {"title": "regression error template render", "body": "entering route throws exception error state transitioned template never gets rendered assume related changes exception gets thrown console intended change restore old behavior error message shows nothing gets rendered", "num": "5148", "d": "7/2014"}, {"title": "feature queryparams updating property number string caused property become nan", "body": "query param bound property value number try update value string gets nan see demo", "num": "5145", "d": "7/2014"}, {"title": "unexpected behavior loop", "body": "sure bug seems deliberate behavior confusing template something like using arraycontroller itemcontroller defined works fine however try use argument action action function bare model access controller made jsbin illustrate found workaround also jsbin using viewcontentindex objectat seems hacky like said seems intentional else would transform expect access controller better way", "num": "5144", "d": "7/2014"}, {"title": "createelement nt call didinsertelement", "body": "hi create view manually call createelement didinsertelement nt called view however read documentation", "num": "5143", "d": "7/2014"}, {"title": "rsvphash resolves without content", "body": "using rsvphash promise resolves without data object passed function example hashsession undefined thus appsession undefined code works perfectly browsers gt chrome tested latest canary build master", "num": "5142", "d": "7/2014"}, {"title": "model binding problem", "body": "hello trying submit model template one template like input valuebinding name required required class formcontrol id name save also one model like export default dsmodelextend name dsattr string controller export default emberobjectcontrollerextend submitaction function data windowalert submit model thisget model model function return thisstorefind companydetails done something wrong controller nt bind model nt know problem something wrong model binding u advice submit model correctly thanks", "num": "5141", "d": "7/2014"}, {"title": "query param links active root param matching", "body": "follow ember docs query params would think perfectly reasonable way write query param link would instead query param link would currently always active long current route leads strange behaviors like menus full filters active even none query params actually used demonstrated jsbin click posts see mean problem nt exist index routes", "num": "5138", "d": "7/2014"}, {"title": "add testing harness public api exports", "body": "example", "num": "5133", "d": "7/2014"}, {"title": "renderhelper use contextstring controllername", "body": "default behaviour render function specifies takes view model nt explains one parameters take build controller looking renderhelper function found next line renderjs know render template specific controller use following syntax seems hard messy model controller use related propose change line next line syntax render model controller instead getting default arrayobjectcontroller would next one", "num": "5130", "d": "7/2014"}, {"title": "read property count undefined", "body": "using emberjs version ca nt reproduce error outside app occurs first load app certain route called sets triggers triggers unfortunately nt know interpret rest stack trace full stack trace error solved issue adding check undefined around nt know right way solve issue nt understand well origin cc bugant", "num": "5129", "d": "7/2014"}, {"title": "identifier expected line", "body": "much additional information available loading ember gives following error id expected line emberjs gem embersource version beta beta still works ca nt move final nt include query params", "num": "5128", "d": "7/2014"}, {"title": "access violation emberobject", "body": "hi recently discover strange thing emberobject wanted know feature bug description problem testclass emberobjectextend propa embera props var testclasscreate var testclasscreate propa addobject props hello propa propa props hello props propa propa concat optimized kind stuff loop big risk memory leak propa propb simple example see property defined actually static property set property instance change local property using array kind value change using actually modify static property think use guard constructor copying objectlike property local property", "num": "5127", "d": "7/2014"}, {"title": "itemviewclass use model itemcontroller arraycontroller", "body": "use view helper render arraycontroller define associated view expect bound model respective currently seem case jsfiddle demonstrate imagine goal set controller context itemviewclasses itemcontroller", "num": "5125", "d": "7/2014"}, {"title": "unable call send within setupcontroller", "body": "looked documents nt see explanation cantshould nt call route action within therefore seeing expected action within route like call controller first gets setup also arbitrarily controller jsbin example works put action within controller example sure best practices put kind action", "num": "5122", "d": "7/2014"}, {"title": "routewilldestroy hook never called", "body": "using hook deprecated mention breaking change regarding changelog change history stops switch edit nvm", "num": "5113", "d": "7/2014"}, {"title": "observer regression objectproxy", "body": "looks like introduced issue observing paths objectcontrollers see using ember build merge commit full stack trace error", "num": "5112", "d": "7/2014"}, {"title": "test helper documentation incorrect", "body": "two issues documentation method must pass undocumented argument order use argument used presented second example actually set argument", "num": "5108", "d": "7/2014"}, {"title": "emberselect always expect groupedcontent", "body": "using ember inspector discovered could nt inspect emberselect viewcomponent definitly comes lines controlsselectjs lines think add line", "num": "5107", "d": "7/2014"}, {"title": "bug linkto unwrapping get content model", "body": "although confusing believe internally content consumption", "num": "5105", "d": "7/2014"}, {"title": "helpers refer parent context like parent render block using parent context", "body": "expected behavior would always contents block rendered using surrounding context renders correctly using raw handlebars seems ember specific problem two bins demonstrating issue ember handlebars", "num": "5103", "d": "7/2014"}, {"title": "queryparamsnew property concatenated default", "body": "tl dr think property controllers default listed default makes inflexible behavior valid use cases instance controller base class defines listing behavior sorting filtering etc used many routes using query parameters controllers extending base class independent specify query parameter names base controller rather specifying times cases nested routes controllers share functionality case would like functionality controllers yet rename query parameters nested controller order avoid name clashes since query parameters concatenated actually get rid query parameters base class resort hacks beta however code tried seems calling controller property directly rather computed property longer works thus currently see way leave defaults altogether would bad dryness code see reason query parameters concatenated property default probably equal use cases enabling easy disabling next impossible requires sorts nasty workarounds", "num": "5102", "d": "7/2014"}, {"title": "bindattr loses static set classes", "body": "see static value bound attribute setting bound attribute static value lose value jsbin see set class lost encountered use case cms end user type bootstrap class clear input type see fail maybe handlebars issue", "num": "5101", "d": "7/2014"}, {"title": "cp based childviews nt fire changes", "body": "trying make composeable form component returns valid child inputs valid simplified jsbin trying even though entering string gt length makes inputs valid parent view nt recompute", "num": "5100", "d": "7/2014"}, {"title": "setupcontroller renamed setupcontroller", "body": "routejs ought named setup setup noun set verb current name suggests setup controller rather set controller also deprecated thing applies would made pull request thought might trivial change deprecations etc", "num": "5099", "d": "7/2014"}, {"title": "multiple ember apps page ca nt observe changes one another", "body": "background multiple autonomous teams working ember applications eventually need allow dockingundocking parent application sub applications need shareable urls location handler implemented using emberlocalstoragelocation jsfiddle linked would expect application template parent application access child application controllers would automatically update child applications change paths realize common use case according brief discussion ebryn ought work nt", "num": "5098", "d": "7/2014"}, {"title": "normalize lookup behavior constants templates", "body": "currently templates resolve variables considered constants nonuniform fashion expect references behave identically", "num": "5097", "d": "7/2014"}, {"title": "emberjscom getting started tutorial crashes jsbin", "body": "getting started online tutorial works fine reaches step entitled transitioning show incomplete todos point tutorial jsbin display goes blank whenever click one implemented filter buttons populated incrementally tutorial active completed problem less severe computer follow along display persists new item entry field shown footer shown body items shown", "num": "5096", "d": "7/2014"}, {"title": "run emberjs nodejs environment", "body": "", "num": "5095", "d": "7/2014"}, {"body": "supported behavior", "d": "7/2014"}, {"body": "could elaborate supported behavior example provided totally makes sense promise asynchronous thing use case valid work around situation find resources google missed something docs anything would happy could point", "d": "7/2014"}, {"body": "swapping promise promise created currently supported behavior plan remove promise proxy entirely make promises bindable", "d": "7/2014"}, {"body": "ok write meant swapping supported missing docs setter must assert got called understand motivation latter promiseproxies dropped anyways could least explicitly stated docs swap promise idea subclass mixin object property would used promiseproxy right like would swap promise along content promise nt matter still fulfills least content think still important promise cancelledcan cancelled whenever needed anymore eg got swapped consider app needs one one long running task could replaced another long running tasks user decides several times tasks stopped could performance issue sure maybe even covered planned changes", "d": "7/2014"}, {"body": "ohcibi promises nt currently support cancelation added specs unclear ever welcome pr updates docs adds assert reason supporting promise proxies interim hack correct solution bind raw promises unfortunately hotswapping also wont work scenario adding introduces something wont able support wen proxies dropped likely correct solution introducing intermediate promise settles final promise choose settles", "d": "7/2014"}, {"body": "jefflage provide steps reproduce isolation", "d": "7/2014"}, {"body": "jsbin shows working properly closing happy reopen reproduction feel free tweak jsbin", "d": "7/2014"}, {"body": "btw fixed issue method functionality extracted method two methods call volatile v nonvolatile nt ideal gets need moment", "d": "7/2014"}, {"body": "provide demo jsbin issue ember core ember animated outlet", "d": "7/2014"}, {"body": "issue definitely ember core since ember animated outlet working previous canary build probably related new feature thought maybe someone could pinpoint easily nt think able build jsbin demo one full function called animated outlet function args linkview router route var ret get linkview routeargs slice animations linkviewparametersanimations retsplice animations return ret example linkto trigger transition linktoanimated index animations main slidedown link linktoanimated clearly animated outlet parse linkto animations attributes via routeargs property since new beta release clear enough thanks", "d": "7/2014"}, {"body": "also worth mentioning currently documented officially supported probably useful smile", "d": "7/2014"}, {"body": "clearly due refactoring think tests use else look bit", "d": "7/2014"}, {"body": "aware ever supported", "d": "7/2014"}, {"body": "seems like may want support parallel support handlebars", "d": "7/2014"}, {"body": "super urgent pretty easily work around see version much nicer smile", "d": "7/2014"}, {"body": "version ember", "d": "7/2014"}, {"body": "jul pm stefan penner notifications githubcom wrote version ember reply email directly view github", "d": "7/2014"}, {"body": "suspect causing autorun bug version rsvp eats errors autorun since fixed believe fixes fault apologies", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "bug fixed master andi believe", "d": "7/2014"}, {"body": "updated still getting getting new errors", "d": "7/2014"}, {"body": "please provide isolated example reproduces problem maybe fix nt branches", "d": "7/2014"}, {"body": "actually error part working thanks help", "d": "7/2014"}, {"body": "fwiw following beforeeach make stable javascript emrun function slots set selected false slots set selected true", "d": "7/2014"}, {"body": "jefflage fyi promises fulfilled end runloop use actions queue async unless using foriegn async actually truely async", "d": "7/2014"}, {"body": "written one way solving create controller action resets query param properties still might use cases resetting query params within example global navigation items always link paramless route", "d": "7/2014"}, {"body": "lfridael queryparams logic stores compares provided value original value set controller prototype remove qp eg", "d": "7/2014"}, {"body": "bradleypriest thx hint needed however using default working use empty string get comparison work ie update clear using empty string default property value removes query params generated url solves problem", "d": "7/2014"}, {"body": "probably nearly enough tests around test helpers work today unless feel like get first", "d": "7/2014"}, {"body": "rush wanted make sure following docs expected", "d": "7/2014"}, {"body": "messed", "d": "7/2014"}, {"body": "toranb give try think covers many different possible argument signatures", "d": "7/2014"}, {"body": "closing", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "start deprecation process tonight rwjblue free pair tonight", "d": "7/2014"}, {"body": "thank", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "prior invoking local helper functions directly instead using ones injected unfortunately meant get chaining expected see closing solved issue thank opening submitting pr confirm regressions", "d": "7/2014"}, {"body": "trek ideas changes reverted handle scenarios old ff old ie", "d": "7/2014"}, {"body": "hjdivad look wanted know bug", "d": "7/2014"}, {"body": "sounds like emberdata thing ember proper", "d": "7/2014"}, {"body": "sorry really ember data move", "d": "7/2014"}, {"body": "good point look forward reviewing pr fixing", "d": "7/2014"}, {"body": "wow exactly need", "d": "7/2014"}, {"body": "theory comparable mixin could help idea provide keypath id tell detect equality", "d": "7/2014"}, {"body": "thinking something like keypath id would id convention nt specify nt want unless think makes sense stick true default comparable mixin point docs", "d": "7/2014"}, {"body": "ca nt change default behavior keypath would opt mixin", "d": "7/2014"}, {"body": "keypath sounds good want take stab producing pr", "d": "7/2014"}, {"body": "kalmanh yes", "d": "7/2014"}, {"body": "real blocker rebase current master metalviews branch cc mixonic allow us pin morph sha done pr referenced", "d": "7/2014"}, {"body": "emberdata repo issue reopened", "d": "7/2014"}, {"body": "confirm bug assertion happens using used ember cli assertion assuming containerlookupfactory model foo import foo appmodelsfoo", "d": "7/2014"}, {"body": "krisselden still ember data issue ember jj abrahms resolver", "d": "7/2014"}, {"body": "container resolve check work", "d": "7/2014"}, {"body": "stefanpenner linked gmail nt notice nt ember data repo", "d": "7/2014"}, {"body": "exist ordering entity instantiation somewhat complicated deferring di framework guaranteed entities instantiated correct order correct dependencies secondly app considered godobject internal coupling abstracted container explicitly private reason wish accomplish great solution would create collaborator store provided injection collaborator would also aware outside world subscription various data sources first easily pick data known location secondly also subscribe sidechannel mechanisms loading web socket", "d": "7/2014"}, {"body": "continue discussion explicit design decision bug closing", "d": "7/2014"}, {"body": "idea approach get everything initial request keep socket open experiments seen extremely high latency times asia establish connection websockets forces secondary handshake client would subject latency initial connection like idea collaborator could use pubsub like pattern know new data flushed page transport mechanism could something like bigpipetrigger loaded someresource id title foo bigpipetrigger loaded id title foo bigpipetrigger loaded id title foo thanks stefanpenner", "d": "7/2014"}, {"body": "chadhietala keep us posted progress imagine many community members like hear somewhat related thinking adding", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "course soon post realize config route controller", "d": "7/2014"}, {"body": "agree issue seeing even hook route url reflects page would gone transition nt aborted", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "also happy submit pr implement functionality chance accepted", "d": "7/2014"}, {"body": "thank great suggestion bubbling actions deep component hierarchies indeed require annoying amount boilerplate something run apps however latest core team meeting discussed one things trips new developers implicitness magic data flow general like start moving towards explicitness less problem address perhaps adding syntactic sugar proxying actions upwards fact could probably pretty easily today computed property macros nt think anyone core team favor adding implicit data flow", "d": "7/2014"}, {"body": "closed issue purely housekeeping nt interpret shutting discussion please feel free continue discussion file new issue proposed explicit syntax take discussion thanks", "d": "7/2014"}, {"body": "worries undertand ref", "d": "7/2014"}, {"body": "pushobject name property either reopen stack overflow gets visibility prefer use issue tracker bugs features thanks", "d": "7/2014"}, {"body": "name problem cut different part code already stackovetflow still nt solution think important problem", "d": "7/2014"}, {"body": "reproduce jsbin easiest way us help debug see bug ember", "d": "7/2014"}, {"body": "simple select know selected value test id test", "d": "7/2014"}, {"body": "fivetanley real app code works api", "d": "7/2014"}, {"body": "nininea sample jsbin returning array model hook causes issue working bin agree current issues especially asynchronous content remember rwjblue posted developing version new ember select emselect issues github", "d": "7/2014"}, {"body": "selvagsz thanks answer fix yet emselet binding value content loaded asynchronously", "d": "7/2014"}, {"body": "nininea could see emselect async issue workaround use jsbin", "d": "7/2014"}, {"body": "selvagsz thanks", "d": "7/2014"}, {"body": "directly looking controller using appcontainerlookup controller xxxx works feels wrong nt using use instead number fine number preferred number preferred decoupling controllercomponent although passing data sending actions help assigning controller view component", "d": "7/2014"}, {"body": "generally treat component like wrapper encapsulates series lowerlevel views something controlleddefined public api within component may render views case based data iterated want use view want views get controllers type x type", "d": "7/2014"}, {"body": "jefflage provide example jsbin emberjsjsbincom description something goes ember conventions maybe sounds like using named outlets nested routes", "d": "7/2014"}, {"body": "basically issue run strict mode accessing global considered insecure mdn say securing javascript submitted fix", "d": "7/2014"}, {"body": "unfortunately shipped missed commit added backwards compatibility cherrypicked work fine sorry inconvienience thanks taking time report", "d": "7/2014"}, {"body": "great wait", "d": "7/2014"}, {"body": "stefanpenner hjdivad thoughts", "d": "7/2014"}, {"body": "ultimatemonty need use registerhelper case improved htmlbars", "d": "7/2014"}, {"body": "mmun thanks info changed jsbin use resolved issue docs show preferred method always need used using subexpressions submit pr mention docs", "d": "7/2014"}, {"body": "ultimatemonty consider bug fixed htmlbars yes helper intended used subexpression always registered registerhelper bound", "d": "7/2014"}, {"body": "ultimatemonty mmun sure resolved using helper output jsbin displays value label whereas expecting label experiencing problem anything returned subexpression gets rendered rest wondering solution available ember handlebars also ember throws uncaught typeerror emberhandlebarshelper emberhandlebarsregisterhelper javascript import ember ember export default emberhandlebarshelper formatdate function date format format format return moment date format format", "d": "7/2014"}, {"body": "riekus use work around issue ember moves htmlbars ember hopefully resolved import ember ember export default emberhandlebarsregisterhelper formatdate function date format format format return moment date format format", "d": "7/2014"}, {"body": "ultimatemonty thanks investigation come realise problem need bound helper passing objects helper believe bound helpers subexpressions working", "d": "7/2014"}, {"body": "riekus time well ember moves using htmlbars guess good mine happens believe read somewhere ember discussion forum aiming nothing confirmed branch ember think used htmlbars integration feeing adventurous", "d": "7/2014"}, {"body": "method private probably want view ember data api docs clicking ember data link menu top left", "d": "7/2014"}, {"body": "thank seems like getbyid nt make server request nothing found findbyid seems make call exact behavior need preferred method achieve without using private findbyid thanks", "d": "7/2014"}, {"body": "want plain old returns promise see", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "gavacho sure saying know property currently accepts string tries resolve looking able define class inline like", "d": "7/2014"}, {"body": "also looking way helper seems wasteful create additional file embercli want computed property", "d": "7/2014"}, {"body": "sounds like good idea sunday july blessan mathew notifications githubcom wrote also looking way helper seems wasteful create additional file embercli want computed property reply email directly view github", "d": "7/2014"}, {"body": "chatting krisselden assertion removed entirely", "d": "7/2014"}, {"body": "quick perusal code supports oneway binding js object dom set observers object detect changes update dom reflect changes think support twobindings bindattr", "d": "7/2014"}, {"body": "personally sure find easier better wonderful thing absolutely make macro application andor distribute use others closing seems like perfect addon material", "d": "7/2014"}, {"body": "reopen issue emberdata repo", "d": "7/2014"}, {"body": "affects usage qp imho constitute breaking change features still work perfectly work simply suggest users add need support", "d": "7/2014"}, {"body": "rjackson think official file need make ember work legacy browsers good idea lets us shims way well good agenda item", "d": "7/2014"}, {"body": "sounds good could host hosted along ember assets bower repo", "d": "7/2014"}, {"body": "rjackson ya think good path forward must ensure tests run shims well self troll epically", "d": "7/2014"}, {"body": "good idea", "d": "7/2014"}, {"body": "long include shim test suite run think right way go really want objectcreate null", "d": "7/2014"}, {"body": "would shims feel like suddenly adding requirement minor release would huge gotcha many people deploying ember tricknotes could probably weigh", "d": "7/2014"}, {"body": "fivetanley maybe could anyone wants build without would included default", "d": "7/2014"}, {"body": "fivetanley thoughts still forming whole idea bear likely safest aka backwards compat route build build take shim needed review specific polyfils want move pure build really know much work certainly possible default file would build swap along instructions shim", "d": "7/2014"}, {"body": "cc mmun", "d": "7/2014"}, {"body": "alvincrespo reproduce jsbin possible would make debugging somewhat easier", "d": "7/2014"}, {"body": "alvincrespo error nt seem match setup described means readonly alias example simple property trying set either way tried reproducing bug unable could provide failing jsbin", "d": "7/2014"}, {"body": "rjackson mmun apologize providing jsbin issue ill make sure future looks like typo coffeescript caught compiler another reason move away coffeescript", "d": "7/2014"}, {"body": "worries glad got sorted", "d": "7/2014"}, {"body": "machty quick thoughts one", "d": "7/2014"}, {"body": "agree results pain sure solve component api meant absorb scenario actions listened outside world essentially becoming noop case determine difference properties nonexistent passed vs bound incorrectly hacked together playing unsure info needed good assertion would love insight diff diff git apackagesemberviewslibviewscomponentjs bpackagesemberviewslibviewscomponentjs index apackagesemberviewslibviewscomponentjs bpackagesemberviewslibviewscomponentjs import componenttemplatedeprecation emberviewsmixinscomponenttemplate import targetactionsupport emberruntimemixinstargetactionsupport import view emberviewsviewsview import descriptor embermetalproperties import get embermetalpropertyget import set embermetalpropertyset import isnone embermetalisnone var component viewextend targetactionsupport componenttemplatedeprecation isnone actionname typeof actionname string emberassert action action triggered component thistostring provided component upon initialization action found looked please ensure specified correct action template string eg instead action instanceof descriptor amp amp isnone actionname action name action could found abort actionname undefined return", "d": "7/2014"}, {"body": "trek thoughts", "d": "7/2014"}, {"body": "helper deepequal", "d": "7/2014"}, {"body": "post jsbin isolates", "d": "7/2014"}, {"body": "replicate jsbin closing", "d": "7/2014"}, {"body": "im familiar specific feature ember behavior describe bug sounds correct", "d": "7/2014"}, {"body": "stefanpenner correct desired behavior template aka thing block template always intended surrounding context component bug forced context incorrect bug fixed", "d": "7/2014"}, {"body": "ok makes sense thanks clarifying", "d": "7/2014"}, {"body": "reopen seems like ember data specific issue", "d": "7/2014"}, {"body": "looking first thought result certain continue tracking things hopefully get squared away soonish", "d": "7/2014"}, {"body": "definitely caused confirmed working pr adding new integration test confirm template works properly along fix seems like fairly big regression may justify release review rest core team", "d": "7/2014"}, {"body": "addressed", "d": "7/2014"}, {"body": "nice catch xtian", "d": "7/2014"}, {"body": "completely agreed thank xtian glad caught early reproducing jsbins perfect help track cause", "d": "7/2014"}, {"body": "haha pleasure thank fix", "d": "7/2014"}, {"body": "tracked query parameter deserialized tries cast updated query parameter type original query parameter controller case changes number string causing nan cast made", "d": "7/2014"}, {"body": "seem like bug seems like action get wrapping itemcontroller instance", "d": "7/2014"}, {"body": "seems like using action dosomething controller works sure think unwrapping intentionnal", "d": "7/2014"}, {"body": "indeed intentional action unwraps item controller", "d": "7/2014"}, {"body": "mmun yes example still defined passing", "d": "7/2014"}, {"body": "rjackson think example undefined comes itemget unsavedprop normal since unsavedprop defined itemcontroller", "d": "7/2014"}, {"body": "jskeate works similar linkto also unwraps models imo action nt need simple workaround explicitly pass relevant options", "d": "7/2014"}, {"body": "get fully reviewing jsbin thanks digging pointing missed", "d": "7/2014"}, {"body": "fact unwraps definitely intentional thought issue originally stating passing keyword action helper nt work clarified case closing", "d": "7/2014"}, {"body": "yeah guess work strange thought tried way thanks", "d": "7/2014"}, {"body": "provide example", "d": "7/2014"}, {"body": "think docs wrong didinsertelement happen view appended dom created", "d": "7/2014"}, {"body": "updated docs reflect actual behavior", "d": "7/2014"}, {"body": "nice thank", "d": "7/2014"}, {"body": "update tried ember stable recompiled feature flags enabled need query params error nt present", "d": "7/2014"}, {"body": "thanks reporting test latest beta build version based branch build includes fixes prevent things like causing issues older ie also please note using feature flag either enabled value optional value definitely supported bug fixes security fixes features pulled channels apply effectively means use branches nondefault features enabled choosing use build known bugs sure aware feel important mention", "d": "7/2014"}, {"body": "thanks rjackson try tomorrow indeed aware require query params feature support best extend try debug figure application code report accordingly possible help fix", "d": "7/2014"}, {"body": "rjackson seems newer", "d": "7/2014"}, {"body": "replicate issue latest canary tested used testing local vm please provide failing demo application feel free pr starterkit branch", "d": "7/2014"}, {"body": "michaelvdheeren may ran issue fixed please test master least preferably whatever latest commit", "d": "7/2014"}, {"body": "believe resolved closing happy reopen provided repo demonstrating failure", "d": "7/2014"}, {"body": "probably better suited stackoverflow question unless feel isolated specific bug post", "d": "7/2014"}, {"body": "trek yes questions bug give source bind model gets server", "d": "7/2014"}, {"body": "beta active class nt added", "d": "7/2014"}, {"body": "added", "d": "7/2014"}, {"body": "default selects", "d": "7/2014"}, {"body": "thanks stefanpenner issue two views controllermodel pair case need main view auxiliary view auxiliary view used different path show handle resume list model case would need aproach resume saying case seems usual cases", "d": "7/2014"}, {"body": "seems like good stackoverflow question bug feel free crosslink", "d": "7/2014"}, {"body": "bug think like improvement try", "d": "7/2014"}, {"body": "potomak", "d": "7/2014"}, {"body": "yes need investigate closely seems related", "d": "7/2014"}, {"body": "hyderali confirm duplicate unfortunately nt describe issue well seems edge case reference counting watch particular setup causing", "d": "7/2014"}, {"body": "going close duplicate", "d": "7/2014"}, {"body": "looks like misconfigured transpiler", "d": "7/2014"}, {"body": "quick fix would add build pipeline transpile occurs rjackson", "d": "7/2014"}, {"body": "fixed gem build", "d": "7/2014"}, {"body": "stefanpenner yes fivetanley working", "d": "7/2014"}, {"body": "michaelvdheeren fixed master next day include", "d": "7/2014"}, {"body": "desired behavior defining properties like methods extend time sets properties prototype means shared following article described situation pretty well", "d": "7/2014"}, {"body": "thanks clarification think could nice explanation guide probably one discovering behavior coding", "d": "7/2014"}, {"body": "issue canary", "d": "7/2014"}, {"body": "ah see resolves itemcontroller solves issue leaving open case keywords changed", "d": "7/2014"}, {"body": "stefanpenner behavior canary", "d": "7/2014"}, {"body": "ryanjm believe intentional behavior since router facelift related", "d": "7/2014"}, {"body": "seems defined unsupported behavior closing", "d": "7/2014"}, {"body": "mentioned chat suspect modelcontent duality debugging maybe reveal something else anyways good catch regression considered blocking", "d": "7/2014"}, {"body": "helps debugging changing observer works around issue", "d": "7/2014"}, {"body": "really makes think contentmodel duality internal proxy stuff still sticking content", "d": "7/2014"}, {"body": "programming hard", "d": "7/2014"}, {"body": "exact line causing issue appending content trying find contentmodel", "d": "7/2014"}, {"body": "mmun discussion krisselden observer observing something ye consumed js appindexroute emberrouteextend model function return appindexcontroller emberobjectcontrollerextend init function thissuper thisget content forcing cp become active fixes issue propdidchange function thisget foobar observes foobar", "d": "7/2014"}, {"body": "stefanpenner issue nt due observers triggered inside seems cause issue", "d": "7/2014"}, {"body": "could actually time saturday dig see fixedimprovedadjustedinvestigated guys nt nock sooner", "d": "7/2014"}, {"body": "think use different descriptor one forwards every operation target property including observation lazy semantics computed properties nt really work alias since term alias implies operation either side equivalent", "d": "7/2014"}, {"body": "krisselden oneway readonly also likley want similar semantics im unsure draw line new forwarding alias descriptor seems straight forward though im sure interesting implement", "d": "7/2014"}, {"body": "believe nt blocking release need addressed early part series beta", "d": "7/2014"}, {"body": "understood thanks clarifying stefanpenner", "d": "7/2014"}, {"body": "alias changes likely fix particular manifestation seems underlying bug reference counting watching inheriting prototype particular setup uncovering existed long time throughout releases", "d": "7/2014"}, {"body": "work around regression test underlying bug still exists krisselden explains rjackson beta need first cherrypick order", "d": "7/2014"}, {"body": "jackca would happily merge pr correcting documentation", "d": "7/2014"}, {"body": "fixed", "d": "7/2014"}, {"body": "thanks trek give updating docs next time rjackson", "d": "7/2014"}, {"body": "duplicate", "d": "7/2014"}, {"body": "sure understand could definitely understand testing new case dealing thing makes valid", "d": "7/2014"}, {"body": "happy pr fixchange like understand first", "d": "7/2014"}, {"body": "sounds like make recent code use get escape hatch think use case outweighed mixinwithquery params use case able mixin query params provide additional ones top without clobbering mixin qps", "d": "7/2014"}, {"body": "machty agree use think current default better vast majority use cases", "d": "7/2014"}, {"body": "confusing sounds like full agreement", "d": "7/2014"}, {"body": "machty lol yes completely wholeheartedly agreeing", "d": "7/2014"}, {"body": "demand nothing less", "d": "7/2014"}, {"body": "hahaha nice going guys course okay long fallback hack lt sounds nice say loud though still think easy need whereas far know impossible get rid arguably requires slightly deeper understanding want require people though understand point", "d": "7/2014"}, {"body": "ya known handlebars lacks correct context know usual htmlbars help solution", "d": "7/2014"}, {"body": "nt work upgrading", "d": "7/2014"}, {"body": "denisnazarov strings mutable get new one every time change value bindings get broken wrap object eg work", "d": "7/2014"}, {"body": "likely going change effort required changes websitedocsapicodebaseevery app existence likely outweighs benefit", "d": "7/2014"}, {"body": "stefanpenner yeah thought much another reason held pull request every app existence bit could handled deprecating sensibly see might considered worth effort", "d": "7/2014"}, {"body": "seems like pretty big change relatively little benefit definitely agree better though", "d": "7/2014"}, {"body": "planned breaking change", "d": "7/2014"}, {"body": "planned behavior", "d": "7/2014"}, {"body": "drop things starting uppercase following back globals", "d": "7/2014"}, {"body": "unable reproduce problem seems work fine mecould try jsbin", "d": "7/2014"}, {"body": "also reproduce give us additional context spbbosch", "d": "7/2014"}, {"body": "initial screen cid click active completed would work shot cid sorry know try", "d": "7/2014"}, {"body": "question better suited stackoverflow github issues use bug reports feature discussion", "d": "7/2014"}, {"body": "closing favor pr", "d": "7/2014"}, {"body": "updated emberpublishing nt think version bumped", "d": "7/2014"}, {"body": "rondalesc invalid tags published build confirmed recent travis build", "d": "7/2014"}, {"body": "ah maybe thinking automatic deploy valid tags nt implemented travelling moment look maybe topic", "d": "7/2014"}, {"body": "getting error nt taken full steps isolate seemed pop inserted itemcontroller attribute helper", "d": "7/2014"}, {"body": "submitted pr", "d": "7/2014"}, {"body": "similar problem think test manually set container bucket cache controller like worked fix released since bucket cache injected controller", "d": "7/2014"}, {"body": "believe addressed another pr commadelimited", "d": "7/2014"}, {"body": "machty think canary trow error version current canery build emberjs", "d": "7/2014"}, {"body": "new issue local emberjs calling view nothing happens whereas linkto query params call view work", "d": "7/2014"}, {"body": "machty example setup using local emberjs first click category category", "d": "7/2014"}, {"body": "machty emberjs issue possible configuration fault side ie reproduce", "d": "7/2014"}, {"body": "looks also exists current beta machty please take look question thanks great effort", "d": "7/2014"}, {"body": "interesting think requires discussion sure fully understand would mind starting thread fleshing ideas thanks", "d": "7/2014"}, {"body": "run problem longer think many requests simplified responses begun getting error problem occurs function particular calling second argument returned value failing case object belong reason calls array throws index range exception bit confused called reference already present function array decide whether valid object remove also bit new reading deep emberdata ideas greatly appreciated bug came back seemingly nowhere", "d": "7/2014"}, {"body": "also happens using sort function", "d": "7/2014"}, {"body": "worth noting use search array instead ex get another index range issue updated network two different range exceptions two different cases two different sort functions", "d": "7/2014"}, {"body": "flyswatter update issue title perhaps provide jsbin", "d": "7/2014"}, {"body": "agree try update soon think could reproduce issues", "d": "7/2014"}, {"body": "version ready go like work making dynamic inputcheckbox work stuck", "d": "7/2014"}, {"body": "think line asking simply trying match process determining match seems complex done app works expected change", "d": "7/2014"}, {"body": "adds failing test adding breaks assertions test passing links would active sure ignore section linktos specify queryparam", "d": "7/2014"}, {"body": "pr", "d": "7/2014"}, {"body": "spent hours tracking spoke one firefox dev tools developers determine expected behavior party two issues play first chrome chooses display error message prepended seems incorrect us chrome probably wo nt change behavior firefox displays stack trace get actual error threw exception need log ember currently logs error message course missing second issue firefox dev tools currently nt good job formatting output readable text live links reported bug project happy take issue create solution ember firefox displays error message slightly better trace working locally looks like change ember logger pass exception thrown instead within logger regexing stack format nicely removing duplicate error message chrome feedback support made pr", "d": "7/2014"}, {"body": "looks like still issue latest canary builds machty thoughts work", "d": "7/2014"}, {"body": "sometimes need send values instead booleans", "d": "7/2014"}, {"body": "ndreckshage seems like reasonable change gladly review pr adding pr definitely feature flag", "d": "7/2014"}, {"body": "going close issue hopefully favor pr come", "d": "7/2014"}, {"body": "rwjblue sounds good ill work one", "d": "7/2014"}, {"body": "exposing keyword really like become thing could open pr start thread discuss", "d": "7/2014"}, {"body": "stefanpenner thoughts short version expose keyword inside component templates", "d": "7/2014"}, {"body": "sure understand well seems simply keyword inside component template refers component arenoir tried use jsbin seems work like want", "d": "7/2014"}, {"body": "yes refer component components layout think sandstrom referring accessing view components template aka thing inside block passed something like", "d": "7/2014"}, {"body": "past machty probably others spent crazy amounts time thinking two interrelated problems component composition component isolation component composition basically compose component combining smaller components upcoming holy grail web apps something hoping ember would lead years ostensibly goal viewonly libraries like think actually fallen behind plain gotten stuff wrong although terribly difficult write components complex behaviors ember still painfully hard author components modularly ie internal pieces configured replaced customization contributing problem poor component isolation description components basically lie blockless components nt access context get used block components opens questions like ok block change contexts back component ask rpflorence tell find using templates components missing abstraction suspect either need extend handlebars sugar around use cases block args would help put templates back away slowly admit useful nonisolated controller backed display antipattern data isolated display aside default twoway data binding big way component isolation broken data mutation inside component leaks back context used without control incredibly convenient demos well source pain nt want", "d": "7/2014"}, {"body": "trek read vote increased isolation would prefer removing access surrounding scope blockful components increase isolation keyword would right side isolation divide one consider template embercomponent object part component arguing although nt given much thought isolation components seems desirable removing access outer context component templates might good idea trying understand consider template part isolation cell", "d": "7/2014"}, {"body": "would prefer removing access surrounding scope blockful components increase isolation removed surrounding scope access nt think helpercomponents like wo nt need keyword since would resolve component nt think anyone really nailed scope problem seen angular turn giant global dumping ground react punts problem forcing say lookup object want vs ember additional complication four desired lookup locations action targets use blocktemplate component inside controller backed template outer context lookup outer context targets controller outer context view lookup outer context targets view inner context lookup inner context targets component inside components template inner context lookup outer context targets component applicationhbs componentsmythinghbs totally reasonable want access keyword per se whole messy situation wanting keyword symptom causes much complecting entirely reasonable ember template using component switch back forth various contexts think causes spike complexity worried basically footgun maintainability", "d": "7/2014"}, {"body": "react punts problem forcing say lookup object want thisprops vs thisstate thread meaningless react components functions normal javascript scope applies props state separate outside world gave managing data flows would nt ever asking child state owner would piece state pass child prop child needed change also pass handler receive new value set state", "d": "7/2014"}, {"body": "sure understand usecase need component property yielded template controller pass controller property component use controller component care property exactly bound properties right hbs controller template xfoo componentbar xfoo seems bad outside world reaching instead give want xfoo barcontrollerbar controllerbar xfoo curious wrong", "d": "7/2014"}, {"body": "rpflorence example code use case component property based value passed want use block", "d": "7/2014"}, {"body": "rjackson trek note used inside component refers component master current ember release see robert previous fiddle release build basically behavior nt know behavior change intented anyway think similar use case trying implement modal component header body footer subcomponents wanted factorize actions root component call subcomponents example close action modal could send either button header button footer watched rpflorence video realize maybe developing component wrong way try implement differently like ictabs see smells better", "d": "7/2014"}, {"body": "example posted earlier another use case buttongroupcomponent children toggle open property like stated works release master release master wondering going wrong direction could pass open property controller feel especially multiple button groups", "d": "7/2014"}, {"body": "possible use branch testing metalviews approach step towards htmlbars removes usage metamorph script tags builds automatically published like check closing favor htmlbars tracking issue", "d": "7/2014"}, {"body": "struggling issue well trying use handlebars svg element construction instead application", "d": "7/2014"}, {"body": "using running issue able work around using ugly hack eg trying update class rect inside component template", "d": "7/2014"}, {"body": "first helpful provide jsbin including whole code people spot problem took look controller saw defined property however original todo indexhtml contains button appear application handlbars helper since completed property returns number attribute length condition never true however sure problem see whole code", "d": "7/2014"}, {"body": "correct set within want view target currently specify invoke view helper something like works would generally fine setting alias jsbin bunch different scenarios", "d": "7/2014"}, {"body": "closing get addressed changes discussed july face face meeting", "d": "7/2014"}, {"body": "maybe supposed happen see line component currently inserted dom parent view property point controller parent view", "d": "7/2014"}, {"body": "actions like events bubble components views controllers instead component action sent controller template used controller handle action sent corresponding route point router bubbles action route hierarchy direct action parent component setting property child component example demonstrates behaviour", "d": "7/2014"}, {"body": "jgwhite correct", "d": "7/2014"}, {"body": "think documentation incorrect nt think enough information really help also seems like good candidate stack overflow question please feel free link back question", "d": "7/2014"}, {"body": "rjackson mixonic pr supposed close issue", "d": "7/2014"}, {"body": "way tag view inheriting private recommended generally since gone soon htmlbars lands nt support tagname see discussion", "d": "7/2014"}, {"body": "confirmed hitting error well also content array changes trigger resort index go range eventually well", "d": "7/2014"}, {"body": "closed already fix also experienced problem", "d": "7/2014"}, {"body": "working properly latest canary builds likely fixed", "d": "7/2014"}, {"body": "know ticket old probably got think something like would work fine considering link gave edit fiddling saw example almost exactly ember guides", "d": "7/2014"}, {"body": "happening jsbin manually creating providing container items looked naturally property set automatically jsbin providing falling back old triggering deprecation working jsbin", "d": "7/2014"}, {"body": "machty think", "d": "7/2014"}, {"body": "knownasilya mean pass set values different places qp implementation qp values passed sure specifically referring", "d": "7/2014"}, {"body": "referring object gets passed route properties set controller", "d": "7/2014"}, {"body": "maybe grasping inconvenience working today nt seem like benefit would justify additional api surface say little would clean code", "d": "7/2014"}, {"body": "closing happy reopen needed", "d": "7/2014"}, {"body": "machty would allow passing queryparams object directly without delete values could make nice defaults even nt define model hook query params setup get automatically passed method performs query", "d": "7/2014"}, {"body": "stefanpenner add placeholders expand either using broccolistringreplace original source docs could easily stash local var examples things would work fine", "d": "7/2014"}, {"body": "sure much think change default setter behavior likely prevents issues causes think two way bindings whatnot good explanation probably added api docs nt already make sure folks know work around closing nt think much done would love pr documentation make discoverable", "d": "7/2014"}, {"body": "lets keep open atleast weekend believe ongoing discussions related problem resolution possible", "d": "7/2014"}, {"body": "brief discussion resolution likely got sidetracked vote cp become readonly default opt readwrite cp", "d": "7/2014"}, {"body": "stefanpenner guess close sure worth documenting edgecase workaround elucid said pretty brutal fix probably nt encourage", "d": "7/2014"}, {"body": "ya lets close core well aware annoyance", "d": "7/2014"}, {"body": "stefanpenner sounds good thanks looking", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "working correctly", "d": "7/2014"}, {"body": "would happily merge api documentation pr closing issue meantime", "d": "7/2014"}, {"body": "seems concerning", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "standard pods layout definitely something worth considering probably better forum discussion", "d": "7/2014"}, {"body": "happily review feature flagged pr adding", "d": "7/2014"}, {"body": "hello guys update issue", "d": "7/2014"}, {"body": "think would need failing jsbin track provide", "d": "7/2014"}, {"body": "rjackson possibly nt ipad handy anymore anyone one thread", "d": "7/2014"}, {"body": "machty unless aposed someone add finallycatch tonight", "d": "7/2014"}, {"body": "stefanpenner opposition", "d": "7/2014"}, {"body": "suspect improved htmlbars", "d": "7/2014"}, {"body": "yogananthan maybe submit index file instruction detecting leak htmlbarsmetalview people confirm problem gone", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "expected behavior chatter destruction flows existed would large penalty", "d": "7/2014"}, {"body": "expected feel like would worth throwing error point attempting set value event possible avoid silently working scenario", "d": "7/2014"}, {"body": "discovered well agree nathanpalmer throwing error might right thing documentation regarding inability would also another option", "d": "7/2014"}, {"body": "nathanpalmer unfortunately breaking change people set flags cleanup state hooks theoretically something rethink jackca docs sound good mind submitting something iterate", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "said documentation nt use private mean used internally kind help bug emberselect content using ember inspector gives us explains nt get anything", "d": "7/2014"}, {"body": "closing since private", "d": "7/2014"}, {"body": "map meant polyfil map unfortunately observable", "d": "7/2014"}, {"body": "fyi alex speller posted component solves bootstrap issue easy use less complex proposal", "d": "7/2014"}, {"body": "issue toggling property based toggled flag removing item therefore causing destroyed next run loop closing think bug", "d": "7/2014"}, {"body": "rjackson dropped appropriate documentation follow vs previous attempt api query params replaces", "d": "7/2014"}, {"body": "stefanpenner may review referenced pr would create qunitmodule eventdispatcher eventmanager gather related tests", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "definitely seems working properly", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "emcomputedsort cause index range error resort ref", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "mmun mentioned work properly", "d": "7/2014"}, {"body": "machty still issue could provide jsbin still issue", "d": "7/2014"}, {"body": "ca nt reproduce longer routerjs refactorings", "d": "7/2014"}, {"body": "adding guide make pr embercli picks suspect see initializer usage questions test", "d": "7/2014"}, {"body": "would like strongly advise async initialization initialization really meant setup safe start app usecases initializers setting injection rules setting factory registrations nt reason follow resolver rules reading configuration env variables meta tags things great idea fetching data via xhr deferring readiness eagler loading likely fine nt pause app boot instantiating using fetching data via xhr deferring readiness xhr means variable latency means must provide user indication loading progress defer app readiness initializer wait xhr prevent routing starting results white screen users instead loading occur route thanks machty render lovely available instantiating using may instantiate entities ready resulting unexpected behavior obviously app add options ensure correct ordering working addons lots initializers get extremely tedious example given addons aware addon code eagerly instantiate router addon tries add injection rule router going bad time allowing framework instantiate entites ondemand enables extensibility", "d": "7/2014"}, {"body": "gon na kick ember inspector prettify really necessary really bug since convenience anyway provide informative error message", "d": "7/2014"}, {"body": "thanks following machty understand sounds like good call search ways contribute", "d": "7/2014"}, {"body": "bitten well progress issue test missing", "d": "7/2014"}, {"body": "bcardarella ping", "d": "7/2014"}, {"body": "wagenet pong", "d": "7/2014"}, {"body": "bcardarella said write failing test still planning", "d": "7/2014"}, {"body": "wagenet sure try week", "d": "7/2014"}, {"body": "wagenet", "d": "7/2014"}, {"body": "happy know confirmed issue even though driving crazy less ideal workaround create copysubset content decouple binding original reference downside select field longer updates new objectsitems added content fortunately case need bindings select content", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "error", "d": "7/2014"}, {"body": "would love see soon couple places would make sense using need itemcontroller", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "closing since one seeing anymore", "d": "7/2014"}, {"body": "seems working without error", "d": "7/2014"}, {"body": "ping mmun jayphelps nt really bandwidth work could help provide guidance needed", "d": "7/2014"}, {"body": "mmun machty basically boat right lack bandwidth one picks might able knock weekend basically putting time actually add test coverage historyhashlocation cause otherwise risk nasty regressions", "d": "7/2014"}, {"body": "using tracking meetings closing", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "gon na close inactivitydisinterest would love see pr", "d": "7/2014"}, {"body": "pretty close removing jquery dependency several stabs integrating jquery custom build system work rakep broccoli seems silly point", "d": "7/2014"}, {"body": "think least mentioned documentation", "d": "7/2014"}, {"body": "saved couple hours reading guys", "d": "7/2014"}, {"body": "happy accept pr bring guides back line mixonic mentioned looks like ok though", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "ran issue made progress branch anywhere hjdivad", "d": "7/2014"}, {"body": "stefanpenner enabling model injection flag considered save", "d": "7/2014"}, {"body": "manuelmitasch use without problems plains reduce potential problems", "d": "7/2014"}, {"body": "stefanpenner thank", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "worked around issue using view", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "resolved", "d": "7/2014"}, {"body": "definitely mixin closing favor", "d": "7/2014"}, {"body": "recent changes made mmun fixed reported issue see confirmation pr addressed", "d": "7/2014"}, {"body": "", "d": "7/2014"}, {"body": "closing favor", "d": "7/2014"}, {"body": "believe currently support closing inactivity happy reopen someone interested investigating", "d": "7/2014"}, {"body": "closing since seems limited interest one working prs still welcome", "d": "7/2014"}, {"body": "work need help serious need imo would love huboard", "d": "7/2014"}, {"body": "likely working area later week may time email rauhryan", "d": "7/2014"}, {"body": "sounds great", "d": "7/2014"}, {"body": "gbirke situations value present work around using", "d": "7/2014"}, {"body": "closing since solutions someone wants pr something better please", "d": "7/2014"}, {"body": "would love see pr documenting behavior helper closing suggestion teddyzeenny using instead mixonic disabling testing work well", "d": "7/2014"}, {"body": "closing inactivity happy reopen someone willing legwork see impact switching", "d": "7/2014"}, {"body": "still problem status issue changed", "d": "7/2014"}, {"body": "yet suspect metalviews htmlbars land energy core go unlikely", "d": "7/2014"}, {"body": "closing favor", "d": "7/2014"}, {"body": "working refactoring improving view layer resolve", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "afaik last main issue fixed", "d": "7/2014"}, {"body": "closing due inactivity", "d": "7/2014"}, {"body": "annoying issue still solution deprecate slash namespace release remove code subsequent release", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "closing due inactivity", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "closing prs welcome", "d": "7/2014"}, {"body": "please aggregate deprecate slash namespace", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "closing favor discussion much work put pulling lodash", "d": "7/2014"}, {"body": "closing favor cc rwjblue", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "since closed issue could please make sure particular details gets included new title issue pretty generic hate get closed get fixed issue particular problem get addressed", "d": "7/2014"}, {"body": "abobwhite issues backreference one context discussion sufficient", "d": "7/2014"}, {"body": "stefanpenner thanks believe wagenet made checklist sufficient thanks", "d": "7/2014"}, {"body": "possible currently metalviews branch", "d": "7/2014"}, {"body": "tonywok know old issue ever find solution run almost exact thing today ca nt lift figure wrong", "d": "7/2014"}, {"body": "closing essentially activity nt seen actual scenario problem love see pr making bit lazy", "d": "7/2014"}, {"body": "closing revisiting object model future keep issue mind", "d": "7/2014"}, {"body": "see", "d": "7/2014"}, {"body": "brennanmceachran nice catch pretty weird ios starts listen click events element add saved thx", "d": "7/2014"}, {"body": "functionality kind critical us discourse need able transform elements inserted dom example need size width height attribs images prior dom insertion mobile html stored db understanding htmlbars get actual dom element willinsertelement correct krisselden", "d": "7/2014"}]