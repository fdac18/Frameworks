[{"title": "run dartanalyzer files including tests", "body": "currently dartanalyzer run test files runs separately module generate single file references files across modules run dartanalyzer generated file export export export export", "num": "40", "d": "9/2014"}, {"title": "bare bones change detection", "body": "would like implement bare bones change detection unblock parts system work parallel would love get simple change detection going watch simple properties ie anything sort able implement without need parser class person var age var person new person var pwg new protowatchgroup pwgwatch age var wg pwginstantiate wgsetcontext person var cd new changedetection wg cddetectchanges make test pass", "num": "39", "d": "9/2014"}, {"title": "transpiler handle named parameters", "body": "compile named params last argument map function function f b c return b c compile map keys quoted function function f return b", "num": "38", "d": "9/2014"}, {"title": "support primitive type int", "body": "int code translate int dart code code could number", "num": "37", "d": "9/2014"}, {"title": "travis test platforms", "body": "testing browsers ie safari firefox chrome working testing angulardart platforms saucelabs ref", "num": "35", "d": "9/2014"}, {"title": "performance tests di", "body": "", "num": "34", "d": "9/2014"}, {"title": "port di implementation js", "body": "see js implementation", "num": "33", "d": "9/2014"}, {"title": "migrate parser test suite angulardart angular", "body": "starting revisit whether need full test suite benchmark proof concept may need break subtasks", "num": "32", "d": "9/2014"}, {"title": "implement change detection simple use case", "body": "implement change detection properties needed allow work html compiler proceed", "num": "31", "d": "9/2014"}, {"title": "transpiler add unit tests", "body": "", "num": "30", "d": "9/2014"}, {"title": "implement expression parser", "body": "use angulardart parserlexer starting point minimum able parse simple abc expression eval expression", "num": "29", "d": "9/2014"}, {"title": "transpiler fat arrow functions become", "body": "fat arrow functions js need transpiled dart eg js var fn gt var dart var fn var fail var fn gt var", "num": "28", "d": "9/2014"}, {"title": "transpiler error assertion return value nested functions", "body": "eg method traceur says return value true match arrayofdirectiveclass seems check return value nested function return type method", "num": "27", "d": "9/2014"}, {"title": "transpiler cyclic imports working", "body": "ajs import b b export class constructor new b bjs import export class b", "num": "26", "d": "9/2014"}, {"title": "transpiler improve transpiler tests", "body": "today test transpiler running spec js dart good start room improvement asserting code snippets fail given error message could also really help improving test suite example could generation const constructor dart constructor could body initializer list asserting case fails comprehensible error message would really helpful", "num": "25", "d": "9/2014"}, {"title": "transpiler refactor transpiler", "body": "closed related question today one dartclasstransformerjs transformations compliant original traceur code would probably makes sense darttransformer would main entry point every single transformation defined separate class amp file files hosted codegeneration folder sure gh best place discuss kind thing create room flowdock could easily allow running existing transformers required example hoisting handled today transformer hoistvariabletransformer exists used", "num": "24", "d": "9/2014"}, {"title": "transpiler run transpiler tests", "body": "tbosch last email tests written jasmineguinness executed via karma including tests transpiler find way run transpiler spec latest master generate dart files requiring file main missing correct way post ng mailing list create issue", "num": "23", "d": "9/2014"}, {"title": "transpiler forward declarations seem work", "body": "export class foo foo return new bar export class bar", "num": "22", "d": "9/2014"}, {"title": "transpiler reexport facades", "body": "often times useful able reexport facade types requires support rexporting", "num": "21", "d": "9/2014"}, {"title": "transpiler add sourcemaps", "body": "exception reported stack trace transpiled file code source file need generate source maps debug code need rewrite stack trace original line numbers", "num": "20", "d": "9/2014"}, {"title": "build add travisci", "body": "run following automatically runs get early errors via static type system dart run basic tests ensure js modules loading correct dependencies needs download dart environment", "num": "19", "d": "9/2014"}, {"title": "transpiler support", "body": "", "num": "15", "d": "9/2014"}, {"title": "transpiler support let dart", "body": "let work javascript let dart var needed apply semantically correct transpilation", "num": "14", "d": "9/2014"}, {"title": "build add dartanalyzer build", "body": "", "num": "13", "d": "9/2014"}, {"title": "add library every dart file", "body": "file add header", "num": "12", "d": "9/2014"}, {"title": "transpiler constructor typed field semantics", "body": "allow assignments fields constructor translate assignment constructor initializers make field declaration explicit annotation make dart annotation example class annotation field final name string field final age int const constructor name string age int thisname hello name thisage age annotation usage class foo needs transpile class annotation final string name final int age const annotation string name int age name hello name age age annotation usage class foo", "num": "11", "d": "9/2014"}, {"title": "transpiler force types members variables", "body": "helps rewriting method names built ins like arrays", "num": "10", "d": "9/2014"}, {"title": "transpiler types destructuring arguments", "body": "eg", "num": "9", "d": "9/2014"}, {"title": "transpiler add support generics traceur type", "body": "var x array runtime would call arrayof subtype", "num": "8", "d": "9/2014"}, {"title": "transpiler allow change type names method calls dart transpile", "body": "tbd example", "num": "7", "d": "9/2014"}, {"title": "transpiler support default parameters types", "body": "eg compile component type element element null gt compile type component element element null", "num": "6", "d": "9/2014"}, {"title": "run pubget dartanalyzer build", "body": "pubget buildspecyaml changes dartanalyzer whenever source file changes", "num": "5", "d": "9/2014"}, {"title": "transpiler setup karma run js dart parallel", "body": "", "num": "4", "d": "9/2014"}, {"title": "make todo example work autobootstrap", "body": "", "num": "3", "d": "9/2014"}, {"title": "integrate dartanalyzer build", "body": "implies need angulardart file looks something like library angulardommain export annotationsdirectivedart export annotationscomponentdart export annotationspropertydart export annotationstemplatedart export annotationseventdart export directiveinjectorannotationsdart export directiveinjectordirectiveinjectordart export directiveinjectorquerydart export viewviewdart export viewviewrefdart export viewviewfactorydart export viewviewportdart export viewviewportrefdart nt generate need something like public api", "num": "2", "d": "9/2014"}, {"title": "transpiler show line numbers errors", "body": "eg error writing", "num": "1", "d": "9/2014"}, {"body": "also handle default values named parameters", "d": "9/2014"}, {"body": "assignment force smi mode", "d": "9/2014"}, {"body": "int type right", "d": "9/2014"}, {"body": "language sometimes useful force vm treat value integer", "d": "9/2014"}, {"body": "meant int currently supported traceur original issue imply adding int support traceur also", "d": "9/2014"}, {"body": "exactly would traceur support nt really exist concepttype hood vm bit complicated may see advantages sort microoptimization say declaring type ensure assignments convert smi representation", "d": "9/2014"}, {"body": "hard say whether would hurt would help could interesting want typenames", "d": "9/2014"}, {"body": "section right link ecmascript language types undefined null boolean string symbol number object think traceur could complain asserttypes option enabled x int would interpreted x instance class int", "d": "9/2014"}, {"body": "mean class implementing class would probably problematicnot helpful asserting type int traceur would probably look like certainly doable node nt great ultimately sure assertion super helpful jsland", "d": "9/2014"}, {"body": "support int number assert much need", "d": "9/2014"}, {"body": "would make sense bring mobile browsers early benchmarks pressure", "d": "9/2014"}, {"body": "would certainly vote think emphasizing mobile community want keep honest probably start testing front tue sep caitlin potter notifications githubcom wrote would make sense bring mobile browsers early benchmarks pressure reply email directly view github rob eisenberg president blue spire wwwdurandaljscom", "d": "9/2014"}, {"body": "sure much changed since expressionist repo port angulardart expression parser tests work number months ago though may date maybe leverage", "d": "9/2014"}, {"body": "reusing existing", "d": "9/2014"}, {"body": "vicb transforms regular function like think transpiler include keep arrow functions dart writer output instead", "d": "9/2014"}, {"body": "vojtajina think right extent positive include original renames required dart however dart functions could composed single statement always implicit think way go create new transformer based transform concise body", "d": "9/2014"}, {"body": "details arrow functions implicit return defined function body whereas arrow functions dart composed single statement amp always implicit return done fat arrow functions js need transpiled dart original issue convertconcisebody", "d": "9/2014"}, {"body": "see", "d": "9/2014"}, {"body": "need review arv", "d": "9/2014"}, {"body": "lot refactoring needs done saying makes totally sense x separate transformers classes create two compiler classes dart", "d": "9/2014"}, {"body": "selfassigned ticket sure get mean two compiler classes currently single class generate dart according option would purpose different classes", "d": "9/2014"}, {"body": "vojtajina closed issue pushing refactoring fix master think great master build upon probably create new issue refactoring needed thanks", "d": "9/2014"}, {"body": "new architecture way generate dart files however dart sources could inspected via debug button karma specs executed karma thanks tbosch tip", "d": "9/2014"}, {"body": "closed via", "d": "9/2014"}, {"body": "first implementation working needs clean", "d": "9/2014"}, {"body": "vicb please let us know start working", "d": "9/2014"}, {"body": "new syntax agreed class foo final bar name age const constructor age number name string thisbar boolean true thisname string hello name thisage age get transpiled class foo final int age final string name final bool bar const foo int age string name bar true age age name hello name note final fields hoisted initializer colon", "d": "9/2014"}, {"body": "would purpose fields constant constructor could useful nonconst ctor force members second step modifier could probably added automatically visiting class agree probably evaluate effort writing transfomer complex skip intermediate think side notes age probably see think const ctor could body dart transpiled code previous post valid initializer list", "d": "9/2014"}, {"body": "mhevery want fix start working issue probably later today tomorrow", "d": "9/2014"}, {"body": "making fields default constructor sidenotes yes yes", "d": "9/2014"}, {"body": "changed parser eat generics change ast yet see", "d": "9/2014"}, {"body": "made parser aware keyword without adding sth ast yet see better solution could subclass scanner traceur recognize keyword well", "d": "9/2014"}, {"body": "talked mhevery better approach following remove additional syntax make js side run directly without wrappers use sources names types js create configuration file compiler transpiling dart allows following configuration types like rename type change method names another name replace method calls short dart snippet ie inlining done transpiler probably nt need change field readswrites", "d": "9/2014"}, {"body": "change parser mentioned removed", "d": "9/2014"}, {"body": "karma js running see", "d": "9/2014"}]