[{"title": "minified ver backbone repo updated removed", "body": "hey backboneminjs file either regenerated new commits arrive removed master branch keeping olderstable version really confusing quite often cloned repo copied unminified minified project later stumbled upon weird bugs minjs file differs unminified one cheers andri", "num": "297", "d": "3/2011"}, {"title": "update documentation include note jqueryzepto dependency", "body": "ran issue backbonehistorystart due jquery loaded backbone big issue easy track took longer necessary documentation explicitly says hard dependency underscorejs true", "num": "296", "d": "3/2011"}, {"title": "display constructor name logging objects consolelog", "body": "currently chrome consolelog displays following rd debugging would simplified consolelog instead displayed backboneview appropriate subclass", "num": "295", "d": "3/2011"}, {"title": "support views inheritance", "body": "proper way inheriting extend views written ideas topic blog", "num": "294", "d": "3/2011"}, {"title": "model multiple collections seems work", "body": "quite new backbone using seem run issue model needs appear two separate collections errors due already existing collection expected behavior think makes sense model could multiple collections collection mind array event handling", "num": "293", "d": "3/2011"}, {"title": "unbind events switching views", "body": "way unbind event handlers added view problem app separated views indexshowedit switch event bindings remain causes several issues", "num": "292", "d": "3/2011"}, {"title": "override extend method", "body": "override modelextend method using latest backbonejs master patch checked goal setup model relations specified class attributes model extended similar approach ligamentjs saving extra setup function calls however success using approach", "num": "291", "d": "3/2011"}, {"title": "collection fetch pass options refresh function", "body": "line collectionrefresh collectionparse resp options", "num": "290", "d": "3/2011"}, {"title": "good examples drag drop functionalities", "body": "hello guys looking good backbone example drag drop functionalities jquery ui drag amp drop module used course jquery ui nt anything backbone looking examples drag drop events caught thanks michael", "num": "288", "d": "3/2011"}, {"title": "ask things backbone", "body": "ok ask official place ask", "num": "287", "d": "3/2011"}, {"title": "expect upcoming backbonejs major release", "body": "wiki roadmap says might major backbone release april conjunction upcoming jsconf nt much suspicious github activity project curious expect next release jeremy give us detailed overview planned features easier create nested modelscollections", "num": "285", "d": "3/2011"}, {"title": "ifmatch header", "body": "api needs able handle ifmatch header standard etag type header used pass optimistic concurrency information basically put delete called tag set version record client matched server make sure record change since client retrieved status code supposed sent quite standard accepted way handling optimistic concurrency rest services puts obviously pass correct version body request put delete request ifmatch alleviates problem something pursue absolutely idea best way handling created fix specific needs backbonesynch simply added following code match version attribute model", "num": "284", "d": "3/2011"}, {"title": "collection parse", "body": "think collection parse operation op model already op parse created model collection automatically take account instead requiring developer also create parse collection", "num": "283", "d": "3/2011"}, {"title": "controller created routes set apply new route", "body": "created controller later used controllerroute method add new routes controller since routes seem triggered hashchange route callback triggered order get new routes working initial page load ca nt seem trigger hashchange window trigger hashchange nt work advice thanks", "num": "281", "d": "3/2011"}, {"title": "view events handler enhancement proposal", "body": "issue want separate selectors events css classesids let designer csshtml break javascript code depends classesids also nicer separate things nt create triple dependencies wrote jquery plugin long time ago works well since years published solution use attributes instead classesids course use events delegation could thing backbone right nt looks good right think regards oleg", "num": "280", "d": "3/2011"}, {"title": "backbonemodel allow defaults function", "body": "cases want new instance object instance model like able define model class like stands would initialization", "num": "279", "d": "3/2011"}, {"title": "override extend", "body": "mixin overrides others add hook unfortunately subclasses get original definition instead overridden one code looks like changing would solve problem allow subclasses inherit class method", "num": "278", "d": "3/2011"}, {"title": "added primitive base class creating custom classes", "body": "added primitive base class named people create create custom classes selfpropagating function details pull request", "num": "277", "d": "3/2011"}, {"title": "use static json model data source", "body": "offline app loads data static json file best way use data source model currently skip model create collection need processing json removing namespace reading docs looks like best place", "num": "275", "d": "3/2011"}, {"title": "saving model attribute value containing sends different value server", "body": "hi really sure bug jquery bug backbone also posted comment recently closed wontfix bug report jquery problem got attribute whose value contains string gets replaced something like posted server sample code working sample jsfiddle sorry check firebug see sent though narrowed problem think backbonesync remove ajax params works nicely line weird use attribute values kind defeats purpose using json think also problem jquery tested works fine", "num": "272", "d": "3/2011"}, {"title": "modelsave pass model validation modelsave attributes", "body": "creating new model saving follows model validation method called making post request unless save method passed attributes passes validation prior server request intentional seems little counterintuitive skip validation newly instantiated models", "num": "271", "d": "3/2011"}, {"title": "make custom methods model direct properties", "body": "imho way access custom methods model bit awkward moment model backbonemodelextend mymethod function model new model modelget mymethod would nt better bind method properties modelcollection directly methods ca nt serialized json likely changed runtime nt see need getterssetters", "num": "270", "d": "3/2011"}, {"title": "websql backend localstorage exists", "body": "hey anyone implemented websql backend backbone", "num": "269", "d": "3/2011"}, {"title": "collectionrefresh undefined", "body": "setup collections models like try load preloaded data upon page load get error preloaded data line within template could someone please tell obviously missing going completely insane really appreciate help thanks", "num": "268", "d": "3/2011"}, {"title": "problem template view", "body": "hello strange error view template template itemtemplate html work get uncaught typeerror undefined function using template itemtemplate html initialize render function working thank help", "num": "266", "d": "3/2011"}, {"title": "collection fetchmore", "body": "sometimes want call server fetch models sure best solution overload existing method add new method implemented second would like permanent builtin solution", "num": "265", "d": "3/2011"}, {"title": "collectioncreate nt initialize model attrs", "body": "collectioncreate creates model without attrs passed uses set newly created model presumably ensure validation run perhaps option pass silent false modelcreate could validate initialization default", "num": "264", "d": "3/2011"}, {"title": "collectionremove ca nt take collecitonmodels", "body": "since removeall method collections call collectionremove collectionmodels accomplish however half elements removed approach problem becomes clear look source code line array index used iterate array half array removed old index become bound explains half collection removed work around deep copy collectionmodels pass remove something like collectionremove extend true collectionmodels", "num": "263", "d": "3/2011"}, {"title": "alternative get set backbonemodel", "body": "extended backbonemodel following functions lets use instead instead curious know others approached expose obj props gt consoleassert argumentslength gt proto objprototype prop props consoleassert proto prop property prop conflict detected expose proto prop expose proto prop gt mutator gt args argumentslength args get prop else attrs attrs prop arguments args set attrs else set attrs silent arguments proto prop mutator", "num": "261", "d": "3/2011"}, {"title": "typeerror result expression thisconfigure undefined function", "body": "typeerror result expression thisconfigure undefined function keep running error time extend backboneview app structure looks like function windowproject backbonemodelextend windowprojectcollection backbonecollectionextend windowprojects new projectcollection windowprojectview backboneviewextend windowview projectview windowviewrender even blank structure still get error code filled get exact error missing dependancy indexhtml load following order jqueryjs underscorejs backbonejs bottom body indexjs take window variables get error", "num": "259", "d": "3/2011"}, {"title": "multiple modeldestroy locking backend", "body": "hi folks example todos app backbone takes place lets say deleting items fine localstorage solution try similar process database backend sqlitedatamappersinatra fact sends multiple delete http requests simultaneously causes db lock send back error something run think two ways around destroybatch sends array id delete call sinatra sniff multiple ids handle deletes destroyasync clientside pushes ids queue calls destroy models onebyone async chain reaction either solutions seem reasonable frail goose flapping wildly j", "num": "256", "d": "3/2011"}, {"title": "fetching model calls validate method", "body": "fetching model server data interpreted valid thus validate model read client side put failing validation method avoid changes fetching model fails set attributes", "num": "254", "d": "3/2011"}, {"title": "empty comparator reverses model order collection", "body": "collection comparator function model return order models reverses would expect keep order inserted bug wrong expectations thanks", "num": "253", "d": "3/2011"}, {"body": "sorry afraid way packaging works moment minified version regenerated version changes repo gets merged directly ghpages branch using decent asset packager ever need use unminified version hopefully", "d": "3/2011"}, {"body": "like keep code date using minified version things differently using unminified version sure version number increased code still work would nt make sense minified version date aswell using git commit hook something similar kind problems would nt exist", "d": "3/2011"}, {"body": "nope changing minified version file constantly git repo would massively bloat repository making practically unusable", "d": "3/2011"}, {"body": "mean backbonejs changed backboneminjs changed also bloat unusable keeping files sync ought another option andri suggested would delete minified version master altogether current situation creating possible problems could explain worries keeping sync", "d": "3/2011"}, {"body": "jeremy minjs file master repo akin compiled binary version control github pages branch requires go ahead keep solely ghpages branch putting separate asset packing aside moment minified ver meant rebuilt usage currently tracked git repo mark changed every time used also applies underscore repo", "d": "3/2011"}, {"body": "require help get packaging system changed nt depend generatedprocessed files minjs repo would give pointers start", "d": "3/2011"}, {"body": "sounds like programming minified version great idea development use development version", "d": "3/2011"}, {"body": "hmm guess spoke soon nt look actually problem sorry bother", "d": "3/2011"}, {"body": "solved issue extending remove method view making sure call method leave view view method simply uses unbind event handlers initialize used bind actually pretty straightforward pretty hard handle magic provided framework least current event implementation", "d": "3/2011"}, {"body": "say meta questions never ever okay anywhere ask nicely wrong place told right place", "d": "3/2011"}, {"body": "place channel irc", "d": "3/2011"}, {"body": "google group", "d": "3/2011"}, {"body": "google group never official place ask questions hopefully get shut soon", "d": "3/2011"}, {"body": "ok good know removed wiki", "d": "3/2011"}, {"body": "afraid roadmap page nt added empty removed glad talk little plan next major release run currently open tickets goes without saying implement optin history support pushstate replacestate make less assumptions onecollectionpermodel ie default implementation removed take look ideas table deeply nested collections ie ligamentsjs see anything worth pulling revisit naming potentially confusing functions like vs", "d": "3/2011"}, {"body": "nice hear upcoming promising improvements things appreciate merge method collections better support classy models mixins class methods better handling extended models btw yesterday revive closed methods direct properties bug increased core robustness yesterday constantly ran error regarding line", "d": "3/2011"}, {"body": "pass jquery options backbone save fetch sync call including additional headers", "d": "3/2011"}, {"body": "doh makes sense thanks", "d": "3/2011"}, {"body": "afraid nt possible current implementation instance method model model call also may take advantage model internal state may may exist time implement function terms see fit", "d": "3/2011"}, {"body": "call backbonehistorystart creatinginitializing controller", "d": "3/2011"}, {"body": "reason nt work day gah thanks", "d": "3/2011"}, {"body": "backbone could implement fe like var documentrow backboneviewextend events click openclick function", "d": "3/2011"}, {"body": "one solution dependencies could naming conventions classes used view used styling still mapping step every selector action handler could removed fe underscore convention classes naming var documentrow backboneviewextend click open function", "d": "3/2011"}, {"body": "afraid proposal bit halfbaked point backbone events map dom elements properlynamed actions nt want rely special properties inherent html said like modify version backbone watch attributes go right ahead", "d": "3/2011"}, {"body": "said could done without data attributes however data perfectly fitts purpose far know intent mapping step selector event function think function names really important case views nt want invoke directly think last example", "d": "3/2011"}, {"body": "think function names terribly important case views case object big fan last example", "d": "3/2011"}, {"body": "well problem event handlers really good portableusable event object passed first argument want call handler directly emulate event object function needs valid use case function nt use event object inconsistent always take care function usable know mean", "d": "3/2011"}, {"body": "want say views shold nt provide api classes work functionality provided api land controllers classes", "d": "3/2011"}, {"body": "using view methods api way broken like prototypejs super thingy", "d": "3/2011"}, {"body": "feature already present master go next release", "d": "3/2011"}, {"body": "great idea patched", "d": "3/2011"}, {"body": "thanks jeremy", "d": "3/2011"}, {"body": "noticed issue already created pull request duplicate closing", "d": "3/2011"}, {"body": "like guess better way", "d": "3/2011"}, {"body": "glad see found nice way mapping json array legit", "d": "3/2011"}, {"body": "actually munging need json way fit model collection somehow moment happens outside whole pass collection", "d": "3/2011"}, {"body": "sure take look model parse collection parse", "d": "3/2011"}, {"body": "parse called backbone whenever collection models returned server fetch since fetch happening call manually tried following namespace remains appproductscollection backbonecollectionextend", "d": "3/2011"}, {"body": "yes fetch happening map json want fit model collection add convenience function", "d": "3/2011"}, {"body": "see thanks would great backbone models could support reading static file data smoothly reading url think", "d": "3/2011"}, {"body": "might want look set tools query static lists specifying querystrings", "d": "3/2011"}, {"body": "problem jquery thinking request treated jsonp seems double thinks string contains jsonp callback parameter string value getting internal function automatically creating handle response slightly clear jsfiddle case", "d": "3/2011"}, {"body": "looks like actually set calls validation method set called save function pass attributes reason initialize method passes silent true set prevents validation looks like intentional sure initialize function would bypass validation like since commit", "d": "3/2011"}, {"body": "think real issue silent true probably skip validation option implies skip dispatching events ideally another option skipping validation", "d": "3/2011"}, {"body": "see saying also see makes sense disable validation silent set true validation errors model constructor takes options parameter think best fix would change line thisset attributes silent true thisset attributes options way whatever options passed construction passed set", "d": "3/2011"}, {"body": "right totally makes sense hand always option silencing validation error events still running validation", "d": "3/2011"}, {"body": "validation errors fail silently", "d": "3/2011"}, {"body": "created pull request address issue", "d": "3/2011"}, {"body": "also find validation logic original example ticket bit counterintuitive especially docs modelsave say model validate method validation fails model saved fact true pass attributes hash save method attributes provided begin eludes since feel unnecessary duplication set bit offtopic", "d": "3/2011"}, {"body": "huh model methods real methods object nt example code posted nt work would call", "d": "3/2011"}, {"body": "oops fault must overlooked yesterday excessive debugging session", "d": "3/2011"}, {"body": "hmm seems ticket nt entirely wrong code bar method works expected foo nt become real method", "d": "3/2011"}, {"body": "trying refresh class collection instance class words instantiate runners collection like var runnerset backbonecollectionextend var runners new runnerset id bacons bffid rubber false stolenat loverid rememberedat runnersfirst get id", "d": "3/2011"}, {"body": "thanks guess documentation really meant say quotes twice loading bootstrapped models app first loads common set initial models know going need order render page instead firing extra ajax request fetch nicer pattern data already bootstrapped page use refresh populate collections initial data documentcloud erb template workspace something along lines accountsrefresh lt accountstojson gt projectsrefresh lt projectstojson collaborators gt true gt", "d": "3/2011"}, {"body": "sort paging would indeed useful collections maybe something like", "d": "3/2011"}, {"body": "changed windowview projectview windowview new projectview", "d": "3/2011"}, {"body": "hi research help stackoverflow answer problem db locking caused fact using sqlite development nt like many requests coming quickly locks lame deployed heroku postgres db problem closing bc really nothing bb db shenanigans curious know wanted delete items would sending delete requests api really way creating batch delete suggesting actually sound idea anything fundamentals rest suggest requests must atomic batch thanks", "d": "3/2011"}, {"body": "one restful way handle batch delete delete resource represents example", "d": "3/2011"}, {"body": "creating separate resource expects array input delete give whirl thanks much jeremy", "d": "3/2011"}, {"body": "would nt easier maybe logical override save method", "d": "3/2011"}, {"body": "got point", "d": "3/2011"}, {"body": "missed earlier agree would good see", "d": "3/2011"}, {"body": "define validate function model called set call", "d": "3/2011"}, {"body": "nature extend allow overwrite anything name basically hash merge second view add event events initialize function call thisdelegatevents afterward", "d": "3/2011"}, {"body": "juggy answer workaround obvious ugly extend could deep merge nt hurt jquery wo nt hurt underscore", "d": "3/2011"}, {"body": "like see happen well", "d": "3/2011"}, {"body": "nerian would interested know progress make thanks", "d": "3/2011"}, {"body": "sure code currently tests pass view test pass working got errors kind weird maybe take look", "d": "3/2011"}, {"body": "running tests view remember change line", "d": "3/2011"}, {"body": "need modern browsers profiled large backbonejs app documentcloud heavy use memory leaked", "d": "3/2011"}, {"body": "looks like adding right iframe created solved problem", "d": "3/2011"}, {"body": "made changes works", "d": "3/2011"}, {"body": "hi folks bumped one official fix released apply singleline monkey patch find backbonehistoryprototypestart function line backbone add following line updates iframe location match windowlocation cheers", "d": "3/2011"}, {"body": "realised certain circumstances wo nt actually set iframe hash instead using code", "d": "3/2011"}, {"body": "bug reproduced confirm fix works", "d": "3/2011"}, {"body": "another side effect attributes applied creation attrs available initialize function furthermore since adding attrs directly creation views applied change events nt fired ca nt used work around rolled back avoid fix", "d": "3/2011"}, {"body": "", "d": "3/2011"}, {"body": "understood dave correctly also want see would make implementing modelrevert undoing local changes nice easy fact always assumed modelprevious modelpreviousattributes turns deal happens change events found bit confusing honest", "d": "3/2011"}, {"body": "sorry delay missed post february use case exactly stated used easily compare backbone thinks server compared current model assists logic displaying save button rolling back changes previous save version validation data element fails", "d": "3/2011"}, {"body": "would great code constantly things like coffeescript initialize bind event pollserverforchanges event state created state completed would lot cleaner initialize bind state created state completed pollserverforchanges", "d": "3/2011"}, {"body": "sure", "d": "3/2011"}, {"body": "besides save successerror found implementing fetch startdoneerror nearly collections makes trivial example bind visibility spinner collection view juggy preferring events callbacks whenever available sidenote notifying events nt listeners nt terribly expensive add couple commonly requested ones real downside see effort maintaining backwards compatibility road", "d": "3/2011"}, {"body": "created little plugin project replaces backbone history historyjs support nt cover every use case might help others", "d": "3/2011"}, {"body": "join chorus saying also think supported least optionally would also like hear better explanation currently dismissed thanks", "d": "3/2011"}, {"body": "author historyjs glad help provide assistance implementing historyjs backbone mrjjwright solution uses native api rather historyjs said confused", "d": "3/2011"}, {"body": "balupton decided try solution cleaner zero dependencies might easy possible going keep think", "d": "3/2011"}, {"body": "well opinion quite biased obviously author historyjs want see included everything however history api implemented differently every browser makes api less nonstandard broken followed natively sad think historyjs necessary regardless bias otherwise people end coding workarounds anyway see notes compatibility section historyjs homepage", "d": "3/2011"}, {"body": "rstacruz way commenting another account lazy logout mrjjwright added two improvements solution seen gist linked let know using solution app developing keen see official solution integrated backbone soon also historyjs convinced needed benefit adding methods implemented history states method fallbacks way timer listener way backbone already", "d": "3/2011"}, {"body": "historyjs lowercase h much smaller lines sloc kb uncompressed got working ok either way history could optional component", "d": "3/2011"}, {"body": "yes history support planned next major version backbone purely optin basis entirely slam dunk old ies nt support end minting two different urls content true version hash version support server also capable rendering page reached url", "d": "3/2011"}, {"body": "sinefunc let convince issue history api every browser handles differently want working solution following spec nt enough providing want support one browser hash fallback browsers handle differently options see nt use polyfill incur browser differences bugs code history api polyfill use already existing historyjs free open actively developed information browser differences see notes compatibility section also totally open get historyjs even smaller latest compressed support figure ways get code even let know sinefunc gregwebs like setup website shows native historyjs forte historyjs compare test suite", "d": "3/2011"}, {"body": "yeah would really like know missing fork forte historyjs", "d": "3/2011"}, {"body": "previous version struggling issue well switching views events handlers removed causes problems way manually", "d": "3/2011"}, {"body": "ended setting instead adjusting render philosophy create new elements worked option played method force event bindingremoval calling render something like former ideal", "d": "3/2011"}, {"body": "figured use viewunbind store current view instance view variable controller action run simply overwrite unbind method view case need unbind events well eg events binded collection make sore run unbind method think new backbonejs make sense", "d": "3/2011"}, {"body": "also agree bind ambiguity horrible honestly official definition bind inline underscore functionbind even though jquery huge believe proper definition bind used thus would prefer attach listen whatever anything bind events side note thanks great library difficult think pattern first adore structure brings", "d": "3/2011"}, {"body": "jeremy hit issue model event never get triggered shallow cloning use deep cloning method thanks martin", "d": "3/2011"}, {"body": "hi started using backbone ran exact issue today ask throws error adding exact model think would okay add took option let merge throw error maybe nt anything could make default throw error would nt break existing code people nt want throw error pass option would suppress errors", "d": "3/2011"}, {"body": "would love checking issues writing patch also would sweet insert index used add create made accessible somehow would make possible easily render new node dom without rerender everything use second indexof call", "d": "3/2011"}, {"body": "care look something like modelset form serializearray reduce function set h set hname hvalue return set", "d": "3/2011"}, {"body": "making common case simpler cases ca nt live performance hit leave default implementation open overriding default syncfacility common case override necessary", "d": "3/2011"}, {"body": "hi problem similar create method expected following work todo implement somethign better end callback success never seems get called hack todo hack nt know right var thiscollectionfetch success function thatcollectionviewtrigger triplist change error function todo implement somethign better alert failed load collection nt looked implement second bit code expected behaviour", "d": "3/2011"}]