[{"title": "modelgetmodelhas behaviour certain javascript implementation defined attribute names", "body": "simple example expected result nullundefined actual result function returns constructor property modelattributes object value model attribute set method also problem typical mistake using objects hash tabledictionary please use hasownproperty", "num": "1783", "d": "10/2012"}, {"title": "binding view states routes", "body": "general question ticket backbone best practices thinking optimal way structure backbone application problem various complex states made views showing others hidden canonical way handle backbone two things thought either controlling state router calling views hide show methods making views listen route event problem first method router must aware views existing application problem second solution make views listen events hide couple make show thanks pointing lean solution", "num": "1781", "d": "10/2012"}, {"title": "rename viewoptionscollection", "body": "little words talking document collection model meaningless access models collection nothing view model confusing bad practice view parent view dom node however name confuses modelcollection rename", "num": "1780", "d": "10/2012"}, {"title": "infinite redirect loop old browsers", "body": "bug backbone supposed work way sure backbone identifies browser nt support push state tries fall back hashurl use instead sometimes causes infinite redirect loop consider following case user enter server identifies path redirect browser backbone identify browser nt support push state redirect browser server ignores hash part path identifies path redirect browser infinite loop cases handled", "num": "1779", "d": "10/2012"}, {"title": "trigger event attaching view dom", "body": "often required tweak view el attached dom example chosen current backbone implementation always hard know view already attached dom attach code event fired would great could add event triggered whenever view el attached dom", "num": "1778", "d": "10/2012"}, {"title": "optionally namespace data backbonesync", "body": "apologies already discussed would nice could optionally namespace data sent server order support following pattern could used pretty simple way could implemented checking namespace backbonesync", "num": "1777", "d": "10/2012"}, {"title": "provide backbone modelcollection first parameter jquery deferred callbacks", "body": "hi leveraging deferred objects returned backbonesync calls extensively application found convenient particularly views depend multiple models one case struggled nested backbone views forced provide collection instance deferred object child view constructor var backboneviewextend render function var collection new backbonecollection collectionurl pathtoresources var backboneviewextend initialize function thiscollection thisoptionscollection thisdeferred thisoptionsdeferred example fairly trivial quickly becomes complex hierarchy grows particularly certain views hierarchy blocked rendering based data ready would nice deferred would modified slightly collection model provided first argument callbacks var backboneviewextend render function var collection new backbonecollection collectionurl pathtoresources var backboneviewextend initialize function thiscollection thisoptionscollection thisdeferred thisoptionsdeferred attached pull request issue illustrating potential fix certainly open suggestions approaches take thanks phil", "num": "1774", "d": "10/2012"}, {"title": "minimalistic validation framework", "body": "use case provide simple way define frequently used validations optional nt use backward compatible nt get way nt need looks define attribute validations method works exactly usual call return error messages form implementation coffeescript class appmodel extends backbonemodel making validate default run validations validate attrs runvalidations attrs runs validations defined attribute model runvalidations attrs return null unless validations errors k v attrs msg validations k v errors k push msg msg errors size gt errors else null still backward compatible nt provide attribute work usual also override supposed used current version backbone", "num": "1771", "d": "10/2012"}, {"title": "extension points attribute setter", "body": "sometimes would nice ability extend attribute setters done changing current version believe optimizations speed use case one possible use cases make attributes available directly model backward compatibility ie acces ways direct usual extendable setter done simple javascript deleteattribute function attr delete attr delete attr setattribute function attr value attr value attr value think", "num": "1770", "d": "10/2012"}, {"title": "naming convention collections model", "body": "suggesting rename model property model constructor good convention start constructors uppercase letter", "num": "1765", "d": "10/2012"}, {"title": "initialize constructor documentation", "body": "learned significant amount backbone initialize constructor functions last week better documentation would helped lot example mymodel mycustomparameter object structure problem mycustomparameter properties get copied mymodelattributes nt want happen temporarily decided override constructor function handle custom object adds complexity overridden constructor still call superclass constructor doable ugly opinion final solution explicitly state parameters backbone uses default add custom parameter afterward example create model would call like keeps backbone functionality allows properly extend ran similar problem views solution similar explicitly state backbone default parameters collections work similarly models options parameters would great documentation talked initialize method stressed standardized way using feel like initialize method always called parameters backbone uses default add parameters afterward clean keeps backbone functionality allowing extend", "num": "1764", "d": "10/2012"}, {"title": "model hasa collection attribute", "body": "developing interface presented table format data pagination filtering etc would like presented one backboneview backbonemodel array data filters etc parameters would like array backbonecollection problems collection model maybe something wrong help please rendering template \u0441onvert collection array via toarray underscore var productitem backbonemodelextend var productlistcollection backbonecollectionextend model productitem var productlist backbonemodelextend defaults limit itemslist new productlistcollection var productlistview backboneviewextend var catalog new productlist var prodview new productlistview model catalog", "num": "1763", "d": "10/2012"}, {"title": "question backbone amp testing amp angular", "body": "talked someone said angularjs framework backbonejs library stmt correct far know bb also type framework testing tool ur using test bb qunit", "num": "1760", "d": "10/2012"}, {"title": "make root object global instead moduleexports running node module", "body": "currently backbone run node module server root object equal moduleexports see issue background would handy root object set global instead moduleexports private module never inject anything backbone root namespace currently came experimenting rendering backbone views server needed inject stubs documentcreateelement currently way since global scope effectively completely private", "num": "1755", "d": "10/2012"}, {"title": "question routing url rewrite ie", "body": "encountered peculiar issue dealing backbone routing app hosted like hook event triggered appear address bar set rewrite rule androuter settings inside backbonerouterextend router instantiated works great firefoxchromesafari access event hook cool tried toggling pushstate option hope could help whenever accessing page redirected instead actually displaying content suppose nonissue change event hooking url something like however ca nt touch part anyway make either working expected without pushstate", "num": "1753", "d": "10/2012"}, {"title": "incorrect comment global scope node", "body": "beginning code line current master comment says save reference global object browser global server far tell incorrect server case node case root object module global although fact would quite nice root object global node nt going case least comment fixed accurate", "num": "1751", "d": "10/2012"}, {"title": "documentation explain view constructor extends thisoptions options argument", "body": "unless functionality subject change think docs explain constructor really extends rather replacing behavior seems provide pattern providing default options view overridden options passed constructor however nt clear docs", "num": "1749", "d": "10/2012"}, {"title": "collectionget problem custom idattribute", "body": "latest master new test fails expecting something nt true", "num": "1748", "d": "10/2012"}, {"title": "assynchronous backbone routing problem", "body": "big backbone application loads new backbone apps assynchronous also routes loaded point apps loaded differently user user right use historystop add new route historystart add new routing comes big drawback times every time appnavigate x executes routing times view renderings", "num": "1747", "d": "10/2012"}, {"title": "chaning model value inside callback change event", "body": "hi real use case tests sure desired behaviour var foo backbonemodelextend var foo new foo property fooon change property function model consoleinfo change property modelget property modelprevious property var flag true fooon change function model consoleinfo change modelget property modelprevious property flag flag false fooset property fooset property outputs change property change change bothers second change event intuition tell value nt changed event nt fired new comes backbone thanks advance", "num": "1745", "d": "10/2012"}, {"title": "question retrieving model attribute", "body": "way retrieve model inside collection model attribute", "num": "1740", "d": "10/2012"}, {"title": "ca nt fetch model collection idattribute set", "body": "using mongodb backend setting id within models however backbone ca nt reference id models placed collections example javascript define model custom idattribute var meal backbonemodelextend idattribute id define collection var meals backbonecollectionextend create model var new meal id name cake create collection insert model created c new meals model find model id within collection nt seem match idattribute reason cget returns expect cake model", "num": "1738", "d": "10/2012"}, {"title": "bug incorrect values previousattributes setting silently", "body": "following collection one model may state therefor following actions model triggers change event foo state previousattributes model bar triggers change event bar state model foo nt trigger change event previousattributes set would like add something helps us trigger event internally values set correctly using backbones api correctly everywhere like setting directly", "num": "1737", "d": "10/2012"}, {"title": "bug models", "body": "constructor therefor never use attributes parse getting ignored solution", "num": "1735", "d": "10/2012"}, {"title": "collectionget assumes idattribute id", "body": "talking code starting line nt something like instead", "num": "1729", "d": "10/2012"}, {"title": "question assign index models instantiation", "body": "anyway let newly instantiated model know index inside collection assign something like", "num": "1728", "d": "10/2012"}, {"title": "modelfetch remove attributes longer found model", "body": "model preexisting attributes either previous load manual set operation removed fetch contained server response model new backbonemodel modelurl apimodel modelset bogus quick brown fox modelfetch modelget bogus gt quick brown fox", "num": "1727", "d": "10/2012"}, {"title": "native empty input fields send null server", "body": "backbonesync function following code called jsonstringify convert seem like empty strings nulls bug information really backbone issue know something like following believe issue go away friendly", "num": "1724", "d": "10/2012"}, {"title": "dependencies", "body": "hi confirm underscore jquery methods needed backbone work want implement code rather using libraries thanks", "num": "1722", "d": "10/2012"}, {"title": "fetch add true attaching phantom object collection", "body": "currently adds empty object original collection even fetched response lead unexpected errors processing collection data intended", "num": "1721", "d": "10/2012"}, {"title": "docs page links todo example", "body": "affected page second link page returns presumably correct link reference", "num": "1720", "d": "10/2012"}, {"title": "question raw response server", "body": "get raw response server using etc whose raw responses wo nt passed", "num": "1719", "d": "10/2012"}, {"title": "issues modelspy", "body": "related python django one model inherit data table b many fields wants create another table c consists three fields id b id one field insert values admin panel third table c takes value automatically means one row inserted", "num": "1718", "d": "10/2012"}, {"title": "reference inheritance", "body": "question potentially bug hopefully question trying create slightly enhanced view create instances view enhanced view var enhanced backboneviewextend foo test function thisfoopush mathrandom couple new objects var foo enhancedextend var bar enhancedextend instantiating var foo new foo var bar new bar trying push random number foo footest bartest expecting see something like consolelog foofoo barfoo one would expect see different values output however one gets array length identical values instances looking code around line one see following ctorprototype parentprototype order create truly new instance would nt ctorprototype extend true parentprototype suited better would solve problem described array foo feels like static instance variables know prescribed version use initialize instance variables would suggested fix wrong thanks", "num": "1715", "d": "10/2012"}, {"title": "way modify collection arguments", "body": "new collection instantiated following happens unfortunately nt give initialize way tweak models instance someone wanted make collection took object instead array would great backbone passed models directly initialize edited within initialize rather via arguments currently js wo nt let modify arguments b set initialize pass way initialize modify c initialize returns anything pass reset instead models add initialparse option something effect reset pass reset way user override reset something arguments e provide way modifying collection inputs get reset models", "num": "1711", "d": "10/2012"}, {"title": "change event triggering properly model attribute changed within event handler", "body": "hello basic test case sure whether bug working expected though behavior feels wrong basically change model attribute within change handler case unset color attribute processing change name event change event gets fired model appear work correctly fired changes hash returned change event lists name supposed work would expected change fire twice attribute changes since occurred independently one another would expected single change event fire listed name amp color changes hash", "num": "1710", "d": "10/2012"}, {"title": "provide archived documentation", "body": "people started building application upon nowoutdated release always feasible stay edge even latest stable version backbone people documentation incorrect quite dangerous could links provided snapshots documentation apply older versions", "num": "1707", "d": "10/2012"}, {"title": "model get alias tojson", "body": "using coffeescript write code looks like seems place well example view rendering edit allowing multiple arguments would also work", "num": "1706", "d": "10/2012"}, {"title": "set collection url instantiation", "body": "currently impossible javascript var collection backbonecollectionextend var c new collection url pathtoapi constructor wrapper required achieve javascript var wrapper function options var collection backbonecollectionextend url optionsurl var c new wrapper url pathtoapi workaround overly complex enable ability set attributes eg url collection instantiation would handy situations api urls dynamically generated nt want redefine collection", "num": "1705", "d": "10/2012"}, {"title": "ca nt pass data attributes within view attributes method", "body": "fan setting attributes within view backboneviewextend attributes dataattr mydata however throws error due hyphen key dataattr uncaught syntaxerror unexpected token realize illegal token javascript keyvalue object however hoping backbone offered work around given fact passing data attributes one likely scenarios working around setting attribute within render function using jquery render function elattr dataattr mydata works thought ask another option", "num": "1703", "d": "10/2012"}, {"title": "alternative events trigger select functor", "body": "hi wondering alternative standard backboneviewextend events trigger selector functor special alternative function gets called lets bind events specific view without mix trigger css selector string without pass callback string rather reference latter less important former way least even binding way keeps trigger view selector separate would awesome alternative", "num": "1702", "d": "10/2012"}, {"title": "improve documentation", "body": "disables propagation model change events collections users ca nt expected know yet documentation makes mention", "num": "1701", "d": "10/2012"}, {"title": "unbind topic processing topic", "body": "callbacks named binded event event happens callback processed processing callback callback unbind event also event happens inmediatly callback processed second event process callback unbind event first event continues callback unbinded event called expected behaviour suppose goint option setup asynchronous behaviour thanks", "num": "1700", "d": "10/2012"}, {"title": "backbonesync overriding partially", "body": "way override backbonesync partially say leave rest untouched using native backbonesync perhaps way need right due restrictions imposed existing apis", "num": "1699", "d": "10/2012"}, {"title": "stops propagation events model collection", "body": "call without parameters events model stop getting propagated collection model belongs worked around removing readding model collection", "num": "1698", "d": "10/2012"}, {"title": "documentation hide left bar rather text text", "body": "firefox window starts really narrow text navigation text page overlap seem happen chrome firefox matters besides bug would nice responsive design nav area hide window narrow starts narrow link context sensitive help backbone objects little room inside firebug moment useless rather link real documentation host copy thanks see sample ps nt work likely description issue starts firefox lot stuff particularly webkit", "num": "1697", "d": "10/2012"}, {"title": "backbonehistorystart atroot var incorrectly set false locationsearch present", "body": "experience windowhistorystart pushstate option called something like autoupdatedeeplink pushstate loaded word specific compatible browsers backbone behavior seems enforce push state option passed also convert push state urls hash urls browsers nt support push state seen examples online people hook flag modernizrhistory gets set false ie makes sense current variable name behavior seeing context setting pushstate true ie get hash url auto update finding everything works great except pass querystring variables along hash url ex works fine redirects tracked strange behavior var atroot locpathname thisoptionsroot amp amp locsearch backbonehistorystart method set always expect web app site root querystring present make sense context querystring analytics present effect backbone atroot logic solution comment amp amp locsearch tldr seems backbonehistorystart considers web app root nt querystring present causing ie urls querystringhash lose hash value", "num": "1695", "d": "10/2012"}, {"title": "silent set change attr handler commited parallel one", "body": "javascript var new backbonemodel x mon change change function md v consolelog v mon change x function md v mset mset silent true mon change function md v mset mset silent true mset x foo bar lt expected mchange lt silents placed extensive test case think proper behavior", "num": "1694", "d": "10/2012"}, {"title": "concerned model security", "body": "hi simple backbone modelview combo validating login field calling data sent server process problem realised inspecting model calling see password stored model plain text developer dynamically change javascript via standard builtin browser developer tools see user password implement usernamepassword login securely backbone current modelview code follows model js define backbone function view js define modelscustomerlogin backbone function customerlogin", "num": "1690", "d": "10/2012"}, {"title": "issues django facebook connect", "body": "want use facebook connect app requirements user login facebook account see friends want import facebook friend list tried lot able login facebookbut still unable import user friend list also confused place facebook connect files let say project p app many django facebook connect setup available github many files setting urls managers models templates files etc confused app already files place files place entire folder app done without placing files please suggest good facebook connect fulfils requirements also use app", "num": "1689", "d": "10/2012"}, {"body": "adamglass thanks opening issue opened add change future please feel free make pull request things like helps cut issue noise one follow question incorrect text may explain typescript description file backbone wrong well huh", "d": "10/2012"}, {"body": "typescript essentially javascript application scale development typed superset compiles javascript video anders explains pretty well anyway make type checking useful need essentially typed descriptions frameworks start one backbone sample people building complete one latter described reset requiring first argument looked documentation found inconsistent thus issue", "d": "10/2012"}, {"body": "jachor thanks opening issue originate real world usecase curious people actually using attributes names edit something actually tripping people", "d": "10/2012"}, {"body": "wookiehangover new js app thing hit spend time debugging list attribute names causing problem longer favorite firefox watch", "d": "10/2012"}, {"body": "theory coffee people new backbonecollection name dexter morgan profession blood spatter anaylst shoes sneaky boots name debra morgan profession miami metro lieutenant watch fossil peoplewithwatches peoplefilter person gt personhas watch peoplewithwatcheslength webkit firefox obviously many ways could affect real application like said wookiehangover interesting never mentioned", "d": "10/2012"}, {"body": "hi pistacchio say either approaches fine works application large application event driven model help keep code modular testable smaller app least one less pages keeping logic central router might work better", "d": "10/2012"}, {"body": "always enough one instance model belong many collections make perfect sense explained initializeconstructor documentation snippet creating new view options pass attached view thisoptions future reference several special options passed attached directly view model collection el id classname tagname attributes", "d": "10/2012"}, {"body": "mornin yahasana convention instance use fairly open ended take look related source fairly short read notice attached property used one time disposal convention optional think documentation covers pretty well", "d": "10/2012"}, {"body": "mornin alexeypetrushin seems app rooted tried using", "d": "10/2012"}, {"body": "thanks advice actually root fixed hack instead falling back hashurls fall back page reload solution hacking backbonejs hardcode always available wo nt redirect hashurls updating method use redirect page reload push state available maybe worth add option backbone router something like fall back redirects instead hashurls push state available", "d": "10/2012"}, {"body": "see option passing cause backbone never use hash based routing", "d": "10/2012"}, {"body": "set wo nt work router wo nt redirect good also stops recognizing urls firing correct route actions get empty screen happens function implemented disabled argument passed false return null url instead actual url correct route handler wo nt called", "d": "10/2012"}, {"body": "afraid nt quite understand provide example code illustrates problem", "d": "10/2012"}, {"body": "sample code wo nt work old browsers correctly try navigate first chrome internet explorer type home url html var router backbonerouterextend routes home home lt p gt home function alert route home url fired new router backbonehistorystart pushstate true hashchange false simple http server responding url html page javascript var http require var fs require fs req res consolelog processing requrl reswritehead contenttype texthtml resend fsreadfilesync backbonerouterhtml listen", "d": "10/2012"}, {"body": "thanks example alexeypetrushin confirm issue running locally however using backbone replacing current master solves problem would mind giving shot", "d": "10/2012"}, {"body": "backbone never attaches view dom nt know wo nt happen want event feel free trigger", "d": "10/2012"}, {"body": "hi moudy exactly use something like following accomplish goal", "d": "10/2012"}, {"body": "braddunbar yes means every template needs reflect well need tojson take option conditionally namespace parse method modifying data coming seems like would appropriate way modify data going", "d": "10/2012"}, {"body": "right way modify data going closely match original example", "d": "10/2012"}, {"body": "braddunbar means every corresponding template need account namespace distinction calling rendering view saving server seems bad template data structure coupled data server expects", "d": "10/2012"}, {"body": "pass options uses context view disable wrapping data view", "d": "10/2012"}, {"body": "yethee right written something like nice need pass options conventions set assume models render correctly json called", "d": "10/2012"}, {"body": "moudy good points nt consider nested models", "d": "10/2012"}, {"body": "braddunbar yeah rendering nested models gets tricky realized example would nt work would need something like prettiest piece code something like would nice", "d": "10/2012"}, {"body": "curious ca nt method model typically end modifying model data one way another passing template never found anything wrong additional method similar braddunbar example overriding imo extension always favored complicating method signatures", "d": "10/2012"}, {"body": "wookiehangover could able declare much nicer adding another method whether server expects attributes namespaced varies enough apps option would useful would allow projects like backbone rails need override sync add namespace main thing struggling way pass options called means needs return data server expects default generally everywhere else used rending template view maybe namespacing better suited pluginextension although found hard patch add without recreating whole method", "d": "10/2012"}, {"body": "definitely wrong using situation patching correct way add functionality certainly without replacing whole method would use something like following thanks input wookiehangover thanks sticking moudy", "d": "10/2012"}, {"body": "imo extension always favored complicating method signatures wookiehangover wonderful sentiment think backbone espouses already perhaps elevate place somewhere conspicuous reference", "d": "10/2012"}, {"body": "braddunbar got thanks", "d": "10/2012"}, {"body": "braddunbar added tao backbone godmode", "d": "10/2012"}, {"body": "tao backbone ooh pretty fun idea might make nice section homepage", "d": "10/2012"}, {"body": "would really help developers get speed currently reading backbone source effective way understand backbone underlying philosophy tao might way codify modelview also going braddunbar point think framework backbone way", "d": "10/2012"}, {"body": "yes particularly backbone lightweight people tend misuse tao section things like managing sub views amp amp events state amp shared state views view models routers etc", "d": "10/2012"}, {"body": "yes", "d": "10/2012"}, {"body": "hi pmaccart reason ca nt use event collection trigger callback", "d": "10/2012"}, {"body": "started using scale application upwards layers nested backbone views cases became unwieldy supply modelscollections way views well keeping track particular modelscollections fetched experimenting deferred pattern found much pleasant code particularly cases single view requires multiple models pattern works great single view managing collections lots nested views rely different combinations data render things break much cleaner able provide deferred fetch trust collectionmodel fetch invoked upon would provided callbacks pull request shortly", "d": "10/2012"}, {"body": "closing pull request created issue still working polishing github skills", "d": "10/2012"}, {"body": "nice seems backboneesque", "d": "10/2012"}, {"body": "thanks opening issue alexeypetrushin like feature considered please reopen pull request", "d": "10/2012"}, {"body": "alexeypetrushin thanks opening issue would confuse line properties model instance model attributes would likely cause lots breaking changes", "d": "10/2012"}, {"body": "maybe nt explained clearly nt mean implement new type setter change behavior showcase one many possible usage attribute setter extensions ie proposed change wo nt change anything gives users ability easy extend setter wish right easy javascript optionsunset thisdeleteattribute attr else thissetattribute attr val deleteattribute function attr delete attr setattribute function attr value attr value", "d": "10/2012"}, {"body": "hi alexeypetrushin definitely ability already though agree wookiehangover comments nt recommend following code want without altering backbone", "d": "10/2012"}, {"body": "also though sure attribute set change event sure behave listeners expect attribute someone call", "d": "10/2012"}, {"body": "always add property models agree logic would easy alias transition immediately breaking also currently instance constructor nt consistent", "d": "10/2012"}, {"body": "heard convention capitalizing constructor variable never naming properties way except part namespace eg curiosity point example capitalized properties major js libraries open source projects etc", "d": "10/2012"}, {"body": "machineghost comes mind", "d": "10/2012"}, {"body": "looks good smile also sexy", "d": "10/2012"}, {"body": "afraid going leave lowercase indeed tend point constructor function serving variable name analogy english refer tom capitalize proper noun refer man happens tom lowercase despite referring entity ditto point", "d": "10/2012"}, {"body": "makes sense would consider case alias pronoun like tom also goes thomas exactly property also goes da boss though wink", "d": "10/2012"}, {"body": "erikringsmuth thanks opening issue documentation pretty clear model instances passed model attributes type use case overriding function nt enough implementation docs creating instance model pass initial values attributes set model define initialize function invoked model created rare cases looking get fancy may want override constructor allows replace actual constructor function model", "d": "10/2012"}, {"body": "mornin daemonz think good bit luck mailing list since github issues development backbone took liberty opening discussion", "d": "10/2012"}, {"body": "sure important distinction would call library usually hear described yes qunit used test backbone excellent unit testing tool often use test application code well", "d": "10/2012"}, {"body": "thanks ur answer important distinction agree think", "d": "10/2012"}, {"body": "afraid backbone intended work node module node modules supposed export things properly create global variables feel free change documentcreateelement behavior fork", "d": "10/2012"}, {"body": "create global variables nt say anything backbone creating global variables global scope backbone code root object node global scope seems consistent standard node module behavior", "d": "10/2012"}, {"body": "feel free send pull request currently sounds like asking backbone attach", "d": "10/2012"}, {"body": "yes right fact issue linked described comments code said setting root global nt work pr thanks", "d": "10/2012"}, {"body": "mornin gsklee definitely describing docs indicate like use pushstate support application use backbonehistorystart pushstate true nt need feature test backbone using tells backbone ie would like translate let know nt fix problem", "d": "10/2012"}, {"body": "hello braddunbar really woud like achieve get rid sign ie address bar way stop appearing inside address bar using backbone routing pushstate", "d": "10/2012"}, {"body": "use prevent client side routing make navigation use full page reload looking", "d": "10/2012"}, {"body": "nevermind figured like achieve technically impossible ie browsers without pushstate", "d": "10/2012"}, {"body": "could wrong cursory test seems indicate inside iife node", "d": "10/2012"}, {"body": "yes inside iife evaluated passed parameter iife means value determined outside iife point equal module global", "d": "10/2012"}, {"body": "right left end appears result also appears executed module way would expect executed", "d": "10/2012"}, {"body": "yes equal moduleexports global running module guess never mentioned running module part sort implied though guess could run backbone server module would nt people running backbone server running module never really occurred run way", "d": "10/2012"}, {"body": "definitely nt think first tests think comments read instead serverside enviroments nt often use serverside javascript vms", "d": "10/2012"}, {"body": "could nt even name serverside javascript platforms could nt say work guess saying exports moduleexports fine otoh would way cooler way make original comment accurate root global node experimenting rendering backbone views server way inject stubs backbone global scope effectively private module", "d": "10/2012"}, {"body": "kevindente updated comment accurate think useful definitely open another issue describing thanks pointing", "d": "10/2012"}, {"body": "always thought undocumented behavior bit strange soon remove situations useful", "d": "10/2012"}, {"body": "seems provide pattern providing default options view overridden options passed constructor iirc exactly think number places view defined default configuration options instantiate configure without losing previous defaults", "d": "10/2012"}, {"body": "think lets implement similar pattern defaults properties like defined view declaration overridden perinstance basis use parameterizing clientside templates sometimes", "d": "10/2012"}, {"body": "jashkenas like wish documented written bunch views defined defaults property calling defaults thisoptions thisdefaults beginning inititalize method realizing configure behavior sticking around happy take pass documenting doc sources live", "d": "10/2012"}, {"body": "indexhtml main repo", "d": "10/2012"}, {"body": "nevermind found error", "d": "10/2012"}, {"body": "mornin cinezaster afraid nt quite understand problem provide reduced test case displays issue", "d": "10/2012"}, {"body": "read post mailing list think understand problem instead starting stopping history object create new one routes actually stored history object router", "d": "10/2012"}, {"body": "right routes callbacks stored added brad thu oct cinezaster notifications githubcomwrote thx braddunbar idea definitely works problem described figure reference route functions stored object created different routes functions understand route function backboneroute adds routes backbonehistory making new backbonehistory overwrites existing routes ca nt figure way adding routes functions probably backbone routing nt capable extended way using require load files structure appjs reply email directly view github", "d": "10/2012"}, {"body": "thx braddunbar idea definitely works problem described figure reference route functions stored object created different routes functions understand route function backboneroute adds routes backbonehistory making new backbonehistory overwrites existing routes ca nt figure way adding routes functions probably backbone routing nt capable extended way using require load files structure first routerjs define coremodelssession coreviewsauth corecollectionscubes function session authview cubescollection var approuter backbonerouterextend routes login showlogin logout dologout path loadapp showlogin function alert login viewauthrender dologout function viewauthlogout loadapp function path pathlength path home apploaderloadapp path true cubes trigger loading first needed app allowed view app app loaded require initiated means try add new routes try load new routes like know right way tried extend routerapp see know clue already made backbone applications never added new routes total new app structure existing backbone app", "d": "10/2012"}, {"body": "mlowicki believe bug created fix result case would fixed soon pending review jashkenas braddunbar", "d": "10/2012"}, {"body": "yep see multiple models returned use want one model returned", "d": "10/2012"}, {"body": "yep good candidates", "d": "10/2012"}, {"body": "mornin dhruvbhatia think problem got method signature collection constructor bit mixed try instead", "d": "10/2012"}, {"body": "thanks opening issue theluk worth nt create inconsistent behavior unit tests modelparse still passing since reference changes also reflected change introduced addressing inconsistencies passed model constructor said internally consistent variable referenced constructor attributes gone ahead submitted pull request address", "d": "10/2012"}, {"body": "hi lperrinfano normalized property regardless value take following example instance change necessary", "d": "10/2012"}, {"body": "ok passing object wrapped model collectionremove thinking collection would handle transparently like collectionadd", "d": "10/2012"}, {"body": "collection get expects id model perhaps clarified docs", "d": "10/2012"}, {"body": "addresses documentation", "d": "10/2012"}, {"body": "thanks quick reply", "d": "10/2012"}, {"body": "get index model collection using indexof nt access collection view know model inside particular collection always get collection like would nt recommend storing index model time add additional model update index values model collection", "d": "10/2012"}, {"body": "feeling stupid thanks", "d": "10/2012"}, {"body": "correct server allowed update attributes cares set nt return attributes potentially large response semantics want clear value set", "d": "10/2012"}, {"body": "would recommend patching globally anything would use stringify backbone", "d": "10/2012"}, {"body": "thank opening issue tysonnero including resolve listed dependency docs even though browsers support json suggested order address issues old ie json either nt supported incorrectly implemented whatever reason easily override backbonesync include workaround caseywebdev going clobber global might well use crock implementation squirrel", "d": "10/2012"}, {"body": "seems even though include default ie native behavior happening read stackoverflow answer native implementation exists including overwrite native implementation", "d": "10/2012"}, {"body": "nt think going best interest libraries lots work put lots people", "d": "10/2012"}, {"body": "ca nt pretty easy determine grep underscore methods grep jquery methods", "d": "10/2012"}, {"body": "nt forget array underscore methods mapped collections", "d": "10/2012"}, {"body": "add empty model collection want means array models empty nothing added question nt fetched json returning", "d": "10/2012"}, {"body": "quite right use ensure undefined results return empty array thanks caseywebdev", "d": "10/2012"}, {"body": "great explanation thanks caseywebdev", "d": "10/2012"}, {"body": "either add function options second parameter success function passed raw response", "d": "10/2012"}, {"body": "anthonyshort right callback contain server response hope helps", "d": "10/2012"}, {"body": "great thanks", "d": "10/2012"}, {"body": "way leverage ajax deferred promise using way", "d": "10/2012"}, {"body": "recall correctly returns model ca nt use deferred methods like could instantiate new model call get behaviour", "d": "10/2012"}, {"body": "hi tracker backbonejs issues perhaps looking django project source repository", "d": "10/2012"}, {"body": "hi ndanson give try instead prototype properties indeed shared javascript instances unique value instance need set explicitly", "d": "10/2012"}, {"body": "suppose following var foo viewextend initialize function consolelog toast yummy var foo new foo view initialize overwritten foo initialize thereby variable foo wo nt available foo anymore design", "d": "10/2012"}, {"body": "always call method prototype like", "d": "10/2012"}, {"body": "thank prompt replies indeed solve issue question provide deep copy option rather keep writing boilerplate code assuming project likely hundreds views thanks", "d": "10/2012"}, {"body": "glad help sure boilerplate talking referring super call reality inheritance javascript calling super methods rather verbose", "d": "10/2012"}, {"body": "thank patience much appreciated understand inheritance js fact question would rather provide option deep copying within backbone framework example describing problem included potential solution functionality rephrase even would real world scenario objects x extend foo would share instance variables within backbone views example javascript general thanks", "d": "10/2012"}, {"body": "rephrase even would real world scenario objects x extend foo would share instance variables within backbone views example javascript general examples instance shares prototype variables functions one example also default values good examples assuming need", "d": "10/2012"}, {"body": "last question nt option deep copying", "d": "10/2012"}, {"body": "ndanson objects arrays passed reference object properties prototype items need set explicitly per instance deep copying costly performance standpoint almost every case different solution would better suited something still want find something backbone", "d": "10/2012"}, {"body": "ps technically way work around issue pretty fugly pretty ugly right warn", "d": "10/2012"}, {"body": "machineghost current master branch functionality supported calling collection function specifying collection options", "d": "10/2012"}, {"body": "additionally nt like initialized called always welcome overloadwrite constructor function including wrapping existing functionality whatever modifications wish", "d": "10/2012"}, {"body": "tgriesser awesome ca nt wait get released knowtheory overloading initialize function easy allowed even encouraged framework contrast writing constructor function essentially requires remaking backbonecollection scratch huge amount copypaste required zero support framework sure like replace reset initialize function another reset something replace real reset sane programmer would run screaming opposite direction code", "d": "10/2012"}, {"body": "machineghost overloading constructor nt bad think really different method override", "d": "10/2012"}, {"body": "tbranyen idea could extremely handy thanks hope sake bb users feature gets documented point future right bb documentation actually refers constructorinitialize one thing implying constructor enduser access initialize mention anywhere else", "d": "10/2012"}, {"body": "write user misunderstanding thought change event included attributes changed hash nt realize could call instead worked fine", "d": "10/2012"}, {"body": "download old docs pattern agree might nice formal way viewing archived docs", "d": "10/2012"}, {"body": "could documentation checked git along code every tagged release browse github also grab documentation html page render fine locally nt know business hosting old versions docs online considering fairly easy keep date", "d": "10/2012"}, {"body": "mornin aeosynth use purpose", "d": "10/2012"}, {"body": "docs specifically warn also used attributes multiple values use single values well ignore entirely", "d": "10/2012"}, {"body": "fine way go mainly parallelism override something special wish", "d": "10/2012"}, {"body": "case warning removed modified currently explicitly directly reading attributes hash", "d": "10/2012"}, {"body": "docs please use set update attributes instead modifying directly like retrieve munge copy model attributes use tojson instead nt modify using retrieve values perfectly good practice", "d": "10/2012"}, {"body": "js var collection backbonecollectionextend var c new collection curl pathtoapi seems like pretty simple solution", "d": "10/2012"}, {"body": "yep javascript object use quoted keys", "d": "10/2012"}, {"body": "ahh thought tried thanks", "d": "10/2012"}, {"body": "suggest passing data attribute view dom element attributes within view model attributes dataattr thismodelfoo losing scope reference uncaught typeerror read property model undefined", "d": "10/2012"}, {"body": "use function like", "d": "10/2012"}, {"body": "awesome works perfectly thank prompt responses", "d": "10/2012"}, {"body": "welcome future please nt use bug tickets tech support like try irc channel mailing list first", "d": "10/2012"}, {"body": "happy tried first one user documentcloud irc turjakas responding", "d": "10/2012"}, {"body": "must mistyped folks documentcloud freenode right", "d": "10/2012"}, {"body": "special alternative function gets called lets bind events specific view without mix trigger css selector string afraid reason would rather concatenate event selector found object syntax rather succinct without pass callback string rather reference pass function instead string callback also work calling directly", "d": "10/2012"}, {"body": "use jquery", "d": "10/2012"}, {"body": "syntax succinct puts two completely different things string effectively making mystery string first word trigger whitespace selector get trigger back split whitespace always going true maybe maybe using jquery el good suggestion thank", "d": "10/2012"}, {"body": "want unbind callback asynchronously asynchronously", "d": "10/2012"}, {"body": "nope either avoid creating models already know id copypaste put", "d": "10/2012"}, {"body": "certainly without copy paste return results original unless method", "d": "10/2012"}, {"body": "much much better idea", "d": "10/2012"}, {"body": "pretty sure intended behaviour calling without parameters removes events including setup collection might nicer could namespace events", "d": "10/2012"}, {"body": "event propagation model collection implemented using events invisible user model event handlers added model user nt mixed event handlers used internally backbone understand backbone behaves way currently argue current behavior bug", "d": "10/2012"}, {"body": "never personally run issue usually remove events using context see point", "d": "10/2012"}, {"body": "intended behavior internal events nt meant invisible hidden behind scenes convenience use extend disable see fit example use disable default modelcollection set events replace trigger slightly different circumstances", "d": "10/2012"}, {"body": "good morning fishmongr thanks pointing given backbone ignores search parameters every area including transition opposite direction agree ignored case addressed please let know nt work", "d": "10/2012"}, {"body": "great thanks speed patch verified patch fixed issue diff version backbone noticed ton changes since last downloaded version nt version number changing signify code changes", "d": "10/2012"}, {"body": "yep next released version backbone probably", "d": "10/2012"}, {"body": "thinking case well working different scenarios addressed concluded loud changes nested inside change blocks discouraged particularly inside individual attribute change events guaranteed particular order javascript objects guaranteed follow insert order nt sure test suggests two callbacks listening change event guaranteed previous attributes seem intuitive would case although opinion would better somehow consolidate two listeners one making special exceptions nested loud changes javascript single threaded would difficult maintain divergent model histories loud changes given special treatment inside change blocks order backbone events fire events individual attribute changes fire single model change event others finished example called first point fired loudly amp logged set silently called calls loud change definition takes current changes amp pending silent changes queued fires believe would expected behavior event would fired despite change level say general rule thumb nt fire multiple loud changes model inside nested change blocks need consolidate final event guaranteed fire last majority applications write heavily event driven nt yet run case functionality would issue could wrong braddunbar jashkenas", "d": "10/2012"}, {"body": "hello tgriesser sure js guaranteed insert order object implied eg could logged different order believe come otherwise behavior could predictable think solution issue n include threads processes seperate nested handlers environments empty pending list provision collect pendings every parallel event emission propagate collected pendings next general", "d": "10/2012"}, {"body": "stegrams would happen conflicting changes models happen level build pending list would take precedence var new backbonemodel x mon change change function md v consolelog v mon change x function md v mset mset silent true mset conflicting ysilent silent true mon change function md v mset mset silent true mset conflicting xsilent silent true mset x foo bar mchange also example functionality issue real world case", "d": "10/2012"}, {"body": "yes tgriesser case collected pendings handler overlaped ones idea bulletproof think idea promotes little project maybe future someone else get farther ahead thats suppose works nt real world case proves improvement never necessary", "d": "10/2012"}, {"body": "yep think expected desirable idea changes wait next loud change state occur case next loud change immediate already inside", "d": "10/2012"}, {"body": "hello jashkenas meaning next two changes set simultaneously loop always guaranteed case come think least note documentation loud changes inside change handlers discouraged tgriesser mentioned", "d": "10/2012"}, {"body": "nested change handlers always tricky probably avoided general case loud changes inside change handlers avoided modelon change x gt modelset value modelset x value change value change x value fine", "d": "10/2012"}, {"body": "afraid nothing backbone insecure javascript website able sniff passwords nt allow insecure javascript site xss third party scripts etc use https nt store password client side moment longer takes send server hashed", "d": "10/2012"}, {"body": "jashkenas best procedure using backbone logon area nt https totally understand passwords nt stored hence concern realised model code actually getting handled using concepts modelsviews using model could validate data usernamepassword make sure correct format even model view manually validate fields use ajax send data server form post action handle standardtraditional way https available would safe ajaxing data across assume javascript still client side intercepted unless missing something", "d": "10/2012"}, {"body": "login form http password sniffed man middle anyone unencrypted wifi network ideally entire site runs https certainly page provides loggedin functionality needs backbone nothing password present field less secure present model page", "d": "10/2012"}, {"body": "jashkenas problem understand backbone issue ask take brief moment look following code advise whether would safe assumption running https site effectively storing form fields longer model literally validating letting form submit server per traditional post method js define modelscustomerlogin backbone function customerlogin", "d": "10/2012"}, {"body": "yep use https endtoend site nt xss holes sending password server fine nt matter keep around temporarily model", "d": "10/2012"}, {"body": "jashkenas ok thanks", "d": "10/2012"}, {"body": "afraid backbonejs nt particular connection either django facebook connect good luck getting sorted", "d": "10/2012"}, {"body": "got page found error requesting login urlbut shows error shows list url url file required url looking error page page found request method get request url using urlconf defined webdevurls django tried url patterns order namehome polls admindoc admin edit customerreg checkout order upload product profile logout login p namesocialauthbegin complete p namesocialauthcomplete associate p namesocialauthassociatebegin associatecomplete p namesocialauthassociatecomplete disconnect p namesocialauthdisconnect disconnect p p namesocialauthdisconnectindividual current url login nt match list see url file url nt access", "d": "10/2012"}, {"body": "matthewwithanm addressed right introduced regression thanks pointing", "d": "10/2012"}, {"body": "braddunbar thanks fixing quickly", "d": "10/2012"}, {"body": "agree xiaoli modelset id silent true shoud prevent firing event update byid please fix example", "d": "10/2012"}, {"body": "worth agree changed set validate values changed save validate attributes isvalid similarly validate attributes", "d": "10/2012"}, {"body": "would completely agree genexp comment would seem sensible solution", "d": "10/2012"}, {"body": "tgriesser recent refactor fix", "d": "10/2012"}, {"body": "jashkenas nt think valid issue begin shows times expected based change rules current master refactor", "d": "10/2012"}, {"body": "ah better", "d": "10/2012"}, {"body": "closing favor pull request", "d": "10/2012"}, {"body": "plugin something similar overloading events nondom events seems like bit overhead", "d": "10/2012"}, {"body": "yep much bug known limitation take care attribute keys making proposed patch would cause working code webkit firefox error internet explorer situation like avoid much possible", "d": "10/2012"}, {"body": "getting error well however removal function view called dispose got add stuff hence wrapped method boiled working remove calling like thismaptraildetails thismaptraildetailsdispose keep getting maximum call stack size exceeded error mentioned though", "d": "10/2012"}, {"body": "using edge version calls essentially calling case", "d": "10/2012"}, {"body": "issue assumed dispose safe use mistake renamed destroy works expected thank", "d": "10/2012"}, {"body": "looks like patches yet feel free send pr specific improvements docs always welcome", "d": "10/2012"}, {"body": "change ok understand correctly gt eg actually option allow models form collection individually trigger event updated datas existing models server response right addremove new models response collection missing models collection response respectively ed thank", "d": "10/2012"}, {"body": "understand correctly backbonecollection fetch gt eg master actually merge true option allow models form collection individually trigger change event updated datas existing models server response right yes seems correct addremove new models response collection missing models collection response respectively added remove collection reset appropriate type operation", "d": "10/2012"}, {"body": "", "d": "10/2012"}, {"body": "another example useful mixin would able classagnostic common hook came backbone google group", "d": "10/2012"}, {"body": "fixed master needs get merged ghpages", "d": "10/2012"}, {"body": "convention global objects reference removes doubt", "d": "10/2012"}, {"body": "well could documentation updated generates urls form collectionurl id falling back urlroot id model part collection", "d": "10/2012"}, {"body": "tgoffman learning code rely lot documentation writing jasmine tests right trying hunt problem tests hours trusting docs true looked source voila", "d": "10/2012"}, {"body": "jashkenas sorry slow response think indeed misreading tests possibly applying diff current master demonstrates failure diff diff git itestrouterjs wtestrouterjs index itestrouterjs wtestrouterjs document ready function optional item optionalitem splatargsend splat firstcomplex partrest complex abc thingx thing entity args query anything anything document ready function thisroute implicit implicit thing function thing thisthingarg thing counter function thiscount document ready function equal routertesting test query string function locationreplace backbonehistorycheckurl equal routerthingarg foo test query string function locationreplace backbonehistorycheckurl equal routerthingarg bar test routes simple function locationreplace backbonehistorycheckurl query string test passes query string test fails", "d": "10/2012"}, {"body": "test fail nt think valid query string hash looks like one ignoring query strings work correctly", "d": "10/2012"}, {"body": "braddunbar ah right nt think adequately reproduce test suite running file going write small application demonstrate problem live example problem see running latest backbone nt see change would fix anywhere changelog see source", "d": "10/2012"}, {"body": "believe relevant change missing example noticed fragment used backbone longer contains search query", "d": "10/2012"}, {"body": "braddunbar ah thanks right set test server took look far tell fixed fixed master hopefully go next release", "d": "10/2012"}, {"body": "also running backbone also bit service added query param backbone url shed light use triggers page even though backbone route something like problem correctly triggers serverside serves page matter url hit", "d": "10/2012"}, {"body": "krunkosaurus suggesting strip search string seems reasonable though bit worried breaking backward compatibility fairly certain people currently use query strings fragments", "d": "10/2012"}, {"body": "definitely would nt want change breaks current apps backboneroute option ignore params", "d": "10/2012"}, {"body": "think pick strategy stick enough options", "d": "10/2012"}, {"body": "fine ignoring might decision side fence people", "d": "10/2012"}, {"body": "vote favor opting bb router parse query strings similar manner plugin passing parsequery true would cause bb parse query strings would keep backwards compatibility know would love ability thoughts", "d": "10/2012"}, {"body": "hswolff nt think parsing search params business backbone get routing search parameters semantically modifiers probably nt used use route handlers concern orthogonal best left plugin", "d": "10/2012"}, {"body": "appears current behaviour broken assume route running pushstate enabled trigger route workaround create second route triggers callback passes search params testing today seems latest code master changes behaviour triggers first route called presumably stripping search parameters parsing url however called nt trigger need add second route passed search parameters additionally observed following whether decision made ignore search parameters completely seems current behaviour inconsistent best", "d": "10/2012"}, {"body": "know thread fairly old closed solution thought may help anyone looking accomplish rewrite method create router force trailing slash option adding regex additionally would like route also case insensitive also place adding attribute return value javascript routetoregexp function route var namedparam wg var splatparam wg var escaperegexp g note method exact copy one default backbone library moved variables function", "d": "10/2012"}, {"body": "joshpangell support optional groups added following", "d": "10/2012"}, {"body": "would great core", "d": "10/2012"}, {"body": "response shesek comment actually better", "d": "10/2012"}, {"body": "zawaideh agree good solution except needs still return", "d": "10/2012"}, {"body": "like detect dead links either inside application external source application adds routes arbitrary times like callback route matches could event router listen", "d": "10/2012"}, {"body": "currently achiving adding following catchall route end routes router invalidroute showerrorpage", "d": "10/2012"}, {"body": "love clear time routes added might suffice workaround reset routes added spawn problems later much nicer would get callback route matches pretty please", "d": "10/2012"}, {"body": "also patch trigger whatever events like instance", "d": "10/2012"}, {"body": "um schrieb brad dunbar also patch trigger whatever events like instance good point thats probably still feel functionality supported framework monkeypatching reliable way regards martin", "d": "10/2012"}, {"body": "right altering ideal included could use custom history like following history api rather stable relying behavior fine idea write patch", "d": "10/2012"}, {"body": "added", "d": "10/2012"}, {"body": "since lot tiny backbone extension use big tripping point hash manipulating subview also changes original view backbone fails hard example original view helper means nt worry making function", "d": "10/2012"}, {"body": "would useful jashkenas backbone viewmodelcollection paradigm makes quick easy devs write complex stateful apps ends happening happened company new product time one discovers memory leaks abundance listeners attached model collection nested view ref parent view nt necessarily gced even parent view dom elements removed makes extremely difficult work solution builtin way track references even way track viewsmodelscollections added context view traverse array removing parent views listeners would spectacular", "d": "10/2012"}, {"body": "mjefferson view dispose recently added backbone think lays pretty good groundwork view disposal conventions check discussion topic disposing child views probably something backbone dictate easy enough provide semantics", "d": "10/2012"}, {"body": "think would happen output data backbone would output part site seoizable form idea", "d": "10/2012"}, {"body": "created service beta allows easily allow seo automatically generates sitemapxml backbonejs single page apps", "d": "10/2012"}]