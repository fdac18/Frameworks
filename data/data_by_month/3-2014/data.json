[{"title": "give key warning top level", "body": "right nt also nt composite components", "num": "1333", "d": "3/2014"}, {"title": "nt give key warning rendering static markup", "body": "huge deal bit silly since markup wo nt mounted", "num": "1331", "d": "3/2014"}, {"title": "csstransitiongroup buggy due transition events firing reliably", "body": "trying convince react replace dom nodes inplace seems supported discovered something looks like bugs put demo first node gets replaced animation progressing removed demo means additional lines created soon animation completes node usually goes away second feature leave demo running change another tab wait seconds change back tab demo running accumulated lots green items basically stuck meaning animation completed removed dom", "num": "1326", "d": "3/2014"}, {"title": "obscure domchildrenoperations error missing tbody", "body": "attached code causes error message read property parentnode undefined domchildrenoperationsprocessupdates described different reason time react tries remove table second child ca nt find since replaced tbody nt expect good fix truly fixing tbody problem giving warning filing posterity thanks marknijhof providing version test case js jsx reactdom var hello reactcreateclass render function return thispropsvalue reactrendercomponent documentbody reactrendercomponent documentbody live demo", "num": "1323", "d": "3/2014"}, {"title": "react updating style attribute firefox", "body": "ran following issue using linear gradient background image element dynamically updating gradient seem work firefox running style attribute dom node get updated works fine chromium though code snippet play around working example", "num": "1316", "d": "3/2014"}, {"title": "react developer tools breaks natural scroll mac os x", "body": "activate react developer tools breaks natural scroll source code chrome developer tools mac os x chrome react developer tools download activate react developer tools inspect page source sources use two finger track pad scrolling expecting scroll direction natural scrolls reverse direction deactivate react developer tools scrolls natural direction really annoying makes extension activated impossible normal development", "num": "1315", "d": "3/2014"}, {"title": "immutable tests fail chrome using", "body": "seems like jasmine cycle detection tacking property thus nt work properly frozen objects fails chrome cc kmeht", "num": "1314", "d": "3/2014"}, {"title": "allow children traversed even created using render", "body": "seems undefined component children defined front instead defined parent component rendering request component mounted always contain valid representation component children use case allow deep iteration child components without worry components defined children specific example would find nested components input fields set data backbone model note realize might say components set model values input fields changed need deep traversal ideally nt want actually update model data form completely filled", "num": "1312", "d": "3/2014"}, {"title": "make possible render amp replace nodes", "body": "come bunch might time", "num": "1311", "d": "3/2014"}, {"title": "trigger animations component mount needed", "body": "current animations triggered changes occured component cases need launch animation component mount add code componentdidmount function thispropstransitionimmediately var nextchildmapping thisstatechildren var key pass would launch animation", "num": "1304", "d": "3/2014"}, {"title": "make reactcreateclass warnthrow mixins contains undefined value", "body": "code could result typo mixin name attempt use mixin module mistakte would nice react warnthrow condition", "num": "1302", "d": "3/2014"}, {"title": "react tracks scroll position internally forces synchronous layout", "body": "react adds scroll listener tracks caches scroll position assume undocumented internal purpose additionally scroll listener forces synchronous layout see screenshot seems wasteful especially considering values tracked never exposed api scroll listener used removed", "num": "1300", "d": "3/2014"}, {"title": "mincer jsx integration", "body": "context franticmincerjsx plugin mincer adds jsx syntax support", "num": "1299", "d": "3/2014"}, {"title": "support svg foreignobject tag", "body": "im seeing error uncaught referenceerror foreignobject defined", "num": "1298", "d": "3/2014"}, {"title": "simulatemouseenter simulatemouseleave working", "body": "testing wanted simulate events reason firing handlers component fiddle show see simulate functions click actually triggered ones real events everything works perfectly tried debug little bit going nt get much information especially since first time diving events mechanism internals react want info try dig bit deeper think fiddle clear enough", "num": "1297", "d": "3/2014"}, {"title": "rendercomponenttostaticmarkup vs rendercomponenttostring", "body": "please give example shows difference vs", "num": "1296", "d": "3/2014"}, {"title": "optional type tag components trigger unmounts", "body": "react provides kind type tag om move beyond react react issues warnings development constructor property react component instance function introduce hack starting react order get om components unmount om components backed single react component set constructor property unique string value separate optional type tag could avoid react key satisfactory solution due likelihood collisions given user supplied key", "num": "1295", "d": "3/2014"}, {"title": "build fails jsx normal jsx task warning socket closed", "body": "h githubreact grunt running deletebuildmodules task running jsx normal jsx task warning socket closed use force continue aborted due warnings windows hint", "num": "1292", "d": "3/2014"}, {"title": "comments include lt lessthan sign within jsx always ignored", "body": "place comment includes lt lessthan sign within element jsx errors notice comment right hello expected anything within matter jsx always fully ignored effect render", "num": "1289", "d": "3/2014"}, {"title": "invariant violation setenabled asked report immediately", "body": "trying testutils things breaking node stdout codetests mocha test passing failing test tests render label error invariant violation setenabled toggle event listening worker thread likely bug framework please report immediately invariant objectmergesetenabled reactreconciletransactioneventsuppressioninitialize reactreconciletransactionmixininitializeall reactreconciletransactionmixinperform reactcomponentmixinmountcomponentintonode object objectrendernewrootcomponent objectreactmountrendercomponent objectrendercomponent objectreacttestutilsrenderintodocument context callfn testrunnablerun runnerruntest next next immediateonimmediate processimmediate immediatecallback testjs js module dependencies var react require reactaddons var require var mocha require mocha var jsdom require jsdom var utils reactaddonstestutils initialize variables var document var window initialize jsdom beforeeach function globalwindow jsdomjsdom createwindow globaldocument globalwindowdocument tests describe test tests function display window objects function globalwindowshouldexist globaldocumentshouldexist render label function var label utilsrenderintodocument reactdomlabel null hi packagejson", "num": "1287", "d": "3/2014"}, {"title": "find document jsdom react test utils", "body": "made small test setup try jsdom react running first one passes second one fails detect idea wrong testjs js module dependencies var utils require reacttestutils var require var react require react var mocha require mocha var jsdom require jsdom initialize variables var document var window initialize jsdom beforeeach function document jsdomjsdom window documentcreatewindow tests describe test tests function display window objects function documentshouldexist windowshouldexist render label function var label utilsrenderintodocument packages", "num": "1286", "d": "3/2014"}, {"title": "potential addition complementary tools page reactbacon", "body": "made little library mixin right integrates baconjs react components consideration include complimentary tools page", "num": "1281", "d": "3/2014"}, {"title": "jsx fails resolve deprecated use q instead error", "body": "getting error run jsx happening anybody else something wrong", "num": "1278", "d": "3/2014"}, {"title": "made possible server render without reactrelated markup", "body": "mean", "num": "1277", "d": "3/2014"}, {"title": "reactcsstransitiongroup broken android", "body": "reactcsstransitiongroup nt work properly least android narrowed code finding properties test element object registering handlers despite fact android fires events end transition nt properly detected investigation see safer way detection android seem recall seeing something similar", "num": "1275", "d": "3/2014"}, {"title": "clonewithprops nt transfer key prop", "body": "reason understand shares code method transfer needed using expect prop transferred currently var react require reactaddons var reactcreateclass render function var key key var reactaddonsclonewithprops var assert require assert assertok key assertok undefined", "num": "1274", "d": "3/2014"}, {"title": "wishlist ability disable synthetic event system", "body": "would huge problems caused optionally disabling synthetic event system like option order get responsiveness underpowered machines", "num": "1269", "d": "3/2014"}, {"title": "ca nt pass props object", "body": "pretty annoying see editing compiled version var props href thispropsanchorhref classname titleclass key thispropsdataattributesitems name data key props name thispropsdataattributesitems key see loop create new attributes compiling jsx nt see possible way", "num": "1266", "d": "3/2014"}, {"title": "error invariant violation reactmount two valid unequal nodes", "body": "tl dr fix load polymerjs first probably related rendered inside unwrapped polymer element child node following error thrown would imagine radio buttons etc would also throw sure actual bug limitation react shadowdompolymer error message exactly helpful determining wrote simple jsbin demonstrates problem", "num": "1263", "d": "3/2014"}, {"title": "context propagate across reactrendercomponent", "body": "really want work", "num": "1260", "d": "3/2014"}, {"title": "stop data aria start using dataset", "body": "dom already exposes transformation hyphenated camelcase mdn john doe var el documentqueryselector user elid user eldatasetid eldatasetuser johndoe eldatasetdateofbirth eldatasetdateofbirth set dob somedataattr eldataset false eldatasetsomedataattr mydata somedataattr eldataset true start supporting camelcase allow couple things easier reasoning data attributes easier merging easier potentially faster updates modify want reverse dom eg becomes best knowledge nt corresponding api make work way think makes sense", "num": "1259", "d": "3/2014"}, {"title": "throw error null falsy values passed event listeners", "body": "null values event listeners fail silently falsy values event listeners fail silently", "num": "1255", "d": "3/2014"}, {"title": "react nt bind wheel touch events document", "body": "react binds touchmove touchstart touchend touchcancel wheel handlers document user tries scroll browser needs execute event handlers ensure eventpreventdefault called means scrolling stall javascript executing chrome fastpath checks whether coordinate touch event happens touch listeners listeners chrome allow scroll happen even main thread blocked javascript bind listeners events directly node requires event handler dispatch event standard react top level event system bubblecapture like everything else visible event plugins", "num": "1254", "d": "3/2014"}, {"title": "iframe contents cause invariant violation", "body": "using server rendering putting seems invariably cause invariant violation ca nt find image related identical cases browser nt aware inner elements however case browsers support iframes actually mutating dom replacing contents document specified attribute", "num": "1253", "d": "3/2014"}, {"title": "noscript contents cause invariant violation", "body": "using server rendering putting seems invariably cause invariant violation ca nt find image believe js enabled browser noscript content looks like cdata worked around using actually set contents html string however ca nt nest components approach", "num": "1252", "d": "3/2014"}, {"title": "stop documentcreateelement tests", "body": "ton places nt exciting task gets exposed lots tests help understanding react core better cc kmeht", "num": "1250", "d": "3/2014"}, {"title": "nt consider forceupdates unmounting error", "body": "came across issue reactbackbone opinion issue react though possible work around implementing imho react let say backbone model event source listen changes changes tend come together adds collections instance nt want rerender know probable new change arrive take naive code add debounce throttle see background unmount component course unbind event listeners however easy way remove throttlled operations still air debounce comes end time triggers throttled forceupdate wonder react would consider forceupdate unmount exceptionerror think warning might warranted nt default behaviour throwing away call perfectly fine otherwise demanding users components either wrap forceupdate safeforceupdate checks ismounted bound events must unbound synchronous would guess nt always possible indeed everyone agrees would willing make pr sounds like something everyone might agree interested backgroundopinions", "num": "1247", "d": "3/2014"}, {"title": "ismounted correct parents componentwillmount", "body": "throws", "num": "1245", "d": "3/2014"}, {"title": "thinking react link goes codefacebookcom", "body": "go click thinking react feel sad", "num": "1238", "d": "3/2014"}, {"title": "whitespace kills svg text", "body": "see note spaces around bar entry make rendered svg text span svg", "num": "1236", "d": "3/2014"}, {"title": "switching dangerouslysetinnerhtml children", "body": "tripped strange error one state component uses html specify children rendering markdown another state uses child components interactive content inner html reduced testcase", "num": "1232", "d": "3/2014"}, {"title": "emacs react", "body": "hi would accept add link webmodeel page webmodeel emacs major mode editing web templates screenshot", "num": "1230", "d": "3/2014"}, {"title": "event handlers different component trees batch together", "body": "right reactupdatesbatchedupdates called reacteventemittermixinjs probably higher reacttopleveleventcallbackjs nested roots updates queued batch", "num": "1227", "d": "3/2014"}, {"title": "add errorstack errors thrown", "body": "hard debug problems happens react nt know problem low information", "num": "1220", "d": "3/2014"}, {"title": "rendercomponenttostring render", "body": "rendercomponent render input field rendercomponenttostring error uncaught typeerror read property firstchild undefined versions react jsxtransformer", "num": "1218", "d": "3/2014"}, {"title": "jsx comments work", "body": "transformed note trailing results syntax error problem seems comma insertion related functions eg see irc discussion findings relevant parts irc discussion", "num": "1216", "d": "3/2014"}, {"title": "add support future custom elements", "body": "would really cool allow view custom elements", "num": "1214", "d": "3/2014"}, {"title": "update lifecycle methods docs specify execution environments methods", "body": "lifecycle method documentation clear methods run run server", "num": "1213", "d": "3/2014"}, {"title": "packaging issue", "body": "installed using npm following tried require react get object contains function named seems incorrect missing something thanks", "num": "1212", "d": "3/2014"}, {"title": "ismounted usage rendercomponent", "body": "usage ismounted reactrendercomponent results invalid access methods one often used outside component guard access methods really antipattern like described understand comes methods ismounted case", "num": "1205", "d": "3/2014"}, {"title": "proptypesoneoftype return chainable validator object", "body": "example reactproptypesoneoftype reactproptypesobject reactproptypesstring isrequired lt undefined", "num": "1202", "d": "3/2014"}, {"body": "makes sense nt realize attributes like", "d": "3/2014"}, {"body": "example js jsx reactdom reactrendercomponent documentbody actually happens nt provide key warnings toplevel components right seems like may well less useful without owner info", "d": "3/2014"}, {"body": "pain currently set warning happens descriptor created mounted seems want check sometime mounting anyway could imagine composite component like andreypopp router nt care order children never mounted", "d": "3/2014"}, {"body": "fwiw also tried adding leave transitions well try stop whatever animation progress tested animation repeating original transition setting opaque value set final value animation seem stop", "d": "3/2014"}, {"body": "spent time debugging part leaving tab cumming back due probably firing page visibility false actually something believe handle many items actually bug caused transition duration low level documentation explicit holding element callback fired hand bind example transitionenter takes seconds animation fire mutation block second expected overlap bit hard understand working proposal fix current model also focused performance blocking behavior removed scoped types transitions may cause lot dom manipulation experimenting bit see find sweet spot curious opinion someone core team", "d": "3/2014"}, {"body": "details tab switching problem error removing elements seems happen firefox safari chrome fine timeout warnings fire browsers chrome still triggers animationend event although delayed", "d": "3/2014"}, {"body": "style property names must camecased", "d": "3/2014"}, {"body": "thank kind confusing required chromium", "d": "3/2014"}, {"body": "chromium think historically webkit actually deviate spec add hyphenated versions style object", "d": "3/2014"}, {"body": "planning add warning", "d": "3/2014"}, {"body": "filed devtools repo let move discussion", "d": "3/2014"}, {"body": "quite sure mean could provide code sample", "d": "3/2014"}, {"body": "sorry small example demonstrate point although nt really fully demonstrate use case happy create appropriate example require", "d": "3/2014"}, {"body": "see want traverse output render function quite different input could anything different props except little bit sugar creating components hard say sure without specific example may want use refs allow grab reference mounted child component need mailing list thread might also interesting", "d": "3/2014"}, {"body": "thanks spicyj helpful nt aware refs", "d": "3/2014"}, {"body": "experimenting using react render editor views atom trying make atom agnostic possible comes view frameworks shooting simple standard views assume views expose property toplevel dom element view could missing important details would great able create detached component instance request root element attach element wherever react component would look pretty much like view perspective rest system would object property", "d": "3/2014"}, {"body": "might make sense wait sebmarkbage invertedcontrol stuff", "d": "3/2014"}, {"body": "viewportmetrics used normalize pagex pagey mouse events syntheticmouseeventjs perhaps ironically created prevent synchronous layouts mouse event handlers", "d": "3/2014"}, {"body": "yeah unfortunately mouseentermouseleave nt get simulated properly moment due unique bubbling situation biggest blocker picking good api think maybe", "d": "3/2014"}, {"body": "easily experiment node interactive repl node var react require react reactrendercomponenttostring reactdomdiv reactrendercomponenttostaticmarkup reactdomdiv note absence attributes using", "d": "3/2014"}, {"body": "means client side react mount components server rendered page", "d": "3/2014"}, {"body": "useful want use react render static websites aka nt want react client side means drop datareactid every tag checksum huge saving bytes yes naturally react mount", "d": "3/2014"}, {"body": "shadowfaxenator correct saying react mount components try react blow away dom reuse nodes react uses checksum ids mount intelligently reuse nodes", "d": "3/2014"}, {"body": "issue arises jsx task jsxjs line file files warning socket closed use force continue error socket closed socketwrite dowrite writeorbuffer socketwritablewrite socketwrite objectmoduleexports c object c objectthistaskfn c object c taskruntaskfn c var child spawn cmd binjsxinternal args args function error result code error gruntlogerror error done false else done childstdinwrite jsonstringify configgetconfig looks like spawn child input stream available running node binjsxinternal works however get message saying warning still waiting stdin", "d": "3/2014"}, {"body": "need put around comments", "d": "3/2014"}, {"body": "silly closed", "d": "3/2014"}, {"body": "saw edit wiki instead", "d": "3/2014"}, {"body": "sorribas version running details help repro cc benjamn commoner", "d": "3/2014"}, {"body": "thanks quick reply happened ran like also run file like works run whole directory", "d": "3/2014"}, {"body": "thanks lot report looks like benjamn updated commoner sure update dependency soon pushes npm", "d": "3/2014"}, {"body": "hey guys thanks quick response thanks good work", "d": "3/2014"}, {"body": "aslo encounter problem today", "d": "3/2014"}, {"body": "case still old version dependency installed", "d": "3/2014"}, {"body": "mean need inject params json server side", "d": "3/2014"}, {"body": "simply attributes wo nt appear markup also means resxt ca nt mount nodes clarify bit", "d": "3/2014"}, {"body": "see patch dojo toolkit basically android versions could fixed changing order properties checked checked", "d": "3/2014"}, {"body": "mostly certain intentional forget exactly petehunt", "d": "3/2014"}, {"body": "andreypopp meant right intentional also comment somewhere code explaining remember right makes sense would think common use case would assigning unique key cloned node returning render cases simple copy key", "d": "3/2014"}, {"body": "quite sure mean nt attach events elements nt overhead events system", "d": "3/2014"}, {"body": "jaredly seeing issues synthetic event system may actually help get responsiveness underpowered machines attaching event listeners actual dom nodes expensive", "d": "3/2014"}, {"body": "yeah seeing lag know hack around componentdidmount wondered would possible switch native event handling", "d": "3/2014"}, {"body": "jaredly seeing lag goes away use native event handling interested seeing test case shows", "d": "3/2014"}, {"body": "step use really underpowered netbook yeah put together test page", "d": "3/2014"}, {"body": "problem probably exacerbated keydown change state rerender update dom loop bound input elements", "d": "3/2014"}, {"body": "input related problem see issues click handlers suspect nt", "d": "3/2014"}, {"body": "noticed inputs", "d": "3/2014"}, {"body": "nt onmousemove handlers moment would nt surprised issues well", "d": "3/2014"}, {"body": "click handlers nt generate enough events bottleneck", "d": "3/2014"}, {"body": "jaredly also issue inputs", "d": "3/2014"}, {"body": "issue would solve", "d": "3/2014"}, {"body": "concern specifically case close", "d": "3/2014"}, {"body": "additional toying polymer react ran bug straightforward example jsbin react component simply toggles css class state changes due mouse click css class added properly first click toggled removing css class throws error", "d": "3/2014"}, {"body": "definitely something weird going error message accurate though generally difficult guess framework level root source problem seen errors like past typically used client code make copies reactgenerated nodes also copying attribute supposed unique brief investigation nt point time", "d": "3/2014"}, {"body": "actually get different error firefox trying get node event repro chrome though", "d": "3/2014"}, {"body": "let rephrase sure error explicit someone intimately familiar react trying like running brick wall smile besides point issue nt error messaging sounds like may issue polymer shadowdom polyfill tried playing bit believe able get work ing light dom node react component rendered sounds like polymer function wraps dom api methods interacting shadow lightdom since react using somewhere ing root element sounds like polymer react disagreed tree look like removing explicit exposes polymer version react starts playing nicely curious thing felt necessary add first place pretty sure react complaining light dom node right nodetype made couple changes rendering loop meantime may eliminated issue thank looking since jsbin seems working well application going go ahead close hope learned something new", "d": "3/2014"}, {"body": "story consistent findings failing something like sounds like one shadowdom wrappers talking", "d": "3/2014"}, {"body": "using polymer shadow dom polyfill never see raw dom nodes either bug one known limitations would useful know got reference node", "d": "3/2014"}, {"body": "arv react creates nodes setting unless polymer hooking setter might one way raw dom nodes get exposed", "d": "3/2014"}, {"body": "wrap innerhtml accessors buggy implementation webkit blink reason need wrap everything known limitations accessors", "d": "3/2014"}, {"body": "window document since non configurable webkit", "d": "3/2014"}, {"body": "arv indeed getting wrapped nodes ran issue rendering react component inside one solution time unwrap polyfilled node reference use react seemed fix problem initially ran issue turns passing unwrapped node react bad idea works fine without think root cause initial issue due misuse react rendering api believe calling upstream update instead using everything actually works fine smile figure possible use react render polymer elements", "d": "3/2014"}, {"body": "easy polymer elements custom elements createelement innerhtml etc work", "d": "3/2014"}, {"body": "hate ran reason added rendering loop rendering react component inside polymer element using light dom node root node react component works fine need conditionally render child node error thrown get around passing react unwrapped node lose ability toggle css classes interact form elements error thrown unfortunately trouble reproducing exact behavior jsbin spend much time anyone think losing battle reason assume react compatible polymer vice versa", "d": "3/2014"}, {"body": "ok created mother test cases creates four react components regular form css class toggler table row appendremoveer list item appendremoveer renders components following ways inside polymer element unwrapped light dom node inside polymer element wrapped light dom node inside plain dom element variety seems exhibit different behavior items note class toggler fails respond passed wrapped dom node maybe polymer polyfill things events sure oddly enough nt seem see nontrivial application pure react dom renderings fail work properly polymer polyfill included page commenting polymer polyfill framework custom element definitions allow pure react components work expected imagine due polyfill wrapping dom nodes whether want using instance causes react throw error sure go mentioned unclear react work compatible polymer polymer work compatible react really bad idea drop wait polymer mature would also interesting see mozilla xtag polyfill exhibits behavior already months late project time investigate path perhaps vjeux insight based blog post", "d": "3/2014"}, {"body": "react need anything polymer court take look next week back vacation", "d": "3/2014"}, {"body": "arv fantastic thanks much reopen issue polymerpolymer", "d": "3/2014"}, {"body": "prototyped using xtag afternoon seemed work nt thoroughly test case question reactpolymer interoperate definitively yes make easy possible embed react component inside polymer components visversa nt enough context actual bug make internals react polymer friendly generally happy", "d": "3/2014"}, {"body": "vjeux think problem actually polymer creating jsfiddle mentioned earlier looks like mere presence polymer polyfill prevents react working element arv mentioned issue polymer court assume take lead investigation guess guys stand polymer team chance look thanks taking look beers", "d": "3/2014"}, {"body": "dlindahl got working using polymer making sure polymerplatformjs comes react ensure consistent view wrappers page remove manual unwrapping", "d": "3/2014"}, {"body": "arv sparklingheart fantastic worth documenting order dependency either two projects additional work added either project remove dependency", "d": "3/2014"}, {"body": "polymer documents note due nature polyfills maximize compatibility libraries make sure platformjs first script tag document", "d": "3/2014"}, {"body": "polyfills would cause problem polymer aware others maybe others say update error message include note polyfills nt think probably polymer job message", "d": "3/2014"}, {"body": "think onus us polymer polyfills need control whole world mar pm pete hunt notifications githubcom wrote polyfills would cause problem polymer aware others maybe others say update error message include note polyfills nt think probably polymer job message reply email directly view github", "d": "3/2014"}, {"body": "arv since errors caused including first dramatic confusing could make note polymer docs bit assertive since longer issue closing issue", "d": "3/2014"}, {"body": "would great currently use app avoid explicitly passing core application objects", "d": "3/2014"}, {"body": "cool take look week", "d": "3/2014"}, {"body": "afraid behavior intentional write things like onchange isenabled amp amp thishandlechange nt think going change", "d": "3/2014"}, {"body": "explains falsey part failing silently null value passing null values event listeners least warned", "d": "3/2014"}, {"body": "similarly could write something along lines felt like helpful behavior convenient falsey handlers ignored like nt render anything included element children", "d": "3/2014"}, {"body": "right thought standardizing boolean instead works fine maybe worth breaking change tripped couple times someone changes method name typo etc", "d": "3/2014"}, {"body": "personally find much weirder ignored nt surprise null props consistently assume equivalent specifying prop like merging result getdefaultprops would definitely change treat invalid", "d": "3/2014"}, {"body": "would also definitely fix initializetouchevents problem nt know perf impacts bubbling document though", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "anyone picking one otherwise would like give go", "d": "3/2014"}, {"body": "would also fix problem arguably bug unexpected undesirable", "d": "3/2014"}, {"body": "sanderspies exactly mind", "d": "3/2014"}, {"body": "petehunt great potential scenario seeing elements listeners level event types one event listener child element listens event parent element guess always want use parent element lifetime dom changes therefore also element needs listen would imply would also need removeadd event listeners fly sure already thinking adding something like bindlocally event plugins level like ontouchmove bindlocally true phasedregistrationnames bubbled keyof ondragover true captured keyof ondragovercapture true good idea bad idea missing stuff", "d": "3/2014"}, {"body": "really function topleveltype event wrote naming might clearer right nt believe ever remove listeners", "d": "3/2014"}, {"body": "spicyj wrote code bit hastily guess touchmove also notice ondragover ondragovercapture forgot correct", "d": "3/2014"}, {"body": "maybe best solution component want render people without js", "d": "3/2014"}, {"body": "make noscript automatically sort like existing wrappers input select textarea want take crack", "d": "3/2014"}, {"body": "sure try get pr soon", "d": "3/2014"}, {"body": "sebmarkbage codmod coming touches bunch nt jump quite yet", "d": "3/2014"}, {"body": "okay keep posted manually fix callsites slip codemod", "d": "3/2014"}, {"body": "codemod nt actually fixing touching code around would merge hell", "d": "3/2014"}, {"body": "really recommended general approach updating components stops using perhaps always reading data directly backbone", "d": "3/2014"}, {"body": "yes reading directly backbone render username changes course could use setstate something like use state seems exactly forceupdate misinterpreting understood ok call forceupdate indicate component dirty sense state outside thisstate changed understand ways use react considering using immutable collections obvious transfer backbone models however backbone react still seems advisable choice sense seems defacto reactbeginners advice think supported especially interested advantage considering error see indicate issue nt see ever really would problem", "d": "3/2014"}, {"body": "ah might make sense yes really familiar backbone ca nt say better way ultimately want pass relevant data props perhaps option viewpoint say makes sense naming perspective though current behavior seems correct unmounted component means telling update nt exist mounting component simply means nothing visual update able update state still makes sense say suggesting wrong current behavior seems line naming convention least also could consider using mixin could define whatever makes sense avoiding weird globals someone involved project decide ofc", "d": "3/2014"}, {"body": "nt setstate throw unmounted instance", "d": "3/2014"}, {"body": "spicyj yeah right distinctly remember case apparently however called mounting", "d": "3/2014"}, {"body": "see setting something mounting always considered error think unmounting considered warning though though imagine implementing might easier consider warning", "d": "3/2014"}, {"body": "working link wanted read", "d": "3/2014"}, {"body": "tnx op mrt schreef andreas svensson notifications githubcom real link wanted read reply email directly view github", "d": "3/2014"}, {"body": "currently flaw sorts react used get around issue able create separate textnodes innerhmtl able provide kind identification number different levels could attacked spicyj sumitted pr believe concatenated adjancent string children rejected broke determinism children array something like seems someone finds important enough fix solution would concatenate adjacent strings rendering likely nt easy sounds case simply put everything inside braces", "d": "3/2014"}, {"body": "case nt much really wanted output padded space got second case trying make code pretty promptly fell trap", "d": "3/2014"}, {"body": "fwiw putting onto new line gets parsed would expect awkward balance svg definitely makes trickier check", "d": "3/2014"}, {"body": "happens empty kcarnold may good know afaik recommended way dealing children etc", "d": "3/2014"}, {"body": "empty nt get exception first child element goes missing use way recommend prefer get warning eg", "d": "3/2014"}, {"body": "thanks reporting verified nt fix even though fixes another bug produces error message", "d": "3/2014"}, {"body": "happens enqueue removal children set html queued removal happens queue processed element missing confuses react queue innerhtml set well fixed kcarnold workaround bug assign different prop div react create new element instead reusing existing one", "d": "3/2014"}, {"body": "definitely want open pr need end signing cla merge feel free preemptively", "d": "3/2014"}, {"body": "sidenote details state dom batching seems like rafbatching something intend make default soon future would take care batching state dom updates believe future", "d": "3/2014"}, {"body": "yeah going figure pending state works believe still want flush updates within event loop though change still helpful", "d": "3/2014"}, {"body": "guess improved", "d": "3/2014"}, {"body": "yep errors longer rethrown react quite rediculous messes errors many browsers", "d": "3/2014"}, {"body": "feel free reopentweak issue would help top recent norethrowing improvements", "d": "3/2014"}, {"body": "already work fine master", "d": "3/2014"}, {"body": "root issue specialcase jsx apparently take account easy fix also look adding feel able easily comment code edit wrong specialcase handled correctly pr shortly", "d": "3/2014"}, {"body": "would nice created pr prepare ground discussion", "d": "3/2014"}, {"body": "thumbsup", "d": "3/2014"}, {"body": "gnijor task", "d": "3/2014"}, {"body": "pull request coming soon", "d": "3/2014"}, {"body": "actually never mind seems working thanks", "d": "3/2014"}, {"body": "sounds like got reacttools mistake way final drop", "d": "3/2014"}, {"body": "makes sense reason getting ridiculously large file sizes last night browserify gzip lightweight components around maybe minification help bit thanks", "d": "3/2014"}, {"body": "wrong react promoting virtual components instances implementation detail opinion nt rely may change also gist refers methods defined component longer available class need use", "d": "3/2014"}, {"body": "issue describing reasons behind decisions take better grasp", "d": "3/2014"}, {"body": "inside component two different things creates virtual component basically shell containing class props tells react want dom look like rendering done return verbal description expected output physical instances instances components react created physically exist basically think", "d": "3/2014"}, {"body": "thank clarification kind assuming instance use ismounted method inside component conclude used inside component life cycle componentdidmount componentwillunmount means ismounted always return true point method", "d": "3/2014"}, {"body": "component unmounted possible instance still accessible reference saved case ismounted return false", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "hllau easy fix want try fix submit pull request", "d": "3/2014"}, {"body": "vjeux sure want try contribute let", "d": "3/2014"}, {"body": "solved problem looks like setting parent first example hence wo nt render properly set parent element work", "d": "3/2014"}, {"body": "solved used window namespace", "d": "3/2014"}, {"body": "related perhaps", "d": "3/2014"}, {"body": "still working actually duplicate adding elements intended clickable still leastoffensive workaround", "d": "3/2014"}, {"body": "forget ive moved nt want ask bower redirect repo cheers", "d": "3/2014"}, {"body": "another problem warning specific reason allow onkeyup onkeydown instead onchange value depending state component want intercept keycodes change also want blinking cursor readonly option workaround use empty function onchange would nice avoid", "d": "3/2014"}, {"body": "evernight helpful warning wrong yes annoying ca nt squelched end burrying actually important warnings generally annoyance", "d": "3/2014"}, {"body": "evernight post simple example code looks like nt impression listening keydownkeyup work controlled components way would want react someone paste text move around using mouse etc way nt cause key events", "d": "3/2014"}, {"body": "syranide yeah nicer warnings especially runtime probably nt spicyj behaves exactly want exactly sure ignores mouse events though", "d": "3/2014"}, {"body": "evernight mean ignores mouse events strange case write suppress warning", "d": "3/2014"}, {"body": "spicyj mean ca nt move text around pastedelete text using mouse probably debugging would explain current behavior suits needs maybe case typical indeed still use empty function workaround", "d": "3/2014"}, {"body": "evernight yes handling onchange sounds like might want uncontrolled component see", "d": "3/2014"}, {"body": "still seeing error even inputs catch component rendered inside unwrapped polymer element sure bug react entirely unclear resolve problem anyone help nudge right direction", "d": "3/2014"}, {"body": "dlindahl post minimal jsbin jsfiddle showing problem new issue", "d": "3/2014"}, {"body": "spicyj done", "d": "3/2014"}, {"body": "discovered disable using reactminjs using proptype validation done need disable guard proptype validation", "d": "3/2014"}, {"body": "react nt problem guard either version development unminified reactjs production reactminjs former helpful warnings latter extra performance optimizations", "d": "3/2014"}, {"body": "fixed master", "d": "3/2014"}, {"body": "thomasboyt thanks tracking issue trying update react jsxrequirejsplugin puzzled disable manually modified jsxrequirejsplugin provides", "d": "3/2014"}, {"body": "works invalid version error node version npm v npm install react error reactify", "d": "3/2014"}, {"body": "guess parsing changed parsed fine fwiw npm year old would suggest updating guess could actually publish version numbers differently", "d": "3/2014"}, {"body": "trouble mrjoes shim believe underscores used following shim pulled javascript functionprototypebind var empty function functionprototypebind function bind length var target typeof target function throw new typeerror functionprototypebind called incompatible target var args arrayprototypeslicecall arguments normal call var binder function instanceof bound var result targetapply argsconcat arrayprototypeslicecall arguments object result result return result return else return targetapply argsconcat arrayprototypeslicecall arguments var boundlength mathmax targetlength argslength var boundargs var lt boundlength boundargspush var bound function binder return function boundargsjoin return binderapply arguments binder", "d": "3/2014"}, {"body": "would like well use case generally constructing object beforehand", "d": "3/2014"}, {"body": "syranide believe even part spec jsx modeled", "d": "3/2014"}, {"body": "jordwalke sure nt think like proposal discourages mutation initialization way build props ideally disallowed prop warnings issued earlier downside prevents us moving towards named arguments exploded arguments model instead passing props object", "d": "3/2014"}, {"body": "one first things struggled started experimenting react pass object sub component using jsx", "d": "3/2014"}, {"body": "going post request inline converter jsx raw js throughout online docs issue seems related find api tidy completely forgone jsx code source readable online docs require mental conversion seems silly affordance online docs convert jsx snippet js mental conversions would unnecessary would affordance bring issue close minimal grief missing something", "d": "3/2014"}, {"body": "remove since proptypes longer throws suppresses warning cpojer", "d": "3/2014"}, {"body": "oneoftype still needs skip warning", "d": "3/2014"}, {"body": "links helpful thanks sharing would great see full blown example react events tooltips hover current examples found appear static outputs event handlers", "d": "3/2014"}, {"body": "fdecampredon thanks work", "d": "3/2014"}, {"body": "explain link one solves finding exactly issues described", "d": "3/2014"}, {"body": "ran imo surprising behavior adding virtual dom nt result script evaluation would example created fiddle demonstrate issue based thread seems like expecteddesired", "d": "3/2014"}, {"body": "matthewwithanm say little use case think like least surprising thing hard know guess behavior would surprising way", "d": "3/2014"}, {"body": "one way handle nonmethod properties classes etc would use speculative annotations angular planning use might end w something like js import reactcomponent reactreactcomponent import withmixins propvalidate reactutil import props reactprops import mymixin appcomponentsmymixin var props myprop propsfnisrequired withmixins mymixin propvalidate props class component extends reactcomponent course wo nt actually table introducing required build step syntax whether traceur version sweetjs macro etc devs would like optout step could either stick maybe use syntax original snippet showed eg js class component extends reactcomponent componentaddmixins mymixin componentpropvalidate props", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "actually sure whether end transition achievable think say specific ends currently ends transition within element ends opinion bug even fixed end first transition let say first transition visibility color instance think anything beyond might crazy cornercases personally nt problem handled incomplete documented well nt supported", "d": "3/2014"}, {"body": "still undocumented purpose", "d": "3/2014"}, {"body": "yes need add project cleaning context make sure usable", "d": "3/2014"}, {"body": "chrome beta firefox change nt fire dragging mouseup listen input", "d": "3/2014"}, {"body": "happens windows bit well tried wolverex suggestion installing mingw added c mingwbin c path restarted still luck basic command fallback using virtual machine pretty heavy weight", "d": "3/2014"}, {"body": "try using command instead let know works", "d": "3/2014"}, {"body": "installs via npm jsxc nt recognized command last snippet output jsxc nodemodulesjsxc mkdirp chokidar optimist wordwrap minimist glob inherits minimatch reacttools esprimafb jstransform co mmoner tried jsxc nt recognize well full path c recognized inte rnal external command operable program batch file", "d": "3/2014"}, {"body": "sorry work", "d": "3/2014"}, {"body": "safe side guys issues make doubly sure git set wrong lineendings settings got messed used instead basically broke everything extremely weird ways including errors like", "d": "3/2014"}, {"body": "petehunt thanks npm install g jsxc worked like charm yip", "d": "3/2014"}, {"body": "feel would real use cases data visualizations computations get heavy datasets large api even convention cache computations would nice also asked stackoverflow", "d": "3/2014"}, {"body": "epeli could nt use general purpose memoizer nt necessarily need baked framework right", "d": "3/2014"}, {"body": "two separate issues allowing people easily produce components corresponding nonstandard tags making knows things given projectcodebase someone nt use jsx likely never addressing former simply exporting would big immediate win may others position well latter issue surely challenging tackled later deemed worthwhile", "d": "3/2014"}, {"body": "non javascriptfirst implementation would nt require changes facebookesprima", "d": "3/2014"}, {"body": "check", "d": "3/2014"}, {"title": "textarea amp bindings compile", "body": "similar issue looks like vue changes node value textarea text value binding changed inside compilation occured compiler works great data value already present vm dynamic example see compile value correctly", "num": "215", "d": "3/2014"}, {"title": "force recomputation computed property", "body": "way force recomputation computed property none values property depends changed computed property depends model data well current time value computation changes time like force recomputation interval capture time dependency right using value root vm toggled interval dummy dependency computed property works seems like better solution", "num": "214", "d": "3/2014"}, {"title": "problem vrepeat remove", "body": "hi found problem vrepeat remove items list set value removed item frame item reappear list linked view see fiddle real example newvalue visible items list removed nb really appreciate library good job edit replace gist fidlle", "num": "213", "d": "3/2014"}, {"title": "using new date data", "body": "hi use date object inside data declare new date date object converted empty object template try write formatdate filter throws uncaught typeerror object method getdate", "num": "212", "d": "3/2014"}, {"title": "repeat numeric range", "body": "directive repeats array object uses simple number generator angularjs handy paginators etc call range fairly new vue might overlooked", "num": "211", "d": "3/2014"}, {"title": "accessing content insertion via js translated data", "body": "first loving working vue really appreciate clean design great documentation one thing working like build ui components configured data either via markup content insertion points via data constructor way get access passed content js similar content insertion data tempalte could use query selectors mine passed dom translate data thoughts approach", "num": "210", "d": "3/2014"}, {"title": "data update", "body": "better practice get result fiddle", "num": "209", "d": "3/2014"}, {"title": "definitelytyped definition typescript nuget package", "body": "would encourage provide definition file like found definitelytyped repository enable typescript integration plus would awesome find vuejs nuget package manager visualstudio", "num": "208", "d": "3/2014"}, {"title": "routing demo issue", "body": "replaced following code home page nt show ca nt used child components thanks", "num": "207", "d": "3/2014"}, {"title": "directive parse expression", "body": "hi directive following expression directive changing nt update vm way parse expression access", "num": "206", "d": "3/2014"}, {"title": "documentation change sortby orderby", "body": "orderby docs currently says believe follows html name html name happy pr docs somewhere", "num": "205", "d": "3/2014"}, {"title": "bootstrap vue components", "body": "experiment wrap bootstrap widgets using vue requirejs first thank sweet library combines things love angular polymer knockout things noticed working nt see combine imperative declarative api one app using data smooth way example would work knockout except using controlsdescendantbindings true components overlapping would support formatted strings properties instead computed property like could tips time appreciated anyway keep good work", "num": "204", "d": "3/2014"}, {"title": "filterby multiple keys", "body": "possible", "num": "203", "d": "3/2014"}, {"title": "vmodel von input", "body": "looks like event callback defined von directive executed vmodel directive updates viewmodel give look console logging old value would nice vchange directive like angular ngchange relies watcher ngmodel instead event", "num": "202", "d": "3/2014"}, {"title": "von call method multiple parameters", "body": "using directive way fails parse expression think thinks comma marks beginning new eventbound method like code problems replicating fiddle console output", "num": "201", "d": "3/2014"}, {"title": "typo image slider component example", "body": "hey could nt find site source typo image slider component example example mainly showcases speccompliant insertion points implmentation", "num": "200", "d": "3/2014"}, {"title": "add vue jsdelivr", "body": "would awesome vue available jsdelivr cdn run mozilla could keep uptodate give thumbs would like handle question would would prefer added vue vuejs vuejs", "num": "199", "d": "3/2014"}, {"title": "input loses focus update vrepeat", "body": "try typing one two inputs", "num": "198", "d": "3/2014"}, {"title": "attributes without value", "body": "handle attributes without value like disabled checked", "num": "197", "d": "3/2014"}, {"title": "error browserify", "body": "", "num": "196", "d": "3/2014"}, {"title": "variable filter class attribute removes class attribute", "body": "following code would expect vue inject type string like using however including filter vue remove attribute altogether also variable existing classes like vue throw place variable existing classes throw ideas pulled latest release still happens", "num": "195", "d": "3/2014"}, {"title": "using vm watch array trigger elements change inside array", "body": "basically title says watch array using vm watch changing elements array trigger watch using small jsfiddle", "num": "194", "d": "3/2014"}, {"title": "passing events child components main view", "body": "hi evan issue catching events dispatched child components containing view check code tell wrong see nested components rendered correctly also datas injected main view child components right way although events catched main view way thanks sharing work regards f", "num": "193", "d": "3/2014"}, {"title": "browserifying fails error", "body": "browserify jsmainjs gt bundlejs error module config found mainjs looks like var vue require vue", "num": "192", "d": "3/2014"}, {"title": "dom element replace truefalse", "body": "nt really understand replace use custom element like appheader want completely replace component work every case sample replace line replace true wont work throw directive vif used manually instantiated root node warning manage multiple loosely coupled components vue miss something", "num": "191", "d": "3/2014"}, {"title": "partial getting rendered", "body": "use work", "num": "190", "d": "3/2014"}, {"title": "ready callback fired twice", "body": "think bug wanted run seems like soon add vwith vcomponent lifecycle callbacks ready fire twice", "num": "189", "d": "3/2014"}, {"title": "seems broken", "body": "working broken drilling tree works navigating back tree nodes appear directive removed works correctly", "num": "188", "d": "3/2014"}, {"title": "animation element containing", "body": "would nice way animate element containing list ed elements array swapped eg computed array recomputed whole list could animatedeffected whole new list animatedeffected example effectanimation describing vue example could use miss existing way", "num": "185", "d": "3/2014"}, {"title": "dom nodes inside data variables", "body": "future compiler also handle dom node insertion probably isnt thing occur often think would great vue cover wide range use cases", "num": "184", "d": "3/2014"}, {"title": "debugging created binding undefined", "body": "anyone know debug created binding undefined throws exception would cool vue dumps better debug output things", "num": "183", "d": "3/2014"}, {"title": "feature request allow use delimiters apart mustache style", "body": "allow use delimiters apart mustache style like mustache conflicts existing tooling nontrivial modify parse function textparserjs could extra args bindingre triplere default configured via vueconfig options", "num": "179", "d": "3/2014"}, {"title": "data model consistency", "body": "strange example looks like know example quite correct click set null everyone responded see condidtionals bottom still continue think variable null", "num": "178", "d": "3/2014"}, {"title": "folder structure", "body": "hi newbie vuejs looking example vuejs folder structure could give modularization reusable blocks code read documentation word word slow use directives component anyone mind show basic example nutshell project group block code individual folder template css js reuse nest easily anywhere project ps look vuecomponentgulp example still puzzle nest component component reuse freely according example thank", "num": "177", "d": "3/2014"}, {"title": "compiling bindings inside vmodel directive", "body": "would like use vm data inside vmodel directive example second textarea desired result see vmodel directive workaround better way approach also interestingly enough works fine input box textarea one compiling correctly thanks", "num": "176", "d": "3/2014"}, {"title": "improve array diff algorithm", "body": "scenario two arrays objects object associated dom element two arrays sharing objects two arrays different orders shared objects first array associated dom elements already inserted dom reflecting owner objects order array want replace first array second one following requirements update dom inserted elements reflect order objects second array reuse existing objects dom elements incur least amount dom manipulation possible current implementation move every element exactly matter diff performant enough medium sized lists opss could pose problem super large lists", "num": "175", "d": "3/2014"}, {"title": "dead loop texttransform capitalize meets vmodel", "body": "kind like dead loop editing first letter capitalized css may repeat bug editing first letter cases something bypass", "num": "174", "d": "3/2014"}, {"title": "make vif use wrapper vm instead remove node", "body": "could also remove hairy logic make work vrepeat", "num": "173", "d": "3/2014"}, {"title": "parent option vueextend", "body": "", "num": "172", "d": "3/2014"}, {"title": "vif vshow subproperty", "body": "given code html selecteditemtext presence transform object property removing original value intended behavior", "num": "171", "d": "3/2014"}, {"title": "list projects using vue", "body": "list recording projects may learn", "num": "170", "d": "3/2014"}, {"title": "make paramattributes bindable", "body": "would much easier mutationobserver available basically another format", "num": "169", "d": "3/2014"}, {"title": "browserify bower problems", "body": "would like use vue bower browserify problem bower installs include folder requiring unminified version using browserify fails conflicts used vue code would require included ignored bower use minified version would like avoid using bower looks like impossible use unreleased version could move dist files folder publish bower package would still working using bower branch", "num": "168", "d": "3/2014"}, {"title": "parameter user defined filter raw string", "body": "value something appears raw string demo appeared console html button js vuefilter fil function x consolelog x return click see console vm new vue el demo data", "num": "167", "d": "3/2014"}, {"title": "improve code snippet legibility vuejs website", "body": "subjective trouble viewing code snippets vuejsorg website would consider increasing font size code blocks tweaking colors contrast", "num": "166", "d": "3/2014"}, {"title": "builtin vrepeat filters", "body": "filters enable easy filteringsorting vrepeat arrays something like html ideally want include two filters dependency tracking process users nt manually trigger filter evaluation also calls optimization array diffing gt dom manipulation algorithm", "num": "165", "d": "3/2014"}, {"title": "invoking event handler args evokes access event object", "body": "setup like since selectchoice invoked argument value loses access event object result needs stop event propagating ca nt currently solution problem", "num": "164", "d": "3/2014"}, {"title": "idiomatic way dynamically change components", "body": "stripped version want question better idiomatic way without new conditional components capability couple things think wrong less ideal current example creating new viewmodels directive naive directive without regard existing markup element model sent dynamic components hard coded passed components swapped simplistic keep example simple know easier ways switch class think something like would pretty cool work", "num": "163", "d": "3/2014"}, {"title": "stop click event bubbling", "body": "dom tree like jade outside vonclick doout inside vonclick doin clicking triggers despite right way prevent events vue", "num": "161", "d": "3/2014"}, {"title": "browserify problem unminified", "body": "using minified version npm browserify works fine using unminified file vuejs get following error error module config found homejakecodepomodorosrcscriptsvuejs", "num": "160", "d": "3/2014"}, {"title": "dynamically resolve literal directives", "body": "", "num": "159", "d": "3/2014"}, {"title": "persistent bindings objects added repeater array", "body": "add object vrepeat array bindings attached bindings persist intentional crude simplified version problem adding item delete text input box noticed object added array inherited new bindings methods vrepeat directive awesome remove old bindings way destroy old bindings object added repeater array edit updated fiddle link", "num": "158", "d": "3/2014"}, {"title": "components viewmodel instantiation", "body": "components added viewmodel instantiated visible registered find anything docs explicitly mentions need components added create viewmodel big deal might save someone frustration road", "num": "157", "d": "3/2014"}, {"title": "unifysimplify", "body": "let say plugin providing component meant instantiated template want use main vm solutions direct instantiation constructor returned seems verbose unintuitive put constructor variable first still verbose clearer provide specific solution plugin clearer appjs proprietary api adds lot cruft pluginjs proposed solution please ignore missed already existing mechanism solution could introduce new global method really proposal instantiation purposes reason add parameter constructor would feel weird provide constructor parameter another constructor would allow would also add new syntax classic instantiations could positive effect pleasing people want code matter thanks new considered harmful know stupid reason extendonly plugin api somewhat related question plugin wants provide extended vm without registering component taken consideration plugin api implemented every plugin way want example think", "num": "156", "d": "3/2014"}, {"title": "biased benchmarks vue website", "body": "directly related vue codebase related benchmark vue website page support comments links original webkit benchmark instead version assuming added frameworks instead refactoring test think performance tests much biased vue careless many frameworks precise file revision talking see framework tested differently instance angularjs reactjs uses dom events test functionality many benchmarks calling internals framework instance emberjs example angularjs example clear ember upper hand trying make point framework performance least pay attention methodology could please upload repo performance tests link page code actually available community contribute fix issue", "num": "155", "d": "3/2014"}, {"title": "assigning data objects", "body": "hello situation list data click appear details side div id following nt work order make work following hope easier way takes whole object updates view well", "num": "154", "d": "3/2014"}, {"title": "input model synchronized form reset", "body": "fiddle problem form reset events fired inputs event fired form instead", "num": "153", "d": "3/2014"}, {"body": "date object jsonstyle plain object need store timestamp number", "d": "3/2014"}, {"body": "write custom filter eg", "d": "3/2014"}, {"body": "thing yesterday try hack repeat directive update function collection write template dirty use string finally create method vue using like maybe filter better solution", "d": "3/2014"}, {"body": "ljonathanl thanks snippets went something similar let close think enough input find way", "d": "3/2014"}, {"body": "looks like access via based came following approach read content next step figure instantiate subcomponents may exist panel template consumes via custom vcomponents nt getting rendered", "d": "3/2014"}, {"body": "make fiddle sure trying achieve follow comment", "d": "3/2014"}, {"body": "dwabyick may ask domutilsdirectqueryselectorall googles nothing", "d": "3/2014"}, {"body": "thanks response setup fork vuebrowserifyexample shows roughly trying", "d": "3/2014"}, {"body": "lithiumjake routine made work around fact ca nt easily select direct descendants elementqueryselectorall without knowing element id", "d": "3/2014"}, {"body": "restate problem understand better simply triplestache template bindings dynamically compile vcomponents possible manually invoke compile manually adding content fork vuebrowserifyexample demonstrates fyi reason build components eg tab panel supply content via dom via js constructor", "d": "3/2014"}, {"body": "looks bit better assign target vm choice vm", "d": "3/2014"}, {"body": "thank responded quickly tip", "d": "3/2014"}, {"body": "organisation collaborator definitelytyped would gladly help vue expert yet pool effort created tracking ticket dt note definitions dt repo automatically get pushed nuget plus dedicated cli client ide like webstorm intellij builtin support dt repo big mvcish frameworks popular dt example jquery amp angularjs definitions downloaded crazy numbers", "d": "3/2014"}, {"body": "hmm familiar nugetvisualstudio stuff seen ted patrick typescript definition vue although old version wondering anything date", "d": "3/2014"}, {"body": "nice let hope checks fyi nugetvisualstudio stuff works definition authors nt need anything magic interests contribution guide dt wiki info course case cover", "d": "3/2014"}, {"body": "separate option placed inside", "d": "3/2014"}, {"body": "related expression parsing changing directive nt trigger changes changing anything actual data changing reference directive object fact modify existing properties directive object implement directive sets data back bit tricky need call trigger proper updates one thing note since trigger directive result infinite loop case need something looks like need return early true know looks bit tedious probably provide builtin method rare user land need kind stuff also consider bad practice explicitly modify parent state access parent chain inline expressions probably use pass status object", "d": "3/2014"}, {"body": "works perfectly thanks problem directive applied element inside two apply focus element expression evaluates true boolean value needs set false original parent parent vm order listen set true must apply focus", "d": "3/2014"}, {"body": "check current website docs api filters gt", "d": "3/2014"}, {"body": "thanks wryk closed favour", "d": "3/2014"}, {"body": "jbadeau taken stab simple wrapped component bootstrap well uses component though intention putting effort building bootstrap components needed time allows", "d": "3/2014"}, {"body": "nt really understand imperative vs declarative question saying want use piece data declarativelyused invoked template component use data another imperatively created invoked constructor js component", "d": "3/2014"}, {"body": "question seen examples use hierarchical data model like view set declarative component use subtree data like bind imperative widget component data maybe makes sense trying wrap head around combine styles general would usually use declarative style though", "d": "3/2014"}, {"body": "obsoleter cool man def nt want write customcomponent widgets wrapping existing ui toolkits seems pretty easy", "d": "3/2014"}, {"body": "suppose use data imperatively vuejs data objects observed multiple instances nt necessarily belong vm manytomany relationship", "d": "3/2014"}, {"body": "yes thats though thats wanted know thanx allot fast response", "d": "3/2014"}, {"body": "computed property suggestion think point computed properties allow stuff javascript something better expressed interpolation syntax probably belongs template", "d": "3/2014"}, {"body": "case pipe array custom filter arbitrary filtering", "d": "3/2014"}, {"body": "good idea", "d": "3/2014"}, {"body": "hmm component instances use watcher save specific case save settimeout would also work think even easier way", "d": "3/2014"}, {"body": "haha found actually compiling directives backwards instead loop directives comes gets compiled first reversed order make compile order consistent order appear markup", "d": "3/2014"}, {"body": "yeah fails current regex checks level deep parens come robust one", "d": "3/2014"}, {"body": "meantime suggest putting simple logic inline expressions case seems better use method handler", "d": "3/2014"}, {"body": "yeah using method expect index whole object big deal change works noticed inline expressions limitations example nt possible executed like keep logic inline expressions minimum sometimes useful avoid creating new methods assigning property", "d": "3/2014"}, {"body": "always create new method takes statement limited inline expressions statement purpose want discourage logic templates", "d": "3/2014"}, {"body": "think doable", "d": "3/2014"}, {"body": "curiosity since expressions support subset js function calls ternary operator comparison operators missed would difficult implement csp support", "d": "3/2014"}, {"body": "well happy lightweight dropin parser available parsers generated jison seems pretty bloated nt time write", "d": "3/2014"}, {"body": "implemented robust parser parse directives note parses structure directive expressions csp still supported", "d": "3/2014"}, {"body": "thanks site repo vuejsvuejsorg", "d": "3/2014"}, {"body": "sounds good thanks help seems nt automatic sync yet cdnjs good someone keep date please use name vue keep consistent sources", "d": "3/2014"}, {"body": "okay pr requested close issue either add reject", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "great vuejs could option jsfiddle framework amp extensions", "d": "3/2014"}, {"body": "ah happens identifier looking", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "handle pass boolean", "d": "3/2014"}, {"body": "also along bpierre example simple pass truthy falsy value vue handle check state", "d": "3/2014"}, {"body": "wrong", "d": "3/2014"}, {"body": "nothing forgot include vue", "d": "3/2014"}, {"body": "wow really embarrassing lol sorry wasting time", "d": "3/2014"}, {"body": "worry use url jsfiddle notice missing dot raw github", "d": "3/2014"}, {"body": "using latest browserify fixed bug caused kind error", "d": "3/2014"}, {"body": "good catch seemed fix seeing unknown component undefined app still seems work weird", "d": "3/2014"}, {"body": "ahh using vview initializing undefined", "d": "3/2014"}, {"body": "nevermind fiddle looking thanks catch", "d": "3/2014"}, {"body": "fixed", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "known issue resolved", "d": "3/2014"}, {"body": "hi tried new still ca nt seem get work", "d": "3/2014"}, {"body": "oh thought manipulating object properties inside array trigger change ca nt set index way pick change use extended method see", "d": "3/2014"}, {"body": "cool thanks", "d": "3/2014"}, {"body": "nt directly instantiate components options instead pass constructor extend options compose template like html tags directive", "d": "3/2014"}, {"body": "version browserify using tried seems work", "d": "3/2014"}, {"body": "info using browserify time included file url linked release notes saw failure fix fix cloned repo used install properly everything worked like charm confusion around documentation ca nt add vuejs file project expect browserify work", "d": "3/2014"}, {"body": "oh see browserify static analysis calls unminified built version vue work assumes loaded directly global scope amd environment minified version works calls mangled usage commonjs environment always use source code version", "d": "3/2014"}, {"body": "exactly make sure add docs browserify users", "d": "3/2014"}, {"body": "directives like manages child vms put vm template root node case child vm finds directive instantiated already instead put parent template semantically also clearer applevel logic", "d": "3/2014"}, {"body": "ok thanks", "d": "3/2014"}, {"body": "also tried registering partial vuepartial still problem", "d": "3/2014"}, {"body": "fixed thanks spotting forgot clonenode rewriting vpartial real directive branch updated second jsfiddle working", "d": "3/2014"}, {"body": "confirmed awesome", "d": "3/2014"}, {"body": "tested latest dev branch longer happening thanks reporting", "d": "3/2014"}, {"body": "list anywhere api changes", "d": "3/2014"}, {"body": "repo release notes", "d": "3/2014"}, {"body": "pushed fixes dev branch new vrepeat algorithm nt take async transitions account fixed", "d": "3/2014"}, {"body": "awesome thanks", "d": "3/2014"}, {"body": "nevermind thought way sorry issue spam", "d": "3/2014"}, {"body": "unescaped html use triple mustache see third tip section", "d": "3/2014"}, {"body": "facepalms miss thanks man", "d": "3/2014"}, {"body": "post snippet using likely go away next release completely rewritten", "d": "3/2014"}, {"body": "sorry nt use vwith ah see nt find code", "d": "3/2014"}, {"body": "hmm ok vcomponent somehow uses vwith internally ca nt help much without looking code likely gone", "d": "3/2014"}, {"body": "ok done sample first init start page load second script would rebind", "d": "3/2014"}, {"body": "tested latest build longer produces error something noted probably good idea use compile element twice new version custom element tags must contain hyphen", "d": "3/2014"}, {"body": "compile element twice handle multiple routes replace view found sample thanks", "d": "3/2014"}, {"body": "remoe check example test suite", "d": "3/2014"}, {"body": "know suggested earlier offered solution change source difficult since many earlier projects use notation seems making notation configurable would make vue better citizen existing ecosystem", "d": "3/2014"}, {"body": "landed part syntax", "d": "3/2014"}, {"body": "thanks fast", "d": "3/2014"}, {"body": "clap", "d": "3/2014"}, {"body": "fixed thanks", "d": "3/2014"}, {"body": "moved faq", "d": "3/2014"}, {"body": "also interesting thing noticed inspect broken textarea correct values us still showing double curly braces oo", "d": "3/2014"}, {"body": "interesting issue neat use vue tried getting work breaking component issue think textarea idiosyncrasies correct value see inspector think attribute reason stuck thinking uncompiled text value overwrites compiled text", "d": "3/2014"}, {"body": "awful hack causes compiled textarea content pushed back attribute trigger event update model diff git asrccompilerjs bsrccompilerjs index asrccompilerjs bsrccompilerjs compilerprotocompiletextnode function node var el token directive var el token directive parentnode val compilerprotocompiletextnode function node thisbinddirective directive nodeparentnoderemovechild node parentnode nodeparentnode parentnoderemovechild node val parentnodevalue parentnodetagname textarea utilsnexttick function parentnodevalue val", "d": "3/2014"}, {"body": "fixed", "d": "3/2014"}, {"body": "brandon original example working commit one see", "d": "3/2014"}, {"body": "content inside textarea parsed attribute textarea element nt allow partials documentfragments get around setting though", "d": "3/2014"}, {"body": "clarifies thank", "d": "3/2014"}, {"body": "also related bug vmodel input changes causes reflow interrupting input todomvc example basically order array nt change dom manipulation necessary", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "ahhh never thought fix", "d": "3/2014"}, {"body": "error still ocurring without vuejs", "d": "3/2014"}, {"body": "filipelinhares waaaat", "d": "3/2014"}, {"body": "chrome error without vuejs", "d": "3/2014"}, {"body": "crazy report bug chromium project also firefox content edited first letter longer capitalized", "d": "3/2014"}, {"body": "linked issue chromium issue list closing", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "also believe changing property string object wo nt create getters setter subproperties object right", "d": "3/2014"}, {"body": "intended behavior prevent computed properties throwing errors enable collecting dependency try access properties exist yet swapping string object object recursively observed ie converted gettersetters process changing truly conditional basically starting value falsy things inside simply wo nt compiled somehow resolve problem well", "d": "3/2014"}, {"body": "truly conditional vif landed dev branch nt see reference commit", "d": "3/2014"}, {"body": "dyu", "d": "3/2014"}, {"body": "thanks always", "d": "3/2014"}, {"body": "month think probably nt lot finished ones unforturnately internal projects creative lab using vue public", "d": "3/2014"}, {"body": "open page wiki may add others projects find using vue", "d": "3/2014"}, {"body": "added", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "believe browserify meant used npm bower really use bower maybe could try debowerify", "d": "3/2014"}, {"body": "according bower spec bower packages ship standalone built versions code using browserify go fullnpm instead using bower", "d": "3/2014"}, {"body": "paglias nt need bower using browserify", "d": "3/2014"}, {"body": "like use bower registrer contains lot client side libraries nt avalaible npm would like avoid using two different package managers client side dependencies found useful able use specific commitsbranches library outside released versions indipendently using browserify possible npm bower given current setup would enough expose folder bower", "d": "3/2014"}, {"body": "course nt ask build vue every commit want use unreleased version rely source files compiled", "d": "3/2014"}, {"body": "paglias would better using git clone want access source much better asking developer break conventions two approaches", "d": "3/2014"}, {"body": "kristoferjoseph asking break convention approach ability use specific commit branch documented feature bower suppose found might useful mine suggestion make easier use vue", "d": "3/2014"}, {"body": "checked seems bower longer prefers built versions jquery also shipping bower distribution dev branch includes work setup", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "jiyinyiyong documentation filters states second argument filter function interpolation arguments access viewmodel within filter function need reference get data", "d": "3/2014"}, {"body": "example current version obsoleter jiyinyiyong want mention upcoming changes next version filter arguments passed filter function real arguments instead array would make custom filters easier write obsoleter pointed raw string intended use raw string key access dynamic property using also filter accesses function body marked computed filter directive uses computed filter parsed expression including filters properties accessed filter tracked dependency", "d": "3/2014"}, {"body": "thanks pointing looking forward", "d": "3/2014"}, {"body": "yes think contrast difference monitors tweak legible moved", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "make work objects", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "could something like html click something message get working using dev branch commit see probably way invoke handlers expressions using get event object", "d": "3/2014"}, {"body": "use atm ugly hack elegant able write something like selectchoice e", "d": "3/2014"}, {"body": "get access basically logic needs one expression put method", "d": "3/2014"}, {"body": "every time miss something like think nt remember docs go look course right first paragraph", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "fine create childvms directives long manage well internal directives implemented internal method compiler instances called allows get constructor available current instance example using approach address concern bind remove cache current innerhtml documentfragment instantiating new childvm hook set compler clone cached fragment way leverage outlet normal components note requires use dynamic component directive like basically nt provide inner content wiped away", "d": "3/2014"}, {"body": "bit cumbersome", "d": "3/2014"}, {"body": "dynamically swapping components easy said still possible create pretty robust directive exactly want", "d": "3/2014"}, {"body": "thanks makes lot sense let fix rough edges dynamic component ideas second example gave work something compilation order seems get stuck loop", "d": "3/2014"}, {"body": "got pretty rough implementation accounts gt yield vwith actually swaps outside node", "d": "3/2014"}, {"body": "cool something belongs userland would compare complexity directive others directives built real projects make core vue", "d": "3/2014"}, {"body": "say pretty rare type logic control directives userland think enabling kind dynamic interpolation second example see taking time", "d": "3/2014"}, {"body": "introduced new directive based previous dynamic component test implementation find suitable view control use dynamic component directive checkout updated routing example", "d": "3/2014"}, {"body": "wow cool", "d": "3/2014"}, {"body": "share jsfiddle showing behavior", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "think happens event delegation handlers actually stored root node something like jquery needed", "d": "3/2014"}, {"body": "thanks confirmed working", "d": "3/2014"}, {"body": "vuejs file browserify require srcmainjs vue nodemodules directory", "d": "3/2014"}, {"body": "vuejs file npm moved different directory used require vue pulling nodemodules require vue work", "d": "3/2014"}, {"body": "think problem always dist version reason use", "d": "3/2014"}, {"body": "particular reason closed", "d": "3/2014"}, {"body": "really like idea conditional partials ideas possible syntaxes", "d": "3/2014"}, {"body": "something like", "d": "3/2014"}, {"body": "passing function returns name partial javascript gt somefunc thinking something like might better fit component", "d": "3/2014"}, {"body": "thinking special syntax resolving current literal directives dynamically html", "d": "3/2014"}, {"body": "love", "d": "3/2014"}, {"body": "alternatively allow interpolation inside literal directives html inline existing syntax advantage previous option pass additional inline options although sure actually need", "d": "3/2014"}, {"body": "yesssssssss", "d": "3/2014"}, {"body": "would like input duckbox bpierre obsoleter", "d": "3/2014"}, {"body": "would useful already come across one situation thought would nice dynamically choose component prefer interpolation syntax consistent already also data needs passed simply use two ways thing concepts vuejs users learn special syntax javascript hash directive value unlike anything else key hash arbitrarily special pass additional data component partial concepts vuejs users learn interpolation syntax literal directives interpolated values mustachestyle bindings way used html attributes text", "d": "3/2014"}, {"body": "great dynamic literal mechanism would really helpful think first idea complicated literal would confusing allow additional options prefer second idea looks like know could also lead confusion value update resolution maybe concept onetime binding could reintroduced even performance gain significant could make sense design point view used dynamic literals html", "d": "3/2014"}, {"body": "necessarily onetime resolution admittedly contrived example suppose list data want graph two way binding used would allow easily swap back forth sure could one multiple ways display data former would cleaner", "d": "3/2014"}, {"body": "obsoleter think case may want dynamic directive related literal directives", "d": "3/2014"}, {"body": "bpierre think asking blurs line much dynamic literal directives behind syntax pairs well mustachestyle bindings two way binding literal directives would require lot related functionality outside directive plus dynamic literals resolved would pretty easy build directive userland", "d": "3/2014"}, {"body": "simplicity sake decided stick syntax rule thumb inside literal directives resolved counted individually repeated items", "d": "3/2014"}, {"body": "landed", "d": "3/2014"}, {"body": "work using build dev branch commit", "d": "3/2014"}, {"body": "obsoleter thanks fixed need add tests later", "d": "3/2014"}, {"body": "remove bindings pushing object array reference object still observed main viewmodel push shallow copy object", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "hmm yeah mention basically instantiation compilation assets need registered beforehand", "d": "3/2014"}, {"body": "fact suggest nt even return extended constructor return options plugin app allows user code rename component theoretically required describe component", "d": "3/2014"}, {"body": "yes main concern instantiate extended vm code could replace better register component name still verbose user maybe plugin api vue see proposal provide something simplify instantiation code templates extended vms", "d": "3/2014"}, {"body": "get makes sense think addition could also take optional base class follows convention accepting optional base class rough thoughts need polishing also previous suggestion removing chaining returning registered component also worth considering think part though since going pretty big api change", "d": "3/2014"}, {"body": "maybe try unify single thing", "d": "3/2014"}, {"body": "yes could make sense since terms appears everywhere difference see component attached another viewmodel viewmodel instance id called template could replaced look confusing conversely term viewmodel could replaced term component everywhere except getting started section could replaced nonchainable js current extend var extendedcomponent vuecomponent get component current component name var extendedcomponent vuecomponent extendedcomponent still except returns extended component var extendedcomponent vuecomponent someregisteredcomponent inheritance var extendedcomponent vuecomponent extendedcomponent basecomponent becomes extendedcomponentcomponent anotherextendedcomponent anotherbasecomponent equivalents new vue vuecreate vuecomponent someregisteredcomponent create vuecreate someregisteredcomponent", "d": "3/2014"}, {"body": "another vote unifying seems job also handling registration retrieval components like bpierre suggestion favors terminology think helpful say vue component reusable instantiatable viewmodel vue components everything get except define going reusing", "d": "3/2014"}, {"body": "agree unifying everything vuecomponent projects hardly ever using vueextend syntax create components vuecomponent maybe change extends inheritance method eg", "d": "3/2014"}, {"body": "edited issue title keep relevant", "d": "3/2014"}, {"body": "thoughts playing options fact serve different purposes becomes obvious extended constructor say extended constructor also methods case mean different things js subcomponent using vue base class encapsulated inside mycomponent mycomponentcomponent subcomponent extendedcomponent using mycomponent base class nt necessarily part mycomponent var extendedcomponent mycomponentextend case unifying two would actually cause confusion noted bpierre becomes weird example back original problem think core issue vuejs trying support two different paradigms first backbonestyle class amp inheritance based api second web component style declarative markupbased api think use tag also create image node think need support gives greater flexibility little verbosity case outweighed benefits think would still help provide sugar common tasks prefer without affecting underlying semantics", "d": "3/2014"}, {"body": "let see understand subcomponent created inside existing component like inherit instantiation options would globally registered would usable within instances correct however example instances receive properties overriden instantiation options correct", "d": "3/2014"}, {"body": "obsoleter yes asset registration method similar etc means take constructor function register id originally expects constructor function directly passing option object syntax sugar think source confusion", "d": "3/2014"}, {"body": "agee keeping definitely use cases either one start getting advanced applications think good explanation differences mentioned docs would enough people understand", "d": "3/2014"}, {"body": "thanks evan example clear makes sense maybe could added somewhere documentation composing viewmodels page maybe new concepts page plugin api adding components directives etc vue constructor extended vue shared simple init function method", "d": "3/2014"}, {"body": "think issue assumes components registered globally feels bit weird encapsulated constructor personally recommend second syntax original options also cherry pick component plugin exports option objects bit verbose think makes concepts clearer", "d": "3/2014"}, {"body": "small nitpick enough warrant separate issue somewhat relevant current discussion popular js libraries jquery underscore also others methods modify target object contrast creates new subclassed instance may somewhat confusing vue users alternative name suggestions", "d": "3/2014"}, {"body": "pesho think makes perfect sense like rather constructor happens expose static methods different jquery underscore mostly object holding bunch utility methods", "d": "3/2014"}, {"body": "added explanation docs", "d": "3/2014"}, {"body": "moved", "d": "3/2014"}, {"body": "hi could provide complete example add url external resource", "d": "3/2014"}, {"body": "thanks replying asked", "d": "3/2014"}, {"body": "hope helps", "d": "3/2014"}, {"body": "gotcha use inline expression like passing vm instance data object either use handler example", "d": "3/2014"}, {"body": "using vue reset form", "d": "3/2014"}, {"body": "also fiddle referencing rawgithub wich serving content wrong mimetype vue nt even loaded use rawgithub without dot proxy", "d": "3/2014"}, {"body": "think manually reset", "d": "3/2014"}, {"body": "ok got", "d": "3/2014"}, {"body": "aha moment needed nest object thanks", "d": "3/2014"}, {"body": "closing due lack consensus benefits substantial", "d": "3/2014"}, {"body": "server side necessary manpulate dom data binding libary guys talking interesting prebuild process like component one recently riverjs wrote contains feature also data binding build make prebuild process worked see responstery install riverjs g npm", "d": "3/2014"}, {"body": "tested vue work jsdom provide prerendered version page however making vue able pick already rendered page seems require much internal hassle probably easier use service like prerenderio hand thelinuxlich idea reusing components npm already feasible component definitions assume existence vue cases", "d": "3/2014"}, {"body": "much work would adapt vue run without access full dom", "d": "3/2014"}, {"body": "mrlundis vue template compile mechanisms relies existing html parser live dom nodes pretty much requires half rewrite nt think feasible moment tested work jsdom", "d": "3/2014"}, {"body": "making vue able pick already rendered page seems require much internal hassle shame really like vuejs make almost perfect framework", "d": "3/2014"}, {"body": "perf gain minimal probably better suited prerendered server side", "d": "3/2014"}, {"body": "augmenting object mutator methods instead set remove etc like currently done arrays methods could intercepted", "d": "3/2014"}, {"body": "pesho hmm interesting thought concern adding methods arrays less likely run conflicts since elements accessed indices objects much maybe prefix methods think make sense manipulating repeater array", "d": "3/2014"}, {"body": "yes prefixing makes sense already discouraged prefix inside viewmodels also methods probably made nonenumerable using objectdefineproperty", "d": "3/2014"}, {"body": "make consistent array augmentations eg probably also use prefix differentiate builtin array methods", "d": "3/2014"}, {"body": "agreed unprefixed versions could probably remain aliases arrays", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "question vuejs template initialization tried vuejs svg template sorry minor issue almost worked problem caused strict svg rules instatiation template sorry coffeescript javascript multiline text bothersome occurs error first simple reason svg property must filled instatiation strictly html error template expanded injection works well want ask vuejs inject values template dom svg initialization send defaut value blaced point worst want prepare custom error catcher grasp problem angular vuejs directive dom initialization know set works dirty idea sorry long post", "d": "3/2014"}, {"body": "directive vattr looking", "d": "3/2014"}, {"body": "ohhhh simple solution lost thought difficult anyway thx", "d": "3/2014"}, {"body": "possible use vcomponent stringbased directive interpolated attribute", "d": "3/2014"}, {"body": "ayamflow higher priority interpolation compiled attributes interpolated edit directives start prefix interpolated", "d": "3/2014"}, {"body": "would hard implement new partial behavior able replace element instead innerhtml javascript gt mypartial think syntax could nt much simpler javascript lt mypartial stripped version problem", "d": "3/2014"}, {"body": "marfalkov nt think replace partial syntax solution problem think something allows conditional partial look later week", "d": "3/2014"}, {"body": "conditional partials sounds really good", "d": "3/2014"}, {"body": "marfalkov think solution use subcomponent item hook conditionally modify element manually elegant kinda job", "d": "3/2014"}, {"body": "thank really elegant way haha", "d": "3/2014"}, {"body": "marfalkov side note think dividers data array quite unsemantic maybe consider making dividers css pseudo classes", "d": "3/2014"}, {"body": "example", "d": "3/2014"}, {"body": "based solution", "d": "3/2014"}, {"body": "marfalkov yeah much cleaner", "d": "3/2014"}, {"body": "smartestshortest way implement searchtext filter current vue like currently possible filter right", "d": "3/2014"}, {"body": "remoe using simple filter possible manually trigger filter reevaluate searchtext changes simpler version use method", "d": "3/2014"}, {"body": "remoe version filter", "d": "3/2014"}, {"body": "bpierre cool might consider adding builtin filters working vrepeat", "d": "3/2014"}, {"body": "bpierre hey thanks nt know", "d": "3/2014"}, {"body": "bpierre cool adding onto example sorting simple builtin vrepeat filters", "d": "3/2014"}, {"body": "builtin filters another component component", "d": "3/2014"}, {"body": "misclick", "d": "3/2014"}, {"body": "vrepeat sorting paginated efficient hand data array vue sort place would better simply replace presorted array eg thisitems sorteditems assume latter would cause existing vrepeated vms mirrored array destroyed", "d": "3/2014"}, {"body": "dyu sort place obviously efficient slightly new array set checks see new array contains identical data old array reuses existing vm dom nodes much possible setting sorted array since arrays contain elements computation compare arrays moving existing dom nodes instead destroying rebuilding vms algorithm also makes feasible pipe array filters use computed property array note latter bug fixed dev", "d": "3/2014"}, {"body": "possible fix repetitive use prefixes example separation namespaces like nt work thought components possible use multiple components element widget multiple features like separate one namespace like concerns totally independent way achieve currently", "d": "3/2014"}, {"body": "haggen depending features may want separate concerns component see something similar rather large spa app component system works great also use kind system rather nicely pubsub pattern case loading component data via ajax key thing remember component essentially another instance vue class access niceties", "d": "3/2014"}, {"body": "mentioned following also stick parent vm data object hook vm instantitated please explain later fundamental reason nt assigned earlier general would like stick hook data stores available parent compilation eg like", "d": "3/2014"}, {"body": "pesho bad actually nt make difference viewmodels observed like regular objects note also means get nested data expect ie use bindings general notice vms vue different vms knockout plain objects different data trying bend vue behave like ko simply nt serve well", "d": "3/2014"}, {"body": "better adopt loose coupling pubsub", "d": "3/2014"}, {"body": "say ca nt used bindings fiddle example seems work fine even computed properties crossvm dependencies seem work fine", "d": "3/2014"}, {"body": "pesho expressions computed properties actually evaluated simple bindings performance reasons simple bindings like blank", "d": "3/2014"}, {"body": "brandonpierce attach component element case need bunch loosely coupled features template thought could separate features namespaces using components", "d": "3/2014"}, {"body": "haggen yes actually generally going use lot decoupled components project instantiate single vue instance long add components instantiate main vue instance inherited take fiddle example currently project using requirejs components dependency main application file instantiates main vm hope makes sense", "d": "3/2014"}, {"body": "thing vms handle twoway sync raw data view logic nt belong category construct arbitrary objects manipulate raw data elsewhere example remember vm sync layer put everything app", "d": "3/2014"}, {"body": "brandonpierce wtf use bunch empty attach components proper way like component names speared space comma multiple vcomponent element well thank much test approach right edit oh noes got wrong p anyway think best move away vue since state vars less templating", "d": "3/2014"}, {"body": "haggen vue actually designed state vars gives freedom template want example gave quick dirty would link production code using techniques mentioned unfortunately private repo read docs see call components like html tags well pass replace option true component replace component div placeholder custom content see", "d": "3/2014"}, {"body": "example remember vm sync layer put everything app approach wo nt cause problems timedata included one vm instance valid need structured hierarchical observable data directly bound dom used dombound components vue observables live within viewmodels trying stuff things put trying bend vue behave like ko even fiddle adds timedata viewmodel", "d": "3/2014"}, {"body": "pesho wo nt vue data object observed multiple vms example belong single viewmodel observed see example", "d": "3/2014"}, {"body": "pesho wo nt vue data object observed multiple vms example timedata belong single viewmodel observed nt know cool still understand posts external data consist plain objects arrays primitive values otherwise unexpected things happen goodies vue already provides would useful well like proper encapsulation computed properties methods would great could take advantage", "d": "3/2014"}, {"body": "hi newbie vuejs looking example vuejs folder structure could give modularization reusable blocks code read documentation word word slow use directives component anyone mind show basic example nutshell project group block code individual folder template css js reuse nest easily anywhere project ps look vuecomponentgulp example still puzzle nest component component reuse freely according example thank", "d": "3/2014"}, {"body": "hi seems vuejs handle recursive use components something useful necessary example", "d": "3/2014"}, {"body": "bobyrizov confusing thanks", "d": "3/2014"}, {"body": "bobyrizov completely rewritten latest dev branch tested latest commit fiddle working correctly wait release also dynamically resolve components eg actually necessary use like anymore", "d": "3/2014"}, {"body": "great thanks looking forward", "d": "3/2014"}, {"body": "way get event object pass event object along args need event object stop propagation nt seem work", "d": "3/2014"}, {"body": "dyu event propagation fixed better use default handler use data", "d": "3/2014"}, {"body": "data property set null later object every key used template set undefined newly created object example get following output issue jut test directive function intended behavior", "d": "3/2014"}, {"body": "bpierre intended behavior mainly dealing situations expressions computed properties depend properties nt exist yet example expression null throw error dependency parsing phase best practice relatively stable structure data", "d": "3/2014"}, {"body": "makes sense thanks", "d": "3/2014"}, {"body": "trying understand data access nested components tried access parent attributes line nt work access model nested component vue", "d": "3/2014"}, {"body": "remoe seems rawgithub link broken since nt use inherit data template bound top level vm log bottom level vm undefined", "d": "3/2014"}, {"body": "thanks update know refer dev jsfiddle yes nt use vwith need define vwith x need directive mapping attributes parent also need example component handle set searchtext another use filter", "d": "3/2014"}, {"body": "remoe prototypal inheritance data properties nested vms case defined root vm access using make available bottom level vm sync changes back top level vm", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "use jquery plugin faced problem data syncing example way tell directive update value get dom element maybe contain kind support jquery event model box", "d": "3/2014"}, {"body": "familiar plugin something like work real issue seems update original element changes bound element", "d": "3/2014"}, {"body": "seems change event caught add listeners jquery nt trigger native events think fixed part triggering events jquery listeners breaks native javascript interoperability", "d": "3/2014"}, {"body": "obsoleter yes made way looking something clear", "d": "3/2014"}, {"body": "see works manually dispatch real event within jquery listener", "d": "3/2014"}, {"body": "yes triggers jquery events problem jquery plugins works way solution native event seems little tricky maybe could little friendly jquery would simplify things lot", "d": "3/2014"}, {"body": "agree evan plugin trigger native events", "d": "3/2014"}, {"body": "sure make jquery friendly plugins fire jquery events caught jquery fyi located line triggers change event would make much sense fix", "d": "3/2014"}, {"body": "thelinuxlich unfortunately world perfect plugin one moreover think nearly impossible find jquery plugin triggers native events yes thinking agree nt support jquery events ability somehow tell synchronize data view would helpful could used like var vue el find select width resolve change function vue syncmodel options think", "d": "3/2014"}, {"body": "think manually dispatching real event cleanest way nt see useful scenarios note create event reuse every time need sync", "d": "3/2014"}, {"body": "another rather common scenario form reset case one dispatch native event every form control course done manually storing form initial state", "d": "3/2014"}, {"body": "displaying around records rich tabular format row expandedcollapsed information close properties displayed inside every row editable vuejs ok records started get slower slower angular hopeless simply hung vueom better still nowhere near manual templating course totally wrong compare simple templates wondering somehow get best worlds one simple suggestion showing say fields certainly nt want every one fields data bound data completely static never change time setting emittersobservers fields unnecessarily dragging things think one major reasons data binding frameworks suck handling large data assume everything needs bound possible introduce kind static binding eg stext sattr etc runs nt create emitters observers literal directives nt get data getting data binding make sense feasible", "d": "3/2014"}, {"body": "anyone know way", "d": "3/2014"}, {"body": "obsoleter overlooked added", "d": "3/2014"}, {"body": "rdsubhas sounds like pretty challenging use case wondering could optimization new basically render properties row expanded state starts false part managed wo nt even get compiled state becomes true think would help tremendously static compile thing something considered trying think syntax nt add unnecessary complexity implementation usage maybe directive marks whole block content interpolated static template", "d": "3/2014"}, {"body": "vonce", "d": "3/2014"}, {"body": "thanks suggestion yes challenging use case time nt control end customer wants us means succumbing bloated ui falling back using manual templating would awesome crack solution thanks great work", "d": "3/2014"}, {"body": "trying understand swap section would something like correct code working fine right wanted make sure running new vue cleans old instance trying figure basic patterns building robust apps", "d": "3/2014"}, {"body": "malkomalko instantiate node twice define components use see example current vm instantiate new one", "d": "3/2014"}, {"body": "followed example nothing happens appcurrentview mycomponent understand new vview key points property data string component name swap components template correct see dom ps using", "d": "3/2014"}, {"body": "marfalkov please always make fiddle detailed questions link build files via rawgithub", "d": "3/2014"}, {"body": "actually works problem using vue browserify race condition components ready route getting hit interesting problem think", "d": "3/2014"}, {"body": "malkomalko explicitly components main file initiate routers", "d": "3/2014"}, {"body": "hilarious upgraded moved things around one components file requires components forgot add new components vview pickup idiot", "d": "3/2014"}, {"body": "dynamically add data exported component ca nt figure var foo vuecomponent home foo data undefined", "d": "3/2014"}, {"body": "vuecomponent aaset registration method use vueextend option object create constructor register given id returns vue returns constructor actual instance", "d": "3/2014"}, {"body": "sorry asking many questions another one using new vview syntax awesome trying reason though let say wanted make type async request pull data testcomp component know use created option add stuff data compiling nt seem work async tasks lt created callback testcomp component non async works fine thoughts feel like would pattern want achieve dynamically load component go grab data", "d": "3/2014"}, {"body": "malkomalko give initial state settimeout longer points vm instance fixed", "d": "3/2014"}, {"body": "duh self mistake setting initial state helped thanks ton nt completely obvious guessing binding needs compile property gets updated binding refreshes totally makes sense", "d": "3/2014"}, {"body": "curious plan vue support recursive use components", "d": "3/2014"}, {"body": "jiyinyiyong would useful give example", "d": "3/2014"}, {"body": "common usage treeviews folders nested case project requires recursive rendering components since data want render tree nested elements", "d": "3/2014"}, {"body": "sure think ca nt use components recursively example", "d": "3/2014"}, {"body": "really impressive example love little code necessary implement tree view awesome", "d": "3/2014"}, {"body": "thread getting long nt want people get spammed whenever someone else posts since questions often directly related source code opened new repo general discussion question thread please post general questions", "d": "3/2014"}, {"body": "read composing viewmodels section nt got docs english intuitive code chinese people maybe familiar usage component demo nt work nested", "d": "3/2014"}, {"body": "closing implementing cspcompliant expression parser would significantly bloat code base marginal use case hindsight possible avoid using expressions together using computed properties", "d": "3/2014"}, {"body": "awesome work vuejs best intuitive compact nojquery perf consideration good mobile talking vuevalidate think validation rules better written model feel something strange write specific view idea syntax providing vuescope like", "d": "3/2014"}, {"body": "kaiinui cool like validation idea syntax intuitive validation still open suggestions looks like good option sure example though", "d": "3/2014"}, {"body": "currently want filter data code like defining methods hook somewhere intuitive way filter data normalized think vue provide normalized way filtering data enough basic great like scopes written somewhere syntax idea duality", "d": "3/2014"}, {"body": "kaiinui fact pipe repeated array filter want example js function foofilter thing function barfilter thing var currentfilter foofilter vm options filters thingfilter function things return thingsfilter currentfilter thing note change need force update new filter external filter tracked vue", "d": "3/2014"}, {"body": "continuing duckbox path statusplans isomorphic ie support rendering client server nodejs ractive example listed expressjs alternative template engine context progressive enhancement pjax seo friendlinessease twitter remake content first dust linkedin etc", "d": "3/2014"}, {"body": "erikandreas see nt think option moment fact vuejs uses dombased templating makes dom dependent similar angular knockout ractive react implementation simulated dom isomorphic heavier", "d": "3/2014"}, {"body": "hi plans support variable naming repeating eg itemdiscount shopping cart items cart individual items may might unfortunately silently falls back parent shows wrong discounts say inside repeat want absolutely sure nt fall back parent would nice intentionally avoid parent fallback also sometimes looks good repeaters namespace gets polluted quite lot use starting point contribute back vue syntax sounds fine", "d": "3/2014"}, {"body": "fiddle illustrating rdsubhas problem quick solution explicitly define discount list items", "d": "3/2014"}, {"body": "rdsubhas thanks suggestion like keep syntax directives consistent added html itemdiscount note basically wraps repeated data working repeated child vm need access bound data instead", "d": "3/2014"}, {"body": "looks perfect yes inside repeated child vm well accessing solves namespacing issues view amp model", "d": "3/2014"}, {"body": "great work really loving framework seeing kaiinui proposal validation rules wondering wheter clearer separation model data example feel like separate real model wrong approach maybe related vueresource", "d": "3/2014"}, {"body": "paglias option holds entire viewmodel state something similar angular something strictly model best nest", "d": "3/2014"}, {"body": "yeah find nesting model effective separate state helpers easier reading working templates also easier shipping model api endpoint reference dataperson instead data culling non model entities", "d": "3/2014"}, {"body": "speaking nesting vm methods would also benefit nestingnamespacing eg instead flat list methods like could currently field accepts flat list mix nested structure model", "d": "3/2014"}, {"body": "pesho nest methods sign might putting much responsibilty single viewmodel split logic smaller components appropriate", "d": "3/2014"}, {"body": "would different aspect already nested allows different kinds entities represented naturally saying one vm keep data single kind entity split everything else separate model yes sounds restrictive namespaced methods would surely useful case viewmodel know interconnected could split child viewmodels would complicate things significantly without benefit", "d": "3/2014"}, {"body": "pesho point method needs invoked context invoked using context clear context context would contradict javascript intuition context child vm data object something else much simpler conceptually anything invoke method always vm fact argue splitting app small components simplifies logic instead complicates good architecture comprised selfcontained easy understand modules discrete responsibilities", "d": "3/2014"}, {"body": "expect top level methods fwiw works correctly currently specify method inside instead course pretty see point may look javascript intuition really common practice overload special meaning many existing libraries say use child componentsviewmodels cases parent vm expected keep track children directive applicable create children dynamically js code instead markup stick references children vms parent vm data", "d": "3/2014"}, {"body": "pesho add options also stick parent vm data object hook vm instantitated", "d": "3/2014"}, {"body": "still one issue viewmodel instance designed bound dom element case need child vms store data use eg parent vm take advantage goodies vue provides like observables computed properties methods even nt bind detached dom node still created guess could live causes harm wasting memory", "d": "3/2014"}, {"body": "pesho want abstract object model happens methods think ok put functions simply skipped observing however methods invoked data object context vm methods manipulate state without aware vm", "d": "3/2014"}, {"body": "yup methods one thing also computed properties want children autocompute data currently means objects store must viewmodels vue allow nested computed properties adding computed properties dynamically existing viewmodel fwiw coming knockout far less opinionated viewmodel must structured could add anything vm dynamically plain data observables computed observables functions arbitrary nesting allowed quite complex logic implemented although admit could get messy trying fit complex logic vue model opinionated thus restrictive challenging", "d": "3/2014"}, {"body": "yes vue differs knockout encourages take topdown declarative design strategy instead imperatively build viewmodels ideal situation describe relationship data view beforehand render vue source data plain logicless objects ones directly throw post request viewmodel simply proxies access data vue vm instance always connects raw data corresponding dom element ko viewmodel essentially data line model viewmodel pretty blurry serialize copy vm need raw data", "d": "3/2014"}, {"body": "jbadeau sure mean combining imperative declarative constructor imperative usage allow users register constructor id choice declarative usage second suggestion prefer avoid mixing template syntax javascript code", "d": "3/2014"}, {"body": "take wait till breaking changes", "d": "3/2014"}, {"body": "kristoferjoseph yes please pretty big changes much appreciated", "d": "3/2014"}, {"body": "cool need help", "d": "3/2014"}, {"body": "kristoferjoseph thanks offering help closing almost ready feel free contribute future issues release", "d": "3/2014"}, {"body": "beers", "d": "3/2014"}, {"title": "modelhaschanged returns true change event ends", "body": "docs note haschanged note method following changerelated ones useful course change event haschanged continues return change event ended docs wrong change behavior match docs specific use case two model attributes kept insync maybe design flawed begin analogy location backbonemodelextend initialize function thison change city thisupdatestate thison change state thisupdatecity updatestate function avoid causing recursion thishaschanged state return updatecity function avoid causing recursion thishaschanged city return allows listeners care one listen directly attribute change event avoid computing values user change either one get updated appropriately better design pattern something like could store property would change detection", "num": "3100", "d": "3/2014"}, {"title": "router fails load optional query param", "body": "tried url like path amp amp appends last param supplied modifying like path amp amp solves issue optional parameter absent url like amp amp supply dangling amp quite desirable particular reason considered add amp another delimiter regular expression replacing namedparam let know missing something", "num": "3099", "d": "3/2014"}, {"title": "reason ignore minified files bowerjson", "body": "according bowerjson spec recommends include minified version main attribute wondering reason ignore", "num": "3097", "d": "3/2014"}, {"title": "crud http method default mapping", "body": "hi attended interesting talk rest apis design slides speaker thorough knowledge subject sequence slides recommendation use http post method update resources ideally patch indeed http put create resources since put idempotent post may idempotent using put whole representation resource sent partial update allowed resource overwritten database default crud http method mapping backbone create operation mapped http post method update operation http post method expert rest nt opposite considerations led mapping thanks feedback", "num": "3095", "d": "3/2014"}, {"title": "problems collections included template", "body": "hi template linked view model object modeled associated two collections view render function var phones phonecollectionphones phonesfetch renew true var addresses addresscollectionaddresses addressesfetch renew true model fetch declare success function pass phonesmodels addressesmodels problem sometimes collections appear sometimes nt occasions accessed view first time collections nt show refreshing page revealed occasions required renavigate home page application something wrong thanks help garey mills", "num": "3093", "d": "3/2014"}, {"title": "insertion sort add method sort", "body": "would nt better method implemented using insertion sort instead sorting collection gets even worst take look many times set traversed sortby one pluck another native code sort knowing collection far sorted give us ability iterate minimum times fastest sorting method set sorted quick sort worst case already sorted one know whether sorted nt native code instead", "num": "3086", "d": "3/2014"}, {"title": "backbone local storage", "body": "hello presently working backbonejs want know method save data locally temporarily mean need send data server dont wan na use backbonelocalstoragejs completely removes option store data server want use ie storing locally sending server per need please help", "num": "3081", "d": "3/2014"}, {"title": "questions generateid", "body": "alright admittedly favor mainly could used things like composite keys allow different models grouped together one collection even conflicting playing around practice feels like half solution since actually sets attribute nt used collection purposes breaks url construction magic unless want generated id act restful endpoint identifier intended used restful endpoint identifier presumably sending id server first place caseywebdev wanted get opinions something run situations used alternatively would make sense defined method collection rather model", "num": "3080", "d": "3/2014"}, {"title": "url property function must specified collection error", "body": "unable following var collection new collection url get following error latest version uncaught error url property function must specified version works fine", "num": "3079", "d": "3/2014"}, {"title": "proposal backbonerouterexecute add action name arguments", "body": "hey usually override execute judging callback come like javascript backbonerouterextend execute function callback args var actionname thisgetactionname callback super backbonerouterprototypeexecuteapply arguments getactionname function callback thisroutes return nt know anyone else show code someone like reuse common requirement suggest add argument", "num": "3078", "d": "3/2014"}, {"title": "", "body": "", "num": "3076", "d": "3/2014"}, {"title": "amd boilerplate still defines jquery dependency", "body": "trying get nativeview play nicely handlebones non amd tests passing hoorah current amd setup backbonejs still defines jquery hard dependency cause amd build blow try test suggestions handled backbone sure much strife amd boilerplate getting boy wish nt nothing wrong shimming imho", "num": "3074", "d": "3/2014"}, {"title": "link documentation tool backbonejsorg", "body": "documentation style used wwwbackbonejscom wwwunderscorejscom really great definitely seems like step jsdoc produces however could nt find information tool used generate would possible include link tool possibly fine print bottom page others could benefit perhaps somewhere wiki failing could possibly include link tool ticket", "num": "3072", "d": "3/2014"}, {"title": "modelsave work context server side nodejs", "body": "tried back things missing jquery work properly googlefu failing ca nt seem find discussion starting one missing something obvious lost p thanks help", "num": "3071", "d": "3/2014"}, {"title": "proposal backbonemodel matches", "body": "hey create pr w tests wanted test waters interest method essentially predicate would take object conditions la coffee model new backbonemodel conditions key value lol wat modelmatches conditions backbonemodel matches conditions gt every conditions value key gt get key value something worthy inclusion", "num": "3070", "d": "3/2014"}, {"title": "chrome extension local storage", "body": "anyone plz tell wrong unable store data using chromestoragesync html div id list text type input user enters something clicks add buttonon add text appears body also get stored happening js file chromestoragesyncget value function items text saved entered retrived added html body achieve body click p function hide user add text appears bodyif wishes remove click hide butt click function var entered documentgetelementbyid mytext value documentgetelementbyid mytext value", "num": "3069", "d": "3/2014"}, {"title": "ie lt redefined documentdomain block", "body": "project using load webapps redefined right browser ie backbone nt work averse use iframe requirement customer knew customer god", "num": "3068", "d": "3/2014"}, {"title": "previousattributes nt cleared change events", "body": "used following places guarded means usable change listeners documentation think reasoning accesses ever permitted within change handler unset attribute backbone hold reference old attribute value memory implications security implications consider someone setting sensitive piece information unset later may still easily accessible attacker found xss also way clear could best overwrite silently setting attribute guys think clearing change event listeners called", "num": "3066", "d": "3/2014"}, {"title": "documentation suggestion", "body": "recently spent days trying figure despite fact save creating new instance model server passed error function always getting called turns server fault instead returning entire object created server returning synthetic key backbone docs clear enough point stop bonehead like world frustration matter fact nt really know look find cheat sheet proper comportment restful server perhaps need pointed right direction thanks listening garey mills", "num": "3065", "d": "3/2014"}, {"title": "model attribute aliases feature request views", "body": "hi say two different models javascript var product skate definition product model productref backbonemodelextend idattribute name skate new productref name title plmskate desc nice skateboard revision previewurl javascript var person paulbismuth definition person model person backbonemodelextend idattribute email totally anonymous instance person paulbismuth new person email expresident elyseefr firstname paul lastname bismuth paul bismuth father pierre antimoine avatar say coding idcardview meant display image model data could somehow fit fields two models candidate displayed view following attributes mapping instance would mapped attribute alias concatenation would mapped attribute alias attribute would mapped attribute alias attribute instance would mapped attribute alias attribute would mapped attribute alias attribute would mapped attribute alias attribute words view need attribute aliases observedpointed model without modifying original models definitions golden rule models must know anything views nt want polute model code viewrelated mapping thought object roughly given mapping original attribute names expected attribute names listen original attributes events emitted proxified model reemit events expected attribute names reimplement expected attribute names changed original attribute names calls made proxified delegate execution method proxified model prototype chain javascript seems builtin way implement object would somehow instanciated overriden impl view ctor replace original view given options hash mapping defined hash object values would attribute names even maybe functions deal logic like concatenation firstname lastname rest code view deal model native attributes roughly idea moment outlines clear idea whole thing also like work collections would implement attribute aliases observedpointed model without modifying original models definitions plugins know provide feature would proxy object helful future nothing request thanks advance feedback ideas", "num": "3064", "d": "3/2014"}, {"title": "array attribute still nt trigger change event changed", "body": "", "num": "3061", "d": "3/2014"}, {"title": "listento", "body": "could listento applied windowlocationpathname know applied model objects", "num": "3059", "d": "3/2014"}, {"title": "array model attribute doesnt onchange trigger", "body": "hi use array part model also bound change events model changed array attribute wont receive event", "num": "3058", "d": "3/2014"}, {"title": "using polymorphic models breaks backbone ability ignore existing models adding array objects existing collection", "body": "using polymorphic models breaks backbone ability ignore existing models adding array objects existing collection collection also contain polymorphic models overriding property constructor returns model since function passed collectionmodel prototype following line collection set method work", "num": "3057", "d": "3/2014"}, {"title": "amdstyle define definition anonymous", "body": "underscorejs define call includes name library however backbone leads interesting error messages things rolled single file includes requirejs top example underscorejs backbonejs would nice backbonejs instead however sure implications noconflict mode", "num": "3055", "d": "3/2014"}, {"title": "would great checks within collection done rather", "body": "would allow people use custom models example backbonecollections pr wanted float idea approval first", "num": "3051", "d": "3/2014"}, {"title": "control put vs post models supplied ids", "body": "javascript var usermodel backbonemodelextend idattribute username urlroot userapi var newuser new usermodel newuserset username newusersave create new user code backbone makes assumption whatever api calling unique identifier resource manipulating generated creation always case example unique identifier username id provided code always try put request always fail think many different ways solving providing create update methods model save use changing exposing method options hash save method change like one two things application aware creating user updating user call appropriate method set appropriate option call save normally tries put gets error handler tries save forcing post thoughts", "num": "3050", "d": "3/2014"}, {"title": "router navigate url nt trigger", "body": "use case simple know plenty alternatives achieve behaviour imagine application sitting route somehow want retrigger route code navigate trigger true since routes trigger never happens intended bug bug try work pr", "num": "3047", "d": "3/2014"}, {"title": "possible memory leak", "body": "hi ive profiling app noticed stray dom nodes floating around removing views know many reasons however nodes seem clear use removing reason backboneview doesnt", "num": "3046", "d": "3/2014"}, {"title": "backbone appending url", "body": "hello using latest version backbone code works perfectly firefox google chromesafari appends unknown url expected url url chromesafari nt know coming also happening safari thanks", "num": "3045", "d": "3/2014"}, {"title": "polymorphic collections working", "body": "update polymorphic collections stopped working chrome throws exception like callstack reason issue fact method trying access case method returning instance model case workaround issue looks like", "num": "3044", "d": "3/2014"}, {"title": "invalid collectionmodel function", "body": "collectionmodel function shown example function invalid value collection instance nt example", "num": "3043", "d": "3/2014"}, {"title": "accessing view options construction", "body": "hi removed since backbone usual recommandation set need inside initialize constructor currently however views kind pattern js popupviewextend see root element constructor currently requiring options functional since initialize constructor called creating node fails worth error somewhat fixed overloading entire constructor js var view function think agree say best code snippet ever think issue solved", "num": "3033", "d": "3/2014"}, {"body": "ok maybe fault trying make use function outside change event sorry find another way", "d": "3/2014"}, {"body": "maybe avoid setting objects arrays hash fine", "d": "3/2014"}, {"body": "hi sankalan yes reasons adding delimiter main problem would query parameters generally guaranteed specific order matching regular expression sufficient version backbone using since version query params available custom parsing slightly different form case could use something like following parse query string however best hope helps smiley", "d": "3/2014"}, {"body": "create operation mapped http post method update operation http post method mapping reference believe current mapping restfully correct resource collection endpoint specific resource imply new resource created specific resource replacing entirety resource body mentioned idempotent way creation would longer idempotent would creating new records every request like", "d": "3/2014"}, {"body": "thanks get logic create gt post items idempotent add item collection resource persisted backend time call update gt put idempotent createsreplaces resource entirety url specified even better update patch rfc thanks clarification", "d": "3/2014"}, {"body": "believe used relying nt remember reason change", "d": "3/2014"}, {"body": "jashkenas possibly option maybe change comparator value without resorting collection leaving unsorted state need boolean keeps track whether model addedchanged since last", "d": "3/2014"}, {"body": "new variables one track state sort another retain last comparator method reference whenever sort called comparator used would set last comparator used method called would change state sorting called comparator changed sort state set true insertion sort called otherwise resort collection", "d": "3/2014"}, {"body": "yep caseywebdev right one need fork secondly reliably discerning whether array currently sorted harder might seem", "d": "3/2014"}, {"body": "braddunbar looking methods changes would affected method would set possible method sorting case equals insertion sort used else insertions called sorting case adding set false besides method influence process ca nt really think negative consequence common overwrite two methods change order methods think performance issue lib concern", "d": "3/2014"}, {"body": "think conversation would best moved pull request edygar maybe could open one mind", "d": "3/2014"}, {"body": "done anyone make benchmark test", "d": "3/2014"}, {"body": "nt worked way expeting performance got slower closing issue", "d": "3/2014"}, {"body": "hey naseerhussain might try mailing list stackoverflow irc channel questions like github issues used talk framework", "d": "3/2014"}, {"body": "uuugh remove least nt shipped yet", "d": "3/2014"}, {"body": "breaks url construction magic using already something would break default url construction magic nt see really relevant change presumably sending id server first place nt think server response conform backbone method uniquely identifying models want model hash pristine copy server nt want mess adding fake keys stored proper set backbonecollection something run situations used nt run issues yet nt using terribly long either alternatively would make sense defined method collection rather model curious see implementation sure collection really better place uuugh remove least nt shipped yet seeing issue anything gives backbone users flexibility trying without feels hacky", "d": "3/2014"}, {"body": "nt think server response conform backbone method uniquely identifying models yeah agreed thought would nice potential workaround strict oneidpercollection rule enforced collections using generateid already something would break default url construction magic nt see really relevant change sure though let say different collections want combine models third collection adhoc purposes sorting display etc needed guarantee models wo nt conflicting id collection viewpoint nt seem like model responsibility come unique id scheme temporary collection uuugh remove least nt shipped yet seeing issue anything generateid gives backbone users flexibility trying generateid without feels hacky sure wanted raise point think bit ship noticing ca nt easily used without breaking restful niceties nt want mess adding fake keys stored proper set backbonecollection agreed taking model putting collection could presumably used effect intending without confusing logic around etc put something together bit", "d": "3/2014"}, {"body": "sure though let say different collections want combine models third collection adhoc purposes sorting display etc needed guarantee models wo nt conflicting id collection viewpoint nt seem like model responsibility come unique id scheme temporary collection definitely good point good argument toward put something together bit curious see come seems like collection may listen event keep uptodate let futz wink", "d": "3/2014"}, {"body": "thought probably way sort coexist way user composite keys model level model truly compositenested key collection level group simple different model types", "d": "3/2014"}, {"body": "hi avjpl automatic attachment option removed models collections version due bug causes see details", "d": "3/2014"}, {"body": "would find useful", "d": "3/2014"}, {"body": "seems like fine idea fixed", "d": "3/2014"}, {"body": "merged enjoy", "d": "3/2014"}, {"body": "shimming messes build tool iirc commonjs solution assign backbone directly may route take opinions killing jquery require amd", "d": "3/2014"}, {"body": "scenarios seem pretty crappy leave means need map require maps jquery empty object maybe require black magic yet know jrburke ideas achieve conditional dependency without plugin ie nt care comes back null remove jquery dep means need set manually setup app correct missing clever third solution option seems correct whole point longer require jquery may well reflect defined dependency tree", "d": "3/2014"}, {"body": "context either backbone depends jquery nt module systems amd commonjsnode even based similar principle dependencies believe sort issue came node pathway backbone perhaps parts backbone need jquery broken separate modulefileaddon enough context suggest final pathway best folks backbone community sort", "d": "3/2014"}, {"body": "nt mind setting backbone application setup opinion one solution amd scenario catching error finding jquery though ugly", "d": "3/2014"}, {"body": "open pr", "d": "3/2014"}, {"body": "either backbone depends jquery doesnt nope docs state backbone hard dependency underscore light dependency jquery overridden one many advantages latebinding language like js rewriting dependencies exposed modules fly particularly useful scenarios like code remains functionally similar large underlying portions replaced perhaps parts backbone need jquery broken separate modulefileaddon also nope backbone nt need use amd manage internal code believe sort issue came node pathway backbone node pathway browserify pathway browserify choking trycatch wrapped around commonjs difference node browserify former runtime lookups latter must precompilation step hugely opposed making dev set manually bit ugly hurdle newbies make change let make sure document hell", "d": "3/2014"}, {"body": "either backbone depends jquery doesnt nope docs state backbone hard dependency underscore light dependency jquery overridden think jrburke means light dependency dependency consensus regarding commonjs well believe sort issue came node pathway backbone node pathway browserify pathway pedantically commonjs cases regardless precedent heed make change let make sure document hell", "d": "3/2014"}, {"body": "pedantically commonjs cases regardless precedent heed commonjs difference runtime lookup vs precompile step former use latter ca nt seen projects use within methods runtime dependencies lazyloading avoiding dependency loops ie depends method depending method", "d": "3/2014"}, {"body": "sorry previous answer bit short follow es modules work like amd far behavior specifying dependencies need specified declaratively front dynamic dependency loaded via similar amd async callback mechanism different node commonjslike system synchronous file access support dynamically fetched require jquery throw bad practice browser though carry forward end result deciding backbone would like express dependencies amd mean solved solution modules whatever solution even nothing wanted keep jquery specified dependency amd projects want use dom library helper instructing amd users following config setup would allow work javascript showing requirejs config call holds amd loader config call requirejsconfig normal config seed module loader empty jquery dependency starting main app loading define jquery function app loading require appmain option save file called jqueryjs project impression backbone users using backbone browser using dom helper library zeptoender supported via amd loader map config points jquery providers true would bias dependency expression mention jquery suggest pathways mentioned amd users want dom helper library backbone know community better", "d": "3/2014"}, {"body": "true would bias dependency expression mention jquery suggest pathways mentioned amd users want dom helper library backbone sounds good jrburke knows best", "d": "3/2014"}, {"body": "thumbsup setting empty jquery object", "d": "3/2014"}, {"body": "actionable item would keep jquery dep amd definition change backbone amd test definition setup blank jquery object reading correctly", "d": "3/2014"}, {"body": "must say would feel strange someone wants use library jquery backbone create jquery filedefinitioncumprimentos jos\u00e9 magalh\u00e3es wed mar pm ryan eastridge notifications githubcom wrote actionable item would keep jquery dep amd definition change backbone amd test definition setup blank jquery object reading correctly reply email directly view github", "d": "3/2014"}, {"body": "magalhas agree already primarily use zepto seems little strange", "d": "3/2014"}, {"body": "agreed magalhas seem like crap solutions", "d": "3/2014"}, {"body": "simple enough say two reasonable solutions defining jquery one way another even empty object using amd capture conversation date correctly jrburke thanks input hail lord require", "d": "3/2014"}, {"body": "oh let make minor release patch release blew faces way would expected patch release", "d": "3/2014"}, {"body": "kind prefer dependency removal also way works way cjs module definition said downside newbies wo nt know backbone needs defined order views routers working properly though overcome documentation break current interface minor release would proper opinion", "d": "3/2014"}, {"body": "also side note could default backbone implementation throws error stating library plugged would help people nt read documentation update though things like would stop working", "d": "3/2014"}, {"body": "reopening seems require discussion", "d": "3/2014"}, {"body": "jrburke says shim whatever like amd shim", "d": "3/2014"}, {"body": "hi machineghost referring annotated source generated docco would nt mention", "d": "3/2014"}, {"body": "nt think machineghost good old fashioned artisanally produced organic handwritten html friend", "d": "3/2014"}, {"body": "wow must annoying keep date kudos putting effort keep friendly readable", "d": "3/2014"}, {"body": "afaik must override sync method", "d": "3/2014"}, {"body": "like magalhas said override connect database another api whatever need readpersist", "d": "3/2014"}, {"body": "thanks guys confirming current state affairs suppose makes sense databases nt speak http using database like couchdb server side models client side models potential backbonemodels ability http calls like browser anyone else interested seeing work", "d": "3/2014"}, {"body": "probably write pretty simple library like superagent uses javascript api ajax browser http requests node backbone wo nt likely take route core though jquery ubiquitous ajax client days", "d": "3/2014"}, {"body": "think probably leverage new another proxy method", "d": "3/2014"}, {"body": "caseywebdev would nt need specialcase use", "d": "3/2014"}, {"body": "handled problem return predicate function would special case", "d": "3/2014"}, {"body": "understand correctly function designed provide bit syntactic sugar loops nt define anonymous function run check helps filter operation nt covered collectionwhere", "d": "3/2014"}, {"body": "lukesargeant many cases might want use something like outside collection", "d": "3/2014"}, {"body": "nt used function much right think use cases", "d": "3/2014"}, {"body": "ca nt set iframe documentdomain documentdomain embedding document", "d": "3/2014"}, {"body": "set inside outside iframe backbone use another iframe element make history ie low version ca nt find solution set backbone iframe", "d": "3/2014"}, {"body": "oh right iframe contentdocument readonly", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "tried say also throw error message", "d": "3/2014"}, {"body": "think would break lot things right also may want access change event makes perfect sense could though explicit way dispose", "d": "3/2014"}, {"body": "magalhas since documentation indicates access intended change events reinforced explicit ternary code prevent access outside change events nt user responsibility make explicit copy model order access attributes changed use change listener understand may breaking change seems like keeping silent references around backwards compatibility use documentation suggests unintended wrong thing", "d": "3/2014"}, {"body": "backbone documentation return copy model previous attributes useful getting diff versions model getting back valid state error occurs", "d": "3/2014"}, {"body": "also backbone documentation change event method used get previous value changed attribute also happens work change events like using pointer sure might still memory address may used anyone else yet still error relying behavior probably bad idea may break internal behavior changes future worse could expose vulnerability diffing could save value want using use diff need multiple ways things internally inconsistent intentions code documentation especially side effect dubious value correctness", "d": "3/2014"}, {"body": "see point still think documentation issue bug worked couple years project uses big json data megabytes way tackled overriding set method disable previousattributes usage couple features nt need backbonemodel order optimize performance feel mainstream perspective extra object model nt killer memory wise fact makes possible easily undo model changes lets wait active collabs opinion", "d": "3/2014"}, {"body": "memory leak nt grow security hole already put sensitive information model xss present already lost nt think change made feel free disable copy backbone", "d": "3/2014"}, {"body": "yes make clear documentation also fix example currently broken", "d": "3/2014"}, {"body": "hi garey understand correctly saying server returned something object response operation failed option called response formatted json nt able reproduce locally would mind posting example", "d": "3/2014"}, {"body": "brad client created address containing fields posted server server saved address generated surrogate key returned serialized json object containing key result client save error called since writing server well able change behavior return entire json address save success called garey mon mar brad dunbar notifications githubcomwrote hi garey understand correctly youre saying server returned something object response operation failed error option called response formatted json nt able reproduce locally would mind posting example reply email directly view github generate messages directories read files opened rather silent", "d": "3/2014"}, {"body": "think still missing something would cause handler called knowledge called response valid json", "d": "3/2014"}, {"body": "request recently add concept virtual attributes bookshelfjs project follows similar conventions backbone modelscollections use serverside relational databases ended written plugin might useful starting point looking implement docs use nt see reason nt possible drop swapping current implementation uses getterssetters depending browsers looking target work otherwise need tweak bit get functionality looking hope helps", "d": "3/2014"}, {"body": "thanks seems event fired virtual properties values change right", "d": "3/2014"}, {"body": "nt events triggered virtual properties though easy adding check see whether old value different new value firing event accordingly", "d": "3/2014"}, {"body": "asking dirty checking model set checks deep equality points reference cases best practice store primitives strings numbers backbone attributes hash use properties model instance need something advanced", "d": "3/2014"}, {"body": "object extended onto javascript object nt dirty checking changes suspect looking merely provide facilities trigger listen events object would establish changed event case", "d": "3/2014"}, {"body": "thanks swift response casey thought work running problems earlier error probably backbone related", "d": "3/2014"}, {"body": "would mind providing example", "d": "3/2014"}, {"body": "thismodelset background viewlistento thismodel change viewrender thismodelset background background thismodeltrigger change background last line must expected nt executed cause nt detect array different", "d": "3/2014"}, {"body": "see triggering expected may bug code modified version backbone", "d": "3/2014"}, {"body": "version using factory function look like", "d": "3/2014"}, {"body": "sure mean factory function figure add prototype property contains idattribute property function returns model works feels hacky", "d": "3/2014"}, {"body": "want use simple function option less hacky solution uses proper constructor js var collection backbonecollectionextend model backbonemodelextend constructor function attrs options var model attrsfoo myfoomodel mybarmodel return new model attrs options", "d": "3/2014"}, {"body": "ok maybe docs updated use example like instead simple function", "d": "3/2014"}, {"body": "see", "d": "3/2014"}, {"body": "nt know answer question jrburke", "d": "3/2014"}, {"body": "anonymous modules preferred way define modules allows patterns use consumers modules combined together amdaware optimizer combines modules inserts names process similar nodebrowserify approach ecmascript modules source form name bundled ids pertain projectbundling scenario given issues loading scripts browsers share global scope insufficient browser capabilities across browsers modern browsers better always possible anonymous modules work scenarios mostly issue basic core scripts like jquery underscore however higher level scripts like backbone less concern details wiki page upgrading libraries", "d": "3/2014"}, {"body": "anonymous add functionality build tool actually rename modules name nt register anonymously", "d": "3/2014"}, {"body": "allows patterns use consumers jrburke expand statement detail", "d": "3/2014"}, {"body": "instance two different backbone versions available app sounds silly benefit example using anonymous define", "d": "3/2014"}, {"body": "ajaxsolutions consumers backbone library may want refer backbone examples ordered expect likely first developer may want add modifications backbone refer backbone dependency app modules could set backbone module real backbone modifications export value value backbone module sort proxy real backbone prefer mvc library called mvc allow swapping outin backbone mvc id horrible reason need load two different versions backbone page would awful scenario known happen necessarily backbone general modules versions modules keeping module anonymous allows uses", "d": "3/2014"}, {"body": "really good idea", "d": "3/2014"}, {"body": "want pr", "d": "3/2014"}, {"body": "jashkenas wo nt work simple factory functions referring", "d": "3/2014"}, {"body": "ah rub", "d": "3/2014"}, {"body": "everyone page", "d": "3/2014"}, {"body": "nt instead property example defaulted", "d": "3/2014"}, {"body": "supposed wink would solve problem maybe way prevents duplication", "d": "3/2014"}, {"body": "agree immediately obvious benefit supporting factory function", "d": "3/2014"}, {"body": "sounds like need method instead using directly need factory function polymorphism likely also need set custom method", "d": "3/2014"}, {"body": "know underscore would nt work", "d": "3/2014"}, {"body": "could work factory functions models produced inherited factory using example docs might bit fancy", "d": "3/2014"}, {"body": "like legastero idea adding overridable method collection using instead hard instanceof checks something like", "d": "3/2014"}, {"body": "went ahead wrote discussion suggesting instead seemed cleanerclearer", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "henrik approach one way cost adding new internal hook function might never used anyone hard type checking usually bad thing would possible us replace instanceof ducktype testing instead case", "d": "3/2014"}, {"body": "folks linkedin including would love new internal hook currently swiveling preparemodel applications", "d": "3/2014"}, {"body": "would absolutely huge application team building linkedin see asakusuma comment confirmation well", "d": "3/2014"}, {"body": "flexibility one major advantages backbone able decouple models collections allowing people swap models seems like natural win backbone", "d": "3/2014"}, {"body": "actually bitten lack took debug native support would awesome", "d": "3/2014"}, {"body": "fixed enjoy", "d": "3/2014"}, {"body": "code always try put request correct put vs post nt create vs update know url resource belong simple puting representation feel free override sync like something different", "d": "3/2014"}, {"body": "override isnew method needed", "d": "3/2014"}, {"body": "guys indeed correct sorry causing noise", "d": "3/2014"}, {"body": "hi magalhas discussed several times others please comment arguments feature thanks", "d": "3/2014"}, {"body": "exist perhaps using master instead", "d": "3/2014"}, {"body": "fixed regression experienced", "d": "3/2014"}, {"body": "works like charm cheers", "d": "3/2014"}, {"body": "see edit mistake related referring reference created collection instance nt nt want collection access", "d": "3/2014"}, {"body": "ok works thank", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "hm indeed possible introduce little delta elements need options nt nothing really serious nt thought using setelement thanks closing issue since nt see immediate use case snippet would nt work", "d": "3/2014"}, {"body": "makes easier arcanis override constructor like", "d": "3/2014"}, {"body": "issue defining function specially handy use passed customise class attributes element workaround set classes attributes method disappointed", "d": "3/2014"}, {"body": "mllocs still pass functions options constructor", "d": "3/2014"}, {"body": "meant using passed functions update longer automatically attached context calling methods", "d": "3/2014"}, {"body": "save overridden initialize method constructor", "d": "3/2014"}, {"body": "initialize called afterwards overriding constructor looks much need accomplish", "d": "3/2014"}, {"body": "nah overriding constructor good plan pretty common moreso", "d": "3/2014"}, {"body": "overriding constructor every view declaration seems much boilerplate reason remove context pass methods would like understand change pretty common pattern bad practice pattern", "d": "3/2014"}, {"body": "use case every view application comes backbone indirection something like js var view backboneviewextend constructor function options thisoptions options backboneviewapply arguments var userview viewextend var commentview viewextend", "d": "3/2014"}, {"body": "mllocs yes would say accessing antipattern instead use vehicle attach properties directly follows great deal detail interested", "d": "3/2014"}, {"body": "thanks braddunbar options whitelisting interesting investigate apply idea using backbonemarionette", "d": "3/2014"}, {"body": "symmetriq would like send patch fixes ender loading problem patch possible", "d": "3/2014"}, {"body": "jashkenas done", "d": "3/2014"}, {"body": "started happening still affected", "d": "3/2014"}, {"body": "yes also problem master", "d": "3/2014"}, {"body": "unsure whether actually bug whether previously undocumented behavior unsupported documentation states arguments create docs convenience create new instance model within collection equivalent instantiating model hash attributes saving model server adding model set successfully created would indicate expecting model instance example use case needing create way using seeing issue", "d": "3/2014"}, {"body": "docs also says create method accept either attributes hash existing unsaved model object", "d": "3/2014"}, {"body": "ah missed bug docs otherwise", "d": "3/2014"}, {"body": "anyone know commit introduced regression", "d": "3/2014"}, {"body": "yeah seems nt realize attribute set model relied upon reason model added collection", "d": "3/2014"}, {"body": "tgriesser think easy fix fundamental problem addreference idea", "d": "3/2014"}, {"body": "yeah think fundamental problem addreference idea feels bit odd need model knowledge collection able save nt yet exist collection let see anything come", "d": "3/2014"}, {"body": "also ran issue today nt spent much time investigating underlying cause confirm running update fixes", "d": "3/2014"}, {"body": "looks like still trouble feel free send failing test case ticket go", "d": "3/2014"}, {"body": "think passing along fine maybe even anything else overridden extending class", "d": "3/2014"}, {"body": "symmetriq add gotten work browserify environment", "d": "3/2014"}, {"body": "one note may missing seems model defined function collection still wont access idattribute model called correct targetproto defined model function called returned", "d": "3/2014"}, {"body": "chiplay check example setting optionally polymorphic", "d": "3/2014"}, {"body": "thanks caseywebdev dont think set idattribute collection since idattribute different model types polymorphic model sure looking use generateid produce correct id explain point right direction thanks", "d": "3/2014"}, {"body": "caseywebdev ahhh got little slow today need set generateid method collection use attrs return correct id brilliant", "d": "3/2014"}, {"body": "js var typea backbonemodelextend idattribute var typeb backbonemodelextend idattribute b var poly backbonecollectionextend model backbonemodelextend constructor function attrs options var model attrstype typea typeb return new model attrs options let know helps keep mind recently added latest release yet", "d": "3/2014"}, {"body": "yamsellem jashkenas ran issue well turns need add validate true options invalid model added collection guessing intended behaviour since exists test probably documented", "d": "3/2014"}, {"body": "backbone version issue still exist", "d": "3/2014"}, {"body": "derickbailey example since idea behind patch releases fixes needed", "d": "3/2014"}, {"body": "problem way prevent backbone registering without patching copy code something avoid improve maintainability working building new component site old legacy environment uses requirejs want new component sandboxed separate existing code nightmare ca nt use backbone even though ideal candidate forces existing requirejs package neither reach prevent interfering existing code adds requirements jquery underscore whole approach wrong opinion forcing certain way thinking unrelated actual backbone library", "d": "3/2014"}, {"body": "gmmorris suggestion change backbone amd support fit use case nt know issue ca nt subverted requirejs config sure trying accomplish", "d": "3/2014"}, {"body": "amd separation modules would also win using commonjs module definition browserifynode", "d": "3/2014"}, {"body": "nt think amd support hard coded backbone least provide way tell backbone register horrible way would window level flag trying avoid global variables like avoid possible explain use case existing code base dire need refactoring scraping trying build sandboxed infrastructure sits separate packaging existing code mainly prevent developers getting tempted mix new code modules old ones also order refactor various components way live side side without conflicting way obviously specific use case first time happened leading architecture dozen different companies last years consultant see problem direct result way implemented makes mistaken assumption environment setup simply think ideal solution removing assumption especially considering requirejs offers better solutions shims", "d": "3/2014"}, {"body": "gmmorris third party service injecting javascript client page need defensive wrap code function expression immediately invokes specify inline define implementation something like almond specific use case better addressed tool would require internal registration instead globally leaking load almond load backbone great sandbox nt invent", "d": "3/2014"}, {"body": "site brought help rebuild existing site without rebuild everything scratch wrapping option problematic existing backend infrastructure plenty solutions trying make general point regarding codebase point existing solution wrong assuming anything global scale backbone box side note btw problem wrapping code every file want load specific files demand rather concatenate files wrap every single file problematic backend infrastructure also forces concatenate files dev environment creates problems nothing backbone course points problems code makes invalid assumptions", "d": "3/2014"}, {"body": "backbone registering function call significantly better use case encapsulating logic inside function scope exposing global call means code looks like compare globals approach javascript include backbone function noconflict ideal assign undefined windowbackbone instead deleting never existed var backbone windowbackbonenoconflict var hadbackbone false var prevbackbone backbone window hadbackbone true load backbone var backbone windowbackbone hadbackbone delete windowbackbone else windowbackbone prevbackbone edit fixed typos", "d": "3/2014"}, {"body": "problem defined existing require package affects configuration requirejs also adds calls underscore jquery extends prerequisits means making changes existing code base problem spans multiple pages exiting code mess assuming nt option simply wrap backbone code change existing infrastructure simply ca nt prevent backbone registering suggest nt make current usecase already stated specific use case want stress problems project nothing amd support backbone fact surfaced inherent problem way backbone works nt think right vendor component choose register without lest providing way prevent acting assumption", "d": "3/2014"}, {"body": "force backbone store whatever object want sort amd state said use case specific think current state works majority", "d": "3/2014"}, {"body": "yeah thats exactly done point nt solving issue end honestly think way works wrong thanks time anyway guys", "d": "3/2014"}, {"body": "order underscore jquery backbone", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "dminkovsky solution used clearing error view attempt set model view basically assume inputs view model responds value fact invalid", "d": "3/2014"}, {"body": "jashkenas seems lost fix subsequent evolutions backbone code backbone query params lost copying fragment purpose", "d": "3/2014"}, {"body": "hi olance handling search params modified bit allow custom parsing general usage params part search component moved hash transitioning pushstate hashchange eg causing failures end love see test case attempt address", "d": "3/2014"}, {"body": "hi braddunbar thanks replying maybe something wrong happening chrome modern browsers worries ie url reloaded param read serverside inject javascript init code embedded backbone app moved hash fragment server generates page without init code init backbone coffeescript initialize app appview require viewsappview configuratorviewsappview new appview approuter require routersapprouter configuratorroutersapprouter new approuter initialize backbone history backbonehistorystart pushstate true root configurator hope clear processproblem something wrong used work well previous versions backbone", "d": "3/2014"}, {"body": "thanks clarifying see mean right work previously considered briefly making change nt think anyone using pattern sorry breakage worried nt think likely go back behavior feedback search params overwhelmingly positive would probably suggest putting parameter root instead ie possibility", "d": "3/2014"}, {"body": "well nope quite seldom use get parameter however need work must say ca nt see server access get considered bug ca nt find something instance copying query string hash fragment nt mean delete url", "d": "3/2014"}, {"body": "backbone determines sort route last used checking application app root means url like assumed pushstate already swapped leaving search parameters would cause infinite loop case nt think", "d": "3/2014"}, {"body": "though totally agree jashkenas reply top thread kind agree dotbits opinion backbone great enforcing patterns developer expected navigate trigger true always fire bound methods route events even navigating url", "d": "3/2014"}, {"body": "need table pagination deleting row want reload url reload current page table deleted row last want reload url changing page", "d": "3/2014"}, {"body": "yeah totally tripped well fortunately several hours took time debug word adding parameter", "d": "3/2014"}, {"body": "reason choice triggering add events models particular set call added seems make sense model trigger add event soon done added collection loop causing issues testing number children list view collection length considering view listing callback fired collections add event first time fired collections length already total number passed set", "d": "3/2014"}, {"body": "krislab hi everyone comment want share solution problem people short solution available github repo backbonecollectionvalidation", "d": "3/2014"}, {"body": "looks like becoming standard see chance revisiting", "d": "3/2014"}, {"title": "computer property setter called embedded object updated", "body": "following controller coffeescript headers authorization authstring enumerableheaders key value argumentslength gt setter result header value header headerkey isnt result headerkey headervalue set headers result property headers computing works one way updated also updated however change properties object setter called expected behaviour workaround thanks", "num": "4635", "d": "3/2014"}, {"title": "wrong context block using syntax", "body": "value inside block indexcontroller itemcontroller instance using syntax allow keep context outside helper", "num": "4634", "d": "3/2014"}, {"title": "errors factory resolve routing masked unrelated error", "body": "seems like earlier error resolve handled soon enough rather becomes unreleated unclear error", "num": "4633", "d": "3/2014"}, {"title": "new superfunction inconsistency", "body": "upgraded emberjs way new works breaking existing code recreated problem jsbin recreate click links render modal dialogue template outlet named modal click close close clicked action handler executed causes modal view destroy handler executed problem event fired undefined work round creating copy like destroy finishes behaviour would expect bug", "num": "4632", "d": "3/2014"}, {"title": "set readonly property upgrading", "body": "upgraded emberjs experiencing weird behaviour computed properties tripping assertion computed property think wrong see jsbin recreate click companies link click boxes sidebar check console assertion tripped set readonly property checkedcontent object mixin defines property mixed controller like looking stack trace appears assertion triggered also seems weird think would set operation cp", "num": "4631", "d": "3/2014"}, {"title": "better documentation", "body": "better document use currently nt show api docs come places like defined", "num": "4630", "d": "3/2014"}, {"title": "pods directory structure agreed file layout", "body": "working loom templates embercli based projects trying get head around pods directory structure like sure agreed upon file structure hoping wycats someone know would give thoughts example initial blog post like models staying along adapters serializers anything doesnt change frequently think pods components nested app routes resources nested routes example assume views nested similarly controllers templates routes controllers views templates top level resource nested routes follows jjabrams resolver resolve correctly thanks changes put rjackson wanted get feel generally accepted pods file layout", "num": "4629", "d": "3/2014"}, {"title": "ability rename ember root application name application something else", "body": "seems always going root resource named application convention controller write named applicationcontroller going fill however issue application domain object meaning therefore need rename root resource something else existing way handle", "num": "4625", "d": "3/2014"}, {"title": "filterby computed property uncaught error ca nt remove item never added", "body": "encountered bug results triggered certain circumstances created jsbin recreate bug need take following steps jsbin click companies check first square sidebar click delete button main content view check last item sidebar result second callback invoked throws exception see console removeitem function index var returnvalue self mixin jsbin uses keep track items checked appcheckablemixin embermixincreate checkedcontent embercomputedfilterby ischecked appcompaniescontroller emberarraycontrollerextend appcheckablemixin weird bug circumstances happens click delete jsbin deleteall action invoked appcompaniesbulkactionsroute emrouteextend actions deleteall function var controller thiscontrollerfor companies items embera controllerget checkedcontent slice lastrecord itemsget lastobject self action delete records checked tries find first nondeleted record one found transitions first nondeleted record like comment code works fine", "num": "4620", "d": "3/2014"}, {"title": "dynamic binding declaration dereferenced binding", "body": "currently way declare binding dynamically assigned property name template contrived example js var app emberapplicationcreate appapplicationcontroller emberobjectcontrollerextend fields name email name tyler kellen email tyler sleekcodenet resulting input elements bound properties application controller instance used context template jsbin showing currently work currently way would ember team open pr introduces dereferencing operator shown yes logic binding", "num": "4619", "d": "3/2014"}, {"title": "mutableenumerable addobjectremoveobject documented", "body": "", "num": "4618", "d": "3/2014"}, {"title": "catch needs error", "body": "case bind external controller specified ember throw rather debuggable message", "num": "4616", "d": "3/2014"}, {"title": "filtering arraycontroller content wrapped itemcontrollers", "body": "want filter arraycontroller content resulting array items wrapped itemcontrollers expected behavior nt work", "num": "4614", "d": "3/2014"}, {"title": "transitioning globbing route work", "body": "think corner case nt know work would fix anyway application defining notfound route hit user plays url gives something wrong also want redirect route user try access unexisting record ie backend answer basically tried define error handler applicationroute unfortunately work though remove globbing path works redirection obviously entering unknown url made jsbin reproducing machty feel free close find relevant", "num": "4613", "d": "3/2014"}, {"title": "itemcontroller named changes context", "body": "fiddle stays outer context soon add mix changes item controller instead keeping context think unexpected work around litter item controller aliases order templates keep working see commented code fiddle think happening context block changed order work need target parent may related", "num": "4611", "d": "3/2014"}, {"title": "ls adapter", "body": "hey new ember maybe sound little silly trying screens templates application first allowing user upload image croppingediting image second screen user write message third screen thing like adding recipient enclosed another template uses outlet show current template want navigate different screens using nextprevious button want state persistent example upload picture write text come first screen want image screens thought using ls adapter would nice solution end also send data server anyone know would really helpful", "num": "4610", "d": "3/2014"}, {"title": "ember routing error navigating towards resourceroute", "body": "hi upgraded project ember towards noticed strange behaviour scenario resource called car route called products user first visits carproducts navigates towards root level route contact example provide functionality navigate back towards carproducts however click link generated linkto helper nt navigated errors turned logging noticed attempted route applicationcontactcarproducts would expect applicationcarproducts behaviour shown ember tried latest release version latest beta version provide behaviour stated previously jsbin demonstrating behaviour steps reproduce jsbin example click products carproducts nicely rendered click contact click products currentpath applicationcontactcarproducts carproducts rendered encountered behaviour whilst trying use note simplified version application car would actual carid products would categoryid used resolve products edit behaviour caused using one model found using multiple models possible previously fixes issue", "num": "4609", "d": "3/2014"}, {"title": "ember possible memory leak", "body": "spent past months building application emberjs due client requirements chose use ember data nt want dependencies alpha state put together data layer relatively simple define service classes define routes dataadapters call multiple services present data usable format started notice memory consumption keeps going application becomes overloaded fails respond reasonable amount time run chrome timeline recorder loading data seeing xhr loads result large net memory increases mb jumps data less also ran recorder another website built identical servicedataadapter architecture minus ember deferredspromises nt see spikes memory showed expected levels put together jsfiddle closely mimics time click run see memory jump hits mb stops increasing concerns super simple example small data payload lot loads much bigger data payloads watching browser come halt ideas fix need explicitly release resources something wrong causing nt choice use ember data make data work work well help ideas appreciated also posted stackoverflow nt sure defect otherwise thanks advance", "num": "4606", "d": "3/2014"}, {"title": "proposal improve brace expansion dependencies", "body": "ey guys really like new feature asign dependencies brace expansion see like would love brace expansion also accepts properties like change value property array think thanks", "num": "4605", "d": "3/2014"}, {"title": "canaryedge getting computed property dependent another computed property causes observers fire", "body": "appears recent regression latest problem occurs structure obs function observes function property function property getting value cause observer fire one two times failing entirely jsfiddle demonstrating problem latest canary jsfiddle demonstrating problem doesnt exist beta open console observer log console times", "num": "4604", "d": "3/2014"}, {"title": "sortablemixin sortascending property level", "body": "would interested pr allows optionally setting sortascending hash keys mirror values sortproperties values truthyfalsey indicate property sorted ascending descending", "num": "4602", "d": "3/2014"}, {"title": "error transitioning route gets model resource", "body": "uncaught typeerror transitioning route uses model parent resource happening resource template reference model property two levels deep created fiddle replicating issue contactsindex template reference property contactcommunicationinfomobilephoneno displayed fine contactsdetails template nt property referenced transition fails error uncaught typeerror read property communicationinfo undefined everything works fine remove property reference contactsindex template sure bug something wrong", "num": "4601", "d": "3/2014"}, {"title": "raise error message component name lacks dash", "body": "writing response tweet expected creating template named referencing view expected error message thrown warn component names must include dash actual error thrown component nt rendered renaming immediately caused component markup rendered", "num": "4599", "d": "3/2014"}, {"title": "embernamespace missing", "body": "basically title says ed tries initialize fails due", "num": "4593", "d": "3/2014"}, {"title": "wrong information documentation", "body": "new ember worked rails already guess following information docs correct guess line comment miss something", "num": "4589", "d": "3/2014"}, {"title": "emberviewtargetactionsupport triggeraction support parameters", "body": "actions ability accept parameters view mixin adding support actions nt yet", "num": "4588", "d": "3/2014"}, {"title": "emberrsvppromise could accept context argument", "body": "would nice could pass context ie would consistent emberrun argument order breaking change return new emberrsvppromise function resolve reject pass argument believe unused return new emberrsvppromise function resolve reject able way exampl context maintained resolve reject undefined passed properly return new emberrsvppromise emberrunbind function resolve reject", "num": "4587", "d": "3/2014"}, {"title": "incrementproperty decrementproperty behavior inconsistent type coercion", "body": "jsbin seen release latest beta latest canary issue number property incrementing decrementing number property string using methods passing assertion type coercing result string plus sign inconsistencies two want open pull request always return number situation", "num": "4586", "d": "3/2014"}, {"title": "useless error message resource route w dynamic segment", "body": "whenever create resource route specify model hook resolving model error somewhat useless eg app app emberapplicationcreate approutermap function thisresource search path search personid appperson emberobjectextend error resolved creating implementing hook takes param returns object", "num": "4583", "d": "3/2014"}, {"title": "findby crashing safari", "body": "bug webapp safari would crash certain ui interaction decided debug today found following code block causing crash ember note block code crash browser device guys know going unable get crash report anything useful safari", "num": "4582", "d": "3/2014"}, {"title": "create deepclone", "body": "understand behaves way often catches beginners lot saying classes objects expected create mean give entirely fresh one stamped class think would useful make create actually deep clone na\u00efve feel act like factory maybe need specify create deepclone createshallow shallow clone namedclass emobjectextend names julian var julian namedclasscreate var david namedclasscreate julianget names addobject harry davidget names lt julian harry", "num": "4581", "d": "3/2014"}, {"title": "transition object implement amp", "body": "consider transition object actually subclass", "num": "4579", "d": "3/2014"}, {"title": "emberrunqueues contains duplicate queues", "body": "quick guess following module invoked", "num": "4578", "d": "3/2014"}, {"title": "actions ca nt use super", "body": "actions like becamevisible becamehidden deprecated defined within actions object view however also means ca nt abstract code anymore example modal showing node appmodalview emberviewextend tagname div classnames modal fade willtransition false isvisible false layoutname modal show function modal show hide function modal hide actions becamehidden function modalbackdrop remove appplayersshowview appmodalviewextend willtransition false actions becamehidden function thisget willtransition thisget controller transitiontorootroute thissuper thissuper work", "num": "4576", "d": "3/2014"}, {"title": "exception thrown caught", "body": "tested final nt exceptions caught nice error message logged", "num": "4575", "d": "3/2014"}, {"title": "router transitions appear eager", "body": "may intentional change seen documentation effect versions beta canary reduction test procedure click link slow error note even though hook returns promise substate defined still immediately transition slow route follows behavior eager transitions described docs though follow lazy pattern behavior different nt know much breaking change certainly different needs addressed blessed patched release machty rjackson", "num": "4574", "d": "3/2014"}, {"title": "router error substate promise rejection results redirect", "body": "versions occurs reduction test procedure click link slow error timeout triggers seconds click blue note substate replaces blue route feel like missing somewhere machty", "num": "4573", "d": "3/2014"}, {"title": "queryparamsnew replace state breaks back button sometimes", "body": "example like example pages index posts posts page query params page default value set postsroute use replace state links pages posts link query params try flow visit index posts press back button browser back index instead think issue without refreshing page visit index posts press back button time browser back expect refresh page try step back button issue appears remove query params posts link try step result step back page", "num": "4572", "d": "3/2014"}, {"title": "query params values null undefined get serialized strings", "body": "", "num": "4570", "d": "3/2014"}, {"title": "save fixture w polymorphic belongsto breaks", "body": "fixtureadapter requires polymorphic types specified however save causes jsonserializer invoked saves merely saved object subsequently broken", "num": "4568", "d": "3/2014"}, {"title": "error redefine property name handlebar template accessing property", "body": "template modelpartners array objects tried iterate print name properties got error saying partner modelpartners partnername got error saying redefine property name tried helper see partner object correct show correct object information including name property partner modelpartners log partner iteration print information modelpartners correctly ember environment information ember inspector trace could issue help much appreciated", "num": "4567", "d": "3/2014"}, {"title": "computed property nt work semanticui modal window", "body": "although think semanticui evil thing report please ignore problem ember please see jsbin click button isparty computed property nt work change isadmin property fact isparty works clicking button fyi referencing isparty outside bindattr works thanks", "num": "4566", "d": "3/2014"}, {"title": "backburner phantom test failures since backburner update", "body": "seeing following failure running phantom since reproduce via either suggest revert get master passing fix", "num": "4564", "d": "3/2014"}, {"title": "errorloading substates toplevel resource seems weird", "body": "take following javascript approutermap function thisresource foo path foo id function thisroute baz thisresource bar path bar id function thisroute baz seems promise rejects either render template likewise errors application templates exist clarity using sure bug much implementation issue wanted render generic error fallback base template ca nt write action render template b render error template want application nt seem intuitive guide also make abundantly clear example render base template without even looking confusing well wanted open issue incase missing something", "num": "4560", "d": "3/2014"}, {"title": "mutliple", "body": "currently ember allows one condition embeds inside helper wondering reason nt support multiple conditions implement another view helper multiif", "num": "4556", "d": "3/2014"}, {"title": "mootools ember breaks ember", "body": "use ember chat widget control pages running latest issue mootools page loading latest version example issue fails regardless set functionprototypeextend workaround nt work either help would greatly appreciated", "num": "4554", "d": "3/2014"}, {"title": "old prototype ember breaks ember", "body": "updated example unceus created earlier closer actually production result setting help setting fix issue temporary workaround want help get ember fixed yall could offer insight happy investigate case unclear use ember chat widget control pages running", "num": "4553", "d": "3/2014"}, {"title": "reducecomputed leaks instancemetas", "body": "example instancemetas objects reducecomputedpropertys stored rcp instance ie descriptor guidoftheobject propertyname see rcp ca nt know object garbage collected hence instancemetas array grows unbounded possible fix would extend ember meta include could used store object instancemetas furthermore would facilitate creating new types cps beyond reducecomputed require metadata around caching eg throttleddebounced computed properties cc hjdivad", "num": "4552", "d": "3/2014"}, {"title": "prototype ember breaks ember", "body": "dropping prototype lt app emberjs causes ember break stack trace easily recreated cloning ember starter kit including prototype anywhere indexhtml file suspect error caused prototype overwriting native arraymap method embera using map implementation fiddle using code ember test kit note disabling prototype extensions andor shims solve issue", "num": "4551", "d": "3/2014"}, {"title": "add multiple checkboxes selection recipe cookbook", "body": "collaboration rjackson lindseys mixonic irc came example show show multiple checkboxes allow selection without modifying original models make way cookbook", "num": "4547", "d": "3/2014"}, {"title": "ca nt access application controller routebeforemodel inital request", "body": "redirecting guide example using get application route route order redirect based application state however route initial request fails error message code jsbin reproduce go output click link getting controller works hit making route inital request page empty console show error", "num": "4544", "d": "3/2014"}, {"title": "hardcoding naming conventions lame", "body": "", "num": "4543", "d": "3/2014"}, {"title": "correct bower jquery version dependency", "body": "current jquery dependency bower says jquery lt bower nt include info fix", "num": "4542", "d": "3/2014"}, {"title": "memory leak issue transitioning route", "body": "memory leak navigating one route another transitioning route entire dom previous rendered template gets added detached dom tree increasing memory consumed increases noof nodes template increases jsbin illustrating issue steps reproduce enter route directly new nodes noof nodes template gets added detached dom tree issue seems occur due emberselect", "num": "4541", "d": "3/2014"}, {"title": "unable multiple transitions modelfor", "body": "multiple transitions route route passing model parent route returns undefined stops transition cc machty stefanpenner", "num": "4535", "d": "3/2014"}, {"title": "embercomputed track changes bindings", "body": "one projects noticed unexpected behaviour embercomputedequal would always return false properties compared locally declared bindings although equivalent handwritten property comparing properties would return true always produces false whereas produces true values bound equal javascript somepropwantedbinding controllermodel somepropbinding parentviewsomeprop embercomputedequal someprop somepropwanted function return emberisequal thisget someprop thisget somepropwanted property somepropwanted someprop duplicated", "num": "4527", "d": "3/2014"}, {"title": "handlebars input helper embertextfield view picking value entered chrome autofill", "body": "duplicate issue closed original issue explains perfectly simple form using input helper controller call thisgetproperties submit works fine enter values form however google chrome autofill already entered values properties empty suspect result autofill triggering onblur event values bound particular usecase work around others included also experiencing issue see comment issue question", "num": "4524", "d": "3/2014"}, {"title": "crash default action error handler assumes originroute router reference", "body": "using eak ember apparent syntax error one handlebars templates causing undefined exception occur routehasbeendefined ember default action handler errors assuming originroute object field thusly trying see undefined route set looks like note router field perhaps assertion perhaps sort guard would appropriate cases appropriate resolved handler info object router field possibly caused eak fancy module resolver alas much newbie quite sure write good standalone test case cheers", "num": "4523", "d": "3/2014"}, {"title": "linkto active class present incorrect links", "body": "seems link bug ember many links class ember ember notice click person people links class edit jsbin using ember canary demonstrate bug", "num": "4522", "d": "3/2014"}, {"title": "use uses namespaces", "body": "something like nt work replaces later trying append view fails find route view actually works fine manually called", "num": "4517", "d": "3/2014"}, {"title": "prototype extensions tested properly", "body": "definitely due metalruntime see creating issue others know work evening", "num": "4514", "d": "3/2014"}, {"title": "camelize working prototype canary", "body": "canary hello world camelize hello world emberstringcamelize hello world helloworld see", "num": "4512", "d": "3/2014"}, {"title": "changes inside willdestroyelement silent", "body": "changes inside effect object observers demo component used like gets changed inside component effect believe work expected example component want store outside component nt wo nt sync every millisecond ca nt without ugly setinterval seems reasonable save component destroyed", "num": "4504", "d": "3/2014"}, {"title": "computed properties guide", "body": "page details hard grasp ember call computed property setters getters want use computed property setter need check number arguments determine whether called getter setter note value returned setter cached property value mean reality return cached perhaps pointer page describing detail would nt bad", "num": "4503", "d": "3/2014"}, {"title": "misleading info naming conventions page", "body": "following text naming conventions page bit misleading eyes usually guess names guide outlines one place naming conventions following examples app name chose namespace represent ember application created choose name want application show later create ember application focus conventions bold text questioning thing page comes getting started guide user shown create basic application people read guides start end feels like sentence would need changed think", "num": "4501", "d": "3/2014"}, {"title": "everyproperty referred todomvc guide", "body": "read page two suggestionsquestions perhaps add link explanation method ie api documentation emberenumerable everyproperty documentation states deprecated guess would make sense fix guide use method instead assume nowadayscorrect approach done", "num": "4500", "d": "3/2014"}, {"title": "unclear wording regarding acceptingedits guide", "body": "hi find wording bit confusing pressing key trigger acceptchanges event instance todocontroller moving focus away trigger focusout event calling method acceptchanges view instance todocontroller acceptchanges described way makes hard reader understand whether actually method event smiley yet familiar enough ember able authoritatively describe details accurately enough pr definitely feel fixed someone", "num": "4499", "d": "3/2014"}, {"title": "setinnerhtmlwithoutfix breaks content", "body": "called following whitespace added readability call elementinnerhtml html causes tags stripped reading back statement evaluates returns apparently ie nt support col colgroup frameset html style table tbody tfoot thead title tr cf", "num": "4495", "d": "3/2014"}, {"title": "query params new array query parameters nt working right linkto", "body": "machty pulled latest master since merged route query parameters arrays default values showing url nt appear happening array query params parent routes also show child route query parameters incorrectly appear happening even call lastly clicking second third etc time continues adding characters encoded query param js bin click test default query params array foo show url clicking test add encoded characters query parameters three params clicking foo shows url clicking add encoded characters query params foo also getting unencoded double quotes actual app unable reproduce js bin open another issue reproduce thanks", "num": "4494", "d": "3/2014"}, {"title": "query params sometimes undefined string", "body": "queryparamsnew feature enabled model hook one routes looks like notwithstanding naivety request sometimes sent server inspected params object model hook sometimes includes fields string value undefined happens specifically entering route first time via linkto specify query params manually visit url default values get applied params entered manually", "num": "4493", "d": "3/2014"}, {"title": "ember data sends get message server storedeleterecord called", "body": "please see calling storedeleterecord triggers get message server storedestroyrecord called instead emberdata first send get followed delete message based documentation understanding calling deleterecord trigger message server calling destroyrecord trigger delete message two models onetoone onetonone relationship two models onetomany relationship showed expected behavior tested jsbin example using python simplehttpserver serving file looks like scenarios id sname result id sname result", "num": "4489", "d": "3/2014"}, {"title": "observablepropertywillchange observablepropertydidchange propagate sibling component", "body": "particular application need trigger changes inputs manually want validate data first using propertywillchange propertydidchange methods event seem propagate observers added addobserver components page work observers component indicates issue see attached jsbin demo", "num": "4487", "d": "3/2014"}, {"title": "focusin hijacks custom event listeners", "body": "warning issue involves hackish way initializing audio element human interaction ios mobile device requirement initialized click touchstart event sure popular issue others way around put generic event listener application view appapplicationview emberviewextend implemented view defined hack longer worked jquery event listener would fire saw somewhere documentation actions continue bubbling hoped would work views andor party jquery event listeners apphumantextareaview embertextfieldextend work use jquery event listeners avoid using event listeners bubbling hijacked apphumantextareaview embertextfieldextend didinsertelement function", "num": "4485", "d": "3/2014"}, {"title": "loadingroute called dynamic routes", "body": "loading resources dynamic segment loadingroute call first time procuctx entered create jsbin demonstrate", "num": "4482", "d": "3/2014"}, {"title": "solved", "body": "", "num": "4481", "d": "3/2014"}, {"title": "observers", "body": "hello ember team studding ember line personset firstname brohuda observer fire observer fire suppose fired line var person personcreate firstname yehuda lastname katz added line fullnamechanged function consolelog fullnamechanged thisget firstname observes fullname init output fullnamechanged yehuda right understood something wrong", "num": "4480", "d": "3/2014"}, {"title": "reserved route name basic", "body": "noted question basic seems reserved route name way resolver works exactly sure documented feel like mentioned somewhere router dsl nt api entry would suggest putting", "num": "4474", "d": "3/2014"}, {"title": "linkto active class behaviour parent routes broken", "body": "allowed naming nested root urls different specifying path route definition however changed behaviour class added particular parent routes little bit difficult describe strangeness two js bins illustrate quite clearly first used second note second jsbin links regardless context cc elucid", "num": "4471", "d": "3/2014"}, {"title": "inconsistent loading substate behavior", "body": "transitioning routes least two ways inject promise pass promise source route method model argument return promise one destination route model hooks reading asynchronous routing loading error substates pages routing guide two interchangeable though depending method used get different loading substate jsbin demonstrates issue", "num": "4470", "d": "3/2014"}, {"title": "missing parenthesis documentation", "body": "hi first issue opened kind line appears reject new error getjson failed status thisstatus reject new error getjson failed status thisstatus missing pharentesis end", "num": "4467", "d": "3/2014"}, {"title": "store push vs pushpayload vs createrecord", "body": "think would good api guides made clearly differences methods getting new records store first glance appear thing comes things like filtersbindingsunloading different", "num": "4466", "d": "3/2014"}, {"title": "hitting enter key internet explorer text boxes multiple buttons", "body": "form multiple buttons using internet explorer tested ie attribute work action first button jsfiddle recreate click within text textbox put focus hit enter chrome message expected action two internet explorer message action one occurs internet explorer compatibility mode lower nt work jsfiddle example looked think issue suppressing default keypress event behavior chrome events fired within function click textbox generates event hitting enter generates immediately event ie event never fired sure something handled within ember whether need handle elsewhere customized view class", "num": "4464", "d": "3/2014"}, {"title": "embertextarea appear support title", "body": "outline full attributes textarea element support embertextarea nt appear support title", "num": "4463", "d": "3/2014"}, {"title": "embercomputed execute getter", "body": "hi first like thank great job amazing framework makes life easier every single day problem using embercomputed js var defineproperty function type options options options return embercomputed function key value var currentvalue thisattributes key argumentslength gt currentvalue value emberset thisattributes key value else emberisnone currentvalue return currentvalue else return optionsdefaultvalue appmyclass emberobjectcontrollerextend displayname defineproperty string var myobject appmyclasscreate displayname thename consolelog myobjectget displayname displays undefined nt understand displayname undefined defined instance precise add volatile embercomputed displayname returns correct value maybe cache issue", "num": "4462", "d": "3/2014"}, {"title": "error thrown emberroute bubble eventserror hook", "body": "using version reproduce using jsbin gist expect logged followed however gets logged error get caught bubbled hook sure bug understood machty gist incorrectly another way throwing error", "num": "4461", "d": "3/2014"}, {"title": "dynamic property returned helper always string", "body": "dynamic properties ember controller meaning names known runtime would like access within handlebars template dynamic properties arrays thus want use helper loop output list order access properties write custom handlebars helper reason go helper data always output screen string vs array item item filtereditem filterbyvalue item filtereditem call dynamic property using hardcoded name works fine item red item jsbin illustrate issue reference got concept custom helper dynamic props appears similar issue", "num": "4460", "d": "3/2014"}, {"title": "linkto helper related queryparams unreachable return", "body": "closure compiler found unreachable return emberroutinglibhelperslinktojs stray line bug code nt intended", "num": "4458", "d": "3/2014"}, {"title": "emberimportsjquery working expected", "body": "greetings fellow emberthusiasts grin loading ember application page two copies jquery version loaded website version noconflict mode injected use ember discovered line code appears backwards ember application ends using wrong jquery noooooo bomb emberimports useful expect support expectation handlebars set way say ye mega", "num": "4449", "d": "3/2014"}, {"body": "expected", "d": "3/2014"}, {"body": "stefanpenner thanks proper ember way trying", "d": "3/2014"}, {"body": "unsure agree premise issue purpose bufferproxy template model think scenario would use would get item controller instance item array contentmodel would two things specifying itemcontroller seem like opposing features perhaps assertion would useful style used itemcontroller", "d": "3/2014"}, {"body": "rjackson maybe misunderstanding expecting behavior inside outside helper presence itemcontroller nt change context template", "d": "3/2014"}, {"body": "jsbin pasted seem like appropriate behavior point specifying change context item controller instance context template upon iteration different contexts iteration initial jsbin", "d": "3/2014"}, {"body": "rjackson denisnazarov seems discussion", "d": "3/2014"}, {"body": "thanks linking", "d": "3/2014"}, {"body": "rjackson point keywords change context itemcontroller preserved", "d": "3/2014"}, {"body": "stefanpenner item controller specified would get new controller wrapping content block controller context seems foundational way item controllers work initial jsbin item controller instance content would outer context could still access outer array controller default context template must item controller instance", "d": "3/2014"}, {"body": "itemcontroller wraps item point keywords preserve context unsure interpreted way itemcontroller becomes blocks context", "d": "3/2014"}, {"body": "rjackson problem clearly bug understand bother people actually several ways define context template could surprising break app needchoose introduce itemcontroller helper used refer outer context may wrong feel like cases people want refering itemcontroller want refer outer context anyway suggestion right way able access outer context inside itemcontrollerdecoratedeachloop", "d": "3/2014"}, {"body": "think distinction form clear guide template inside block repeated item array context template set current item alternative form change scope inner template useful cases need access property outer scope within loop context changing introducing itemcontroller wrong since directly access properties outer scope", "d": "3/2014"}, {"body": "denisnazarov understand case would access itemcontroller properties keyword considering left side controller underlying model", "d": "3/2014"}, {"body": "item controller presumably objectcontroller wraps model access properties properties controller would resolve expected would also proxy model properties since extends objectproxy", "d": "3/2014"}, {"body": "denisnazarov whoah sorry missed confused considering agree definitely refer outer context", "d": "3/2014"}, {"body": "seems like similar confirm", "d": "3/2014"}, {"body": "rjackson seems exactly uneducated guess runloop finished time async operation finished", "d": "3/2014"}, {"body": "rjackson close issue favour", "d": "3/2014"}, {"body": "lets leave open adds context super implementation changed working blog post release think given issue include section change say yet likely called", "d": "3/2014"}, {"body": "rjackson changed seems long ago", "d": "3/2014"}, {"body": "hell wheels go wow thanks brining need good idea many people bit", "d": "3/2014"}, {"body": "oneway computation therefore readonly property event sure would expect happen could change value", "d": "3/2014"}, {"body": "expect work way used work code points ember bug happen point code trying change value check comment", "d": "3/2014"}, {"body": "gordonkristan agreed happening unsure given jsbin briefly glanced guess set", "d": "3/2014"}, {"body": "rjackson gordonkristan set guarantee agree", "d": "3/2014"}, {"body": "actually set code working jsbin happening model inherited since leaf route parent since default going set contentmodel alias setup point attempts set content alias chain added", "d": "3/2014"}, {"body": "rjackson thanks unexpected would creating alias try set property", "d": "3/2014"}, {"body": "clarify fix add model hook", "d": "3/2014"}, {"body": "alias two way setting either side attempt update", "d": "3/2014"}, {"body": "using would also fix require model hook overridden example jsbin", "d": "3/2014"}, {"body": "rjackson never considered thank clearing", "d": "3/2014"}, {"body": "happy help glad turned straightforward tad obscure fix", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "tomdale may also provide valuable input", "d": "3/2014"}, {"body": "way configure default route namespace really rename domain object something else app could reopen router javascript change root namespace ember applications application root approuterreopenclass map function callback var router thisrouter router router new router routercallbacks routertriggerevent triggerevent thisreopenclass router router monkeypatching obviously pretty frail though test carefully keep mind upgrades", "d": "3/2014"}, {"body": "hmok guess still think ember expose something configurable still possible someone else domain object named root smile", "d": "3/2014"}, {"body": "yep sounds like reasonable feature request", "d": "3/2014"}, {"body": "kinda like idea", "d": "3/2014"}, {"body": "wo nt easy sexpr", "d": "3/2014"}, {"body": "everything easy fugly sexpressions think dereferencing operator makes total sense meaningful shorthand", "d": "3/2014"}, {"body": "move call sexpressions", "d": "3/2014"}, {"body": "endash ya call sexpressions instead", "d": "3/2014"}, {"body": "provide jsbin", "d": "3/2014"}, {"body": "see browser console", "d": "3/2014"}, {"body": "see console uncaught referenceerror generated index controller needs include application access application controller generated index controller generated index controller needs property array missing", "d": "3/2014"}, {"body": "seems like chrome bug maybe canary channel firefox safari provide great errors", "d": "3/2014"}, {"body": "seen times minor regressions may good open issue ca nt much end", "d": "3/2014"}, {"body": "stefanpenner would explain using chrome", "d": "3/2014"}, {"body": "answer use thanks chicagoing cc embernyc", "d": "3/2014"}, {"body": "seems like transitioning globbing route anywhere work", "d": "3/2014"}, {"body": "context seems expected behaviour want maintain outer scope use directive imho might help", "d": "3/2014"}, {"body": "thanks work around problem without change argue setting nt changing entire context block see affect actions anything else although nt know possible separate two concepts", "d": "3/2014"}, {"body": "fair enough guess understanding intent controller ember decorate model logic template nt item controller would fulfilling context talking controller nt solely wrapper actions inputs also wrapper values outputs perspective part entire point wrappering item itemcontroller provide model object particular piece functionality andor logic nt original model objects nt implementation decorator pattern sure read might worth reread", "d": "3/2014"}, {"body": "yep named context block nt change eg items item item items parent controller item item point giving item name context block nt change refer things outer context without resort etc case nt solely decorating model decorating whole block lead confusion", "d": "3/2014"}, {"body": "really good point making differentiation rationale using named really quite interesting professing kind expert said though one way looking item items actually nt changed controller also therefore model scope simply decorated block however providing itemcontroller change controller therefore model scope case though model itemcontroller blank therefore filled item controller choose use named tandem specified itemcontroller mind nice core devs chimed explained actual intent behind things concrete canonical rationale could collectively subscribe probably place discussion scoping contexts maybe could talk discuss instead going leave ticket open", "d": "3/2014"}, {"body": "think current behaviour kind makes sense realise item means actual item yielded block similar obviously view whole block model view makes sense maybe item controller delegate parent controller instead model case named get thoughts order open topic discuss later nt think bug anymore close", "d": "3/2014"}, {"body": "cool actually say items actually controller model controller wraps model see quite easily define property controller name attributeproperty model overrides model property name sure decorating whole block means yeah look forward discuss topic", "d": "3/2014"}, {"body": "perhaps stack overflow better place ask questions nt actually problems framework", "d": "3/2014"}, {"body": "yeah perhaps sorry", "d": "3/2014"}, {"body": "briebug looked bit wonder profiling environment properly isolated chrome show shared memory heap whole profile window testing suggest things create clean chrome profile extensions play use new window tab open try recreating behavior outside jsfiddle jsfiddle greatly confuse debugging process based look convinced memory leak happening maybe something specific application isolate problem clearly happy take another look", "d": "3/2014"}, {"body": "mixonic thanks looking detail briebug reviewfollow steps listed mixonic share sample repo us still demonstrates issue", "d": "3/2014"}, {"body": "tag seems ok worth nt done bisect yet", "d": "3/2014"}, {"body": "started sure commit cc stefanpenner fails passing", "d": "3/2014"}, {"body": "think", "d": "3/2014"}, {"body": "idea try take look today break core would handy someone provide failing test form", "d": "3/2014"}, {"body": "ya one better test fix", "d": "3/2014"}, {"body": "sure issue related arraycontroller observer nt fire observing stuff firstobject uncomment firstobject template thisget firstobject observer fires initially intended behavior console log every time hit button", "d": "3/2014"}, {"body": "thx jsbin believe endash fix squash issue", "d": "3/2014"}, {"body": "think dave issue simple lazy computed property issue jsbin set nt demonstrate bug commit fixed behaviour opposite getting property fixed bug case getting restores expected functionality case", "d": "3/2014"}, {"body": "open separate issue", "d": "3/2014"}, {"body": "davechoi endash suggests scenario actually bug expected", "d": "3/2014"}, {"body": "stefanpenner expected seems like design problem expected nt know idiomatic way write code would general design issue observing cp making cp eagerly evaluated eg think could make argument either way case enumerable seems like clearly something nt require explicit", "d": "3/2014"}, {"body": "davechoi cp must consumed least inert merely observing cp force compute go path downsides dark indeed eager consumption following adding observer trick", "d": "3/2014"}, {"body": "stefanpenner nt need actually consume get property observer workaround", "d": "3/2014"}, {"body": "lukemelia ya good point sleep", "d": "3/2014"}, {"body": "stefanpenner understand computing every cp every time one dependencies changes made without side effects like supposed updating need makes lot sense good performance everything extends cps made cps however deep go using observer explicitly side effects reacting changes property every time cp dependency change want observer fire whether cp consumed elsewhere things like unlikely ever actually use template code unless explicitly workaround put cp template user looking implicitly continuously consumed dependencies change updated write method observes cp program looking may concerned new value nt understand would nt warrant initial implicit consumption seems like get inside method changing interface lazy eval implementation detail feel like add observers otherwise might break app someone changes template include certain cp edit also makes user know property cp writing observer fragile regular property turns cp unless always use init workaround", "d": "3/2014"}, {"body": "talk explicit examples abstract hopes dreams often reorganizing code cp based solution graph gets built consumption quite literally pulling appropriate data data layer using observers important realize current caveat ensure consumed correctly past every cp computed would compute observed systems would suffer large amounts unneeded internal churn toyed idea types cp one todays semantics another past semantics eageron observation semantics unfortunately hard things hard especially teachinglearning contraints added technical constraints", "d": "3/2014"}, {"body": "stefanpenner first post thread explicit example jsbin simplified code extracted one projects expected behave one way observer fires firstobjectvalueslength changes behaved another way observer never fires matter many times property changes arraycontrollerfirstobject nt consumed know going behave way know cps lazily evaluated firstobject cp nt consumed somewhere force state rely working regardless factors tell run init manually consume cp even nt care new value counterintuitive using rendering object firstobject refers template via nt call nt seem like something ember users know accept community railed angular fact template writers know implementation details regarding whether property static computed changed static computed template broken bad maintenance pretty much issue writing controller method observes property object nt write go read source object know whether cp introspect somehow safe observer works today template ux decides want change template display instead observer stops firing unless safe order reliable observer resistant template changes implementation changes even dependency object external interface every time use functionobserves clear talking specifically case observation pertains functionproperty cps observing dependencies nt know implementation details related suffice say behind property cps running consumed part nt understand want observe cp change hugely expensive computation cp nt need specific value cp forced compute first observers already explicitly watching cp dependencies instead cp values changes save computations reread blog post times describes issues cps depend cps nt seem draw clear link observes", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "lineman works either extension nt think issue tue mar pm ilya radchenko notifications githubcom wrote reply email directly view github", "d": "3/2014"}, {"body": "yeah neither making sure smile", "d": "3/2014"}, {"body": "nt already expected behaviour handlebars nt render error simply refer nonexistant reference ie hello nt defined hello", "d": "3/2014"}, {"body": "problem", "d": "3/2014"}, {"body": "believe rjackson looking", "d": "3/2014"}, {"body": "pr fixing", "d": "3/2014"}, {"body": "nope correct nested resources automatically named according parent wanted postspost make code thisresource postspost example post could nested one resource read code sample posted explained resource beginning route controller template name even though post resource nested route named apppostroute controller named apppostcontroller template post nest route inside resource route name added resource name march joshua muheim notifications githubcom wrote new ember worked rails already guess following information docs correct image image guess line comment postspost route miss something reply email directly view github", "d": "3/2014"}, {"body": "understand one key differences resets routename scoping case would correct wanted makes sense certain conditions could always declare", "d": "3/2014"}, {"body": "thanks guys sorry posting question thought bug otherwise would asked stackoverflow thanks replying keep good work", "d": "3/2014"}, {"body": "jmuheim could felt like though explain documentation using documentation git project", "d": "3/2014"}, {"body": "julianleviston recipher pointed described already resource beginning route controller template name even though post resource nested route named apppostroute controller named apppostcontroller template post nest route inside resource route name added resource name would interesting one would nest within though", "d": "3/2014"}, {"body": "yeah whole thing incredibly confusing resource route differ use documentation says nest routes nest resources says following strikes contradictory routes within resources perhaps understanding nesting means though think probably discussing actual documentation repo rather ember proper repo", "d": "3/2014"}, {"body": "julianleviston saying nest route resource completely agree constant point confusion hopeful reworked somewhat changing default wait would likely result backwards incompatible change could add option allow optin nesting resource names change default", "d": "3/2014"}, {"body": "submitted new feature would allow namespacing mentioned please note made default see", "d": "3/2014"}, {"body": "yes initial confusion even nest url post route", "d": "3/2014"}, {"body": "given confusion around words picked router whenever happens occur probably clearer terms cc machty wycats tomdale ebryn improve docs explain got picked", "d": "3/2014"}, {"body": "thought agreed loosen route nesting restriction approved model inheritance", "d": "3/2014"}, {"body": "orospakr send value view property argument sent action property defaults view often want using finally specify option invoking eg", "d": "3/2014"}, {"body": "lukemelia ah yes saw however unless use hash allows send back one parameter unlike action parameters specify template besides passes view object back first parameter thought fairly standard pattern loath mess felt like nt meant used pass back arbitrary parameters perhaps misguided definitely job thank", "d": "3/2014"}, {"body": "turns javascript already feature js return new emberrsvppromise function resolve reject bind context please note include polyfil app used browsers compatibility chart also last example meant wrapping foreign async callbacks function binding run function", "d": "3/2014"}, {"body": "thanks stefanpenner", "d": "3/2014"}, {"body": "oh saw open merge request describing behavior", "d": "3/2014"}, {"body": "closing favor", "d": "3/2014"}, {"body": "double check master suspect modelstore without method see solution us detect something like throw assertion got chance take stab pr", "d": "3/2014"}, {"body": "switch foreach instead thought know", "d": "3/2014"}, {"body": "current behavior correct want following places names prototype sometimes wanted following creates new array instance", "d": "3/2014"}, {"body": "yep understand current behaviour snags people lot though probably clearly marked documentation going going go seemed remember back maybe imaginging things still think default make simpler often names julian much smaller simpler names function return julian property wow mouthful maybe compromise could function called make something deepclone unless specify something prototypeproperty something way explicit keeps everyone happy maybe shut reason confuses people contra ruby smalltalk java objective c php etc etc possibly self mostly reason contra javascript prototype based language obviously point though advertising ember classes objects yet nt behave like people would expect coming classobject oop systems mostly classobject oop language prototype one keen get us embrace fact clearly documentation possible", "d": "3/2014"}, {"body": "nt contra languages infact parallel although admit getting grip prototype chain works js likely biggest source confusion aim augment js depart core idioms anyways simple rule calling designing class calling instance design class array reside class instances way design class function part class instance improving docs changes extend adding confusing make", "d": "3/2014"}, {"body": "another example stefanpenner saying julianleviston sure know might helpful others coming google share prototype common need javascript namedclass emobjectextend names julian namedclasscreate b namedclasscreate anamespush robert bnames gt julian robert store instance javascript namedclass emobjectextend needed helpful consumers know namedclass expects set names emberrequired namedclasscreate names julian b namedclasscreate names robert anamespush stefan bnames gt robert", "d": "3/2014"}, {"body": "uhhhhhhh", "d": "3/2014"}, {"body": "working pr jsbin demoing error canary build", "d": "3/2014"}, {"body": "fixed", "d": "3/2014"}, {"body": "work within actions action parent classes action class called sure seeing behavior definitely work", "d": "3/2014"}, {"body": "deprecation warning triggered somewhere code using closing issue", "d": "3/2014"}, {"body": "known backburner issue", "d": "3/2014"}, {"body": "additional note eager nt appear existing controller view teardown occurring change location bar occurs different stage process might less issue imply risk polluting history stack", "d": "3/2014"}, {"body": "sounds like describing embereagerupdateurl enabled default beta canary details please confirm issue closed", "d": "3/2014"}, {"body": "confirm intentional thanks pointing feature missed", "d": "3/2014"}, {"body": "ya mimics behavior expect", "d": "3/2014"}, {"body": "thanks denisnazarov tracking one ping se\u00f1or machty", "d": "3/2014"}, {"body": "machty could use help", "d": "3/2014"}, {"body": "struggling last night sure totally undesirable say following controller set refresh page expected behavior nt seralize url controller property set default value similar problem previous implementation ambiguous falsy values actual value false seems ambiguous", "d": "3/2014"}, {"body": "another example using boolean query params default value set setting actually sets string version", "d": "3/2014"}, {"body": "heroiceric compelling reason setting life time going boolean", "d": "3/2014"}, {"body": "might come wrong curious use cases serialization corner cases", "d": "3/2014"}, {"body": "machty tried show example use case jsbin example displaying list users want able filter list contains either users admin users nonadmin users want see users would basically removing filter situations like query params meant", "d": "3/2014"}, {"body": "ideally urls would something like users shows users users admintrue shows admins users adminfalse shows users admins", "d": "3/2014"}, {"body": "heroiceric machty think idea defaultvalue controller nt defined would default using strings would explain end string versions since serialization defaults strings think want property set need get type somewhere else machty would good reason ability adding type configuration route could set type set default", "d": "3/2014"}, {"body": "shaunc believe belongs ember data repo could reopen", "d": "3/2014"}, {"body": "ah sure", "d": "3/2014"}, {"body": "finally resolved issue used following codes model hook got error model function return new emberrsvppromise function resolve json data server userinfo uid username isregistered email partners value name asm idx value name needed cloning variable calling please see codes details think due fact object variable type type used directly model function return new emberrsvppromise function resolve json data server userinfo uid username isregistered email partners value name asm idx value name cloning retobj using jqueryextend resolves error saying uncaught typeerror redefine property thanks tried help issue please feel free comment think something missed", "d": "3/2014"}, {"body": "interprets asdf literally interprets asdf bound property", "d": "3/2014"}, {"body": "stefanpenner thanks result old", "d": "3/2014"}, {"body": "xenyou works exactly like docs case nt see isparty class cp false thisisevery isadmin returns false jane john admin isparty class bound think close issue", "d": "3/2014"}, {"body": "point instruction reproducing issue access press button type isadmin true console see isadmin changed console type isadmin false console display isadmin changed see message skip see isadmin changed", "d": "3/2014"}, {"body": "try instead appget set isadmin true appget set isadmin false worked fine", "d": "3/2014"}, {"body": "julianleviston way also doe nt work click button first see image isadmin changed show", "d": "3/2014"}, {"body": "sorry yeah misunderstood trying think got conflicts frameworks included ember works fine bound classnames normally good luck maybe stack overflow", "d": "3/2014"}, {"body": "yeah nt really think ember problem maybe semanticui evil thing ember sure think need help ember developer debug reported maybe stack overflow nt help case", "d": "3/2014"}, {"body": "revert pr cc ebryn wagenet", "d": "3/2014"}, {"body": "also jsbin play", "d": "3/2014"}, {"body": "everything actually working intended important piece figure pivot route pivot route route directly one errored spite path feels like two levels actually one level hook rejects route one place go application route fun story though modify approach make two levels approach get exactly want nominating closed cc machty maybe add bit color commentary docs", "d": "3/2014"}, {"body": "poc looks like define handlebars ember function hb ember generic multiif directive usage multiif html multiif example multiif true true true gt evals true html multiif multiif true false true gt evals false html multiif emberhandlebarsregisterhelper multiif function cast arguments object array var args arrayprototypeslicecall arguments var options args argslength", "d": "3/2014"}, {"body": "easiest way logic looking would use computed property distilled single boolean value would likely also easily implemented handlebars helper perhaps example shoot less logic template layer defer types calculations backing controller immediately obvious expected behavior would could could possibly many variations would consider ambiguity main reasons exist box", "d": "3/2014"}, {"body": "immediately obvious least multiif anding values nt better leave controller logic templates nt good imho", "d": "3/2014"}, {"body": "rjackson said found adding properly named computed properties cases actually improved readability templates end describing everything specific state", "d": "3/2014"}, {"body": "htmlbars possible write bound helpers like want eg", "d": "3/2014"}, {"body": "rjackson valid point makes things confusing comes single argument makes perfect sense simple yet efficient mmun thanks pointing new ember good know capable expression like lay going close issue thank guys inputs", "d": "3/2014"}, {"body": "workaround right simply amp case seems like nt using mootools page nt broken safer solution would preferred", "d": "3/2014"}, {"body": "opened pr fix working jsfiddle note must return instead model", "d": "3/2014"}, {"body": "since workaround much lower priority", "d": "3/2014"}, {"body": "give details appears function used displaying lib info calling iterator list element object key values maybe first value object instead object eg expected name name b map function item return item gt name name b actual time ember displays lib info long prototype fully loaded later works fine name name b map function item return item gt b", "d": "3/2014"}, {"body": "disabling prototype extensions make work", "d": "3/2014"}, {"body": "try nt work updated jsfiddle demonstrate behavior", "d": "3/2014"}, {"body": "taras things make way cookbook pull requests sorry obvious", "d": "3/2014"}, {"body": "julianleviston yep exactly", "d": "3/2014"}, {"body": "nt issue actually sorry trying understand help pretty excited mods documentation help actually nt understand intent would want also jsbin show intent", "d": "3/2014"}, {"body": "julianleviston hmm good call nt event think difference", "d": "3/2014"}, {"body": "open new issue emberjswebsite repo", "d": "3/2014"}, {"body": "want storelookup data application controller one materialized need actually define application controller eg", "d": "3/2014"}, {"body": "agreed case fall back nonunderscored version second still seems less ideal", "d": "3/2014"}, {"body": "never mind checked bower version using official release", "d": "3/2014"}, {"body": "think need define routes dynamic segments order pass model transition works machty stefanpenner probably confirm", "d": "3/2014"}, {"body": "teddyzeenny saying sounds right wonder real bug demo nt highlight", "d": "3/2014"}, {"body": "coffeescript revealed issue coffeescript implicitly would transitions promises become rejected blowing routes even though end correct url must something like coffeescript multiple transitions work", "d": "3/2014"}, {"body": "hmm remember check one point might lost recent refactor highly doubt ever removed test cases checked sort thing surprised showing let leave open imagine fix treat various model hook returns promises already new transition underway time return would happen transitionto returned think robust solution checking whether instanceof return type transition", "d": "3/2014"}, {"body": "meantime denisnazarov come definitive jsbin mimics coffeescript reproduce issue", "d": "3/2014"}, {"body": "simplified jsbin issue remove one works fine", "d": "3/2014"}, {"body": "hi macu second argument actually literal second binding ie equivalent personally helper apps edit updated use isequal properly", "d": "3/2014"}, {"body": "bradleypriest helper", "d": "3/2014"}, {"body": "hey thank bradleypriest help", "d": "3/2014"}, {"body": "reference modify helper slightly", "d": "3/2014"}, {"body": "probably shortcut works non ember objects safer", "d": "3/2014"}, {"body": "ninjatronic sadly current browsers fail miserably implement change event autofillautocomplete app implemented polling mechanism forms want able autofill", "d": "3/2014"}, {"body": "tchak polling code manually trigger change events fills might autofilled", "d": "3/2014"}, {"body": "balinterdi set ember view val would work", "d": "3/2014"}, {"body": "sounds like happens modern browsers reference seeing issue android browser", "d": "3/2014"}, {"body": "possibly related although examples nt query params enabled", "d": "3/2014"}, {"body": "happens resource supplied function exhibits bug javascript approutermap function thisresource people path people function thisresource peopleperson path personid function exhibit bug", "d": "3/2014"}, {"body": "glad pointed thought something wrong confirm happing since happing", "d": "3/2014"}, {"body": "machty thoughts hate ship bug feasible fix", "d": "3/2014"}, {"body": "confirmed pr fixes issue problem link really link currently passed context dropped link directly leaf route linked pr changes behavior", "d": "3/2014"}, {"body": "thanks raytiley closed", "d": "3/2014"}, {"body": "nice one raytiley", "d": "3/2014"}, {"body": "test use setup method enable", "d": "3/2014"}, {"body": "resolved", "d": "3/2014"}, {"body": "perlun would mind opening website repo", "d": "3/2014"}, {"body": "ok done thanks", "d": "3/2014"}, {"body": "perlun agree reworded think spirit going review conventions may concepts related full application covered point would mind rewording submitting pr website repo", "d": "3/2014"}, {"body": "probably best open issues regarding guides website repo", "d": "3/2014"}, {"body": "good point moving emberjswebsite", "d": "3/2014"}, {"body": "believe pressing key trigger acceptchanges action instance todocontroller moving focus away trigger focusout event turn triggers acceptchanges action view instance todocontroller perlun would mind updating wording makes sense", "d": "3/2014"}, {"body": "pr incoming though tests code extend", "d": "3/2014"}, {"body": "closing favor pr", "d": "3/2014"}, {"body": "hmm trouble writing failing test whenever try click routes controller array query param getting error", "d": "3/2014"}, {"body": "pushed latest iteration api like hours ago post jsbin", "d": "3/2014"}, {"body": "demo behaviour get undefined string console", "d": "3/2014"}, {"body": "hey appears emberdata related issue please reopen", "d": "3/2014"}, {"body": "nt know emberdata separate issue tracker get", "d": "3/2014"}, {"body": "located", "d": "3/2014"}, {"body": "even could bug global loading route works well define sub loading template maybe could workaround", "d": "3/2014"}, {"body": "thanks good workaround", "d": "3/2014"}, {"body": "machty think jsbin provided trevthedev work though", "d": "3/2014"}, {"body": "ask kinds questions stackoverflow discussemberjscom", "d": "3/2014"}, {"body": "yes stackoverflow much better venue knowledge sharing", "d": "3/2014"}, {"body": "documented plan solve nt implemented yet", "d": "3/2014"}, {"body": "generated routes maybe document want ember use custom default route generating routes need define resolves means using eak think would also nice throw error called", "d": "3/2014"}, {"body": "think would also nice throw error thisroute basic thisresource basic called took stab adding pull request nt document somewhat selfdocumenting plus stefanpenner said plan resolving issue future documentation would temporary anyway", "d": "3/2014"}, {"body": "gordonkristan certainly say would got answer lot quicker case lack error console led towards trying jsbin amp posting", "d": "3/2014"}, {"body": "took stab fixing root issue", "d": "3/2014"}, {"body": "closing favor open pr adding better error messages changing default names prefixed avoid collision altogether", "d": "3/2014"}, {"body": "experiencing issue", "d": "3/2014"}, {"body": "duplicate", "d": "3/2014"}, {"body": "confirm jsbins similar", "d": "3/2014"}, {"body": "raytiley say right missed one", "d": "3/2014"}, {"body": "little investigation using specific route names example jsbin seems case thingy thingypurchase handlerinfos transition state unresolved case thingypurchase handlerinfo unresolved makes sense case actual model object given thingy route difference case transition application route case thingy route difference case get application loading substate case get thingy loading substate btw hope ok used emberjsjsbincom example jsbin", "d": "3/2014"}, {"body": "nonsensery chance talk emberconf definitely bug though confusion understandable basically pass promise model x route going look sibling loading route enter regardless whether transitioning x route already one children one children imply leaving x sake displaying sibling loading route let close leave open something actionable seeing definitely nt bug", "d": "3/2014"}, {"body": "yes definitely bug something way working still seems unintuitive though think bit crystallize thoughts ok leaving issue open comment figure things", "d": "3/2014"}, {"body": "matiasdecarli good catch rsvp vendored library ember need fixed upstream would mind submitting pr fix fixed upstream pull latest version next cycle releases thank helping closing issue since reopening pr upstream", "d": "3/2014"}, {"body": "generally speaking repo ember closing issue definitely want get ember data docs better place comment suggestions guides api docs please reopen", "d": "3/2014"}, {"body": "closing favor pr", "d": "3/2014"}, {"body": "hi sylvainestevez sort question belongs stack overflow discussemberjscom use github tracking bugs feel free link back post make sure add jsfiddle help make easier people help said think issue due using using retrieve value ie", "d": "3/2014"}, {"body": "please reopen stack overflow much better venue knowledge sharing", "d": "3/2014"}, {"body": "question stackoverflow appears related", "d": "3/2014"}, {"body": "hi guys would like know verified bug ember", "d": "3/2014"}, {"body": "need return promise model hook", "d": "3/2014"}, {"body": "machty yep try jsbin events error hook still get called evidenced output issue still remains", "d": "3/2014"}, {"body": "ah sorry real issue jquery promises shoddy error handlingrepropagating logic nt conform promises specifications ember routing behavior depends wrap promise emberrsvpresolve effectively casting valid rsvp promise get proper behavior recommend using library properly wraps ajax calls rsvp promises rather remembering gotcha using raw jquery ajax", "d": "3/2014"}, {"body": "machty thanks response puzzled jsbin worked indeed already using icajax another issue raised previously turns problem ember data swallowing error thrown icajax", "d": "3/2014"}, {"body": "default handlebars escape values returned helper return instance behavior desire working jsbin please use caution technique might pose security risk specifically returning user supplied data inside may vulnerable crosssite scripting attack information", "d": "3/2014"}, {"body": "artifact feature flag conditionals stripped put else disappear nt seem like mega big deal", "d": "3/2014"}, {"body": "nope confused think stray old line brought machty", "d": "3/2014"}, {"body": "closing favor", "d": "3/2014"}, {"body": "completely agree version fixed also updated awkaiser would mind submitting pr fixing think commit labeled", "d": "3/2014"}, {"body": "rjackson aight open pr near future", "d": "3/2014"}, {"body": "dentuzhik approach seems good sure issue prototype extensions particular could update branch rebase onto new emberruntime submit pr could try help diagnose issue", "d": "3/2014"}, {"body": "rjackson rebasing test suite nt seem see emberruntime mutable enumerable array tests tip see suite", "d": "3/2014"}, {"body": "noticed issue nt show browse open issues issue filed incorrectly", "d": "3/2014"}, {"body": "yes right first page", "d": "3/2014"}, {"body": "bug filter sorry", "d": "3/2014"}, {"body": "index rendered ends wrong outlet", "d": "3/2014"}, {"body": "hi robert sorry delay forked added fix however tried write test case getting odd error ca nt seem resolve issue appears something computed property added test tried wrapping using computed function embermetal however borked different way thoughts cheers andrew test case written test routes observe controller function routermap function thisroute home path apphomeroute emberrouteextend title function return lt lt thisget controllercontentname gt property controllercontentname var currentpath appapplicationcontroller embercontrollerextend currentpathdidchange emberobserver currentpath function currentpath get currentpath bootapplication handleurl equal currentpath home error received", "d": "3/2014"}, {"body": "controller property explicitly nonbindable", "d": "3/2014"}, {"body": "hi stefan trying difficult would mind explaining first two examples ember docs use controller property binding would suggest nt issue far tell thing stopping binding route controller property fix lack suggested thanks andrew", "d": "3/2014"}, {"body": "seifsallam provide jsbin demonstrating problem", "d": "3/2014"}, {"body": "rjackson", "d": "3/2014"}, {"body": "seifsallam jsbin nt contain code", "d": "3/2014"}, {"body": "pretty sure error caused components sharing list try initializing list like coffee selectinputcomponent embercomponentextend value options dog cat fish list null init gt super set list embera didinsertelement gt get options get options foreach item gt get list pushobject emberobjectcreate value get value isselected false isdefault false", "d": "3/2014"}, {"body": "ghempton correct likely sharing list instance placed prototype must instantiate set init method", "d": "3/2014"}, {"body": "ghempton stefanpenner yes already understand components isolated nt think right behavior", "d": "3/2014"}, {"body": "elaborate", "d": "3/2014"}, {"body": "stefanpenner working example problem see pushing objects array nt shared components component properties set without affect components", "d": "3/2014"}, {"body": "think default behaviour setting component create new object time gets created reusing existing one", "d": "3/2014"}, {"body": "seifsallam stefanpenner ghempton tell specific components ember objects see ghempton article still valid caveats chapter", "d": "3/2014"}, {"body": "bug feature", "d": "3/2014"}, {"body": "neither bug feature think implemented nt know internals neither couldshould change trapped one begginning assume part framework maybe even part javascript initialize non primitive fields init method", "d": "3/2014"}, {"body": "actually unique ember objects rather javascript objects work something exists prototype shared instances neither bug feature rather javascript works", "d": "3/2014"}, {"body": "stefanpenner ok understand thanks taking time explain", "d": "3/2014"}, {"body": "seifsallam problem concept burnt likely every developer every language time time", "d": "3/2014"}, {"body": "totally want use array component best practice", "d": "3/2014"}, {"body": "guess passed loading route model implicit dependency object property name see thing demonstrated route machty one probably want require object come", "d": "3/2014"}, {"body": "two working together something sure want solve nathanhammond issue least thread different knownasilya issue knownasilya isolate jsbin", "d": "3/2014"}, {"body": "working together believe issue separate issue wanted confirm considered issue filing bug found search make sure issue nt already filed", "d": "3/2014"}, {"body": "believe parallel reconstruction version knownasilya issue note difference two jsbins object passed via", "d": "3/2014"}, {"body": "never able reproduce issue jsbin undid changes started somehow fixed somewhere", "d": "3/2014"}, {"body": "knownasilya thanks quick jump back without reproduction favor closing one sounds like access could unrelated machty care two new issues closing one", "d": "3/2014"}, {"body": "one errors comment present canary builds issue closed file separate issue substate promise race condition", "d": "3/2014"}, {"body": "nt bug preventing refiring model hooks one major intended improvements routerjs refactor went since people put megahacks prevent server getting overqueried new method attached feature flag might useful though seems like still need api telling helper force refresh certain route leafward eg linkto peopleshow refreshpeople something like closing since bug discuss feature request another pr discussemberjscom", "d": "3/2014"}, {"body": "machty context nested resources nt child route model hooks always fire parent model changes", "d": "3/2014"}, {"body": "arenoir changing parent model", "d": "3/2014"}, {"body": "machty using linkto", "d": "3/2014"}, {"body": "ah sorry finally clicked sure happening yet pretty bad fix shortly", "d": "3/2014"}, {"body": "arenoir confirm jsbin new code abovelinked pr fixes issue", "d": "3/2014"}, {"body": "machty yes fixes thumbsup", "d": "3/2014"}, {"body": "much work done entire code base finished true anonymous ember build definitely list also cjs build metalruntime", "d": "3/2014"}, {"body": "anyone managed take look jsbin put together would good know whether genuine issue ember higher", "d": "3/2014"}, {"body": "stefanpenner rooted issue ebryn brought attention cd namely w rsvp", "d": "3/2014"}, {"body": "machty issue exists", "d": "3/2014"}, {"body": "stefanpenner sorry following mentionedconfirmed shows testingtrue", "d": "3/2014"}, {"body": "machty believe stefanpenner saying issue discussed specifically related issue shows testing", "d": "3/2014"}, {"body": "think close since fixed coming two developer seconds", "d": "3/2014"}, {"body": "seems like initial issue addressed confirm regarding async setupcontrolleraftermodel problem perhaps could isolate pieces try figure going perhaps could open another issue easier track", "d": "3/2014"}, {"body": "updates", "d": "3/2014"}, {"body": "rjackson problem still exists worked round parentview mentioned earlier", "d": "3/2014"}, {"body": "work around", "d": "3/2014"}, {"body": "fivetanley ended using component see problem updated bin steps click companies link click boxes sidebar parentview targetobject logged console click boxes main content view see undefined think assertion checks existence assuming component always parentview description", "d": "3/2014"}, {"body": "tried example could tell wrap sendnotification inside emberrunnext remove parentview targetobject defined", "d": "3/2014"}, {"body": "reason sidebarcontroller checkcontentlength always behind actual length unless wrapped sendnotification call see clicking item sidebar jsbin call wrapped length would expect jsbin reason wrapped call component use checkedcontent functionality lot suggest better way", "d": "3/2014"}, {"body": "realized saying sure filtered computed property well defined may missing something anyway play jsbin try fix almost sure emberrunnext mandatory seem cause bad side effect", "d": "3/2014"}, {"body": "agree causing bad side effect changes synced current run loop would seem", "d": "3/2014"}, {"body": "ok right fact check binding sync seems like schedule notification actions queue instead next runloop think works want stefanpenner think bug way work", "d": "3/2014"}, {"body": "kerrick yes seems like reasonable way forward would break backwards compatibility", "d": "3/2014"}, {"body": "maybe somebody find useful want enable queryparamsnew sure whether loaded try use helper handlebars template linkto modules queryparams search asc sort linkto might end following error handlbars error find property queryparams working solution using project embercli include following directly top indexhtml", "d": "3/2014"}, {"body": "michalbryxi exactly idea must set feature flag ember even loaded load time completely different codepath executed based flag", "d": "3/2014"}, {"body": "michalbryxi solution still working added top indexhtml still throwing handlebars error could find property formatdate object lt subclass dsmodel thanks advance", "d": "3/2014"}, {"body": "jgauna yep think still working using think error different enabling queryparamsnew error message looks unrelated option create jsbin example maybe help", "d": "3/2014"}, {"body": "rstudner unsure exactly leak cause confirmed occurring found longer leaking demo master consequently suggest closed", "d": "3/2014"}, {"body": "mixonic thanks testingconfirming closing", "d": "3/2014"}, {"body": "thanks mixonic", "d": "3/2014"}, {"body": "closing iterating howwhen controller state remembered shortly keep guides date see", "d": "3/2014"}, {"body": "yah kprentiss experienced bug today", "d": "3/2014"}, {"body": "kind related query params totally putting energies getting qps finish line happily dive sorry delay", "d": "3/2014"}, {"body": "closed", "d": "3/2014"}, {"body": "breaks also nt work google compiler also syntax highlighting tools giving warnings etc think keeping fail synonym appropriate", "d": "3/2014"}, {"body": "jaaksarv stefanpenner mentioned many work arounds exist list syntactic sugar use prefer syntax still works deprecated also point using keep close promises spec possible nice article section error handling promises", "d": "3/2014"}, {"body": "jaaksarv tooling updated providing safe transpile step using cli", "d": "3/2014"}, {"body": "hook developers use", "d": "3/2014"}, {"body": "brandonmathis see merge latest iteration query params favors configuration route queryparams config hash somewhat incantationy approach previous iteration", "d": "3/2014"}, {"body": "excellent thanks machty", "d": "3/2014"}, {"body": "closed", "d": "3/2014"}, {"body": "machty still resolved updated amp rebased failing test", "d": "3/2014"}, {"body": "think raytiley comment correct commenting use case used way opt full transition noop transition going get called trying", "d": "3/2014"}, {"body": "title misleading using new aproach model hook called transition child route parent qp changed", "d": "3/2014"}, {"body": "could open new issue provide example jsbin", "d": "3/2014"}, {"body": "actually think understand issue running pretty sure bug need make jsbin reopen one update title", "d": "3/2014"}, {"body": "machty already created jsbin", "d": "3/2014"}, {"body": "patch current beta embercomputedsort function itemskey sortdefinition arrayinsertat index item arrayindexof item arrayinsertat index item return array embercomputedsort function itemskey sortdefinition arrayremoveat index arrayindexof searchitem gt arrayremoveat index return array specific error disappears possible issue related", "d": "3/2014"}, {"body": "yes confirm likely cause replacing whole array actually code break updates single addremoveoperations things run smoothly suggest close issue duplicate", "d": "3/2014"}, {"body": "fairly sure issue unrelated sortablemixin yet rewritten terms bc waiting composable computed properties done different way", "d": "3/2014"}, {"body": "hero day internet points sir", "d": "3/2014"}, {"body": "closing docs pr merged", "d": "3/2014"}, {"body": "currently solved check", "d": "3/2014"}, {"body": "rjackson probably closed", "d": "3/2014"}, {"body": "brand new ember evaluating ember going thru exact pain described get ember states move plugin error problem nice error far good seems simple enough go download emberstatesjs problem ca nt find anywhere actually build either build product order evaluate would nice obvious get prebuilt copy updated partial pilot error found download latest build link would nice easy way download latest production release nt give warmnfuzzy evaluate latest build also always feel bad complaining opensource thanks hardwork lol", "d": "3/2014"}, {"body": "find builds website", "d": "3/2014"}, {"body": "front page big orange button links current production version sure core team could make obvious", "d": "3/2014"}, {"body": "ember states indeed separate plugin find info link latest build", "d": "3/2014"}, {"body": "got fixed bmac", "d": "3/2014"}, {"body": "still seeing issue using ember", "d": "3/2014"}, {"body": "fix", "d": "3/2014"}, {"body": "fivetanley still issue master quite old relative master", "d": "3/2014"}, {"body": "unsure visoft would mind verifying", "d": "3/2014"}, {"body": "beta seems fix issue good going forward thanks", "d": "3/2014"}, {"body": "closing published fix", "d": "3/2014"}, {"body": "news end romanior", "d": "3/2014"}, {"body": "stefanpenner property something else entirely", "d": "3/2014"}, {"body": "recall regarding differences class looked thanks reminder", "d": "3/2014"}, {"body": "bfbriggs ping trollface", "d": "3/2014"}, {"body": "nateredding read feature flags guide especially part enabling know tripped us pretty good", "d": "3/2014"}, {"body": "handle case explicitly actual todomvc though believe one guide different ways", "d": "3/2014"}, {"body": "experiencing issue op nt even uppercase properties model nt happen route loaded directly though happens link linkto clicked happening embercanary emberprod", "d": "3/2014"}, {"body": "occurring well nested properties instead capitalized ones", "d": "3/2014"}, {"body": "ran recently approach", "d": "3/2014"}, {"body": "definitely bug expected behavior wrapping template fragment component change anything content behavior", "d": "3/2014"}, {"body": "send pr test coverage proper solution one line change", "d": "3/2014"}, {"body": "sure seems hard everyone define issue b give solution want run code app runs first time eg type click linkto takes another page eg click button setup b apparent didinsertelement would good starting point everyone pointed run bubble way execute form javascript time outlet changed extend every freaking view app eg write code one place", "d": "3/2014"}, {"body": "willtransition router event event assume bubbles", "d": "3/2014"}, {"body": "sorry meant action", "d": "3/2014"}, {"body": "hi nt offended commenting closed issue would able explain default value nt selected first fiddle second thanks", "d": "3/2014"}, {"body": "would useful components behave like objectproxy", "d": "3/2014"}, {"body": "similar issue keypress event fires except hit backspace button nt backspace also considered key press", "d": "3/2014"}, {"body": "benjaminhorner see", "d": "3/2014"}, {"body": "similar issue using oneventkeypress returned value missing last key press probably keypress event fires value update event fires solved subclassing textfield using keyup instead keypress", "d": "3/2014"}, {"body": "usually flag test environments disable style loops nt believe needs change maybe better documented regarding behavior unless come alternative api", "d": "3/2014"}, {"body": "actually issue login form still issue", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "seems fixed chrome canary atm", "d": "3/2014"}, {"body": "oh nice", "d": "3/2014"}, {"body": "tried current chrome canary app autocomplete contrast chrome stable way get rid problem far ideal", "d": "3/2014"}, {"body": "ralph sure issue chrome autofills data based certain parameters talking app data changing autofill event seems fixed chrome", "d": "3/2014"}, {"body": "yup exactly issue chrome autofilling login data ember controller picking check undefined page load although chrome entered data click text field get actual value though said fixed canary gave spin canary autocomplete form data chrome stable fill form data reliably chrome canary nt autocomplete enabled canary fill data chrome stable know weird happening", "d": "3/2014"}, {"body": "ralph well canary sxs canary fresh browser pretty much save password app", "d": "3/2014"}, {"body": "even prompted save password autofill", "d": "3/2014"}, {"body": "ralph ca nt confirm issue canary autofilling data canary triggers change event properly", "d": "3/2014"}, {"body": "wish could say maybe resolved later chrome team", "d": "3/2014"}, {"body": "hope", "d": "3/2014"}, {"body": "ha updated got working thank much", "d": "3/2014"}, {"body": "sir version ahead lmao", "d": "3/2014"}, {"body": "maybe mac build server faster nt", "d": "3/2014"}, {"body": "possible use workaround issue", "d": "3/2014"}, {"body": "nice thanks link", "d": "3/2014"}, {"body": "could reproduce issue debug ember login template looks like login input ididentification placeholderenter login valueidentification password input idpassword placeholderenter password typepassword valuepassword login directly loading login url works fine get redirected becuase im authenticated throws error", "d": "3/2014"}, {"body": "sure sing id elsewhere", "d": "3/2014"}, {"body": "cool could discover things better way reading tickets nt know looked ticket", "d": "3/2014"}, {"body": "wagenet alternative directory darthdeus shows makes lot sense logically folder structure would match nesting structure app actually tripped first started adding template files folder structure reason works way real reason tempted open issue suggesting change related note comment resource came across thread often never resource templates nt explicitly create template nothing hierarchy render nt something ember could default template nt provided missing something would nt require ember creates defaults everything developer nt override except far tell templates seems would reduce lot boilerplate coming outletonly templates reason would limited resource templates either perfect world following router would require following default structure routes accounts resource would etc template name would etc", "d": "3/2014"}, {"body": "also experiencing issue focus event xtremetopherbullock proposed solution seems work could send pr sure create test stefanpenner got chance look", "d": "3/2014"}, {"body": "also could reopen bug", "d": "3/2014"}, {"body": "way ever addressed canonical amd build ember without using emberappkit", "d": "3/2014"}, {"body": "manufaktor thanks quick fix seems working nicely", "d": "3/2014"}]