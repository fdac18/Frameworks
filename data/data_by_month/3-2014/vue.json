[{"title": "force recomputation computed property", "body": "way force recomputation computed property none values property depends changed computed property depends model data well current time value computation changes time like force recomputation interval capture time dependency right using value root vm toggled interval dummy dependency computed property works seems like better solution", "num": "214", "d": "3/2014"}, {"title": "problem vrepeat remove", "body": "hi found problem vrepeat remove items list set value removed item frame item reappear list linked view see fiddle real example newvalue visible items list removed nb really appreciate library good job edit replace gist fidlle", "num": "213", "d": "3/2014"}, {"title": "using new date data", "body": "hi use date object inside data declare new date date object converted empty object template try write formatdate filter throws uncaught typeerror object method getdate", "num": "212", "d": "3/2014"}, {"title": "repeat numeric range", "body": "directive repeats array object uses simple number generator angularjs handy paginators etc call range fairly new vue might overlooked", "num": "211", "d": "3/2014"}, {"title": "accessing content insertion via js translated data", "body": "first loving working vue really appreciate clean design great documentation one thing working like build ui components configured data either via markup content insertion points via data constructor way get access passed content js similar content insertion data tempalte could use query selectors mine passed dom translate data thoughts approach", "num": "210", "d": "3/2014"}, {"title": "data update", "body": "better practice get result fiddle", "num": "209", "d": "3/2014"}, {"title": "definitelytyped definition typescript nuget package", "body": "would encourage provide definition file like found definitelytyped repository enable typescript integration plus would awesome find vuejs nuget package manager visualstudio", "num": "208", "d": "3/2014"}, {"title": "routing demo issue", "body": "replaced following code home page nt show ca nt used child components thanks", "num": "207", "d": "3/2014"}, {"title": "directive parse expression", "body": "hi directive following expression directive changing nt update vm way parse expression access", "num": "206", "d": "3/2014"}, {"title": "documentation change sortby orderby", "body": "orderby docs currently says believe follows html name html name happy pr docs somewhere", "num": "205", "d": "3/2014"}, {"title": "bootstrap vue components", "body": "experiment wrap bootstrap widgets using vue requirejs first thank sweet library combines things love angular polymer knockout things noticed working nt see combine imperative declarative api one app using data smooth way example would work knockout except using controlsdescendantbindings true components overlapping would support formatted strings properties instead computed property like could tips time appreciated anyway keep good work", "num": "204", "d": "3/2014"}, {"title": "filterby multiple keys", "body": "possible", "num": "203", "d": "3/2014"}, {"title": "vmodel von input", "body": "looks like event callback defined von directive executed vmodel directive updates viewmodel give look console logging old value would nice vchange directive like angular ngchange relies watcher ngmodel instead event", "num": "202", "d": "3/2014"}, {"title": "von call method multiple parameters", "body": "using directive way fails parse expression think thinks comma marks beginning new eventbound method like code problems replicating fiddle console output", "num": "201", "d": "3/2014"}, {"title": "typo image slider component example", "body": "hey could nt find site source typo image slider component example example mainly showcases speccompliant insertion points implmentation", "num": "200", "d": "3/2014"}, {"title": "add vue jsdelivr", "body": "would awesome vue available jsdelivr cdn run mozilla could keep uptodate give thumbs would like handle question would would prefer added vue vuejs vuejs", "num": "199", "d": "3/2014"}, {"title": "input loses focus update vrepeat", "body": "try typing one two inputs", "num": "198", "d": "3/2014"}, {"title": "attributes without value", "body": "handle attributes without value like disabled checked", "num": "197", "d": "3/2014"}, {"title": "error browserify", "body": "", "num": "196", "d": "3/2014"}, {"title": "variable filter class attribute removes class attribute", "body": "following code would expect vue inject type string like using however including filter vue remove attribute altogether also variable existing classes like vue throw place variable existing classes throw ideas pulled latest release still happens", "num": "195", "d": "3/2014"}, {"title": "using vm watch array trigger elements change inside array", "body": "basically title says watch array using vm watch changing elements array trigger watch using small jsfiddle", "num": "194", "d": "3/2014"}, {"title": "passing events child components main view", "body": "hi evan issue catching events dispatched child components containing view check code tell wrong see nested components rendered correctly also datas injected main view child components right way although events catched main view way thanks sharing work regards f", "num": "193", "d": "3/2014"}, {"title": "browserifying fails error", "body": "browserify jsmainjs gt bundlejs error module config found mainjs looks like var vue require vue", "num": "192", "d": "3/2014"}, {"title": "dom element replace truefalse", "body": "nt really understand replace use custom element like appheader want completely replace component work every case sample replace line replace true wont work throw directive vif used manually instantiated root node warning manage multiple loosely coupled components vue miss something", "num": "191", "d": "3/2014"}, {"title": "partial getting rendered", "body": "use work", "num": "190", "d": "3/2014"}, {"title": "ready callback fired twice", "body": "think bug wanted run seems like soon add vwith vcomponent lifecycle callbacks ready fire twice", "num": "189", "d": "3/2014"}, {"title": "seems broken", "body": "working broken drilling tree works navigating back tree nodes appear directive removed works correctly", "num": "188", "d": "3/2014"}, {"title": "animation element containing", "body": "would nice way animate element containing list ed elements array swapped eg computed array recomputed whole list could animatedeffected whole new list animatedeffected example effectanimation describing vue example could use miss existing way", "num": "185", "d": "3/2014"}, {"title": "dom nodes inside data variables", "body": "future compiler also handle dom node insertion probably isnt thing occur often think would great vue cover wide range use cases", "num": "184", "d": "3/2014"}, {"title": "debugging created binding undefined", "body": "anyone know debug created binding undefined throws exception would cool vue dumps better debug output things", "num": "183", "d": "3/2014"}, {"title": "feature request allow use delimiters apart mustache style", "body": "allow use delimiters apart mustache style like mustache conflicts existing tooling nontrivial modify parse function textparserjs could extra args bindingre triplere default configured via vueconfig options", "num": "179", "d": "3/2014"}, {"title": "data model consistency", "body": "strange example looks like know example quite correct click set null everyone responded see condidtionals bottom still continue think variable null", "num": "178", "d": "3/2014"}, {"title": "folder structure", "body": "hi newbie vuejs looking example vuejs folder structure could give modularization reusable blocks code read documentation word word slow use directives component anyone mind show basic example nutshell project group block code individual folder template css js reuse nest easily anywhere project ps look vuecomponentgulp example still puzzle nest component component reuse freely according example thank", "num": "177", "d": "3/2014"}, {"title": "compiling bindings inside vmodel directive", "body": "would like use vm data inside vmodel directive example second textarea desired result see vmodel directive workaround better way approach also interestingly enough works fine input box textarea one compiling correctly thanks", "num": "176", "d": "3/2014"}, {"title": "improve array diff algorithm", "body": "scenario two arrays objects object associated dom element two arrays sharing objects two arrays different orders shared objects first array associated dom elements already inserted dom reflecting owner objects order array want replace first array second one following requirements update dom inserted elements reflect order objects second array reuse existing objects dom elements incur least amount dom manipulation possible current implementation move every element exactly matter diff performant enough medium sized lists opss could pose problem super large lists", "num": "175", "d": "3/2014"}, {"title": "dead loop texttransform capitalize meets vmodel", "body": "kind like dead loop editing first letter capitalized css may repeat bug editing first letter cases something bypass", "num": "174", "d": "3/2014"}, {"title": "make vif use wrapper vm instead remove node", "body": "could also remove hairy logic make work vrepeat", "num": "173", "d": "3/2014"}, {"title": "parent option vueextend", "body": "", "num": "172", "d": "3/2014"}, {"title": "vif vshow subproperty", "body": "given code html selecteditemtext presence transform object property removing original value intended behavior", "num": "171", "d": "3/2014"}, {"title": "list projects using vue", "body": "list recording projects may learn", "num": "170", "d": "3/2014"}, {"title": "make paramattributes bindable", "body": "would much easier mutationobserver available basically another format", "num": "169", "d": "3/2014"}, {"title": "browserify bower problems", "body": "would like use vue bower browserify problem bower installs include folder requiring unminified version using browserify fails conflicts used vue code would require included ignored bower use minified version would like avoid using bower looks like impossible use unreleased version could move dist files folder publish bower package would still working using bower branch", "num": "168", "d": "3/2014"}, {"title": "parameter user defined filter raw string", "body": "value something appears raw string demo appeared console html button js vuefilter fil function x consolelog x return click see console vm new vue el demo data", "num": "167", "d": "3/2014"}, {"title": "improve code snippet legibility vuejs website", "body": "subjective trouble viewing code snippets vuejsorg website would consider increasing font size code blocks tweaking colors contrast", "num": "166", "d": "3/2014"}, {"title": "builtin vrepeat filters", "body": "filters enable easy filteringsorting vrepeat arrays something like html ideally want include two filters dependency tracking process users nt manually trigger filter evaluation also calls optimization array diffing gt dom manipulation algorithm", "num": "165", "d": "3/2014"}, {"title": "invoking event handler args evokes access event object", "body": "setup like since selectchoice invoked argument value loses access event object result needs stop event propagating ca nt currently solution problem", "num": "164", "d": "3/2014"}, {"title": "idiomatic way dynamically change components", "body": "stripped version want question better idiomatic way without new conditional components capability couple things think wrong less ideal current example creating new viewmodels directive naive directive without regard existing markup element model sent dynamic components hard coded passed components swapped simplistic keep example simple know easier ways switch class think something like would pretty cool work", "num": "163", "d": "3/2014"}, {"title": "stop click event bubbling", "body": "dom tree like jade outside vonclick doout inside vonclick doin clicking triggers despite right way prevent events vue", "num": "161", "d": "3/2014"}, {"title": "browserify problem unminified", "body": "using minified version npm browserify works fine using unminified file vuejs get following error error module config found homejakecodepomodorosrcscriptsvuejs", "num": "160", "d": "3/2014"}, {"title": "dynamically resolve literal directives", "body": "", "num": "159", "d": "3/2014"}, {"title": "persistent bindings objects added repeater array", "body": "add object vrepeat array bindings attached bindings persist intentional crude simplified version problem adding item delete text input box noticed object added array inherited new bindings methods vrepeat directive awesome remove old bindings way destroy old bindings object added repeater array edit updated fiddle link", "num": "158", "d": "3/2014"}, {"title": "components viewmodel instantiation", "body": "components added viewmodel instantiated visible registered find anything docs explicitly mentions need components added create viewmodel big deal might save someone frustration road", "num": "157", "d": "3/2014"}, {"title": "unifysimplify", "body": "let say plugin providing component meant instantiated template want use main vm solutions direct instantiation constructor returned seems verbose unintuitive put constructor variable first still verbose clearer provide specific solution plugin clearer appjs proprietary api adds lot cruft pluginjs proposed solution please ignore missed already existing mechanism solution could introduce new global method really proposal instantiation purposes reason add parameter constructor would feel weird provide constructor parameter another constructor would allow would also add new syntax classic instantiations could positive effect pleasing people want code matter thanks new considered harmful know stupid reason extendonly plugin api somewhat related question plugin wants provide extended vm without registering component taken consideration plugin api implemented every plugin way want example think", "num": "156", "d": "3/2014"}, {"title": "biased benchmarks vue website", "body": "directly related vue codebase related benchmark vue website page support comments links original webkit benchmark instead version assuming added frameworks instead refactoring test think performance tests much biased vue careless many frameworks precise file revision talking see framework tested differently instance angularjs reactjs uses dom events test functionality many benchmarks calling internals framework instance emberjs example angularjs example clear ember upper hand trying make point framework performance least pay attention methodology could please upload repo performance tests link page code actually available community contribute fix issue", "num": "155", "d": "3/2014"}, {"title": "assigning data objects", "body": "hello situation list data click appear details side div id following nt work order make work following hope easier way takes whole object updates view well", "num": "154", "d": "3/2014"}, {"title": "input model synchronized form reset", "body": "fiddle problem form reset events fired inputs event fired form instead", "num": "153", "d": "3/2014"}, {"body": "date object jsonstyle plain object need store timestamp number", "d": "3/2014"}, {"body": "write custom filter eg", "d": "3/2014"}, {"body": "thing yesterday try hack repeat directive update function collection write template dirty use string finally create method vue using like maybe filter better solution", "d": "3/2014"}, {"body": "ljonathanl thanks snippets went something similar let close think enough input find way", "d": "3/2014"}, {"body": "looks like access via based came following approach read content next step figure instantiate subcomponents may exist panel template consumes via custom vcomponents nt getting rendered", "d": "3/2014"}, {"body": "make fiddle sure trying achieve follow comment", "d": "3/2014"}, {"body": "dwabyick may ask domutilsdirectqueryselectorall googles nothing", "d": "3/2014"}, {"body": "thanks response setup fork vuebrowserifyexample shows roughly trying", "d": "3/2014"}, {"body": "lithiumjake routine made work around fact ca nt easily select direct descendants elementqueryselectorall without knowing element id", "d": "3/2014"}, {"body": "restate problem understand better simply triplestache template bindings dynamically compile vcomponents possible manually invoke compile manually adding content fork vuebrowserifyexample demonstrates fyi reason build components eg tab panel supply content via dom via js constructor", "d": "3/2014"}, {"body": "looks bit better assign target vm choice vm", "d": "3/2014"}, {"body": "thank responded quickly tip", "d": "3/2014"}, {"body": "organisation collaborator definitelytyped would gladly help vue expert yet pool effort created tracking ticket dt note definitions dt repo automatically get pushed nuget plus dedicated cli client ide like webstorm intellij builtin support dt repo big mvcish frameworks popular dt example jquery amp angularjs definitions downloaded crazy numbers", "d": "3/2014"}, {"body": "hmm familiar nugetvisualstudio stuff seen ted patrick typescript definition vue although old version wondering anything date", "d": "3/2014"}, {"body": "nice let hope checks fyi nugetvisualstudio stuff works definition authors nt need anything magic interests contribution guide dt wiki info course case cover", "d": "3/2014"}, {"body": "separate option placed inside", "d": "3/2014"}, {"body": "related expression parsing changing directive nt trigger changes changing anything actual data changing reference directive object fact modify existing properties directive object implement directive sets data back bit tricky need call trigger proper updates one thing note since trigger directive result infinite loop case need something looks like need return early true know looks bit tedious probably provide builtin method rare user land need kind stuff also consider bad practice explicitly modify parent state access parent chain inline expressions probably use pass status object", "d": "3/2014"}, {"body": "works perfectly thanks problem directive applied element inside two apply focus element expression evaluates true boolean value needs set false original parent parent vm order listen set true must apply focus", "d": "3/2014"}, {"body": "check current website docs api filters gt", "d": "3/2014"}, {"body": "thanks wryk closed favour", "d": "3/2014"}, {"body": "jbadeau taken stab simple wrapped component bootstrap well uses component though intention putting effort building bootstrap components needed time allows", "d": "3/2014"}, {"body": "nt really understand imperative vs declarative question saying want use piece data declarativelyused invoked template component use data another imperatively created invoked constructor js component", "d": "3/2014"}, {"body": "question seen examples use hierarchical data model like view set declarative component use subtree data like bind imperative widget component data maybe makes sense trying wrap head around combine styles general would usually use declarative style though", "d": "3/2014"}, {"body": "obsoleter cool man def nt want write customcomponent widgets wrapping existing ui toolkits seems pretty easy", "d": "3/2014"}, {"body": "suppose use data imperatively vuejs data objects observed multiple instances nt necessarily belong vm manytomany relationship", "d": "3/2014"}, {"body": "yes thats though thats wanted know thanx allot fast response", "d": "3/2014"}, {"body": "computed property suggestion think point computed properties allow stuff javascript something better expressed interpolation syntax probably belongs template", "d": "3/2014"}, {"body": "case pipe array custom filter arbitrary filtering", "d": "3/2014"}, {"body": "good idea", "d": "3/2014"}, {"body": "hmm component instances use watcher save specific case save settimeout would also work think even easier way", "d": "3/2014"}, {"body": "haha found actually compiling directives backwards instead loop directives comes gets compiled first reversed order make compile order consistent order appear markup", "d": "3/2014"}, {"body": "yeah fails current regex checks level deep parens come robust one", "d": "3/2014"}, {"body": "meantime suggest putting simple logic inline expressions case seems better use method handler", "d": "3/2014"}, {"body": "yeah using method expect index whole object big deal change works noticed inline expressions limitations example nt possible executed like keep logic inline expressions minimum sometimes useful avoid creating new methods assigning property", "d": "3/2014"}, {"body": "always create new method takes statement limited inline expressions statement purpose want discourage logic templates", "d": "3/2014"}, {"body": "think doable", "d": "3/2014"}, {"body": "curiosity since expressions support subset js function calls ternary operator comparison operators missed would difficult implement csp support", "d": "3/2014"}, {"body": "well happy lightweight dropin parser available parsers generated jison seems pretty bloated nt time write", "d": "3/2014"}, {"body": "implemented robust parser parse directives note parses structure directive expressions csp still supported", "d": "3/2014"}, {"body": "thanks site repo vuejsvuejsorg", "d": "3/2014"}, {"body": "sounds good thanks help seems nt automatic sync yet cdnjs good someone keep date please use name vue keep consistent sources", "d": "3/2014"}, {"body": "okay pr requested close issue either add reject", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "great vuejs could option jsfiddle framework amp extensions", "d": "3/2014"}, {"body": "ah happens identifier looking", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "handle pass boolean", "d": "3/2014"}, {"body": "also along bpierre example simple pass truthy falsy value vue handle check state", "d": "3/2014"}, {"body": "wrong", "d": "3/2014"}, {"body": "nothing forgot include vue", "d": "3/2014"}, {"body": "wow really embarrassing lol sorry wasting time", "d": "3/2014"}, {"body": "worry use url jsfiddle notice missing dot raw github", "d": "3/2014"}, {"body": "using latest browserify fixed bug caused kind error", "d": "3/2014"}, {"body": "good catch seemed fix seeing unknown component undefined app still seems work weird", "d": "3/2014"}, {"body": "ahh using vview initializing undefined", "d": "3/2014"}, {"body": "nevermind fiddle looking thanks catch", "d": "3/2014"}, {"body": "fixed", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "known issue resolved", "d": "3/2014"}, {"body": "hi tried new still ca nt seem get work", "d": "3/2014"}, {"body": "oh thought manipulating object properties inside array trigger change ca nt set index way pick change use extended method see", "d": "3/2014"}, {"body": "cool thanks", "d": "3/2014"}, {"body": "nt directly instantiate components options instead pass constructor extend options compose template like html tags directive", "d": "3/2014"}, {"body": "version browserify using tried seems work", "d": "3/2014"}, {"body": "info using browserify time included file url linked release notes saw failure fix fix cloned repo used install properly everything worked like charm confusion around documentation ca nt add vuejs file project expect browserify work", "d": "3/2014"}, {"body": "oh see browserify static analysis calls unminified built version vue work assumes loaded directly global scope amd environment minified version works calls mangled usage commonjs environment always use source code version", "d": "3/2014"}, {"body": "exactly make sure add docs browserify users", "d": "3/2014"}, {"body": "directives like manages child vms put vm template root node case child vm finds directive instantiated already instead put parent template semantically also clearer applevel logic", "d": "3/2014"}, {"body": "ok thanks", "d": "3/2014"}, {"body": "also tried registering partial vuepartial still problem", "d": "3/2014"}, {"body": "fixed thanks spotting forgot clonenode rewriting vpartial real directive branch updated second jsfiddle working", "d": "3/2014"}, {"body": "confirmed awesome", "d": "3/2014"}, {"body": "tested latest dev branch longer happening thanks reporting", "d": "3/2014"}, {"body": "list anywhere api changes", "d": "3/2014"}, {"body": "repo release notes", "d": "3/2014"}, {"body": "pushed fixes dev branch new vrepeat algorithm nt take async transitions account fixed", "d": "3/2014"}, {"body": "awesome thanks", "d": "3/2014"}, {"body": "nevermind thought way sorry issue spam", "d": "3/2014"}, {"body": "unescaped html use triple mustache see third tip section", "d": "3/2014"}, {"body": "facepalms miss thanks man", "d": "3/2014"}, {"body": "post snippet using likely go away next release completely rewritten", "d": "3/2014"}, {"body": "sorry nt use vwith ah see nt find code", "d": "3/2014"}, {"body": "hmm ok vcomponent somehow uses vwith internally ca nt help much without looking code likely gone", "d": "3/2014"}, {"body": "ok done sample first init start page load second script would rebind", "d": "3/2014"}, {"body": "tested latest build longer produces error something noted probably good idea use compile element twice new version custom element tags must contain hyphen", "d": "3/2014"}, {"body": "compile element twice handle multiple routes replace view found sample thanks", "d": "3/2014"}, {"body": "remoe check example test suite", "d": "3/2014"}, {"body": "know suggested earlier offered solution change source difficult since many earlier projects use notation seems making notation configurable would make vue better citizen existing ecosystem", "d": "3/2014"}, {"body": "landed part syntax", "d": "3/2014"}, {"body": "thanks fast", "d": "3/2014"}, {"body": "clap", "d": "3/2014"}, {"body": "fixed thanks", "d": "3/2014"}, {"body": "moved faq", "d": "3/2014"}, {"body": "also interesting thing noticed inspect broken textarea correct values us still showing double curly braces oo", "d": "3/2014"}, {"body": "interesting issue neat use vue tried getting work breaking component issue think textarea idiosyncrasies correct value see inspector think attribute reason stuck thinking uncompiled text value overwrites compiled text", "d": "3/2014"}, {"body": "awful hack causes compiled textarea content pushed back attribute trigger event update model diff git asrccompilerjs bsrccompilerjs index asrccompilerjs bsrccompilerjs compilerprotocompiletextnode function node var el token directive var el token directive parentnode val compilerprotocompiletextnode function node thisbinddirective directive nodeparentnoderemovechild node parentnode nodeparentnode parentnoderemovechild node val parentnodevalue parentnodetagname textarea utilsnexttick function parentnodevalue val", "d": "3/2014"}, {"body": "fixed", "d": "3/2014"}, {"body": "brandon original example working commit one see", "d": "3/2014"}, {"body": "content inside textarea parsed attribute textarea element nt allow partials documentfragments get around setting though", "d": "3/2014"}, {"body": "clarifies thank", "d": "3/2014"}, {"body": "also related bug vmodel input changes causes reflow interrupting input todomvc example basically order array nt change dom manipulation necessary", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "ahhh never thought fix", "d": "3/2014"}, {"body": "error still ocurring without vuejs", "d": "3/2014"}, {"body": "filipelinhares waaaat", "d": "3/2014"}, {"body": "chrome error without vuejs", "d": "3/2014"}, {"body": "crazy report bug chromium project also firefox content edited first letter longer capitalized", "d": "3/2014"}, {"body": "linked issue chromium issue list closing", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "also believe changing property string object wo nt create getters setter subproperties object right", "d": "3/2014"}, {"body": "intended behavior prevent computed properties throwing errors enable collecting dependency try access properties exist yet swapping string object object recursively observed ie converted gettersetters process changing truly conditional basically starting value falsy things inside simply wo nt compiled somehow resolve problem well", "d": "3/2014"}, {"body": "truly conditional vif landed dev branch nt see reference commit", "d": "3/2014"}, {"body": "dyu", "d": "3/2014"}, {"body": "thanks always", "d": "3/2014"}, {"body": "month think probably nt lot finished ones unforturnately internal projects creative lab using vue public", "d": "3/2014"}, {"body": "open page wiki may add others projects find using vue", "d": "3/2014"}, {"body": "added", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "believe browserify meant used npm bower really use bower maybe could try debowerify", "d": "3/2014"}, {"body": "according bower spec bower packages ship standalone built versions code using browserify go fullnpm instead using bower", "d": "3/2014"}, {"body": "paglias nt need bower using browserify", "d": "3/2014"}, {"body": "like use bower registrer contains lot client side libraries nt avalaible npm would like avoid using two different package managers client side dependencies found useful able use specific commitsbranches library outside released versions indipendently using browserify possible npm bower given current setup would enough expose folder bower", "d": "3/2014"}, {"body": "course nt ask build vue every commit want use unreleased version rely source files compiled", "d": "3/2014"}, {"body": "paglias would better using git clone want access source much better asking developer break conventions two approaches", "d": "3/2014"}, {"body": "kristoferjoseph asking break convention approach ability use specific commit branch documented feature bower suppose found might useful mine suggestion make easier use vue", "d": "3/2014"}, {"body": "checked seems bower longer prefers built versions jquery also shipping bower distribution dev branch includes work setup", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "jiyinyiyong documentation filters states second argument filter function interpolation arguments access viewmodel within filter function need reference get data", "d": "3/2014"}, {"body": "example current version obsoleter jiyinyiyong want mention upcoming changes next version filter arguments passed filter function real arguments instead array would make custom filters easier write obsoleter pointed raw string intended use raw string key access dynamic property using also filter accesses function body marked computed filter directive uses computed filter parsed expression including filters properties accessed filter tracked dependency", "d": "3/2014"}, {"body": "thanks pointing looking forward", "d": "3/2014"}, {"body": "yes think contrast difference monitors tweak legible moved", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "make work objects", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "could something like html click something message get working using dev branch commit see probably way invoke handlers expressions using get event object", "d": "3/2014"}, {"body": "use atm ugly hack elegant able write something like selectchoice e", "d": "3/2014"}, {"body": "get access basically logic needs one expression put method", "d": "3/2014"}, {"body": "every time miss something like think nt remember docs go look course right first paragraph", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "fine create childvms directives long manage well internal directives implemented internal method compiler instances called allows get constructor available current instance example using approach address concern bind remove cache current innerhtml documentfragment instantiating new childvm hook set compler clone cached fragment way leverage outlet normal components note requires use dynamic component directive like basically nt provide inner content wiped away", "d": "3/2014"}, {"body": "bit cumbersome", "d": "3/2014"}, {"body": "dynamically swapping components easy said still possible create pretty robust directive exactly want", "d": "3/2014"}, {"body": "thanks makes lot sense let fix rough edges dynamic component ideas second example gave work something compilation order seems get stuck loop", "d": "3/2014"}, {"body": "got pretty rough implementation accounts gt yield vwith actually swaps outside node", "d": "3/2014"}, {"body": "cool something belongs userland would compare complexity directive others directives built real projects make core vue", "d": "3/2014"}, {"body": "say pretty rare type logic control directives userland think enabling kind dynamic interpolation second example see taking time", "d": "3/2014"}, {"body": "introduced new directive based previous dynamic component test implementation find suitable view control use dynamic component directive checkout updated routing example", "d": "3/2014"}, {"body": "wow cool", "d": "3/2014"}, {"body": "share jsfiddle showing behavior", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "think happens event delegation handlers actually stored root node something like jquery needed", "d": "3/2014"}, {"body": "thanks confirmed working", "d": "3/2014"}, {"body": "vuejs file browserify require srcmainjs vue nodemodules directory", "d": "3/2014"}, {"body": "vuejs file npm moved different directory used require vue pulling nodemodules require vue work", "d": "3/2014"}, {"body": "think problem always dist version reason use", "d": "3/2014"}, {"body": "particular reason closed", "d": "3/2014"}, {"body": "really like idea conditional partials ideas possible syntaxes", "d": "3/2014"}, {"body": "something like", "d": "3/2014"}, {"body": "passing function returns name partial javascript gt somefunc thinking something like might better fit component", "d": "3/2014"}, {"body": "thinking special syntax resolving current literal directives dynamically html", "d": "3/2014"}, {"body": "love", "d": "3/2014"}, {"body": "alternatively allow interpolation inside literal directives html inline existing syntax advantage previous option pass additional inline options although sure actually need", "d": "3/2014"}, {"body": "yesssssssss", "d": "3/2014"}, {"body": "would like input duckbox bpierre obsoleter", "d": "3/2014"}, {"body": "would useful already come across one situation thought would nice dynamically choose component prefer interpolation syntax consistent already also data needs passed simply use two ways thing concepts vuejs users learn special syntax javascript hash directive value unlike anything else key hash arbitrarily special pass additional data component partial concepts vuejs users learn interpolation syntax literal directives interpolated values mustachestyle bindings way used html attributes text", "d": "3/2014"}, {"body": "great dynamic literal mechanism would really helpful think first idea complicated literal would confusing allow additional options prefer second idea looks like know could also lead confusion value update resolution maybe concept onetime binding could reintroduced even performance gain significant could make sense design point view used dynamic literals html", "d": "3/2014"}, {"body": "necessarily onetime resolution admittedly contrived example suppose list data want graph two way binding used would allow easily swap back forth sure could one multiple ways display data former would cleaner", "d": "3/2014"}, {"body": "obsoleter think case may want dynamic directive related literal directives", "d": "3/2014"}, {"body": "bpierre think asking blurs line much dynamic literal directives behind syntax pairs well mustachestyle bindings two way binding literal directives would require lot related functionality outside directive plus dynamic literals resolved would pretty easy build directive userland", "d": "3/2014"}, {"body": "simplicity sake decided stick syntax rule thumb inside literal directives resolved counted individually repeated items", "d": "3/2014"}, {"body": "landed", "d": "3/2014"}, {"body": "work using build dev branch commit", "d": "3/2014"}, {"body": "obsoleter thanks fixed need add tests later", "d": "3/2014"}, {"body": "remove bindings pushing object array reference object still observed main viewmodel push shallow copy object", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "hmm yeah mention basically instantiation compilation assets need registered beforehand", "d": "3/2014"}, {"body": "fact suggest nt even return extended constructor return options plugin app allows user code rename component theoretically required describe component", "d": "3/2014"}, {"body": "yes main concern instantiate extended vm code could replace better register component name still verbose user maybe plugin api vue see proposal provide something simplify instantiation code templates extended vms", "d": "3/2014"}, {"body": "get makes sense think addition could also take optional base class follows convention accepting optional base class rough thoughts need polishing also previous suggestion removing chaining returning registered component also worth considering think part though since going pretty big api change", "d": "3/2014"}, {"body": "maybe try unify single thing", "d": "3/2014"}, {"body": "yes could make sense since terms appears everywhere difference see component attached another viewmodel viewmodel instance id called template could replaced look confusing conversely term viewmodel could replaced term component everywhere except getting started section could replaced nonchainable js current extend var extendedcomponent vuecomponent get component current component name var extendedcomponent vuecomponent extendedcomponent still except returns extended component var extendedcomponent vuecomponent someregisteredcomponent inheritance var extendedcomponent vuecomponent extendedcomponent basecomponent becomes extendedcomponentcomponent anotherextendedcomponent anotherbasecomponent equivalents new vue vuecreate vuecomponent someregisteredcomponent create vuecreate someregisteredcomponent", "d": "3/2014"}, {"body": "another vote unifying seems job also handling registration retrieval components like bpierre suggestion favors terminology think helpful say vue component reusable instantiatable viewmodel vue components everything get except define going reusing", "d": "3/2014"}, {"body": "agree unifying everything vuecomponent projects hardly ever using vueextend syntax create components vuecomponent maybe change extends inheritance method eg", "d": "3/2014"}, {"body": "edited issue title keep relevant", "d": "3/2014"}, {"body": "thoughts playing options fact serve different purposes becomes obvious extended constructor say extended constructor also methods case mean different things js subcomponent using vue base class encapsulated inside mycomponent mycomponentcomponent subcomponent extendedcomponent using mycomponent base class nt necessarily part mycomponent var extendedcomponent mycomponentextend case unifying two would actually cause confusion noted bpierre becomes weird example back original problem think core issue vuejs trying support two different paradigms first backbonestyle class amp inheritance based api second web component style declarative markupbased api think use tag also create image node think need support gives greater flexibility little verbosity case outweighed benefits think would still help provide sugar common tasks prefer without affecting underlying semantics", "d": "3/2014"}, {"body": "let see understand subcomponent created inside existing component like inherit instantiation options would globally registered would usable within instances correct however example instances receive properties overriden instantiation options correct", "d": "3/2014"}, {"body": "obsoleter yes asset registration method similar etc means take constructor function register id originally expects constructor function directly passing option object syntax sugar think source confusion", "d": "3/2014"}, {"body": "agee keeping definitely use cases either one start getting advanced applications think good explanation differences mentioned docs would enough people understand", "d": "3/2014"}, {"body": "thanks evan example clear makes sense maybe could added somewhere documentation composing viewmodels page maybe new concepts page plugin api adding components directives etc vue constructor extended vue shared simple init function method", "d": "3/2014"}, {"body": "think issue assumes components registered globally feels bit weird encapsulated constructor personally recommend second syntax original options also cherry pick component plugin exports option objects bit verbose think makes concepts clearer", "d": "3/2014"}, {"body": "small nitpick enough warrant separate issue somewhat relevant current discussion popular js libraries jquery underscore also others methods modify target object contrast creates new subclassed instance may somewhat confusing vue users alternative name suggestions", "d": "3/2014"}, {"body": "pesho think makes perfect sense like rather constructor happens expose static methods different jquery underscore mostly object holding bunch utility methods", "d": "3/2014"}, {"body": "added explanation docs", "d": "3/2014"}, {"body": "moved", "d": "3/2014"}, {"body": "hi could provide complete example add url external resource", "d": "3/2014"}, {"body": "thanks replying asked", "d": "3/2014"}, {"body": "hope helps", "d": "3/2014"}, {"body": "gotcha use inline expression like passing vm instance data object either use handler example", "d": "3/2014"}, {"body": "using vue reset form", "d": "3/2014"}, {"body": "also fiddle referencing rawgithub wich serving content wrong mimetype vue nt even loaded use rawgithub without dot proxy", "d": "3/2014"}, {"body": "think manually reset", "d": "3/2014"}, {"body": "ok got", "d": "3/2014"}, {"body": "aha moment needed nest object thanks", "d": "3/2014"}, {"body": "closing due lack consensus benefits substantial", "d": "3/2014"}, {"body": "server side necessary manpulate dom data binding libary guys talking interesting prebuild process like component one recently riverjs wrote contains feature also data binding build make prebuild process worked see responstery install riverjs g npm", "d": "3/2014"}, {"body": "tested vue work jsdom provide prerendered version page however making vue able pick already rendered page seems require much internal hassle probably easier use service like prerenderio hand thelinuxlich idea reusing components npm already feasible component definitions assume existence vue cases", "d": "3/2014"}, {"body": "much work would adapt vue run without access full dom", "d": "3/2014"}, {"body": "mrlundis vue template compile mechanisms relies existing html parser live dom nodes pretty much requires half rewrite nt think feasible moment tested work jsdom", "d": "3/2014"}, {"body": "making vue able pick already rendered page seems require much internal hassle shame really like vuejs make almost perfect framework", "d": "3/2014"}, {"body": "perf gain minimal probably better suited prerendered server side", "d": "3/2014"}, {"body": "augmenting object mutator methods instead set remove etc like currently done arrays methods could intercepted", "d": "3/2014"}, {"body": "pesho hmm interesting thought concern adding methods arrays less likely run conflicts since elements accessed indices objects much maybe prefix methods think make sense manipulating repeater array", "d": "3/2014"}, {"body": "yes prefixing makes sense already discouraged prefix inside viewmodels also methods probably made nonenumerable using objectdefineproperty", "d": "3/2014"}, {"body": "make consistent array augmentations eg probably also use prefix differentiate builtin array methods", "d": "3/2014"}, {"body": "agreed unprefixed versions could probably remain aliases arrays", "d": "3/2014"}, {"body": "", "d": "3/2014"}, {"body": "question vuejs template initialization tried vuejs svg template sorry minor issue almost worked problem caused strict svg rules instatiation template sorry coffeescript javascript multiline text bothersome occurs error first simple reason svg property must filled instatiation strictly html error template expanded injection works well want ask vuejs inject values template dom svg initialization send defaut value blaced point worst want prepare custom error catcher grasp problem angular vuejs directive dom initialization know set works dirty idea sorry long post", "d": "3/2014"}, {"body": "directive vattr looking", "d": "3/2014"}, {"body": "ohhhh simple solution lost thought difficult anyway thx", "d": "3/2014"}, {"body": "possible use vcomponent stringbased directive interpolated attribute", "d": "3/2014"}, {"body": "ayamflow higher priority interpolation compiled attributes interpolated edit directives start prefix interpolated", "d": "3/2014"}, {"body": "would hard implement new partial behavior able replace element instead innerhtml javascript gt mypartial think syntax could nt much simpler javascript lt mypartial stripped version problem", "d": "3/2014"}, {"body": "marfalkov nt think replace partial syntax solution problem think something allows conditional partial look later week", "d": "3/2014"}, {"body": "conditional partials sounds really good", "d": "3/2014"}, {"body": "marfalkov think solution use subcomponent item hook conditionally modify element manually elegant kinda job", "d": "3/2014"}, {"body": "thank really elegant way haha", "d": "3/2014"}, {"body": "marfalkov side note think dividers data array quite unsemantic maybe consider making dividers css pseudo classes", "d": "3/2014"}, {"body": "example", "d": "3/2014"}, {"body": "based solution", "d": "3/2014"}, {"body": "marfalkov yeah much cleaner", "d": "3/2014"}, {"body": "smartestshortest way implement searchtext filter current vue like currently possible filter right", "d": "3/2014"}, {"body": "remoe using simple filter possible manually trigger filter reevaluate searchtext changes simpler version use method", "d": "3/2014"}, {"body": "remoe version filter", "d": "3/2014"}, {"body": "bpierre cool might consider adding builtin filters working vrepeat", "d": "3/2014"}, {"body": "bpierre hey thanks nt know", "d": "3/2014"}, {"body": "bpierre cool adding onto example sorting simple builtin vrepeat filters", "d": "3/2014"}, {"body": "builtin filters another component component", "d": "3/2014"}, {"body": "misclick", "d": "3/2014"}, {"body": "vrepeat sorting paginated efficient hand data array vue sort place would better simply replace presorted array eg thisitems sorteditems assume latter would cause existing vrepeated vms mirrored array destroyed", "d": "3/2014"}, {"body": "dyu sort place obviously efficient slightly new array set checks see new array contains identical data old array reuses existing vm dom nodes much possible setting sorted array since arrays contain elements computation compare arrays moving existing dom nodes instead destroying rebuilding vms algorithm also makes feasible pipe array filters use computed property array note latter bug fixed dev", "d": "3/2014"}, {"body": "possible fix repetitive use prefixes example separation namespaces like nt work thought components possible use multiple components element widget multiple features like separate one namespace like concerns totally independent way achieve currently", "d": "3/2014"}, {"body": "haggen depending features may want separate concerns component see something similar rather large spa app component system works great also use kind system rather nicely pubsub pattern case loading component data via ajax key thing remember component essentially another instance vue class access niceties", "d": "3/2014"}, {"body": "mentioned following also stick parent vm data object hook vm instantitated please explain later fundamental reason nt assigned earlier general would like stick hook data stores available parent compilation eg like", "d": "3/2014"}, {"body": "pesho bad actually nt make difference viewmodels observed like regular objects note also means get nested data expect ie use bindings general notice vms vue different vms knockout plain objects different data trying bend vue behave like ko simply nt serve well", "d": "3/2014"}, {"body": "better adopt loose coupling pubsub", "d": "3/2014"}, {"body": "say ca nt used bindings fiddle example seems work fine even computed properties crossvm dependencies seem work fine", "d": "3/2014"}, {"body": "pesho expressions computed properties actually evaluated simple bindings performance reasons simple bindings like blank", "d": "3/2014"}, {"body": "brandonpierce attach component element case need bunch loosely coupled features template thought could separate features namespaces using components", "d": "3/2014"}, {"body": "haggen yes actually generally going use lot decoupled components project instantiate single vue instance long add components instantiate main vue instance inherited take fiddle example currently project using requirejs components dependency main application file instantiates main vm hope makes sense", "d": "3/2014"}, {"body": "thing vms handle twoway sync raw data view logic nt belong category construct arbitrary objects manipulate raw data elsewhere example remember vm sync layer put everything app", "d": "3/2014"}, {"body": "brandonpierce wtf use bunch empty attach components proper way like component names speared space comma multiple vcomponent element well thank much test approach right edit oh noes got wrong p anyway think best move away vue since state vars less templating", "d": "3/2014"}, {"body": "haggen vue actually designed state vars gives freedom template want example gave quick dirty would link production code using techniques mentioned unfortunately private repo read docs see call components like html tags well pass replace option true component replace component div placeholder custom content see", "d": "3/2014"}, {"body": "example remember vm sync layer put everything app approach wo nt cause problems timedata included one vm instance valid need structured hierarchical observable data directly bound dom used dombound components vue observables live within viewmodels trying stuff things put trying bend vue behave like ko even fiddle adds timedata viewmodel", "d": "3/2014"}, {"body": "pesho wo nt vue data object observed multiple vms example belong single viewmodel observed see example", "d": "3/2014"}, {"body": "pesho wo nt vue data object observed multiple vms example timedata belong single viewmodel observed nt know cool still understand posts external data consist plain objects arrays primitive values otherwise unexpected things happen goodies vue already provides would useful well like proper encapsulation computed properties methods would great could take advantage", "d": "3/2014"}, {"body": "hi newbie vuejs looking example vuejs folder structure could give modularization reusable blocks code read documentation word word slow use directives component anyone mind show basic example nutshell project group block code individual folder template css js reuse nest easily anywhere project ps look vuecomponentgulp example still puzzle nest component component reuse freely according example thank", "d": "3/2014"}, {"body": "hi seems vuejs handle recursive use components something useful necessary example", "d": "3/2014"}, {"body": "bobyrizov confusing thanks", "d": "3/2014"}, {"body": "bobyrizov completely rewritten latest dev branch tested latest commit fiddle working correctly wait release also dynamically resolve components eg actually necessary use like anymore", "d": "3/2014"}, {"body": "great thanks looking forward", "d": "3/2014"}, {"body": "way get event object pass event object along args need event object stop propagation nt seem work", "d": "3/2014"}, {"body": "dyu event propagation fixed better use default handler use data", "d": "3/2014"}, {"body": "data property set null later object every key used template set undefined newly created object example get following output issue jut test directive function intended behavior", "d": "3/2014"}, {"body": "bpierre intended behavior mainly dealing situations expressions computed properties depend properties nt exist yet example expression null throw error dependency parsing phase best practice relatively stable structure data", "d": "3/2014"}, {"body": "makes sense thanks", "d": "3/2014"}, {"body": "trying understand data access nested components tried access parent attributes line nt work access model nested component vue", "d": "3/2014"}, {"body": "remoe seems rawgithub link broken since nt use inherit data template bound top level vm log bottom level vm undefined", "d": "3/2014"}, {"body": "thanks update know refer dev jsfiddle yes nt use vwith need define vwith x need directive mapping attributes parent also need example component handle set searchtext another use filter", "d": "3/2014"}, {"body": "remoe prototypal inheritance data properties nested vms case defined root vm access using make available bottom level vm sync changes back top level vm", "d": "3/2014"}, {"body": "thanks", "d": "3/2014"}, {"body": "use jquery plugin faced problem data syncing example way tell directive update value get dom element maybe contain kind support jquery event model box", "d": "3/2014"}, {"body": "familiar plugin something like work real issue seems update original element changes bound element", "d": "3/2014"}, {"body": "seems change event caught add listeners jquery nt trigger native events think fixed part triggering events jquery listeners breaks native javascript interoperability", "d": "3/2014"}, {"body": "obsoleter yes made way looking something clear", "d": "3/2014"}, {"body": "see works manually dispatch real event within jquery listener", "d": "3/2014"}, {"body": "yes triggers jquery events problem jquery plugins works way solution native event seems little tricky maybe could little friendly jquery would simplify things lot", "d": "3/2014"}, {"body": "agree evan plugin trigger native events", "d": "3/2014"}, {"body": "sure make jquery friendly plugins fire jquery events caught jquery fyi located line triggers change event would make much sense fix", "d": "3/2014"}, {"body": "thelinuxlich unfortunately world perfect plugin one moreover think nearly impossible find jquery plugin triggers native events yes thinking agree nt support jquery events ability somehow tell synchronize data view would helpful could used like var vue el find select width resolve change function vue syncmodel options think", "d": "3/2014"}, {"body": "think manually dispatching real event cleanest way nt see useful scenarios note create event reuse every time need sync", "d": "3/2014"}, {"body": "another rather common scenario form reset case one dispatch native event every form control course done manually storing form initial state", "d": "3/2014"}, {"body": "displaying around records rich tabular format row expandedcollapsed information close properties displayed inside every row editable vuejs ok records started get slower slower angular hopeless simply hung vueom better still nowhere near manual templating course totally wrong compare simple templates wondering somehow get best worlds one simple suggestion showing say fields certainly nt want every one fields data bound data completely static never change time setting emittersobservers fields unnecessarily dragging things think one major reasons data binding frameworks suck handling large data assume everything needs bound possible introduce kind static binding eg stext sattr etc runs nt create emitters observers literal directives nt get data getting data binding make sense feasible", "d": "3/2014"}, {"body": "anyone know way", "d": "3/2014"}, {"body": "obsoleter overlooked added", "d": "3/2014"}, {"body": "rdsubhas sounds like pretty challenging use case wondering could optimization new basically render properties row expanded state starts false part managed wo nt even get compiled state becomes true think would help tremendously static compile thing something considered trying think syntax nt add unnecessary complexity implementation usage maybe directive marks whole block content interpolated static template", "d": "3/2014"}, {"body": "vonce", "d": "3/2014"}, {"body": "thanks suggestion yes challenging use case time nt control end customer wants us means succumbing bloated ui falling back using manual templating would awesome crack solution thanks great work", "d": "3/2014"}, {"body": "trying understand swap section would something like correct code working fine right wanted make sure running new vue cleans old instance trying figure basic patterns building robust apps", "d": "3/2014"}, {"body": "malkomalko instantiate node twice define components use see example current vm instantiate new one", "d": "3/2014"}, {"body": "followed example nothing happens appcurrentview mycomponent understand new vview key points property data string component name swap components template correct see dom ps using", "d": "3/2014"}, {"body": "marfalkov please always make fiddle detailed questions link build files via rawgithub", "d": "3/2014"}, {"body": "actually works problem using vue browserify race condition components ready route getting hit interesting problem think", "d": "3/2014"}, {"body": "malkomalko explicitly components main file initiate routers", "d": "3/2014"}, {"body": "hilarious upgraded moved things around one components file requires components forgot add new components vview pickup idiot", "d": "3/2014"}, {"body": "dynamically add data exported component ca nt figure var foo vuecomponent home foo data undefined", "d": "3/2014"}, {"body": "vuecomponent aaset registration method use vueextend option object create constructor register given id returns vue returns constructor actual instance", "d": "3/2014"}, {"body": "sorry asking many questions another one using new vview syntax awesome trying reason though let say wanted make type async request pull data testcomp component know use created option add stuff data compiling nt seem work async tasks lt created callback testcomp component non async works fine thoughts feel like would pattern want achieve dynamically load component go grab data", "d": "3/2014"}, {"body": "malkomalko give initial state settimeout longer points vm instance fixed", "d": "3/2014"}, {"body": "duh self mistake setting initial state helped thanks ton nt completely obvious guessing binding needs compile property gets updated binding refreshes totally makes sense", "d": "3/2014"}, {"body": "curious plan vue support recursive use components", "d": "3/2014"}, {"body": "jiyinyiyong would useful give example", "d": "3/2014"}, {"body": "common usage treeviews folders nested case project requires recursive rendering components since data want render tree nested elements", "d": "3/2014"}, {"body": "sure think ca nt use components recursively example", "d": "3/2014"}, {"body": "really impressive example love little code necessary implement tree view awesome", "d": "3/2014"}, {"body": "thread getting long nt want people get spammed whenever someone else posts since questions often directly related source code opened new repo general discussion question thread please post general questions", "d": "3/2014"}, {"body": "read composing viewmodels section nt got docs english intuitive code chinese people maybe familiar usage component demo nt work nested", "d": "3/2014"}, {"body": "closing implementing cspcompliant expression parser would significantly bloat code base marginal use case hindsight possible avoid using expressions together using computed properties", "d": "3/2014"}, {"body": "awesome work vuejs best intuitive compact nojquery perf consideration good mobile talking vuevalidate think validation rules better written model feel something strange write specific view idea syntax providing vuescope like", "d": "3/2014"}, {"body": "kaiinui cool like validation idea syntax intuitive validation still open suggestions looks like good option sure example though", "d": "3/2014"}, {"body": "currently want filter data code like defining methods hook somewhere intuitive way filter data normalized think vue provide normalized way filtering data enough basic great like scopes written somewhere syntax idea duality", "d": "3/2014"}, {"body": "kaiinui fact pipe repeated array filter want example js function foofilter thing function barfilter thing var currentfilter foofilter vm options filters thingfilter function things return thingsfilter currentfilter thing note change need force update new filter external filter tracked vue", "d": "3/2014"}, {"body": "continuing duckbox path statusplans isomorphic ie support rendering client server nodejs ractive example listed expressjs alternative template engine context progressive enhancement pjax seo friendlinessease twitter remake content first dust linkedin etc", "d": "3/2014"}, {"body": "erikandreas see nt think option moment fact vuejs uses dombased templating makes dom dependent similar angular knockout ractive react implementation simulated dom isomorphic heavier", "d": "3/2014"}, {"body": "hi plans support variable naming repeating eg itemdiscount shopping cart items cart individual items may might unfortunately silently falls back parent shows wrong discounts say inside repeat want absolutely sure nt fall back parent would nice intentionally avoid parent fallback also sometimes looks good repeaters namespace gets polluted quite lot use starting point contribute back vue syntax sounds fine", "d": "3/2014"}, {"body": "fiddle illustrating rdsubhas problem quick solution explicitly define discount list items", "d": "3/2014"}, {"body": "rdsubhas thanks suggestion like keep syntax directives consistent added html itemdiscount note basically wraps repeated data working repeated child vm need access bound data instead", "d": "3/2014"}, {"body": "looks perfect yes inside repeated child vm well accessing solves namespacing issues view amp model", "d": "3/2014"}, {"body": "great work really loving framework seeing kaiinui proposal validation rules wondering wheter clearer separation model data example feel like separate real model wrong approach maybe related vueresource", "d": "3/2014"}, {"body": "paglias option holds entire viewmodel state something similar angular something strictly model best nest", "d": "3/2014"}, {"body": "yeah find nesting model effective separate state helpers easier reading working templates also easier shipping model api endpoint reference dataperson instead data culling non model entities", "d": "3/2014"}, {"body": "speaking nesting vm methods would also benefit nestingnamespacing eg instead flat list methods like could currently field accepts flat list mix nested structure model", "d": "3/2014"}, {"body": "pesho nest methods sign might putting much responsibilty single viewmodel split logic smaller components appropriate", "d": "3/2014"}, {"body": "would different aspect already nested allows different kinds entities represented naturally saying one vm keep data single kind entity split everything else separate model yes sounds restrictive namespaced methods would surely useful case viewmodel know interconnected could split child viewmodels would complicate things significantly without benefit", "d": "3/2014"}, {"body": "pesho point method needs invoked context invoked using context clear context context would contradict javascript intuition context child vm data object something else much simpler conceptually anything invoke method always vm fact argue splitting app small components simplifies logic instead complicates good architecture comprised selfcontained easy understand modules discrete responsibilities", "d": "3/2014"}, {"body": "expect top level methods fwiw works correctly currently specify method inside instead course pretty see point may look javascript intuition really common practice overload special meaning many existing libraries say use child componentsviewmodels cases parent vm expected keep track children directive applicable create children dynamically js code instead markup stick references children vms parent vm data", "d": "3/2014"}, {"body": "pesho add options also stick parent vm data object hook vm instantitated", "d": "3/2014"}, {"body": "still one issue viewmodel instance designed bound dom element case need child vms store data use eg parent vm take advantage goodies vue provides like observables computed properties methods even nt bind detached dom node still created guess could live causes harm wasting memory", "d": "3/2014"}, {"body": "pesho want abstract object model happens methods think ok put functions simply skipped observing however methods invoked data object context vm methods manipulate state without aware vm", "d": "3/2014"}, {"body": "yup methods one thing also computed properties want children autocompute data currently means objects store must viewmodels vue allow nested computed properties adding computed properties dynamically existing viewmodel fwiw coming knockout far less opinionated viewmodel must structured could add anything vm dynamically plain data observables computed observables functions arbitrary nesting allowed quite complex logic implemented although admit could get messy trying fit complex logic vue model opinionated thus restrictive challenging", "d": "3/2014"}, {"body": "yes vue differs knockout encourages take topdown declarative design strategy instead imperatively build viewmodels ideal situation describe relationship data view beforehand render vue source data plain logicless objects ones directly throw post request viewmodel simply proxies access data vue vm instance always connects raw data corresponding dom element ko viewmodel essentially data line model viewmodel pretty blurry serialize copy vm need raw data", "d": "3/2014"}, {"body": "jbadeau sure mean combining imperative declarative constructor imperative usage allow users register constructor id choice declarative usage second suggestion prefer avoid mixing template syntax javascript code", "d": "3/2014"}, {"body": "take wait till breaking changes", "d": "3/2014"}, {"body": "kristoferjoseph yes please pretty big changes much appreciated", "d": "3/2014"}, {"body": "cool need help", "d": "3/2014"}, {"body": "kristoferjoseph thanks offering help closing almost ready feel free contribute future issues release", "d": "3/2014"}, {"body": "beers", "d": "3/2014"}]