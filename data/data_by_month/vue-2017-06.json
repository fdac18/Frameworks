[{"title": "vif render nt velse", "body": "problem feature solve using vif rendered fulfilled nt velse causes problems using properties like previoussibling nextsibling since counted elements dom proposed api look like without", "num": "6007", "d": "6/2017"}, {"title": "transition group dynamic name correctly applying transition", "body": "version reproduction link steps reproduce run fiddle uncheck checkbox click shuffle button check checkbox click shuffle button expected first shuffle click unchecked checkbox list items reordered transition animation second shuffle click checked checkbox list items reordered transition animation actually happening first shuffle click unchecked checkbox list items reordered transition animation second shuffle click checked checkbox list items still reordered transition animation found via question stackoverflow list shuffled initially unchecking checkbox everything works expected seeing list initially shuffled transition group set", "num": "6006", "d": "6/2017"}, {"title": "luosimao\u4eba\u673a\u9a8c\u8bc1 datacallback\u56de\u8c03 \u65e0\u6cd5\u89e6\u53d1 vcode callback method whick datacallback props div setted", "body": "version reproduction link steps reproduce \u524d\u53f0", "num": "6005", "d": "6/2017"}, {"title": "constant component data", "body": "problem feature solve ability define constant data accessible templatescode way data defined data moment constant data needs made available via data possible freeze objects looks ugly uses certain implementation may change future documentationreadabilitybetter communication intent allow performance optimizations maybe detect unintended changes vue implement way explicitly define constant data could implemented quick dirty simply mixing constants data without making fields reactivethis could also implemented via plugin think important enough part core proposed api look like vue file example", "num": "6004", "d": "6/2017"}, {"title": "improve documentation amp searchability von native modifier", "body": "problem feature solve tl dr makes understanding native event binding custom vue components accessible also reduces downstream issue load component libraries component libraries custom components become prevalent authors one two choice reemit allcommon events component educate users use native binding modifier personally think modifier become component lib standard usage pattern reduces code size mental overhead manually reemitting necessary events custom component contributor bootstrapvue component library know get decent amount issues around educate devs amazingly useful modifier ultimately burdened limited searchability current documentation proposed api look like documentation already sufficient prominent know modifier yet still hard time finding documentation google think common usecase would lead dev search something like listen event component von working vue component valuable results turn would big win dx", "num": "6003", "d": "6/2017"}, {"title": "window resize\u540e\u5bfc\u81f4click\u4e8b\u4ef6\u65e0\u6548", "body": "version reproduction link steps reproduce \u70b9\u51fbbutton\u4f1a\u5f39\u51fa\u4e00\u4e2apopup expected \u70b9\u51fbinput\u540eul\u4e2d\u7684li\u53ef\u4ee5\u8c03\u7528choosediet\u65b9\u6cd5 actually happening", "num": "6001", "d": "6/2017"}, {"title": "unexpected watch behavior object props", "body": "version reproduction link steps reproduce changing price parent component expected behavior vmodel updates object property picked child component updates happen immediately key change price form component watch update tabbing input expected watch behave value changed parent component actually happening watch fired tabbing input came across trying find best way pass props form components think maybe docs could clearer best way find elsewhere sort contrived examples watch behavior makes think things best vue way application developing pattern come crud type changes object representing database record fetch object server parent component issue action vuex sort irrelevant clone object child component contains form update object form passes client side validations emit updated cloned object parent parent saves server tried make crude diagram guess little simple issue watcher addition good example type record update lifecycle talking would really helpful gt database ajax requestresponse fetchdata clone dataobj lt gt gt dataobj vuex store parent formvalidation emit saved obj lt lt savedata", "num": "6000", "d": "6/2017"}, {"title": "click working safarie", "body": "version reproduction link steps reproduce select item dropdown expected dropdown title reflects selected item actually happening title change first jsfiddle issue may unrelated real code functionality works chrome user selected item main dropdown button changes display safari change made also safari click method log anything click method called referenced jsfiddle safari amp chrome console show log message button text change appreciate anyone may able tell going thanks", "num": "5999", "d": "6/2017"}, {"title": "undefined filters", "body": "version reproduction link steps reproduce open fiddle expected component actually happening undefined commonjs jsfiddle intentional component expect component good candidate first pr", "num": "5998", "d": "6/2017"}, {"title": "refs incorrect using vfor combining components elements", "body": "version reproduction link steps reproduce parent dynamic components referenced multiple one uses loading component child switch timeoutasync call expected equals displayed child components actually happening includes child component loading mechanism much edge case took figure solutions trivial solution wrap child template another afaik construct root template supported vue always single root element solutions provided reproduction link", "num": "5997", "d": "6/2017"}, {"title": "\u5173\u4e8eios safari\u548c\u5fae\u4fe1\u6d4f\u89c8\u5668\u540e\u9000\u51fa\u73b0\u7a7a\u767d\u906e\u76d6\u7684\u95ee\u9898", "body": "version reproduction link steps reproduce \u73af\u5883 iphone cpu iphone os like mac os x khtml like gecko iphone cpu iphone os like mac os x khtml like gecko nettypewifi languagezhcn \u6b65\u9aa4 \u6253\u5f00 \u70b9\u51fb\u4efb\u610f\u94fe\u63a5\u8fdb\u5165\u7b2c\u4e8c\u9875 \u4f7f\u7528\u6d4f\u89c8\u5668\u81ea\u5e26\u8fd4\u56de\u6309\u94ae expected actually happening \u906e\u76d6\u8986\u76d6\u4e86\u539f\u6765\u7684\u9875\u9762 \u6f14\u793agit", "num": "5994", "d": "6/2017"}, {"title": "ssr unexpected hydration bailout tag", "body": "version reproduction happens reload key happens video looped steps reproduce add tag appvue demo foobar expected clientside serverside version tag actually happening client server side versions bailout tag content flickering", "num": "5992", "d": "6/2017"}, {"title": "child private state nt reset switch child component father component written jsx", "body": "version reproduction link steps reproduce clone demo branch install amp run default child shown click plus button increase count click switch child count nt reset expected count reset switch actually happening count count", "num": "5991", "d": "6/2017"}, {"title": "consi", "body": "problem feature solve building website code review platform need output file source code html highlight however encountered issue module relied module inside figured mime type file missing corresponding define fallback desired send pr mimetypes add configuration personally think good choice also suggest better one contributor needs source declaim mime type think better refer confirm best mime type declaim somewhere doc proposed api look like related", "num": "5990", "d": "6/2017"}, {"title": "got infinite update error passing jsx vnode childcomponent case", "body": "version reproduction link steps reproduce clone demo checkout branch install amp run click second toggle bar expected error console actually happening", "num": "5989", "d": "6/2017"}, {"title": "callback refs additional alternative named refs", "body": "problem feature solve currently want use refs elements dom elements vue components see attributeprop ref provide string ref attribute callback function ref attribute like react currently supported vue would great also callback functions could provided ref attributes especially bit advanced stuff using render function callback function called referred element created also disposed react example passes null latter case seems feature already implemented past reverted later know reasons changes reverted gt see wip support ref callback thank much proposed api look like please see line const myrefcallback ref remove remove boolean seems like better solution one used react remove case ref callback function called null", "num": "5987", "d": "6/2017"}, {"title": "children style updating custom render function", "body": "version reproduction link steps reproduce click dropdown toggle button expected parent class become visible display block actually happening parent class child node display style applied first render value kept child display none case done way bug something done maybe need fallback good old direct element style modification", "num": "5986", "d": "6/2017"}, {"title": "improved api ui components reducing boilerplate forwarding attributes events", "body": "problem feature solve many cases attributes passed vue component added root element rather subelement example ui component incredible amount props must used ensure attributes added element instead wrapper additionally often desirable expose event listeners form element parent also requires lot boilerplate currently element root case modifier solve problem proposed api look like edit start catch discussion currently default exposed element one arbitrary attributes added always root element new directive could used define different exposed element ideas name directive probably personal favorite probably clearer lengthier added element accept attributes passed component attributes longer passed root element features may nice directive defined multiple elements attributes duplicated across case subset attributes accepted element could accept string array strings eg case attributes would added element instead root element attributes would added root element element valueless", "num": "5983", "d": "6/2017"}, {"title": "computed property updating ssr", "body": "version reproduction link steps reproduce create item create computed property depends data item create hook following actions access computed value change data item anything else print computed value somewhere example expected computed prop value must changed actually happening computed prop value remains unchanged ssr created watcher value flag compare old computed value new one actions affecting computed prop see error ssr client side dom different debugging found computed property simply changing first call ssr may behavior normal nt remember something like documentation", "num": "5982", "d": "6/2017"}, {"title": "click modifiers versus click without modifiers", "body": "version reproduction link steps reproduce ctrl click element jsfiddle expected one event trigger actually happening events trigger believe distinction clicks modifiers without feel would redundancy without distinction yeah general cases nonissue distinction would least crunch definitions signifies click click modifiers", "num": "5980", "d": "6/2017"}, {"title": "error add class table tr data", "body": "version reproduction link steps reproduce execute button agregar fila expected help actually happening adding row data object also want add class new record link example see last added record class", "num": "5979", "d": "6/2017"}, {"title": "error add class table tr data", "body": "adding row data object also want add class new record link example see last added record class", "num": "5978", "d": "6/2017"}, {"title": "add none modifier keyboard", "body": "problem feature solve using modifiers greate ctrl alt meta shift modifier indicating key pressed without ctrl alt shift meta simultaneously proposed api look like keydownspacenone myeventwhenenterispressedalone keydownspace myeventwhenenterispressedwithorwithoutanymodifier", "num": "5976", "d": "6/2017"}, {"title": "memory leak vuejs serverside using computed", "body": "version vue reproduction link steps reproduce use vue server render rendertostring vm server computed define test function without return yes step incorrect throw error pause ok memory leak happend memory leak happend expected throw error pause actually happening vonde going run create destroyed exit heap snapshots found vue created almost look", "num": "5975", "d": "6/2017"}, {"title": "vuewatch", "body": "problem feature solve proposed api look like vuewatch", "num": "5974", "d": "6/2017"}, {"title": "consider giving name current default transition mode", "body": "problem feature solve current default name name current default logically called something like hard spell know currently seems name could documented quick reference talked developers easily remembered since nt really documented nt know handle following scenario switching transition modes programmatically case list valid transition modes looks like really weird think works tbh completely sure based experience nt happen often could imagine wanting eg certain routes dynamically think generally good practice provide list valid values parameters like explicitly point one default better global default common use cases little bit background ux designer fe dev worked lot delivering motion design devs multiple platforms using vue tons projects one things happy transition system makes regular work transition animations easy far pleasant experience js frameworks native platforms makes implementing satisfying level transitions getgo easy reusing named transitions noticed vast majority use cases practical development scenarios either conditionally rendering one element b switching two elements scenario b almost always desired mode needs explicitly set every time used seem affect scenario frustrating manually set time forgetting easily leads hardtocatch mistakes since default new developers learn intricacies transition modes effective scenario b transitions even though nt care mode scenario think could cover scenarios better default course desired mode always depends specific art style specific animations desired however even designer think much better default since transition specs generally speaking broken one element exit transition entry transition next one perspective would make sense default animations played succession dev add extra parameter make happen simultaneously since introduces considerations handle state elements dom time notes sure considered dev team also good reasons current default think best solution would able set default transition mode global configuration projecttoproject basis would nt mind configuring oneliner would let dev make conscious choice reflects design current project two individual requests think go together extent naming current default would needed order support configuration parameter guess clarify request proposed api look like vueconfigurationdefaulttransitionmode outin const modestotoggle simultaneous outin inout", "num": "5972", "d": "6/2017"}, {"title": "suggestion using plugin single project contains multi versions vue", "body": "problem feature solve project may contains different versions vue designing plugin system designed plugin would available one vue library matter many vue libs require javascript module project import vue vue maybe vue import myplugin myplugin vueuse myplugin vuedosomething yeah javascript module project import vue vue maybe vue import plugin myplugin vueuse myplugin nt work installed already set true vuedosomething boom undefined proposed api look like javascript module project import vue vue import myplugin myplugin vueuse myplugin vue dosomething yeah data properity hope", "num": "5970", "d": "6/2017"}, {"title": "keepalive component destory immediately use vuerouter", "body": "version reproduction link steps reproduce keepalive component foo nokeepalive component bar common parent content page foo click page bar change style gt height click page foo expected page foo height keep right css page bar height actually happening page foo height page bar height nothing happen tt solution thank much", "num": "5969", "d": "6/2017"}, {"title": "router params ca nt void string", "body": "version reproduction link steps reproduce javascript path couponsearch keyword name couponsearch component couponsearch routerpush name couponsearch params keyword keyword keyword void string router ca nt matched expected go couponsearch paramskeyword void string actually happening router ca nt matched", "num": "5968", "d": "6/2017"}, {"title": "router params ca nt void string", "body": "version reproduction link steps reproduce javascript path couponsearch keyword name couponsearch component couponsearch routerpush name couponsearch params keyword keyword keyword void string router ca nt matched expected go couponsearch paramskeyword void string actually happening router ca nt matched", "num": "5967", "d": "6/2017"}, {"title": "support duplex vmodel binding \u63d0\u4f9bvmodel\u7684\u53cc\u5411\u7ed1\u5b9a", "body": "problem feature solve \u8fd9\u79cd\u573a\u666f proposed api look like javascript export default model name value event input duplex true methods changevalue newvalue thisvalue newvalue", "num": "5966", "d": "6/2017"}, {"title": "recursively pass slots recursive component", "body": "problem feature solve currently pass slot recursive component effective first level would nice passed recursively proposed api look like jade myrecursivecomponent model nestedobj template recursivescope span client content myrecursivecomponent div div component content slot myrecursivecomponent vif modelhaschild model modelchild", "num": "5965", "d": "6/2017"}, {"title": "add shouldprefetch vueserverrenderer", "body": "problem feature solve using vue create static site like via every code split asset getting prefetched awesome feature thinking offline mode trying create site triple digit routes little concern offline browsing ie marketing site creating pretty beefy code overhead would great way get shouldprefetch vueserverrenderer similar shouldpreload proposed api look like exactly like shouldpreload prefetching would great", "num": "5964", "d": "6/2017"}, {"title": "vfor", "body": "problem feature solve var lt something thanks proposed api look like vfor", "num": "5962", "d": "6/2017"}, {"title": "vue component must top container", "body": "problem feature solve vue component must top container think much dom wasted affected page struct style example vuerouter single page app must container mount page vue component must top container time nt need two parent container another example vhtml use abstract element use must use real dom element sometime three parent dom wasted matter careful design dom component situation absoulty avoided think need improve thing know implement difficult rember version vue must top container proposed api look like example page main content area common navigation bar html hello world links vurrouter page finally html hello world links vhtml component like want result like muname component must terrible", "num": "5961", "d": "6/2017"}, {"title": "giving error add logical operators vmodel", "body": "version reproduction link steps reproduce run repro expected show first checkbox enabled second disabled actually happening referenceerror invalid lefthand side assignment console", "num": "5960", "d": "6/2017"}, {"title": "passing empty string boolean type prop result true", "body": "version reproduction link steps reproduce run repro expected false get warning actually happening true", "num": "5959", "d": "6/2017"}, {"title": "cant access fs functions", "body": "version reproduction link reproduceable jsfiddle steps reproduce make empty project vuecli add hellovue expected nothing happen actually happening error occurs says function exist im javascrip senior think bug please help trying use found bug", "num": "5955", "d": "6/2017"}, {"title": "load function upon page load", "body": "beginner vuejs programmer know trigger function using click method vuejs however want know trigger function page loads something like vinit angular thanks", "num": "5954", "d": "6/2017"}, {"title": "\u70ed\u66f4\u65b0\u672a\u77e5\u95ee\u9898", "body": "npm run dev \u4ee5\u540e net errincompletechunkedencoding", "num": "5953", "d": "6/2017"}, {"title": "use sweet alert standalone class vue js", "body": "hello use sweet alert standalone class vue js component variable form new form everywhere needed", "num": "5952", "d": "6/2017"}, {"title": "npm run build error error staticjsvendorjs uglifyjs", "body": "vue webpack webpackprodconfjs plugins new webpackdefineplugin processenv env new webpackoptimizeuglifyjsplugin compress warnings false comments false sourcemap false mangle true hash version webpack time asset size chunks chunk names kb emitted staticjsappjs kb emitted app staticjsvendorjs mb emitted big vendor staticjsmanifestjs kb emitted manifest staticcssappcss kb emitted app staticindexhtml bytes emitted error staticjsvendorjs uglifyjs unexpected token punc build complete tip built files meant served http server opening indexhtml file wo nt work webpackprodconfjs remove uglifyjsplugin plugins npm run build error compress like version webpack time asset size chunks chunk names kb emitted staticjsappjs kb emitted big app staticjsvendorjs mb emitted big vendor staticjsmanifestjs kb emitted manifest staticcssappcss kb emitted app staticindexhtml bytes emitted build complete tip built files meant served http server opening indexhtml file wo nt work fix error", "num": "5950", "d": "6/2017"}, {"title": "warn using incompatible precompiled templates", "body": "problem feature solve wasted hours debugging caused importing precompiled template compiled older version vue subtle differences simple warning objects passed nt look like expected would saved hours proposed api look like afaict least particular issue simply warn exists future may want include semver version number compiled templates morereliably check kind issue", "num": "5949", "d": "6/2017"}, {"title": "running vue development mode without virtual dom", "body": "problem feature solve hopefully would produce actual errors proposed api look like adopt framework without virtual dom actually render stuff using vue syntax", "num": "5948", "d": "6/2017"}, {"title": "webkitkeyframes hash working", "body": "version sassloade nodesass reproduction link steps reproduce npm run build expected actually happening", "num": "5946", "d": "6/2017"}, {"title": "\u7f16\u8bd1\u540e css webkitkeyframes \u90e8\u5206\u6ca1\u88ab hash", "body": "\u6211\u7528\u7684\u662fsass", "num": "5945", "d": "6/2017"}, {"title": "use vue ios communication", "body": "msg divchange divchange event got change event", "num": "5944", "d": "6/2017"}, {"title": "object props set object item default value", "body": "problem feature solve component many props want wrap props object time want props object default value proposed api look like", "num": "5942", "d": "6/2017"}, {"title": "read property ssrcontext undefined", "body": "version reproduction link steps reproduce git clone change srcutiltitlejs file like vue hn title change const title gettitle vue hn ssrcontext ssrcontexttitle title according functional robustness changed code ok normal thinking npm install amp npm run dev open browser enter expected condition statement ensured undefined trying set value shoud ok normal expected actually happening error trace console error browser internal server error suppose bug vueserverrenderer happened", "num": "5941", "d": "6/2017"}, {"title": "vtext nt support filter", "body": "problem feature solve ca nt use vtext dosomething filter args maybe pipeline operator proposed api look like vtext dosomething filter args", "num": "5939", "d": "6/2017"}, {"title": "vmodel breaks format applied input text fields", "body": "version reproduction link steps reproduce create two input text define vmodel one format input blur event remove format focus event expected loses format focused input typing actually happening format removed input text vmodel attribute plunker link direct explanation problem angular sample created show expected behavior", "num": "5938", "d": "6/2017"}, {"title": "add sync modifier vbind directive", "body": "problem feature solve currently syntax supported however want use modifier props ca nt use object destructuring syntax anymore proposed api look like", "num": "5937", "d": "6/2017"}, {"title": "make vfor syntax objects work arrays", "body": "problem feature solve one iteration object array know hand would usefull use properly populated proposed api look like using would value index element array template html key value key value js result firstname john lastname doe age b c", "num": "5936", "d": "6/2017"}, {"title": "proxy von modifier feature request", "body": "problem feature solve sometimes custom component emitting events deep component hierarchy want listen events somewhere top hierarchy consider simple click element instance native event would propagate vue events nt intermediate components event origin listening one may need ensure event propagation manually simply reemitting event something like code ugly verbose getting even uglier templates proposed api look like add modifier", "num": "5935", "d": "6/2017"}, {"title": "easiertouse hoc method", "body": "problem feature solve currently ca nt find anything official vue document create hoc closest thing find web post spreading properties seem verbose think popular way achieve composition vue component use mixins common problems minxins mixins introduce implicit dependencies mixins cause name clashes mixins cause snowballing complexity know vue handles conflicting pretty well personally think would developer fault using escape hatch finish complex composition still could problem next question vue promotes use mixin proposed api look like maybe something like", "num": "5934", "d": "6/2017"}, {"title": "ca nt tell component custom event came", "body": "problem feature solve adding event listener multiple components impossible tell component custom events came take following event handler passed object provided argument way knowing component came end working around passing index component passing back emitted event seems like bit hack proposed api look like honest idea solve one run issue pretty frequently though couple threads forums perhaps second argument", "num": "5933", "d": "6/2017"}, {"title": "warn bound nonexistent key", "body": "problem feature solve considering binding works fine example data null defined componentdata data defined nt work correctly created vmodel made reactive using vueset setting values would nt problem would make live easiert certain usecases proposed api look like visible change maintain actual behaviour could also implemented using modifier like set example would use vueset data instead simply generating", "num": "5932", "d": "6/2017"}, {"title": "canvas node nt reuse", "body": "version reproduction link steps reproduce like jsfiddle expected hope clean switch tab actually happening node reused get used guess template might compiled like javascript render h gt const child", "num": "5931", "d": "6/2017"}, {"title": "example chinese doc different english", "body": "steps reproduce according chinese doc see copy example test page console enter click show dialog box click u see error console example english doc ok last found different chinese english expected ps think create issues page friendly use markdown language paste image describe problem better detail actually happening", "num": "5930", "d": "6/2017"}, {"title": "prevent modifier work mousedown event", "body": "version reproduction link steps reproduce click tag left click mouse expected redirect href link actually happening jump href link", "num": "5929", "d": "6/2017"}, {"title": "onewaydataflow working", "body": "version reproduction link steps reproduce pass data child component prop save prop component data update data child object parent also updated expected saving updating data passed prop child component actually happening child components mutating parent state tt passing object component edited component cancel object edition saving expect onewaydataflow work", "num": "5928", "d": "6/2017"}, {"title": "changes detected vuejs using selenium ide works", "body": "version reproduction link steps reproduce save following html file open selectframe result type cssinput type text test open selenium ide firefox run expected show test hello underneath input text box actually happening displays text modify vuejs version changing script tag text updates correctly use fiddle enter text manually works fine well reason something changed makes tests selenium ide stop working encountered bug selenium ide testing upgrading code vuejs", "num": "5927", "d": "6/2017"}, {"title": "add support object destructuring von", "body": "problem feature solve declaring components sort repetitive syntax occurs lot feature would allow event declarations dry similar way vbind currently works proposed api look like", "num": "5926", "d": "6/2017"}, {"title": "looks like regression prop modifier components", "body": "version reproduction link steps reproduce create component pass props using vbind add prop modifier property values appear set component correctly undefined bad stuff occurs expected vue prop modifier nt observable effect eg fooprop bar would nt write html attribute foo nt prop component question actually happening vue prop bound prop modifier undefined accessing component go reading docs could nt find concrete definition vbind fooprop interplay components vue used prop would guarantee html would generated would nice either behaviour restored another modifier created say component doens nt prop called foo ignore binding eg", "num": "5925", "d": "6/2017"}, {"title": "using von iframes", "body": "version reproduction link steps reproduce use von click iframe element expected click handler invoked actually happening click handler invoked", "num": "5923", "d": "6/2017"}, {"title": "confirmed memory leak", "body": "version reproduction link steps reproduce stimulate garbage collection dump memory heap expected instances use garbage collected actually happening opposite heap dump file found", "num": "5922", "d": "6/2017"}, {"title": "filter trigger", "body": "version reproduction link steps reproduce let create list elements apply filter substitute time creation element let add one element expected filter function must called last element added actually happening filter function applied elements", "num": "5921", "d": "6/2017"}, {"title": "add one item list filter method trigger items", "body": "created render list filter trigger item elements add new item list filter trigger new old items", "num": "5920", "d": "6/2017"}, {"title": "setattribute function", "body": "version reproduction link steps reproduce nt able make reproduce environment vue ssr using rendertostream error occurs sometimes feels like race condition something error look source line breaks cause never nullchecked expected site render correctly actually happening getting clientside error breaks site", "num": "5919", "d": "6/2017"}, {"title": "safari\u6d4f\u89c8\u5668\u4e0b\u65e0\u6cd5\u89e6\u53d1form\u6807\u7b7e\u7684submit\u4e8b\u4ef6", "body": "version reproduction link steps reproduce \u95ee\u9898\u63cf\u8ff0 \u5728safari vue \u6e32\u67d3\u4e0b\u7684 form \u4f7f\u7528\u590d\u73b0\u9875\u9762 \u6253\u5f00\u63a7\u5236\u53f0 \u968f\u4fbf\u9009\u62e9\u4e00\u4e2a\u6587\u4ef6 \u4f1a\u770b\u5230\u63a7\u5236\u53f0\u63d0\u793apost\u51fa\u9519\u7684\u95ee\u9898 \u8fd9\u8bf4\u660esubmit\u4e8b\u4ef6\u662f\u89e6\u53d1\u4e86 \u540c\u6837\u64cd\u4f5c \u6539\u4e3a\u6b63\u5e38js\u4e8b\u4ef6\u7ed1\u5b9achange \u5e76\u63d0\u4ea4 expected safari\u80fd\u591f\u89e6\u53d1submit actually happening safari\u65e0\u4efb\u4f55\u53cd\u9988", "num": "5918", "d": "6/2017"}, {"title": "ca nt get child component clientwidth etc", "body": "version reproduction link steps reproduce ca nt get child component lot el propertyi use ref register javascript picture access dom child componenti get dom propertycode almost like picture expected want access child dom property root component actually happening get child dom property child component selfbut ca nt get property root component nt vue filethat oki nt know whyi think template element cause jsbin example really situation", "num": "5917", "d": "6/2017"}, {"title": "found parsing anomaly vue component data function defintion", "body": "found trying play around example vue tutorial laracast vue component defined using coding style nt work style works former gives following errors dev tools took figure sure going vue reproduce please use working example working example files", "num": "5916", "d": "6/2017"}, {"title": "support passive modifier render function", "body": "problem feature solve try use render function found support passive feature optionbut von directive supported passive modifieris way use passive modifier render function bind event proposed api look like", "num": "5915", "d": "6/2017"}, {"title": "allow use array syntax keepalive includeexclude", "body": "problem feature solve commadelimited string syntax intuitional actually splitting string array support array syntax directly proposed api look like", "num": "5914", "d": "6/2017"}, {"title": "injected objects reactive despite documentation saying opposite", "body": "version reproduction link steps reproduce provide parent component object preexisting key inject object child component either consolelog object see reactive modify value preexisting key see value also changes screen automatically expected according vue documentation injected objects reactive note provide inject bindings reactive value change screen seconds consolelog display word getter logging injected object actually happening injected object reactive message changes screen seconds consolelogging object shows reactive displays word getter use inject inject commonly used libraries objects like moment use templates display nicely formatted dates entire moment library object becomes reactive probably cause unnecessary performance hit browser using moment library", "num": "5913", "d": "6/2017"}, {"title": "updated function run async action chrome firefox", "body": "problem feature solve code messagevue expect fetched updated expected firefox run linux results chrome run linux updated fetched proposed api look like dont know", "num": "5911", "d": "6/2017"}, {"title": "\u62a5\u9519invalidcharactererror vueminjs", "body": "version reproduction link steps reproduce expected error actually happening \u62a5\u9519invalidcharactererror", "num": "5910", "d": "6/2017"}, {"title": "jsonstringify looseequal necessary keys order", "body": "see looseequal function using quarantines key order serializing see properties nonarray objects guaranteed stringified particular order rely ordering properties within object within stringification", "num": "5908", "d": "6/2017"}, {"title": "vue hydrate successfully", "body": "problem feature solve according ssr hydration docs development mode vue assert clientside generated virtual dom tree matches dom structure rendered server mismatch bail hydration discard existing dom render scratch production mode assertion disabled maximum performance would one know hydration succeededfailed assertion disabled production mean vue defaults discarding dom vue assume server sent proper markup would imagine failed hydration would something would nice capture eg via tracked fixed proposed api look like indeed hydration mode exposed global multiple modes vue run simultaneously booleanexception exposed let developer know hydration succeeded", "num": "5907", "d": "6/2017"}, {"title": "transition working chrome version", "body": "version reproduction link steps reproduce install chrome beta visit official vue transition documentation example jsfiddle link click toggle button expected hello message appears disappears use fade transition actually happening hello message appears disappears instantly", "num": "5906", "d": "6/2017"}, {"title": "bug render function img src used", "body": "version reproduction link steps reproduce steps src attribute included dom expected src attribute included vue logo visible actually happening src attribute included logo thus visible also happened widthheight attributes", "num": "5905", "d": "6/2017"}, {"title": "created mounted called component inside velse", "body": "version reproduction link steps reproduce tell seems caching components within blocks element structure mirrored eg following template issue present html structure works expected follow reproduction open console click toggle isactive button expected called within called within actually happening called within initial load set called set back nothing set back called", "num": "5903", "d": "6/2017"}, {"title": "inconsistent behavior vmodel sync ime composition", "body": "problem feature solve languages require ime chinese japanese korean etc notice vmodel get updated ime composition ok type search ok proposed api look like languages require ime chinese japanese korean etc vmodel type search get updated ime composition", "num": "5902", "d": "6/2017"}, {"title": "windowsonerror working", "body": "version reproduction link steps reproduce create global error handler something like windowonerror function e alert error caught inside function vue methods throw exception example throw hello expected alert box shown actually happening nothing seems vue silence error want use centralized error handling mechanism user generated errors", "num": "5901", "d": "6/2017"}, {"title": "transition mode honored conditionally rendered elements", "body": "version reproduction link steps reproduce create list elements conditionally rendered based current index within transition group set transitiongroup mode outin exercise transition see jsfiddle code compare dynamic component whose template changes based current index expected conditional list components honor outin mode transition currently active element finish transition next element begins behavior dynamic component case actually happening outin mode ignored conditional list elements transitions current next elements happen simultaneously however outin behaves expected dynamic component", "num": "5900", "d": "6/2017"}, {"title": "ref component list updated using splice swap elements", "body": "version reproduction link steps reproduce open run click swap components confirm ref updated expected ref updated key supplied components really swapped actually happening ref updated", "num": "5899", "d": "6/2017"}, {"title": "ssr directive access dom", "body": "problem feature solve want prerender text resources proposed api look like ssr directives textresource function vnode directivemeta", "num": "5898", "d": "6/2017"}, {"title": "koaviews\u652f\u6301vue", "body": "problem feature solve \u5728\u8fd9\u4e2a\u5e93\u4e2d\u652f\u6301vue proposed api look like", "num": "5897", "d": "6/2017"}, {"title": "error render function using dynamic require computed", "body": "version reproduction link steps reproduce ajax formdata nodejs users upload image nodejs save img disk send hash image component component dynamic require image computed method expected error actually happening vueesmjs error find module webpackcontextresolve eval webpackcontext eval vuecomponentimgsrc eval watcherget eval watcherevaluate eval vuecomponentcomputedgetter imgsrc eval objectget eval proxyrender eval vuecomponentvuerender eval vuecomponentupdatecomponent eval handleerror vueesmjs vuerender vueesmjs updatecomponent vueesmjs get vueesmjs run vueesmjs flushschedulerqueue vueesmjs anonymous vueesmjs nexttickhandler vueesmjs", "num": "5896", "d": "6/2017"}, {"title": "\u662f\u5426\u5b98\u65b9\u6765\u7ef4\u62a4", "body": "problem feature solve \u80fd\u83b7\u53d6\u6700\u65b0\u7684 dts proposed api look like", "num": "5894", "d": "6/2017"}, {"title": "vfor support arraylike objects", "body": "problem feature solve allow iterating smart arrays extendinherit array instance array something like arguments instance array proposed api look like change api", "num": "5893", "d": "6/2017"}, {"title": "keepalive work transitiongroup", "body": "version reproduction link steps reproduce jsfiddle created gentleman vue help forum complete replicate problem good starting point testing put something random cached keepalive card component wrap keepalive around card components directly components wo nt rendered wrap keepalive around card components directly key components wo nt rendered wrap keepalive around components rendered nothing gets cached specify name using nt help either expected rating status rating component kept cards correspondingly actually happening nothing kept card components rendered due vue needs items keyed nt quite make sense keepalive went ahead keyed keepalive anyway still luck stuck issue long enough think probably time reach help search interface displays results using vfor switched different view user click component inside called want rating info kept users switch thought obvious case documentation seems quite straight forward however matter wrap keep alive target name nt work help would appreciated thanks partial dom structure code code component look like", "num": "5892", "d": "6/2017"}, {"title": "vfor settimeout child component creates index issue", "body": "version reproduction link steps reproduce codepen consists container child component container owns array alerts displayed child component mount uses schedule event let parent know time remove container listens event removes item array codepen opens execute expected alerts close actually happening alert saying disappear seconds continues stay visible loads debugging one settimeout simply nt work onclick event works expected", "num": "5891", "d": "6/2017"}, {"title": "keepalive component abstract component ignores slot name", "body": "version reproduction link steps reproduce open reproduction link expected foocontent shown foo slot actually happening foocontent shown default slot specification ignored slot name stored lost line intentional behaviour", "num": "5888", "d": "6/2017"}, {"title": "expose uid public value vue instances", "body": "problem feature solve adding aria roles accessibility vue component requires setting unique attribute html element component template nt additional requirements aside unique page rather manage instance attributes higher level like component create render appropriate attributes good example collapsibleaccordionstyle ui template could look like proposed api look like using template method sets value nt like proposed solutions reference thisuid since private value subject change future instead like set value based upon publicly available identifier something like way multiple instances component page get unique attributes without needing first declare values parent application resorting complex means generating random strings", "num": "5886", "d": "6/2017"}, {"title": "render function ca nt correct rendering dom", "body": "version reproduction link steps reproduce run code expected rendered dom actually happening", "num": "5885", "d": "6/2017"}, {"title": "vueset api strange behavior path numerical string", "body": "version reproduction link steps reproduce vueset array indexinthearrayinstring value working expected compare vueset array indexinthearrayinnumericform value expected version working suppose actually happening watcher value triggered even value correctly changed model currently fixed code export function advvueset obj path value isnan path path path vueset obj path value", "num": "5884", "d": "6/2017"}, {"title": "way set current runtime server rely checking typeof window undefined", "body": "problem feature solve want try vue ssr custom node framework simulated global variable window runtime navigator property window error occurs requiring vue code vueruntimecommonjs line browser environment sniffing var inbrowser typeof window undefined var ua inbrowser amp amp windownavigatoruseragenttolowercase add code like windownavigator useragent workaround think vue runtime consider running browser many side effects ssr global config could set runtime environment skip checking typeof window undefined would great thanks proposed api look like maybe another way detect environment", "num": "5882", "d": "6/2017"}, {"title": "key attribute set ignored transitiongroup", "body": "version reproduction link steps reproduce click trigger button one list visible instead two expected according documentation expecting use vbind object notation set key attribute actually happening list rendered attribute directly present element aware special attribute may sort hen egg problem work rendering items transitiongroup behaviour intentional maybe space improvement documentation", "num": "5881", "d": "6/2017"}, {"title": "ca nt use template single file component", "body": "version reproduction link steps reproduce create projectname full remove blazetemplate reactivevar standardminifiercss add akryum vuecomponent statichtml juliancwirko postcss appvue notfoundvue importsuipages directory content found importsstartupclientroutesjs importsstartupclientindexjs run expected help actually happening got writing vue meteor app used akryum vuecomponent packagemy vue version meteor version", "num": "5880", "d": "6/2017"}, {"title": "please unreserve underscore allow user usage", "body": "version developer many years many others using underscorestarting variables functions convey special meaning somehow restricted temporary internal use real implementation one wrapper etc taking away ability unnecessary handicapping developers opens door bugs bitten vue handling properties long time ago googling many others done prompted submit issue created method given renaming method already used places combine edits rename outcome imagine long frustrating session debugging propose underscore cleared regular usage users could really simple like renaming internal stuff start instead namespacing everything something like presume would require serious code shuffling", "num": "5879", "d": "6/2017"}, {"title": "warn using arrow function", "body": "problem feature solve team sometimes forget instance must declared ordinary function arrow function described declaration causes unexpected behavior takes time debug proposed api look like api request simple warning browser console would helpful", "num": "5878", "d": "6/2017"}, {"title": "multiple selectors vue instance", "body": "problem feature solve would solve vuejs conflicts google maps recaptchasometimes ca nt vue container wrap whole site one div example plugins wordpress use tag script besides html template inside vue container vue nt allow proposed api look like proposal allow vue multiple islands webpage", "num": "5877", "d": "6/2017"}, {"title": "accessing props attributes html elements", "body": "version reproduction link steps reproduce run jsfiddle see output browser developer view expected expected output browser actually happening see examples vue use props attributes html elements set id greeting instead setting id something changed version vue version worked properly", "num": "5876", "d": "6/2017"}, {"title": "clickprevent also prevents child elements interactions", "body": "version reproduction link steps reproduce click link prevented try open input file prevented expected element prevented child elements default actions nt prevented actually happening element prevented child elements default actions prevented want use elements default actions inside parent element uses nt help either", "num": "5875", "d": "6/2017"}, {"title": "support transition classes normal classes", "body": "problem feature solve stuck one computed class would make code cleaner transition class syntax powerful normal class syntax mean array syntax object syntax direct javascript mix binded static classes proposed api look like html", "num": "5874", "d": "6/2017"}, {"title": "support transition classes normal classes", "body": "broken posting directly stuck one computed class would make code cleaner transition class syntax powerful normal class syntax mean array syntax object syntax direct javascript mix binded static classes html", "num": "5873", "d": "6/2017"}, {"title": "", "body": "problem feature solve proposed api look like javascript path login name login component login beforeenter next localstoragegetitem token next fromfullpath else next javascript routerbeforeeach next gt nprogressstart next routeraftereach gt nprogressdone", "num": "5872", "d": "6/2017"}, {"title": "validator prop change", "body": "problem feature solve props executed passedin props creation binding value prop updated bypass validation proposed api look like api change validation checks value change", "num": "5871", "d": "6/2017"}, {"title": "expose createtextvnode functionality api", "body": "problem feature solve vue component function normal way create vnode represents naked text would create needed want generate things like hello vue world proposed api look like propose change api one ways add behavior function given user function used creating text vnode document propose use null undefined first parameter expose function also somewhere inside vue", "num": "5870", "d": "6/2017"}, {"title": "npm run", "body": "problem feature solve npm run proposed api look like error windowsnt error argv program filesnodejsnodeexe program filesnodejsnodemodulesnpmbinnpmclijs run dev error node error npm error code elifecycle error client dev error exit status error failed client dev script node builddevserverjs error make sure latest version nodejs npm installed error likely problem client package error npm error tell author fails system error node builddevserverjs error get information open issue project error npm bugs client error nt available get info via error npm owner ls client error likely additional logging output verbose exit true", "num": "5869", "d": "6/2017"}, {"title": "npm run", "body": "problem feature solve npm run proposed api look like \u62a5\u9519\u4fe1\u606f info worked ends ok verbose cli program filesnodejsnodeexe verbose cli program filesnodejsnodemodulesnpmbinnpmclijs verbose cli run verbose cli dev info using npm info using node verbose runscript predev dev postdev info lifecycle client client silly lifecycle client script predev continuing info lifecycle client client verbose lifecycle client unsafeperm lifecycle true verbose lifecycle client path program filesnodejsnodemodulesnpmbinnodegypbin c userscatdesktopvueagrolotnodemodulesbin c c windows c c program program c program files windows performance toolkit c program filesmicrosoft sql program program filescurl program filesputty program filestortoisesvnbin c program program filesredis c userscatappdataroamingnpm program c programdatacomposersetupbin c program filesgitcmd program program program filesnodejs program filesyarnbin program filesmicrosoft vs codebin c userscatappdataroamingcomposervendorbin c userscatappdataroamingnpm c userscatappdatalocalyarnbin verbose lifecycle client cwd c userscatdesktopvueagrolot silly lifecycle client args c node builddevserverjs silly lifecycle client returned code signal null info lifecycle client failed exec dev script verbose stack error client dev node builddevserverjs verbose stack exit status verbose stack eventemitter program verbose stack emittwo verbose stack eventemitteremit verbose stack childprocess program verbose stack emittwo verbose stack childprocessemit verbose stack maybeclose verbose stack processchildprocesshandleonexit verbose pkgid client verbose cwd c userscatdesktopvueagrolot error windowsnt error argv program filesnodejsnodeexe program filesnodejsnodemodulesnpmbinnpmclijs run dev error node error npm error code elifecycle error client dev node builddevserverjs error exit status error failed client dev script node builddevserverjs error make sure latest version nodejs npm installed error likely problem client package error npm error tell author fails system error node builddevserverjs error get information open issue project error npm bugs client error nt available get info via error npm owner ls client error likely additional logging output verbose exit true info worked ends ok verbose cli program filesnodejsnodeexe verbose cli program filesnodejsnodemodulesnpmbinnpmclijs verbose cli run verbose cli dev info using npm info using node verbose runscript predev dev postdev info lifecycle client client silly lifecycle client script predev continuing info lifecycle client client verbose lifecycle client unsafeperm lifecycle true verbose lifecycle client path program filesnodejsnodemodulesnpmbinnodegypbin c userscatdesktopvueagrolotnodemodulesbin c c windows c c program program c program files windows performance toolkit c program filesmicrosoft sql program program filescurl program filesputty program filestortoisesvnbin c program program filesredis c userscatappdataroamingnpm program c programdatacomposersetupbin c program filesgitcmd program program program filesnodejs program filesyarnbin program filesmicrosoft vs codebin c userscatappdataroamingcomposervendorbin c userscatappdataroamingnpm c userscatappdatalocalyarnbin verbose lifecycle client cwd c userscatdesktopvueagrolot silly lifecycle client args c node builddevserverjs silly lifecycle client returned code signal null info lifecycle client failed exec dev script verbose stack error client dev node builddevserverjs verbose stack exit status verbose stack eventemitter program verbose stack emittwo verbose stack eventemitteremit verbose stack childprocess program verbose stack emittwo verbose stack childprocessemit verbose stack maybeclose verbose stack processchildprocesshandleonexit verbose pkgid client verbose cwd c userscatdesktopvueagrolot error windowsnt error argv program filesnodejsnodeexe program filesnodejsnodemodulesnpmbinnpmclijs run dev error node error npm error code elifecycle error client dev node builddevserverjs error exit status error failed client dev script node builddevserverjs error make sure latest version nodejs npm installed error likely problem client package error npm error tell author fails system error node builddevserverjs error get information open issue project error npm bugs client error nt available get info via error npm owner ls client error likely additional logging output verbose exit true", "num": "5868", "d": "6/2017"}, {"title": "close cmd error", "body": "version reproduction link steps reproduce npm run expected \u5173\u6389\u540e\u4e0d\u62a5\u9519 actually happening info worked ends ok verbose cli program filesnodejsnodeexe verbose cli program filesnodejsnodemodulesnpmbinnpmclijs verbose cli run verbose cli dev info using npm info using node verbose runscript predev dev postdev info lifecycle client client silly lifecycle client script predev continuing info lifecycle client client verbose lifecycle client unsafeperm lifecycle true verbose lifecycle client path program filesnodejsnodemodulesnpmbinnodegypbin c userscatdesktopvueagrolotnodemodulesbin c c windows c c program program c program files windows performance toolkit c program filesmicrosoft sql program program filescurl program filesputty program filestortoisesvnbin c program program filesredis c userscatappdataroamingnpm program c programdatacomposersetupbin c program filesgitcmd program program program filesnodejs program filesyarnbin program filesmicrosoft vs codebin c userscatappdataroamingcomposervendorbin c userscatappdataroamingnpm c userscatappdatalocalyarnbin verbose lifecycle client cwd c userscatdesktopvueagrolot silly lifecycle client args c node builddevserverjs silly lifecycle client returned code signal null info lifecycle client failed exec dev script verbose stack error client dev node builddevserverjs verbose stack exit status verbose stack eventemitter program verbose stack emittwo verbose stack eventemitteremit verbose stack childprocess program verbose stack emittwo verbose stack childprocessemit verbose stack maybeclose verbose stack processchildprocesshandleonexit verbose pkgid client verbose cwd c userscatdesktopvueagrolot error windowsnt error argv program filesnodejsnodeexe program filesnodejsnodemodulesnpmbinnpmclijs run dev error node error npm error code elifecycle error client dev node builddevserverjs error exit status error failed client dev script node builddevserverjs error make sure latest version nodejs npm installed error likely problem client package error npm error tell author fails system error node builddevserverjs error get information open issue project error npm bugs client error nt available get info via error npm owner ls client error likely additional logging output verbose exit true info worked ends ok verbose cli program filesnodejsnodeexe verbose cli program filesnodejsnodemodulesnpmbinnpmclijs verbose cli run verbose cli dev info using npm info using node verbose runscript predev dev postdev info lifecycle client client silly lifecycle client script predev continuing info lifecycle client client verbose lifecycle client unsafeperm lifecycle true verbose lifecycle client path program filesnodejsnodemodulesnpmbinnodegypbin c userscatdesktopvueagrolotnodemodulesbin c c windows c c program program c program files windows performance toolkit c program filesmicrosoft sql program program filescurl program filesputty program filestortoisesvnbin c program program filesredis c userscatappdataroamingnpm program c programdatacomposersetupbin c program filesgitcmd program program program filesnodejs program filesyarnbin program filesmicrosoft vs codebin c userscatappdataroamingcomposervendorbin c userscatappdataroamingnpm c userscatappdatalocalyarnbin verbose lifecycle client cwd c userscatdesktopvueagrolot silly lifecycle client args c node builddevserverjs silly lifecycle client returned code signal null info lifecycle client failed exec dev script verbose stack error client dev node builddevserverjs verbose stack exit status verbose stack eventemitter program verbose stack emittwo verbose stack eventemitteremit verbose stack childprocess program verbose stack emittwo verbose stack childprocessemit verbose stack maybeclose verbose stack processchildprocesshandleonexit verbose pkgid client verbose cwd c userscatdesktopvueagrolot error windowsnt error argv program filesnodejsnodeexe program filesnodejsnodemodulesnpmbinnpmclijs run dev error node error npm error code elifecycle error client dev node builddevserverjs error exit status error failed client dev script node builddevserverjs error make sure latest version nodejs npm installed error likely problem client package error npm error tell author fails system error node builddevserverjs error get information open issue project error npm bugs client error nt available get info via error npm owner ls client error likely additional logging output verbose exit true", "num": "5867", "d": "6/2017"}, {"title": "npm run", "body": "version reproduction link steps reproduce npm run expected \u5173\u6389\u540e\u4e0d\u62a5\u9519 actually happening info worked ends ok verbose cli program filesnodejsnodeexe verbose cli program filesnodejsnodemodulesnpmbinnpmclijs verbose cli run verbose cli dev info using npm info using node verbose runscript predev dev postdev info lifecycle client client silly lifecycle client script predev continuing info lifecycle client client verbose lifecycle client unsafeperm lifecycle true verbose lifecycle client path program filesnodejsnodemodulesnpmbinnodegypbin c userscatdesktopvueagrolotnodemodulesbin c c windows c c program program c program files windows performance toolkit c program filesmicrosoft sql program program filescurl program filesputty program filestortoisesvnbin c program program filesredis c userscatappdataroamingnpm program c programdatacomposersetupbin c program filesgitcmd program program program filesnodejs program filesyarnbin program filesmicrosoft vs codebin c userscatappdataroamingcomposervendorbin c userscatappdataroamingnpm c userscatappdatalocalyarnbin verbose lifecycle client cwd c userscatdesktopvueagrolot silly lifecycle client args c node builddevserverjs silly lifecycle client returned code signal null info lifecycle client failed exec dev script verbose stack error client dev node builddevserverjs verbose stack exit status verbose stack eventemitter program verbose stack emittwo verbose stack eventemitteremit verbose stack childprocess program verbose stack emittwo verbose stack childprocessemit verbose stack maybeclose verbose stack processchildprocesshandleonexit verbose pkgid client verbose cwd c userscatdesktopvueagrolot error windowsnt error argv program filesnodejsnodeexe program filesnodejsnodemodulesnpmbinnpmclijs run dev error node error npm error code elifecycle error client dev node builddevserverjs error exit status error failed client dev script node builddevserverjs error make sure latest version nodejs npm installed error likely problem client package error npm error tell author fails system error node builddevserverjs error get information open issue project error npm bugs client error nt available get info via error npm owner ls client error likely additional logging output verbose exit true info worked ends ok verbose cli program filesnodejsnodeexe verbose cli program filesnodejsnodemodulesnpmbinnpmclijs verbose cli run verbose cli dev info using npm info using node verbose runscript predev dev postdev info lifecycle client client silly lifecycle client script predev continuing info lifecycle client client verbose lifecycle client unsafeperm lifecycle true verbose lifecycle client path program filesnodejsnodemodulesnpmbinnodegypbin c userscatdesktopvueagrolotnodemodulesbin c c windows c c program program c program files windows performance toolkit c program filesmicrosoft sql program program filescurl program filesputty program filestortoisesvnbin c program program filesredis c userscatappdataroamingnpm program c programdatacomposersetupbin c program filesgitcmd program program program filesnodejs program filesyarnbin program filesmicrosoft vs codebin c userscatappdataroamingcomposervendorbin c userscatappdataroamingnpm c userscatappdatalocalyarnbin verbose lifecycle client cwd c userscatdesktopvueagrolot silly lifecycle client args c node builddevserverjs silly lifecycle client returned code signal null info lifecycle client failed exec dev script verbose stack error client dev node builddevserverjs verbose stack exit status verbose stack eventemitter program verbose stack emittwo verbose stack eventemitteremit verbose stack childprocess program verbose stack emittwo verbose stack childprocessemit verbose stack maybeclose verbose stack processchildprocesshandleonexit verbose pkgid client verbose cwd c userscatdesktopvueagrolot error windowsnt error argv program filesnodejsnodeexe program filesnodejsnodemodulesnpmbinnpmclijs run dev error node error npm error code elifecycle error client dev node builddevserverjs error exit status error failed client dev script node builddevserverjs error make sure latest version nodejs npm installed error likely problem client package error npm error tell author fails system error node builddevserverjs error get information open issue project error npm bugs client error nt available get info via error npm owner ls client error likely additional logging output verbose exit true", "num": "5866", "d": "6/2017"}, {"title": "npm run", "body": "info worked ends ok verbose cli program filesnodejsnodeexe verbose cli program filesnodejsnodemodulesnpmbinnpmclijs verbose cli run verbose cli dev info using npm info using node verbose runscript predev dev postdev info lifecycle client client silly lifecycle client script predev continuing info lifecycle client client verbose lifecycle client unsafeperm lifecycle true verbose lifecycle client path program filesnodejsnodemodulesnpmbinnodegypbin c userscatdesktopvueagrolotnodemodulesbin c c windows c c program program c program files windows performance toolkit c program filesmicrosoft sql program program filescurl program filesputty program filestortoisesvnbin c program program filesredis c userscatappdataroamingnpm program c programdatacomposersetupbin c program filesgitcmd program program program filesnodejs program filesyarnbin program filesmicrosoft vs codebin c userscatappdataroamingcomposervendorbin c userscatappdataroamingnpm c userscatappdatalocalyarnbin verbose lifecycle client cwd c userscatdesktopvueagrolot silly lifecycle client args c node builddevserverjs silly lifecycle client returned code signal null info lifecycle client failed exec dev script verbose stack error client dev verbose stack exit status verbose stack eventemitter program verbose stack emittwo verbose stack eventemitteremit verbose stack childprocess program verbose stack emittwo verbose stack childprocessemit verbose stack maybeclose verbose stack processchildprocesshandleonexit verbose pkgid client verbose cwd c userscatdesktopvueagrolot error windowsnt error argv program filesnodejsnodeexe program filesnodejsnodemodulesnpmbinnpmclijs run dev error node error npm error code elifecycle error client dev error exit status error failed client dev script node builddevserverjs error make sure latest version nodejs npm installed error likely problem client package error npm error tell author fails system error node builddevserverjs error get information open issue project error npm bugs client error nt available get info via error npm owner ls client error likely additional logging output verbose exit true", "num": "5865", "d": "6/2017"}, {"title": "data binding slow update ui safari mobile desktop fine chrome", "body": "version reproduction link na steps reproduce try add cart safari try add cart chrome purple button expected safari normal behavior adding cart immediately however data binding areas code update immediately screen zoomed tab openedclosed seem force update actually happening nt add cart slow add cart tried ios slow assumed mobile issue trying safari desktop laggy issue persists", "num": "5864", "d": "6/2017"}, {"title": "array replacement smart heuristics working array wrapped object defined component data function", "body": "version reproduction link steps reproduce object includes array convenience methods case used store validation errors originally encountered issue using veevalidate reproduction vue code error bag object created child component data function convenience method remove error bag uses arrayprototypefilter create new array include values need removed assigns array back thiserrors inside error bag validation logic may cause remove called time means thiserrors array inside error bag replaced keystroke validation runs vue smart heuristics make sure entire dom nt rerendered array replacement seem fail entire dom rerendered key stroke normally might notice parent component also using vmodeltrim child component child rerendered course uses newly trimmed value prevents typing spaces using vmodeltrim child component text input textarea important issue occur errorbag created child component created callback remove method uses arrayprototypesplice instead order modify errors array inplace expected using object wrapped array use one array functions return new array causing array replaced dom completely rerender vue smart according documentation actually happening using object wrapped array array replacement heuristics make sure array replacement cause entire dom rerender code watches array inplace modification methods push splice etc seems work fine workaround replace array use inplace modification methods instead currently child component rerenders dom errors array replaced cause issues parent component using vmodeltrim prevents typing spaces using inplace modification vue realises dom rerender necessary example cleared alreadyempty errors array rerender dom everything works fine strangely enough creating errorbag wrapped array component created callback everything works expected creating errorbag component data function type spaces", "num": "5863", "d": "6/2017"}, {"title": "vmodel work slot", "body": "version reproduction link steps reproduce change showmodal true fill group name click save expected listname value actually happening listname empty js", "num": "5862", "d": "6/2017"}, {"title": "array replacement smart heuristics working injecting wrapped array component", "body": "version reproduction link steps reproduce object includes array convenience methods case used store validation errors originally encountered issue using veevalidate reproduction vue code error bag object injected parent child component may put errors remove errors convenience method remove error bag uses arrayprototypefilter create new array include values need removed assigns array back thiserrors inside error bag validation logic may cause remove called time means thiserrors array inside error bag replaced keystroke validation runs vue smart heuristics make sure entire dom nt rerendered array replacement seem fail entire dom rerendered key stroke normally might notice parent also using vmodeltrim child component child rerendered course uses newly trimmed value prevents typing spaces using vmodeltrim child component text input textarea important issue occur injection used remove method uses arrayprototypesplice instead order modify errors array inplace expected injecting object wrapped array array replacement heuristics prevent entire dom rerendered work injection used least limitation made really clear inplace modification methods working usual expectation array replacement works usual actually happening injecting object wrapped array array replacement heuristics work injection used code watches inplace modification methods push splice etc seems work fine workaround replace array use inplace modification methods instead currently child component rerenders dom errors array replaced cause issues parent component using vmodeltrim using inplace modification vue realises dom rerender necessary example cleared alreadyempty errors array rerender dom everything works fine", "num": "5861", "d": "6/2017"}, {"title": "boolean values custom data html attributes", "body": "problem feature solve html element custom data attribute like content content content issue solves problem types html attributes valid data attributes string value like false true proposed api look like propose custom data attributes could string value boolean logic apply rest html boolean attributes", "num": "5860", "d": "6/2017"}, {"title": "vuessrclientplugin \u5728client", "body": "version reproduction link steps reproduce \u6709assets ajs acss b \u6709assets bjs bcss client \u6253\u5305\u65f6 \u914d\u7f6e\u4e86vuessrclientplugin \u6240\u4ee5\u751f\u5b58\u4e86 maifestjson \u5728 ssr \u73b0\u5728 \u4e86\u4e00\u4e2aa \u4f46\u662fhtml \u91cc\u4f1a\u6709b entry \u4e0b\u7684\u6240\u6709\u8d44\u6e90 expected \u5e94\u8be5\u8981\u533a\u5206\u591a\u9875\u9762\u7684ssr \u7684\u60c5\u51b5 actually happening ssr", "num": "5859", "d": "6/2017"}, {"title": "style object update delay use el arg check update hook", "body": "version reproduction link steps reproduce wan na get newest style value el code like expected newest style object properties actually happening prev style object properties fix", "num": "5858", "d": "6/2017"}, {"title": "deleting element array used associative array", "body": "problem feature solve trying remove element sparse array arr arr arr try vuedelete arr offsets following elts one tried splice undefined undefined element array iterate objectvalues gathered across web seemed remove function previous versions ca nt find anymore currently forced use object instead sparse array incurs performance penalties proposed api look like think target exact match javascript specification behaviors arrays objects thank", "num": "5855", "d": "6/2017"}, {"title": "von attach event mobile touchstart touchend touchmove", "body": "attemp events mobile console tells event undefined", "num": "5854", "d": "6/2017"}, {"title": "dom exception chrome edge using applicationxhtml xml content type", "body": "version reproduction link data applicationxhtmlxml steps reproduce chrome edge load vuejs script document served applicationxhtml xml generate uncaught exception expected exception texthtml applicationxhtml xml documents actually happening uncaught domexception failed set innerhtml property element provided markup invalid xml therefore inserted xml document", "num": "5852", "d": "6/2017"}, {"title": "memory leak detached dom tree patching vnodes", "body": "version reproduction link steps reproduce identified vnod patchedreplaced dom eg vuerouter route update new vnode marked dom element reference refelm previous vnode case previous route causing detached dom tree memory leak steps reproduce open attached jsfiddle open chrome dev tools memory tab select home route make heap snapshot select foo route make heap snapshot select last snapshot use summary tab search box enter detached find detached tree retainer refelm hover red htmldivelement notice dom element home component see code reference vuejs patch method triggered trigger patchvnode replace existing root component root components children triggers updatechildren transitions new element created triggering createelm important createelm passed dom element reference oldstartvnodeelm old vnode previous route argument turn link old dom element new vnode refelm property creating detached binding causing leak expected would expect vuejs would conservative memory usage prevent detached dom nodes actually happening patching vdom replacing root node eg using vuerouter see dom element previous route indirectly linked new route causing detached dom tree leak limited impact normal devices reference last component patched large impact example embedded devices prevents browser garbage collect last route increasing overall memory needed run app clear components component component component component patched component vue keep detached dom component component patched component component also detached component case cleared elm reference transitions component component", "num": "5851", "d": "6/2017"}, {"title": "vuejs partial print", "body": "version reproduction link steps reproduce first want partial print want seconed recovery original code find function effective like print button printing expected function effective actually happening effective thing destroy observe model probably want open new window printing nt know close print window use ifream print beause wang use vuejs grammar generate html join", "num": "5850", "d": "6/2017"}, {"title": "execution sequence mixins", "body": "problem feature solve proposed api look like", "num": "5849", "d": "6/2017"}, {"title": "img load", "body": "trouble using framework materializecss slider vfor putting load put direct path load page works done vfor load", "num": "5848", "d": "6/2017"}, {"title": "vmodeltrim custom component trimmed value flow back component", "body": "version reproduction link steps reproduce originally textarea vmodeltrim worked great however added extra fancy controls textarea decided make custom component reuse share easily noticed two odd behaviours title says type unfocusfocus textarea custom component whitespace still trimmed old plain textarea unfocusfocus clears extreaneous whitespace parent component variable holds text trimmed correctly seems vmodeltrim custom component trim value comes input event within component trimmed value flow back child component value prop another strange behaviour type ab remove b extra whitespace instantly trimmed annoying typing using backspace make typo plain textarea behaviour using vmodeltrim expected implementing custom component containing textarea supports vmodel docs describe using vmodeltrim behaviour textarea match using vmodeltrim plain textarea actually happening textarea within custom component different behaviour plain textarea specifically trimmed value seen parent component uses vmodeltrim child component trimmed value flow back child component see unfocusfocus whitespace still plain textarea trimmed additionally type ab remove b remaining whitespace instantly removed annoying behaviour typing using backspace correct typo example original plain textarea behaviour", "num": "5847", "d": "6/2017"}, {"title": "vue binding overrides element attribute", "body": "version reproduction link steps reproduce create component template render component prop declared component html attribute gets overwritten source expected type text actually happening type foobar", "num": "5846", "d": "6/2017"}, {"title": "transitiongroup dom update lag using css frameworks", "body": "version reproduction link steps reproduce apply transition group vfor using popular css frameworks noticeable semanticui also apparent bootstrap example uses table rows issue also appears something simple unordered list expected transition group continues similar performance without css applied actually happening considerable amount update lag particularly changing vfor array using slice obviously walks line vuejs issue issue one involved frameworks opening case though honestly nt know anyone semanticui side things would able help example little complicated needed reproduce issue simply wanted show use case animating additions array used vfor otherwise transitions table also paginated sliced sorted nt want animate process example toggle using transitiongroup without transition group dom updates instantly expect turned even without transition active see toggling sliced full array slow update visible dom also sorry submitting three times new issue vue site something goofy chrome switch safari", "num": "5845", "d": "6/2017"}, {"title": "transitiongroup dom update lag using css frameworks", "body": "version reproduction link steps reproduce apply transition group vfor using popular css frameworks noticeable semanticui also apparent bootstrap example uses table rows issue also appears something simple unordered list expected transition group continues similar performance without css applied actually happening considerable amount update lag particularly changing array using vfor using slice obviously walks line vuejs issue issue one involved frameworks opening case though honestly nt know anyone semanticui side things would able help example little complicated needed reproduce issue simply wanted show use case animating additions array used vfor otherwise transitions table also paginated sliced sorted nt want animate process example toggle using transitiongroup without transition group dom updates instantly expect turned even without transition active see toggling sliced full array slow update visible dom", "num": "5844", "d": "6/2017"}, {"title": "transitiongroup dom update lag using css frameworks", "body": "", "num": "5843", "d": "6/2017"}, {"title": "vue router issue", "body": "hi got issue vue router error vue warn invalid prop type check failed prop expected string object got undefined found resourcesassetsjscomponentsmenuvue code menuvue", "num": "5842", "d": "6/2017"}, {"title": "possible template accept raw sink sources component becomes simple reactive circuit observables", "body": "problem feature solve cyclejs shows devtool chain observables circuit looks like shows dynamics vivid two immediate problems solves spotting bugs issues b understanding someone else code becomes much simpler vue given directly sink event become sources user intents component sources values either displayed used vif vfor classes come component model sinks viewchanging events operations streams done template whoever uses streams directly get nice separation logic presentation able view logic dynamically cyclelike devtool proposed api look like markdown editor example look follows template html javascript new vuestreams el editor domeventstreams inputsteam rxjssubject componentoutstreams compiledmarkdownstream inputsteam debounce map input gt marked thisinput sanitize true", "num": "5841", "d": "6/2017"}, {"title": "\u7f16\u7a0b\u5f0f\u8def\u7531\u6ca1\u6709\u6b63\u5e38\u6e32\u67d3\u5d4c\u5957\u89c6\u56fe", "body": "version reproduction link steps reproduce \u91cd\u590d\u70b9\u51fb userfoo \u5d4c\u5957\u8def\u7531\u5339\u914d\u89c6\u56fe\u6ca1\u6709\u663e\u793a expected \u91cd\u590d\u70b9\u51fb userfoo \u5d4c\u5957\u8def\u7531\u5339\u914d\u89c6\u56fe\u8981\u663e\u793a actually happening \u5d4c\u5957\u8def\u7531\u5339\u914d\u7684\u89c6\u56fe\u6ca1\u6709\u663e\u793a", "num": "5840", "d": "6/2017"}, {"title": "nt nodes listener removed switching route", "body": "version reproduction link steps reproduce destroy vue components dom method using vuerouter simple vif expected js heap memories nt increase destroying vue components actually happening js heap memories increase creating new vue components contributed topic vue official forum could nt obtain valid answer please let question vnodes listeners remain dom destroyed js heap memories increase information please access link posted sorry double contribution please reply know anything", "num": "5839", "d": "6/2017"}, {"title": "typeerror read property key undefined", "body": "version reproduction link steps reproduce click init click update times click add gt see error console expected update ui correctly actually happening typeerror read property key undefined samevnode unpkgcomvue updatechildren unpkgcomvue patchvnode unpkgcomvue updatechildren unpkgcomvue patchvnode unpkgcomvue updatechildren unpkgcomvue patchvnode unpkgcomvue vue patch unpkgcomvue vue unpkgcomvue vue unpkgcomvue", "num": "5838", "d": "6/2017"}, {"title": "provided props injected functional components", "body": "version reproduction link steps reproduce created minimal reproduction behavior trying test example needs jsx work expected properties passed parent show actually happening exists remains empty properties passed functional component context", "num": "5837", "d": "6/2017"}, {"title": "module found error ca nt resolve vueroter windows", "body": "version reproduction link steps reproduce got module found error windows nt happens centos steps init fresh webpacksimple project running ok npm install save vuerouter add import import vueroter vueroter mainjs gives error module found error ca nt resolve vueroter expected run smoothly actually happening error module found node", "num": "5836", "d": "6/2017"}, {"title": "new prop shorthand", "body": "problem feature solve passing props component following pattern common proposing prop name variable name passed following concise syntax applicable would mimic object property declaring shorthands like proposed api look like instead", "num": "5835", "d": "6/2017"}, {"title": "customizing vmodel prop working", "body": "version reproduction link steps reproduce create component customized configuration use component use prop component expected child component display value actually happening error thrown found suppose something wrong read docs figure nt working", "num": "5834", "d": "6/2017"}, {"title": "scopedslotsdefault function", "body": "typeerror scopedslotsdefault function", "num": "5833", "d": "6/2017"}, {"title": "extend debug mode help find subtle errors development", "body": "problem feature solve help developers get stuck hard catch non apparent bugs would neat debug mode could check data properties name method avoid confusing xxx method object loose reactivity property ie non gettersetter property managed objects appear probably helpers added well proposed api look like already api turn debug mode", "num": "5832", "d": "6/2017"}, {"title": "trouble put code android webview", "body": "npm run build send dist folder android programmer load indexhtml webview nothing dom load test app anyone experience", "num": "5831", "d": "6/2017"}, {"title": "inlinetemplate fails display without intermediate container", "body": "version reproduction link steps reproduce add content child component markup without surrounding intermediate container div html expected everything template render unacceptable error console message actually happening template simply render failing silently leaving developer little clue debug somewhere bug report feature request tripped us couple times wasted bunch debugging time know inlinetemplate preferred practice retrofitting vue legacy application works quite well", "num": "5830", "d": "6/2017"}, {"title": "event listeners still intact destroying blur", "body": "version reproduction link steps reproduce create vue component event listener focus element listener destroy vue component click away blur element see method get called expected event listener called minimal example expect vm listeners get garbage collected call expect explicit remove listeners fires stop calls ca nt focus blur expect kick things garbage collection mode nt seem affect result correct way clean listeners vue component destroying actually happening event listener gets called ran writing jasmine tests vue component focusing input jasmine hook another unrelated test something else focused causing blur npe thrown related issues", "num": "5829", "d": "6/2017"}, {"title": "\u65e0\u6cd5\u5728\u8868\u5355\u4e2d\u8f93\u5165\u5b57\u7b26", "body": "version reproduction link steps reproduce \u5f53\u67d0\u4e9b\u6570\u636e\u66f4\u65b0\u5f88\u5feb expected \u6b63\u5e38\u7684\u8f93\u5165\u5b57\u7b26 actually happening \u8868\u5355\u65e0\u6cd5\u8f93\u5165\u5b57\u7b26", "num": "5826", "d": "6/2017"}, {"title": "checkbox rendered render function ca nt work correctly", "body": "version reproduction link steps reproduce click button toggle checked status well change checkbox manually click button nt work checkbox ca nt reflect change checked expected checkbox reflect change data vm actually happening checkbox ca nt reflect change checked", "num": "5825", "d": "6/2017"}, {"title": "checkbox rendered render function ca nt work correctly", "body": "use render function render checkbox firstly click button toggle checked status well change checkbox manually click button nothing works checkbox ca nt reflect change checkedhere demo", "num": "5824", "d": "6/2017"}, {"title": "keepalivecomponent allow create multiple instance needed", "body": "problem feature solve googled problem found someone problem pages b b means jump b fine one page occurs multiple time single stack like b failed trying keep first b alive back use around first second share one component recreate first click back button things get worse without using recreate every page stack examples ordervue gt payvue gt successvue gt ordervue shoplistvue shopvue shop gt hotshopsvue gt shopvue shop proposed api look like ready yet thinking design api may someone else better idea", "num": "5823", "d": "6/2017"}, {"title": "phone bind keyup event input keyboard bounces", "body": "", "num": "5822", "d": "6/2017"}, {"title": "vue plugin component instance null", "body": "version reproduction link steps reproduce install following plugin calling newly added myaddedmethod vue componentinstance log instance reference console expected reference vue componentinstance actually happening instead null writting plugin needs add method instances method utilizes reference instance followed docs missing something thanks forward", "num": "5821", "d": "6/2017"}, {"title": "vue plugin component instance null", "body": "trying write vue plugin adds method component instances following docs wrote following problem refer component instance return missing something", "num": "5820", "d": "6/2017"}, {"title": "\u7528vue\u5f00\u53d1chrome app", "body": "version reproduction link chromeextention sdlfkjsdsdfdsfdsdf steps reproduce \u53ea\u80fd\u5728chrome app\u6253\u5305\u4e86\u672c\u5730\u8c03\u8bd5\u5462 expected debug\u67e5\u770bchrome\u5bf9\u8c61 actually happening \u76f4\u63a5\u6574\u4e2a\u5e94\u7528\u5d29\u6e83\u4e86", "num": "5819", "d": "6/2017"}, {"title": "provide method convert vdom stored variable html string dom", "body": "problem feature solve want create chatroom application chat window might potentially run many hours display messages feasible display messages vfor directive vdom huge application become slow instead would like use message template render function render incoming message html string ordinary dom object simply append plain js static content message log keep chatroom application snappy responsive almost forever generate renderer function using vuecompile msgtemplate calling renderer function binding component gives vdom js object html use would need transform js object ordinary html would nt futureproof maybe future versions vuejs structure vdom js object change plugin stop working need vuejs library transformation thank proposed api look like var res vuecompile msgtemplate var vdom resrendererbind var htmlstring vuetohtml vdom", "num": "5815", "d": "6/2017"}, {"title": "watchers handle arrays expected", "body": "version reproduction link steps reproduce reproduce steps please following click add cart button next items catalog review total items values expected expectation original value watched would value prior item added cart example expectation values items section match values total section actually happening original value array latest value seem correct working developer training course named vuejs getting started stumbled issue creating content course time updating course content work around issue however thought reported nt see anything similar listed github", "num": "5814", "d": "6/2017"}, {"title": "vue js dynamically loaded component name ajax", "body": "new vuejs want load component ajax response json response want draw dynamically components using json data", "num": "5812", "d": "6/2017"}, {"title": "boolean attributes nodes explicitly extracted props booleans functional components", "body": "version reproduction link steps reproduce set boolean attribute functional component expected actually happening empty string seems correct sure easily doable side might worth considering bug arrived situation messing around css js options expecting something like markup like also curious default units numbers certain properties passed react default units guess certain properties another issue", "num": "5811", "d": "6/2017"}, {"title": "help needed realworldio sample project", "body": "problem feature solve hello vue community searched issues could nt find anything related hope duplicate recently realworldio collecting real world example blogging app written different frameworks already projects react angular elm etc would nice vue community helped make vue example please take look proposed api look like full example creating blog using vuejs based spec realworldio", "num": "5810", "d": "6/2017"}, {"title": "scopedslots undefined", "body": "version reproduction link steps reproduce update dom empty used scopedslots scopedslots undefined attribute remove attribute scope props slot ok reset back every thing ok expected scopedslots executable actually happening scopedslots empty becase used runtimeesm version ca nt test online", "num": "5807", "d": "6/2017"}, {"title": "nodejs server side templating incompatible vuejs templating", "body": "version reproduction link steps reproduce hi using code avoid templating issues server side templating client side templating wanted perform using vuejs var myapp angularmodule scotch userrolectrl selectasynccontroller mystackedctrl contactchipdemoctrl mainapp appctrl switchbase fabctrl examplectrl slidenav function interpolateprovider interpolateproviderstartsymbol interpolateproviderendsymbol expected sort interpolateprovider lib tells vuejs use instead actually happening excatly issue hence nothing happening reproduction part required since rather issue incompatibility issue rendering client side also reference", "num": "5806", "d": "6/2017"}, {"title": "contenteditable receiving duplicate values", "body": "version reproduction link steps reproduce type something box click outside area blur watch appear double expected editable div keeps typed actually happening editable div adds typed assumedly part virtual dom update showing twice hunch issue virtual dom patches starts empty value change starting value demo actual value like issue nt happen related let know prefer keep conversation close issue", "num": "5805", "d": "6/2017"}, {"title": "use object vfor key clear input value", "body": "version reproduction link steps reproduce type person id input fields click button times expected every person id stay input fields actually happening person id cleared array starts items reproduce bug", "num": "5804", "d": "6/2017"}, {"title": "vue\u5b9e\u4f8b\u91cc\u7684data\u4e2d\u4e0b\u5212\u7ebf\u5f0f\u547d\u540d\u5c5e\u6027\u65e0\u6cd5\u6b63\u786e\u7ed1\u5b9a\u5230\u6a21\u677f", "body": "vue \u5b9e\u4f8b\u4e2ddata \u5982\u679c\u6709\u4e00\u4e2a\u5c5e\u6027\u662f\u4e0b\u5212\u7ebf\u5f00\u5934\u7684 \u6bd4\u5982\u4e0b\u9762\u4ee3\u7801 \u8fd9\u6837test\u5bf9\u8c61\u7684\u6539\u53d8\u65e0\u6cd5\u5b9e\u65f6\u53cd\u5e94\u5230\u6a21\u677f\u4e2d", "num": "5803", "d": "6/2017"}, {"title": "vue", "body": "", "num": "5802", "d": "6/2017"}, {"title": "render function nested children stops first level", "body": "version reproduction link steps reproduce create levels deep components structure using createelement within render function expected children hierarchy rendered actually happening rendering stops first hierarchy level subsequent children ignored design", "num": "5801", "d": "6/2017"}, {"title": "transition group classes properly deleted using vshow", "body": "version reproduction link steps reproduce set transition group automatically rotates list items shows one item time slider expected last item disappears new item appears specified intervals actually happening everything seems running perfectly fine leave window minute go new tab another window come back transition group becomes mess transition classes get added without removed items would get something like", "num": "5800", "d": "6/2017"}, {"title": "oneway data flow might broken", "body": "version reproduction link steps reproduce pass object regular string int property prop child component mutate properties object inside child component mutations also occur parent component check fiddle expected properties inside form object get mutated parent component get mutated child component oneway data flow actually happening contents inside parent object get mutated issue may intentional hope like twoway flexibility apologies reporting", "num": "5799", "d": "6/2017"}, {"title": "clarity docs vue following semver strictly", "body": "version reproduction link steps reproduce search docs versioning semver backward compatibility relevant answer given expected statement specify vue strictly semver actually happening info returned searching search box looking issues github seems might could nt find specific statement docs vue strictly semver therefore offer full backward compatibility missed stated anywhere", "num": "5798", "d": "6/2017"}, {"title": "unexpected data value resetting data binded change", "body": "version reproduction link steps reproduce select select selecting see second select showing click reset button gt second select nt thistest expected second select nt appear resetting button actually happening second select still dom undefined value", "num": "5797", "d": "6/2017"}, {"body": "would inconsistent removed would different number children different positions render please provide reproduction filing issues like difficult understand context furthermore sure need go deep dom api could use api many features", "d": "6/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow", "d": "6/2017"}, {"body": "think constantness variable would best conveyed defining data uppercase instead expanding api performance optimizations would allow realized using reactive getset", "d": "6/2017"}, {"body": "property define instance available template achieve desired result simple hook", "d": "6/2017"}, {"body": "would work imo still clear explicit way declaring uppercase could used coding style allows", "d": "6/2017"}, {"body": "proposed syntax shorter showed generally nt need nonreactive data template often think bit cleanness justifies new api try keep api slim possible new api need benefit beyond cosmetics imho", "d": "6/2017"}, {"body": "hm reasoning quote think better explicitly define data strcuture code component selfexplanatory feature clearly based reasoning need benefit beyond cosmetics think feature would useful addition api use right created simple plugin named vueconstants", "d": "6/2017"}, {"body": "also using create disadvantage already use constantdeclarations buried code go concept explicitly define data structures wrong way also write example object someoptions created every instance component memory cheap today still means wasting resources course pull declaring module local constant requires even code still think vue make live easier requiring unnecessary boilerplate code nt find optimal", "d": "6/2017"}, {"body": "thanks creating plugin nt want bloat api add code size vue features already achieved unless benefits worth cost pass also demonstrated achieved user land anyone wants syntax quite subjective personally even keep constants component different file js import foo constant export default created use foo need constants need add components way keep one place well use javascript", "d": "6/2017"}, {"body": "hm reasoning quote think better explicitly define data strcuture code component selfexplanatory feature clearly based reasoning need benefit beyond cosmetics still seem misunderstanding argument argued data used template initialized compoent never template current issue arguing component vs template arguing introducing new api component two different arguments wo nt mix think feature would useful addition api use right created simple plugin named vueconstants nt doubt useful well people surely fully respect however maintainers judge wether useful enough sufficiently large percentage users justify introduction codebase doubt judging personal experience kind questions answer day day forum discord places team members might agree issue still open discussion giving opinon also using create disadvantage already use constantdeclarations buried code go concept explicitly define data structures wrong way agree certain degree doubting use case constants prevalent enough warrant new api argument useful sufficiently useful compared solutions possible current api justify adding another api documented explained tested argued blog post use simple rules could possibly require breaking change future versions every new api introcuces bit technical debt adding one good use case case yes introducing constants created clean simply doubt required often enough justify new api argue accept tradeoff using instances required people rather want api use plugin publish plugins posva right declaring outside component prevent reinialization would reactive share across compoents specifically talking using data templates nt reactive would exist instance properties form", "d": "6/2017"}, {"body": "posva right declaring outside component prevent reinialization would reactive share across compoents specifically talking using data templates nt reactive would exist instance properties form imo nt need exist really want use thing use computed property well think also agree enough add code new api vue", "d": "6/2017"}, {"body": "discussion makes clear would fit better apis would promote standard way things instead people use data computed properties code created etc constant data important part every codebase still think vue support instead promoting various less readable idioms", "d": "6/2017"}, {"body": "personal opinion people think complicating things real benefit write javascript reality must really careful incrementing size vue new features adding property subjective choice possible userland plugin prefer leave way thanks suggestion thought", "d": "6/2017"}, {"body": "could move issue vuejsvuejsorg repository thanks", "d": "6/2017"}, {"body": "simple copy paste fine", "d": "6/2017"}, {"body": "sure", "d": "6/2017"}, {"body": "done", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "makes think caused vue fri jun pm wangbagang notifications githubcom wrote receiving subscribed thread reply email directly view github mute thread", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "props readonly modify instead emit event update vue props readonly use ps suggest primitive props string bool number", "d": "6/2017"}, {"body": "ah ok understand get second point vuejs way handling html form component easiest way reason pass object prop form input work property object obviously causing sort issues", "d": "6/2017"}, {"body": "read input components guess looking", "d": "6/2017"}, {"body": "replace method", "d": "6/2017"}, {"body": "yes issue jsfiddle nt know code uses though nt work safari working jsfiddle trouble trivial examples versus real code still defect", "d": "6/2017"}, {"body": "intentional filters pure functions dependent context need use computed property method eg", "d": "6/2017"}, {"body": "\u6d89\u53ca\u5177\u4f53\u5e93\u7684\u95ee\u9898\u8bf7\u4e0d\u8981\u968f\u4fbf\u6765\u8fd9\u91cc\u5f00", "d": "6/2017"}, {"body": "need component use constructor position rerenders vue reuse existing instance", "d": "6/2017"}, {"body": "ops forgot sorry", "d": "6/2017"}, {"body": "see", "d": "6/2017"}, {"body": "seems dom attribute element one blamed case needs deeper investigation", "d": "6/2017"}, {"body": "wait passing vnode prop component assignment would make whole vnode object reactive something like jsx hellovue childvue slotsdefault", "d": "6/2017"}, {"body": "jkzing thank reply mean different passing vnode props slots try tomorrow thank suggestion fine different vs simple", "d": "6/2017"}, {"body": "jkzing said use slots close still feel bug feel free open", "d": "6/2017"}, {"body": "chairuosen sure could say making vnode object reactively behavior would expectable", "d": "6/2017"}, {"body": "znck know solution avoid bug nt know reason nt know works fine also think usage code nt weird often pass vnode props react still think bug reopen button page lol could please reopen issue thank", "d": "6/2017"}, {"body": "chairuosen actually passing vnode prop made happen assigning property component working react simple react would make object reactive reflect changes", "d": "6/2017"}, {"body": "jkzing yeah guess blackbox view ca nt explain case", "d": "6/2017"}, {"body": "chairuosen case using reactive", "d": "6/2017"}, {"body": "jkzing using slot using slot vnode prop case case", "d": "6/2017"}, {"body": "observation nt know happening jsx attribute infinite look attributes hidden html causing rerender", "d": "6/2017"}, {"body": "fyi feature dropped time bug", "d": "6/2017"}, {"body": "problem lies first time element nt exist takes account additions data property reuses element ignoring everything add check vnode modify work vue prevent unnecessary renders nt think support rerendering pretty advanced stuff users wont adding layer observation slow everybody share team", "d": "6/2017"}, {"body": "big problem checks though probably would done something completely crazy nt mention sure use thanks sure keep open leave pleasure nothing comes", "d": "6/2017"}, {"body": "slot nodes reused child update parent update vdom diff two nodes identity considered skipped diffing means mutating vnodes passed parent really need make deep clone slot nodes child render function alternatively wrap slot nodes fresh vnodes created directly control dropdown using parent scope property parent template instead", "d": "6/2017"}, {"body": "hmm nt know components like think could use jsx spread props", "d": "6/2017"}, {"body": "us would great wrap inputs label styling ux purposes agree could drop jsx instead templates much easier everyone follow", "d": "6/2017"}, {"body": "austio unfortunately payback templates wait maybe could think way props vue templates", "d": "6/2017"}, {"body": "like feature personally seems break consistency vbind behavior like sometimes still need bind property root element use pair directives getter setter like inside component define anchor using vue", "d": "6/2017"}, {"body": "jkzing looks awesome looks like basic spread potential problems like would define", "d": "6/2017"}, {"body": "ca nt means keep modifiers like runtime part vuetemplatecompiler atm", "d": "6/2017"}, {"body": "nickmessing looks like basic spread thing talking bring something like spread template users von shortland nt means vbind", "d": "6/2017"}, {"body": "jkzing link description lot bindings", "d": "6/2017"}, {"body": "nickmessing um bindings another topic imo like event bubbling", "d": "6/2017"}, {"body": "jkzing whole concept afaik make properties go certain element component", "d": "6/2017"}, {"body": "nickmessing ca nt sure original proposal nt think event listener considered", "d": "6/2017"}, {"body": "jkzing probably considering common example gt different props want get yout inside custom component without ton code", "d": "6/2017"}, {"body": "personally use filter exclude props nt want apply way apply multiple props input indeed vexpose might useful wrapper components inputs specify html props cane reduced filteredprops might computed property", "d": "6/2017"}, {"body": "cristijora using problem solution excessive properties added html attributes would great could filter properties accepted component dynamic nt know props filter computed property although possible extract use", "d": "6/2017"}, {"body": "really feasible directive", "d": "6/2017"}, {"body": "posva nt think work directive per se part vue template engine something like spread internally event propagation", "d": "6/2017"}, {"body": "posva userbuilt directive nt think might using wrong language mean special attribute", "d": "6/2017"}, {"body": "chrisvfritz thoughts api would used specifying expose add child could see similar use provideinject concept", "d": "6/2017"}, {"body": "austio might understanding question provide thoughts api original post", "d": "6/2017"}, {"body": "hey chris meant additional thoughts using similar provide inject declare exposable parent using child", "d": "6/2017"}, {"body": "ah see sure need information already passed via props slots even private properties parent accessed though think best avoid pattern austio particular use case thinking", "d": "6/2017"}, {"body": "chrisvfritz would work render functions think maybe would better provide option disable autoinheritance attributes root node expose attributes example naming tbd use vbind add wherever like much like already showed would added benefit working practically identical jsxrender functions", "d": "6/2017"}, {"body": "linusborg like way think way much intuitive sidenote think api place next major version vue could even remove attribute autoinheritance altogether crosscomponent communication could remain explicit sides", "d": "6/2017"}, {"body": "would possible depreciate remove behaviour yes worth possibly required changes many components libs etc decided discussed community especially ui collection authors prob posed feature information already available functional components via feature would give basically identical functionality instance components", "d": "6/2017"}, {"body": "yes exactly main purpose mind make work simpler ui component authors internal currently lot cases something like necessary new property could shorten though suppose still nice way also exposing events maybe empty directive could forward event listeners parent element end multiple concerns want bundle might back something like turned broader discussion simplify building ui components rather specific feature request relabel issue", "d": "6/2017"}, {"body": "late topic thoughts well current solution amp disadvantages first already use love feature powerful example bootstrapvue internal link component gets used everywhere buttons navs dropdown lists etc component pivots becoming native anchor vs router link based vs amp presence quite lot properties conditionally pass components solution put props mixin use computed object works great still lot overhead adding mixin components using link component possibilities using personally like concept maybe could work like default slot named slots use modifiers access named attribute slots default attribute slot would always pass attributes component change named targets could specified component perhaps something like inside event proxying nt lot add except amazingly powerful modifier solved lot problems seems largely unknown vue devs though see good amount ui lib issues get solved exposing devs feature placed pr website add docs search support site potentially optimized google search", "d": "6/2017"}, {"body": "coming argument api surface another issue must repeat fan idea introduces another way things work nt work jsx without also implementing something special etc one thing respect react folks commitment slim api using language features much possible spirit reusing pattern already props attributes seems much better introducing another abstraction", "d": "6/2017"}, {"body": "ahh see saying like currently available would addition instead", "d": "6/2017"}, {"body": "rereading comments tracking", "d": "6/2017"}, {"body": "yes would addition also would need option turn current default behaviour applying attributes root element like html export default applycomponentattrstoroot false defaults true name tbd obviously data options stuff could become default setting vue decide resulting breaking change", "d": "6/2017"}, {"body": "linusborg thoughts dealing events side things follow strategy supposed could also add property might look like perhaps could accept object similar one issue foresee events since works slightly differently components elements also nt know want suppose available modifier might obsolete", "d": "6/2017"}, {"body": "also regarding option perhaps would good name set could disable automatically applied attributes event forwarding might also nice able disable entire application via well single component", "d": "6/2017"}, {"body": "recently similar idea also avaliable functional components via would end sounds fine also asking object syntax like used would fit right unsure native modifier make work component events native listeners api would end much complicated use questionable since native event listener applied root element would still catch desired event bubbling might mnot necessary assign specific element template", "d": "6/2017"}, {"body": "reproduction link obviously reproducing anything ssr jsfiddle", "d": "6/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "6/2017"}, {"body": "created branch repo reproduction code steps reproduce production mode open compare server browser consoles reproduction code component", "d": "6/2017"}, {"body": "sorry nt notice repo link also attached issue thought code services like jsfiddle permitted", "d": "6/2017"}, {"body": "reactivity ssr", "d": "6/2017"}, {"body": "expected behaviour want better control code executed key filtering inside event callback keep one single handler", "d": "6/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow could add property array elements use bind rows", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hmm sounds like good idea naming really intuitive think", "d": "6/2017"}, {"body": "tried poc works opened pr think need discuss naming anyway", "d": "6/2017"}, {"body": "like well think useful feature", "d": "6/2017"}, {"body": "also agree simple valid use cases", "d": "6/2017"}, {"body": "ah request exact thing almost exact reason would like add extended mouse clicks clickleftnone clicknone", "d": "6/2017"}, {"body": "truefusion expected behaviour mouse clicks", "d": "6/2017"}, {"body": "nickmessing click event plain event modifier trigger key modifier held would leave default click event available complex cases would conflict left middle right combined", "d": "6/2017"}, {"body": "truefusion actually way implemented already solves", "d": "6/2017"}, {"body": "hi cloned repository wrapping code statement incur memory error probably means nothing wrong library code note memory consumption snapshot fairly low work load server code reasonable reclaim memory provide information", "d": "6/2017"}, {"body": "tried use interval ms run server memory used increasing way small number happened production enviroment request almost per day fortuneately found reason made computed function correctly wonder happend way thanks help", "d": "6/2017"}, {"body": "please update code illustrate problem", "d": "6/2017"}, {"body": "alreay updated", "d": "6/2017"}, {"body": "ok reproduced commenting throw new error keep memory low", "d": "6/2017"}, {"body": "reproducible browser js var timer setinterval function const vm new vue computed test function throw erro happened try vmtest catch e", "d": "6/2017"}, {"body": "mon jun pm xltxlm notifications githubcom wrote problem feature solve proposed api look like vuewatch receiving subscribed thread reply email directly view github mute thread", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "value treated default already want", "d": "6/2017"}, {"body": "oh nvm yeah validations place honestly though nt think change current behavior value provides somewhat subjective introducing api churn", "d": "6/2017"}, {"body": "saying change default somehow nt think like stated understand somewhat subjective reasons mentioned think look common use cases consider changing default opened issue since noticed pattern repeat practically vue projects quite varying vast vast majority elements write using modes rare exceptions subjectivity also reason like see default configurable would love others pitch issue kept open nt really understand api churn point", "d": "6/2017"}, {"body": "changing default breaking change breaking change subjective reasons nogo fyi create higherorder transition component", "d": "6/2017"}, {"body": "proposing configuration parameter setting default projecttoproject basis exactly reason guess provide set wrapper components guys easily avoid common mistakes future gets us around actually deal mode parameter altogether", "d": "6/2017"}, {"body": "nt think default worth adding config option though hoc solution looks nice imo", "d": "6/2017"}, {"body": "use hook", "d": "6/2017"}, {"body": "jounqin thanks lot", "d": "6/2017"}, {"body": "maybe use vuerouter use pathtoregexp route matching", "d": "6/2017"}, {"body": "thanks lot try still ca nt void string enough", "d": "6/2017"}, {"body": "\u8fd9\u79cd\u505a\u6cd5\u5b9e\u9645\u4e0a\u662f\u8ba9\u5185\u90e8\u7684value\u770b\u8d77\u6765\u50cf\u662f\u53cc\u5411\u7ed1\u5b9a\u7684 understand description please explain", "d": "6/2017"}, {"body": "\u53ef\u80fd modifier", "d": "6/2017"}, {"body": "sure understand problem usually one way binding value listen changes coming eg event checkbox change value gets updated parent inner values consider computed setters", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "hello please use forum gitter questions like repo issue list strictly bug reports feature requests stated contributing guidelines thanks", "d": "6/2017"}, {"body": "fyi skip limitation functional components", "d": "6/2017"}, {"body": "something consider improving already roadmap however nt definitive date land", "d": "6/2017"}, {"body": "works syntactic sugar example essentially clearly wo nt work", "d": "6/2017"}, {"body": "seems intended found code background reason", "d": "6/2017"}, {"body": "kingwl jkzing see", "d": "6/2017"}, {"body": "gebilaoxiong found wrong commit delete", "d": "6/2017"}, {"body": "found docs well maybe make clear component section", "d": "6/2017"}, {"body": "welcome submit pr vue docs repo", "d": "6/2017"}, {"body": "asking window document need use vue lifecycle hook case mounted want", "d": "6/2017"}, {"body": "jkzing thank replying check method provided", "d": "6/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow issue jkzing said", "d": "6/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "6/2017"}, {"body": "desever \u611f\u89c9\u662f nodejs \u7684\u4e00\u4e2a bug nodejs webpack \u76f8\u5173\u7684", "d": "6/2017"}, {"body": "hello malinasab thank interest project however issue usagesupport question issue tracker reserved exclusively bug reports feature requests outlined contributing guide encourage ask forum stack overflow gitter happy help", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "thanks reporting open issue vueloader repository well feature would require work repositories like idea semver number", "d": "6/2017"}, {"body": "imagine also want make clear interfacing dom directly nogo however well goes development", "d": "6/2017"}, {"body": "use full build vue includes compiler build used services like jsfiddle codepen generates actual errors describe", "d": "6/2017"}, {"body": "hi chooin thanks reporting issue however valid runnable reproduction please provide one", "d": "6/2017"}, {"body": "linusborg webkitkeyframes hash empty", "d": "6/2017"}, {"body": "chooin provide github repo reproduce situation \u4f60\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2agithub", "d": "6/2017"}, {"body": "tested vueloader chooin said prefixed version nt scoped style non prefixed closing related vueloader postcss btw unless supporting safari nt need prefix keyframes", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "thanks suggestion nt pass object items props", "d": "6/2017"}, {"body": "really pass object prop like indexvue data return pageinfo totalpage currentpage onpageclick function currentpage pagesize evt consolelog currentpage pagesize evt hope pageinfo ca nt merge default valuebut get component", "d": "6/2017"}, {"body": "ha wanted expression jsx like", "d": "6/2017"}, {"body": "use directly another option situation", "d": "6/2017"}, {"body": "apart fact probably would require breaking change think would make props definition api unnecessarily complicated use computed property", "d": "6/2017"}, {"body": "jkzing linusborg said cn solve problems need type check better pass one one use jsx feature cause good enough effect cost achieving relatively large", "d": "6/2017"}, {"body": "many thanks", "d": "6/2017"}, {"body": "getter", "d": "6/2017"}, {"body": "jounqin thank giving information dispelled doubt changed code got ok kind code confusing debugging maintaining would know ssrcontext ready use even code safe source code optimized like", "d": "6/2017"}, {"body": "happens root component nt easy fix", "d": "6/2017"}, {"body": "use inline plain javascript otherwise", "d": "6/2017"}, {"body": "nickmessing registered filter vuefilter nt want repeat new vue", "d": "6/2017"}, {"body": "according docs vue filters used inside mustache interpolations vbind expressions latter supported since filters primarily designed text transformation purposes complex data transforms directives use computed properties instead considering want pass aditional arguments think filters good way go prefer html import mycoolfilter filtersjs export default computed dosomething mycomputed return mycoolfilter thisdosomething b filters pretty bad design decision imo anywhere simple text processing like", "d": "6/2017"}, {"body": "access filters component like could write", "d": "6/2017"}, {"body": "nirazul thanks", "d": "6/2017"}, {"body": "nirazul filters directives intentionally removed vue intense discussions sorry say wo nt bring back situation nt changed", "d": "6/2017"}, {"body": "linusborg ok think meant leupom", "d": "6/2017"}, {"body": "oh right thanks", "d": "6/2017"}, {"body": "alexandretperez expected behaviour vue built virtualdom vue source truth never mutate dom generated vue manually gets overwritten next vue tick", "d": "6/2017"}, {"body": "nickmessing said", "d": "6/2017"}, {"body": "nt think really needed though", "d": "6/2017"}, {"body": "notice example quite right template instead concerning example works developer must always think edge cases receiving object array remember deal unification would let api easier use cases array object would syntax", "d": "6/2017"}, {"body": "useful use indexes objects", "d": "6/2017"}, {"body": "think become little confused using collection value selectec collection array value one want access key object index array one use right unified syntax would inded one use iterate use template collection array variable empty point index object array index beeing populate object syntax make reusable one receive either object array array case value one need remenber index empty arrays empty objects", "d": "6/2017"}, {"body": "unified syntax would inded yes one use value key index iterate use index template collection array index variable empty question happen would rely index object loop really make sense use thought", "d": "6/2017"}, {"body": "syntax exists objects usefull point usefullnes consistence api bugs could arise one forgets index empty try use", "d": "6/2017"}, {"body": "value key index syntax exists objects usefull well wonder well third argument original collection", "d": "6/2017"}, {"body": "case think deprecated future version breaking changes added", "d": "6/2017"}, {"body": "present intentionally removed couples logic component hierarchy think arbitrary comp comp communication either user vuex use global event emitter bus creating empty instance docs manually bubbling events possible encourage people use one solutions mentioned instead", "d": "6/2017"}, {"body": "react using render functions regardless fully implementable userland nt need part core", "d": "6/2017"}, {"body": "thanks", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "lose arguments passed get one", "d": "6/2017"}, {"body": "use", "d": "6/2017"}, {"body": "regardless question closing favor forum discussion", "d": "6/2017"}, {"body": "array things passed see according docs instead see", "d": "6/2017"}, {"body": "nt know certainly works js vuecomponent examp template lt input input emit ex event hi gt new vue el app data methods handle event args consolelog event args ouput event istrusted true type input target input currenttarget input eventphase hi", "d": "6/2017"}, {"body": "intentional think better explicitly define data strcuture code component selfexplanatory data mutation preferably happen component code template vmodel create reactive properties dynamially would work vue actually proposed removed reason", "d": "6/2017"}, {"body": "understand intention also creates lots boilerplatecode forms used create data easy run stange behaviour backend sends undefined data removed jsonstringify leads loss reactivity also components create arrayforms forms adddeletebuttons create multiple rows data always require providing datainitializationcode often unnecessary undefined standard value maybe providung least option like using set modifier would give developer choice use", "d": "6/2017"}, {"body": "also bit inconsistent reactivify creation wanted providing vueset wrong exists use vmodel vue really wants enforce silently losing reactivity nt good thing imo case vmodel create code checks existence key first raises error key nt exits", "d": "6/2017"}, {"body": "also bit inconsistent reactivify creation wanted providing vueset wrong situations necessary necessary use behaviour plainly visible code instead abstracted away hidden template utility function providing different integrating hood one mostused features framework former enables users create reactive properties fact really latter accepts behaviour norm hides away want support patterns lead readable maintainable code even means bit boilerplate situations adding proposed behaviour would contribute goal opinion", "d": "6/2017"}, {"body": "least check vmodel nonexisting keys moment often leads invisible loss reactivity point field nt created happen quite easily setting value undefined try evaluate see problem use vue edit data provided rest service uses jsonstringify", "d": "6/2017"}, {"body": "also documentation updated instead due limitations modern javascript abandonment objectobserve vue detect property addition deletion since vue performs gettersetter conversion process instance initialization property must present data object order vue convert make reactive paragraph explaining limitations modern javascript fact intended behaviour", "d": "6/2017"}, {"body": "agree warning would helpful look something equally helpful however concerning example rest api leaves properties like describe elaves props nt bad api design book client api lib take care data normalized job ui add back propertiesdata missing datamodel taken care central place", "d": "6/2017"}, {"body": "writeback course normalized backend still necessary backend needs validation ca nt trust data gets frontend also sometimes useful distinguish null undefined values works vue use code like value undefined jsonstringify omits fields undefined values fact easy way initialize fields undefined receiving backend requires lot boilerplate code", "d": "6/2017"}, {"body": "also sometimes useful distinguish null undefined values agreed somethimes times initialize fields undefined receiving backend requires lot boilerplate code really generally oneliner lot boilerplate would deal objects lot kinds properties", "d": "6/2017"}, {"body": "also nt see frontendcode crucial datamodeling backend writing letting template define fields value via vmodel would less boilerplatey write posting value backend real datamodels live validation anyway nt see necessity vue forcing jumping hoop", "d": "6/2017"}, {"body": "even oneliners become lots boilerplate necessary lots places also dry", "d": "6/2017"}, {"body": "also documentation updated instead due limitations modern javascript abandonment objectobserve vue detect property addition deletion since vue performs gettersetter conversion process instance initialization property must present data object order vue convert make reactive paragraph explaining limitations modern javascript fact intended behaviour mxining two different things pararaph vmodel addition aproperty normal javascript means limitation technically ca nt detect new poperty created matter done developer ca nt make reactive exists choice nt use implementation independent fact detect properties added without make reactive automatically", "d": "6/2017"}, {"body": "also nt see frontendcode crucial datamodeling backend nt see trivial unimportant nt hink either concerns validation integrity predictability always added props missing visiting form could add prop without user anything little clicking input leaving depending concrete implementation would choose would keep mind property could exist exist various places app depending wether user prevously openened form might added could make code amp data much brittle inconsistent compared code would normalize data receives api basically meant earlier better code data integrity cost bit boilerplate necessary", "d": "6/2017"}, {"body": "vmodel always added props missing visiting form could add prop without anything little clicking input nt see problem clearly stated code writing vmodel look declarative point view using vmodel would sufficient also dry couse may argue template output nt contain code changes data vmodel would wrong anyway also always use longform template allowing vue already goes beyond simple template shows things concept assume concept vue pragmatism enforcing certain paradigms otherwise templates models much decoupled reactflux example also problem vmodel simply inherited behaviour described js limitation quoted paragraph docs also applies vmodel vue would detect field addition watched objects vmodel would also create new fields fact already nt makes reactive", "d": "6/2017"}, {"body": "bites times vote least generate warning case encounters case introduce boilerplate form content dynamic eg multiple instances created button example html inputs add new item often happened added new input template forgot add key method least warning would nice property better practice particular use case", "d": "6/2017"}, {"body": "forms like follow structure wherein define js empty set fields like want form allow multiple entries clone empty object still mildly inconvenient remember add field emptyfields object add corresponding input element form least documented code well creating variable called emptyfields conceivably contain form fields empty state linusborg points actually helps write better code however still agree least development warning emitted attempting assign nonreactive property", "d": "6/2017"}, {"body": "still think framework nt dictate code style much let developers decide least submitting warning would improvement otoh least prototyping using vueset would real timesaver would still prefer least ability use global option use example vmodelset activate behavior", "d": "6/2017"}, {"body": "data validation needs done backend malicious user could always post arbitrary data forcing developer specify data structures backend frontend unnecessary dry leads boilerplate useful frontendonly structures general forms frontend displays data posts back typical crud operations moment vue makes unnecessarily cumbersome also prefer use undefined value unspecified values nt work vue json omits fields undefined values use null instead problematic certain situations write code initializes data frontend receiving backend another example arraybased fields entry array creates new subform moment need solution like sirlancelot one instead seeing template specification data instead writing template also create maintain templateobject write createmethod bind method arrayeditcomponent bigger projects code adds without really making everything readable instead looking template see happening also check boilerplate conceptual point view vue template active bind mutations fact used place also js handles undefined fields similar fields value undefined many occasions nt think itt plausible draw quite arbitrary line allowing change datafields create", "d": "6/2017"}, {"body": "give one canvas prevent node reused", "d": "6/2017"}, {"body": "nice work add tip vue document", "d": "6/2017"}, {"body": "actually docs", "d": "6/2017"}, {"body": "welcome pr", "d": "6/2017"}, {"body": "would great could directly pr closing since issue chinese doc", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "see", "d": "6/2017"}, {"body": "bug want prevent navigation need click event sample vue compiles template see still properly adds", "d": "6/2017"}, {"body": "thanks sirlancelot", "d": "6/2017"}, {"body": "expected behaviour objects arrays passed reference explained documentation", "d": "6/2017"}, {"body": "sorry", "d": "6/2017"}, {"body": "problem hard feelings better one issue much one tend keep messages short save time", "d": "6/2017"}, {"body": "lot digging seems type command nt trigger input change events eventually realised sendkeys way go sure worked hypothesis probably dynamic compilation templates render functions", "d": "6/2017"}, {"body": "dup", "d": "6/2017"}, {"body": "posva although issue similar difference proposed api one significant issue reopened", "d": "6/2017"}, {"body": "see api different examples one using native events using custom events object syntax miss something keep one issue opened though feel free share thoughts issue", "d": "6/2017"}, {"body": "understanding correctly trying use modifier means want bind property component defined omit far know modifier designed bind property dom instance suppose current behavior correct", "d": "6/2017"}, {"body": "ok perhaps luck worked nt expect work would worth note docs saying using prop modifier binding incompatible components thanks david", "d": "6/2017"}, {"body": "jkzing said modifier meant bind dom properties documented would like know made think would work first place blog post advocating use incorrectly docs modifier page sent", "d": "6/2017"}, {"body": "read docs one thing nt clear target object set property using prop component component nt clear answer decided try found properties set component would seem set component perhaps something like go docs clear future people like bind dom property instead attribute tag component component el target object property set", "d": "6/2017"}, {"body": "sure pr docs welcome tue jun david hewitt notifications githubcom wrote read prop docs one thing nt clear target object set property using prop component component vm component el nt clear answer decided try found properties set component vm would seem set component vm el perhaps something like go docs clear future people like prop bind dom property instead attribute tag component component el target object receive property receiving modified openclose state reply email directly view github mute thread", "d": "6/2017"}, {"body": "thanks see", "d": "6/2017"}, {"body": "well nt possible plain javascript well expected iframe content origin outer inner frame ca nt interact", "d": "6/2017"}, {"body": "linusborg see browser issue electron app issues way implement via vuejs directives", "d": "6/2017"}, {"body": "would rather suggest wrapping iframe small component need help join us forums forumvuejsorg gh issues meant", "d": "6/2017"}, {"body": "hi thanks report explain changes made relate memory leak would helpful", "d": "6/2017"}, {"body": "see commit history global mixin plugin global component plugin tricky part unable find related leak plus leak turn", "d": "6/2017"}, {"body": "global mixins lead memory leaks use externalizing vue mixin registration code called every render vue externalized mixin gets registered careful using also recommend using instead alternatively make plugin autoprevents duplicate registration", "d": "6/2017"}, {"body": "made plugin registering global mixin see autoprevent duplicate registration using", "d": "6/2017"}, {"body": "bug expected behaviour filter create new state change format expected behaviour everytime dependency changes virtualdom whole component rerendered diffed", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "sorry ca nt help without reproduction please try make one also stack trace nonminified build would help", "d": "6/2017"}, {"body": "close switched back rendertotext everything works", "d": "6/2017"}, {"body": "fyi found problem following element problem cause vue trying run class code comment think cause invalid servercachekey items got cache key arent cause show ribbon", "d": "6/2017"}, {"body": "browsers nt fire event use case better call function guess also create event trigger form", "d": "6/2017"}, {"body": "posva close mean work safari use vueit worked use jsdom change vuele name know create event onsubmit also check eventmonitoring safari ca nt trigger submit", "d": "6/2017"}, {"body": "wo nt work chrome safari closed related vue misunderstand something", "d": "6/2017"}, {"body": "lazyhero rely event invoking submit method reproduction \u5728 chrome \u4e0b\u62a5\u7684\u662f\u7f3a\u5c11 onsubmit", "d": "6/2017"}, {"body": "posva related vue sure think nt understand reproductionyou open let others try solve chinese \u5728chrome\u4e0b \u6253\u5f00\u63a7\u5236\u53f0 \u8bb0\u4f4f devtoolsconsole \u8fd9\u662f\u6b63\u5e38\u7684\u53cd\u9988 \u6ca1\u6709\u8fdb\u5165onsubmit\u662f\u56e0\u4e3a\u5728\u53d1\u9001post\u524d \u800c\u5728 safari\u4e0b \u662f\u6ca1\u6709\u4efb\u4f55\u53cd\u9988\u7684 posva\u7684\u610f\u601d \u4ed6\u7684\u610f\u601d\u662f \u53ef\u80fd\u662f safari \u53ef\u4ee5\u89c2\u5bdf\u5230 \u4f1a\u53d1\u73b0 \u6709\u8fd9\u4e2a \u6211\u7591\u60d1\u7684\u662f \u4e3a\u4ec0\u4e48\u5728vue\u6e32\u67d3\u4e0b", "d": "6/2017"}, {"body": "yes even tried thing removing vue code put fiddle shared", "d": "6/2017"}, {"body": "crossjs reproduction \u7f3a\u5c11submit\u5bf9\u5e94\u65b9\u6cd5 \u8fd9\u4e2a\u6211\u53bb\u6389\u4e86 \u4e4b\u524d\u7684\u91cd\u73b0\u4ee3\u7801\u5197\u4f59 \u65b9\u6cd5\u7684", "d": "6/2017"}, {"body": "submit submit", "d": "6/2017"}, {"body": "worries definitely confusing", "d": "6/2017"}, {"body": "crossjs \u8fd9\u4e2a\u94fe\u63a5 \u6ca1\u6709\u7528vue", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "crossjs \u662f\u554a \u4f60\u53ea\u8981\u52a0\u4e0a\u4e00\u53e5new vue el \u5305\u8d77\u6765", "d": "6/2017"}, {"body": "crossjs safari\u4e0b\u4f9d\u7136ok", "d": "6/2017"}, {"body": "lazyhero", "d": "6/2017"}, {"body": "crossjs \u591a\u8c22 \u6211\u4e5f\u4f1a\u7422\u78e8\u4e0b \u8f9b\u82e6", "d": "6/2017"}, {"body": "guarantee element already document use make sure", "d": "6/2017"}, {"body": "vuejs javascript", "d": "6/2017"}, {"body": "yurovant elaborate bit aware afaik coding styles nt matter parser", "d": "6/2017"}, {"body": "hi laraveldeep please consider answer", "d": "6/2017"}, {"body": "vanilla js demo proof", "d": "6/2017"}, {"body": "thanks gotcha learned hard way", "d": "6/2017"}, {"body": "may help also see", "d": "6/2017"}, {"body": "merged", "d": "6/2017"}, {"body": "hm indeed thanks reporting seems introduced nt think intended think regression original intended behaviour would agree", "d": "6/2017"}, {"body": "thanks reporting linusborg actual introduced seems regression fault", "d": "6/2017"}, {"body": "glad found pulling hair happening look updating childobjmsg component also updates someobjmsg parent tt", "d": "6/2017"}, {"body": "darival use warning child component attempts mutate injection binding props imo nt mutate injection react context", "d": "6/2017"}, {"body": "personally considered change feature bug", "d": "6/2017"}, {"body": "rayrutjes injected properties left unreactive pretty much reason op provided inject arbitrary objects inlcuding complicated ones background left untouched need reactivity pass already reactive object best worlds", "d": "6/2017"}, {"body": "linusborg injected array changed even really reactive", "d": "6/2017"}, {"body": "linusborg think makes sense wondering affect existing code base", "d": "6/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow", "d": "6/2017"}, {"body": "think bug", "d": "6/2017"}, {"body": "time open issue question think bug need include proper boiled repro", "d": "6/2017"}, {"body": "thanks ask vue forum", "d": "6/2017"}, {"body": "\u76f8\u5173\u89e3\u7b54\u8bf7\u67e5\u770b vuejs \u4e0d\u652f\u6301 vuejs \u4f7f\u7528\u4e86 \u4e0d\u80fd\u6a21\u62df\u7684 ecmascript vuejs \u652f\u6301\u6240\u6709\u517c\u5bb9 ecmascript", "d": "6/2017"}, {"body": "\u5728 notifications githubcom closed receiving authored thread reply email directly view github mute thread", "d": "6/2017"}, {"body": "always attempt hydrate root node attribute dev mode failed hydrate warning nothing happens worked prod mode assumes markup correct", "d": "6/2017"}, {"body": "sorry reopen answer nt address primary concern thanks responding though happens prod mode vue hydrate app become static point", "d": "6/2017"}, {"body": "bjunc ca nt happen prod mode strips away warnings behavior logic remains exactly works dev work prod", "d": "6/2017"}, {"body": "believe good business case ssr wysiwyg content big reason pursuing ssr seo currently getting valuable usergenerated content ca nt trust works dev want make sure content admin nt brick app saving improper html production despite checks might put place nt want go offtopic better way address seo aspect dynamic content maybe moot topic", "d": "6/2017"}, {"body": "allowing users save arbitrary html worry could potential xss use display usergenerated content vue wo nt attempt diffhydrate anything inside node ca nt lead hydration failures otherwise pure vdombased hydration possibly fail bug vue finally hydration failures prod also cause vue throw away existing dom render afresh wo nt brick app", "d": "6/2017"}, {"body": "well take proactive measures also want reactive measures arbitrary html feel better redundancy checks server client really great hear though think ultimately addresses concern also good hear refresh although would defeat point seo figured catching exception could help us pinpoint pages issues think good knowing nt part diffhydration process thanks backandforth", "d": "6/2017"}, {"body": "tried version looks like normal", "d": "6/2017"}, {"body": "thanks reporting beta may contain bugs assure vue work unstable releases may want open ticket side though", "d": "6/2017"}, {"body": "nt", "d": "6/2017"}, {"body": "special toplevel treatment attrs needs nested donnysim pointed", "d": "6/2017"}, {"body": "exact position two toggled trees reused instead recreated want force remount give different keys", "d": "6/2017"}, {"body": "behavior intentional syncing composition often leads awkward ux use case", "d": "6/2017"}, {"body": "example expect type search work like type text", "d": "6/2017"}, {"body": "use case asking want incomposition string show", "d": "6/2017"}, {"body": "nt want incomposition string show using type search want want like type text", "d": "6/2017"}, {"body": "search \u8f93\u5165\u6846\u4f5c\u4e3a text", "d": "6/2017"}, {"body": "ok get", "d": "6/2017"}, {"body": "use", "d": "6/2017"}, {"body": "vueconfigerrorhandler nt work already tested stated docs handle catches errors render runtime error occurs component render passed global vueconfigerrorhandler config function set", "d": "6/2017"}, {"body": "fyi error captured vue always sent", "d": "6/2017"}, {"body": "thanks made work jsfiddle order seems important able make work project using components heavily spa nt work error comes components update post could pinpoint issue", "d": "6/2017"}, {"body": "fyi support prop", "d": "6/2017"}, {"body": "thanks elevate featurerequest general expect consistent behavior dynamic components including able wrap multiple conditionally rendered elements declared explicitly", "d": "6/2017"}, {"body": "already however unlikely happen anytime soon due complexity involved", "d": "6/2017"}, {"body": "good know thanks", "d": "6/2017"}, {"body": "refs guarantee order see", "d": "6/2017"}, {"body": "ssr directives perform vnode data manipulations way access dom nodes dom ever created need modifying", "d": "6/2017"}, {"body": "\u8fd9\u4e2a feature request", "d": "6/2017"}, {"body": "vue bug webpack related question", "d": "6/2017"}, {"body": "dynamic require works suitably img src updated see img browser error dynamic require work say webpack related question thx", "d": "6/2017"}, {"body": "error happens happen vue nt error comes vue vue executing piece code", "d": "6/2017"}, {"body": "\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5b89\u88c5 vue", "d": "6/2017"}, {"body": "sorry \u5176\u5b9e\u6211\u73b0\u5728\u5c31\u662f\u76f4\u63a5\u5b89\u88c5 vue \u611f\u89c9\u4e00\u81f4\u597d\u4e9b \u8fd9\u91cc \u53ef\u4ee5\u63d0\u793a \u65b9\u6cd5 \u4e5f\u8bd5\u8fc7\u53ef\u4ee5\u4e86 vue \u7684 dts \u7531\u4e8e\u6309\u6a21\u5757\u8f93\u51fa\u7684 vue \u7c7b\u4f3c \u6211\u4f7f\u7528\u7684\u662f \u8fd9\u6837\u4e00\u4e2a \u7279\u6b8a \u671f\u5f85\u7684\u573a\u666f \u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a\u76f8\u5bf9\u8def\u5f84\u7684\u6587\u4ef6", "d": "6/2017"}, {"body": "types alias", "d": "6/2017"}, {"body": "nt think support arbitrary arraylike objects line actual object vs arraylike blurry stick case support array subclasses also since subclassing array feature likely implement reimplement reactivity system proxies", "d": "6/2017"}, {"body": "offtopic seen discussion nt want switch proxies reactivity creates new object instead editing initial one changed", "d": "6/2017"}, {"body": "sounds good thanks btw seems necessary qualify interpreting object array logging square brackets seems numerical function", "d": "6/2017"}, {"body": "alternative could use iterator protocol works way iterable structures array arraylikes", "d": "6/2017"}, {"body": "nickmessing difference still introduce breaking changes also browser compatibility constraints means", "d": "6/2017"}, {"body": "offtopic already plan maybe nice idea discussion issue possible breakingbrowser compatibility changes", "d": "6/2017"}, {"body": "nickmessing currently planned change reactivity system browser compatibility dropping ie evergreen browsers breaking changes would minimal terms observed object equality api remain", "d": "6/2017"}, {"body": "using seen people asking support old browsers gone available everywhere ps solves issue", "d": "6/2017"}, {"body": "nickmessing yup also supported", "d": "6/2017"}, {"body": "clarify nt believe subclassing array feature inherit style function collection arrayapply collectionprototype objectcreate arrayprototype objectassign collectionprototype methods", "d": "6/2017"}, {"body": "true subclassing see details supports something like", "d": "6/2017"}, {"body": "fiddle nt really reproducing issue give vague feedback designed case one direct child component toggled ca nt work inside work wrap entire unless toggling transition group instead importantly nt think good idea using state preservation like especially involved inherently working lists instead single toggled child recommend thinking another angle hoist ratings state shared state object vuex store unaffected components lifecycles", "d": "6/2017"}, {"body": "ran issue well authored fiddle keepalive documentation indicates wrap multiple elements conditionally rendered reasonable expect behavior would hold multiple children declared instead explicit list apologize fiddle incomplete fiddle simply wraps observe issue need inspect dom see elements staying around obviously way show working", "d": "6/2017"}, {"body": "difference render multiple elements renders one", "d": "6/2017"}, {"body": "posva thanks insight good distinction keep mind compa compb kept alive one rendered time based predicate perhaps documentation could improved clarify multiple conditional children supported rendered mutuallyexclusively note uncommon mutuallyexclusive rendering using well example conditionally rendering based currentindex granted would difficult vue know used mode usagesyntax sugar perspective love able combine convenience optimizations offered currently implemented must unroll explicitly element wrapped removes incredible convenience also makes difficult maintain genericreusable dynamic components", "d": "6/2017"}, {"body": "instead using vfor vif use computed property filter array improvements docs always welcome", "d": "6/2017"}, {"body": "great suggestion thanks help submit doc pr thanks", "d": "6/2017"}, {"body": "need specify attribute specific case using works need find real id vue nt reuse nodes", "d": "6/2017"}, {"body": "posva understand tried index nt work eg bigger underlying issue event uses right index value inside nt appears scope inside parent due arrow function nt notified change prop wonder issue sure closed right away", "d": "6/2017"}, {"body": "need unique key try said see working check info", "d": "6/2017"}, {"body": "benjarwar hi like need expose public html let uid export default data uid return uid mycomponentlabel uid", "d": "6/2017"}, {"body": "vm reserved internal use important keep private rely user code keep flexibility change behavior potential future use cases userland use cases suggest generating uids write simple moduleservice generates uids import components want every component make global mixin", "d": "6/2017"}, {"body": "benjarwar needed uid exact reason creating uid fairly simple recommend using mixin sets variable component data object make uid observable necessary set one within hook closest lifecycle hook internal uid property set js let uuid export default beforecreate thisuuid uuidtostring uuid", "d": "6/2017"}, {"body": "thanks replies nirazul one aforementioned work still kinda wishing public id component outofthebox understand need keep value private", "d": "6/2017"}, {"body": "incorrect usage reuse vnodes alway create fresh vnodes render", "d": "6/2017"}, {"body": "think maybe improvement could access assign array item via string type index fact equal refer could check key try convert number type", "d": "6/2017"}, {"body": "probably check string integer index", "d": "6/2017"}, {"body": "thanks peterwf", "d": "6/2017"}, {"body": "technically think problematic framework using simulate providing necessary properties would break lot code expects run universally checking environments could share details detect browser environment intentional use simple check want use inbrowser behavior vue used inside node jsdom", "d": "6/2017"}, {"body": "hi thanks quick reply contacted owner custom framework today introduce framework depth explain reason use window object way several days later provide details", "d": "6/2017"}, {"body": "hi discussed guy custom framework team use framework server rendering web pages contain many window variables might problem left history order reuse old code runs browser simulate node framework also met problem trying use vue ssr solution modify code vue locally know strong reason fix point maybe accept solution give framework", "d": "6/2017"}, {"body": "yeah improve docs regarding special case key fact reserved attributes bound using object syntax cc chrisvfritz", "d": "6/2017"}, {"body": "fixing ping add error warn", "d": "6/2017"}, {"body": "gebilaoxiong ah realized indeed fixable check special keys", "d": "6/2017"}, {"body": "ok boss", "d": "6/2017"}, {"body": "vue ships variants runtimeonly runtime use build use instead ps please ask questions use forum gitter instead opening issues github", "d": "6/2017"}, {"body": "nickmessing thank try", "d": "6/2017"}, {"body": "import vue vuedistvueesmjs caused uncaught syntaxerror unexpected token export vueesmjs uses module export ca nt recoginized meteor even add poorvavyas package import vue vuedistvuejs works", "d": "6/2017"}, {"body": "properties prefixed historically used internally vue nt think enough reasoning change", "d": "6/2017"}, {"body": "nt think makes much sense define methods computed props etc components internal using underscore convention generally considered internal public api component defined props events access methods data component programmatically eg something rarely happening considered edge case", "d": "6/2017"}, {"body": "accessing methods happen trying hide properties user prepending illusion", "d": "6/2017"}, {"body": "yes used internally huge difference provides useful documented public api provides bugprone unexpected behaviour yes true unexpected part somewhat documented nobody tells really nt use underscores anything unless like pain argument simple frankly seems compelling newcomer bugprone people shoot foot due unexpected behaviour many issues tracker proving though think related experience worst yet seasoned developers love nt alienate unnecessary getting rid one simple search amp replace away", "d": "6/2017"}, {"body": "unlikely happen certainly break someone existing code gain arguable raise warnings users declare datapropscomputedmethods start open pr", "d": "6/2017"}, {"body": "using arrow function data actually good idea makes readable forces build state object therefore nt really want warn also note nt say bad use arrow functions docs", "d": "6/2017"}, {"body": "fyi detected runtime tell whether function authored arrow function done via static analysis probably rule wip official eslint plugin", "d": "6/2017"}, {"body": "unfortunately possible given way vue template compilation rendering works however mount multiple vue instances share data object", "d": "6/2017"}, {"body": "vue text interpolation use instead recommend read guide", "d": "6/2017"}, {"body": "try", "d": "6/2017"}, {"body": "add self prevent jounqin said", "d": "6/2017"}, {"body": "creating pr docs thanks feedback", "d": "6/2017"}, {"body": "transition represented one css class would need multiple classes applied transition fyi works already", "d": "6/2017"}, {"body": "see example sometimes need append two classes uikit example need append class reverse animation want swap multiple components need append class leaving entering component make position absolute another component animation", "d": "6/2017"}, {"body": "nt need add classes add direct classes modify behaviour transition even use array object syntax", "d": "6/2017"}, {"body": "html", "d": "6/2017"}, {"body": "nt need classes transition would nice feature stuck fine html", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "\u53d1\u73b0\u53ea\u8981", "d": "6/2017"}, {"body": "\u4f60\u53ef\u4ee5\u9605\u8bfb\u6587\u6863 acodercat", "d": "6/2017"}, {"body": "\u6587\u6863\u8bf4next \u6216\u8005 next path", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "really nt understand feature missing definitely vue rather vuerouter issue looks like usage question ask questions forum gitter stackoverflow", "d": "6/2017"}, {"body": "validators executed prop change please provide repro", "d": "6/2017"}, {"body": "ah mistake encountered case passing array prop manipulating element via validator prop enforces elements numbers learned issue reactivity must updated via component acknowledge change object properties declared datacreation reactive ca nt array indices", "d": "6/2017"}, {"body": "limitation converting array indices would lead big performance loss really worth", "d": "6/2017"}, {"body": "known hacky workarounds use nondocumented compiler method use poorlydocumented method behavior partial result", "d": "6/2017"}, {"body": "provide raw text", "d": "6/2017"}, {"body": "worked thank lot may want add information documentation currently text say children vnodes", "d": "6/2017"}, {"body": "greencoder would great could make pr", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "\u8fd9\u4e2a issue \u5e94\u8be5\u53d1\u5230\u4f60\u4f7f\u7528\u7684 cli \u6a21\u677f\u7684\u4ed3\u5e93 \u8d34\u9519\u8bef\u65e5\u5fd7\u7684\u65f6\u5019\u8bf7\u7528 markdown log \u91cd\u73b0\u7684\u94fe\u63a5\u8bf7\u4e0d\u8981\u968f\u4fbf\u4e71\u8d34\u4e00\u4e2a", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello sorry reproduction look reproduction boiled minimal code editable use base repro", "d": "6/2017"}, {"body": "posva issue happens binding data display inline element safari", "d": "6/2017"}, {"body": "thanks clarification please provide boiled repro take look mon jun kyle notifications githubcom wrote posva issue happens binding data display inline element safari receiving mentioned reply email directly view github mute thread", "d": "6/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "6/2017"}, {"body": "underneath really array replacement heuristics replace array indeed trigger update expected behavior real cause putting call directly inside handler means component validated updated every input even extra whitespace nt make trimmed text change instead trigger actually changes using watcher fixed fiddle", "d": "6/2017"}, {"body": "thanks response intentionally make code inefficient making revalidate input method also called every time even error bag empty reason veevalidate code something similar seems happening array replacement caused issue ca nt type spaces textarea component patched code use inplace array modification fixed know code work create errorbag callback behaviour difference inplace array modification component always supposed update array replacement even array may contain values expected design perhaps documentation suggest wary array replacement bit", "d": "6/2017"}, {"body": "please follow issue reporting guidelines provide minimal jsfiddle github repository containing set reproducible steps lead behaviour described make sure boil problem much possible thanks", "d": "6/2017"}, {"body": "sorry valid reproduction", "d": "6/2017"}, {"body": "discovered injection may related temporarily closing investigate", "d": "6/2017"}, {"body": "really want string value pass string instead boolean booleans toggle attribute element convenient cases", "d": "6/2017"}, {"body": "agree answer thank much", "d": "6/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue repro thanks", "d": "6/2017"}, {"body": "already follow issue guide ssrclientplugin work well multi entrys", "d": "6/2017"}, {"body": "please give message", "d": "6/2017"}, {"body": "sorry keep github issues bug reports feature requests ask questions forum gitter stackoverflow find really issue please open new issue repro", "d": "6/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow", "d": "6/2017"}, {"body": "hi thanks interest github issues bug reports feature requests ask questions forum gitter stackoverflow use splice without argument remove element", "d": "6/2017"}, {"body": "hi posva thanks quick response behavior splice without argument behaviour looking offsets following indices breaks associative array feel behaviour non intuitive inline javascript specification sparse arrays specifically requesting myarray remove feature seemed past allows remove element index array without disturbing indices without introducing undefined array iterate later", "d": "6/2017"}, {"body": "aah case use", "d": "6/2017"}, {"body": "sorry tried already offsets indices following elements nt mean bother think edge case currently elegantly solved currently associative array use object instead array vueset vuedelete work array vue implements method mimicking behaviour javascript defined delete array index probably cases like sparse array order keys matter using object wo nt trick see subtlety talking", "d": "6/2017"}, {"body": "tested adding template using gets updated twice corresponding value need help please use forums gitter post questions btw associative array object js complicating life", "d": "6/2017"}, {"body": "nt need help probably tested wrongly example remove try access id reporting consider either bug missing feature depending intent library designer wo nt bothering anymore already lost enough time semantics array vuejs implements different semantics javascript array probably wo nt cost much implement javascript specs delete user ask delete splice user ask splice btw associative array object js need able iterate key order care nonquadratic performance javascript array like std map javascript object like std unorderedmap nt get please get chain someone thank time", "d": "6/2017"}, {"body": "provide jsfiddle repro look", "d": "6/2017"}, {"body": "fyi little point using sparse arrays js ensure enumeration order need keep copy indices anyway iteration speed difference getset might think faster object always run benchmark instead making assumptions", "d": "6/2017"}, {"body": "hi sparse arrays guarantees order objects nt important distinct primitive sometimes need currently encountered problem agents simulation every timestep simulation agents agents born store sparse array incrementing id agents dies remove structure living agents sparse arrays operations log nremainingagents use objects lose information order agents created use dense arrays remove operations become n making simulation step quadratic insurmountable problem work sparse js array added data vue constructor vue nt get control keep vue copy sync via object mapping inelegant kind point using vue get sparse array probably feature developers wo nt use may useful simplify life new users breaking somewhat hard understand semantics javascript arrays probably could faithful javascript specs inexperienced users wo nt see difference advanced users get expected behaviour thank time", "d": "6/2017"}, {"body": "answer linked mdn article links already stated spec guarantee enumeration order sparse arrays engines part spec wrong rely proper way deal keeping extra array containing ordered keys use object also usually inaccurate reason js performance big notations much underlying engine decides implementoptimize different cases pretty sure sparse array leads deopt would nt performant think", "d": "6/2017"}, {"body": "answer linked tell foreach implemented almost everywhere proper way deal keeping extra array containing ordered keys nope middle modification would lead quadratic behaviour proper way use tree underlying data structure js array javascript specs written developer enjoy minimal useful primitives code efficiently tree maps hash maps two useful distinct beasts algorithmically different somewhat natural give access programmer decent browser engines implementation forced using right primitive otherwise would nt match specs would piss poor performance optimizations bigger numbers next guy javascript today bad part browser implementers decided respect underlying theory vuejs great please nt drag us mud removing constructs would allow us rise", "d": "6/2017"}, {"body": "slower manual loop direct key access object due additional checks per spec plus cost invoking iterator function item given care performance avoid using also defeats point using sparse array sparse arrays work properly used use raw loops iterate data empty item still render block unlikely us change behavior technically breaking lead performance regressions makes sense make behave like native arrays separate method indexmodifying behavior currently however breaking change far nt think use case argument behind strong enough warrant breaking change change want likely happen suggestion keep using object instead also strongly suggest actually benchmarking app assuming object slower sparse array may strong algorithmic intuitions js land benchmarking way find truth", "d": "6/2017"}, {"body": "ok problem thanks advices", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "getting vuebot notifications githubcom hello issue closed conform issue requirements please use issue helper create issue thank receiving subscribed thread reply email directly view github mute thread", "d": "6/2017"}, {"body": "reproduction link data applicationxhtmlxml reproduction please provide minimum runnable code deomnstartes problem", "d": "6/2017"}, {"body": "linusborg copy paste data uri chrome edge browser look developer console", "d": "6/2017"}, {"body": "content data uri", "d": "6/2017"}, {"body": "would need use case", "d": "6/2017"}, {"body": "use case team serves web content applicationxhtmlxml successfully decade across desktop mobile embedded applications found extremely useful use strict html aggressive standards compliance mode eliminates historical idiosyncrasies html selfclosing vs tag capitalization cdata browser quirks prevents certain types xss attacks disallows harmful things like documentwrite ie conditional comments fails fast many types errors extra strictness xhtml syntax caught offending line patch technically invalid html html xml syntaxes valid html whatwg html specs xml representation deprecated discouraged considered outdated standards body aware browsers support xml formulation html documents natively since ie lot obsolete fud xhtml people understood difference content type doctype nt want serve polyglot documents ie lt also confusion relationship xhtml obsolete never finalized xhtml alive well nt help situation making content compatible content types syntaxes trivial tiny patches like one accepted google facebook akamai advertising networks several open source projects years often conversation like one given rest vue seems nearly compatible applicationxhtmlxml documents already hoping accept patch nt maintain fork backwards compatible single character change selfclosing slash really problem ideological reasons writing code would resolve issue totally standards compliant", "d": "6/2017"}, {"body": "dvdckl ha bit confused nt realize fix simple mean blizzard start using vue", "d": "6/2017"}, {"body": "created pr right start actually", "d": "6/2017"}, {"body": "yeah realized well totally missed", "d": "6/2017"}, {"body": "sorry nt see related pr earlier removed commit merged", "d": "6/2017"}, {"body": "wow", "d": "6/2017"}, {"body": "overwrite innerhtml like whenever set throws away dom nodes vue controlling previous html also string nt contain data", "d": "6/2017"}, {"body": "lzxb would need use computed properties initial data imo data schema component use data side rather put data side actually need", "d": "6/2017"}, {"body": "special cases need like", "d": "6/2017"}, {"body": "calculated attribute data dependent requirement accessible", "d": "6/2017"}, {"body": "nothing mixins order vs current behavior expected way often reasonable depend way around also change would breaking obvious gain", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "indeed special handling present native basic idea type whitespace parent value gets updated trimmed value triggers update parent child however textarea child still focus update blocked blur input update happens parent value already trimmed system thinks nothing changed easily simulate native behavior extra textarea custom component", "d": "6/2017"}, {"body": "thanks answer indeed fix issue whitespace still showing custom component part whitespace b remove b instantly trims whitespace remains happens still live", "d": "6/2017"}, {"body": "thing", "d": "6/2017"}, {"body": "expected behaviour looking guide realize nt properly documented far see ping chrisvfritz wrong", "d": "6/2017"}, {"body": "counter intuitive override value would nt something get merged overrides want explicitly ignore always use text value declare prop use", "d": "6/2017"}, {"body": "wostex one slightly controversial features seems little strange giving component undocumented api assuming parent component knows child component root element practice though found feature rarely causes problem long nt try use applications use enjoy though ymmv personally feel meant component library authors eg integrating bootstrapmdl reported finding helpful since difficult predict component might used example bootstrap plugins require adding new attributesclasses ability add arbitrary attributes means authors nt work hard accommodate edge cases docs linusborg right nt see anywhere docs thinking back wondering purposefully left personally consider antipattern application code include warnings escape hatches props events workflow use sparingly mostly serve escapehatch prefer using props events parentchild communication except implicit passing attributes possible violate workflow accidentally despite feelings many find useful want know acquiesce opened pr would love hear thoughts explanation linusborg posva wostex hopes dreams next major version vue might make another push behavior disabled default even altogether since functional components technically used explicitly pass arbitrary attributes root element element desirable even normal component custom props used powerful explicit attribute passing vue label pattern also allows inspecting arbitrary attributes provide warnings example set classes nt used together user trying use external plugins outdated conflict user trying add classesattributes deprecated", "d": "6/2017"}, {"body": "thanks explanation chrisvfritz thought bug seems line common vue concepts although people benefit using maybe feature documented update see already done pr", "d": "6/2017"}, {"body": "chrisvfritz really think kept removing would enforce using render function every component lib inapp specific ui component", "d": "6/2017"}, {"body": "posva wonder compromise new directive could added specify primary element one attributes added since may always root element think could mostly solve problem users know implementation details components example case simple component following template html people might surprised adding class css still nt work right component authors selectively forward attributes defining props specifying applied way could set sane default instead going much work trying imagine every possible scenario think", "d": "6/2017"}, {"body": "think want control attributes like class go better always use props would also work reuse class put different attributes different children needs prop must used multiple places class example bit weird imo using ui lib check actual html trying add classes probably end something like", "d": "6/2017"}, {"body": "posva cases like though tedios set lot props bindings able set different primary element would make element much simpler props could used anything attribute passed element make sense also writing sitting right next weird", "d": "6/2017"}, {"body": "indeed primary element component looks like something useful enough maybe referring main property adding short inperson discussion", "d": "6/2017"}, {"body": "seems chrome bug work fine firefox", "d": "6/2017"}, {"body": "still seeing firefox windows macos also tried chrome canary firefox beta channel really noticeable toggle transition group slice array using button", "d": "6/2017"}, {"body": "looking bit looks like dynamic transition greatly adding lag sensation setting improves lot looks like something editing inline styles many components one animated may wrong", "d": "6/2017"}, {"body": "figured dynamic name adding lag remove name completely setup style without transition applied still pretty noticeable pause becomes pronounced complicated vfor instance table app lot data functions generating table display lag pretty big bummer since actually interested animating entire list might try see way animate additions without wrapping vfor transition group", "d": "6/2017"}, {"body": "observation enables flip technique default however requires least one call source forces style recalculation layout reflow chart show usually cheap small style sheet full blown css framework recomputing styles expensive", "d": "6/2017"}, {"body": "nt think fixable vue framework though tried way optimize away call requires causes style recalculation well since transitiongroup designed flip technique little chance avoid least one style recalculation call fairly click event listener still respond even cpu slowdown seems acceptable css framework adds many rules well flip technique something might want avoid", "d": "6/2017"}, {"body": "thank investigating explanation makes sense even without specific classes applied obvious semanticui others making changes elements like body text etc directly thus causing recalculation load", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "may cleaner js code stream", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "thank looks perfect smile", "d": "6/2017"}, {"body": "vuerouter issue look console giving hint fix issue dup", "d": "6/2017"}, {"body": "think similar problem two pages b listen event event bus switch b vuerouter trigger event page also response event component destroyed switching router listener still", "d": "6/2017"}, {"body": "simonalia probably unrelated op problem likely forgot use unregister event bus listener component hook vue doesnt use event bus questions please ask forumvuejsorg issue focus op problem", "d": "6/2017"}, {"body": "yeah got thank linusborg", "d": "6/2017"}, {"body": "thanks looks like indeed memory leak going identified source working fix", "d": "6/2017"}, {"body": "thank much help", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "also happen actually use unique keys keys unique explained docs", "d": "6/2017"}, {"body": "yes updated fiddle sure", "d": "6/2017"}, {"body": "linked fiddle still duplicate keys edit also replace array items way vue track react thirdly method pushed string array contain objects like", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "yea sorry update link think code view model causes duplication replace array assign arraysplice works ok remove one tr template problem goes away updated code use arraysplice problem still tried detect duplicated items code var counts thisordiniforeach x gt counts xid counts xid consolelog counts thanks helping really driving crazy", "d": "6/2017"}, {"body": "first fiddle still duplicate keys last one nt use please take look version fiddle previous reply works without errors need support suggest open thread forumvuejsorg help well issue closed appearant bug", "d": "6/2017"}, {"body": "duplicate key means duplicate declaration template duplicate value array clear sorry found problem indeed duplicated key another template page thanks linusborg support", "d": "6/2017"}, {"body": "instead considered children maybe issue may need write btw fiddle using vue", "d": "6/2017"}, {"body": "lookup algorithm provide inject child looks provided attributes loops hierarchy search provided props root could nt get fiddle run ran fiddle parent undefined child component got lookup context least start issue rendering slots relationship components", "d": "6/2017"}, {"body": "looks like functional component rendered slots resolved", "d": "6/2017"}, {"body": "kingwl correct kind technical requirement", "d": "6/2017"}, {"body": "remember raised point getting crazy end looked normal functional components attached component rendered therefore used slot get attached outer component however case nonfunctional components container injects renders html edit alidcastano updated fiddle comment since nt even using vue", "d": "6/2017"}, {"body": "haha sorry using wrong vue version fiddle caught able configure jsx nt realize posva thanks fixing example issue functional component ca nt receive provided properties functional component rendered slot linusborg technical requirement mean workaround behavior intended container created serve passes props example design would change example seems unnecessarily bloated since essence parent component already entailed data needed provide child open discussion guys suggest", "d": "6/2017"}, {"body": "change anything slot rendered context", "d": "6/2017"}, {"body": "technical requirement mean workaround behavior intended behaviour result way functional components work consider set components pass functional component another component slot rendered befor passed child child component receive resulting vnodes slot content context example means moment component renders available parent outer component consequently injections available functional component available well current implementaiton virtualdom works functional components change would require quite changing quite lot internal mechanics", "d": "6/2017"}, {"body": "posva linusborg got thanks explaining due requirements way use provideinject functional components props provided context sure constraint clarified documentation please go ahead close issue nt anything else needs done clarified thanks", "d": "6/2017"}, {"body": "maybe find way improve functional component slot moment done like posva linusborg said", "d": "6/2017"}, {"body": "kingwl thanks keeping open finally time try incorporate vuemobiledoceditor plugin using advice one problem foresee component needs used instance difficult allow flexibility nested components used example export components already registered app instance export default vueextend render h return provide data needs injected functional components return msg hello components parentcomp childfunccomp understanding user using plugin would like template script import supercoolcomponent supercoolcomponent export default mounted mounted gt new supercoolcomponent mount somewhereinapp emit mounted implementation correct severely limits usage provideinject functional components since allowed individually import register components wish use", "d": "6/2017"}, {"body": "would use full components instead support provideinject", "d": "6/2017"}, {"body": "vs", "d": "6/2017"}, {"body": "actually go nodemodules directory see directory called like probably find something called something like work import vuerouter vuerouter vueuse vuerouter", "d": "6/2017"}, {"body": "shame", "d": "6/2017"}, {"body": "using already via webpack vueloader try", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "quoting evan took time respond really fan proposal nt immediately clear turned tried felt weird realize semantic implication html attributes values usually boolean attributes attribute value indicates presence attribute truthiness implicitly expanding binding overloads perception addition prop child component declared type presence attribute indicates true value would cause different meanings technically breaking change arguments issues evan raised would close feature request duplicate also sirlancelot mentioned nice workaround make something like possible current api", "d": "6/2017"}, {"body": "thank sirlancelot approach tried works great linusborg agree evan argument thank bringing close", "d": "6/2017"}, {"body": "still actuall define prop", "d": "6/2017"}, {"body": "thanks lot make pr docs regarding requirement", "d": "6/2017"}, {"body": "would helpful yes thanks", "d": "6/2017"}, {"body": "hi please make sure follow issue reporting guidelines opening issue thanks", "d": "6/2017"}, {"body": "warnings default development mode way detect newly added nonreactive property", "d": "6/2017"}, {"body": "thanks reviewing feature request bad reactivity detection warning shadowing ie properties getters methods names", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "warning inlinetemplate components must exactly one child element", "d": "6/2017"}, {"body": "thanks reply sorry missed docs general point still stands sometimes best documentation occurs action code error andor console message would really help silent failure rarely best course action", "d": "6/2017"}, {"body": "open browser console", "d": "6/2017"}, {"body": "wow believe looked console multiple times saw nothing maybe accidentally console filtered see clear day plnkr example apologies perfect", "d": "6/2017"}, {"body": "explained previous issues expected behavior controls js side things related component guarantee made dom left behind hand attempt reuse dom leave document remove dom get properly garbage collected", "d": "6/2017"}, {"body": "remove event listeners perhaps works added listeners vs template bindings destroying dom element calls listener focus seems way focus element cleanup vue component listeners without causing vue called means test needs blur element cleaning make method less susceptible npe actual case", "d": "6/2017"}, {"body": "removes custom vue event listeners dom listeners yes blur cleaning", "d": "6/2017"}, {"body": "use works intended seems fires late timer may get fired input value change event firing", "d": "6/2017"}, {"body": "attribute controls initial state need use instead", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "designed type navigation need stacklike navigation library going part core", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "e first please write issue correctly people help solve problem quickly seems right", "d": "6/2017"}, {"body": "need use function make work fixed markup issue case want take look consider using forum gitter stackoverflow question get faster feedback", "d": "6/2017"}, {"body": "makes sense whatsoever want use method reaction click event", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "use virtual list solution renders visible something solves use case", "d": "6/2017"}, {"body": "really need convert string use vueserverrenderer really recommend use virtual scrolling list", "d": "6/2017"}, {"body": "posva use vueserverrenderer nt compile webpack works server check virtual scroller showed see good enough", "d": "6/2017"}, {"body": "virtual scroller requires element height order prevent display glitches case chat messages also vueserverrenderer wo nt work close ticket find idea interesting", "d": "6/2017"}, {"body": "want directly generate real dom nt see need even go vue rendering pipeline use plain html string concatenation would give control better performance possible implement virtual scrolling handle dynamic height currently solid vue implementation yet still consider problem dealt userland rather core", "d": "6/2017"}, {"body": "expected vue nt create copies data info", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "try async component dynamic import require", "d": "6/2017"}, {"body": "think expected behavior explicitly specify types prop casting would performed consistent stateful components declare prop implicit type", "d": "6/2017"}, {"body": "thanks raising however suggest posting forums gitter instead issue list reserved potentially actionable items vue", "d": "6/2017"}, {"body": "thanks vvpvvp need provide minimal reproduction us look could create github repo reproduce", "d": "6/2017"}, {"body": "link really nt helpful please try provide actual reproduction", "d": "6/2017"}, {"body": "got problem scoped slot ok works", "d": "6/2017"}, {"body": "sunslaven please provide reproduction scoped slots related specs passing ca nt really tell wrong without repro", "d": "6/2017"}, {"body": "sorry problems testi proved nothing version", "d": "6/2017"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "6/2017"}, {"body": "think looking", "d": "6/2017"}, {"body": "use directive updated link", "d": "6/2017"}, {"body": "commented issue behaviour incosistent quite weird using fixes issue", "d": "6/2017"}, {"body": "type usage wontfix works wiping away preexisting content completely new nodes however use bindings vue attempt diff text nodes likely made sync browsers handlesplit text nodes completely unpredictable", "d": "6/2017"}, {"body": "confirmed trick thanks", "d": "6/2017"}, {"body": "autumnwoodberry updated fiddle use shuffle array bug still reproduce", "d": "6/2017"}, {"body": "wrong notice nt actually click button make happen original array starts items bug happen", "d": "6/2017"}, {"body": "autumnwoodberry thank point updated description fiddle", "d": "6/2017"}, {"body": "thanks case like use key could refer docs", "d": "6/2017"}, {"body": "although pr may solve problem better use string number type value key attributes using plain object implement map structure inside vue native object treat object type value key another object automatically convert string", "d": "6/2017"}, {"body": "recall correctly always literal thought added docs", "d": "6/2017"}, {"body": "defcc posva type restrict prop mentioned docs however nonprimitive necessary sometimes property object", "d": "6/2017"}, {"body": "reason nt support object keys performance diffing part code extremely perfsensitive extra memory allocation vs object key lookup negligible add warning nonprimitive keys probably using native map solve problem less perf hit would make vue behavior inconsistent depending browser support likely supported future version longer supported nt really seen case object keys absolutely necessary cases make sure objects ids create somewhat inconvenient nt think worth perf tradeoff", "d": "6/2017"}, {"body": "thank explanations documentation yet mention though", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "hello issue closed conform issue requirements please use issue helper create issue thank", "d": "6/2017"}, {"body": "expected children overwritten", "d": "6/2017"}, {"body": "nt think dealing vue issue chromefirefox throttling timers inactive tabs simply reduce ramcpu usage ca nt rely settimeout running every x second want solution problem rather simple pause animation user leaves another tab restart comes back fixed example", "d": "6/2017"}, {"body": "makes sense thanks lot quick response still got ta ask anything checking transition classes already exsist change occurs regarldess whether transitionendanimationend fired", "d": "6/2017"}, {"body": "expected behaviour documented guide note objects arrays javascript passed reference prop array object mutating object array inside child affect parent state much intentional sense would want allow twoway flexibility inevitable otherwise would clone object passed prop would come host new problems like performance memory impacts", "d": "6/2017"}, {"body": "info yes vue follows semver stated anywhere personally consider default library open issue docs repo instead please thanks", "d": "6/2017"}, {"body": "allright thanks think good know since vue didnt cheers", "d": "6/2017"}, {"body": "looks like bin actually using update latest version odd change event firing nt", "d": "6/2017"}, {"body": "nt think change website reproduce vue vuetemplatecompiler dev actually found problem clicking reset button setting value empty quote since option value vmodel ca nt match option available dom set thistest undefined workaround put first select dirty works nt know really issue feel fre tell change way handle select", "d": "6/2017"}, {"body": "dup intended possible option exist variable set", "d": "6/2017"}, {"body": "sure solves async component transitions new vue likely bug code repo still exhibits transition outin bug incoming component nt wait fade complete note using named async component transition bug demo", "d": "6/2017"}, {"body": "indeed still failing repro transition starts right away clingor said", "d": "6/2017"}, {"body": "posva looks like version contain fix code", "d": "6/2017"}, {"body": "fix released yet closed issues patch lands branch might public release yet contains single fix memory leak higher priority", "d": "6/2017"}, {"body": "bad saw commit release thought strange would release notes anyway", "d": "6/2017"}, {"body": "sorry misunderstanding thank confirming issue", "d": "6/2017"}, {"body": "curious ca nt template contain multiple nodes become avoid nested single div reasoning pick element want root ca nt solved", "d": "6/2017"}, {"body": "larryu thanks sometimes want use wrapper elements posiblle", "d": "6/2017"}, {"body": "seems problem edge applying property elements open bug report tracker may limitation tables", "d": "6/2017"}, {"body": "address needs still interested concretedetailed usage example concrete mean problem solve project rainfore also provide examples kind plugins think written", "d": "6/2017"}, {"body": "cxhtml team planning create ide vue support editing single component ui library even webapp project simple demo final result following steps handling template necessary editing vue file compile template ast remove original events component add attributes events ast workspace nt want trigger original events modify ast easier modify template render function generate render function modified ast trigger hot reload update living component saving vue file get working ast restore events ast maybe user add remove events attributes regenerate template ast write file issue pr pushed really need api generate render function directly ast template maybe solution better thought hoping get advice btw according also need function like postcss", "d": "6/2017"}, {"body": "discussion find using plugin pattern expose ast nt address needs either reason simple time generate render function means compile method plugin options ast always generated parse method need modify ast object obtain compile method pass generate method get render func addition digging compilercodegen source code directly use ast api compilefromast proposed ast object modified like xxprocessed attributes added arrayshift method used generate method called means next time call generate method render function may generated expected wonder possible make generate method pure function matter many times call generate ast like parse method hmm also expose parseoptimizegenerate method plugin options rainfore mention", "d": "6/2017"}, {"body": "cxhtml mentioned pr nt address needs completely close pull request present", "d": "6/2017"}, {"body": "question though easiest way fork pull request yes", "d": "6/2017"}, {"body": "would like resolve first contribution project", "d": "6/2017"}, {"body": "ryzokuken already opened pr", "d": "6/2017"}, {"body": "okay look someplace else get acquainted source thanks thu jun pm jk notifications githubcom wrote ryzokuken already opened pr receiving mentioned reply email directly view github mute thread", "d": "6/2017"}, {"body": "import elcol elementuipackagescolsrccol \u548c components elcol \u5c31\u89e3\u51b3\u4e86", "d": "6/2017"}, {"body": "modifier parsed template compiling support modifier support parse modifier runtime imo good", "d": "6/2017"}, {"body": "tried create directive code link working sample jsfiddle link work fine native events described question p nt know add support vuecreated custom events though maybe someone point right direction", "d": "6/2017"}, {"body": "maybe try pug like vue", "d": "6/2017"}, {"body": "also interested specific case nt granular components however several pages need different layouts currently solving using appearanceonly components op states imports stuff like etc well nothing template composition done child components inside vuerouter configuration topdown approach major drawback though results god object router configuration defines entire composition application instead modular components could inherit certain aspects parents eg template imported components", "d": "6/2017"}, {"body": "hey folks wanted let know ran issue pulled hair hours trying figure test case using resolves odd use first place wonder might issue virtualdom implementation edit discovered switching ti breaks something else particular use case user starts typing update state activate mode order change ui via binding problem seems user starts typing enters edit mode discards typed beforehand assumedly nt updated cell state updated another piece state dom diff reset node current state replacing user typed nogo issue reopened post new one even simpler test case", "d": "6/2017"}, {"body": "kingwl sure working finally got around using component properties button component nested editor component receiving provided properties even verify props editor component yet showing functional component context", "d": "6/2017"}, {"body": "alidcastano working please open dedicated issue proper reproduction", "d": "6/2017"}, {"body": "\u5b57\u7b26\u4e32\u62fc\u63a5\u76f8\u6bd4 nuxt", "d": "6/2017"}, {"body": "ran similar issue sgehrman specifically receiving warning despite knowing sure component question mutating property adding issue experienced case anyone stumbles onto page similar problem may may root cause op issue using electron example solution project creating component publish npm added subdirectory host demo component github pages directory subproject scaffolded believe setup somehow resulted separate vue instances referred one component project root fix subproject instead installing vue dependency alias root component eg generated webpack template although solution specific nested scaffolded project general idea might apply widely perhaps ie nested installations probably bundlers like avoided replaced alias single suspected underlying cause investigating problem point prop mutation detected flag true point called false checks prop mutation inspecting call stack chrome devtools revealed separate sources used hence inconsistent issue rather sloppy setup hopefully helps someone else also thanks team hard work developing easily best fe framework ever", "d": "6/2017"}, {"body": "lucafraser found solution case issue", "d": "6/2017"}, {"body": "grimpa unfortunately", "d": "6/2017"}, {"body": "passing string number prop need bind pass number", "d": "6/2017"}, {"body": "lucafraser reading problem seems vue version version coerce removed use minutes seconds keep days hour solution data return mathtrunc new date gettime hope help cheers", "d": "6/2017"}, {"body": "problem could fix", "d": "6/2017"}, {"body": "antixrist dear antixrist think good idea component child component also component looks like want use props control parent", "d": "6/2017"}, {"body": "gebilaoxiong nope child component take prop control parent emit event parent component decides change state children aware state modal component example component data flow broken still manage transitions outside component although documentation says otherwise confirmed posva vue provides transition wrapper component allowing add enteringleaving transitions element component following contexts conditional rendering using vif conditional display using vshow dynamic components component root nodes", "d": "6/2017"}, {"body": "snapeuh issue os x works adding duration eg", "d": "6/2017"}, {"body": "surmonchina find tricky way use external vue component use nuxtjs serverside rendering already test follow nuxtjs doc modify project config use component js processbrowserbuild var swiper swiperslide require vueawesomeswiper components set swiper swiper swiperslide swiperslide get error clientside rendered virtual dom tree matching serverrendered content need use async component swiper gt promiseresolve swiper swiperslide gt promiseresolve swiperslide however always best choice improve component solution hack way usage", "d": "6/2017"}, {"body": "funkylover", "d": "6/2017"}, {"body": "surmonchina know already update say trick post make custom component fit ssr without modification component", "d": "6/2017"}, {"body": "would suggest adding modifier none well following idea capture keys pressed without ctrl shif alt meta pressed export default methods logonlyleftcmd consolelog left pressed logallleftcmd consolelog left pressed without modifiers", "d": "6/2017"}, {"body": "stumbled upon would follow behaviour right however documented well good enough maybe pr docs would suited", "d": "6/2017"}, {"body": "someone wrote article", "d": "6/2017"}, {"body": "fyi think issue simply usagesupport question possible duplicate visjs issue", "d": "6/2017"}, {"body": "wimrijnders looked issue analysis correct short recommended put complex objects prototypal inheritance vue option making reactive moving correct solution", "d": "6/2017"}, {"body": "thank much confirmation really really appreciate use close several issues running good understanding maintainers projects truly hope understanding til always cooperative maintainers made day little better good one", "d": "6/2017"}, {"body": "agree cybai flexible calculating style", "d": "6/2017"}, {"body": "thank responding presently longer bound old browser makes darn good experience framework keep good work smile", "d": "6/2017"}, {"body": "vue vuerouter div vue vue \u518d\u6bd4\u5982\u8fd9\u91cc\u7684 vhtml template", "d": "6/2017"}, {"body": "linusborg write want margintop paddingtop try paddingtop nt works please help", "d": "6/2017"}, {"body": "work see", "d": "6/2017"}, {"body": "akryum know status issue seems like limbo months anything help move along", "d": "6/2017"}, {"body": "ping blakenewman", "d": "6/2017"}, {"body": "using laravel mix dependency older somehow lock file nt consistent updated laravel mix lock file fixed error disappeared using laravel mix look another dependency try reinstall update", "d": "6/2017"}, {"body": "solved problem try reinstall", "d": "6/2017"}, {"body": "worked", "d": "6/2017"}, {"body": "another simple solution would use attributes reference element access template rendered template javascript note check compatibility otherwise use jquery library extract hope helps", "d": "6/2017"}, {"body": "using vue realized following use camelcase html prop work fine although documentation suggests kebabcase problem use webpack uglifyplugin minify bundle camelcase props lead errors bug pretty nasty think camelcase forbidden general htmlprops", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "custom modifiers simple radio input truefalse values evaluate strings need boolean computed properties smart case since need reimplement computed property every radio input eg radio inputs result computed properties", "d": "6/2017"}, {"body": "chrisvfritz meet problem simplify", "d": "6/2017"}, {"body": "solved problem wrapping logic changehandler always access updated values another solution could watcher property", "d": "6/2017"}, {"body": "block work days believe vue issue", "d": "6/2017"}, {"body": "took find correct use share html itemid itemname", "d": "6/2017"}, {"body": "deal custom defineradialgradient component template generating different svg gradients main component camel modifier work attributes case sensitive tags problem rendered browser lowercase like suggestion avoid error ps also added ignore vue components list", "d": "6/2017"}, {"body": "anyone script freeze latest version iphone siri browser pop execute urgent needed", "d": "6/2017"}, {"body": "suppose using arrayfrom inside computed function best friend disappointed", "d": "6/2017"}, {"body": "yeah think vue ca nt transformed use classes get left wayside within year two reading thread learning nt plans people contributing vue development think classes bad idea code base considering obvious direction javascript internet whole glad nt invested much time vue fact many frameworks created solve issues serious javascript development postjitc era js yet caught javascript evolving lot debate consideration dismiss strange looks like frameworks least trying keep react lot things mentioned props etc yet manages use classes happier react allow custom elements rather jsx eh guess ca nt everything maybe polymer real future hard say seems forward compatible", "d": "6/2017"}, {"body": "sjcalamia nothing classes per se others nt well far speak point currently lack two things good argument making public api internally already use classes many places available form class extend besides classes future javascript oop language wo nt become one pseudo classes one available options comes excapsulating objects behaviour simply doubt everyone turn everything class futureproof example arguably one biggest important libs ecosystem classbased sign becoming obsolete reason concerning vue nt seen arguments thread elsewhere arguing vue api class inherent advantages brings except indeed important point typing systems like typscript work better classes hence existance good proposal convert api vue something works classes nice syntax nt require es next features said nice syntax since api nt seem existbe feasible current js standard one vue goals work browser without buildsystem currently nt see realistic way make class api available however things one day along good arguments later major version vue might introduce class api totally possible since mentioned react class api without problems seen also discussed length also react smaller api surface since lacking reactivity system brings watchers computed props need declare props etc react nt run problems detailed previous replies anyway already seem made mind seen future us good luck framework choose react would great choice course", "d": "6/2017"}, {"body": "real issue class built discarded exchange proxy object could provide class sets watchers props etc constructor getters setters devs could simply extend class instead use protected data access actual thing built instead pseudothing provide instead", "d": "6/2017"}, {"body": "also js oop even prototyped instead derived classes js code deals literal objects methods properties supports polymorphism encapsulation inheritance albeit sugar syntax", "d": "6/2017"}, {"body": "sjcalamia case nt realize thread already years old since vue left wayside within year two nt use classes already irrelevant however vue seen exponential growth past years despite lack classes continuing get mindshare something must wrong world think class inheritance ui components oop ui components actually good idea probably also disappointed use react classbased api nt mean encourages even plays nice oop react functional composition core devs explicitly suggest class inheritance level deep experience building uis functional composition mixinstraits based systems much flexible suitable ui components oop trying shoehorn whole oop dogma onto ui components like trying hit screws hammer used hammer easier read matter familiarity practical benefit classbased apis friendly typechecking even argument soon moot vue enhanced type definitions ts contextual typing welcome disagree please constructive fashion actually giving concrete examples classes better future", "d": "6/2017"}, {"body": "keeping vue component definition asis reasons evan outlined right fit features component definition needs said wild idea need get case still someone radar component definition could look like javascript class myvuecomponent extends vue static functional false static el app static template message static components static mixins static model prop value event input render h return h div thismessage initialize component data data return message hello vuejs get computedproperty return thismessage lifecycle hooks beforecreate created beforemount mounted beforeupdate updated activated deactivated beforedestroy destroyed watchers set datamessage value previousvalue consolelog message changed previousvalue value methods somemethod param return new promise resolve gt settimeout resolve quite exotic idea huge fan littered throughout maybe someday someone somewhere could make webpack loader babel plugin convert notation proper vue component definition", "d": "6/2017"}, {"body": "even argument soon moot vue enhanced type definitions ooohh ooh ooh using flow explaining vueconf maybe anytime sooner scott", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "yes exploring quasar framework awesome", "d": "6/2017"}, {"body": "using quasar latest project lead developer committed project actively involved projects community worth mentioning next version days away many new features", "d": "6/2017"}, {"body": "sorry necro feel like better explanation error message thrown know happening spent hours today minutes duck debugging colleague find nt taking data view", "d": "6/2017"}, {"body": "hello want option achieve one sample getting bind dom function call vfor error oops data found checkifdeleted axiosget gt return resstatus", "d": "6/2017"}, {"body": "\u8bd5\u8bd5consoledir", "d": "6/2017"}, {"body": "still really unclear thisbest practices vue loading stripe js client inside component want accessible anywhere within component nt need available globally though would ok best option following code well numerous variations nt work", "d": "6/2017"}, {"body": "ended getting work sure better way though", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "got chrome still issue", "d": "6/2017"}, {"body": "nt still issue open issue repro take look", "d": "6/2017"}, {"body": "element nt", "d": "6/2017"}, {"body": "right linusborg thought getting error", "d": "6/2017"}, {"body": "sorry tag clearly spent much time writing js forgetting html", "d": "6/2017"}, {"body": "triggering specific animation demand feature like similar usecase element could simply supply class remove animation least nt control class lifetime strange vue goes great length support something like flip method implement custom triggers", "d": "6/2017"}, {"body": "problem knocking head desk hour implement workaround semanticui dropdown tomorrow suspect need trumbowyg ace use heavily application well semanticui form elements suspect underlying issue regardless input type onchange events happen response user actions setting value programmatically since thirdparty controls using store state nt manually trigger event nothing vue watch alas guess wait semanticui everyone else vue things", "d": "6/2017"}, {"body": "sent pr suggested addition documentation", "d": "6/2017"}, {"body": "input textbox would like new data event fired", "d": "6/2017"}, {"body": "debounce callback function", "d": "6/2017"}, {"body": "caution bind context using method may want apply context", "d": "6/2017"}, {"body": "", "d": "6/2017"}, {"body": "current vuejs default webpack templates support css preloaders almost outofbox need relevant entries already wonder could done typescript one start writing typescriptbased components extra changes webpack config even letting typescriptbased components coexist babelbased ones quite close achieve objective experiments local project still need rename entry point changing loaded way configure webpack entry point could loaded individual typescriptbased files loaded", "d": "6/2017"}, {"body": "real troublesome find solution possible add notes documentation suggestion section example todo list list rendering", "d": "6/2017"}, {"body": "wondering went nightwatchjs tests currently looking alternatives main motivation around developmentspeed ca nt seem get anything done reasonable amount time things like repl missing hacks using development worth sharing", "d": "6/2017"}]