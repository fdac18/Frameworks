[{"title": "standardize prop dom attribute process", "body": "right inconsistencies requires cognitive load exception nt think ever reason allow sort type prop dom otherwise put false dom put object object still want special case indicate empty value otherwise ensure call object could custom person object want nt terriblely hard fix want make sure test change thoroughly breaking change specific cases mostly forms also need communicate clearly tangentially inconsistent way types work children example nt child false text need something children due fact use objects arrays special indicators mapping", "num": "302", "d": "8/2013"}, {"title": "remove reactautobind real", "body": "deprecated make sure remove", "num": "301", "d": "8/2013"}, {"title": "select receiving click event correctly", "body": "behavior chrome nothing safari works upon menu dismissal therefore item selection since triggers dismissal although reason triggered fade animation rather immediately firefox works clicking select clicking option menu dismissal mobile safari works clicking select option opera oh man works clicking option menu dismissal latter focus drop lost regained ie triggers every click menu upon openingdismissing dropdown way browser inconsistency react fault", "num": "300", "d": "8/2013"}, {"title": "react", "body": "correctness release biggest changes fixes controlled forms spicyj amp chenglou working also dom props missing cherrypicking following update prs commits land property allow fix behavior property tag properties fix textarea number fix controlled radio button behavior", "num": "299", "d": "8/2013"}, {"title": "dom attribute supported", "body": "react page use hack support tag", "num": "292", "d": "8/2013"}, {"title": "inpage anchor navigation documentation", "body": "", "num": "290", "d": "8/2013"}, {"title": "declarative api installing global dom event handlers", "body": "reminded one thing sometimes wanted install handler window keyboard shortcuts right since react listening already would nice way intercept events addition receiving normalized synthetic events generally useful", "num": "285", "d": "8/2013"}, {"title": "imperative api installing dom event handlers", "body": "currently react allows installing event handler dom events declarative fashion via component attributes time component instantiation think nice allows automatically uninstall handlers case component disposal implementing lowlevel machinery think would useful allow handlers installed component instantiation arbitrary moments would allow installing event handler mixin corresponding uninstall event handler callback example currently use jquery trapping clicks anchors invoking pushstate api instead letting browser reload page componentdidmount function thisgetdomnode clickreactroute function e epreventdefault invoke pushstate api componentwillunmount function thisgetdomnode clickreactroute problem able use goodies provided react event plugins want instead handle click events react event system install handler callback extract functionality mixin something like handleclick function e check event target anchor invoke pushstate api componentdidmount function thisaddeventlistener eventtypesonclick thishandleclick componentwillunmount function thisremoveeventlistener eventtypesonclick thishandleclick though maybe names verbose examples include handling focusblur arrow key clicks control focus inside component", "num": "284", "d": "8/2013"}, {"title": "make onchange work contenteditable", "body": "apparently nt would pretty awesome already listen nt think terrible tangentially would great stop using mutation events switch observers let though unless dovetails really nicely interested spicyj", "num": "278", "d": "8/2013"}, {"title": "safari error", "body": "getting following running react app safari probs chrome firefox typeerror undefined function evaluating regexpprototypetestbind dataaria az azd admittedly old mac old safari possible using outdated version webkit something react amazing thank", "num": "273", "d": "8/2013"}, {"title": "generate docs using jsdoc something", "body": "tried consistent documenting react core using markdown style comments jsdoc style annotations would easy create utility autogenerates documentation pages core ideally would rely nodejsnpm java using good first bug label rename label good first contribution", "num": "272", "d": "8/2013"}, {"title": "react support content security policy", "body": "react currently incompatible sites enable content security policy uncaught evalerror refused evaluate string javascript unsafeeval allowed source script following content security policy directive defaultsrc self quick testing appears one place react currently preforming evaluation string oneoff easy enough fix single pull request gladly submit however uneasy deploying react cspenabled site without bit integration testing understanding whether csp incompatibility issues even qualify bugs official stance reactcontentsecuritypolicy", "num": "271", "d": "8/2013"}, {"title": "bind null work autobound methods partial application", "body": "currently complains context nt equal seems like okay", "num": "266", "d": "8/2013"}, {"title": "thisforceupdate etc nt autobound", "body": "someone get confused sure make significant performance impact", "num": "265", "d": "8/2013"}, {"title": "rowspan attribute appear dom", "body": "set dom component output first pr", "num": "264", "d": "8/2013"}, {"title": "data aria accept capital letters", "body": "jsfiddle first third child divs wo nt render attributes nt attributes using camelcase seems consistent anecdotal actually attempted use dataformid first trying dataformid find bug", "num": "260", "d": "8/2013"}, {"title": "inconsistent form input behavior diff rendering", "body": "jsfiddle removing second row works removing first one leaves us wrong input field value checkbox state assigning key form works think behavior without using key least predictable textarea select fiddle try select first row option remove selected row state carries onto next select edit fiddle died sorry", "num": "259", "d": "8/2013"}, {"title": "defaultvalue number shown text fieldarea", "body": "text field input wo nt show anything numbers course inconsistent also value behavior show applies textarea", "num": "257", "d": "8/2013"}, {"title": "confused keys dynamic arrays requirement", "body": "see warning add keys typically id associated model subsequently update state key seems like component passed even though data model changed confusion make sense try package simple example seems like similar things trying helper function returns array jsx components put render return stmt seems like examples work nt need specify explicit keys loving speed btw migrating little hobby project ember react things literally night day terms performance awesome work", "num": "256", "d": "8/2013"}, {"title": "consider warning using wrong case html attribute", "body": "like current behavior opaque sort confusing people", "num": "255", "d": "8/2013"}, {"title": "old jsfiddle links docs", "body": "point jsfiddles using old version react", "num": "253", "d": "8/2013"}, {"title": "select working", "body": "works expected", "num": "250", "d": "8/2013"}, {"title": "confusing results using controlled form component onkeyup", "body": "coworker says making controlled component works onchange big gotcha thought would work onkeyup sure much help least make docs clearer", "num": "248", "d": "8/2013"}, {"title": "support autocapitalize", "body": "came nonstandard useful least ios", "num": "247", "d": "8/2013"}, {"body": "dropped support browser ig polyfills make work internally documented use documentation really sketchy random place explicitly list browsers need zpao want", "d": "8/2013"}, {"body": "awesome maybe react could detect top script output note", "d": "8/2013"}, {"body": "yea probably call browsers much possible docs basically wiki page copied less sketchy place according available latest safari branch gt work probably include polyfills docs site ig support decisions still feel pretty strongly keep polyfills detection polyfills needed react could better job calling need though docs", "d": "8/2013"}, {"body": "makes total sense apologies checking docs thoroughly", "d": "8/2013"}, {"body": "problem honestly easy find fault turns still broken polyfill definitely reopen try hunt going", "d": "8/2013"}, {"body": "ca nt tell quite mean issue proposing turns string everything string nt null goes practice people currently seem like another solution could work strings leave alone numbers cast string booleans null undefined empty value objects throw error exception throwing error objects matches current behavior think", "d": "8/2013"}, {"body": "please add fixing tables", "d": "8/2013"}, {"body": "particular children addedremoved browsers autoinsert messing reconciliation", "d": "8/2013"}, {"body": "need fix sort put list please file issue broken fiddle track always put need", "d": "8/2013"}, {"body": "issue nested ps tables fiddle attached already", "d": "8/2013"}, {"body": "yes wanted well talked adding maybe event fires every component would bubble", "d": "8/2013"}, {"body": "encountered case talked adding maybe onwindowresize event fires every component would bubble fires every component makes sense bubble", "d": "8/2013"}, {"body": "interesting definitely solves real problem agree awkward mix event handling systems bet jordwalke thoughts thinking would work top level component returned render events type occur component inside one jquery code targets specific would want machinery react well", "d": "8/2013"}, {"body": "thinking addremoveeventlistener would work top level component returned render events type occur component inside one expect behaviour attached event handler via corresponding property specific case via property event bubbles able observe events types occur component inside specified component jquery code targets specific would want machinery react well interesting question guess need go event bubbling path code check contains anchor think jquery implements right sure though react", "d": "8/2013"}, {"body": "maybe nt know anything contenteditable", "d": "8/2013"}, {"body": "fair enough let us know end working", "d": "8/2013"}, {"body": "thanks kind words safari based would seem nt supported safari could try polyfilling report back would really helpful nt access safari may need polyfills check section", "d": "8/2013"}, {"body": "polyfill tests phantomjs nt support either could polyfill time tests seem byop bring polyfills attitude builtin methods", "d": "8/2013"}, {"body": "every use basically javadoc nodebased seems best option however run bunch issues would require pass code make sure right syntax everywhere eventually list nt time go everything basically need somebody step done anybody interested let know", "d": "8/2013"}, {"body": "oneoff nt actually fix needs fix global wrapped module strict mode actually returning need line code works environment serverside workerthread browser gives us global global benjamn thoughts ways go honestly nt stance reactcsp yet nt worried yet csp usage rises nt want random breakages becomes especially important people using cdn hosted version absolutely needed could stick react host control", "d": "8/2013"}, {"body": "spicyj pointed irc uses appear dom event code may easier get rid thought need figure future plans make sure wo nt end needing would nt want become compatible incompatible", "d": "8/2013"}, {"body": "work use camelcase version attributes consistency dom interface already opened warn using wrong case since lots people get confused", "d": "8/2013"}, {"body": "oh thanks await resolution long term adjust code short term", "d": "8/2013"}, {"body": "sorry ericclemmons could tried pass missing attributes notice anything missing feel free open issue pr", "d": "8/2013"}, {"body": "oh totally looks like camelcased missing submit pr", "d": "8/2013"}, {"body": "oops saw colspan naively assumed rowspan would", "d": "8/2013"}, {"body": "ericclemmons still interested fixing", "d": "8/2013"}, {"body": "closing", "d": "8/2013"}, {"body": "exact thing seems like something would done intentionally check might dom quirk quirky spec working around", "d": "8/2013"}, {"body": "ah actually part spec data attributes silently enforce", "d": "8/2013"}, {"body": "hah nt know makes sense keep way react datasomething would confusing interpret want drop note docs jsx gotchas reference btw really think dom differences placed somewhere else took find", "d": "8/2013"}, {"body": "warn uppercase data attributes wed aug pm cheng lou notifications githubcom wrote hah nt know want drop note docs jsx gotchas reference btw really think dom differences placed somewhere else took find reply email directly view github", "d": "8/2013"}, {"body": "ah looks like could possibly inputs fact sets add data attribute see actually left input value got overwritten nt check bet case fiddle said edge cases reconciliation ended prop let get jordwalke sebmarkbage weigh think might throw use fix bucket", "d": "8/2013"}, {"body": "confirmed second case case fine assigning keys fact temporarypermanent solution sure shove fixing key conceptually speaking think people impression including mine assigning keys fixes natural problem keeping components around obvious change children countorder next render squashes eg search results mentioned docs case behavior across similar components render differs unpredictable leaves impression quirk framework happens solvable elegantly using another concept overriding input text input checkbox never intended behavior never mind let say nice better consistent behavior", "d": "8/2013"}, {"body": "case behavior across similar components render differs unpredictable leaves impression quirk framework happens solvable elegantly using another concept overriding input text input checkbox never intended behavior agree consistent behavior best tell quick check actually checkboxes nt change using instead actually testing different things use get behavior text inputs also agree unexpected something spend time figuring right answer might something fix form components", "d": "8/2013"}, {"body": "argh right sorry nt bother looking ahem select bug neglects second case", "d": "8/2013"}, {"body": "indeed defaultvalue causing strange behavior used controlled form components changing input props would change actual value user could still change value react would nt reset long prop nt change implementation different changing defaultvalue wo nt cause input value ever change read component instantiation easy way get old behavior assumed intentional old behavior kind confusing guess new one given issue think proper solution say defaultvalue sort hack using controlled components preferred whenever possible", "d": "8/2013"}, {"body": "agreed must falsey check needs smarter", "d": "8/2013"}, {"body": "one line think", "d": "8/2013"}, {"body": "thumbsup", "d": "8/2013"}, {"body": "fixed", "d": "8/2013"}, {"body": "curious mean passed could please construct simple jsfiddle reproduces confusing behavior thanks", "d": "8/2013"}, {"body": "hey jordaan thanks resolved one issue setting initial state prop never subsequently updating initial state thanks help", "d": "8/2013"}, {"body": "yeah general react wo nt anything nt tell remember conversation outcome react practical magical", "d": "8/2013"}, {"body": "great suggestion could warn attribute recognized could imagine might lead bunch errors", "d": "8/2013"}, {"body": "think vjeux updated jsfiddle morning", "d": "8/2013"}, {"body": "yup vjeux updated yesterday evening unless looking different links", "d": "8/2013"}, {"body": "could give brief example", "d": "8/2013"}, {"body": "sorry go replacing makes type", "d": "8/2013"}, {"body": "thanks spicyj cc yungsters", "d": "8/2013"}, {"body": "lack better place put fiddle spoke spicyj irc issues radios rendered react radios rendered outside react edge case nt think needs handled partly might way browsers even detect arbitrary property gets set simple way deal involves maintaining list instantiated react radio inputs whenever one radio input value changes look radio inputs scope appropriate scope mean inputs within form inside form", "d": "8/2013"}, {"body": "yea pretty awkward since pretty dumb string transforms preserve line numbers going pretty long term goal get ast ast transforms sourcemaps pretty code generation something like escodegen could least better comma style short term", "d": "8/2013"}, {"body": "cc jeffmo zpao", "d": "8/2013"}, {"body": "determined root cause many failures older version node however really get npm module", "d": "8/2013"}, {"body": "jeffmo made last week changes transform code coming internally ready full sync get us updated", "d": "8/2013"}, {"body": "relevent moves things use esprimafb npm module", "d": "8/2013"}, {"body": "going close feel free ask questions irc google group", "d": "8/2013"}, {"body": "regard including dot allowed character tag name right approach parser intent javascript member expression represented ast parsing must done ast interpreted valid identifier even intended meaning intended meaning member expression vs front locks us namespacing meaning nested objects restricts option value future scenarios might want implement namespace resolution ways nested modules barring significantly compelling arguments going bad guy say correct punctuator used want move forward feature", "d": "8/2013"}, {"body": "note also nt feel terribly strongly need feature done futurefriendly way willing take pull request", "d": "8/2013"}, {"body": "really sure could clarify dot locking us nested objects nested objects tag names implemented using colon locks colon meaning way would lock dot meaning analogical nt please let understand given implementing nested objects member expression still think right solution closing", "d": "8/2013"}, {"body": "clear nt suggesting parse colon delimiters member expressions parse kind namespace structure syntax tree interpreted freely compiler used parsed member expression got member expression deal pretty much forever changing means rough backward compatibility parsed generically compiled something member expression might nonintuitive unfamiliar readers code reader thought process would go something like well clearly valid xml looks like js member expression assume compiles member expression lookup component whereas less semantically tied particular output result terms namespacing means still valid xml good readers code familiar xml defined however see fit particular application easily parameterizable jsx compiler default something reasonable like member expression", "d": "8/2013"}, {"body": "case parametrizable namespaces right nt amount time would take implement conditional member expression parsing tests cli switch reactrails config amp tests top head", "d": "8/2013"}, {"body": "using colon separator conventionally locks single level namespacing looks odd perhaps allowing tag name supplied expression would provide flexibility desired would allow even complex tag expressions expressed clearly eg", "d": "8/2013"}, {"body": "lrowe possible represent arbitrarily deep number nested namespaces turns true regardless namespacing delimiter issue would deviate established xml convention would look closely like member expression may always want namespaced components compile", "d": "8/2013"}, {"body": "lrowe already want using temporary variable follows var view appregisteredviews objitemtype var view objitemtype special specialview defaultview also enables add children otherwise issue unclear put end tag", "d": "8/2013"}, {"body": "lrowe thanks contributing discussion opted stick camelcasing current plan warn get prop dom component nt recognize follow along", "d": "8/2013"}, {"body": "looked bit seems reason broken entities seem work fine look", "d": "8/2013"}, {"body": "would like see accept variants either object key value could look like setstate function key value callback var partialstate typeof key string string anything fn partialstate partialstate key value else object fn partialstate key callback value nt know two sets arguments function acceptable style react definitely used quite bit js world acceptable another problem arises document renders nicely documentation", "d": "8/2013"}, {"body": "think fixed right zpao yungsters", "d": "8/2013"}, {"body": "closing favor", "d": "8/2013"}, {"body": "concerns guessing still issue though sure often people hitting think another option would simply restrict single call certain points lifecycle count invariants needed reset right times make sense", "d": "8/2013"}, {"body": "hear think fine close nt heard anyone actually getting confused", "d": "8/2013"}, {"body": "one issue updating thisstate even though nt flushed accordingly system react consistent example accepts influenced returns answer take account take account change think talked adding method times really want flush though nt get performance benefit diff", "d": "8/2013"}, {"body": "tables still broken react", "d": "8/2013"}, {"body": "came ago let know still issues", "d": "8/2013"}, {"body": "nt want keep duplicated issues opened sumup jeffmo said makes sense implement namespacing using colons optin configdefined option one possibilities would member expression nt enough time implement way closed issue amp jeffmo final comment general", "d": "8/2013"}]