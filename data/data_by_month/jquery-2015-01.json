[{"title": "fix event delegation selectornative", "body": "event delegation started using sizzle seed handling scoped matches broke event delegation selectornative replaced sizzle worse comes worse defer matchesselector eat scope issue", "num": "2048", "d": "1/2015"}, {"title": "simplification native method signatures", "body": "prime candidates moment third argument branch second argument branches see", "num": "2047", "d": "1/2015"}, {"title": "release remove npm publish tag beta nonpre releases", "body": "coming release changes", "num": "2046", "d": "1/2015"}, {"title": "release ensure version packagejson changed", "body": "coming release changes", "num": "2045", "d": "1/2015"}, {"title": "alias jqueryclone", "body": "hi make alias found already secret undocumented function used two times code easily modify think", "num": "2044", "d": "1/2015"}, {"title": "elemis visible calls native webkitmatchesselector", "body": "yesterday spent time profiling effect shown article live myelp page profiling interesting things two specific jquery called jquery handler seems slow one punt another ticket closer look stack method looking total stack accounts full time cpu including js recalc paint etc effect certainly trivial still strikes odd first place nt think would ever want native qsa matchesselector handle sort call would", "num": "2042", "d": "1/2015"}, {"title": "issue return sizzleattr", "body": "get issue return message error version line error idea", "num": "2040", "d": "1/2015"}, {"title": "feature request parse url querystring", "body": "sure alone dozens questions asking parse url querystring jquery lot answers nt accept multi valued keys keys without values eg end repeating code several projects think could included jquery core", "num": "2037", "d": "1/2015"}, {"title": "css minheight fails cssdisplayproperty set table", "body": "jqueryversion browser os modernie virtualmachine div want read minheight maxheight minwidth maxwidth cssstyleproperties css function jquery works well basicly define div table display table get reasonable values back anymore happens google chrome mac firefox mac safari mac problem example", "num": "2035", "d": "1/2015"}, {"title": "ajax type first parameter", "body": "another overloaded version ajax function ajax type url settings type post etc", "num": "2034", "d": "1/2015"}, {"title": "ajax load page fragment xhtml gives error doctypexml declaration", "body": "trying load page fragment xhtml document fails giving syntaxerror invalid illegal string specified least firefox happ ens latest versions happens xhtml document xml declaration doctype think regular html file doctype also fail removed xhtml fragment loaded correctly changing lines buildfragment function problem goes away fix works versions change tmpinnerhtml wrap elemreplace rxhtmltag wrap regex first removes processing instructions second doctype var rprocessinginstructions lt w gt gi var rdoctype gt gi tmpinnerhtml wrap elemreplace rxhtmltag replace rdoctype replace rprocessinginstructions wrap", "num": "2025", "d": "1/2015"}, {"title": "svg loaded file fadeout fadein loses properties", "body": "observed strange behaviour", "num": "2024", "d": "1/2015"}, {"title": "document references prs issues", "body": "referring github tickets prs use common gh notation github tickets prs want avoid using notatation entirely commits issues avoid confusion two trackers avoid github accidentally linking refs old tracker meeting week discussed using notation commits either use short notation full url ref", "num": "2019", "d": "1/2015"}, {"title": "remove singlepromiseable exception jquerywhen", "body": "single deferred passed promise object subset deferred methods returned consistency always create new master deferred follow library complicated needs result upcoming major version bump chance unify single multipleargument calls agree valuable", "num": "2018", "d": "1/2015"}, {"title": "webbased chat", "body": "btw guess github replacement jquerymeeting channel huh hipchat seems good many alternatives use gitter jsdelivr public amp private nice nice linking github amp markdown handy eats cpu though", "num": "2017", "d": "1/2015"}, {"title": "css vendor prefix error", "body": "css automaticly add vendor prefixes firstly call css function prefixes styles autoadding break run example safari", "num": "2015", "d": "1/2015"}, {"title": "descendant selector event handlers called unexpected order", "body": "according event handlers bound element called order bound however two event handlers bound element one bound descendant selector handler descendant selector always fires first regardless order bound example tested jquery", "num": "2014", "d": "1/2015"}, {"title": "progress nt fire resolved promises", "body": "suppose deferred object try set handlers progress objects works expected progress handlers fire try set progress handlers resolved deferred result different first handler fire problem tuples order tuple come last therefor newdefernotify called newdefer already resolved nt accept notifying bug similar slightly different", "num": "2013", "d": "1/2015"}, {"title": "evalurl nt contentsecuritypolicy csp compatible", "body": "using html html string contains script tag fetches script source xhr evals expect instead insert script tag dom let browser handle csp policy inserting script tag referencing js file works evaling source nt test case ran test case using chrome observed behavior jquery attempts eval source causes csp violation refused evaluate string javascript unsafeeval allowed source script following content security policy directive scriptsrc self noncefoo codejquerycom desired behavior script node source attribute inserted dom browser executes self allowed scriptsrc csp policy know possible script external src like script tag gets inserted instead xhreval thing presumably sameorigin policy wo nt allow xhr examplecom", "num": "2012", "d": "1/2015"}, {"title": "pipe nt forward progress alreadyresolved deferred", "body": "analogous cause solution new promise never sees progress called", "num": "2010", "d": "1/2015"}, {"title": "drop event dragevent well", "body": "fixed missed also per list complete looks like omission", "num": "2009", "d": "1/2015"}, {"title": "jquery selector find empty inputs working", "body": "affected jquery version code find empty inputs consider case form blank inputs input typetext value css bordercolor red found code working fine jquery seems work expected set border color empty inputs current behaviour fails find empty inputs", "num": "2008", "d": "1/2015"}, {"title": "jquery load ajax follow redirect crossdomain chrome", "body": "site hosted one domain write iis return redirect static content another domain something like wwwxxxcomindextxt redirect use jquery code like bodyload wwwxxxcomindextxt could redirect load properly firefox chrome", "num": "2007", "d": "1/2015"}, {"title": "add tests namespaced tags", "body": "like etc see discussion info cc", "num": "2006", "d": "1/2015"}, {"title": "improve tag name related regexes", "body": "see discussion related pull specifically comment", "num": "2005", "d": "1/2015"}, {"title": "fndata issue", "body": "typeerror thisfirequeryshared undefined logoevents data", "num": "2004", "d": "1/2015"}, {"title": "simplification manipulation wrappers", "body": "talking remove wrappers element effectively removing entirely remove wrappers since needed pr tomorrow", "num": "2002", "d": "1/2015"}, {"title": "resize event fired certain situations internet explorer", "body": "reproduce use internet explorer newer emulating multiple ie hacks etc used windows vmware unsure os matters open javascript console necessary bug occur demo uses consolelog show wrong clear cache view either test page large image page loading resize browser window text logged resize listener however ready ready lines printed surround call add resize listener confirm adding listener executed page assets fully loaded future resize events fire fine ones missed simply lost image finishes loading everything works expected plainhtml resize triggered conditions either think case jquery shimming spot needs demo links jquery jquery demo code", "num": "2001", "d": "1/2015"}, {"title": "simulate external servers nodejsjavascript instead php", "body": "allow us set tear server grunt track dependencies packagejson requires reimplementing php scripts probably hopefully also establishing mechanism communicating listening port qunit", "num": "1999", "d": "1/2015"}, {"title": "parsehtml return null", "body": "behaviour since version version like propose changing method documented taking string html returning array return null nonstring input fair empty strings probably return empty array maybe array empty text node", "num": "1997", "d": "1/2015"}, {"title": "nt test patch requests working browsers ie", "body": "browserstack frequent recurring problems patch requests working proxy since special logic request type browsers ie might well skip patch test browsers testswarm", "num": "1994", "d": "1/2015"}, {"title": "datauri append", "body": "test sometimes fails iosopera attach link next time see", "num": "1993", "d": "1/2015"}, {"title": "jquery ajax fire success origin non cors requests internet explorer", "body": "internet explorer issues load event xmlhttprequest jquery relies order call success callback workaround revert back listening onreadystatechange", "num": "1992", "d": "1/2015"}, {"title": "locking memoryless callbacks aborts current execution", "body": "note aborts active execution unless memory flag set arguably design seems purpose method preventing effects future interruption properly provided stoponfalse flag probably gone unnoticed lack use internal callbacks memory nonetheless would breaking fix called major version bump code assertion fails", "num": "1990", "d": "1/2015"}, {"title": "singlefire callbacks report initially locked", "body": "note flag breaks code assertion fails", "num": "1989", "d": "1/2015"}, {"title": "core issue creating dashdelimited nodes", "body": "jquery fails cases create dashdelimited notes javascript works fine creates element create element since documentcreateelement works fine documentcreateelement trd reported first", "num": "1987", "d": "1/2015"}, {"title": "support passing urldata object post get", "body": "spent yet another minutes helping someone debug issue generates post request foo reason course signature method correct signature problem accept things former format oh easy forget course jquery standard allow configuration objects places course make mistake difficult figure going still generate post request current page object object parameter making question sanity must spent days years debugging helping others debug feature request post get please support passing configuration object first parameter passing object least generate hint might going", "num": "1986", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "reason done stable releases", "d": "1/2015"}, {"body": "still", "d": "1/2015"}, {"body": "reason latest release newer latest beta user likes bleeding edge uses get latest release discussed ago added explicitly purpose", "d": "1/2015"}, {"body": "ah see missed conversation beta release guess fine case", "d": "1/2015"}, {"body": "would confusing two methods named different things new proposed method nt saving lot typing either unlike dom clone objects ca nt support magic might occur constructor copies properties call making clear since starting plain object", "d": "1/2015"}, {"body": "nt think two different things foreach dom collection foreach basic array think intuitive understand cloning dom elements cloning basic objectsarray agree best saving typing year coherence code think better read instead user cloning something also right constructor etc think nobody expect comportement example underscorejs thing", "d": "1/2015"}, {"body": "example great one fneach implemented using would case vs would clone different types objects different semantics case easily plugin like name", "d": "1/2015"}, {"body": "nt try parse selector js run native method native method throws exception try parsing way could know avoid would parse string would penalize people use standard selectors talks strongly recommend selectors besides jquery custom selectors take sizzle path rejected native methods also force layout dirty time easily trackable classes docs warn well", "d": "1/2015"}, {"body": "talks strongly recommend visible hidden selectors great wikipedia new visual editor tremendous amount app slowness directly attributable using baaad anyway moving native method throws exception try parsing see case obviously invalid selectors better even go patch bouncing exception follow total time column end matchesselector returning exception thing everytime overhead throw extra regex test along two going submillisecond timescale since already running two regex string overall vm overhead minimal", "d": "1/2015"}, {"body": "pull timmywil maybe could quick regex look obvious offenders discussing issue irc perhaps move things like really slow custom selectors jquery migrate course brings sizzle questions well", "d": "1/2015"}, {"body": "suggestion essentially match custom pseudos would save legitimate uses force false positives eg slow words net win however identifying trick given extension mechanism property assignment object containing matchers standard pseudos removing custom pseudos standard builds see core would mourn loss although last one essentially impossible add back without knowledge undocumented effects internals may also want look jquery ui", "d": "1/2015"}, {"body": "little surprised takes long webkitmatchesselector parse selector determine whether invalid wonder improved natively", "d": "1/2015"}, {"body": "please provide test case", "d": "1/2015"}, {"body": "thanks opening issue think best place start would jquery irc channel stackoverflowcom", "d": "1/2015"}, {"body": "ok timmywil thanks", "d": "1/2015"}, {"body": "maybe embedding something like argjs good idea", "d": "1/2015"}, {"body": "pretty simple plugin look size argjs definitely would nt want increase size jquery much something already solution available need", "d": "1/2015"}, {"body": "seems little hard never know url type url parameter leagacy jquery lt", "d": "1/2015"}, {"body": "zhanhb mean url version ajax obsolete", "d": "1/2015"}, {"body": "zhanhb type amp url strings settings object", "d": "1/2015"}, {"body": "first parameter url ajax url settings source code line main method ajax function url options", "d": "1/2015"}, {"body": "deprecated", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "reason add another signature nt simplify usage", "d": "1/2015"}, {"body": "provide complete example sounds like may attempting load complete document including doctype using read docs load warning related", "d": "1/2015"}, {"body": "uploaded test simple xhtml strict validated buttons load html load fragment simple html file validated load fragment works load html doctype load fragment html strict file validated load fragment fails load xhtml load fragment xhtml strict file validated load fragment fails looked docs linked nt saw warning", "d": "1/2015"}, {"body": "mentioned indirectly jquery uses browser innerhtml property parse retrieved document insert current document probably figure host xhtml document restrictive handle doctype markup afraid issue much edgecase us handle", "d": "1/2015"}, {"body": "warning state tags lost html title added document document wont loaded browser fail load fragment validated htmlxhtml documents still think fixed nt seem hard make valid htmlxhtml documents work well least", "d": "1/2015"}, {"body": "want load full xml document would nt load xml pick part document want inject trying inject whole thing", "d": "1/2015"}, {"body": "fawzibr warning state tags lost html title nt talk part meant jquery uses browser innerhtml dmethvin trying inject whole thing think expects work", "d": "1/2015"}, {"body": "oh well convinced browsers tend sloppy plain old html try make sense even clear decided choose xhtml document type expect sloppy parsing instead specific want happen test case seems want sloppy throw away anything inconvenient part thing browser unwilling throw away doctype wants jquery remove rest sloppy", "d": "1/2015"}, {"body": "jquery html dom library stuff happens work svg main goal harm long nt use jquery manipulate svg alone difficult two mixed single document see wo nt fix page said diagnose problem fix simple enough would consider", "d": "1/2015"}, {"body": "sure thing read wo nt fix actually easy fix code animate opacity worries thank instant reply", "d": "1/2015"}, {"body": "line items issue closed acting notification sounds good", "d": "1/2015"}, {"body": "linking tickets gh issues discussions like cleanliness notation although link markdown trac links commits lean towards full urls since unambiguous really sure write agree others see happen harder break rules whether read", "d": "1/2015"}, {"body": "agree makes sense create new deferred rather borrow first one good well", "d": "1/2015"}, {"body": "read correctly reusing original object ensuring always resolves array currently idempotent meaning resolve string matter number calls making less complicated needs would mean would become forget using handling inputs may may deferredpromise would effectively change change mean obfuscatecomplicate resolve value process actual solution another utility would used arrays explicitly", "d": "1/2015"}, {"body": "want accept kind thenable standard promise think want handle case create new always creating new one seems like best way go consistency predictability think changing array case would lot visible breaking separate api might best way document confusion people trying call array", "d": "1/2015"}, {"body": "want accept kind thenable standard promise think want handle thenable case create new deferred always creating new one seems like best way go consistency predictability perfectly right", "d": "1/2015"}, {"body": "fact double request shame sounds like agreement always creating new deferred bit correctly identified jaubourg going halfcocked yet another inconsistency api currently idempotent single arguments multipleargument case behaves entirely differently incongruity chafing moment resolve string matter number calls making less complicated needs would mean would become forget using handling inputs may may deferredpromise would effectively change change mean obfuscatecomplicate resolve value process let stop mixing cast operation operation nt even know primary function though ticket implicitly assumes latter suggestion another utility would used arrays explicitly implicitly assumes former maybe ca nt even stop could certainly pave way providing distinct functions eg", "d": "1/2015"}, {"body": "currently idempotent single arguments multipleargument case behaves entirely differently incongruity chafing moment wikipedia idempotence property certain operations mathematics computer science applied multiple times without changing result beyond initial application case point js var output outputdone function b c amp amp b amp amp c output done function b c amp amp b amp amp c pretty consistent ask nt idempotent would following nt think desirable lot people want toy arrays deferreds confusing say let create whatever wan na call let stop mixing cast operation operation nt even know primary function arguments treated exactly like returned values handler js string done function string string string mirrors resolveddeferredthen function return string done function string string string var deferred deferred resolve string deferred done function string string string mirrors var deferred deferred resolve string resolveddeferredthen function return deferred done function string string string fact manner speaking behaves like handler would return multiple values hence give multiple resolution arguments nt really get confusion consistent", "d": "1/2015"}, {"body": "going die hill resolved keep current interfaces analogous analogous update description covers eliminating reuse single input deferred", "d": "1/2015"}, {"body": "nah one time exceptional nt really intention meeting think still like irc also nice docs community infrastructure irc", "d": "1/2015"}, {"body": "thanks opening issue wo nt moving away irc anytime soon thoroughly integrated every jquery project", "d": "1/2015"}, {"body": "yes trying safari via browserstack agree failing problem seems explicitly set vendorprefixed property style safari starts responding property totally bizarre someone else verify see happening well nt know something fix reason nt let us prefixes", "d": "1/2015"}, {"body": "bug caused find neither original style property prefixed one return original one saved line linked first setter checks first since safari recognizes neither saved later try set something cached maps obviously wo nt work fix", "d": "1/2015"}, {"body": "expected behavior term one bound descendant selector means delegated event order stop propagation delegated event delegation point handlers descendants must run directly bound events element think delegated event bound selector point case conceptually event handled bubbling think way event order seems clear suggestions clarify documentation could open issue suggested wording docs repo", "d": "1/2015"}, {"body": "think dup let make final call would say may work near future make strictly promisea compatible need use deferredspecific methods nt decided best practice would good expect standard behavior standard names", "d": "1/2015"}, {"body": "extremely similar quite duplicate homm would like submit pr code new tests straightforward", "d": "1/2015"}, {"body": "thanks report fixed need wait jquery meantime could check make sure works fine scenario closing reopen still nt work", "d": "1/2015"}, {"body": "jquerygit nt work difference inline script used instead eval ie used", "d": "1/2015"}, {"body": "actually ticket would fix plan land big breaking change right run scripts synchronously come domain sure effect might world", "d": "1/2015"}, {"body": "wrote code probably hopelessly naive break something else makes work patch diff git asrcmanipulationevalurljs bsrcmanipulationevalurljs index asrcmanipulationevalurljs bsrcmanipulationevalurljs define function jquery jqueryevalurl function url return jqueryajax url url type get datatype script cache true async false global false throws true var documentcreateelement script ssrc url documentbodyappendchild return jqueryevalurl", "d": "1/2015"}, {"body": "ah right dmethvin guess stay closed since already", "d": "1/2015"}, {"body": "think track yeah", "d": "1/2015"}, {"body": "sounds like trying use selector get current property rather attribute lacking example guess please ask help stackoverflow", "d": "1/2015"}, {"body": "thanks dave attention scenario want select inputs value want achieve using selector way find elements version code working yes want check current value instead value attribute thing working gives inputs whose current value empty", "d": "1/2015"}, {"body": "code actually broken value property represents current value value attribute try instead", "d": "1/2015"}, {"body": "sounds like version chrome use could create jsfiddle example even try native xhr", "d": "1/2015"}, {"body": "used chrome like said fix think related fail xml", "d": "1/2015"}, {"body": "could please provide code example", "d": "1/2015"}, {"body": "leonardobraga interested providing fix", "d": "1/2015"}, {"body": "marklog yes definitely work pr asap", "d": "1/2015"}, {"body": "please ask help forums stack overflow also seem issue firequery plugin jquery", "d": "1/2015"}, {"body": "would definitely like see done", "d": "1/2015"}, {"body": "plainhtml resize triggered conditions either case jquery detect simulate event pretty rare case perhaps workaround app desperately needs would use timer check size window manually trigger event", "d": "1/2015"}, {"body": "given reported case nt think something work around core", "d": "1/2015"}, {"body": "complication testswarm requires ability execute tests previous commit current one otherwise would done long time ago krinkle info", "d": "1/2015"}, {"body": "move away testswarm suggested infra team browserstacktunnel karma candidates replacement requires good amount time least karma preference", "d": "1/2015"}, {"body": "intern looks like option well", "d": "1/2015"}, {"body": "intern offers qunit support impression framework cc csnover", "d": "1/2015"}, {"body": "could certainly load qunit wanted heard people dumping mocha kind inception since comes quite robust unit testing builtin actually got mostlyworking branch full qunit api compatible interface small amount work address todos probably day two work able drop existing qunit tests intern wrapping work fingers crossed convince team qunit come amp help get cool new stuff intern quickly well prior recent qunit release slightly outdated easy update since could see qunit update adding features intern already easy map", "d": "1/2015"}, {"body": "brain dump assumption dynamic server would autostarted grunt uses automatic port choosing order run concurrently services computer eg projects developers run locally well concurrent builds jenkins alternatively block migrating travis ci port clash andor pick unique ports git branch git repo long testswarm used unless okay ajax tests running testswarm ca nt entry points automatically served common installations apache nginx hence php used server set grunt wo nt exist time testswarm distributes test urls browserstack test urls point notsostatic static web server serving build artefacts jenkins jobs upto days unique subdirectories htmljscss php served nginx also reran testswarm point future within days even remove rerun feature testswarm qunit would still know hostname port server url would publicly exposed browserstack though course would nt issue using ssh tunnel browserstack sure feasible current testswarmbrowserstack setup", "d": "1/2015"}, {"body": "purposes ci generally opposed local development testswarm particular imagine still use stable servers buildsjenkinsjquerycomjquery build urls defer gruntmanaged nodejs servers dynamic responses many ways skin cat one example inbound request build url php handler verifies corresponding port known spawns build checks output little discover suitable failure handling perhaps kill spawned process respond php gets responses forwarding request port suitable failuretoconnect handling perhaps decrement available tries replay original request grunt task leverages gruntcontribconnect possibly also nodeproperlockfile something like js connect alreadyrunning server listening port specified runfile tryconnecting function tryconnecting try port fsreadfilesync runfile req port port invalid function consolelog server running port port catch err trystarting err function trystarting err consolewarn errmessage lock runfile use lockfilelock runfile consider existing locks stale seconds stale", "d": "1/2015"}, {"body": "since summoned already seeing replies would also point dojo core jsgi server mock services set intern test suite need much work could take code adapt use used thing jquery php test scripts used testing dojo io code services directory", "d": "1/2015"}, {"body": "testcase", "d": "1/2015"}, {"body": "like empty array idea would behavior parsing natively nt affect", "d": "1/2015"}, {"body": "empty textnode would inconsistent browser behaviour empty array seems like nice solution", "d": "1/2015"}, {"body": "related", "d": "1/2015"}, {"body": "fixed", "d": "1/2015"}, {"body": "one example", "d": "1/2015"}, {"body": "safari seems fail lot", "d": "1/2015"}, {"body": "ca nt seems repo could try fate propose fly blind increase timeout", "d": "1/2015"}, {"body": "ca nt reproduce locally happens time time testswarm seems require enough large sample enough us hit since test much try increasing timeout see happens nt like control test fully", "d": "1/2015"}, {"body": "nt like control test fully yeah cc dmethvin", "d": "1/2015"}, {"body": "commited moment gon na close fix verified", "d": "1/2015"}, {"body": "seems timeout increase help committing", "d": "1/2015"}, {"body": "cc jaubourg", "d": "1/2015"}, {"body": "judging conversation ticket issue hard reproduce also ca nt see problem could please post link jquerycode shows bug", "d": "1/2015"}, {"body": "definitely want repro solution rare case requires going back polling easiest solution would use jquery compat case local file access via xhr example", "d": "1/2015"}, {"body": "looks like issue websites use protection mechanism overrides xml internet explorer identifies internet explorer later sorry mess", "d": "1/2015"}, {"body": "would page valid html tag name since hyphen considered custom element custom elements part web components characters could used tag name custom elements described xml specification like also included class fully support custom elements need add tests names characters discussion could deferred let dmethvin answer apart looks like real usecase real bug two problems particular case first regexp second one one commit mentioned ticket would resolve case even fails check still works since nt feel need wrap special parent tag would like send us pr", "d": "1/2015"}, {"body": "would like send us pr preferable two commits one core one manipulation module nt forget read feeling", "d": "1/2015"}, {"body": "thanks instructions yes like submit pr clear fair issue initially reported patched gkalpak angularjs repo happened bumped time tried share load", "d": "1/2015"}, {"body": "even clear fair elaijuh first reported angularjs repo submitted pr angularjs richardaday leonardobraga glad sharing load since familiar jquery contributing conventions smiley seems like whole lot people involved onecharacter addition laughing cool", "d": "1/2015"}, {"body": "cool see thanks helping", "d": "1/2015"}, {"body": "know version going included sorry familiar jquery release process", "d": "1/2015"}, {"body": "know version going included", "d": "1/2015"}, {"body": "frustrating", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "ah dreaded post pretty easy recognize agreement warning help people nt already made mistake times", "d": "1/2015"}, {"body": "really wish nt shortcut methods make things worse pretend nt exist also use stubs code ensure called going start checking args runtime spewing console warnings period take look code shortcut methods see much code takes make accept object much could consider", "d": "1/2015"}, {"body": "get argument existing usually wrap ajax facade really point long stuff exists people keep using incorrectly wasting many hours debugging accident take saying pr considered", "d": "1/2015"}, {"body": "", "d": "1/2015"}, {"body": "yes sure include unit tests also stop annoying guys", "d": "1/2015"}, {"body": "stop", "d": "1/2015"}, {"body": "provide timeline need pr next week able land next version also need updates docs get post adding new signature seems like several people want see happen hope pitch docs pr probably get need docs entry", "d": "1/2015"}, {"body": "yeah trying ca nt seem get async tests passing reliably always get failing tests needing constantly restart php asking around jquerydev seems like people issues well suppose guys aware testing infrastructure mess recommendation workflow type thing", "d": "1/2015"}, {"body": "gmauer either ignore errors need create full setup proper apache serwer builtin php one limitations sometimes hit edge cases setup links readme project automating elegant solution would switch server running node may require lot effort judging many php tests may happen soon", "d": "1/2015"}, {"body": "togakangaroo close random tests failing go ahead pull request wish test infra robust people get mocking tricky parts ajax particular ca nt mocked often need test workarounds obscure xhr bugs like", "d": "1/2015"}, {"body": "togakangaroo yeah builtin php web server little underpowered apache amp nginx work well official jquery docs recommend installing lmw amp development computer personally using vagrant vm nginx mzgol switching node server would awesome ticket", "d": "1/2015"}, {"body": "mzgol switching node server would awesome ticket nt believe nt really discussed seriously due effort needed", "d": "1/2015"}, {"body": "created", "d": "1/2015"}, {"body": "think difficulty getting environment running jquery development absolutely stopper people contributing saying following order complain hopefully help team see pain points could addressed also complain bit mostly js net developer working windows done php ages ago know linux basics far comfortzone installing php run tests annoying enough install figure apache setup definitely would given moment hours pr ultimately changes two lines code coincidentally catching right people irc way would known special incantation even ajax module getting frequent nondeterministic test failures ultimately comment tests able test specific feature addition found read source lot testing infrastructure clear use things like parameter next fan build tools building jquery breeze however testing testing matter starting php one terminal another terminal directing browser right page figuring options necessary get right files load use unminified example would seem like grunt least start server open right page correct configurations run tests headless browser fullon also note still nt able get documentation vm running attempt api vm get error need xmlsoft windows means installing virtually unknown piece software even chocolatey package manager maintained single developer machine run work vms something comfortable working setting vm inside try deploy vagrant vm running issues vagrant vm wo nt finish starting debug order continue realize house cards would seem order enable contributions people php space also happen know use nodegrunt significant amount effort could justified even solution package single vm tools necessary develop jquery built", "d": "1/2015"}, {"body": "togakangaroo develop windows try installing wamp", "d": "1/2015"}, {"body": "togakangaroo thank writing getting started stable setup hard part hazed hope stay around continue contribute maybe even help us solve issues definitely think process harder since need actually test bunch real browsers never easy make things worse need real server talk send back specific requests test browser fixes ajax patches inside jquery sometimes even configuration web server becomes issue issues moving tests apache nginx past work windows well wamp definitely way go along msysgit share troubles docs vm well moment nt working setup either put together untested suggestions docs pull request take rest way", "d": "1/2015"}, {"body": "simplifying test setup discussed", "d": "1/2015"}, {"body": "spec changed see makes sure decision jump ship implement support selectors available one browser would nt like need support obsolete versions api made something like available need support", "d": "1/2015"}, {"body": "fixed merge latest sizzle", "d": "1/2015"}, {"body": "dmethvin yes working using text insteand html makes sense think still issue usng html nt behavior browsers nt remember exactly try digg issue", "d": "1/2015"}, {"body": "devantoine saying set inside script tag html seems wrong nt usually script nonhtml content inside script tag even htmllike would nt want parsed placed tag nt think need ensure works consistently across browsers document used", "d": "1/2015"}, {"body": "dmethvin right seems good", "d": "1/2015"}, {"body": "moved", "d": "1/2015"}, {"body": "back sorry guys confusions nothing uglifier using webview ipad uses file uri scheme reading jquery docs says type data expecting back server none specified jquery try infer based mime type response mime type response file uri scheme hence problem", "d": "1/2015"}, {"body": "patch fixes dragstart drag dragend dragover dragenter dragleave however fix drop event admit regexpert adjustment fixes", "d": "1/2015"}, {"body": "gtristan thanks note new issue created", "d": "1/2015"}, {"body": "nt fixed", "d": "1/2015"}, {"body": "ref", "d": "1/2015"}, {"body": "markelog recall issues encountered problem maybe remembering wrong", "d": "1/2015"}, {"body": "long time ago bit busy today refresh memory tomorrow", "d": "1/2015"}, {"body": "talking breaking changes nt look like one special behavior exactly nt understand related references creation recall markelog trying remove early days jquery involve probably thinking according spec always present true implementation autoinserted table created html serialization declared html property regardless content present created dom methods used otherwise improperly render according spec could ommited autoinserted table tags modern browsers create html serialization empty table behave according specification specific content dommethods created regardless content even opera ff behave way creation nessary empty table statically created property used basically ca nt use node environments longer use directly tables even true method codepath could safely removed", "d": "1/2015"}, {"body": "tbody creation nessary empty table statically created innerhtml property used basically ca nt use innerhtml node environments bit info", "d": "1/2015"}, {"body": "worth noting selectors api spec explicitly mentions support xhtml well html note script operates dom works independently syntax used create document thus script also work correctly equivalent table created wellformed xhtml instead html dynamically created inserted document using dom apis sure browser coverage though seem remember long ago using style attributes js fine strict xhtml running compatibility problems real problem elements generated jquery xhtml host document generated pretty sure change little detecting namespace switching generated elements anything going significant amount work going testing", "d": "1/2015"}, {"body": "assign clear list unassigned issues need wait npm changes anyway", "d": "1/2015"}, {"body": "done using npm", "d": "1/2015"}, {"body": "javascript elemcreateshadowroot var rect elemgetboundingclientrect disconnected hidden rectheight amp amp rectwidth return box box rect else make sure disconnected dom node jquerycontains docelem elem return box box elemgetboundingclientrect another way fix issue method need traversation tree detect element disconnected nothing disconnected nodes returns always zeroes also returns zeroes hidden elements element hidden disconnected return zeroes visible tree anywhere tree return real box one problem hidden elements jquery currently returns box disconnected elements returns always know artifact useful someone uses probably might break compatibility anyway leave alternative solution", "d": "1/2015"}, {"body": "also far see tests behavior think method break compatibility even drop condition execute always first part", "d": "1/2015"}, {"body": "possible could use something like solution nekr proposes docs offset specifically say nt work hidden elements", "d": "1/2015"}, {"body": "dmethvin case code simplified", "d": "1/2015"}, {"body": "think point missing ever simple nazarpc indicates case check whether disconnected dom node exist first place workaround browsers longer needed optimisation step prevent needless call potentially expensive function former sure latter think performance", "d": "1/2015"}, {"body": "thanks phpstorm integrates git found code started", "d": "1/2015"}, {"body": "question becomes bug still affect browsers supported jquery seems like fairly decent solution offset sure whether solution would work issues reported working elements shadow dom though would ostensibly function uses jquerycontains method filtering disconnected nodes think", "d": "1/2015"}, {"body": "actually ticket nazarpc references seems indicate trying support return value topleft disconnected elements change preserve", "d": "1/2015"}, {"body": "anything uses native functions work fine like without redundant check work even faster need check usages every particular case determine whether need many cases might replaced native dmethvin gives really big overhead handle disconnected nodes especially shadowdom support maybe performance consideration number elements dom tree shadowdom might much bigger drop support edge case opinion worth especially new major version also break wellwritten code something wrong getting offset disconnected node", "d": "1/2015"}, {"body": "also break wellwritten code something wrong getting offset disconnected node agree completely problem people write bad code time sometimes accident cases like quietly return values make seem like everything okay would preferred ticket closed getting offset element document update docs state valid possible though code depends zero return values concerned opinions", "d": "1/2015"}, {"body": "api perspective best behavior would throw offset meaningless eg truly disconnected elements nonelements documentation perspective best behavior would exclude elements range valid input case return value unspecified allowed crossversioncrossbranch inconsistent good anything else perfectly content nekr proposal provided nt introduce inconsistency handling shadow dom elements edit added examples meaningless input", "d": "1/2015"}, {"body": "well guys chromium native support shadowdom stuff guess outputs clientrect height width left bottom right firefox nightly guess output domrect x width height top right bottom left need check anything already gives correct zeros problem comes used returning value disconnected nodes independently whether inside shadowdom likely browser need call whatever else finally pretty straightforward sure nt way beginning think", "d": "1/2015"}, {"body": "moreover check falsy mdn states called document makes sense call cases check redundant", "d": "1/2015"}, {"body": "dmethvin wrote actually ticket nazarpc references seems indicate trying support return value topleft disconnected elements change preserve ticket removes scroll positions disconnected nodes hidden nodes use getboundingclientrect also remove scroll positions hidden nodes seems correct hidden elements always zeroes nazarpc wrote well guys chromium native support shadowdom stuff guess get comment mean attached visible nodes always returns zeroes strange chrome works correctly summarize work shadowdom expect match nodes shadowdom work expected least chrome returns zeroes top left bottom right hidden disconnected element regardless node shadow light dom nazarpc wrote problem comes var docelem elemownerdocumentdocumentelement used returning value undefined disconnected nodes independently whether inside shadowdom likely browser need call contains whatever else finally works nice way sure disconnected nodes really disconnected anyone test", "d": "1/2015"}, {"body": "get comment mean attached visible nodes always returns zeroes strange chrome works correctly example next line see returns zeros disconnected node anyone test jquery support old browser meant compat version", "d": "1/2015"}, {"body": "example next line see returns zeros disconnected node oh yes overlooked sorry exactly proposed use without traversing dom tree works jquery support old browser meant compat version really know version talk seems like versions broken shadowdom fixed wrong please correct", "d": "1/2015"}, {"body": "apiwise jquery jquery compat difference browsers support odd one course want api work consistent results latest chrome site using either branch definitely needs experimenting done calling disconnected element throws error sure whether tree climb expensive trycatch wrapper really dislike trycatch though", "d": "1/2015"}, {"body": "honestly prefer throwing error instead returning inaccurate could abandon disconnected elements excluded valid input", "d": "1/2015"}, {"body": "making small steps resolve issue branch fork github already showed download soon winxp virtual machine test things find correct solution mean time tests fails without changes screenshot errors ok errors honestly prefer throwing error instead returning inaccurate top left could abandon disconnected elements excluded valid input hmm think might broke compatibility since jquery never throwed errors", "d": "1/2015"}, {"body": "unfortunately run tests even checkout compat branch tested case property exists even disconnected nodes may see use condition uses useragent shadowdom excludes older browsers called disconnected nodes questions make pull request right need discuss merged compat branch fix compat branch merging course write tests need tests shadowdom disconnectedhidden elements make sure always return top left rect", "d": "1/2015"}, {"body": "hmm think might broke compatibility since jquery never throwed errors nt violate currentlydocumented api already includes jquery support getting offset coordinates hidden elements even case backwardsincompatible changes allowed upcoming major version bump nt like conflation unrelated behaviors make pull request right need discuss please make pull request discussion take place merged compat branch fix compat branch merging general guideline separate pr required solution looks sufficiently different two branches cherrypick impractical ticket one enough course write tests need tests shadowdom disconnectedhidden elements make sure always return top left rect depends whether want guarantee return values limit new tests shadow dom", "d": "1/2015"}, {"body": "tests shadowdom fork", "d": "1/2015"}, {"body": "nt violate currentlydocumented api already includes jquery support getting offset coordinates hidden elements even case backwardsincompatible changes allowed upcoming major version bump ok problem wondered possible problems think much problem probably ok answers pr", "d": "1/2015"}, {"body": "hmm nt think necessary deferred simply hard dependency coreready deferred removed custom build coreready could easily add gruntfile making custom builds usually also accustomed placing scripts end body making coreready wasted space maybe docs issue instead", "d": "1/2015"}, {"body": "pretty important api nt think go away someone nt want also thought still cases putting scripts end body nt enough think might remember case", "d": "1/2015"}, {"body": "used think conversation ago turned sufficient also deferred important api used internally areas besides coreready coreready probably least important", "d": "1/2015"}, {"body": "think limitation large document probably prefer start downloading script immediately still defer browser download parse dom parallel case doc ready still play role case script loads document ready think script loaders often covered", "d": "1/2015"}, {"body": "ah conversation thinking overlaps nt remember finding evidence putting scripts end body would nt work", "d": "1/2015"}, {"body": "know think already gone side sorry brain dump notifications could useful users question handle lack native promise certain environments", "d": "1/2015"}, {"body": "recently used divide support tests two parts one nt require attaching anything document invoked start one invoked doc ready therefore use jquery earlier aka latest run code doc ready risk stumbling upon bugs one linked timmywil thread second part support tests lazy elements attached documentdocumentelement happen anytime attached documentbody results documentbody exists fine put scripts end body bothers depend coreready consume via amd get deferred pulled automatically requirejs later builder course determined relying coreready longer necessary importance fact decreases thinking exclude defered coreready youre required provide windowpromise approach blow people using amd modules use ajax animate deferred use coreready micha\u0142 go\u0142\u0119biowski", "d": "1/2015"}, {"body": "think reasonable focus dependency reduction master compat deferred missing something simple like convert would nt need maintain queue browser maintain fifo order handlers throw exceptions nt affect subsequent ones moment undocumented stated intention document thenable specifically consistency behavior edge cases think best use deferred docs tell anyone custom build without need provide shim", "d": "1/2015"}, {"body": "would nt break usage event occurred", "d": "1/2015"}, {"body": "current ready module already plumbing handle although might complicated", "d": "1/2015"}, {"body": "closing lack information anyone thinks jqueryrelated jqueryfixable please post info", "d": "1/2015"}, {"body": "split separate issues tackle", "d": "1/2015"}, {"body": "documentation element said positioned css position attribute relative absolute fixed least method behave means would behaviour change code sizespeed issue worried well make offsetparent always climb tree element ignore dom offsetparent property need look nonnone transform webkittransform property method climb tree probably special cases anticipated plus appears open issues spec looks like nobodies decided sounds horrible possible dirty workaround perf byte size hit since spec incomplete stuck code logic nt want whereas fix user side sounds like pretty easy thing add transform node although understand might easy least always crucial third party libraries use jquery like library semantic ui need determine correct offsetparent using contexts library use algorithm offsetparent search although given proposed logic hard call method since would deviate spec significantly", "d": "1/2015"}, {"body": "practical use know getting calculate values relative local coordinate system means anyone using expecting return element offsets calculated transformed parent element present currently returning value practical use developers jquery became quite ubiquitous good returning conforming values era browsers implemented specs way even though spec undecided certainly already implemented implementations vary browser try solve", "d": "1/2015"}, {"body": "call make discussion subject sure reiterate concerns spec nt ready might stack code nt want support spec nt account transformation properties related properties explicitly disregard transformation properties huge impact performance relatively big hit byte size less edge case easy fix user side errorprone implementation bzbarsky maybe could consult us correctly interpret spec would advise us go", "d": "1/2015"}, {"body": "talking massive changes untested pseudocode would imagine implemented javascript offsetparent function return thismap function var parentnode thisparentnode traversing properties much slower made test case uses levels deep nesting actually performs better machine granted actual implementation would property lookup step still seems negligible actually getting useful value back offsetparent", "d": "1/2015"}, {"body": "well yes course imagine dom tree elements deep root element others property set user would like know offsetparent still called deepest element tree current code one loop iteration code loop iteration every single parent would access css twice even could considered worst case scenario still pretty bad", "d": "1/2015"}, {"body": "markelog correct builtin offsetparentoffsetleftoffsetright affected transforms spec implementations problem generally pretty insane terms offsetparent eg compare interaction interaction pretty much block container break face subpixel layout problem highdpi displays subpixel things happen time weird stuff elements upshot browsers spec writers basically treating legacy properties nt changed way response transforms whatnot well really clear sort thing would even mean world transforms ideal world people would move away apis things like getboundingclientrectgetclientrects sort api get rects one element relative another element various proposals ca nt locate moment think advice would expose apis along lines tell people use ideally map directly browser builtin apis modern browsers", "d": "1/2015"}, {"body": "bzbarsky seem good company suggestion think difficult regards ui everything comes setting two values positioning set correctly context browser positioning context likely returned sometimes pity nt better way limited primitive positioning system css left us certainty context without bit digging javascript", "d": "1/2015"}, {"body": "hello workaround similar", "d": "1/2015"}, {"body": "problem seems obscure enough would nt attempt fix inside jquery microsoft much responsive recently introducing fixes slipstream updates nt reported directly microsoft via", "d": "1/2015"}, {"body": "miketaylr ca nt believe nt ping ca nt find existing ticket looks like firefox bug see fiddles", "d": "1/2015"}, {"body": "changes land would good time circle back see need change anything", "d": "1/2015"}, {"body": "closing ticket workaround within jquery core fixes problem focus event asynchronous ie anticipated handled application widget level see also trac", "d": "1/2015"}, {"body": "updated version current second param analogouous jqueryparsehtml js globaleval function code context context context document var script contextcreateelement script scripttext code contextheadappendchild script parentnoderemovechild script", "d": "1/2015"}, {"body": "rather leaving open potentially forever referenced roadmap reopen ever become feasible", "d": "1/2015"}, {"body": "cc rwaldron", "d": "1/2015"}, {"body": "markelog following nt activity lately", "d": "1/2015"}, {"body": "grab alright rick", "d": "1/2015"}, {"body": "timmywil sure nt much work tbh mostly deleting code paths associated tests tricky part making sure manipulation tests pass well since data tests exist also", "d": "1/2015"}, {"body": "related", "d": "1/2015"}, {"body": "trac issue referred github", "d": "1/2015"}, {"body": "resolve get bug selectornative", "d": "1/2015"}, {"body": "small problem render multiple html elements inside document node easiest way test literally make document html nodes load second way make standard html document javascript create second one memory remove original dom append new html node dom append old one render really comes lt recognizes element html css selector gt html nt valid", "d": "1/2015"}, {"body": "sorry festercluck following comment related get height body", "d": "1/2015"}, {"body": "document amp html reference point thing document nt height documentelement html node window amp body without doubt independent unfortunate thing actually makes two separate question becomes one code standard use code accuracy situations lt report different numbers numbers reporting accurate problem developer nt understand css sizing parent element nt exist say op test case one mean point understanding browsers insert node documentelement window behavior supported", "d": "1/2015"}, {"body": "unless regression apis returning values years change values returned cases probably trip existing code expects current values suspect right barring recent regression drop browser", "d": "1/2015"}, {"body": "think issue lost sufficient animus warrant leaving open", "d": "1/2015"}, {"body": "notes realizeddiscovered thinking ticket implementation write somewhere although object easily set petkaantonov describes individual event must attached via call method low level want work properly methods like cloning events new element removing listeners caller set native jquery needs maintain bookkeeping information inside object actually possible attach two handlers per event type one possible value complicates bookkeeping like use interface foundation existing event layer need define hooks called object methods like manage jquery handlers", "d": "1/2015"}, {"body": "related pr", "d": "1/2015"}, {"body": "since using eval inline scripts landing ticket longer applies", "d": "1/2015"}, {"body": "dmethvin sum idea leave asis add scroll bar width although think scottgonzalez still makes good case", "d": "1/2015"}, {"body": "actually read comment looks like okay scottgonzalez clarify agree possible break code somewhere hand ca nt think would nice expose way get dimension", "d": "1/2015"}, {"body": "related trac ticket moved github", "d": "1/2015"}, {"body": "please consider executing handler deferred one thing every promise always defer execution handlers always log hello world promise implementation jquery hand log either hello world world hello sometimes based whether promise resolved called steady source bugs developers rely order exposed race conditions think fixing mistake next major revision jquery could really help lot developers help prevent race condition related bugs", "d": "1/2015"}, {"body": "benjamingr changes bring promisea run test suite sure landing soon", "d": "1/2015"}, {"body": "dmethvin landing jquery would awesome means also address correctly huge answer promise questions stackoverflow pretty often bringing standard would help ton people think got confused issue date migrated", "d": "1/2015"}, {"body": "means also address correctly mean turn exceptions rejections rather allowing uncaught yes although working report reasonably visible way related issue opened easy programming errors lost see problem people start working promises imagine someone drops promiseheavy piece code web page written third party problem wo nt know working visible errors", "d": "1/2015"}, {"body": "bluebird pretty good job detecting unhandled rejections simple heuristic promises nt add catch handler next turn recently made survey people use bluebird hook lets determine library thinks rejection vast majority people stick default behavior log error console developer see example note bluebird track rejections stitches stack traces wraps primitives implicitly logging much bigger api etc different important considerations jquery file size might want implement debugging stuff bluebird honestly compliance huge compliance unhandled rejection handling crossing line good news interoperability able use jquery main promise implementation frontend project", "d": "1/2015"}, {"body": "fyi good amount tooling native promises asynchronous callstacks already available dedicated promises panel coming soon think worth considering using native promise impl falling back deferred code older browsers developers would end enjoyable debugging experience", "d": "1/2015"}, {"body": "removing functionality use internally native promise nt extensions goal provide standard promisea behavior implement native promise shim someone wants native promise decent debugging supported platforms want use definitely instead platforms like android die people want crossbrowser behavior use someone better plan please let us know", "d": "1/2015"}, {"body": "paulirish nonnative promise hook tooling", "d": "1/2015"}, {"body": "dmethvin guess paulirish meant use native promises available enhanceextend methods interpreted right would create two codepaths would increase size performance might suffer judging although sure matters browser envs preserve consistency routes understand reason us consider improve debug process", "d": "1/2015"}, {"body": "markelog native promises really slow still likely much much faster jquery promises least today", "d": "1/2015"}, {"body": "markelog native promises really slow still likely much much faster jquery promises pretty sure accurate currently fastest promises since nt guarantee async execution therefore nt wait next event loop iteration", "d": "1/2015"}, {"body": "markelog think might want run benchmarks fun glory also run bluebird sync zalgo build guarantee async operation bluebird petkaantonov actually wrote sync build prove performance benefits guaranteeing async execution marginal best trick instead something native like using every time want create async behavior queue pending async executions together batch next turn gnerally pretty sure bluebird least two orders magnitude faster jquery deferreds moment native promises using microtask queue probably least one order magnitude faster jquery feel free benchmark", "d": "1/2015"}, {"body": "think might want run benchmarks since imp compatable promisea need trick instead something native like using settimeout every time want create async behavior queue pending async executions together batch next turn popular trick used many promises libs still need wait next iteration gnerally pretty sure bluebird least two orders magnitude faster jquery deferreds moment see conclusion argument lead native promises using microtask queue probably least one order magnitude faster jquery would talk microtasks vs macrotasks would relevant doenst require non code nt require async execution always faster alternative feel free benchmark besides points made nt really fair compare async vs sync execution since one inherently faster", "d": "1/2015"}, {"body": "markelog try clearer point bluebird promises run circles around jquery defererds day even jquery uses sync zalgo execution model thankfully fixed bluebird promises consume less memory jquery deferred using flags less state variables closures trivial microbenchmark async execution involved bluebird defers jquery performs nothing asynhronous typical load completely synchronous code bluebird performs times faster jquery kind benchmark sync execution supposed shine nothing actually asynchronous worth even disable async deferral bluebird marginally faster", "d": "1/2015"}, {"body": "main focus interop per topic someone perf issues wants use bluebird native promise really like native promise nt think people use monolithic jquery file would appreciate weight two implementations order use solve problem decently platforms support way back android", "d": "1/2015"}, {"body": "nothing actually asynchronous tests force benchmarkjs execute tests async manner ie putting call therefore make jquery test report later really nt want argue implementation change bluebird reputation crazy optimizations considered one fastest promisea impl nt understand trying prove", "d": "1/2015"}, {"body": "btw worth even disable async deferral bluebird marginally faster nt benchmarkjs could nt give exact ops number async tests diff fall margin error type thing", "d": "1/2015"}, {"body": "dmethvin sorry helping derail conversation oleg understood going yes would require feature detect forked codepath yay jquery would likely end adding code complexity boo think jquery position kind thing mixed past users miss debugging help tools understand trivial handle otherwise markelog benjamingr carried conversation promises performance would love feedback", "d": "1/2015"}, {"body": "nt think likely get time release strictly tied release", "d": "1/2015"}]