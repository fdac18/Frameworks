[{"title": "shallow compare amp test renderer strict dependencies", "body": "using multiple libraries call various versions react react native npm tries find common compatible version everything warnings persist npm warn reactaddonsshallowcompare requires peer react none installed npm warn reacttestrenderer requires peer react none installed necessary tightly couple versions would beneficial loosen dependencies let consumer library choose version use", "num": "8468", "d": "11/2016"}, {"title": "reacttestrenderer install dependencies npm", "body": "currently using reacttestrenderer version npm version jest version running tests use reacttestrenderer seeing error find module objectassign reacttestrendererjs resolverresolvemodule object object issue npm", "num": "8466", "d": "11/2016"}, {"title": "onpaste triggered using html svg elements google chrome", "body": "following react component classes js const somesvg reactcreateclass displayname somesvg render return reactcreateelement svg null const somediv reactcreateclass displayname somediv render return reactcreateelement div tabindex style height onpaste event gt event listener triggered google chrome consolelog eventclipboarddatagetdata text reactcreateelement somesvg unable listen paste event google chrome firefox works fine interesting thing add html element content without content paste child paste event triggered checked developer tools browser paste event triggered always stopped somewhere react code svg child element svg child element html child element without content open following examples google chrome firefox comparison example working paste listener example working paste listener instructions use examples copy something clipboard click blue area focus div element paste clipboard using ctrlv see console logged", "num": "8461", "d": "11/2016"}, {"title": "reacttestrenderer componentwillunmount called inner component instance", "body": "want request feature report bug bug current behavior componentwillunmount inner instances never called jest tests first works second js import react react import renderer reacttestrenderer test top level componentwillunmount works gt let count class extends reactcomponent componentwillunmount count render return const inst renderercreate instunmount expect count toequal test inner componentwillunmount works gt let count class extends reactcomponent componentwillunmount count render return const inst renderercreate instunmount expect count toequal expected behavior two test pass component unmounted proper lifecycle whatever nesting versions react browser os affected issue work previous versions react react", "num": "8459", "d": "11/2016"}, {"title": "fullscreen onmouseout listener", "body": "container moved fullscreen mode listener nt triggered children components move mouse exampledemo use example demo chrome open console click button try nt move cursor fullscreen move cursor expected behavior assume mouse listener triggered mouse leaves component", "num": "8456", "d": "11/2016"}, {"title": "questions unstablecreateportal", "body": "talking vjeux whether remain around pointed newupcoming unstablecreateportal api using former render subtrees move atom panes panels since control node rendering subtree move around see fit two questions continue able move dom node wherever want eg attached document like people modals continue retain context subtree", "num": "8455", "d": "11/2016"}, {"title": "read property purgeunmountedcomponents undefined", "body": "getting error trying render component read property purgeunmountedcomponents undefined mean fix", "num": "8454", "d": "11/2016"}, {"title": "document componentdidupdate happens paint", "body": "docs componentdidupdate invoked immediately updating occurs method called initial render use opportunity operate dom component updated please correct wrong last component large sequence nested component changes cdu last child parent called sequence last cdu called flushbatchedupdates run turn calls runbatchedupdates read comment sebmarkbage context correct docs say something like use opportunity enqueue dom operations next execution thread edit guess issue also related new hooks proposal componentwasmounted componentwasupdated meanwhile would great docs specified componentdidmountupdate use requestanimationframesettimeout access rendered dom", "num": "8452", "d": "11/2016"}, {"title": "objects valid react child error occurring update", "body": "bug updating error showing previously working code app fails load win following error app continues work fine browsers thanks", "num": "8449", "d": "11/2016"}, {"title": "expose root ref default allow automatic forwarding setnativeprops", "body": "react native touchablehighlight requires children forward setnativeprops implemented builtin components must manually implemented custom components causes big incompatibilities library like native base mention custom components developer creates apparently preferred pattern theming projects create common directory inside main js directory folder houses commonlyreused components throughout app example declare common text header components could remedied making available default ref points root node would allow generic forwarding written base class components could inherit would essentially forward props chain hit concrete builtin component arguments making ref available default", "num": "8447", "d": "11/2016"}, {"title": "developing packages invalid manually calling reactproptypes warnings logged", "body": "want request feature report bug current behavior developing react component package common practice local copy project work need copy react installed directores otherwise node browserify nt tested webkit able find results ton warnings manually calling reactproptypes validation function current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior assuming means two copies react page preferably first class support developers working methodology barring ability test condition directly would nice disable warnings fashion versions react browser os affected issue work previous versions react currently testing react", "num": "8445", "d": "11/2016"}, {"title": "production build broken nodehaste since", "body": "issue tighly coupled issue jest comment explanation related react dupe info current issue version update dissapeared production code production mean code ships npm jest tests became broken way fix version tags latest version ca nt used workaround git tags compare shows interesting commit see commit comes pull request", "num": "8442", "d": "11/2016"}, {"title": "npm install microtime problem", "body": "bug want install reactdom docker ubuntu environment got error microtime install varwwwnodemodulesmicrotime nodegyp rebuild gyp info worked ends ok gyp info using nodegyp gyp info using node linux gyp http get gyp http gyp http get gyp http gyp info spawn gyp info spawn args usrlocallibnodemodulesnpmnodemodulesnodegypgypgypmainpy gyp info spawn args bindinggyp gyp info spawn args f gyp info spawn args make gyp info spawn args gyp info spawn args varwwwnodemodulesmicrotimebuildconfiggypi gyp info spawn args gyp info spawn args usrlocallibnodemodulesnpmnodemodulesnodegypaddongypi gyp info spawn args gyp info spawn args gyp info spawn args dlibrarysharedlibrary gyp info spawn args dvisibilitydefault gyp info spawn args gyp info spawn args dnodegypdirusrlocallibnodemodulesnpmnodemodulesnodegyp gyp info spawn args dnodelibfilenodelib gyp info spawn args dmodulerootdirvarwwwnodemodulesmicrotime gyp info spawn args depth gyp info spawn args noparallel gyp info spawn args generatoroutput gyp info spawn args build gyp info spawn args goutputdir gyp info spawn make gyp info spawn args buildtyperelease c build make entering directory varwwwnodemodulesmicrotimebuild make warning file microtimetargetmk modification time future cxx target releaseobjtargetmicrotimesrcmicrotimeo file included error variable field addgcepiloguecallback declared void isolate gcepiloguecallback callback error gcepiloguecallback member isolate isolate gcepiloguecallback callback error expected primaryexpression gctypefilter gctype gctypefilter kgctypeall error variable field removegcepiloguecallback declared void isolate gcepiloguecallback callback error gcepiloguecallback member isolate isolate gcepiloguecallback callback error variable field addgcprologuecallback declared void isolate gcprologuecallback callback error gcprologuecallback member isolate isolate gcprologuecallback callback error expected primaryexpression gctypefilter gctype gctypefilter kgctypeall error variable field removegcprologuecallback declared void isolate gcprologuecallback callback error gcprologuecallback member isolate isolate gcprologuecallback callback recipe target releaseobjtargetmicrotimesrcmicrotimeo failed make releaseobjtargetmicrotimesrcmicrotimeo error make leaving directory varwwwnodemodulesmicrotimebuild gyp err build error gyp err stack error failed exit code gyp err stack childprocessonexit gyp err stack emittwo gyp err stack childprocessemit gyp err stack processchildprocesshandleonexit gyp err system linux gyp err command usrlocalbinnode usrlocallibnodemodulesnpmnodemodulesnodegypbinnodegypjs rebuild gyp err cwd varwwwnodemodulesmicrotime gyp err node v gyp err nodegyp v gyp err ok npm info lifecycle microtime failed exec install script npm warn install microtime microtime install npm warn install microtime exit status npm info lifecycle reactdom reactdom npm info lifecycle reactdom reactdom asap nodemodulesreactdomnodemodulesasap corejs nodemodulesreactdomnodemodulescorejs promise nodemodulesreactdomnodemodulespromise whatwgfetch nodemodulesreactdomnodemoduleswhatwgfetch fbjs nodemodulesreactdomnodemodulesfbjs react nodemodulesreactdomnodemodulesreact holdshort varwww possible solution bump microtime", "num": "8435", "d": "11/2016"}, {"title": "optimized build", "body": "target newer browsers chrome firefox ms edge without supporting internet explorer build optimizes output scenario excluding code deals internet explorer quirks also possible es output minimize size output", "num": "8434", "d": "11/2016"}, {"title": "consider exposing reactelement factory function", "body": "currently react exposes outside world internally calls function create actual element instance performs copy create extract clojurescript world many libraries wrap react provide cljsidiomatic interface using cljs persistent maps props hiccup syntax popular convenient far ideal since first allocate cljs data structures addition particular inconvenient convert props data react would safe lot overhead could call directly saving whole lot work would nice others would anyways maybe obscure name discourage use fine marked experimental otherwise officially supported happy create matching pr folks agree expose somewhere", "num": "8431", "d": "11/2016"}, {"title": "error messages swallowed certain edge cases", "body": "would like report bug currently certain cases like one reproduced critical error messages displayed developer console sometimes view render left guesswork identify culprit relevant jsfiddle see error thrown one deliberately put line blocks proper rendering view yet trace show developer console expected behaviour would catch error show developer console current workaround wrap calls ugly works suppose design react usually excellent error reporting capabilities aware issue might caused imperfections code way improve maintaining functionality ears struggling issue quite time jsfiddle see error reproduced react", "num": "8430", "d": "11/2016"}, {"title": "issue collaboration react reactdom", "body": "want request feature report bug yes wan na report bug current behavior u install react reactdom last version intellij window npm react reactdom nodemodules reactdom indexjs found file moduleexports require reactlibreactdom nodemodules reactlibreactdom havent got file nodemodules reactlibreactdomfactory wont use reactdom import reactdom reactdom find error error reactdomindexjs module found error resolve file directory u install react reactdom havent got problems current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "8429", "d": "11/2016"}, {"title": "onchange work well japanese ime react", "body": "trying make simple text box component suggestion feature however ie event japanese ime conversion arbitrarily decides press enter key examined little seems occurred ie seems occurred browsers chrome old ver ie react version seemed similar issues bug already fixed another bug maybe like make", "num": "8423", "d": "11/2016"}, {"title": "classname nt work attribute present", "body": "want request feature report bug report bug current behavior pass attribute nt work output instead dom current behavior bug please provide steps reproduce possible minimal demo problem demo expected behavior render instead versions react browser os affected issue work previous versions react", "num": "8419", "d": "11/2016"}, {"title": "\u663e\u793a\u9875\u9762\u63cf\u8ff0", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "8418", "d": "11/2016"}, {"title": "component keys array index", "body": "question hope someone provide information following statements nt recommend using indexes keys items reorder would slow may read indepth explanation keys necessary interested last resort pass item index array key work well items never reordered reorders slow anyone provide explanation references links docs subject number items talking rendering slow sort", "num": "8410", "d": "11/2016"}, {"title": "react devtools download appear chromeextension", "body": "bug report expected behavior react suggest download devtools extension page extension permission inject devtool actual behavior reproducing create chrome extension page uses react load extension chrome open page observe console version google chrome react", "num": "8409", "d": "11/2016"}, {"title": "include polyfillio html", "body": "considered earlier settled shipping objectassign promise fetch polyfills default like reconsider adding polyfillio scripts html many people rely features without realizing need polyfills using polyfillio means easy opt know include polyfills specifically exclude objectassign promise fetch already", "num": "8397", "d": "11/2016"}, {"title": "firefox validation triggers input component render", "body": "using native form validation loading page form containing input prop set triggers browser validation immediately produces firefox native error highlighting firefox appears run validation dom used set value existing input component behavior seen angular run already", "num": "8395", "d": "11/2016"}, {"title": "facebook", "body": "notice facebook services nearest time open account mobile phone safari tried see message transfer install messenger app also notice sometime messages come inbox message come different messages like filters request archive message", "num": "8393", "d": "11/2016"}, {"title": "use addonsperf addonsreacttransitiongroup amd environment", "body": "use requirejs enviroment try use get regression", "num": "8392", "d": "11/2016"}, {"title": "warnning encountered two children key", "body": "sure key unique also print warning error react version thank", "num": "8390", "d": "11/2016"}, {"title": "documentation missing mention refs", "body": "want request feature report bug bug current behavior thinking react document quickstart section documentation contains code uses refs refs mentioned text refs used js code pen lines expected behavior refs explained thinking react earlier section quickstart section documentation reader able follow along versions react browser os affected issue work previous versions react react issue live url", "num": "8382", "d": "11/2016"}, {"title": "react app rendering", "body": "want request feature report bug bug current behavior app nt render current behavior bug please provide steps reproduce possible minimal demo problem via similar template build react app webpack launch emulator see blank screen halfcompiled react app following error expected behavior render chrome firefox etc versions react browser os affected issue work previous versions react temporarily shrinkwrapped dependencies continue serve app starting believe coming dependency may relying shrinkwrapped versions dependencies left new one broken right one old one continues work across browsers", "num": "8379", "d": "11/2016"}, {"title": "documentcaretpositionfrompoint caretrangefrompoint typecheck", "body": "want request feature report bug bug current behavior neither documentcaretpositionfrompoint standards track documentcaretrangefrompoint old syntax typecheck producing following flow error versions react browser os affected issue react flow", "num": "8377", "d": "11/2016"}, {"title": "classname named active invaild rerender", "body": "", "num": "8376", "d": "11/2016"}, {"title": "incorrect warning link", "body": "want request feature report bug bug current behavior link provided warning shown invalid aria prop redirects facebookcom current behavior bug please provide steps reproduce possible minimal demo problem via similar template fiddle reproduce check console use invalid aria prop name component click link shown console expected behavior go link versions react browser os affected issue work previous versions react", "num": "8373", "d": "11/2016"}, {"title": "respondereventplugin regression react", "body": "want request feature report bug report bug current behavior longer recognizes start dom events current behavior bug please provide steps reproduce possible minimal demo problem via similar template helper checks mousetouch start events section code used react react means event plugin longer recognize start events pr exposes issue uses expected behavior behaviour exhibited react versions react browser os affected issue work previous versions react works react nt work react", "num": "8370", "d": "11/2016"}, {"title": "reactcsstransitionsgroup nt execute enter animation properly cases", "body": "trying build nifty animation launching dialogs running snag reactcsstransitionsgroup goal ensure dialog looks like zooming button launched sample shows working demo unexpected behavior unexpected behavior exhibited following click first button either one works perfectly click second button enter animation play nt matter many buttons add first works expected additional buttons wo nt show enter animation properly leave animation works buttons reproduced glamor aphrodite feels good rule css library culprit trying figure something wrong code unintended usage reactcsstransitionsgroup bug thanks also posted", "num": "8369", "d": "11/2016"}, {"title": "production mode results everchanging generated keys", "body": "seeing mysterious behaviour regards generated keys production mode note keys relayadhocquery tabpanel components bottom also note parent hierarchy nt change forced update parent keys question simply append loosing state everything works expected development mode component instances reused based reuse keys unfortunately despite best efforts unable isolate exactly happens ie simply reproducible test case maybe someone knowledge key generating algorithms points us towards solution react seeing evergreen browsers", "num": "8367", "d": "11/2016"}, {"title": "firefox blocks react dev addon csp set regardless whitelisted", "body": "want request feature report bug bug current behavior firefox blocks dev addon message despite csp section believe subbed firefox since csp setting works chromium addon tries load loads opposed shows policy look headers request tells got csp serving correctly ff react start dev tools never connect react web app says looking react current behavior bug please provide steps reproduce possible minimal demo problem via similar install firefox react dev plugin visit left development machine running note csp violation dev console expected behavior addon work allowed scriptsrc indeed work whatever csp versions react browser os affected issue work previous versions react react plugin firefox affected os debian", "num": "8366", "d": "11/2016"}, {"title": "fail update dom style attribute", "body": "want request feature report bug bug current behavior style attribute updated correctly set time rerender issue suppose would tested example expected behavior dom element style last rendered one affected previous style value versions react browser os affected issue work previous versions react tested chrome react", "num": "8362", "d": "11/2016"}, {"title": "breaking feature request make jsx even like js", "body": "think time make jsx even like js less like html consider following jsx writing like main subjective reason looks right objective reason would could introduce javascript comment syntax similar things could done jsx attributes instead would like even better nt put much thought generally inspiration comes", "num": "8360", "d": "11/2016"}, {"title": "ref callback argument null", "body": "want request feature report bug bug current behavior ref callback gets called argument instead instance component occurs write component name starting uppercase character pascalcase write component starting lowercase character camelcase everything works expected jsfiddle demonstrates get argument demonstrates get correct reference see renamed expected behavior always pass component instance argument callback versions react browser os affected issue work previous versions react occurs nt tested versions", "num": "8359", "d": "11/2016"}, {"title": "overridingextending reacthostcomponentcreateinternalcomponent", "body": "would nice able override extend reacthostcomponentcreateinternalcomponent expand set elements rendered beyond html extjsreactor patching createinternalcomponent function tag starts specified prefix default x creates ext js component love stable way looks like something along lines originally considered never fully implemented recently removed advice sustainable approach would consider api", "num": "8358", "d": "11/2016"}, {"title": "react unable fully removing select mobile browsers", "body": "want request feature report bug bug current behavior please refer fiddle goal select onchange event select removed however unexpected thing occurs mobile tested latest ios latest mobile chrome safari select value select replaced standard button nothing tap button browser brings select menu even though select element look dom select element expected behavior select removed via onchange button shows tapping button nothing versions react browser os affected issue work previous versions react browsers latest mobile chrome amp safari os latest ios", "num": "8357", "d": "11/2016"}, {"title": "undocumented alteration arguments", "body": "upgrading reactreactdom noticed synthetic event possibly others receiving arguments differently event without custom arguments passed receives arguments observed console jsfiddle arguments look like viewable console ended causing problems application passing additional argument click handler expecting received second argument upgraded argument received third sure considered issue react nt see anything release notes way event handling thought would raise case way ended adjusting using spreadrest operator passingreceiving arguments event handler function may approach taken begin ps thank hard work guys put super excited fiber rock", "num": "8354", "d": "11/2016"}, {"title": "reactdom typeerror consoledebug function", "body": "experiencing following bug using react reactdom run team test suite uses mocha following exception thrown mocha crashes without running tests looking stack trace error coming line code surrounding line code calls exception message makes seem like function nodejs believes exists fact documentation nodejs console shows debug function interestingly running team project works fine time see exception try run test suite", "num": "8352", "d": "11/2016"}, {"title": "turn strict eslint rule back", "body": "upgrading eslint latest version turn strict rule conflicts combined flow statements opening issue track turning strict back either change eslint new custom rule use strict means", "num": "8344", "d": "11/2016"}, {"title": "issue still happening ie reactcloneelement handles props differently reactcreateelement", "body": "know issue addressed previously still seems happening ie browsers use cloneelement defaultprops values come undefined explicitly sent prop", "num": "8343", "d": "11/2016"}, {"title": "error find module reactlibreactperf", "body": "bug report current behavior importing throws following error checked file nt exist directory expected behavior nt throw error versions react browser os affected issue work previous versions react latest version using issue updating may introduced two", "num": "8342", "d": "11/2016"}, {"title": "error message stack trace still useless time possible solution enclosed", "body": "using react reasonably sure behaviour seen anything release notes regarding improved error messages render problem course source stacktrace simply originating call certain occasions error messages includes name component class whose method check even terribly useful larger components understand limitations much debug information tag along element creation code normal operation might practical simply rerender recheck using heavyweight tracing faulty call error already happened proof concept works great helpful path idx path consolewarn type eltype childcontextmaphas el ctx childcontextmapget el typeof eltype function eltypeprototype instanceof reactcomponent let element new eltype elprops ctx let childcontext typeof elementgetchildcontext function childcontext objectassign ctx elementgetchildcontext reactchildrenforeach elpropschildren child gt childcontextmapset child childcontext findinvalidelement elementrender ctx else findinvalidelement eltype elprops ctx ctx else elprops amp amp elpropschildren let idx reactchildrenforeach elpropschildren child gt quick kludgedtogether elementtree renderer tracks path individual node tree thus able report type incorrect together stack trace allows exact identification faulty node example path though verbose followed without ambiguity starting stacktrace ends method method method second child first child method method first child method first child first child get idea", "num": "8340", "d": "11/2016"}, {"title": "unable find element id undefined", "body": "react well invariant unable find element id undefined error happens specific yet special kind component update triggered using mobx state management latest webpack guess nt qualify proper issue report could localize issue specific component removed solves completely nothing special component working sidenote app rendered server successfully crash happens client move cursor particular component crash error constantly consoleloged move cursor outside nothing gets logged attaching listeners cursor movements", "num": "8338", "d": "11/2016"}, {"title": "nbsp renders differently production", "body": "using render method like renders expected dev mode production renders strange see attacked images dev mode prod mode notice strange using react", "num": "8336", "d": "11/2016"}, {"title": "hard dependency reacthotloader gt", "body": "tried uprev version react every major release since often help us perf core issues addressing updated yesterday however seems though breaking change comes development process although apps build successfully break try dev using webpackhotreloading process wepback spits following error file creating react component believe upgrading newest prerelease reacthotloader would completely fix issue sure proceed since documentation points fairly experimental think going stay react since nt require us update hotreloader configured webpackbabel assume nt oversight removal many lib files correct path wondering another work around switching prerelease hotreloader thanks", "num": "8330", "d": "11/2016"}, {"title": "false positive warning manually calling reactproptypes validation function", "body": "os macos node npm react getting warning inherited codebase interesting setup uses npm package therefore different react instance render dom details comment makes wonder could cause issue package using component defined react test copied code straight docs quite sure warning nt warranted jsx class greeting extends reactcomponent render return hello thispropsname greetingproptypes name reactproptypesstring still getting head around architecture codebase something like node server waits requests imports component say defined react instance imports internal library npm package request comes passes instance imports guess react instance uses render passed component returns rendered html take render logic package bring app nt get warning", "num": "8326", "d": "11/2016"}, {"title": "reactjs page android webview communication", "body": "want request feature report bug current behavior didnt find good way communicate android webview reactjs page problem im facing landing page written reactjs loaded webview backbutton want close webview activity click backbutton versions react browser os affected issue work previous versions react", "num": "8325", "d": "11/2016"}, {"title": "reacttestrenderer invariant violation getnodefrominstance invalid argument", "body": "following example order use snapshots jest run bug within seems fail whenever finddomnode used component instance minimal code replicate bug js import react component react import finddomnode reactdom import renderer reacttestrenderer class mycomp extends component componentdidmount finddomnode render return renderercreate error js invariant violation getnodefrominstance invalid argument react versions react reactdom reacttestrenderer", "num": "8324", "d": "11/2016"}, {"title": "delete examples except fiber amp basicjsx", "body": "many people understand something new reading docsarticles good practice explore examples parallel current examples issues depends babel deprecated wait dom outdated libraries like webcomponentsjs generally must parse mind whole file understand small component works possible solution could rewriting examples separate modules readme etc simple scripts useful could make pr days", "num": "8321", "d": "11/2016"}, {"title": "isinjected proptypes", "body": "would like propose small addition proptypes others encountered issues using redux connect inject information store see wandering maybe adding isinjected proptype would make sense could work similar isrequired chained datatype however isrequired validates value passed isinjected validates value passed example mycomponentproptypes optionalbool reactproptypesbool requiredbool reactproptypesboolisrequired injectedbool reactproptypesboolisinjected wanted vet idea bothering pull request", "num": "8320", "d": "11/2016"}, {"title": "getrootids defined reactcomponenttreehookjs", "body": "started running bug today everything going smoothly started happening updated error gets thrown page try use reactdom render something dom code import react react import reactdom reactdom import app mainapp reactdomrender documentqueryselector wrapper using react reactdom bundling everything rollup buble screenshot chrome tells happening", "num": "8318", "d": "11/2016"}, {"title": "react dom server nt contain separate copy reconciler", "body": "want request feature report bug nt know technically bug certainly regression inflates size reactdomserver package used client current behavior might best quote release announcement react another thing watch react dom server size react dom since contains copy react reconciler nt recommend using react dom server client cases expected behavior like react one copy reconciler needed using react dom react dom server use case using react dom server client example selectivityjs allows developers specify custom templates customize rendering ui component selectivity core nonreact library accepts templates either strings functions returning strings manually inserted dom selectivity react api also includes plugin wraps templates specified functions returning react elements see source code details plugin relies reactdomserver transform react elements string understood selectivity core example rather specific single library think use case specifying templates nonreact libraries jsx might widely applicable", "num": "8316", "d": "11/2016"}, {"title": "reactaddonstestutils depends reactdom instead react", "body": "want request feature report bug report bug current behavior reactaddonstestutils peer dependency uses peer dependency reactaddonstestutilsindexjs reactaddonstestutilsindexjs code contains fail given current dependencies reactdom dependencies previously needed break code breaking change leads errors like current workaround", "num": "8314", "d": "11/2016"}, {"title": "reacttestrenderer reactmount gone", "body": "updating react facing issues missing reacttestrenderer reactmount tried look release notes could see anything regarding reacttestrenderer gone calling directly using ideas nt change anything code rollback everything works fine", "num": "8312", "d": "11/2016"}, {"title": "feature request proptype name", "body": "feature request fill name attribute add static tostring method proptypes example js const stringproptype proptypesstring expect stringproptypename toequal checktype string const arrayofbooltype proptypesarrayof proptypesbool expect arrayofbooltypename toequal bound checktype array bool const shapetype proptypesshape foo proptypesbool bar proptypesnumber expect shapetypename toequal bound checktype shape foo bool bar number maybe useful debugging case need equal components prop types throw exception props generate names prop types could compared current behaviour primitive types could compared string bool number complex types shape arrayof time returns new bound function could compared value problems custom prop types generate undefined name custom prop like fixed adding function name btw feature implemented tcomb lib", "num": "8310", "d": "11/2016"}, {"title": "onclick firing disabled buttons", "body": "latest reactjs release firing disabled elements child html elements previous reactjs version onclick handler would called note onclick called remove button", "num": "8308", "d": "11/2016"}, {"title": "negitive consequences licence", "body": "take repost chatter internally", "num": "8307", "d": "11/2016"}, {"title": "reacttestutilssimulate longer works expected", "body": "firstly congrats release update couple projects tests failing given changes discussed workaround use however still entirely clear difference one used feels like docs updated reflect change finally reason appear docs concerned others going caught change also", "num": "8305", "d": "11/2016"}, {"title": "minor nt supposed break much stuff", "body": "packages broke due missing stuffs seems like nt happen even build process broke suddenly due react update react packages set thanks", "num": "8303", "d": "11/2016"}, {"title": "problems updating react", "body": "getting error files using latest version react webpack help", "num": "8302", "d": "11/2016"}, {"title": "reactdom work amd enviroment", "body": "try load reactdom requirejs get error mismatched anonymous define looking reactdom distribution notice seem two umd wrappers top probably related change packaging structure", "num": "8301", "d": "11/2016"}, {"title": "npm access request tomocchino", "body": "order publish react npm need access following repositories reactaddonscreatefragment reactaddonscsstransitiongroup reactaddonslinkedstatemixin reactaddonsperf reactaddonspurerendermixin reactaddonsshallowcompare reactaddonstestutils reactaddonstransitiongroup reactaddonsupdate reactdom reactnativerenderer reacttestrenderer react", "num": "8300", "d": "11/2016"}, {"title": "firefox invalid", "body": "want report code follow js var textarea reactcreateclass handledrop function e e e event epreventdefault epreventdefault else ereturnvalue false estoppropagation estoppropagation else ecancelbubble true return false handledragover function e e e event epreventdefault epreventdefault else ereturnvalue false return false render function return drag amp drop docx file firefox browser trigger default behavior help", "num": "8296", "d": "11/2016"}, {"title": "way judge instance component child another", "body": "hello team writing framework react system facing problem judge instance component child another may deep layer parent instance think function resolve problems cound find need help thanks lot", "num": "8295", "d": "11/2016"}, {"title": "react distribution", "body": "react amazing library literally changed way get develop applications job made pleasant experience day day however absolutely hate many legacy things affect react way react built terrible issues seen seems legacy build system monstrosity could never fixed internal facebook reliance things major part community suffers one way react extremely large despite react clones like preact inferno popular alternatives react distributed size well large comparison vue angular react compiled googles closure compiler start change could switching modern build system like webpack rollup create smaller library output particularly rollup smaller bundles people use react web applications much people would love contribute change way react built someone familiar react current build system tightly coupled facebooks usage able get pr successfully merged hoping rewrite release react fiber fixed new found performance movement going javascript community team facebook behind react accept call action make change better reliant react well shit luck", "num": "8294", "d": "11/2016"}, {"title": "expose rendersubtreeintocontainer react native", "body": "never built react native use cases layers react native basically need port reactnativemount", "num": "8289", "d": "11/2016"}, {"title": "immutable html elements react", "body": "hi everyone first report please bear nt make much sense facing issue interoperability webcomponents work proprietary library dom nodes custom webcomponent element frozen ie extensible get error console upon inspecting seems thrown following snippet react seems adding new property dom node precaching things fail case helps also pasted entire stack trace question valid react assume dom node mutable precaching omit nodes able attach reproducible test case due proprietary nature custom webcomponent nt seem able reproduce issue simple webcomponents try really required however stacktrace let know something obvious missing", "num": "8288", "d": "11/2016"}, {"title": "feature request add errorshaped proptype option", "body": "want request feature report bug request feature current behavior currently errorshaped proptype option minimal use case js class myimage extends component async fetchurl try const src await requrl fid thissetstate src catch error thissetstate error throw error render const src error thisstate return class image extends component static proptypes src proptypesstring error proptypeserror lt requested feature render const src error thisprops const src error errorsrc src return", "num": "8286", "d": "11/2016"}, {"title": "feature reactcsstransitiongroup delays", "body": "hi want make feature request adding way delay enterappearleave component propose adding new props transitionenterdelay delay element begins transition defaults transitionappeardelay delay element begins transition defaults transitionleavedelay delay element begins transition defaults defaults proposed props wouldt add breaking changes existing users example describes reasons behind request use case currently creating project contains navigable subpages subpage unique enter leave animation unique enterleave duration possible change subpage another order changing new page previous subpage leave must end new page begins entering need delay entering new subpage old one leaves currently object defines enterleave durations subpages helper function calculates correct timeouts delays current subpage component depending current state subpage contains multiple different elements combination creates enterleave animation sequences enterleave transitions css class based possible add additional parent element add needed behaviour would need entirely manage enterleave stuff javascript rather css adding class", "num": "8280", "d": "11/2016"}, {"title": "future refs", "body": "hi writting use refs pilot tests would love able uniformise tests right pr achieve pretty well string refs since string refs considered legacy since still seems problems refs wondering plan concerning refs moreover would possible support shallow rendering looked think possible return mount given element instead aware breaking change make like understand plan andor logic behind returning maybe could help oh since much trouble interested reason changing string refs callback refs thank help", "num": "8275", "d": "11/2016"}, {"title": "add reactjs irc note support page", "body": "want request feature report bug docs change think used pointer freenode reactjs channel support page reactiflux linked could note added back channel still users hours day several us frequently answer questions pretty good flow conversation questions throughout day", "num": "8268", "d": "11/2016"}, {"title": "add debug info error typeerror read property gethostnode null", "body": "want request feature report bug feature current behavior undefined component somewhere deep hierarchy react throws message typeerror read property gethostnode null objectgethostnode webpack reactlibreactreconcilerjs expected behavior please add debugging information place happens least name current parent node versions react browser os affected issue work previous versions react", "num": "8267", "d": "11/2016"}, {"title": "function returns incorrect checksum opera presto browser", "body": "discovered seems like platform bug opera browser presto engine causing server side rendered components always rerendered client checksum match server rendered checksum addition assignment expressions single statement results incorrect checksum function called test case used reproduce bug download link opera mac could install run test see fail old browser fix extremely unlikely still used many embedded devices tivo one finding however react work around bug splitting line function multiple statements", "num": "8264", "d": "11/2016"}, {"title": "need way receive pass context regardless contexttypeschildcontexttypes", "body": "want request feature report bug feature current behavior component access via thiscontext anything defined childcontexttypes parent contexttypes child current behavior bug please provide steps reproduce possible minimal demo problem via similar template na expected behavior would like way take context available regardless contexttypes also pass via context variables defined childcontexttypes similar proptypes validation versions react browser os affected issue work previous versions react use case portal component renders child div end body using reactdomuseful fixed positioned components nt want stacking context parent works well pass context context comes owner component rendered new html element import react children purecomponent proptypes react import unmountcomponentatnode render reactdom renders children end body export default class portal extends purecomponent static proptypes children proptypesnodeisrequired componentdidmount thisel documentcreateelement div documentbodyappendchild thisel renderintoel gt const children thisprops render childrenonly children thisel componentdidupdate children children thispropschildren thisrenderintoel componentwillunmount unmountcomponentatnode thisel documentbodyremovechild thisel render return null would like able pass context available portal tree rendered body tag something like import react children purecomponent proptypes react import unmountcomponentatnode render reactdom class contextprovider extends purecomponent static proptypes context proptypesobject children proptypesnodeisrequired getchildcontext return thispropscontext render return childrenonly thispropschildren renders children end body export default class portal extends purecomponent static proptypes children proptypesnodeisrequired need receive context static contexttypes componentdidmount thisel documentcreateelement div documentbodyappendchild thisel renderintoel children context gt render thisel componentwillreceiveprops children nextcontext children thispropschildren nextcontext thiscontext thisrenderintoel children nextcontext componentwillunmount unmountcomponentatnode thisel documentbodyremovechild thisel render return null", "num": "8262", "d": "11/2016"}, {"title": "make sure jest tests fail error thrown within jsdom event handler", "body": "situations unit tests use dispatchevent jsdom dom node order use jsdom event system appears event handler throws ex change onchange handler test throw error silently ignored cause test fail jsdom make attempt report error hook jest config scriptsjesttestframeworksetupjs see fail test triggers exception behavior implementation reportexception looks like might able onerror handler nt work hooking virtual console may possible", "num": "8260", "d": "11/2016"}, {"title": "documentation examples purecomponent vs component", "body": "think would nice examples comparing purecomponent component", "num": "8255", "d": "11/2016"}, {"title": "awkward output shallow rendering snapshots components nodemodules", "body": "want request feature report bug bug current behavior experiencing awkward output shallow rendering snapshots components imported via nodemodules renders expected behavior extra closing tag contain component name", "num": "8253", "d": "11/2016"}, {"title": "using webcomponentcustomelement react", "body": "want request feature report bug bug current behavior js class orionnotificationelement extends htmlelement constructor super windowcustomelementsdefine orionnotification orionnotificationelement export default orionnotificationelement import react component react import default orionnotificationelement webcomponentsorionnotification class orionnotification extends component render return using component causes following error uncaught typeerror failed construct htmlelement please use new operator dom object constructor called function pasting customelement definition console calling documentcreateelement orionnotification creates element loading react seems error occurs current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior able instantiate web component versions react browser os affected issue work previous versions react current react current chrome", "num": "8249", "d": "11/2016"}, {"title": "component model", "body": "react one javascript libraries use componentbased software engineering approach cbse component models ejb model com model net model etc want know component model react use react using different kind component model research react behaviour based componentbased software engineering want ask help documentations react component model anything help research thank willing help please send email randichil gmailcom", "num": "8246", "d": "11/2016"}, {"title": "render nt called inside hoc component passing children", "body": "hi writing custom datatable component want add support rich cells example desirable usage used pass props datatable rendering replaced header cells body cells make rich cells working trying save children column rendering cell inject actual rowdata hoc cell rendering class tablecell extends purecomponent renderrichcell const rowdata columndescription thisprops return reactchildrenmap columndescriptioncellchildren cellcomponent gt withrowdata cellcomponent rowdata problem render method column children fakeid example nt called debugger result renderrichcell looks ok provide snapshot needed errors console maybe valid use reactchildrenmap tablecell transform elements another parent", "num": "8245", "d": "11/2016"}, {"title": "fiber handle errors callbacks", "body": "commit phase updates flushed dom errors thrown inside trapped handled later tree committed error thrown callback trapped handled way relevant section code calls callbacks part update queue linked list updates callbacks throw error catch error continue calling rest callbacks good first issue someone interested contributing reactreact fiber please read fiber principles contributing fiber submitting pr", "num": "8238", "d": "11/2016"}, {"title": "fiber fiber root field", "body": "problem component calls must update fiber ancestor fibers root get root ensure root scheduled called multiple times consecutively walk path time callback passed requires additional walk priority child always greater equal priority parent nice optimize stopping whenever condition step fails problem step ca nt assume root tree scheduled pending work roots unscheduled uncaught error thrown tree ensure root scheduled every update one idea would use field fiberroot eg rather unschedule field would still need cleared every update requires access root nt solve problem possible solution could solve adding field fiber always update quickly question whether extra memory usage worth performance gain", "num": "8222", "d": "11/2016"}, {"title": "referenceerror defined calling reactdomrender", "body": "kinda bug ca nt use react way frowningman using nwjs end backend uses nodejs installed npm running application tag include features ecmascript class definition example pointing script javascript use strict anyways const controllername mainwindow const controllerclass require controllername controllerjs var controller new controllerclass loads javascript use strict const react require react const reactdom require reactdom moduleexports class mainwindowcontroller constructor thisview require mainwindowjs thisviewcomponent reactcreateelement thisview null error occurs prevents component javascript use strict const react require react moduleexports class mainwindow extends reactcomponent constructor props works dependencies used nwjs react reactdom time nt access developer console nwjs minimal build flavor nt download sdk deeper look issue browsers without nodejs backend", "num": "8217", "d": "11/2016"}, {"title": "number input defaultvalue accept decimal input", "body": "want request feature report bug report bug current behavior using number input defaultvalue enter decimal value attempting type decimal cursor moved beginning input behavior observed defaultvalue given current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior input allow type decimal versions react browser os affected issue work previous versions react happening react happen", "num": "8211", "d": "11/2016"}, {"title": "documentation sample still using string refs", "body": "sample code step add inverse data flow quick startthinking react still using old string refs handlechange thispropsonuserinput thisrefsfiltertextinputvalue thisrefsinstockonlyinputchecked render return show products stock think better easier understand use new syntax handlechange thispropsonuserinput thisfiltertextinputvalue thisinstockonlyinputchecked ref input gt thisfiltertextinput input ref input gt thisinstockonlyinput input", "num": "8209", "d": "11/2016"}, {"title": "reactcloneelement gives precedence child component props", "body": "want request feature report bug feature would like version gives precedence props already component cloned passed ignoring ones provided default order precedence props provided child component props provided parent used override child component ones default props child component ie prop provided parent child example use case behavior would like achieve red button amp blue idea provide single prop parent sort default individual components override default choose tried manually merging props default value already supplied nt really reliable way thank", "num": "8205", "d": "11/2016"}, {"title": "reactcsstransitiongroup work", "body": "want fade animation code import react proptype react import browserrouter router link match miss reactrouter import jsondata subtitlejson import reactcsstransitiongroup reactaddonscsstransitiongroup import styles letterboxcss export default class letterbox extends reac tcomponent constructor props super props render var boxstyle background black padding borderwidth bordercolor white borderstyle solid location absolute var letterstyle fontfamily \ub9d1\uc740 \uace0\ub515 fontsize color white textalign center var buttonstyleright float right background white marginright fontsize bordercolor black var buttonstyleleft background white float right fontsize bordercolor black changes anyone help", "num": "8203", "d": "11/2016"}, {"title": "react component sending wrong content type multipart form", "body": "want request feature report bug bug current behavior form multipart sending current behavior bug please provide steps reproduce possible minimal demo problem via similar template submit form existing action url expected behavior content type sent versions react browser os affected issue work previous versions react latest", "num": "8197", "d": "11/2016"}, {"title": "purecomponent respond context changes", "body": "want request feature report bug bug current behavior extend purecomponent context component changes props rerender triggered current behavior bug please provide steps reproduce possible minimal demo problem via similar template see bug reproduced expected behavior expect click increment context button would see updated view doenst happen change props see context instantly update actual value view versions react browser os affected issue work previous versions react react chrome fixing reasonably simple think need add shallow comparing context stand purecomponent meantime", "num": "8184", "d": "11/2016"}, {"title": "warn invalid css propertyvalue stripped react", "body": "want request feature report bug feature current behavior react strips invalid css properties nt throw warning expected behavior react strip invalid css properties example throw warning let developer know something wrong passed values versions react browser os affected issue work previous versions react guess versions", "num": "8182", "d": "11/2016"}, {"title": "fiber error handling", "body": "filing todo list x scheduling tests place add tests uncaught errors different roots x remove recursion choose implement sensible behavior fataled roots eg look", "num": "8181", "d": "11/2016"}, {"title": "invalid version installing react", "body": "got following error installing react step reproduce create new project using npm init add dependencies packagejson react npm install expected behavior able install react versions react browser os react windows os notes detected issue starting monday october project dependencies issue present issue reproduced react", "num": "8180", "d": "11/2016"}, {"title": "search broken docs page", "body": "want request feature report bug bug current behavior search input docs page nothing seems firing click handler search iconmagnifying glass current behavior bug please provide steps reproduce possible minimal demo problem via similar template try use search bar expected behavior search docs react index docs internal search engineservice search curious versions react browser os affected issue work previous versions react versions react docs page likely worked never actually tried use search", "num": "8178", "d": "11/2016"}, {"title": "tutorial please clarify use spread properties", "body": "part tutorial confusing data change without mutation end result mutating changing underlying data directly added benefit help us increase component overall application performance appear match either jsx spread operator js spread operator closest match find shallow clone excluding prototype", "num": "8177", "d": "11/2016"}, {"title": "onchange triggered autocomplete chrome ios", "body": "want request feature report bug bug current behavior chrom ios onchange triggered inputs choosing option autocomplete suggestion current behavior bug please provide steps reproduce possible minimal demo problem via similar template smth autofill data chrome try fill form suggested autocomplete option first case onchange handler wo nt triggered expected behavior onchange triggered autocomplete versions react browser os affected issue work previous versions react chrome ios least", "num": "8174", "d": "11/2016"}, {"title": "onchange", "body": "verify works mentioned recently", "num": "8168", "d": "11/2016"}, {"body": "thanks issue kevinzwhuang issue passing event handler nt actually update state react calls internally constructing initial state calling update state want revert back initial state call return value see jsfiddle", "d": "11/2016"}, {"body": "install version corresponding version know depend packages often depend react internals especially means always paired version react reactdom mixing versions likely result undefined behavior", "d": "11/2016"}, {"body": "fair nt depend internals much since likely stick current strategy least", "d": "11/2016"}, {"body": "true better even small dependency internal state module enough avoid mismatching versions think close expected behavior revisit situation changes", "d": "11/2016"}, {"body": "good catch think need add add section wan na make pr technically addon packages also get think", "d": "11/2016"}, {"body": "thanks response yes make pr", "d": "11/2016"}, {"body": "gaearon pr fix issue though unsure addons needs well", "d": "11/2016"}, {"body": "micnic thanks report able verify issue occurs chrome occur firefox appears bug chrome case reproducing issue using plain javascript issue occur removed able reproduce recent versions chrome well safari edge works could webkit issue", "d": "11/2016"}, {"body": "continue able move dom node wherever want eg attached document like people modals stay mounted long node reference node reference changes old portal gets unmounted new one gets mounted continue retain context subtree yes primary purpose api like note available fiber see", "d": "11/2016"}, {"body": "note createportal available fiber see gon na remove unstablerendersubtreeintocontainer though need", "d": "11/2016"}, {"body": "stay mounted long node reference node reference changes old portal gets unmounted new one gets mounted gaearon understand correctly reactdom method return dom node put wherever want even better may eliminate extra container node", "d": "11/2016"}, {"body": "would still create pass container would able move container", "d": "11/2016"}, {"body": "close since nt actionable us hope answered questions please comment best clarify", "d": "11/2016"}, {"body": "load minified reactminjs unminified reactdomjs get error using version fix use unminified copy files minified copy files nt mix match likely change behavior nt get cryptic error", "d": "11/2016"}, {"body": "provide project reproducing", "d": "11/2016"}, {"body": "sure would happen versions match however using multiple reacts nt supported anyway could react back instead eg cd myapp npm link mycomponent cd mycomponent npm link myappnodemodulesreact npm link myappnodemodulesreactdom way using one copy one app", "d": "11/2016"}, {"body": "versions match sure check posting totally understand supporting multiple reacts complete application production since development warning seems reasonable something dev mode try think rather unintuitive typical developer workflow even works might better think way actually support workflow believe simple solution would suppress warning one warning multiple versions loaded version one simple way would set global variable react version number flip switch turn messages reference reason warning specifically logged inside tracks calls proptypes methods run development mode", "d": "11/2016"}, {"body": "even fix particular warnings important things likely break example string refs nt work across reacts best knowledge understand developer warning nt see sense fixing things still broken fundamental ways workaround may unintuitive matches react supposed used one copy fix issues multiple reacts could try fix well nt see valuable given workaround exists fix issues well", "d": "11/2016"}, {"body": "nt know plans fix issues related multiple reacts long longer term plans happy close issue happen links related issues look thanks", "d": "11/2016"}, {"body": "one problems", "d": "11/2016"}, {"body": "providesmodule system never supported way consume react modules recommended way still work lower case commonjs issue using jest reactnative depending code", "d": "11/2016"}, {"body": "issue using jest reactnative depending require react code personally nt use mixedcase commonjs lowercase hase casesensitive fs reactnative project builds successfully may bug somewhere jest internally", "d": "11/2016"}, {"body": "cc yungsters", "d": "11/2016"}, {"body": "cc cpojer", "d": "11/2016"}, {"body": "sebmarkbage nt think saying true used haste modules react previously also fbjs npm package reactnativepackager jest whitelisting package jestreactnative preset well getting back trip bit unsure happened recently seems like reactnative needs haste module proxy", "d": "11/2016"}, {"body": "colch reactnative help curious", "d": "11/2016"}, {"body": "odd case jest definitely knows react module proxy using things work", "d": "11/2016"}, {"body": "hmm actually updated reactnative issue added entry config fully merged reactnative simply changing jest config using rn work nt forwarded jestreactnative reactnative yet unfortunately cc kentaromiura", "d": "11/2016"}, {"body": "sebmarkbage helps simple grep shows nodehaste comment time file actually see import ca nt resolved cpojer seems simple change resolved hm seems finally started work nicely diffs snapshots handle thanks", "d": "11/2016"}, {"body": "update jestreactnative today forward reactnative also updating jest documentation hint wo nt need longer default setup includes working jest configuration see", "d": "11/2016"}, {"body": "nt think related run nt get likely dependency bringing", "d": "11/2016"}, {"body": "might good look preact", "d": "11/2016"}, {"body": "also possible es output minimize size output nt expect substantial size changes react source nt use heavily could try building react source disable babel transforms check build optimizes output scenario excluding code deals internet explorer quirks build nt think small blocks code dealing specifically internet explorer nt seem worth terms complexity", "d": "11/2016"}, {"body": "build without stuff could useful", "d": "11/2016"}, {"body": "yaycmyk experiment get bit savings sure nothing crazy also aware party deps may use reactjs build without savings raw gzip buildreactjs buildreactminjs", "d": "11/2016"}, {"body": "optimizing production would make sense skip react altogether generate plain objects like babel plugin see also", "d": "11/2016"}, {"body": "yes would solution well however given already function thought ask make accessible", "d": "11/2016"}, {"body": "oh available creating element manually sure relevant seems required refs", "d": "11/2016"}, {"body": "also noticed error", "d": "11/2016"}, {"body": "might wrong think problem library using nt seem report unhandled rejections maybe uses pinkyswear hood probably nt support feature switch native promise implementation like fiddle wrap pinky promise native promise see error console browsers log unhandled rejections nothing advice use promises pick library supports printing unhandled rejections development least pick library uses native promises available one using facebook also included default create react app hope helps", "d": "11/2016"}, {"body": "understand thank response time review way ajax requests", "d": "11/2016"}, {"body": "install latest version see line different try setting problem persists try deleting nodemodules clearing npm cache", "d": "11/2016"}, {"body": "special dom attribute opting using web components documentation page mentions issue one common confusion web components use class instead classname issue discussed detail refer discussion hope helps", "d": "11/2016"}, {"body": "closing nt look like bug report wish report bug please help us filling fields thanks", "d": "11/2016"}, {"body": "bondarewicz would say slow clumsy explanation keying allows component instances correctly associated renders correctly retaining state rendered dom key say numerical index array reorder array rendered dom need partially rerendered rather simply moved component state also mixed serious issue also affects focus input undo history etc short unless know good reason always key dynamic children something uniquely identifies source ie kind id", "d": "11/2016"}, {"body": "help link chapters prominently", "d": "11/2016"}, {"body": "gaearon thanks already went links imho clearly least communicate information keys identity items nt think explain well enough using index array potentially issue maybe kind example would convey message better syranide thanks found explanation component state giving bit hint might expect also found following fiddle original source comment think missing actual example orand explanation behind performance issues drawbacks potentially related keys", "d": "11/2016"}, {"body": "bondarewicz would like work since learned fresh mind necessary explain well", "d": "11/2016"}, {"body": "gaearon pick", "d": "11/2016"}, {"body": "sure", "d": "11/2016"}, {"body": "sorry fro delayed response since laumair already picked would like peek pr ping", "d": "11/2016"}, {"body": "bondarewicz nt really started working atm stuck stuff probably start tomorrow means want work let know otherwise happy ping submit pr", "d": "11/2016"}, {"body": "oops meant file create react app", "d": "11/2016"}, {"body": "hi issue tracker react javascript library developed used facebook unfortunately ca nt help facebook products use appropriate venues reporting issues", "d": "11/2016"}, {"body": "see", "d": "11/2016"}, {"body": "duplicate fixed fix soon", "d": "11/2016"}, {"body": "leaving open need confirm fix actually fixes issue well", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "oh nt realize already bad work", "d": "11/2016"}, {"body": "worked also related change packaging", "d": "11/2016"}, {"body": "perf depending reactdom used work reactnative context longer case", "d": "11/2016"}, {"body": "gre whole concept addons reach internals mess imo think react native reactperf copy sure exposed probably get maybe sure haste works rn projects probably expose renderers since copied like something", "d": "11/2016"}, {"body": "broken calls ends undefined", "d": "11/2016"}, {"body": "also using requirejs fixed ability use reactdom unable use probably reasons renderintodocument makes use looks undefined reactdom variable reactperf addons looking believe thanks getting fix quickly way", "d": "11/2016"}, {"body": "would really help somebody could experiment bundle like try figure fix get chance look", "d": "11/2016"}, {"body": "adding require line reactaddonsdomdependenciesumdshimjs seems fix nt know correct way gist", "d": "11/2016"}, {"body": "would break singlefile bundles far tell", "d": "11/2016"}, {"body": "mean seems fix tried build umd distribution including change", "d": "11/2016"}, {"body": "change would include probably want add reactdom dependency amd would create circular dependency guess could use requirejs return loaded instance within shim following patch makes work inside requirejs nt know breaks environments turn could still patch reactwithaddons reactjs react addons function f typeof exports object amp amp typeof module undefined moduleexportsf else typeof define function amp amp defineamd define f else var g typeof window undefined gwindow else typeof global undefined gglobal else typeof self undefined gself else gthis greact f function var define module exports return function e n r function u n var atypeof require function amp amp requireif u amp amp return return var fnew error find module throw fcode modulenotfound f var ln exports call lexports function e var nt e return n n e l lexports e n r return n exports var itypeof require function amp amp requirefor var lt rlength r return function dereq module exports function f typeof exports object amp amp amp amp typeof module undefined moduleexportsf else typeof define function amp amp amp amp defineamd define require f else var g typeof window undefined gwindow else typeof global undefined gglobal else typeof self undefined gself else gthis greact f function require var define module exports return function e n r function u n var atypeof require function amp amp amp require u amp amp amp amp return return var fnew error find module throw fcode modulenotfound f var ln exports call lexports function e var nt e return n n e l lexports e n r return n exports var itypeof require function amp amp amp require var lt rlength r return function dereq module exports lt em gt copyright facebook inc rights reserved use strict exportsgetreactdom function return reactdom var getreactdom exportsgetreactdom function return require reactdom exportsgetreactinstancemap function return reactdomsecretinternalsdonotuseoryouwillbefiredreactinstancemap return getreactdom secretinternalsdonotuseoryouwillbefiredreactinstancemap development production exportsgetreactperf function return reactdomsecretinternalsdonotuseoryouwillbefiredreactperf return getreactdom secretinternalsdonotuseoryouwillbefiredreactperf exportsgetreacttestutils function return reactdomsecretinternalsdonotuseoryouwillbefiredreacttestutils return getreactdom secretinternalsdonotuseoryouwillbefiredreacttestutils function dereq module exports maybe need pass accessor function umd callback something like", "d": "11/2016"}, {"body": "yes accessor pattern might work pretty ugly though nt adapted commonjs part would require reactdom commonjs patch reactwithaddons reactjs react addons function f typeof exports object amp amp typeof module undefined moduleexportsf else typeof define function amp amp defineamd define f else var g typeof window undefined gwindow else typeof global undefined gglobal else typeof self undefined gself else gthis greact f function var define module exports return function e n r function u n var atypeof require function amp amp requireif u amp amp return return var fnew error find module throw fcode modulenotfound f var ln exports call lexports function e var nt e return n n e l lexports e n r return n exports var itypeof require function amp amp requirefor var lt rlength r return function dereq module exports function f typeof exports object amp amp amp amp typeof module undefined moduleexportsf else typeof define function amp amp amp amp defineamd define require function require return f function return require reactdom else var g typeof window undefined gwindow else typeof global undefined gglobal else typeof self undefined gself else gthis greact f function return reactdom function reactdomaccessor var define module exports return function e n r function u n var atypeof require function amp amp amp require u amp amp amp amp return return var fnew error find module throw fcode modulenotfound f var ln exports call lexports function e var nt e return n n e l lexports e n r return n exports var itypeof require function amp amp amp require var lt rlength r return function dereq module exports lt em gt copyright facebook inc rights reserved use strict exportsgetreactdom function return reactdom var getreactdom exportsgetreactdom function return reactdomaccessor exportsgetreactinstancemap function return reactdomsecretinternalsdonotuseoryouwillbefiredreactinstancemap return reactdomaccessor secretinternalsdonotuseoryouwillbefiredreactinstancemap development production exportsgetreactperf function return reactdomsecretinternalsdonotuseoryouwillbefiredreactperf return reactdomaccessor secretinternalsdonotuseoryouwillbefiredreactperf exportsgetreacttestutils function return reactdomsecretinternalsdonotuseoryouwillbefiredreacttestutils return reactdomaccessor secretinternalsdonotuseoryouwillbefiredreacttestutils function dereq module exports", "d": "11/2016"}, {"body": "full call stack one like warning flattenchildren encountered two children key child keys must unique two children share key first child usedwarning anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function warning flattenchildren encountered two children key child keys must unique two children share key first child usedwarning anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function anonymous function", "d": "11/2016"}, {"body": "sorry mistake", "d": "11/2016"}, {"body": "good point", "d": "11/2016"}, {"body": "maybe link right around code first uses refs pointing document explains", "d": "11/2016"}, {"body": "farhadg thanks report try reproduce error dev diff dependencies nt useful alone unfortunatelywe need reproducible test case stack trace try narrow root cause", "d": "11/2016"}, {"body": "thanks quick response aweary want compile app mode test start webpack server mode ie hot reloading etc", "d": "11/2016"}, {"body": "see blank screen halfcompiled react app following error tried following link error include information explaining error happened", "d": "11/2016"}, {"body": "gaearon nt make sense would work chrome firefox thoughts", "d": "11/2016"}, {"body": "maybe enabled requires symbol polyfill wo nt work without see", "d": "11/2016"}, {"body": "going give try gaearon however baffling working along days ago", "d": "11/2016"}, {"body": "want compile app development mode test start webpack server dev mode ie hot reloading etc either way long react built production least give us better idea issue occurring", "d": "11/2016"}, {"body": "looked codebase explicitly using configurations thanks suggestion gaearon", "d": "11/2016"}, {"body": "served app appears work consistently yet bundle see result let know information would useful us help track issue aweary", "d": "11/2016"}, {"body": "farhadg absolutely confident like maybe use preset optimizes react might include another preset might ultimately include plugin", "d": "11/2016"}, {"body": "farhadg hit current project include symbol polyfill adding entry point looks like javascript place polyfills project uses corejs need symbol support react optimizations require edit use package", "d": "11/2016"}, {"body": "original idea suggestion gaearon followed particular presets nt see requiring anything plugins gave try trying sake nhunzaker issue persists", "d": "11/2016"}, {"body": "issue however two apps one running one running recent update path case exception outputs however happening deployed production production build locally serve python simplehttpserver exception trigger want report tomorrow rolling project starting new job new year wo nt access source code babel plugins used www config admin slightly different update ie getting exception box dev environment production full text production one without mention corelayout app wrapper called reactdomrender update done polyfill checked console available however still getting error update checked nodemodules folder included anywhere linked update one project causing bit red herring project currently running react dependency updates since october packagejson file however packages marked caret symbol running ci means updating major version anyway changed tilde version locking ie versions resolved issue project rolled back second project also working fine", "d": "11/2016"}, {"body": "need complete project reproducing investigate", "d": "11/2016"}, {"body": "thanks including debugging strategies tanepiper trying figure problem disabled removed reverted launched app mode realized something webpack building react app production mode installed dependencies built app various node versions rolled back many weeks helped us understand nt something introduced rather dependency locked ensure something one building dependencies locked ensure one explicit dependencies disabled locked accordance successful helped us understand sub dependency shrinkwrapped set knew work diffed broken ones help us understand dependencies could potentially noted issues shrinkwrapped showed us likely issue one ete environments successful installing contained locked tried several suggestions issues noted ensuring using ensuring using tried polyfill", "d": "11/2016"}, {"body": "gaearon see updates rolled back working recent change also turns ci pulling react anyway instead due incorrect config attempt see draw reproducible case digging little bit looks like whatever generates children passing object array triggering exception", "d": "11/2016"}, {"body": "problem react nt recognize element likely happens failed check somehow longer agree value might mean somehow get different results testing polyfill example load polyfill initializes might get issue debug recommend finding fragment bundle see two times try adding logs value see different need figure get different values checking existence reason new used one version code packages intentionally", "d": "11/2016"}, {"body": "meleyal thanks issue react nt part type checking application flow maintains type declarations dom internally either redeclare type method using see flow team open adding dom lib", "d": "11/2016"}, {"body": "problem attach component code", "d": "11/2016"}, {"body": "oops think forgot set mapping", "d": "11/2016"}, {"body": "add react dom node tree affect behavior", "d": "11/2016"}, {"body": "yes appears touchable panresponder examples work mouse touch page also includes", "d": "11/2016"}, {"body": "cc jquense taion", "d": "11/2016"}, {"body": "feel free close one bug reference confusion part amp active styles applied one rewriting css rules fixes things", "d": "11/2016"}, {"body": "also note parent hierarchy nt change forced update parent keys question simply append loosing state seems every update nesting children one level deeper every time empty string key see key increasing every time ie equivalent time gets deeper deeper thus increasingchanging key doubt problem react seems far likely something unintentional bug relay whatever else using anyway debug log actual children value provided highlighted div gif probably find something strange going", "d": "11/2016"}, {"body": "thanks quick response two things seeing production mode react component code exactly proddev specifically isolated issue swapping react dev bundle production mode bundle also would nt additional nesting shown react dev tools", "d": "11/2016"}, {"body": "nesting arrays elements would nt shown example would look devtools", "d": "11/2016"}, {"body": "please provide reproducing code behaves differently development production", "d": "11/2016"}, {"body": "thanks gaearon tried could nt isolate test case think info nesting arrays enough us investigate close", "d": "11/2016"}, {"body": "others encounter issue indeed wrapping issue appears caused difference dev production mode use objectfreeze elements affects transformation performs elements tree", "d": "11/2016"}, {"body": "curious though part react codebase react behavior dev prod freeze", "d": "11/2016"}, {"body": "basing top comment familiar react internals could make sense skip objectfreeze production due improved performance", "d": "11/2016"}, {"body": "oh yeah interesting seems react uses freeze dev yes", "d": "11/2016"}, {"body": "think way project operates react elements supported way using react react elements treated immutable also rather inefficient seems want use css modules either embrace fact class names generated interpolate write static transform rewrite class names compilation", "d": "11/2016"}, {"body": "thanks taking time report could please report instead issue tracker react issue would get lost thanks", "d": "11/2016"}, {"body": "issue reported several times currently perfect solution latest discussion", "d": "11/2016"}, {"body": "ok thanks reply", "d": "11/2016"}, {"body": "thanks linmic closing duplicate try direct future discussion", "d": "11/2016"}, {"body": "nevermind probably facebookjsx", "d": "11/2016"}, {"body": "moved", "d": "11/2016"}, {"body": "example nt use component please read relevant documentation components always start upper case letter use jsx example also works correctly ref docs may use attribute functional components nt instances want use refs need define class", "d": "11/2016"}, {"body": "warn way track", "d": "11/2016"}, {"body": "hi dan thank quick response know components start upper case read docs opened issue example illustrate issue callback null believe misunderstood something know ca nt use syntax stateless components like written example ref docs nt know also ca nt use consume stateless components workaround something else want callback stateless components nt ability change modify component consume example import third party library style external npm packages", "d": "11/2016"}, {"body": "know ca nt use syntax stateless components like written example ref docs example referring think ref docs actually show example using stateless components supported however use ref attribute inside render function functional component js function customtextinput props textinput must declared ref callback refer let textinput null function handleclick textinputfocus return nt know also ca nt use consume stateless components think also docs say explicitly may use ref attribute functional components nt instances maybe rephrase make clearer workaround something else want ref callback stateless components nt ability change modify component consume explain expect get ref class components get instance could call methods functional components instances methods expect get ref", "d": "11/2016"}, {"body": "ok give realistic example current problem write react component different conditions return depending returned something js import mycomponent mycomponent import mysecondcomponent mysecondcomponent import thirdpartycomponent somenpmpackage class container extends reactcomponent componentdidmount thismycomponent something else thismysecondcomponent something else thisthirdpartycomponent something render foo return bar return return case always null stateless component nt knew stateless component found looking source code third party library current workaround set boolean flag instead setting ref instance nt need instance need know component rendered workaround right way accomplish", "d": "11/2016"}, {"body": "looks bit like using react backwards really look like normally would repeat conditions reason expensive compute put something like state recompute necessary use methods either way refs seem wrong solution nt really need reference", "d": "11/2016"}, {"body": "really expensive compute takes lot time circumstances make sense thing reason expensive compute put something like visiblecomponent first state first thought like put state means call method allowed thought workaround checking component rendered either way refs seem wrong solution nt really need reference yes think thought mistake nt know elegant solution moment", "d": "11/2016"}, {"body": "means call setstate render method allowed compute constructor initialize state depend props also recompute componentwillreceiveprops", "d": "11/2016"}, {"body": "ah see thank dan think got", "d": "11/2016"}, {"body": "anything documentation missing make click", "d": "11/2016"}, {"body": "well first least clear enough ca nt use stateless components clear stateless components ca nt use thought consume stateless components like following example clear js function customtextinput props textinput must declared ref callback refer let textinput null function handleclick textinputfocus return thought use outside nt know misunderstood oversight second think little example conditional rendering would great explains check components rendered like issue moment heavy calculation decides component rendered", "d": "11/2016"}, {"body": "second part something conditional rendering page missing think includes similar examples", "d": "11/2016"}, {"body": "think includes similar examples right read twice times think clear enough", "d": "11/2016"}, {"body": "working reimplementation react search fiber issues particular internal api definitely removed project using break instead fiber eventually provide official way create custom renderers projects like use api instead current one could use custom renderer particular reason implement internal components instead using react public api clear", "d": "11/2016"}, {"body": "thank reviewing dan great news official way create custom renderers would nice able extend augment built html renderer rather reimplementing rendering scratch reactart requires specific root element context rendering art element prefer able render ext js html components interchangeably rather manually switching contexts root element ask consider use case implementing custom renderer api chose use internal components rather using public api reasons probably important ext js codebase nt currently organized commonjs modules users ca nt import component classes way would component libraries probably safe say ext js components library prefer create reactspecific wrapper components ext js components would lot code would bloat builds said nothing set stone published package last week still fairly early certainly open suggestions improve futureproof implementation think using higher order component wrap ext js components would sustainable solution example user code would look something like javascript import reactify extjsreactor const grid reactify extgridpanel export default function mycomponent return", "d": "11/2016"}, {"body": "yes would better solution longer term think internals break every versions really rely", "d": "11/2016"}, {"body": "going close actionable us right seems like way forward", "d": "11/2016"}, {"body": "gaearon estimate fiberbased reimplementation react released version number best way track progress thank help switching higher order component turned fairly simple change little impact existing code", "d": "11/2016"}, {"body": "track progress hope react use fiber also likely provide optin months", "d": "11/2016"}, {"body": "works fine latest ios safari", "d": "11/2016"}, {"body": "yaycmyk select value tap button phone bring back native browser selector", "d": "11/2016"}, {"body": "yaycmyk ended figuring select removed dom still therefore tap button brings back menu make sense blur selects removed dom", "d": "11/2016"}, {"body": "wlingke seeing behavior see tap one options select switched button selection popover remains tap back original option nothing happens looks like webkit bug something react concerned imo", "d": "11/2016"}, {"body": "yaycmyk yea one manifestation behavior seems like component still focus blur removes problem sure webkit bug kind feels like react cleaning blurring component removing dom", "d": "11/2016"}, {"body": "nt believe still focus see webkit bug", "d": "11/2016"}, {"body": "hmm look focus directly render", "d": "11/2016"}, {"body": "dom replacement nt happened yet code see example render vdom generated guarantee replacement actually happened yet important use react lifecycle methods test appropriate times", "d": "11/2016"}, {"body": "fair enough ca nt argue thing know solves unexpected behavior blur select unmounts blurs unmount unexpected behaviors nothing unmount unexpected behaviors think something related focus element causing issues", "d": "11/2016"}, {"body": "thanks issue wikiwong read additional arguments arewhere issue basically additional argument ended bound event handler fixed really ignore argument coming ended causing problems application passing additional argument click handler expecting received second argument upgraded argument received third proxy event way pass additional arguments bind passing event handler way arguments come way nt affected order number arguments passed event handler long still passed first react since essentially bug fix going close thanks taking time fill", "d": "11/2016"}, {"body": "even second argument", "d": "11/2016"}, {"body": "gaearon call bound event handler dispatching custom event using fake node second argument ends fake event", "d": "11/2016"}, {"body": "make closure omits argument number arguments match dev prod", "d": "11/2016"}, {"body": "make closure omits argument number arguments match dev prod would mean extra function call every event dispatch dev yeah", "d": "11/2016"}, {"body": "nt costly browser events nt come enormous speeds wan na make pr", "d": "11/2016"}, {"body": "pr opened", "d": "11/2016"}, {"body": "thanks gaearon aweary", "d": "11/2016"}, {"body": "aweary fyi went route binding event handler render linter yelled reasoning found pretty interesting", "d": "11/2016"}, {"body": "would also like know answer", "d": "11/2016"}, {"body": "think changing line would enough resolve issue", "d": "11/2016"}, {"body": "could change still see message tests question think test suite pretend chromefirefox tried jsdom default intentionally set chromefirefox", "d": "11/2016"}, {"body": "right changing user agent pretending chrome test suite workaround radium suppress warning showing test output code run tests added removing lines cleared exception getting another solution found define code ran test suite adding supresses warning radium see globalnavigator useragent windows nt khtml like gecko globalconsoledebug gt also got rid exception thank response appreciate help working issue", "d": "11/2016"}, {"body": "think adding seems reasonable since pretend browser supports going close feel free continue discussion", "d": "11/2016"}, {"body": "advice solved problem nt think need discuss issue thanks help", "d": "11/2016"}, {"body": "cc zpao zertosh", "d": "11/2016"}, {"body": "legit options passed config babylon parse unfortunately craps def bug assert ignore types worked able set get effect want", "d": "11/2016"}, {"body": "update reactaddonsperf well reactperf moved", "d": "11/2016"}, {"body": "weird actually old version nt showing needing bump try", "d": "11/2016"}, {"body": "please keep version sync causing issue", "d": "11/2016"}, {"body": "thanks guys case anyone else comes across issue specifically demanding right raised issue repo", "d": "11/2016"}, {"body": "recommend using jest testing react native instead use fb maintain", "d": "11/2016"}, {"body": "gaearon cheers personally dislike jest thanks advice thinking moving tap point nt think jest would step right direction anyway", "d": "11/2016"}, {"body": "fyi last tried jest year ago give another try changed lot thing common previous project name", "d": "11/2016"}, {"body": "ago maybe six months think try soon trying move away tools much really difficult decouple dependency later line", "d": "11/2016"}, {"body": "anyone comes across trying update update tools reporting latest version fact exist right try explicitly installing instead works fine versions note experienced thing", "d": "11/2016"}, {"body": "weird using custom npm registry checked", "d": "11/2016"}, {"body": "gaearon using custom npm registry correct indeed npm may something fact package installed exact version trying update exact version auto updater failed however installing latest version used instead working fine everything working certain gotten invalid package upon using updater perhaps false positive dependency conflict wish information share case easy resolve others able find discussion really even need future readers please ignore comment", "d": "11/2016"}, {"body": "help", "d": "11/2016"}, {"body": "artursgirons share test case reproducing issue", "d": "11/2016"}, {"body": "aweary tight schedule one else experience reproduciblesharable bits try time moved back", "d": "11/2016"}, {"body": "would definitely need reproducing example investigate", "d": "11/2016"}, {"body": "sorry related", "d": "11/2016"}, {"body": "narrowed problem bit build option set renders fine render instead adds extra funky character mean web pack bug say sometimes hard determine react ends web pack starts", "d": "11/2016"}, {"body": "mean web pack bug reproduce issue without react changing causes issue likely webpack issue always verify creating small bundle plain javascript files see occurs well", "d": "11/2016"}, {"body": "looks like someone reported issue webpack", "d": "11/2016"}, {"body": "looks like nt react issue closing feel free reopen wrong", "d": "11/2016"}, {"body": "yes agree though never quite solved webpack side bottom line webpack spitting something different dev mode prod mode ended fixing issue adding charset script tag also wrote blog post", "d": "11/2016"}, {"body": "please refer thread branch unmaintained many months beta stable already", "d": "11/2016"}, {"body": "using different versions react define render components project supported ca nt really help compatible", "d": "11/2016"}, {"body": "nt think anything specific react general usage question would encourage determine make work button js see works react", "d": "11/2016"}, {"body": "nevermind found supported", "d": "11/2016"}, {"body": "yea sorry refs work ca nt tried", "d": "11/2016"}, {"body": "think vast majority content folder either useless outdated replace completely something useful nt time work assigning lacker figure", "d": "11/2016"}, {"body": "err yeah realize examples directory existed whole lot examples inline documentation like nt every codepen basically example looked basically seem like valuable exception fiber example seems much example place people stash code small oneoff tool fine suppose proposal remove except fiber curious anyone objects perhaps jqueryspecific webcomponentsspecific examples imo better example something elsewhere internet value us providing worse one pretty much everything falls category", "d": "11/2016"}, {"body": "fine removing except basicjsx fiber useful testing need renamed fixtures something people nt look", "d": "11/2016"}, {"body": "feature keeping examples project directory sandbox purposes many different build setups like createreactapp try react fastest way comfortable environment really reasonable idea remove", "d": "11/2016"}, {"body": "nt currently plan make changes proptypes welcome create package implementing something like personally would suggest defining common proptypes separately injected ones use js const proptypes foo proptypesstring const injectedproptypes bar proptypesstring commentproptypes proptypes injectedproptypes const connectedcomment connect mapstatetoprops comment connectedcommentproptypes proptypes export default connectedcomment hope helps", "d": "11/2016"}, {"body": "reproduce without rollup", "d": "11/2016"}, {"body": "easily sure know code playgrounds module ideas fwiw obviously works possible sideeffect module bundling tried replacing buble babel problem", "d": "11/2016"}, {"body": "might rollup bug", "d": "11/2016"}, {"body": "seeing rollup believe rollup bug trimming much code output opened issue", "d": "11/2016"}, {"body": "ah sweet closing", "d": "11/2016"}, {"body": "could fixed well though declaring variable multiple times scope nt seem clean fix", "d": "11/2016"}, {"body": "use case specifying templates nonreact libraries jsx might widely applicable templates known statically server could turn html could render dom empty element read inner html", "d": "11/2016"}, {"body": "different usecase using rendertostring save svg clientside suppose using inner html dom element would sufficient well", "d": "11/2016"}, {"body": "guess update selectivity also render outofdom use", "d": "11/2016"}, {"body": "worth even nt technically case thinking separating dom renderer server renderer anyway future", "d": "11/2016"}, {"body": "saying nt rely dom server able share code react dom anyway right close issue agree seems using dom server client dead end anyway least selectivity patched longer rely", "d": "11/2016"}, {"body": "yea right separating useful speeding server rendering skips unnecessary clientonly code paths making client rendering code thinner", "d": "11/2016"}, {"body": "seriously breaking change take ci systems documented somewhere", "d": "11/2016"}, {"body": "take ci systems", "d": "11/2016"}, {"body": "think various experiences bug let keep constructive see something focus positive negative comments", "d": "11/2016"}, {"body": "indeed frustrating ship sailed sorry screwed released rc month ago publicly asked feedback unfortunately nobody reported issue even discovered stable release sorry breaking cis hopefully fix nt complex", "d": "11/2016"}, {"body": "im experiencing integrating mocha typescript", "d": "11/2016"}, {"body": "need add dependency unless new information issue think comments helpful sorry", "d": "11/2016"}, {"body": "work around make ci work make sure app contains follow dependencies version reactaddonstestutils react reactdom", "d": "11/2016"}, {"body": "version using know called reactmount directly updating v fixed issue", "d": "11/2016"}, {"body": "thanks roccoc using let test v still curious understand reacttestrenderer gone", "d": "11/2016"}, {"body": "reacttestrenderer gone npm package importing officially supported implementation detail reactmount moved internal module removed eventually nt rely tools relying internal modules rhl maintained supported long time", "d": "11/2016"}, {"body": "thanks clarifying got jest documentation checked documentation date make sure update code well", "d": "11/2016"}, {"body": "ok make pr", "d": "11/2016"}, {"body": "please explain testing presence proptypes helping examples product code would helpful", "d": "11/2016"}, {"body": "cc spicyj nhunzaker", "d": "11/2016"}, {"body": "target element take deeper look later tonight first hunch need look way filters disabled elements bails target element disabled nt know account cases target element lives inside disabled element target wonder skipping past disabled element filter leading two phased dispatch bubbling capturing bubbles result would event dispatch button span purely speculative maybe help spicyj look hours", "d": "11/2016"}, {"body": "target element without works expected dispatch event", "d": "11/2016"}, {"body": "roccoc react manipulates field bubbles events component tree wonder performantly crawl tree see element disabled", "d": "11/2016"}, {"body": "see function seems handle whether mouse event prevented based component instance tag prop simpleeventplugin function passing event target case actual dispatch target listener assigned eg adding end fixes probably cleaner way", "d": "11/2016"}, {"body": "traversetwophase ends calling every element target element parent tree eventually finding disabled button listener thanks listeneratphase listener later executed point step check see instance listener disabled maybe early", "d": "11/2016"}, {"body": "adding end extractevents fixes probably cleaner way roccoc one issue arrays may cases listeners dispatched nt introduce logic make polymorphic result nt ideal think would better could prevent listener registered event first place", "d": "11/2016"}, {"body": "think would better could prevent listener registered event first place aweary aye happy dig unless someone already taken test case", "d": "11/2016"}, {"body": "following aweary thoughts first looked avoiding subscription together however turns additional things figure react updates component addsremoves event listeners based whether changed problematic disabling events changing prop separate operation attachingremoving listeners prevent disabled elements attaching mouse events need make sure attached element stops disabled simplest solution appear making smarter modifying javascript function shouldpreventmouseevent inst inst var focus inst return false basically bubble tree see child within disabled parent return truefalse element interactive side note looks like substantial difference event implementation master might need implement different versions think solution could principle", "d": "11/2016"}, {"body": "sent pr discussion", "d": "11/2016"}, {"body": "reason facebook decides companies product infringed ip moment facebook decides enter litigation company company longer license use react think part incorrect patent grant specifically mentions nt terminate facebook sues patents first additional patent grant facebook bsdpatents license terminate facebook sues patent infringement first respond patent counterclaim facebook unless patent counterclaim related facebook software licensed facebook bsdpatents license", "d": "11/2016"}, {"body": "cc spicyj", "d": "11/2016"}, {"body": "hi thanks report rely packages rely undocumented private apis consider keeping react version pinned never safe rely internal apis never supported officially ca nt consider private apis part semver way tell particular change internals would break library reaching unsupported way using react asked people test rc month unfortunately nothing force libraries using private apis stop start using flat bundles please reach maintainers ask get merged might break later reaching internal apis supported never", "d": "11/2016"}, {"body": "authors draftjsexporthtml facebookowned module", "d": "11/2016"}, {"body": "hi thanks report need find library imports file issue never officially supported noted release notes however possibility imported private apis package rely might use would like remind never supported apps rely internal apis react internals keep changing work make react better warned change month ago libraries reached internal apis could updated issue actionable us close webpack print name module tried import able tell library fault file issue temporary fix library could start importing instead also guaranteed break future never supported support reaching internal modules", "d": "11/2016"}, {"body": "never supported support reaching internal modules gaearon tell require coming latest nonbeta release according javascript prependtext react hot loader modulehot function var reacthotapi require jsonstringify requireresolve reacthotapi rootinstanceprovider require jsonstringify requireresolve rootinstanceprovider reactmount require reactlibreactmount react require react join", "d": "11/2016"}, {"body": "react hot loader unsupported year please use work without reaching internal modules", "d": "11/2016"}, {"body": "hey gaearon fair enough thanks might offtopic official stable release near future fair miss documentation mentioned requirement use still feels bit unintuitive forced use prereleasebeta version", "d": "11/2016"}, {"body": "please reach project maintainers ca nt say actively involved right", "d": "11/2016"}, {"body": "trouble getting reproduce like say however issue minimal setup getting undefined help clarify case investigate better", "d": "11/2016"}, {"body": "fiddle demonstrating broken module reactdom change path reactdom work", "d": "11/2016"}, {"body": "zpao change appjs get exactly behaviour described", "d": "11/2016"}, {"body": "zpao think different behavior comes different requirejs setups get error java library integrates react apache tapestry framework specific problem seems anonymous define inner wrapper change error goes away problem probably caused double wrappers spent time trying get work nt succeed", "d": "11/2016"}, {"body": "today encountered error using loader load reactdom nt know error issue specific error message", "d": "11/2016"}, {"body": "seem exact issue upgrade newest version reactdom undefined switch back every thing works fine without changing line source code currently changed back course best solution long term solution", "d": "11/2016"}, {"body": "joesky", "d": "11/2016"}, {"body": "looks like define require wrong way round possibly nt even need require return result f define callback even swap around would never get reactdom object require scripts", "d": "11/2016"}, {"body": "ah could nt get work yesterday gist broken read instead make work applying diff reactdom reactdomjs requirejs else typeof define function amp amp defineamd require react f define react f", "d": "11/2016"}, {"body": "try submitting fix", "d": "11/2016"}, {"body": "nt want sign cla", "d": "11/2016"}, {"body": "unrelated issue particular reason nt want sign reading cla basically says actually wrote code give us copyright patent rights contribution necessary us safely include open source project anything controversial", "d": "11/2016"}, {"body": "confirm fixes issue", "d": "11/2016"}, {"body": "ca nt easily reverse order require amp define internal one one generated part browserifying might write umd wrapper piece instead try things need make sure continues working webpack globals", "d": "11/2016"}, {"body": "umd output created via babel", "d": "11/2016"}, {"body": "nope internal umd created browserify outer one handrolled", "d": "11/2016"}, {"body": "ouch see problem", "d": "11/2016"}, {"body": "unrelated issue particular reason nt want sign yes lawyer nt necessary knowledge things sure exact consequences sign cla actually nt want bothered things like help make hard nt", "d": "11/2016"}, {"body": "hit error systemjs", "d": "11/2016"}, {"body": "react still works reactdom seems broken indeed gt looking trying lot things shims everything without luck hardcode react sake deploy scheme", "d": "11/2016"}, {"body": "somebody please point failing systemjs example seem find one", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "confirm requirejs works fine unfortunately ca nt say", "d": "11/2016"}, {"body": "thanks aware issue exists working fix", "d": "11/2016"}, {"body": "run issue well systemjs solution explicitly tell systemjs format reactdom meta", "d": "11/2016"}, {"body": "alexisvincent released fixes amd support confirm works", "d": "11/2016"}, {"body": "thanks zpao", "d": "11/2016"}, {"body": "try use", "d": "11/2016"}, {"body": "usually type comparison tagging things ids using dom api little inelegant aware nontest tooling use case", "d": "11/2016"}, {"body": "could explain use case detail", "d": "11/2016"}, {"body": "yaycmyk yeah finally find way may probably effect property trying", "d": "11/2016"}, {"body": "please nt rely implementation detail might change behavior future releases generally anything underscores nt documented public api docs nt public api", "d": "11/2016"}, {"body": "gaearon hello defined component instance reactcomponent used merging components html tag named want find group instance named chind named obviously isnot", "d": "11/2016"}, {"body": "gaearon yeah thanks reply could nt find another way resolve problems", "d": "11/2016"}, {"body": "vifird seen context feature js class group extends component getchildcontext return group thispropsname render const parentgroup thiscontextgroup undefined roots consolelog parentgroup parentgroup groupcontexttypes group proptypesstring groupchildcontexttypes group proptypesstring", "d": "11/2016"}, {"body": "eliseumds thanks advice really good idea scene", "d": "11/2016"}, {"body": "yaycmyk gaearon eliseumds thanks found way finally used common solution problems resolved open apis nt matter us share code main function javascript judg parentcomponent contains childcomponent export function reactcontains parentcomponent childcomponent parentcomponent childcomponent parentcomponent instanceof reactcomponent childcomponent instanceof reactcomponent return false const parentself parentcomponentreactinternalinstance const childself childcomponentreactinternalinstance const parentowner parentselfcurrentelementowner let childowner childselfcurrentelementowner childowner amp amp childowner parentself amp amp childowner parentowner childowner childownercurrentelementowner childowner return false childowner parentself return true childowner parentowner return ischild parentselfcurrentelement childselfcurrentelement judge childelement child parentelement export const ischild parentelement childelement gt parentelement childelement return false parentelement childelement return true parentelementprops parentelementpropschildren typeof parentelementpropschildren string return false let children parentelementpropschildren instanceof array parentelementpropschildren parentelementpropschildren reactchildrentoarray parentelementpropschildren let return false", "d": "11/2016"}, {"body": "note code extremely fragile likely break patch version react without warning also confusing anyone used react nt seen project please consider longer term maintainability", "d": "11/2016"}, {"body": "please back claim react size large compared angular curious stats saying true first time heard comparing minified size production version gzip well aware react larger libraries like preact also different feature sets example react supports fully controlled inputs batching across subtrees normalization events features found useful using production several years large products different reactinspired projects pick different sets tradeoffs think fine wo nt spending effort optimizing build size fiber ready think fiber easier optimize later step unlike smaller libraries nt luxury throwing away legacy apis every month move slowly big products move together us means innovations deprecations lag behind leaner libraries also ensures healthy ecosystem smoothly move whole close specific actionable issue find issues pull requests specific points mentioned reasons nt moving forward address fiber work done cheers", "d": "11/2016"}, {"body": "nt think currently way make new container short making new root view native land starts new tree automatically", "d": "11/2016"}, {"body": "think generally valid assumption dom nodes mutable extensible react certainly alone comes said extending nodes done careful consideration necessary case used associate dom nodes internal instances far know required want able get closest instance given node", "d": "11/2016"}, {"body": "could fall back using map nonextensible complexity code performance cost would negligible case zero nonextensible dom elements exist", "d": "11/2016"}, {"body": "changed use prop pass error bottomup instead topdown wo nt need feature joy", "d": "11/2016"}, {"body": "please use proptypesinstanceof error", "d": "11/2016"}, {"body": "anyone interested made component tries allow delayed mounting unmounting components", "d": "11/2016"}, {"body": "help give instance rather element", "d": "11/2016"}, {"body": "gaearon exactly needed thanks ok let say getting instance access elements way would access ref element instances normal rendering question elements enough instances since shallow rendering point render layer think elements would enough even though completely consistent normal rendering getting late try get first draft done tomorrow", "d": "11/2016"}, {"body": "ok another question guys necessary shallow render without owner context yes quick explaination would nice nt get would solve problem facing right string refs currently throw unmounting nt owner", "d": "11/2016"}, {"body": "nevermind answer owner ca nt assert result jsx", "d": "11/2016"}, {"body": "took bit time expected followup", "d": "11/2016"}, {"body": "seems like fine idea want send pull request tag", "d": "11/2016"}, {"body": "undefined component mean please provide example code", "d": "11/2016"}, {"body": "able reproduce error clean app created createreactapp try explain found app uses reactrouter requires login placed logic shows login popup app component render method like javascript thispropstoken amp amp thispropschildren navigating page method property someundefinedfield undefined accidentially click login button token props updated string value point react crashes error piece code react following found iterates elements already unmounted added method saw react tries call gethostnode component already unmounted object empty moment found two ways prevent react crashing first replace second replace corrections react nt crash error calling undefined function shown console", "d": "11/2016"}, {"body": "dema confident nt promise swallowing original error like catch block nt handle network request also setstate call common mistake people use promises react original error gets swallowed react inconsistent state next errors cryptic", "d": "11/2016"}, {"body": "yeah actually could case fails error even make mistake render function try investigate thank much", "d": "11/2016"}, {"body": "yep absolutely right exactly scenario described likely error reduxform package using forms added bug report spent three hours debugging", "d": "11/2016"}, {"body": "suggestions apply monkey patch similar work around app would greatly appreciated forking building npm package seems like pita", "d": "11/2016"}, {"body": "apsoto curious mean say react work around bug splitting line function multiple statements show exact code used see two potential culprits one opera may using floats instead doubles numbers incorrectly converting function would allow result fit within floats thus become deterministic compute poor checksum opera bug executed wrong order monkeypatching using nonbundled npm version able either substitute module via bundler simply physically replace file bundling", "d": "11/2016"}, {"body": "wrt multiple statements diff tried locally works testing far lt b datacharcodeat datacharcodeat datacharcodeat datacharcodeat wrt monkey patching able vendor react app use webpack alias build issues heroku expand comments monkey patching thanks", "d": "11/2016"}, {"body": "apsoto syranide ran opera definitely browser bug clauses every clause calculated properly second clause always returning old rather new value apsoto check try adding clauses change increments set second one zero see value agrees get engines suggested changes apsoto seem reasonable probably would increments directly skip intermediate variables", "d": "11/2016"}, {"body": "thanks debugging interesting bug reason done way begin performance reasons specific path really really hot sure much really care still probably phased future possibility feature test provide workaround implementation broken browsers go general workaround understand following three work benchmarking probably reveal one faster care much cc jimfb", "d": "11/2016"}, {"body": "syranide last one original sheetjs version nt suffer sauce labs browser test badge shows opera part test suite looking original code decided unroll part assume bug", "d": "11/2016"}, {"body": "nesting said clause also shows test may quirk bug pretty sure nt pretty much ca nt due handling version significantly faster heavily optimized simply became apparent contributing significant running time server rendering specific statement also constitutes majority running time implementation unrolling makes fast anyway let wait see devs feel", "d": "11/2016"}, {"body": "syranide splitting first comment lines would help clarify think best approach unroll steps fix effectively noop second block sure whether using dummy step faster slower using increment steps specific statement also constitutes majority running time implementation unrolling makes fast sure nt mask removed sheetjs picks low byte character code whereas nt assume removed performance reasons nb nt understand chosen looking back root sheetjs code readme explains magic number magic numbers chosen overflow integer subtract elements unicode case since version nt conversion equivalent would bstr version use", "d": "11/2016"}, {"body": "good point realistically less two steps faster seems less hacky sure whether using dummy step faster slower using increment steps positive faster sure much matters way benchmarked fastest sure nt mask removed matters obviously time spent specific loop every little bit big impact nb nt understand chosen benchmarked every possible combination back try lower values intentionally stay within integers found nt actually improve performance also overflow quicker due using mask end simply chosen seemed sweetspot benchmarking wo nt overflow floating point integers lower higher generally reduced performance", "d": "11/2016"}, {"body": "easy access opera mac desktop embedded device need check anything otherwise assume good hands fyi although old browser decent footprint tivo half deployed set tops know devices nt know installed base since older probably widely distributed embedded devices nt move fast like desktops", "d": "11/2016"}, {"body": "want js import unmountcomponentatnode render unstablerendersubtreeintocontainer reactdom export default class portal extends purecomponent static proptypes children proptypesnodeisrequired note need receive context componentdidmount thisel documentcreateelement div documentbodyappendchild thisel renderintoel children context gt unstablerendersubtreeintocontainer lt nt forget first argument thisel stable api keep offer better way", "d": "11/2016"}, {"body": "gaearon worked thank reason contexttypes treated differently proptypes regard portal longer receiving context react still know rerender context changes", "d": "11/2016"}, {"body": "portal longer receiving context react still know rerender context changes yes general relying context updates recommended significant problems current implementation reason contexttypes treated differently proptypes regard adhoc api nt really thought idea limit damage encapsulation posed context indeed relying like api bit weird nt forget context called experimental documentation recommends use unless really know", "d": "11/2016"}, {"body": "read thread linked bit might little naive posting main thread issue would nt access context regardless contexttypes childcontexttypes resolve issue middle component blocking render bottom component due knowing context used children way onus person defines custom shouldcomponentupdate determine whether children using context", "d": "11/2016"}, {"body": "tried playing around catching error event jsdom dispatches window kind going fine conflicts tests ideas might getting wrong", "d": "11/2016"}, {"body": "got working using onerror suggestion added pr edit low behold issue franciscofsales good catch closing pr", "d": "11/2016"}, {"body": "exactly done apart naming comment sure trigger issue", "d": "11/2016"}, {"body": "got added thanks", "d": "11/2016"}, {"body": "franciscofsales ah indeed rad fb confirm probably never problem nt listened hence issue good stuff", "d": "11/2016"}, {"body": "yeah think got answer commit actually spying turns thanks", "d": "11/2016"}, {"body": "think examples good enough perhaps could link reference docs", "d": "11/2016"}, {"body": "yes wanted show purecomponents coworker found hard understand bc nt examples page sent link think would nice link pure component page", "d": "11/2016"}, {"body": "discouraged use pure component also agree documentation little scattered", "d": "11/2016"}, {"body": "lucasaragno ok want send pr adding line linking examples mmdonaldson nt discouraged", "d": "11/2016"}, {"body": "issue react issue jest specifically prettyformat fixed please make sure using latest version jest", "d": "11/2016"}, {"body": "nice thanks", "d": "11/2016"}, {"body": "followed examples pointed page anyone know page date accurate", "d": "11/2016"}, {"body": "issue react appears problem babel transpiles tried using classes like example linked example notice js define webcomponent var proto objectcreate htmlelementprototype attachedcallback value function var mountpoint documentcreateelement span thiscreateshadowroot appendchild mountpoint closing actionable react team might want report babel", "d": "11/2016"}, {"body": "babel class transform support extending native types", "d": "11/2016"}, {"body": "also following examples using syntax extending native types maybe need newer version babel example snippet article", "d": "11/2016"}, {"body": "burtonsamogradadsk kovensky wrote babel class transform nt support extending builtins either disable class transform thus give older browsers use shown", "d": "11/2016"}, {"body": "react component model relation ejbcomnet components react sense stateful pieces ui arbitrary packages like systems react component model influenced functional programming learn reading react docs closing issue actionable us use issue tracker bugs feature requests", "d": "11/2016"}, {"body": "founded workaround case use reactcloneelement instead hoc works ok complicated logic prop injecting needed instead", "d": "11/2016"}, {"body": "anyone wants claim please comment everyone knows", "d": "11/2016"}, {"body": "would nt mind giving go please nt let stop anyone else trying either", "d": "11/2016"}, {"body": "peterp sure nt want people work really hard pr find end someone else already submitted fix please comment ifwhen willing commit finishing pr", "d": "11/2016"}, {"body": "look either afraid work really hard someone else instead also known learning awesome stuff", "d": "11/2016"}, {"body": "would love take look", "d": "11/2016"}, {"body": "take look sure able something may helps undestand anyway", "d": "11/2016"}, {"body": "another option since needed class components could add root field class instead", "d": "11/2016"}, {"body": "intuitively feels problem scheduling root fiber", "d": "11/2016"}, {"body": "need extra work purpose satisfying scheduling problems error scenario done wrong tradeoff imo error handling bonus", "d": "11/2016"}, {"body": "mean part ca nt assume root tree scheduled pending work", "d": "11/2016"}, {"body": "yea", "d": "11/2016"}, {"body": "agree tradeoff analysis sure solve though", "d": "11/2016"}, {"body": "roots unscheduled uncaught error thrown tree help understand happens conceptually work invalidated clear priority flag entire tree get consistent state", "d": "11/2016"}, {"body": "gaearon probably explain better uncaught error need avoid pending work tree another update work invalidated clear priority flag entire tree get consistent state seems like viable option", "d": "11/2016"}, {"body": "pending updates queue clear priority flag dropped completely", "d": "11/2016"}, {"body": "nt know nt understand case quite however currently seem breaking one invariant model priority levels pending root scheduled need understand allowed diverge", "d": "11/2016"}, {"body": "diverge master mostly hack think totally right though important invariant think clearing entire tree would also fix issue dan found never mind unrelated previous question dropping updates uncaught error makes sense conceptually think", "d": "11/2016"}, {"body": "closing favor", "d": "11/2016"}, {"body": "gosh brilliant nonsense missed add component went wrong problem solved ca nt access browser context module simply touching pass parent node documentgetelementsbytagname main constructor argument sorry disturbing issue may closed", "d": "11/2016"}, {"body": "hey fixed however looks like nt made way release yet", "d": "11/2016"}, {"body": "included release far tell point might late include since rcs change likely want tested rcs releasing", "d": "11/2016"}, {"body": "totally understandable please let know help way", "d": "11/2016"}, {"body": "think gaearon managing releases sure recent roster changes going close well since essentially duplicate fix already merged master", "d": "11/2016"}, {"body": "snakajima good catch cc lacker codepen updated", "d": "11/2016"}, {"body": "seems like good idea general update codepen fork switch link new one anyone submit new codepen submit pr linking new one snakajima aweary either interested fixing", "d": "11/2016"}, {"body": "sent pull request lacker aweary", "d": "11/2016"}, {"body": "please provide full project fiddle reproducing problem thanks", "d": "11/2016"}, {"body": "umm change code simply import react react import reactcsstransitiongroup reactaddonscsstransitiongroup import styles letterboxcss class app extends reactcomponent export default app first view project packagejson name reacttutorial version description main indexjs scripts start webpackdevserver hot host test eslint src author license isc devdependencies babelcore babelloader babelpresetreact cssloader eslint eslintconfigairbnb eslintpluginimport eslintpluginreact jsonloader styleloader webpack webpackdevserver dependencies react reactaddonscsstransitiongroup reactdom reactrouter css file exampleenter opacity exampleenterexampleenteractive opacity transition opacity easein exampleleave opacity exampleleaveexampleleaveactive opacity transition opacity easein exampleappear opacity exampleappearexampleappearactive opacity transition opacity easein nt work without error plz help", "d": "11/2016"}, {"body": "noticed forgotten provide key element note must provide key attribute children reactcsstransitiongroup even rendering single item react determine children entered left stayed", "d": "11/2016"}, {"body": "even without key code seems work", "d": "11/2016"}, {"body": "well working example animating dynamically added elements based mikedklein pen loops stateitems like renarsvilnis said key prop essential without work also nt know trying achieve nt need animate element removal suggest use css keyframes", "d": "11/2016"}, {"body": "khovanskyal good point demoing key necessary trying get failing", "d": "11/2016"}, {"body": "okay seems like root cause write camelcase took hours figure", "d": "11/2016"}, {"body": "xhallix future reference get warning console using wrong casing attribute", "d": "11/2016"}, {"body": "hm get warnung would saved", "d": "11/2016"}, {"body": "would solve case immediate parent soon put one another would break anyway please nt rely context updates broken known issue see nt", "d": "11/2016"}, {"body": "good point would wise simply start referring context antipattern definitely overused lot libraries example reactrouter bugs like seem indicate never fit quite right react set ideals", "d": "11/2016"}, {"body": "useful feature projects treat static thing nt change work well react router also uses correctly latest versions far know antipattern experimental api known issues libraries need authors familiar problems", "d": "11/2016"}, {"body": "react nt strip invalid values browser ignores invalid values styles would also rather counterproductive throw warning lot code relies gracefully degrading properties nt supported browser ie infeasible react understand full specification regardless browser support actually validate values", "d": "11/2016"}, {"body": "nt think get react render instead create html element manually define properties get", "d": "11/2016"}, {"body": "sorry got using define property invalid ones automatically stripped thanks clarification example", "d": "11/2016"}, {"body": "sorry finally looks like issue internal private npm repository using directly official npm registry able install fine react", "d": "11/2016"}, {"body": "tested appears work searched events jsx search terms dropdown appeared relevant documentation suggestions suggested doc pages could selected via keys pressing enter navigates pages clicking suggested document page navigates page correct saying clicking magnifying glass anything suspect working expected", "d": "11/2016"}, {"body": "see type magnifying glass nt anything maybe could hide searching make clearer nt seem important", "d": "11/2016"}, {"body": "interesting reason confusing nothing populated dropdowns seems like small window algolia search nt firing keydown checked console errors either magnifying glass seems important dropdowns really focus looks good thanks", "d": "11/2016"}, {"body": "ah cool maybe kind network server issue glad resolved", "d": "11/2016"}, {"body": "part object restspread properties proposal ecmascript yet finalized currently stage example given operator copies keyvalue pairs onto new object overrides value cloning process rewritten use objectassign method currently spec requires polyfill updating tutorial think like docs aim use standards proposed language features however proposed features popular like object spread added afterthought indicating clearly needs polyfilltranspileretc case however might suffice link docs since covered quite well", "d": "11/2016"}, {"body": "tutorial adapted facebook internal tutorial feature enabled default needs fixed docs rthor would like submit doc pr fixing", "d": "11/2016"}, {"body": "sure write later week", "d": "11/2016"}, {"body": "seems resolved", "d": "11/2016"}, {"body": "looks like", "d": "11/2016"}, {"body": "think fixed master maybe", "d": "11/2016"}, {"body": "believe resolves issue code supposed released confirm still problem", "d": "11/2016"}, {"body": "breaking change cases waiting", "d": "11/2016"}, {"body": "long time browsers considerable marketshare react launched would nt allowed jsx transform work consistently would get transformed time specifically use key like valid would throw error could write work around also access property way nt like inconsistency potential fixes transforming prop jsx would issues inconsistency violate principle least surprise reason dom api nt valid use keywords property names without quotes situation better today use perhaps consider idea migration something would invasive lot changes made last years would harder supporting would exist intermediate state gets really tricky composite components api manipulating classname going close talked ad nauseam last years say change wo nt happen point nt need keep issues open topic", "d": "11/2016"}, {"body": "sure late mention squarespace version transition group essentially uses approach fork reacttransitiongroup planning open sourcing library near future go appropriate compliance open source something use pretty heavily platform bugs found already straightened gaearon interested favoring", "d": "11/2016"}, {"body": "think probably room end helping folding would great im sure best way split code feasible solution keeping current git history", "d": "11/2016"}, {"body": "would nt worry keeping history", "d": "11/2016"}, {"body": "sounds good keep updated", "d": "11/2016"}, {"body": "gaearon works want add organization move code bug taion p", "d": "11/2016"}, {"body": "gaearon think react adds ability return promise componentwillunmount hook delay unmount stuff needs use reactcsstransitiongroup uses internal react api anyway", "d": "11/2016"}, {"body": "bgnorlov react adds ability return promise componentwillunmount hook delay unmount stuff sure tangential thread discuss deferred unmounting uses internal react api anyway case far know", "d": "11/2016"}, {"body": "starting", "d": "11/2016"}, {"body": "someone access add jquense reactjs org", "d": "11/2016"}, {"body": "added taion jquense beckiechoi new react addons team admin access", "d": "11/2016"}, {"body": "could also create proptypes demand example", "d": "11/2016"}, {"body": "would defeat point including even code rather making production bundle smaller", "d": "11/2016"}, {"body": "going take look also noticed handling events doc could use formatting make easier read things like headers indicating topic discussed", "d": "11/2016"}, {"body": "way frazer alternative extra param approach could use attribute trying identify clicked element js function openslideshow e consolelog etargetname", "d": "11/2016"}, {"body": "hey lacker taking look issue suggestions revisions event handling documentation submitted pr wanted discuss section binding class syntax perhaps could turn issue general event handling changes issue regarding class section feel goes little deep whole issue event handling document covering stuff like property initializers whatnot think better separate document deep diving issue could briefly reference event handling doc", "d": "11/2016"}, {"body": "think adding content eventhandling doc account common cases would useful long document right lines structurally nt think time split multiple documents wish go deep binding nt think really handle events using best practices without learning everything document goal doc explain eventhandling best practices annoying truth need learn binding handle events well react", "d": "11/2016"}, {"body": "thanks suggestion hedgerh back original question openslideshow viewingwhat thispropstoggleslideview viewingwhat wanted handle event openslideshow nt clear perhaps openslideshow viewingwhat event consolelog viewingwhat consolelog etargetname clear put event parameter", "d": "11/2016"}, {"body": "mobile ca nt code blocks used thisopenslideshowbind due handler second param would event prefer handler dan mentioned onclick e gt thisopenslideshow e due make e first param method wed nov pm frazer kirkman notifications githubcom wrote thanks suggestion hedgerh back original question openslideshow viewingwhat thispropstoggleslideview viewingwhat wanted handle event openslideshow nt clear perhaps openslideshow viewingwhat event consolelog viewingwhat consolelog etargetname clear put event parameter receiving mentioned reply email directly view github mute thread", "d": "11/2016"}, {"body": "frazer hey home computer let know answered question bc sure", "d": "11/2016"}, {"body": "hedgerh yes answered perfectly guess think examples documentation", "d": "11/2016"}, {"body": "frazer yeah add curious think using attribute element instead using extra param identify button clicked js openslideshow e thispropstoggleslideview etargetname", "d": "11/2016"}, {"body": "seem like handy tricks rather necessary thing learn example knowledge docs could make shim function like openslideshow opendueslideshow thisopenslideshow due openallslideshow thisopenslideshow later render wrong well couple extra lines code totally works suggestions nice know pretty noncritical ca nt figure knowledge binding basically include example something something people need learn either using best practices get feature work small improvement ok leave docs", "d": "11/2016"}, {"body": "lacker consider instead static buttons buttons created dynamically think worth documenting section use technique past think use cases require identifying child clickedchanged", "d": "11/2016"}, {"body": "ehhhhhh ok guess fair advantage arrow functions ca nt think would rather nudge people away bind", "d": "11/2016"}, {"body": "ca nt think either think way go wed nov pm kevin lacker notifications githubcom wrote ehhhhhh ok guess fair bind advantage arrow functions ca nt think would rather nudge people away bind receiving mentioned reply email directly view github mute thread", "d": "11/2016"}, {"body": "showing pass parameters function essential way thinking functions true e gt somefunc e x creates copy somefunc time bind one advantage bind", "d": "11/2016"}, {"body": "hmm think may actually opposite bind function executes every render returning new context bound first param applied arrow function nt evaluated button clicked nt think issue someone correct im wrong", "d": "11/2016"}, {"body": "bind arrowfunction ways binding parameter create new function every time repetitive shim function basically call every use creates new function way around still binding callback calling constructor thinking crisp clear pattern right thing suggest different patterns without strong recommendation muddling issue think punt advocate one particular way docs", "d": "11/2016"}, {"body": "hmm nt cover different approaches dealing binding issues using classes", "d": "11/2016"}, {"body": "yeah definitely grey area feel like really clarifying add examples ways bind morecomplex scenarios though point need tell people need learn binding build complicated things think point going past scenarios docs read binding think", "d": "11/2016"}, {"body": "honestly board mentioning arrow approach calling day nt necessarily saying better way someone knows partially apply extra param approach already nt really thrown loop could even say need pass extra parameter event handler one way suggest method nt necessarily advocating", "d": "11/2016"}, {"body": "anyone working like take might questions though getting started", "d": "11/2016"}, {"body": "yeah working awaiting final review news getting merged gaearon p", "d": "11/2016"}, {"body": "rthor ah okay stuff left checklist", "d": "11/2016"}, {"body": "maintain catalog componentslibraries brilloutawesomereactcomponents devarchycomreactcomponents maybe could make sense mention catalog doc", "d": "11/2016"}, {"body": "gaearon item checklist nt occupied atm", "d": "11/2016"}, {"body": "created pull request glossary terms would love feedback", "d": "11/2016"}, {"body": "take reactperf include basic usage example reference anybody already", "d": "11/2016"}, {"body": "laumair think animation react motion last two snapshot publishing yet taken comments", "d": "11/2016"}, {"body": "think take publishing", "d": "11/2016"}, {"body": "thoughts regarding community resources section document think compile resources newcomers nt going already come across couple random google searches rather getting started react tutorials react video courses like point people communities like reactiflux reactjs irc invaluable like point people blog postsarticles cause light bulbs go read dan post smartdumb containers pretty quintessential reading newcomers point also resources cover things like better pattern pass prop component needs individually pass whole data object single prop beyond think guide places community find good resources", "d": "11/2016"}, {"body": "hedgerh sounds good overall although think really remove stuff believe lower quality random google search therefore recommend rather removing stuff theorize newcomers come across googling still helpful say believe best video courses", "d": "11/2016"}, {"body": "lacker good point totally cool long nt become link dump", "d": "11/2016"}, {"body": "working publishing component", "d": "11/2016"}, {"body": "hello new react feel could contribute accessibility guide tell roughly would like see accessibility guide gaearon", "d": "11/2016"}, {"body": "would love finally contribute seems portals snapshot testing available recently delving portals modals reactoverlays love jump snapshot testing want talk", "d": "11/2016"}, {"body": "julen valuable tips integrated relevant content nt many antipatterns react despite people say something bad try disallow api level", "d": "11/2016"}, {"body": "tiny possible typo referencereactmd code omits could slightly confusing newcomers", "d": "11/2016"}, {"body": "happening also someone confirm without updating chrome prod version react run smooth aweary moesattler", "d": "11/2016"}, {"body": "encountered problem look code gulptaskseslintjs find following code spawns new process using command node nodemodulesbineslintcmd command tries interpret batch file using node however node interpret js files syntaxerror change like work expected", "d": "11/2016"}, {"body": "jddxf would like send pr working fix", "d": "11/2016"}, {"body": "gaearon sure fix problem gulp flow task", "d": "11/2016"}, {"body": "hi thanks writing thoughts great realize weeks since wrote one bit nt quite understand may misreading missing something generator functions section say biggest reason however generators stateful ca nt resume middle want execute across multiple time slices step however get update b already completed way reuse value x ie skip ahead different value b still reuse result important react since lot memoization would nt memoization actually make nonissue assuming memoized function calling value would fast effectively allowing skip heavy work continue nt know functions represent maybe possible memoize way", "d": "11/2016"}, {"body": "really placeholder work within generator may expensive problem memoization doexpensiveworka react nt opportunity inject memoization including local memoization strategy using parent context keys could use global memoization method end cache invalidation problems instead", "d": "11/2016"}, {"body": "makes sense thanks clarifying", "d": "11/2016"}, {"body": "help watch intro fiber read clone react repo run run unit tests fiber pick failing test try fix unless fits broader group claimed someone first comment run verify tests passing fiber submit pr note contributing hard right get easier pieces eg dom attributes events place long trail issues community really help feeling adventurous give go check older fiber prs inspiration pieces information example fiber easy pr", "d": "11/2016"}, {"body": "believe close thanks", "d": "11/2016"}, {"body": "supportive effort property makes sense accomodate react model go route things define different prop wc listener button element payload event calling callback main concern shape event object potential confusions around today based example robdodson events custom events object arbitrary shape differ existing practices knowledge base fight eg click event always comes target reference think bikeshed around name property really collection events break past call event handlers", "d": "11/2016"}, {"body": "think bikeshed around name property really collection events break past call event handlers let put neutral support generic coopting property name apply every custom element created anyone cooperation react name generic could easily used say web component accept list calendar events display", "d": "11/2016"}, {"body": "name generic events could easily used say web component accept list calendar events display exactly discussing using specific syntax ie prefix events attributes skate though would specific skate virtual dom allows consumer choose exactly prevents clashes one thing react could would like originally proposed web components could expose properties add remove event listeners class mycomponent extends htmlelement set onsomeevent handler thisaddeventlistener someevent handler customelementsdefine mycomponent mycomponent const elem new mycomponent elemonsomeevent consolelog elemdispatchevent new event someevent think like proposal purposes instead using specific syntax", "d": "11/2016"}, {"body": "one thing react could would objectassign like originally proposed web components could expose properties add remove event listeners nt like either using properties forces web components frameworks implement extra code dictated react order users able use simple event syntax react instead react declarative syntax interact standardized dom events api want completely avoid possibility property name collision use symbol property react uses internally personally speaking though react devs accept official interface parties inject custom event implementations kind like current unofficial interface better party event modules using symbols rather string property names collision would nt mind alternative anyone write module register custom events react whatever pattern used various web component implementations", "d": "11/2016"}, {"body": "treshugart think putting burden writing event handler properties custom elements author wrong approach extra code wo nt always implemented basically impossible emulate platform using properties nt support bubbling capturing event handlers unless add property would problematic easy binding library offer syntax differentiates attributes properties events canonical api adding handlers imo libraries support", "d": "11/2016"}, {"body": "dantman good point like symbol suggestion justinfagnani agree extra code dislike given nt think method could emulate setting via symbol via react using custom syntax would nt either right reason proposing much inline original proposal actually would nt mind convention web components build expose properties corresponding custom events supported component enables declarative api without leaving templating engine custom semantics around binds events templating engine needs something like incremental dom default function set prop anything else set attribute wish prop time though edit clear prefer using symbol approach proposal", "d": "11/2016"}, {"body": "treshugart curious though react decide set props element opposed attributes could troublesome custom elements needing things set attributes aria good question may case attributes still require special case either using special syntax react set attribute react could set using kind heuristic property beginning aria gets set attribute instead worth effort underway allow set accessibility properties javascript future one piece could nonissue caridy main concern shape event object potential confusions around today based example robdodson events custom events detail object arbitrary shape differ existing practices knowledge base fight eg click event always comes target reference understand customevent inherits event therefore properties calling implicitly set target element event dispatch main unique point object hold extra data treshugart setting events via symbol via react using custom syntax would nt either right think idea would calling hood would support bubbling least component decides event dispatching bubbles actually would nt mind convention web components build expose properties corresponding custom events supported component enables declarative api without leaving templating engine custom semantics around binds events standards based way cool instance array easy way custom elements observe attribute mutations could imagine something similar like somehow would automagically generate properties", "d": "11/2016"}, {"body": "kevinsuttle updates end take", "d": "11/2016"}, {"body": "go ahead laumair got busy thanks", "d": "11/2016"}, {"body": "kevinsuttle right thanks gon na start useful resourcessuggestions mind regarding appreciate share would good starting point well", "d": "11/2016"}, {"body": "eventually figured problem two components first one prop called set prop passed children element inside compared previous next version prop lifecycle hook changed called thing focus input either inside stack props propagated still use lifecycle hook focusing way works fine fiddle case", "d": "11/2016"}, {"body": "fixed", "d": "11/2016"}, {"body": "gaearon aweary much love help think likely issue way head take look aweary though try gain better understanding problem", "d": "11/2016"}, {"body": "thisbejim case missed ended concluding supporting test renderer nt good idea see", "d": "11/2016"}, {"body": "thanks update aweary much appreciated update anyone else error solution use enzyme enzymetojson compatible snapshot testing", "d": "11/2016"}, {"body": "encountering issues react project using trying setup jest enzyme details stackoverflow question edit fixed mostly merely dependency issues", "d": "11/2016"}, {"body": "however found issue library chaienzyme requires reactlibreacttestutils moved chaienzyme html typedarray react isobject react reactaddonstestutils sortobject isregexp traverse", "d": "11/2016"}, {"body": "however found issue library chaienzyme please file library", "d": "11/2016"}, {"body": "reminder whoever releases error code process", "d": "11/2016"}, {"body": "cc aweary bgnorlov chenglou gaearon goatslacker hkal jessebeach keyanzhang mnpenner nhunzaker sebmarkbage changes shipped react", "d": "11/2016"}, {"body": "using rc release great createnodemock feature also falled error seem happen cases", "d": "11/2016"}, {"body": "simple example breaks think even different bug tested js test works gt class foo extends reactcomponent render return const inst renderercreate createnodemock gt whatever instunmount test doesnt gt class foo extends reactcomponent render return const inst renderercreate createnodemock gt whatever instunmount produce doesnt works doesnt weird refs working cases like usecases specific cases definitely break let know want investigation", "d": "11/2016"}, {"body": "guys plan fix bug makes unreliable write advanced tests", "d": "11/2016"}, {"body": "unfortunately nt lot time work react lately try make effort tonight work fix", "d": "11/2016"}, {"body": "try another look starting simple test want resolve add end suit reacttestrenderer js dynamic ref gt const onref jestfn", "d": "11/2016"}, {"body": "thanks lot providing repro cases aweary fixing", "d": "11/2016"}, {"body": "works great thanks guys fixing", "d": "11/2016"}, {"body": "sebmarkbage example use reactcreateclass use componentwillmount fetch data call setstate inside better use getinitialstate inside getinitialstate", "d": "11/2016"}, {"body": "wsite see componentdidmount docs", "d": "11/2016"}, {"body": "better use getinitialstate inside getinitialstate ca nt use fetching data synchronous", "d": "11/2016"}, {"body": "created simple vanilla js repro code js var form documentgetelementbyid form formaddeventlistener submit e gt epreventdefault var select documentcreateelement select selectrequired true var documentcreateelement option one true formappendchild select selectappendchild appending option select problem swapping avoids issue", "d": "11/2016"}, {"body": "gaearon catch handler going catch error thrown chain including one caused render due setstate call though setstate asynchronous could work like edit ahh may asynchronous goddamn scratch question", "d": "11/2016"}, {"body": "likely almostalways async future cases ca nt eg inside input event handler", "d": "11/2016"}, {"body": "issue fixed react today mocking unsupported please remove changes work", "d": "11/2016"}, {"body": "hey guys current status", "d": "11/2016"}, {"body": "going fixed soon", "d": "11/2016"}, {"body": "nt work workarounds fixed import react react import reactdom reactdom import inputswitch main import testutils reactaddonstestutils import renderer reacttestrenderer test default value comes checked prop gt const component renderercreate expect componenttojson tomatchsnapshot test onchange prop triggered checkbox value gt let onchange jestfn const component testutilsrenderintodocument testutilssimulatechange testutilsfindrendereddomcomponentwithtag component input target checked false expect onchange tobecalledwith false test suite failed run", "d": "11/2016"}, {"body": "resolved react", "d": "11/2016"}, {"body": "fixed react today", "d": "11/2016"}, {"body": "refs work test renderer master even mock return something else instead null js import react react export default class myinput extends reactcomponent componentdidmount thisinputfocus render return js import react react import myinput myinput import renderer reacttestrenderer function createnodemock element elementtype input return focus return null renders correctly gt const tree renderercreate createnodemock tojson expect tree tomatchsnapshot plans support test renderer agnostic react dom way implement way wo nt break future", "d": "11/2016"}, {"body": "reason still ca nt use jest tests details", "d": "11/2016"}, {"body": "romanoff react test renderer coupled react dom ca nt guess dom apis component relies need mock nodes noted release notes hope helps", "d": "11/2016"}, {"body": "closed fix given workaround given response validate closed state still issue", "d": "11/2016"}, {"body": "phunky closed react bug ie bug fix see", "d": "11/2016"}, {"body": "thanks quick reply", "d": "11/2016"}, {"body": "doc wrote zpao", "d": "11/2016"}, {"body": "issue caused commit changed looks like key bit changing value even identical existing value knocks browser helpers edge see removed later version something account related cc jimfb", "d": "11/2016"}, {"body": "lpadier opened pr", "d": "11/2016"}, {"body": "react except worked linux mac nt tried windows code switching following works", "d": "11/2016"}, {"body": "basically facebook steals idea sue better hope idea nt built ideas", "d": "11/2016"}, {"body": "clear nothing ideas software patents never went nt plan go process none considerations relevant business however choose use software patents offensively prepared others return", "d": "11/2016"}, {"body": "software patents patents business anything yes happy someone using ip nt go process patenting work well software seen open source projects patented something probably good reason also understand software patents bit gray area covers patents patents exist reason troll terms penalize defensive use much offensive use patents problem nt protect patent trolling patents relative react understand perfectly nt patent someone else work could argue seems far far wider say business patented widget took years develop well ca nt use react company website seems need pretty certain facebook nt going start producing widgets dump website moment rebuild without react protect business ca nt take risk seems bit pointless", "d": "11/2016"}, {"body": "want clarify two conflicting posts encompass software patents also cover hardware patents types patents example robotics company owns several hardware patents decided use react code billing web app dashboard facebook infringes robotics patents rewrite billing dashboard without react", "d": "11/2016"}, {"body": "adeelzaman lawyer patents settlements exists facebook infringes one robotics patents unlikely would throw arms air give would work agreement goes way give take also let forget react super simple core technologically revolutionary plenty alternatives facebook went warpath assuming even applicable patents absolutely sure noninfringing dropin replacement would appear healthy discussion degree also seems like people generally blowing proportion society ripe abuse easily picked locks dark alleyways dangerous people think one could safe whole plan suing facebook well taking every precaution quite sure problem anyone steal idea anyone might find way sue matter framework use even written google wrote nt mean others nt looking sue using google backing imho good thing interested defending ensure becomes widely used goes react facebook pr attracting talent", "d": "11/2016"}, {"body": "syranide thanks explanation agree lot sentiments post", "d": "11/2016"}, {"body": "ca nt repro insider preview edge", "d": "11/2016"}, {"body": "current state issue", "d": "11/2016"}, {"body": "outstanding pr looks like conflict master address conflicts update sorry looks like something ci upstreamed anyway", "d": "11/2016"}, {"body": "spam seen lot lately nov pm qagiux notifications githubcom wrote gon na first half receiving mentioned reply email directly view github mute thread", "d": "11/2016"}, {"body": "responding questions completeness superconcerned issue plugin meant reusable thirdparty mixin use cases use context ui theming sidechannel communicating reusable parent components children passed parameters eg toggle reusable component interface might look like child components need behave differently entire toggle hovered undergoing animation would use context communicate child components without polluting public api", "d": "11/2016"}, {"body": "still able reproduce issue keyboard ctrl v triggers event however rightclick mouse paste trigger reading thread seems like fixed though still nt seem stable release update thanks", "d": "11/2016"}, {"body": "hi trying use snapshot shallow works pretty cool", "d": "11/2016"}, {"body": "please provide example reproducing", "d": "11/2016"}, {"body": "thing going converting react backbone nested contexts noticed issue adding onmouseenter handlers elements event triggered twice entering element react context notice onmouseenter fires correctly fires entering pink rectangle using react karczk", "d": "11/2016"}, {"body": "root cause cases appears exception occurred component method eg exception swallowed higher exception swallowed see console identify root cause see followup errors react code already operating inconsistent state consider innocuous example imagine part login form rendered react component trycatch block prevent default behavior however calls point render throws exception get unhelpful exceptions solution particular case call inside generally entry points react like called clean call stack without trycatch blocks make sense modify defer state changes", "d": "11/2016"}, {"body": "getting bug using draftjs ca nt wrap code", "d": "11/2016"}, {"body": "explained would fix underlying problem crash somewhere code nt see first underlying error likely code swallowing check handlers especially promises people often misunderstand use direct errors react blocks react already inconsistent state without surfacing would nt help add defensive programming break somewhere later line even cryptic errors need fix errors code instead future versions react hopefully avoid problem aggressive failing fast well letting catch errors components please find errors components eg use break exceptions chrome", "d": "11/2016"}, {"body": "error use ref method batch component update like fixed scrollintoview longer raise exception maybe error issue cause exception render", "d": "11/2016"}, {"body": "fwiw got error tried override like javascript export default class extends purecomponent shouldcomponentupdate nextprops nextstate consolelog typeof supershouldcomponentupdate gt undefined user code return supershouldcomponentupdate nextprops nextstate render probably optimal allowed working right would appreciate helphint cc spicyj", "d": "11/2016"}, {"body": "also get batch error typing input field got error trying access event bubbles input element custom element time want consume event already reset null solved calling input element", "d": "11/2016"}, {"body": "mgnrsb everyone else saw error nt see original error example mgnrsb case would something like read target property null still problem part code swallows exceptions common way get problem use promises catch block attempting update ui component throws error due mistake code catch handler gets error tries render error ui assuming network error however ui already broken point earlier error never surface get confusing second error careful catching errors especially dealing promises easy accidentally catch errors code", "d": "11/2016"}, {"body": "seeing seems related reduxform interaction react current versions reduxform react seems like problem started occurring upgrading reduxform", "d": "11/2016"}, {"body": "afraid additional comments thread wo nt helpful without examples reproducing issue", "d": "11/2016"}, {"body": "viz using reduxform react issues moment also using reduxform since alpha issues react would go try identify exact source issue try removing components narrow advise checking variables using component making sure passing around anywhere gaearon suggested provide easy follow example reproducing issue", "d": "11/2016"}, {"body": "fairly minimal project reproduces error test suite shortly test legitimately errors node version npm version git clone git githubcomwkingperformupdateifnecessarybuggit bug cd bug npm install npm warn optional dep failed continuing fsevents react nodemodulesreact objectassign looseenvify jstokens fbjs uaparserjs promise isomorphicfetch corejs reactdom nodemodulesreactdom objectassign looseenvify jstokens fbjs uaparserjs promise isomorphicfetch corejs reactscripts nodemodulesreactscripts npm test consoleerror warning performupdateifnecessary unexpected batch number current pending", "d": "11/2016"}, {"body": "reproducing code bit convoluted nt seem like good reason fail reopening tagging bug help investigating error happens welcome note error relaxed warning still weird happens", "d": "11/2016"}, {"body": "thu nov dan abramov wrote reproducing code bit makes bit sense boil far full version code graph issues requested slug recursive slugfetcher nested atomic state pivots allow avoid duplicate parallel calls", "d": "11/2016"}, {"body": "error solved create class table named mftbale used pagelike render time need hide mftable guess react remove got misttake changed render well done", "d": "11/2016"}, {"body": "adding note thread workaround poscar workaround requires update release account formal split", "d": "11/2016"}, {"body": "pgoldrbx thanks advice great help despite almost beginner node ssr wrote small library facilitated well partners work proud helped anyone else", "d": "11/2016"}, {"body": "zpao ohai also seems mobile safari uses video muted attribute determine video autoplay nt enough", "d": "11/2016"}, {"body": "argue needs reopened breaks autoplay support", "d": "11/2016"}, {"body": "elements also allowed autoplay without user gesture elements allowed without user gesture source media contains audio tracks property set conflicting statements lead believe probably continue using property might need ensure set somebody issue share code issue hi aza ca nt repro problem could looking wrong thing rendering video autoplaying inline without issue ios simulator react leave autoplay", "d": "11/2016"}, {"body": "issue happening running andor params", "d": "11/2016"}, {"body": "react browsers google chrome firefox cause uncaught exception inside lot scenarios never printed console nt repro bug think everything working happens easily reproduce bug image load tag produces event since using babel browser see exception lot cases nt see", "d": "11/2016"}, {"body": "fairly new react working common dialog modal request ajax response needs displayed created component dialogmodal used bootstrap modal able get error happened removing modal onhide line number dialogmodal component changing hide error gone actually committing transaction deleted node dom hope helps one", "d": "11/2016"}, {"body": "render stream important cache server otherwise cache component memory", "d": "11/2016"}, {"body": "aickin goatslacker spicyj sebmarkbage lencioni update feature interested would like move forward anything help feature", "d": "11/2016"}, {"body": "currently working fiber complete reimplementation react core means nt seem make sense spend effort trying shoehorn streaming existing reconciler replaced fiber make easier create separate streaming server renderer would focused performance wo nt initial focus fiber becomes stable sure lot space community contributions", "d": "11/2016"}, {"body": "thanks lot update gaearon migrate markojs react nt feasible isomorphic definitely check fiber comes", "d": "11/2016"}, {"body": "documentation nt specifically say ca nt string must object null expected behavior say bug docs however also created pr fixes issue", "d": "11/2016"}, {"body": "hitting issue mnpenner", "d": "11/2016"}, {"body": "ended working around wrapping code", "d": "11/2016"}, {"body": "mhuggins work around helped", "d": "11/2016"}, {"body": "problem reading comments understood problem modal closed clicking dark background overlay clicking close button inside modal content container clicking overlay fine clicking button would cause error since also triggering event overlay adding event handler fixed issue", "d": "11/2016"}, {"body": "aweary merged conflicts issues resolved", "d": "11/2016"}, {"body": "handled packaging reconcilers", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "interested could please send pr yes think right place", "d": "11/2016"}, {"body": "browser plugin support jsx syntax natively would useful development able skip transpiling every change code moment using", "d": "11/2016"}, {"body": "misterfresh try", "d": "11/2016"}, {"body": "strange behavior bug using valueseq update react iterating twice immutablemap whereas iterating using toarray testing code anyone behavior", "d": "11/2016"}, {"body": "also tried one worked fyi part code connect get propsitems render using map part always warns", "d": "11/2016"}, {"body": "react iterating twice immutablemap valueseq", "d": "11/2016"}, {"body": "skatejs interesting opinion enclosed docs skate written top standards react authors vocal however response issue incorrect web components nature declarative html web components also completely solve integration problems libraries frameworks due nature custom elements shadow dom work custom elements provide declarative api shadow dom hides implementation details integrating frameworks writing html terms problems imperative apis fault web components force user call method fault design web component nothing stopping web component completely declarative especially written skate information web component design would interesting see react teams opinion", "d": "11/2016"}, {"body": "way worded feels like trying stir pot may may worth revising quite old interested iterating anyone input worth arguing fri nov adam thomas notifications githubcom wrote skatejs interesting opinion enclosed docs skate written top standards react authors vocal however response issue incorrect web components nature declarative html web components also completely solve integration problems libraries frameworks due nature custom elements shadow dom work custom elements provide declarative api shadow dom hides implementation details integrating frameworks writing html terms problems imperative apis fault web components force user call method fault design web component nothing stopping web component completely declarative especially written skate information web component design would interesting see react teams opinion receiving commented reply email directly view github mute thread", "d": "11/2016"}, {"body": "sorry came across way opinion crowd wisdom nt seem pointing either way argument debate", "d": "11/2016"}, {"body": "worries overly defensive comes two communities seen unfortunately participated several divisive subjective conversations privately publicly never resulted positive outcome parties dropped bias worked toward common goal interested discuss etc sat nov adam thomas notifications githubcom wrote sorry came across way opinion crowd wisdom nt seem pointing either way argument debate receiving commented reply email directly view github mute thread", "d": "11/2016"}, {"body": "chrome edge insider preview seem log", "d": "11/2016"}, {"body": "spicyj function instance different pass null old one component new one reflected documentation", "d": "11/2016"}, {"body": "unel function instance different every render react nt know function conceptually maybe passing pass needs reset ref since might never get called set ref since new one could added documentation sure matters help understand set field ref callback nt think", "d": "11/2016"}, {"body": "gaearon think important clarification cases conceptually nt expects behaviour render callback called null component unmounted second reason count calls calls whole child component lifecycle obviously less calls count heavy handlers may critical", "d": "11/2016"}, {"body": "calls whole child component lifecycle sure mean ref calls cheap typically set reference bottleneck likely wo nt think important clarification please feel free send doc pr", "d": "11/2016"}, {"body": "gaearon please feel free send doc pr", "d": "11/2016"}, {"body": "believe typo example gajus second bullet point original post say instead htmlforbar able use foobar say forbar wrong sorry distraction confusing realized though", "d": "11/2016"}, {"body": "drewwarrentiy standard placeholders things code order foo bar baz quux corge grault flarp", "d": "11/2016"}, {"body": "stonecypher feel free correct wrong example first post conversation gajus gives us two examples plugin used simplify writing jsx code instead type classname code plugin simply type class instead type htmlfor code plugin simply type however example shortens htmlfor foo believe supposed thanks reply", "d": "11/2016"}, {"body": "however example shortens htmlfor foo believe supposed typo record like withdraw support proposal working react couple years hardly ever use case practice", "d": "11/2016"}, {"body": "thank gajus coding bootcamp learning basics react helpful glad found article even deprecated helped beginner exercises appreciate response", "d": "11/2016"}, {"body": "interestingly enough continues one first installs convert project react apparently adding divisive", "d": "11/2016"}, {"body": "hurrtz currently experiencing silent errors suspect might webpack config chance webpack config files care share changed webpack", "d": "11/2016"}, {"body": "turn promise eating error flux store triggered parent", "d": "11/2016"}, {"body": "someone pass select placeholder gt empty string could also write nt recommend stay instead validation attribute works value first option element select element list options empty string visually since user select nt want displayed list used hidden attribute works perfectly chrome firefox notpartially ie edge safari", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "guys activity issue currently trouble test infinite scroll component", "d": "11/2016"}, {"body": "barsukov find way without real dom without mocking please share", "d": "11/2016"}, {"body": "tried mounting simulating events working approach one popular common another example test infinite scroll lib looks like opinion bit inconvenient perfect way probably wil bel helpful somebody", "d": "11/2016"}, {"body": "activity would see issue issue like best way fix dive happens send pr project", "d": "11/2016"}, {"body": "zpao reason nt work purpose figured would nice since would nt return anything implied would save line code", "d": "11/2016"}, {"body": "spicyj gaearon would like take bug fix", "d": "11/2016"}, {"body": "reznord cool please give try", "d": "11/2016"}, {"body": "gaearon tests failing try running npm test tell going wrong log", "d": "11/2016"}, {"body": "reznord little digging around want add comment case still interested feature code running already pr code example given works correctly detecting valid element default namespace svg however nt play nicely using check svg namespace nt work expected used since testing modern version chrome firefox safari would replaced also support old browsers searching answers correcty handle checked docs avail tried scan source see handling invalid svg elements meaningful way found nothing gaearon information think would useful see tracked property mainly knowing domnamespace test nt help us since condition still return false another closely related point would question attempt detect correct custom elements even even try detect since additional feature enabled development help developers spot tiny mistakes typo like example handle common case add check using default namespace overlooked something please let know never attempted verify valid svg tags browser interested know stable solution", "d": "11/2016"}, {"body": "think fine nt warn inside svg long nt false positives", "d": "11/2016"}, {"body": "connoratherton working made progress sending pr soon feel free send pr already worked", "d": "11/2016"}, {"body": "hollandben could give test case guess reason concurrency see", "d": "11/2016"}, {"body": "company longer work unfortunately ca nt provide code", "d": "11/2016"}, {"body": "would made thinks easier react components could accept pojos long observables props possible shown way chose observable props sense long run sense context actually", "d": "11/2016"}, {"body": "jimfb think synchronous use case think would perfect componentdidmount thisselectall componentdidupdate prevprops let shouldupdateselected prevpropsrecordtypefilter thispropsrecordtypefilter prevpropsstatusfilter thispropsstatusfilter prevpropslist thispropslist selectall thissetstate selectedids thisgetfilteredorders map order gt orderid getfilteredorders let filteredorders thispropslist", "d": "11/2016"}, {"body": "chanakasan example lacks method essential understanding example suggesting better solution second code connected custom business logic nt easy read nt hesitate explain throw copypaste others read example however would like share following thoughts use case switch component would rerender twice less preserving logic year since left discussion still see zero use case except reacting dom changes much better however would avoiding hooks moving logic method migrating stateless component nt actually state purely computed props", "d": "11/2016"}, {"body": "hi meandre thanks taking time reply read discussion page like thank participating yes needed things seems mysterious without said use still mystery think try two things suggested failed componentwillreceiveprops wo nt work function called needs newprops could nt think way derive without storing state created complete example use case made easy understand much possible could please look point right direction able understand properly share example blog post help others well", "d": "11/2016"}, {"body": "chanakasan come looks like production code gon na read help project free however point right direction access prev next props clearly seen official react docs complete copypaste code obvious use state storing selected ids user toggle fine use state still would trigger rerender twice less render gon na happen anyway would update state upcoming render please take look docs save time respect others", "d": "11/2016"}, {"body": "meandre think understand point using line docs componentwillreceiveprops invoked call thissetstate caveat using pass along nextprops functions try follow advice thanks appreciate btw nt intention help production project free full example previous short example fill blanks use case", "d": "11/2016"}, {"body": "chance revisiting issue feature would extremely useful instead manipulate classes beforehand also noticed strange behaviour compiles invalid class definition feature considered future releases cc spicyj", "d": "11/2016"}, {"body": "completely agree pgom array stringify dividing items comma ca nt bit rectify behavior use space delimiter", "d": "11/2016"}, {"body": "bit inaccurate walking code react learned property ai nt processed via custom logic strange behavior pgom mentioned could described construction react nt additional logic implementation could lead performance leaks might need checks array items allow cases like instance spicyj said solution propose", "d": "11/2016"}, {"body": "root issue fixed pull request suggested workarounds dodging real problem", "d": "11/2016"}, {"body": "etc also become controllable nt standard declarative api nt mean ca nt make one think action create completely controllable implementations see surface area way big probably would nt want bundle default small perhaps logic unified forms generic way might worth", "d": "11/2016"}, {"body": "remember declarative wrapper around audio one problem nt expect prop changes would nt get reflected ios cases turned ios ignores calls outside clicktouch event handlers something keep mind", "d": "11/2016"}, {"body": "wandered thread looking info lifecycle fire order order manage obnoxious focus stuff itemsjsx componentdidmount patentjsx componentdidmount focused right \u30c4 case including party child component focus chicanery didmount solution probably involve defer parent work fine illustrate fun times fuzzy edge react browser first guess mount order would somehow deterministic", "d": "11/2016"}, {"body": "pr related issue", "d": "11/2016"}, {"body": "use ipod render time one secondbut use android takes seven seconds android configuration ram cpu frequency gpu imagination powervr enhance user experience virtualized lists mobx solve", "d": "11/2016"}, {"body": "aldredcz really great work thanks", "d": "11/2016"}, {"body": "hi like take look", "d": "11/2016"}, {"body": "would really nice overlapping styles working hoc footer would like pass elements place according needs inside wrote following code reactbootstrap got applied would convinient point working", "d": "11/2016"}, {"body": "mere fact element render certain elements reason enough add feature order compatible web apis edit ah fragments looking forward", "d": "11/2016"}, {"body": "trusktr noted first post thread note maintainers know issue know exactly set problem solved want hard problem current architecture additional comments expressing desire feature helpful", "d": "11/2016"}, {"body": "gosh dang got ta stop", "d": "11/2016"}, {"body": "plz add", "d": "11/2016"}, {"body": "agreed fixed meantime hacked ref callback node nodestylesetproperty float right important gt", "d": "11/2016"}, {"body": "ca nt believe nt supported", "d": "11/2016"}, {"body": "rricard man", "d": "11/2016"}, {"body": "dannyleiton get breakpoint want start popup observe stack stack goes back original click fill bug report normal however case probably case stack stopping return async action graphql query apollo case finally find way prefetch query showing clickable button button could hit apollo cache get result stack", "d": "11/2016"}, {"body": "concise manner avoid network async calls click event popup creation", "d": "11/2016"}, {"body": "also think would important able load data within components sort lazy render method maybe make sides happy create new method called asyncrendertostring add new lifecycle event called something like called call asyncrender method terms code duplication server client side fixed developers moving common loading code separate method call method detecting asynconload done probably use returned promise undefined returnedmethod defined directly call applicable lifecycle events render otherwise waits promise resolves think solution like would solve hacky ways use moment proper server side rendering including example allow easy server side rendering react applications react router longer uses centralized route config right way get isomorphic applications working", "d": "11/2016"}, {"body": "solved called stream check react stream thursday november florian krauthan notifications githubcom wrote also think would important able load data within components sort lazy render method maybe make sides happy create new method called asyncrendertostring add new lifecycle event called asynconload something like called call asyncrender method terms code duplication server client side fixed developers moving common loading code separate method call method asynconload componentmount detecting asynconload done probably use returned promise undefined returnedmethod defined directly call applicable lifecycle events render otherwise waits promise resolves think solution like would solve hacky ways use moment proper server side rendering including example allow easy server side rendering react applications react router longer uses centralized route config right way get isomorphic applications working receiving subscribed thread reply email directly view github mute thread", "d": "11/2016"}, {"body": "search react stream find project least based documentation way lifecycle event preloading data delays next render call subchilds promise resolved talking something else", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "hacky ways requires routing independent component tree main component route includes know data needs loaded works time always would obsolete react delayed component render", "d": "11/2016"}, {"body": "agree probably thing hate right react hate people try defend framework feature saying done manually course like everything related software development nt mean fact tons modules taking care precise thing make point something solved within framework", "d": "11/2016"}, {"body": "nextjs serverside rendering unfortunately still need call child parents way back root apollo graphql client also allows traverse tree gather data requirements serverside sending everything back example next apollo would great async react component lifecycle methods combine things together learned ssr week hope write makes sense cc nkzawa stubailo", "d": "11/2016"}, {"body": "btw already async help", "d": "11/2016"}, {"body": "sedubois react wait promise resolve rendering otherwise nt really help", "d": "11/2016"}, {"body": "olalonde seems", "d": "11/2016"}, {"body": "sedubois note example returns promise screenshots show react nt wait could nt promise renders text edit corrected", "d": "11/2016"}, {"body": "sedubois polytypic also cause errors thrown within function silently ignored since promise nt handled", "d": "11/2016"}, {"body": "polytypic dantman quite sure meant promise nt handled awaited operator need trycatch error updated example using loadingerror signature similar apollo render", "d": "11/2016"}, {"body": "sedubois function implicitly returns promise function implicitly turns rejection promise instead throw stack means returning promise caller react anything return value function returning promise expecting someone something tossed instead nt handled means rejection promise caught code react unhandled error show console even trycatch wo nt perfectly protect throws error catch make typo catch error silently disappear wo nt aware something broken", "d": "11/2016"}, {"body": "sedubois actually async method always seem return promise javascript well future javascript confused thinking issues asyncawait c apologies noise nevertheless screenshots clearly show react wait promise resolved calls immediately calling renders text calls call react wait promise resolve would nt render text instead would wait promise resolves would call kind behaviour issue able perform async io server side rendering", "d": "11/2016"}, {"body": "dantman polytypic thanks yes sure changes needed inside react wait response handle errors properly maybe adding code could", "d": "11/2016"}, {"body": "personally using web workers store application state emit props change completely detached data storage fetching react components treat react renderer preserve unidirectional flow principle waits message expected requirements specific property true render way even first message intermediary loading states used static serverside renders without need async component methods", "d": "11/2016"}, {"body": "sedubois would different stack methods breaking change react current render methods sync need different server render method returns promise", "d": "11/2016"}, {"body": "dantman nt want give opinion waters deep initial aim point vjeux async componentwillmount hack hmm ca nt react look type object returned lifecycle methods promise handle async otherwise handle sync like currently ie backwardscompatible manner", "d": "11/2016"}, {"body": "like fkrauthan proposed lifecycle method return promise additional async function always called client server use returned promise ignored match behavior today use returns promise promise resolved rendering", "d": "11/2016"}, {"body": "like nextjs add react lifecycle function gets called constructor method call constructor directly looks like nextjs manages job except hooked react component lifecycle called toplevel component ideas could joined together", "d": "11/2016"}, {"body": "sedubois nt think getinitialprops correct place first people using nt haveuse method second nt wan na work initalprops defaults wan na work ontop merge initalprops passed props therefor suggestion new lifecycle event gets dispatched think idea could cause problems people might relay lifecycle events promise already resolved two different behaviours lifecycle event makes bit tricky therefor server client one sync render method calls new lifecycle async version calls lifecycle always waits promise gets resolved proceeding would opinion give greatest flexibility decide need lifecycle client render server render", "d": "11/2016"}, {"body": "people using nt haveuse method fkrauthan maybe refer talking new one name used nextjs second point yes might better new lifecycle method rather guess way next luxury tweak react lifecycle mentioned earlier hence would great bring ideas within react", "d": "11/2016"}, {"body": "sedubois even one use example feature define class body makes code way nicer read opinion sure people going switch soon official released", "d": "11/2016"}, {"body": "note class properties feature already finalized new language feature exponentiation operator referring stage class properties proposal part language yet might change get dropped", "d": "11/2016"}, {"body": "nt see need async functions react fetching data instead happy virtual renderer would rendertostring demand could set actions virtual tree would update accordingly rendering string think would ideal achieve good ssr react leaves developer fetch data mentioned good api would something like following little update suggested js const virtualtree reactdomrendervirtual rootele get bundled query redux store example const bundle storegetstate bundle fetch data according bundle const data await fetchdatasomehow bundle hydrate store set updates virtual tree storedispatch type hydrate data final result const domstring virtualtreerendertostring would avoid problem graphql client apollo enforces make double rendertostring first fetch data dependencies second render data populated think quite waste processing since rendertostring quite expensive", "d": "11/2016"}, {"body": "see point amount libraries try simulate solution still thousands libraries sign maybe core feature rather something build top solution would still require way render calls virtual still render calls get output", "d": "11/2016"}, {"body": "fkrauthan yes virtual renders far performant make two renders string main issue opinion performance ssr weak part react experiments improve react real advance matter react team criticizing amazing job", "d": "11/2016"}, {"body": "agree also deliberated issue simplest approach leaves freedom developer determine render flush", "d": "11/2016"}, {"body": "makes everything lot complicated code point view looked thru code making render async way easier creating renderer uses vdom dumped one point reconsider unmount events makes custom code way complicated needed eg loading data might result rendering new component also needs load data sudden lib needs figure component position already loaded data component contains new data loading things", "d": "11/2016"}, {"body": "vdom arguably low level solution would probably easier react developers implement would nt backward compatibility issues could allow community experiment different higher level solutions example one higher level solution could higher level component wraps async methods waits pending promises fire everything resolved using sort strategy ssr app though unfortunately lot fetching right vdom", "d": "11/2016"}, {"body": "think best way would change functions currently means making getinitialstate componentwillmount rendertostring behave differently instead add new functions solve problem discussed like functions get called client could functions get called server think could add function rendertostringasync reactdomserver difference normal rendertostring would returns promise implementation side difference would async version would whenever creates component instance call amp await initialize first calls render component initialize method could call render immediately following example app structure process would basically need new function rendertostringasync makes use new optional function initialize would hard", "d": "11/2016"}, {"body": "vancoding idea thinking wondering initialize could also called automatically componentdidmount client server would client would", "d": "11/2016"}, {"body": "working implementation react server rendering reactrouter reactapollo graphql inspired serversiderenderingcodesplittingandhotreloadingwithreactrouter basically server rendering use synchronized component client rendering use asynchronized component webpack async loading executing module javascript way server rendering implemented nashorn script engine jvm branch apollo client rendering code server rendering code one important place distinguish synchronized asynchronized component route synchroized comonent route asynchronized component routeasync noted file name must routejs routeasyncjs code always import routeasyncjs webpack replace routejs built server rendering two version build client server two chunks vendor app store state exported embedded indexhtml reason two versions build support async component yet issue twoversionsbuild approach warning dev mode since difference client server version routejs routeasyncjs warning ignored warning show production mode async data fetching component rendering server side rest api added static loaddata component use probe execute matchedroutes array matched routes parent index executed sequence parallel graphql query simply use execute graphql query", "d": "11/2016"}, {"body": "btw using nashorn script engine one performance optimization opportunity since vendor contains library code polyfills executed reused later requests app chunk executed since libraries moved vendor chunk app contains javascript code src small performance boost comparing evaluating vendor chunk every time javascript compiled cached executed every request lied app chunk contains src code also contains duplicated referenced ca nt moved vendor chunk due indexjs main entry webpack could recognize module code size small", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "", "d": "11/2016"}, {"body": "syranide gaearon think react needs make work expected usecases even vast majority people using lot example implementing powerful tooltip react user hovers tooltipable element display tooltip content would useful tooltip know react elementcomponent targets least props accessible point yet react way user get react element htmlelement reference without ref okay least could access props user put even put react element user hovers html element tooltip target could take make contents tooltip currently support inject tooltip html could make tooltip read object aware could break context could starting point think", "d": "11/2016"}, {"body": "radubrehar implement tooltip react instead also store objects using trying attaching data dom nodes even reference react component use however want would nt recommend certainly possible", "d": "11/2016"}, {"body": "syranide thanks quick update try briefly explain scenario want implement tooltip users render somewhere react component tree forget jsx targetnode gt return render tooltip content based current targetnode want tooltip displayed htmlelements match selector elements share tooltip two rendering strategies function child tooltip configured single child function call whenever want make tooltip visible certain htmlelement inject value innerhtml tooltip flexible simple tooltips job nt want force users tooltip add code use first rendering strategy even using want call function tooltip target node htmlelement reference possible react elementcomponent behind public apireliable way get htmlelement reference point thought use react implement properly way users could something like jsx gt tooltip target gt tooltip target targetnode gt return targetnodedatasettooltip would trick would nice also following issue cant get underlying react element behind htmlelement without work expected hope long specific react gets real benefits implementing update syranide code assumptions based ability storing value inside thanks eye opening digging right definitely option", "d": "11/2016"}, {"body": "think possible whenif custom attributes land react", "d": "11/2016"}, {"body": "radubrehar without special handling comment stating ca nt directly provide object", "d": "11/2016"}, {"body": "react appears checked attribute checkbox input fields set actual html checked attribute javascript checked property element causes issues css selectors depending checked selector take example css selector see first element checked create checkbox react attribute missing even though jsx set", "d": "11/2016"}, {"body": "problem based solution called element already document tree unfortunately sometimes need set attributes element document tree behavior going different", "d": "11/2016"}, {"body": "note since part react anymore reactdom", "d": "11/2016"}, {"body": "still opened understand nt think property attribute thing treat custom attribute native element legal treat unknown property react element property ca nt catch needs new attributes time afraid open developers makes feel react telling us using custom attribute guilty web standards telling us nt use indeed real requirement", "d": "11/2016"}]