[{"title": "proposal give access component internal functions", "body": "vuejs version proposal dont know way following scenario today really think would great include next vuejs version let say modal component two internal methods named open close using vref could possible following code open close", "num": "2783", "d": "4/2016"}, {"title": "external svgs loading chrome inside block", "body": "vuejs version reproduction link left icon inside block right one steps reproduce put tag external svg file symbols inside block expected svg safari firefox opera chrome actually happening svg loaded even symbol already used site elsewhere entirely sure whether chrome bug vue bug", "num": "2782", "d": "4/2016"}, {"title": "official paid support", "body": "hi talk official paid support vuejs please remove acknowledge really hard find right channel contact l\u00e9on", "num": "2781", "d": "4/2016"}, {"title": "vbind multiple nt work properly", "body": "hi tried create component wrapper want multiple attribute rendered based condition setup example really strange behaviour example component exactly component difference uses dynamic multiple attribute uses static multiple attribute kind bug missing something thank", "num": "2779", "d": "4/2016"}, {"title": "vue template compile bug", "body": "html title import vue vue import icon components export default components icon props iconname type string required false code \u4f7f\u7528\u7684\u4f8b\u5b50 html chrome consolelog html import icon components let iconfont icon export default components iconfont \u8fd9\u91cc\u91cd\u547d\u540d template\u91cc \u6807\u7b7e\u6539\u6210 iconfont webpackhotreload vue warn unknown custom element mean html caseinsensitive remember use kebabcase templates", "num": "2778", "d": "4/2016"}, {"title": "discussion replace option deprecation", "body": "noticed replace deprecated definitely agree components one root element however reasons using replace behavior questions behavior moving forward currently default value true assumption baked interact restricted elements dom eg outlined template parsing specifically given component template html parent template html stuff happens element would nt replacing lead invalid html use replace false get around resulting html stuff usage preference standpoint like point comment wink definitely stylistic preference could live without also find easier grep dom vs important us replace necessary data table mixin easily insert sorting behavior column adding sort html link company employees terse solution breaks parent lost regardless specific usage extend restricted elements", "num": "2777", "d": "4/2016"}, {"title": "suggestion vue follow strict semantic versioning", "body": "posted forum months back think fell cracks would awesome vue project started adhering strict semantic versioning past versions vue included lot new functionality patch versions rather bumping minor version tricky trying figure new functionality used example added support using string multiple classes bindings since vue using versioning scheme looks like semver clear surface nt support feature semver issue highlighted bold message top release notes small patch release bug fixes new features make sure check semver bump already implies bug fixes included", "num": "2776", "d": "4/2016"}, {"title": "watch array fires updated value", "body": "problem updated example using fired also array case example expected would expect update actual value updated proposal perhaps extra option could useful objects arrays version", "num": "2775", "d": "4/2016"}, {"title": "sequence vuedata routedata html render", "body": "multilayer data vue component may look like update vuerouter hook may gap data update html render vue ensure data update firstly html render happen write info", "num": "2774", "d": "4/2016"}, {"title": "vue currency filter decimal place working", "body": "simply taking effect result always", "num": "2773", "d": "4/2016"}, {"title": "vuejs alpha error start windows", "body": "run local pc vuejs error instruction start vudejs alpha npm install npm run build mean cfg windows pro npm node", "num": "2771", "d": "4/2016"}, {"title": "eval debounce nt work", "body": "vuejs version reproduction link fiddle link", "num": "2770", "d": "4/2016"}, {"title": "suggestion vue vm appendto singleton components", "body": "current singleton pattern component call first return others removed need another way creating singleton components maybe something like vuecomps currently singleton components vuecompswaves hidden singleton svg store serves instances svg animations vuetoster instance shared components use vueoverlay single overlay black background keeps track zindex components use", "num": "2769", "d": "4/2016"}, {"title": "suggestion vue add server side render example", "body": "please add server side render example version express plain http server docscomments also would good docs compilercommonjs serverrendererjs vuecommonjs", "num": "2767", "d": "4/2016"}, {"title": "suggestion deprecate vueconfigdelimiters vueconfigunsafedelimiters", "body": "like suggest deprecating delimiter config settings could mistake understand motivation suggest one consider switching better one choice serverside templating engines may developer made choice vuejs given longterm support schedule security fixes may put developers invested vuejs turned like bit pinch time rewrite functional ui code often hard justify top making arguments different templating engine undue technical burden think support changing delimiters retained thanks", "num": "2766", "d": "4/2016"}, {"title": "suggestion inline templates", "body": "deeper technical reason inlinetemplate ca nt supported vue couple reasons interest first makes easy get people attracted vue demo component stuff quickly using simple syntax component single page without compilation anything like secondly makes user experience customer endusers better nt get weird flashes stuff loading behind scenes recently used extensively build laravel spark use inline templates allow export html files vendor directory purchasers scaffolding easily edit without worry js compilation etc basically act like typical html pages know might technically correct approach eyes elite js developers speaking common person fairly useful several situations curious deep technical reason syntax ca nt work new vue stuff removed reason considered bad practice among developers", "num": "2765", "d": "4/2016"}, {"title": "feature request vempty", "body": "stated currently wrap vfor catch array empty love tag like would work like put right maybe also could also reused block triggeres list empty like equivalent django template tag example index itemmessage sorry elements yet", "num": "2764", "d": "4/2016"}, {"title": "vmodel\u4e2dcheckbox\u65e0\u6cd5\u4e0e\u6574\u6570\u6570\u7ec4\u5339\u914d", "body": "\u4e3a\u4ec0\u4e48\u5728vue\u5b9e\u4f8b\u4e2d \u5b58\u5728starsquery \u800c\u6362\u6210starsquery", "num": "2763", "d": "4/2016"}, {"title": "", "body": "data item vmodel itemid", "num": "2762", "d": "4/2016"}, {"title": "", "body": "\u4f7f\u7528", "num": "2761", "d": "4/2016"}, {"title": "suggestion vue replacement broadcast dispatch", "body": "first thanks great work far vuejs great measure enjoyable frontend framework tried far changes scheduled like know replacement plugin possible one thing liked events scope listeners gathered suggestion global eventbus nt see replace following code nt miss actual hierarchy broadcast dispatch within component tree really love keep global event bus works together object possible plugin would fit needs maybe could possible make emit globally additional attribute", "num": "2760", "d": "4/2016"}, {"title": "display undefined", "body": "data like data item bind vmodel itemid display undefined think display empty string right", "num": "2759", "d": "4/2016"}, {"title": "vfor work fine jquerymerge method", "body": "woiking working fine", "num": "2758", "d": "4/2016"}, {"title": "suggestion vue bring back filters please", "body": "hi hot discussion gitter chat nice post forum people missing feature actually nogo upgrading nt positive direction community seems like put suggestion bring back filters loved would agree smart arguments filters gathered different discussions guarantee correctness easier read templates simply easy read words chaining filters helps make sense actually expected filters global great templating view system currency simple example great filter used everywhere calling without filters ton boilerplate filters allow noobs learn faster get quick nice winning experience vue using mixin every component include selfmade filter nt really feasible needless say probably strong arguments removing filter engineering perspective would suggest thread pros cons voting return filters scott", "num": "2756", "d": "4/2016"}, {"title": "transition vue js system", "body": "layer time add father son aymodleview vif isbuttonlist touchmoveprevent clickpreventstop switchbuttonlist false transition fadein aybigbuttonlist vif isbuttonlist transition fade sublayer wo nt trigger", "num": "2752", "d": "4/2016"}, {"title": "vue updated model teardown component", "body": "vuejs version reproduction link steps reproduce turn set background turn set background colour turn set background look browser devtools expected error displaying app keeps working actually happening got error vue warn error evaluating expression stylesbgcolour typeerror read property colour undefined error stops app keep working", "num": "2750", "d": "4/2016"}, {"title": "component considered fragment instance vue update", "body": "vuejs version reproduction link mi personal site steps reproduce clone repo install run bash npm install amp amp gulp npm install amp amp npm run build expected site runs actually happening throws every single component using gulp development pretty sure vue error maybe vueify error using vue plugin rest dependencies checked repo link information needed please let know", "num": "2747", "d": "4/2016"}, {"title": "keepalive reusable components", "body": "demo \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u521b\u5efa\u4e00\u4e2a vue \u7684 js const demo vueextend const new demo n \u611f\u8c22\u9605\u8bfb\u6211\u8fd9\u4e48\u957f\u7684\u5e9f\u8bdd", "num": "2746", "d": "4/2016"}, {"title": "vfor breaks dragndrop dom manipulation", "body": "attempt use dragula alongside vue vuejs version reproduction link steps reproduce loading fiddle drag third item somewhere drop dragula event fires see console log alternatively drag first item third position click add item button expected another item added list actually happening uncaught typeerror read property parentnode null adding new items works fine dragndrop operations also dragging cancelling items last one dragging cancelling last item seems throw cases appearantly dragula puts actual element back former position dom still object yet vue seems lose track somehow found workaround issue replacing array fresh array fiddle thus triggering vue rerender vfor elegant solution though watchers array fire altough array order nt change case event workaround", "num": "2745", "d": "4/2016"}, {"title": "vmodel make vue reactive stuck", "body": "vuejs version reproduction link code causing issue message title steps reproduce open link wechat input thing repeat actions input delete close keyborad open keyboard somethings input update occur reactive data stop work nothing render refresh page ps issue easier reproduce sogou input en describe issue chinese issue occur", "num": "2744", "d": "4/2016"}, {"title": "vif destroy code properly", "body": "vuejs version reproduction link steps reproduce toggle switch get error vue warn error evaluating expression stylesbgcolour typeerror read property colour undefined expected stylesbgcolour evaluated actually happening", "num": "2743", "d": "4/2016"}, {"title": "vue watch remove obj key obj sync", "body": "vuejs version reproduction link steps reproduce passed paraments component styles bg key styles expected toggle button object needs insert bg delete bg actually happening switch bg inserted switch bg deleted", "num": "2742", "d": "4/2016"}, {"title": "prevent event propagating children", "body": "hi would prevent event propagation children ie listen parent prevent propagating child forminputlabel formbuttonname tried cant use since listening drag events mycase", "num": "2738", "d": "4/2016"}, {"title": "submit event trigger press enter key make error", "body": "submit event trigger press key make error need check first change uses vuejs", "num": "2736", "d": "4/2016"}, {"title": "dynamically rearrange children component", "body": "vue component children id like rearrange children certain event occurs would achieve moduleexports components childone require childtwo require events rearrange function dynamically rearrange childone childtwo", "num": "2735", "d": "4/2016"}, {"title": "", "body": "\u6dfb\u52a0 number vueversion", "num": "2734", "d": "4/2016"}, {"title": "children components destroyed animation ends parent", "body": "vuejs version reproduction link steps reproduce parent component foo child components bar trigger transition foo look destroyed trigger parent child component expected children components destroyed transition ends parent actually happening children components trigger destroyed transition ends parent something normal would want children component continue updated transition thank", "num": "2733", "d": "4/2016"}, {"title": "reference dom elements vel directive declared vfor directive", "body": "rt", "num": "2732", "d": "4/2016"}, {"title": "using id leading digits comes error", "body": "vuejs version reproduction link steps reproduce expected element rendered actually happening passing leading digit id dont escaped documentqueryselector comes error", "num": "2729", "d": "4/2016"}, {"title": "updating model watch causing dom updated", "body": "vuejs version reproduction link steps reproduce start typing first input box eg enter boxes stay continue type boxes update seems always step behind expected input box content synchronised actually happening think dom update queued watch block", "num": "2728", "d": "4/2016"}, {"title": "bug render component component definition bound attribute", "body": "vuejs version reproduction link expected according release note components rendered dynamically bounding attribute component definition fiddle try make example work b component rendered miss something thanks", "num": "2727", "d": "4/2016"}, {"title": "bug vue recognizing svg elements inside component html", "body": "vuejs version reproduction link steps reproduce jsfiddle inspect console errors show expected g line treated svg elements dropped two svg tags via slot actually happening g line recognized svg elements treated custom components unless warpped another svg tag top already existing svg tag error unknown custom element g register component correctly recursive components make sure provide name option", "num": "2726", "d": "4/2016"}, {"title": "warn mixed bind mustache interpolation", "body": "reading vue warn user using mixed vbind mustache interpolation", "num": "2725", "d": "4/2016"}, {"title": "whitespace issue mixing slots", "body": "say component template provides multiple named slots together unnamed one default slot enclosed named slots like example problem arises overwrite named slots default one case every piece whitespace gets loaded default slot makes disappear dom jsfiddle example", "num": "2723", "d": "4/2016"}, {"title": "vshow vbind style override bug", "body": "demo works fine chrome firfox style override vshow style change order directives override issue appears chrome", "num": "2722", "d": "4/2016"}, {"title": "combining class myclass class myclass working", "body": "combining two methods first rendered html page bug would best practice fiddle", "num": "2721", "d": "4/2016"}, {"title": "\u5173\u4e8eslot\u7684\u4f7f\u7528\u95ee\u9898", "body": "html", "num": "2720", "d": "4/2016"}, {"title": "addchild function", "body": "trying create dynamic component defined component main component dynamically create component called components extforminput extforminput methods changetype function var self var thecomponent optionscomponents extforminput self addchild thecomponent get error", "num": "2719", "d": "4/2016"}, {"title": "custom class getters setters data vm", "body": "hi try use class data vm getters setters works correct behavior example thanks", "num": "2718", "d": "4/2016"}, {"title": "", "body": "", "num": "2717", "d": "4/2016"}, {"title": "\u53d1\u751fmaximum call stack size exceeded", "body": "\u9519\u8bef\u53d1\u751f\u5728mergeoptions options options mergeoptions thisconstructoroptions options", "num": "2716", "d": "4/2016"}, {"title": "component dynamicprops works incorrect ms edge", "body": "vuejs version reproduction link steps reproduce input element press backspace nt work nothing happened cursor ahead use backspace delete input value delete expected message passed child component sync input value case empty string actually happening last one character stay child component", "num": "2715", "d": "4/2016"}, {"title": "vue", "body": "message var mycomponent vueextend template lt div gt custom component lt div gt data function consolelog data return new vue el test data message hello vuejs components mycomponent mycomponent \u8fd9\u91cc\u9762consolelog data", "num": "2713", "d": "4/2016"}, {"title": "pass old value method handler", "body": "would like request feature could pass original value method handler using directive link issue example methods update function event originalvalue", "num": "2711", "d": "4/2016"}, {"title": "properties longer updating template latest versions", "body": "anyone else issues data properties updating template changing via method vue devtools see update fine never update template always remain default value set data", "num": "2710", "d": "4/2016"}, {"title": "template tag dose nt work well edge", "body": "dose nt work well browser code like empty arrary error evaluating expression storename error work well like", "num": "2709", "d": "4/2016"}, {"title": "raf mutation dom", "body": "vue dont use raf function appendchild insertbefore innerhtml help reduce frame update dom", "num": "2708", "d": "4/2016"}, {"title": "literal modifier custom directive causes vif ignored", "body": "vuejs version reproduction link", "num": "2707", "d": "4/2016"}, {"title": "\u6570\u7ec4\u8d4b\u503cbug", "body": "vuejs version \u6d4b\u8bd5\u673a\u578b\u548c\u7248\u672c ios version", "num": "2706", "d": "4/2016"}, {"title": "directive custom prefixes", "body": "taken prefixing components default would like keep naming convention directives however seems prefix mandatory possible allow multiple prefixes detect whether prefix present mandate", "num": "2705", "d": "4/2016"}, {"title": "slot access scope variables", "body": "suppose simplified example picker component called mypicker obviously contrived example oversimplifies component example suppose want override default slot something else example clickable image problem obviously nt access item currently selected loop goes things available scope currently workaround two additional directives vstore allows store something either argument named storage without default name vinject allows inject values stored either named unnamed example original component example next scope function scroll example simply example named storage replacement works pretty well edge cases feels bit heavy handed want able replace slots completely able specifically generally access items scope original template miss crucial feature already allows added", "num": "2704", "d": "4/2016"}, {"title": "\u5b98\u7f51\u6709\u4e00\u4e2a\u94fe\u63a5\u9519\u8bef", "body": "\u5b98\u7f51 \u4e2d\u6587 \u7248\u7684\u8df3\u8f6c\u94fe\u63a5\u9519\u8bef", "num": "2703", "d": "4/2016"}, {"title": "feature request vmodel add trim param attribute", "body": "remember angular trim value default tested using vue binding value leave trailing spaces adding param attribute tailing spaces trimmed automatically scenario register form deal tailing space issue either replace every make computed property trim", "num": "2702", "d": "4/2016"}, {"title": "bind unable access data called component element replace false", "body": "unable bind directly component element set eg class never applied even though true however apply class see", "num": "2700", "d": "4/2016"}, {"title": "", "body": "data json data return data price \u5b9e\u9645\u6253\u5370\u4e3a \u5374\u4e0d\u662f price", "num": "2699", "d": "4/2016"}, {"title": "\u5982\u4f55\u4e3a\u6570\u636e\u5bf9\u8c61\u4e2d\u7684\u6bcf\u9879\u5355\u72ec\u5217\u51fa\u8ba1\u7b97\u5c5e\u6027", "body": "", "num": "2698", "d": "4/2016"}, {"title": "data ca nt get data", "body": "ublpanel formed created methods ca nt get data correct", "num": "2697", "d": "4/2016"}, {"title": "build multiple spa inside one peoject", "body": "hi first thanks evan amazing work building large scale application want break multiple spa example user want login use auth spa auth route redirected main spa want access dashboard dashboard another spa anyway project much bigger trying solve problem serving heavy spa user cases use anyone try implement webpack", "num": "2692", "d": "4/2016"}, {"title": "feature request vunless", "body": "using rivetsjs enjoyed little nice alternative rvif rvunless even though achieved vuejs saying vif property believe vunless property could actually make nice addtion vif velse way vunless would actually refer velse block without vif bonus check negated values cases could make code bit harder read tl dr think vunless could make nice addition vuejs", "num": "2691", "d": "4/2016"}, {"title": "component slot vshow click working", "body": "hello probles main component wizard another component template work", "num": "2690", "d": "4/2016"}, {"title": "\u793a\u4f8b\u95ee\u9898", "body": "", "num": "2688", "d": "4/2016"}, {"title": "data function called twice", "body": "vuejs version reproduction link steps reproduce register vue component data function javascript vuecomponent myhello data function consolelog hello return new vue el body instantiate component see console devtool expected data function called twice since two instances vue component actually happening data function called four times quick fix set data hook hope helpful", "num": "2687", "d": "4/2016"}, {"title": "transitionanimate reordering vfor", "body": "currently seems transitions vfor one new items added removed list lists one common thing also elements array reordered understanding vue good tracking element reorder uses updating dom seems apply transition box element reorder think would great feature", "num": "2684", "d": "4/2016"}, {"title": "class binding ca nt pass string classes mixing array object definition", "body": "vuejs version reproduction link steps reproduce try bind multiple classes like expected able bind classes like described actually happening getting console error bug right wrong", "num": "2682", "d": "4/2016"}, {"title": "vel working cases script tags", "body": "vuejs version reproduction link steps reproduce append script tag configurations sometimes work expected defined actually happening undefined", "num": "2681", "d": "4/2016"}, {"title": "vfor transitionmode", "body": "vfor support transition mode", "num": "2677", "d": "4/2016"}, {"title": "doc gitbook edition official guide like plugins", "body": "think format docs consistent since docs written gitbook follow nt think one thing better provide page listing related docs important submodules instead hiding links inside guide got use google find sometimes sweatsmile", "num": "2675", "d": "4/2016"}, {"title": "array observation modified arrayprototypesplice", "body": "vuejs version reproduction link steps reproduce watch array putting property make template display array remove element using expected first element array removed view actually happening first element removed array view explanation read source code observing feature vue far understood vue intercept calls methods using make strategy fail would work dirty check example know easily fixable good practice use actually implemented found bug using lodash kind library widely used intent fix maybe could fix javascript const originalsplice arrayprototypesplice arrayprototypesplice function amp amp thislength thissplice arguments else originalspliceapply arguments", "num": "2673", "d": "4/2016"}, {"title": "pass props component instance", "body": "hi looking way pass properties component instance created operator would like pass properties ability use onewaytwoway data binding example assuming one way twoway template would use like case vue compiler would automatically bind props would updated reactively therefore looking solution achieve reactivity possible solution might set watchers like one way binding watch function newval newval twoway binding watch function newval newval return prevent loops newval mycomponentinstance watch function newval newval return prevent loops newval bind pretty verbose believe repeats functionality already implemented inside vuejs bind props component compiled inside template may missed another solution docs imagine could look like", "num": "2671", "d": "4/2016"}, {"title": "event expression handled correctly", "body": "vuejs version reproduction link steps reproduce click buttons observe console replace model clicking button repeat clicking buttons expected click message appears console click message appears console click model replaced click message appears console click message appears console actually happening click message appears console click message appears console click model replaced click message appears console click message appears console", "num": "2670", "d": "4/2016"}, {"title": "events hypenated", "body": "vuejs version reproduction link steps reproduce expected event called actually happening event nt called bit delicate working attributes totally clear expect behavior current behavior case emit code von attributes camelcase camelcase possible lowercase lowercase lowercase camelcase hypenated hypenated hypenated think makes sense case emit code von attributes camelcase camelcase hypenated lowercase lowercase lowercase camelcase warn use camelcase warn use camelcase hypenated", "num": "2669", "d": "4/2016"}, {"title": "vmodel working fields acting strange", "body": "hi nt found bug code think caused vuejs list events click becoming edit form shown something edit requests could become quite huge fetching list giving necessary columns event becoming retrieving details edit function event var self set given event edit var eventtoedit event get event details vue function details objectassign eventtoedit details consolelog eventtoedit selfeventinedit eventtoedit details fields visible form values inputs like enter value switch next field anywhere else field immediately gone back initial value loaded server case always go back dateto field empty going back empty strange also saving entered value model visible vue devtools idea going repair acting really strange found binding working put eventineditdatefrom field reactive changing idea time working ok isspecial issuspended well", "num": "2667", "d": "4/2016"}, {"title": "attribute still present dom compilation", "body": "vuejs version reproduction link able reproduce jsfiddle upload whole thing webpackbin needed component used multiples times steps reproduce create multiple elements attribute expected attribute removed markup compiled actually happening attribute visible dom except first one node behavior perfectly correct attribute displayed string thank", "num": "2666", "d": "4/2016"}, {"title": "test suite require old version phantomjs", "body": "vuejs version reproduction link jsfiddle simple code snippet steps reproduce clone vue install phantomjs site homebrew whatever run expected expect finish installation actually happening downloading another phantomjs version", "num": "2665", "d": "4/2016"}, {"title": "\u6761\u4ef6\u6e32\u67d3\u9047\u5230\u5d4c\u5957\u7684a\u5143\u7d20\u5de5\u4f5c\u4e0d\u6b63\u5e38", "body": "", "num": "2664", "d": "4/2016"}, {"title": "iteration set vfor", "body": "building something day set noticed could nt seem iterate vfor example use modern browser understand set behave little differently plain objects array see massive benefit adding vfor iteration open writing addition deemed useful", "num": "2662", "d": "4/2016"}, {"title": "using xlink href svg work", "body": "vuejs version reproduction link steps reproduce load indexhtml webserver expected svg icon display event actually happening svg seam rendered chrome work firefox safari bug vuejs chrome", "num": "2661", "d": "4/2016"}, {"title": "turn object reactive", "body": "good way turn object reactive vue instance inited call vueset recursively turn object reactive confortable way thx", "num": "2660", "d": "4/2016"}, {"title": "capture modifier work safari", "body": "repro safari ios mac vue added function event listener mistakenly nothing happen chrome", "num": "2658", "d": "4/2016"}, {"title": "templatetag vfor vif together expect", "body": "vuejs version reproduction link steps reproduce want condition vfor got nt want p p p p p p ok p p p expected use template vfor vif", "num": "2657", "d": "4/2016"}, {"title": "vue triggers componentchanged forever vue files", "body": "sorry sure open vue cli vue cli webpack template repository migrate necessary problem vue triggers event aframe component forever code export default methods onchange function consolelog changed demo see console happens files problem nt occur simple instance note also tested code fresh project problem seem occur files note event triggered even", "num": "2656", "d": "4/2016"}, {"title": "vue triggers componentchanged forever", "body": "sorry sure open vue cli vue cli webpack template repository move necessary problem vue triggers event aframe component forever code export default methods onchange function consolelog changed demo happens files problem nt occur simple instance", "num": "2655", "d": "4/2016"}, {"title": "wrong style interpolation", "body": "vuejs version steps reproduce html expected html actually happening html css documentation backgroundsize sets width height background image percent parent element first value sets width second value sets height one value given second set auto", "num": "2654", "d": "4/2016"}, {"title": "vuecli vuerouter play nicely together", "body": "vuejs version reproduction link steps reproduce create new vuecli application convert using commonjs install vuerouter attempt initialize router stack add router routed component expected foo component template served actually happening page blank", "num": "2653", "d": "4/2016"}, {"title": "\u80cc\u666f\u56fe\u7247\u95ee\u9898", "body": "\u8fd9\u91cc\u7684url", "num": "2652", "d": "4/2016"}, {"title": "feature recompiling inlinetemplate", "body": "trying integrate vuejs existing platform troubles implementation component reloading need feature complex update view state information backend easier redraw component new data tree components page use inlinetemplate feature want able recompile certain element html string domelement trigger tried two ways accomplishing nt work exactly need tried creating element replacing el mount flags reset renders cached template probably tried compile html node constructs another vue instance ca nt get reference clean way way achieve understand way dom manipulation preferred considered dangerous ca nt adapt whole platform new rendering system momentarily", "num": "2651", "d": "4/2016"}, {"title": "feature fallback content partials", "body": "partials support fallback content slot would greatly improve readability templates using specific way base component logic eg dialog components eg promptdialog need derived share logic outer template achieved using partials similar slots used component basis instances template would look like html title body without feature need put content partial nodes outside template becomes worse nested partials approaching problems using base component template derived ones thus nested instances practical would need redirect majority dataprops api outer pseudoderived inner base instance", "num": "2650", "d": "4/2016"}, {"title": "set watch deep true data changes val oldval true", "body": "vuejs version reproduction link steps reproduce expected actually happening", "num": "2649", "d": "4/2016"}, {"title": "feature vemit vcall missing link", "body": "consider opposite coffee vemit components comp template something events toggle gt toggle methods toggle gt dothetoggleing template toggle methods dosomething gt togglecomp someargs code emitters togglecomp null still unsure specify default arguments alternative emitters togglecomp vcall components comp template something methods toggle gt dothetoggleing template toggle methods dosomething gt togglecomp someargs code callers togglecomp null still unsure specify default arguments alternative callers togglecomp would make state management way easier course shorthand like would great think", "num": "2648", "d": "4/2016"}, {"title": "set length array nt update view", "body": "vuejs version reproduction link steps reproduce click clear button expected list todos must empty actually happening list still popuplated even show empty array works fine empty array element element", "num": "2646", "d": "4/2016"}, {"title": "rootscope", "body": "\u5728vue\u4e2d\u6709\u6ca1\u6709\u50cfangularjs\u4e2d\u4e00\u6837\u7684 rootscope", "num": "2645", "d": "4/2016"}, {"title": "loop event nullity", "body": "click itembind nullity method", "num": "2644", "d": "4/2016"}, {"title": "deleting deep level property nt trigger digest cycle", "body": "trying delete deep level property object since vm delete nt perform task copy variable delete property set back vm however weird thing happens vue nt redigest data stated documentation every call vm set trigger digest cycle sample code", "num": "2643", "d": "4/2016"}, {"title": "web component attribute rendered view", "body": "hi first thanks work using vue everyday great encountered however problem tried use web component webcomponentjs polyfill attribute inside view however component works perfectly use custom tag problem custom tag approach ca nt extend default html elements anymore investigation noticed vue checks component declared vm component declared rendered way specify inside view component would like ignore evaluation template", "num": "2642", "d": "4/2016"}, {"title": "vpre register reference dom element", "body": "current register", "num": "2641", "d": "4/2016"}, {"title": "computed attributes based object working", "body": "hi discovered vuejs days ago trying use webapp data object view following problem computed attribute testobjectlength updated new elements added object javascript console whereas testadd attribute works perfectly wrong another way get number properties javascript object thanks lot v", "num": "2640", "d": "4/2016"}, {"title": "velse work together vshow custom component", "body": "vuejs version reproduction link steps reproduce click toggle button expected mycomponent showing msg hidden actually happening msg always shows", "num": "2639", "d": "4/2016"}, {"title": "checkbox shows checked vmodel false", "body": "started path click fired vmodel updated example nt know value thought try logic watch function found issue vuejs version reproduction link steps reproduce click checkbox choose cancel expected checkbox empty actually happening checkbox shows checked bound data false", "num": "2638", "d": "4/2016"}, {"title": "feature ability disable vue observation", "body": "update anyone ends needing functionality released vuenonreactive appropriate admonitions everything nonplain models need disable vue observation walking example resource model access cache lookup related resources causes objects cache become watched probably inefficient well additional interactions code currently get around setting dummy observer cache something similar js import get import resource resource new vue data instance ready thisfetch work relies vue internals requires already observed object since import class directly proposal add official method explicitly disabling vue observationwalking eg something like js const something nestedthing make entire object nonreactive vuenonreactive something make nested object nonreactive vuenonreactive somethingnestedthing vm set keypath something considerations happen user set reactive key path nonreactive object vue warn user eg js vm set vuenonreactive different vm set somekey vuenonreactive already reactive object warn user attempted made nonreactive eg js error vuenonreactive vm dataa valid vuenonreactive clone vm dataa", "num": "2637", "d": "4/2016"}, {"title": "add childparent communication components", "body": "hi trying create custom select tag components support parent child communication props way use something similar would inputs thanks", "num": "2636", "d": "4/2016"}, {"title": "vue\u73b0\u5728\u7684\u7248\u672c\u53ef\u4ee5\u5bf9 \u6a21\u578b\u7ed1\u5b9a\u4e48", "body": "", "num": "2635", "d": "4/2016"}, {"title": "suggestion allow force transition dynamic components", "body": "related sometimes need force apply transition switching dynamic components example click button transition apply component", "num": "2634", "d": "4/2016"}, {"title": "transitions trigger dynamic component component constructor passed", "body": "vuejs version reproduction link steps reproduce click button expected transition starts components actually happening components switches without transition note works correctly component name passed", "num": "2633", "d": "4/2016"}, {"title": "enhancement trackby allow using path instead key", "body": "vuejs version reproduction link steps reproduce run fiddle examine console expected entries tracked specified path like filters eg actually happening vuejs prints warning fails get unique value specified path required change three lines would need change functions make pr maybe small change nt require also possible add expression evaluation way combination fields yield unique identifier eg case reused companies different application make sense well", "num": "2632", "d": "4/2016"}, {"title": "style object vfor elements reactively updated", "body": "vuejs version reproduction link steps reproduce click move button wait transition ends expected update well ie message turn green actually happening gets reactively updated", "num": "2631", "d": "4/2016"}, {"title": "bug unmounting element mounted results removal mount element", "body": "vuejs version reproduction link steps reproduce check uncheck checkbox expected expectation mounting option set preserve mounting point removal happens allows reuse mounting point anything else needs mounted place old component example checkbox unchecked child removed blue box class remain actually happening mounting onto option unmounting results removal original mount point", "num": "2630", "d": "4/2016"}, {"title": "object using custom directives trigger events", "body": "tried use integration following official custom directive example scenario classic von change somemethod approach stop working remove custom directive select become simple standard select event handling work", "num": "2629", "d": "4/2016"}, {"title": "process defined", "body": "vuejs version steps reproduce use webpack run webapp browser expected work well works electron actually happening browser environment get error fails file line", "num": "2628", "d": "4/2016"}, {"title": "input value clears blur nested vfor", "body": "vuejs version chrome ie firefox steps reproduce image scenario attendee several options fill options store code problem value clears input lost focus however data binding works till next focus input also clear data vue custom filter used expected works fine actually happening may something", "num": "2626", "d": "4/2016"}, {"title": "stoppropagation double click nt work", "body": "vuejs version tested well reproduction link steps reproduce html dblclickstop error called double click nt stoppropagation called warning maybe expected behaviour probably another way catch double click simple click element", "num": "2625", "d": "4/2016"}, {"title": "vfor vif bug", "body": "vuejs version work firefox work chrome work chrome work firefox", "num": "2624", "d": "4/2016"}, {"title": "using set devices causes view update", "body": "using set devices causes view update vue template souce code setshowshopdata function var newshopdata thistotalshopdataslice set loading false set showshopdata newshopdata set shownodata newshopdatalength loadingforappend false curindex line set showshopdata newshopdata call function ajax request callback line nt work devices view nt update andriod ios devices work ok nt know ios set showshopdata newshopdata pc\u7aef \u8bbe\u5907 ios shoplistvue viewsbankshoplistvue uploading", "num": "2623", "d": "4/2016"}, {"title": "support extension methods like set javascript object", "body": "var vm new vue el demo data msgs vmmsgs set msgid msg content", "num": "2622", "d": "4/2016"}, {"title": "make children instance property reactive array", "body": "wanted computed property reevaluates every time children instance property updated case every time component addedremoved dom change wanted return list component names currently active dom however function expected children reactive see fiddle shows issue managed work around creating reactive array ready method based children see updated fiddle reason children reactive made reactive used computed properties per requirements thanks andres", "num": "2621", "d": "4/2016"}, {"title": "duplicate value found warning vfor", "body": "using twitterfetcher circumvent twitter latest api without much issues recently started getting following errors posting duplicate tweet would throw error duplicate value reproduced warning", "num": "2618", "d": "4/2016"}, {"title": "vfor arrays triggers alias warning", "body": "code triggering vue warn alias required vfor warning console might bug jsfiddle seems warning nt get triggered fiddle", "num": "2616", "d": "4/2016"}, {"title": "transitionleave leaving vfor iteration value changes", "body": "bug occurs shuffle original data used view vuejs version latest via vuecli reproduction link steps reproduce click next button least times expected current leave transition next enter transition actually happening see appear instead transitionleave leave expected even listend leavecancelled event never occured element still staying idea thanks", "num": "2614", "d": "4/2016"}, {"title": "set data watch", "body": "code like data disabled could set value watch export default props mytext data return disabled disabled watch mytext handler data thismytextlength gt thisdisabled disabled else thisdisabled", "num": "2613", "d": "4/2016"}, {"title": "ability set object paths outside vm", "body": "feature request long object paths set comes handy works setting path outside app statemanaged via vuex similar library kind tasks introduce verbosity stateahasownproperty b vueset statea b vueset statea b c val unfortunately accept keypath second argument accepts single key may think could initiate whole object structure nt always possible andor best choice sometimes add dynamic subobjects object setting path easy like following would useful think nt vue core maybe could go vuex core helper good workaround thanks", "num": "2612", "d": "4/2016"}, {"title": "directive \u4e0b\u7528vm\u7684 set\u65b9\u6cd5\u4f1a\u53d1\u51fa\u8b66\u544a", "body": "set vuedirective msform id msform priority bind function let vm thisvm let el thisel let formname elgetattribute name vm formname vm set formname formname zvm formname vm set formname valid true invalid false debugger vm watch formname function newvalue oldvalue let valid true let index newvalue newvalue index invalid undefined amp amp newvalue index invalid valid false break newvalue invalid valid newvalue valid valid deep true", "num": "2611", "d": "4/2016"}, {"title": "specify filter variable", "body": "feature request would nice able use variable specify filter example table component could column definition passed prop implementation column could use filter prop using filterloading filter workaround obviously far ideal", "num": "2609", "d": "4/2016"}, {"title": "browser freeze safari ios possibly webkit bug", "body": "vuejs version reproduction link x steps reproduce nt able pin exact conditions please look longer description expected infinite loop frozen browser actually happening production environment safari ios randomly freezes uses cpu componentmethod called clickhandler unfortunately hard debug could nt reproduce developmentenvironment simple consolelog output came belief infinite loop mentioned method called vue situations helped reload page twice also said nothing special going method changing variable main vueinstance works perfectly fine every browser afraid could caused webkitbug returns wrong value functionobject seems problem mistakenly return object typeof function jited code report probably violates guidelines lot want apologize advance vague try get information tough", "num": "2608", "d": "4/2016"}, {"title": "bug", "body": "vuejs version reproduction link steps reproduce vmodal \u7684\u6761\u4ef6 expected \u5f53\u7b26\u5408 vmodal \u4f1a\u663e\u793a\u51fa\u6765 actually happening vmodal", "num": "2607", "d": "4/2016"}, {"title": "component props coerce working default option", "body": "hi first would like say thanks vue truly awesome think may found slight regression vue seems like option component props passed function vue working upgraded see fiddles details thanks vuejs version reproduction link working fiddle vue working fiddle vue steps reproduce see fiddles expected prop default passed coerce function actually happening props specified template defaults passed coerce function", "num": "2606", "d": "4/2016"}, {"title": "automatically converting value number prop type number", "body": "use instead want set props written add coerce function think value automatically converted number type may numberprops add coerce option many times", "num": "2605", "d": "4/2016"}, {"title": "problem vshow", "body": "use vshow control modal modal input open modal ca nt get focus input delete vshow focus input happend", "num": "2604", "d": "4/2016"}, {"body": "nt try opening issue", "d": "4/2016"}, {"body": "quickly tried fiddle svg loaded within html seems work one solution could try changing use tag", "d": "4/2016"}, {"body": "nirazul yep works unfortunately approach right one current project", "d": "4/2016"}, {"body": "vuejs patreon campaign removed email address issue security", "d": "4/2016"}, {"body": "thank bridge evan able contact email would like able discuss l\u00e9on", "d": "4/2016"}, {"body": "hi otherwise answer besides live france", "d": "4/2016"}, {"body": "appears work cases vue currently support using components instead use prop signal parent change value demo approach", "d": "4/2016"}, {"body": "yes assumes behavior always true also longer relies actual dom template parsing long using direct dom elements template source longer subject parsing limitations example use component root node", "d": "4/2016"}, {"body": "example use component root node limits component one tag type though eg ca nt use nt issue limitation said ca nt really think practical case would necessary classes attributes though preserved", "d": "4/2016"}, {"body": "everything else works", "d": "4/2016"}, {"body": "ohhh messed around fiddle nt realize attributes merged works us poked api reference nt explain happens element attributes inner content maybe could better clarified", "d": "4/2016"}, {"body": "pr submitted docs repo", "d": "4/2016"}, {"body": "something wanted practical difficulty isolating new features patch fixes costs lot think process basically followed development model every commit goes releasing patch inevitably includes new features separating features bug fixes separate branches keeping sync minor release makes development model lot complex said convinced every little detail semver especially projects marketing concerns often easy people argue favor strict semver version numbers practically impact success project case vue important part majorbreaking bumps follow strictly really want go superstrict semver could hidden features later announce part take opportunity explore possibility semantic minor releases blank slate", "d": "4/2016"}, {"body": "isolating new features patches solved problem presumptuous think understand costs argument benefits outweigh costs though understand point may disagree however ca nt get board marketing claim marketing benefit derived calling version vs calling finally anecdotes lodash follows strict semver nt see jdalton marketing problem anything developers use lodash instead underscorejs simply lodash follows semver underscorejs level stewardship greatly appreciated users react follows semver goofiness switching year due marketing concerns interesting see embracing large major version number happy hear explore possibility semantic minor releases hope come conclusion better community", "d": "4/2016"}, {"body": "youngsteveo basically saying worth point reconsider ps probably know cost nt really know much working", "d": "4/2016"}, {"body": "gotcha thanks", "d": "4/2016"}, {"body": "array primitiv value two arrays value store reference single array use set function nothing happens would expected think boolean value proposed express possible forms comparison either would get overcomplicated really fast", "d": "4/2016"}, {"body": "watch array length prop", "d": "4/2016"}, {"body": "asking basically diff values expensive cases indicating approaching problem wrong angle trying perform imperative operations based diff ideally nt need care detailed difference values working ui use computed properties ensure everything updates automatically need diffing legit reasons implement indus pointed structural diffing trivial problem", "d": "4/2016"}, {"body": "vue router likely streamline rebuild use issues opened vuerouter discuss good implementation may already", "d": "4/2016"}, {"body": "njleonzhang probably want hook instead also necessary define fields inside object something like", "d": "4/2016"}, {"body": "links", "d": "4/2016"}, {"body": "nt think feature released yet vue ago feature added ago", "d": "4/2016"}, {"body": "sorry build script currently nt run windows due env variables intentional fix get closer official release really want try use crossenv", "d": "4/2016"}, {"body": "nt work way like returning function vs calling function also bad idea nt", "d": "4/2016"}, {"body": "thanks reply means return function delayed called means way simplify cause appears many places", "d": "4/2016"}, {"body": "nt quite understand need use native dom methods difference", "d": "4/2016"}, {"body": "maybe confused attached deprecated components longer possibility offdom work closed", "d": "4/2016"}, {"body": "need call without arguments creates appending otherwise yes work", "d": "4/2016"}, {"body": "done progress towards alpha version", "d": "4/2016"}, {"body": "agree switch template systems upgrade nt great could turn lot work especially template solution heavily used", "d": "4/2016"}, {"body": "also server side place conflict migrate angular vue different delimiters make lot difference", "d": "4/2016"}, {"body": "think reason behind eg party component template uses change delimiters would cause party component break maybe could reworked vue option instead global configuration eg js import vue vue const appvue vueextend delimiters export default appvue app would import extended vue configured presets could manually set delimiters per vue", "d": "4/2016"}, {"body": "rpkilby vuejscollaborators discussing currently thinking enabling locally instances rather global option still discussion discover possible side effects", "d": "4/2016"}, {"body": "rpkilby precisely one reasons deprecation rework componentlevel option makes sense compromise look", "d": "4/2016"}, {"body": "sounds great thanks", "d": "4/2016"}, {"body": "implemented branch note still deprecated vue longer supports injecting html arbitrary positions always need use containing element", "d": "4/2016"}, {"body": "add like point inline templates something sets vue apart frameworks lot js frameworks want write templates template files compile vue nt something makes vue feel magical existing template want reactivity clean js wrap custom tag like write js done use serverside rendering variables already want course start migrating apibased template furthermore also allows much comprehensible serverside routing think crucial vue something added afterwards nt make vue project start project pull vue always charm vue eg angular react", "d": "4/2016"}, {"body": "hmm maybe could plugin personally nt use think mostly useful template partially rendered server", "d": "4/2016"}, {"body": "azamatsharapov indeed exactly point always made vue great backend developer still easily declare routes functionality backend render views use javascript original intent interaction", "d": "4/2016"}, {"body": "azamatsharapov tons developers thing makes vue special adapt whatever style project working removed solely bad practice well meh awesome never bit even inlinetemplate filters return excited vue mostly stressed upgrade", "d": "4/2016"}, {"body": "especially surprising inline templates useful serverside rendering removed update promises improved serverside rendering support", "d": "4/2016"}, {"body": "nt surprising goal serverside rendering nonblocking streamed vue instance rather user wait render anything else happen regardless find travesty", "d": "4/2016"}, {"body": "promises improved serverside rendering support think completely different thing vuejs work server render templates jeffreyway phroggyy agreed active phplaravel user earlier know many people use technical reason remove least avoid increased size library maybe made plugin probably makes everybody happy", "d": "4/2016"}, {"body": "use inline templates everywhere statamic reasons taylorotwell spark provides great middleground php javascript building spas want understand follow best practices one literally one reasons love using vuejs ca nt even imagine approach able vue without thought kind making panic little", "d": "4/2016"}, {"body": "glad one feels like vue magical use cms project spas ca nt imagine glad could use vue within cms project first time worked quite sure removal make impossible use framework half projects leads sad sad circumstance maintainlearn two different systems frontend frameworks sublime piece api opinion really really good reason remove well possibility support plugin see like jeffreyway wow hi btw keep simple variant happy keep implement sort global event bus really looking forward next version", "d": "4/2016"}, {"body": "talking rizqidjamaluddin pointed currently use lt div gt place template lt div gt js file important question vue break behaviour well eg kind templating considered inlinetemplating would viable upgrade path docs reference", "d": "4/2016"}, {"body": "place work lot projects django cms custom delimiters matter made possible declare vue components within backend templates way serverrendering without possibility could nt frontendediting cms anymore thus would effectively break apart would probably switch approach closer spas would mean lot development work backend defining apis etc thus using vue might become budgetary liability well least adapted procedures", "d": "4/2016"}, {"body": "definitely inline template indication would ever removed", "d": "4/2016"}, {"body": "phroggyy quite convenience functionality pure inline templates", "d": "4/2016"}, {"body": "thanks clarifying josephsilber taylorotwell might quite similar meaning might viable upgrade path maybe", "d": "4/2016"}, {"body": "using inlinetemplate way able get one projects working ie nt support tag", "d": "4/2016"}, {"body": "use inline templates quite bit handful spring thymeleaf apps one reasons using think availability makes vue super flexible drop component legacy page add additional functionality without rebuild redo build process", "d": "4/2016"}, {"body": "phroggyy one thing different using inlinetemplate vs template script tag inline template already rendered dom loads flicker template script tag still needs parsed vue injected dom fact empty space gets populated fact sometimes looks bit janky even able use vcloak minimize stands component needs perform ajax request load want sort loading state displayed http request happens inlinetemplate loading state shown soon page renders wait http request finish approach get white flicker component compiles switches loading view waiting http request easy way share loading view vue compiles view needs displayed vue compiled ajax request still happening", "d": "4/2016"}, {"body": "boussou instead couldshould thumbs original post thanks github", "d": "4/2016"}, {"body": "nt notice new feature github almost becomes dev fb", "d": "4/2016"}, {"body": "nt use surprised many people nt want syntax removed library reading comments understood gives us benefits understood utilizing would like combine logics templates ways correct creating component constructors items like example instead writing templates anyone think reason treated bad practice javascript example var base vueextend data function return methods var app new vue components componenta baseextend template templatea componentb baseextend template", "d": "4/2016"}, {"body": "confused deprecation well first thing tried testing codepen uses latest vue build using still works think referring feature might wrong really like clear first", "d": "4/2016"}, {"body": "right property still work related using", "d": "4/2016"}, {"body": "think shipped separate plugin", "d": "4/2016"}, {"body": "curiosity standard vue hello world sort example considered fine inlinetemplate considered bad practice nt attaching new vue object existing markup conceptually inlinetemplate anyways additional limitations", "d": "4/2016"}, {"body": "clarify bit main reason labelled bad practice assuming spa context believe collocation component template logic important longer term maintainability however admit overlooked use case progressive enhancement largely server rendered apps tbh something personally use vue nt realize strong need feature technically complicated support bring back", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "fan little utilities like clientside javascipt library nt cover due size performance issues serverside frameworks like laravel django hand support", "d": "4/2016"}, {"body": "asmaps could also simply use vue index itemmessage sorry elements yet needed handle arrays objects basic method implementation could js isempty value value amp amp value instanceof array return valuelength lt", "d": "4/2016"}, {"body": "taylorzane sure use could also use instead convenience feature prevents code duplication phanan reason could also argue yes somewhere line drawn okay wanted ask used django find useful", "d": "4/2016"}, {"body": "phanan reason could also argue exactly internal discussions well", "d": "4/2016"}, {"body": "performance issues phanan mean overall size library mean rendering performance nt seem like would intensive vifvelse vifvfor also maybe could implemented plugin", "d": "4/2016"}, {"body": "mean overall size library mean rendering performance meant regarding small utilities", "d": "4/2016"}, {"body": "hello expected behaviour string want number write make number please tell nt problem nt speak chinese", "d": "4/2016"}, {"body": "thanks answer works problem posva", "d": "4/2016"}, {"body": "\u8bf7\u4e0d\u8981\u5f00\u91cd\u590d\u7684", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "see", "d": "4/2016"}, {"body": "yep seen concern implement global event bus events registered event object looking way automate know seems merely convenience vue convenience simplicity ease use", "d": "4/2016"}, {"body": "nirazul something like following one lifecycle hooks may work looked close enough new api may able use mixin js var autoevents created function var evtid thisoptionsevents bus evtid thisoptionsevents evtid destroyed function var evtid thisoptionsevents bus evtid new vue mixin autoevents events idselected function", "d": "4/2016"}, {"body": "indus sounds like plan try first alpha vue released", "d": "4/2016"}, {"body": "sounds application components control bus components use concern party components listen events emitted arbitrary component vue components instantiated user vue internally party components aware bus system may may using", "d": "4/2016"}, {"body": "recommends using vuex inject bus components need use events seems like overkill small projects liked vue nt require using vuex router even http unless needed also rpkilby states longer universal system party components hurt community whole thinking important jquery think vue needs equivalent", "d": "4/2016"}, {"body": "rpkilby party components still ability directly longer ability dispatch events propagates essentially ensures party component cause side effects direct parent believe good thing isolated component able dispatch event causes side effects unknown parent tree sounds like recipe trouble", "d": "4/2016"}, {"body": "isolated component able dispatch event causes side effects unknown parent tree sounds like recipe trouble totally agree concern direct parent party component able listen event would want fire events global bus would likely want parent get events events ted communicate parent component thought isolated component may cases want event propagate beyond direct parent either way application detail parent component would determine", "d": "4/2016"}, {"body": "rpkilby guess using component listening ted event relevant data sent along affected data parent could handle accordingly function would executing result parent scope", "d": "4/2016"}, {"body": "rpkilby", "d": "4/2016"}, {"body": "correct", "d": "4/2016"}, {"body": "von holy crap idea could entire time facepalm emoji", "d": "4/2016"}, {"body": "rpkilby subscribe vuejsvuejsorg repo commits wink", "d": "4/2016"}, {"body": "viewpoint standalone component developer would need something like working directly call function child also work fully replace communication two nested depending components dismissed mainly please reconsider usecases vuecard vuecollapsible vuecompsscrollspy", "d": "4/2016"}, {"body": "correct paulpflug communication slot components host implemented calling slot components listening event parent tight coupling since designing tightly coupled components meant used together think straightforward solution also complex slot distribution best handled using programmatic function simplify things lot closing think questions answered seems strong arguments deprecation", "d": "4/2016"}, {"body": "clearly undefined obviously string even empty", "d": "4/2016"}, {"body": "display undefined textbox undefined show empty display empty", "d": "4/2016"}, {"body": "show undefined textbox user understand", "d": "4/2016"}, {"body": "show empty like", "d": "4/2016"}, {"body": "nt define like docs suggested", "d": "4/2016"}, {"body": "lazy define show empty string better like template engine like smarty template engine show empty string variable define", "d": "4/2016"}, {"body": "problem found lazy define define get unexpected results much better declare data structures", "d": "4/2016"}, {"body": "much code write", "d": "4/2016"}, {"body": "show empty string like template engine", "d": "4/2016"}, {"body": "difference one line ca nt work nt declarative understandable", "d": "4/2016"}, {"body": "chenyouxiang vuejs try solve issues goal lightweight create small helper function convert empty string note recommended define properties better maintainability reactivity", "d": "4/2016"}, {"body": "really edit future participants bug empty", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "phanan please reopen thanks", "d": "4/2016"}, {"body": "duruitang trying achieve looks trying put data vue structure nt using data props attribute phanan unless know duruitang seems rude ridiculeclose issue without least attempt help seems beginner least point gitter channel forum", "d": "4/2016"}, {"body": "nirazul issue started bug title empty body closed thinking spamtroll duruitang edited filled details reopened yes trying reproduce bug talking", "d": "4/2016"}, {"body": "nirazul sorry fault pressed confirm key opened issue please nt blame phanan sorry bother", "d": "4/2016"}, {"body": "see last section merges two arrays uses copy original nt altered ps use simple", "d": "4/2016"}, {"body": "egoist use vuevuearr altered code vtitle vdestination vleavingtime function new vue el documentbody lt body id documentbody gt data camp shown false apiurl apiordercamps data page limit loadmore true ready function var thisinitmod camp \u521d\u59cb\u5316camp methods initmod function mod var \u91cd\u7f6e mod shown false mod data mod page mod loadmore true \u8bf7\u6c42\u6570\u636e globalweuishowloading ajax url mod apiurl type get timeout data page mod page limit mod limit datatype json complete function globalweuihideloading success function res resret mod data resdata resdatalength lt mod limit mod loadmore false else mod page mod shown true else globalweuishowalert resmsg error function globalweuishowalert \u8bf7\u6c42\u6570\u636e\u51fa\u9519 \u52a0\u8f7d\u66f4\u591a\u6570\u636e loadmore function mod var globalweuishowloading ajax url mod apiurl type get timeout data page mod page limit mod limit datatype json complete function globalweuihideloading success function res resret resdatalength lt mod limit mod loadmore false else mod page working resdata function v mod datapush v working mod data merge mod data resdata else globalweuishowalert resmsg error function globalweuishowalert \u8bf7\u6c42\u6570\u636e\u51fa\u9519 marked section please check", "d": "4/2016"}, {"body": "merge may returning different copy original array use concat instead", "d": "4/2016"}, {"body": "phanan sorry nt think possibility seen strange plausible question", "d": "4/2016"}, {"body": "clarifying point originally came gitter chat filter another changes people nt thrilled losing correction courtesy josephsilber filter param", "d": "4/2016"}, {"body": "thanks removed point scott", "d": "4/2016"}, {"body": "worst case come tiny plugins deal filters problem wo nt work without babel compilation", "d": "4/2016"}, {"body": "stoked changes either filters seems easy alternative registering global mixins however fond idea polluting components methods scopes ultrasimple tasks like pluralize forth never used twoway filters however filters convenient beautiful two things vue always right far", "d": "4/2016"}, {"body": "read post vue stoked new possibilities especially virtual dom server rendering also surprised little sad filters gone one favorite parts vue easily usable chainable mainly easily extensible beautiful syntax use template directly especially combination loops perfect match thinking use computed properties replace filtering every prop want worried writing lot boilerplate future mixins might mitigate part problem still feel like part elegance ease using vue going missing", "d": "4/2016"}, {"body": "everybody agrees please click thumbs description better spamming thousand people even better come meaningful use cases", "d": "4/2016"}, {"body": "never used twoway filters would really miss filters sometimes use computed properties simple cases convenience really speeds workflow consider simple example html item much easier write cases required complex filtering compare following html item javascript new vue el body saying second one hard write use many places start repeating takes extra time could perhaps use useful features either way stay happy vue user sharing opinion filters deprecated", "d": "4/2016"}, {"body": "filters reusable create function format data register filter use instances", "d": "4/2016"}, {"body": "mixin separate module method separate module computed prop function", "d": "4/2016"}, {"body": "left comment announcement thread instead duplicating simply link", "d": "4/2016"}, {"body": "totally understand feeling something super convenient taken away first please take moment read chrisvfritz comment forum thread make discussion easier copy pasting theotherzach thanks passion vue like explain deprecation bit better first introduce member vue core team use vue time freelance ui data visualization work also educator teaches people use vue rails among web technologies run code school help people learn use tools use together almost every day also one big proponents removing filters vue problem filters beginners vue big part reason favor deprecating filters actually beginners working students conversation come student filter basically function mentor yes student ok use normally function parentheses mentor well special kind function student use places like computed value mentor use templates special pipe syntax student one big things trips beginners exceptions filters functions except require special syntax ca nt used everywhere use pipe syntax different pipe syntax may integrated meaning wo nt long people two similar operators something similar quite one actually javascript util libraries useful vue nt one case transforms strings numbers specific filters yes useful applications come util libraries general useful dozens great util libraries choose vue nt utility library frankly none utilities offered bestinclass handling currencies dates even filtering arrays nt focus many apps nt require apps worked face problems require robust solution vue currently offers could offer without introducing significant bloat wheel reinvention apps accountingjs handled currency superbly momentjs mentioned handles dates times nt handle many pluralizations well custom computed value often desirable little advantages computed properties using computed properties place filters also offers advantage processed value easily reused dry way anywhere component find apps time computed property also moves implementation details template leaving clean description component advantage globally defined filters one need look function computer value see tweak exactly working arrays chaining javascript methods even provides linear list processing pipes even declarative easily manipulated way usefulness globally defined whatever need define function anything else want accessible components great way personally never wanted always preferred put helper method module import module need still important note registering globals kind nt made harder case directive say actually one recently looked vue projects every single one somewhere also used fact one past applications nt use debounce technically utility lodash many robust projects offer debounce solutions problem pretty universal ui development kind app writing debounce function also nontrivial enough probably want use lodash implementation nearly every project remains internal debate see goes yes personally seems also others removing debounce removes convenience offered thanks passion seriously love much love vue really glad voicing concerns especially kind respectful way hearing core team designers frontend developers data visualization specialists use vue work pretty diverse definitely dedicated pushing dogfood want eat", "d": "4/2016"}, {"body": "talk cheap let code see without filter apply filterby reverse write global pure filter functions seperate file code reuse js filtersjs function filterby list value return listfilter function item return itemindexof value gt function findby list value return listfilter function item return item value function reverse value return valuesplit reverse join export filterby reverse findby use filters appvue template js reverse demo reverse msg import reverse filterby findby filtersjs export default data return userinput msg hello vue words black block blue alpha methods reverse filterby findby see result filter used following vue code would js reverse demo msg reverse", "d": "4/2016"}, {"body": "boilerplate concerns several ways deal explicitly importexport like raywill demonstrated bit verbose benefits nt lookup vue filter documentation understand works super explicit functions coming implemented functions javascript altercompose fit special uses cases unlike builtin filters touch import programmatically reuse functions methods computed properties anywhere write javascript attach html word go functional advanced users helper functions look like js function returns predicate function arrayfilter function contains value return thing gt thingindexof value gt function getvalue return b gt return getvalue gt getvalue b important design consideration builtin filters useful lack flexibility pure javascript builtin function nt suit needs either end reimplementing something similar shipping final code builtin becomes useless dead code wait vue update release new version", "d": "4/2016"}, {"body": "like prototype approach cases need multiple filters pretty common use along html word cases would add html word approach make code less readable yes least opinion guess could combined filters like nt feel right either open changes want come almost easy way handle also benefit able use filters anywhere really good point", "d": "4/2016"}, {"body": "note vuejscollaborators discussing option provide utilities package current integrated filters plenty resources provide utility tools code base one good thing removing core filters customiseimplement gives lots flexibility", "d": "4/2016"}, {"body": "template expressions simple possible ideally like computed prop hold logic creating filtered data way readable better something like ect much reusable assign computed property even passed child components wanted use filtered data two places easier simpler reliable readable templates simple expressions compared chained filters expressions", "d": "4/2016"}, {"body": "anyone following along answered chrisvfritz", "d": "4/2016"}, {"body": "following solves use case globally available pure view helper functions withdraw filter removal concerns burn em congratulations chrisvfritz changing somebody mind mine internet html word", "d": "4/2016"}, {"body": "totally agree remove filters stick plain js functions", "d": "4/2016"}, {"body": "blakenewman good point mostly convinced point thinking readibility think something like achieved quick jsfiddle concept", "d": "4/2016"}, {"body": "one good thing removing core filters customiseimplement gives lots flexibility always able customizeimplement vue nt utility library frankly none utilities offered bestinclass concerned removing filter functionality templates removing builtin filters make lot sense easily recreated proxying underscoreother util libraries someone could even release single plugin recreates current builtin filters using computed properties place filters also offers advantage processed value easily reused dry way anywhere component course use computed properties reuse elsewhere nt filter still much convenient points posted link shared", "d": "4/2016"}, {"body": "support syntax filters operates like proposed syntax would allow people keep using beloved filters bring line future may hold eventually pipes switch internal implementation without changing api", "d": "4/2016"}, {"body": "pipes approved subject lot changes", "d": "4/2016"}, {"body": "theoretically subject change seems stable status mindeavorespipelineoperator", "d": "4/2016"}, {"body": "josephsilber youngsteveo thelinuxlich think page regarding value pipes general one advantage new compiler pipe generated render function code babel still needs explored inconceivable gains momentum babel plugin developed could happily chain methods pipes everywhere app huge fan livescript functional languages definitely recognize value", "d": "4/2016"}, {"body": "pipeline operator even stage", "d": "4/2016"}, {"body": "thelinuxlich yes believe still waiting champion", "d": "4/2016"}, {"body": "one alternatives wanted mention power javascript allows achieve expressiveness choice imo better putting filtering logic inside templates", "d": "4/2016"}, {"body": "vue perform following cases one user name updated html username gt capitalize seems like former would rerender one object latter would recompute entire list", "d": "4/2016"}, {"body": "rpkilby nt seem equivalent like html capitalize username", "d": "4/2016"}, {"body": "still nt like idea using methods filters gut feeling seems wrong ca nt really explain either way discussed methods making filters available", "d": "4/2016"}, {"body": "nothing suggested thread comes even close expressiveness succinctness filters nt makes real sad like said forum thread removes big chunk makes vue vue looking find corner sobbing audibly", "d": "4/2016"}, {"body": "way change encourages good javascript coding deal", "d": "4/2016"}, {"body": "long discussion user perspective suggested keep syntax support feel elegant natural imagination something like javascript itemname methods filterby items field return filtered orderby items field order return filtered impression would approach best worlds end though convinced removing filters whole actually better thing like thelinuxlich said encourages better javascript logic thinking nt introduce logic laravel blade framework view layer nt vue templates said josephsilber look corner find", "d": "4/2016"}, {"body": "filters feel beautiful syntax exactly filter syntax look like also one attractive thing vue comes batteries included would really sad lose either things opinion make vue stand", "d": "4/2016"}, {"body": "reading thread seems concern filters fact vue default filters really function still sure like filter plugin thinking blakenewman prebuilt examples people come filters plug play would great absolutely agree creating filters userland responsibility still wanted pipe chaining abilities globalness original filter feature concerns globalness covered chaining pipe helps ton reading templates understanding expected output pipe chaining discussed still done bad thing designer gold filter designer tool js programmer argument writing better js falls board book understand would wanted designer want write better code filters allows beautifully smile scott", "d": "4/2016"}, {"body": "thing regarding chaining filters primarily used two purposes formatting text processing array case formatting text time single utility method used chaining really much problem case arrays already pointed array processing fact logic better suited javascript multiple chained array filters may look okay simple get ugly use arguments also encouraging put much logic template really nt also inflexible easily retrive processed value comparison original example written javascript magic alternative syntax filterspecific api learn access processed value intelligently cached also free add sugar top shown previous comments plus template looks cleaner know like handy thing taken away honestly arguments filters right sounds like trying keep syntax syntax sake opinion takes elegant justify feature needs provide objective value case nt see filters", "d": "4/2016"}, {"body": "example exemplifies issue think best js programmer nt need js programmer know says nothing really bad practice smile fact filtering method global also means must go searching docs code decipher output find method really elegant right ok could method name like filterbyorderbyandlimit arguments would correct might feasible still nt look good want filterby orderby need separate method want add currency formatting another method filter chaining templates makes manipulating presentation flexible expressive concern yet properly addressed methods lack knowledge nt allowing understand methods better possible agree much logic template something avoid filter chaining ability simply pop filter anywhere app components templates fantastic concept reason added begin reason reasons name bet money outweigh promotes bad practices mile anything allows flexibility used improperly like vue main argument flexible allowed vue used different ways filters nt much different vue internal nt affect vue might used externally still nt devalue importance remember lot people also said would nogo upgrade important smile new way needs attributes old way chainable global add templates nicely express data templates manipulated forget anything sure everyone pretty much satisfied personally ca nt see happening methods yet scott", "d": "4/2016"}, {"body": "smolinari clearly stated put less logic templates opinion whether like obviously free disagree ca nt help want work recommended best practice given explained chaining issue complex logic done javascript also given examples add globally available methods see example custom chaining syntax similar want goal framework provide believe best way develop front end applications please everyone please nt use upgrade nt give feature back nt work", "d": "4/2016"}, {"body": "nt guys try new alpha release week come really valuable comments based practice maybe try refactor existing app let us know impossible improved got worse discuss better would useful everybody think", "d": "4/2016"}, {"body": "agreed agree smile nt agree proper reason taking something gained much love guess decided time pragmatic js better pragmatic html argument nogo upgrading others said trying communicate mitigate one last argument look user user eyes say system like laravel mvc mvvm system incorporates vue also allows user system build components filter simplifies learning curve allows users system get lot done without touching js fan vue allow nonjs programmers still get lot done reason nt like react jsx combination lot smaller user base vue time goes bet money also understand real flexibility lies js still please nt rely solely js flexibility vue keep mind everyone killer js programmer fact people nt filter nice way get lot done people nice stepping stone towards js manipulation filters ca nt get done go deeper js methods ok enough done thanks listening rate vue still awesome smile azamatsharapov good point scott", "d": "4/2016"}, {"body": "seeing people trying justify bad practices inside js makes sad really nt need pro basic homework nt basic anymore days", "d": "4/2016"}, {"body": "problem filtersinsidemethods semantics oops term filters like static functions methods nonstatic function filters convey extremely different semantics methods biggest difference filters use methods using work changing look like good practice would rather advocate creating separate global object contain filters", "d": "4/2016"}, {"body": "nt look like good practice globals good practice recommended approach explicitly importing helper methods attaching prototype workaround want explicitly import methods semantics filters coined concept anyway javascript would nt invent different semantics uppercase string call function javascript functions", "d": "4/2016"}, {"body": "going make one comment try make personal point clearer mainly trying justify bad practices inside js comment certainly trying realize vue templating system templating system afraid trying move away role feel nt templating enginesystem take twig templating engine successful example one could expect templating system template designers section developers section docs templating system twig powerful template designer chock full default behaviors including filters allows nondevelopers ton template system without directly knowing php learn twig offer use looking vue like see vue template designers section docs smile also important extensibility twig something nt available stock version added developer steps nice thing extensions shared means done nice thing two levels designer developer get much broader base users much much broader behavior defaults nt enough start learn willingly underlying language learn best practices rest saying vue ca nt template engine without learn js say lowering market value considerably say leave door open let others make tools templating engine plugins great everybody fighting templating system also counterproductive imho student talking filters example evan someone learning js someone learning template engine latter bet conversation would go differently rate still think vue winning system hope thoughts might make others think differently vue roles way smile scott", "d": "4/2016"}, {"body": "filters coined concept coined first place believe inside external variables like converted hence plain js functions defined outside component ca nt referenced filters introduced overcome limitation limitation still exists assuming right remove limitation would require devs explicitly code referencing access js functions would referenced js powerful feature prone abuse migrating old code pain current syntax looks way better agree filters basically js functions imported component nt like defined place methods", "d": "4/2016"}, {"body": "hi everyone read whole thread think one would miss built filters like everyone want still around pipe operator templates core team says logic keep javascript templates besides coming feature pipe operator quick summary think could good solution js implement native pipe operator would pipe operator plugin keeping version users wait new feature implementation could included warning coming deprecation something know anyone could implement plugin think would better provided keeped vue team could possible", "d": "4/2016"}, {"body": "could wrong nt think vue allows plugins mess compiler", "d": "4/2016"}, {"body": "azamatsharapov course nt think would mess vue compiler openmouth", "d": "4/2016"}, {"body": "yerkopalma absolutely love pipe operator use obsessively functional languages ca nt wait javascript imagine vue never filters would requesting frontend framework extend javascript syntax domain babel compiletojs language ui framework prefer use language like livescript often problem nt vue javascript fix additionally able pipe results render babel hope even able use tracked plugin want consistently everywhere javascript instead template want pipe likely able today warned pipe using templates likely different precedence behavior one babel smolinari others two phrases variations thereof keep hearing think developers user perspective think beginners imply assumption thinking groups mentioned guess needs reiteration everyone core team either designer frontend developer combination use tools every day work using vue believe thinking beginners made case guess go detail educator proponent eliminating filters thinking beginners personally taught hundreds people maybe even thousand practice web development usually scratch former coding experience done middle schoolers high schoolers university students professional adults senior citizens perspective tell filters seem like exciting magic first ultimately slow student learning introducing complexity limited convenience never angular vue conversation reversed trying introduce hard time explaining needed use talk deprecation eliminated filters curriculum code school gathered enough evidence harm good beginners rather gain experience versatile vue features like methods computed properties even discouraged use filters made easier pick bad practices hope puts two complaints bed see", "d": "4/2016"}, {"body": "imagine vue never filters would requesting frontend framework extend javascript syntax course filters natural templates twig mentioned feel pipe operator natural mustache syntax templates mean mustaches html javascript guys going remove whats different pipe operator", "d": "4/2016"}, {"body": "think children argument dumb far know vue designed teaching javascript frontend developers get shit done latter filters great never angular vue conversation reversed trying introduce hard time explaining needed use much disagree using python framework called django since templating language inspiration later born templating languages filters day one using frontend developers ten years come appreciate beauty usefulness would sad see syntax go away django filters", "d": "4/2016"}, {"body": "uninen please mind tone calling others arguments dumb constructive way participate discussion drawing analogies serverside templating languages one important aspect note serverside template languages amount flexibility vue templates computed properties limited expressions also built completely different purposes outputting static strings vue templates representations interactive dom twoway bindings event handlers component props filters fit limited use case vue context today believe bad idea allow filters everywhere eg filters vmodel vfor von introduces complexity good one possible alternative keeping filters text interpolations ie use inside directives", "d": "4/2016"}, {"body": "interesting reference angular still filters renamed pipes also intentionally removed list filtering ones", "d": "4/2016"}, {"body": "sorry language meaning insult anyone purpose framework hard stuff make look easy developers use tools still argue syntax ca nt beat would sad see go nt know understand much hood mechanisms users point view practicality beats purity related note interesting see much passion seems community vue fresh invigorating tool maybe take part painting particular shed", "d": "4/2016"}, {"body": "another datapoint ember nt filters allow component methods though computed properties use case pure functions performing intemplate transforms register handlebar helper ember helper handlebar helpers syntactically distinct things nt handlebar helpers bring got common piping filter syntax however handlebar templates logicless means require special syntax intemplate function call issue vue nt", "d": "4/2016"}, {"body": "filters simple beginners see magic using pretty output filterordersearch arrays ease define simple clear templates define filters external module templates get javascript import moment moment methods moment date format return moment str format format template suggestion leave old filters template move filters separate module use methods section need use specific filters utils package javascript import moment vueutilsdate import price vueutilsnumbers methods moment price use common filter result translated simple function call note filters use format data like dates numbers strings filtering arraysobjects think better use computed function common vue module javascript import vueutilsarray computed orderstable return thisorders filterby thisfilter sortby date limit benefits beginners ease use old filters computed use pretty function templates format data output programmers write functionsmodules ease use separate module think need core vue vue must utils developerstemplate designer need time require lodash moment else install utils npm ease use save old call syntax templates one important think must done filters must pure functions like getters vuex ease support ease usereuseextend good look templates", "d": "4/2016"}, {"body": "guys need clear upgrade path desire learn modularise javascript code", "d": "4/2016"}, {"body": "thelinuxlich speak filters syntax sugar completely exclude filters beginners vuejavascript bad laravel community like vue simple powerful completely remove filters need give alternative template designers need know sort array filter want enter code form example get result programers must know modularise javascript code rest use small stuff need know speak template designers put html inside code use javascript vueuse vueutils computed orderstable return thisutilsarray thisorders filterby thisfilter sortby date limit example proud need know js filter sort arrays lot people want things hard understand code like need make complicated things type people give simple solution good developers", "d": "4/2016"}, {"body": "one possible alternative keeping filters text interpolations ie use inside directives think could good compromise satisfy everyone ever used filters actually find weird currently would allow convenient text formatting want use filters reduce complexity effectively removing twoway filters", "d": "4/2016"}, {"body": "opinion momentjs filter example already passing much logic templates seriously direct pipe love spec repository reaches", "d": "4/2016"}, {"body": "like vitaliylavrenko suggested could good middle ground scott", "d": "4/2016"}, {"body": "like vitaliylavrenko proposal say something similar pipe operator plugin azamatsharapov said plugins nt mess compiler confuse even possible misunderstood comment", "d": "4/2016"}, {"body": "thelinuxlich better read think developer ask someone nt know javascript developers better something like javascript vueuse vueutils computed orderstable return thisutilsarray thisorders filterby thisfilter sortby date limit middle used like vueresource common lib pipe syntax sugar thing things filterby foo orderby bar limitby ease read need pass data diff templates store modifications one data like javascript padleft capitalize title padright upper title abstract situation use one two templates need store data objects increase memory usage yes use helper method use template template designers far away javascript better something like title capitalize padleft translated function call ease functional think diff people developers ease diff way people want simple", "d": "4/2016"}, {"body": "say much logic templates antipattern instead learn specific dsl filters learn javascript", "d": "4/2016"}, {"body": "thelinuxlich use jsx get react binding things vue get people nt know javascript google something dislike pipe nt use add something like turn onoff people ease say js developers use vue strongest side vue standart common filters need better separate lib ease add vue use want vue something like asm good devs use", "d": "4/2016"}, {"body": "guys think decision vue core team took explained well repeat thing comment something new valuable", "d": "4/2016"}, {"body": "part vue core principles easier nonjs developers even hurts language principles agree probably nt case", "d": "4/2016"}, {"body": "said mostly fine filters deprecated surely miss sake convenience sure similar filter system introduced plugin given proof concept example little earlier could used computed props well inline html itemfoo hand someone wants pipe sure done something like html itemfoo perhaps would hook would allow plugins parse expressions process however want could possible way solely depends complex implement effects would framework performance size would actually want go direction feel like given elegant alternatives easy use plugins something core get used fairly quickly", "d": "4/2016"}, {"body": "filtering arrays sort etc better use computed much clean think problem display data diff format field createdat need template render ddmmyyyy links filters used good alternative get use define date method make template dirty store additional fields cost memory objects became heavy", "d": "4/2016"}, {"body": "final decision filters supported inside text interpolations limits text formatting purposes enforcing logic javascript land vue ship builtin filters community create filter packs needed filter syntax change use function invocation syntax arguments instead spacedelimitered brings inline javascript popular templating languages swig twig", "d": "4/2016"}, {"body": "thanks listening evan makes vue great great leader smile scott", "d": "4/2016"}, {"body": "contained elements removed part parent element transitions triggered however use css selectors apply transition behavior parent element transition classes", "d": "4/2016"}, {"body": "fqzhang solve like nt think vue problem per se opinion using inside watcher always allow edge cases error appear", "d": "4/2016"}, {"body": "version using update", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "try extract problem jsfiddle quite hard find bug using entire site", "d": "4/2016"}, {"body": "hello chinese speaking users please make sure add couple chinese characters title issue whole description chinese smile way nonchinese unsubscribe issue right notification page better try describe issue english xiexie", "d": "4/2016"}, {"body": "\u76ee\u524d\u7684 keepalive \u5b9e\u73b0\u662f\u901a\u8fc7\u5224\u65ad constructor keepalive \u4f1a\u91cd\u65b0\u8bbe\u8ba1 keepalive", "d": "4/2016"}, {"body": "recommend listening native drag events component call method achieved mnaged create dynamic component system native drag drop acctully hard ie template methods dragnewcompont function e edatatransfersetdata text dataset call event set data drag transfer newcomponentdrop function e consolelog newcomponentdrop var data edatatransfergetdata text call event manaipulate data nb might need recreate destroy dynamic componets drag drop events hope helps", "d": "4/2016"}, {"body": "known issue wechat embedded browser fixed commit next release", "d": "4/2016"}, {"body": "found solution", "d": "4/2016"}, {"body": "need use", "d": "4/2016"}, {"body": "hi thank reply works wondering vif false div vif automatically removed dom got warning vue warn error evaluating expression stylesbgcolour", "d": "4/2016"}, {"body": "expected deleted use", "d": "4/2016"}, {"body": "nt work stylesbgcolour always false also understanding delete bg styles vif destroy code inside vue nt evaluate stylesbgcolour", "d": "4/2016"}, {"body": "seeing error warning nt working", "d": "4/2016"}, {"body": "object deletion works vif still work put stylesbg amp amp stylesbgcolour colour option show", "d": "4/2016"}, {"body": "please open separate issue problem preferably isolated codepen reproduction", "d": "4/2016"}, {"body": "could please look", "d": "4/2016"}, {"body": "solved prevent drag events", "d": "4/2016"}, {"body": "please follow issue reporting guidelines provide clear description reproduction steps", "d": "4/2016"}, {"body": "use array drive children js moduleexports data function return comps childone childtwo components childone require childtwo require", "d": "4/2016"}, {"body": "\u8bf7\u7528", "d": "4/2016"}, {"body": "type number \u4e0d\u662f \u7279\u6027", "d": "4/2016"}, {"body": "\u5e94\u8be5\u662f vue \u7684\u4e00\u4e2a pc \u7aef\u53ef\u4ee5\u7528", "d": "4/2016"}, {"body": "\u7279\u6027\u53ea\u662f\u5728\u503c\u4e3a string \u65f6\u81ea\u52a8\u8f6c\u6362\u4e3a", "d": "4/2016"}, {"body": "\u8fd9\u4e2a\u4e0d\u7b97 bug model breaking", "d": "4/2016"}, {"body": "\u5f3a\u70c8\u5efa\u8bae \u628a\u6587\u6863\u4e2d\u8bef\u5bfc\u6211\u7684 \u4fee\u6539\u4e3a", "d": "4/2016"}, {"body": "hello usage question encourage ask forum gitter try use issue tracker bug reports feature requests question reference elements", "d": "4/2016"}, {"body": "dom error use numbers ids nothing vue", "d": "4/2016"}, {"body": "hey seems like provided wrong fiddle link", "d": "4/2016"}, {"body": "sorry right one", "d": "4/2016"}, {"body": "hello limitation replace things work", "d": "4/2016"}, {"body": "thank simplesmiler solves problem", "d": "4/2016"}, {"body": "please check section documentation carefully working demo", "d": "4/2016"}, {"body": "ok got pass constructor via vueextend heres working fiddle", "d": "4/2016"}, {"body": "pespantelis thanks behaviour looking see nt think appears official doc yet", "d": "4/2016"}, {"body": "hi thanks filling issue think shared wrong jsfiddle take look fix please", "d": "4/2016"}, {"body": "updated sorry posva", "d": "4/2016"}, {"body": "worries smile", "d": "4/2016"}, {"body": "current parsing mechanism detect nested unwrapped svg elements want use slots wrap wontfix longer issue future versions", "d": "4/2016"}, {"body": "already using dev build", "d": "4/2016"}, {"body": "oh right could sworn nt issue confused lack warning nt notice using production build", "d": "4/2016"}, {"body": "api replaces inner content declared slot content distributed controll white space distributing structure slot structured distributed content see example see full example", "d": "4/2016"}, {"body": "nt believe understand actual issue explaining problem api works actually find great feature vue templates actual problem default slot becomes empty form whitespace present named slots removing whitespace making dom elements follow seamlessly way actually default slot show content provided original template simplified example works slots follow without whitespace nt work whitespace present newline jsfiddle example template definition ps sure trying show fiddle link exact copy one provided", "d": "4/2016"}, {"body": "michelpaus thank clarification miscommunication thought suggesting output formatted manner think trying say white space present defined distributable content default slot outputs default slot content", "d": "4/2016"}, {"body": "initial description fiddle bit confusing nt know fiddle better demonstrates issue two axes named slots used whitespace present enclosing tags named slots used whitespace effect named slots used whitespace overwrites default slot inconsistent first case whitespace effect", "d": "4/2016"}, {"body": "might related", "d": "4/2016"}, {"body": "use plain string styles use object", "d": "4/2016"}, {"body": "sure looking best guess scott", "d": "4/2016"}, {"body": "official guide states although use mustache interpolations class classname bind class recommended mix style vbind class use one please try avoid outcome guaranteed", "d": "4/2016"}, {"body": "ah overlooked sorry though would vote possible future", "d": "4/2016"}, {"body": "kvdmolen would nt solution offered work scott", "d": "4/2016"}, {"body": "smolinari right thanks link nt work solution html page", "d": "4/2016"}, {"body": "make sure use dev build already warns usage", "d": "4/2016"}, {"body": "detail example", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "jinjiang html \u6807\u9898\u5185\u5bb9 \u6807\u9898\u5185\u5bb9", "d": "4/2016"}, {"body": "removed vue", "d": "4/2016"}, {"body": "use option", "d": "4/2016"}, {"body": "code example would really helpful", "d": "4/2016"}, {"body": "obonyojimmy something along", "d": "4/2016"}, {"body": "data must plain object giving class explained docs recommended reading", "d": "4/2016"}, {"body": "prototype methods ignored using nonplain objects state rabbit hole complexity supported design", "d": "4/2016"}, {"body": "jonagoldman thanks read thanks asked question example works fine summary works works", "d": "4/2016"}, {"body": "see getter reactive", "d": "4/2016"}, {"body": "hmm exactly cry", "d": "4/2016"}, {"body": "\u7528", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "hello thanks reporting issue duplicate already fixed release next vue version patch case need", "d": "4/2016"}, {"body": "use watcher since already using", "d": "4/2016"}, {"body": "nt see work use watcher watch reset fails logic cause watcher fire twice reset value manually without vuejs watcher aware example changed", "d": "4/2016"}, {"body": "could run filter saves original value property grab later example vue nt concept original values deals current values", "d": "4/2016"}, {"body": "sirlancelot thanks trick", "d": "4/2016"}, {"body": "problem may also consider work filter handler instead dom event depends problem solving", "d": "4/2016"}, {"body": "hi thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described would help us lot", "d": "4/2016"}, {"body": "hello although standard tag may appear everywhere case browsers please read section explanation similar caveats particular case would use directly sufficient simple cases case want example two per array item would prepare data either computed property filter closing nt much right browser following standard", "d": "4/2016"}, {"body": "raf", "d": "4/2016"}, {"body": "benched raf nt make significant difference", "d": "4/2016"}, {"body": "thx answer \u043f\u0442 \u0430\u043f\u0440 \u0433 \u0432 evan notifications githubcom closed receiving authored thread reply email directly view github", "d": "4/2016"}, {"body": "posva look sounds like requestanimationframe", "d": "4/2016"}, {"body": "cool thanks rpkilby could nt find", "d": "4/2016"}, {"body": "quick fix placing literal vif resolves bug quick fix indeed bug assigning look", "d": "4/2016"}, {"body": "vuejscollaborators fyi due modifiers directives parsed previous directives fed previous directive even though applied directive", "d": "4/2016"}, {"body": "wowsie happen every directivemodifier though eg prevent click default", "d": "4/2016"}, {"body": "simplesmiler happens terminable directives found issue creating pr", "d": "4/2016"}, {"body": "hello thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described", "d": "4/2016"}, {"body": "closing due inactivity please open new issue reference one follow information", "d": "4/2016"}, {"body": "reason implementation make sure clear vue directive achieved clear simple prefix makes simple integrate tools even angular without clashes", "d": "4/2016"}, {"body": "nablex slightly tangent nt need prefix components except stylistic preference unless using global components chance components clash name names defined locally code uses", "d": "4/2016"}, {"body": "building tiny library reusable components taken naming prefix make clear belong central library reason clear wish could use clashes responsibility components", "d": "4/2016"}, {"body": "nablex unlike angular library developer decide name component used template library consumer js var goodlibrary require goodlibrary moduleexports components accordeon goodlibrarygoodaccordeon library consumer decides name", "d": "4/2016"}, {"body": "simplesmiler get possible feature using light development simply stating would nice able choose prefix options generally good thing", "d": "4/2016"}, {"body": "achieve similar behavior passing component prop instead using slots", "d": "4/2016"}, {"body": "simplesmiler solution best available current version vue think like javascript difference passing value already evaluated parent scope vs passing function takes arguments child scope return value addressed future version nt intend introduce suboptimal solutions", "d": "4/2016"}, {"body": "alternative method indeed clean solution situations problem naming component line wrapper component offering lead lot superfluous component generation worse reusing existing component may need wrap new one get naming correct look forward said future version", "d": "4/2016"}, {"body": "update removed corner cases directive implementations though probably optimized intimate knowledge core think cleaner solution component approach proposed directive case component simply exposes additional datamethods much like already exposes slotsprops anyone using component much part api component rest proactively shared component specific name access random state case built list component allows anything image slider button picker actual data lists optional lazy loading windowing multi select functionality requires outside access specify work cases example parts interactive eg clickable example want add swipe support example slider window set fixed size scroll size default selector windowed see example want scope part mouseclick interaction add swipe support trigger previous amp next browsing functionality", "d": "4/2016"}, {"body": "\u7f51\u7ad9\u7684 issue \u8bf7\u53d1\u5230\u7f51\u7ad9\u7684 repo", "d": "4/2016"}, {"body": "create custom filter angular ngmodel trim value default sucks want trailing spaces app", "d": "4/2016"}, {"body": "azamatsharapov leave tailing space intact opposite request many cases maybe tailing spaces necessary worth adding library", "d": "4/2016"}, {"body": "luwenjin implicit behaviour unintuitive using filter triming needed seems right way", "d": "4/2016"}, {"body": "posva actually proposing explicit way without trim vmodel trim", "d": "4/2016"}, {"body": "modifier future current vmodel params", "d": "4/2016"}, {"body": "hey issue nt seem reproducible fiddle provided since removing add class anyhow nt seem issue instead take look compilation scope section vuejs guide trying bind child property within parent scope instead might want try something like hope helps feel nt solve issue please feel free reopen", "d": "4/2016"}, {"body": "move parent scope try like", "d": "4/2016"}, {"body": "hi sure saying want number instead string shoud add number input please next time make sure sure ask question forums gitter chat get faster feedback try questions issues smile", "d": "4/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "4/2016"}, {"body": "hello thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behaviour described instance nt even know", "d": "4/2016"}, {"body": "code correct data bug jsbincom", "d": "4/2016"}, {"body": "commit answers question", "d": "4/2016"}, {"body": "yczz directly access value instead going problem trying access value props nt mirror props properties", "d": "4/2016"}, {"body": "props longer merged directly defined instance", "d": "4/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "4/2016"}, {"body": "sorry solution", "d": "4/2016"}, {"body": "describe old way things web page countain vuejs instance without router already know best could try use pjax style", "d": "4/2016"}, {"body": "check discussion", "d": "4/2016"}, {"body": "aha thanks close feature request", "d": "4/2016"}, {"body": "thanks filing issue please follow issue reporting guidelines provide minimal jsfiddle jsbin containing set reproducible steps lead behavior described", "d": "4/2016"}, {"body": "forget found problem lost vue binding de wizard plugin move content slot jquery html method solution thanks", "d": "4/2016"}, {"body": "still help nt provide repro anyway make sure sure ask question forums gitter chat get faster feedback keep questions issues smile closing feel free reopen issue find really bug", "d": "4/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks", "d": "4/2016"}, {"body": "ok", "d": "4/2016"}, {"body": "edited sorry reread issue indeed seems logical called per instance however seem related amount instances dom used component data initialisation called twice", "d": "4/2016"}, {"body": "probably want part core css custom js hook moving animations complicated unlikely included core", "d": "4/2016"}, {"body": "made pull request tell guide", "d": "4/2016"}, {"body": "hello sqal would pass static class name binding add directly attribute pretty sure feature really easy add adding static class names class binding nt look right taken look guide section concerning class bindings may help", "d": "4/2016"}, {"body": "far aware already fixed dev", "d": "4/2016"}, {"body": "posva hi dropdown component want bind custom classes options prop also additional classes options true eg name dropdown props open type boolean twoway true default false options type object coerce options return objectassign dropdowndefaults options", "d": "4/2016"}, {"body": "see nt know already supported sweatsmile created array computed property since already fixed closing issue see problem appears new release feel free open issue", "d": "4/2016"}, {"body": "heads use nt actually dev sqal would work dev", "d": "4/2016"}, {"body": "wait sorry wrong close long day even wrote test", "d": "4/2016"}, {"body": "json ld better handled directive", "d": "4/2016"}, {"body": "maybe directive works better opinion semantically correct component case since component structure reflect dom structure apart debatable choice still bug", "d": "4/2016"}, {"body": "meaningful transitioning outin exactly one item want outin transition vfor items consider using delays css transitionanimations achieve", "d": "4/2016"}, {"body": "think documentation fine beautiful attract people gitbooks documentation nt understand second point confused related repository", "d": "4/2016"}, {"body": "core docs specific demands easily customized gitbook may eventually move docs projects place moment gitbook used quick takes little effort", "d": "4/2016"}, {"body": "cool posva mean new comers get bigger picture many official plugins easily better place showcase plugins", "d": "4/2016"}, {"body": "anything guide could incorporate page vue community efforts part despite links site navigation page could cover topics community forum gitter channel third party contributions awesome vue page show tell subforum contributing vue rules contribute rules issue reporting miss anything scott", "d": "4/2016"}, {"body": "smolinari like turn current community dropdown actual page would take pr", "d": "4/2016"}, {"body": "actually keep drop used often get different places would disadvantageous click page get places maybe linking page bottom pulldown anyone interested explanation glad page let see adding pr scott", "d": "4/2016"}, {"body": "ok pr think better text direct link navigation would join us smile scott", "d": "4/2016"}, {"body": "hello working intended find better explanation smile provide info lodash function using", "d": "4/2016"}, {"body": "using working use part documentation points ca nt watch assignments ca nt watch setting length removing elements fit two cases", "d": "4/2016"}, {"body": "guillaumeleclerc thanks take deeper look later keep updated", "d": "4/2016"}, {"body": "guillaumeleclerc like proposed fix small adjustments however also problems lodash caches reference included vue still would nt trigger changes", "d": "4/2016"}, {"body": "result nt think vue guarantee reactivity use blackbox party lib recommended approach using lodash always use immutable methods returns copy instead use replace original array", "d": "4/2016"}, {"body": "ended using normal think better performance recreating whole array thanks", "d": "4/2016"}, {"body": "recommended use manually construct child components imperative hard maintain probably want make child components datadriven using dynamically render child components instead constructing", "d": "4/2016"}, {"body": "yeah answer afraid hear still thank awesome framework", "d": "4/2016"}, {"body": "hmm strange even nt change binding", "d": "4/2016"}, {"body": "current suggestion simply avoid using camelcase event names particular reason", "d": "4/2016"}, {"body": "app followed syntax making something like vanilla js events mostly lowercase guess makes sense stick solution vue", "d": "4/2016"}, {"body": "three arguments camelcase allows omit quotes events property different behavior props confusing besides usage pattern similar html vs coffee props someprop vs events someevent currently wo nt work von", "d": "4/2016"}, {"body": "fwiw kind thoughts quoted amp dasherized handler name kind meh would definitely read nicer camelcase usage consistency w props also nice said camelcase handling props necessary since need call code case event handlers would expect event dispatching use dasherized form although dasherized camelcase could probably accepted without conflict general would expect prop event names normalize dasherized form camelcase used conveniencecompatibility javascript", "d": "4/2016"}, {"body": "quoted amp dasherized handler name kind meh readability helps distinguish events methods usually events human readable", "d": "4/2016"}, {"body": "azamatsharapov good point still looks little awkward definitely help distinguish event handlers regular methods", "d": "4/2016"}, {"body": "oppose usage pattern events methods totally different think way confuse wherever use names intentionally", "d": "4/2016"}, {"body": "usually try emphasize difference events methods event nt necessarily carry information needed react example cancel button form within overlay dispatches event call maybe like close overlay user nt intend fill form right mabye form mandatory needs fill aware hundreds ways works separating information actions events next step requested cancel requested resulting orders methods react request xy shifts intent react informational event sth happened method handles", "d": "4/2016"}, {"body": "conclude need keep hyphenated events working suggested camelcase remains unsupported directive another suggestion let bind hypenated form detected difficulty would actually mean different things likely taking risk better worse supporting camelcase", "d": "4/2016"}, {"body": "problem returns first object instead new one", "d": "4/2016"}, {"body": "hmm ca nt really tell much component alone would prefer actual repro", "d": "4/2016"}, {"body": "make proper repro", "d": "4/2016"}, {"body": "fixing bug actually way quicker making repro made pr fixes", "d": "4/2016"}, {"body": "intended breaking changes phantomjs requires nontrivial changes test suite anyone interested feel free try upgrading", "d": "4/2016"}, {"body": "try", "d": "4/2016"}, {"body": "nested nt supported html invalid see template parsing", "d": "4/2016"}, {"body": "closed favor", "d": "4/2016"}, {"body": "hmm actually chrome bug inside created proper namespace works intended firefox suggest open issue chromium meanwhile use instead", "d": "4/2016"}, {"body": "upon investigation nt seem namespace issue still looking", "d": "4/2016"}, {"body": "indeed chrome bug happens inside pointing external url works outside works defs document regardless bug would happen without vue simply append template content body nt render", "d": "4/2016"}, {"body": "hi please make sure read issue reporting guidelines opening new issues issue list accepts bug reports feature requests questions posted gitter chat room forum stackoverflow thanks object reactive", "d": "4/2016"}, {"body": "closed", "d": "4/2016"}, {"body": "vue adds event listener element sure vue issue aframe issue since nt happen vanilla vue maybe issue suggest making minimal repro open issue repo", "d": "4/2016"}, {"body": "glad time issue vue well seems far opened issue repo added steps reproduce bug live example", "d": "4/2016"}, {"body": "closed duplicate", "d": "4/2016"}, {"body": "webkit misfortunate feature webkitbased browsers originally implemented older draft backgroundsize omitted second value treated duplicating first value draft include contain cover keywords demo reference", "d": "4/2016"}, {"body": "vue set test prefixed version nonprefixed fix think test nonprefixed version first exception buggy properties like", "d": "4/2016"}, {"body": "using nonprefixed name fix duplicate value issue", "d": "4/2016"}, {"body": "yep works", "d": "4/2016"}, {"body": "simplesmiler ah ok get bitten browser vendors either way oh well yeah let check nonprefixed version first treat sepecial case", "d": "4/2016"}, {"body": "fixed", "d": "4/2016"}, {"body": "reproduce working fine sure looking please open tyoe issues webpack template instead core repo", "d": "4/2016"}, {"body": "displays properly would proper link compared", "d": "4/2016"}, {"body": "need use router history mode get rid hash", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "update managed get working modifying first variant like guess issue closed sure sane way update", "d": "4/2016"}, {"body": "nt understand get complex update view state sounds like design problem view state things properly matter shoving new objectarray fetched server", "d": "4/2016"}, {"body": "sorry nt understand using slot instead partial option sweatsmile reason", "d": "4/2016"}, {"body": "using slots pseudoderived promptdialog would following template every attribute foo original dialog component would need attribute outer promptdialog pass inner goes methods defined dialog need define proxies pass call inner bothersome defeats idea behind component extensionclass inheritance", "d": "4/2016"}, {"body": "say abusing partials bad idea partial snippets parent aware data context child tight decoupling dialog component hold state purely presentational pass state state displayed content belong parent component uses dialog", "d": "4/2016"}, {"body": "working intended object", "d": "4/2016"}, {"body": "deep object key changes method get changed key name value parent object nt need whole object thanks", "d": "4/2016"}, {"body": "murphymeng may want clone original object compare clone modified object callback also please direct questions gitter forum thanks", "d": "4/2016"}, {"body": "murphymeng would avoid using favor unidirectional data flow use immutable data useful library called objectpathimmutable whenever watch triggered run comparison figure changed nt", "d": "4/2016"}, {"body": "sure see benefit following achieve", "d": "4/2016"}, {"body": "think refs nt work expressions unsure one clear benefit would n handling", "d": "4/2016"}, {"body": "see working slightly different syntax exploration needed", "d": "4/2016"}, {"body": "think would solve would minimize need good currently think would great nt see benefit object syntax maybe shorthand", "d": "4/2016"}, {"body": "paulpflug problem directives take expression nt look much better", "d": "4/2016"}, {"body": "think better use dispatch broadcast", "d": "4/2016"}, {"body": "broadcast ca nt control comp receive signal say common signal like use multiple components user space sidebyside mess smile actual current intent make opening closing component easy possible example sidenav modal dropdown one page controlled one buttons aside logic controlling actual content much single page think would best get trivial openclosing things done little effort possible worked ways work signals verbose let component hook click element limited hidden user work twoway bind prop verbose nt like think need opposite sure solve many unknown problems well", "d": "4/2016"}, {"body": "say common signal like open close use multiple components user space sidebyside mess smile use signal never use twice knew modal dropdown sidenav rather specify minimize ambiguity powerful simple enough use cases missing something apart see could useful complicated situations could already built custom directive right", "d": "4/2016"}, {"body": "could already built custom directive right tradeoffs possible custom directive paulpflug problem directives take expression vemit toggleliteral togglecomp nt look much better vemit togglecomp toggle could simply made valid expression emit broadcast dispatch powerful simple enough use cases sure work jquery think good argument question would better status quo want simple clear syntax possible personally avoid even wherever rare edge cases fine liking verbose error prone components props one hand great great job smile", "d": "4/2016"}, {"body": "paulpflug nt think shortcuts happening least one goals keep surface api simple cohesive", "d": "4/2016"}, {"body": "read discussion say definitely nt belong core app gets complex recommended approach centralized state management eg vuex rather overloading custom event system", "d": "4/2016"}, {"body": "hi working intended replace new array work smile", "d": "4/2016"}, {"body": "solution better way", "d": "4/2016"}, {"body": "trying bind click handler string example string reference method one way around following html click", "d": "4/2016"}, {"body": "thedutchcoder thanks answer", "d": "4/2016"}, {"body": "hey actually limitation vue detect property deletion reactive object instead using mentioned vue api case would something like", "d": "4/2016"}, {"body": "yes exactly wanted tried vuedelete method earlier guess missed putting try everything works perfectly tqvm fadymak", "d": "4/2016"}, {"body": "hi please make sure sure ask question forums gitter chat get faster feedback try questions issues smile question sure understand point would ignore component maybe use vpre directive", "d": "4/2016"}, {"body": "adding element solve issue", "d": "4/2016"}, {"body": "thank much posva made day", "d": "4/2016"}, {"body": "wait forget mention something also need keep directives working since extended element would like use directives like vmodel disables everything", "d": "4/2016"}, {"body": "saidahemtnolaroads indeed problem fixed attribute nt resolve vue component preserved", "d": "4/2016"}, {"body": "think adding edge cases like really worth since already workarounds bad note", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "nt see one sorry thanks lot", "d": "4/2016"}, {"body": "taking look sure bug", "d": "4/2016"}, {"body": "ok confirmed happens though works thanks bug submission smile jsfiddle edit webpackbin", "d": "4/2016"}, {"body": "seems exact opposite templates", "d": "4/2016"}, {"body": "thattomperson nt work design working intended", "d": "4/2016"}, {"body": "ah ok replace div hope designer nt notice", "d": "4/2016"}, {"body": "nt connected nt natively translate traditional programmatical logic", "d": "4/2016"}, {"body": "blakenewman hides instead removing turns handy definitely reads better", "d": "4/2016"}, {"body": "btw nt forgot issue could nt allocate enough time past two weeks find time weekend sure", "d": "4/2016"}, {"body": "posva understand internals question mind vshow combined velse one issue velse currently terminable means logic behind velse works completely differ based prefixing directive believe opinion would confusing happents would velse applied weird case valid available single element", "d": "4/2016"}, {"body": "vshow would apply guess sure use case thought think replaced let vif work sure would solve real problem recall clearly deal directives priorities applied components component directive given priority", "d": "4/2016"}, {"body": "understand tempting get work think first felt bit counterintuitive would look also agree framework nt changed accommodate behaviour", "d": "4/2016"}, {"body": "posva targeting may also issues case nt want want velse applied vif lot complexity involved internally could done easily user land", "d": "4/2016"}, {"body": "would need use", "d": "4/2016"}, {"body": "scenario nt want code evaluate using terminable time want show hide without removing instance think confusing logical directive available two directives", "d": "4/2016"}, {"body": "case use bind meant content toggling trigger transitions", "d": "4/2016"}, {"body": "nt see could fix blakenewman described agree used content toggling one works one nt makes sense framework behaves like", "d": "4/2016"}, {"body": "ruiposse toggles element html", "d": "4/2016"}, {"body": "course use nt along", "d": "4/2016"}, {"body": "might understood blakenewman said nt understand trying say sorry add end change computed property something else trying show achieve affecting although nt even know bug atm", "d": "4/2016"}, {"body": "trying say noted trying mimic js logic templates nt generally good idea dropped trying add logic templates exist simple possible making work may cause unnecessary confusion especially scanning templates default try spot matching makes contextual sense achievable user land simple negate avoid adding vue necessary expression logic templates simple simple adding expression expression complex really handled js", "d": "4/2016"}, {"body": "mimicking js logic otherwise making vshow vhide work velse nt exist sure point already supposed work nt work components bug simple negate duplicates expression multiple places nt good drop support also nt understand happened ruiposse really think misunderstood talking talking supporting alongside blakenewman brought used subject explain shortly trying say anything deal original bug please", "d": "4/2016"}, {"body": "conditional statement styled directive programmatically bound languages hand relevance language expectations looking template could misleading seems like anti pattern extend work real need achieve easily negating expression view alot declarative implementing suggested complicate internals vue deal use case fully achievable user land mdn else spec", "d": "4/2016"}, {"body": "original bug looking webpackbin provided expecting work nt think something framework support blakenewman literally saying thing opinion nt work nt really know much clear", "d": "4/2016"}, {"body": "original bug looking webpackbin provided expecting velse work vshow nt think something framework support introduce breaking change", "d": "4/2016"}, {"body": "seems compatibility works quite well edge windows breaks chrome also breaks firefox open suse leap", "d": "4/2016"}, {"body": "setting value inside watcher always bad idea say easiest way deal simply using trying control value anyway", "d": "4/2016"}, {"body": "wo nt work case supported since", "d": "4/2016"}, {"body": "need skip observation objectarray use nt need put object order access simply attach hook nt get observed", "d": "4/2016"}, {"body": "nt work cache updated time main resource reactive mostly interested making nested cache object nonreactive", "d": "4/2016"}, {"body": "maybe time rethink model design nest things something observed", "d": "4/2016"}, {"body": "cache used dynamically lookup related resources eg could models author model defines tomany relationship called post model cache contains relationship data well related collection calling authorposts gets posts cache", "d": "4/2016"}, {"body": "design vue discourages putting complex objects statemutating mechanism vue instance putting pure state observed data vue instances may manipulate state anyway want objects responsible manipulations part vue instance state", "d": "4/2016"}, {"body": "first clarifying question exactly mean pure state two types state model state permanent data synchronized store eg todo vue state temporary data controls view behavior eg collapseshow todo list anyway fair model definitely complex request goes current best practices also initial example nt good worked disable observation representative current setup w possible usage js import post componentspost import author componentsauthor import comments componentscomments post template props post data gt collapsed false new vue el body data instance poststorefetch include author commentsauthor vuenonreactive instancecache basically parent vue responsible placing reusable components layout fetchingbinding data associated components child components nt fetch data data different different contexts eg list user comments vs list post comments model fairly dumb exception related objects nested instead looked cache eg may exact object instead multiple copies author object one looked cache nt mutation data made initial fetch also request relevant alternative might observe private object members could members leading single maybe double underscore downside approach would breaking change", "d": "4/2016"}, {"body": "anyone ends needing functionality released vuenonreactive appropriate admonitions everything", "d": "4/2016"}, {"body": "rpkilby thanks sharing", "d": "4/2016"}, {"body": "hello twoway style props binding types especially allows child change value propagate change parent oneway style custom events ed child picked parent please note issue tracker bugs feature requests questions support gitter chat forum find help quicker", "d": "4/2016"}, {"body": "bad though feature yet referenced components props would feature request", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "\u4e0d\u652f\u6301", "d": "4/2016"}, {"body": "think forcing transition case nt quite make sense component really change really trying achieve dynamically switching content transitions rather components probably come new mechanism specifically deal scenario meanwhile somewhat simulate single item", "d": "4/2016"}, {"body": "think bug create constructor extending also wrote instances created vue compilation every occurrence template based eyes makes sense select instance constructor n relation", "d": "4/2016"}, {"body": "paulpflug instance property pass components directly parameter components different transition apply think work pass component names parameters works intended see note updated reproduction clarify", "d": "4/2016"}, {"body": "understand problem passing component directly comp constructor vue block allowed use constructor multiple times components comp comp think could also components obj obj point way identify component name reason transition triggered component stays place whole time", "d": "4/2016"}, {"body": "problem actually calling object returns cached constructor actually object similar described add dedicated mechanism type transitions", "d": "4/2016"}, {"body": "ok thanks evan", "d": "4/2016"}, {"body": "feature cool err works like think would kind abuse according piece considered rather really need refer issue warning info idea appears ca nt figure duplication fiddle update got warning comes retrieve data children objects works like got two duplicated", "d": "4/2016"}, {"body": "think proposals would good enhancement", "d": "4/2016"}, {"body": "twiknight duplication happens identifier used key excerpt code see derived using results results propose following key path valid look nt heard", "d": "4/2016"}, {"body": "dragantl think mistook proposal thought trying make comparer got totally agree btw mentioned generic feature referring certain directive", "d": "4/2016"}, {"body": "makes sense welcome pr anyone wants take crack", "d": "4/2016"}, {"body": "make pr", "d": "4/2016"}, {"body": "dragantl oops working thanks offer tho", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "intended simply uses existing element component removed remove component", "d": "4/2016"}, {"body": "suggest alternative using approach mount dynamic components onto body modal know components ahead time include use dynamic switching preserve mounting point", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "nt dispatch native events use watcher watch bound value instead", "d": "4/2016"}, {"body": "case somebody facing issue workaround add plugins one", "d": "4/2016"}, {"body": "hi nt seem clear issue mentioning seems issue webpack configuration opposed vue issue", "d": "4/2016"}, {"body": "fadymak looked really strange vuejs nt work webpack right box even normal behaviour think mention webpackspecific thing somewhere readme doc think would way better make little check environment since vuecommonjs used browser well", "d": "4/2016"}, {"body": "think unintentionally chose wrong version vue use development version see thing needed get overview available versions differences", "d": "4/2016"}, {"body": "nirazul quite disappointing possible use wrong version lib without realizing seemed pretty obvious everything work like butter", "d": "4/2016"}, {"body": "webpack automatically shim unless explicitly tell browserify using webpack beta might cause different behavior", "d": "4/2016"}, {"body": "nope running thanks reply pointed real cause problem webpack indeed shims variable us automagically changed everything worked expected turned vue issue", "d": "4/2016"}, {"body": "please provide full reproduction template nt help also try upgrading", "d": "4/2016"}, {"body": "problem update vue test works fine", "d": "4/2016"}, {"body": "horans try adding proper elements default list items tracked identity identity changes corresponding element destroyed created thus losing focus", "d": "4/2016"}, {"body": "problem occurs works fined dalphyx mentioned update narrowed problem push object initialized push rather pushed empty object initialized", "d": "4/2016"}, {"body": "different events stopping nt affect propagating use inner button", "d": "4/2016"}, {"body": "dblclick click different events thanks precision use clickstop inner button wanted simple double click element simple click select double click open like google drive folder document use custom method", "d": "4/2016"}, {"body": "duplicate please see discussionsolution", "d": "4/2016"}, {"body": "give correct use example", "d": "4/2016"}, {"body": "well see", "d": "4/2016"}, {"body": "provide full runnable reproduction", "d": "4/2016"}, {"body": "ca nt upload zip file", "d": "4/2016"}, {"body": "reproduction actually means runnable code snippet jsfiddlecodepen etc bare minimum code makes bug happen excerpt production code", "d": "4/2016"}, {"body": "sorry problem resoved yet caused vue thank", "d": "4/2016"}, {"body": "use", "d": "4/2016"}, {"body": "thank remove set undefined effects keyword also effect", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "components generated reactive array easy make change way check item show item component list fiddle hope would help btw nt think necessary make reactive think data reactive", "d": "4/2016"}, {"body": "twiknight right components data thus nt reactive vue reactivity simply nt work way dom events case", "d": "4/2016"}, {"body": "standard behaviour please see explaination list rendering syntax similar angular resolve", "d": "4/2016"}, {"body": "thanks clarification link", "d": "4/2016"}, {"body": "reproduce fiddle likely syntax error template please make sure open issue sure bug reliably reproduce issue", "d": "4/2016"}, {"body": "hey believe issue occurring tracking id toggling visibility based index array gets shuffled suggest tracking another property changing way computed created another fiddle see mean jsfiddle demo also note opacity changed going go ahead close however feel nt actually solve issue please feel free reopen issue take deeper look", "d": "4/2016"}, {"body": "set null false", "d": "4/2016"}, {"body": "\u8b66\u544a\u7684\u610f\u601d\u662f\u5efa\u8bae\u4f60\u5728\u7ec4\u4ef6\u7684 data", "d": "4/2016"}, {"body": "think solution fine resolving filters using string ids expressions inconsistent confusing nt know look", "d": "4/2016"}, {"body": "also improve fetching filter instead global", "d": "4/2016"}, {"body": "method computed property calls seen freeze safari", "d": "4/2016"}, {"body": "hey thanks reply case basically structure like html var app new vue el app data step components template methods nextstep function consolelog gostep gostep template step var gostep function step appstep step issue element handler pressed random freeze occurs tried debug good possible however see output believe loop actually called", "d": "4/2016"}, {"body": "ok order give help need provide minimal reproduction jsfiddle smile", "d": "4/2016"}, {"body": "try currently iphone ios testing issue appear yet seen iphone plus ios probably wait till next week get hands testing", "d": "4/2016"}, {"body": "seems like able fix likely completely unrelated vue element click handler anchorelement like freeze happen changing element one two ways either make buttonelement add hrefattribute html next step next step listeners would probably like blame safari still ca nt say sure reproducible situations jsfiddle interestingly removed optional unrelated jslibrary freeze happened different step confused anyway hope may help someone experiences similar issues", "d": "4/2016"}, {"body": "perhaps needed modifier prevent default behaviour link", "d": "4/2016"}, {"body": "remember correctly try well without influence would also expect affect much devicesbrowsers sweatsmile", "d": "4/2016"}, {"body": "\u8fd9\u663e\u7136\u662f\u65e7 android \u6216\u8005\u662f\u6253\u5305\u73af\u5883\u7684\u95ee\u9898 vshow", "d": "4/2016"}, {"body": "vmodel val \u5728\u54ea\u4e2a\u5b89\u5353\u7248\u672c\u4e0b ajax\u67e5\u8be2\u5bf9\u7684\u5c5e\u6027\u8fdb\u884c\u8d4b\u503c\u65f6", "d": "4/2016"}, {"body": "\u6211\u611f\u89c9\u8fd9\u4e2a\u4e0d\u5c5e\u4e8e\u5728 vue", "d": "4/2016"}, {"body": "looks like unintentional breaking change nt think behavior ever documented workaround move default coerce function pinpointing commit change happened edit commit question", "d": "4/2016"}, {"body": "fixed", "d": "4/2016"}, {"body": "landed", "d": "4/2016"}, {"body": "problem want number prop passing static value always get string case casting value seems normal let hear people think smile", "d": "4/2016"}, {"body": "airyland hello guess hard time updating app latest version want code work may question habit opinion autoconverting props bit excessive least ways solving problem adding colon attribute using custom filter coerce function nt think adding extra layer magic good idea plus new edge cases plus affect performance", "d": "4/2016"}, {"body": "fullfs nt think feature adds magic layer user specifying prop type number actually expects component receive number nt binding variable prop value passed always string", "d": "4/2016"}, {"body": "posva static attributes always treated strings nice clear need number nt want bind property use colon treated expression converted number goes booleans nice explicit hard use colon need number", "d": "4/2016"}, {"body": "posva also would breaking change someone may intentionally pass number via static attribute want string concatenation", "d": "4/2016"}, {"body": "fullfs user already specifying prop vue even fires warning would also adde make type work", "d": "4/2016"}, {"body": "posva well type option supposed convert values validtion type words prop requirement see could compared variable types typed languages like javac even typescript another example jsdoccomments methods define param types function awaits receive function could work properly passed incorrect type purpose raises warning try pass incorrect prop type meaning something going wrong expecting", "d": "4/2016"}, {"body": "posva btw sorry rude nt mean offence bad habit mine heavily defend opinion", "d": "4/2016"}, {"body": "feature nt get implemented least explicit warning type defined nt match value passed static", "d": "4/2016"}, {"body": "fullfs np used comments know nice guy smile plus rude defending point normal way", "d": "4/2016"}, {"body": "posva ok thanks way got warning actually", "d": "4/2016"}, {"body": "fullfs yes thinking specific warning tell use btw static value optimise binding get binded like modifier", "d": "4/2016"}, {"body": "posva bound add warning specific case original issue working intended", "d": "4/2016"}, {"body": "nt see reference docs smile", "d": "4/2016"}, {"body": "let guess call focus like", "d": "4/2016"}, {"body": "weilao yeahlike u sayi solve itthx", "d": "4/2016"}, {"body": "forme struggled focus past written module helps common focus use cases particular use case would put input", "d": "4/2016"}, {"body": "fix distribution get project", "d": "4/2016"}, {"body": "jeffmarshall dev build", "d": "4/2016"}, {"body": "ok thanks", "d": "4/2016"}, {"body": "loops vfor mess order know iterate group things", "d": "4/2016"}, {"body": "true doh implemented plan keep functionality closing vuejscollaborators reopen change plan", "d": "4/2016"}, {"body": "nice multiple fields sorted latest version go mean multiple fields multiple sort order like maybe change thank love vuejs", "d": "4/2016"}, {"body": "new vuejs user came across limitation straight away trying build nested components concrete example accordion element accordion element usually made heading content area clicking heading toggle display content something fun easy program vue heading usually simple often containing text possibly icon indicate visually whether accordion opened closed content however contain large sections text subheadings images blocklevel elements plain html accordion might structured simply intended result like html look like end html accordion lorem ipsum dolor sit amet consectetuer adipiscing elit javascript usually added make heading work toggle showing hiding content area like able vue define accordions html like intended usage like code accordion html markup defining heading content elements vue components quite straightforward could like already implements fontawesome icon heading keeps track whether content openvisible js vuecomponent heading template props icon vuecomponent content template props open type boolean default false combine accordion component heading content components particular context accordion define inside accordion component use template accordion problem content parsed vue therefore declared components may nt get used vue simply plonk content html tag dom without looking using markup code intended usage component defined like get html accordion lorem ipsum dolor sit amet consectetuer aqipiscing elit end unrecognisable pseudohtml elements page imagine wo nt trigger functionality might defined subelements either problems html elements inside apart different order would plonked original markup could cause us kinds layout problems workaround try use named slots accordion suggested vue documentation like js vuecomponent accordion component definition heading content go means would longer able use elements directly html rather use normal elements place via slot attributes like note far departure intended usage also longer using heading content element directly move props parent accordion element syntax wanted less modular also produce html overly nested convoluted html accordion lorem ipsum dolor sit amet consectetuer aqipiscing elit end would simpler use subcomponents define whole thing single accordion component single template course means vue actually promoting embedded solutions rather modular ones heading element instance could useful also several contexts ie modals alert boxes view panels etc lastly problem gets compounded even think given page hardly ever using single accordion often several list instances might want coordinate open status accordion open given time vue already great eventmanagement system allows us bubble updown propagate messages well propbinding would allow us easily communicate changes parentchildrengrandchildren pointed paulpflug handling situations subcomponents involved together either convoluted impossible shown specially newbie like currently stands seems possible use vue components slots enable users use code appears intended usage produce html intended result also seems vue unable analyse parse content usefulness subelements limited usecases either subelement present parent subelement contents passed entirely props understand correctly proposed solutions far fall broadly categories fully parse analyse content elements looking possible embedded components implementing logic along way define new type would mark existence subelement innerhtml would look ie template accordion using slot could look something like would search element finds element would insert position would component could also named default slots along component slots like great solution elegant simple enough even newbies understand case heading content components found would placed component slots remainder content element attribute would placed named slot remaining elements would placed default slot note default slot would placed content component also present would indeed give us intended result intended usage code well making incredibly easier nest modular components ad infinitum newbie overview hope misquoting misunderstanding anyone hopefully might find plain english explanation useful last please keep good work vue awesome", "d": "4/2016"}, {"body": "luxlogica problem content parsed vue therefore declared components may nt get used actually vue acting intended problem attaching components using main scope instead scope js fiddle demo", "d": "4/2016"}, {"body": "prograjkamal thank headsup however still ideal solution nt discriminate filter put case wanted make sure thing gets put heading slot heading component content content slot instance accepted using simple named slots sometimes behaviour accepting anything functionality needed indeed usually composing complex nested components want opposite able specific typetag subcomponent goes slot usecases would better able refer component typetag name already identifying subcomponent tag need slot attribute markup making cleaner succinct coding", "d": "4/2016"}, {"body": "want restrict acceptable slot single component might well define code course allow set attributes effectively require right think way programmatic slot api lands vue would able access slots throw errorswarnings incorrect usage would like see suggestion implemented plugin vue core", "d": "4/2016"}, {"body": "thank suggestion look code proposed original comment one solutions came one reduces modularity produces convoluted html end imho kind functionality essential easily composing nested views even basic complexity shown definitely part core detailed programmatic api would extremely useful advanced programmers wanting push boundaries library functionality described basic achieving easy even newcomers", "d": "4/2016"}, {"body": "reason nt want functionality core general enough practically actually want validate html fragment passed slots suggestion however considers one specific case ie passed html fragment must root node specific type user wants allow types tags disallow certain set tags sure validation rules possible slots surely cases considered well talking vue core", "d": "4/2016"}, {"body": "ah see point indeed thinking much narrower usecase want cover usecases could perhaps implement selector directive takes css selector like selector slot html however filtering content done key analyse content placed slot looking possible components need resolved context parent suspect issue may may computationally expensive hence suggestion separate component slot type slot directive already tells vue looking element component analysed component slot html selector slots would simply plonked slot location like named slots component slots would actually inserted analysed run context parent would allow vue know computation needed rather analyse everything order cover every possible usecase need establish order operation slots order slot operations resolve component slots remove passed content resolve selector slots remove remaining content place leftover content default slot would enable essentially wide range selecting filtering slots using simple declarative syntax would cover vast majority use cases without need newbie learn api", "d": "4/2016"}, {"body": "luxlogica think hijacked issue would better create separate issue feature", "d": "4/2016"}, {"body": "think luxlogica proposal close thing reusable components selector pattern take children bad within component probably hidden user would prefer stick parameter html vs usage vs verbosity case worth must assumed user nt know thing hand selectors provide functionality honestly nt encountered case clever nesting components nt solve problem", "d": "4/2016"}, {"body": "paulpflug idea enduser exactly usage proposed total agreement enable developer author complex nested elements allowing simplest possible syntax enduser like proposal aims allow enduser html however prograjkamal pointed quite rightly lot usecases go beyond example nt thought initially idea use css selectors came solution cover wider range usecases probably futureproof suggestions differ humbly suggest use name component slots rather plugin slots seems semantically correct inserting plugins something else vue world inserting previously defined components use css selectors component slots rather merely component names creation selector slots would basically substitute current named slots would also use css selectors making unnecessary enduser need know component implemented type slots used enduser needs know compose element html code using custom tags created components exactly like example using accordion example usage implementation would like html accordion lorem ipsum dolor sit amet would make easier developer enduser", "d": "4/2016"}, {"body": "\u5e0c\u671b\u80fd\u591f\u5728\u6587\u6863\u91cc\u5f15\u7528\u4e00\u4e0b eveluty", "d": "4/2016"}, {"body": "classicoldsong \u5e94\u8be5\u662f\u5728\u4e0d\u652f\u6301 raf \u7684\u65e7\u6d4f\u89c8\u5668\u5427 \u8fd9\u4e2a\u771f\u6ca1\u529e\u6cd5", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "classicoldsong \u8fd9 \u90a3\u4fdd\u9669\u8d77\u89c1\u53ea\u80fd\u7528 \u5927\u6cd5\u4e86", "d": "4/2016"}, {"body": "duplicate wenliangcan could use something like html key val function", "d": "4/2016"}, {"body": "thank works support one placeholder works first exemple one", "d": "4/2016"}, {"body": "\u5927\u5927 \u4f60\u4e0a\u9762\u7684\u56de\u590d\u662f\u4ec0\u4e48\u610f\u601d", "d": "4/2016"}, {"body": "found another use case singleton component example overlay used behind dialogs modals singleton pattern allows way better handling zindex click events dealing multiple instances current implementation activate overlay calling component needs ref would prefer cleaner solution see easy way adding singleton components vue", "d": "4/2016"}, {"body": "another convincing usecase singleton component made mixin workaround getvue usage look something like would love get around stuff user", "d": "4/2016"}, {"body": "think reconsidered", "d": "4/2016"}, {"body": "check mentioned actually work need treat external bundling component", "d": "4/2016"}, {"body": "nonono stick mixin solution others unreliable error prone point api change others also need instance create issues future solutions unreliable error prone smile", "d": "4/2016"}, {"body": "suggested unreliable", "d": "4/2016"}, {"body": "imagine dependency tree myproject vue mycomponent vue give different versions myproject mycomponent could difficult debug especially maintainer idea tree happens regularly using also stumbled upon components list direct dependency avoided adding webpack config project clearly prefer mixin", "d": "4/2016"}, {"body": "paulpflug believe component specifies npm least never install vue component even version conflict", "d": "4/2016"}, {"body": "sure thing emphasis seen components vue direct dependency already easy fix yes difficult debug error warning accidentally use wrong vue instance wo nt work speak regarding often use repositories installed ignored always deliver different instances avoid completely issue severe like ca nt live without fixing might source annoying mistakes future see could close would smile", "d": "4/2016"}, {"body": "would happy continues tighten scope especially useful native drawer menues route vue maybe integrating native views top vue performance really needed performance vue mobile client already really good tried reactnative find little overkill", "d": "4/2016"}, {"body": "eljefedelrodeodeljefe weex coming", "d": "4/2016"}, {"body": "qusiba thx link", "d": "4/2016"}, {"body": "qusiba signed nothing happened long wait get access scott", "d": "4/2016"}, {"body": "smolinari thx signing member team invite private github permission soon", "d": "4/2016"}, {"body": "jinjiang define soon bit better talking days weeks months smile scott", "d": "4/2016"}, {"body": "jinjiang subscribed mailing list could access smile", "d": "4/2016"}, {"body": "jinjiang please", "d": "4/2016"}, {"body": "smolinari days", "d": "4/2016"}, {"body": "jinjiang could add private beta please thanks", "d": "4/2016"}, {"body": "jpokrzyk simply sign newsletter scott", "d": "4/2016"}, {"body": "done jpokrzyk smolinari", "d": "4/2016"}, {"body": "jinjiang gents alibaba helping evan vue really cool stuff smile edit looking docs cool weex also open source released please please please say yes smile scott", "d": "4/2016"}, {"body": "weex public maybe end june keep watching", "d": "4/2016"}, {"body": "jinjiang going assume public also means open sourced applaud clap smile scott", "d": "4/2016"}, {"body": "jinjiang dumb question nt put native headline copy framework building native mobile crossplatform ui thanks ferry", "d": "4/2016"}, {"body": "also could nt find word vue anywhere first thing searching word vue opened page thought maybe nt use vuejs source style evan post vuejs thinking weex give credit vue page", "d": "4/2016"}, {"body": "look code examples uses vue extensively smile scott", "d": "4/2016"}, {"body": "yes even branch vue think talking weex site reference vue think site really provisory dramatically changed weex get published hope includes vuejs references", "d": "4/2016"}, {"body": "agree dynamic vref could really useful example multiple instances component want track one call method unique id assigned component required prop used consumer easily fetch without hunt tree eg built pagination component accepts prop would nice consumer could something like", "d": "4/2016"}, {"body": "sorry nt see example related said", "d": "4/2016"}, {"body": "well probably misunderstood sorry", "d": "4/2016"}, {"body": "posva seems like date transform datedatetime input types would useful however interested able register transforms eg momentjs transform instead potentially built date transform json transform", "d": "4/2016"}, {"body": "rpkilby think two way filters work pretty well guide actually talk maybe explicit example showing docs help nt think modifier needed two way filters already address issue", "d": "4/2016"}, {"body": "posva yes currently guess problem vague want emphasize minor dissatisfactions api dealing various data types thoughts nt really formed anything cohesive boolean values array selection handled magically inputs fair kind necessary number values handled magically inputs require paramater data type requires twoway filter result leaves us given checkbox magical behavior understandable someone would expect number would magical behavior well forgetting add parameter easy source bugs get special treatment anyway replaced filter filters seem like used value transformations request type transformation also nt like idea polluting filter namespace type transformation filters form context nt make much sense least great vue global componentlocal registration nt really issue example edit regardless opinions think would good add section two way filters form docs way handling type conversion also really want reemphasize minor consistencyapi nitpicks vue huge boon existing form bindings work one downside proposal would overlap twoway filters vmodel type transforms apparently like bulleted lists", "d": "4/2016"}, {"body": "rpkilby nice analysis writeup agreed things inconsistent", "d": "4/2016"}, {"body": "rpkilby thanks thoughtful input definitely improve", "d": "4/2016"}, {"body": "issue records cost almost render would great way render without data binding make sense", "d": "4/2016"}, {"body": "kennedytedesco records nt sound right assume nested template look like", "d": "4/2016"}, {"body": "sorry mistake happiness problem nt vue", "d": "4/2016"}, {"body": "transition could play nicely state changes vuex", "d": "4/2016"}, {"body": "discussion vuejscollaborators decided feature implemented considered bad practise thus implementation considered bad practise reasons non implementation exploits bad practices vueassign become unpredictable browsers interpret order keys properties differently thus causing unpredictable results wanted property set prior another guaranteed object structure declared documentation says", "d": "4/2016"}, {"body": "believe semicolons makes code readable especially developers accustomed programming languages php java cc furtherless even semicolons needed engine use feature called semicolon insertion engine recognizes semicolon needed automatically adds still needed final code automatically inserted missing add place emca specs script module parsed left right token called offending token encountered allowed production grammar semicolon automatically inserted offending token one following conditions true sounds like missing semicolon corrected automatically inserted normal script semicolon needed written unneeded semicolons removed sure due personal developer experience nt see even use daily project nosemicolon style guideline still tend look next line see going course since engine allows anybody use whichever style prefer kind regards oh forgot", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "thanks already read course many similar posts people also like insult offering pov th matter examining word word emca specs reason tend use semicolons declaring variables beginning function engine automatically hoist declaration code clear putting end interpreted semicolon needed automatically inserted var declared declaration automatically hoisted final interpreted code missing place hoisted declarations called asi asr r emoval unnecessary valid final statement asi way around reason js developers tell put var declarations top reflect final code interpretation also tell avoid semicolons one case tell rely automation case tell since js allows forms something like psr javascript would good least eyesbrain adjust coding style switching form project another outside scope discussion fun believe asi leads uncertainty always hated statement behaviour js developer decide statement ends hey way one final note kidding kind regards thank much vuejs", "d": "4/2016"}, {"body": "whole point readability subjective neither approach technically superior correct simply point complaining whether people code uses", "d": "4/2016"}, {"body": "agree complaining maybe nt clear fun expressing point view reason prefer omitting semicolons move declarations top common style guideline among developers could useful php standard group useful te community write php code many ways opening different frameworks code seeing style helpful saves time", "d": "4/2016"}, {"body": "personal experience liked using semi come cc background trying semi style found faster code readable", "d": "4/2016"}, {"body": "posva still prefer using says matter personal preference wanted say emca specs states certain js statements must end semicolon add interpreter add evaluation valid js statements allowed write code way js asi transform valid statements specs says removed previous expressions needed automatically added missing quoting emca certain ecmascript statements must terminated semicolons semicolons may always appear explicitly source text convenience however semicolons may omitted source text certain situations situations described saying semicolons automatically inserted source code token stream situations may things way comfortable quoting circumstance assignment statement must begin left parenthesis good idea programmer provide explicit semicolon end preceding statement rather rely automatic semicolon insertion quoting specs end preciding statement must many projects adds beginning next statement fine always use technique combining many scripts one fine reading code relying asi many big projects using feels natural add code programming language use provide asi start omitting rule js sure sooner later forget phpc even multiple sql query kind regards", "d": "4/2016"}, {"body": "guess avoid using python nt support well philosophies conventions enforced language designers cjs developers would prefer semicolons pythonjs developers would prefer semicolons since specs allow styles matter preference", "d": "4/2016"}, {"body": "fnlctrl nope misunderstood saying whatever prefer stated simple things personal preference reasons behind quoting emca specs never said anyone find line correct intended thing complaining general topic nothing project community fact js developers tells put declaration top engine put clear time tell avoid even engine adds believe either advice use forbid allow people choose advice use one use reason behind writing code closer interpreted nobody feel sorry right others using semicolons way nobody feel sorry right using pls let stop nt want silly thing turn religious struggle spaghetti vs fettuccine explained like fettuccine well like spaghetti well telling eat fettuccine avoid spaghetti", "d": "4/2016"}, {"body": "interested conversation nt think belongs feel free discuss semicolons elsewhere", "d": "4/2016"}, {"body": "need additional attributes options like data selected etc smile", "d": "4/2016"}, {"body": "use guess could nt past acted funky ca nt remember yeah", "d": "4/2016"}, {"body": "detailed component scoping section basically iterated loop would undefined parent scope making error think", "d": "4/2016"}, {"body": "\u6211\u4e5f\u5728\u505a\u7c7b\u4f3c\u7684\u9700\u6c42 \u8bf7\u95eenexttick \u662f\u53ea\u5728\u8d4b\u503c\u540e\u8c03\u7528 \u90a3\u4e48\u6211\u73b0\u5728\u628a\u6570\u636e\u653e\u5728 vuex\u91cc\u9762\u4e86 \u518d\u5728\u9875\u9762\u5207\u6362\u4e4b\u540eiscroll\u7684\u7ed1\u5b9a\u5c31\u5931\u6548\u4e86 \u6682\u65f6\u7528\u7684 dafrok \u7684\u65b9\u5f0f settimeout \u8bf7\u95ee\u6700\u4f73\u5b9e\u8df5\u662f\u5982\u4f55\u554a", "d": "4/2016"}, {"body": "miaotaizi \u7406\u8bba\u4e0anexttick\u4f1a\u5e2e\u4f60\u5224\u65ad\u4f60\u7684\u573a\u666f\u662f\u5426\u9700\u8981settimeout", "d": "4/2016"}, {"body": "hello using came across issue something else related", "d": "4/2016"}, {"body": "make example want load jquery javascript libs require jquery work load javascript libs maybe compatible requirejs mean javasript lib use like import javascript lib pure lib frontend searched whole morning issue still find right answer think everyone need", "d": "4/2016"}, {"body": "vinhtq question unrelated vue read using jquery requirejs also always resort including accessing global make sure include files proper order according dependencies", "d": "4/2016"}, {"body": "also worth noting examples case sensitive search ea vs ea mean difference accounting treat eastern means searching ea might cause filteredgameslength return even though result like easteregg hunt edit solved issue changing gamename searchquery tolowercase regardless user types results accounted", "d": "4/2016"}, {"body": "router", "d": "4/2016"}, {"body": "anybody else stumbles across approach integrating datatables looks like create simple datatables component creates datatables instance component dom provide model via props object used initialize datatables instance configure model via props provide component prop used provide array datatables instance use watch property reload table needed via props provide writable object component status information written component rows selected one row selected multiple rows selected etc nt hard accomplish tends enough trick cases", "d": "4/2016"}, {"body": "davidkhess post example code help issue", "d": "4/2016"}, {"body": "dependencies lodash personal design decisions get idea vuecomponent datatables props options status data template ready function var self", "d": "4/2016"}, {"body": "closing", "d": "4/2016"}, {"body": "looks like made", "d": "4/2016"}, {"body": "von change onchange", "d": "4/2016"}, {"body": "would welcome feature attribute html specification starts data prefix valid ide also complain nt like warnings code simple demo latest intellij idea", "d": "4/2016"}, {"body": "anyone explain one loop used use srcxxxx without getting error case error occur nested loops error purl error nested loop purl data used", "d": "4/2016"}, {"body": "raywill explained use", "d": "4/2016"}]