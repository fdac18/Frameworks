[{"title": "firefox input focus problem", "body": "firefox problem ohter browser right case focus input box moved input box fire fox error code focus method thisrefsfocuselfocus debugger react code wrong setselection function input offsets var start offsetsstart var end offsetsend typeof end undefined end start input value inputselectionstart start break wrong start value inputselectionstart", "num": "6666", "d": "4/2016"}, {"title": "react rerender changes field first rerendering node", "body": "following code generates two field whose type changes respective type button clicked dependent component rendered field type value tap change field type new value react tries set value changing field type generates warning console show value definitely set changes however warning generated code html react rerender warning example react rerender warning example loading", "num": "6663", "d": "4/2016"}, {"title": "docs request detailed best practices form validation react", "body": "really awesome docs contain special section forms written pain points dealing hopefully highlighting places react ease", "num": "6658", "d": "4/2016"}, {"title": "modernize build process tooling", "body": "mostly prereq goals align build tooling right mixing grunt amp gulp commit probably gulp add watching fast rebuild test changes browser could something like webpack hot reloading move shared tooling back fbjs babel plugin custom lint rule nongoals things keep mind alternate build approaches particular flat bundling needs easy swap releasing master may want development happen feature flags used turn onoff features may want build result static flag set runtime checks would need possible target flag combination easily", "num": "6656", "d": "4/2016"}, {"title": "modernize release process", "body": "way much work react release right mostly muscle memory point easy anybody historically kept certain steps manual screwed things wanted able pause double check things contributing difficulty use reactbower repo first push target result fbme link generation cdnization needing happen internal fb infra manual steps across multiple repos manual version modification assets needing multiple places copied across branches ideas able differentiate pre final releases single command ship new alpha point lightweight final releases need little since get installed default people additional requirements eg changelogs assets multiple places things could interactive process start using github releases apis store build assets cutting steps set cdnreactjsorg host builds dropping fbme entirely risk run alternatives work existing cdns make sure versions deployed command pull based autoupdating result delays things like jsfiddle tutorial need assets available immediately investigate lerna could helpful multiple packages though ideally want disentangle releases", "num": "6655", "d": "4/2016"}, {"title": "reactcloneelement avoid warning failed proptype required prop", "body": "ok happens wrapper component wraps children clone children pass props new ones thing required warning shown even props expected using react", "num": "6653", "d": "4/2016"}, {"title": "stylesheet transform", "body": "", "num": "6652", "d": "4/2016"}, {"title": "render called componentdidmount", "body": "see", "num": "6651", "d": "4/2016"}, {"title": "sending events parents children easily", "body": "using react native half year really enjoying expert run seems like weakness framework like bring problem sending oneoff events chain parenttochild way works component lifecycle issue arises fact props semipersistent values differs nature onetime events example deeplink url received want say respond ready store url mechanism caching onetime event value breaks url sent valid event case children easy elegant way communicate back parents via callbacks nt seem way basic thing direction example cases deeplink received app wants tell child pages respond appropriately tab navigator wants tell child scroll top secondary tap list view wants trigger list items animate time page shown everything read two normal ways call method child directly using ref emit event children may listen ignore component lifecycle child nt ready receive direct call event yet also feel clunky compared elegance react architecture react oneway topdown model idea passing onetime events component chain seems like would fit nicely real improvement best workarounds found add trigger state variable parent number wire children children use lifecycle method sniff change trigger prop known action done bunch handle cases listed really tacky set clear prop immediately setting yuck react way solve common need one team knows one articles found web addressing component communication suggest dispatching events calling methods directly refs thanks open discussion", "num": "6646", "d": "4/2016"}, {"title": "react support node", "body": "accept node engine version nt think regressions caused node okay", "num": "6644", "d": "4/2016"}, {"title": "null reactjs component", "body": "using reactjs create org chart create chart see want add zoom drag behavior chart used see method zoomed called null tried attaching zoom behavior div svg g nothing helps zoomed behavior called event null aspnet project made sure nt reference systemjs configuration many stackoverflow answers mentioned issue related null code similar example like uses old version reactjs systemjs configuration javascript systemdefaultjsextensions true systemconfig map rx react reactdom systemimport appappjs javascript import react component react import rx rx import import person person class orgchart extends component renders org chart render export default orgchart", "num": "6641", "d": "4/2016"}, {"title": "blank space line feed jsx", "body": "know render function return htmlthe problem type space return connect html fragment problembut error type enter generate new line connect html fragmenti also checkout currently component render return one node say list divs return must wrap components within div span component dontforget jsx compiles regular js returning two functions nt really make syntactic sense likewise nt put one child ternary understand problem", "num": "6637", "d": "4/2016"}, {"title": "react breaks support type extension syntax webcomponents custom elements", "body": "attribute lost jsx attribute present needs passed documentcreateelement second parameter", "num": "6635", "d": "4/2016"}, {"title": "change reactperfprintwasted reactperfprintoperations work", "body": "rewrite reactperf aims provide existing features reactperf testable futureproof way however things scope important fix later shipped today prints informations dom native events supposedly happened later information used following way component rendered dom events children emitted batch render considered wasted problems discussed overemphasize overhead dom operations actually often negligible incremental reconciliation assumption dom operations happen batch rendering might become incorrect might want get rid relying batches know would good solution considering constraints people widely consider useful method helps finding sweet spots remove reliance dom offer equivalent eg deeply comparing react elements useful friendly incremental reconciliation", "num": "6632", "d": "4/2016"}, {"title": "reacttransitiongroup lifecycle hooks work", "body": "reacttransitiongroup lifecycle hooks fire examples appear appear logs log think bug react javascript class extends component constructor props super props componentwillappear callback callback consolelog appear componentdidappear consolelog appear componentwillenter callback callback consolelog enter componentdidenter consolelog appear componentwillleave callback callback consolelog leave componentdidleave consolelog appear render return hi class extends component render return", "num": "6631", "d": "4/2016"}, {"title": "refs components working", "body": "refs components using inline function working ref returns lifecycle method however using alternate method refs element returned expected ref domelement", "num": "6630", "d": "4/2016"}, {"title": "new dom renderer inserts parameters creation ie", "body": "new renderer causing flash objects instantiated nested param nodes added read parsed creation never touched edit assuming flash object loaded immediately upon insertion dom next tick happens ie afaik versions including edge related performancespecialcase renderer cc spicyj", "num": "6629", "d": "4/2016"}, {"title": "introduce profile build", "body": "discussed plan add new build configuration overhead comes new enabled means developer warnings etc need gated component tree events eg need gated curious could implemented right system simple current system variables development build except production build see omitted assume mode sensible assumption one want change projects today specify anything development want suddenly lose developer warnings therefore propose following new system proposed system variables development build except profile build production build would let us three separate build configurations use pattern projects well desired would say unlikely ever want add separate fourth configuration cover needs thoughts would bad idea implement cc facebookreactcore", "num": "6627", "d": "4/2016"}, {"title": "ssr warn onscroll", "body": "ref little surprising codepath even hit maybe bug clearly sort check area", "num": "6626", "d": "4/2016"}, {"title": "formal type definitions uptodate", "body": "hey noticed formal type definitions uptodate nt account stateless components probably something like", "num": "6624", "d": "4/2016"}, {"title": "react ignore specific dom element", "body": "per chat gaearon filing issue discuss would like avoid specific element rendered server beeing updated react reaches client one specific use case rendering ad server tags kind pain ars using things like etc render using sometimes react reconciliation client side get rerender stop executing managed track cases fixing render differences server client would trigger dom patching still seems happen advice", "num": "6622", "d": "4/2016"}, {"title": "ability hide component devtools", "body": "react devtools great get convoluted using community libraries times eg reactrouter redux coflux could blessed api allows components show dev tools something simple like using react devtools generally want see components business logic things like helpful see things times though nt imagine components become completely opaque probably checkbox devtools defaults show components assuming something guys busy like concept work implementation", "num": "6621", "d": "4/2016"}, {"title": "typeerror using reactcsstransitiongroup", "body": "react see browser tests never manually triggered bug seemingly timing sensitive cases returns null", "num": "6619", "d": "4/2016"}, {"title": "preserving state propsturtleshell", "body": "preserving state propsturtleshell experimenting bit migrating props state together watch changes could used preserve state multiple render passes addressed like see approach would turn props much better pass values state people use feature would exciting hopefully see first point flaws needs fix order fully function perspective special method keeps track state called upon entire tree loose state wrappers go indepth later explaining would look fetching state passing props used deepexpensive method stylussake used function wrapper make approachable like see picture lot sketchy things going attribute highly experimental really good solution nt nest states children proposals rather passes state updates prop based previous state honestly nt clue added code intended use case avoid state children parent state children methods code also highly reusable perfected notsohighly performancefriendly reuse mainly using expensive task also breaks used long term like state props lifecycle functions mentioned used could also used really feature feature good way keep track state like see following statetoprops lifecycle set existing state new prop returned would allow us take previous state ignore value passed previous states would allow us much faster transition update state new value prop rather rerendering entire state tree propstostate lifecycle need insurance state valid state maybe callback function takes current props allows set new state value like props arguments covered maybe one thing add nt need keep track entire state tree long get previous returned state valid brings issue sure react set right state wrappers think need fixes implementedconsidered tried making addon without breaking encapsulation nt work trying make lifecycle functionsmethods external modules yeah terrible programming citizen clarify need new lifecycle functions making sure people gets informed issue sebmarkbage gaearon zpao jimfb", "num": "6616", "d": "4/2016"}, {"title": "virtual dom", "body": "hi like reactjs much guys tell guys implemented logic code sure create patch using js code also uses facebook calls virtual dom increased performance writing full render virtually checking difference virtual render actually dom creating patch", "num": "6615", "d": "4/2016"}, {"title": "upgrading react breaks autofill behavior controlled inputs", "body": "sign form controlled inputs works fine using react upgrade react autofill behavior longer triggers onchange strangely change document mode edge default react still behaves expected reading changelog change sounds like could related input events handled reliably ie ie spurious events longer fire using placeholder jquense", "num": "6614", "d": "4/2016"}, {"title": "warning looks like using minified copy development build react", "body": "looks like using minified copy development build react deploying react apps production make sure use production build skips development warnings faster see details", "num": "6611", "d": "4/2016"}, {"title": "isnotrequired", "body": "happens every want something like js class mygenericcomponent static proptypes score reactproptypesnumberisrequired text reactproptypesstringisrequired class mymorespecializedcomponent static proptypes score mygenericcomponentproptypesscore text mygenericcomponentproptypestextisrequired however despite looking especially wrong code nt work expected two reasons prop retains flag declaration issue could solved adding flag would simply return nonrequired version validator prop nt flag already required issue could solved adding noop flag would return exact validator feel like two changes would help safely forward proptypes improving code readability process minimal cost term line code would look like js class mymorespecializedcomponent static proptypes score mygenericcomponentproptypesscoreisnotrequired text mygenericcomponentproptypestextisrequired", "num": "6610", "d": "4/2016"}, {"title": "parent component call methods child components", "body": "", "num": "6609", "d": "4/2016"}, {"title": "purerendermixin ignore function props", "body": "use purerendermixin mycomponent updates every time rootref maybe store function like seems redundant function ignored helpful", "num": "6601", "d": "4/2016"}, {"title": "context update using", "body": "use render portal javascript class modal extends reactcomponent componentdidmount thisnode documentcreateelement div documentbodyappendchild thisnode thisrenderportal thisprops componentwillreceiveprops nextprops thisrenderportal nextprops componentwillunmount reactdomunmountcomponentatnode thisnode documentbodyremovechild thisnode renderportal props gt rendersubtreeintocontainer thisnode render return null root component javascript class app extends reactcomponent static childcontexttypes highlightcolor reactproptypesobject context root component updated passed children changed right access correct context component first render context passed change context root component changed access correct context every render wrong code", "num": "6599", "d": "4/2016"}, {"title": "context undefined use constructor", "body": "issue code import react component proptypes react import reactdom reactdom import router route link browserhistory reactrouter export default class app extends component use constructor thiscontext undefined otherwise comment constructor statement thiscontext null uncaught typeerror read property router undefined router thiscontextrouter constructor props super props consolelog render return reactdemo static contexttypes router proptypesobjectisrequired reactdomrender documentgetelementbyid root react versioin remember previous version without problem bug usage problem demo git thanks", "num": "6598", "d": "4/2016"}, {"title": "removechild error renderersdom domchildrenoperations lib adds wrappers dom", "body": "get uncaught notfounderror failed execute removechild node node removed child node source problem lib uikitjs transform dom mounted parentnode greatparent childnode direct parent guess intermediate nodes removed parentnode possible fix edit probably could responsibility lib clean dom componentwillunmount", "num": "6593", "d": "4/2016"}, {"title": "update reactdomserverrendertostaticmarkup documentation", "body": "rendertostaticmarkup described similar except nt create extra dom attributes react uses internally react probably time change clarify still advantages", "num": "6589", "d": "4/2016"}, {"title": "lifecycle compatibilityrecommendation table", "body": "call setstate within ref callback answer yes though probably good idea really confusing permitted good bad illegal especially different things legal different times lifecycles even something legal might bad idea clarify", "num": "6586", "d": "4/2016"}, {"title": "additions props", "body": "working workaround props think props advantages merge props split props way could make thing react mentioned work tweak meaning like react components ultimately like see official react feature thoughts repo", "num": "6583", "d": "4/2016"}, {"title": "proposal replace nodeenv reactenv dev replacement", "body": "come couple times lately issue think perhaps added minification warning people ending seeing nt getting prod code expected also argument want react production still use nodeenv purposes would things figure make sure envify works deciding projects currently also use nodeenv pattern eg relay fbjs thirdparty code etc might good idea though definitely nt happening immediately wanted start discussion", "num": "6582", "d": "4/2016"}, {"title": "possible improvements nodeenv staging warning minification", "body": "hello using react projects found staging servers start generate warning looks like using minified copy development build react deploying react apps production make sure use production build skips development warnings faster still need possible warnings proptypes controlleduncontrolled components debug issues environment close possible production still production case staging environment builded minification check app delivering production proposal remove warning env possible thanks", "num": "6581", "d": "4/2016"}, {"title": "reactcreateelement accept functional component", "body": "relying test suite since accept functional component ca nt longer use functional component project", "num": "6579", "d": "4/2016"}, {"title": "bug title ie", "body": "div title attribute ie environment becomes caton", "num": "6578", "d": "4/2016"}, {"title": "rename form components", "body": "docs say defaultvalue defaultchecked props used initial render need update value subsequent render need use controlled component note docs say used rendering think would better name describes behaviour property better translating terms german means something static ca nt changed runtime input element might mutate runtime eg prefill form current time english native speaker might english language nt differentiate two terms german language", "num": "6577", "d": "4/2016"}, {"title": "dynamically setting background", "body": "consider code var css background url backgroundurl norepeat center center backgroundsize backgroundsize backgroundcolor backgroundcolor css rendered expected change backgroundurl also removes backgroundsize backgroundcolor result becomes", "num": "6575", "d": "4/2016"}, {"title": "componentwillunmount ever called", "body": "error boundries might help someone using using error boundaries nt ever attempt unmount single component instance reason infinite loop eventually run stack space p good tail recursion jsvm could become infinite loop anyway contrived example reactrouterredux combination creates situations type thing happens", "num": "6574", "d": "4/2016"}, {"title": "purerendermixin respect changes context", "body": "accidentally applied purerendermixin page rendered result given props state however broke page since context changed isuserloggedin", "num": "6571", "d": "4/2016"}, {"title": "validatedomnesting", "body": "warning validatedomnesting appear descendant see createapps gt form gt gt connect uploadbtn gt uploadbtn gt connect resourcemodal gt resourcemodal gt connect resource gt resource gt form warning", "num": "6567", "d": "4/2016"}, {"title": "add reactjs repository description appear github search results searching reactjs", "body": "performing global search query github query reactjs repository appear list think people expect appear suggest adding bit text repository description keyword proposal", "num": "6566", "d": "4/2016"}, {"title": "proposal component render required property missing", "body": "reactjs application often repeat following pattern component relying required property const mycomponent props gt propsuser return null return username mycomponentproptypes user proptypesobjectisrequired pattern present also redux pattern reactonlyif trying centralize would nt clear component would render without required property warning could still present development mode", "num": "6564", "d": "4/2016"}, {"title": "issue resulting loss cursor position controlled inputs nt fixed", "body": "release see fixed issue resulting loss cursor position controlled inputs spicyj actually bug nt fixed please consider example steps reproduce input set cursor position input something see cursor moved end", "num": "6563", "d": "4/2016"}, {"title": "trying read property undefined render log error", "body": "trying read property undefined render log error eg add render function even outside return block nothing happens would expected get error message console", "num": "6562", "d": "4/2016"}, {"title": "add commentsattribute indicating component rendered", "body": "per discussion today sometimes developing platform nt devtools safari etc problem looking whole pile markup ca nt tell components rendered without devtools output markup really hard navigate would cool comment nodes attribute helps users navigate output nodes would rendered dev mode flag turned something", "num": "6559", "d": "4/2016"}, {"title": "warn calling setstate ref callback", "body": "refs dom nodes thus suggest nt store state right always store somewhere instance assuming calling setstate ref callback sounds like antipattern", "num": "6557", "d": "4/2016"}, {"title": "controlled number input nt handle e properly", "body": "controlled number input without corresponding function still allows entered numbers inputted afterwards could incorrect nt believe desired behavior jsfiddle demonstrating issue", "num": "6556", "d": "4/2016"}, {"title": "keydown event listener performance slower", "body": "use case rendering x grid components changing state parent component via event per docs like componentdidmount windowaddeventlistener keydown thishandlekeypress componentwillunmount windowremoveeventlistener keydown thishandlekeypress chrome example react taking rerender takes view console examples see mean example example", "num": "6554", "d": "4/2016"}, {"title": "react select value working optgroups", "body": "since upgrading react rendering optgroups value set dom correctly first option always get picked examples react fiddle broken react fiddle works react without optgroup fiddle works environment os x safari version chrome version firefox edit also noticed behavior occurs using", "num": "6552", "d": "4/2016"}, {"title": "warning fieldset element without form parent element", "body": "element present without wrapping element somewhere tree ios chrome throws kills execution much like suggestions would nice react threw warnings scenario development", "num": "6551", "d": "4/2016"}, {"title": "upgrade addons", "body": "upgrading react get following error running think due two addons include would intuitively upgrade since breaking change version like check changelog addon ensure code break however find changelog gitrepo belonging theese addons right approach simply follow react version number every time thanks advance bit lost", "num": "6548", "d": "4/2016"}, {"title": "react regression controlled select elements optgroup displaying value initial render", "body": "using react controlled select elements optgroup elements displaying selecting value provided initial render see following jsfiddle simple test case another fiddle working using react", "num": "6547", "d": "4/2016"}, {"title": "react browserjs nt work csp", "body": "would like react work csp content security policy without adding unsafeeval policy browserjs line contains call function violates csp policy code transformrun function code var opts argumentslength lt arguments undefined arguments optssourcemaps inline return new function transform code opts code possible rewrite browserjs nt violate csp", "num": "6546", "d": "4/2016"}, {"title": "react props value changed string", "body": "", "num": "6545", "d": "4/2016"}, {"title": "video tag support muted parameter", "body": "unable use muted parameter parameters video seems fine", "num": "6544", "d": "4/2016"}, {"title": "maintaining state render passes", "body": "someone interested trying fix meaning would still reference key ish state render pass destructed would reference left destruction rerender state rebuilds previous one kinda like hot reloading watches previous state rendered tries rerender builds changes made new render dunno inaction though something worth chasing", "num": "6543", "d": "4/2016"}, {"title": "iframe load event firing chrome safari src blank", "body": "see trigger alert chrome safari work firefox even react issue webkit issue webkit issue fix react given want consistent events across browsers ps jsfiddle based isuse", "num": "6541", "d": "4/2016"}, {"title": "allow mutating component state using proxies", "body": "instead could used utilizing proxies see", "num": "6540", "d": "4/2016"}, {"title": "react update uncaught typeerror read property addeventlistener null", "body": "hello updating react getting following error", "num": "6538", "d": "4/2016"}, {"title": "reactdomrender documentgetelementbyid target throws error registercomponent", "body": "use reactdomrender documentgetelementbyid renderapp meteor start set render target like error thrown using firefox browser", "num": "6537", "d": "4/2016"}, {"title": "modal aftermodalopen", "body": "", "num": "6533", "d": "4/2016"}, {"title": "got react update error", "body": "run command npm install save react reactdom", "num": "6530", "d": "4/2016"}, {"title": "reactdomserver swaps element props", "body": "example rendered client props pushed beggining attr list making dom different server client", "num": "6526", "d": "4/2016"}, {"title": "react contexttypes proptypes using already static typed language like typescript", "body": "set validation fine concept already using language like typescript takes care typing extremely redundant painful keep updating particular however alteast optional nt please provide option make optional using languages provide static typing top js pointless redundancy eliminated", "num": "6525", "d": "4/2016"}, {"title": "react inline styling producing concatenated style properties separate unique object keys", "body": "assume following styles object provided component prior would result browser computed styles react results chrome chrome results means chrome red background chrome background entirely sure whowhat fault would able shed light change bug intended feature", "num": "6524", "d": "4/2016"}, {"title": "errors using hoc helpful", "body": "put object component decorated say hoc called styledcomponent get error like problem many components decorated like effect error nothing help figure error came would like see things first step think would show full path second would integration react devtools could actually click see highlighted pathcomponent final would possible show tagname contained object well brainstorming better react", "num": "6522", "d": "4/2016"}, {"title": "defaultvalue ignored contains optgroups", "body": "proof", "num": "6521", "d": "4/2016"}, {"title": "stop linking reactpython docs", "body": "reactpython completely deprecated probably cease function soon new versions react docs probably longer link use react jsx python applications page", "num": "6518", "d": "4/2016"}, {"title": "children nt rerender parent component optimised", "body": "seeing something looks like bug written simple test case please refer webpackbin contains test scenario", "num": "6515", "d": "4/2016"}, {"title": "update test utilities docs compatible gt", "body": "since merged docs needs update", "num": "6514", "d": "4/2016"}, {"title": "language translation react", "body": "transpiling language react partly relative react targets mainly babel could done react well think gist", "num": "6513", "d": "4/2016"}, {"title": "fail exist standalone js", "body": "using webpack project works perfectly fine however try upgrade pops error classic issue works fails could one answer", "num": "6512", "d": "4/2016"}, {"title": "minification warning production environment", "body": "minification warning react", "num": "6511", "d": "4/2016"}, {"title": "expose name options proptypes", "body": "looking way iterate component defined proptypes determine type options example like able iterate able determine actual type validator different things passed options working styleguide hoping list possible options pass component props please let know way already thanks", "num": "6507", "d": "4/2016"}, {"title": "number input goes infinite loop chrome debugger", "body": "possibly related mac chrome pretty standard number input like gt click arrow input field change number works properly however open chrome inspector throw breakpoint somewhere rendering flow get infinite loop value input field keeps incrementing possible may chrome bug well stack trace showing looping", "num": "6506", "d": "4/2016"}, {"title": "error using nashorn java", "body": "lately upgraded code java java getting following error anyone help exception thread main javalangreflectinvocationtargetexception native method sunreflectnativemethodaccessorimplinvoke sunreflectdelegatingmethodaccessorimplinvoke javalangreflectmethodinvoke orgeclipsejdtinternaljarinjarloaderjarrsrcloadermain caused javalangarraystoreexception jdknashorninternalruntimeundefined jdknashorninternalruntimearraysobjectarraydatasetempty jdknashorninternalruntimearraysobjectarraydatadelete jdknashorninternalruntimescriptobjectdelete jdknashorninternalobjectsnativearrayshift jdknashorninternalscriptsscript eval program jdknashorninternalruntimescriptfunctiondatainvoke jdknashorninternalruntimescriptfunctioninvoke jdknashorninternalruntimescriptruntimeapply jdknashornapiscriptingnashornscriptengineevalimpl jdknashornapiscriptingnashornscriptengineevalimpl jdknashornapiscriptingnashornscriptengineevalimpl jdknashornapiscriptingnashornscriptengineeval javaxscriptabstractscriptengineeval uglifyuglifyjsrun uglifyuglifyjsexec uglifyuglifyjsmain", "num": "6505", "d": "4/2016"}, {"title": "ca nt reuse server markup required vs required rendering difference", "body": "trying upgrade universal js application without warnings getting warnings however think might issue reactdom reuse markup warning looked specific issue server input field attribute rendered whereas client quick example issue node command line reactdomrendertostring reactcreateelement input required true simple input field rendered client via reactdomrender var el reactcreateelement input required true reactdomrender el documentgetelementbyid app", "num": "6503", "d": "4/2016"}, {"title": "react defined simple react component", "body": "hi using using react create universal app getting following component import component react export default class herosearchview extends component following class call import react react import connect reactredux import coupon commoncomponentscoupon import actions miscactions reduxmodulesmisc import herosearchview componentsherosearchview const mapstatetoprops state gt misc statemisc export class homeview extends reactcomponent render export default connect mapstatetoprops objectassign miscactions homeview kind scratching head following message means note remove page works fine", "num": "6501", "d": "4/2016"}, {"title": "react css manual", "body": "hi manual detailed react style found offical doc explicate well example directly use component html css supposed flex attribute parent react doc seems explain", "num": "6499", "d": "4/2016"}, {"title": "installing reactaddons best practices", "body": "various react addons express peer dependency matching react version write react component library runs multiple versions react depends specific addons implementation detail consume library host environment uses react npm still helpfully install latest version reactaddonsupdate course peerdepends react causing rather confusing unmet peer dependency warnings since consumer looking around block version issues question best practices library situation declare reactaddonsupdate peer dependency meaning consumer personally install react also every reactaddons dependents use seems annoying consumer also sort abstraction break sake version matching perhaps reactaddons independently versioned accept multiple versions maybe declare peer dependency react nt actually need like reactaddonsupdate uses couple small nonreactcore utilities", "num": "6498", "d": "4/2016"}, {"title": "breaking devtools", "body": "using react meteor open chrome console get effect like gone devtools inspector huge loss word", "num": "6497", "d": "4/2016"}, {"title": "reactcsstransitiongroup animation start issue low framerates", "body": "issue run animation issue active class added fast child added reactcsstransitiongroup happens framerate drops fps chrome version reason reason following timeout reactcsstransitiongroupchildjs line framerate low animated object appears directly animation active state browser enough time process previously added enter class fix fixed internally queing function two chained calls instead anybody else encountered issue anybody interested pull request regards mirko", "num": "6495", "d": "4/2016"}, {"title": "warning constructor changing uncontrolled input type search controlled since", "body": "noticed react complains something like changing initial state stops complaining soon put string instead undefined intended nt see big problem difference value undefined", "num": "6494", "d": "4/2016"}, {"title": "testutils better errors methods passing arguments wrong type", "body": "rather minor issue fix simple enough thought file anyway using sometimes write simple errors testutilsscryrendereddomcomponentswithclass foo expected testutilsscryrendereddomcomponentswithclass reactcomponentinstance foo throws stack trace lines type error fixing trivial first line stack trace points offending line expected error nt really obvious others nt throw reached throws bit helpful error would make sense check arguments passed valid throw immediately nt user would end errors along lines", "num": "6493", "d": "4/2016"}, {"title": "rendertostaticmarkup", "body": "said rendertostaticmarkup still docs describing use internal build still apply link docs blog post made suspicious blog post", "num": "6492", "d": "4/2016"}, {"title": "attribute supported", "body": "scene wanted put flash page attribute missing tried another way changed state though element attributes changed flash nt really change", "num": "6491", "d": "4/2016"}, {"title": "decouple old addons react internals", "body": "eg clonewithprops depends reactproptransferer thing depends ca nt delete move things around clonewithprops still uses ones might possible without reaching internals ca nt flat builds also fb still uses clonewithprops shhhh", "num": "6490", "d": "4/2016"}, {"title": "testutilsfindallinrenderedtree iterating components since react", "body": "tests rely went debugger stepped callback function components captured subcomponent coming callback", "num": "6489", "d": "4/2016"}, {"title": "react breaks server rendering checksum", "body": "developing universal app react updating started getting error warning react attempted reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injected new markup compensate works lost many benefits server rendering instead figure markup generated different client server client ut class mdinput name txtcadmus pat server ut class mdinput pattern nam seems bug reordering something like completely sure tried change bunch stuff eg force server client use polyfill using babel transform objectassign plugin nothing solved problem uninstalled react installed problem gone btw pretty simple simulate issue code javascript reactdomrender documentqueryselector main consolelog documentqueryselector main innerhtml consolelog reactdomserverrendertostring react working react working expected", "num": "6487", "d": "4/2016"}, {"title": "css transition group peer dependencies error", "body": "hi try installing react addons transition group get peer dependeincies error think transition group still depends reactaddonsclonewithprops react reactcreateelement error npm reactaddonscsstransitiongroup npm warn packagejson description npm warn packagejson repository field npm warn packagejson readme data npm warn packagejson license field npm err windowsnt npm err argv c program filesnodejsnodeexe c program filesnodej nodemodulesnpmbinnpmclijs install reactaddonscsstransitiongr save npm err node npm err npm npm err code epeerinvalid npm err peerinvalid package react satisfy siblings peerdepen encies requirements npm err peerinvalid peer reactdom wants react npm err peerinvalid peer reactaddonsclonewithprops wants react npm err peerinvalid peer reactaddonscsstransitiongroup wants react", "num": "6485", "d": "4/2016"}, {"title": "unable type korean input", "body": "hi might know guess issue typing korean recent version problem try type korean letters split korean letters make group letters element example group letters like \ub9ac\uc561\ud2b8 means react composed \u3139\u3163\u3147\u3150\u3131\u314c\u3161 sort r e c first \u3139\u3163 put together make first group letter \ub9ac update type order automatically put together possible rule make type nt put together shows tried uncontrolled input nt set value worked right guess problem onchange amp setstate korean one biggest language world issue make new version react useless every korean user fixed asap found fixed thx", "num": "6484", "d": "4/2016"}, {"title": "setting selection range text input works asynchronously", "body": "hello trying implement text field fine control behavior state text field includes value selection range pass properties selection range nt exposed html attribute text input set using underlying dom element object get value using ref attribute set like note using elemental ui forminput component wrapper around regular input javascript import react react import forminput elemental export default class finecontroltextfield extends reactcomponent static proptypes value reactproptypesstringisrequired onkeypress reactproptypesfuncisrequired selection reactproptypesobjectisrequired start end onkeypressstoppropagationpreventdefault thought might help nt notice put nt call nothing however nt complete solution cursor gets moved end input regardless press keys cursor moves end input selection gets called cursor quickly moves back beginning since works asynchronously deduce react likely sets selection range called way control behavior nt common use case understand nt exposed api setting selection range workaround something aware need get work", "num": "6483", "d": "4/2016"}, {"title": "support asynchronous values like promises observables", "body": "moment quite cumbersome work promises react either write lot code update state inside callbacks use library like reactpromise works children properties based components another option traverse whole virtual dom replace promises passed react read blog post find longer obviously ideal rendering performance since promises standard think simpler way use directly view one option would introduce asyncvalue type promise implementation asyncvalue type would supported children well properties promises could simply used like javascript promise thisstatemypromise opposed supporting promises everywhere directly without promise function unexpected side effects moreover types asynchronous values example observables could added later easily creating another asynctype implementation angular takes similar route async pipe simply write attributes well normal content feature would also convinient libraries like flux allows fetch properties directly inside view avoids reptition relay javascript promise thisstatemodelget property think proposal discussed could nt find thread covers particular topic", "num": "6481", "d": "4/2016"}, {"title": "add component instance onsetstate reactdebugtool", "body": "unless cleanway sniff state without monkeypatching would great get actual component instance raised onsetstate reactdebugtool", "num": "6480", "d": "4/2016"}, {"title": "disable warning minified copy development build", "body": "hello since upgrading get place unit tests warning makes sense prod case toolchain little different use react scala build special containing external js required unit tests minimising means loads faster end valid case minimisation react dev way remove warning appears heap times tests concurrent", "num": "6479", "d": "4/2016"}, {"title": "input tags values invisible sizzlejquery since", "body": "prior input tag like would found sizzlejquery query like since query returns results reduce query check sure enough output wondering use sizzle directly unit tests assert react output indirectly domzipper library also testing", "num": "6478", "d": "4/2016"}, {"title": "immediately setting disabled attribute form submit button using caused form submission take place", "body": "form submit button user clicks submit function calls rerender sets disabled attribute submit button chrome safari network tabs shows post request even starts firefox post occurs note behaviour use codepen example issue occurs latest version react apologies browser quirk vs react issue colleague pretty confused", "num": "6477", "d": "4/2016"}, {"title": "nt warn unitless", "body": "react getting warning generally makes sense allowed unitless like css spec", "num": "6476", "d": "4/2016"}, {"title": "multiple children key warning message prepends actual key value", "body": "multiple children key example jsfiddle react prints following warning console key referenced warning prepends internallooking key specified user bit misleading ideally would mention exact key value set user", "num": "6475", "d": "4/2016"}, {"title": "use template literals", "body": "code conventionreason using template literals consistently using template literals using string concatenation couple occurrences like return prefix keycharat touppercase keysubstring", "num": "6474", "d": "4/2016"}, {"title": "react updates causing issues dom", "body": "hey fairly new developer working app version updated today update remove errorswarnings struggling great relief brought issue specifically app renders fine pages looking fine components text etc right places frozen completely nonfunctional allowing click anything etc error message see follows chrome firefox backtracked could found part node coming null absolutely clue going seems hint exactly causing issue try ripping app apart thorough debugging would nt expect much due unfamiliarity development yet really really appreciate help advance hope problem contribute somewhat improving react ecosystem", "num": "6472", "d": "4/2016"}, {"title": "unable use transpiled classes components react", "body": "following code snippet use strict import react react import render reactdom import jsdom jsdom class kendoscheduler componentdidmount consolelog thisrefscontainer render return jsdomenv function err window const el windowdocumentgetelementbyid container set globals react uses globalwindow window globaldocument windowdocument render el run emit following error code run work perfectly postcompiled code looks like use strict var createclass function function defineproperties target props var lt propslength var descriptor props descriptorenumerable descriptorenumerable false descriptorconfigurable true value descriptor descriptorwritable true objectdefineproperty target descriptorkey descriptor return function constructor protoprops staticprops protoprops defineproperties constructorprototype protoprops staticprops defineproperties constructor staticprops return constructor var react require react var interoprequiredefault react var reactdom require reactdom var jsdom require jsdom var interoprequiredefault jsdom function interoprequiredefault obj return obj amp amp objesmodule obj default obj function classcallcheck instance constructor instance instanceof constructor throw new typeerror call class function var kendoscheduler function function kendoscheduler classcallcheck kendoscheduler createclass kendoscheduler key componentdidmount value function componentdidmount consolelog thisrefscontainer key render value function render return div ref container classname kendocontainer return kendoscheduler function err window var el windowdocumentgetelementbyid container set globals react uses globalwindow window globaldocument windowdocument reactdomrender null test el version info let know information required", "num": "6468", "d": "4/2016"}, {"title": "allow specifying multiple fallback values inline styles eg vendor prefixing ssr", "body": "using string hack override css values react components example want different values npm module polyfilling styles react components worked perfectly warnings nothing updated today everything breaking normally deprecation warnings nt notice warnings change b changelog see anything related understand changed missing something", "num": "6467", "d": "4/2016"}, {"title": "multiple checkboxtoggle affecting state", "body": "hi guys experiencing strange behaviour couple checkboxes behaves checkbox change state selecting snippet reference hand might overlooked something see advise would great javascript import default react proptypes react import mui materialui import getmuitheme materialuilibstylesgetmuitheme import checkbox materialuilibcheckbox let injecttapeventplugin require reacttapeventplugin const styles block maxwidth checkbox marginbottom toggle marginbottom class iotable extends reactcomponent constructor props super props getchildcontext return muitheme getmuitheme componentwillmount injecttapeventplugin handlechange thissetstate camera thisrefscamerainputstateswitched router thisrefsrouterinputstateswitched wifi thisrefswifiinputstateswitched render iotableproptypes camera proptypesbool cameratext proptypesstring iotabledefaultprops camera true cameratext iotablechildcontexttypes muitheme reactproptypesobject export default iotable", "num": "6466", "d": "4/2016"}, {"title": "try autoprefix something css attributes like", "body": "according test need manually add prefix inline attribute case implementing nontrivial graph animationinteraction ui programmatically calculating value manually add prefix every time possible delegate tedious task react anyone point related code try make pr", "num": "6464", "d": "4/2016"}, {"title": "rename reactlib reactprivate", "body": "suggested twitter let get broken components", "num": "6460", "d": "4/2016"}, {"title": "removal reactspread broken compatibility typescript older babel transpilers", "body": "use typescript older version babel react yields errors reactspread function see issue applications monkey patch backwards compatible reactspread function would preferable react come compatibility shim function", "num": "6457", "d": "4/2016"}, {"title": "rendering component shadow root react", "body": "quite easy render component shadow root due nodetype check reactdomcomponent however notice check completely removed always bind events element rather events cross shadow boundary retargeted appear though shadow host instead internals react event delegating fails invoke event function case event delegation correctly handled event able inspect listenerbank retargeting performed propagation event would unnecessary realise react nt support shadow dom natively however seems though taken little step back especially angular shadow dom support horizon merely wondering rationale behind removal check whether happy add back people dislike css module approach", "num": "6456", "d": "4/2016"}, {"title": "setstate obj callback callback called state mutated", "body": "fighting used called race condition sure guys call react world calling snippet component reportargs e gt consolelog later stateargs sendprintrequest e gt w stateurl arg stateargs arg komplex string manipulations goes setstate wurl w args arg consolelog sooner stateargs settimeout reportargs proves point trust either noob observation go instead documentation glitch docs says callback called state mutated eventually bug obviously rooting would way jiffy providing someone lot knowledge react would stick speak cheers walther", "num": "6455", "d": "4/2016"}, {"title": "isomorphic rendering inserted html broken", "body": "react inserted dom nodes inserted plugins adblock browser sync otherwise ignored react new nodes cause say regression since breaks full page isomorphic rendering anyone using plugins scripts insert dom loaded say react ignore anything without datareactid mounting server rendered code edit top react throws case would gracefully continue", "num": "6452", "d": "4/2016"}, {"title": "isomorphic rendering sporadically renders attributes different order", "body": "warning react attempted reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injected new markup compensate works lost many benefits server rendering instead figure markup generated different client server client status update name status value server status update value name statu using react", "num": "6451", "d": "4/2016"}, {"title": "throws warning key refs passing props", "body": "seems newest update passing props child component spread operator console throws warnings associated pull request seems throw issue component class stateless component hence passing props thisprops accessing refs keys child component", "num": "6450", "d": "4/2016"}, {"title": "render check input type", "body": "updated code using react one errors made passing class constructors error gave gave clue wrong problem course needed passed instead think might easy error catch warn help noobs like", "num": "6447", "d": "4/2016"}, {"title": "typing middle controlled text field jumps end", "body": "repro go scroll todo example type anything input field click middle text type another character notice cursor jumps end text field", "num": "6446", "d": "4/2016"}, {"title": "cursor jumping end controlled input browsers", "body": "appears working firefox least chrome amp safari broken really recent regression possible changes blame easiest repo todo list homepage", "num": "6445", "d": "4/2016"}, {"title": "warning changing type value input field", "body": "render method something like first render input number eg change input string get warning new value valid number expected behavior", "num": "6441", "d": "4/2016"}, {"title": "fails set value using", "body": "react correct sets defaultvalue using however defaults first familiar react codebase suspect something change made specifically line", "num": "6440", "d": "4/2016"}, {"title": "secretdomdonotuseoryouwillbefired", "body": "great variable name found reactsrcumdreactumdentryjs", "num": "6438", "d": "4/2016"}, {"title": "curly brackets first line return causes unexpected token error", "body": "curly brackets first line return causes unexpected token error example", "num": "6437", "d": "4/2016"}, {"title": "support passive event listeners", "body": "would good everything passive default optin active needed eg could listen text input events preventdefault used controlled behavior active listeners similarly could unify react native threading model eg one thing could synchronously block ui thread active listeners handling keystrokes cc vjeux ide", "num": "6436", "d": "4/2016"}, {"title": "debugging structure amp automatic cleanup unstablerendersubtreeintocontainer", "body": "implementing unstablerendersubtreeintocontainer use custom components things discussed initial pr would pretty fantastic specifically things debugging structure eg tooltips nt show top level react devtools rather respective subtrees automatic clean parent tree unmounted event bubbling back log nt see issues looks like unstablerendersubtreeintocontainer moment passing proper context", "num": "6435", "d": "4/2016"}, {"title": "setting select value fails using optgroup", "body": "per fiddle output select field edited brevity passing select field value midlothian still showing fife selected value however seem possibly works defaultvalue passed however work passed", "num": "6434", "d": "4/2016"}, {"title": "updates grunt", "body": "specifically released first update bumps lodash dependency", "num": "6433", "d": "4/2016"}, {"title": "componentdidunmount functionality addition componentwillunmount", "body": "would great possible run code component actually unmounted useful consider following component parent service service child child component child componentwillmount starts listening service throw exception child componentwillunmount since parent gets unmounted first service already destroyed existed componentdidunmount service destroyed children unmounted ie component parent service service child child component child componentwillmount starts listening service", "num": "6424", "d": "4/2016"}, {"title": "setstate componentwillmount causes typeerror rendering rendertostring preceded component renders rendertostring", "body": "calling component causes error rendering serverside preceded component renders content using causes typeerror works", "num": "6423", "d": "4/2016"}, {"title": "callback setstate second parameter get mouseclick event handler", "body": "hi use setstate click function pass callback function second parameter please look callback function get event handler reasonable try pass event handler callback like state wrong get event handler right state setstate callback function correctly thank help advance", "num": "6422", "d": "4/2016"}, {"title": "npm install save reactdom throws error", "body": "npm install save reactdom npm http get npm http npm err registry error parsing json npm err syntaxerror unexpected token npm err gt l lt gt lt lt npm err amp amp amp ph amp amp l amp c j amp kt amp gt amp amp x amp amp npm err z b npm err \u02carr amp gt n lt l lt amp amp npm err objectparse native npm err regclient npm err requestselfcallback npm err requesteventemitteremit npm err request npm err requesteventemitteremit npm err incomingmessage npm err incomingmessageeventemitteremit npm err npm err processtickcallback npm err need help may report log npm err npm err email npm err npm googlegroupscom npm err system linux npm err command usrbinnodejs usrbinnpm install save reactdom npm err cwd homekarircodelatihanreactjs npm err node v npm err npm v npm err type unexpectedtoken npm err npm err additional logging details found npm err homekarircodelatihanreactjsnpmdebuglog npm err ok code problem json funny characters id reactdom rev name reactdom description react package working dom disttags latest next versions name reactdom version description dom wrapper subjectively sanity awesome helpers author funny characters located beside word subjectively npm version nodejs version", "num": "6421", "d": "4/2016"}, {"title": "proposal reactdomserver render stream", "body": "tl dr like know much enthusiasm core react team accepting pr ability render markup stream nt need guarantee course like get sense something react team might spending ton time working background currently server rendering accomplished synchronous functions return string server render methods somewhat slow large web pages easily take render depending server also since node single threaded singlecore performance improving rapidly problem moore law eventually solve slowness turn causes two problems production websites large somewhat large html pages first methods return string completely render entire component return even first byte browser meaning browser waiting idle render method called second methods synchronous node single threaded server unresponsive rendering means large page render easily starve renders smaller pages may take ms asynchronous render method would let large page renders yield cpu small pages improving average response time proposed solution proposal add two methods reactdomserver return node readable stream terms behavior methods would return readable stream outputs markup respectively methods could solve problems stream begin emitting content immediately send browser keeping ttfb constant components get larger streams also inherently asynchronous allows large pages starve smaller ones months back forked react library called reactdomstream exact thing fairly well received stars github though modest actual downloads npm also wishlist bug thread repo however maintaining fork less desirable position wonder get integrated core code base implementation ideal ended copying basically every implementation making copied versions asynchronous benefit approach nt affect performance obvious drawback code changes bug fixes would performed forks code ideal recently figured way share code better way result slowed relatively significantly plus minus trying figure tune carefully looking great yet questions think questions like ask team assuming perfectly implemented performance degradation current code even something willing accept pr feature accept important string stream versions code follow code path willing accept degradation performance string version server rendering order get stream rendering constant ttfb keep single code path thanks time thanks great work react tagging spicyj gaearon sebmarkbage instructed react irc channel", "num": "6420", "d": "4/2016"}, {"title": "release", "body": "one thing left blocker list get merged shortly code complete everything else considering nt regression got booted catch later real code changes x remaining regression simulating events x fix failing test fallout x upgrade deps docs x update properties amp attributes removed deprecated methods add new deprecation notes x add notes potentially confusing version mismatches eg returning null functional component actual release x create branch x shrinkwrap x update changelog sync blog post x publish x update travis build docs new branch part release everything published postrelease x update tutorial repo x update fiddles x ensure master release resource synced", "num": "6417", "d": "4/2016"}, {"title": "official method transforming components", "body": "goal eventually kill technology favor less hacky technologies baked react running problem want able transform components regardless babel ie components may may touched babel either already transpiled dependency within etc official way transform components would solve problem immediately could enable incredibly useful functionality realm reusability extensibility managing application state via context curious whether anyone put official thought towards willing accept pull request", "num": "6416", "d": "4/2016"}, {"title": "warning messages use consolewarn", "body": "currently use consoleerror overestimates severity causes devs react strongly message might imply example", "num": "6414", "d": "4/2016"}, {"title": "transitiongroup", "body": "var reacttransitiongroup reactaddonstransitiongroup var content reactcreateclass componentwillappear function consolelog componentwillappear componentdidappear function consolelog componentdidappear componentwillenter function consolelog myboxcomponentwillenter componentdidenter function consolelog myboxcomponentdidenter componentwillleave function consolelog myboxcomponentwillleave componentdidleave function consolelog myboxcomponentdidleave render function return content var todolist reactcreateclass getinitialstate function return show false show function thissetstate show true hide function thissetstate show false render function var items thisstateshow return items could tell problem", "num": "6412", "d": "4/2016"}, {"title": "add support css variables style attributes", "body": "css variables supported chromium use rendering enable us write cleaner flexible code sadly seem use react without resorting various tricks ideally would like able use like would make variable available inside scope div able add using following syntax nt updated try assigning new ruins much point using variable able add remove using reactdom gets sync dom updates addition pretty questions usefulness css variables happy explain", "num": "6411", "d": "4/2016"}, {"title": "onfocusinonfocusout events", "body": "like mouse enterleave almost always want events currently expose run semifrequently actually product work add", "num": "6410", "d": "4/2016"}, {"title": "documentation regarding refs", "body": "would saved alot time documentation refs made clear really work accessing one child one parent unless wrong understanding would good documentation dealt refs explained", "num": "6409", "d": "4/2016"}, {"title": "warning defining proptypes production", "body": "production warning proptypes defined nonempty object could spark change community proptypes conditional nodeenv could automated babel plugin similar build systems would result react apps significantly smaller production warning defined proptypes componentname component production build code consider using plugin babelplugin pluginname third party library open issue alternative saveallbytes text warning proptypes defined componentname", "num": "6402", "d": "4/2016"}, {"title": "deprecate return value", "body": "tracking issue ready deprecate return value yet likely longerterm objective immediate issue reference start get ball rolling reasoning working towards new incremental reconciler means render may complete prior returning anyone relying return value would race condition returned instance potentially fully mounted safelooking code might work time fail time sole discretion scheduler clear issue today become issue start utilizing incremental renderer iff people rely return value prepare new reconciliation algorithm start encouraging people start avoiding return value people instead attach callback ref root component rendering component thus allowing get reference instance mounting complete first step process update documentation state return value legacy people attach ref instead similar string refs", "num": "6397", "d": "4/2016"}, {"title": "proposal externalize inlinestyles", "body": "meeting notes tons different ways render js styles see radium css modules react native web etc see tremendous opportunity powerful thirdparty stylesheet packages without burying lead much react dom nt manage inline styles external inlinestyle library would responsible producing valid response send prop renderer maybe renderer expecting object form could also create expectation around returning primitive object could look something like javascript import react react import stylesheet mystylesheetlibrary var stylesheet stylesheetcreate color blue fontsize consolelog stylesheettostring gt color blue fontsize export default function reactdom call stylesheet produce valid style attribute invariants warnings errors associated stylesheet handled library return react could provide addon maintains existing functionality get things started similarly shifted community however puts react place inline stylesheet package maintainers greater control static inline styles compiled ahead time react spend dev effort maintaining inline style support heavily using inline styles use template strings benefit lighter weight react though nt really huge deal", "num": "6395", "d": "4/2016"}, {"title": "allow arrays css properties take multiple values", "body": "would nice people able write", "num": "6393", "d": "4/2016"}, {"body": "ok reproduced issue jsfiddle", "d": "4/2016"}, {"body": "ok found cause one might encounter issue included time include one react", "d": "4/2016"}, {"body": "found way repair settimeout function merefsfocuselfocus", "d": "4/2016"}, {"body": "zenjava provide jsfiddle demonstrates issue also wondering might issue unrelated react appears breaking react interacting element directly", "d": "4/2016"}, {"body": "duplicate", "d": "4/2016"}, {"body": "best practices form validation best practices react general oneway data flow create reusable components etc nt think opinions specific form validation", "d": "4/2016"}, {"body": "alternatives work existing cdns make sure versions deployed command pull based autoupdating result delays things like jsfiddle tutorial need assets available immediately redux directing people mjackson", "d": "4/2016"}, {"body": "thanks mention gaearon dropping hints zpao like give npmcdn shot served requests last month unique visitors may ready handle kind traffic react would throw way currently working getting sponsors place terms service people know expect delays currently instruct cdn cloudflare cache redirects minutes eg request redirect latest release minutes pushed npm", "d": "4/2016"}, {"body": "yes expected elements checked creation time write turns call props validated rely specify required props recommendation use component sensible fallbacks eg", "d": "4/2016"}, {"body": "sorry bad specificed", "d": "4/2016"}, {"body": "bep good chart trying cover lifecycle", "d": "4/2016"}, {"body": "react way store application state higher eg flux store react renders current state never need send events children events change application state eg scroll position pass current scroll position prop course react allow model application state lower level components get ref component call functions component always escape hatch rather recommended pattern general rule thumb parent component never telling child something never asking child anything obviously exceptions every rule refs first order approximation true find breaking rule often indication probably rethink data flow application specifically rethink state stored", "d": "4/2016"}, {"body": "jimfb thanks reply appreciate time looking post sort posed initial post question beginner like expand bit architecture discussion may moment time maybe consider reopening issue think bring valid point actually veteran framework user like decade dev team part use flux understand tenets managing state well keep child components simple reusable even keeping team insane release clip ai nt easy react nice piece thought amp engineering rule thumb mentioned parent components need tell children directly something solid covers maybe realworld dev cases outlier cases nt fit pattern mention use refs reality nt work pretty nonreactlike workaround see normal valid subset use cases noted examples original post worth thinking little receiving deep link child containers need receive piece timebased information necessarily unique duplicates allowed fact event occurring unique payload components need receive information navigated lifecycle ready process another example list items parent scroll container need animate specific times also needs play well lifecycles items addedremovedchanged need animate piece state timebased message nt need retained react diffing engine great thing often makes cases even painful solve timebased information retention state often undesirable component needs know happened reliable way falling back using refs dispatching events work well child nt ready basically let go around framework hacks include settingunsetting state incrementing dummy integer state storing timestamps manage state changes inelegant thought problem cases could solved way reinforces react core values offering kind topdown stateevent mechanism addition plain state oneway communication model could expanded include either statefulpersistent onetimeuse information two distinctly different types information could communicated similar way best practices could defined around use guys already proven case covered plain state awesome addition model offered official topdown event mechanism guaranteed work component lifecycle would basically obviate need event dispatchers refs think reopen discussion", "d": "4/2016"}, {"body": "covers maybe realworld dev cases outlier cases nt fit pattern mention use refs reality nt work pretty nonreactlike workaround see normal valid subset use cases ok breaking using one escape hatches constantly working reduce still getting fact nonreactlike symptom fact working directly underlying platform escaped react common use cases escape hatches today layout animations etc actively working topics ideas lot complexities nt necessary obvious first glance want make sure get right general however react pretty good job covering common use cases usually people complain something difficult breaking react often mental model wrong still thinking imperatively instead thinking declaratively always easy retrain brain easy fall imperative trap without even realizing another example list items parent scroll container need animate specific times also needs play well lifecycles items addedremovedchanged need animate piece state timebased message nt need retained imperative way looking models equally valid perhaps even better flexible instance suppose someone removes node fraction second later decides actually aborting operation put back want animation effectively slow reverse self imperative fireandforget model animations work well situation declarative spring model component position modeled spring position derived time works really well general case current thinking probably closest described general sense declarative way looking events set list timestamped objects new event occurs simply added list list constant value may reasonably passed props completely eliminated need fire event sense oneway communication model could expanded include either statefulpersistent onetimeuse information two distinctly different types information could communicated similar way best practices could defined around use two distinctly different types information nt distinct convert two onetimeuse information becomes declarative state save list saying would never go route jordan wild ideas year back making components pure function signals events ie nothing stateful everything event transform interesting properties especially makes history timetravel debugging super easy anyway big design space thinking react diffing engine great thing often makes cases even painful solve totally agree perfect solution try make react painless nt want reopen nothing actionable moment understand desireuse case regularly team discussions topics use github issues tracking actionable bugs discussions questions use issues track things plan forward least strong candidate proposal case thing know sure want avoid anything feels imperative like event firing rest assured thinking problem feel free continue discussion thread ca nt guarantee respond every post read pretty much everything passes github another place discussions take place", "d": "4/2016"}, {"body": "raitobezarius npm package", "d": "4/2016"}, {"body": "bad koistya meant without getting error node", "d": "4/2016"}, {"body": "code reference appears general javascript event pass react event system looks like question unrelated react reason going close issue another note use reference dom node selecting id using things like cause interoperability issues components happen choose id prevent component used multiple times page using solve issues", "d": "4/2016"}, {"body": "error uncaught typeerror read property getnativenode null type enter generate new line connect html fragment share code snippet causes error", "d": "4/2016"}, {"body": "one node part seems like duplicate", "d": "4/2016"}, {"body": "space afer return problem new line got error got error mentioned", "d": "4/2016"}, {"body": "yezhiqiusev get error breaking new line statement javascript return value required start line return value try instead js render function return nt unique react part javascript", "d": "4/2016"}, {"body": "aweary thank youit javascript rule got", "d": "4/2016"}, {"body": "think fixed released yet", "d": "4/2016"}, {"body": "log code sample might issue", "d": "4/2016"}, {"body": "gaearon jsfiddle correct lifecycle names logged also provides button add items list see handles child components updating", "d": "4/2016"}, {"body": "note amp called time components initially mounted transitiongroup components added existing transitiongroup reason logged put console statement", "d": "4/2016"}, {"body": "yup mistake sorry guys gaearon correct", "d": "4/2016"}, {"body": "object gets created tag appended document probably", "d": "4/2016"}, {"body": "checked causing", "d": "4/2016"}, {"body": "go system also probably want run tests like tests set set emulate profile build", "d": "4/2016"}, {"body": "makes sense issue internal facebook code react native system nt exist would probably need make push universal talk stakeholders instead going way least need way deploy www nt use precompiled version cc zpao", "d": "4/2016"}, {"body": "think profiling want libraries like redux prod mode default would therefore stick two values nodeenv instead add new profiling variable would default nodeenv production", "d": "4/2016"}, {"body": "jimfb guys check ssr react source check object", "d": "4/2016"}, {"body": "type gets used instead regular", "d": "4/2016"}, {"body": "would entail adding check invariant verifying argument srcrenderersdomsharedreactdomcomponentjs", "d": "4/2016"}, {"body": "could simple might issues checking types since pooling transactions instanceof might work nt recall wed apr brandon dail notifications githubcom wrote would adding check warning invariant checking transaction argument reactserverrenderingtransaction srcrenderersdomsharedreactdomcomponentjs receiving commented reply email directly view github", "d": "4/2016"}, {"body": "zpao could give try", "d": "4/2016"}, {"body": "sounds like aweary might giving try welcome raitobezarius", "d": "4/2016"}, {"body": "raitobezarius zpao branch setup fork hoping give shot insights approach raitobezarius happy hear", "d": "4/2016"}, {"body": "aweary zpao correct wrong think solution return earlier implemented commit okay want still submit pull request added also test branch make sure regression bug", "d": "4/2016"}, {"body": "raitobezarius think checking type would recommended way verifying ssr maybe zpao mentioned earlier sufficient zpao jimfb", "d": "4/2016"}, {"body": "aweary case would defined browser far understand reference global object requirement dom exist thus means ssring checking type would another solution creates dependency code believe could arguably bad means also using another strategy transaction default one ssr warning appear maybe could try ducktype transaction checking behaves like ssrone always anyway nt know idea could get wrong though might right understanding playing around debugger", "d": "4/2016"}, {"body": "think point would prefer make use canonical source information point environment details explicit vs implicit difference implicit could wrong code changes future need could potentially add details transactions checking attributes safe without adding dependency instanceof", "d": "4/2016"}, {"body": "zpao would adding property acceptable", "d": "4/2016"}, {"body": "might want change name might call something like approach need take doable nt looked code say definitely right approach let tell necessary", "d": "4/2016"}, {"body": "zpao seem work think depends whether want rely prototype chain maintained something feel nt going change probably safe use otherwise adding always easy enough", "d": "4/2016"}, {"body": "good catch would like work adding information functional components page", "d": "4/2016"}, {"body": "rather delegate task core contributor", "d": "4/2016"}, {"body": "everyone team busy different things team small help especially area docs appreciated decide submit pr definitely review anything rather see differently let know even end accepting might use parts later call time love get help", "d": "4/2016"}, {"body": "cc aickin experimenting changing server markup validated", "d": "4/2016"}, {"body": "nickdima would recommend figuring dom differs fixing errors anyway theoretically correct solution validation fails question todo react needs able update dom job arbitrarily wrong nodes render tree obvious updates occur situations react blows away entire render tree starts scratch thus ensuring everything matches side effect clearing dom state better worse think sebastian likes current behavior always blow away entire tree validation fails avoids interaction bugs suppose user clicks delete button third document list element rendered ssr document title old todo list rendered client side third item document entitled important financialtax documents react notices element title changes applies update fires click listener delete operation user deleted wrong document throwing away entire dom tree minimizes likelihood happening everything including pending operationsstate destroyed personally nt opinion cc sebmarkbage may opinion", "d": "4/2016"}, {"body": "always possible fix dom diffing eg internationalized date formats ca nt done way server client certain cases windows internationalization libraries differ closed source seems strange ad code would differ though", "d": "4/2016"}, {"body": "well ad code appends elements div inserted could client code boots div already manipulated react tries bring back render function generates", "d": "4/2016"}, {"body": "works right diffs checksum actual dom", "d": "4/2016"}, {"body": "ok something else btw react diff warnings way make sure differences", "d": "4/2016"}, {"body": "probably issue would better discussed since additional attribute component would completely transparent react core reason going close issue feel free open issue repository regards specifics idea objection however would suggest application sufficiently complicated context providers cluttering development experience application might complex would gently suggest maybe application overlyabstracted nt faithful oneway data flow parentowner child obviously nt seen code take grain salt food thought", "d": "4/2016"}, {"body": "try extract reproducible case", "d": "4/2016"}, {"body": "tomdcc also using react router", "d": "4/2016"}, {"body": "gaearon try find time mentioned trigger tests webdriver driven chrome never manually straight forward jimfb", "d": "4/2016"}, {"body": "put simplified copy webdriver test github somewhere run", "d": "4/2016"}, {"body": "thanks interest try extract minimal version today au sometime", "d": "4/2016"}, {"body": "sort wonder related", "d": "4/2016"}, {"body": "thanks writeup biggest problem parents maintain child state need way match component internal state key element generated done automatic way basically end back today managed react reason nt think want pursue within core resolved discussion recommend trying find workarounds userland continue experimenting separate repository really need inject things core probably follow injection strategy similar although technique technically supported could break without notice library becomes popular andor figure solution always reconsider going close since nt think would want figured optimal solution", "d": "4/2016"}, {"body": "nothing child states jimfb trying avoid swapping state props updates props current state opposite props state", "d": "4/2016"}, {"body": "conflating props state concepts still exist higherlevel otherwise would nt need lifecycle", "d": "4/2016"}, {"body": "yeah intended use thing needed new prop gets updated using hydrates", "d": "4/2016"}, {"body": "right biggest problem parents maintain child state need way match component internal state key element generated done automatic way basically end back today thisstate managed react reason nt think want pursue within core resolved discussion", "d": "4/2016"}, {"body": "nt get sorry addon ish solution would contain child states would rather update state based changes previous would similar could fill inn perhaps tell makes child rather parent", "d": "4/2016"}, {"body": "also perhaps got wrong thinking state mean say refer child state huge bumper way another nt understand internal keys child anything really updating state", "d": "4/2016"}, {"body": "dealing virtual dom large part react ie pretty much react implementing virtual dom rendering virtual dom nodes created component function return write jsx nodes used places like specifically look functions bug react core reason going close issue better place discussions like would discussreactjsorg stackoverflow quora irc", "d": "4/2016"}, {"body": "possible point links", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "gaearon sorry code link github", "d": "4/2016"}, {"body": "sure elements return render method composite component implementation manages lifecycle components write updates rendered child new element received dom component implementation updates actual dom new element received", "d": "4/2016"}, {"body": "gist repro bug steps download zip extract open goto enter username password submit form notice state gets updated typing click yes ie would like store password reload page ctrlr doubleclick username textbox select username entered notice state get updated expected currently blocking us upgrading react users expect autofill work", "d": "4/2016"}, {"body": "sure change would affect keeps changes value firing ie fire native onchange event value different work wondering still present master changes strategy bit", "d": "4/2016"}, {"body": "ie fire onchange autofill supposedly safari similar issues details", "d": "4/2016"}, {"body": "fire oninput know happens", "d": "4/2016"}, {"body": "sure works react something changed release broke ie based changelog seems likely culprit", "d": "4/2016"}, {"body": "seems like different fires onchange autofill whereas", "d": "4/2016"}, {"body": "hi entirely clear mean creating issue warning explains problem along link quoted hopefully helpful please describe problems following instructions detail think warning fired incorrectly good reason minify react without envifying please let us know closing issue vague actionable current form cheers", "d": "4/2016"}, {"body": "proptype general validation function limited ones provide means could define returns successfully function nullundefined otherwise forwards value previous proptype checker validation done entirely userland without changes react core find useful would encourage make open source people reuse code general proptypes mostly legacy point things move toward static analysis tools like flow nt really adding new features proptypes moment reason going close feel free continue discussion thread end implementing publishing source code please link repository issue", "d": "4/2016"}, {"body": "see mean think issue solution using custom validators would require either reimplement every native proptypes external library might bad idea actually bit scope use bad implementation would catch validation errors thrown native proptypes ignore match right regexp feel like would nt reliably work edge cases implementing core would much reliable clean simple opinion issue might bug feature request except would api bug rather usuals implementation bugs understand current position", "d": "4/2016"}, {"body": "general necessary try express relationships moving state parent letting child rerender based changes thinking react great guide explaining rare edge cases actually want call method child instance eg imperatively set focus field use refs please note use bug tracker react stackoverflow might better place ask questions cheers", "d": "4/2016"}, {"body": "yeah sebastianjordanmyself discussing months back problem mental model purerendermixin props change component rerender ignore functions someone could get situation changing function eg capturing variable within closure component update becomes hard debug difficult reason breaks mental model said ignoring function changes usually safe improve performance app worth noting purerendermixin literally couple lines code wanted write version nt cause rerender function references change would easy thing done entirely user land find useful would encourage make open source people take advantage functionality going close takes todo list probably something react core feel free continue discussion thread andor build userland", "d": "4/2016"}, {"body": "possible something implements eg react redux known issue alternatively may new issue provide jsfiddle reproducing", "d": "4/2016"}, {"body": "pass second param", "d": "4/2016"}, {"body": "linzerui works thanks lot", "d": "4/2016"}, {"body": "use fabricjs react meteor", "d": "4/2016"}, {"body": "source problem lib uikitjs transform dom mounted think something like supported react tell react explicitly never update children component manage manually third party library implementing component however expect change dom arbitrarily rerender react time", "d": "4/2016"}, {"body": "possible us predict possible mutations could applied dom general rule external libraries mutating react dom although allow add children leaf nodes long node always remain leaf node never receive children managed react", "d": "4/2016"}, {"body": "ok problem agree decision found way clean dom components still need updatable part larger tree page editor", "d": "4/2016"}, {"body": "description correct asis react data ids", "d": "4/2016"}, {"body": "also seen options immutability helpers nt think covers also spread want eyes addon approach", "d": "4/2016"}, {"body": "think correct solution least handle user land separate library becomes popular could consider addition react general recommendation anything possible handle userland prove viability trying pull react", "d": "4/2016"}, {"body": "yeah nearly finished thinking making react explicitly integrating library could case", "d": "4/2016"}, {"body": "something becomes sufficiently popular value merging react core always considered option", "d": "4/2016"}, {"body": "doubt good enough coding side integrate react idea great react adopt", "d": "4/2016"}, {"body": "seems like solid pattern libs use bundledfrontendgeneration apps makes sense redux use used contexts get must conflict maybe world follow suit", "d": "4/2016"}, {"body": "maybe override would optional", "d": "4/2016"}, {"body": "like idea people able set whatever else want call fall back default way like ryanflorence pointed special environment variable every library using default something tricky fancy trying could explicitly set environment variable override", "d": "4/2016"}, {"body": "definitely want avoid must conflict maybe world follow suit yea interesting could approach take also concern sometimes running node want fallback might necessary others proposed would make transformed code even uglier least confidence minifiers handle output thanks quick feedback", "d": "4/2016"}, {"body": "babel interesting case people use client production reads fallback people specify introducing could solution feel like would make babel situation confusing", "d": "4/2016"}, {"body": "historically run code qa staging nodeenvs minification work accurately reflect soon production builds run nodeenv production clientside code checks stage true environment loggers reporters call differently based actually environment point think exceedingly difficult solve vendor side nodeenv pattern prevalent point lookup always faked meet needs build wonder something user land resolve", "d": "4/2016"}, {"body": "nodeenv really well established standard across entire javascript ecosystem see nothing wrong people something like supporting people list dev qa staging prod etc need consistent way determine whether app runningbeing built optimised mode development mode nodeenv provides brilliantly may cases useful put one specific librarypart code development mode everything else prod mode visa versa think corner case asked three linked issues think wait someone actually wants feature build build stubailo optional variable override default nodeenv behaviour", "d": "4/2016"}, {"body": "think worth noting possible write browserify transformwebpack loader applies different environment variable specific library way useful without needing library implement separate environment variable", "d": "4/2016"}, {"body": "babelplugin matter would work server side really like suggestion", "d": "4/2016"}, {"body": "seems like variable often abused nodejs community react starter kit recommend use distinguish production optimized aka release development nonoptimized aka debug builds use variable differentiate multiple deployment types eg", "d": "4/2016"}, {"body": "general minifying code staging simulate production environment probably running production copy react case subtle differences code paths nt everything right never know type bug really bite anyway closing duplicate", "d": "4/2016"}, {"body": "mean accept far see accepts kind components react supports otherwise nobody would able use jsx example future please try provide reproducible example filing issue least provide context hard help without understanding precisely trying exactly broke thanks", "d": "4/2016"}, {"body": "response op", "d": "4/2016"}, {"body": "please provide example reproducing issue entirely clear broken opinion", "d": "4/2016"}, {"body": "error add canvas animation web background add body consumption performance thanks", "d": "4/2016"}, {"body": "mtsee sounds like saying react bug close believe found bug react please provide jsfiddle demonstrates issue reinvestigate", "d": "4/2016"}, {"body": "technically correct however based existing dom property called go route also rename ship sailed", "d": "4/2016"}, {"body": "naming decision based dom property behave exactly like element value mode flag either value default initially value mode flag must set default value mode flag mode default contents element represent value element default value defaultvalue idl attribute getting must return element default value setting attribute must set element default value element value mode flag mode default set element textcontent idl attribute well defaultvalue idl attribute getting must return element default value setting attribute must set element default value element value mode flag mode default set element textcontent idl attribute well means browsers also changed initial rendering input field changes set ca nt set anymore see quick dirty example value idl attribute must act like element textcontent idl attribute except setting addition child nodes changed element value mode flag must set value currently react sets default value initial render reason default value changes rerender react wo nt handle think either renamed change behaviour updated long set", "d": "4/2016"}, {"body": "maybe allow update first change causes value mode change apr pm thomas mayrhofer notifications githubcom wrote naming decision based dom property defaultvalue behave exactly like element value mode flag either value default initially value mode flag must set default value mode flag mode default contents element represent value element default value defaultvalue idl attribute getting must return element default value setting attribute must set element default value element value mode flag mode default set element textcontent idl attribute well defaultvalue idl attribute getting must return element default value setting attribute must set element default value element value mode flag mode default set element textcontent idl attribute well means browsers defaultvalue also changed initial rendering input field value mode default inputvalue changes value mode set value defaultvalue ca nt set anymore see quick dirty example value idl attribute must act like element textcontent idl attribute except setting addition child nodes changed element value mode flag must set value currently react sets default value initial render reason default value changes rerender react wo nt handle think defaultvalue either renamed initialvalue change behaviour defaultvalue updated long value mode set default receiving modified openclose state reply email directly view github", "d": "4/2016"}, {"body": "think would make sense create separate ticket", "d": "4/2016"}, {"body": "result fact combining short syntax setting extra specific properties fine initial render however since updated render set node overrides properties like plain css order operations important remember recommendation treat js styles like css dynamic unlike css either use shortcut syntax entirely ensure property want set explicitly declared action issue vs working due explicit setting since nt intend write css parser know varying ways specify shorthand properties think going close unfortunate expected behavior sorry caused problems", "d": "4/2016"}, {"body": "fixed", "d": "4/2016"}, {"body": "effectively duplicate", "d": "4/2016"}, {"body": "hi use site issue tracker believe bug react need provide details expected saw show code add context around trying dumping warning message helpful case believe warning says everything need know another one forms nested html browser replaces markup breaks react solution remove extra form", "d": "4/2016"}, {"body": "createapps children component form children upload click show detail form component want know design component warning disappear ignore problems", "d": "4/2016"}, {"body": "valid html solve remove either parent form child form pass prop child component telling render form also nt use form element need inputs may render directly ignore warning risk render incorrectly browsers potentially break react interaction page", "d": "4/2016"}, {"body": "thank much", "d": "4/2016"}, {"body": "name react disagree changing reactjs description however could added keywords list", "d": "4/2016"}, {"body": "keywords list github maybe adding packagejson would get indexed ranked high otherwise totally right called react wo nt adding reactjs documentationreadmeetc", "d": "4/2016"}, {"body": "perhaps keywords section bottom readmepage poorman solution dealing keywords wiki systems nt support keywords nt feel strongly one way make decision disposition bug", "d": "4/2016"}, {"body": "going close nt think really different project eg searching github emberjs nt get project either really worth hacky things try optimize", "d": "4/2016"}, {"body": "components suddenly disappearing refactoring would frustrating imo", "d": "4/2016"}, {"body": "actual behaviour production bundle required property missing undefined exception component nt render development still receive missing proptype warning component nt render component nt render anyway development mode still completely aware everything production would nt see exception", "d": "4/2016"}, {"body": "proptype checks measurable impact performance application proptypes nt checked production runtime behavior development mode must match behavior production mode behavior going change ie nt render component would forced proptype checks production nt want slow reason probably going close issue feel free continue discussion thread reopen thinking matter changes substantially", "d": "4/2016"}, {"body": "must defer updating value input selection information lost ie think rejected change updated point apparent place put cursor end", "d": "4/2016"}, {"body": "bug fixed could explain", "d": "4/2016"}, {"body": "bug fixed related synchronously updating input state always supported broke asynchronously updating without losing position never supported syranide noted", "d": "4/2016"}, {"body": "ok thanks", "d": "4/2016"}, {"body": "sorry one question must defer updating value input selection information lost know setstate defers rendering question setstate defers rendering cursor nt lost via settimeout cursor lost", "d": "4/2016"}, {"body": "loosely speaking deferring rendering batching updates executing immediately current react job finished rendering frame inbetween sense operation synchronous respect current rendering frame schedules another rendering frame know might execute later user started typing things input field inherent selection information thus setting text field means logical place put cursor end start whereas done synchronously input field sees value produced user current value updated next time renders ends actually updated", "d": "4/2016"}, {"body": "thanks great answer understand last thought event component rerenderd asynchronously focused see problem set value preserve cursor nt dug deep might work may answer sorry taking time", "d": "4/2016"}, {"body": "reproduce likely toplevel rendered triggered promise using promise implementation log unhandled rejections get swallowed think bug react please provide example reproduces close", "d": "4/2016"}, {"body": "right triggered promise rejection nt handled beginner mistake thanks help", "d": "4/2016"}, {"body": "problem suggest make sure use implementation logs unhandled rejections easy make mistakes like", "d": "4/2016"}, {"body": "would owners parents fb would look like otherwise best practice helpful also go dev mode since names get minimized removed expensive putting attribute everything would risky since someone start relying attribute selectors break prod", "d": "4/2016"}, {"body": "favor comments way would customizable display component key even info like nb updates would really expensive display full state props avoids problems people thinking attribute could used css comments probably node may personnal taste dont like tags huge parameters html really happy get rid reactid tags would like see another even bigger parameters disturb peace developement laughing", "d": "4/2016"}, {"body": "comments would require child reordering logic take account probably possible would nt want make complicated harder change already difficult enough come new algorithms flip side nt hard get real devtools working browser original devtools worked safari mobile debugging using remote protocol protocol even easier could open devtools ui stand alone iframe environment inspects main page could also remote debugging using rpc protocol already react native would get us features building perf tools etc", "d": "4/2016"}, {"body": "flip side nt hard get real devtools working browser lot browsers world including ones dumb phones ca nt reasonably cover target devicesenvironments sometimes bugs appear specific browsers especially olderdumber ones nt support devtools one primary motivations conversationissue", "d": "4/2016"}, {"body": "nt think would hard reconcile comment nodes especially since nt really walk dom anyway since retain references nodes directly though suppose might potentially change stateless functions regardless change stateless functions touching algorithm anyway could potentially add said attribute solution seems fine nodes multiple composite parents nt add dom nodes attribute could parentowner path element anyway nt really strong preference solve would good general solution nt depend us supporting particular render target since doubt want build devtool support various webviews various platformsenvironments", "d": "4/2016"}, {"body": "support browser websocket easily install hook web page websocket polyfills like socketio covers every browser simply present ui different browser one remote debugging safari debugger used work react devtools first launched", "d": "4/2016"}, {"body": "touching algorithm anyway could potentially add exactly makes refactoring hard ca nt reason special cases many think", "d": "4/2016"}, {"body": "hey folks love take take crack bug", "d": "4/2016"}, {"body": "let confirm assumption working could see argument allowing setstate ref callback also refs nt always dom nodes composite components refs amp could something besides storing node regardless get infinite loop call setstate componentdidupdate let rule potential use case yet cc sebmarkbage", "d": "4/2016"}, {"body": "yea plenty use cases beauty ref callback start acting child becomes available something either child parent effectively componentdidmount child", "d": "4/2016"}, {"body": "sebmarkbage specific use cases mind thing think child measurement probably wait children render measure componentdidmount instead avoid layout thrash measuring multiple children would involves set state", "d": "4/2016"}, {"body": "chatted sebastian conclusion discussion yeah probably supported discouraged sounds kinda like antipattern refs escape hatch anyway whatever want point action item issue update docs create compatibility table action within lifecycle indicateclarify current thoughts around pattern closing favor", "d": "4/2016"}, {"body": "sounds like bug probably good first one", "d": "4/2016"}, {"body": "probably good first bug surely involve least looking event system anything good first dive code people welcome try", "d": "4/2016"}, {"body": "yeah torn labeling one need good third bug label reason thought might reasonable first one code controlled text inputs probably copypasted nearly verbatim fact little surprised nt already follow code path", "d": "4/2016"}, {"body": "pretty sure typing nt fire events fires interactions nt even know anything happening otherwise mostly sure nt differentiate text number types already running code", "d": "4/2016"}, {"body": "pretty sure another case special inputs playing well controlled part valid numbers specific combinations actually translate valid numbers content translate valid number reported value acts nothing changed afaik way around", "d": "4/2016"}, {"body": "yep syranide correct sure anything moment short writing handlers based cursor position keystrokes maybe need request revisions longer term thing", "d": "4/2016"}, {"body": "measuring production build", "d": "4/2016"}, {"body": "try add instead know developer builds regressed nt case production ones", "d": "4/2016"}, {"body": "doh newb mistake nt think adding minjs brings sub repeating tests discernible difference thanks replying", "d": "4/2016"}, {"body": "spicyj remember saying ideas low hanging fruit make dev builds fast anything particular comes mind could nice first bug", "d": "4/2016"}, {"body": "wait dev slower dev nt sound right gaearon got ta start profiling see slow", "d": "4/2016"}, {"body": "react optgroups except around expected option works", "d": "4/2016"}, {"body": "hi thanks reporting duplicate two issues linked fixed master fix nt gotten release yet let keep open people nt file issues", "d": "4/2016"}, {"body": "great hear fix coming thanks gaearon", "d": "4/2016"}, {"body": "fixed gaearon generally close issues things merged master reason otherwise hard tell still active item needs fixed verses things already fixed remain open help people find could read comments takes time especially going bunch often nuanced regards remaining action items nt want read hour comments discover whole thing fixed longer relevant", "d": "4/2016"}, {"body": "sounds like ios bug best tell reading spec tag required associated form per form attribute question mark type presumably indicates attribute may null form owner readonly attribute htmlformelement form spec preview explicitly states form attribute used explicitly associate fieldset element form owner links formassociated element relationship form element called element form owner formassociated element associated form element form owner said null first example wiki nonauthorative without element seems consistent spec recommendation file bug ioschrome", "d": "4/2016"}, {"body": "jimfb makes sense thanks quick response", "d": "4/2016"}, {"body": "changelog master real change css addons see small patches interal module styling docs along performance cleanup regarding conditionals etc closest thing found pr pr merges days back time released nt think break things without documenting breaking changes yeah watch blog posts usually inform even", "d": "4/2016"}, {"body": "fwiw could update revert npm via github manually see something breaks", "d": "4/2016"}, {"body": "would intuitively upgrade reactaddonscsstransitiongroup would jumped major version however find changelog gitrepo belonging theese addons react blog post lists complete changelog including addons actively work addons expect many breaking changes looked blog post seems made changes either addons", "d": "4/2016"}, {"body": "thanks clarifying", "d": "4/2016"}, {"body": "could try setting render method questions replies give indication would", "d": "4/2016"}, {"body": "mavisd seeing behaviour react app moment falling back setting attribute selected option tag trigger react warning using select instead", "d": "4/2016"}, {"body": "necessary methods autobound also code identical behaves differently different versions indication might react fault mavisd think fixed fix get next patch release confirm working build master closing reason", "d": "4/2016"}, {"body": "ref", "d": "4/2016"}, {"body": "think issue content security policy communicating sequential processes yeah confusing hackvertor code looking part react unless want run babel browser need use react react builds available website include code use trouble getting transitive dependencies react build process approved code review something like closing reason problem react", "d": "4/2016"}, {"body": "fwiw would fixed see ifwhen gets merged", "d": "4/2016"}, {"body": "appears work fine", "d": "4/2016"}, {"body": "cometta browser using", "d": "4/2016"}, {"body": "right retested sorry proceed close", "d": "4/2016"}, {"body": "basically propose reaching elements garbage collector possible imagine plottwist mark amp sweep algorithm", "d": "4/2016"}, {"body": "edit try tweaking ref us", "d": "4/2016"}, {"body": "sure understand describe rephrase use case perspective trying accomplish", "d": "4/2016"}, {"body": "put use case would another component using ref gets left alone pass state means try destruct rebuild reference without full rerender perhaps somewhat weird caching solution garbage refs great way send message particular child instance way would inconvenient via streaming reactive props state however goto abstraction flowing data application default use reactive data flow save refs use cases inherently nonreactive means got correct component render ref component instance component way could force react track component sure healthy common friend memory though like stay open discussion people get point otherwise close", "d": "4/2016"}, {"body": "understand supposed refs give access component instance case want call methods imperatively string refs eg make instance available callback refs eg let thing generic composable understand trying though", "d": "4/2016"}, {"body": "functionality except keep track state would state component simplest form without functionality mounted way functionality imagine would somewhat similar callback refs state mind refs", "d": "4/2016"}, {"body": "example used refs mainly callbacks nature way ref", "d": "4/2016"}, {"body": "nt think certainly ca nt access objects gc general issue externalizing state tracked", "d": "4/2016"}, {"body": "reading discussion thanks heads actually somewhat similar looking jimfb", "d": "4/2016"}, {"body": "unlike appear fire chrome odd firing event react", "d": "4/2016"}, {"body": "proxies supported legacy browsers likely couple years use outside development mode ie production code path", "d": "4/2016"}, {"body": "curious browserversion using see error chance chrome reproduce firefox browser", "d": "4/2016"}, {"body": "also provide simple jsfiddle demonstrates issue", "d": "4/2016"}, {"body": "jimfb browser chrome version also reproduces firefox developer version big application try create small fiddle reproducing", "d": "4/2016"}, {"body": "also saw annoying message output every time adopting react found typeerror removed deleting onclick event div able reproduce every time jsx jsx happened chrome firefox threw typeerror target null safar", "d": "4/2016"}, {"body": "rickychien omerts someone could try produce minimal repro jsfiddle would helpful", "d": "4/2016"}, {"body": "rickychien omerts another question guys using reactrouter andor redux", "d": "4/2016"}, {"body": "seeing issue using reactrouter redux see even switch back react nt think specific react reproduce issue switching pages via using browser backforward buttons possible actually issue removing listener button fixes issue us well weirdly application tons buttons listeners get removed route change cause error trouble figuring repro", "d": "4/2016"}, {"body": "posted codepen", "d": "4/2016"}, {"body": "issue well nt think related newest release started issue added method stateful component removed function error longer occurs core dependencies", "d": "4/2016"}, {"body": "trimmed case involves react fiddle js var callbacks function emitchange callbacksforeach c gt c class app extends reactcomponent constructor props super props thisstate showchild true componentdidmount thissetstate showchild false render return thisstateshowchild amp amp class emitschangeonunmount extends reactcomponent componentwillunmount emitchange render return null class forceupdatesonchange extends reactcomponent componentdidmount thisonchange gt thisforceupdate thisonchange callbackspush thisonchange componentwillunmount callbacks callbacksfilter c gt c thisonchange render return reactdomrender documentgetelementbyid container", "d": "4/2016"}, {"body": "also observations happens listeners get queued mobile safari seems related batching initial reproduction cases still used noticed navigating inside instead repro problem wrapping small repro use events seems like stuff inside initial render batch effect calling", "d": "4/2016"}, {"body": "replacing reproduces", "d": "4/2016"}, {"body": "guess issue calls seem imply guaranteed happen callbacks happened may break one callbacks cause children component unmount think sequence composite parent enqueues dom component mounts dom component enqueues domrelated starts calling callbacks composite registered first queues update child causes dom component unmount dom component unmounts proceeds calls unmounted dom component callbacks", "d": "4/2016"}, {"body": "yet another manifestation issue time master gives", "d": "4/2016"}, {"body": "looking sure proceed think spicyj might context visualization happens note happens", "d": "4/2016"}, {"body": "reported earlier two errors caused underlying problem propose close one favor jimfb", "d": "4/2016"}, {"body": "error since upgraded", "d": "4/2016"}, {"body": "per gaearon yes duplicate close favor", "d": "4/2016"}, {"body": "upgraded get fix rendering got invariant violation findcomponentroot unable find element navigating react router upgrading instead get read property addeventlistener null error see create test case wanted note record since seems like bugs related", "d": "4/2016"}, {"body": "provide simple jsfiddle ideally without meteor demonstrates issue", "d": "4/2016"}, {"body": "upon close inspection dom turns react adds default", "d": "4/2016"}, {"body": "pricetula hi hope mind formatted messages code highlighted include small blocks backticks large blocks triple backticks helps everyone read issue little easier future cheers", "d": "4/2016"}, {"body": "gaearon lol might noticed new github thank", "d": "4/2016"}, {"body": "pricetula problem welcome", "d": "4/2016"}, {"body": "current version react use instead", "d": "4/2016"}, {"body": "yeah error related configuration rather bug react core reason going close bug since try keep github issues tracking bugs react core feel free continue discussion thread move question stackoverflow", "d": "4/2016"}, {"body": "issue due wanting react update new versions compatible also switch using enforce peer dependencies proceed risk", "d": "4/2016"}, {"body": "think duplicate", "d": "4/2016"}, {"body": "duplicate", "d": "4/2016"}, {"body": "thank feedback context api experimental feature api definitely work progress react phases proptypes favor static analysis facebook mostly uses flow expect context api also stop relying proptypes however think plan change near future least confident want change context", "d": "4/2016"}, {"body": "context types likely become optional nearforeseeable future although suppose anything could change several reasons would want keep contexttypes revolve around fact proptypes implicit thus much harder reason props easy see passed explicitly reasons readability documentation correctness context types implicit name conflicts making much error prone types ca nt verified compile time even language like typescript important reason opens door internal optimizations specifically helpful know context variables component listening allows us know components may need rerendered variable changes using typescript nt want jump hoops specifying types context variables specify match anything effectively specifying name contexttype minimum information react needs runtime", "d": "4/2016"}, {"body": "nathanmarks already faced similar issue materialui repository ended fixing chrome buggy implementation fixed commit follow thread details wondering nt issue quick fix would use overlapping styles like suggested", "d": "4/2016"}, {"body": "oliviertassinari tested react react simple component jsx const example extends reactcomponent render const styles background none backgroundcolor red chrome dev tools inspect element styles panel saw different computed values react react", "d": "4/2016"}, {"body": "hmm could objectassign play nt think would matter initial render least nt think use copy style object skimming code path would make sense order getting screwed red gets set none computed values going misleading due use createelement generated string markup initial render would look like create dom node set style like would updates chrome nt report sequence computed value see final value would interesting followed steps react versions chrome see happens", "d": "4/2016"}, {"body": "zpao strangely difficulty reproducing using simple example component example wonder clicked browserstack chance finish rendering completely oliviertassinari may well correct assertion going testing end swinging back around react reopen issue thanks explanation way definitely helps understand initial render output", "d": "4/2016"}, {"body": "objectassign issue pretty random inconsistent experience thanks checking", "d": "4/2016"}, {"body": "zpao figured object property iteration order ending different setvalueforstyles touched particular script even though iterate styles still original order preserved result gets iterated chrome react updated codebasedeps etc since object property iteration order ca nt guaranteed understand means definitely something need solve generate inline styles", "d": "4/2016"}, {"body": "mention cloning elements styledcomponent think realize error may tricky way catch errors styledcomponent decorator add information", "d": "4/2016"}, {"body": "using decoratorsinheritance hoc higher order components render children per nt problem nt hide component name may relevant might able achieve looking setting displayname regardless mostly usage question use github issues track bugs react core usage questions better addressed stackoverflow reason going close issue feel free continue discussion thread move stackoverflow extent feature request tracked places like", "d": "4/2016"}, {"body": "think fixed", "d": "4/2016"}, {"body": "following along assume spacerat referring old blog post date part living docs generally nt go back time update old posts things constantly changing time hard enough keep main documentation uptodate someone wants add red note box says update pyreact deprecated think would ok would likely accept pr cc zpao feels strongest updating historical posts anyway going close take radar nt generally trackupdate historical posts", "d": "4/2016"}, {"body": "meh somebody want add note like would fine nt think need change content post linking actual project probably good nice big deprecated notice readme", "d": "4/2016"}, {"body": "ah actually nt noticed blog post thing comes google react python anything similar formatted rest react documentation yeah seems like shame keep every old blog post date suppose jsxtransformer becomes completely nonfunctional might worth making pyreact deprecation notice bit stronger point really nitpicking", "d": "4/2016"}, {"body": "usage question rather bug react function explicitly telling react update obviously update expected behavior optimizing components take arbitrary children somewhat nontrivial general require walkingdiffing children way completely general children technically possible reasons guarantee props different also keep mind used somewhat sparingly critical parts application diffing values especially tree values like likely expensive ultimately going return true anyway react need diffing reconciliation wasting cpu cycles ie might actually cheaper whole skip implementing function anyway going close issue since bug react feel free continue discussion thread move discussion stackoverflow", "d": "4/2016"}, {"body": "might inconvenience even conceptual problem definitely bug note js shouldcomponentupdate nextprops na\u00efve demo purpose return nextpropscolor thispropscolor indeed bail changes enough usually people compare props shallowly included comparison begs question negating benefits children static hoisting constant elements production would help apply cases rely inside child element discussion taking might want look historical context", "d": "4/2016"}, {"body": "gaearon realise implementation na\u00efve make sense thinking fact even though children passed outside rendered within parent render function wherever going clear example obviously contrived nt really make sense probably would nt try optimise things case real scenario however deal trying optimise things hundreds components give bit insight building building low level performant grid component similar fixeddatatable handle thousands rows columns well handling lots realtime updates using immutablejs data easier efficient handle problem appeared changed top level api passing value getters cell value wanting let users render cells way want using getters top level component meant easy optimise component using would end receiving prop easy check changes api nt really flexible made hard implement anything else say user wants customisable helper text hover using example pass way another etc came idea able pass custom components fashion fixeddatatable ca nt seem able stop everything rerendering even needed especially example scrolling basically called scroll meaning lots updates lot cells comments regarding technically difficult would optimise arbitrary children wonder even possible still feels ugly parent component check changes children props feels like breaks encapsulation composition whole point able pass children outside even props easily compose things separate concerns responsibilities gaearon mention indeed nextpropscolor thispropscolor bail children changes enough usually people compare props shallowly children included comparison would practice understand parent props include children would nt basically check case feel like would different every render feel like negates benefits react also offers ability pass arbitrary components children even props", "d": "4/2016"}, {"body": "use case take approach believe fixeddatatable takes rather accept accept example make sure function references change every render bind fine sure closing bring updates case work around make necessary data props table pass back props whenever needs js render return renderrow data return way unless changes rerendering rerender every row would practice understand shallowcompare parent props include children would nt basically check nextpropschildren thispropschildren case feel like would different every render yes however components experience take custom comes limited cases usually works fine make work good using workaround suggest", "d": "4/2016"}, {"body": "mean passing render callback nt considered antipattern", "d": "4/2016"}, {"body": "antipattern loaded word tool like tool upsides downsides particular case think appropriate", "d": "4/2016"}, {"body": "well antipatterns bad always would nt classify passing render callback antipattern classify pattern pattern used pretty commonly parent needs pass necessary info unowned child think least good cloning elements using context", "d": "4/2016"}, {"body": "meant nt passing render component makes component inherently impure render callback access sorts outside variables function closed meaning shouldcomponentupdate would nt help", "d": "4/2016"}, {"body": "long callback pure everything remains pure component still function props even though prop happens pure function check equality function see function referentially equal old function", "d": "4/2016"}, {"body": "gaearon updated example suggested technique although works feel like basically broken encapsulation made couple children account data needs pass explicitly via understand render arbitrary children render callback somewhat practical considering current example string different making component accept prop anyway render mean component responsible", "d": "4/2016"}, {"body": "way see get render thousands rows keep perfect encapsulation smile something got ta give said see encapsulation breaking rename pretty abstract work different kinds children fact pass function rather children optimization maybe want support million rows future creating waste anyway build support lazy creation right api really see issue", "d": "4/2016"}, {"body": "overall good question ask elsewhere try keep github focuses bugs specific issues react using discussreactjsorg stack overflow generally better places going close since nothing directly actionable something going build react several reasonable approaches solving problem involve additional tooling said bit insight fb special component gets transformed knowledge target language translations would something like use example ends lookup option either statically transform new string babel whatever right set languages potentially build separate bundles language could complex lookup runtime real composite component high level similar understanding wrote huge fan exact proposal using quote types differentiate think better luck something like unique jsx component aka extra html tag something also unique since effectively templating taking cues handlebars using would nt bad either", "d": "4/2016"}, {"body": "agree nt know use jsx without going meteor approach though think method showed bad composed fit purpose example assume also examples using projects would love get insight issue bug tracker know stack overflow might best approach bug tracker eyes gives quality feedback answers usually address issue use cases might better said though", "d": "4/2016"}, {"body": "sure meteor approach means used simply unique signal double quote lots uses natural language might want remain eg want translate extra parse becomes complex error prone picking something like becomes bit easier nt anything using publicly could pretty straightforward step though custom babel transform looks jsxelement something replace node really basic example", "d": "4/2016"}, {"body": "meteor approach means helpers templates thanks example similar looking think doable create open source library fb nt open source possible explain please willing put brain action trying something relative fbt", "d": "4/2016"}, {"body": "probably wo nt open source much tied infrastructure way things think better trying something look ideas built around existing translation solutions maybe combination approaches", "d": "4/2016"}, {"body": "cool lastly would think language translation would fit loaders", "d": "4/2016"}, {"body": "idea", "d": "4/2016"}, {"body": "thanks session paul great even learned tricks conversation love work everyone fb open source means lot developers engage new ones", "d": "4/2016"}, {"body": "think using loaders webpack jargon transforms super great operate strings paul suggestion use babel instead sounds easier reliable", "d": "4/2016"}, {"body": "gaearon suggestion babel loader see gist paul suggested jsx one refer agree paul messy way love translations loaders sort would mean much better developer experience", "d": "4/2016"}, {"body": "confused would mean example since webpack configuration probably supposed webpack loader loaders operate strings ast see webpack config means string contents file gets parsed babel transforms defined babel loader options run ast like one explore easier write operating ast generally much safer strings think like parser suggest writing babel transform rather separate loader babel transform write plugin detects transforms special jsx expressions function calls matter whether use jsx special function call important part ast level rather processing strings implemented webpack loader hope helps", "d": "4/2016"}, {"body": "certainly see loader specification could strip things get concept going crazy details indeed use transforms lot sketchy writing description pointed however think downside using ast logic one worth mention using loaders would mean cleaner config file lot firsttimers wants cool feature copy paste would lot harder grasp content transformations issue dev x versus quality code opinion though", "d": "4/2016"}, {"body": "amasad think question meant well", "d": "4/2016"}, {"body": "nt much add agree like thing would good abstraction double quote generic imo maybe write promote separate babel plugin would provide validation something people would use", "d": "4/2016"}, {"body": "use webpack", "d": "4/2016"}, {"body": "almost certainly means including duplicate copy react one dangers using npm nt handle dependencies well leads cryptic errors like try things mentioned gist good discussion going close probably due duplicate dependency able come simplified repro eg jsfiddle demonstrates bug react happy reinvestigate", "d": "4/2016"}, {"body": "works perfectly fine", "d": "4/2016"}, {"body": "new warning would nt see dangreen set runtime point reactdom required think way would see", "d": "4/2016"}, {"body": "zapo use envify browserify also uglify written fbmereactminification", "d": "4/2016"}, {"body": "zapo envify used global transformer", "d": "4/2016"}, {"body": "without steps reproduce going bit tricky track could perhaps reproduce set minimally probably want running browserify nodeenv set trigger envify part simple set made use model transforms jsx anything else browserify uglify could even skip uglify step browerifying react would enough would leave bunch dead code warning seeing dead code", "d": "4/2016"}, {"body": "zpao find transform transformer replace transform result nt way set manually", "d": "4/2016"}, {"body": "using gulp build browserify almost exactly like actual code expose externalpackages eg react var b browserify require externalpackages set node environment variable btransform envify nodeenv isproduction production development return bbundle getting warning upon investigation found envify nt working instead found set environment variable right instead using transform like expose externalpackages eg react var b browserify require externalpackages set node environment variable processenvnodeenv isproduction production development return bbundle seems replace instances confused envify even using incorrectly", "d": "4/2016"}, {"body": "lambertvelir things case specifically use values look example readme actually see need may also need pass first argument applied dependencies think default browserify wo nt transform files dangreen without seeing running things ca nt really help yes react uses looseenvify think compile command line presumably control build system via api looks like working fine js var browserify require browserify var envify require envifycustom indexjs gist var b browserify indexjs btransform global true envify nodeenv production bbundle function err buf consolelog buftostring leave envify transform still react code", "d": "4/2016"}, {"body": "ahh made envify work nt really see documented anywhere browserify envify reason use envify vs setting", "d": "4/2016"}, {"body": "bottom section browserify docs super obvious also command line option upside avoid runtime process lookups pass code uglify minifiier get dead code removed", "d": "4/2016"}, {"body": "sorry clarified two blocks code seem result bundle eg transformed cases", "d": "4/2016"}, {"body": "zpao use sailsjs framework sails app configs env app starts gulp tasks lifting js set nodeenv processenvnodeenv docker build var browserify require browserify fs require fs browserify indexjs bundle function err buffer fswritefilesync bundlejs buffertostring think compile command line build script instead already sad transformer replace nodeenv envify transform result nt way set nodeenv manually", "d": "4/2016"}, {"body": "dangreen really helpful steps reproduce issue unfortunately nt think possible disable transform specify packagejson recursively anyway perhaps browserifying package directly eg instead specify could use option best suggestion right either set set browserify step adjusting browserify step use envify directly alternatively nt use values besides use environment variable indicate docker nt standard tell become common practice expect values make adjustments accordingly eg even sails couple places personally would nt know everything went decision constraints sails imposes would nt make possible going close nothing else benefit automatically transforming outweighs cost occasional difficult integration point sorry happen one cases nt easy", "d": "4/2016"}, {"body": "pretty much think supporting proptypesbased introspection plan add new features eventually plan phase favor tools like flow may add runtime checking point understand coming styleguides cool afraid going add proptypes api however implement custom proptypes matchers delegate reactproptypes validation also expose necessary metadata components use custom proptypes instead hope helps", "d": "4/2016"}, {"body": "thanks gaearon see", "d": "4/2016"}, {"body": "wanted end ended using tcombreact instead case helps anyone else", "d": "4/2016"}, {"body": "would mind reproducing jsfiddle thanks", "d": "4/2016"}, {"body": "ping eipark", "d": "4/2016"}, {"body": "sure reproduceable jsfiddle since need set breakpoint chrome debugger", "d": "4/2016"}, {"body": "modify post code one examples react starter pack create simplified repro instructions reproduce", "d": "4/2016"}, {"body": "sure example modified var exampleapplication reactcreateclass getinitialstate return value render function var elapsed mathround thispropselapsed var seconds elapsed elapsed var message react successfully running seconds seconds var start new date gettime setinterval function reactdomrender documentgetelementbyid container able repro bug setup", "d": "4/2016"}, {"body": "ok nice repro able reproduce spicyj immediately said chrome bug soon saw maybe right interestingly firefox debugger behaves even worse chrome commenting fakedomnodeeventlogic seems fix issue", "d": "4/2016"}, {"body": "actually take back perhaps related fakedomnodelogic overly excited commenting nt appear done anything", "d": "4/2016"}, {"body": "much info go looks like error occurring uglifyjs react rashmimadanshukla provide simplified example demonstrates issue investigate", "d": "4/2016"}, {"body": "looks like uglifyjs plugin nt well supported within nashorn engine might differences nashorn", "d": "4/2016"}, {"body": "ping rashmimadanshukla", "d": "4/2016"}, {"body": "closing due response op reinvestigate ifwhen get repro", "d": "4/2016"}, {"body": "saw exact issue today upgrade", "d": "4/2016"}, {"body": "fairly confident vs difference red herring unfortunately come several times attributes probably fine like good chance difference actually later markup empty string vs bare attribute typically difference dom api representation markup think use outerhtml seen similar issues upgrade discussion could show happening explicitly eg simplified example application reopen could nt make happen example going close encourage follow along issue", "d": "4/2016"}, {"body": "ok silly stuff fixed", "d": "4/2016"}, {"body": "sure mean say directly use component html css supposed flex attribute parent elaborate perhaps example", "d": "4/2016"}, {"body": "thanks reply saw nt know css attributes support react", "d": "4/2016"}, {"body": "csslayout different project used react directly though reactnative uses supporting css native apps said sounds like misunderstanding flexbox css standard works would recommend visiting link following resources", "d": "4/2016"}, {"body": "going close since appears misunderstanding issue regards react native specifically would ask repository", "d": "4/2016"}, {"body": "perfect world peer depend react relevant", "d": "4/2016"}, {"body": "meantime use instead dropin replacement", "d": "4/2016"}, {"body": "going close immutabilityhelper good solution specific case tracks wider issue feel free continue discussion thread", "d": "4/2016"}, {"body": "nt realize already tracking change think probably best way tackle problem long run happens think still open question meant ticket example broader question alternate implementations reactaddonsupdate handy still instances use reactaddonsshallowcompare others even dependents dependents control use addons thoughts topic assuming library supports multiple versions react would much like uses reactaddons would also like seems choices warn dependents potential peer dependency mismatches nonpeer dependency reactaddon force install reactaddon behalf listing peer dependency far best practices go leaning towards former generates potentially confusing warnings generally work without involvement apr jim notifications githubcom wrote going close immutability good solution specific case tracks wider issue feel free continue discussion thread receiving authored thread reply email directly view github", "d": "4/2016"}, {"body": "warn dependents potential peer dependency mismatches nonpeer dependency reactaddon work npm additionally even npm cause multiple copies react installed case version mismatch likely break addons need depend react anyway need like depend first place said force install reactaddon behalf listing peer dependency think sensible solution present circumstances ideal least npm users never get duplicate react", "d": "4/2016"}, {"body": "going close track something specific react needs comes investigation file something", "d": "4/2016"}, {"body": "could actually utility library could make great singleprojects tweaking overall experiences tend use low frames default functionality part consider caching actual object avoid also think everything needs fulldefined refresh fully function left react handle manage could good library opinion good issue way", "d": "4/2016"}, {"body": "honestly code nt real owner hard know cc issue think gaearon took look prs recently might feedback demonstrate bug pr fix think likely take", "d": "4/2016"}, {"body": "yes intentional makes input uncontrolled means example resetting state clear later catches people surprise want component controlled empty please pass empty string instead controlled uncontrolled inputs", "d": "4/2016"}, {"body": "thanks gaeron good know", "d": "4/2016"}, {"body": "everything seems correct removed replaced link docs bit confusing explained", "d": "4/2016"}, {"body": "forgot dom name confusing part read wrong thanks fix though helped figuring issue", "d": "4/2016"}, {"body": "lanfei ca nt update parameters already instantiated flash browsers careful need recreate ie give key equal src perhaps arguments", "d": "4/2016"}, {"body": "syranide thank reply aware recreate html element react", "d": "4/2016"}, {"body": "lanfei give different key recreate example want recreate change src attribute give src key", "d": "4/2016"}, {"body": "thanks syranide going close take radar since appears identified root cause react fault flash support updating parameters already instantiated flash feel free continue discussion thread", "d": "4/2016"}, {"body": "resolved problem giving different thank syranide jimfb", "d": "4/2016"}, {"body": "issue compared serverclient elements attributes different order react treats different strange case ordering changes first page reload first rendering ok", "d": "4/2016"}, {"body": "yes please track", "d": "4/2016"}, {"body": "require ensure direct dependents transitive dependency tell offending package requiring direct packagejson", "d": "4/2016"}, {"body": "yep mistake installed clone props trying install transition group add run", "d": "4/2016"}, {"body": "noticed closed changed title wanted confirm fact fixed issue", "d": "4/2016"}, {"body": "thx", "d": "4/2016"}, {"body": "think rely synchronous value update handle cursor position honest confused necessary would nt expected cc spicyj jquense", "d": "4/2016"}, {"body": "yes would nt expect settimeout necessary sometimes browsers finicky focus selection though may due", "d": "4/2016"}, {"body": "guess would firing something looks like changing input value event instead quick test works fine onchange", "d": "4/2016"}, {"body": "perhaps work selection range get set try onchange though thanks", "d": "4/2016"}, {"body": "jquense excellent observation events fire feel like everything behaving expected reference fiddle jchitel provide fiddle demonstrates something believe unexpected behavior let us know reinvestigate", "d": "4/2016"}, {"body": "using onchange worked thanks sake understanding onkeydown handler triggered change state set selection onchange event fired reset selection find information event ordering", "d": "4/2016"}, {"body": "event ordering defined browsers probably find docs events fired understand correctly anything selected time fires get replaced character typed text box seems supported fiddle always replaces first character selected key event far tell everything working correctly expected close run issues things looking sketchywrong let know reexamine", "d": "4/2016"}, {"body": "hey joelrich fairly certain proposal runs counter goals project direction headed specifically around scheduling direct answer glean thoughts surrounding following threads new core algorithm webworkers unable find source default react state natively serializeable synchronous right allows react reason tight control reconciliation rendering also allows react decide scheduling promises abstraction remove properties making current future optimizations difficult impossible", "d": "4/2016"}, {"body": "hi iamdustan see another way improve support promises especially use cases libraries like falcor values view promises think current solution good enough think scheduling big problem similar setstate would schedule update promise resolvedrejected exactly mean react state natively serializeable example put object class state state still serializable sure lose information class would able parse replace previous state without risking problems reason view state serializable", "d": "4/2016"}, {"body": "cc sebmarkbage additional thoughts links", "d": "4/2016"}, {"body": "nt know helps see specifically serialisable immutable representation state promise use stand promise way makes sense inside method cc ryanbrainard", "d": "4/2016"}, {"body": "discussed many times single easy link post probably make new summary best idea allow promises passed convenience would also allow clean automatically component gets unmounted gets resolved earlier allow promise observable render end intermediate state ui mean time goes example gets resolved value updates nt want encourage system could block ui accidentally putting long promise one benefits react came user never deal specialized data structures like change tracking sets promises observable values plain data gets closer still requires lot explicit optin languages solutions nt require still capabilities want promise observable chains execute whenever async dependencies get resolved push oriented something happens immediately compute artifacts scheduling work mentioned making sure operations nt steal cpu cycles work lowpriority cause responsiveness issues higher priority work mitigating factors things idea could forked behavior components could live two states rebase would allow component update remain responsive pending update still processed could potentially design api around generators asyncawait avoid exposing users firstclass promise values even better algebraic effects ecmascript zones proposal could allow overriding default scheduling promises allowing us defer work high priority would make whole idea push oriented values palatable", "d": "4/2016"}, {"body": "sebmarkbage thank summary take promise function would allow specify loading value example alternatively could also wrap multiple elements another helper function wait promises resolved since function would return another promise would part react long allowed return wrapped promise render regarding still sure understand problem promise resolved behaviour could similar nt looked setstate implemented example dom update happens next animation frame would still possible promise resolved schedule dom update virtual dom subtree perform together promise changes next animation frame", "d": "4/2016"}, {"body": "joecritch component render promise something like easy enough write component", "d": "4/2016"}, {"body": "unfortunately work properties", "d": "4/2016"}, {"body": "record plan provide official introspection api start information would like extract instance updated", "d": "4/2016"}, {"body": "gaearon thanks waiting update", "d": "4/2016"}, {"body": "way remove warning currently one things somewhere roadmap make easier optinout specific warnings nt lot motion maybe something specifically warning though", "d": "4/2016"}, {"body": "zpao warning", "d": "4/2016"}, {"body": "use webpack add code deploy", "d": "4/2016"}, {"body": "add code webpack plugins warning still exit", "d": "4/2016"}, {"body": "issue reported specifically minifying nonproduction react problems toolchain creating production build distinct issue discussed new issue stack overflow first intended support forum", "d": "4/2016"}, {"body": "general minifying code staging simulate production environment probably running production copy react case subtle differences code paths nt everything right never know type bug really bite yep agree using set environment app describe app endpointsdatabasescredentials use environment need think good use another environment variable app fix warning react", "d": "4/2016"}, {"body": "oh got warning", "d": "4/2016"}, {"body": "japgolly changed title disable minified copy development build disable warning minified copy development build", "d": "4/2016"}, {"body": "see", "d": "4/2016"}, {"body": "vimniky read article solved warning", "d": "4/2016"}, {"body": "vimniky found article confirm warning gone thank", "d": "4/2016"}, {"body": "also strange js wizz calling returns", "d": "4/2016"}, {"body": "example really quick easy sizzle going verbose little annoying otherwise", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "using sizzlejquery confirm value attribute seem produced rendering reactdom show rendering reactdomserver causing invalid checksum", "d": "4/2016"}, {"body": "sounds like browser quirk behavior without react", "d": "4/2016"}, {"body": "yeah think fixed get one closer releases", "d": "4/2016"}, {"body": "yes closing fixed", "d": "4/2016"}, {"body": "userspecified keys undergo escaping transformation prevent collisions automaticallygenerated keys instance element key key warning would happens traversal gets alreadyescaped keys nt access original keys yes autogenerated keys completely internal never user visible guaranteed never conflict generated user keys escaped nt see reason could nt report original key name warning messages probably best solution would unescape key reporting error message would want move key escapingunescaping utility provides function", "d": "4/2016"}, {"body": "one minds like give go", "d": "4/2016"}, {"body": "think someone team give much better answer gaearon explanation avoiding stylistic changes makes sense given babel transpiles template literals string concatenations guess matter stylelegacy", "d": "4/2016"}, {"body": "think generally prefer string concatenation simpler nt really make huge difference one way", "d": "4/2016"}, {"body": "react warns deprecations removedchanged react would suggest resolve errorswarning upgrade", "d": "4/2016"}, {"body": "please make sure two instances react page help determine please share minimal example reproducing issue github jsfiddle thanks", "d": "4/2016"}, {"body": "also seeing error particularly unit tests unmount components tests complete cases value rootnodeparentnode presumably node longer attached dom null value passed getclosestinstancefromnode error thrown due null current workaround return null node null seems work though admittedly nt know full consequences think least candidate invariant warningerror", "d": "4/2016"}, {"body": "add error surfaces testing reacttestutilsrenderintodocument way unmount test component attach test component document believe would explain parentnode would null also returns null node created yet attached tree", "d": "4/2016"}, {"body": "doctyper still unable reproduce fiddle one provide jsfiddle demonstrates issue", "d": "4/2016"}, {"body": "browser chrome os os x fiddle summary actually debugged issue yesterday morning trying upgrade solution came provide reactdom element already existed dom via one projects work old backbone codebase slowly migrated react element reactdom told render div backbone generated via documentcreateelement previously upgraded element never inserted dom stack trace revealed null node doctyper says debugging discovered one calling take look findparent see node gets defined case rootnode audio element react class producing audio element parentnode container became null debugging issue occasionally would disappear stop reporting would refresh dozen times see error steps reproduce open fiddle open console press run observe logs errors could nt get reproduce first started spamming run button eventually saw error sake everyones sanity added loop runs code times everyone easily see indeed reproduce issue edit one thing find interesting edit fiddle audio element source elements errors appear", "d": "4/2016"}, {"body": "relatively consistent repro chrome still unable reproduce firefox almost looks like might chrome race condition potentially related garbage collection hit rates go way spread calls temporally op suggests seen failure firefox also", "d": "4/2016"}, {"body": "jimfb op screenshot error appearing firefox attempted fiddle well safari firefox get errors could provide additional information version browsers tested", "d": "4/2016"}, {"body": "yeah upgrade chrome outofdate chrome latest stable error goes away consistent original observation appeared race condition potentially related garbage collection going close browser bug unless someone able reproduce chrome also curious see firefox repro", "d": "4/2016"}, {"body": "let careful assuming gc issue browser bug able confidently say specifically play could well bug react particularly around transactions mounting local events best guess especially since reports nodes add load error listeners directly timing play switch createelement actually kick fetching resources earlier instead waiting browser parse img element see src create img set src right means probably get load event earlier early possible event fire actually attach listener node question impact actually happen updates events actually play one thing find interesting edit fiddle audio element source elements errors appear would support theory wo nt get least media events", "d": "4/2016"}, {"body": "jimfb confirm upgraded chrome longer able reproduce issue hoping get reproductions op one report seeing elsewhere meantime think way support zpao theory edit zpao saw error using chrome train battery dying nt time take screenshot see reproduce although lends idea timing related using fiddles instead one closed source projects work occurred initial page load edit finally saw error startup yet debug proof", "d": "4/2016"}, {"body": "idiot nt expect dontdecaffinateandcode", "d": "4/2016"}, {"body": "think setting property value something like ever officially supported might worked coincidence mentioned prominently blog post used innerhtml populate initial tree component mounted happens hack using compatible way used glue html code initial mount however think way specifying multiple css values single property every supported find anywhere documentation example moreover pretty sure broken different way yes mounting component style like would work updating would fail reasons work react updates always using dom api setting styles rather innerhtml hack would work updates react normalizes behavior mounting updates always uses dom api create dom elements see point though good solution inside react discussed conclusion probably handle outside react feature testing example create dom element code initializes set different values see whether sticks gets reset sticks means browser supports given value way build dictionary mappings standard values ones supported browser likely libraries hope helps bug relying hack never officially supported explained", "d": "4/2016"}, {"body": "thanks response hack sense nt set css values directly set string variable valid value string js allow key object different values way yes maybe attribute checking would workaround impossible server side also lot work get right since react removing value depending content nt document warn users nt understand think ok hide documentation anyone uses inline styles important know normally react good throwing warningserrors stringify attribute value set also behaviour react going intercept nt user able set attribute value heshe wants ps worked fine updates check app uses", "d": "4/2016"}, {"body": "since react removing value depending content nt document warn users react removing value browser try assign string like without react style inspector see case documented react switching using blog entry several times reason anything relying concatenation break opinion clearly leaking implementation detail relying details always comes risk ps worked fine updates would mind providing specific example code jsfiddle demonstrates working see updates could possibly work correctly react always used dom api updates work way describe rely string concatenation happen case", "d": "4/2016"}, {"body": "see maybe nt understand exactly works work examples post solution find thanks", "d": "4/2016"}, {"body": "scenario world work initial render update set long string even existing support inconsistent confusing broken already happened lucky hit cases agree good good solution auto prefixing multiple values could potentially allow letting pass array value let reopen hear others think cc zpao", "d": "4/2016"}, {"body": "way build dictionary mappings standard values ones supported browser likely libraries yes indeed good prefixing library use use right prefixed property eg become however dealing serverside rendering things get tricky case solution enough prefix user agent server side browser agent client side pointed facebookreact think good tradeoff server side caching feel like two options prefix useragent server side drop inline style css based solution", "d": "4/2016"}, {"body": "gaearon like said fact react using made possible browser picked string applied value accepted nt see good way set style multiple values example work attribute checking fixing app serverside rendering impossible inline styles talking cases like need different values key prefixed keys different fine think important enough react treat style attribute special case provide solution since js object enough cover cases like mostly think flexbox common case users going need polyfill next couple years", "d": "4/2016"}, {"body": "fwiw updated module make simple checks runtime ie safari seems like platforms flex works fine least needs probably needs lot work get every single edge case polyfilled serverside rendering going issue though", "d": "4/2016"}, {"body": "never officially supported use case unlikely anything short term fact ever worked simply byproduct optimized initial render past clientsize generally recommended something picks right values based user agent noted great server rendering recommendation always use plain old style sheets several places dom apis nt support things stylesheets optimized way another example adding removing specific styles js response events pretty crappy even possible inline styles read js styles something investigating coming months sure shape think styles react future right nt planning changing anything issue related issues part considerations", "d": "4/2016"}, {"body": "think bug react code fundamental problem reads private ref never case react apps instead pass new value handler child stateful instead state live parent component merely reflect props passed way data flow easy think one source truth parent component react asynchronous reading right away work case reading component state always discouraged private design think might find guide helpful explains state ownership works react apps please skip absolutely essential going run issues keep using multiple sources truth reach private component state components refactor code use topdown data flow problem persists please let us know try provide fiddle reproduce right looks like incorrect usage closing cheers", "d": "4/2016"}, {"body": "thanks gaearon quick reply saved day pointers realising asynchronous double checking topdown data flow know post realised doubling props passing via thank heaps yes issue react", "d": "4/2016"}, {"body": "glad helped", "d": "4/2016"}, {"body": "nt intend making react knowledgeable vendor prefixing much possible belongs level react libraries add appropriate prefix style values nt know one top head exist could write one relatively easily js instead var mystyle translate return return", "d": "4/2016"}, {"body": "haohcraft one option radium supports automatic vendor prefixing", "d": "4/2016"}, {"body": "still like pattern might slightly obvious people require files nothing really stopping end telling people thing nt require things", "d": "4/2016"}, {"body": "telling people reality lot people included thought relatively safe time bunch components whose authors nt know needs changing renaming would serve good warning existing components would effectively force authors explicitly opt using private parts find workarounds", "d": "4/2016"}, {"body": "could go really obfuscate hash something gets added build pipeline changes every major release", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "nah nt every build thought would probably screw packages need reliability eg reactdom able use react", "d": "4/2016"}, {"body": "packages way accessing internals needed using private api like secretdom without indexing lib added bonus allowing addons put separate umd builds", "d": "4/2016"}, {"body": "defined documented api accessing internals create renderer change greatly hinder experimentation taking place custom react renderers community known experimental use case things break believe maintainers users renderers understand removing capability hiding system like hash names would detrimental view", "d": "4/2016"}, {"body": "feel like people experimenting check react repository anyway rather relying npm build maybe wrong curious gaearon thinks point", "d": "4/2016"}, {"body": "depending nt think would really hinder experimentation would forced knowingly using nonpublic apis went hash per major route update paths major version definitely keep use case mind though paying attention sure chime reach make drastic changes would unrecoverable", "d": "4/2016"}, {"body": "feel like people experimenting check react repository anyway rather relying npm build building something like pain considering want renderer peer dep run tests experiment project another directory symlinks get inconvenient definitely see appeal using npm package fiddling renderers depending nt think would really hinder experimentation would forced knowingly using nonpublic apis went hash per major route update paths major version something like chars would enough imo bad communicated clearly could ship explains hash changes every major version", "d": "4/2016"}, {"body": "thought bit weekend currently opposed reasoning feels like kneejerk reaction community problem valid solution precedent babel something similar suspect community pressure education enough prevent decrease impact behavior happening time progresses breaks conventions makes certain class valid use cases difficult mentioned even requires thought additional work oss products rn bit hack implement truly private modules even fully private maintainers could look docs hash generated still require private internals ideally want add truly concept module system built andor node", "d": "4/2016"}, {"body": "api could satisfy everyones needs would let use hashing method still allowing people get things want libs making awkward enough hopefully used actively sought documenting could help downsides nt work system ca nt interpolate variables import path ultimately agree iamdustan every point seems like user problem teams problem somebody wants depend internal item gets removed next version handle situation guys osswide issue react issue", "d": "4/2016"}, {"body": "agree completely iamdustan custom renderer author currently necessary project use react internals aware may break even patches minor updates react something handle build specific hashes would make bad experience almost everyone naming private instead lib make apparent things may break good enough opinion solve real problem least case find third parties trying use private parts react even specific seeing great progress towards separation dom react react three renderer every update fewer private react parts need used eventually react dom completely separated able look see works independent entity touch react private parts comfortable custom renderers appear stable guessing eventually may happen popular private parts guess may need exposed stable api modularized third parties could poked poke us nt punish us", "d": "4/2016"}, {"body": "bringing back react fix today", "d": "4/2016"}, {"body": "wildhoney yes probably add back without looked deeply guess breakage oversight would gladly accept pr fix", "d": "4/2016"}, {"body": "agreed take look thanks one quick question however otherwise investigate easiest way obtain container case inst", "d": "4/2016"}, {"body": "look nativecontainer toplevelwrapper info might need added nt already available think spicyj wrote nativecontainer code might know otherwise require bit investigation", "d": "4/2016"}, {"body": "fixed", "d": "4/2016"}, {"body": "wdiechmann could explain want report state try understand logging console state updated trigger callback expire seconds log nt see race condition", "d": "4/2016"}, {"body": "create setstatecall callback calls consolelog actually calls setstate calls consolelog returns result consolelog callback setstate obviously calback want equivalent nt know cs ca nt really help syntax problem", "d": "4/2016"}, {"body": "syranide problem state get updated eventually anyways get raitobezarius setting state depending instructions later code provided merely demo effect", "d": "4/2016"}, {"body": "wdiechmann yes state gets updated consolelog effectively called setstate even called transpiles equivalent", "d": "4/2016"}, {"body": "click div shows expected behavior expecting something else", "d": "4/2016"}, {"body": "hmmm see fiddle snippet show expected behaviour explain difference like replied big deal settimer wait enqueuedcallback finish thx sharing anyway cheers walther", "d": "4/2016"}, {"body": "somehow scope change enough whatever called try measure weird right", "d": "4/2016"}, {"body": "wdiechmann problem explained comments providing callback setstate calling function returning value used callback nt two wildly different things", "d": "4/2016"}, {"body": "waooo lambda like setstate wurl w args arg gt consolelog stateargs works sure quite see difference calling function asking settimer call asking eval inline lambda thing latter two works thx", "d": "4/2016"}, {"body": "rest warning say", "d": "4/2016"}, {"body": "zpao problems server side rendering also using everything working smooth update receiving message tried reinstall dependencies error persists tried install previous version started working smoothly", "d": "4/2016"}, {"body": "buzinas see", "d": "4/2016"}, {"body": "pretty sure going close let know incorrect assumption", "d": "4/2016"}, {"body": "zpao unrelated full stack trace issue due nodes case tag used adblocker inserted document react loads breaking checksum past react would ignore things like works ideally react would ignore anything without validating checksum possible sure worked", "d": "4/2016"}, {"body": "spicyj checksum check changed using createelement would work case looking checksum generated markup string would nt seen actual dom actually case warning uses outerhtml mismatch pointing wrong thing", "d": "4/2016"}, {"body": "application chunk code executed object exists builds new stylesheet appends experienced identical error dylanpiercey ended solving upgrade react building stylesheet object part state injecting component render error message looks correct interestingly race condition sometimes react initial render would happen additional stylesheet injected would fine", "d": "4/2016"}, {"body": "zpao nothing changed still generate html clientside reviving serverrendered markup", "d": "4/2016"}, {"body": "likely due using incorrect order objectassign recommend polyfill server code", "d": "4/2016"}, {"body": "mridgway luck ran added entry file module responsible rendering serverside react places confirm working using chrome version updating chrome see makes difference", "d": "4/2016"}, {"body": "environment already nt think work use exists really saying", "d": "4/2016"}, {"body": "zpao thank sir trick", "d": "4/2016"}, {"body": "zpao hmm nt one original reasons polyfill seem remember exact discussion", "d": "4/2016"}, {"body": "sound familiar nt think part original discussion recall going use objectassign directly issue spec would throw getting would really bad cloning props firefox already implemented old version spec short period facebook actually completely broken firefox nightly fwiw think problem exposed could encountered especially ever used spread jsx even regular object spread use babel get compiled using objectassign essentially difference though probably frequency instead hitting cases happening normal use props sure best way handle really want us able use native code end relying dated polyfill see discussion assumed perfectly safe particularly due fact effectively using native objectassign facebookcom least year module replacement internally nt much server rendering properly consider case honestly completely forgot still bug", "d": "4/2016"}, {"body": "seems like would problem babel spread typically kind issue polyfill test assuming compatibility native impl", "d": "4/2016"}, {"body": "wish checked validity walking dom rather calculating checksum markup us speccompatible rather bug", "d": "4/2016"}, {"body": "spec compliant enumeration order defined spec fixed newer apis like intl number formatting allow different output separate issue even walked dom would nt automatically solve issue", "d": "4/2016"}, {"body": "ah ok fixed spec depending previously undefined behavior behavior still undefined targeting anything one could argue solve within react anyway", "d": "4/2016"}, {"body": "pasting text issue developing universal app react updating started getting error warning react attempted reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injected new markup compensate works lost many benefits server rendering instead figure markup generated different client server client ut class mdinput name txtcadmus pat server ut class mdinput pattern nam seems bug reordering something like completely sure tried change bunch stuff eg force server client use polyfill using babel transform objectassign plugin nothing solved problem uninstalled react installed problem gone btw pretty simple simulate issue code javascript reactdomrender documentqueryselector main consolelog documentqueryselector main innerhtml consolelog reactdomserverrendertostring react working react working expected", "d": "4/2016"}, {"body": "yes bug objectassign implementation heard bug might fixed really unlikely end node", "d": "4/2016"}, {"body": "diving code seems nothing implementation open jsbin firefox paste code react work expected react mess attributes seems problem react created elements using order maintained uses browsers change attributes ordering causing diffs see two ways solving problem change ordering attributes exactly order browsers render sure good way since browsers may behave differently change checksum algorithm way nt matter attributes ordering checking exist probably cost high big apps better inject entirely new markup", "d": "4/2016"}, {"body": "cc spicyj", "d": "4/2016"}, {"body": "change checksum algorithm way nt matter attributes ordering checking exist probably cost high big apps better inject entirely new markup ideally would think definitely right would expensive server rendering already relatively expensive slow might lose advantages would otherwise get", "d": "4/2016"}, {"body": "reviving serverrendered markup generate markup client using exact codepath generate checksum based changes createelement mode wo nt affect checksums unrelated", "d": "4/2016"}, {"body": "sounds like two related bugs mess property enumeration order thanks mridgway digging sounds like best solution send pr tests cases nt use objectassign", "d": "4/2016"}, {"body": "spicyj thing ca nt understand react everything works smoothly upgrading react isomorphic rendering stops working nt seem something related", "d": "4/2016"}, {"body": "buzinas react internal polyfill react started using native ifwhen available instead polyfill thus problem native implementation buggy", "d": "4/2016"}, {"body": "buzinas polyfilled objectassign objectassign npm package things started working sure changed causes break default objectassign though edit spoke milliseconds soon jimfb know", "d": "4/2016"}, {"body": "fuzzysockets jimfb probably something wrong forcing objectassign polyfill app keep warning checksum", "d": "4/2016"}, {"body": "buzinas entry add", "d": "4/2016"}, {"body": "npm package polyfill react uses problem first tries native implementation buggy cases works deletes native implementation first polyfill use", "d": "4/2016"}, {"body": "everything makes sense p thanks everyone give try ps works dancer", "d": "4/2016"}, {"body": "saying official recommendation though ideally feature test broken native versions", "d": "4/2016"}, {"body": "objectassign package proper order check", "d": "4/2016"}, {"body": "gaearon right example ok workaround since much better giving server rendering", "d": "4/2016"}, {"body": "occur certain versions", "d": "4/2016"}, {"body": "mridgway thanks one", "d": "4/2016"}, {"body": "fuzzysockets supposedly fixed since december appears current version chrome nt issue unlikely make way node", "d": "4/2016"}, {"body": "similar issue cloning children add props", "d": "4/2016"}, {"body": "almost duplicate relevant discussion", "d": "4/2016"}, {"body": "upgrading incrementally ie version rather jumping upgrade experience designed done incrementally versions old yes upgrade experience might little rough think better nowadays recent versions new passed string function error message would say uncaught invariant violation reactdomrender invalid component element instead passing string like div pass reactcreateelement div anyway nothing actionable since fixed latest going backport far back sorry upgrade experience might little tough promise gets better especially keep application uptodate rather huge jumps long", "d": "4/2016"}, {"body": "zpao filed issue time closing favour", "d": "4/2016"}, {"body": "beat", "d": "4/2016"}, {"body": "looks like applying prop changes bad order logic get right solvable general known types could complex get perfect want minimize dom operations", "d": "4/2016"}, {"body": "surprised particular case problematic code ensure always set attributes sure nt working designed totally clear whether setting type first always solves cases like setting type first would simply cause warning switching way see also something may want happen may difficult implement cleanly current system easier full composite wrappers components longer creating new element whenever type changes could surprising would mean ref component changes lifetime component never elsewhere", "d": "4/2016"}, {"body": "easiest workaround set input changes type new input element created type changes", "d": "4/2016"}, {"body": "could caused objectassign order bug", "d": "4/2016"}, {"body": "fixed", "d": "4/2016"}, {"body": "thanks", "d": "4/2016"}, {"body": "yes jsx spec valid syntax since jsx nt part js ends putting parsers different mode would allow anything left alone want comment would need plain js move inside sorry obvious one downsides introducing new syntaxes", "d": "4/2016"}, {"body": "possible duplicate", "d": "4/2016"}, {"body": "things would great items function priority us internally nt focused moment jhicken gladly accept pull request features", "d": "4/2016"}, {"body": "cool see find time dig", "d": "4/2016"}, {"body": "typo fiddle passing midlothain value midlothian fiddle works typo fixed please let know missed something far appears work intended closing", "d": "4/2016"}, {"body": "gaearon looks like references issue jsfiddle work react confirm working", "d": "4/2016"}, {"body": "let discuss fun coincidence would nt say issue issue typo issue genuine regression caused bugfix never released rcs could nt cause issues final", "d": "4/2016"}, {"body": "looked day clean moment use plugins use nt released updates compatpeerdeps worked well years rush change probably end switching gulp align many projects use shared infra", "d": "4/2016"}, {"body": "interesting use case yet convinced justifies additional lifecycle method think equally viable alternative service deconstruction curious would agree service created parent receives information needed open required connectionresource nt actually open resource child component starts listening service closes connectionresource last child stops listening means parent never needs destroy service normal garbage collection rules apply would approach work", "d": "4/2016"}, {"body": "really service per se object use follows observer pattern would good componentdidunmount parent nt destroy service relying children stop listening properly may cause leaks", "d": "4/2016"}, {"body": "think previous comment still holds true implementations observer pattern children nt stop listening properly likely got bigger problems common data provided static parent children enterexit throughout lifetime application likely leaking anyway", "d": "4/2016"}, {"body": "afaik without symmetrical hook serverside rendering impossible release resources unsubscribe listeners used", "d": "4/2016"}, {"body": "afaik without symmetrical hook serverside rendering impossible release resources unsubscribe listeners used componentwillmount current recommendation never hold onto resources symmetric free", "d": "4/2016"}, {"body": "way interested method child subscribed flux store parent fires action clean store state child include special code existence slice state would fail retrieve potentially null reference child know unsubscribe parent cleaning way parent safely clean external state child may depend upon parent would given opportunity", "d": "4/2016"}, {"body": "yeah moment include bit ugly workarounds cases would help", "d": "4/2016"}, {"body": "gaearon child know unsubscribe parent cleaning way parent safely clean external state child may depend upon componentdidunmount parent would given opportunity gaearon yes original postrequest almost verbatim reason approach insufficient seems like parent always create object lazyinitializes required resource cleans users resources done little additional boilerplate particular resource mind would exemplify use case", "d": "4/2016"}, {"body": "particular resource mind would exemplify use case case referring piece data flux store parent cleans use pattern consumers react redux bindings recently introduced regression related use case wish could tell people use different lifecycle hook tearing data rather careful container implementation implement workarounds like asking pass something like also feels unnatural especially considering connected children deeply tree", "d": "4/2016"}, {"body": "cc sebmarkbage", "d": "4/2016"}, {"body": "way briefly chatted sebmarkbage today particular problem would solved delaying calls transactional callback use pattern somewhat inefficient inside large list separate issue", "d": "4/2016"}, {"body": "jimfb seems like parent always create object lazyinitializes required resource cleans users resources done unless object cleans ideal sometimes available option eg parent provides set listeners children listeners get unmounted parent provides another set listeners parent ca nt clean object parent gets unmounted children switching fluxredux etc everyone", "d": "4/2016"}, {"body": "unless object cleans ideal sometimes available option ideal option fairly certain always option use simple reference counting determine cleanup eg parent provides set listeners children listeners get unmounted parent provides another set listeners parent ca nt clean object parent gets unmounted children parent need cleanup nt datastore cleanup last child unmounts", "d": "4/2016"}, {"body": "even support nt good early error message", "d": "4/2016"}, {"body": "yes supported feature according docs componentwillmount invoked client server immediately initial rendering occurs call setstate within method render see updated state executed despite state change based feature ought work regardless rendering method", "d": "4/2016"}, {"body": "events pooled reused thus leaving event handler returned pool attributes nulled use event leaving event handler need persist see", "d": "4/2016"}, {"body": "thanks andreypopp exactly correct josephmg fyi usage questions better answered sites like stackoverflow try use github issues tracking bugs react core", "d": "4/2016"}, {"body": "andreypopp thanks answer help lot jimfb sorry use wrong type thank information keep mind", "d": "4/2016"}, {"body": "update node npm version everything fine version years old js eternity", "d": "4/2016"}, {"body": "understood case perhaps add note documentation located using default nodejs npm ubuntu lts cents thank information", "d": "4/2016"}, {"body": "nt think nodejs installed default ubuntu least install manually nt like default version installed server provider could wrong asking", "d": "4/2016"}, {"body": "nt tested surprised output chance behind sort firewall makes npm registry requests return gibberish", "d": "4/2016"}, {"body": "installed default installed via aptget sudo aptget install npm behind firewall", "d": "4/2016"}, {"body": "oh see ubuntu instructions follow many things broken old versions npm node really normal versions still installed running aptget install nodejs npm", "d": "4/2016"}, {"body": "related fixed soon", "d": "4/2016"}, {"body": "thanks tracking petetnt closing since npm registry issue please subscribe issue linked need know fully resolved", "d": "4/2016"}, {"body": "thanks following filing nt looked code detail generally positive sounds like serious users server rendering include none us core team would appreciate feature get feedback people settling api would prefer parallel codepaths rather degrade performance rendertostring nt require serious changes believe react server reconciletransaction reactdomcomponent really modules knowledge serverrendering difference nt much split particular none isomorphic modules know server rendering domspecific concept ex react native support server rendering", "d": "4/2016"}, {"body": "yahoo significant amount server rendering react extremely interested getting streaming support core willing help way possible done investigation render streaming also looked implementation agree assessment stands difficult support streaming without modifying lot code method recursion children implemented within method would checks current transaction methods returning string vs writing stream think best course action recommendation sebmarkbage move recursion individual methods method instead method would receive arrays metadata strings child components could written transaction recursed transaction would take care concatenating strings writing stream via common interface initial work hoisting recursion centrallizing recursion pr would make much easier support streaming asynchrony future difficult commit working without buy core team information involved", "d": "4/2016"}, {"body": "spicyj generally positive sounds like serious users server rendering include none us core team would appreciate feature great hear thanks get feedback people settling api agreed issue outreach users methods get feedback would suggest would prefer parallel codepaths rather degrade performance rendertostring good feedback thanks believe react server reconciletransaction reactdomcomponent really modules knowledge serverrendering difference nt much split think bit widespread code knowledge serverrendering issue signature everywhere shows domspecific nondomspecific code synchronous wo nt work streams current implementation wrote parallel set methods async function signature currently working newer version instead returns data structure processed either synchronously asynchronously depending caller preliminary pretty messy code interested ignore test code interesting stuff files mridgway also looked implementation reactdomstream eek implementation proudest achievement rewrite scratch times callbacks generators asyncawait perf often abysmal got working think best course action recommendation sebmarkbage move recursion individual reactcomponentmountcomponent methods reactreconcilermountcomponent method instead think something like recent experimental wip branch said interesting stuff files rather hoisting recursion though pulled structure called rest idea basically methods return stringlazytree basically array raw strings closures call recurse tree done synchronously asynchronously preserves code path experimental branch passes nearly tests nt checksums yet know previous work slower last byte tests working although making much progress difficult commit working without buy core team information involved thanks pointing nt know info algorithm rework looks like", "d": "4/2016"}, {"body": "tentative plan get rid checksum checking client checksum generation server benefit loosening guidelines markup decided valid client rerendering new approach would walk dom tree verify tree attributes values content get rid keep track dom internal tree walk dom client render split client rendering server rendering server renderers exist outside react independent sound right miss something notes need ensure multiple server renderers live outside react react aware existence runs tests like know breaking changes ahead time perhaps provide documented spec expected server renderer lifecycles call dom markup like etc jimfb aickin others like comment", "d": "4/2016"}, {"body": "new approach would walk dom tree verify tree attributes values content would probably slow would likely require bunch internal refactors even make possible get rid barely need kept intentionally distinguish reactrendered nodes nodes elsewhere browser extensions instance", "d": "4/2016"}, {"body": "barely need kept intentionally distinguish reactrendered nodes nodes elsewhere browser extensions instance nodes elsewhere going disturb react render anyway thus get blown away react mounted dom nt think much value knowing nodes came knowing nodes differ sufficient disadvantage forced maintain mandates specific render order", "d": "4/2016"}, {"body": "sound right miss something remember yes would probably slow would likely require bunch internal refactors even make possible talked nt entirely sure slow would agree biggest risk idea jimfb argued would least big done currently rendering top server markup question much worse reading dom tag names attributes constructing giant string worried might much worse see", "d": "4/2016"}, {"body": "likely require bunch internal refactors slow worries mostly pointers start looking also helpful would knowing logic checks reactcreateclass reactcomponent sfc", "d": "4/2016"}, {"body": "goatslacker also thanks writing fyi trying hack way rough cut step today middle right definitely beast got dozen new unit tests passing bunch", "d": "4/2016"}, {"body": "goatslacker also helpful would knowing logic checks reactcreateclass reactcomponent sfc srcrendererssharedreconcilerreactcompositecomponentjs eg", "d": "4/2016"}, {"body": "think important piece building rough spec test suite run external renderers also run react core ensure breakages properly communicated published cover lifecycles expected get called render react client properly bootstrap top nodes proper structure accentuating differences characterbycharacter html output possible obviously covering lot cornercase html oddities missing anything could done similarly ecma repo breakages additions could communicated inside github repo holds tests really exciting", "d": "4/2016"}, {"body": "quick update potential speed reconnecting dom walking dom rather checksum step branch although means complete needs work interactivity bunch unit tests existing unit tests fail code readable like complete enough really rough comparison performance two strategies though started morning preliminary rough observation dom walking slower checksum safariosx slower chromeosx obviously ideal faster better also order magnitude increase also giant amount absolute time rough test render difference amounted tested render could nt detect difference two result adhoc testing also worth noting nt done perf optimization branch still concerned potential bad perf regression particularly given different browsers wildly different perf characteristics think best path forward polish test make automatable via selenium run enough times get statistical significance variety platforms think good coverage would look something like multiple document sizes platforms chromewindows firefoxwindows os x latestsafari ios android browser make sense folks agree also much perf regression client reconnect server markup would accept", "d": "4/2016"}, {"body": "great work getting better numbers makes lot sense much perf regression client reconnect server markup would accept think answer might depend least partly much faster think make server rendering optimizations discussed", "d": "4/2016"}, {"body": "think answer might depend least partly much faster think make server rendering optimizations discussed agreed even connecting server markup client slower conceivable perf gains speeding server rendering reducing page weight removing could make practical use however hard know trade without empirical data servers networks used", "d": "4/2016"}, {"body": "aickin great work amazing obviously care performance browsers perf metrics couple browsers eg chromefirefox intuition sufficient understand likely ramifications changes obviously feel free collect data think desirableimpactful effort might better spent optimizing fixing bugs call always go collect perf metrics later metrics needed make decision personally think fine especially since many benefits approach give better error messages remove remove complicated dataid lookup logic remove dataids markup making markup smaller fasteroptimizeddedicated ssr renderer predict least improvements anyway annihilate additional remount cost etc however said ultimately teamcommunity decision still everything make even faster get better numbers think would also curious hear performance compares initial pass rendered without serverside markup ie createelement path", "d": "4/2016"}, {"body": "think difficult get ground try make better phase getting point code decoupled still maintainable way going hard enough first goal suggest get point featureimplementation parity day", "d": "4/2016"}, {"body": "first goal suggest get point featureimplementation parity day sage advice wanted know nt going like worse walk dom investing ton time strategy feel pretty confident case seleniumizing tests shows worse perf depending platform back working correctness", "d": "4/2016"}, {"body": "opened pr attempts tackle correctness side stage please feel free comment thanks", "d": "4/2016"}, {"body": "note going break react native init ship latest shipped may impact us always ship leave npm tag pointing ready go", "d": "4/2016"}, {"body": "zpao thanks nt want hold back react release much get new rn release shortly", "d": "4/2016"}, {"body": "hey guys release noticed missing", "d": "4/2016"}, {"body": "added one thanks", "d": "4/2016"}, {"body": "curious release", "d": "4/2016"}, {"body": "nope correct", "d": "4/2016"}, {"body": "gaearon author transform works react sense official clearly put thought towards topic said think project still exploratory nt know official proposals introduce react core time think would want let experiments bake little longer considered bringing core going close take radar since exploratorydiscussion topic point however curious hear use case building requires transforming components", "d": "4/2016"}, {"body": "think nt recommend approach anymore nt mean stop using project though good alternative mostly interested hot reloading error catching hot reloading tricky done without invasive transform wrap things proxies call sites read errors react support error boundaries soon also problem use cases like perf monitoring react adding blessed dev tool api much better way spy components wrapping opinion hope helps", "d": "4/2016"}, {"body": "way also explore wrapping component call sites patch createelement keep mapping unwrapped wrapped components", "d": "4/2016"}, {"body": "jimfb thanks try outline particular use case concisely actually already massive post prewritten subject save another time keep short folks aware react works great simple things want pass certain props level nt really clean way aware use fully manage application state consider ideal api maximally declaritive eg graphqlrelaylike without upstart graphqlrelay requires components declare want stores automatically assigned able representmanipulate said declared declarative components like js class userinfo extends component static proptypes classes proptypesobjectisrequired userid proptypesnumberisrequired username proptypesstring render const classes userid username thisprops classes user info would provided component via based fact declared would probably also make sense occurs via said nt explicitly passed component usual might come theme provider user specific properties could course come user provider libraries like redux perfect managing state well anything one thing seems missing reactflux developers arsenals replication specifically state machine replication pairs perfectly typical reactive application whose state changes result action implemented correctly allows data initialization storage retrieval completely decoupled application concern rendering state allows developers declaratively connect application state arbitrary data sources create efficient scalable reliable software relatively little effort return example mounting app specify wherehow want states provided components via replication following example currently specific particular implementation ideally method state management redux could used js import renderapp renderapp import providers providersindex import rethinkdb replicatorsrethinkdb import websockets replicatorswebsockets providersuserreplication key props gt store instantiated based key replicator rethinkdb instantly use db long replicator could easily include realtime functionality providersuserreplication key props gt replicator rethinkdb websockets renderapp providers replicator actually really simple usually containing methods get initial state translate state changes andor actions tofrom data source top number components initialized needed via replication based property maybe component dispatch action particular user js class updateuser extends component static proptypes classes proptypesobjectisrequired userid proptypesnumberisrequired setusername proptypesfuncisrequired setusername const newusername windowprompt enter user name render const classes setusername thisprops changes state would course replicated database andor users relevant component instances would efficiently rerendered reflect changes afaik nt clean way via plain easy automate functionality via autogenerated higherorder component see reactreduxprovide proof concept examples currently wip nt try latest version yet hoc seems required need wrap component comes furthermore since said hoc autogenerated applied across board preferable eliminate dependency simply make something developers optionally apply every component maybe even eliminate need hoc baking type functionality ie better management application state replication", "d": "4/2016"}, {"body": "gaearon thanks would patching work efficiently wrapping component instance autogenerated hoc", "d": "4/2016"}, {"body": "pretty much technique babel plugin executed call site long keep cache wrapped classes wrap lazily see much difference still would note rather unorthodox works well fine though smile", "d": "4/2016"}, {"body": "thanks feedback intentional provides good stack traces treatment warnings fixed committed shipped maybe exception think fixable one things working towards better way manage silence specific warnings types warnings without fork react track umbrella issue", "d": "4/2016"}, {"body": "usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue takes radar feel free continue conversation move stackoverflow", "d": "4/2016"}, {"body": "sure support putting text empty string inside transition group try instead", "d": "4/2016"}, {"body": "thoughts using javascript conceptually react experimentalandsubjecttochange context feature allows define variables local subtree components parent might look like js class bluebar extends component getchildcontext return color render return bluebarchildcontexttypes color proptypesstringisrequired child components could read like understand orthogonal whether want support css variables could good solution meantime", "d": "4/2016"}, {"body": "large codebase user interface vivaldi browser less looked javascriptways managing styles far decided make switch using context looks nice would solve issues using css variables would let us simplify existing less codebase without full rewrite", "d": "4/2016"}, {"body": "thanks sharing context pun totally intended let wait domsavvy colleagues reply chance look work would take fix", "d": "4/2016"}, {"body": "long spec stable enough nt looked recently seems like doable sure cost basically use need look every style property see key starts could get costly able add using following syntax nt updated try assigning new ruins much point using variable yea result us using innerhtml first render updating properties stop working even initial render heads", "d": "4/2016"}, {"body": "bit unique position perhaps since need relate chromium support css variables maturing according would mind setting variables differently rest inline style declaration would love way react", "d": "4/2016"}, {"body": "think shortterm plan probably leave status quo change styles continue explore js styles think likely end changing end styles another feature problem would work initial render using innerhtml would nt update nt work client rendered also possible set using dom api would expensive look every value might want alternative way express want use css variables want break declarative approach manage setting lifecycle hooks eg set refs componentdidmount componentdidupdate use ref call directly", "d": "4/2016"}, {"body": "using lifecycle hooks correctly got working seem cause trouble using react style attributes setting style js instead worked fine", "d": "4/2016"}, {"body": "fwiw agree people know focusinfocusout make work despite fact would map exact event handler use focusblur however last time discussed opted decided warn instead fine reversing decision get momentum within team", "d": "4/2016"}, {"body": "looks like decided incorrect claim indistinguishable onfocusonblur onfocusinonfocusout different moving focus two children element neither event fires container", "d": "4/2016"}, {"body": "properly means adapting logic enterleaveeventplugin nt simple adding simpleeventplugin", "d": "4/2016"}, {"body": "ah makes sense thanks explaining adding good first bug note spicyj comments need behave like want look", "d": "4/2016"}, {"body": "like work nobody minds enough tests time add real source code", "d": "4/2016"}, {"body": "hey gaearon spicyj apparently confusion let explain mouseover mouseout bubble mouseenter mouseleave nt bubble corresponding react event handlers work native events awesome native focus native blur events nt bubble corresponding react event handlers bubble dun dun dun native focusin native focusout events bubble react events implemented bubble jsfiddle made display checked chrome since mdn documentation states intended behavior believe browsers right please correct wrong following done warnings removed obviously currect react renamed currently work native work bubble event listeners implemented react bubble", "d": "4/2016"}, {"body": "hmm sounds plausible thanks correction kinda annoying end renaming people maybe best", "d": "4/2016"}, {"body": "parent access many children wants using multiple callback refs single child referenced many parents want wrappingchaining callback refs ref fires latest parent calls ref parent already listening restriction callback refs restriction exist string refs string refs documented legacy avoided", "d": "4/2016"}, {"body": "jimfb think get memory leak refs array special handling string refs documented legacy avoided really think good way handle input case ref callback", "d": "4/2016"}, {"body": "lijunle", "d": "4/2016"}, {"body": "zpao gaearon anything actionable want close actionable suggestionsbikeshedding wording", "d": "4/2016"}, {"body": "close sure exactly could improved specific suggestions sent pr", "d": "4/2016"}, {"body": "naive question trigger warning far know proptypes influence production negative consequence except takes lines code really nt see warning triggeredfor something possibly impact", "d": "4/2016"}, {"body": "warn people unneeded code production builds suggest impacts almost every react app existence maybe stupid idea wanted bring case people agree follows general rule warnings indicate something fixed imagine hard find someone arguing proptypes take space production builds", "d": "4/2016"}, {"body": "would put pretty heavy burden component authors would need distribute two versions components prod vs dev also super actionable using thirdparty component defines proptypes automated transform would nt necessarily able eliminate proptypes eg stateless function components without making bold assumption assigning proptypes function means function must react component anyway actually oppose idea think need transforms existence could enable warning guess worth headache someone writes transform people start using find byte savings justify complexity could consider enabling warning let reevaluate ifwhen transform becomes mainstream", "d": "4/2016"}, {"body": "thanks good feedback issues nt think", "d": "4/2016"}, {"body": "brigand pleased pull uglify delete proptypes production", "d": "4/2016"}, {"body": "mijamo yeah solves overhead brigand mentioned react components still proptype object defined bunch empty function references yes improvement", "d": "4/2016"}, {"body": "related", "d": "4/2016"}, {"body": "reacttestutils might exception convenience testing likely needs reconciler anyway", "d": "4/2016"}, {"body": "update react reactdom reactdom contain method render reactdomrender deprecated import react react import reactdom reactdom reactdomrender documentgetelementbyid appconfigrootelementid", "d": "4/2016"}, {"body": "ibhub nt understand questioncomment react contain render function deprecated usage return value discouraged behavior unchanged", "d": "4/2016"}, {"body": "ok thanks perhaps bug code nt understand reactdomrender undefined version find reason comment upd found problem incorrect alias reactdom webpack config sorry", "d": "4/2016"}, {"body": "tried make clear notes specific implementation works right exploration targeted looking either approaches combination work facebook scale without regressing performance important characteristics right possibility react builtin support managing inline styles purely hypothetical get api implications need learn actual challenges posed different approaches really one libs build react dom approaches work facebook scale share findings whenif tangible results moment early discuss specifically want handle inline styles delegated third party packages", "d": "4/2016"}, {"body": "works", "d": "4/2016"}, {"body": "feel free bring ever implement though", "d": "4/2016"}, {"body": "worth thought facebook working big inlinestyle library might impede efforts thirdparty library like radium never crossed mind much interested novelty simply creating convention called whatever passed style letting specific stylesheet implementation work looking forward seeing find", "d": "4/2016"}, {"body": "case little involved ie implementation might want return either bunch classes bunch styles currently allow string styles although jimfb expressed similar thoughts cc vjeux one looking stuff", "d": "4/2016"}, {"body": "thanks idea time ifwhen js styles approach support core going stick current approach styles add magic see convenience though chance end something similar cc vjeux think stuff", "d": "4/2016"}, {"body": "kevinbarabash could always handle userland create repo parse values passing react", "d": "4/2016"}, {"body": "cool try get aphrodite", "d": "4/2016"}, {"body": "worth noting cases long used mostly compiled provide polyfills objectassign module objectis inlined know idea reactpolyfill repo interesting though definitely something keep mind moving forward", "d": "4/2016"}, {"body": "warning well use redux case happens transitioning one page component another dispatching action nt dispatch error time fixed putting dispatch inside since saying nt even see error see extract failing code repository gist necessary dependencies reactrouter redux fine", "d": "4/2016"}, {"body": "dattaya would awesome nt time thanks", "d": "4/2016"}, {"body": "sure case worth investigating error happens present said could would provide example hold promise goes anyway steps reproduce error open chrome redux devtools extension installed press link input field type instead press square appeared bellow console see error", "d": "4/2016"}, {"body": "gaearon sounds like might redux related especially requires redux devtools extension installed move repository", "d": "4/2016"}, {"body": "receiving error somewhat similar context trying push route page component mounted inside trying check validate whether component even mounted nt mounted read unauthenticated user trying load account page component even mount user redirected login page try logic inside works expected example packagejson", "d": "4/2016"}, {"body": "jimfb impossible trigger error react react bug even repro cases use redux", "d": "4/2016"}, {"body": "spicyj ah yeah probably true idea redux devtools extension entirely conceivable reaching internals case would react bug issue nt repro without reduxdevtools dattaya comment seemed imply would seem imply might react bug yeah asked gaearon", "d": "4/2016"}, {"body": "redux devtools touch react internals userland code", "d": "4/2016"}, {"body": "vouch chrome extension though maybe zalmoxisus insight", "d": "4/2016"}, {"body": "yes sorry ambiguity referring chrome extension", "d": "4/2016"}, {"body": "gaearon strange extension injected script nt use react except fact imported checked example error appears also extension disabled dattaya could confirm nt seem related redux devtools chrome extension", "d": "4/2016"}, {"body": "zalmoxisus confirm error also appears extension disabled using react", "d": "4/2016"}, {"body": "zalmoxisus correct sorry confusion might looked wrong console trying replicate project without dev tools completely unrelated dev tools", "d": "4/2016"}, {"body": "problem bit debugging see callbacks queued using eg sometimes executed even instance unmounted normal actual error message bit different case occurs using stack weird part error occurs click nt use browsers backforward buttons also confirming completely unrelated dev tools adding another stack trace note case element related", "d": "4/2016"}, {"body": "seeing stack trace see error component unmounted route change contains listener navigating via rather browser backforward buttons unmount component prior route change error occur also see error amp", "d": "4/2016"}, {"body": "dattaya thanks posting repro case hopefully one us look", "d": "4/2016"}, {"body": "additional codepen showing error steps reproduce add number alerts switch pages although specific error different dattaya seems likely related cause also found happens include reactrouterredux project switching commenting line fixes issue", "d": "4/2016"}, {"body": "apparently second time called handling button click find sure means though", "d": "4/2016"}, {"body": "callbacks queued using transactiongetreactmountready enqueue eg trapbubbledeventslocal putlistener sometimes executed even instance unmounted gaearon spicyj know expected behaviour sounds like nt nt know sure ca nt use debug", "d": "4/2016"}, {"body": "minimal repro thusfar js var callbacks function emitchange callbacksforeach c gt c class app extends reactcomponent constructor props super props thisstate showchild true componentdidmount thissetstate showchild false render return thisstateshowchild amp amp class emitschangeonunmount extends reactcomponent componentwillunmount emitchange render return null class forceupdatesonchange extends reactcomponent componentdidmount thisonchange gt thisforceupdate thisonchange callbackspush thisonchange componentwillunmount callbacks callbacksfilter c gt c thisonchange render return reactdomrender documentgetelementbyid container thanks dan helping reduce", "d": "4/2016"}, {"body": "known problem might cause otherwise happen something throws exception maybe even", "d": "4/2016"}, {"body": "spicyj almost certainly caused variant", "d": "4/2016"}, {"body": "exact duplicate nt want close one duplicate case something effect redux setting state component afterwhile reactrouter unmounting parent similar phenomenon occurs due unmount higher tree within transaction", "d": "4/2016"}, {"body": "well problem tried removing dev tools works", "d": "4/2016"}, {"body": "note exactly message depends render underlying issue explained", "d": "4/2016"}, {"body": "type things something engineer likes push library edge business requirement decrease friction increase conversion fact things working exception spaces email input field let think gotcha library", "d": "4/2016"}, {"body": "browser dom node returns value accurately reflect user sees complaining gotcha spec propagates become gotcha browser propagates become gotcha library marcolanaro said engineers trying helpful referring engineers wrote spec users react commentary intended apply infrastructure code browsersreactetc application code sorry ambiguity", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "thanks idea get closer keep suggestion mind maybe make little personal", "d": "4/2016"}, {"body": "going close since nt think something would invest would probably take pr anyone cares implement", "d": "4/2016"}, {"body": "sounds like add warn tell ca nt put body tag inside foreignobject nt anything much svg right probably ideal solution would pass namespace info distinguish svg html tags name like title make sure contents svg tag appropriate html tags sure html tags nt allowed might detailed spec", "d": "4/2016"}, {"body": "take one toddgeist", "d": "4/2016"}, {"body": "keyanzhang please", "d": "4/2016"}, {"body": "see crash release ios issue fixed", "d": "4/2016"}, {"body": "fixed scroll ios bug fixes see detailed commits fix native events coalesced sending js specifically touch scroll events order respect ordering", "d": "4/2016"}, {"body": "confused easy workaround issue even something like get problem even worse get endless loop since functions bound access solution see get actual expected behavior something like kind mess makes callback rather annoyingunreliable use made jsbin issue", "d": "4/2016"}, {"body": "vitalybe guessing many react examples use classes use trailingleading underscores method names bind constructor without underscore also guessing nt problem strangely enough would make cleaner use knowledgeable people tell wrong", "d": "4/2016"}, {"body": "confused easy workaround issue class properties arrow functions js class mycomponent extends reactcomponent callback gt consolelog render return function added class property makes sure binding always current instance roughly", "d": "4/2016"}, {"body": "vitalybe use case refs set instance field make absolutely difference whether reattached every render", "d": "4/2016"}, {"body": "gotobusstop thanks snippet indeed looks better gaearon problem causing proxy called ref callback function causing neverending loop merely saving element true would nt matter much mentioned several solutions issue thread think main point however current behaviour rather unexpected", "d": "4/2016"}, {"body": "probably throw early setstate ref callback nt think meant supported pattern", "d": "4/2016"}, {"body": "also experience issue rendering serverside", "d": "4/2016"}, {"body": "also getting issue since updating react solution find using flux wrapping line block unsatisfactory though prevent statechanging code reached server put statechanging code function including setting cookie way server never touches", "d": "4/2016"}, {"body": "mbrio jacksongariety browser guys using chance using chrome seen similar bug unable reproduce chrome wondering might chrome bug mbrio jacksongariety either provide jsfiddle demonstrates issue fork use get access serversiderendering logic need repro", "d": "4/2016"}, {"body": "jimfb update files server react think see error fiddle made", "d": "4/2016"}, {"body": "using get event emitter defined", "d": "4/2016"}, {"body": "using eventemitter cdn nt seen errors", "d": "4/2016"}, {"body": "jimfb succeed reproduce problem serverside rendering since update uncaughtexception react dom tree root always node reference invariant violation react dom tree root always node reference invariant webfrontgithubsfrontendnodemodulesfbjslibinvariantj getnodefrominstance webfrontgithubsfrontendnodemodulesreactlib reactdomcomponentmixingetnativenode webfrontgithubsfrontendnode objectreactreconcilergetnativenode webfrontgithubsfrontendnodem reactdomcomponentreactmultichildmixinupdatechildren webfrontgith reactdomcomponentreactmultichildmixinupdatechildren webfrontgithu reactdomcomponentmixinupdatedomchildren webfrontgithubsfrontend reactdomcomponentmixinupdatecomponent webfrontgithubsfrontendnod reactdomcomponentmixinreceivecomponent webfrontgithubsfrontendno reactdomcomponentwrapper receivecomponent objectreactreconcilerreceivecomponent webfrontgithubsfrontendnod reactcompositecomponentmixinupdaterenderedcomponent webfrontgithub reactcompositecomponentmixinperformcomponentupdate webfrontgithubs reactcompositecomponentmixinupdatecomponent webfrontgithubsfronten wrapper updatecomponent reactcompositecomponentmixinreceivecomponent webfrontgithubsfronte objectreactreconcilerreceivecomponent webfrontgithubsfrontendnod reactcompositecomponentmixinupdaterenderedcomponent webfrontgithub reactcompositecomponentmixinperformcomponentupdate webfrontgithubs reactcompositecomponentmixinupdatecomponent webfrontgithubsfronten wrapper updatecomponent reactcompositecomponentmixinreceivecomponent webfrontgithubsfronte", "d": "4/2016"}, {"body": "also getting error ssr updating", "d": "4/2016"}, {"body": "damienleroux gbhrdt sure couple fairly complicated repros lines dependencies like reactrouter redux similar bug may may related nt yet repro super simpleactionable demonstrates bug react oppose reactrouterredux answer question provide simple repro would still super helpful otherwise look issues loop back one later", "d": "4/2016"}, {"body": "damienleroux gbhrdt ok repro issues related anything dealing ssr yes still need repro", "d": "4/2016"}, {"body": "got problem firefox errors chrome possibly could related nodeenv productiondevelopment minification still trying find", "d": "4/2016"}, {"body": "getting serverside using rendertostring repro case js import react react import rendertostring reactdomserver const el reactcreateclass getinitialstate return foo bar componentwillmount settimeout gt thissetstate foo baz render return thisstatefoo const html rendertostring consolelog html compile w babel run node buildtjs bar throw error invariant violation react dom tree root always node reference invariant objectgetnodefrominstance objectreactdomidoperationsdangerouslyprocesschildrenupdates objectwrapper processchildrenupdates processqueue reactdomcomponentreactmultichildmixinupdatetextcontent reactdomcomponentmixinupdatedomchildren reactdomcomponentmixinupdatecomponent reactdomcomponentmixinreceivecomponent reactdomcomponentwrapper receivecomponent note error thrown second call", "d": "4/2016"}, {"body": "tootallnate feel like setstate called registered since setstate likely occur render occurred consider calling directly within using use case needs happen mounting sounds like usage error perhaps could warn case nt think ever supported pattern assuming regression related setting state component rendered everyone seeing behavior result something like tootallnate example think could close error warn situation", "d": "4/2016"}, {"body": "sounds like correct pattern example indeed explain situation bit would like find good pattern allow serverside wait component resolve sotospeak calling wellestablished recommended patterns", "d": "4/2016"}, {"body": "tootallnate yeah bunch people want features like see short answer nt good solution", "d": "4/2016"}, {"body": "also noticing problem server side pattern similar tootallnate specific case trying use reactrouter server side async routes want wait components resolve due code splitting etc using async routes reactrouter aka getcomponent getindexroute getchildroutes etc component immediately render since route resolved shown later route resolves state set via event listener attached componentwillmount shown client problem component renders server render run error thrown realize possibly addressed within reactrouter thought chime since seems relevant conversation", "d": "4/2016"}, {"body": "code linked calls directly settimeout legal entirely different example tootallnate showed anyone simple repro jsfiddle use settimeout amp friends", "d": "4/2016"}, {"body": "maybe one try render code server know rendering server exactly setup nt make lot sense get error sure firebase thing minified", "d": "4/2016"}, {"body": "fahrradflucht think basically tootallnate posted since calling callback async action invoked", "d": "4/2016"}, {"body": "jimfb lines see setstate actually wrapped event listener thus async similar calling settimeout", "d": "4/2016"}, {"body": "cc ryanflorence taion mjackson timdorr comment", "d": "4/2016"}, {"body": "ssr provide match essence resolves asynchronous props state passing execution callback nt using server", "d": "4/2016"}, {"body": "explain situation bit would like find good pattern allow serverside wait component resolve sotospeak calling rendertostring wellestablished recommended patterns tootallnate side note react starter kit discourage developers making react components render asynchronously favor async logic routing level example typical app route compatible universalrouter js import fetch corefetch import layout componentslayout import post post export default path posts id async action params const resp await fetch const data await respjson return title datatitle component", "d": "4/2016"}, {"body": "tootallnate explain situation bit would like find good pattern allow serverside wait component resolve sotospeak calling rendertostring wellestablished recommended patterns best thing look component tree prior rendering data fetching used tricks like static properties applied via decorator components special props read form depends controlling data flow component container would better async property support nt seem horizon near term meantime static props seem best way similar relay works", "d": "4/2016"}, {"body": "timdorr says react router used rendering server lowerlevel component receives state externally conjunction helper potentially asynchronously run match invoke callback match completed nt think move call potentially run synchronously want run initial render cases maybe need add invariant used rendering server", "d": "4/2016"}, {"body": "ssr provide essence resolves asynchronous props state passing execution callback nt using server actually currently possible use server could bit simpler merged question use instead server much convenient use client server eg used cc timdorr taion mjackson", "d": "4/2016"}, {"body": "runs within context resolving many effects asynchronously runs outside react context resolve asynchronous activity passing reactland may use server side duplicate behavior result us creating duplicate subscribers internal objects wasteful server app correct right way middlewares believe plan clean keep mind back days required api much job maybe need bring back sure regardless issue react repo nt really place discussing things", "d": "4/2016"}, {"body": "going close probably react issue per latest comment someone demonstrate react issue using jsfiddles reinvestigate", "d": "4/2016"}, {"body": "regression look history tapeventplugin react codebase see affected one recent refactorings internal code make guarantees api stability specifically changed arguments passed since effectively fork needs incorporate upstream changes compatible next release sent pr mirrors changes testing makes compatible react would expect also compatible final code changed since find pr closing please let us know issues cheers", "d": "4/2016"}, {"body": "nt realize tapeventplugin still maintained internally plan unifying two react support touch events outofthebox reason outofscope facebook usemaintain npm package nt two parallel copies code", "d": "4/2016"}, {"body": "nt think maintained per se internal refactoring changed argument order soprano went matching call sites changing happened include tapeventplugin make guarantees broken think remove core source code yeah means maintainers need track changes internal apis nt better solution right eventually might expose event system officially well dom configs addons taught us anything anything expose creates huge maintenance burden road creates significant delays development react please excuse us nt good story around right happy discuss handling taps separate issue though feel free file thanks", "d": "4/2016"}, {"body": "gaearon correct add comment plan rip core repository handled user land per", "d": "4/2016"}, {"body": "thanks guys reason remembered touch events detected without tapeventplugin installed tested longer case since chrome safari removed tap delays mobile pages probably time stop using tapeventplugin us onclick event gestures considering building higherordercomponents detect certainly wo nt quite happens wink", "d": "4/2016"}, {"body": "since chrome safari removed tap delays mobile pages probably time stop using tapeventplugin use onclick event", "d": "4/2016"}, {"body": "appsforartists since chrome safari removed tap delays mobile pages long take changes hit ios safari latest ios nt fast tap response", "d": "4/2016"}, {"body": "chicoxyzzy value permitted handful elements according html spec use data custom attributes", "d": "4/2016"}, {"body": "leaving open fix merged", "d": "4/2016"}, {"body": "believe fixed reopen", "d": "4/2016"}, {"body": "something causes nonpersistent events satisfy generational hypothesis way seems like relevant gc pauses really young gen", "d": "4/2016"}, {"body": "js gcs work would optimize copying collector case would essentially free except might cause frequent young gcs fine js engine chose different strategy would nt case gc general whether gc optimized whether uses copying collector specifically", "d": "4/2016"}, {"body": "fixed", "d": "4/2016"}, {"body": "see lot transactions like update attribute set innerhtml update styles set textcontent really happen addition ca nt see detailed content set innerhtml", "d": "4/2016"}, {"body": "see lot transactions like update attribute set innerhtml update styles set textcontent really happen yes although afaik might avoidable note dom operation necessarily expensive worry much unless really seem unexpected addition ca nt see detailed content set innerhtml operation name misleading actually using real nodes reading prohibitively expensive", "d": "4/2016"}, {"body": "jimfb far understand description issue suggests extent matters", "d": "4/2016"}, {"body": "returning promise would bad could argue creates dependency promises react library", "d": "4/2016"}, {"body": "hm seeing behavior nt think sort async update running redux input like wrappingparent form onchange event like might elegant solution works fine react caret jumps end input every time type reducer something like logic special things certain fields look putting repro jsfiddle like", "d": "4/2016"}, {"body": "chrisdavies think running different issue try upgrading react", "d": "4/2016"}, {"body": "yup thanks", "d": "4/2016"}, {"body": "would interested creating proof concept react", "d": "4/2016"}, {"body": "gaearon unfortunately familiar internals react hoping someone good understanding react internals would draw inspiration lib linked", "d": "4/2016"}, {"body": "unfortunately server rendering currently priority facebook dedicate enough time optimizations related give try might able help along way see example ambitious pr made external contributor significantly changed react renders text nodes would imagine look might least touch similar files plan introduce internal documentation yet however enthusiastic seeing people contribute areas enough resources please let us know like give try feel free create workinprogress pr ask questions stumble problems need clarification", "d": "4/2016"}, {"body": "gaearon thanks links look like something work hopefully time point give shot", "d": "4/2016"}, {"body": "jimfb rest ya fb thoughts potential api sort thing might able pr something quite sure everyone thinks reach coordinating identifiers different sort thing coordinating sort serverclient cache suggests thinking date flux store usecase", "d": "4/2016"}, {"body": "got warning anyone point explanation bit detail ty", "d": "4/2016"}, {"body": "newswim put code stackoverflow question link", "d": "4/2016"}, {"body": "newswim read controlled components uncontrolled components choose one preferably controlled components nt ever use uncontrolled components using controlled components make sure never pass react yes brigand correct better addressed stackoverflow", "d": "4/2016"}, {"body": "jimfb could issue reopened base comment", "d": "4/2016"}, {"body": "biblesyme experiencing latest version", "d": "4/2016"}, {"body": "example demonstrate lag exist without react sure reactrelated show fiddle", "d": "4/2016"}, {"body": "reactexample planjavascript jquery seems safari problem anybody could explain slow trigger touchstart safari solve problem enriquetuya gaearon jimfb", "d": "4/2016"}, {"body": "hi guys seems safari trigger touchstart slow alert slow nt know may ask time react support tap event seems difficult achieve", "d": "4/2016"}, {"body": "biblesyme check solved problem using plugin though ended using issue relates", "d": "4/2016"}, {"body": "think actually best practice follow syranide pointed classes would vote approach believe reasoning throwing error assigned state constructor sure hard would catch would bring react conventions close instead people using upgrading renaming methods", "d": "4/2016"}, {"body": "nodkz use parent component event target child component", "d": "4/2016"}, {"body": "heineiuo thanks works perfectly", "d": "4/2016"}, {"body": "afaik took element adding would recalc styles anyway definition took longest time period including etc benefit different elements could different delays oneneedstofitall", "d": "4/2016"}, {"body": "fwiw plan make changes current plan hand somebody community enough internal users facebook meaningfully evolve api spend lot time", "d": "4/2016"}, {"body": "getting issue upgrading react react packages including perf printexclusive etc works printwasted gives exception shown", "d": "4/2016"}, {"body": "sverrejoh running using", "d": "4/2016"}, {"body": "yes rest perf api works example changed branch everything works like double checked reactperf react dig around bit nt anything known", "d": "4/2016"}, {"body": "let reopen hear", "d": "4/2016"}, {"body": "working minutes started failing without anything strange", "d": "4/2016"}, {"body": "danita thanks info also stack trace error message first post", "d": "4/2016"}, {"body": "yes exposing object tried exposing working puzzling using full ecosystem babel webpack webpack dev server testing chrome", "d": "4/2016"}, {"body": "chance public project less consistently reproduce", "d": "4/2016"}, {"body": "technically means write hierarchy record code super fragile hard pin without specific component hierarchy happens cause", "d": "4/2016"}, {"body": "someone wants spend effort tracking would recommend add line add line please share relevant logs correspond id see message", "d": "4/2016"}, {"body": "gaearon thanks dan try setting see help unfortunately share project right client terms", "d": "4/2016"}, {"body": "danita yeah thought might case thanks taking time investigate", "d": "4/2016"}, {"body": "gaearon ok added lines managed also reproduce error find console log fyi app spa captured route long list items filtered certain criteria filtering items removed filtering", "d": "4/2016"}, {"body": "thank helpful dig see repro given new info", "d": "4/2016"}, {"body": "updating node npm solved problem thanks", "d": "4/2016"}, {"body": "problem throwinthetowel nt things learned along way jsxtransfomer biggest thing going actually creating script tags right order vital sourcemaps new function fun issues forget exactly test suite jsxtransformer testing issues", "d": "4/2016"}, {"body": "nope handle come never felt need write tests", "d": "4/2016"}, {"body": "wrote intention building us ship docs okay pull something like seems reasonable extended version babelstandalone got differing license bsd script vs mit babel babelstandlone facebook copyright header quite sure works guess keep copyright header unless relicense script mit", "d": "4/2016"}, {"body": "made something avoid setup process getting started nt transpile inline scripts html though easy support allows use jsx without setup build process", "d": "4/2016"}, {"body": "looking something use testingdevelopment take look completely unofficialunsupported transpile inline scripts html works pretty well needs", "d": "4/2016"}, {"body": "code bsd unlikely change essentially old jsxtransformer wrote react able redistribute maintain license lawyer alternatively make new package inverse", "d": "4/2016"}, {"body": "trying implement semantic html dropped use html head body tags neither required useful time accidentally added body tag around list divs forgetting use thinking good semantic element main body app content containing headerfooter see anyway resulting html outputs list divs wrapping tag kind errors occurred initial render attempt mutate dom get invariant violation error definitely debug warnings html head body tags", "d": "4/2016"}, {"body": "graue jimfb required check already something like getting following error clearly states problem", "d": "4/2016"}, {"body": "eeh think agree bulk bug already handled dom nesting validation let close untilunless driving use caseneed", "d": "4/2016"}, {"body": "assuming still place picking react declarations currently looking flow types deployed npm packages point might make sense react definitions deployed react release anyway pick react declarations copying projects cc sebmarkbage", "d": "4/2016"}, {"body": "particular facebookflux examples using flow picking see facebookflux", "d": "4/2016"}, {"body": "wanted add onto stacks deep starting see looks like bug chrome profiler hard see exactly appears stack getting huge falling flame graph placed right pretty deep sometimes deep component tree would nt bother much appears also causing profiler crash errors making difficult get good performance metrics application anymore", "d": "4/2016"}, {"body": "might better directed chrome team though paulirish might interested stack traces get smaller start tackling", "d": "4/2016"}, {"body": "prefer applying monkey patch fixed react wrapping testutils module function render component const renderer testutilscreaterenderer rendererrender component return patch renderergetrenderoutput function fixowner obj return objowner objectassign obj owner null objectassign obj function patch obj arrayisarray obj return objmap comp gt return fixchildren comp else obj fixowner obj objprops amp amp typeof objpropschildren object objprops fixowner objprops objpropschildren fixchildren objpropschildren return obj", "d": "4/2016"}, {"body": "fixed", "d": "4/2016"}, {"body": "thanks great discussion name kind makes sense since everyone calls common usagetechnique although used client side far less common name completely generalized completely precise specificmeaningful going close nothing actionable moment continue bikeshedding reopen ifwhen name change seems imminent", "d": "4/2016"}, {"body": "plan use apply custom function would describe alternatively use basic api also lets define custom operations hope helps", "d": "4/2016"}, {"body": "issue change get correct event information select element dom still reflects initial value second update selection change select element reflect true current selection way able fix use selected property elements mapping function course gets react warnings saying use value prop since working living warnings please fix", "d": "4/2016"}, {"body": "please try might contain fix need please create example reproducing issue", "d": "4/2016"}, {"body": "quicksnap need something output render div basically anyway future reference usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "4/2016"}, {"body": "problem forget specifics lately using enzyme stellar also wanted say thanks work cleaning open issues noticed tackling stuff closing things thanks work", "d": "4/2016"}, {"body": "yes form based proptypes allows live edit component would superuseful would cool get structure proptypes component said right quite hard possible get values etc proptypes", "d": "4/2016"}, {"body": "proptypes mostly legacy maintenance mode replaced tools like flow guess nt going add let close reopen thinking matter changes substantially", "d": "4/2016"}, {"body": "example provided jimfb accurate stand current version inferno", "d": "4/2016"}, {"body": "update suppose switch string constants one instance symbols would better", "d": "4/2016"}, {"body": "ffxsam pr running nt know status looks complete side maybe merged soon", "d": "4/2016"}, {"body": "still ironing move cutting branches decided expect get", "d": "4/2016"}, {"body": "number high often", "d": "4/2016"}, {"body": "current implementation buggy reality reports number times called fixed since code rewritten completely fix existing version", "d": "4/2016"}, {"body": "chulkilee send mail fb legals answer think really important concert anyone may face", "d": "4/2016"}, {"body": "let legal team know another place facebook get feedback developers put vote could find", "d": "4/2016"}, {"body": "mridgway issue turned issue objectassign package switching using returns keys wrong order object key become large ah sounds like really good reason seeing warning warning react attempted reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injected new markup compensate works lost many benefits server rendering instead figure markup generated different client server client ut id textfield value type text server ut id textfield type text value isomorphic app ca nt see reason key ordering different except saying thanks", "d": "4/2016"}, {"body": "think closed slightly outdated", "d": "4/2016"}, {"body": "deleted node module performed npm install fixed multiple react modules loaded", "d": "4/2016"}, {"body": "may happen run across error future recently saw error caused calling component unmounted caused asynchronous event assumed component still mounted although ismounted considered antipattern one possible use case see convenient", "d": "4/2016"}, {"body": "percyhanna saying error despite wording change provide failing test thanks", "d": "4/2016"}, {"body": "merely documenting problem ran solution since seemed slightly different issues described app nt gotten around upgrading past yet", "d": "4/2016"}, {"body": "app nt gotten around upgrading past yet got thanks worried missed case adding warning", "d": "4/2016"}, {"body": "agree tcurdt vague errors killing productivity know issue closed piling prolly nt help much massive problems trying update website work react know react theory nt hard one error causing lot grief clear happening happening causing etc", "d": "4/2016"}, {"body": "rosspatton chrome activate track component path breaking almost always rendering code throwing error preventing render completing", "d": "4/2016"}, {"body": "danita discovered way circumvent error forcing refresh webpack bundle", "d": "4/2016"}, {"body": "error message usually mean component threw initial mount look error message ignore see real error message", "d": "4/2016"}, {"body": "problem two react transforms transform catcherrors preventing catcherrors working incorporated error catching first transform able see exact error hmr continued effectively sunday april dan abramov notifications githubcom wrote error message usually mean render component threw initial mount look error message ignore see real error message receiving commented reply email directly view github james j womack senior software engineerarchitect netflix", "d": "4/2016"}, {"body": "sebmarkbage showing jayphelps think mentioned shortform twitter providing functionality would enable people something like following typical autocomplete example js import component react import boundsubject boundsubjectdecorator import rx rxjs export default mycomponent extends component boundsubject binds subject handlers subject instance keypresses new subject observe return compose keypresses throttle stream async auto complete data autocompletedata thiskeypresses map e gt etargetvalue throttle switchmap query gt getsomeajaxobservable query render return thisdataautocompletedatamap x gt x sure recommend people use pattern certainly could pretty ergonomic nice prefer mixing redux rxjs think better architecturally", "d": "4/2016"}, {"body": "seems working elegant opinion javascript static defaultprops somedefaultprops constructor props defaultprops super props defaultprops", "d": "4/2016"}, {"body": "fxhereng second argument reserved avoid overriding custom meaning might break future releases", "d": "4/2016"}, {"body": "ok gaearon best way set default props thanks", "d": "4/2016"}, {"body": "recommended way", "d": "4/2016"}, {"body": "use experimental transform use need changes constructor otherwise need assign outside", "d": "4/2016"}, {"body": "also", "d": "4/2016"}, {"body": "efernandesng supported pattern behave like mutates", "d": "4/2016"}, {"body": "ping spargonaut", "d": "4/2016"}, {"body": "howdy sorry radio silence responding original questions sooner coworker mine actually posted question account pairing project together last year hoping would responded detailed answer questions apparently unfortunately neither us project point unable provide fiddles however remember seeing issue several different browsers several different phones android ios application building also remember checked bug production version instagram time observed behavior yet unable verify form submitted iirc form get submitted tested application since ca nt provide fiddle ca nt provide information help troubleshoot given circumstances totally understand decide close issue appreciate yall following several times help us get resolved cheers", "d": "4/2016"}, {"body": "browsing good first bug list looks like one resolved jimfb would mind closing agree", "d": "4/2016"}, {"body": "yes correct thanks", "d": "4/2016"}, {"body": "iansinnott thanks sharing started using realized going need full api needed access individual matching groups regexp within replace function realized change simple patch require api change created new repo", "d": "4/2016"}, {"body": "throws invariant violation react dom tree root always node reference note work unmount subtree apparently unmount whole root unmounting batched differently updates", "d": "4/2016"}, {"body": "got tripped today closed give shot", "d": "4/2016"}, {"body": "performance question preferable always include ok omit undefined eg maybe browsers better optimize code shape objects always", "d": "4/2016"}, {"body": "elsassph keeping properties allows jit compilers match hidden class objects generally speaking give better performance", "d": "4/2016"}, {"body": "trueadm benefit anyway hidden classes suspect nothing gained context performance difference small spread whole project unlikely even measurable overdo actually increasing cost result dealing larger objects processing involved creating probably immeasurably would say largely counterproductive rendering large lists may good idea keep signature hidden class kept fast cache even doubt really measurable", "d": "4/2016"}, {"body": "syranide performance definitely make impact point good large lists virtual nodes need aggressively diff one many reasons inferno gets good performance especially comes complex node tress rapidly update keeping object shapes monomorphic give significant benefits regards decides spent countless hours going asm output using checking cases", "d": "4/2016"}, {"body": "performance definitely make impact point good large lists virtual nodes generally single code path repeated unusual setup mixing keys keys refs refs list keeping object shapes monomorphic give significant benefits yes preemptively adding unlikely matters creating elements otherwise exact signature uncommon react elements experience use ref frowned upon rarely used use key largely related intent component print unique react element signatures quite confident difference would small actual impact immeasurable nothing wrong reducing hidden classes preemptively adding null keyref seems entirely counterproductive general rule", "d": "4/2016"}, {"body": "syranide looks great benchmarks done right grand scheme things unlikely make much difference app code user created likely bottleneck case worth get free compiler level", "d": "4/2016"}, {"body": "thanks kind considerations facing making objects smaller including null properties vs shadow classes potential benefits", "d": "4/2016"}, {"body": "react team operating assumption better include nulls going close since babel plugin exists", "d": "4/2016"}, {"body": "could try one", "d": "4/2016"}, {"body": "sure", "d": "4/2016"}, {"body": "news", "d": "4/2016"}, {"body": "", "d": "4/2016"}, {"body": "change context walking children calling forceupdate contexttypes set context element works think would neat react helper function screen size changes translations global edit mode kinds seldomchanging things benefit context", "d": "4/2016"}, {"body": "wmertens returns elements components ca nt call forceupdate regardless op already linked relevant issue", "d": "4/2016"}, {"body": "fwiw maintain hot reloading purposes relies react internals", "d": "4/2016"}, {"body": "ok stick safe side continue using redux data would better stored context sometimes means store listeners page luckily nt seem impact performance use cases", "d": "4/2016"}, {"body": "looks like nodecache killed still issue", "d": "4/2016"}, {"body": "nope thank", "d": "4/2016"}, {"body": "wrapping children utility javascript import children react childrenfilter function children filterfn return children toarray children filter filterfn export default children using like bit shorter component code", "d": "4/2016"}, {"body": "suggest copying children object instead mutating clearer using util", "d": "4/2016"}, {"body": "thanks advice spicyj code updated javascript import children react export default objectassign children filter children filterfn return children toarray children filter filterfn", "d": "4/2016"}, {"body": "might helpful decide rewrite doc use spread operator", "d": "4/2016"}, {"body": "also kolodny interested direct people repo", "d": "4/2016"}, {"body": "handing community closing please see note", "d": "4/2016"}, {"body": "example componentdidmount windowaddeventlistener componentwillunmount windowremoveeventlistener handlewindowkeyboardpress event thispropsonkeypressed triggers datastore update emits change event ends invoking setstate call parent somewhere experiencing exact problem attaching handlers didmount removing willunmount still getting setstate warning updates regarding open issue even tried manually implementing ismounted verify still end warning crazy thing application still works fine generates ton warnings", "d": "4/2016"}, {"body": "even tried manually implementing ismounted verify still end warning yeah call something like unfortunately react emit warnings using deprecated flag", "d": "4/2016"}, {"body": "haha thank mean warnings setstate call something like bcomponentmounted avoid confusion", "d": "4/2016"}, {"body": "thheller agree order execution parent first old think quite relevant sebmarkbage common acceptable use case animations note absolutely want use reactstyle libraries since gets inefficient complex animations want squeeze maximum performance devices comes mobile devices consider case parent say strips dom inserts elements place artifical scroll bar could done way react needs knowledge nt affect render expect dom elements rendered point free mutate children long nt affect next render waking chain would expect thing children alas child see changes gets executed way nt make much sense method since example access mutated dom child say subscribe scroll events parent jump hoops set events make sane highly intuitive one would assume lifecycle hook exists interoperate dom since speaking purely academic manner would nt actually need hypothetically world everything done react way order makes unintuitive highly recommend considered bug design choices reevaluated ps talking order execution event like thheller mentioned render happens since logical way go child parent anyway", "d": "4/2016"}, {"body": "spicyj closed since removed right", "d": "4/2016"}, {"body": "yeah fixed thank", "d": "4/2016"}, {"body": "fwiw speak many sentry users also affecting including sentry team uses react let us know happy help make happen", "d": "4/2016"}, {"body": "summary try solve something also optimizing constraints react big downloadparse react ecosystem many optionsconfigurations learn react slow error messages short cryptic different tools nt work different combinations global configurationscompliers solving one issue time nt work constraint solving anyway came recently think react native issue solution suggested compile error codes put lookup somehow like syranide spicyj suggested stack traces minified compiled code often nt legible stack traces even stack frames debugging source maps reinsert well seems like much general problem though something ecosystem needs address like calls warnings nt think react repo hook solving general js problems maybe react spit stripping error message generating source map error code lookup file left minifiercompiler someone build solution babel adopt", "d": "4/2016"}, {"body": "like see javascript adopt standard exceptions actual concern generating consistent error messages nt think solutions like angular embedding urls trying add debug info needed rather need treat javascript like every programming language tools like sentry responsible parsing making sense errors higher level libraries frameworks nt obscure details nt know internals react concern ensuring errors least throw standard exceptions", "d": "4/2016"}, {"body": "note preserving error messages standard feature programming languages general many native application provide small coarse grained symbols systems like c java preserve nt deal problem download size memory usage error messages scale add lot bytes application stripping significant win could imagine compromise shorter messages need look means might well go way add error code right relative size pretty small plans focusing minimizing byte size react package concern people point messages represent significantly larger relative size start making impact expand problem relay react native becomes noticable course could put burden end user library eg nt compiler website nt get users suffer nt help cdn usage also good citizens community many sites nt advanced polyfill compiler solutions degree cater lower common denominator want provide decent solution existing tooling similarly include objectassign polyfill default even though could require polyfill nt really good standard solution global polyfills node example people get decent production set default happy transform spit unique error code message goes json file reference though way could restore error messages note thrown errors super helpful anyway less useful warnings curious see kind errors get much helpful", "d": "4/2016"}, {"body": "think bigger issue intentionally remove lot thrown errors together test adds execution time hot paths since errors left maybe nt matter anymore also nt solve issue really want ability add fine grained error tracking subset users include warnings new devtools plugin system hopefully let least profiling builds react", "d": "4/2016"}, {"body": "sebmarkbage note preserving error messages standard feature programming languages general many native application provide small coarse grained symbols typically affects symbols actual error messages thing gets removed production builds typically asserts go away error messages retained often show console elsewhere however rare case error get removed often function error raised named way becomes obvious stacktrace happened example ios core foundation execute code shows pretty clear stacktraces javascript theory sourcemaps however map locations symbol names would mean function name gets minimized really helping", "d": "4/2016"}, {"body": "generally dynamically linked right statically linked libraries like common ios optimize symbols unless debug symbols locally similar source map source maps include references source code ability expand stack trace frames eg function inlined reproduce stack trace react native error messages default example btw nt anything change execution flow modes lot production bugs due strategies past js native example network request mutation right assertion gets aborted development mode might look like small bug never know bad crash goes production network request mutation continues along pretty bad bugs due made intentional never change execution flow means nt strip assertions would crash throw development similarly want able strip expensive assertions turn logs instead throws", "d": "4/2016"}, {"body": "generally dynamically linked right statically linked libraries like common ios optimize symbols unless debug symbols locally similar source map think make distinction symbols error messages symbols solved problem native javascript debug symbolspdb files sourcemaps respectively hypothetically optimized exceptions would carry identifier used look useful information would already go ways hresult windows many ways like errno steroids resolved quite appropriate error messages without creating binary bloat", "d": "4/2016"}, {"body": "sebmarkbage completely understand agree unminified errors real live production app bad idea however would big help testingdebugging production build sandbox sometimes errors occur production nt occur development build think option unminified errors production build documentation explains drawbacks using anything testingdebugging would biggest win developers", "d": "4/2016"}, {"body": "example error noncontrived occurred production conceivable thing could happen extraordinary uncommon practice happen like know asap", "d": "4/2016"}, {"body": "jimfb definitely nt inconsistency development production builds react race condition code difference speed load time development production builds course affect race conditions unfortunately nt remember exact details know forgot wrap call using meteor somehow dev mode managed always run meteor ready anyway production ran soon tried access meteor feature nt yet loaded throwing exception nt remember exactly error got caught minified react though unless impossible userland race conditions throw errors would get caught minified react would think always possible instance component accidentally returns programmer mistakenly assumed certain asyncloaded data would present time renders possibility minified errors production exists", "d": "4/2016"}, {"body": "returning best example since programmers guarantee returns element way generate react error could think top head sure ways", "d": "4/2016"}, {"body": "tricky thing race conditions build better error messages potentially warnings still going performance impact main differences performance result us eliminating debugging information logic add info back production build performance characteristics likely resemble dev build throw errors would get caught minified react react wo nt catchminify userland codetraces userland code minified tool tool chain want unminified production build react build dev would get want unminified production build", "d": "4/2016"}, {"body": "think example mention requires middle ground build something expensive checks removed race condition gets hit time still nice debug messages problem different options create explosion different options could conceive configuration would catch scenario another configuration use explosion best practices depend whether someone hit particular scenario involved think configuration like needs high bar luckily talk profile configuration build set run near full speed retaining lot debug information profiling purposes designed used development machines perhaps scenario would satisfied option well", "d": "4/2016"}, {"body": "jimfb know think probably dealing error minified toolchain year ago really keep log tricky issues dealt marginal possibility userland code performing invalid react operations result race condition still exists seem way less likely userland code throwing another thing could help catch race conditions dev build babelplugintransformreactremoveproptypes assume checks biggest performance penalty devspecific feature sebmarkbage case profile configuration sounds good failed catch scenario like nt think would clamoring options point would hard predict would even effect race condition", "d": "4/2016"}, {"body": "issue easy fix add original error message reacts one done got stack trace miss original error description basically replaced nothing saying one react", "d": "4/2016"}, {"body": "error occurs stateless component defining like seems environments mine windows node node fine", "d": "4/2016"}, {"body": "jest remedy problem", "d": "4/2016"}, {"body": "wrong require contextjs files need access context variables methods encapsulation respected maybe well gaeron", "d": "4/2016"}, {"body": "cauburtin context useful change trigger rerendering unlike module exports overridden parent useful feature singleton useful server rendering want isolate data", "d": "4/2016"}, {"body": "agreed nt needed yet could pass react instance context often heard bad practice probably think even mentioned docs recall also pass entire react components props like props could singleton context instead case react view events listeners toproot remote control shared context would shared access remote control sub components update props change possibly access use global context fan singletons case particularly could reuse passing react instance props way useful passing less automatizedhidden common parent class composition well writing realize singleton context idea bad confusing react docs nt invite much use context like optional props actually get ask", "d": "4/2016"}, {"body": "implementing drawer android using react native trying create different file drawer menu code drawer content code created react component different able work file need drawer reference perform operations drawer component files code pass reference drawer component file use drawer methods like opendrawer use strict content component drawer need refer drawer reference drawerscreenjs use strict var react require reactnative var appregistry stylesheet text view dimensions image touchablehighlight textinput react var devicewidth dimensionsget window width var drawerscreen reactcreateclass render function return var styles stylesheetcreate container alignitems center justifycontent center flex flexdirection column inputfield backgroundcolor height", "d": "4/2016"}, {"body": "right using redux subscribe store mediaqueries components decide render differently eg phone means otherwise pure components need subscription store kind smells wrong mention subcriber model redux resulting whole lot subscriptions something rarely changes think case context much better place store issue prevents using", "d": "4/2016"}, {"body": "wmertens something need done componentdidmount right", "d": "4/2016"}, {"body": "cauburtin point user choose different language point user resize", "d": "4/2016"}, {"body": "resize could listen componentdidmount languages would rerender everything", "d": "4/2016"}, {"body": "prefer repeating resize logic something cool like redux actioncreator listens whole apo works server side stateresponsiveisphoneisprerenderscreenwidth etc server dispatch based user agent neat fri apr pm cyril auburtin notifications githubcom wrote resize could listen componentdidmount languages would rerender everything receiving mentioned reply email directly view github wout typed mobile excuse terseness", "d": "4/2016"}, {"body": "yeah simple key lang top tree suffice languages nice sites animations though fri apr pm wout mertens woutmertens gmailcom wrote prefer repeating resize logic something cool like redux actioncreator listens whole apo works server side stateresponsiveisphoneisprerenderscreenwidth etc server dispatch based user agent neat fri apr pm cyril auburtin notifications githubcom wrote resize could listen componentdidmount languages would rerender everything receiving mentioned reply email directly view github wout typed mobile excuse terseness wout typed mobile excuse terseness", "d": "4/2016"}, {"body": "like resize event listeners actually cheap nt think bad many type listeners", "d": "4/2016"}, {"body": "nono nt doubt cheap much easier write thiscontextisphone managing resize handlers fri apr pm cyril auburtin notifications githubcom wrote like resize event listeners actually cheap dont think bad many type listeners receiving mentioned reply email directly view github wout typed mobile excuse terseness", "d": "4/2016"}, {"body": "plan possibility approach could implemented work currently react errors", "d": "4/2016"}, {"body": "cased problems trying test view casper example tag caused test blow longer tag tag dom", "d": "4/2016"}, {"body": "dschinkel react removed attribute documentcreateelement datareactid", "d": "4/2016"}, {"body": "aweary clientside rendering ssr still", "d": "4/2016"}, {"body": "cool thanks aweary nt upgrade yet perfect jimfb ssr", "d": "4/2016"}, {"body": "plus lets say go existing react code lt say another application whatever need know resolve anyway via casper get working like continue pursue talking could", "d": "4/2016"}, {"body": "dschinkel ssr server side rendering", "d": "4/2016"}, {"body": "sure would impacting casper takes selector still select would assume anyway think commenting old issue nt appropriate place discuss though think specific issue react please open new issue test case run otherwise seems like potentially issue casper usage maybe querying dom component rendered would better discussed stack overflow potentially casper repository", "d": "4/2016"}, {"body": "cause problems looking seeing get casper play friendly fair enough", "d": "4/2016"}, {"body": "nt seen mentioned thread thusfar think solving also improves composability instance imagine grid want cells fade certain order ideally two components play one handle layout another handle animation api like would enable switch different layout different animation without one know implementation details would expect receive list children would intercept list inject appropriate styles andor event listeners return new list consume reason concerned laying grid except react elements ca nt return arrays render moreover simple way replace grid say masonry layout required act container children current limitations suppose could something like javascript springconfig springconfig gt cells fadeanimator render return reactcloneelement propswrapper null propschildren makes code less clear complex harder compose", "d": "4/2016"}, {"body": "get", "d": "4/2016"}, {"body": "ohai old issue ended fixing use keys tutorial", "d": "4/2016"}, {"body": "using react reactdom getting issue keys set options later console get select", "d": "4/2016"}, {"body": "taarimalta bug rcs fixed final comes week", "d": "4/2016"}, {"body": "handing community closing please see note", "d": "4/2016"}, {"body": "status", "d": "4/2016"}, {"body": "change invest js styles think end changes styles work mean time nt think make changes without fuller picture play", "d": "4/2016"}, {"body": "anyone stumbling around internet trying find fix volkanunsal right money similar situation focus call nt hitting element nt completely visible componentdidupdate ran suggested delaying focus requestanimationframe settimeout fixed issue although setting callback way gives error resolved dropping focus call function final resultl would look something like", "d": "4/2016"}, {"body": "pretty happy almost full svg support realising namespaced attributes like could nt apply render ok showing browser case want create image attributes necessary code wontn work probably related fact thanks using longer need maintain list svg tags svg tags previously unsupported work fine react", "d": "4/2016"}, {"body": "documentcreateelementns blog post little simplified used tag happen please file separate issue describing problem jsfiddle reproduces thanks", "d": "4/2016"}, {"body": "thank gaearon think happen render browser probably issue related pen shows rendered code generated missing least attrs case could file issue separately", "d": "4/2016"}, {"body": "yea missing progress work add", "d": "4/2016"}, {"body": "still see list supported tags reason chose support", "d": "4/2016"}, {"body": "shilpan tags supported list tells tags supported factory functions following svg elements supported reactdom emphasis mine use jsx need worry work jsx rely factories even use jsx use work fine create factory function", "d": "4/2016"}, {"body": "handing community closing please see note", "d": "4/2016"}, {"body": "think bug longer applicable suppose reopen secretly composite component anymore shallow rendering output single level", "d": "4/2016"}, {"body": "fixed", "d": "4/2016"}, {"body": "yamill method running bind onchange form like js onfieldchanged e thissetstate etargetname etargetvalue render work give advice thx", "d": "4/2016"}, {"body": "critical component even javascriptdependent application anything even utility provides eg need javascript use page even essential javascriptonly pages normal ones jpunt jimfb cc benkeen maybe uses rendering static markup client one react running clearly useless since javascript enabled browser hence contents may well exist reason tag even makes sense generate instead returning avoid invariant error react expects server side js var react require react var browser require libisbrowser var reactdom isbrowser reactdom require reactdomserver var noscript reactcreateclass moduleexports noscript want alias react server code resolve empty module since unlikely bundler figure rules place anyway use webpack add following configuration make sure load paths recommend since dependency clearer cleaner empty file project", "d": "4/2016"}, {"body": "react nulled many rootnodeid ideas generating ids nt good solution us since need unique id party components well wrapping party components something want avoid", "d": "4/2016"}, {"body": "could use weakmap store id instance never public api longer needed unique id composite components got rid depending use case perhaps refactor api thirdparty components wrapped wrapper generate id", "d": "4/2016"}, {"body": "spicyj trying make reduxdevtools time travelling feature actually replay inner component states use case able inject state object component id since instances get createddisposed time travel bottom line map consists comoponentid componentstate use id locate current component instance worked us react used internals though", "d": "4/2016"}, {"body": "also relying rootnodeid identifier cache component state componentwillunmount restore components user presses back button componentwillmount important use case us id perfect fit knew taking risk using internals still reliable alternative thought generating kind component xpath traversing hierarchy nt seem performant several components", "d": "4/2016"}, {"body": "ricardosoeiro approach describe fragile really supported looked using something like flux redux instead support exactly use case different explicit way", "d": "4/2016"}, {"body": "gaearon fluxredux support injecting inner component state thats need think ricardosoeiro solved problem travesing tree building id type elements tree code work ill post tomorrow", "d": "4/2016"}, {"body": "omerts meant external state containers reason convert components use external state rather try inject local state", "d": "4/2016"}, {"body": "gaearon mainly bcs party controls", "d": "4/2016"}, {"body": "omerts usually want depend thirdparty components offer controlled api like props definitely case components rely", "d": "4/2016"}, {"body": "gaearon would want convert external components maintain generic problem calls generic approach saying supported box seen use case pop several times deserves least fair discussion", "d": "4/2016"}, {"body": "omerts approach rely internals traverse component tree curious see code", "d": "4/2016"}, {"body": "saying supported box seen use case pop several times deserves least fair discussion agree discussed saying something like supported better rely proven solutions work well even require components controlled rather internals break every release likely break completely work incremental reconciler bundling react flat file", "d": "4/2016"}, {"body": "api obtain opaque identifier suggested would solve use case perfectly", "d": "4/2016"}, {"body": "gaearon many pary components like reacttoolbox inner states visual component state etc using reduxdevtools thanks way time travelling want see visual components inner states change well ricardosoeiro yes relay internals mainly traverse tree parent node creates id using namesdisplaynames constructors tree create quite long id necessarily unique exact component exact hierarchy parents return id works us maybe play get something better kind hashing shorten id javascript function buildkey component acckey component return acckey let currentkey acckey typeof componentcurrentelementtype function currentkey componentcurrentelementtypedisplayname componentcurrentelementtypename else currentkey componentcurrentelementtype return buildkey componentnativeparent currentkey using new reactinstrumenation api get internal instances mountunmount javascript import reactinstrumentation reactlibreactinstrumentation const eventhandlers onmountcomponent internalinstance onunmountcomponent internalinstance reactinstrumentationdebugtooladddevtool eventhandlers also agree unique persistent component id would make things much easier nt hard implement part core react nt mind working pull request nt objection facebook side unique component id", "d": "4/2016"}, {"body": "extremely annoying single onchange handler form using bubbling common pattern specially big forms console full warnings strange basically react throwing warning using something best practice book", "d": "4/2016"}, {"body": "react throwing warning using something best practice book opinion say opposite bad idea relies bubbling outside react hierarchy portable something find ui frameworks something could reimplement entirely opinoin even wish react would prevent possible source pain goes spirit react", "d": "4/2016"}, {"body": "syranide like dom events prop supported native components used listen bubbled change events bubbling appears inside react hierarchy since native introduced got right", "d": "4/2016"}, {"body": "wondering react mask component people recommend", "d": "4/2016"}, {"body": "sure lot still actionable best reraise relevant parts separate issues reference right consistent iterable thispropschildren cover clonewithprops reactcomponent good put addon npm module technically done separating main repo public injection apis rename lib internal react npm module use wzrdin package builds maybe come back priority right add new reactsvg npm package something considering decided delay well", "d": "4/2016"}, {"body": "also see error using ssr", "d": "4/2016"}, {"body": "check stackoverflow explains way address getting updates user dragging", "d": "4/2016"}, {"body": "update make use addon keep using fixed", "d": "4/2016"}, {"body": "nt supported solution general nt support defining custom event types reason nt global configuration makes interoperability difficult develop component requires tapeventplugin wo nt work someone nt load best recommendation need build component similar completely user space without depending react internals also possible fix reacttapeventplugin nt support ca nt guarantee still work future release", "d": "4/2016"}, {"body": "thanks spicyj quick update", "d": "4/2016"}, {"body": "seems recently got fixed react branch tried seems work well wo nt long reaches npm", "d": "4/2016"}, {"body": "rulatir gaearon free restrictions reason ca nt want oldstyle refs owned creator necessity obviously works react figure instance creator specific instances hence new refs api", "d": "4/2016"}]