[{"title": "error caused collectionadd collection changing", "body": "trying unreasonable nt seem broken master create collection decent length var collection new backbonecollection new backbonemodel new backbonemodel cases add new model may want remove existing one collectionon add function collectionat destroy adding new model certain position breaks things collectionadd new backbonemodel uncaught typeerror read property cid undefined", "num": "1604", "d": "8/2012"}, {"title": "custom indexes collection", "body": "would nice could specify custom indexes gets collection would faster sure best way declaring maybe array collection like cases large amounts data looping models efficient could stored item added collection could much faster", "num": "1600", "d": "8/2012"}, {"title": "backbone custom builds", "body": "thought great upgrade backbone release would split backbone modules events model view collection router sync separate files provide users ability make custom builds build tool grunt andor downloadbuilderjs think interested would work issue pull request", "num": "1598", "d": "8/2012"}, {"title": "time new version", "body": "last stable release march since plenty commits backwards incompatible plans round current pull requests issue new version seems like things still enough flux avoid calling good start getting real world use newer changes maybe", "num": "1594", "d": "8/2012"}, {"title": "documentation hide left bar rather text text", "body": "firefox window starts really narrow text navigation text page overlap seem happen chrome firefox matters besides bug would nice responsive design nav area hide window narrow starts narrow link context sensitive help backbone objects little room inside firebug moment useless rather link real documentation host copy thanks", "num": "1589", "d": "8/2012"}, {"title": "reference callbacks", "body": "hi working sort collectionrepository handle different collections imagine best interactive list renders collection contacts known users collection search results unkown users switching two collections done collectionrepository would like inform views item gets added removed reset gt bind internal backbone events view part bit tricky collections change whereas view listener reason wanted extend event functionality collectionrepository also handle collection events benefit would view listen collectionrepository totally independent much collections active concrete implementation would reference thiscallbacks callback list collections example var contactsrepository corerepositoryextend parse manually log whole repository object find thiscallbacks contains callbacks whereas collections nt hi hope unimportant get answer github already failed getting answer else regards bodo", "num": "1588", "d": "8/2012"}, {"title": "bindall render etc", "body": "simple question still necessary use initializing new views", "num": "1586", "d": "8/2012"}, {"title": "request better error message historystart", "body": "calling routes defined throws helpful", "num": "1584", "d": "8/2012"}, {"title": "validation occurs attributes set singleattr newval", "body": "similar issue brought set single attribute validate called attributes model passed instead one updated see issue action problem lies backbone validate function passed attribute modified attributes merged together calling validate change added commit updating attribute justify validating entire model several cases beneficial set validate single property instance validating input form input blur occurs provide immediate feedback user indicating field invalid", "num": "1581", "d": "8/2012"}, {"title": "views multiple modelscollections", "body": "often views rely multiple models andor collections standard convention modelcollection passing view constructor via special modelcollection key useful elegant situations multiple models collections passed views equally elegant pass nested objects view constructor ie model b b would helpful methods like new dispose multi modelcollection aware", "num": "1578", "d": "8/2012"}, {"title": "reusing options object subsequent calls collectionfetch add true results erroneous optionssuccess callbacks", "body": "optionssuccess field checked overwritten fetch routine follows presuming success set user first time around user reuses options object another fetch call think append case paginated collections implementation requires user either clean optionssuccess field fetch issued else second time around success going get called entire collection parameter nt necessarily bug tripped note documentation options object mutable library would helpful", "num": "1577", "d": "8/2012"}, {"title": "binding modelsave change event causes change event raised twice", "body": "related issue calling save within change event change event fired using backbone custom sync method imagine would occur default sync implementation call stack goes something like set myattr adds myattr pending line calls change change line raises change event previousattributesmyattr attributesmyattr change event handler calls save turn calls sync save success handler calls line modelset serverattrs options guessing validate result set method compares attributes previousattributes sees different adds myattr pending execution returns change event change line updates previousattributes attributes change sees pending items cause got readded raises another change event time previousattributesmyattr attributesmyattr execution continues sync success handler calls set previousattributes attributes equal nt add anything pending", "num": "1576", "d": "8/2012"}, {"title": "needs documentation modelcollection event callback arguments", "body": "example say documentation nt let know arguments expect receive", "num": "1575", "d": "8/2012"}, {"title": "feature make collection filtercollection return collection instance", "body": "example filtered thiscollectionfilter function model return modelget category actions returns array tojson method change filtered thiscollectionfiltercollection function model return modelget category actions returns collection tojson method reference", "num": "1572", "d": "8/2012"}, {"title": "collection within model updating changes save", "body": "non issue error part", "num": "1566", "d": "8/2012"}, {"title": "change column handled well clear", "body": "expect following code trigger change callback three times following code triggers twice modelon change dummy gt consolelog dummy change occurred modelset dummy true modelclear modelset dummy true modelset dummy false whereas change code following trigger three times modelon change dummy gt consolelog dummy change occurred modelset dummy true modelclear modelset dummy false modelset dummy true gut feeling dummy value cached due change callback registration clear executed cached value reset thus set value twice interleaved clear call nt trigger change dummy callback", "num": "1565", "d": "8/2012"}, {"title": "feature request collectionsrefresh", "body": "using backbonejs nodejs apps setup backbonejs code model property save database default value say checked added used collectionsreset bootstrap collections every page reload set models unchecked status get default checked back redirectingreloading page want method collection bootstrapping adds models collections feature already backbonejs meantime wrote bootstrap method collections", "num": "1564", "d": "8/2012"}, {"title": "collectionfetch returns empty collection sync override", "body": "overriding collectionsync modelsync prevent fetch twice modelfetch returns model response correctly collectionfetch collection response returns collection empty response correct collection coffeescript class mymodel sync method model options tmpmodel modelmanagermodels id method read tmpmodel optionssuccess tmpmodel tmpmodel correct model else backbonesync method model options class mycollection sync method collection options modelfetch success model response gt consolelog model returns correct model consolelog response returns correct model collectionfetch success collection response gt consolelog model returns empty collection consolelog response returns correct collection anticipated behaviour get collection response think able get collection edit anticipated behaviour optionssuccess returns response model collection edit", "num": "1563", "d": "8/2012"}, {"title": "docs state underscorejs xss sanitized", "body": "backbone agnostic respect preferred method html templating render function could even munge together html string use documentcreateelement generate dom tree however suggest choosing nice javascript templating library mustachejs hamljs eco fine alternatives underscorejs already page template available excellent choice already xsssanitized interpolated data underscore already supports sanitation imho default", "num": "1554", "d": "8/2012"}, {"title": "delegate event view return original event", "body": "process attributes need access event callback receive event object event object contain target child html element contain original event example text events click test func backbone uses yes okay maybe original returned argument dome example delegate eventdata ps course get access parent jquery parents adds complexity", "num": "1552", "d": "8/2012"}, {"title": "proxy events", "body": "often use rethrow events child object maybe helpful create simple proxy backbone yes use global events object cool think avoid problem", "num": "1548", "d": "8/2012"}, {"title": "combine hash routing pushstate", "body": "sometimes need support types routing one application possible yet", "num": "1547", "d": "8/2012"}, {"title": "destroy model trigger destroy event collection", "body": "sure intentional onmodelevent checks event destroy calls breaks event allows models propagate events collections", "num": "1546", "d": "8/2012"}, {"title": "tojson nt traverse entire tree collection model ca nt accessed properly", "body": "structure looks like call seems work top always empty try access consolelog see entire structure correctly objects populated point try directly access empty whether items inside even though consolelog showed populated", "num": "1544", "d": "8/2012"}, {"title": "request module seems affect backbone underscore behavior", "body": "usage module nodejs environment seems affect backbone underscore request module included backbone refuses set model values resulting error var backbone require backbone var request require request var model new backbonemodel modelset foo bar works modelset foo bar fails results typeerror thisidattribute attrs thisid attrs thisidattribute typeerror use operator search id bar extendset object modulecompile objectmoduleextensionsjs moduleload functionmoduleload modulerunmain processstartupprocessnexttickprocesstickcallback looking code set function seems passes object resulting error indicates underscore module affected well moving require statement passed model creation error longer appears created three simple setups investigate error setups found run node failing setup without request module require statement moved run node fails others pass run node setups pass module version used backbone master underscore request error generated backbone sure right project report root cause fix might node request underscore projects maybe issue reported", "num": "1543", "d": "8/2012"}, {"title": "set model sub attributes", "body": "example model set modelset namefirst artyom maybe helpful allow", "num": "1542", "d": "8/2012"}, {"title": "persistent dom xss found", "body": "hello folks example vulnerable dom xss since uses localstorage turn grave mimicking persistent xss chaining clickjacking drag amp drop shared environment poc exploit code enter following input box hit enter bish", "num": "1540", "d": "8/2012"}, {"title": "commandclick ctrlclick open new tab", "body": "backbonehistorynavigate functionality added open new tab ctrlclick cmdclick unable extend history function well following piece code could added functionality eventpreventdefault eventmetakey eventctrlkey windowopen locationorigin fragment blank thank", "num": "1538", "d": "8/2012"}, {"title": "create event differentiate sync create sync update", "body": "currently listen sync event backbone model manually detect status code newly created resources many times various listening views need know whether object created first time simply updated good reason could create event added triggered save method models", "num": "1536", "d": "8/2012"}, {"title": "modelsave model wait true fails merge serverattrs correctly", "body": "run issue saving model object wait true attributes server correctly merged existing clientside model attributes root issue seems modelsave success function uses extend attrs serverattrs paying attention possibility attrs may simple hash may instead model object model object serverattrs merged toplevel properties instead model attributes hash belong modelset function code results loss toplevel attributes merged serverattrs hash propose save success function changed detect whether attrs model object extract attributes way please advise missing something suspect server modifying attributes manner common scenario though seem valid", "num": "1533", "d": "8/2012"}, {"title": "empty backbonemodel object returned", "body": "var foomodel backbonemodelextend var foo new foomodel var status new foomodel var new foomodel consolelog foo outputs backbonemodel child consolelog status outputs empty object object object consolelog outputs backbonemodel child", "num": "1531", "d": "8/2012"}, {"title": "backbone custom interactions", "body": "textbox email also textboxes city state would make email required either city state filled without alot custom js write something built allow kind flexibility thanks much david", "num": "1530", "d": "8/2012"}, {"title": "tagname definition list", "body": "definition list item mapped view using template something like creating views dynamically problem set end markup like need way wrap element tag removing altogether stops things working solution", "num": "1529", "d": "8/2012"}, {"title": "exceptions thrown event listeners stops successive events triggered", "body": "running problem working large project lot moving pieces using centralized event system avoid coupling code bloat problem one event listener breaks causes listeners stop called worse bubbles exception code triggered event could put try catch block around trigger call would much better put trycatch blocks around call pull request forthcoming", "num": "1527", "d": "8/2012"}, {"title": "events broken using named function", "body": "changed little bit existing test reproduce issue difference using function name unbind event unbind nt tested older browsers really crazy one", "num": "1526", "d": "8/2012"}, {"title": "nt collection add always reference collection model", "body": "", "num": "1522", "d": "8/2012"}, {"title": "models ignorant collections reset event", "body": "asked question backbone reset event collection class got excellent answer solves problem extending collection class also really like know models intentionally ignorant collections reset event", "num": "1521", "d": "8/2012"}, {"body": "generic organize code question backbone question common requirejs modules return object rather instance object constructing new instances nt directly problem constructing collection nt fire xhr want instance give collection could pass around module object attach objects use shared namespace see module system", "d": "8/2012"}, {"body": "sure best solution making change solves problem would appreciate advice looks correct make pr test case", "d": "8/2012"}, {"body": "totally feel free add whatever indexes like collections", "d": "8/2012"}, {"body": "jashkenas even rc bump npm would nice starting share backbone code server sad realize today among additionsfixes nt available npm version months seems like quite bump active project", "d": "8/2012"}, {"body": "yep time", "d": "8/2012"}, {"body": "see sample", "d": "8/2012"}, {"body": "depends intended usage instance needed following contrived example methods bound via third argument handles context otherwise probably need bind via experience needed often js var view backboneviewextend events click render initialize function thismodelon change thisrender", "d": "8/2012"}, {"body": "mornin aeosynth thanks pointing stems fact created sure reason particular bit code perhaps default created dig bit", "d": "8/2012"}, {"body": "aeosynth causes created default avoiding error message described", "d": "8/2012"}, {"body": "braddunbar thanks", "d": "8/2012"}, {"body": "hi jasonmcaffee thanks issue instance validating input form input blur occurs provide immediate feedback user indicating field invalid nt see ca nt model considered invalid result truthy means return much little validation data need reason wo nt work", "d": "8/2012"}, {"body": "unfortunately nt work want validate field updated entire model expanded example bit demonstrate javascript validate function attrs log validate called n attrs keys attrs length keys attrs function key log validate called attr key var errors call set get validated point want validated user hasnt entered anything yet viewmodelset new val user leaves blur event want immediately provide feedback invalid nt want validate rest model attrs nt modified would mean would litter page validation messages inputs may times validation certain inputs performance hit current validation approach would ensure always suffer perf hit", "d": "8/2012"}, {"body": "may times validation certain inputs performance hit current validation approach would ensure always suffer perf hit validating attributes resource intensive probably take another approach user leaves blur event want immediately provide feedback invalid nt want validate rest model attrs nt modified would mean would litter page validation messages inputs model issue ui issue set flag input indicates whether focus yet display validation", "d": "8/2012"}, {"body": "ok give try please explain reasoning change words revalidating entire model property changed make sense comment line get behavior looking without additional work thanks", "d": "8/2012"}, {"body": "sure thing relvant reading want give look gist validating model whole specific attribute words value one attribute may affect validation another", "d": "8/2012"}, {"body": "backbone model nt suited use case setting property time immediately providing feedback property failed ui issue model part ui consider model issue put together demo functions way want conjunction backbonemodelbinder allows validation set attribute time validate attribute time submit form whole model validated error messages displayed invalid attribute created new type model applies modification allows set property time javascript fix backbone validation validates property set entire model temporarily set thisattributes validate called attributes changed passed override validate thisattributes back normal validate called risk breaking backbone changes validate function eg calls function validate called relies thisattributes function validateonlywhatchanged attrs options consolelog validateonlywhatchanged called var model backbonemodelextend override validate function validates changed validate validateonlywhatchanged thing needed fix previousattributes using modelset silent true part new function added backbonemodelbinder provides ability serializing inputs model form submit", "d": "8/2012"}, {"body": "mornin docyes thanks opening issue agree sometimes useful pass multiple modelscollections view however think convention pass separate option set also listening events multiple modelscollections usually means view split making support nonissue let keep conventions simple possible", "d": "8/2012"}, {"body": "hey braddunbar thanks giving thought one reason possibly sending one modelcollection view due lack polymorphic associations good thing core modelcollection agree sending options simple reasonable approach unfortunately data complex nuance even simplistic view possibly adding collections models notice plural new special constructor arguments added instance convention would conservative explicit enhancement thanks consideration either way", "d": "8/2012"}, {"body": "thanks explaining docyes sure situations describing experience nt use multiple models collections view unless absolutely breaking views respond one modelcollection turns much modular reusable code since case think backbone avoid encouraging pattern", "d": "8/2012"}, {"body": "np braddunbar suggesting case view nested sub views operate different modelcollection best practice pass via options space sure realities view onetoone relationship data objects entirely true complex application", "d": "8/2012"}, {"body": "pass one model listen events one model nt mean subviews ca nt operate different model usually models related relationships dictate view structure instance post needs render list comments post model would likely contain list comments ie could use initialize comment views inside parent view", "d": "8/2012"}, {"body": "unfortunately happens many models collections require various compositions per view perhaps decoupling composition separate object keeps things cleaner littering mutable objects supportive drive simplicity yet time convention needs merge core", "d": "8/2012"}, {"body": "mornin mfrobben version backbone using current master options passed fetch cloned let us know version nt work get fixed", "d": "8/2012"}, {"body": "mornin thanks pointing looks like dev branch indeed old version compat reasons", "d": "8/2012"}, {"body": "phdesign seeing happening default also given state incorrect inside nested change take look see fixes issue", "d": "8/2012"}, {"body": "thanks tim issue seems related pulled fix issue still occurring set function still sees previousattributes different attributes adds attribute pending second run thu aug pm tim griesser notifications githubcomwrote phdesign seeing happening default sync also given state previousattributes incorrect inside nested change take look see fixes issue reply email directly view github", "d": "8/2012"}, {"body": "looking", "d": "8/2012"}, {"body": "durp yep probably linked events section docs though", "d": "8/2012"}, {"body": "cases though example says seems like sometimes callbacks passed parameter similar makes hard add extra optional parameters callback called directly parameters passed callbacks backbone nt fully documented", "d": "8/2012"}, {"body": "event also receives argument one passed documented docs master fixed next release", "d": "8/2012"}, {"body": "ok cool thanks", "d": "8/2012"}, {"body": "nt coffeescript nt assume object property arguments automatically function", "d": "8/2012"}, {"body": "yes typo edit post issue still exists without typo", "d": "8/2012"}, {"body": "nt first example trigger times set agree case behavior seeing current github version backbone tried", "d": "8/2012"}, {"body": "nt checked old version honest check thank yes agree times tue aug tim griesser notifications githubcomwrote nt first example trigger times set dummy true clear dummy true dummy false agree case behavior seeing current github version backbone tried reply email directly view github", "d": "8/2012"}, {"body": "thing think like add models current collection instead replacing collection contents pass add true option fetch seen bootstrapping difficulty understanding would keep state page reloadscould elaborate", "d": "8/2012"}, {"body": "yes refresh page going lose state stored javascript memory nt want store checked database want store going put cookie session instead nt anything backbone particular", "d": "8/2012"}, {"body": "mornin artyomtrityak thanks opening issue sure element trying get fairly certain grab reference using one following eventtarget eventcurrenttarget eventdelegatetarget could bit specific maybe extra context code would help understand issue", "d": "8/2012"}, {"body": "oh sry missed eventcurrenttarget sorry", "d": "8/2012"}, {"body": "problem glad got worked", "d": "8/2012"}, {"body": "use notion event bus described link rethrow events dependency views would suggest use different event case listen reindex event views using event bus", "d": "8/2012"}, {"body": "hi artyomtrityak thanks opening issue actually discussed decided backbone proxy methodobject would added opinion explicitly triggering event nearly always better choice easier understand involves less indirection", "d": "8/2012"}, {"body": "hi koc could explain situation would need use pushstate hashchange never heard request", "d": "8/2012"}, {"body": "page photorotator uses pushstate pages viewing concrete photo comments map markers wher open marker popup using hashchange page anchor", "d": "8/2012"}, {"body": "gotcha thanks explanation problem never work crossbrowser manner since ie lt nt support pushstate opening pushstate page nonsupporting browser hashchange used fallback would therefore break functionality since backbone aims provide crossbrowser functionality feature never work", "d": "8/2012"}, {"body": "case browser nt support push state using redirects fallback hashchange obtain described behavior ugly hacking backbonejs", "d": "8/2012"}, {"body": "see case needed backbone support use case", "d": "8/2012"}, {"body": "hacking library seems bad best support core possible modify routing behavior via plugins", "d": "8/2012"}, {"body": "part nt possible running errors", "d": "8/2012"}, {"body": "method like please suggest change routing history without modifying core code good way", "d": "8/2012"}, {"body": "yes want provide functionality custom method fine way go", "d": "8/2012"}, {"body": "ok thank", "d": "8/2012"}, {"body": "oatkiller thanks opening issue nt seem problem triggering destroy events collections destroying models master", "d": "8/2012"}, {"body": "oatkiller unless objections going mark closed please feel free modify either test cases previous comment reproduce breaking unexpected behavior like discuss", "d": "8/2012"}, {"body": "apologies second look indeed seem mistaken", "d": "8/2012"}, {"body": "guess backbone nt support kind nesting box checkout backbone relational nt already", "d": "8/2012"}, {"body": "looks like request something make fail getting set improperly probably open similar issues underscore request backbone definitely culprit fwiw underscore using object constructor comparison may right think root cause somewhere node hurtrealbad", "d": "8/2012"}, {"body": "correction seems like actually happens overwrites anything thing living global local doesnt matter happens initially requiring request easily worked around loading request underscore backbone", "d": "8/2012"}, {"body": "easily worked around loading request underscore backbone relying order require statements good idea might always work especially modules play require statements might wrong order look like request even node issue open ticket request project thanks response", "d": "8/2012"}, {"body": "great mattijs would mind dropping link request ticket file", "d": "8/2012"}, {"body": "debugging testing look like bug node even knowtheory node issue found", "d": "8/2012"}, {"body": "wow pretty crazy object comparison constructor break like still curious including request would squash mattijs opened issues request even get eyes problem", "d": "8/2012"}, {"body": "open issue request yet thought opening one nodejs project would enough solve eventually could find reference request squashing nodejs issues shows request might even squash comparison somewhere trigger weird core behavior might well optimalisation thing test shows requiring module comparison like enough trigger altered behavior could mean request might fault since simply uses module turn requires module pretty crazy", "d": "8/2012"}, {"body": "looks like issue fixed soon", "d": "8/2012"}, {"body": "like modelset name name artyom name simple js object backbone model also backbone support sub attributes must manage like separated models artyom trityak notifications githubcom example model backbonemodelextend defaults name first last set modelset namefirst artyom maybe helpful allow reply email directly view github \u043c\u0430\u043a\u0441\u0438\u043c \u043a\u0438\u0441\u043b\u043e\u0432 mobile email kislovm gmailcom", "d": "8/2012"}, {"body": "yes case override total name object example already last name want set first name yes get object make change put back looks ugly would perfect put sub attrs listen changes event something like", "d": "8/2012"}, {"body": "found plugin allows thx anyone works totally overrides backbonemodel set function good", "d": "8/2012"}, {"body": "ca nt say surprised little demo app said pull request sanitizing contents pulled form prior creating new todo sure would welcome", "d": "8/2012"}, {"body": "people get inspired demo apps ending using production code suggest using handlebars mustache view engine get benefit auto escaping web plagued xss projects like backbone good community adopting safer methods defaults know things going even wicked", "d": "8/2012"}, {"body": "seem impression disagreed nt like said pull requests welcome purpose todo app demonstrate backbone basic feature set also presume addyosmani adapted myriad mvwtf frameworks unsurprised simple toy app nt sanitize input yet said nt think main demo app switch handlebarsmustache since point show basic features backbone", "d": "8/2012"}, {"body": "knowtheory one toylearning application purpose give developers basic view framework capable including handlebarsmustache saying people likely copy production scary might also taken backbone suggesting users opting specific templating library another probably nt want start arguments said pr autoescaping merged happily consider todomvc apps", "d": "8/2012"}, {"body": "value right way even examples help beginners get safe track templated properties simply wrapped additional dependencies needed", "d": "8/2012"}, {"body": "even easier matter using interpolate", "d": "8/2012"}, {"body": "factormystic agrees request examples design safe requiring devs sanitize user input manually nt worked else xss would nt still web security issue even decade backbone guru mustache equivalent fair job something even simpler great agree ith addyosmani backbone might promoting something manner yui yapp uses handlebars may could put notice could use one choice like yui done main sections", "d": "8/2012"}, {"body": "backbone docs already note use templating library choice", "d": "8/2012"}, {"body": "fixed disappointed trolling issue rather submitted change oh well", "d": "8/2012"}, {"body": "knowtheory understand disappointment intention definitely saying fix sharing concern promoting safe default security practices amongst developers common industry issue pointed security folks earlier well tweet pointed chrome xss auditor dom xss protection wo nt protect users nt meet chrome bad people need know getting end day", "d": "8/2012"}, {"body": "please note responsible disclosure like chrome bug report fixed shared", "d": "8/2012"}, {"body": "backbonehistory nothing events afraid", "d": "8/2012"}, {"body": "may rephrase question would best way implement cmdclick backbone", "d": "8/2012"}, {"body": "ah yep listen type click care middleclick commandclick controlclick open url desire", "d": "8/2012"}, {"body": "nt views interested new model ed collection nt working use case", "d": "8/2012"}, {"body": "case care difference singular model created vs us updated default method wanted get additional create event instead determine fact sync event", "d": "8/2012"}, {"body": "care singular model created ca nt use failing", "d": "8/2012"}, {"body": "method fire model updated return status code created return status right issue able always discriminate two would unfortunate pass custom success method every time call save get create event also nt want toplevel extension overriding save success method would also override anytime want oneoff custom success method elsewhere code know could also listen change id event still nt semantically say server created new single object code", "d": "8/2012"}, {"body": "exactly event specific ca nt use generic ca nt use singular callback elaboration bit use case would help", "d": "8/2012"}, {"body": "great use custom easy add takes little code", "d": "8/2012"}, {"body": "like braddunbar idea using method extend onto sync places use singular model need differentiate include singular membership object user joining group ticket event create implies new membership whereas update sync implies details membership updated representation singular currentuser authentication create implies login whereas update sync implies info user changed singular resource", "d": "8/2012"}, {"body": "moved pull request", "d": "8/2012"}, {"body": "hi denbad following appears work fine could elaborate bit problem", "d": "8/2012"}, {"body": "special magic global variable nt anything backbone particular", "d": "8/2012"}, {"body": "huh never heard one thanks jashkenas", "d": "8/2012"}, {"body": "thanks jashkenas", "d": "8/2012"}, {"body": "kind thing nothing particular backbone good luck js", "d": "8/2012"}, {"body": "could extended guess example tag element interactions attribute backbone could look atributes act accordingly yes try see get thanks date tue aug notifications githubcom backbone noreplygithubcom cc hotmailcom subject backbone backbone custom interactions kind thing nothing particular backbone good luck js", "d": "8/2012"}, {"body": "one points backbone move source truth dom view manage form user goes submit validate data form one shot dom attribute storage necessary", "d": "8/2012"}, {"body": "alright new backbone actually written light weight client side mvvm model trying figure incorporate interactions backbone seems promising thanks muchdate tue aug notifications githubcom backbone noreplygithubcom cc hotmailcom subject backbone backbone custom interactions one points backbone move source truth dom view manage form user goes submit validate data form one shot dom attribute storage necessary", "d": "8/2012"}, {"body": "backbone views required element bind events prior rendering case nt need wrapper element best bet append contents use change view current either parent node one subnodes eg note several downsides approach come think using definition list items backbone views one loose ability efficiently bind events view since either dealing multiple common events parent element manually bind things depending element passed", "d": "8/2012"}, {"body": "bunch ways work around fundamentally like model tree structure views going need tree structure pairs like save trouble use", "d": "8/2012"}, {"body": "hmm okay looks like going update html august jeremy ashkenas notifications githubcom wrote bunch ways work around fundamentally youd like model tree structure views going need tree structure pairs like save trouble use reply email directly view github fred kelly q email three sentences less", "d": "8/2012"}, {"body": "pull request", "d": "8/2012"}, {"body": "morning fracmak thanks isssue discussion subject consensus try blocks appropriate flow control understand concern suppressing errors inside event handlers much worse behavior skipping rest handlers something fails want know immediately continue though nothing happened", "d": "8/2012"}, {"body": "yet another reason nt want use named functions ie bugs surrounding pretty bad use variable instead", "d": "8/2012"}, {"body": "funny thing use named function well use cases binding event one works", "d": "8/2012"}, {"body": "also reading seems like use named functions nt mix named functions function expression giving function expression additionally name ie lt", "d": "8/2012"}, {"body": "passing named function callback works like mixed variant", "d": "8/2012"}, {"body": "hi kof thanks opening issue afraid nt quite understand question though referring arguments events something else collection add", "d": "8/2012"}, {"body": "sorry bad thought model created via collection add nt referenced collection model created directly", "d": "8/2012"}, {"body": "problem glad figured", "d": "8/2012"}, {"body": "juliankrispel thanks opening issue answer stackoverflow definitely pointed right direction try answer question backbone models unaware collection reset events due fact single model instance belong multiple collections although model canonical property nothing stopping would issues caused collection reset events bubbling models fwiw possible usecase would covered braddunbar patch", "d": "8/2012"}, {"body": "makes perfect sense thank", "d": "8/2012"}, {"body": "prefer fact dom events necessity separate model events outside previous technical issues raised logical reason mash model events dom events together viewevents hash would simple enough extend view modelevents hash facilitate simple mapping model events member methods would sane way go", "d": "8/2012"}, {"body": "need something similar extjs documentation", "d": "8/2012"}, {"body": "experiencing issue version canary upgraded version canary issue nt occur longer", "d": "8/2012"}, {"body": "issue appears resolved close", "d": "8/2012"}, {"body": "yep think", "d": "8/2012"}, {"body": "dont see assumption response clearly states header type applicationjson parse header nt match body clearly bug server side backbone need handle", "d": "8/2012"}, {"body": "rereading confused thought still talking request header response header says json sure json parsing would fine reopening", "d": "8/2012"}, {"body": "articles point towards using trigger true code smell thanks", "d": "8/2012"}, {"body": "nt articles forces serialize application state string url precise nt need calling javascript function much richer api pass objects references nt lose external state think backbone changing url browser dropping bookmark folks go back later thing need change application state", "d": "8/2012"}, {"body": "similar problem form validation system sets input value input change validate see error show error form case want set value model even valid keep model sync values form need also wanted special behavior assigning inputname nt match model attributes nested models collections handle values could one things modify code view set different values inputname patters view care mode edge cases override method backbone model overrides little bit messy backbone add event listener change handle edge cases last solution looks clean case use set attribute even validation fails event fired case showing probably related avoiding validation case jashkenas said add behavior edge cases case could solve firing change event manually view", "d": "8/2012"}, {"body": "endless loop wants fix forked file gives opportunity goes around circles opening losing windows", "d": "8/2012"}, {"body": "agree bit problematic understand validate method intended validate model form reasons form validation validate model attributes one time example number set operations row mode first set invalid nt want continue following sets point anyway workaround pass silent true sets let save operation call validate function", "d": "8/2012"}, {"body": "actually yes exactly operation supposed work batch changes desired run later", "d": "8/2012"}, {"body": "yeah spent trying figure one thedersen using validation library attrs passed validate function represents attrs changed line passed attrs reason merged thisattributes comment occurring would nice thisvalidate called attributes passed ultimately leads dom getting modified every attributes thedersen validation lib wrote override backonevalidate function essentially justs comments attribute merge trick worried side effects passing silent true cause validation occur need validation occur goal perform client side validation nt make round trip server want validate single input user leaves changes field provide immediate feedback indicating entered data bad format etc eg dollar field user enters tacos nt want make round trip server instead prebusiness logic validation occur immediately ultimately need easy way figuring attributes invalid commit thedersen pointed longer gives us ability", "d": "8/2012"}, {"body": "think behavior router route like resources id preview request url ex router execute preview preview still look url decide parse whatever router route like resources id querystring preview still execute preview query string extra parameter", "d": "8/2012"}, {"body": "ericjeedunn", "d": "8/2012"}, {"body": "jashkenas reopened open pull requests implementing behaviour described ericjeedunn", "d": "8/2012"}, {"body": "yep maybe incidental query param problem pretty damning clients add garbage query params similar things links", "d": "8/2012"}, {"body": "think ignoring search params altogether good thing foobar matches foobar conditionally ignoring based route pattern seems fraught problems happens load url search params hashchange browser also copy search string hash regular search changes one use transitioning back pushstate browser seems support query strings router must ignore hashchange browsers", "d": "8/2012"}, {"body": "something tacking query params onto urls hashes instance would become working patch moment", "d": "8/2012"}, {"body": "former exactly issue describing", "d": "8/2012"}, {"body": "taken quick stab major issue running already match getting passed case really sure resolve problem would change regex matching include pretty strong feeling going break existing code people field also issue precedence routes like one gets matched visit", "d": "8/2012"}, {"body": "approach trying trying route first query string intact query string removed runs problems listed", "d": "8/2012"}, {"body": "phleet cents think good guideline uri specs make regexp work way uri parser would expected function breaks existing code means people nt reasonable expectation matched routes therefore match likewise second example usually order matters programmer wants match list restrictive least restrictive expect library clever ought", "d": "8/2012"}, {"body": "stumbled across issue would like provide simple solution cases api framework treats urls without trailing slashes may confusing user entering result valid request webserver backbonejs router wont route apache modify htaccess redirect user nontrailingslash equivalent url rewrite trailing slashes nontrailingslash equivalents rewritecond requesturi nc rewriterule nc l", "d": "8/2012"}, {"body": "router initialization method manually added catchall route removes trailing slashes helpful anyone", "d": "8/2012"}, {"body": "", "d": "8/2012"}, {"body": "vincentbriglia thanks snippet removing trailing slashes added missing right function line added", "d": "8/2012"}, {"body": "issue everything works fine ffsafari chrome weirdness like forgets looses items history stack sometimes weird thing first time back button used navigate back previous route works fine second time nt using simple view manager like derick baileys manage switching top level application views following pattern shows behaviour describe start home click item navigation loads another top level application view eg shown corresponding view click back taken back homepage expected click another item navigation links another top level application view eg shown corresponding view click back point expect see home view reality taken back top level application view step eg almost browser nt register gone back first time trying replicate simple example outside app nt managed yet post discover anything", "d": "8/2012"}, {"body": "process navigate page trigger true passed", "d": "8/2012"}, {"body": "spent hours trying find method work application think bb docs include notification issue ugly quick solution call method actual one worked option would definitely use", "d": "8/2012"}, {"body": "played bit initial patch implementation understand optionspatch sync filled need set manually thanks", "d": "8/2012"}, {"body": "set use patch requests sending updates server default set must defined options calling assuming update new object nonetheless still need add tests ensure behavior correct", "d": "8/2012"}, {"body": "see nt sure understand correctly currently working patch support backbone app idea let determine changed decide method use without using change event", "d": "8/2012"}, {"body": "hongymagic inferred two points lost update problem certainly concern server needs handle problem ultimately fortunately http spec two conditional request headers apply nonsafe requests resource last response header used ensure state resource changed header present used instead one side note etags generally preferred http dates since resolution second proposing logic handle go backbone something consider general dealing updates something document general solution event handler could defined track etags last modified dates resources well add correct headers outgoing put patch requests quick untested interpretation javascript keep track response etag lastmodified dates var etags lastmodifieddates ajaxsend function event xhr options var etag lastmodified", "d": "8/2012"}, {"body": "well bad think patch concurrency issues great point easy correctly", "d": "8/2012"}, {"body": "still problem modelparse called reset nt want repeat duplicating code collection", "d": "8/2012"}, {"body": "jeremiahlee point routes evaluated order defined make sure add catch route end always", "d": "8/2012"}, {"body": "working multiple routers becomes issue needs better solution", "d": "8/2012"}, {"body": "running exact issue amp race condition going going hard define test case repro sometimes works sometimes nt", "d": "8/2012"}, {"body": "mikeobrien believe need ensure dom loaded like alekzonder work", "d": "8/2012"}, {"body": "yeah saw solution using requirejs initially impression require method called dom loaded wrong assumption alekzonder solution trick", "d": "8/2012"}, {"body": "ca nt load scripts bottom page would nt effectively remove need domready considering dom loaded time script tags parsed amp executed mark mcdonnell friday august mike obrien wrote yeah saw solution using requirejs initially impression require method called dom loaded wrong assumption alekzonder solution trick reply email directly view github", "d": "8/2012"}, {"body": "running exact issue years later due fact creation seen update instead create wrong event firing collectioncreate must depend sync event instead create event adding items collection deciding whether model new based whether id counterintuitive", "d": "8/2012"}, {"body": "updates missed function several projects added backbonejs sucks modify backbonejs every time new project", "d": "8/2012"}, {"body": "included reasons rarely ever come across case really needed", "d": "8/2012"}, {"body": "well look comments might one", "d": "8/2012"}, {"body": "paratron curiosity use underscore order need", "d": "8/2012"}, {"body": "objects extended backboneevents use objecton append event listener objectonce would cleanly apply event listener performs detaches using underscores method completely meaning", "d": "8/2012"}, {"body": "notice issue closed guessing wo nt fix workaround problem avoid data stomping described example", "d": "8/2012"}, {"body": "globexdesigns datastomping describe concern restful api whether using backbone optimistic locking would typically use scenario http added support optimistic locking new headers like etags ifmatch blog post detailed writeup topic restful service generates etags representation checks ifmatch header put delete modifications make sure clients nt stomping changes made since last retrieved data client code extended backbonemodel automatically extract etag header fetch called add ifmatch header save destroy calls calling save destroy model objects handle precondition failed results tell server data changed since last retrieved handle depends scenario perhaps simply refetch data reapply changes top may need user review changes first", "d": "8/2012"}, {"body": "jashkenas mentioned two reasons restful need restful library handy one concurrent updates problems nt fixed existing way avoids mutually conflicting attributes data stomping instead nt see reason existing approach reason proposed one avoid lots checks order save unchanged attributes server side cause event sourcing pollute history", "d": "8/2012"}, {"body": "ericwright concern restful apis obvious solution seriously put question usability looks like others tried fix issue introducing merge patch operations mix workaround proposed etags solution feels messy mention fact constant etag header parsing probably add significant performance overhead suppose disagreement restful design general simply nt work web application cases application got users making hundreds thousands requests per second restful full object data passing inefficient dangerous scenario real solution think case keeping backbone existing design place would work object update check server object changes may occurred ask user confirm object changed since last edited essentially means doubling number requests made server update ie check changes save object data written patch backbone adds partial boolean parameter backbonemodel objects enabled change save function send updated data something would considered pull request completely violate backbone structural design methodology", "d": "8/2012"}, {"body": "globexdesigns data stomping partial updates two different issues treated separately note partial updates help reduce frequency stomping users generally modify different data model proposed partial boolean parameter still nt prevent two users stomping modifying field model let stomping occur lastwritewins policy use optimistic locking approach etags prevent accidental overwrites come scheme like one proposed separate issue open adding patch support backbone worth reading discussion since covers many issues given rails server technologies adding patch support seems likely backbone go route rather adding partial put support nevertheless since already written partial put support could submit pull request see jashkenas says", "d": "8/2012"}, {"body": "practicality camp models sometimes include denormalized data multiple serverside entities one update care entity id data transferred presentation ui example address models country region city convert address json server encode current country countryid countryname region city user interface uses autocomplete fields dynamically select existing country region within country city within region update nt need want names need ids would favor approach could supply either blacklist fields exclude updates easy way filter values overriding tojson right way", "d": "8/2012"}]