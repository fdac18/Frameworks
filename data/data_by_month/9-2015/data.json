[{"title": "warn input value null", "body": "passing indicates user tried specify value eg database nt notice value null seems like warning normally treat null undefined case passing null indicates error therefore discouraged user decide want uncontrolled component case pass undefined want empty controlled component case pass empty string spicyj said would fine warning andor treating null empty string making errorwarning advantage easy upgrade path fix warning without us introducing subtle changes behavior break people apps", "num": "5013", "d": "9/2015"}, {"title": "make reacttransitionchildmapping flattenchildren public api", "body": "created pr issue able use long time using fork course relies looks like kind approach longer possible deeply intertwined lot react internals possible use internals people could create innovative new components example long wanted create variation automatically staggers child entry even children added time classic staggered animation effect would quite useful", "num": "5012", "d": "9/2015"}, {"title": "still seeing original setstate warning mounted component missing component name", "body": "using install warning shows call one alt stores really confused commented component listening store still see warning improved error message could help", "num": "5011", "d": "9/2015"}, {"title": "standard mixin substitute classes", "body": "well used reactonclickoutside mixin detecting mouse clicks outside react component used classes proposed wrapper functionhigherorder componentdecorator pr pomaxreactonclickoutside author pomax asked check find whether aligns might become official approach realizing mixinlike functionality classes merges seems becoming de facto standard couple larger libraries following approach including yahoo fluxible connecttostores material ui themedecorator relay syntax also appears similar intended use documented changes pr mentioned", "num": "5010", "d": "9/2015"}, {"title": "testutilssimulatekeydown trigger onchange event", "body": "hi guys testing react component js class numericinput extends reactcomponent js beforeeach gt onchange jasminecreatespy onchange numericinput rewire numericinput renderednumericinput testutilsrenderintodocument inputnode reactfinddomnode testutilsfindrendereddomcomponentwithtag renderednumericinput input call onchange user press enter key gt testutilssimulatekeydown inputnode keycode expect onchangecallscount toequal default view type onkeydown triggered onchange unit test trigger onchange", "num": "5006", "d": "9/2015"}, {"title": "strange optimization production mode", "body": "version brings performance optimisations unfortunately behave differently react compiled development production mode confusing code works one mode still work development mode fiddle logs react behavior production mode fiddle logs optimization seems trigger component reference nt change fiddle uses production build child component always new instance works expected production mode workaround", "num": "5005", "d": "9/2015"}, {"title": "findcomponentroot unable find element error thrown reactdomfinddomnode called componentwillmount new renders", "body": "recently ran error updating pile hunting thinking might related changes made nt test component right update made major changes even discarding experiment thought fault finally realized error called call made inside valid alphas change nt documented context error message would appreciated current wording mislead developers looking bugs wrong places since calling nothing mutating dom changes dom setup", "num": "4999", "d": "9/2015"}, {"title": "react nt follows semver", "body": "almost every release introduces breaking changes would easier maintain react bumped first digit version every time breaking change", "num": "4998", "d": "9/2015"}, {"title": "react videoaudio support", "body": "", "num": "4997", "d": "9/2015"}, {"title": "make traverseallchildren object invariant nicer passing probablyoldreactelement type props typeof", "body": "", "num": "4996", "d": "9/2015"}, {"title": "prefixed order css style get px appended", "body": "explained doc style one appended safari work need specify get appended even coerce integer string", "num": "4994", "d": "9/2015"}, {"title": "find performant way update without building whole element tree", "body": "scroll animations react components found state passing via props terribly slow wo nt help change instead using refs let new scroll position trickle via works well one big downside declarative anymore need keep things sync manually bummer opening issue discuss ways could drastically improve animations react could also benefit modules reactmotion basically know nothing internals react apiuser perspective imagine following allow percomponent opt separation react elements property new react element maybe sth like styleless plain find name allow warns debug mode new component similar component accepts props maybe state also requires parent component method returns plain object style keyvalue rerendering style diffed previous changes applied parent component node style component updated independent parent gives performance boost move fastchanging props like away actual component stylecomponent boom thoughts top end simple demo make point screenshot looks like toggle based animation refs based approach animated items believe separating property rest result similar performance gains still declarative single source truth allowing clean separation", "num": "4992", "d": "9/2015"}, {"title": "reactchildrenmap return fragment", "body": "found issue today would like talk seems like issue relies fact possible transform another object passed mostly works thinks single opaque child time cases someone would like something else result ie get element index iterate problem unlikely authors write legit workaround issue one replicate approach children exactly found internal methods implementation allow something like fills essentially map tackle issue authors would need implement method hand rely fact nt change approach nt return array nt seem break backward compatibility nt another returns array", "num": "4991", "d": "9/2015"}, {"title": "warning component react component classes must extend reactcomponent", "body": "transpiled babeljs observed modern browsers js class example extends reactcomponent render return null reactdomrender reactcreateelement example documentbody warning component react component classes must extend reactcomponent possible actually issue babeljs really sure cc spicyj", "num": "4990", "d": "9/2015"}, {"title": "provide arguments render function", "body": "since would convenient transition statefull ones minimal changes", "num": "4989", "d": "9/2015"}, {"title": "question following guide reactnative native modules android throws error", "body": "hi devs process creating native modules android following mentioned get error app compilation error anexamplereactpackage abstract override abstract method createviewmanagers reactapplicationcontext reactpackage thanks", "num": "4986", "d": "9/2015"}, {"title": "context documented", "body": "gamechanger incredibly useful piece functionality saves adding extra complexity app using fluxreduxetc curious documented", "num": "4984", "d": "9/2015"}, {"title": "throwing components difficult debug", "body": "ran similar situation couple times component throws reason got weird prop got upset stack trace however nt tell anything nt even point nonreact frames one outermost component throwing component would great situation like easier debug particular seeing state parent component would help lot", "num": "4982", "d": "9/2015"}, {"title": "htmldompropertyconfig include integrity sri", "body": "subresource integrity defines integrity attribute attribute defined htmldompropertyconfig included html rendered server", "num": "4979", "d": "9/2015"}, {"title": "docswebsite request performance statistics", "body": "would valuable react performance stats documented mean whole page petehunt content would great callouts details around performance", "num": "4974", "d": "9/2015"}, {"title": "better test facilities stateless components", "body": "originally left comment felt might better separate issue completely agree rationale behind backing instances refs stateless components want use pure stateless components much possible however running instances testing stateless components gets tricky part using shallow renderer render stateless component fine make assertions expected props children reduce duplication abstract shallow renderer process helper function want test events though take different route component takes prop wrap class component access dom node simulate click event nt huge deal abstract wraprender process helper function bring feel would nice better facilities stateless components nt think answer allowing work stateless components opens abuse normal application code open allowing extra functions simplify process testing stateless components creating code smell testing happy create pr think helper functions stateless components would beneficial", "num": "4972", "d": "9/2015"}, {"title": "testing scrolling events scrolltop scrollheight", "body": "ca nt seem set scrolltop even simulate scroll component within unit tests example debugging seems scrolltop set still scroll handler get called scrolltop still returns scrollheight also returns normally thats cant scroll elements seem right height smaller contained object height etc render function elements html", "num": "4971", "d": "9/2015"}, {"title": "style working newly constructed component", "body": "trying pass higher order component wraps another component want construct new div one new properties injected especially interested style property styles apply react treats like another properties proper behavior", "num": "4970", "d": "9/2015"}, {"title": "release version update semver", "body": "react proven stable technology amazing thriving community around think update semver", "num": "4969", "d": "9/2015"}, {"title": "click events swallowed svg elements ie", "body": "managed replicate edge lt chrome firefox created demo issue jsbin using common svg element linking common svg icons linking icons tag inside anchor click events icon bubble onclick handlers anchor example common svg element icon make link containing icon nt supported react yet use click svg onclick handlers anchor run temporary workaround setting svg element inside anchor might dupe", "num": "4963", "d": "9/2015"}, {"title": "reuse", "body": "look code want reuse invoked every time means totally new could one explain behaviour thanks import react react class indexcomponent extends reactcomponent constructor props context super props context consolelog constructor called called many times class detailcomponent extends reactcomponent render return detail back index let indexelement let detailelement let let app reactcreateclass reactrender documentgetelementbyid mountdom", "num": "4962", "d": "9/2015"}, {"title": "expected flush transaction stored dirtycomponents length match dirtycomponents array length", "body": "seen error handful times production since switching idea causing point", "num": "4958", "d": "9/2015"}, {"title": "invariant violation reactowner refs", "body": "get error whenever try use plugin references yuanyanboron casesandbergreactbounds since others nt complaining issue repos bound think might something setup someone help resolve issue", "num": "4957", "d": "9/2015"}, {"title": "reacttransitiongroup consume prop", "body": "given prop pass prop passing factory component also uses prop similar fashion result warning legitimate use consuming prop doubles problem since causes warning requires component child must also make sure component prop nt equal whoops forgot exists", "num": "4954", "d": "9/2015"}, {"title": "scryrendereddomcomponentswithclass multiple class names", "body": "tests failing accept multiple class names anymore eg testing node multiple classes giving result change api necessary test kind nodes", "num": "4952", "d": "9/2015"}, {"title": "eventcurrenttarget ca nt specified testutilssimulate", "body": "element listener uses currenttarget stuff test saw using simulate trigger event matter specify currenttarget always original element dumb example click log target tagname currenttarget tagname expecting listener checked currenttargettagname would get current get actual element target got think right value target name instead element", "num": "4950", "d": "9/2015"}, {"title": "csstransitiongroup animation nt occur one operated", "body": "demo say wan na remove first item list transition occurred last item instead first one could confusing since users might think remove wrong one miss something suggest would appreciated", "num": "4949", "d": "9/2015"}, {"title": "reactaddonstestutils invariant violation body tag", "body": "latest react trying render component body tag get simple component var instance testutilsrenderintodocument reactcreateelement testcomponent null var elements testutilsscryrendereddomcomponentswithtag instance button consolelog elements returns error replace body tags something else everything works", "num": "4948", "d": "9/2015"}, {"title": "warn ref attached stateless component", "body": "warn ref attached stateless component background see", "num": "4939", "d": "9/2015"}, {"title": "reactjs requires reactdomjs", "body": "means custom react implementations use reactdependent libraries reactrouter without preventing reactdefaultinjectioninject running also results fair amount bloat unnecessary domrelated files included build understand react core reactdom separate prevent issue would react core transitively require reactdom would nt also prevent someone using reactrouter reactnative cc mjackson ryanflorence case missing obvious solution thanks", "num": "4938", "d": "9/2015"}, {"title": "classes nt bring anything table", "body": "see advantages disadvantages implemented already hate bind dealing constructors foo extends bar extends extends baz extends base mixins nice way mixin traitlike objects nt deal constructors messing things huge step backwards backbone era brainwashing another generations prejava noobs think side effect sputtering class hierarchies somehow better rant", "num": "4937", "d": "9/2015"}, {"title": "refs nt work stateless components", "body": "realize extent intended behavior stateless components public instance could nt find much way conversation around behavior chosen right good way parent component even know ref going work component rational behind allowing dom access stateless component seems like instance expose proper behavior would return dom node whatever underlying thing directly like dom components current behavior surprising seems inverted component never going reasonably able know parent needs access dom node parent way knowing components stateless know wrap right need wait something silently nt work least stateless component ref throw though would last resort concession mind", "num": "4936", "d": "9/2015"}, {"title": "refs child inside function", "body": "using ref inside child function refs set inside result function undefined owner normal js class container extends component render return thispropschildren class demo extends reactcomponent componentdidmount consolelog thisrefsinner undefined render return gt gt", "num": "4934", "d": "9/2015"}, {"title": "classname prop working custom dom elements", "body": "prop appear get mapped correctly applied custom dom elements jsfiddle", "num": "4933", "d": "9/2015"}, {"title": "controlled radio button component update", "body": "running across issue one components used showing group radio buttons radio button elements controlled using checked defaultchecked use callback prop change state parent component determines one selected first click radio button works second subsequent clicks update radio button show checked example code exhibits issue thought might related key element using radio button value key element unique help appreciated", "num": "4930", "d": "9/2015"}, {"title": "remove eventpath synthetic events", "body": "nt meant stick around disabled pathbased bubbling", "num": "4929", "d": "9/2015"}, {"title": "whitespace preceding inline comment table", "body": "put inline comment jsx document table cell first time renders everything looks fine rerenders hits error cant find dom node happening space turned additional whitespace child browser throws unintuitive thing comment nt line trailing whitespace whitespace would instead stripped understand jsx transformer contentunaware totally makes sense happening bit gotcha coming programmingmarkup languages figured would report see come solution maybe tablerelated components could smarter filtering whitespace children since invalid far know obviously work around butting comment cell", "num": "4928", "d": "9/2015"}, {"title": "switch entirely gulp", "body": "build process sort resembles frankenstein monster point bad nt shell gulp grunt move utils zertosh already working", "num": "4927", "d": "9/2015"}, {"title": "invalid checksum textarea redux form", "body": "hi guys error quite new react helps much appreciated thanks", "num": "4926", "d": "9/2015"}, {"title": "trigger unmount action tests render returned null", "body": "hey way found unmount component tests render component return method also returns able unmount component workarounds ps talking", "num": "4925", "d": "9/2015"}, {"title": "guide implement new rendering option", "body": "hi want know whether guide implement new rendering option react like way react native say use features react render new kind objects instead html dom found session find detail", "num": "4924", "d": "9/2015"}, {"title": "opensource textarea editor build react", "body": "good opensource textarea editor build react need function like make header like italic introduce thank", "num": "4923", "d": "9/2015"}, {"title": "css hover state sticks removing dom elements", "body": "got bunch tags using click tag remove hover state maintained see screencap mac os chrome", "num": "4922", "d": "9/2015"}, {"title": "proposal alternative reactcreateelement api jsx output", "body": "problem current reactcreateelement api quite limiting regards control flow statements consider following example happily transformed soon try wrap jsx statement component ex div blows javascript condition hello world would transformed invalid js reactcreateelement set workarounds course workaround issue using ternary expression usable trivial bodies javascript condition hello null temporary variable body complicated javascript var conditionresult condition conditionresult hello conditionresult splitting html hurts readability quite lot eyes worse forced splitting choice least proposed solution change overload reactcreateelement signature list childrens single append function appendfn approach work let explain examples javascript simple jsx hello world current js output reactcreateelement div id msg hello reactcreateelement b null world proposed js output using new signature reactcreateelement div id msg append gt append hello append reactcreateelement b null world append nothing happens children old signature anyway appends component big difference function body instead limiting parameter list gt big win examples control flow statements javascript example hello condition world current js output valid reactcreateelement div id msg hello condition reactcreateelement b null world proposed js output valid reactcreateelement div id msg append gt append hello condition append reactcreateelement b null world javascript switch example hello switch value case foo foooo break case bar baaar break default world current js output valid proposed js output reactcreateelement div id msg append gt append hello switch value case foo append reactcreateelement b null foooo break case bar append reactcreateelement b null baaar break default append reactcreateelement b null world javascript example hello var person persons personname current js output valid proposed js output use native js loops instead depending arraymap reactcreateelement div id msg append gt append hello var person persons append reactcreateelement b null personname background roots web developer lie razor template syntax allows mix c html much like jsx js html felt strong connection towards react right first day mixing programming language html already felt natural gap left feel flexible back old days razor issue try address post hope consider approach make react even awesome already", "num": "4920", "d": "9/2015"}, {"title": "support full component lifecycle shallow rendering", "body": "extracted separate issue put together sidebyside comparison lifecycle support normal rendering shallow rendering output using normal rendering output using shallow rendering happy look pr although sure quite start would done shallow renderer pushed custom transaction mentioned", "num": "4919", "d": "9/2015"}, {"title": "support symbols proptype", "body": "would open support symbols proptype moment testing custom proptype functions", "num": "4917", "d": "9/2015"}, {"title": "displayname set minifiying stateless function components via webpack", "body": "given component defined minified webpack uglifyjsplugin get components displayname react browser tools", "num": "4915", "d": "9/2015"}, {"title": "document reactrender may return null component nt instancestate", "body": "assuming keep behavior worth noting documentation reactrender may return null cases component nt instance state", "num": "4913", "d": "9/2015"}, {"title": "reacttestutils scryrendereddomcomponentswithclassfindrendereddomcomponentwithclass handle svg classnames", "body": "svg classnames raw strings reacttestutils handle format svg elements classname ie", "num": "4912", "d": "9/2015"}, {"title": "instances reactperf correlate", "body": "issues trying figure reference reactperf refer amount times component created refer amount children components component created something else entirely thanks", "num": "4911", "d": "9/2015"}, {"title": "confusing stack traces exceptions render", "body": "put inside render function got stacktrace none code wrote none points component failed using classes instead reactcreateclass may may relevant", "num": "4910", "d": "9/2015"}, {"title": "reactaddonscreatefragment warning message", "body": "got message warning use keyed object wrapped reactaddonscreatefragment object passed child wondering easy would add sort stack trace could see offending code", "num": "4909", "d": "9/2015"}, {"title": "xmlns xlink svg namespaced attrs supported", "body": "moment try use element get following error namespace tags supported reactjsx xml namespaces required effective use svg design decision allow namespaced tags feature needs implementing", "num": "4908", "d": "9/2015"}, {"title": "csstransitiongroup remove dom elements reliably inc video example", "body": "started playing around csstransitiongroup encountering intermittent bug appears result race condition bug results classes added causing warning appear console issue appears trigging many updates csstransitiongroup relatively quick succession using latest version chrome ubuntu created video demoing bug", "num": "4907", "d": "9/2015"}, {"title": "schema tags different client server", "body": "hi guys getting annoying error currently following giving following warning react attempted reuse markup container checksum invalid generally means using server rendering markup generated server client expecting react injected new markup compensate works lost many benefits server rendering instead figure markup generated different client server client tdetails itemscope itemtype schema server tdetails itemscope itemtype sche", "num": "4906", "d": "9/2015"}, {"title": "video fire onend event video end", "body": "used react test video noticed onend event fired video end fiddle", "num": "4905", "d": "9/2015"}, {"title": "invalid property access rendering serverside babel optimisationreactinlineelements enabled", "body": "trying render page serverside get error like using babel transformer manually fixing however using transformer client code runs fine browser even complex componentspages complete list babel options server might help track fact worked browser leads believe babel issue though currently using build react master branch thirty minutes ago", "num": "4902", "d": "9/2015"}, {"title": "broad defensive termination clause patents", "body": "current defensive termination clause far broader defensive original apache license makes difficult use enterprise covering actions part facebook previous apache license covers project nt know address issue eg could nt find contact created issue please forward issue facebook legal opensource team patent related part license related", "num": "4900", "d": "9/2015"}, {"title": "ca nt disable transitions elements initial load", "body": "hello following along docs adding transitions via everything working great problem transition fires even mount component despite docs say nothing turn component wrong", "num": "4898", "d": "9/2015"}, {"title": "error performing device", "body": "get following error nodeawesomeproject reactnative runandroid js server already running building installing app device cd android amp amp gradlew installdebug failure build failed exception went wrong problem occurred configuring project app could resolve dependencies configuration app debugcompile could find comandroidsupport searched following locations file file required awesomeproject app unspecified could find comandroidsupport searched following locations file file required awesomeproject app unspecified gt comfacebookreact could find comandroidsupport searched following locations file file required awesomeproject app unspecified gt comfacebookreact gt comfacebookfresco gt comfacebookfresco awesomeproject app unspecified gt comfacebookreact gt comfacebookfresco gt comfacebookfresco try run stacktrace option get stack trace run info debug option get log output build failed total time mins secs could install app device see error", "num": "4897", "d": "9/2015"}, {"title": "reactaddonscsstransitiongroup nt remove element dom", "body": "problem component use react babel incriminated piece code listenter opacity listentergamelistenteractive opacity transition opacity easein listleave opacity listleaveexampleleaveactive opacity transition opacity easein entering animation works false component remains dom works without animations obviously without reactcsstransitiongroup wrapper", "num": "4896", "d": "9/2015"}, {"title": "reactdom wrong package npm", "body": "hi executed reactdom package version downloaded seems right package watching packagejson pointing something wrong something going wrong best regards", "num": "4895", "d": "9/2015"}, {"title": "anchors onclick executed anchor url present", "body": "spent significant time checking onclick events anchors triggered contacted parties whose packages use point basic react functionality idea onclick triggered triggered triggered triggered idea problem thanks", "num": "4894", "d": "9/2015"}, {"title": "unmountcomponentatnode nt unbind inflight listeners throws opaque error", "body": "react app triggering following error navigation events error occurring function failed find component event callback app happening would navigate blur event call rendering order refresh page docs say remove mounted react component dom clean event handlers state however seem case refresh page reactbound callbacks still react queue event leading error docs intuition seem imply clear callbacks since knows components longer exist handle", "num": "4892", "d": "9/2015"}, {"title": "reactisvalidelement validate elementpropschildren single reactelement", "body": "produces even though regular happening", "num": "4890", "d": "9/2015"}, {"title": "reactchildrencount throws invariant error", "body": "throws uncaught error invariant violation objects valid react child found object keys type key ref owner props store meant render collection children use array instead wrap object using reactaddonscreatefragment object invariant traverseallchildrenimpl traverseallchildrenimpl traverseallchildren countchildren linkclass render reactcompositecomponentmixinrendervalidatedcomponentwithoutownerorcontext reactcompositecomponentmixinrendervalidatedcomponent reactperfmeasurewrapper reactcompositecomponentmixinmountcomponent reactperfmeasurewrapper reactreconcilermountcomponent reactmultichildmixinmountchildren reactdomcomponentmixincreatecontentmarkup reactdomcomponentmixinmountcomponent reactreconcilermountcomponent reactcompositecomponentmixinmountcomponent reactperfmeasurewrapper reactreconcilermountcomponent mountcomponentintonode mixinperform batchedmountcomponentintonode mixinperform reactdefaultbatchingstrategybatchedupdates batchedupdates reactmountrendernewrootcomponent reactperfmeasurewrapper reactmountrendersubtreeintocontainer reactmountrender reactperfmeasurewrapper moduleexportscar webpackrequire bootstrap moduleexports bootstrap webpackrequire bootstrap anonymous function bootstrap anonymous function bootstrap equal", "num": "4889", "d": "9/2015"}, {"title": "chrome extension error", "body": "rc reactrouter getting error changing routes sure problem extension react reactrouter hotloader narrow extension disabled eg incognito error nt happen error cause render fail view nt update", "num": "4886", "d": "9/2015"}, {"title": "creating logiconly components", "body": "developing app want dynamically load content application using flux fairly defined pipeline getting managing data want something like currently get around using rendered component nt work well lazy load table chome probably browsers push loading div outside table force browser inject corrected html react lose root since dom gets modified without react consent way something similar realize pass react component loader tell wrap content component think quite messy tl dr want component logic current component implementation without rendering still rendering children", "num": "4885", "d": "9/2015"}, {"title": "incorrect warning link", "body": "short url redirect error src incorrect page redirects", "num": "4883", "d": "9/2015"}, {"title": "reacttestutilsiscompositecomponent called scry throws stateless components", "body": "example js const gt foo class extends reactcomponent render return foo const instance reacttestutilsrenderintodocument const div reacttestutilsfindrendereddomcomponentwithtag instance div expect div toexist works", "num": "4882", "d": "9/2015"}, {"title": "warn calling reactdomrender without global document etc available", "body": "basically every time called rerender happens get error created bare repo recreate issue component test suite small copypaste javascript import react component reactaddons import jsdomify jsdomify import expect unexpected class mycomponent extends component constructor props super props thisdisplayname mycomponent thisstate bananas bananas render return thisstatebananas describe setstate test gt gt leaks document window global jsdomifycreate render gt let instance reactaddonstestutilsrenderintodocument expect instance defined throw gt let instance reactaddonstestutilsrenderintodocument let foo gt instancesetstate bananas apples expect foo throw idea happening anything", "num": "4881", "d": "9/2015"}, {"title": "react ui like ios navigation bar", "body": "anyone share react ui like ios navigation bar thanks lot", "num": "4879", "d": "9/2015"}, {"title": "react component classes must extend reactcomponent", "body": "ends exposed instances reactswf correct way set inheritance thought missing something", "num": "4878", "d": "9/2015"}, {"title": "invalid mutating deprecated warning", "body": "get following warning warning passed style object previously mutated mutating deprecated consider cloning beforehand check previous style color backgroundcolor fontsize null fontweight mutated style color backgroundcolor fontsize null fontweight confused warning appears previous style mutated style look exactly reproduce issue open browser type font size field blur field see warning console warning displayed could fix", "num": "4877", "d": "9/2015"}, {"title": "csstransitiongroup throws warnings component unmounted", "body": "using get following errors component unmounted animation done transitionentertimeout transitionleavetimeout set uncaught typeerror read property componentdidenter undefined reactcreateclasshandledoneentering reactcreateclasstransitionendlistener uncaught typeerror read property componentdidleave undefined reactcreateclasshandledoneleaving reactcreateclasstransitionendlistener", "num": "4876", "d": "9/2015"}, {"title": "revamp tutorial", "body": "huge number issues come tutorial repo inconsistencies confusing parts especially sort works fine without server initially requires half way talked maybe rewriting entirely maybe mean time clean make easier people learn react without getting tripped ideas welcome especially people front lines mailing list irc slack stack overflow github couple ideas provide running api server people use probably randomly generated api key make sure people clean environment require local server beginning done remove bit paginate steps separated better", "num": "4875", "d": "9/2015"}, {"title": "setstate fails callback via componentwillmount server", "body": "need render react components server seo component fetches data based query parameters server node fails request callback error reproduced simpler code example found numerous discussion web relating complications react serverside rendering working two workaround approaches removing ajax requests server instead rendering result request directly global variable embedded firstserve html moving ajax request prior initialization react components server request would still live client version please let know alternative recommended approach instead nb reason chose react say angular ensure search engines index page bit bother right var react require react reproduced react var reactdomserver require reactdomserver var reactcreateclass componentwillmount function var example ajax call fetch data based request parameters settimeout function err res state set based results thissetstate render function return reactcreateelement div null reactdomserverrendertostring reactcreateelement null node indexjs return documentbody referenceerror document defined getactiveelement reactreconciletransactionreactinputselectiongetselectioninformation reactreconciletransactionmixininitializeall reactreconciletransactionmixinperform reactupdatesflushtransactionmixinperform reactupdatesflushtransactionassignperform objectflushbatchedupdates objectwrapper flushbatchedupdates reactdefaultbatchingstrategytransactionmixincloseall reactdefaultbatchingstrategytransactionmixinperform", "num": "4873", "d": "9/2015"}, {"title": "npm install save reactdom installs", "body": "think resolved rc meantime confusing since readme says", "num": "4872", "d": "9/2015"}, {"title": "please use symbols fields values", "body": "react special symbol uset mark instances unfortunately symbol used value field rather name would really great way round like js symbol used tag reactelement type native symbol polyfill plain number used performance var isreactelement typeof symbol function amp amp symbolfor amp amp symbolfor reactelement var reactelement function type key ref self source owner props var element tag allow us uniquely identify react element isreactelement true would allow instances implement multiple interfaces vs exclusive matter would great fields also symbols", "num": "4871", "d": "9/2015"}, {"title": "memory leak reactdominput server rendering", "body": "react seen massive memory leak appears entire app retained time profiler narrowed reactdominput radio input app removing entirely source fixes leak diagnose added log statements javascript mountwrapper function inst props linkedvalueutilscheckproptypes input props instcurrentelementowner unmountwrapper function inst consolelog unmounted input id instrootnodeid delete instancesbyreactid instrootnodeid ran app notice unmount never logs instances stay forever simply rendering using", "num": "4870", "d": "9/2015"}, {"title": "children filter null values map function", "body": "currently implementing component something like jsx return childrenmap children thisrenderchild autobind renderchild element index return cloneelement element key elementkey index selected thispropsselected onclick thisclickhandler business requirement put situation created list item component jsx using map array return array rendermenuitem key key whatever checking return return use case could give error propose remove filtering time values whenever situation understand think best implementation end change function alright", "num": "4867", "d": "9/2015"}, {"title": "unexpected detached subtree found possible regression", "body": "since upgrading seen error times production nt able trace source yet though cc spicyj", "num": "4865", "d": "9/2015"}, {"title": "convert react class class error use context", "body": "class created createclass transform class caught err original class code var reactcreateclass childcontexttypes name reactproptypesstring getchildcontext function return name jonas render function return class class extends reactcomponent childcontexttypes name reactproptypesstring getchildcontext return name jonas render return may something wrong childcontexttypes defining method", "num": "4864", "d": "9/2015"}, {"title": "reactdom example nt work", "body": "js var react require react var reactdomserver require reactdomserver class mycomponent extends reactcomponent render return hello world reactdomserverrendertostring yields", "num": "4863", "d": "9/2015"}, {"title": "npm update breaks", "body": "working project utilizing react reactdom reactaddonscsstransitiongroup reactaddonstransitiongroup project works fine install packages command line like installed listing packagejson entering given following error even first install packages separately terminal run project breaks", "num": "4862", "d": "9/2015"}, {"title": "warning rendered unknown unknown using key", "body": "following message mean exactly warning rendered unknown unknown using key place currently means nt preserve state behavior rare considering deprecating please contact react team explain use case take consideration", "num": "4860", "d": "9/2015"}, {"title": "stateless function components work native arrow functions", "body": "blacklist babel following stop working get error uncaught typeerror constructor js import react react import reactdom reactdom const app gt hello world reactdomrender documentgetelementbyid root", "num": "4856", "d": "9/2015"}, {"title": "pressing spacebar checked radio button fires click browsers", "body": "focus textbox press shifttab move focus radio button group press spacebar check radio button observe click event console press spacebar redundantly check radio button chrome osx observe additional click event console firefox osx observe additional click event console entirely browsers fault since react synthetic event system trying fully normalize inconsistencies like obscure one list least prefer firefox behavior expect real clicks synthetic keyboardoriginated clicks conditions firing incidentally feels like might accident chrome rather explicit decision place file bug feel like pretty pieinthesky though p", "num": "4854", "d": "9/2015"}, {"title": "longer possible blank using selectedindex", "body": "change noticed essentially component something like componentdidmount thispropsvalue thisrefs select getdomnode selectedindex render return yes meant blank value provided select would display nothing setting however added effectively kills behavior think understand changed since better matches browser shows default trying figure way still able blank select element without adding extra blank option element", "num": "4852", "d": "9/2015"}, {"title": "incomplete key escape", "body": "expected result html b actual result html environment win chrome example first following react elements rendered div app html next causes following rendered html b however element returns causes uncaught error", "num": "4850", "d": "9/2015"}, {"title": "input value state still update onchange", "body": "came across intriguing problem trying set value input state want input get value state connected store also want update onchange value store action updateinputfield type e actiontostore type etargetvalue store trigger modification type variable state huge problem approach presents input get slow typing new characters due fact requires new render component started implementing onblur method drop onchange got warning saying component read nt onchange method also looked two way binding handles setting state updating value component got laggish result also another big problem whenever set state new value ie type new characters typing cursor reset end text input try edit inside current text get enter one character cursor moves end better official approach problems known problem set solved react next versions", "num": "4848", "d": "9/2015"}, {"title": "possible use symbol component key", "body": "last time tried still wo nt work reason thanks", "num": "4847", "d": "9/2015"}, {"title": "nt componentwillmount called getinitialstate", "body": "noticed cleaning older code one components cleaning needs happen loads originally placed within getinitialstate works fine really nt feel like right place put componentwillmount sounds like better alternative seems thought called later lifecycle fact hook getinitialstate realise might bit edge case feels like two hooks either reordered different hook added", "num": "4844", "d": "9/2015"}, {"title": "info error message react component classes must extend reactcomponent", "body": "hard find component throwing error improve message somehow", "num": "4843", "d": "9/2015"}, {"title": "warn using dev build minified", "body": "want sebmarkbage mentioned forgot morning", "num": "4842", "d": "9/2015"}, {"title": "reactdom builds live reactdomdist reactdist", "body": "", "num": "4841", "d": "9/2015"}, {"title": "createfragment warning rendering date", "body": "new date looks hitting typeof object check sure cast string toisostring error", "num": "4840", "d": "9/2015"}, {"title": "finddomnode statelesscomponent work testutilsrenderintodocument", "body": "unsure also impacts browser wrote example wrote two components one test case identical class component test passes function component test fails javascript import react react class component extends reactcomponent render var onclick text thisprops return componentproptypes onclick reactproptypesfuncisrequired text reactproptypesstringisrequired export default component javascript import react react var component onclick text gt componentproptypes onclick reactproptypesfuncisrequired text reactproptypesstringisrequired export default component output failure due interactions jest also exists another project using jest although still using jsdom", "num": "4839", "d": "9/2015"}, {"title": "repo wiki full spam", "body": "repo wiki full pages created last hour spammy titles like service ariston cempaka putih also top google result sites using react missing wiki page github asking fill guessing wiki permissions incorrectly opened public", "num": "4838", "d": "9/2015"}, {"title": "question foreachaccumulated docs", "body": "hi checking file definition foreachaccumulated saw documentation entry vague case nt call function used basically events queues probably expected value maybe would nice comment function expects objects think would leave change docs ensure item object cheers", "num": "4837", "d": "9/2015"}, {"title": "warning react component classes must extend reactcomponent", "body": "", "num": "4836", "d": "9/2015"}, {"title": "allow reactshallowrenderer expose jsx test debugging", "body": "hi making use reactshallowrenderer testing really like mention docs would appreciate react community feedback evolve suggestion one problem comes investigating failing tests first little digression using vanilla jasmine testing comes deep objects matching using custom matcher wrote called import jsondiffpatch jsondiffpatch const jdp jsondiffpatchcreate arrays detectmove true const custommatchers toequalasobject util customequalitytesters return compare actual expected const result pass utilequals actual expected customequalitytesters expected jsonstringify expected null actual jsonstringify actual null difference jsonstringify delta null difference format info found export default custommatchers matcher builds jsondiffpatch help isolate difference objects lie really useful general testing nt help particularly comes jsx testing like reason subtle difference jsx result fairly different objects constructed comparing massively revealing investigation take time suggestion would really handy could extract jsx representation object renderer output imagining ability something like would would produce string like would allow writing custom matcher used comparing jsx would upon failure use report helpful error message spent time would like digging differences object structure investigating failing tests think feature like could real win think", "num": "4835", "d": "9/2015"}, {"title": "modding reacttransitiongroup work wrapped component", "body": "sure right repo ask question figured start somewhere working app uses reactrouter redux using library called reactredux exposes decorator wrap component pass data store props component gets passed reacttransitiongroup actually class called connect property called wrappedcomponent actual component lives since reacttransitiongroup lifecycle methods inplemented wrappedcomponent reacttransitiongroup finding tired extending reacttransitiongroup overriding perform handle methods also look lifecycle methods wrappedcomponent get following error gist extended class created anyone could point right direction would appreciate thanks", "num": "4831", "d": "9/2015"}, {"title": "seems something wrong using important inline style", "body": "code still removed code like everything goes well miss something", "num": "4830", "d": "9/2015"}, {"title": "reactrender reloads iframes rendering new component", "body": "run issue integrating live reloading toolchain example obviously convoluted tries capture setup also illustrate issue problem swap modules end new sets react component definitions even though keys render output equal iframe still seem get reloaded js var thunk function props context reactcomponentcall props context thunkfor function view key var reactcomponent function props context thunkcall props context reactcomponentprototype objectcreate thunkprototype reactcomponentdisplayname keysplit return reactcomponent thunkprototype objectcreate reactcomponentprototype thunkprototypeshouldcomponentupdate function props thispropsmodel propsmodel thunkprototyperender function return thispropsview thispropsmodel let render key view model gt let component viewreactcomponent viewreactcomponent thunkfor view key return reactcreateelement component key view model let redframe src gt reactdomiframe key frame style border solid red src let blueframe src gt reactdomiframe key frame style border solid blue src reactrender render main redframe src documentbody settimeout function reactrender render main blueframe src documentbody ps also tried keep root component keep identical attributes across calls iframes still reload edit updated example props used note stored property class seemed cause confusion", "num": "4826", "d": "9/2015"}, {"title": "reactdomrender reactdom throws invariant error using refs", "body": "error minimal example repository using webpack steps reproduce spin http server point indexhtml error mitigated using deprecated method instead", "num": "4822", "d": "9/2015"}, {"title": "parent vs owner context", "body": "sorry bring cause lot changes codebase notice context switched parentbased context beta lot libraries especially reactrouter depends context lot components usually render children body instead inside current component beta get context router breaks wonder syntax get inherited context render element example maybe file issue directly reactrouter", "num": "4819", "d": "9/2015"}, {"title": "chrome ff performs code old ie", "body": "hi customer reported bugs react found problem dont know happened must say bugs appear pc go customers office try machines machines work fine following code reactjs set isinputeventsupported variable false chrome firefox fix temporarily work allright really dont know newest chrome v performed code old ie something wrong condition depending new chromeff", "num": "4812", "d": "9/2015"}, {"title": "proptype function argument type checking", "body": "really like able define type arguments prop function called think last missing piece need really define react component interface might one feel need comment signatures way programmatically would much better first attempt tried create new proptypes able wrapping function given prop working receiving pretty straightforward warning message yeh mutating prop nice way way found without modifying react core", "num": "4811", "d": "9/2015"}, {"title": "dynamically require bundle", "body": "react bundle code single js file used view apps multiple views using single combined file multiple static build file tend low efficient hope way build multiple bundle something like able dynamically require running build code", "num": "4810", "d": "9/2015"}, {"title": "best practice debug project based react", "body": "hi everyone planing rebuild project using react tried use translate jsx gulp pack js files problems using watchify gulp change code take seconds repack feeling terrible need using breakpoints js file used gulp file chrome able split packed js file raw files developer tools sources tab case something wrong raw files breakpoints work seriously error info developer tools console tab obvious marked wrong line also tried find proper config please share idea debug project based react thanks lot", "num": "4809", "d": "9/2015"}, {"title": "handle empty model", "body": "jsx something like statecurrentusername whereas user already loaded ajax get uncaught typeerror read property name undefined handle properly good practices would horrible trash jsx tons checking like statecurrentuser null statecurrentusername", "num": "4808", "d": "9/2015"}, {"title": "add search documentation", "body": "hey folks algolia use react projects internally found searching react documentation could improved considering sending pr adds search documentation saw website using jekyll actually jekyll plugin nt known algolia saas provider offering hosted search engine accessible rest api pushing data api easy see live demo similar currently pending pr bootstrap documentation already provided free accounts popular opensource projects love use laravel hackernews fontawesome cdnjs example wanted check first something would interested react documentation start coding anything start hacking something like could move forward together would course give full access unlimited free account ask small powered algolia logo hit reply questions really happy make happen", "num": "4807", "d": "9/2015"}, {"title": "passing props via super props extending another component working", "body": "sure real issue behavior unexpected react version two components shape circle shape general concept circle special case shape using class syntax define components trying override shape defaultprops passing props circle constructor using nt working see following code jsbin js import react react class shape extends reactcomponent constructor props point propsshapetype circle circle component used super props shapedefaultprops shapetype null class circle extends shape constructor props let propscopy objectassign props propscopyshapetype circle super propscopy reactrender documentqueryselector body", "num": "4806", "d": "9/2015"}, {"title": "reactjs involuntary executable command problem", "body": "hello executable command written curly brackets normal possibility creating vulnerability thank react js sandbox bypass var mycomponent reactcreateclass render function return lt gt hello function constructor alert ptsx lt gt lt p gt reactrender lt mycomponent name handsome gt documentgetelementbyid mydiv", "num": "4805", "d": "9/2015"}, {"title": "csstransitiongroup work appropriately classname modified", "body": "entering element modified transition enter enteractive gets deleted likely kill transition cause problems element sync keep added appropriately example click add item multiple items transition ends var reactcsstransitiongroup reactaddonscsstransitiongroup var c var todolist reactcreateclass getinitialstate function return items hello world click handleadd function var newitems thisstateitemsconcat abc c thissetstate items newitems handleremove function var newitems thisstateitems newitemssplice thissetstate items newitems render function var r mathrandom var items thisstateitemsmap function item return bind", "num": "4804", "d": "9/2015"}, {"title": "formal grammar jsx", "body": "information exactly es grammar changed", "num": "4803", "d": "9/2015"}, {"title": "seems react nt allow render script tag inline code", "body": "sometimes useful far know way render inline javascript script dangerouslysetinnerhtml innerhtml evaluate script solution", "num": "4801", "d": "9/2015"}, {"title": "react flush batch work", "body": "read source code understand react flush batch work", "num": "4800", "d": "9/2015"}, {"title": "warning use keyed object wrapped", "body": "hi help understand following giving warning warning use keyed object wrapped reactaddonscreatefragment object passed child setup babelcore react babelloader code handler consolelog thissetstate body thispropsdata render return thisstatebody", "num": "4799", "d": "9/2015"}, {"title": "use typescript ts tests", "body": "get past anyway use jsx tests simplify little bit", "num": "4795", "d": "9/2015"}, {"title": "proptypes outside react independent type checks module", "body": "using react proptypes awesome help catching errors early stage sometimes application pretty large always flow data structures big size like web email client application type passed place multiple components accept props solution usually creating type file eg js typesmessagejs import react react export default reactproptypesshape id reactproptypesstringisrequired subject reactproptypesstring isrequired reusing type components get messages props js import messagetype typesmessage messagepreviewproptypes message messagetype sometimes data flows components elements example flux stores action creators usually requires duplication types using immutablejs records similar would really nice could use type checks parts application example js storesmessagejs import messagetype typesmessage import checktypes reactchecktypes param array payloadmessages array message objects received api ondatareceived payload gt payloadmessagesforeach message gt checktypes message messagetype addtostore message good guess architectually means making proptypesjs independent creating adapter propcontext validating", "num": "4794", "d": "9/2015"}, {"title": "large number render performance", "body": "seeing issue large numbers take long time render almost nt believe happening seems worsethanlinear increase render time add digits numbers formatting string first seems fix problem tried build fiddle exemplify issue think exacerbated pretty far dom tree nt seem matter app numbers nt formatted get digits takes seconds render finish let know ca nt reproduce try carve example app try setting component real app something like seems enough slow", "num": "4792", "d": "9/2015"}, {"title": "refactor away opaque uncaught typeerror typetouppercase function messages jsx misused", "body": "appears nt mapped everything developer bungles jsx syntax using jsx sigils jsx compiler nt expect jsx sigils error message likely unhelpful opaque uncaught typeerror typetouppercase function developer written post culprit cases user given jsxlike syntax context expected could useful descriptive error message preferably probable line number jsx compiler encounters jsx syntax addons expected", "num": "4791", "d": "9/2015"}, {"title": "suggestion increase performance providing initial virtualdom similar linux init ram image", "body": "suggestion really sure whether functionality already exists think yet also really sure whether proposed mechanism would indeed improve performance react according understanding virtualdom created reactjs application load applications large virtual dom creating consume time virtual dom could provided server already similar init ram images used linux init performance could possibly increased cases init dom image probably provided json would static might cases work would plenty options prepare server side indeed transmission virtual dom image would slower creating scratch client side make sense case depends network speed could also option client starts build dom abandons virtual dom creation process image received server case request would canceled hope makes sense user react conference discussion developers use react idea accepted propose", "num": "4790", "d": "9/2015"}, {"title": "support attribute", "body": "trying use gt capture attribute getting rendered nt look like supported list information capture", "num": "4784", "d": "9/2015"}, {"title": "onclick fires element button android", "body": "hope wasting folks time encountered situation web app work android chrome etc unless onclick attached button element li div etc fire onclick however using react tappable inside element event handler", "num": "4783", "d": "9/2015"}, {"title": "responsivegridlayout reset nt anything", "body": "layout nt get reset", "num": "4782", "d": "9/2015"}, {"title": "check babel inlining transform works", "body": "", "num": "4778", "d": "9/2015"}, {"title": "write changelog", "body": "", "num": "4777", "d": "9/2015"}, {"title": "iterable numbers breaks react", "body": "issue reproducible example full build contains nonstandard iterator theoretical added es future added already added another libraries take account possibility iterable numbers", "num": "4776", "d": "9/2015"}, {"title": "validatedomnesting message confusing using portals", "body": "js var foo reactcreateclass render function return var bar reactcreateclass render function return var baz reactcreateclass render function return null componentdidmount function reactrender reactchildrenonly thispropschildren documentcreateelement reactrender documentgetelementbyid container logs bit foo bar nt inside new tree", "num": "4775", "d": "9/2015"}, {"title": "tell firefox users get devtools", "body": "", "num": "4774", "d": "9/2015"}, {"title": "setting custom data attributes starting numbers removed", "body": "setting custom data attribute datatest works whereas would fail expected behaviour", "num": "4772", "d": "9/2015"}, {"title": "transform jsxtwig jstwig", "body": "using framework view part using reactjs since twig also uses use twig following try transform jsx js get error wherever used braces twig transform jsx code twig variables twig braces js", "num": "4771", "d": "9/2015"}, {"title": "instance stay instantiated componentwillunmount", "body": "destroy instance", "num": "4770", "d": "9/2015"}, {"title": "consider using providing fragment warning", "body": "updated started getting warning everywhere warning use keyed object wrapped passed child took realize using instances jsx wonder would acceptable apply first present legalize situation", "num": "4769", "d": "9/2015"}, {"title": "fire native listeners", "body": "surprised log anything hand dispatching events nt seem trigger react events general documentation expected work seems however like react event system parallel browser events nt really interact way", "num": "4766", "d": "9/2015"}, {"title": "rendering", "body": "react code reproduce problem javascript processenvnodeenv production class foo extends component render return foo reactrender documentgetelementbyid app run error thrown following callstack javascript function definewarningproperty object key objectdefineproperty object key invoked javascript var reactelement function type key ref owner context props builtin properties belong element thistype type thiskey key thisref ref see defined mode still addressed missing something", "num": "4765", "d": "9/2015"}, {"title": "react work reactart", "body": "opened issue reactart incompatibility reactart react", "num": "4758", "d": "9/2015"}, {"title": "allow x prefixed attributes", "body": "currently custom html attributes start x allowed test case allowing custom attributes would helpful example things like firefox os use provide hint keyboard contain digits", "num": "4757", "d": "9/2015"}, {"title": "allow disabling omitted close tags", "body": "similar elements like also called void elements react omits close tags xhtml produces invalid markup throw even break whole page prevent would nice disable omission close tags eg option like", "num": "4756", "d": "9/2015"}, {"title": "browser builds reactdom", "body": "", "num": "4754", "d": "9/2015"}, {"title": "make react reactdom codemod", "body": "already need add repo", "num": "4753", "d": "9/2015"}, {"title": "bug componentwillunmount calls called owning parent", "body": "details see basically seems component unmounted method needs called elements owns issue related probably addressed although part mixins ignored", "num": "4752", "d": "9/2015"}, {"title": "play nicely dom event system legacy anyway", "body": "currently react implements plugin system event bubbling rules important systems like responder system since dom event system incapable implementing proper event negotiation support however desktop nt really take full advantage custom event system polyfill mouseenterleave implement bubbling plenty things wrong dom instead patching maybe would better build new view system top dom integrates custom event system similarly react native handles things way lowest level could dom would however broken may question though handle things like onchange cc spicyj syranide since know always wanted", "num": "4751", "d": "9/2015"}, {"title": "context changing parent nt update child", "body": "component sets context child gets passed props supports context render context updates render component passes child call render update child example another example one works parent context one parent removes context", "num": "4749", "d": "9/2015"}, {"body": "see also clear treat null empty string eventually regardless warning makes sense preserve behavior release though", "d": "9/2015"}, {"body": "yep ok agree", "d": "9/2015"}, {"body": "used", "d": "9/2015"}, {"body": "fix landed sounds like something report alt", "d": "9/2015"}, {"body": "sorry", "d": "9/2015"}, {"body": "yup bug prod mode behavior correct dev mode nt bail contexts differ code secret validatedomnesting tracking hmmmmmmmm", "d": "9/2015"}, {"body": "feel like knew issue well documented time diff merged using context purposes nt good workaround time decided worry since renders deterministic sideeffect free influence rendered output sucked different path devprod life think going fixed stop using context hidden purposes right", "d": "9/2015"}, {"body": "bug render function sideeffect free prints something", "d": "9/2015"}, {"body": "jimfb nt know issue anyone make comment effect diff nt see notes", "d": "9/2015"}, {"body": "spicyj", "d": "9/2015"}, {"body": "alexgalays surface ie notice change kind behavior change slower development mode", "d": "9/2015"}, {"body": "change nt documented nt think change intentional expect finddomnode return inside componentwillmount return", "d": "9/2015"}, {"body": "snip code broke js componentwillmount isbrowser jshint browser true var require jquery reactdom require reactdom case simply getting rendered node testing drag amp drop support setting state indicating whether dnd ui rendered", "d": "9/2015"}, {"body": "terms expectations seems like finddomnode throw invoked mounting nt component nt mounted yet would nt ever dom node would", "d": "9/2015"}, {"body": "perhaps previously worked error points wrong cause least message needs updating", "d": "9/2015"}, {"body": "yeah never object helpful error message wanted confirm though sample code indicates somehow using mounting seemed odd wanted confirm nt missing anything obvious task add new error message using finddomnode unmounted component probably goodfirstbug", "d": "9/2015"}, {"body": "previously worked dantman assure return dom node since none created yet", "d": "9/2015"}, {"body": "maybe circumstances around eg maybe something exact key properly cleared cache previous render simple case throws well", "d": "9/2015"}, {"body": "nt look like regression unmarking", "d": "9/2015"}, {"body": "perhaps would useful serverside rendering say mounting text input box possible user typed something react finished initializing maybe want check existing user input copy state", "d": "9/2015"}, {"body": "yes possible react event handlers nt attached componentdidmount called componentdidmount would better place check anyway case nt hammered exact details supporting use case responding events happened server rendering client mounting work", "d": "9/2015"}, {"body": "thinking userentered data would lost time reached componentdidmount component mounted would nt render already wiped input", "d": "9/2015"}, {"body": "react basically nt ever read dom server rendering leaves dom asis long checksum original generated markup matches might reconsider exactly works currently happens", "d": "9/2015"}, {"body": "okay really hole would checksum different less common still valuable case eg slightly different dom initially nonjs flow sidenote care nonjs help users recover continue partial loads mobile noscript users go away checksum different probably possible reliable form dom node references would nt know previous render map perhaps case drop id element query getinitialstate form elements checksums lined could handle part existing lifecycle fire onchange difference would give poor developer experience though worked time maybe something like serverid form elements indicate initial state pulled onchange serverrendered node sorry went completely offtopic", "d": "9/2015"}, {"body": "jarail spicyj issue gave suggestion think dealing implicitly autofilled data handled first bug jarail differences rendered server client idea far deal checksums server client boolean context client code rendering serverrendered dom first render set server sync server dom rerender set client add clientonly stuff realized actually worked zpao half right first render client render top dom previously rendered server node question already exist started getting error updated react updating added responsive layout code caused component get rerendered scratch page loaded regression still could use better error message since mistake thinking works getting error later development random quirk something reasonable byproduct using react serverrendering", "d": "9/2015"}, {"body": "technically following semver major version zero considered initial development anything allowed change time", "d": "9/2015"}, {"body": "versions minor version determines compatibility patch versions compatible npm uses meaning compatible default expands", "d": "9/2015"}, {"body": "comment based taking nodejs release example given state nodejs also brings plan longterm support lts regular release cycle release versioning follows semver expect increments minor patch version coming weeks fix bugs add features wo nt within branch adding breaking changes react separates render rest react nt totally breaking change bump major version", "d": "9/2015"}, {"body": "semver spec major version zero initial development anything may change time public api considered stable nt completely correct could break things patch versions still compliant like saiehe said", "d": "9/2015"}, {"body": "salehe correct anything allowed change still semver compliant going close bug since correctness issue regards semver compliance eventually release version greater today", "d": "9/2015"}, {"body": "nt make breaking changes patch versions think like", "d": "9/2015"}, {"body": "nt support features way react", "d": "9/2015"}, {"body": "need use correct prefixes see", "d": "9/2015"}, {"body": "react native featurelibrary called animated help problem know vjeux plans port web sure status though", "d": "9/2015"}, {"body": "looks interesting basically bypassed setstate suggested looking timebased animations nt kind looks need operates percomponent still pass state via props brings back problem creating unnecessary elements diffing want faster way update style general abstract level nt see animated library could used improve libraries currently use setstate updating style maybe underlying logic animated library could exposed allowing library authors create kinds things top explicitly lists something needs explored issue right place could point right direction discussion happening thanks", "d": "9/2015"}, {"body": "prinzhorn animation still relatively unsolved problem afaik current strategy whole bunch people iterate ideassolutions see sticks trying combine efforts prematurely may cut lines research would otherwise fruitful see several independent implementations rather single unified effort good thing ideas make better animations encourage pursue looking good place discuss things share ideasdesigns believe appropriate location", "d": "9/2015"}, {"body": "jimfb thanks", "d": "9/2015"}, {"body": "already also reactchildrentoarray method", "d": "9/2015"}, {"body": "spicyj nt get closed", "d": "9/2015"}, {"body": "yes thank", "d": "9/2015"}, {"body": "realized last week nt get chance test glad know entirely head figure fix", "d": "9/2015"}, {"body": "merging", "d": "9/2015"}, {"body": "spicyj merging self different issue intended link", "d": "9/2015"}, {"body": "thanks meant", "d": "9/2015"}, {"body": "syranide spicyj end issue babel react seeing warnings using ps putting issue question related scalajs", "d": "9/2015"}, {"body": "nt fixed updates happen", "d": "9/2015"}, {"body": "please see", "d": "9/2015"}, {"body": "yea pretty well covered previous discussions going close", "d": "9/2015"}, {"body": "issue opened rn repo", "d": "9/2015"}, {"body": "alright thanks closing", "d": "9/2015"}, {"body": "officially supported feature least yet please see", "d": "9/2015"}, {"body": "managed find throwing component stacktrace debug chrome devtools quite sure things done make easier debug managed get component stateprops enabled option devtools inspecting local scope suggestions make easier personally would prefer react nt anything exceptions otherwise might even harder find source exception", "d": "9/2015"}, {"body": "yes imagine components use happens throw sometimes idea one passed weird arguments", "d": "9/2015"}, {"body": "fwiw truly prop validation proptypes automatically show parent component name", "d": "9/2015"}, {"body": "discussed internally binding decisions made general consensus reasons performance benchmarks rarely tell whole story suppose measure cpu runtime library fastest make best maybe maybe amount memory library uses download size library whole host factors substantial impact overall quality website experience nt measured cpu runtime alone virtually impossible define reasonable benchmarks correctly incorporate variables correct importance coefficients indeed definition importance depends use case optimizing synthetic benchmarks actually detrimental overall performance optimize rerendering single node million times unless actually happens render site pro tip never benchmark measuring wrong thing optimizing benchmark actually encourage writing code performs worse real sites performance race assembler want choose right balance developer productivity code maintainability variables like performance react much simple templating comes cost performance believe providing higherlevel abstractions maintainable easier work worth tiny bit overhead introduced abstractions balance always better removing layers abstraction ultimately computer science controlling complexity eliminate abstractions end something like assembler asmjs great machines humans ca nt read going hard time building website ca nt read code competing performance would lead us eliminate abstractions believe worth cost comparing apples oranges frameworks everything react vice versa every framework benchmark fair comparing equivalent frameworks feature sets various frameworks varies widely virtually impossible find equivalent framework thus impossible create fair benchmark ultimately performance metric matters going easy build fast website react believe answer yes rapid growth across industry internally facebook seems imply others agree us course might change minds future thinking point going create page tries compare react performance frameworks believe react fast realworld use cases believe like try reopen issue thinking dramatically changes issue feel free continue discussion thread", "d": "9/2015"}, {"body": "one thing interesting suspect community general general react performance characteristics real devices time care quite little react versus ember angular would love see things like published react information", "d": "9/2015"}, {"body": "agree performance tricky thing benchmark seems try offer comparable data file size good proxy realworld performance think trying benchmark parse execution times minimal core framework vs full build bells whistles helpful especially measured real devices running ios android etc key runs smoothly desktop system hang many seconds less power android windows phone device fail boot altogether found even running fairly trivial todo app could take unacceptably long time download parse execute popular mvc frameworks sure ca nt directly compare two frameworks different feature sets goals think would helpful developers know framework x might suitable choice takes seconds boot minimal app incidentally nt update article charts add react data set quite speedy", "d": "9/2015"}, {"body": "testutilssimulate checked backing instance available created backing instance around stateless component handled feel like could handled internally team cool write code cc sebmarkbage", "d": "9/2015"}, {"body": "nt actually insert node document probably well named sorry exactly see nt actually append document positional properties wo nt useful case something like reason nt would nt able unmount reliably tests would tripping dom unmounting critical case nt actually attach dom let test framework cleanup documents done", "d": "9/2015"}, {"body": "zpao brilliant thank much clearing stumped ages", "d": "9/2015"}, {"body": "conceptually trying work got bugs code instance selfclosing jsx tag close bottom created fiddle demonstrates looks like might new react community welcome future reference try keep github issues tracking bugs general usage questions better answered stackoverflow going close issue let know missunderstood question reexamine issue", "d": "9/2015"}, {"body": "understood right thanks", "d": "9/2015"}, {"body": "thanks feedback update ready", "d": "9/2015"}, {"body": "work correctly outside react sounds like ie bug", "d": "9/2015"}, {"body": "looking jquery bug seems issue chrome earlier seems fixed chrome could replicate edge ies bug occurs using event delegation seeing way onclick react feel like needs fixed", "d": "9/2015"}, {"body": "stop rendering component gets destroyed want keep state around render css", "d": "9/2015"}, {"body": "nt suppose using flash call js nt ever seen otherwise", "d": "9/2015"}, {"body": "last events bug reports seemed like nt issue thanks hint dig around bit code see find", "d": "9/2015"}, {"body": "put settimeout around js flash executes crazy things interrupts running js code middle try call nt settimeout literally code needs reentrant threadsafe nt see reasonably work around react", "d": "9/2015"}, {"body": "yeah aware issues kind hard tell seems like introduced edgecases could problematic respect react put last ones behind shout reappears still doubt thanks help", "d": "9/2015"}, {"body": "share code looks like", "d": "9/2015"}, {"body": "var bounds require reactbounds class mycomponent extends reactcomponent render return usual stuff moduleexports boundswrap mycomponent part code works fine add require statement top boundswrap end", "d": "9/2015"}, {"body": "unable reproduce sample app could react used external dependency reactwithaddons script loaded directly dom every single jsx file nt need manually require would issue", "d": "9/2015"}, {"body": "ok got", "d": "9/2015"}, {"body": "happens react loaded separately dom ed directly script idea", "d": "9/2015"}, {"body": "happens react loaded separately dom require ed directly script maybe two different reacts play together case npm dependencies dragging npm react build also separate global react", "d": "9/2015"}, {"body": "yea multiple react versions seems likely culprit", "d": "9/2015"}, {"body": "yeah webpack entrypoint way rest components continue directly access windowreact wo nt cause issues", "d": "9/2015"}, {"body": "probably unintentional", "d": "9/2015"}, {"body": "nt best api would nt always work node another classname specified would nt work unfortunate suppose could make better could also revert spicyj pretty sure know feelings make work better since regression", "d": "9/2015"}, {"body": "wow nt know feelings guess would probably make actually work", "d": "9/2015"}, {"body": "nt able specify currenttarget get set automatically correspond event handler receiving event working probably bug", "d": "9/2015"}, {"body": "understand currenttarget set automatically regular events target thought point simulate dispatching events customise use testing component uses currenttarget listener want write unit test test ca nt specify currenttarget simulate never able test method certainly changing target option quite different things", "d": "9/2015"}, {"body": "renderintodocument creates div renders element dom almost certainly unhappy case moves things around resulting error using body tough since valid child documentelement think actually warn try render try fwiw issue new ultimately nt think much fighting dom", "d": "9/2015"}, {"body": "new actually making component tests library made absolutely problems issue nt matter really found interesting wasnt even sure worth creating issue tue sep paul shannessy notifications githubcom wrote renderintodocument creates div renders element dom almost certainly unhappy case moves things around resulting error using body tough since valid child documentelement think actually warn try render try fwiw issue new ultimately nt think much fighting dom reply email directly view github", "d": "9/2015"}, {"body": "looks like case already throws sorry newb looking totally wrong thing", "d": "9/2015"}, {"body": "case add ref inside stateless component add ref one outside", "d": "9/2015"}, {"body": "ah dig got", "d": "9/2015"}, {"body": "truly separate yet deprecating dom apis still gracefully think plan separate entirely following release react native still special overrides happening working getting working well probably issues using react router", "d": "9/2015"}, {"body": "see thanks zpao talk reactrouter guys previously discussed hook parameterizing reactrouter around react implementation couple months ago think expecting separation link back anything fruitful comes", "d": "9/2015"}, {"body": "cool going close meantime", "d": "9/2015"}, {"body": "least one reason reduce react api surface area defer standard js conventions possible ie react business providing class abstraction follows defining react components less opinionated allowing users use whatever langaugesugar like agreed manual binding annoying solved property initializers", "d": "9/2015"}, {"body": "inclined agree igl lot useful automagic disappears classes becomes tedious create classcompatible flavor mixin also implements shared lifecycle events like using new syntax internal project months toying idea going back way feels much better work requires less manual rigging", "d": "9/2015"}, {"body": "feel free continue using nt removed deprecated great topic discussion forums purely noise issue tracker please move like carry", "d": "9/2015"}, {"body": "component never going reasonably able know parent needs access dom node exactly point component able define internal structure opaque outer component nt mess around dom nodes fact may chose render null multiple dom nodes nested nodes change tags render custom element therefore general considered bad idea since breaks encapsulation component another use case refs course use call imperative methods class instance however nt make sense plain functions since imperative methods associated", "d": "9/2015"}, {"body": "haha internally facebook long discussions true find way highlight discussions externally really like idea refs stateless components throwwarn created issue correct root issue stateless components nt instances performance reasons may never instantiate component instance us return instance created sebmarkbage mentioned finddomnode breaks encapsulation really escape hatch need super careful anyway need get dom node always safely wrap component stateful stateless composite component attach refs composite component", "d": "9/2015"}, {"body": "technically could refs objects expose placeholder object passed however guess really going trying constrain discourage use flaws could nt kill immediately frequently used new surface like nt expose uses guess clear honest stress release nt message well", "d": "9/2015"}, {"body": "thanks quick responses folks another use case refs course use call imperative methods class instance however nt make sense plain functions since imperative methods associated certainly agree sebmarkbage mentioned finddomnode breaks encapsulation really escape hatch need super careful anyway think exactly point escape hatch necessary one react dom sitting top layer ca nt completely coerced declarative api time agree ideally something like finddomnode annoying reality necessary respect wanting push ppl towards good ideas assuming react reasonably cover everything think agree yet right lots component api depend access underlying dom node stuff like read offset absolutely position things focus management etc etc react offers real good story make ever single component may need measured implement sort interface would even wrap stateful component seems like sort thing react jsut", "d": "9/2015"}, {"body": "react offers real good story make ever single component may need measured implement sort interface would even story parent component wrap whatever component trying measureposition composite component ref attached wrapper return child get dom node calling finddomnode wrapper even expose functionsabstractions like isolate parent touching actual dom nodes expose actual dom nodes ultimately everything still completely within control parentowner even third party implemented component stateless", "d": "9/2015"}, {"body": "yea great story though full story finally release long due chose restrictive api easier go restrictive loose way around seems like good idea reevaluate huge problem like evaluate use cases though parent context allow us new ways communication help", "d": "9/2015"}, {"body": "easier go restrictive loose way around makes sense happy post use cases arise thanks thoughtful responses ya", "d": "9/2015"}, {"body": "edited moved comment new issue", "d": "9/2015"}, {"body": "workaround would use ref callback instead string ref prefer style string refs anyway js class container extends component render return thispropschildren class demo extends reactcomponent componentdidmount consolelog thisinner render return wrapper c gt gt inner c gt gt edit removed frozen assign instance instead", "d": "9/2015"}, {"body": "jide effectively creating children inside calling ref ends need use new ref style frederickfogerty shows ps sure way", "d": "9/2015"}, {"body": "frederickfogerty know thanks amazing syranide thinking today became obvious owner case container perfectly logical yes know somehow tricky let know use", "d": "9/2015"}, {"body": "frederickfogerty reference try get", "d": "9/2015"}, {"body": "okay seems affect refs custom object instead using thisrefs see", "d": "9/2015"}, {"body": "yes even", "d": "9/2015"}, {"body": "jide sorry confusion nt realise writeprotected react use", "d": "9/2015"}, {"body": "works set instead cc jimfb perhaps related assume", "d": "9/2015"}, {"body": "syranide think right commit introduced issue custom element match check skip dom property operations struggling understand usecase surely attributes work custom elements standard dom elements", "d": "9/2015"}, {"body": "struggling understand usecase surely attributes work custom elements standard dom elements familiar difference custom tags web components web components much like react components nt visible nodes list dom attributes nt inherently apply like makes little sense passing dom properties react components whereas custom tags translate unstyled dom nodes assume previously valid introduction web components longer true limited understanding anyway nt take word", "d": "9/2015"}, {"body": "cc jimfb", "d": "9/2015"}, {"body": "syranide correct difference dom nodes webcomponents much like react components standard dom nodes know priori attribute commandeer namespace purposes web components guarantee ca nt steal namespace fact web component authors may prefer reasons stole standard dom components remain compatible need pass unmolested another way thinking standard dom nodes conceptually reactcomponent defined node happens take happen take uncontrolled form elements happen use camel case attributes happen follow consistent naming conventions frameworkprovided components fact markup transformations framework level instead inside reactcomponent definitions implementation detail web component authors free follow conventions need pass without transformations confuse web components tldr custom elements work react must use instead custom element spec requires allow users specify attribute need preserve functionality custom elements", "d": "9/2015"}, {"body": "agree distinction custom elements web components custom elements one building blocks web components spec right use case creating semantically meaningful custom elements nt extend default dom behaviour would nt consistent approach treat elements within react allow either users escape attributes somehow alternatively option dangerouslysetinnerhtml indeed using web components need operate outside react scope", "d": "9/2015"}, {"body": "hellosmithy using component dash escape per specification node dash may arbitrary attributes defined", "d": "9/2015"}, {"body": "jimfb sure safe assumption make understanding custom element must dash custom elements used web components element dash necessarily web component part web components also used", "d": "9/2015"}, {"body": "semantics custom element subset web component specification use term web component loosely believe statement holds replace web component custom element namely custom element may define arbitrary attributes process attributes using arbitrary rules", "d": "9/2015"}, {"body": "jimfb think little semantics either way change prevents custom elements interoperable core dom elements surely options escaping special case attributes etc cases people need thus create breaking change unless another way use custom elements purely custom elements still use react props", "d": "9/2015"}, {"body": "special caseescape whole ton attributes including every possible camelcase attribute could ever past present future occur native dom component mention dealing event handlers complexities would simple escaping couple specialcased attributes rules would complex confusing certainly current attribute whitelisting ca nt see way thing way better currently pass attributes straight", "d": "9/2015"}, {"body": "suggesting discussion best way escaping may one way would escape pattern convention eg straw man example also wondering want create web components outside react scope surely case using would thought default behaviour interoperability otherwise way apply react attributes custom elements seems odd inconsistent restriction hand ways pass web component attributes cases might want cases surely explicitly saying nt want react default behaviour instance rather automatically making assumption looking jsx code seems right expect behave consistently", "d": "9/2015"}, {"body": "jimfb zpao thought read thread see direction taken think raises inconsistencies make code harder reason really think escaping consistent flexible option forces code explicit breaking react convention would interested hear thoughts", "d": "9/2015"}, {"body": "hellosmithy ca nt see make work way better currently escaping solution like propose happy take look constraints must allow people specify possible attributes case sensitive way users must able specify combination zero one users must also able specify combination zero one custom elements impose arbitrary processing rules attributes case sensitivity matters must intuitive users ideally first thing people try work nt work users must obvious next step try fix code ie happens attribute wanted use gets rewritten get useful error message intuitively know try next must allow us basic sanity checks like preventingmitigating xss attacks way minimizes impact performance require modifications jsx syntax already becoming defacto standard languageseditorsidesparsers understand implement syntax changes would break read specification play nice futureproof us maintaining evergrowing whitelist browsers add new elementsattributes", "d": "9/2015"}, {"body": "dug like half hour could nt figure weird cc zpao syranide", "d": "9/2015"}, {"body": "uhm getting errors console clicking could explain lot seeing since happens render react starts throwing internal point explain rest", "d": "9/2015"}, {"body": "syranide sorry trying get jsbin working apparently saved incomplete change made reverted original case doesnt work js errors", "d": "9/2015"}, {"body": "handler actually hijack event make work radios checkboxes downside come times actually prevents browser updating state see prior discussions nt actually need call actually seen lot people blindly calling without actually knowing would recommend spot check handlers seeing actually needed throughout", "d": "9/2015"}, {"body": "zpao thanks", "d": "9/2015"}, {"body": "zpao thanks much explanation definitely calling blindly case certainly necessary somewhere react docs could perhaps added caveat perhaps tips section eventpreventdefault breaks checkboxesradio buttons controlled input section submit pr think worth adding opinion would hard debug run issue would worth pointing official docs", "d": "9/2015"}, {"body": "see someone add docs sure pr ever created", "d": "9/2015"}, {"body": "pr", "d": "9/2015"}, {"body": "cc spicyj perhaps routine validating dom nesting could consider text nodes", "d": "9/2015"}, {"body": "obviously work around butting comment cell regardless never pass invalid children text node tr react warn something wrong hide mistake ps important consider code interms transforms rather html vs first wrong intended", "d": "9/2015"}, {"body": "believe already get warning", "d": "9/2015"}, {"body": "right understand transforms way necessary elements preserve whitespace mainly hoping informative errorswarningssanity checks already warning perfect thanks", "d": "9/2015"}, {"body": "nt mind asking curious influenced decision go", "d": "9/2015"}, {"body": "ca nt speak zpao motivations personal preference find gulp easier work gulp programmatic stream api easier reason bunch grunt json abstractions gulp api minimal nothing task runner basic vinyl support mean less works outofthebox however found works end end using thing need directly instead assumptionladen plugin", "d": "9/2015"}, {"body": "wrapped head around found gulp easier work streams match better way thinking process likely lose couple nice things like task easy configure throw survive couple things also probably make sense explicit npm scripts see goal align open source tooling others interested using gulp helped force us look great tools hopefully make sense us", "d": "9/2015"}, {"body": "great thank helpful", "d": "9/2015"}, {"body": "hmm whitespace text spicyj syranide anything newlines thing text areas little ago red herring", "d": "9/2015"}, {"body": "sorry error message newline instead spaces screen shot error anyway fix fyi initialising textarea empty string", "d": "9/2015"}, {"body": "zpao content generated client server nt see could would rather assume albertdatui running different versions react clientserver easiest way exclude red herring render textarea see persists really simplest approach moment would say", "d": "9/2015"}, {"body": "case probably nt want use convenience method testing covers people usually need nt think going change trivial implement exactly hold reference new node", "d": "9/2015"}, {"body": "guide point still working details story going close since nothing really actionable point definitely put something ready", "d": "9/2015"}, {"body": "definitely issue could recommend medium editor clone thorough discussion suggest go stackoverflow something", "d": "9/2015"}, {"body": "every dynamic child unique key distinguished brothers", "d": "9/2015"}, {"body": "ahh mistake used notsogreat key", "d": "9/2015"}, {"body": "bit complex example taken react todomvc current syntax forced split javascript var footer var main var todos thispropsmodeltodos var showntodos todosfilter function todo switch thisstatenowshowing case appactivetodos return todocompleted case appcompletedtodos return todocompleted default return true var todoitems showntodosmap function todo return var activetodocount todosreduce function accum todo return todocompleted accum accum var completedcount todoslength activetodocount activetodocount completedcount footer todoslength main todoitems return todos main footer proposed syntax split choice javascript var todos thispropsmodeltodos var showntodos todosfilter function todo switch thisstatenowshowing case appactivetodos return todocompleted case appcompletedtodos return todocompleted default return true var activetodocount todosreduce function accum todo return todocompleted accum accum var completedcount todoslength activetodocount return todos todoslength todo showntodos activetodocount completedcount one like course debate first one feels like reading backwards look things second one feels natural read one flow end decision developer approach finds appealing forced use either way like", "d": "9/2015"}, {"body": "accomplish want without extending core api also important note api design deceptively bad idea react due implicit keys work using appendstyle api largely requires provide explicit keys failure cause unintended remounts really really bad following already works today js gt condition return hello js condition return hello syntax nt nice illustrates better way dealing problems nt introduce problematic sideeffects syntax separate problem talks switching implicit doexpressions nt know discussions though", "d": "9/2015"}, {"body": "know dosyntax get work jsx compiler see proposed appendstyle api would mess implicit keys would really bad therefore take solution gon na work need write something natural like javascript hello condition world still stake please note nonexistent return statement inside ifbody developer feels strangeinconsistent something ex ifstatement works root scope anymore nested", "d": "9/2015"}, {"body": "know dosyntax get work jsx compiler jsx compiler deprecated favor babeljs iirc babeljs supports feature developer feels strangeinconsistent something ex ifstatement works root scope anymore nested really imho ca nt put ifstatement inside expression js eg inside function call ca nt put ifstatement inside expression jsx element would personally agree inconvenient times necessarily problem jsx fix everything comes cost discussions", "d": "9/2015"}, {"body": "thanks info happy see discussions see doexpressions even implicit return nice almost looks like implicit doexpressions would job far concerned close issue", "d": "9/2015"}, {"body": "going close favor tracking via issues syranide linked thanks", "d": "9/2015"}, {"body": "use sure right approach componentname expected property propname symbol actual type typeof prop symbolisrequired function props propname componentname return props propname symbol props propname componentname new error export default symbol", "d": "9/2015"}, {"body": "generally said lot custom proptypes checks one feels like probably ok theory line change however nt applying symbol transform changes checks something similar type already place old browsers hard little bit work thoughts sebmarkbage spicyj", "d": "9/2015"}, {"body": "yea seems reasonable constructor symbol fallback ok ideal since nt work crossrealm use whatever standard practice among popular polyfills", "d": "9/2015"}, {"body": "react component use function name component displayname displayname set component displayname since minified js code think react taken correct function name displayname", "d": "9/2015"}, {"body": "problem minification react keep variables names", "d": "9/2015"}, {"body": "uglify may culprit react one suffers minifying code nt really good answer tried setting reported component names thought maybe need babel transform adds whatever needed", "d": "9/2015"}, {"body": "jimbolla need uglify development mode suggest disable uglify dev mode enable production mode", "d": "9/2015"}, {"body": "react nt transformation feel free file issue babel something react needs differently reopen", "d": "9/2015"}, {"body": "nt minify development mode anyway", "d": "9/2015"}, {"body": "removing good first bug since would best done somebody knowledge react", "d": "9/2015"}, {"body": "yes number times component created", "d": "9/2015"}, {"body": "showing stracktrace weird ultimately something react even manipulate afaik error rethrown either sometimes messes stack traces everything ever internals really uninteresting debugging perspective browser also else fails enable pause exception browser usually points problem even stack trace nt", "d": "9/2015"}, {"body": "error threw second error gets thrown later react currently nt gracefully handle thrown errors seeing first error something else catching error probably promises getting see dupe several others", "d": "9/2015"}, {"body": "get component name also hard error break app would good us planning another release sorry", "d": "9/2015"}, {"body": "found issue seems solve", "d": "9/2015"}, {"body": "changed specify duration", "d": "9/2015"}, {"body": "error message right context provides incorrect", "d": "9/2015"}, {"body": "please investigate case message somewhat unreliable pinpointing problem likely elsewhere app", "d": "9/2015"}, {"body": "fired though chrome ie since react mirrors native videoaudio events simply mirroring browser behavior assume unless actually observe native listeners would nt surprised actually intended behavior reason someone needs dissect standard sure", "d": "9/2015"}, {"body": "mistake code nt exist change code logging fine firefox chrome", "d": "9/2015"}, {"body": "wow thank big mistake", "d": "9/2015"}, {"body": "think seen setting runtime chance", "d": "9/2015"}, {"body": "aware might though start process react files even loaded", "d": "9/2015"}, {"body": "forcing readonly state startup script confirm change javascript const nodeenv processenvnodeenv objectdefineproperty processenv nodeenv value nodeenv configurable false enumerable true writable false edit unless counts change happens way react scripts loaded executed nt see would affect", "d": "9/2015"}, {"body": "ah thinking something else case transform nt compatible dev version react running default server force prod mode going close point also brought issue slated fix goes final", "d": "9/2015"}, {"body": "ah thank much indeed work fine production yielding nice speedup pages depending upon complexity nice", "d": "9/2015"}, {"body": "please contact concerns wo nt patent discussions fwiw note patent grant updated language refined topic", "d": "9/2015"}, {"body": "thanks quick response although change must made legal team think important open discussion matter one good way facebook get community feedback would nice another meta channel facebook opensource project apparently nt please lock issue btw put wrong label link patents actuallys comes", "d": "9/2015"}, {"body": "checked android sdk manager android support library installed system build process requiring", "d": "9/2015"}, {"body": "following android setup instructions installed android support library instead android support repository installing fixed issue able build install build device", "d": "9/2015"}, {"body": "issues react native future please file issues repository thanks good luck building apps", "d": "9/2015"}, {"body": "thanks", "d": "9/2015"}, {"body": "using almost definitely fixed", "d": "9/2015"}, {"body": "please post repro case debug", "d": "9/2015"}, {"body": "fixed thank il giorno gio set ben alpert notifications githubcom ha scritto please post repro case debug reply email directly view github", "d": "9/2015"}, {"body": "treating prerelease even though stable nt removed old version package still gets install since stable added deprecation notice npm see future npm warn deprecated reactdom old reactdom package deprecated react officially released please installed reactdom npm install reactdom latest run", "d": "9/2015"}, {"body": "guess standard browser functionality experiencing latter two examples trigger browser navigation first example unless call handler", "d": "9/2015"}, {"body": "iamdustan said handler getting called nt prevent default behavior browser navigating nt really matter", "d": "9/2015"}, {"body": "heh prevent default browser behavior onclick entry point handler called method enter dumb", "d": "9/2015"}, {"body": "interested see test case showing onclick getting called ca nt reproduce issue reporting", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "happening using", "d": "9/2015"}, {"body": "replicate anymore reopen replicate causing", "d": "9/2015"}, {"body": "dev tools separate repository anyway bug dev tools fixed weird seeing", "d": "9/2015"}, {"body": "restarted computer ca nt reproduce maybe chrome restart dev tools extensions update", "d": "9/2015"}, {"body": "want modify function nt perfect means one thing trycatch blocks slow path probably closest come without returning multiple elements handle single element best effort multiple elements closing duplicate feel free continue discussion", "d": "9/2015"}, {"body": "well nt quite duplicate want render portion effect component transparent pass logical processing change render pipeline data loaded loading", "d": "9/2015"}, {"body": "right straight duplicate making work would allow want root describing return items render think covered thing experience effectively said container components must single child way work use relay makes extensive use idea see reactstaticcontainer example nt work table example trickier case would probably say make whole table standalone component wrapped container", "d": "9/2015"}, {"body": "good catch point fix little bit", "d": "9/2015"}, {"body": "fixed thanks heads", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "stateless components public instance return value wrap another stateful composite could use instance relevant discussion point think going keep behavior created issue document", "d": "9/2015"}, {"body": "jimfb issue nt understand wrapping approach suggesting tried javascript const statelesscomponent gt foo const wrap class wrap extends reactcomponent render return calling produce error return typeof instrender function amp amp typeof instsetstate function typeerror read property render null objectreacttestutilsiscompositecomponent misunderstood wrap another stateful composite means thanks", "d": "9/2015"}, {"body": "happypoulp might different issue open separately", "d": "9/2015"}, {"body": "actually never mind use one", "d": "9/2015"}, {"body": "probably import react setup jsdom see", "d": "9/2015"}, {"body": "complaining missing document import react first test pass without issues", "d": "9/2015"}, {"body": "code working javascript import expect unexpected require jsdomify create var react require reactaddons var component react class mycomponent extends component constructor props super props thisdisplayname mycomponent thisstate bananas bananas render return thisstatebananas describe setstate test gt gt jsdomifycreate render gt let instance reactaddonstestutilsrenderintodocument expect instance defined throw gt let instance reactaddonstestutilsrenderintodocument let foo gt instancesetstate bananas apples expect foo throw", "d": "9/2015"}, {"body": "interesting also works nt although guess suspect hoisting might problem case working solutions feels brittle", "d": "9/2015"}, {"body": "still real scenario still error even suggestion implemented try reproduce reduce test example", "d": "9/2015"}, {"body": "updated example clear note hook javascript import react component reactaddons import jsdomify jsdomify import expect unexpected class mycomponent extends component constructor props super props thisdisplayname mycomponent thisstate bananas bananas render return thisstatebananas describe setstate test gt gt jsdomifycreate require reactlibexecutionenvironment canusedom true render gt let instance reactaddonstestutilsrenderintodocument expect instance defined throw gt let instance reactaddonstestutilsrenderintodocument let foo gt instancesetstate bananas apples expect foo throw", "d": "9/2015"}, {"body": "anyway kind duplicate already tracked maybe write note telling need globally available importing react", "d": "9/2015"}, {"body": "yeah perhaps add warning fix", "d": "9/2015"}, {"body": "please evolve question little bit looking library set ui components use project source code ios navigation bar component something else", "d": "9/2015"}, {"body": "sure exactly got quick proof concept lying around mocks ios shell app complete navigation bar poc dont think functionality ios bar like tracking route app etc etc touchstone might better examples", "d": "9/2015"}, {"body": "really discussion belongs react issue tracker", "d": "9/2015"}, {"body": "please us venues like discussions like", "d": "9/2015"}, {"body": "inheritance also includes static properties ie properties constructor", "d": "9/2015"}, {"body": "try first", "d": "9/2015"}, {"body": "sebmarkbage makes sense perhaps something mentioned release notes afaik standard practice javascript inheritance", "d": "9/2015"}, {"body": "reason methods get inherited using classes prototype subclass superclass something similar much cleaner needs js function aprototypeprotomethod function return protomethod astaticprop staticprop function b bprototype objectcreate protomethod value function call super return aprototypeprotomethod enumerable true configurable true writable true var instance new b consolelog instancestaticprop consolelog instanceprotomethod", "d": "9/2015"}, {"body": "troutowicz problem though", "d": "9/2015"}, {"body": "syranide yeah wrote little carelessly actually completely wrong made static property accessible instance way see provides expected result alter internal prototype property decrease perf", "d": "9/2015"}, {"body": "looks like fontsize getting set nan value wo nt get warning probably shallowequal treat two nans", "d": "9/2015"}, {"body": "warning message says yep think makes sense consider two", "d": "9/2015"}, {"body": "willing bet spicyj debugging right", "d": "9/2015"}, {"body": "zpao saying fontsize getting expect see warning message", "d": "9/2015"}, {"body": "sure saying language nt make easy us nt representation json could sub stringifying trade one lie another maybe bad still lie since value nt string either", "d": "9/2015"}, {"body": "zpao prefer lie rather lie would give clues debug potential issue", "d": "9/2015"}, {"body": "probably shallowequal treat two nans use comparison say", "d": "9/2015"}, {"body": "yes issue know previous fix sort thing check element mounted using dont think consumer end would somewhere around gathered key longer exist oh probably mention delay transitioning element sure makes difference", "d": "9/2015"}, {"body": "additionally also issue components change inside transition group timeout completed case see following errors ref old item longer exists time fired dies trying use undefined component", "d": "9/2015"}, {"body": "issue exception throws transition completes", "d": "9/2015"}, {"body": "sure fix marking milestone remember investigate", "d": "9/2015"}, {"body": "far tell none regressions fix point release post repro cases errors difficult anyone look fixing otherwise", "d": "9/2015"}, {"body": "creating isolated reproducible case tricky something get started javascript var reactcsstransitiongroup reactaddonscsstransitiongroup var render reactdomrender var container reactcreateclass getinitialstate function return show true render function return onclick function thissetstate show thisstateshow var reactcreateclass componentdidmount setinterval thisanimate render documentgetelementbyid app spam click button times see errors console", "d": "9/2015"}, {"body": "would building something similar possibility", "d": "9/2015"}, {"body": "would probably require bit effort yea think something like could really cool", "d": "9/2015"}, {"body": "definite thumbs paginating tutorial probably looks pretty daunting newcomer brought usually hear people refer docs ask get started react people thoughts dropping favor windowfetch removing one big library lot favor one specific thing actually need way ensure people nt feel requirement way shape form know note already docs jquery nt required including probably little misleading also give people option total skip tutorial get code running pointing tutorial repo repo nt explain anywhere jquery sake ajax requests think moving tutorial directory within actual react codebase easy two repos get sync happened many times keeping code one place less likely things get sync downside people entire react repo source nt think bad thing anything might make likely curious actual implementation things another idea one tutorial start could three tutorials absolute beginner one one touches advanced aspects react final one brings everything together addresses testing react components", "d": "9/2015"}, {"body": "think official recommendation point topdown data flow rather components manage data requests say data component utilizes passed parent said acknowledge sideways data loading hammer want provide duplicate", "d": "9/2015"}, {"body": "builtin solution usually want data layer using library like alt flummox redux hydrate data rendering react components example see", "d": "9/2015"}, {"body": "ok thank advice", "d": "9/2015"}, {"body": "added deprecation notice npm mean time run", "d": "9/2015"}, {"body": "note simulates es value types proposal would allow hope able make value types therefore overloaded interfaces ideal additionally overloaded interfaces good vm optimizations since current vms optimize heterogeneous function signatures poorly fact considered using symbol name eg different proposing still better however perf nt one several examples rest twitter", "d": "9/2015"}, {"body": "note simulates es value types proposal would allow var symbol typeof element hope able make value types therefore overloaded interfaces ideal got makes sense although case value field could react component class additionally overloaded interfaces good vm optimizations since current vms optimize heterogeneous function signatures poorly mostly interesting implementing virtual elements implement interface several virtualdom implementations seems generic enough fear conflicts guess real issues making libraries agree comment interface instead fact considered using symbol typeof name eg typeofsymbol reactelementsymbol different proposing still better however perf nt oh wow expect thanks pointing may sill suggest something like", "d": "9/2015"}, {"body": "hoping becomes canonical name polyfill value types like objects similarly used polyfill iterator hook multiple yes hoping able find agreement common interface quite yet working hard removing react specific pieces interface piece piece hope eventually able unify", "d": "9/2015"}, {"body": "difference appears adding node happened never fires server javascript componentdidmount function var id reactmountgetid thisgetdomnode consolelog mounting id instancesbyreactid id componentwillunmount function var rootnode thisgetdomnode var id reactmountgetid rootnode consolelog unmounting id delete instancesbyreactid id console quiet running app log statements", "d": "9/2015"}, {"body": "cc spicyj", "d": "9/2015"}, {"body": "zpao plan pointers team wants handle server rendering architecturally mount code like nt fire happy pr definitely blocker testnet servers crash every", "d": "9/2015"}, {"body": "nt decided best fix see already marked milestone though", "d": "9/2015"}, {"body": "thanks", "d": "9/2015"}, {"body": "soft related", "d": "9/2015"}, {"body": "reasonable situations users might want nulls mapping elements seems bad map skip elements implementing filter mentioned would better solution thing filter set issues mentioned bug specifically effects reconciliation performance closing duplicate since solves use case tracking use case", "d": "9/2015"}, {"body": "jimfb put example user want people used lot value render nothing function base condition values nt add value render domreact element nt see problem removing default like try render value", "d": "9/2015"}, {"body": "new toarray removes nulls btw", "d": "9/2015"}, {"body": "yordis see syranide comment basically preserving nulls array preserve implicit keys react uses track instance identity ensures state stateful components gets properly preserved items addedremoved list fairly advanced topic valid use case fact nulls nt removed map means accidentally works often people nt familiar implicit keys work", "d": "9/2015"}, {"body": "jimfb real concern since things get rekeyed reactchildrenmap", "d": "9/2015"}, {"body": "spicyj thanks lot solutions good know even still without get nt pointing comment rendering elements closed think better implementation use filter agree nt know asking behavior react render pass array values", "d": "9/2015"}, {"body": "spicyj since reactchildrenmap rekeys want reopen intuition retain nulls since arraymap works nt see adding nullcheck burdensome close understanding retaining nulls advantageous reconciliation apparently necessary fine reopening think something might", "d": "9/2015"}, {"body": "sure hard imagine could break guess would kind weird component like ab could null", "d": "9/2015"}, {"body": "spicyj situation cloned children values ca nt example check element alright weird stuff nt see problem react pass values nothing common se something like js thisrenderitem could benull element renderitem anycheckingistrue return great js map give null undefined values let list thisfilters list class test extends component render return childrenmap thispropschildren thisrenderitems renderitems element index", "d": "9/2015"}, {"body": "unmounting root keyboard event caused happen think always problem perhaps lucky leaving open sure edit could make sense something along lines allowing schedule things occur soon current transaction ends", "d": "9/2015"}, {"body": "invariant new release also hit one case fb nt yet investigated probably need change something final release", "d": "9/2015"}, {"body": "seen ca nt find sequence actions repeat", "d": "9/2015"}, {"body": "running issue well conditionally rendering based state sure boil simple reproducible bug report yet", "d": "9/2015"}, {"body": "issue happens leveraging fastclick nt happen", "d": "9/2015"}, {"body": "found events handled different order fastclick batching gets weird", "d": "9/2015"}, {"body": "eg click gets fired touchend click handler setstate remove subtree react tries something touch end perhaps", "d": "9/2015"}, {"body": "correct way class extends reactcomponent getchildcontext return name jonas render return achildcontexttypes name reactproptypesstring note removed comma method moved declare attribute component class", "d": "9/2015"}, {"body": "andreypopp thank way better way", "d": "9/2015"}, {"body": "iostalk using babel option take advantage static class property initializers class extends reactcomponent static childcontexttypes name reactproptypesstring getchildcontext return name jonas render return", "d": "9/2015"}, {"body": "andreypopp thank much", "d": "9/2015"}, {"body": "thanks andreypopp", "d": "9/2015"}, {"body": "version reactreactdom running standard npm install instead explicitly installing release candidate probably wo nt work", "d": "9/2015"}, {"body": "yes thanks", "d": "9/2015"}, {"body": "also worked thanks", "d": "9/2015"}, {"body": "command update packages listed latest version specified tag config respecting semver npm disttag ls react latest lt latest stable version next nt install prerelease versions effectively rolled back got duplicate react problem", "d": "9/2015"}, {"body": "ah gotcha thanks gaearon", "d": "9/2015"}, {"body": "problem fingers crossed release soon wink", "d": "9/2015"}, {"body": "getting component called swapper rendering like jsx export default class login extends node render let currentscreen thisdatacurrentscreen return swapper renders jsx class swapper extends node render let children thispropschildren instanceof array thispropschildren thispropschildren let offscreeny thisisfirstrender offscreendistance thisrenderedchildren map children child index gt", "d": "9/2015"}, {"body": "reason wondering react creating new instances children passed swapper instead reusing nt desire instances house famous engine nodes like keep alive might able", "d": "9/2015"}, {"body": "move logic swapper component currently rendering swapper want problem keep instances alive get update hooks called instead mount unmount case using listing children directly although want support case well", "d": "9/2015"}, {"body": "example trigger warning update seems nt issue version", "d": "9/2015"}, {"body": "towry ca nt repro example trusktr use instead handle abstractions arrays try dropping inside map could screwing things nt think need", "d": "9/2015"}, {"body": "towry zpao tried removing property thing happens except instead saying rendered unknown unknown using key says rendered unknown unknown using key null nt understand actually means without reading react source", "d": "9/2015"}, {"body": "preserve state warning message sortof implies", "d": "9/2015"}, {"body": "hmm nt sounds good falling back assuming stateless component maybe check ing reactcompositecomponent mountcomponent cc sebmarkbage spicyj", "d": "9/2015"}, {"body": "babel nt polyfill check extends reactcomponent newing ca nt yet nt warn extending sep pm paul shannessy notifications githubcom wrote hmm nt sounds good new falling back assuming stateless component maybe check componentprototype undefined newing reactcompositecomponent mountcomponent cc sebmarkbage spicyj reply email directly view github", "d": "9/2015"}, {"body": "guess checking undefined would reasonable intermediate step", "d": "9/2015"}, {"body": "thinking bit realized correct also use implementing also set selectedindex necessary seems get behavior looking sorry noise", "d": "9/2015"}, {"body": "would add empty option everything work without extra work", "d": "9/2015"}, {"body": "yea looks bug looks like could get away escaping least firefox os x probably safer escape well escaping traverseallchildren worked nt written test yet though anybody wants jump spicyj nt regression take fix", "d": "9/2015"}, {"body": "also needs escaping nt seem characters unescaped", "d": "9/2015"}, {"body": "yea looks bug looks like could get away escaping r least firefox os x probably safer escape n well certainly also wonder browsers would mess char values lt served html would nt surprise unicode privateuse characters noncharacters etc treated differently various browsers server software could another thing look", "d": "9/2015"}, {"body": "fullvlad post jsbin code example might much render method getting laggy due called result onchange run problem cursor reset caused flux library using executing action syncronously waiting nexttick problematic actions connect stores controlled inputs via onchange handlers", "d": "9/2015"}, {"body": "started implementing onblur method drop onchange got warning saying component read nt onchange method work need use instead work correctly also note current value input longer respond external updates without manually accessing node setting ie value set input created huge problem approach presents input get slow typing new characters due fact requires new render component problem unless triggers rerendering huge amounts components like say root something want avoid done correctly approach works fine using also another big problem whenever set state new value ie type new characters typing cursor reset end text input try edit inside current text get enter one character cursor moves end happens defer update textfield value becomes indistinguishable updating arbitrary value since string lacks selection information impossible maintain correct selection must defer setting new value", "d": "9/2015"}, {"body": "benglass indeed rendering many components update laggy syranide nt option value nt available first render would nt display anything workaround problem adding updating value thanks answers though smile", "d": "9/2015"}, {"body": "partly one asked wo nt possible could next release", "d": "9/2015"}, {"body": "perfect looking forward", "d": "9/2015"}, {"body": "provide info componentwillmount nt work", "d": "9/2015"}, {"body": "spicyj problem call order componentwillmount get called getinitialstate means want type initialisation component state set need put getinitialstate counter intuitive", "d": "9/2015"}, {"body": "need data put state counterintuitive preparing initial state component", "d": "9/2015"}, {"body": "ok lets start component load cycle getinitialstate componentwillmount expected cycle componentwillmount getinitialstate reason expected cases want code running app initialisation initial state set getinitialstate nt feel like right place", "d": "9/2015"}, {"body": "knew meant still nt agree", "d": "9/2015"}, {"body": "changing order nonstarter right render right call cwm generally said initialization happens usually fetching data places might synchronous setstate affects initial render clear code cleanup little hard understand use case trying solve one option use classes make use constructor anything else addition setting initial state", "d": "9/2015"}, {"body": "closing hear want discuss code sample would help", "d": "9/2015"}, {"body": "includes display name case looks index nt know anything better", "d": "9/2015"}, {"body": "oh ok problem happens using reactcreateclass without display name thanks info", "d": "9/2015"}, {"body": "babel transformer enabled default add displayname automatically components", "d": "9/2015"}, {"body": "suspect click arrow next message get stack trace see component causing issue somewhere", "d": "9/2015"}, {"body": "iamdustan nope bunch internal react methods", "d": "9/2015"}, {"body": "added pr add displayname specific lib", "d": "9/2015"}, {"body": "would nice nt blocking make", "d": "9/2015"}, {"body": "yes case rendering object keys deprecating stringify case nt want actually use could see warning bit misleading ca nt typechecks special case date could types etc maybe add something like convert primitive warning", "d": "9/2015"}, {"body": "one engineers stuck ages error examples show different scenarios perhaps include objtostring warning nt object object similar heuristic alternatively warning everything else got coerced string", "d": "9/2015"}, {"body": "improve error little bit", "d": "9/2015"}, {"body": "doubt going start coercing eg would nt allowed check nt good enough another helpful step debugging turn pausing caught exceptions throw catch error warning help specifically case information warning probably best thing", "d": "9/2015"}, {"body": "actually popped adding unit tests component full stack trace convert warnings thrown exceptions one downsides separate declarerender phases stack trace rarely points relevant line render errors like figured things suggest inspecting exactly value caused react decide trigger warning think suggests including representation erroring value might best addition warning", "d": "9/2015"}, {"body": "test save couple clicks js render function var react require react var finddomnode require reactdom finddomnode var statelesscomponent require stateless var testutils require reactlibreacttestutils would also expect cc spicyj", "d": "9/2015"}, {"body": "almost copied everything thanks zpao", "d": "9/2015"}, {"body": "hit issues stateless components shallow renderer yet", "d": "9/2015"}, {"body": "stateless components public instance wrap another stateful composite could call finddomnode component cc sebmarkbage verification", "d": "9/2015"}, {"body": "moved stateless currently failing approach wrap test utils get testing want bit awkward better way unaware way going", "d": "9/2015"}, {"body": "use shallow testing avoid needing reach dom", "d": "9/2015"}, {"body": "test event handling shallow renderer eg eg stateless components also compatible standard components tell refs always null stateless component", "d": "9/2015"}, {"body": "thanks heads clean luckily git actually wiki set public intentionally people add sites without us handle", "d": "9/2015"}, {"body": "fixed reported email address responsible", "d": "9/2015"}, {"body": "sure possible considering markdown nature page way add generated tags would least make less desirable spam target", "d": "9/2015"}, {"body": "possible end", "d": "9/2015"}, {"body": "internal functions nt support using except exist codebase care change would probably make sense check instead", "d": "9/2015"}, {"body": "getting also getting invalid proptypes children passing jsx nodes get error might checking open separate issue", "d": "9/2015"}, {"body": "tonyhb would unrelated file new issue code reproduce", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "problem using lib well thoughts", "d": "9/2015"}, {"body": "spicyj thoughts one", "d": "9/2015"}, {"body": "luisrudge guessing reactpivot copy react try rm rf", "d": "9/2015"}, {"body": "using flattened", "d": "9/2015"}, {"body": "context", "d": "9/2015"}, {"body": "need investigate behaves static properties anyone thread ie using scalajs please file separate issues repro steps", "d": "9/2015"}, {"body": "dupe", "d": "9/2015"}, {"body": "also posting example illustrates issue cases keys used js var thunk function props context reactcomponentcall props context thunkfor function view key var reactcomponent function props context thunkcall props context reactcomponentprototype objectcreate thunkprototype reactcomponentdisplayname keysplit return reactcomponent thunkprototype objectcreate reactcomponentprototype thunkprototypeshouldcomponentupdate function props return thispropsview propsview thispropsmodel propsmodel thunkprototyperender function return thispropsview thispropsmodel let render key view model gt let component viewreactcomponent viewreactcomponent thunkfor view key return reactcreateelement component key view model let redframe src gt reactdomiframe key frame style border solid red src let blueframe src gt reactdomiframe key frame style border solid blue src let app model gt reactdomdiv null reactdomdiv null reactdominput value modelsrc render frame frame model frame redframe reactrender render main app src documentbody settimeout function frame blueframe reactrender render main app src documentbody edit updated example props used note stored property class seemed cause confusion", "d": "9/2015"}, {"body": "two things determine whether component reused type key either changes component unmounted remounted see since value different two cases component gets remounted", "d": "9/2015"}, {"body": "two things determine whether component reused type key either changes component unmounted remounted see spicyj thanks pointer explanation guess going well since viewreactcomponent value different two cases component gets remounted spicyj question way could make less destructive fact would like node unmounted sense like clean listeners etc ideally node would remain tree also primary reason generate component per view function vs reusing component used react devtools property better yet method component could reused component spicyj html already prerendered server would react still throw away preexisting nodes would patch later way could trigger code path avoid remounting", "d": "9/2015"}, {"body": "way currently separate unmounting process actual dom manipulation code looks like different key cache ones created far would work adopting server rendering special case initial render way get behavior update", "d": "9/2015"}, {"body": "posting relevant discussion irc petehunt gozala yea would mapping key reactcomponent fill miss lt look bit later sorry enaqx joined enaqx lt basically memoize thunkfor pass view via props creates component caches storing passed function way function end component also updated examples use believe original code caused confusion reason reason reused views way would end views app ideal could probably map workaround end growing map never clearing entries ideal although maybe could use hooks increment decrement number users remove entry reaches still primary issue though js code reloaded definition would also new unless map stored somewhere globally might able workaround way cause react render vs mounting would best option", "d": "9/2015"}, {"body": "managed resolve issue following suggestions made posting update original snippet reference reactcomponent thunks alias cache table locally create new table designated namespace alias var thunksbydisplayname reactcomponent thunks reactcomponent thunks objectcreate null var thunk function props context reactcomponentcall props context thunkwithdisplayname function displayname const namedthunk function props context thunkcall props context namedthunkdisplayname displayname namedthunkmounts namedthunkprototype objectcreate thunkprototype constructor value namedthunk namedthunkprototyperender thunkprototyperender return namedthunk thunkprototype objectcreate reactcomponentprototype constructor value thunk thunkprototypecomponentwillmount function increase number mounts thunk type thisconstructormounts thunkprototypecomponentwillunmount function decrement number mounts thunk type mounts left remove cache map thisconstructormounts delete thunksbydisplayname thisconstructordisplayname thunkprototypeshouldcomponentupdate function props return thispropsview propsview thispropsmodel propsmodel thunkprototyperender function return thispropsview thispropsmodel let render key view model gt const name keysplit const namedthunk thunksbydisplayname name thunksbydisplayname name thunkwithdisplayname name return reactcreateelement namedthunk key view model let redframe src gt reactdomiframe key frame style border solid red src let blueframe src gt reactdomiframe key frame style border solid blue src reactrender render main redframe src documentbody settimeout function reactrender render main blueframe src documentbody", "d": "9/2015"}, {"body": "said fully covered use case primarily using similar one example still handful plain react components workaround limitations basically end wrapping order always use component pass actual component type prop little worried robustness solution welcome comments spicyj petehunt moments spare look", "d": "9/2015"}, {"body": "try using version react reactdom see one react ie underneath reactdom", "d": "9/2015"}, {"body": "makes sense kinda thanks", "d": "9/2015"}, {"body": "beta blog post please use version react reactdom apps avoid versioning problems plan remove requirement later", "d": "9/2015"}, {"body": "dumb npm install save", "d": "9/2015"}, {"body": "posterity delete example repository problem downloading react npm reactdom aligning beta versions makes everything groovy", "d": "9/2015"}, {"body": "hit checked dupe react loaded ended removing reinstall everything trick hfh", "d": "9/2015"}, {"body": "interesting question also wonder use new context portals return manual", "d": "9/2015"}, {"body": "work", "d": "9/2015"}, {"body": "documentation", "d": "9/2015"}, {"body": "yet context whole still undocumented remain stable enough us support", "d": "9/2015"}, {"body": "issuepr discussed also would", "d": "9/2015"}, {"body": "least basics works makes parent virtual tree", "d": "9/2015"}, {"body": "right passes context unclear expanded include anything else future", "d": "9/2015"}, {"body": "nt reports works correctly copy chrome far know perhaps debug see part condition returning true differs machines", "d": "9/2015"}, {"body": "would assume result nonstandard shimpolyfill used", "d": "9/2015"}, {"body": "wo nt work actually freeze props object leave open case want discuss sebmarkbage probably scope react would appropriate general js type checker perhaps one could integrate flow", "d": "9/2015"}, {"body": "use webpack benefit code splitting functionality", "d": "9/2015"}, {"body": "configure browserify webpack exclude external libraries bundle document", "d": "9/2015"}, {"body": "suggestions good nt reactspecific issue closing bug", "d": "9/2015"}, {"body": "start looking boilerplates", "d": "9/2015"}, {"body": "also appropriate place questions", "d": "9/2015"}, {"body": "would prefer issues related development related issues please put general questions stackoverflow", "d": "9/2015"}, {"body": "discussreactjsorg appropriate codelevel debugging questions", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "checked bootstrap example looks really cool useful think improve docs lot probably many others finds hard find specific areas documentation cc zpao", "d": "9/2015"}, {"body": "would nice indeed", "d": "9/2015"}, {"body": "probably would nt algolia logo certainly every page could link acknowledgements page let know would work would also likely pretty low priority us plan revamp website eventually though", "d": "9/2015"}, {"body": "developer early stages learning react would find search one even useful features docs would imagine addressing lack thereof would crucial step encouraging framework adoption using google specific term method gets page appropriate position page creating frustrating user experience imagine ideal amp ucd friendly internal search would able link specific id found ahashlink near heading page", "d": "9/2015"}, {"body": "hey worked bit search test live relevant code search pages website except blog index pagination pages browser locale set chinese japanese korean also search translations navigate results dropdown using keyboard directly send relevant part page reindex data display done library currently using zepto dependency bit css tell think question implementation oh totally ok link acknowledgements page ping need credentials access account", "d": "9/2015"}, {"body": "tested bit works brilliantly user end suggestion would make dropdown elements tad bit bigger mobile ease use hope makes way eventually", "d": "9/2015"}, {"body": "hey bshally thanks feedback suggestions really invest much time mobile side moment reactjs website seem mobilefriendly something could definitely added", "d": "9/2015"}, {"body": "hey pixelastic thanks getting started bunch things going still pretty low priority us moment would nt spend much time chance circle back take look", "d": "9/2015"}, {"body": "understood leave like moment feel free ping time update", "d": "9/2015"}, {"body": "make code working intended circle defined way intended code originally pasted work", "d": "9/2015"}, {"body": "use inheritance build react components try", "d": "9/2015"}, {"body": "yes intended essential feature vulnerability", "d": "9/2015"}, {"body": "dupe best bet probably add wrapping element whose classes nt change", "d": "9/2015"}, {"body": "unfortunate trying mix bootstrap colmdpushx x computed would nt able wrapping need specific class name element animation", "d": "9/2015"}, {"body": "guess work around would wrapping use appear class instead entering case would want use thing", "d": "9/2015"}, {"body": "jsx spec available mean", "d": "9/2015"}, {"body": "edvinerikson yep exactly", "d": "9/2015"}, {"body": "steida correct mentioned handling simply browsers work setting react makes attempt change behavior specific serverside rendering magic afaik never need would also detrimental due parsing overhead", "d": "9/2015"}, {"body": "ok thank answer", "d": "9/2015"}, {"body": "react batches everything automatically react events lifecycle methods batched operations applied soon execution returns toplevel batching started deferred way", "d": "9/2015"}, {"body": "syranide use jquery remove node setstate rerender component node rendered", "d": "9/2015"}, {"body": "ckrad allowed nt touch nodes rendered react possibly adding children empty nodes effectively stop using react point", "d": "9/2015"}, {"body": "syranide virtual dom always momey record node reactid", "d": "9/2015"}, {"body": "believe long term plan phase proptypes favor flow anyways", "d": "9/2015"}, {"body": "hope would remove huge introspection win react want see props react component supports types proptypes ca nt flow programmatically", "d": "9/2015"}, {"body": "abritinthebay elaborate sorts things like introspect", "d": "9/2015"}, {"body": "lets use example ui component library devsproduct know one facebook seen great use case specifically actually say looking creating one awesome interactive searchable component libraries want able autodocument perhaps autotestvalidate well props component inspect default props helpful nt cover optional props either proptypes actually explicit prop type declaration inside component ie declarative also specifies required awesome great inspect check proptypes used validate internally react build programatic model component declarative interface including prop required optional case automatically documenting component almost trivial loop really valuable", "d": "9/2015"}, {"body": "fwiw use facebook going build part react perhaps something like flow optional runtime typechecks eventually could incorporate functionality", "d": "9/2015"}, {"body": "hmmm interesting alternative thanks", "d": "9/2015"}, {"body": "one thing note looks like removing proptypes would also break tool might want think", "d": "9/2015"}, {"body": "work closely people maintaining get point already worked get things shape", "d": "9/2015"}, {"body": "good point look forward seeing overall solution quite important team bleacher report moving forward", "d": "9/2015"}, {"body": "nevermind consequence full build pulled script tag realize came number iterator", "d": "9/2015"}, {"body": "warning error already clearer master", "d": "9/2015"}, {"body": "download build acquire updated reactwithaddonsjs clearer warning error download fresh getting touppercase warning without indicating line number code", "d": "9/2015"}, {"body": "hopefully soon", "d": "9/2015"}, {"body": "may imagining virtual dom large data structure gets materialized client updates result second virtual tree created two diffed second step know initial interpretation upon reading documentation conceptually true actually internals work nt really virtual dom image certainly serializable one anyway could provided server least current implementation however good news ability run code server react supports rendering markup server react mount markup reusing markup created server means initial http payload sent client contain fully rendered html also great seo makes page lookfeel super fast react jump action client soon dependent javascript loaded information would recommend googling react isomorphic side note bit different describing related discussion topic inline elements shortterm roadmap one things looking better support future", "d": "9/2015"}, {"body": "version react using support testing really quickly kept capture attribute rendered element read information link provided see expects accept attribute input element perhaps issue experiencing", "d": "9/2015"}, {"body": "right missing docs tho submitted resolve", "d": "9/2015"}, {"body": "added react play beta final release coming soon", "d": "9/2015"}, {"body": "anyway get right need desperately", "d": "9/2015"}, {"body": "milesj sorry release soon rc week probably simply access dom node ref set attribute manually", "d": "9/2015"}, {"body": "probably fixed master still repro let know reopen", "d": "9/2015"}, {"body": "thank", "d": "9/2015"}, {"body": "react issue", "d": "9/2015"}, {"body": "works master", "d": "9/2015"}, {"body": "plan test perf improvements fb codebase would interesting learn", "d": "9/2015"}, {"body": "yes hopefully sure metrics able share would like test", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "well good news already enough pages introducing iterable numbers may web compatible anyway think dev code unfortunately lot pages incorrectly uses dev build react", "d": "9/2015"}, {"body": "good news", "d": "9/2015"}, {"body": "fyi noticed edge users told get", "d": "9/2015"}, {"body": "currently expected behavior code regexp going say nt actually work nt valid according spec think would wrong looks like would whole must xmlcompatible part applies hopefully good reason like lack support nt remember top head knew discussed lot around capital letters decided support intentionally syranide remember ever talked numbers", "d": "9/2015"}, {"body": "zpao yes guys rejected significant reason think keeping afaik completely safe cc chenglou", "d": "9/2015"}, {"body": "think like twig question see fullfeatured template languages like provides noparse sections", "d": "9/2015"}, {"body": "nt jsx compilers complain want make sure whatever transform js transforming converts valid jsx nt something responsible going close probably better luck asking question twig forum stack overflow", "d": "9/2015"}, {"body": "give information mean", "d": "9/2015"}, {"body": "spicyj know instance component fe thing get using inside component get destroyed componentwillunmount methods called stay alive reused", "d": "9/2015"}, {"body": "mean destroyed javascript objects garbage collected references", "d": "9/2015"}, {"body": "course assume react lets go reference calling componentwillunmount jsut wanted plan way keep objects alive across instantiations news react components guess make external singletons", "d": "9/2015"}, {"body": "yes react never reuses instance unmounted", "d": "9/2015"}, {"body": "using number objects instead numbers", "d": "9/2015"}, {"body": "fair question case moving backbone code react use function convert incoming json immutablejs map maps fields types like class inherits things relevant money constructor expects string server used everywhere throughout application preferable continue using function like able use without getting warning note actually problem rendering value warning raised warning slightly misleading instance since insofar understand would nt appropriate worth probably would nt chosen subclass task starting scratch", "d": "9/2015"}, {"body": "nt think going support sorry use hopefully nt inconvenient note actually problem rendering value warning raised usually warn things break future versions particular pattern break hard", "d": "9/2015"}, {"body": "fair enough thanks explanation", "d": "9/2015"}, {"body": "testutilssimulate uses react internal event system touch actual dom ca nt use dom event handlers happy take pull request improving docs make clearer", "d": "9/2015"}, {"body": "understand explains code nt work calling nt call react events react event listeners attached higher hierarchy actual node like ancestor node group delegate right node", "d": "9/2015"}, {"body": "yes listeners document level", "d": "9/2015"}, {"body": "react initialization based environment requireimport react environment point never change nt handle changing case likely never suggested way make use nodeenv via environment variable possible ensuring asap app requireimport", "d": "9/2015"}, {"body": "cool thanks", "d": "9/2015"}, {"body": "follow", "d": "9/2015"}, {"body": "duplicate", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "good news thanks syranide closing", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "consolelogging inside methods components indeed see calls happen preorder imho happen postorder nt verified reasoned makes sense mounting reverse unmounting preorder", "d": "9/2015"}, {"body": "intentional componentdidmount parent gets called componentdidmount children know children fully initialized using likewise componentwillunmount called children reverse componentdidmount chance reverse anything might done componentdidmount reactfamous probably alternate rendering backend appropriate like reactart reactcanvas reactnative nt yet good supported way unlike lifecycle method would allow actual unmounting order prefer solution removing children parent sounds pretty reasonable though", "d": "9/2015"}, {"body": "entirely sure suggesting familiar reactnative see two versions reactdom one barebones asis dom implementation expose dom play nice external events sure users realistically fix broken aspects dom event system model though perhaps nt really matter much reimagined implementation dom managed inline styles etc would map dom events events longer bubble like callbacks nt receive generic event object instead provided values immediate interest ie value perhaps selection etc etc expose events way makes sense isolated react apps largely hide dom details quirks merits second sounding community project perhaps made sense suggesting though", "d": "9/2015"}, {"body": "someone struggling integrating nonstandard dom events react app would like share humble opinion subject find really unfortunate react attempts normalize dom event system comes cost limiting events hook sure could add listeners remove far ideal specially components otherwise pure functions regard find hooks abstraction used virtualdom lot composable also becomes difficult normalize events different way think would lot better react exposed dom events also provided custom event system separate could dealt simply choosing different naming convention event handlers imo would even better employ similar hooks abstraction virtualdom makes really easy define amp share custom hooks like without wrapping container components", "d": "9/2015"}, {"body": "problem think dom events custom event system never integrate well already see frameworks since jquery days also see dom events nt cooperate iframes whole boxes steal events nt bubble example example responder event system need conditionally block certain events occurring elsewhere think good custom event system eventually going mutually exclusive integrating well dom event system basically mixing two boxwindowframe probably going lead bad time regardless likely going supported easy say virtualdom right thing offloads problem someone else solve start trying solve interaction problem gets messy custom hooks global namespaces becomes compatibility nightmare name used slightly different versions slightly different packages great write components great trying cooperate ecosystem large company could potentially make scoped extensions somehow seems better wrap commonly used components opting using instead nt big price pay compatibility", "d": "9/2015"}, {"body": "problem think dom events custom event system never integrate well already see frameworks since jquery days also see dom events nt cooperate iframes whole boxes steal events nt bubble example necessarily suggesting integrating rather providing two levels users hook common cases higher level custom event system work fine also prefer use possible something react team added support yet pretty much impossible hook higher level tire easy say virtualdom right thing offloads problem someone else solve start trying solve interaction problem gets messy meant say provides good low level foundation build say custom event system top ship integrated solution also allows custom additions system sure get messy try integrate hooks nt work argue better way extend custom hooks global namespaces becomes compatibility nightmare name used slightly different versions slightly different packages great write components great trying cooperate ecosystem large company nt follow refer say global namespace hooks nt reserve names box prop values hooks naming conflicts identity rather name maybe misunderstood said though could potentially make scoped extensions somehow seems better wrap commonly used components opting using instead nt big price pay compatibility always easy afraid example use bunch non standard dom swipe events see examples allow interaction various ui entities single container makes sense across board ui entities used boxing event hooks special component quite work well also cases use custom events swipes either add yet another container start mixing non great solution end day end implementing poor mans version hooks top react works sort number limitations make less ideal happy share code illustrating interest", "d": "9/2015"}, {"body": "necessarily suggesting integrating rather providing two levels users hook gozala yea basically issue meant address would two different view systems one passthrough dom one abstraction layer builtin richer event system hooks nt reserve names box prop values hooks naming conflicts identity rather name global name mean namespace property names props html elements share namespace globally meant claim name events page add custom logic someone else tries way scope differently could potentially whitelist things nt get special logic eg simpleeventplugin allowed way possible two different component systems collide terms logic either however might need break versions able intercept event system events special logic around special synthetic events single container makes sense across board ui entities used boxing event hooks special component use mixins reuse logic base components also component wraps bubbled events inside base components eg like facebooknetflixyahoo etc build abstractions top dom easy end bottom layer primitives build everything else however like mozillapolymer build abstractions dom bit pain wrap every time add new abstraction facebooknetflixyahoos world ca nt build abstractions dom ca nt wait new crossbrowser event plays nicely rest dom event system eg apple touch would need integration dom events like ca nt pass straight however seems fair decouple event system become easier use domheavy abstractions", "d": "9/2015"}, {"body": "global name mean namespace property names props html elements share namespace globally meant claim name mozswipegesturestart events page add custom logic someone else tries way scope differently think understand saying think misunderstanding hooks actually work though prop name irrelevant system relevant hook property value boxed example fact could two different event handlers event well add terms react jsx see tricky transition api without old one though one thing possibly jsx could desugar could js foo onclickid onclick handler assuming hooks use id symbols namespaces strings able avoid conflicts elm actually uses lists instead maps avoid naming conflicts together could potentially whitelist things nt get special logic eg simpleeventplugin allowed way possible two different component systems collide terms logic either however might need break versions able intercept event system events special logic around special synthetic events clear suggesting hooks low level api could build higher level event system top suspect higher level api likely still naming conflicts issue unless want completely rework api use mixins reuse logic base components also component wraps bubbled events inside base components eg return less find really cumbersome see two options may work associated element dom makes styling job complex causes handler one container others contained element make component returns child back use hooks register listeners child mounted standard events would need set child still ideal things actually little worth us also use custom elements attributes need set node tree otherwise nt work combination issues makes really difficult pull like facebooknetflixyahoo etc build abstractions top dom easy end bottom layer primitives build everything else however like mozillapolymer build abstractions dom bit pain wrap every time add new abstraction facebooknetflixyahoos world ca nt build abstractions dom ca nt wait new crossbrowser event plays nicely rest dom event system eg apple touch would need integration dom events like mousedown ca nt pass straight however seems fair decouple event system become easier use domheavy abstractions reason want better hooks dom fact least one team mozilla would like could higher level abstractions expose apis standard dom really difficult today given api hand suspect facebook netflix yahoo nt run problems less likely experimenting custom dom apis nt implemented anywhere yet anyway implied react virtualdom library mostly trying say yes please two layered event architecture could add support events react", "d": "9/2015"}, {"body": "gozala thanks lot great feedback slightly different take thoroughly thought heard considered special element register event listeners nt actually contribute dom wanting would trivial us add since custom event bubbling without tricky would nice special dom elements nonsemantic contributions well one problems web components", "d": "9/2015"}, {"body": "gozala thanks lot great feedback slightly different take thoroughly thought heard glad could help considered special element register event listeners nt actually contribute dom wanting would trivial us add since custom event bubbling without tricky would really great actually tried version would attempt pass handlers child could quite figure clear way since deprecated one problems web components another alternative could something along lines use workaround whitelist custom event attribute properties basically function takes map custom may also remind earlier mentioned hooks react component render creates element given invokes custom props hooks lifetime methods looks use api major limitation still struggle part gecko limitation attributes properties need set node injected document end end using maybe react could expose something along lines note would avoid name collision props scoped custom defined elements unless custom prop already collides name taken react also handles custom anything problem events attributes composition ideal little better plain containers cause custom props implementations could reused see ps vjeux mentioned thinking stuff struggling personally trying move app code webworker keep renderer main thread happy chat good venue", "d": "9/2015"}, {"body": "wanting would trivial us add since custom event bubbling without tricky would nice special dom elements nonsemantic contributions well one problems web components seems like generic approach especially consider overhead components also seems kind breaks nontrivial cases nt seem nice also breaks component isolation way nt reach inside opaque components attach event handlers without permission would nt make sense approach along lines way generic components could instead pass events along wherever go say button decorative frame decorative frame nt respond events proposed solution nt seem way around", "d": "9/2015"}, {"body": "problem event bubbling general nt make worse hassle add listeners every little node may may capturing something use pointerevents none make nonhit target surfaces like border think problem goes much deeper dom model ideally would render hit targets completely separately rendering imo sep andreas svensson notifications githubcom wrote wanting would trivial us add since custom event bubbling without tricky would nice special dom elements nonsemantic contributions well one problems web components seems like generic approach especially consider overhead components also seems kind breaks nontrivial cases nt seem nice also breaks component isolation way nt reach inside opaque components attach event handlers without permission would nt make sense approach along lines way generic components could instead pass events along wherever go say button decorative frame decorative frame nt respond events proposed solution nt seem way around reply email directly view github", "d": "9/2015"}, {"body": "event system nt specific dom would also help non dom renderers easily add events react brought", "d": "9/2015"}, {"body": "known less dupe", "d": "9/2015"}, {"body": "click plus button check console output", "d": "9/2015"}, {"body": "bug occurs click target glyph instead button original browser mouse event target correctly set synthetic event target set reproducible", "d": "9/2015"}, {"body": "looks like bug undefined fix span element probably nt want want get button already works correctly", "d": "9/2015"}, {"body": "wait correctly button span testing want button definitely want", "d": "9/2015"}, {"body": "spicyj changed beforeeach require react declaring document window objects global scope follows js beforeeach function globaldocument jsdomjsdom globalwindow globaldocumentdefaultview globalelement globalwindowelement globalnavigator useragent nodejs react require reactaddons reacttestutils reactaddonstestutils started giving another error error invariant violation createnodesfrommarkup dummy initialized idea going", "d": "9/2015"}, {"body": "ok finally figured problem issue jasmine interleaving multiple tests sure moving test cases one suit fixed issue documented someone facing similar issue wants solution", "d": "9/2015"}, {"body": "spicyj discovering numerous versions error updating codebase would test say clicking something class div updated hide inside one components something nt testing", "d": "9/2015"}, {"body": "benhughes paste sample test see mean", "d": "9/2015"}, {"body": "benhughes come across started accessing though dom nodes seeing answer example would jasmine", "d": "9/2015"}, {"body": "sheepsteak sounds like different warning glad got work", "d": "9/2015"}, {"body": "right searching two problems answer relates warning render", "d": "9/2015"}, {"body": "recommend taking inspiration battletested special event api jquery allowed devs normalize events across browsers wheel events example support new kind events triple click saying one good idea", "d": "9/2015"}, {"body": "chance get kind feedback", "d": "9/2015"}, {"body": "may related", "d": "9/2015"}, {"body": "asked many times see discussion might make sense allow function pass become simple event plugin default way whitelist necessarily would make breaking change ever added custom logic particular event likely however stance already taking attributes general", "d": "9/2015"}, {"body": "might make sense allow function pass become simple event plugin default way whitelist necessarily would make breaking change ever added custom logic particular event likely however stance already taking attributes general could require specific simple event plugin avoid breaking changes could simple complex robust", "d": "9/2015"}, {"body": "proof concept showing exceptions swallowed", "d": "9/2015"}, {"body": "finally got around solved without automated codemod see patterns find wild might reconsider think usually indication something obscure way leave developer fix class running codemod pick whether want put something prototype inline constructor use class properties would require better static analysis tools infer whether function call nonsimple function declaration side effects etc", "d": "9/2015"}, {"body": "opened address", "d": "9/2015"}, {"body": "spicyj thoughts", "d": "9/2015"}, {"body": "sebmck plans giving arrow functions concise methods babel basically working around fact ca nt distinguish plain function ambivalent regard constructable would go far saying function expressiondeclarations considered deprecated best practice use forms creation function", "d": "9/2015"}, {"body": "sebmarkbage plans giving arrow functions concise methods babel really although recently leaning towards correctness performance eg babel going tdz default bunch cases could statically analyse omit assignment iife might worth adding would go far saying function expressiondeclarations considered deprecated best practice use forms creation function probably would nt go far already feel pitchforks raised stuckouttongue", "d": "9/2015"}, {"body": "get excited redux timetravel debugging eventually creating test cases dispatched actions really like components encapsulate state trying create place redux state component instance cumbersome pretty ridiculous component already place state also turns component state state timetravel debugging useful state keep redux boring state nt put redux nt get timetravel feels weird love redux middleware create tools around app state sure api trillion holes prime conversation stuff like js reactrender el let tree reactgetstatetreeatnode el reactonstatetreechangeatnode el fn reactrenderwithstatetree tree el would enough build timetravel debugging tools yeah", "d": "9/2015"}, {"body": "yes key issue dev mode debugging tool also production api strongly informs implementation api limits short cuts take sep ryan florence notifications githubcom wrote get excited redux timetravel debugging eventually creating test cases dispatched actions really like components encapsulate state trying create place redux state component instance cumbersome pretty ridiculous component already place state also turns component state state timetravel debugging useful state keep redux boring state nt put redux nt get timetravel feels weird love redux middleware create tools around app state sure api trillion holes prime conversation stuff like reactrender el let tree reactgetstatetreeatnode el reactonstatetreechangeatnode el fn reactrenderwithstatetree tree el would enough build timetravel debugging tools yeah reply email directly view github", "d": "9/2015"}, {"body": "ran across thread glad see around past months working something friend direct area though approach touches things general idea added global state store behind react also works component local state also stores backed global store behind scenes result view system simple write reducers complex concepts still upside stores logging serializable timetravel inspectable easily optimized immutable libraries next step ended writing compiler power gives us new things namely compiler track views rely stores free user useknow actions really another abstraction really want change variable views update automatically finally probably topic went ahead created view macro lets use normal variables inside views backed global store getting benefits requiring users learn classes reactspecific abstractions example would js view header let books title dune const addbook gt bookspush title book booktitle books backed framework addbook would log added book change view backed store though new macro actually much closer normal coding use variables functions result still work progress incredibly fun use almost ready beta interested feel free reach sum definitely support idea talking", "d": "9/2015"}, {"body": "really want change variable views update automatically cases complex cases like action occurred execute business logic new state possibly update n components jimfb documentationgists explaining state hoisting", "d": "9/2015"}, {"body": "echoing ryanflorence like way react encapsulates state component use react fairly heavily myntraflipkart keep bumping problem server side rendering oversimplify consider following relations view \u0192 state state \u0192 props user time server access props nt need user inputs generate first rendered html however react nt run lifecyclestate methods server either componentwillmount setstate etc meaning effect time component discarded server makes component lifecycle methods fairly useless anything nonbrowser specific network requests async business logic etc etc ideal hence frameworks pull state signals react components run inmemory pass props react component represents snapshot tree given set props flux frameowrks etc etc really like server side rendering something like js import asyncapp app expressjs boilerplate appuse app req res gt var browser new browser lightweight browser nt dom events xhr etc var el assumption adding listeners like onclick etc noops lifecycle methods like componentwillmount etc etc called would reduce reliance redux etc managing state would elegantly handled inside component thoughts", "d": "9/2015"}, {"body": "threepointone fyi componentwillmount called invoking reactrendertostring use componentwillmount baobab immutablelike library replaced need component state async fetching server client would great react could something like builtin could use components project", "d": "9/2015"}, {"body": "briandipalma comment pattern wellknown team one nt talked much docs basic ideatldr hoist state child component child component defines sort blackbox data type child optionally accepts parent child component stores internal state object every component entire state tree effectively bubbled root node gives parent component full control state subtree parents reset children passing newempty state objects snapshot child saving copy state object reparent clone child restoringreusing state object etc basically allows components finegrained control children internal state without breaking abstractions example top issue defined view shows three child views eg tab view child views arbitrarily complex retain internal state even user changes tabs goes back first tab pattern already allows users pull state state tree avoids introducing new apis imho pattern woefully underutilized largely never documented downside state effectively managed userland rather managed react naturalunavoidable outcome externalizing state tree", "d": "9/2015"}, {"body": "jimfb model fit rerendering components state changed", "d": "9/2015"}, {"body": "dantman restoring serializedcopied state allows rerender prior state time reusing current state object allows rerender component currentlatest state child components trigger rerender calling friends like empty updating current state object sure completely understand question let know nt answer", "d": "9/2015"}, {"body": "jimfb got talking components rerendered change state like happens call though sure like idea calling dummy calls whenever component state changes feels like dirty hack", "d": "9/2015"}, {"body": "dantman well hack wouldcould solved whole discussion p regardless exists trigger update state nt tracked react", "d": "9/2015"}, {"body": "like able separate rest library well overkill need include react libraries dump reactcompatible virtual dom nodes", "d": "9/2015"}, {"body": "overkill need include react libraries mean include react library exports commonjs module specify user install mean browser build need include react make sure library works similar defined nt work good way ensure make umd builds webpack define react external either way react never included component libraries", "d": "9/2015"}, {"body": "thanks response gaearon spent lot time evaluating redux weekend mean include react sorry comment bit vague instead think able something like think people talking say inlining elements nt dug deep enough issues yet really like see react elements provide standard interface virtual dom nodes case making ui library could really use react virtual elements diff patch operations nt need rest component lifecycle functionality comes react", "d": "9/2015"}, {"body": "guess link toward repo subject gaearon close issue", "d": "9/2015"}, {"body": "gurpreetsran fix move properties classes see", "d": "9/2015"}, {"body": "landed closing much better", "d": "9/2015"}, {"body": "eta released", "d": "9/2015"}, {"body": "fix rc released couple weeks ago final release soon", "d": "9/2015"}, {"body": "posting future readers", "d": "9/2015"}, {"body": "jsx transform used nt recommend confusing ever try pass prop components would nt expect access different name", "d": "9/2015"}, {"body": "arrowup correct amp valid adding flava flave thread", "d": "9/2015"}, {"body": "fwiw hit file issue seemed pretty broken speaknoevil heart code straightforward seems correct far documentation concerned treating opaque using manipulate nice pattern look specific optional children make sure one certain type siblings order way throws error one element array hence issue hankey code looks worse relying underlying implementation lines yet works fine error note replacement beers happy put patch consensus something done even", "d": "9/2015"}, {"body": "could note readme installation", "d": "9/2015"}, {"body": "dupe fixed", "d": "9/2015"}, {"body": "jimfb zpao thoughts accepting pr", "d": "9/2015"}, {"body": "defer zpao objections", "d": "9/2015"}, {"body": "closing unless hear", "d": "9/2015"}, {"body": "yes come back still problem currently nt time try agaiin migration", "d": "9/2015"}, {"body": "already fixed pr closed", "d": "9/2015"}, {"body": "looks like fixed think closed", "d": "9/2015"}, {"body": "submitted fresh pr review changes small straightforward", "d": "9/2015"}, {"body": "status updates burn", "d": "9/2015"}, {"body": "looking nt issues updating docs", "d": "9/2015"}, {"body": "zpao issue double", "d": "9/2015"}, {"body": "description less big picture like longer tail work", "d": "9/2015"}, {"body": "facepalm sorry thanks", "d": "9/2015"}, {"body": "per probably dropping valuelink controlled components linkedstate mixin really nt used much even less people moving towards classes also replies thread indicates lack interest topic since linkedstate appears way guess wo nt invest lot effort enhancing mixin mostly legacy point find useful feel free create linkedstate mixin apps andor publish others use", "d": "9/2015"}, {"body": "put together sidebyside comparison lifecycle support normal rendering shallow rendering exposing would allow lifecycle methods called perhaps would better fix make shallow rendering engine call methods output using normal rendering output using shallow rendering heavy shallow rendering users current project work using provide helper functions including adding allow us test full lifecycle scenarios able contribute pr get steer best way proceed", "d": "9/2015"}, {"body": "worth creating new issue specifically ensuring shallow rendered components progressed full lifecycle eg leaving", "d": "9/2015"}, {"body": "jsdf yea seems reasonable addressed separately seems reasonably simple though pull request would welcome", "d": "9/2015"}, {"body": "spicyj custom transaction shallow rendering eventually get rid transactions completely", "d": "9/2015"}, {"body": "blainekasten still seeing", "d": "9/2015"}, {"body": "company code sure still issue would say probably close see someone else runs suspect issue getting wrong version react", "d": "9/2015"}, {"body": "thanks update", "d": "9/2015"}, {"body": "right thing shipping list", "d": "9/2015"}, {"body": "sure problem issue", "d": "9/2015"}, {"body": "example works rc", "d": "9/2015"}, {"body": "syranide caveat since rendering separate dom node nt work server actually experimented recently tried getting around server limitation messy setup render node react server client drop rerender dom node relocated unfortunately ran issues react stumbling modified dom scrap experiment", "d": "9/2015"}, {"body": "also influences dialectic characters typed latin languages example os x inserting fail using international keyboard even long press use variant failing sorry seems related apologies", "d": "9/2015"}, {"body": "update suffering issue", "d": "9/2015"}, {"body": "none currently high priority us right happy look pull request anyone dives fixing", "d": "9/2015"}, {"body": "progress using webpack babel react nodeenvproduction set still see message console reactdevtools installed since production mode", "d": "9/2015"}, {"body": "appshore using nodeenv enough compilation need actually define code one way use defineplugin webpack", "d": "9/2015"}, {"body": "gaearon thank tip works fine", "d": "9/2015"}, {"body": "please note use nodeenvproduction development silences many helpful warnings", "d": "9/2015"}, {"body": "zpao would open pr allows disabling", "d": "9/2015"}, {"body": "going close favor since discussion taking place like solution arrived thread", "d": "9/2015"}, {"body": "thanks jimfb", "d": "9/2015"}, {"body": "hi want work bug please direct build instructions react want set workbench regards tapesh mandal", "d": "9/2015"}, {"body": "see readme", "d": "9/2015"}, {"body": "hit well nt figure error quite sometime perhaps make sense sort configuration option nt accept objects children case rendering object purely accidental", "d": "9/2015"}, {"body": "going stop supporting objects children nt going make configurable see causes confusing issues also stops us making advancements going close seems like ca nt make part warning better see related discussion making warning better different way", "d": "9/2015"}, {"body": "spicyj idea handle svg elements likes tried something like works run code chrome debugger however running nt couple edge cases well noscript tags web components breaks tests well nt quite gotten around fixing simple ugly fixes", "d": "9/2015"}, {"body": "hmm svg makes little trickier ideally know whether svg container need handful stuff nt right may wait thanks looking kastermester", "d": "9/2015"}, {"body": "davidleverage made day form id subjectupdate put right track", "d": "9/2015"}, {"body": "installed still got issue get return documentbody referenceerror document defined getactiveelement reactreconciletransactionreactinputselectiongetselectioninformation reactreconciletransactionmixininitializeall reactreconciletransactionmixinperform reactupdatesflushtransactionmixinperform reactupdatesflushtransactionassignperform objectflushbatchedupdates objectwrapper flushbatchedupdates reactdefaultbatchingstrategytransactionmixincloseall reactdefaultbatchingstrategytransactionmixinperform objectreactdefaultbatchingstrategybatchedupdates objectenqueueupdate enqueueupdate objectreactupdatequeueenqueuesetstate articlereactcomponentsetstate article requestselfcallback emittwo requestemit request emitone requestemit incomingmessage emitnone incomingmessageemit endreadablent processtickcallback", "d": "9/2015"}, {"body": "zenwolf still need use experimental function binding operator", "d": "9/2015"}, {"body": "myboon component constructor bound function component instance handler still never called", "d": "9/2015"}, {"body": "error confused difficult trace error", "d": "9/2015"}, {"body": "folks already made error message better please stop commenting", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "infolock thank much sure help someone future another way get error uncaught typeerror typetouppercase function referencing component nt added module exports terrible error message", "d": "9/2015"}, {"body": "could anybody please confirm following context passed ownerownee relationship parentchild relationship whenever comes changed context passed parentchild relationship ownerownee relationship tree subset parentchild relationship tree true would great anybody could shed little light", "d": "9/2015"}, {"body": "correct usually always true possible owner odd things elements creates like render somewhere child also order elementscontextassignments may different ownerownee vs parentchild relationship important components override context variable value first order approximation correct say ownerownee subset parentchild strictly true corner cases also context supported feature", "d": "9/2015"}, {"body": "thanks jimfb helps could give point example might true tried picture one based description gave could nt see clearly", "d": "9/2015"}, {"body": "dupe fixed", "d": "9/2015"}, {"body": "promisereturning function would great help convinced live inside react even addons implementing userland seems like best choice could benefit promise libraries like bluebird actually implement cancelable promises", "d": "9/2015"}, {"body": "wanted let know also causing trouble autogenerated etags like connectexpress since reactids different every request etag different well big deal though since custom etags way get around cost anyway", "d": "9/2015"}, {"body": "qwtel interesting point reason random avoid conflicts multiple serverside renders page perhaps devs object api bloat able provide custom react root id would make sense future likely go away altogether", "d": "9/2015"}, {"body": "check reactelementvalidator causing exceptions using new optimisation", "d": "9/2015"}, {"body": "strml iirc seen using inline elements transform dev build react cc spicyj", "d": "9/2015"}, {"body": "yeah", "d": "9/2015"}, {"body": "meant fix check guess missed yes use prod build react using inlined elements", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "iammerrick", "d": "9/2015"}, {"body": "want able respond new props event shouldcomponentupdate returns false case ca nt use componentdidupdate use", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "helps dry code simplifying logic would open componentdidreceiveprops called initial setup make example starting thread single function", "d": "9/2015"}, {"body": "thoughts think", "d": "9/2015"}, {"body": "jquense jongbeau love get look example exists", "d": "9/2015"}, {"body": "quick workaround forceupdate trigger rerender work latest state simply grabbing store", "d": "9/2015"}, {"body": "sebmarkbage updates issue", "d": "9/2015"}, {"body": "proposal need revised include field per", "d": "9/2015"}, {"body": "sebmarkbage shh working pr sebmck beat", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "sebmarkbage updates issue", "d": "9/2015"}, {"body": "babel supports conjunction react enable transform production eg minifying code", "d": "9/2015"}, {"body": "may suggest notes include detail lifecycle methods especially wo nt work functionsascomponents final release example provided react kind equality use cheers", "d": "9/2015"}, {"body": "stateless component functions shouldcomponentupdate shouldcomponentupdate always returns true", "d": "9/2015"}, {"body": "spicyj thanks clarification smart component render depending vs traditional preferred way go modules work well", "d": "9/2015"}, {"body": "checked stuff closing zpao created separate also looking milestone github", "d": "9/2015"}, {"body": "already fixed see pr closed", "d": "9/2015"}, {"body": "chrome could work around firefox nt cause form submit described simulating click react nt cause form submit either browser", "d": "9/2015"}, {"body": "believe also prevents changing focus render example", "d": "9/2015"}, {"body": "given contested correct behavior autofocus rather abandon browsers agree upon usage rather able something like since syntax probably doable maybe something like", "d": "9/2015"}, {"body": "fwiw able get working using probably better way also perhaps usecase multiple ref support example", "d": "9/2015"}, {"body": "way want within parent well might reactchildrenmap clonewithprops refs nt recommend option given says however cases still might necessary beneficial seem agree cases useful combine common pattern react wrap component abstraction problem absolutely agree edge cases usually propsstate need given example currently possible create abstract component focuses child use case scrollbased animations simply ca nt use never even get close components agreed api implement method everything working really nice moment see scrolling action one components needs refactoring would love drop abstract component mix cleans current top level component ca nt possible call currently looping top level component ideas", "d": "9/2015"}, {"body": "ran problem way constrain ie certain component type", "d": "9/2015"}, {"body": "think something like would discussion maybe sure lot room confusion really nt pair well specialized components", "d": "9/2015"}, {"body": "map always returns array", "d": "9/2015"}, {"body": "sebmarkbage maybe fix", "d": "9/2015"}, {"body": "go error trying add zendesk widget", "d": "9/2015"}, {"body": "nt know feasible nice able full error messages production without performance measurements things slow app", "d": "9/2015"}, {"body": "wordnewscomment", "d": "9/2015"}, {"body": "want chime mention least behavior consistent across input fields textarea textarea treated differently", "d": "9/2015"}, {"body": "uptownhr far know behavior across inputtextarea misunderstanding", "d": "9/2015"}, {"body": "spicyj see", "d": "9/2015"}, {"body": "spicyj better example", "d": "9/2015"}, {"body": "given issue open around months people discussing since verdict seems pretty straight forward input fields least needs adhere one standard treats move forward fix propose changing textarea adhere input fields behave removes text value turns think core issue", "d": "9/2015"}, {"body": "first thing need decide idealcorrect behavior since matter behavioral change one option null clears input element makes uncontrolled another makes input element uncontrolled without resetting value another return defaultvalue another keep current semantics forestall change semantics text areas input fields behave differently avoids introducing subtle changes behavior break people apps decide desired behavior move forward fix cc spicyj sebmarkbage thoughts", "d": "9/2015"}, {"body": "syranide running tabindex issue mean used corresponding dom node component tabindex prop set later removed tabindex attribute set setting unique key component nt seem change anything", "d": "9/2015"}, {"body": "loganfuller something like", "d": "9/2015"}, {"body": "syranide ah see force creation new dom element would work integrate thirdparty library mount would expensive reinitialize time associated dom component changed add extra wrapper static key handle integration would nt performant manually dom element component updates rather forcing creation new one", "d": "9/2015"}, {"body": "loganfuller try thirdparty library maybe helps", "d": "9/2015"}, {"body": "add extra wrapper static key handle integration would nt performant manually removeattribute dom element component updates rather forcing creation new one requires bit manual work best workaround yes", "d": "9/2015"}, {"body": "nt actionable asis still trouble please post minimal repro", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "counting got one looking everywhere sneaky react twin luck nt show duplicates possibilities read doubleloading react script webpack doublebundling reactaddons causing trouble working insidious", "d": "9/2015"}, {"body": "ameensol hopefully set packagejson correctly simply remove reinstall everything usually fixes unless incorrectly configured module", "d": "9/2015"}, {"body": "syranide tried git clone repo reinstall nt issue eventually noticed error happening first navigation similar issue started taking apart navigation menu turns reason putting reactrouter inside reactboostrap causing react go nuts posted findings stack overflow", "d": "9/2015"}, {"body": "think also might something using generated reactrouter root component hierarchy wrapping higher levelcomponent accepts flux instance passes context isolating issue repo gave following error", "d": "9/2015"}, {"body": "nested links thing due invalid html new warning", "d": "9/2015"}, {"body": "nested links thing due invalid html new warning way got new warning days ago beautiful great work", "d": "9/2015"}, {"body": "getting error using npm link require module working ca nt sure caused multiple versions react error go away paste npm module directly app instead using via npm link nt get error using npm module normal way react dev dependency nt think gets installed node modules anyone else run issue come fix thanks", "d": "9/2015"}, {"body": "got error running together", "d": "9/2015"}, {"body": "please report random problems issue file new issues", "d": "9/2015"}, {"body": "trying use shallow rendering mostly working thing left figure recommended way mock events get events pass attempted use method directly test seems way say something could post stack overflow little luck finding good information shallow rendering online anyone experience shallow rendering give help hero source code", "d": "9/2015"}, {"body": "issue shallow rendering create new issue post", "d": "9/2015"}, {"body": "new issue please", "d": "9/2015"}, {"body": "trevordmiller might find helps providing higherlevel assertions sort thing particular case would avoid asserting event handler anchor test different test would want call test handler", "d": "9/2015"}, {"body": "davidgilbertson super late reply scry fancy word find sure nt use find maybe avoid confusion plural singular forms whose names would otherwise differ one", "d": "9/2015"}, {"body": "scry legacy internal fb apis reason", "d": "9/2015"}, {"body": "like trevordmiller keenly lookout way correctly unit test event handling react code documentation anyone could point looked nt seem something scratches particular itch scenario cut const shallowrenderer testutilscreaterenderer shallowrendererrender problem looks like class problem extends reactcomponent constructor props super props thisonclick thisonclickbind render const alert thisprops const cssclass cellstatetocssclass alertcellstate return onclick thiscontextroutertransitionto thispropsalertroutename thispropsalertrouteparams like able assert wired component loss", "d": "9/2015"}, {"body": "actually want assert clicking interacts router pass fake context router mock try simon call apologies brevity phone", "d": "9/2015"}, {"body": "hi glenjamin thanks responding clear mock successfully comes context digging source came onclick triggers transitionto work progress gt const alerts stubsummarystoregetstatewithcompanyconnectionstoreerrorsthenwarnings const alert alerts const shallowrenderer testutilscreaterenderer const transitiontospy jasminecreatespy transitionto const mockcontext router transitionto transitiontospy shallowrendererrender mockcontext however dies death test failed failed tests summaryproblem onclick triggers transitionto work progress phantomjs windows typeerror undefined object evaluating thiscontextroutertransitionto onclick c lt e c lt e makes think getting context mocking wrong know successfully mock context using jasmine probably guessed feeling close", "d": "9/2015"}, {"body": "using react probably hitting difference parent amp owner context skin deep wrapper helps context example test suite short answer wrap render another function call let skin deep set context problem go away", "d": "9/2015"}, {"body": "using react yes port issue resolve might give crack case rc", "d": "9/2015"}, {"body": "problems upgrade raised issue return later think", "d": "9/2015"}, {"body": "updates thx workaround hope work fixed", "d": "9/2015"}, {"body": "see svg fragment identifiers work different technic lennart hildebrandt notifications githubcom show example using nonreactsvgstuff used react able set href attribute image tags reply email directly view github paulo jorge dias \u00e0 procura erro certo looking right error", "d": "9/2015"}, {"body": "branch managed get namespaced attributes work using camelcase renders", "d": "9/2015"}, {"body": "also get proper namespace attribute namespace", "d": "9/2015"}, {"body": "quite sure understand mean give explanationexample", "d": "9/2015"}, {"body": "able get links working also need attribute namespace react handle example", "d": "9/2015"}, {"body": "pass dom node", "d": "9/2015"}, {"body": "lennerd understanding xmlns xlink required html", "d": "9/2015"}, {"body": "looking svg config tests seems like namespace passed dom node method svgdompropertyconfigjs dompropertyoperationstestjs", "d": "9/2015"}, {"body": "sounds promising would great remove dependency", "d": "9/2015"}, {"body": "yes work upcoming release", "d": "9/2015"}, {"body": "hi benchmark react core engine building framework like reactnative find wasted time major bottleneck nodes sandybridge made sure culprit broken render implementation gc", "d": "9/2015"}, {"body": "notice transition enteractive css rule enter thank moving class fixed", "d": "9/2015"}, {"body": "curious issue closed seems legit issue", "d": "9/2015"}, {"body": "part html works specific react", "d": "9/2015"}, {"body": "know old closed issue wanted chime simple solution people run happens mutate value dom representation different state value set simple solution add ref mutate ref value manipulated one update state quite clean solves problems", "d": "9/2015"}, {"body": "maybe help", "d": "9/2015"}, {"body": "relatedtarget works focusout blur", "d": "9/2015"}, {"body": "one issue related isomorphic apps context setstate component mount comes mind rather one mess said good practice try call instead immediate avoids triggering rerender necessary using doublerender context pattern render server client client rerender really nt problem component rendered clientonly eg using subsequent requests nt even hit server next page visit client rendering reasonable clientonly stuff two methods example initialization based browser features state immediate stuff timeouts ajax dom using pattern run component context says rendered server target clientonly runs component thinks server client stuff first load first run server target actions may trigger checksum errors nt know target switches client even defer browser target still issue needed avoid doublerender rendered client", "d": "9/2015"}, {"body": "exactly issue zendesk widget thanks suggesting trick worked nt able make work react hot loader requires beginning inject production", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "chenglou syranide happy make pr weekend wanted possible detect cases return object although latter two may challenge make separate prs command either latter two start look slow messy", "d": "9/2015"}, {"body": "thanks helpful would great warning showed offending line code console comes reference warningjs nt helpful", "d": "9/2015"}, {"body": "side note instead", "d": "9/2015"}, {"body": "milesj set attribute using using generate warningerror", "d": "9/2015"}, {"body": "aware language construct simply wrap attribute quotes", "d": "9/2015"}, {"body": "milesj wondered guess reactjs developers good reason", "d": "9/2015"}, {"body": "please read discussions links reasoning covered", "d": "9/2015"}, {"body": "syranide dhruvbhatia created sample based syranide suggestion would love hear comments im pretty new react", "d": "9/2015"}, {"body": "per current plan pull linking controlled components discussed easy create wrappers expose behavior including undefinednull reset behavior described issue find behavior useful would encourage publish npm module git repository provides functionality wrapper component people use since something plan supporting core going go ahead close issue", "d": "9/2015"}, {"body": "addon actually react process split core react dom reactdom guessing reactsvg finally come", "d": "9/2015"}, {"body": "filter", "d": "9/2015"}, {"body": "phantom bump trying lot svg work react lot issues like please support svg attribute would great able define without fork change react let know help make reality", "d": "9/2015"}, {"body": "spicyj nt got explain whole point keymirror", "d": "9/2015"}, {"body": "nt got explain whole point keymirror google closure compiler advanced mode powerful uglifyjs compress code like crazy advanced mode property names define crushed unless defining strings code like closure compiler advanced mode compress break code two options use string property name opt crushing works miss nice optimization opportunity b use helper makes sure keys values match", "d": "9/2015"}, {"body": "random usage nt really supported moved react closing", "d": "9/2015"}, {"body": "nice gajus concerned performance cost yes deactivating production mode would nice", "d": "9/2015"}, {"body": "yes right easily disable production", "d": "9/2015"}, {"body": "worth running saw code relied firing even checkbox already checked wanted know whether intentional stable behavior sounds like thanks yall", "d": "9/2015"}, {"body": "vague thoughts solution exists supports changing radio button api feels dangerous might apps depend passing prop radio solution exists would nt break apps seems lead statebased solution already written etaig paranoid concern statebased solution whether way universe could possibly get sync guess click events way change checked state aside direct programmatic changes though feel like rest react nt defend programmatic changes might okay ignore concerns", "d": "9/2015"}, {"body": "guess get sync bad use stored state decide whether click event really change wo nt like deadlock checkbox make ignore inputs worstcase scenario someone screws state underneath us miss bad fire redundant one bad p gut says apps recover even think programmatic changes fire events one happens could try catch update stored state accordingly", "d": "9/2015"}, {"body": "matchu nt write pr yet though tried versions see possible write weekend post maybe make pr one", "d": "9/2015"}, {"body": "sweet thanks etaig incidentally today discovered new issue synthetic events radio buttons might interesting followup project since already explored react radio button event system might tired fine p app gon na patch time anyway", "d": "9/2015"}, {"body": "getting error using reactbootstrap ui components descriptive allowed show much code added two reactbootstrapbuttons text dynamically change something looks like modal two select boxes select box supposed representing button change first select change update first button text change second select update second button text notice modal child render function shown wrapper contains modal table element make sure state changes modal element makes callback parent function setstate based select drop downs modal popup happens click first button popup shows dropdowns displayed change dropdown button text change change dropdown button doesnt change click gives uncaught error invariant violation reactmount two valid unequal nodes refesh page repeat steps second button opens modal second drop work first drop doesnt close modal try open button error occurs uncaught error invariant violation reactmount two valid unequal nodes believe happens involve states dynamic ui interactivity something gets mounted state value pass make dynamic change mounted value remain react nt believe element needs changed rerender makes another copy top id different value garbage collection needs handled properly rerender case typical childtoparent communication", "d": "9/2015"}, {"body": "able fix changed made regular html yes something children nodes depth component case react component children", "d": "9/2015"}, {"body": "might also want checkout velocitytransitiongroup uses velocityjs instead css transitions though made minor addition component fork allows specify transitiontype stay set another transitionname set later seems like adapted version used", "d": "9/2015"}, {"body": "rc asked specify durations fixed", "d": "9/2015"}, {"body": "progress issue sure rootcause pages rendered react scrolling extremely slow firefox mobile android eg react website", "d": "9/2015"}, {"body": "site try commenting logic refreshscrollvalues see makes difference happy prioritize syranide try get", "d": "9/2015"}, {"body": "spicyj site example react amp fluxible page see exactly issues scrolling firefox mobile applied changes manually solves problem issue might unrelated problem investigate thanks considering prioritize much appreciated", "d": "9/2015"}, {"body": "doctype fullpage server rendering", "d": "9/2015"}, {"body": "usecase use react render emails using would nice add conditionnal comments outlook", "d": "9/2015"}, {"body": "react rendering tag least test utils raises invariant violation sure mentioning make new issue figured applies", "d": "9/2015"}, {"body": "zackify unrelated please file new issue steps repro", "d": "9/2015"}, {"body": "happened also apparently adblocker culprit", "d": "9/2015"}, {"body": "rendered version easy setstatedeep might guess best get", "d": "9/2015"}, {"body": "impossible read mobile pity reading docs task anywhere width covers hard font size tiny", "d": "9/2015"}, {"body": "flowtypeorg responsive steal", "d": "9/2015"}, {"body": "kind workaround works", "d": "9/2015"}, {"body": "titobouzout nav bar screwed otherwise looks ok", "d": "9/2015"}, {"body": "revisit next redesign website", "d": "9/2015"}, {"body": "already using babel serverside code say via add inline env transformer get around problem", "d": "9/2015"}, {"body": "update one", "d": "9/2015"}, {"body": "original issue fixed relanded gregorym likely experiencing different issue perhaps", "d": "9/2015"}, {"body": "anyone interested released module conditional rendering feedback welcome", "d": "9/2015"}, {"body": "stoeffel looks like great solution thanks sharing", "d": "9/2015"}, {"body": "would like bump maybe undocumented purpose people using still using quite painful especially trying upgrade react nt sure contexts feature changed libraries breaking reasons documented purpose least put warnings people using saying either nt using officially supported careful using likely change also change would nice able see worked older versions case need work old project", "d": "9/2015"}, {"body": "react warned context usage would essentially impossible use nobody wants use library causing react output junk warnings", "d": "9/2015"}, {"body": "ericwooley nt documented think pretty consistent telling people supported feature used yet try add warnings change context breaking way undocumented intentionally ca nt add global warning gaearon said would cause libraries like reactrouter start emitting warnings everyone projects", "d": "9/2015"}, {"body": "would essentially impossible bad thing", "d": "9/2015"}, {"body": "react warned context usage would essentially impossible use nobody wants use library causing react output junk warnings imo would perfect hopefully package maintainers figure way accomplish things without depending unsupported undocumented features weather officially supported people using major packages lack documentation hindrance warnings would discourage usage packages see would nt desirable several large packages use brings back full circle contexts needing documentation documenting supported nt make sense put big warning documentation supported document works point time", "d": "9/2015"}, {"body": "oh god please oh please oh please keep feature react saving hide bigtime project allowing easily let components communicate without passing props place without add complexity app adding something like flux redux issue noticed using use context preserved using works read somewhere properly handle passing context downward", "d": "9/2015"}, {"body": "bad thing better way implement something like lt react router lt react redux without resorting singletons please tell much like drop context usage ca nt find way implement server rendering independent requests keeping sane component api", "d": "9/2015"}, {"body": "much like drop context usage please nt ruin lives building saas meteor cleansimple way include fluxlike architecture meteor moment", "d": "9/2015"}, {"body": "please nt free use code saying troubles halfbaked would gladly avoid knew imo would perfect hopefully package maintainers figure way accomplish things without depending unsupported undocumented features package maintainer assure many people talked eg react router folks would nt touch context ten foot pole possible figure way accomplish important things mostly related server rendering sideway data without unfortunately best knowledge context solution important use cases right", "d": "9/2015"}, {"body": "love jump redux problem right meteor use something like browserify webpack include nicely packaged meteor package redux meteor run issues getting browserify npm container working curious find halfbaked context far smooth sailing annoying thing run maintain duplicates context items top level one define type one link", "d": "9/2015"}, {"body": "nicely packaged meteor package redux helps umd build cdnjs topic like discuss redux better issues instead curious find halfbaked context example", "d": "9/2015"}, {"body": "example bit beyond comprehension afraid somewhat new react going forward beyond think would cool react sort builtin easy way components quite far apart child greatgreatgreatgrandparent context polished something else replaces", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "worth created work around component worked core", "d": "9/2015"}, {"body": "understand correctly simulate event firstclass pointer event support react correct looked source code issue impressed sophistication react event system news pointerevent support yet though", "d": "9/2015"}, {"body": "meteor coffeescript react jade", "d": "9/2015"}, {"body": "really digging keymaster componentdidmount function key esc thisonclose", "d": "9/2015"}, {"body": "super rad use decorators declaritive way like js class component globalevent click onglobalclick e handle window click render render", "d": "9/2015"}, {"body": "nt allow attribute impossible follow wcag spec enhance accessibility non focusable elements default like simple", "d": "9/2015"}, {"body": "almirfilho work fine", "d": "9/2015"}, {"body": "syranide thanks tip", "d": "9/2015"}, {"body": "chromakode thx works project", "d": "9/2015"}, {"body": "without attribute onclick event navigation working across kinds browsers ios platform test ios put styling bypass ios restriction press hold copy paste text mechanics", "d": "9/2015"}, {"body": "problem event overlay suppose dismiss menu clicked tapped changing style like shuson said worked nt required", "d": "9/2015"}, {"body": "said fixed released soon", "d": "9/2015"}, {"title": "binding datastore attributes data within template", "body": "currently throws error html variations also work plans add support attributes", "num": "4438", "d": "9/2015"}, {"title": "remove generatechangedetectors deprecation message", "body": "oct remove code deprecation message", "num": "4433", "d": "9/2015"}, {"title": "performance regression tree update benchmark", "body": "see numbers went", "num": "4432", "d": "9/2015"}, {"title": "prepend strange value ngoptions", "body": "hi everybody created select directive inspect options see values prepend type example person directive directive dropdowndict function return restrict e scope ngmodel ngdata ngchange amp placeholder placeholder require ngmodel replace true template ngdata ngmodel placeholder placeholder select link function scope elem attr ngmodel scopeupdatemodel function value ngmodel setviewvalue value calling template thanks", "num": "4429", "d": "9/2015"}, {"title": "support control class", "body": "hey guys trying use field multiple selectable options way documented selectcontrolvalueaccessorts although doc block maybe slightly outdated eg want get selected values returns first option selected according writevalue nt seem supported right planned feature going supported planned look", "num": "4427", "d": "9/2015"}, {"title": "use parser html instead browser", "body": "advantages could use webworker server side native renderers proper camel casing get rid vs errors proper line numbers rely attribute order sure would relevant could support self closing tags custom elements need ship parser offline compilation cc pkozlowskiopensource tbosch", "num": "4417", "d": "9/2015"}, {"title": "discussion rename di bindings providers", "body": "using word binding two core ideas framework causes confusion proposal rename binding provider bindings providers component providers constructor version new provider http toclass customhttp pros similar angular binding means databindings cons different di systems mostly use word binding igorminar mhevery", "num": "4416", "d": "9/2015"}, {"title": "query string parameters lost entering route", "body": "small test app alpha three routes configured follows access routes using routerlink place query string params url read fine however instants read parameters noticed route loads fine url updated removing query string parameters words accessing route loads errors route right application loads url turns asked gitter one one seems know happening missing something looked source code nt find missing configurations providing assuming bug", "num": "4413", "d": "9/2015"}, {"title": "module exported member formdirectives", "body": "attempting follow examples related using forms looks like angular ca nt find formdirectives javascript import bootstrap component view formbuilder validators formdirectives controlgroup ngfor component selector todoapp view template directives ngfor export class todoapp bootstrap todoapp using", "num": "4409", "d": "9/2015"}, {"title": "dart transformers handling queries", "body": "similarly two way define queries angular component queries key property decorators nt queries recorded metadata component around current code merge query definitions definition generated property decorators afaiu definitions ignored transformed dart code property decorators work understanding correct transformers would benefit kind updates ones described vsavkin kegluneq please comment", "num": "4408", "d": "9/2015"}, {"title": "dart transformers handling input output hostbinding hostlistener", "body": "today added property result generate setters generate getters think best way handle would merge info metadata record property decorator typescript component class cmp input pa input pbname pb output ea output eventname eb hostbinding hpa tohost hostlistener event handleevent lead metadata component properties pa pb pbname events ea eb eventname host hpa tohost event handleevent class cmp cc vsavkin", "num": "4407", "d": "9/2015"}, {"title": "case error dynamicchangedetector assumes propertybindingindex set", "body": "errors get obfuscated exceptions raised dynamicchangedetector evaluating instance null occurred dart", "num": "4405", "d": "9/2015"}, {"title": "chore decorators rename injectable decorator", "body": "building angular apps typescript cases need enforce metadata generation adding decorator class explained detail example following services class dependency ts nt emit decorator metadata decorators class class dataservice constructor http enforce ts emit metadata adding decorator class foo causes ts emit metadata class dataservice course using decorator feels hacky angular already decorator actually used dart currently use one use case injectable causes ts emit metadata class dataservice turns injectable word nt really fit happening confuses users based name one think make injectable service fact actually want say something like hey ts please emit metadata class sure special meaning dart also yet another decorator used generate metadata former case consider introducing new decorator better name otherwise rename something appropiate suggestions change could also considered breaking change ideally ts going get better could remove new name entirely since actually unrelated angular nt look like ts going introduce anything like near future mhevery vsavkin would love hear thoughts cc wardbell cburgdorf", "num": "4404", "d": "9/2015"}, {"title": "contains viewfactory twice", "body": "content looks might dupes like someone investigate", "num": "4403", "d": "9/2015"}, {"title": "ngfor trackby equivalent", "body": "nt think equivalent angularjs right way maybe using custom looks like bit difficult feature planned later", "num": "4402", "d": "9/2015"}, {"title": "object undefined", "body": "getting object undefined accessing object service component hard coded data javascript variable working fine shows object type object array datajson dataservicets import injectable import http injectable export class dataservice tdata id name malad gateway device cisco id name kandhivali gateway device juniper data constructor http torx map res gt resjson subscribe res gt thisdata res datapagets import component view coredirectives import dataservice dataservice component selector datapage view template directives coredirectives export class datapage query tquery constructor public dataservice dataservice", "num": "4401", "d": "9/2015"}, {"title": "use observable watch", "body": "trying something like correct thisvariable eventemitter", "num": "4393", "d": "9/2015"}, {"title": "", "body": "nt think use inject routedata bit surprising compared routeparams gives us service think rare case one ca nt rely type annotation app something provided framework obtain object whereas routeparams provides get method less surprising coherent friendly opinion would follow issue", "num": "4392", "d": "9/2015"}, {"title": "feat http implement type", "body": "serialize update could done via update client need reconstruct server responses typescript let req objectassign res headers resheadersvalues indexhtml let res objectassign req body reqbody headers new headers reqheaders", "num": "4391", "d": "9/2015"}, {"title": "determine observable operators extensions include angular core", "body": "landed exposing bare rxnext observable without operators included partially including main rx import caused everything explode large amount files partially avoid bloating core codebase another operators list currently implemented operators core set included things like additionally specific operators exposed specific apis example http add equivalent also set specific observable utility implementations available things like etc list alternately could fix build issue simply bring entire module pare move closer production begin optimize cc jeffbcross vsavkin edit version complete unminiified rx roughly half operators cjs roughly half operators", "num": "4390", "d": "9/2015"}, {"title": "feat ngcache service", "body": "summary would great service similar angular serverrendering able hook calls made bootstrap even wait calls done via transferring state client transparent developer least framework problem create service would mean everyone would want transfer state client server developer would also hook lifecycle server rendering provide way relaying client current workaround moment created subclass introduce service able serialize responses rendering client preloading cache calls hit cache avoid another trip server backgroundwhy ecosystems nt luxury di means forced create universal modules io level file swap rather class swap eg isomorphicfetch angular huge benefit converting one class another environment since depend interfaces concrete types testing also end huge benefit dealing universal code example server version requires one line change assuming create import keep mind di env swap awesome feature framework touch moment since nt use di framework proposal introduce cache service better cache factory namespacing similar angular typescript abstract class cache abstract key string boolean abstract get key string likely strings abstract set key string value void return item set abstract tojson key string abstract serialize string class inmemory extends cache class redis extends cache class localstorage extends cache const cacheproviders provide cache useclass inmemory provide cache useclass redis provide cache useclass localstorage", "num": "4389", "d": "9/2015"}, {"title": "binding unknown properties aria attributes results error", "body": "binding unknown properties aria attributes result error example result following exception component whose template includes code loaded exception ca nt bind ariaexpanded since nt known property element matching directives corresponding property turns aria attributes often include dashes converting ariaexpanded inst really correct perhaps escaping mechanism aware root cause though binding anything unknown cause issue exception ca nt bind foo since nt known property element matching directives corresponding property please let know plunker needed create one", "num": "4385", "d": "9/2015"}, {"title": "guide beta broken", "body": "noticed guide latest release broken seems module injected missing", "num": "4384", "d": "9/2015"}, {"title": "ngmodel contenteditable html entities bug", "body": "example try remove change input caret move space change notice textarea content contain change weird issue handling html entities unwanted behaviour expect change instead change", "num": "4383", "d": "9/2015"}, {"title": "property binding working polymer element", "body": "trying use polymer elements inside component errors console polymer paper input rendering fine message blank", "num": "4380", "d": "9/2015"}, {"title": "support directives", "body": "example attempting reimplement dropdown tried refactoring simpler amp reliant template however causes problem seems error directive used host property understanding correct potentially allowed angular behavior explicitly forbidden", "num": "4379", "d": "9/2015"}, {"title": "using ngmodel instead ngmodel nothing", "body": "simple example thought would work setting text value input element nt work set also attribute works expected design bug", "num": "4373", "d": "9/2015"}, {"title": "transformer hangs export cycle dart inputs", "body": "", "num": "4370", "d": "9/2015"}, {"title": "forced lower case binding declarations means wo nt work", "body": "yes know issue issue closed closing solved problem well another example problem means ca nt write simple binding declarations touch existing dom properties happen mixed case ton force write directives nt example expression throws error feel ought able something perhaps kind special syntax indicate upper case need creativity", "num": "4368", "d": "9/2015"}, {"title": "dart improve baseexception abstractbindingerror show original stacktrace message", "body": "baseexception swallows original exception stack trace dumped console useful suggestion abstractbindingerrortostring removed probably also injectordebugcontext throws null pointer exception debugcontext null default thanks andreas", "num": "4365", "d": "9/2015"}, {"title": "use event name", "body": "component defined like used template exception thrown regarding press event renamed event expected component event definitions would take precedence defaults version", "num": "4363", "d": "9/2015"}, {"title": "allow host components register attributes", "body": "try something like angular gets angry plan supporting", "num": "4362", "d": "9/2015"}, {"title": "router lifecycle interfaces exported builds", "body": "router lifecycle interfaces canreuse candeactivate onactivate etc nt included builds error thrown even implementing interfaces nt exist example", "num": "4361", "d": "9/2015"}, {"title": "misleading error incorrectly binding toclass", "body": "something like instead throws really silly trying bind value class simple plunkr", "num": "4358", "d": "9/2015"}, {"title": "better syntax multielement structural directives", "body": "currently many usecases ngfor ngif structural directive applied multiple elements possible today using element syntax ugly unnatural forced manually desugar databinding like intentionally avoiding front ngfor conceptually means template already template element problem without marker nt know desugar microsyntax solved imposing limitation element single attribute directive placed dataevent binding multiple directives throw error really nt make sense use element proposals welcome long resulting syntax natural", "num": "4355", "d": "9/2015"}, {"title": "upgrade systemjs builder", "body": "repo using systemjs still systemjsbuilder roughly corresponding system number breaking changes way path configuration works trivial cc igorminar pkozlowskiopensource", "num": "4354", "d": "9/2015"}, {"title": "angular subscribe event unless user subscribes", "body": "currently angular subscribe every event published component whether use site declared subscriptions via binding prevents components tracking subscriptions eg allocate resources demand rather eagerly", "num": "4352", "d": "9/2015"}, {"title": "persist data switching tabsroutes", "body": "switching routes keep state application observed class reinitialize every time switch tabs view reinitializing make class initialize route accessed first time eg", "num": "4350", "d": "9/2015"}, {"title": "call function ngfor finished", "body": "call function ngfor finished", "num": "4349", "d": "9/2015"}, {"title": "question remove urlsearchparamsunionfixer", "body": "since http nt support dart anymore urlsearchparamsunionfixer required cc jeffbcross", "num": "4347", "d": "9/2015"}, {"title": "rename modulesexamples directory modulesdevplayground modulesplayground", "body": "contents directory really tests mini apps testingdevelopingplaying core pseudolanguage make look like canonical place examples related", "num": "4342", "d": "9/2015"}, {"title": "change detection support accessing noninstancebased context", "body": "common example enums example dart enum state open closed component class controller state state discussed shortly vsavkin nontrivial change suggestions provide idea static context make specific template", "num": "4340", "d": "9/2015"}, {"title": "resolving service dependency", "body": "hi troubles instanciating dependencies dependency called nagivationmapper component bootstrap see inject navigationmapper service also home component router time dependency resolved far concerned nt need inject navigationmapper also home component nt child injectors supposed work anyway even inject bindings component error ideas help would great already used strategy resolving dependencies parent component resolved instance could router blocking instances best regards tiago braga", "num": "4334", "d": "9/2015"}, {"title": "fix router routerlink respect location strategy", "body": "particular binding still makes routerlink produce href without leading hash obviously work copying opening link another tab tracks internal bug", "num": "4333", "d": "9/2015"}, {"title": "exception raised dynamic load component template", "body": "plunker demo import component view bootstrap coredirectives elementref dynamiccomponentloader component selector mycmp view directives coredirectives template class mycmp constructor thisvalues component selector myapp view directives mycmp template class myapp constructor elementref elementref loader dynamiccomponentloader thiselementref elementref thisloader loader load thisloaderloadnexttolocation mycmp thiselementref ref gt documentqueryselector body appendchild reflocationnativeelement bootstrap myapp click load button throws following exception", "num": "4330", "d": "9/2015"}, {"title": "need solution speed", "body": "angular really wonderful many ways big problem tooo slow open angular page first time example chinese simple page includes nearly components one js file html template means somebody open simple page server need send files client including angularjs systemjs traceurruntimejs really many files even spdy example site using spdy still need wait long time chrome shows anything way server side using nodejs koa web framework fast think index page cms gon na components single page means open page server need send files client solution many files problem thanks", "num": "4328", "d": "9/2015"}, {"title": "create setters query fields", "body": "transformers create setters keys queries map instance following create setters fields also work property decorators already work transformers delegate reading annotations directive resolver", "num": "4326", "d": "9/2015"}, {"title": "change detection error infinite loop", "body": "found case change detection enters infinite loop error code question key expression defined triggers infinite loop full plunker example", "num": "4323", "d": "9/2015"}, {"title": "angular event type conflict dart html libdts event types", "body": "rename much code uses dom apis angular would unreasonable users renamehide otherwise manually resolve two types note also rename property", "num": "4322", "d": "9/2015"}, {"title": "rename", "body": "binding mostly used context di imo confusing renaming cc vsavkin mhevery igorminar", "num": "4320", "d": "9/2015"}, {"title": "feat router provide routeconfig object auxroute", "body": "right must use auxiliary routes provide version like open suggestions", "num": "4319", "d": "9/2015"}, {"title": "bootstrap complexity creep due routerprimarycomponent", "body": "recent platformbootstrap refactoring added requirement people bind primary component bootstrap since applications utilize multiple app feature api change enables making bootstrapping significantly complicated majority developers consider creating special bootstrap entry point multiapp apps keeping normal boostrap simple common usecases", "num": "4318", "d": "9/2015"}, {"title": "fix build restore pub serve version pr travis job", "body": "currently prs failing travis master presubmit jobs unaffected due unknown issue prs tested opposed compilation happens presubmit master branches submitting pr run prs issue investigated add pr better outright failing", "num": "4316", "d": "9/2015"}, {"title": "add common js bundles output", "body": "x make examples use bundles otherwise automated testing bundles decide tool produce cjs bundle webpack vs browserify vs systemjs builder add cjs bundle build keeping system bundle cc pkozlowskiopensource vsavkin igorminar jeffbcross", "num": "4315", "d": "9/2015"}, {"title": "docs special treatment template directive docs", "body": "currently documentation generated directives using template contains info regular typescript class annotations constructor members etc makes documentation complete useful people using directives templates taking example ngclass directive see lot irrelevant info info relevant someone wants modify extend directive constructor members property setters lifecycle hooks info useful template authors present part section readable proposal let introduce special template directives template contain section info contained section presented differently parse decorator clearly present info relevant template authors selector type directive mean able clearly distinguish structural directives require element properties used template events used template place describing given event fired local variables declares ex cc naomiblack igorminar petebacondarwin", "num": "4313", "d": "9/2015"}, {"title": "getting started doc small typo mistake", "body": "liveserver open src getting started section run liveserver opensrc", "num": "4311", "d": "9/2015"}, {"title": "componentrouter script angular documentation", "body": "find componentrouter script angular documentation", "num": "4309", "d": "9/2015"}, {"title": "optional argument create method keyvaluedifferfactory iterabledifferfactory", "body": "apart better optional argument method could useful sending additional settings factory creating customized differ using custom differfactory also could useful make public", "num": "4307", "d": "9/2015"}, {"title": "unable get query string value using location angularjs", "body": "hi big issue herei url like need query string value used two process locationsearch locationsearch edtid get required value browser consolei explaining code please help resolve issue find required value", "num": "4305", "d": "9/2015"}, {"title": "private work classes", "body": "myclass appear neither dts file docs igorminar", "num": "4301", "d": "9/2015"}, {"title": "docs router docs old style square bracket links recognized dgeni", "body": "needs search fix pass eg", "num": "4300", "d": "9/2015"}, {"title": "feat router ability specify route component", "body": "would cool able specify route component easy reference route possibly route attribute parameters single route routeconfig attribute minus component type", "num": "4298", "d": "9/2015"}, {"title": "remove traceurruntimedts", "body": "nt use traceurruntime runtime nt typings file exists definitely typed", "num": "4297", "d": "9/2015"}, {"title": "remove npm releases", "body": "nt use traceur feature useful users", "num": "4296", "d": "9/2015"}, {"title": "classes static members private constructors dts", "body": "class myclass private constructor static func generates following dts file incorrect interfaces static members probably generate myclass namespace addition myclass interface", "num": "4294", "d": "9/2015"}, {"title": "problem ie edge v", "body": "hi angular sample execute gulp play ie browser launched automatically page browser show loading check console error fichier ligne colonne says french systemconfig defaultjsextensions true l objet ne g\u00e8re pas la propri\u00e9t\u00e9 ou la m\u00e9thode config strange works chrome im working windows node npm gulp cli", "num": "4291", "d": "9/2015"}, {"title": "lifecycle callback sync directive creation order", "body": "directives created order defined dependency information constructors however order directives calling callback directives depending order defined eg forms relies fact already called match element", "num": "4289", "d": "9/2015"}, {"title": "view updated using jspm package", "body": "hi pretty new angular starting learn whole js stack using latest technologies typescript node systemjs development specific test code see view get updated works perfectly link different traceur libraries installing via jspm create error console nt work could one endless mistakes created package code testing make debugging easy possible runsh file holds required installation steps hours searching online studying libraries came conclusion data binding could culprit case see js events browser view still remains every update example timeout button event thanks lot", "num": "4288", "d": "9/2015"}, {"title": "refactor eventemitter rename next emit", "body": "ultimate fate decided small steps taken start decoupling rx since abstraction rx one small step disambiguate subject change method note substantial discussion properly leverage observables inside angular codebase", "num": "4287", "d": "9/2015"}, {"title": "input type radio formbuilder", "body": "radio inputs work formbuilder looks like radio buttons yet implemented", "num": "4285", "d": "9/2015"}, {"title": "rebind expressions filter", "body": "filter config change time need listen rebind expressions using filter nt want set filter run need rebind", "num": "4283", "d": "9/2015"}, {"title": "sourcemap work chrome", "body": "run gulp servejsdev cmd worked chrome chrome debug tools see js file loaded jsmap loaded server dist folder jsmap existed directory end js file like exportsanimateapp animateapp sourcemappingurlanimateappjsmap apply cjswrapperexports cjswrapperargs", "num": "4281", "d": "9/2015"}, {"title": "ngchange inside directive work", "body": "work", "num": "4280", "d": "9/2015"}, {"title": "pipes missing viewfactory angulardts", "body": "alpha using typescript get error try use pipes component component trimmed generates error using typings file bundled alpha added valid property shown see comments inline interface viewfactory viewmetadata viewdecorator right way go something else mind", "num": "4279", "d": "9/2015"}, {"title": "replace systemregister bundle cjs bundle", "body": "developer workflows based around cjs browserify webpack systemjs since systemjs consume cjs bundles suggest replace systemregister bundle cjs bundle case developers use browserify webpack able use still work system notes systemregister lot overhead comparing cjs naive measurements showed difference using cjs bundle important submodudles think advantage cause prevents users depending private api finally produce cjs bundle think change getting started guide use webpack instead systemjs reason webpack provides lot better experience box including typescript babel webpack config angular project written typescript lines long get source maps dev server live reload productiondev modes good first impression clear path production setting cc igorminar mhevery rkirov jeffbcross", "num": "4278", "d": "9/2015"}, {"title": "add fakeasync bundle", "body": "see igor started exporting fakeasync sept commit released sept possible sept release missed sept commit say sure fakeasync bundle turn text search bundles ps lot work done make developer friendly", "num": "4277", "d": "9/2015"}, {"title": "ngclass class bugs", "body": "issue related jqplot following code make jqplot appear code additional note another element appear normally jqplot chart missing seems angular bug edit using angular", "num": "4276", "d": "9/2015"}, {"title": "proposal compiler attempt resolve view directives injector", "body": "currently directives used component resolved type binding specified directives property view decorator fine prevent selector collision help testing truly allow dependency injection components directives would incredibly useful directives resolved parent injector especially multitenant apps take look example abstract class greetingcomponent whomtogreet string component selector greeting view template class genericgreetingcomponent extends greetingcomponent constructor thiswhomtogreet everyone component selector greeting view template class bobgreetingcomponent extends greetingcomponent constructor thiswhomtogreet bob var config usebobgreeting true var bindings configusebobgreeting bindingspush bind greetingcomponent toclass bobgreetingcomponent else bindingspush bind greetingcomponent toclass genericgreetingcomponent component selector app view directives greetingcomponent template class appcomponent bootstrap appcomponent bindings obviously great app everyone loves bob accounting absolutely name everything directives defined view decorator directives property resolved parent injector would easy peasy would nt clutter main template conditionals also extend router component property routeconfig elements attempt resolve parent injector well look spirit dependency injection think components directives get love services guys think", "num": "4275", "d": "9/2015"}, {"title": "race condition npm install", "body": "clone repo setup described run usually get errors form different files npm install angular preinstall usersxxxangular node toolsnpmchecknodemodules purge npm dependencies stale unknown state purging npm err git checkout error local changes following files would overwritten checkout npm err git checkout testscasesunittestsservicescolorizationts npm err git checkout please commit changes stash switch branches npm err git checkout aborting npm err git checkout npm err darwin npm err argv install npm err node npm err npm npm err code npm err command failed git checkout npm err error local changes following files would overwritten checkout npm err testscasesunittestsservicescolorizationts npm err please commit changes stash switch branches npm err aborting npm err npm err npm err need help may report error npm err npm err please include following file support request npm err usersxxxangularnpmdebuglog one every x amount calls installation works usually use suspend installation passes successfully environment git version node npm nvm", "num": "4273", "d": "9/2015"}, {"title": "url divergent behaviour respect nonstring params", "body": "using directive param bound array cards routeconfig path cards cardid component cards card class app public cardids number results dev environment url argument component far good problem using url url behaviour extends anything nt string far tell solution present manually coerce parameters standard string representation use incoming params treated uniformly absent api typing params suppose could left documentation would remain nuisance however issue might seem trivial since obviously strings directly passed url broader capability internal linking behaviour useful disregard offhand developer perspective ideally best practice would obtain", "num": "4272", "d": "9/2015"}, {"title": "rfc routing templatecontroller pairs angular router", "body": "order aid migration component router need convenient way configure route controller template pair couple options support route declaration overloading property provide mechanism api", "num": "4270", "d": "9/2015"}, {"title": "fix use string tokens di", "body": "via igorminar", "num": "4269", "d": "9/2015"}, {"title": "dts file contains several symbols marked private", "body": "classes functions etc marked doc annotation part dts file looks like reexport error fixed fixed throw error see dts generation mhevery please review dts file determine reexported mistake", "num": "4265", "d": "9/2015"}, {"title": "classinterface members marked private present dts files", "body": "cases class members package private used internally angular part external api currently documentation members hidden dts file contains hide dts files well ca nt use typescripts visibility markers like need angular core code outside current class able access would great solve properly typescript meantime adjust dts generation template look members emit dts generation process cc alexeagle mprobst rkirov", "num": "4262", "d": "9/2015"}, {"title": "single error compiler reported errors", "body": "see sample error compiler error work error reported errors thrown makes confusing users first error useful cc tbosch compiler alxhub case bootstrap specific", "num": "4261", "d": "9/2015"}, {"title": "docs differentiate classinterface constructor fieldsgetters methods", "body": "currently mixed together together members makes hard understand interfaceclass create groupings members type constructor special expose public constructor section fields getters usually treated user maybe document together sure look precedence mdn somewhere else methods need invoked throw exceptions need treat differently members", "num": "4259", "d": "9/2015"}, {"title": "combine api member title type signature single line", "body": "currently docs createhostview view look like createhostview createhostview protoviewref protoviewref atindex number dynamicallycreatedbindings resolvedbinding member name present twice would great single title contains name signature signature syntax highlighted different style examples prevent visual confusion also add github style link icon pi character shows left title user mouses title clicking icon character updates windowlocation deep link title example mouse heading", "num": "4258", "d": "9/2015"}, {"title": "navigating docs url fragment causes browser overscroll", "body": "go title hidden behind toplevel site header", "num": "4256", "d": "9/2015"}, {"title": "missing type signatures api docs", "body": "check renamed anchorelement soon field missing type signature getter missing type signature method missing return type signature", "num": "4255", "d": "9/2015"}, {"title": "forms cyclic di dependency component valueaccessor validator", "body": "following pattern results cyclic di dependency roughly mycomponent gt ngcontrol gt mycomponent workaround dart injectable class deferredvalidator function delegate call ngcontrol control return thisdelegate control component bindings const deferredvalidator const binding ngvalidators toalias deferredvalidator multi true class mycomponent mycomponent self ngcontrol cd deferredvalidator dv cdvalueaccessor dvdelegate solution two possibilities bless workaround perhaps even provide part forms api alter value accessor api cause dependency cycle", "num": "4253", "d": "9/2015"}, {"title": "broken error message ngfor ngif element", "body": "see print rather end error message second exception", "num": "4246", "d": "9/2015"}, {"title": "fix throw exception input string", "body": "forgot import example instantiate manually meant instantiating global object instead provided passing input nt match string check method returning undefined instead exception raised", "num": "4245", "d": "9/2015"}, {"title": "improve binding errors directives", "body": "hackaton today come across confusing error messages could greatly improved suggestions improve error messages possible detect case individually actual messages need work english first language main direction letting know wrong see many people falling things specially new syntax realising wrong ngfor example result suggested ngfor example result suggested comments really unclear supposed inject ngforin instead ngfor obvious developers use instead loops many still using typescript even though remember syntax either set default ngfor rename ngforof template syntax would suffer bit could save weird errors perfect solution opinion single ngfor directive work either ngfor example result related error suggested comments called asterisk declaration know name nt one maybe reference easily directive amp component missing properties example result suggested cc pkozlowskiopensource", "num": "4244", "d": "9/2015"}, {"title": "calling variable function type raise context error", "body": "ie raise proper way ofcourse name properly error context makes difficult debug", "num": "4241", "d": "9/2015"}, {"title": "injectors errors", "body": "trying inject service viewinjector others error occur nt right context ie exception provider ngservice changing bindings ie work like charm documentation explanation differences one deprecated", "num": "4240", "d": "9/2015"}, {"title": "formbuildergroup typings nt work expected", "body": "found jsil hackathon fbgroup street thisaddressstreet required throws error unexpected type victor savkin angular team suggested following workaround fbgroup street thisaddressstreet required", "num": "4239", "d": "9/2015"}, {"title": "transformer refactor use new templatecompiler", "body": "see process phase walk files contain directives create instance directivemetadata normalize via call also reads template optionally serialize normalized meta data via call json string phase walk files read metadata components defined file metadata directives referenced annotation components call output dart file called contain exports host views every component form provision annotations reflector ie annotation class component class value host phase parallel phase walk stylesheets call generate dart file included generated template file notes output codegen methods method return source imports import alias module id need added source also filename file generated without suffix keeping filename important generated files reference", "num": "4235", "d": "9/2015"}, {"title": "angular js api reference page broken", "body": "sure correct place report issue angularjs website api reference page working see attached screenshot looks like version missing url load angular scripts", "num": "4234", "d": "9/2015"}, {"title": "bug router target attribute respected used routerlink", "body": "expectation link open separate tabwindow tracks internal", "num": "4233", "d": "9/2015"}, {"title": "nganimate nt work use ngview body", "body": "example basically nt add intermediate classes showing hiding workaround pretty simple nt use ngview body example move ngview onto div works fine scattered issues stackoverflow say get odd behaviour adding ngview body nt serious nt think warning docs", "num": "4232", "d": "9/2015"}, {"title": "feat add support withcredentials", "body": "hey trying figure send cookies throught cors since ca nt access objects directly able set option remember using http angular maybe could writting custom easier way", "num": "4231", "d": "9/2015"}, {"title": "ngif bug model updated controllerside select", "body": "hello pluker see drop lists one always displayed displayed ngiftrue case study display one selected item print console value selected drop via ngchange function see value select nt change remove ngif works try nghide ngshow model correcty updated well look selectedaccount value always matches selected item ngif nghide nothing bug controllerside thanks look marie", "num": "4230", "d": "9/2015"}, {"title": "missing ngvalidators", "body": "using expected changes introduced commit present compiler complains ngvalidators exported edit tsddts contains following contains following header", "num": "4229", "d": "9/2015"}, {"title": "router reuse outlet contain component", "body": "update alpha run error scenario follow navigate mysubpath app subscribed router location change checks user credentials still valid case redirected login upon sucessfull login redirected mysubpath following exception thrown seems instruction path field set true nt instanciated component yet probably redirect triggered introduce method returning false component exception thrown component container defining child routes displaying tabs probably reused", "num": "4228", "d": "9/2015"}, {"title": "nginclude properties declared onload ca nt modified", "body": "hi use edit element ca nt change element searching way modify property set inside onload nt find think issue best regards pierreemmanuel", "num": "4227", "d": "9/2015"}, {"title": "read query parameters route", "body": "currently way read query parameters route instance routeconfig configured path articles id article component article user navigates browser get access value sort page supported router nb get id someid routeparams without problem would like query params see bits generate queryparams routerecognizer class public methods", "num": "4225", "d": "9/2015"}, {"title": "di require nesting arrays specifying deps", "body": "currently following work deps array nested follows di able handle examples equivalent", "num": "4224", "d": "9/2015"}, {"title": "missing dart reflection interfaces superclass", "body": "pattern like never call event listener", "num": "4221", "d": "9/2015"}, {"title": "moving broke browsers", "body": "fact chrome edge made far see issues causing unit tests examples firefox known issue comes actual bug firefox apparently fixed firefox nightly broken browsers nt polyfill symbol occurence framework internally uses string nt exist nt expose issue opened", "num": "4216", "d": "9/2015"}, {"title": "exception reporting error message swallowed", "body": "solution pass call", "num": "4215", "d": "9/2015"}, {"title": "allow forwardref host", "body": "following code javascript directive selector child class child constructor host skipself p hello consolelog p component selector hello view template directives child export class hello obviously fail hello defined child option available move child hello use forwardref property works think much annoyance moving entire directivecomponent think would nice well able use forwardref annotation tried pass forwardref right side like nt work saw forwardref transpiled function would end guessing since ts nt even compile line saw tranpiled using property seems possible considering use example would nice able", "num": "4213", "d": "9/2015"}, {"title": "bootstrap error browsers support requestanimationframe", "body": "error raised running unit tests according happens android", "num": "4209", "d": "9/2015"}, {"title": "event properties consistency", "body": "hi everyone properties events different alias behaviour want alias property hyphens use want alias event hypens working plnkr best regards tiago braga", "num": "4207", "d": "9/2015"}, {"title": "template directives throw using without template element", "body": "common mistake forget add developer makes mistakes following errors thrown errors actionable nt provide sufficient hint developer fix problem would great detected situation templatestructural directive used without required element syntactic sugar throw actionable error", "num": "4205", "d": "9/2015"}, {"title": "enabledebugtools longer works result bootstrap", "body": "documented takes applicationref returns componentref", "num": "4202", "d": "9/2015"}, {"title": "angulario search result return links production urls instead relative urls", "body": "spin local harp server try search api doc redirected click links makes looking things local version docs impossible would great search results returned relative urls", "num": "4199", "d": "9/2015"}, {"title": "detecting changes actions triggered outside component", "body": "hi found issue updating component property bound template appears changedetector detecting changes plunker shows happening happens event triggered outside angular comment line uncomment line everything works expected working alpha test easily example sure bug known limitation nevertheless proceed situations putting pkozlowskiopensource cc talked gitter although nt plunker reproduced issue time ps nt mind extreme complexity simple use case idea incorporate everything used jquery real world scenario first detected issue", "num": "4197", "d": "9/2015"}, {"title": "interpolations routed resolves timeout", "body": "tried use simple approach application router turned simple one issue router transcluded ngcontent bound first really interesting issue settimeout items bound plunker click entities see issue thanks explanationresolution", "num": "4192", "d": "9/2015"}, {"title": "urlresolver warning building dart", "body": "", "num": "4190", "d": "9/2015"}, {"title": "custom component two way binding", "body": "hi possible component two way binding customcomponent supposed input button example possible accessing host read article read implementation ngmodel component similar behaviour best regards tiago braga way using typescript ca nt implement interfaces saw solutions", "num": "4189", "d": "9/2015"}, {"title": "angular versionalpha use one component another component", "body": "trying import home component main component working alpha plnkr", "num": "4188", "d": "9/2015"}, {"title": "query callbacks fire asynchronously", "body": "following usecase currently throws error directives modified dirtychecked javascript component binds foo template class foo component consturctor public query foo query thisqueryaddcallback gt thisqueryforeach q gt qfoo false however callbacks fired asynchronously within angular zone valid code possibility infinite async cycle case nt think big concern possibility exists even regular promises note might naturally fall moving queries rx ts stream dart cc vsavkin", "num": "4186", "d": "9/2015"}, {"title": "remove router bundle", "body": "lazyrequired shim unblock master breakages bundle shim router instead document shim required router bundle work older browsers", "num": "4184", "d": "9/2015"}, {"title": "remove build step router", "body": "might needed user bring shim see shim used", "num": "4183", "d": "9/2015"}, {"title": "error componente input date class nginvalid solutions ref badinputchecker", "body": "scenario input type date required form linked ng model date add value component use delete key erase value angular adds ng invalid class component adds value undefined making form invalid solution function adds badinputchecker undefined component solution would add null thus component invalid requirid solutions angularjs function badinputchecker scope element attr ctrl var node element var nativevalidation ctrl hasnativevalidators isobject nodevalidity nativevalidation ctrl parserspush function value var validity elementprop validitystateproperty detect bug inputemail also sets validitybadinput validitytypemismatch see ignore case still read erroneous email old return validitybadinput amp amp validitytypemismatch undefined value best regards", "num": "4180", "d": "9/2015"}, {"title": "requestanimationframe callback arguments passed", "body": "requestanimationframe callback correctly gets timestamp argument raf callback get timestamp argument causes javascript animations fail", "num": "4179", "d": "9/2015"}, {"title": "testlib module export", "body": "available maybe missing better technique way know trigger dom events something like example test code looks like think stole one angular core tests alternative perhaps better expose", "num": "4177", "d": "9/2015"}, {"title": "step step yields blank screen browser", "body": "using chrome firefox osx follow first steps angular javascript create indexhtml copypaste provided text guide create appjs copypaste provided text guide start python simplehttpserver port hit see three requests network tab localhost containing html appjs look browser display see blank screen console errors inspecting response localhost see html tags expected see html tag contents either populated replaced template declared appcomponent view template value", "num": "4176", "d": "9/2015"}, {"title": "add typings testlib testlibdts", "body": "", "num": "4175", "d": "9/2015"}, {"title": "missing forwardref queryviewquery throw", "body": "consider following code directives forwardref gt accordionitem export class accordion implements oninit constructor el elementref viewquery accordionitem items querylist thisitems items oninit consolelog thisitems component selector accordionitem view template export class accordionitem works returns results wierd since two children see plnkr problem missing remove property get error message pretty useful miss instead error get results throw similar error one see repro switch constructors class see errors thrown length results changes ps title includes nt test assuming works similar", "num": "4174", "d": "9/2015"}, {"title": "alpha changes", "body": "hi mostly post help anyone upgrading alpha alpha changes came accross http module imported http requestmethods naming capital letter case requestmethodsget requestmethodsget onchange lifecycle event onchanges best regards tiago braga", "num": "4172", "d": "9/2015"}, {"title": "router rfc use link dsl rather url fragment", "body": "currently redirect route takes string representing remaining unmatched url recognized makes hard tell whether redirection local absolute instead propose use route link dsl routerlink directive uses related", "num": "4170", "d": "9/2015"}, {"title": "dart viewencpasulation longer accepting enums", "body": "angular dart alpha view component accepted enum value encapsulation viewencapsulationnone throws following error error arguments constant creation must constant expressions question proffered way pass value enum viewencapsulation object alpha context enum angulardart lib stackoverflow", "num": "4169", "d": "9/2015"}, {"title": "tutorials mention platforms tools use", "body": "angular javascripts tutorials mention toolssoftware need used", "num": "4168", "d": "9/2015"}, {"title": "error message redirect page load goes nowhere", "body": "followup btford fix apparently checks nonterminal routes referenced link object main component config grid component get exception page load also working redirect limited code knowledge tried debug looks like code runs point simply returns function rootrouter called would love contribute plnkr see create one using latest git master version angular applies manual routernavigatexxx calls course though sure error messages handeled theory could handle currently logs error silently ignored", "num": "4166", "d": "9/2015"}, {"title": "routerdts alpha different one definatelytyped", "body": "", "num": "4165", "d": "9/2015"}, {"title": "onchange exists dts", "body": "alpha could use still works typings file appears list", "num": "4164", "d": "9/2015"}, {"title": "default pipes missing", "body": "", "num": "4158", "d": "9/2015"}, {"title": "getting error instantiation token promise", "body": "new angular currently playing doc files showpropertieshtml showpropertiests typescript import component view bootstrap ngfor component selector display appinjector friendsservice view template directives ngfor class displaycomponent myname string names array class friendsservice names array constructor thisnames alice aarav mart\u00edn shannon ariana kai bootstrap displaycomponent executing code giving following error exception error instantiation token promise original exception resolve parameters displaycomponent undefined make sure valid type annotations original stacktrace error noannotationerrorbaseexception new noannotationerror extracttoken arraymap native functionexecutelistwrappermap dependenciesfor executebindingresolve functionexecutemetadatacreatefrombinding functionexecutemetadatacreatefromtype injecting class array property friendsservice amp using normally making following changes working fine class displaycomponent myname string names array one suggest wrong", "num": "4156", "d": "9/2015"}, {"title": "hashbangs supported angular router", "body": "hashlocationstrategy supports hash fragments form appears mechanism change prefix support google ajax crawl spec", "num": "4155", "d": "9/2015"}, {"title": "namespace angular vs", "body": "anyway versions running without namespaces collating", "num": "4151", "d": "9/2015"}, {"title": "boolean attributes stopped working", "body": "recently code like", "num": "4150", "d": "9/2015"}, {"title": "refactor facade change eventemitter match rxjsnext subject rename plz", "body": "since eventemitter essentially subject implements alias js match structure semantics dart note validated semantics mapped dart also rename since often confused node calling subject cc robwormald vsavkin blesh", "num": "4149", "d": "9/2015"}, {"title": "proposal easy component rendering dynamically", "body": "easiest explain whatwhy use case dashboard application dashboard used render number different isolated components problem components rendered change based number different factors app user preferences one although handful components ever rendered one time hundreds components pool rendered completely dynamic experience nt want massive switch conditional construct lists everything although nicest possible using compile service directly would awesome know would solve problem lot people easy use api nt want get away declarative ui programming reasonable expect devs maintain switch like declaration hundreds code paths", "num": "4140", "d": "9/2015"}, {"title": "seems router exposed since", "body": "trying following nt work var cmp ng component selector cmp bindings service view templateurl mainhtml class constructor service function cmp service thisgreeting servicegreeting line gives router undefined ngrouterrouteconfig path redirectto setup path setup setup component setupcomponent console logged ng using sfx see router amp nt exposed", "num": "4137", "d": "9/2015"}, {"title": "fn created jasminepatchjs support", "body": "donefail option jasmine makes easy report error failed promise nt implemented zoneaware version jasminepatchjs therefore following test reports async timeout instead actual error huge priority worth fixing easy fix", "num": "4136", "d": "9/2015"}, {"title": "question binding undefined object produces error binding empty object cast interface ok", "body": "go hero details component see get binding error briefly console binding fails yet back promise http service however briefly makes sense prefer things either make hero initialize object cast interface original code import component view import routeparams import hero hero import heroservice heroservice import herodirectives herodirectives component selector myherodetail view templateurl appherodetailcomponenthtml directives herodirectives export class herodetailcomponent hero hero changed cast constructor private heroservice heroservice private routeparams routeparams let id routeparamsget id thisheroservicegethero id hero gt thishero hero", "num": "4134", "d": "9/2015"}, {"title": "launching app router redirectto kicking", "body": "tried redirectto path redirect heroes route load also tried luck error loads app nothing int get around launch additional route goes dashboard component mapped route", "num": "4133", "d": "9/2015"}, {"title": "ngtable coloumn customization", "body": "dear team one table customized filters sorting want make column wise customization like kindly help custom directive controller hazdik da india", "num": "4132", "d": "9/2015"}, {"title": "template rendering issue ie", "body": "plunkr demonstrates ie tr elements rendered outside table element works fine chrome firefox", "num": "4131", "d": "9/2015"}, {"title": "ngcontent render forof loop", "body": "maked example use ngcontent tag inside forof loop content render", "num": "4129", "d": "9/2015"}, {"title": "injecting something service type annotations", "body": "asked question get typescript include runtime type annotations used di learned include classes decorators fine components already decorators inject something service use inject manually specify dependencies create noop decorator trigger typescript runtime types workaround thanks", "num": "4120", "d": "9/2015"}, {"title": "api html files included distribution", "body": "started copying thousands files dist included persha snapshots gcs nt mean distribute", "num": "4115", "d": "9/2015"}, {"title": "commit conventions make optional", "body": "hey already run several times usually breaking change commits like breaking change tend forget line breaks instead chance could make optional causing quite headaches use semanticrelease everywhere uses strictly implements angular commit messages end minor releases githubnpm breaking changes thanks bouquet follow cc jo", "num": "4114", "d": "9/2015"}, {"title": "angular http working version", "body": "myhttpts import component view ngfor import http response httpbindings import observablewrapper component selector navbar viewbindings httpbindings view directives ngfor templateurl componentsnavbarnavbarhtml export class navbar people object constructor http http alert alert also working observablewrappersubscribe gt thispeople resjson code error showing resolve parameters navbar make sure valid type annotations even alert constructor showing", "num": "4113", "d": "9/2015"}, {"title": "router canactivate di", "body": "hook available decorator bit surprising compared lifecycle hooks simple functions component understand reason behind hook called component instanciated even think api would simpler everything function things stay like question possible use di hook plan support something like", "num": "4112", "d": "9/2015"}, {"title": "ngzone oneventdone accept different type callbacks", "body": "ngzone overrideoneventdone waitforasync nonwaitforasync callbacks time google acx project activity tracking need nonwaitforasync callback determine vm event loop end test bed used waitforasync callback determine angular isstable conflict give activity tracking callback test workaround makes integration test possible draft fix", "num": "4106", "d": "9/2015"}, {"title": "support change events custom elements", "body": "custom elements way send values webworker always grab value field change event long term plan allow developers specify custom events serializers", "num": "4100", "d": "9/2015"}, {"title": "input type number pattern regex integers working properly", "body": "hi ca nt quite say angular issue let give example point problem problem set input valid integer number plus one inputs valid nt happen regex nt allow anything integer value previous ones really nt workaround set input type text given pattern nt like idea edit seems like bound number input alone nothing ngmodel value even submitting form model contain number front even changing value still inside number input different number value popup guess closed", "num": "4098", "d": "9/2015"}, {"title": "add ngstyle coredirectives", "body": "exported array however referenced file added array", "num": "4096", "d": "9/2015"}, {"title": "inject parent child component dynamically loaded", "body": "component uses dynamiccomponentloader loadintolocation load component b dynamically component b constructor get parent injected onto", "num": "4090", "d": "9/2015"}, {"title": "route parameters lost reload", "body": "reload page isolated route work route params related fta im using router routeparams angular dart routes follow application entry point works fine routeroutlet routerlink routernavigate however page reload nt get positive match routes params ie refresh goto parent view child routes symptom true route params navigating directly refreshing works expected viewflights component instantiated symptoms routing params fails question define route configurations work parameters refresh links", "num": "4089", "d": "9/2015"}, {"title": "shadow dom emulation", "body": "hi working around shadow dom unfortunately chrome firefox currently supporting meantime using emulation said couple questions api use manipulate dom shadow dom know elementref class manipulate light dom let call way far concerned shadow dom emulation works way add attribute nghost working ngcontent existing html tags present component html add css attribute head html tag matches existing html tags attribute unfortunately one existing html tag another component add attribute component tag since adding attributes occur compiling oninit component shadow dom child components resolved yet inner html get attribute well behaviour makes sense since shadom dom supposed affect current component possible change inner components css best regards tiago braga", "num": "4088", "d": "9/2015"}, {"title": "angular template driven form radio button working", "body": "problem occurred fetching value radio button angular template driven forms used ngmodel two way binding angular getting value radio button doest return neither string boolean", "num": "4084", "d": "9/2015"}, {"title": "router proposal adopt convention route alias", "body": "propose adopt enforced convention naming convention route names titlecase rather camelcase think helps distinguish urls dsl consider also think goes nicely", "num": "4083", "d": "9/2015"}, {"title": "typo rendererts", "body": "creats gt creates", "num": "4073", "d": "9/2015"}, {"title": "npm install installs typings bundles root typings folder", "body": "run npm install installs typings bundles root typings folder fine put project keeps typings folder src folder end sets way make go folder tsconfigjson specifies file", "num": "4068", "d": "9/2015"}, {"title": "refactor webworker move web worker module", "body": "recapping irl convo alexeagle tl dr propose moving logic module sibling located sources inside module semantically considered children worker really different distribution child everything inside folder logically exportable catchall bundle technically contents worker happen safe export inside bundle nt play well children worker reexports much makes typings generation awkward would also mean distributing npm dart package cc yjbanov alexeagle mhevery igorminar todo x change public import path amp x move src directory x move tests move manualtypings modules amp add build step copy correct place x move worker test utils x update testunitdart testunitdartvm testunitcjs testunitjs run tests move docswebworkers x create packagejson copy tsd files x change paths examples import worker public api rename webworker worker x generate separate dts files worker amp x update typings tests test worker typings x generate separate bundles amp publish separate npm package scriptspublishnpmpublishsh x publish separate dart package scriptspublishpubpublishsh publish codeangularjsorg set party package talk yjbanov", "num": "4064", "d": "9/2015"}, {"title": "proposal support declarative binding view events observables", "body": "sure good idea even possible thought throw vanilla rx wanted listen dom event typeahead something something like current wanted equivalent something like works great rx stuff settles however wanted sort thing arbitrary event unrelated forms like mousedrag button click whatever good way see get observable dom event something like nt nearly clean proposed idea would provide way delegate bind arbitrary dom event subjectobservable could easily subscribed handled reactively something like totally made syntax point binding click event subject edit see current proposal saw believe emitting events component whereas idea usage within component thoughts", "num": "4062", "d": "9/2015"}, {"title": "component events mask event propagation", "body": "code creates issue conflates event bubbling event correct behavior event part components filter dom events otherwise sometimes get sometimes event", "num": "4059", "d": "9/2015"}, {"title": "fix router wildcard routes redirects", "body": "alpha route condition use case want invalid route set routes either go specific route run function custom logic reroute another option simple redirection would expect work requesting pattern work cc btford", "num": "4055", "d": "9/2015"}, {"title": "routerlink fails generate links nested routes dynamic parameters", "body": "try generate link nested router path dynamic parameter receive error generate link without using dynamic parameter nested router path works correctly use regular href absolute path link navigate correctly issue reproduced", "num": "4054", "d": "9/2015"}, {"title": "support preloading templates least testing", "body": "stands one write unit tests actual template template supplied via ca nt even fake component template even template override depends component b gets template via unsuccessful using mock dependent component b bother could use something like templatecache", "num": "4051", "d": "9/2015"}, {"title": "bug compiler token tostring returns tokentypeoperator", "body": "token tostring missing case returns called token type causes dart string interpolation fail example attempts report unexpected token", "num": "4049", "d": "9/2015"}, {"title": "support override bindings", "body": "today pretty sure means mock di binding mentioned properties properties set bindings component child injector inaccessible test developer would love wrong", "num": "4044", "d": "9/2015"}, {"title": "http requests lazy cold observables", "body": "http observable powered makes semantic sense requests lazy nothing happen subscribe called somewhere downrange currently calling immediately fire xhr irrespective whether request subscribed probably sideeffect eventemitter using subject thus could resolved rxnext goes generally opt observables things use subjects necessary see reproduction naive semantically better implementation suggested fix would backends etc initialize return observable could mapped response", "num": "4043", "d": "9/2015"}, {"title": "missing template", "body": "angular great access template syntax since intuitively write something like html prop prop quick debug info teaching angular case angular keyword work proposal allow keyword template reference component instance", "num": "4041", "d": "9/2015"}, {"title": "routernavigate overload accepts tuple", "body": "currently accepts url string like works would great able pass tuple like another option", "num": "4040", "d": "9/2015"}, {"title": "viewtemplateurl allow url relative component", "body": "relative application root url fine everyone keeping templates template directory like template next component want specify url relative component would become possible allowed url syntax leading next example template sibling component class file might appropriate johnpapa agrees", "num": "4039", "d": "9/2015"}, {"title": "typescript definition routeconfig shows error component constructor gt parameter", "body": "component takes routeparams constructor get typescript definition error editor code runs typings file likely needs updated component red underlines routeconfig", "num": "4038", "d": "9/2015"}, {"title": "chore move srccompiler srccorecompiler", "body": "middle shifting around folders looks like files added tbosch happy make move correct", "num": "4037", "d": "9/2015"}, {"title": "discuss remove", "body": "process shifting around modules still necessary modules bootstrap render would included angular dart core module users choose want reflective bootstrap exported static bootstrap exported dart users creating root component import libraries would import without worrying imports somewhere would make run server environment unfortunate different contents javascript dart nt ideas satisfy needs pickyourownbootstrap dart keeping core module representing everything need make angular app platforms think would better deviate platforms case able core module contents environments ie removing bootstrap js would preferable leave yjbanov ideas options", "num": "4036", "d": "9/2015"}, {"title": "testlib able call inject asynctestcompleter within throws instead", "body": "often useful complete test setup setup involves injection async invocation method injected service subsequent tests synchronous example describe removehero hero gt unfortunately throws", "num": "4035", "d": "9/2015"}, {"title": "component class one parameter constructor results typescript compilation error", "body": "consider following example generates ts compilation error argument type typeof mycomponent assignable parameter type type boils equivalent simpler example generates compilation error var dec typedecorator dec export class myclass constructor number number problem lies fact definition type contains new declaration argument causing myclass assignable type", "num": "4034", "d": "9/2015"}, {"title": "ngclass empty string class name", "body": "example herodetailcomponenthtml herodetailcomponentts addclass return thisheronamelength gt selected assume detail changes new hero selected parent list hero mr long name hero short first hero displays class selected present second hero triggers change value angular fails exception thrown line also fails way works arrayresult form ok objectresult form ok addclass return selected thisheronamelength gt", "num": "4033", "d": "9/2015"}, {"title": "fix dynamiccomponentloader make work viewencapsulationnative", "body": "simple scenario like component selector childcomponent view template loaded class childcomponent component view template encapsulation viewnative class dyncmp constructor dcl dynamiccomponentloader inj injector dclloadasroot childcomponent child inj results following runtime error obviously due dcl querying inside shadowroot used note works either consider bug intended behaviour", "num": "4032", "d": "9/2015"}, {"title": "error instantiation token promise", "body": "hi getting error trying resolve parameters class version documentation using setup mgechev trying create small form following code import component view bootstrap formdirectives formbindings formbuilder controlgroup stringmap component selector app viewbindings formbuilder view directives formdirectives styleurls bootstrapcss template demo form sku class app private skuform controlgroup bootstrap app already tried set value never success always getting error", "num": "4030", "d": "9/2015"}, {"title": "bundled throws errors firefox", "body": "using file run unit tests travis get following error could way compiled", "num": "4029", "d": "9/2015"}, {"title": "refactor move", "body": "introduces new module think exported since current approach core basic building blocks angular application task move reexport exports vicb landed big pr right merged reduced amount import targets change make sense use case thinking", "num": "4028", "d": "9/2015"}, {"title": "refactor deprecate import dart", "body": "discussed yjbanov deprecate export dart since users encouraged import often well defining root components import useful javascript developers using full bundle originally added line top part dart analyzer complained since tests examples still importing deferred change could land massive pr quickly deprecation line originally included top", "num": "4027", "d": "9/2015"}, {"title": "docs typings make typings match bundles", "body": "blocked angular typings files match bundles see info bundles includes core router coredts routerdts testingdts webworkerdts webworkeruidts also make sure typings get added definitelytyped get documented release process", "num": "4026", "d": "9/2015"}, {"title": "refactor reorganize testing bundle import", "body": "planning part pr already huge complicated moved issue modules currently inside combined single module called", "num": "4025", "d": "9/2015"}, {"title": "refactor include http router", "body": "discussed http router included angular bundle imported also included typings planned done decided defer change could land giant pr asap", "num": "4023", "d": "9/2015"}, {"title": "router property parentview undefined missing selector nested router", "body": "know tracked nt want contaminate thread issue issue referenced understand without selector valid works tried routeconfig new route path test component anothercomponent test class nestedrouter component selector hello view template directives routeroutlet routeconfig new route path nested component nestedrouter nested class personally used use selectors components first tried adding selector forgot specify one routeconfig new route path test component anothercomponent test class nestedrouter component selector hello view template directives routeroutlet routeconfig new route path nested component nestedrouter nested class latter case throws error message adding selector removing everything inside make everything works plnkr reproducing case also attacked issue referenced please close ps using edit plnkr updated", "num": "4022", "d": "9/2015"}, {"title": "question customvalidator templatedrivenforms", "body": "hi sample shows use templatedriven forms use custom validators scenario tried create sample basis current alpha unfortunately experienced general showstoppers import ngvalidators use mentioned codebase true constexpr see right mentioned code base contain everything necessary scenario solution workaround btw also wonder tell injector resolve kind multibinding used best wishes manfred angularmodulesexamplessrctemplatedrivenformsindexts", "num": "4021", "d": "9/2015"}, {"title": "dynamic routerlinks", "body": "hey guys playing around typescript wanted create routerlinks help ngfor help stringarray problems following example import component view ngfor bootstrap bind import routerbindings locationstrategy hashlocationstrategy routeconfig routeroutlet routerlink import compa scriptscompa import compb scriptscompb component selector app view template directives routeroutlet routerlink ngfor routeconfig path redirectto compa path compa component compa compa path compb component compb compb export class app buttons string constructor thisbuttons compa compb bootstrap navbar routerbindings bind locationstrategy toclass hashlocationstrategy try create routerlinks like get following error worked around issue handling href link changing template lines working think way help somehow", "num": "4020", "d": "9/2015"}, {"title": "exception component constructor masked angular", "body": "angular dart exception constructor reported properly exception message says error instantiation set breakpoint injector class see actual stack trace stored inner exception would help exactly pinpoint problem stack trace much valuable current one thrown error error instantiation activitycomponent package injectorinstantiate package injectornew package injectorinlinestrategyinstantiatebinding package elementinjectorinlinestrategyhydrate package elementinjectorhydrate package appviewmanagerutilshydrateview package appviewmanagerutilshydrateroothostview package appviewmanagercreateroothostview package dynamiccomponentloaderloadasroot package stacktrace stackzonespecificationregisterunarycallback package ngzonerununary dart async zonedelegaterun package ngzonerun package ngzonerununary package stacktrace stackzonespecificationregisterunarycallback package ngzonerununary dart async zonedelegaterun package ngzonerun package ngzonerununary dart async futureasynccomplete package ngzoneschedulemicrotask dart async zonedelegaterun package ngzonerun dart async futurethen package dynamiccomponentloaderloadasroot", "num": "4019", "d": "9/2015"}, {"title": "support bower package management", "body": "feature request may connected one main workflows today maintaining dependencies parties bower bowerjson contains dependencies bower command line used download modules transitively afterwards use modules like mainbowerfiles create list files fetched application gulp snippet looks like afterwards vendorjs included indexhtml situation angular downloaded npm also bowerjson file missing main property would possible maintain bower workflow would mean packages uploaded bower bowerjson filled properly workflow envision", "num": "4018", "d": "9/2015"}, {"title": "question fform", "body": "hi templatedrivenformssample defines controlgroup using formtag fform wondering really means whether shortcut longer syntax first sight seems bit strange handle gets value would expected something like f without assignment ideas behind wishes manfred", "num": "4017", "d": "9/2015"}, {"title": "routeparams available top level directives", "body": "primary component named ticket nested directive topnav part ticketclient component selector tickets view template directives const topnav routeroutlet routeparams routeconfig const const route path landing component landing landing const route path flights component viewflights flights const route path contact component picker contact const route path picker citydepart cityarrival datedepart datearrival component flightdisplay picker const route path order id level datedepart datearrival component vieworder order const route path ordercomplete component viewcomplete ordercomplete class tickets string name jit ticket application router router tickets thisrouter routersubscribe value print route changed value exists outside first level routeroutlet try acquire routeparams di inside topnav get following error exception provider routeparams topnav routeparams exceptionhandlercall ngzoneonerrorwithoutlongstacktrace ngzone moving topnav child outlet seems solve issue include topnav child view would assume routeparams top level global object might similar comments angular dart", "num": "4016", "d": "9/2015"}, {"title": "equivalent resolve component router", "body": "removal injectpromise injectlazy decorators equivalent functionality resolve ngrouteuirouter version would look something like js controller function mycontroller foo route config controller mycontroller url foos fooid resolve foo function routeparams fooservice return fooservicegetfoobyid routeparamsfooid imo one killer features current router uirouter remove async entirely controller makes super easy test canactivate etc hooks cover one use cases resolve preventing access routesstate ca nt see replacement case perhaps missing something tinkering idea like implementing resolve decorator alternative syntax might look like though limits string keys ca nt figure way pass bindings sure reflect allow us grab metadata annotations way hood keeps async injector simply matter executing resolver fn passing component overridden bindings thoughts", "num": "4015", "d": "9/2015"}, {"title": "type number passes string argument", "body": "setting field exception error evaluation ngmodel original exception type string subtype type num value original stacktrace using angular dart alpha fix set field string bzip dto object name tickets version description ticket commerce application author jack murphy jack rightisleftcom homepage environment sdk gt lt dependencies server dependencies jsonobject mongodart connectionpool dartson guinness shelf gt lt shelfstatic shelfroute client dependencies bootjack browser gt lt sass transformers dartson sass entrypoints webmaindart reflectionentrypoints webmaindart minify true commandlineoptions dumpinfo showpackagewarnings trusttypeannotations trustprimitives", "num": "4014", "d": "9/2015"}, {"title": "classactive longer working", "body": "earlier releases used activeclass property could used emit active class could used style active nav item alpha nt seem work bug alternative nt see change log", "num": "4013", "d": "9/2015"}, {"title": "benchpress overreporting chrome", "body": "running treeupdate benchmark chrome benchpress reports scripttimes purescripttimes higher reported previous versions chrome chrome chrome looking browser timeline chrome script time around assuming benchpress overreporting chrome note chrome team changed bunch event names chrome benchpress depends benchpress adapted new names see maybe names changed investigation required", "num": "4011", "d": "9/2015"}, {"title": "exception abstractchangedetector masking real exception oninit method", "body": "alpha test component loads angular component test however test component bug oninit lifecycle callback handler however completely masked another exception within angular abstractchangedetector code left exception useful following stack trace actually displayed browser console dart core list package abstractchangedetectorcurrentbinding package abstractchangedetectorthrowerror package abstractchangedetectordetectchangesinrecords package abstractchangedetectorrundetectchanges package abstractchangedetectordetectchanges package lifecycletick package xxxxxxxxxxxxxxxxxxxxxxxxxxxdart dart async zonedelegaterun package ngzonerun setting breakpoint throwerror see stack going printed pretty useful estacktostring listfirst dart querylistfirst package componenttestoninit bug got masked dynamicchangedetectordetectchangesinrecordsinternal package abstractchangedetectordetectchangesinrecords package abstractchangedetectorrundetectchanges package abstractchangedetectordetectchanges package lifecycletick package package rootrun dart zonedelegaterun dart ngzonerun package customzonerun dart customzonerunguarded dart customzonebindcallback dart microtaskloop dart microtaskloopentry dart scheduleimmediatehelperhandlemutation dart", "num": "4010", "d": "9/2015"}, {"title": "override tostring exception", "body": "override tostring exception exceptionhandler errors show cc vsavkin", "num": "4009", "d": "9/2015"}, {"title": "di support custom error messages", "body": "able following di find mydependency throw meaningful message asking instance include module nt expect used app developers useful libraries frameworks cc igorminar mhevery", "num": "4008", "d": "9/2015"}, {"title": "support events containing event name", "body": "say directive following work currently specify element event name follows", "num": "4007", "d": "9/2015"}, {"title": "autoconfigurable bindings modules automatic application bootstraping", "body": "think binding mechanism great powerful find verbose configure also generates unnecessary coupling applications framework would great introduce ability modules self configured angular becomes opinionated providing sensible defaults outofthebox know binding constants available like feel like shortcuts imho mechanism modules get autoconfigured http hello world application could look like typescript import component view ngfor autoconfigured import autobootstrap main import http response import observablewrapper autoconfigured component selector view directives ngfor template export class httpcmp people object constructor http observablewrappersubscribe res gt thispeople resjson autobootstrap see autoconfiguration eliminates lot boilerplate code case allowing use http object including http module also makes component bootstrapping easier developer binding process completely transparent course bootstrapping mechanism explicit binding still supported nghttp get auto configured default including following configuration class httpconfiguration work registry needed order keep track classes implementing annotations something like export class reflectregistry public annotationregistry map new map constructor add annotation cls void var annotationlist array thisannotationregistry annotation thisannotationregistry annotation annotationlistpush cls getforannotation annotation array return thisannotationregistry annotation export var reflectregistry reflectregistry new reflectregistry function register annotations classes annotated inside object application bootstrapping process angular check registry get bindings configuration classes joining priority order application third party moduleframeworktooling add configuration classes override defaulted bindings needed might useful also annotation make configuration classes taken account depending environment example might useful change bindings depending devicebrowser capabilities ie touch screen resolution cors support etc leads easier use module system plug amp play import amp play also end enables automatic bootstrapping application bindings automatically loaded also possible annotate main component application another annotation ie get registry bootstrap automatically please let know think truly nt know every detail angular source code roadmap might missing something writing feature request please nt hesitate letting know also excuse think proposal useful try build pr", "num": "4004", "d": "9/2015"}, {"title": "transformers record property metadata", "body": "example class classwithdecorators propdecorator propdecorator propdecorator set b value propdecorator get b return null create instance reflectioninfo propmetadata set closes", "num": "4003", "d": "9/2015"}, {"title": "estimated beta release date", "body": "estimated targeted beta release date unfortunately milestones section show esitmated dates next alphas information many alpha going", "num": "4002", "d": "9/2015"}, {"title": "benchpress use angular error reporter", "body": "currently di wraps exceptions benchpress making hard debug benchpress use angular error reporter properly report exceptions", "num": "3999", "d": "9/2015"}, {"title": "contribute layout test chrome notified event name changes benchpress", "body": "event names chrome traces changes break benchpress see unfortunately public announcement changes chrome team nt consider events public api however chrome team suggests could contribute layout test checks events expect something along lines add ourself watch list test expectations see", "num": "3998", "d": "9/2015"}, {"title": "refactor set annotations outside router factory", "body": "currently build script router sets routeconfig canactivate annotation functions angular inside router factory setting annotations outside factory would allow used build component annotations router instantiated", "num": "3993", "d": "9/2015"}, {"title": "improvements error messages inexisting bindings", "body": "alpha whenever binding undefined generic error message thrown like stacktrace bellow binding undefined accidentally imported case alpha upgrades renamed happen app development due typos well tools getting better order find binding causing currently go multiple bindings project remove one one rerun app nt know feasible would great message least componentdirective name binding found undefined maybe binding position", "num": "3990", "d": "9/2015"}, {"title": "alpha typeerror rxsubject function", "body": "consider example code typescript import component view bootstrap import routeconfig routerbindings routerdirectives component selector home view template class home component selector main view directives routerdirectives template routeconfig path home component home class main bootstrap main routerbindings throws following errors going seen debugger point error occurs rxsubject indeed nt exist located rxdefaultsubject", "num": "3987", "d": "9/2015"}, {"title": "ondestroy component without lifecycleeventondestroy", "body": "noticed ondestroy called even component defined intentional behavior thanks", "num": "3985", "d": "9/2015"}, {"title": "remove special case dartanalyzer warning", "body": "fixed remove special case dartanalyzerjs shouldignore prevents style output breaking build", "num": "3984", "d": "9/2015"}, {"title": "tslint checks code patterns produce bad output", "body": "discussed mtgs last week yjbanov particular want help contributors avoid running wall realize changes nt work dart version simplest way work cases outlaw ts syntax currently produce reasonable dart output example statements made toplevel program tricky tradeoff made casebycase basis", "num": "3981", "d": "9/2015"}, {"title": "better developersmd write tests", "body": "discussed mtg last week w mhevery igorminar yjbanov hard people contribute angular several patterns write tests unclear best emulate like document best way unit tests endtoend tests", "num": "3980", "d": "9/2015"}, {"title": "router property component null child router redirect", "body": "took figure one tl dr step route nested router without redirect throw error message tl dr confusing explaining little bit consider following code javascript routeconfig new route path main component nestedrouter main class mainrouter routeconfig new route path logged component loggedincmp logged new route path login component loginformcmp login class nestedrouter step myproject main throw error error message dissapears add redirect nested router redirect obviously specified path step directly child router path work error nt know logic redirect path navigation worked error message basically idea advise user add redirect nested router avoid error message since nested router work main component forcing component redirected wo nt better solution every case plnkr using check uncomment edit ablu ran issue see gitter chat plnkr seems problem abscence recognizing specified component nt recognize component handling path workaround works skips directly children path children path fails", "num": "3979", "d": "9/2015"}, {"title": "bind polymer custom event angular", "body": "want use polymer components angular given work angular converts ab event listner camel case ab polymer quote current state ways archive", "num": "3975", "d": "9/2015"}, {"title": "dgeni typescript incompatible ngtype generation", "body": "dgeni generates type typescript throws error compilation manually replace dgeni generated works fine", "num": "3972", "d": "9/2015"}, {"title": "reflection transformer rewrites webworker bootstrap", "body": "ui developers bootstrap webworker application calling currently transformer rewrite throw since bootstrapstatic nt defined", "num": "3971", "d": "9/2015"}, {"title": "error bootstrapping application", "body": "upgrading alpha seeing error bootstrap using router http following approach angular examples source listed error error instantiation function platformstrategy href mydemoapp router function platformstrategy href original exception typeerror rxsubject function original stacktrace typeerror rxsubject function new eventemitter new executereflectfactory injectorexecuteprotoinstantiate injectorexecuteprotonew injectordynamicstrategyexecuteinjectorgetobjbykeyid injectorexecuteprotogetbykeydefault injectorexecuteprotogetbykey injectorexecuteprotogetbydependency injectorexecuteprotoinstantiate error context", "num": "3969", "d": "9/2015"}, {"title": "implement nglistinvisiblebutactivelightdoms", "body": "followup implement api getting list live light doms visible ui projection points inactive views instantiated participate change detection visible many cases simply slow application api would return list element path xpath invisible light dom cc mhevery tbosch", "num": "3967", "d": "9/2015"}, {"title": "dgeni output type annotation var const currently missed", "body": "following var const nt output vartype dgeni", "num": "3965", "d": "9/2015"}, {"title": "support injecting attributes", "body": "", "num": "3961", "d": "9/2015"}, {"title": "fix router navigation broken using nglink directive", "body": "trying navigate clicking links generated nglink directive fail display content nglink generating relative path instead absolute path causes instruction found use href absolute path navigation works correctly routerlink directive generates absolute path link example gist", "num": "3959", "d": "9/2015"}, {"title": "query string parameters available via routeparams instance", "body": "user visits url like access queryparam via routeparams component configured match pathpart route rootrouter class calls navigate method constructor passes parameter path part url discarding query string parameters", "num": "3957", "d": "9/2015"}, {"title": "angular forms boilerplate", "body": "hi anyone good simple example forms without much boilerplate code read wanted since implemented need solution bind object without much effort also saw example bind object driven form html html js javascript thisform thisformbuildergroup code thisentitycode validatorsrequired name thisentityname validatorsrequired thisformvaluechangestorx subscribe res gt debugger error gt debugger gt debugger subscribe changes form way automatically update object thank advance best regards tiago braga", "num": "3956", "d": "9/2015"}, {"title": "router broken update alpha alpha", "body": "exception error instantiation function platformstrategy href function router router function platformstrategy href original exception typeerror rxsubject function original stacktrace typeerror rxsubject function new eventemitter new executereflectfactory injectorexecuteprotoinstantiate injectorexecuteprotonew injectordynamicstrategyexecuteinjectorgetobjbykeyid injectorexecuteprotogetbykeydefault injectorexecuteprotogetbykey injectorexecuteprotogetbydependency injectorexecuteprotoinstantiate error context context element inventmanapp componentelement null injector injector make certain changes routerinjectables longer part routerdts please correct make required changes version", "num": "3955", "d": "9/2015"}, {"title": "importing formdirectives breaks compilation", "body": "importing adding list directives view like following error occurs unexpected directive value undefined view component myappcomponent error unexpected directive value undefined view component myappcomponent new baseexception executecompilercompile functionexecutelistwrapperforeach executecompilercompilenestedprotoviews zonerun zoneexecutengzonecreateinnerzonezoneforkfork run run zoneboundfn lib promise internal trycatch", "num": "3953", "d": "9/2015"}, {"title": "benchmarks report gctime scripttime", "body": "run benchmark get metrics except rendertime benchmark description depth forcegc false lang js regressionslopemetric scripttime runid samplesize useragent linux khtml like gecko viewcache true metrics gcamount gc amount kbytes gctime gc time ms majorgctime time major gcs ms purescripttime script execution time ms without gc render rendertime render time ms scripttime script execution time ms including gc render benchmark js cc tbosch", "num": "3949", "d": "9/2015"}, {"title": "access humanstxt", "body": "hi guys situation need access using angular url manager nt let access access files", "num": "3945", "d": "9/2015"}, {"title": "querylist reset dehydration", "body": "see", "num": "3944", "d": "9/2015"}, {"title": "public url angular", "body": "love try angular codepen public url reference use angular developer previews pens", "num": "3943", "d": "9/2015"}, {"title": "feat dgeni change hierarchy docs", "body": "grand reshuffling exports see many things previously lived outside folder live di forms directives changedetection consequently landing things imported presents problem current docs side navigation would toplevel modules core huge list things underneath first way solve comes mind change subnav represent logical children toplevel module ie thoughts wardbell mhevery naomiblack", "num": "3941", "d": "9/2015"}, {"title": "issue typings include constructor definitions classes dts", "body": "became important extend example work see list errors error ratingratingts supplied parameters match signature call target error timepickertimepickerts supplied parameters match signature call target trying self constructor type parameters come string parsed dgeni templates", "num": "3938", "d": "9/2015"}, {"title": "add testlibdts definitelytyped", "body": "looks like make dt yet postponed next release nt even considered", "num": "3936", "d": "9/2015"}, {"title": "alpha componentref", "body": "hi breaking changes alpha throws bootstrap way exist changed hashlocation best regards tiago braga", "num": "3935", "d": "9/2015"}, {"title": "http module longer available sfx builds alpha", "body": "able find way including http module sfx bundles alpha embeded bundle alpha bundle seem like alpha somewhere http module available another way include using systemjs ofcourse please let know thanks", "num": "3934", "d": "9/2015"}, {"title": "npm readme add usage bundle", "body": "description npm package include instructions use directly js new webpage beginner may tend use root folder instead including first script tag nt cause error message functionalities available eg data binding nt work without error therefore line misleading added line stating something like", "num": "3930", "d": "9/2015"}, {"title": "intercepting eventsproperties renders", "body": "goal way intercept eventsproperties renderer could things like create custom event handlers ie touch events swipe etc create custom dom elements events properties things like jqueryext js widget library integration simple event integration need able register custom event need know need create custom element upgraded jqueryui library system needs able deduce jqueryui event property bindingsevents registered using normal dom api using custom api proposal way register synthetic domrenderer requirements needs done ui thread needs fast create lot bindingseventselements needs element scoped since different elements different eventsproperties integrate schema compiler easily throw typos integration schema allow us bridge webcomponents api additional api registering interceptors per element name allow custom code run element creation event registration property updates", "num": "3929", "d": "9/2015"}, {"title": "dgeni nt output constructors dts files", "body": "dgeni output public constructors dts files", "num": "3926", "d": "9/2015"}, {"body": "see consensus pkozlowskiopensource corresponding issue created", "d": "9/2015"}, {"body": "move issue angular sorry", "d": "9/2015"}, {"body": "could nt rely afair also supports line numbers sure like proper camel casing point think conform html nt try reinvent wheel", "d": "9/2015"}, {"body": "give details keen idea really remember techno aimed improving standard coffe script dart successful widely adopted parser would make easy amp tempting deviate html imo could increase fragmentation amp frighten users really want maintain parser part angular ref", "d": "9/2015"}, {"body": "vicb already deviated html please nt pretend valid html syntax already frighten users way see need remember dashcasecamelcase conversion special cases terrible user experience frightening users even", "d": "9/2015"}, {"body": "sure like proper camel casing point think conform html nt try reinvent wheel vicb looking current user experience feedback toons people bump issue following standards also given users tool works according expectation saying one another totally live current system since understand yeh got tradeoffs make really want maintain parser part angular ref understanding sort already serverside compilation would nt even raise case fact need parse templates serverside anyway top parser sides would allow us remove parser compiler framework runtime saying need absolutely rather serious advantages approach let consider seriously", "d": "9/2015"}, {"body": "would love going set javascript property feel like use javascript name html enforced name html standards argument nt feel like project much standards anyway mean writing code base typescript supporting dart also notation people like problem think polymer excellent project prefer using upcoming web standards", "d": "9/2015"}, {"body": "alexpods nt pretend valid html syntax valid html syntax pkozlowskiopensource understanding sort already serverside compilation afaiu use parse templates server side top parser sides would allow us remove parser compiler framework runtime today use browser builtin parser already need embed kind parser runtime situation would even regarding runtime footprint saying need absolutely rather serious advantages approach let consider seriously fully agree consider carefully weigh pros amp cons jump discard idea mhevery listed advantages original message disputable imo think consider amp sides benefits see implementing nonhtml compliant parser proper camel casing get rid innerhtml vs innerhtml could support self closing tags custom elements kasperpeulen nt feel like project much standards anyway mean writing code base typescript supporting dart typescript mostly proposals types close enough standard plus transpiles user exposed ts prefer wrt dart would say code base ts nt see issue transparent jsts developers", "d": "9/2015"}, {"body": "vicb imo benefits camelcasing selfclosing tags errors proper line numbers lt would huge wine especially detect pbs ex funky autocorrections done html browsers understand would still runtime codesize gains measure several versions parser would good one code path means got one set bugs fix anyway discussed measured decided upon", "d": "9/2015"}, {"body": "wondering new typescript tsxjsx features ts could leveraged parser order allow type safe templates", "d": "9/2015"}, {"body": "writing observations first week deepdive angular one overloaded terminology may cause confusion learning framework component property event bindings ref also property bindings private dependency injector related issue discussion annotating emitting metadata change might lean favor something like", "d": "9/2015"}, {"body": "vsavkin think would help keep name thinking renaming submitting issue nt end proposing seems like common terminology di see guice personally nt mind dropping rename well sound right", "d": "9/2015"}, {"body": "think would understand renaming concept yet might good keep mind people got used term binding also using term provider might make people think concept providers like although otoh provider somehow even wed sep victor berchet notifications githubcom wrote vsavkin think would help hostbinding keep name thinking renaming submitting issue hostbinding nt end proposing bind seems like common terminology di see guice personally nt mind dropping bind rename toxxx well new provider http toclass customhttp sound right reply email directly view github", "d": "9/2015"}, {"body": "hessgoogle think confusing two different things providing binding di injecting something thing dont think renaming help enforcing emitting metadata typescript however agree binding heavily overloaded term wed sep pascal precht pascalprecht gmailcom wrote think would understand renaming concept yet might good keep mind people got used term binding also using term provider might make people think concept providers like although otoh provider somehow even wed sep victor berchet notifications githubcom wrote vsavkin think would help hostbinding keep name thinking renaming submitting issue hostbinding nt end proposing bind seems like common terminology di see guice personally nt mind dropping bind rename toxxx well new provider http toclass customhttp sound right reply email directly view github", "d": "9/2015"}, {"body": "long thought sort confusing said feel like providers key sort nt much better referring things services components personally component services bind thing tovalue foo bar users quite happy term service think", "d": "9/2015"}, {"body": "wardbell matanlurey comments leaning towards changing", "d": "9/2015"}, {"body": "naming change take look big picture view see impacts public apis eg", "d": "9/2015"}, {"body": "want change well way overloaded problem introduces yet another new concept something nt need right inclined toward robwormald suggestion although introduces new concept well albeit familiar concept already teach dependencies part dependency injection call property picayune might notice sometimes supply explicit binding array rather name dependent thing nt mind someone suggestions fail none mention bindings kind case would vote lengthy accurate", "d": "9/2015"}, {"body": "wardbell think would generic since also property decorator also sort dependencies ppl might wonder treated dependencies", "d": "9/2015"}, {"body": "agree generic seems specific especially bind value factory nt make lot sense although realize may create confusion users familiar angularjs", "d": "9/2015"}, {"body": "would nt anymore also even though might cause confusion first sounds cool", "d": "9/2015"}, {"body": "really think", "d": "9/2015"}, {"body": "matter pure english within world sw provider dependency equally generic biggest problem provider yet another word angular lexicon nt need provider provide used answer context would say provides something injected another thing word already called dependency teach early every would ng dev read dependency knee jerk reaction something injected constructor either tho component constructor constructor one dependencies precisely reaction want dev nothing new learn w seen telling ng passes constructor get done reasons familiar term correct instinct instinct reason happen favor unambiguous", "d": "9/2015"}, {"body": "phone mangled text instinct reason point dev nt understand reason providers simply knows without thinking must supply thing goes constructor learned di leaned dependency injection", "d": "9/2015"}, {"body": "learned", "d": "9/2015"}, {"body": "wardbell right providers yet another concept thought angular developer familiar notion providers would agree nt think use word dependencies following use case say directive wants publish validator reasonable use name provider binding directive either validator provides validator reasonable call dependency ngvalidator dependency mycustomvalidator", "d": "9/2015"}, {"body": "ok sold proviso start talking early often context dependency injection igorminar must add provider term glossary pascalprecht take heed need start driving term provider throughout di chapter lock developer brain think outloud revised discussion might look like part depends upon outside thing thing one dependencies dependency injector supply dependency help dependency corresponding provider register providers injector write asking class create new register provider new injector register provider injector means di binding di binding association key provider key provider pair write associate key type provider class ask injector supply something asking key eg injector checks container existing instance requested thing nt one injector asks corresponding provider create thing adds newly created thing container know new component instance gets child injector general child injector access every dependency created parent injectors component instance asks something child injector unable supply thing child injector walks parent tree finds injector either requested thing create one using corresponding provider developer may know parent injector make thing needs perhaps developer requires child injector instance required thing either case developer would specify di binding key provider pair thing component array process kind di binding write manually registering provider injector", "d": "9/2015"}, {"body": "well considering listed pros cons renaming databindings leaving similar di systems", "d": "9/2015"}, {"body": "probably looking formdirectives definition looks like", "d": "9/2015"}, {"body": "mgechev thanks", "d": "9/2015"}, {"body": "agree approach outline see comment think prior compilerintegration changes landing urgent update vicb vsavkin could branch compilerintegration update understand property annotations happy point right direction", "d": "9/2015"}, {"body": "approach makes sense however cycles make happen currently addition work done compilerintegration branch obsolete effort put recommend wait landed make sugary kind changes", "d": "9/2015"}, {"body": "think needs context", "d": "9/2015"}, {"body": "using reflection dart would metadata classes annotation used transformer trigger metadata generation quite similar required ts could decorator ts imo reasonable name", "d": "9/2015"}, {"body": "reasonable name guess see coming objection reasonable fact decoration really means thing expects dependencies injected problem means exactly opposite means decorated class injected something else capable injected something touchable touched something injectable injected nt exactly decoration needed write would seem adding decoration tell angular reader injected fact decoration completely unnecessary injectable something else without decoration need decoration class constructor dependencies injected following class requires decoration constructor expects dependent instance injected accurate horrible decoration name might name injectable catches developer offguard thinks add every class might injected fact needs add decoration class injected dependency one could argue keeping name follows done late harmless add class parameterless ctor matters going inject target class something else wo nt actually able inject class something else unless dependencies injected first otherwise injector ca nt construct third point decisive part argument becomes injectable something else addition decoration without injector could create therefore move accept present state things move pascal christoph find way explain reader", "d": "9/2015"}, {"body": "fact decoration completely unnecessary foo injectable something else without decoration probably biased angular dart background dart way know class dependencies unless kind reflection info available dart amp nt optional", "d": "9/2015"}, {"body": "make create another separate decorator ts use leave believe never intended used framework consumers", "d": "9/2015"}, {"body": "kind funny naming things actually one hardest things spring java autowired annotation purpose anything related metadata generation simply means state dependencies annotated class injected di system requiresdependencyinjection requiresdi could another meaningful name", "d": "9/2015"}, {"body": "issue makes sense thoughts suggested names like also find little bit confusing past tense like makes sense sure clear di required resolving arguments constructor bit confusing nt carry enough semantics abstract developers aware di works one like makes sense sure clear di required resolving arguments constructor verbose nt carry enough semantics nt indicate dependencies injected one suggestion", "d": "9/2015"}, {"body": "believe injectable never intended used framework consumers jessegood surely intention happens decorator lying round used workaround issue need way enforce ts emit metadata emitmetadata abstract developers aware di works mgechev sure end thing ts even using angular di maybe something generic like good fit enforces ts", "d": "9/2015"}, {"body": "suggestions", "d": "9/2015"}, {"body": "think stop thinking word injection limiting options purpose pascalprecht proposal emit metadata bind class component cases use services maybe something generic thinking injected like edit tommym thinking component service component service something else", "d": "9/2015"}, {"body": "ericmartinezr decorator needed make class injectablebindable great name pascalprecht suggesting rename actually need decorator di able inject constructor class like gives us impression make class injectablebindable pascalprecht blogpost explains well", "d": "9/2015"}, {"body": "pascalprecht getting tightly coupled underlaying language used implementation ie typescript might good idea decorator enforcing meta data generation general case talking dependency injection something specific could suitable", "d": "9/2015"}, {"body": "must say kind like idea ericmartinezr saw similar approach spring framework annotations like etc annotations nt much serve important purposes allow di consume add documentation context given class purpose agree similar proposals lowlevel tsspecific", "d": "9/2015"}, {"body": "like well describes purpose class fits nicely list etc thing could said actually needed class able used service di nt really see problem would good convention nice side effect generating metadata injections required", "d": "9/2015"}, {"body": "tommym could say proposed naming think main issue fact needed probably issue tackled another angle force user add decorator classes injected way metadata emitted matter something like throw something like far every proposed name fail way added blow entire machine think even specific add work add work nicely far decorator would trick", "d": "9/2015"}, {"body": "sth like service might encourage ppl always put service service class well service would take us original problem metadata generated even though needed means explain case service decorator needs added soon talking underlying nature ts anyways vote something nt necessarily framework specific happy get arguments speak service tue sep pm ericmartinezr notifications githubcom wrote tommym could say proposed naming think main issue fact needed probably issue tackled another angle force user add decorator classes injected bindingviewbindings way metadata emitted matter something like class dataservice bindings dataservice throw something like oh noes forgot add theneededdecorator pls add far every proposed name fail way added blow entire machine think even specific add injectable work add service work nicely far decorator would trick reply email directly view github", "d": "9/2015"}, {"body": "ha posted services replacement bindings", "d": "9/2015"}, {"body": "pascalprecht sth like service might encourage ppl always put service service class well service would take us original problem metadata generated even though needed fair point answer kind lot better bit extra metadata whole thing blow without dunno", "d": "9/2015"}, {"body": "fine renaming none suggestions far objectionably better currently unless could come good alternative stuck status quo rules less words better better", "d": "9/2015"}, {"body": "vote keep move person objected name early filled regret first would nt worry pragmas per robwormald nt second must name convey means developer works therefore opposed anything like emit metadata third kind nice limited something developer thinks service inclined toward wanted change fourth fully understand objection decoration helps injector inject thing made objection fact care whether injector inject something class also intend inject class something else short bother put decoration class intend inject class something else say intend class injectable therefore accurate wrt intentions fifth robwormald observes almost irrelevant unwary developer decorates class unnecessarily amount extra metadata material generated js tiny compared boatload crappola gets generated anyway support balance given effort necessary propagate change lack clear benefit tremendous amount real work yet say keep", "d": "9/2015"}, {"body": "filled regret even mentioning word pragma anywhere near js project even means developer rather works sort suggested service keeps things angular build scoped component directive service reasonably simple thing grok", "d": "9/2015"}, {"body": "fifth robwormald observes almost irrelevant unwary developer decorates class injectable unnecessarily amount extra metadata material generated js tiny compared boatload crappola gets generated anyway support class keep mind nt code size also impact applications runtime performance since unnecessary calls", "d": "9/2015"}, {"body": "pascalprecht might indeed although like see evidence worried discovered actually problem could list remove unnecessary decorations among perf optimization techniques better yet add task minimization pipeline erases decoration class lacks constructor parameters bigger problem finding term wo nt trigger dev apply decoration anyway precaution doubt doubt worth trying hard anyway demonstrate measurable perf risk got excited", "d": "9/2015"}, {"body": "valid point murky waters biiiit issue little hack solving nt making injectable dependency notating injects dependencies ducks sep pascal precht notifications githubcom wrote fifth robwormald observes almost irrelevant unwary developer decorates class injectable unnecessarily amount extra metadata material generated js tiny compared boatload crappola gets generated anyway support class keep mind nt code size also impact applications runtime performance since unnecessary calls metadata reply email directly view github", "d": "9/2015"}, {"body": "hasdependencies favorite think bigger fish fry", "d": "9/2015"}, {"body": "think interesting feature still needed", "d": "9/2015"}, {"body": "feature needed needs implemented", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "create component able hook lifecycle hook bindings change", "d": "9/2015"}, {"body": "sorry vicb could plunker example", "d": "9/2015"}, {"body": "danicomas one", "d": "9/2015"}, {"body": "danicomas future please use gitter channel support request thanks gh used report bugs", "d": "9/2015"}, {"body": "thanks possible statically via template directives would like dinamically", "d": "9/2015"}, {"body": "cc btford tommym pascalprecht", "d": "9/2015"}, {"body": "injector allows token include types agree cexbrayat allow type token merit valid token guess naming conventions also ref name real problem guarantee shallow copy since two types allowed arrayobject unaware types provide unless factory perhaps perhaps bindings routeroutlet missing needs include prop adding two seems best option since anyone create conventions", "d": "9/2015"}, {"body": "type cleanly injected", "d": "9/2015"}, {"body": "think convinced type would better pr welcome", "d": "9/2015"}, {"body": "mhevery btford thx answers agree type inject would offer getter guess data simple object like would ok", "d": "9/2015"}, {"body": "opened related pr start discussion feedback welcome", "d": "9/2015"}, {"body": "cexbrayat thanks starting already took look lvgtm", "d": "9/2015"}, {"body": "also include", "d": "9/2015"}, {"body": "would nice provide minimum set operators described default angular apis export allow users like different set operators able override binding di name important right overriding binding calling would return observable operators need", "d": "9/2015"}, {"body": "include factory di worth considering whether done", "d": "9/2015"}, {"body": "factory", "d": "9/2015"}, {"body": "would vote include people import need", "d": "9/2015"}, {"body": "problem moment really good way add fact observables returned core least ts js without operators gt thisfoos resjson map included connected async pipe thisfoos gt resjson retry included thisfoos gt resjson functionbind proposal gives us nice solution currently supported ts js import map retry myoperators thisfoos gt resjson dart distinct advantage provide similar set language streams", "d": "9/2015"}, {"body": "without function bind support typescript recommend including current rxjs core operators lot frankly subset things people want really nt want include could mirror rxts file create lite version stuck supporting requests operators recommendation use rx asis come make arguments ones removed nt think core enough", "d": "9/2015"}, {"body": "fwiw ones rxjs core ones nontrivial reproduce combination operators goal least chosen usage within netflix apps", "d": "9/2015"}, {"body": "dom elements nt property attribute name want bind attribute need prefix name ex error correct definitively want throw unknown properties since binding nonexisting properties would nt effect user error time", "d": "9/2015"}, {"body": "cool aware prefix must clearly documented whenever time go ga comes think however opportunity improve message give binding misses prefix could print something like would nt even need documentation exception ca nt bind foo since nt known property element matching directives corresponding property attribute make sure prefix name attr issue could used track improving message", "d": "9/2015"}, {"body": "already reported see", "d": "9/2015"}, {"body": "wrong repo guess wanted open repository angular", "d": "9/2015"}, {"body": "enough context help property bindings work without problems custom elements including ones created polymer please prepare live reproduce scenario using plunker similar take look thnx", "d": "9/2015"}, {"body": "pkozlowskiopensource tried angular polymer starter kit polymer component render quite good used angulard router ex app broken waiting next version polymer next version angular run together", "d": "9/2015"}, {"body": "thanks pkozlowskiopensource worked tried fresh repo", "d": "9/2015"}, {"body": "really nt think want go supporting directives property would open wired corner usecases said easily set particular class host using see", "d": "9/2015"}, {"body": "attribute would match directive selector ngmodel ngcontrol ngformcontrol would", "d": "9/2015"}, {"body": "see vicb thanks possible selector match", "d": "9/2015"}, {"body": "possible selector match ngmodel nt think would make sense", "d": "9/2015"}, {"body": "wardbell special syntax already trick things play got convention writing bind nt solve pb one would write nt pretty commonly used properties specialcased compiler works", "d": "9/2015"}, {"body": "tbosch mhevery wondering could nt allow mixedcase attributes new compiler technically possible parsing string representation template know would depart html standard soooooo many people bumping", "d": "9/2015"}, {"body": "oooo change textcontent safer comment makes much interesting observation reverted document", "d": "9/2015"}, {"body": "document wardbell totally probably goodies compiler well known ping slack discuss", "d": "9/2015"}, {"body": "pkozlowskiopensource ca nt allow new compiler may work build time bit would fail browser always sake consistence honor browser", "d": "9/2015"}, {"body": "mhevery oh impression going use textbased compiler buildbased compilation browser advantage different code paths compiler assuming always getting text template dom tree could use code", "d": "9/2015"}, {"body": "sorry closed accident aware going use browser parser tbosch comment", "d": "9/2015"}, {"body": "mhevery tbosch sure new compiler works nt know using browser parser wondering would different compilers parse text cases would advantage approach", "d": "9/2015"}, {"body": "think would solve issues good", "d": "9/2015"}, {"body": "cristinecula error states missing hammerjs dependency code event apparently implemented hammerjs however event ca nt usedbound component make sure include hammerjs well", "d": "9/2015"}, {"body": "pascalprecht thank quick response understand including hammerjs would make exception go away trying use event supplied hammerjs trying define component launches custom event named given key combination pressed", "d": "9/2015"}, {"body": "since want set attribute property right", "d": "9/2015"}, {"body": "ah yes correct nt aware host values properties attributes thank pawel clearing", "d": "9/2015"}, {"body": "ha exactly discussing folks yesterday introducing", "d": "9/2015"}, {"body": "right raising already going close duplicate one specific updated loader already yes breaking changes gave go one point past could nt figure things quickly lt", "d": "9/2015"}, {"body": "problem implementing routing standard todomvc application application uses routing filter todosi store todos local storage otherwise todos would deleted routing", "d": "9/2015"}, {"body": "ya would nt good object dispose route change", "d": "9/2015"}, {"body": "registering service holds data main di requesting ever need access data work nt know achieve di", "d": "9/2015"}, {"body": "zoechi ya done point angular still alpha get control disposing component object would nice keep state application extra effort even nt know would possible one angular team comment", "d": "9/2015"}, {"body": "imho like datastate model live service whether components disposed different issue valid concern data probably live service", "d": "9/2015"}, {"body": "robwormald data live service class inject component class everytime change param component service class disposed well fix save service class local storage", "d": "9/2015"}, {"body": "kasperpeulen extended kalpeshchheda plunker show works note using bindings parent component simply injecting children add another binding children force injector create another instance", "d": "9/2015"}, {"body": "closing works intended feel free carry discussion", "d": "9/2015"}, {"body": "robwormald sure works intended router parameters routing todomvc app without parameters like nt loose data everything works like expected parameters looks cleaner dart view template directives const routerdirectives routeconfig const const route path filter component todocomponent component selector todocmp viewbindings const todostore view templateurl todocmphtml directives const coredirectives class todocomponent todostore todostore todocomponent thistodostore routeparams routeparams todostorefilter routeparamsget filter loose data repo commented local storage logic make obvious model lost routing note using bindings parent component simply injecting children add another binding children force injector create another instance nt use model parent component app use data child complete todo component", "d": "9/2015"}, {"body": "kasperpeulen quick look repo pull later afternoon proper look still pretty sure issue related defining bindings child assuming want singleton todostore probably bind rootapp component child way time new todo component instantiated look parent component grab already instantiated store pascal article great read mechanics", "d": "9/2015"}, {"body": "thing check clarify going would filter working expecting todostore reinstantiated another issue filtering logic perhaps", "d": "9/2015"}, {"body": "kasperpeulen pulled repo definitely issue described remove viewbindings option todocomp add dart component selector app bindings const todostore root component works expected hope helps", "d": "9/2015"}, {"body": "robwormald thanks lot working read article linked", "d": "9/2015"}, {"body": "please direct general support questions like one appropriate support channel", "d": "9/2015"}, {"body": "goal message", "d": "9/2015"}, {"body": "check issue", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "would nicer use handler imo looks nicer gets around types issues cleanly javascript enum state open closed component class controller state state onopenclick thisstate stateopen", "d": "9/2015"}, {"body": "would", "d": "9/2015"}, {"body": "ah yes would painful case agree suggestion able expose noninstance based contexts", "d": "9/2015"}, {"body": "another realworld example time property binding", "d": "9/2015"}, {"body": "start referenceerror navigationmapper defined would probably mean importing import code share plunk help", "d": "9/2015"}, {"body": "pkozlowskiopensource forgot say importing components", "d": "9/2015"}, {"body": "think couple problems incorrect use decorators instead need use take look nt declared property however none issues related problem repo tried reproduce issue unfortunately without results", "d": "9/2015"}, {"body": "incorrect use componentmetadata viewmetadata depends setup would work traceur tried reproduce issue unfortunately without results asked plunk enough context help", "d": "9/2015"}, {"body": "using traceur yes know working plunkr still issues", "d": "9/2015"}, {"body": "pkozlowskiopensource ah mistake excuse ignorance", "d": "9/2015"}, {"body": "plunkr keeps sending happens router constructor searched github error nothing solved plunkr keep mind happening real code bug trying solve best regards tiago braga", "d": "9/2015"}, {"body": "router essential reproducing pb drop", "d": "9/2015"}, {"body": "getting error instanciating", "d": "9/2015"}, {"body": "trying use type annotations babel sure supports", "d": "9/2015"}, {"body": "pkozlowskiopensource removed types still could nt find traceur example cdn local project using traceur", "d": "9/2015"}, {"body": "couple typos example also use static parameters array get variable inject using babel working example", "d": "9/2015"}, {"body": "brandonroberts sure linked good plunk look console full errors", "d": "9/2015"}, {"body": "pkozlowskiopensource missed typo correct", "d": "9/2015"}, {"body": "brandonroberts yep works ok thnx helping hope answers question least setup let move discussion gitter since nt think seeing bug", "d": "9/2015"}, {"body": "brandonroberts thank much helping pkozlowskiopensource well told second bug original issue issue showed plunkr local project use traceur need componentparameters property goes fine types issue still agree gitter discussion ask issue avoid creating issue threads thank much time stay awesome tiago braga", "d": "9/2015"}, {"body": "href link add hash routerlinkts onclick boolean windowevent metakey windowevent ctrlkey windowevent shiftkey typeof thistargetparams undefined return true", "d": "9/2015"}, {"body": "apps used generate links hashes", "d": "9/2015"}, {"body": "first time looking angular source code analysis please let know right locationstrategyts expose method accept string return default implementation hashlocationstrategyts override method return string url passed locationts expose new method accept stringified instruction like internally call normalizeabsolutely pass output generatenavigationurl platformstrategy finally routerlinkts modified use new instead method", "d": "9/2015"}, {"body": "caused di ca nt find binding constructor temp workaround passing new", "d": "9/2015"}, {"body": "butaixianran inline component templates example try gulp task ludohenin create single bundle scripts files reduce number requests dramatically", "d": "9/2015"}, {"body": "provide github repo perhaps clone showing similar problems case ca nt share current codebase many ways optimize initial loads include one method yet released", "d": "9/2015"}, {"body": "minify js html", "d": "9/2015"}, {"body": "server slow took download nonminified gzip google cdn serve around angular nonminified gzip concat minify gzip etc said", "d": "9/2015"}, {"body": "butaixianran think people thread identified number optimizations make today time tbosch working hard compiler changes make possible precompile templates part build step means able compile templates offline combine minify resulting js output yeh need bundle files make sure server performs reasonably closing startup optimizations worked", "d": "9/2015"}, {"body": "pkozlowskiopensource great news thanks guys target chinese people server china visiting slow may try looks like need", "d": "9/2015"}, {"body": "merged via", "d": "9/2015"}, {"body": "seems like combined enough trigger bug", "d": "9/2015"}, {"body": "tracked root cause declares method schedules work completed asynchronously via problem actually called multiple times called change detection runs never completed successfully exception happens change detection called set run next tick since schedules asynchronous work next tick happen immediately causing crash loop", "d": "9/2015"}, {"body": "cc mhevery", "d": "9/2015"}, {"body": "suggestion good name", "d": "9/2015"}, {"body": "dunno", "d": "9/2015"}, {"body": "vsavkin pkozlowskiopensource igorminar vicb comment ok", "d": "9/2015"}, {"body": "like current understand issue dart side sounds like good name consistent names nouns said nt great name candidates thing comes mind want stick nouns sounds confusing", "d": "9/2015"}, {"body": "pkozlowskiopensource think declaring noun fine event action sounds nice", "d": "9/2015"}, {"body": "definitively live", "d": "9/2015"}, {"body": "emits sounds good", "d": "9/2015"}, {"body": "based mhevery arguments also vote declarative nice", "d": "9/2015"}, {"body": "emits verb decorators nouns consistent fri sep pascal precht notifications githubcom wrote based mhevery arguments also vote emits declarative nice reply email directly view github", "d": "9/2015"}, {"body": "avoids conflict keeps noun prevents boilerplate lots events note likely renamed method see", "d": "9/2015"}, {"body": "igorminar think verbnoun distinction important given declaring action declaring verb use verb naomiblack bradlygreen want comment", "d": "9/2015"}, {"body": "proposed rename really find different names confuse di property bindings", "d": "9/2015"}, {"body": "vsavkin comment nt think use since would imply semantics copies data binding component would create binding would update dom suggest something", "d": "9/2015"}, {"body": "rename think good name add note different semantics compared different though", "d": "9/2015"}, {"body": "different though yeh saw rename thinking end day setting property true either setting property dom element directive cases updating property response model changes", "d": "9/2015"}, {"body": "mhevery use term binding confusing related issue trying fix", "d": "9/2015"}, {"body": "fine rename think renaming mistake let brainstorm names igorminar said wrong since completely different semantics add prefix clarifying something property special property except case would something completely different like different whatever else call", "d": "9/2015"}, {"body": "brainstorming", "d": "9/2015"}, {"body": "actually also vote mhevery main semantic difference decorator causes write dom property rather component property need keep mind update desugared version otoh sure proposal would work scenarios haveuse host properties web worker world dom exists might good idea", "d": "9/2015"}, {"body": "pascalprecht ca nt name render may native vicb appreciate suggestions believe fewer words better think something shorter means declaring property may may data bound part public api component component reads property expect data come different declaration much action please something private public write property expect mirrored host element always dirty checking cost ending extremely confusing since nothing alike public vs private input vs output zero cast vs neverzero cost possible expression vs copy fine rename using suffix wrong need find word describe", "d": "9/2015"}, {"body": "host view already typescript", "d": "9/2015"}, {"body": "sure name either could confuse ppl well since actually exposing property binding outside world ppl might think", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "think suggested names reasoning behind renaming original one think best fit thing even ppl like us know sort happening behind scenes came anything first place even though semantically different think users framework familiar internals would expect prolly also expect sth like feels like something missing namely exactly go part maybe go cost could confused di binding stick feels like closest", "d": "9/2015"}, {"body": "light renames di binding terminology di provider frees binding used databinding api name might remain", "d": "9/2015"}, {"body": "without thinking much vote something like", "d": "9/2015"}, {"body": "think bad option consider scanning list routes ca nt easily tell scanning list ones auxiliary instance looks like mistake two routes path fact valid config one auxiliary wo nt notice scan way right different options", "d": "9/2015"}, {"body": "hm understand feels inconsistent otherwise thing route definitions like example also introduce another property prolly used determine route definition type made sense introduce property aux route keeping rest consistent", "d": "9/2015"}, {"body": "think type property", "d": "9/2015"}, {"body": "think suffers problem mentioned type introduces new target redirectto component etc keeping path aux routes different meaning path different reason think something whatever property comes first needs different things behave similarly look similar things behave similarly look similar case latter", "d": "9/2015"}, {"body": "btford ya good point also agree pascalprecht inconsistent otherwise benefit proposal following javascript convention part example look geojson spec notice two types one way serialize types soon realized convention may result maintainability problems communicating two typed languages javascript lead creation spec routes presumably remain small larger apps would end using types eg wo nt maintainability problems prop also allows future proof since value dynamic new types could added", "d": "9/2015"}, {"body": "think abstracted way better sure possible new route definition type comes future need introduce new property sure depends semantics particular definition type decided something like simple flag property even like nt introduce new apis think consumer point view nt deep understanding implementation semantics confused special property thing called aux route", "d": "9/2015"}, {"body": "btford fix teach good conventions people put property first visually apparent glance still succinct tension typing whole lot remove potential confusion typing less folks use feature lot resolved convention remember convention including first like remember convention entails lot less typing like idea good conventions add clarity miss ability use variable names scheme scheme predicates names ending convention functions mutate value names ending lot smart little conventions helped make remembering crucial details easier embraced maybe even sublime plugin could written flag failure adhere conventions nice thing convention code work even put first brittle", "d": "9/2015"}, {"body": "actually let amend recommendation adding type property would better would also add convention type entered first best practice", "d": "9/2015"}, {"body": "nt played new router still new p would make sense overload decorator like current common form shortcut eg ts routeconfig routes equivalent shortcut routeconfig routes routes proposal might make sense hey neutralface", "d": "9/2015"}, {"body": "gkalpak like one suggested makes types explicit nt require instantiation done user time something passed", "d": "9/2015"}, {"body": "think replacement currently exported helper function discussion btford mentioned might want export helper function nt think multiapp apps yet also sure affects bootstrap process afaik use bootstrap multiple apps change detection etc make simpler solution looking", "d": "9/2015"}, {"body": "pascalprecht helper still additional complexity problem good solution would rename current export write new like", "d": "9/2015"}, {"body": "goal actually get rid well inject query retrieve root component process configuration agree vs confusing nt want remove latter temporary implements", "d": "9/2015"}, {"body": "igorminar alxhub said believe working redoing work", "d": "9/2015"}, {"body": "issue refactoring make issue put breaking hotlist", "d": "9/2015"}, {"body": "done", "d": "9/2015"}, {"body": "takes first proposal", "d": "9/2015"}, {"body": "knock pr", "d": "9/2015"}, {"body": "oh issue probably project since moved doc generation", "d": "9/2015"}, {"body": "petebacondarwin glad hear sounds doable thinking topic got decorators probably make things bit complex hand gives us opportunity type information properties oh feel free move better place", "d": "9/2015"}, {"body": "echonax thanks mean getting started guide angulario", "d": "9/2015"}, {"body": "pascalprecht yes exactly typescript part thought point save people couple seconds", "d": "9/2015"}, {"body": "could file issue thanks", "d": "9/2015"}, {"body": "mediacad angular router docs written right stay tuned", "d": "9/2015"}, {"body": "thank", "d": "9/2015"}, {"body": "could provide concrete use case", "d": "9/2015"}, {"body": "hi mhevery developing custom component change detection writing custom differ merge features keyvalue iterable differs ex refer following object differ detect changes name hobbies city amp country knownaddresses differ need extra parameter like use determine deep change detector watch changes ideas please share thanks bharath", "d": "9/2015"}, {"body": "angular repo could create issue angular repo", "d": "9/2015"}, {"body": "pointed wrong repo said suspect using mode routing want read serverside request params using clientside routing api obviously wo nt work would suggest carefully go ask support questions using one support channels closing question nt belong github issue", "d": "9/2015"}, {"body": "nt want nt export think meant hiding parts implementation", "d": "9/2015"}, {"body": "case possible reexport class vsavkin exact scenario", "d": "9/2015"}, {"body": "assume attributes mean decorators decorators used add meta data code used framework various different things new decorator basically except developer immediately see route component represents nt seem right thing imo question really want achieve value added really seeing route current configuration comment would also job also comes nestedaux routes component configuration reusable might different semantic meaning one context reused might even able specify route current component", "d": "9/2015"}, {"body": "pascalprecht sorry yes mean decorator dart main language sometimes call wrong name yes comment could work change route would always forget change comment unless strict would always forget yes see mean might get bit confusingunusable possibly bit work think could useful addition obviously would optional user use wo nt work situation nt use", "d": "9/2015"}, {"body": "main concern would nt add value framework exactly ca nt use", "d": "9/2015"}, {"body": "reopen data provided", "d": "9/2015"}, {"body": "vsavkin mhevery could agree best solution implement", "d": "9/2015"}, {"body": "first thought static vsavkin examples issue fixed proposal correct one", "d": "9/2015"}, {"body": "cmsdesigner rather issue repository please file issue thanks", "d": "9/2015"}, {"body": "pascalprecht nope issue starter repo rather browsers support", "d": "9/2015"}, {"body": "although afraid hardly actionable current form mlaval tons work various browsers support issue resolved part work", "d": "9/2015"}, {"body": "tank much reply hop solved soon good luck mail original de pawel kozlowski notifications githubcom \u00e0 angularangular angular noreplygithubcom cc mjhdesigner mjhdesigner lapostenet envoy\u00e9 lundi septembre objet angular problem ie edge v although afraid hardly actionable current form mlaval tons work various browsers support issue resolved part work reply email directly view github", "d": "9/2015"}, {"body": "note non trivial transformer also read dependencies calculate correct order", "d": "9/2015"}, {"body": "also right transformer type resolver copies imports original source code", "d": "9/2015"}, {"body": "note needs done generate code change detectors already", "d": "9/2015"}, {"body": "exact problem created simple todo app adding todo console log bigger todo array view wo nt update using", "d": "9/2015"}, {"body": "two cents user issue although nt find solution per se found config generated jspm causing issue similar issue using promise directly suggested remove import use patched zonejs fixed problem case may difficult find going every loaded library might interfering somehow binding system saw config file would take ages find one interfering recommendation start bottom empty html file follow instructions angulario one step time control everything loaded loading necessary track issue super useful kind issues", "d": "9/2015"}, {"body": "hi thanks update code trying even importing use systemjs import reflectmetadata using traceur handle code browser config file mentioned nt think could anything interesting primarily made file mappings really loaded specified ts files think correct wrong systemjs load libraries runtime files posted example really simple change libraries external static source works take ngplay reference", "d": "9/2015"}, {"body": "might zonejs issue though would expect throw try steps note zonejs import", "d": "9/2015"}, {"body": "great even guide followed forgot include zonejs data binding works still weird message raised bug expected feature notify zonejs thanks lot", "d": "9/2015"}, {"body": "yes zonejs required got issue throw present", "d": "9/2015"}, {"body": "thanks", "d": "9/2015"}, {"body": "think use etc input radios well exactly implemented note angular nt need reimplement form input directive due zones see also checkbox input directive etc anything ran nt work", "d": "9/2015"}, {"body": "hmm ok let go back double check try make plunker issues using radio list created form builder probably mess know examples", "d": "9/2015"}, {"body": "reopen plunker", "d": "9/2015"}, {"body": "repository angular post angularjs related issues", "d": "9/2015"}, {"body": "known issue closing dup", "d": "9/2015"}, {"body": "repository angular post angularjs related issues", "d": "9/2015"}, {"body": "mgechev right top sounds like general support question asked using dedicated support channel", "d": "9/2015"}, {"body": "pr related issue", "d": "9/2015"}, {"body": "awesome thanks", "d": "9/2015"}, {"body": "great topic thanks raising say developer workflows based around cjs browserify webpack systemjs sure measured find developers interact little experience thus making guess leader pure guess believe goals module loader loads modules supports smart bundling bundles load user progresses app performs well ease use configuration evaluating include side side example options showing pros cons along ease use need proven guided path works readable understandable configuration handing someone sample config lines causes eyes glaze seen side black box let technique also problematic things go wrong user little insight makes difficult diagnose fix consistent choice guide docs super helpful webpack nice one solution lot moving parts much already learning high concept count new wave javascript performance seems ok folks like others find magical black box systemjs less moving parts webpack configuration get little confusing add jspm bundling great also lines config performance concerns size loader cjsbrowserify though many never used seems oldest group still snuff everything need see clear leader believe stick goals guiding force finally code work may seem obvious nt want make assumptions", "d": "9/2015"}, {"body": "vsavkin talking modules module loading tools angularconnect topic close hart planning discuss rkirov started gathering thoughts comments welcomed regarding issue hand agree mentioned pbs systemjs size reexport perf would love properly evaluate alternatives changing possibilities tradeoffs must say personally nt warm thoughts cjs put people format tooling workflows goes away webpack actually hear many negative voices claiming complex use large config files things hello world examples actually staying away webpack far since looking documentation seems like gazzilion options also hear many people use like anyway schedule meeting rkirov discuss topics context angularconnect talk would great guys could keep loop discussions", "d": "9/2015"}, {"body": "two separate proposals replacing bundling tool use repo changing gettingstarted angulario naturally extends picking recommended module loader think move forward first one purely based codesize since cjs bundle consumable every tool including systemjs would like see browserify comparison webpack go forward one two systemjsbuilder bitten us times due module sniffing regexps see would like try something else also definition bundles opaque objects switching different tool produce little cost second proposal lot contentious needs lot research think going support angular cli getting started guide using question becomes cli scaffold use", "d": "9/2015"}, {"body": "totally agree rkirov separate discussion format tools used produce bundles side vs recommend users would really careful recommending webpack point consisted cli efforts still remarks think move forward first one purely based codesize tradeoff got semantic modules would really love see short comparison formats dig items decide worthwhile systemjsbuilder bitten us times due module sniffing regexps true although using quite old version never took time update said trying sth else provided loaded consumed systemjs loader automatic recommendation users", "d": "9/2015"}, {"body": "johnpapa say developer workflows based around cjs browserify webpack systemjs sure measured find developers interact little experience probably right saying developers user bundlers early adopters innovators going play angular first probably use bundlers one survey webpack browserify jspm think significant downside switching cjs bundle systemjs workflow still works also enable workflows would try enable workflows evaluating include side side example options showing pros cons along ease use agree need careful evaluation consider easy use maturity community file size bundle number enabled workflows flexibility etc", "d": "9/2015"}, {"body": "tradeoff got semantic modules pkozlowskiopensource angular semantics need output internal importsexports already designed require cyclic dependency resolution since already supporting cjs", "d": "9/2015"}, {"body": "moving away bundling internal thing anyway users course need prebundled build nt much opinion since whatever mechanic use build irrelevant end user use global modern users quite used using browserifywebpacketc likely nt need handholding us building massive bundles consumed complicates things outputs global bundle built whatever makes fastest cjs source files bundled source files bundled make recommendations tutorials like nt think bundling modern environments scope long relative paths work users use whatever please", "d": "9/2015"}, {"body": "move closer beta continue distribute big systemregister bundle guybedford less explicitly stated bad idea users begin expect angular responsibility useful plunkers original stated use case big bundle something want going forward certainly recommend start using docs", "d": "9/2015"}, {"body": "internal importsexports already designed require cyclic dependency resolution since already supporting cjs jeffbcross oh right impression still got cyclic dependencies saying safe item would importing things outside item would like test moving cjs impact loader files bigger files include configuration play end", "d": "9/2015"}, {"body": "moving away bundling internal thing anyway robwormald could elaborate alternative proposal people bundling serving unpackaged magic sth else framework user would love use bundled framework version even writing ts bundling version pain neck downloading configuring tools etc imo much expect average user wants play framework top little value bundling things afaik nt tools could treeshake js ts modern users quite used using browserifywebpacketc likely nt need handholding us building massive bundles consumed complicates things sure mean modern users see discussion gitter issues opened many ui devs starting equipped knowledge time patience setup bundling end definitively nt block power users setup imo good easy story foe newcomers useful plunkers original stated use case big bundle something want going forward certainly recommend start using docs sure understand alternative proposing one people bundling people forced configure server use browsers support would big concern would consider setting bar high popular ui framework could used relative beginners", "d": "9/2015"}, {"body": "vsavkin rkirov played bit bundling using cjs instead systemregister using webpack generate minified bundle also see size difference favor cjs funny thing overhead seems coming paths usage systemregister format indeed paths go like even longer adds lot strings bundle strings ca nt minified renamed webpack using numerical module ids pretty useless importing individual modules make output much smaller seems like main tradeoff would victor pointed using cjs bundle important submodudles think advantage cause prevents users depending private api going play cjs bundle systemjs loader bit see nt generate issues yeh initial investigation looks like fundamental differences formats push us size vs submodule imports tradeoff", "d": "9/2015"}, {"body": "goes show need bundler removes internal traces import structure gives us single bundle seems like savings think would even higher would remove generated files", "d": "9/2015"}, {"body": "looked sorts static optimizations integrating systemjs builder default static bundles optimization soon certainly optimized builds preferable bundling bundling necessary specifically wanting populate loader registry level granularity module reuse different packages dynamic loading", "d": "9/2015"}, {"body": "guybedford brief look weeks back looked like early stage back would keen another look guybedford would mind reach got findings regarding systemregister vs cjs personally love goodies hit issues see discussion size overhead reexport perf impact probably fixed latest builder format update also hitting issues ts impl latest one introduce format still love flexibility correctness completeness systemregister format would keen sharing detailed feedback interested", "d": "9/2015"}, {"body": "pkozlowskiopensource sure happy discuss yes exactly mentioned robwormald systemregister distribution format rather static optimized module systemjs sfx builds becoming integrate optimizations like rollup separate raw es modules best provide users use environments", "d": "9/2015"}, {"body": "inline typescript helper functions take", "d": "9/2015"}, {"body": "todoubaba yes right discussion", "d": "9/2015"}, {"body": "may interested work actually testing angular angular input bundling ts compiler would always appreciated", "d": "9/2015"}, {"body": "ruwhan angular repository please submit issue close one thanks", "d": "9/2015"}, {"body": "agreed far nt getting traction getting injectable component support within framework want taken little well projects working ca nt really done static di binding like show example right gotten around creating dynamiccomponentloaderbased solution", "d": "9/2015"}, {"body": "dannymeister public example dynamiccomponentloader could peek meaning get workaround nt found time yet", "d": "9/2015"}, {"body": "sorry something support things worked angulardart created many issues namely possible analyze templates locally could get situations depending different directives active template something negatively impacts speed", "d": "9/2015"}, {"body": "mhevery solution would resolve created instance injector instead pull binding containing type injector way could pass though processed compilerbinddirective method way type binding side affect case could nt directive singleton", "d": "9/2015"}, {"body": "line surprising git checkout global git hooks aliases something try updating npm otherwise idk much might worth filing npm issue tracker", "d": "9/2015"}, {"body": "updated npm node still nt work close issue open one npm tracker", "d": "9/2015"}, {"body": "thanks", "d": "9/2015"}, {"body": "nonstring params yet supported see", "d": "9/2015"}, {"body": "components angular similar controllerview pair case provide controller component name making work similar angular component also aware modulecomponent api please throw light", "d": "9/2015"}, {"body": "helper api proposed long time ago right afaik consideration land angular", "d": "9/2015"}, {"body": "based discussion vsavkin seems privatehidden mhevery", "d": "9/2015"}, {"body": "sgtm also prefixed private dart well", "d": "9/2015"}, {"body": "considered solving problem using normal language internal mechanisms nt need special language feature eg class needs field exposed angular code could define separate interface used public api nt declare property export interface public api use class private api", "d": "9/2015"}, {"body": "future likely refactor code change require lot casting public api perimeter keen right fri sep pm martin probst notifications githubcom wrote considered solving problem using normal language internal mechanisms nt need special language feature eg class needs field exposed angular code could define separate interface used public api nt declare property export interface public api use class private api reply email directly view github", "d": "9/2015"}, {"body": "solution hint yoffset", "d": "9/2015"}, {"body": "fairly simple fix", "d": "9/2015"}, {"body": "print ngif true rather ngif gt sent pr fix null end error message gt duplicate even nt look like first sight root cause second elementbinders exception remains investigated", "d": "9/2015"}, {"body": "change occur", "d": "9/2015"}, {"body": "like tackle one", "d": "9/2015"}, {"body": "bkyarger lmk need help writingrunning unit tests", "d": "9/2015"}, {"body": "jeffbcross show example instantiate global object manually sure typescript test", "d": "9/2015"}, {"body": "bkyarger could instead instantiating global nt present test environments provide value request function nt really string tell typescript", "d": "9/2015"}, {"body": "awesome thanks", "d": "9/2015"}, {"body": "jeffbcross got change implemented test trouble getting entire suite complete launches firefox perf tests ff crashing think installing xpi perf tests eventually time osx ff date suggestions workarounds", "d": "9/2015"}, {"body": "bkyarger unit tests passing passes would go ahead open pr let travis run tests fails provides script run automatically clean formatting", "d": "9/2015"}, {"body": "yep passing pr way thanks", "d": "9/2015"}, {"body": "talgleichger component directive named", "d": "9/2015"}, {"body": "yes snippet service named ngtoast export default class home name string nghackathon right way write export default class home name string nghackathon error raised nt right context makes harder debug", "d": "9/2015"}, {"body": "js convention capital first letter classes service example renamed typescript class ngtoast injecting services need add decorator constructor toast msg string void consolelog msg component selector home bindings ngtoast ensure di aware service view directives formdirectives template export default class home name string nghackathon talgleichger problem might injecting services use decorator typescript import injectable injectable nothing ensures typescript emits correct param types class ngtoast constructor service toast msg string void consolelog msg", "d": "9/2015"}, {"body": "right talgleichger read full explanation verify issue", "d": "9/2015"}, {"body": "yes thank", "d": "9/2015"}, {"body": "viewinjector renamed viewbindings hostinjector renamed bindings appinjector removed favor bootstrap appinjector referring documentation angulario source code angulario website outdated still", "d": "9/2015"}, {"body": "issue error messages getting try improve possible", "d": "9/2015"}, {"body": "pkozlowskiopensource error message sounds fine due talgleichger using nt property configuration anymore basically binding means angular ca nt find provider talgleichger want explanation might want read basically configure visibility bindings injector tree", "d": "9/2015"}, {"body": "pascalprecht saying true crux solve pb rather provide error msg understood newbie like secs max message like unknown property decorator available properties", "d": "9/2015"}, {"body": "pkozlowskiopensource", "d": "9/2015"}, {"body": "typescript solve issue", "d": "9/2015"}, {"body": "two lines identical", "d": "9/2015"}, {"body": "note needs merged time runtime parts new compiler land", "d": "9/2015"}, {"body": "right tracked", "d": "9/2015"}, {"body": "angular repository please close one file issue thanks", "d": "9/2015"}, {"body": "apologies", "d": "9/2015"}, {"body": "martinsik currently properties used anywhere yet fact pending pr remove properties actually properly implemented", "d": "9/2015"}, {"body": "pascalprecht explains setting effect thing wait fetch spec properly defined properties reimplemented", "d": "9/2015"}, {"body": "yes afraid case maybe jeffbcross thoughts", "d": "9/2015"}, {"body": "actually using fetch though general want http implementation fetchlike interfaces course using observables promises finish rxnext porting see hopefully next couple days sort thing much easier work improve", "d": "9/2015"}, {"body": "marcesso wrong repo one guess meant open said sounds like general support question try support channel first github issues bug reports feature requests quick look code seem missing scopes works angularjs make sure go doc", "d": "9/2015"}, {"body": "sorry wrong repo read doc scopes nt found nothing ngif behaviour code broken add ngif think bug", "d": "9/2015"}, {"body": "code broken add ngif think bug bug ngif simply creating new scope consequences go linked doc google angular dot model ex", "d": "9/2015"}, {"body": "thanks answer nt see ngif documentation explained new scope created sorry many thanks help", "d": "9/2015"}, {"body": "using expected changes introduced commit present nope case see release arbitrary point commits till september", "d": "9/2015"}, {"body": "plunkr reproducing scenario seems one causes async redirect constructor see", "d": "9/2015"}, {"body": "pelallemant wrong repo one guess meant open said sounds like general support question try support channel first github issues bug reports feature requests", "d": "9/2015"}, {"body": "actually work see use get access value", "d": "9/2015"}, {"body": "ah see works indeed sort page come routeparams usecase like share url ie someone jump page directly browser address bar right router redirects user omitting query params leaving first id param workaround", "d": "9/2015"}, {"body": "sumigoma related known bug right", "d": "9/2015"}, {"body": "closing dup", "d": "9/2015"}, {"body": "problem using expression types works already", "d": "9/2015"}, {"body": "yes ca nt actually emulated older browsers implemented shim class might appropriate though caveat user", "d": "9/2015"}, {"body": "curiosity moving use switch ask contributor", "d": "9/2015"}, {"body": "used use traceur shims provided runtime rkirov switch guess satisfy curiosity", "d": "9/2015"}, {"body": "sorry pain mlaval nt aware browser runs hard keep track things outside whatever travis runs given claimed infeasible runtime shim wonder traceur make work compile time tricks talk ts folks replicating depending complexity option see remove symboliterate gracefully degrade older browsers ie iterable cscott used traceur transpilation aware pros cons vs noone else team opinions either picked one would love hear take note framework nt mandate use either shim shim need pick one examples unit tests", "d": "9/2015"}, {"body": "using traceur use corejs sep pm rado kirov notifications githubcom wrote sorry pain mlaval nt aware browser runs hard keep track things outside whatever travis runs given symboliterator claimed infeasible runtime shim wonder traceur make work compile time tricks talk ts folks replicating depending complexity option see remove symboliterate gracefully degrade older browsers ie query iterable cscott used traceurruntime traceur transpilation aware pros cons vs corejs noone else team opinions either picked one would love hear take note framework nt mandate use either shim shim need pick one examples unit tests reply email directly view github", "d": "9/2015"}, {"body": "elaborating slightly corejs originally written babel fits better complete runtime see example traceur might using corejs hood long goals deliberately modest implement compatible subset basically lowhanging fruit spec deliberately skipping bits require runtime support ca nt perfectly implemented runtime like symbol might good thing starting scratch ensures perfect browser compatibility hidden gotchas already got dependencies runtime like symbol might trouble worth take wanted scrub code help keep way want things work corejs get one nice feature corejs modularity easy use particular features without polluting global environment library code big win corejs also seems slightly faster might slightly complete test suite", "d": "9/2015"}, {"body": "choose use need help welcome interesting minimum use projects", "d": "9/2015"}, {"body": "think using wrong use really di qualifiers try constructor host skipself inject forwardref gt hello p", "d": "9/2015"}, {"body": "pascalprecht interesting nt think way use viewqueryquery made think would possible thanks pointing although think would nt bad idea specific add something inside anyway closing thanks", "d": "9/2015"}, {"body": "maybe using polyfill like one could enough tested", "d": "9/2015"}, {"body": "works intended even thought confusing binds event nt casing html assume binds event since convention use converting skewercase camelcase therefore correct", "d": "9/2015"}, {"body": "understand correct consistency think alias property similar event alias works outside way use property property aliases use hyphens works case events need alias camel case understood", "d": "9/2015"}, {"body": "hmm might regression recent compiler refactorings since remember used error saying property element definitively need integration tests corner cases", "d": "9/2015"}, {"body": "cc yjbanov", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "alexwolfe right owner", "d": "9/2015"}, {"body": "currently use thirdparty swiftype insite search gives us granular control search angulario known limitation push production review probably low priority fix right", "d": "9/2015"}, {"body": "works expected issue bootstrap returns promise outside angular zone result also execute outside zone plan remove promise return prevent kinds issues", "d": "9/2015"}, {"body": "remove warning normal behavior", "d": "9/2015"}, {"body": "expected behaviour dart one unnamed constructor", "d": "9/2015"}, {"body": "vsavkin since article could help please", "d": "9/2015"}, {"body": "definitively custom component using syntax simple example possible accessing host sure mean look linked plunker remember shortcut hope answers question going close issue let move discussion gitter need info", "d": "9/2015"}, {"body": "pkozlowskiopensource thank much answer posted saw examples presented could nt understand problem instanciation eventemitter oninit method sure components constructor methods resolve dependecies like thought oninit would trigger right constructor method evaluating passed dom properties anyway least working thank best regards tiago braga", "d": "9/2015"}, {"body": "yeh error message case initializing eventemitter properly nt ideal opened issue past improve", "d": "9/2015"}, {"body": "pkozlowskiopensource hi working exposed property ca nt hyphens event completely resolve", "d": "9/2015"}, {"body": "works said agree superconsistent could file separate issue", "d": "9/2015"}, {"body": "yes right away", "d": "9/2015"}, {"body": "strictly speaking question systemjs usage much angular problem systemjs ca nt find referenced files see errors console one way solving explicitly add extensions import paths refer need info", "d": "9/2015"}, {"body": "rkirov valid code could rewrite takes function nt think issue let class real bugs filed showing use cases", "d": "9/2015"}, {"body": "mhevery rkirov got use case actually let say got component updates internal state based happens children specifically say got component several children want observe list slides update carousel state example make sure current slide deleted one update navigation indicators display slides etc case changes carousel model done response slides collection change reflected ui nt know maybe better way solving usecases like one mlaval nt sure could alternative approach", "d": "9/2015"}, {"body": "btford shahata take look please", "d": "9/2015"}, {"body": "enormous wip pr refactoring angular router code incoming addresses", "d": "9/2015"}, {"body": "addressed", "d": "9/2015"}, {"body": "dup", "d": "9/2015"}, {"body": "hi angular repository please file issue angularangularjs close one thanks", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "missing bootstrap bottom appjs make changes see component hope helps", "d": "9/2015"}, {"body": "brandonroberts yes wrong guide still fails include think wants developers preview code ought make sure getting started guide works described", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "would close issue pr ready repo", "d": "9/2015"}, {"body": "quick start guide deprecated see", "d": "9/2015"}, {"body": "thanks notice", "d": "9/2015"}, {"body": "duplicate", "d": "9/2015"}, {"body": "agreed would nice angular told type inside also maybe future typescript transpiler add support checking use", "d": "9/2015"}, {"body": "mentioning going away favour via issue might remain tho", "d": "9/2015"}, {"body": "maybe pr", "d": "9/2015"}, {"body": "nt angular team keep running list changes versions seems like something", "d": "9/2015"}, {"body": "yep normally things part breaking changes changelog believe things missing breaking changes section please send pr update thnx", "d": "9/2015"}, {"body": "think makes lot clearer use", "d": "9/2015"}, {"body": "like help understand route like import heroescomponent heroescomponent import herodetailcomponent herodetailcomponent import dashboardcomponent dashboardcomponent export var routes dashboard path dashboard component dashboardcomponent heroes path heroes heroes component heroescomponent detail path detail id detail component herodetailcomponent export const approutes thisroutesdashboard thisroutesdetail thisroutesheroes redirecting sounds like redirecting name correct", "d": "9/2015"}, {"body": "yes even easier see", "d": "9/2015"}, {"body": "cool cuz ideally liked another name like go place using name makes possible using url makes harder", "d": "9/2015"}, {"body": "nt problem missing const coredirectives", "d": "9/2015"}, {"body": "edited changed original code reflect missing comma example", "d": "9/2015"}, {"body": "nt problem coredirectives nt constant expression error seems point direction", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "must changed thanks", "d": "9/2015"}, {"body": "close issue", "d": "9/2015"}, {"body": "process redoing docs closing", "d": "9/2015"}, {"body": "uploaded small messy project tested manually replaced angular routerjs files ones got ran git revision", "d": "9/2015"}, {"body": "thanks reproduction agree needs visibility incorrectly configured redirect think would good start making redirects easier understand instance able assert configtime example case misconfigured redirects nowhere nitpick nt think rejecting promise right choice api perspective rejections reserved error cases nonmatches", "d": "9/2015"}, {"body": "agree needs visibility incorrectly configured redirect think would good start making redirects easier understand instance able assert configtime example case misconfigured redirects nowhere already replied nitpick nt think rejecting promise right choice api perspective rejections reserved error cases nonmatches would expected result catch since would supress error messages initial page redirection checked promise returned anyway sure", "d": "9/2015"}, {"body": "johnpapa use dts file comes published bundle mprobst alexeagle either know definitelytyped behind control appears", "d": "9/2015"}, {"body": "hi btford let explain scenario use install typings everything change moving forward follow story first tsd looks file typescript looks file location root typescript project root everything used would exclude folders like nodemodules jspm etc also root often best place generally keep source code deeper least one folder like server code client code project angular code node express server may structure different setup want use typings node different ones angular client code also may want settings tsconfig different different targets whatever setup tsdjson allows target typings folders set tell tsdjson put typings enter bundles typings think fantastic however puts typings folder root ok typings root compile typescript ts sees root ts project tsconfigjson go levels see root typings folder problem happens even single folder like solution love see way typings angular brings installed configurable location", "d": "9/2015"}, {"body": "ah gotcha pretty painful igorminar something angular cli help us", "d": "9/2015"}, {"body": "sorry trouble following issue nt understand puts typings folder root npm install get right chatted typescript team looks like much usable story using typings shipped via npm starting ts maybe early week", "d": "9/2015"}, {"body": "oh working", "d": "9/2015"}, {"body": "alexeagle johnpapa alright close duplicate sounds like specific symptom problem", "d": "9/2015"}, {"body": "well issue title two files ought identical maybe issue got tangent investigate mon sep pm brian ford notifications githubcom wrote alexeagle johnpapa alright close duplicate sounds like specific symptom problem reply email directly view github", "d": "9/2015"}, {"body": "alexeagle put also gives file references files copy paste references file due folder structures different choice put would easier flexible", "d": "9/2015"}, {"body": "like keep linked least could use def typed would fine wouldnt still need non angular stuff think thats realistic scenario", "d": "9/2015"}, {"body": "verified identical npm package let separate issue files get laid npm johnpapa discussing slack", "d": "9/2015"}, {"body": "enum members renamed also see", "d": "9/2015"}, {"body": "ah missed change reviewing today updating apps thanks others may see condition import component view onchanges eventemitter import formdirectives component selector filtertext events changed properties text view template directives formdirectives export class filtertextcomponent implements onchanges onchanges changes consolelog changes code", "d": "9/2015"}, {"body": "todoubaba could please elaborate exactly missing getting npm definitively typed", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "also found definitively typed", "d": "9/2015"}, {"body": "removed use instead declared classes hoisted see depth information", "d": "9/2015"}, {"body": "event replacing appinjector bindings amp declaring class friendsservice displaycomponent working", "d": "9/2015"}, {"body": "try using inject friendsservice friendsservice friendsservice", "d": "9/2015"}, {"body": "updated displaycomponent constructor amp added inject import also still luck", "d": "9/2015"}, {"body": "hey first remove since nt used anymore second add systemconfig mine could different case note keep mind traceur replaced third would recommend upgrade typescript version guessing ps weird using typescript viewbindingsbindings never use services nt know many differences", "d": "9/2015"}, {"body": "seeing issue described using someone else really confirmed still works fine tried without forwardref linked blog ca nt get work", "d": "9/2015"}, {"body": "webteckie plunk want compare code", "d": "9/2015"}, {"body": "webteckie plunk code working", "d": "9/2015"}, {"body": "experiencing", "d": "9/2015"}, {"body": "configuration issue missing annotations error message telling closing working intended trouble getting project running please check gitter", "d": "9/2015"}, {"body": "fuzing think", "d": "9/2015"}, {"body": "great try let know cheers peter b sat sep pm ericmartinezr notifications githubcom wrote fuzing think bind appbasehref tovalue reply email directly view github", "d": "9/2015"}, {"body": "bind appbasehref tovalue ie without worked great thank", "d": "9/2015"}, {"body": "glad worked think use former use using add", "d": "9/2015"}, {"body": "greatly appreciate help nt expect response today extra thank sat sep pm ericmartinezr notifications githubcom wrote glad worked think use pathlocationstrategy former use using hashlocationstrategy add reply email directly view github", "d": "9/2015"}, {"body": "talking namespaced see code", "d": "9/2015"}, {"body": "looks like workaround since choice named angular project title ngchange become chnage global names space changed angular ng inconsistent would say", "d": "9/2015"}, {"body": "imo issue part whole upgrade story nt think anything specific enough actionable closing full upgrade coexistance story worked happy reopen got specific questions bug reports", "d": "9/2015"}, {"body": "yeh reproduce", "d": "9/2015"}, {"body": "ok regression introduced definitively missing test case pr way", "d": "9/2015"}, {"body": "chatting blesh brings really evaluate ifwhy need instead really best abstraction one resubscribed disposed", "d": "9/2015"}, {"body": "agreed reckon strive possible use observables subjects keep things naturally cold also means educating users appropriate way wrap things observables one place name eventemitter currently makes sense well emitting events components external consumption much elsewhere formbuilder http common cases user actually want manually emit defining specific type actual eventemitter use case something like nt love name using component events alternately could use actual eventemitter semantics emit leverage rx observablefromevent would closer vanilla javascript make interop things nicer", "d": "9/2015"}, {"body": "subjects also heavier use observables got additional function references underlying array observers etc", "d": "9/2015"}, {"body": "irl discussion recap every place inside core currently using instead use rename sure something nt confuse node something nt require understanding rx extra method called since used emitting events methods necessary provide clean api memoryefficient means specific use case emitting events custom components emitting values sync async default sync encourages good change detection behavior since likely throw error emitting change detection one problem sync dart look dart handles dom events streams see way synchronously emit", "d": "9/2015"}, {"body": "coming dart would probably call believe dart sure though typescript version implemented", "d": "9/2015"}, {"body": "jeffbcross expert think want make eventemitter sync default dart make like dart class eventemitter extends stream streamcontroller controller eventemitter sync true controller new streamcontrollerbroadcast sync true streamsubscription listen void ondata dynamic line void onerror error error void ondone bool cancelonerror return controllerstreamlisten ondata onerror onerror ondone ondone cancelonerror cancelonerror void add value controlleradd value void adderror error controlleradderror error void close controllerclose", "d": "9/2015"}, {"body": "need dart observable imo would lighter weight eventstream compatible reality eventstream looks like could subclassed observable", "d": "9/2015"}, {"body": "dynamiccomponentloader might api want use loaderloadasroot loadintolocation loadnexttolocation able assemble interface based whatever plunk somebody day similar idea", "d": "9/2015"}, {"body": "robwormald nt aware class like plunk created pretty elegant solution guess close thanks", "d": "9/2015"}, {"body": "informed changed ngrouter", "d": "9/2015"}, {"body": "cc wardbell", "d": "9/2015"}, {"body": "get binding error briefly console heroname binding fails hero yet back promise johnpapa talking binding template sth like use elvis operator sth like hope answers question going close one happy reopen discussion needed usecase different", "d": "9/2015"}, {"body": "yes helps casting empty object type solve even tho properties exist", "d": "9/2015"}, {"body": "johnpapa still sure exact binding error code template hard answer questions could share code triggers error error look discussion introduction elvis operator linked lengthy discussion issue different pros cons throwing accessing properties", "d": "9/2015"}, {"body": "yes discussion explains elvis operator html ngmodel since coming back asyncly tick thus could fail would help curious fixes", "d": "9/2015"}, {"body": "curious fixes hero hero well assuming template got sth like template line works since initialises field empty object instead null", "d": "9/2015"}, {"body": "yes happening guess seems odd thanks", "d": "9/2015"}, {"body": "yeh still fence comes whole elvis operator story guess need hear input opinions based everyday use framework", "d": "9/2015"}, {"body": "agreed see value kinda like explicit expression could null point also see times would put several times template choose hide ngif casting component solves guess yes closed thinking", "d": "9/2015"}, {"body": "read discussion frankly amazed elvis remains building syntax little adds friction case reaffirms important tell ng heroheroname null consistency equal obliged suffix elvis like nt believe legal template syntax know binding error omit miss trailing option", "d": "9/2015"}, {"body": "cc wardbell", "d": "9/2015"}, {"body": "closing repo angularjs repo however seems related", "d": "9/2015"}, {"body": "reproducible edge html generated", "d": "9/2015"}, {"body": "expected nodes get projected see", "d": "9/2015"}, {"body": "robianmcd decoration works nicely problem theory decorator work super stoked solution though would great able optin typescript compiler alwaysemitdecoratormetadata something", "d": "9/2015"}, {"body": "robwormald thanks info use annotation agree would nice typescript could support without need class decorator reopened typescript issue ask could support", "d": "9/2015"}, {"body": "robwormald java guice injecting classes guice annotation deprecated turned source bugs classes would less accidentally injected code eg classes gets mentioned constructor framework happily comes along instantiates class might get bunch things wrong particular object lifetime singleton per request class might designed injected resulting errors hard debug whether class constructed injection determined class code using think wai", "d": "9/2015"}, {"body": "mprobst two different things one saying injected saying inject angular need annotation typescript preserve type information use purpose yes suggest could typescript always generate type information would bloat amount code generated annotation compromise", "d": "9/2015"}, {"body": "mhevery going stick injectable want introduce yet another one specific use case either way needs documented di guide", "d": "9/2015"}, {"body": "also need clean packages eg", "d": "9/2015"}, {"body": "specifically happening travis happening run", "d": "9/2015"}, {"body": "shatakshidixit importing http module separately", "d": "9/2015"}, {"body": "yes", "d": "9/2015"}, {"body": "working fine see plnkr suggest share bit code help better", "d": "9/2015"}, {"body": "code perfectly fine working project complete http code given issue appts nothing related http except routing page please help", "d": "9/2015"}, {"body": "shatakshidixit tried use also guess using version right", "d": "9/2015"}, {"body": "version longer necessary typescript added working solution", "d": "9/2015"}, {"body": "plnkr updated version", "d": "9/2015"}, {"body": "tried removing inject constructor argument alpha ts still getting unhandled promise rejection error works constructor inject productservice productservice productservice nt constructor productservice productservice", "d": "9/2015"}, {"body": "ericmdantas thanks code perfectly working", "d": "9/2015"}, {"body": "yfain included file indexhtml", "d": "9/2015"}, {"body": "shatakshidixit problem smile close please", "d": "9/2015"}, {"body": "yes sure", "d": "9/2015"}, {"body": "sure able way use injector canactivate function simple example", "d": "9/2015"}, {"body": "created new object auth original instance know", "d": "9/2015"}, {"body": "yes plan handle case think hooks able augment instructions bindings passed component", "d": "9/2015"}, {"body": "btford thanks answer", "d": "9/2015"}, {"body": "currently use attribute see pattern applicable number inputs side note amp implicit attribute value need specified", "d": "9/2015"}, {"body": "mlynch fancy pr", "d": "9/2015"}, {"body": "demonstrated flaw logic", "d": "9/2015"}, {"body": "using hashlocationstrategy stacktrace original exception route generator location included parameters passed original stacktrace dynamicsegmentgenerate package pathrecognizergenerate package routerecognizergenerate package routeregistrygenerate package routergenerate package routerlinkrouteparams package", "d": "9/2015"}, {"body": "duplicate please track issue closing one favor", "d": "9/2015"}, {"body": "use native shadow dom also need use dedicated css selectors angular rewrite", "d": "9/2015"}, {"body": "least wrote output expected output difference attribute present tag", "d": "9/2015"}, {"body": "encapsulation support deep wed sep notifications githubcom wrote least wrote moreoptionsmenu iconbutton deep width important output moreoptionsmenu iconbutton width important expected output moreoptionsmenu iconbutton width important reply email directly view github", "d": "9/2015"}, {"body": "deep removed browser spec", "d": "9/2015"}, {"body": "replaced afaik sure stay browsers support currently chrome firefox ie nt know others", "d": "9/2015"}, {"body": "everyone interested rename chromium ticket css draft", "d": "9/2015"}, {"body": "zoechi know chrome ie nt guess nt know updated anyway firefox flag works work production", "d": "9/2015"}, {"body": "api use manipulate dom shadow dom know elementref class manipulate light dom let call way use get underlying dom element get root node shadow dom regarding shadow dom emulation still need support could give another example problems", "d": "9/2015"}, {"body": "tbosch guess nt since everyone tried solveexplain issues emulating shadow dom trying change css seems impossible closing issue thank", "d": "9/2015"}, {"body": "currently writing webdriver tests polymer application ca nt make work ie dom uses shadow dom ie webdriver nt support yet even though works js situation firefox days ago anymore since last update seems flag version switched back shortly afterwards", "d": "9/2015"}, {"body": "mrpardeep please provide plunk chance take look scenario", "d": "9/2015"}, {"body": "pascalprecht thanks quick response created plunker html ts filelink", "d": "9/2015"}, {"body": "pascalprecht waiting response", "d": "9/2015"}, {"body": "mrpardeep hey took look plunk unfortunately entirely broken template paths nt match etc could fix first otherwise hard follow understand actual problem", "d": "9/2015"}, {"body": "stale feel free reopen", "d": "9/2015"}, {"body": "found example provided sure referring", "d": "9/2015"}, {"body": "updated", "d": "9/2015"}, {"body": "lgtm", "d": "9/2015"}, {"body": "yo suppose make pullrequest", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "cc wardbell", "d": "9/2015"}, {"body": "seeing inconsistent behavior installing alpha sometimes see typings folder root references typings files folder times file get create think would ideal would create customizable location", "d": "9/2015"}, {"body": "might problem released breaking change patch run install turn links type definition files released another patch revert change might conflict local copy install project global copy tsd would cause inconsistent behavior update copies tsd latest install run remove angular typing see issue", "d": "9/2015"}, {"body": "closing since definitelytypedtsd issue", "d": "9/2015"}, {"body": "discussed irl yjbanov agreed made sense going start later afternoon hopefully getting move completed friday", "d": "9/2015"}, {"body": "jeffbcross think worker npm module depend redistribute sources semantically feels wraps makes sense think child currently way set dart package", "d": "9/2015"}, {"body": "jeffbcross reassigning nearly done branch checklist date need unchecked tasks", "d": "9/2015"}, {"body": "would awesome rx subjects twoway databinding", "d": "9/2015"}, {"body": "let rx things", "d": "9/2015"}, {"body": "see app details", "d": "9/2015"}, {"body": "johnpapa sort dup going amend original post better reflect original issue wildcard redirect work", "d": "9/2015"}, {"body": "adjustments look good thank brian", "d": "9/2015"}, {"body": "think want params componentspecific tested plunker appears work expected incorrect please comment reopen discussion thanks", "d": "9/2015"}, {"body": "thanks clarification", "d": "9/2015"}, {"body": "think related discussion", "d": "9/2015"}, {"body": "yes looked issue concern specifically adding one looked among open issues issue closed prior release although problem seems yet solved missing", "d": "9/2015"}, {"body": "think closed npm plugin written looks like might address better way", "d": "9/2015"}, {"body": "also check source code tcb think even super hard implement unfortunately bit packed right thanks opening", "d": "9/2015"}, {"body": "see action integrationspec", "d": "9/2015"}, {"body": "vicb nt help use setup general bindings tests soon component needs tested comes bindings control anymore look like wardbell correct need extend tcb support well otherwise ca nt setup mock bindings child injectors", "d": "9/2015"}, {"body": "wardbell fyi pending pr right", "d": "9/2015"}, {"body": "see", "d": "9/2015"}, {"body": "robwormald seems like goes hand hand working week assign", "d": "9/2015"}, {"body": "prolly better suited teaching however nt think supported really convenient write template expressions like also nt think give ppl option real additional value afaics", "d": "9/2015"}, {"body": "use angularformly templates handy library context though would nt recommend people much application code say", "d": "9/2015"}, {"body": "reading email wont get update though would recommend though would nt recommend pretty crucial three characters", "d": "9/2015"}, {"body": "cc wardbell", "d": "9/2015"}, {"body": "agree may even already filed issue", "d": "9/2015"}, {"body": "better yet already fix progress pr incoming", "d": "9/2015"}, {"body": "btford thanks thats great", "d": "9/2015"}, {"body": "think looking", "d": "9/2015"}, {"body": "yup sorry duplication maybe helps issue freighted discussion bit hard follow think see technical problem knowing component file actually lives without knowledge specifying url relative component possible hope someone figure", "d": "9/2015"}, {"body": "cc wardbell", "d": "9/2015"}, {"body": "problem due fact definition restrict constructor one argument replace definition problem sovled", "d": "9/2015"}, {"body": "realized interface generated build task master correct guess also simply wait next alpha release assuming definitions update follow time definitelytyped", "d": "9/2015"}, {"body": "duplicate", "d": "9/2015"}, {"body": "unfortunately possible inject depends parameter likes however investigate nt get expected amp clearer error message", "d": "9/2015"}, {"body": "huh passed write nonangular async methods time", "d": "9/2015"}, {"body": "seeing following boilerplate top tests something similar top tests throughout angular code base looking something injecttcb done tcb gt injecttcb helper tcboverridetemplate somecomponent template createasync somecomponent roottc rtc gt nuts closer let roottc roottestcomponent", "d": "9/2015"}, {"body": "actually right actually parameter however jasmine used used unit tests actually testlib construct sure ifhow support injecting", "d": "9/2015"}, {"body": "pita object fn exist dart never use fact first action test helpers", "d": "9/2015"}, {"body": "worst dedicated akin could trick ideally could combine testbinding set tcb initialization would happy work w person responsible testing come efficient api", "d": "9/2015"}, {"body": "exist able dependencies", "d": "9/2015"}, {"body": "needed inject hard fathom asked igor thing nt know exists either suspect dart artifact relevance js developer beside point really look code convinced relatively easy fix might moment try meanwhile roll helper creates like function pass test definition fn effect drys test recommend approach others stumble question", "d": "9/2015"}, {"body": "exists type injection otherwise refer function example injected could write would work point may well", "d": "9/2015"}, {"body": "first reaction using di supply value callback nt wrapper functions say first argument past callback function see injecting something well looks like works great sure objection would sake argument let suppose wanted use di inject let developer pick goes parameter list absolutely represent jasmine manner friendly test developer plunker demonstrates trick one must represent fn class know better whether actually exported revealed bet bury anyway actual function hand bind list testbindings already building available callable function wherever inject plunker injected component constructor get idea quite apart issue asks ca nt better yet function within", "d": "9/2015"}, {"body": "would ts compiler happy one reason class make dart compiler happy actually able implement interface looking forward pr", "d": "9/2015"}, {"body": "vicb tried vs code wrote expected complain reason nt would moved technique telling ts object instantiated class called pr afraid nt know testlib well enough know slide fix know scrambling deliver near term deadline ca nt expect anyone jump right expect keep issue open crisis passes revisit entire testsupport api thanks maintaining interest", "d": "9/2015"}, {"body": "duplicate mhevery probably closed", "d": "9/2015"}, {"body": "sorry duplication current definition type also implies interface assigned type applying bind interface also results compilation error typescript expected behaviour", "d": "9/2015"}, {"body": "closing dup", "d": "9/2015"}, {"body": "renamed issue nothing ngmodel crux issue ngclass empty strings", "d": "9/2015"}, {"body": "wardbell wonder fix first reaction trim strings representing class names simply ignore empty blank strings wdyt", "d": "9/2015"}, {"body": "trim ignore extra white space sure empty string ignored means additional class names would mind string variant ngclass api removed object notion clear perhaps easier construct", "d": "9/2015"}, {"body": "wardbell right pr trims class names regarding removal stringbased form nt use often comes handy need calculate class name dynamically nt know upfront supercommon happens btw particular use case easiest approach would go without directive use specialcased syntax compiler", "d": "9/2015"}, {"body": "yes used worth teaching perfect setting single class value great multiple class names set many ways skin cat ever enough ps problem calculating class name dynamically adding definition object object indexing quite cool composing string backtick interpolation serviceable", "d": "9/2015"}, {"body": "pascalprecht use selector able query shadow roots fairly easy implement hope implemented view encapsulation set else would use dcl add child components use native shadow dom", "d": "9/2015"}, {"body": "looking solution found use inject constructor guestion nt able resolve someone explain making wrong thanks", "d": "9/2015"}, {"body": "hey svrcekmichal leave information dev stack looks like experiencing issue pkozlowskiopensource repositories", "d": "9/2015"}, {"body": "pascalprecht mentioned using mgechev", "d": "9/2015"}, {"body": "seen behavior case using feature without importing although little specific case error message see plnkr comment example get message indicating defined gives idea going comment fail message message thrown every class used missing imports difference others injected constructor like issue although nt use add missing import", "d": "9/2015"}, {"body": "absolete", "d": "9/2015"}, {"body": "rolandjitsu file provide reproduction stack trace", "d": "9/2015"}, {"body": "jeffbcross see travis built spits strict mode error sure file one cdn one available npm distribution folder line complains ps version firefox", "d": "9/2015"}, {"body": "hmm problem rx probably commit changed assignment declaration think assignment okay strict mode ie", "d": "9/2015"}, {"body": "jeffbcross way fix fails tests", "d": "9/2015"}, {"body": "jeffbcross oh saw angular moved rxnext thus suppose issue persist anymore", "d": "9/2015"}, {"body": "moved hooks separate file doc purpose ie documented one place able link module directives inline doc moving core still allows", "d": "9/2015"}, {"body": "already worked like start contributing project", "d": "9/2015"}, {"body": "tyleranton please take", "d": "9/2015"}, {"body": "jeffbcross awesome", "d": "9/2015"}, {"body": "jeffbcross existing lifecycle folder go instead", "d": "9/2015"}, {"body": "tyleranton would move", "d": "9/2015"}, {"body": "jeffbcross cool got done last question reexport lifecyclehooks exports reexporting exports done like way specify exporting", "d": "9/2015"}, {"body": "mhevery igorminar talking changing bundle provide import path would still include core router http dependencies could imported documented export would remove ambiguity docs nt two messages import things would breaking change consumer could import anymore think makes things simpler falls inline discussions decoupling concerns bundles sources imports see issues change cc yjbanov rkirov", "d": "9/2015"}, {"body": "jeffbcross thought break still keep super bundle could still import looks like need chat", "d": "9/2015"}, {"body": "jeffbcross experimenting cjs bundles discussed yesterday one thing comes mind discussing splitting code move cjs want separate bundles core http etc guess need make sure bundles ex import public part core otherwise would end pulling code multiple bundles example looking see imports like would totally fine systemregister need think harder problems moving cjs sorry nt want hijack thread since talking splitting bundles gets exported need take account", "d": "9/2015"}, {"body": "mhevery still assumption operating igorminar reconsidering value added letting users import vs importing would still super bundle would nt reexport contents chat office", "d": "9/2015"}, {"body": "pkozlowskiopensource think correct modules require public apis http easy facades could removed given longer supports dart", "d": "9/2015"}, {"body": "think best use case bundle prototypes reproductions given nt think default recommended way use angular production nt think standardize docs examples import", "d": "9/2015"}, {"body": "jeffbcross agree sticking public api core would doable probably harder parts router animation though given nt think default recommended way use angular production nt think standardize docs examples import jeffbcross would recommended setup people bundling app framework things like webpack browserify systemjs serving nonbundled files thnx goodies sth else main concern easy get started explore", "d": "9/2015"}, {"body": "new yet released", "d": "9/2015"}, {"body": "thx help used correct still wondering use thouse multibindings directly injector thx best wishes manfred", "d": "9/2015"}, {"body": "multi binding also yet release ca nt use alpha", "d": "9/2015"}, {"body": "manfredsteyer also use case multi bindings able resolve problem withoutem", "d": "9/2015"}, {"body": "pascalprecht yes resolve problem without seems ngmodeldirective uses get validators injected everything one binds ngvalidator ngvalidators future injected validation ngmodel wondered works covers guess future releases injector method get several dependencies one token getall something", "d": "9/2015"}, {"body": "obsolete", "d": "9/2015"}, {"body": "prefered method without router", "d": "9/2015"}, {"body": "well thank works got one much working example could nt find examples hours testapproaches success hope help people thank", "d": "9/2015"}, {"body": "known issue vsavkin working already", "d": "9/2015"}, {"body": "likely dup", "d": "9/2015"}, {"body": "vsavkin closed", "d": "9/2015"}, {"body": "think actually try get away using bower simply stick npm best package manager bower could simply install github endpoint tho solve issue sep david gang notifications githubcom wrote feature request may connected one main workflows today maintaining dependencies parties bower bowerjson contains dependencies bower command line used download modules transitively afterwards use modules like mainbowerfiles create list files fetched application gulp snippet looks like gulpsrc bowerfiles pipe jsfilter pipe sourcemapsinit pipe concat vendorjs pipe sourcemapswrite pipe gulpdest lib afterwards vendorjs included indexhtml situation angular downloaded npm also bowerjson file missing main property would possible maintain bower workflow would mean packages uploaded bower bowerjson filled properly workflow envision reply email directly view github", "d": "9/2015"}, {"body": "hi pascalprecht installing bower endpoint would solve halve problem would need additionally modify bowerjson file would need add main property otherwise workflow mainbowerfiles mentioned would work could create pr way would want go go npm way would get list dependencies transitive dependencies would included browser find equivalent module tasks could integrated gulp thanks david", "d": "9/2015"}, {"body": "transitive dependencies would need declared packagejson well afaik bower nt know planned story bower latest status bower dead", "d": "9/2015"}, {"body": "agree reading looks like get away npm clear equivalent bower main property packagejson sure provide sooner later", "d": "9/2015"}, {"body": "hi manfred basically means assigning instance component local variable well elementcomponent one directive angular know instance want get reference property annotation allows export directive instance specific name case hope clarifies", "d": "9/2015"}, {"body": "hi pascal thanks quick reply great explanation wishes manfred", "d": "9/2015"}, {"body": "could implement onactivate interface used resolve data component navigation completes called canactivate component activated resolved using promise", "d": "9/2015"}, {"body": "brandonroberts bad idea concern necessarily couples component router think vs using constructor di would allow testreuse component independently router", "d": "9/2015"}, {"body": "planned feature another issue expended plan implementing", "d": "9/2015"}, {"body": "nt seem get error typescript nt convert expected would interest converting intnumber cases type equals number added complication handled means", "d": "9/2015"}, {"body": "would assume type number value exposed model would also numeric value dart throws error type mismatch converting variable type string fixes symptom string", "d": "9/2015"}, {"body": "include", "d": "9/2015"}, {"body": "closing issue assumption wrong based changes return value locationpath new version router thanks suggestion however still turns nt include coredirectives get access classactive still accessible default", "d": "9/2015"}, {"body": "looked functioncall events produced chrome compared chrome looks like chrome producing extra ones scriptname set probably results overreporting need find additional functioncalls save ignore since seem included functioncall events scriptname chrome chrome", "d": "9/2015"}, {"body": "michael could add logic count functioncalls nested inside others general fri sep pm michael goderbauer notifications githubcom wrote looked functioncall events produced chrome compared chrome looks like chrome producing extra ones scriptname set probably results overreporting need find additional functioncalls save ignore since seem included functioncall events scriptname chrome r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat devtoolstimeline dur name functioncall ph x pid tdur tid ts tts chrome r args data frame scriptid scriptline scriptname cat disabledbydefaultdevtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat disabledbydefaultdevtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat disabledbydefaultdevtoolstimeline dur name functioncall ph x pid tdur tid ts tts r args data frame scriptid scriptline scriptname cat disabledbydefaultdevtoolstimeline dur name functioncall ph x pid tdur tid ts tts reply email directly view github", "d": "9/2015"}, {"body": "discussed offline events nested also logic already exists", "d": "9/2015"}, {"body": "take look next week vsavkin nt beat", "d": "9/2015"}, {"body": "related", "d": "9/2015"}, {"body": "think line code worth hundred words decided implement fork working nicely implemented also dart using mirrors", "d": "9/2015"}, {"body": "currently refactoring step would happen focus next expect committed time", "d": "9/2015"}, {"body": "vsavkin register class annotations properties", "d": "9/2015"}, {"body": "feel ready sorry nt know either", "d": "9/2015"}, {"body": "agree see includes change", "d": "9/2015"}, {"body": "addressed", "d": "9/2015"}, {"body": "great", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "problem idea going since stack trace nothing related code", "d": "9/2015"}, {"body": "got issue first time used angular need change import rx systemjs config", "d": "9/2015"}, {"body": "unfortunately nt seems resolve issue allthough looks really similar", "d": "9/2015"}, {"body": "error message adding formdirectives component using version issue systemconfig solution also nt resolve issue", "d": "9/2015"}, {"body": "see maybe", "d": "9/2015"}, {"body": "probably still use older version systemjs ca nt get work moment changing systemjs version results angular kicking appjs loaded system nothing happens errors looks lot like", "d": "9/2015"}, {"body": "mentioned referenced bugs change html something like html test systemconfig defaultjsextensions true baseurl paths app appjs components lt em gt components lt em gt js services lt em gt services lt em gt js loading", "d": "9/2015"}, {"body": "alpha configuration directive priority implemented functions ie specify get called although implemented nt specify configuration directive structural type checking used lifecycle methods get called cd must case pr merged soon remove lifecycle configuration directive implemented hooks automatically get called", "d": "9/2015"}, {"body": "fyi working chapter application testing dev guide would serve guide developers writing tests explore features confirm bugs", "d": "9/2015"}, {"body": "also stumbled", "d": "9/2015"}, {"body": "ericmartinezr asked attach example since bit different error happens clicking page link", "d": "9/2015"}, {"body": "amazing writeup ericmartinezr take look tomorrow afternoon", "d": "9/2015"}, {"body": "probably related", "d": "9/2015"}, {"body": "solved closing duplicate", "d": "9/2015"}, {"body": "issue", "d": "9/2015"}, {"body": "seeing thing", "d": "9/2015"}, {"body": "noticed issue reported atom typescript plugin gulp task use compile project however nt complain", "d": "9/2015"}, {"body": "locally modified using alpha typescript interface type extends function new args", "d": "9/2015"}, {"body": "looks like fixed", "d": "9/2015"}, {"body": "similiar error without using router http application instead happens using forms creating controls seems rx wo nt loaded correctly sure update tried debug rxobject subject beeing called nt got function property called default property function subject definitly looks like loading problem", "d": "9/2015"}, {"body": "thelgevold issue maybe", "d": "9/2015"}, {"body": "zyzle yes looks like caused using outdated version systemjs updated samples use latest version working http router added components thanks help", "d": "9/2015"}, {"body": "suspect read type information ast take closer look get chance", "d": "9/2015"}, {"body": "sounds exactly like probably close one duplicate another", "d": "9/2015"}, {"body": "new compiler refactoring easy implement please wait", "d": "9/2015"}, {"body": "thanks spend time investigating next week meantime see still issue many fixes release may addressed problem ah nt notice angular bindings think work may fix spend time investigating next week thanks reproduction", "d": "9/2015"}, {"body": "tested new build work correctly thanks", "d": "9/2015"}, {"body": "get ahold nt working please open new issue includes reproduction showing expected vs actual behavior thanks", "d": "9/2015"}, {"body": "nt work page refresh part rootrouter constructor thanks closing", "d": "9/2015"}, {"body": "ah misunderstood yes see issue", "d": "9/2015"}, {"body": "yes set base href html", "d": "9/2015"}, {"body": "getting error also renamed routerinjectables gt routerbindings", "d": "9/2015"}, {"body": "yet nt seem work doubt might something missing tried even change location strategy vain", "d": "9/2015"}, {"body": "check anything helps stopped using base tag instead using bind appbasehref", "d": "9/2015"}, {"body": "nope still fix error something related rxjs typeerror rxsubject function might cause error", "d": "9/2015"}, {"body": "quick reminder change router injectables directives names routerbindings routerdirectives including party rxjs http module includes", "d": "9/2015"}, {"body": "including http module depending standard fetch http calls yes modified routerinjectables routerbindings need http module make router work standard rxjs use party library importedused", "d": "9/2015"}, {"body": "answers actually really like ng http module routerdirectives nt rxsubject function dig onto rxsubject undefined use rxsubject using callback function rxsubjectthen provide code use rxsubject hard way", "d": "9/2015"}, {"body": "avoiding ng http module nonstandard standard fetch api gives flexibility already integrated evergreen browsers ie extra download give try perform better defined standard future proof main reason team took http module core separate js yes modified routerdirectives routerdirectives rxsubject code typed line latest thissubject new rxsubject", "d": "9/2015"}, {"body": "debanjanbasu try instead", "d": "9/2015"}, {"body": "well giving another form error indexhtml file looks like inventman realtime smart inventory management prediction loading use strict systemimport jstscomponentsapp error encountered basically searching jspmio cdn local directory wondered error earlier", "d": "9/2015"}, {"body": "basically searching jspmio cdn local directory think related using outdated version systemjs", "d": "9/2015"}, {"body": "zyzle thanks router working", "d": "9/2015"}, {"body": "zyzle thanks ton finally guide explained use latest systemjs earlier angular versions could use mentioned changelog one breaking changes finally working", "d": "9/2015"}, {"body": "formdirectives part angular alpha gt please upgrade least version even better facing issues version router", "d": "9/2015"}, {"body": "formdirectives module need import future reference first thing check whenever see error like things import actually defined", "d": "9/2015"}, {"body": "available starting using upgrade latest release", "d": "9/2015"}, {"body": "thanks help incorrect version typings using version editor types importing fine nt actually available", "d": "9/2015"}, {"body": "duplicate", "d": "9/2015"}, {"body": "bit specific nt work mean url manager nt let access requesting files per ajax information needed", "d": "9/2015"}, {"body": "pascalprecht thanks respond humanstxt robotstxt accessible via domain name add humanstxt end domain name automatically redirect home url actually never access files note use removing url url manager", "d": "9/2015"}, {"body": "okay couple things sounds bit like angularjs uirouter code repository angular case would rather issue use push state api mode server needs configured always serve file spa served case soon use client responsible particular url need configure state requests data server better tell server always serve except requested serve course depends actually want content please verify really issue angular repo close issue thanks", "d": "9/2015"}, {"body": "pascalprecht yeah angular honest mistake", "d": "9/2015"}, {"body": "sure try ex latest release", "d": "9/2015"}, {"body": "thanks much might helpful put link angulario npm got smile", "d": "9/2015"}, {"body": "jeffbcross represent logical children toplevel module mean displaying default without user need open toplevel module first would agree would bit inconsistent nt sublevel modules right maybe rather something like categories meta modules created available toplevel module would module components underneath pretty much said enforcing toplevel modules without sublevel modules sublevel modules", "d": "9/2015"}, {"body": "think everything depends upon developer sees structure imports modules would see listed ide importing left nav reflect nt think developer know care groupings proposing make harder find something know less name never liked easter egg hunt angular looking ngclick oops wrong bucket keep looking oh right directives keen suggestion think would like modulelevel trampoline page lists members alphabetical grid compact representation long list left nav describing supplementary navigational aid", "d": "9/2015"}, {"body": "guess problem generally stated concern noise hundreds things exported exported used public apis though firstclass public apis return types parameters classes mostly constructed via di example", "d": "9/2015"}, {"body": "yes whole comment single sentence", "d": "9/2015"}, {"body": "maybe need marker small stuff exposed want see anything small stuff comment hidden default available checking show", "d": "9/2015"}, {"body": "search find anything large small", "d": "9/2015"}, {"body": "marker may useful guess ratio actual public apis types happen used public apis something low like", "d": "9/2015"}, {"body": "kind like idea structured comment humans dgeni quickly read understand classification categorization exported module member little tedious first bit inexpensive resource take first crack sweep maybe automate first sweep worth discussing internally", "d": "9/2015"}, {"body": "cc alexwolfe think already working redesigning side nav", "d": "9/2015"}, {"body": "petebacondarwin one requirement looking within module also want able reorder based type alphabetize currently export everything order appears api order like implemented module globals everything enum const interface class enums consts interfaces classes", "d": "9/2015"}, {"body": "hmm ok hearing export loads things particularly relevant reader api docs arbitrary grouping exports module actually hinder browsing docs would good navigation way hide notsoimportant exports exports sorted type globals enums interfaces classes etc alphabetically exported items still navigablesearchable certainly dgeni jsdoc tag exports says either primary secondary navigable item navigation could arranged different styling possibly dynamic show different navigable types quite sure want also note sorting items type order alphabetizing might fall foul number ward keen", "d": "9/2015"}, {"body": "also prevents creating forms compiler complains missing constructor", "d": "9/2015"}, {"body": "duplicate pr land today early next week", "d": "9/2015"}, {"body": "nt duplicate", "d": "9/2015"}, {"body": "pkozlowskiopensource kind closing", "d": "9/2015"}, {"body": "called wo nt solve issue tho", "d": "9/2015"}, {"body": "well throws error", "d": "9/2015"}, {"body": "issue moving alpha difference example given setup binding nt use breaking changes missing changelog maybe", "d": "9/2015"}, {"body": "zyzle maybe using base tag correct nt find anything changelog guess case", "d": "9/2015"}, {"body": "hmmn impression nt necessary ca nt seem find issue would make think edit adding nt actually fix problem", "d": "9/2015"}, {"body": "found issue least become making change fixed issue mention changelog see though cry", "d": "9/2015"}, {"body": "zyzle might part changes", "d": "9/2015"}, {"body": "ericmartinezr seems happened commit message breaking change nt seem hoovered changelog script", "d": "9/2015"}, {"body": "zyzle welp explains", "d": "9/2015"}, {"body": "zyzle worked nice spotted well expecting naming changes anyway works still need closing issue", "d": "9/2015"}, {"body": "mhevery probably duplicate", "d": "9/2015"}, {"body": "dup", "d": "9/2015"}, {"body": "cc tbosch adamdbradley", "d": "9/2015"}, {"body": "like note schema registry used inside compilation probably offline ie interceptors need parts runtime registered compilation registered", "d": "9/2015"}, {"body": "yes would allow us easily custom logic troublesome properties fix following issues", "d": "9/2015"}, {"body": "nt see conflict either use interfaces runtime check dev mode discover transformer generate lifecycle call sites let erase interfaces later sure would work ts erases information interfaces", "d": "9/2015"}, {"body": "today seems compiler calls directivebindingcreatefrombinding turn check interfaces implemented later point probably retrieved metadata generated transformer instead implemented need reflector information implemented interfaces least lc hooks ts js would use structural type check optional would documented best practice", "d": "9/2015"}, {"body": "vicb refactored somehow could drop really would like get breaking change asap", "d": "9/2015"}, {"body": "anything help move forward obviously big enough change nt go ahead implement way important bunch things time created ticket feel bit guilty anything idea basically talked implement essence routernavigateinstructionrouternavigate method update router among things planned abstract real point add canreuse function work fine components one places pushing history might nice would directives example tying earlier example might nice able write directive targeting attribute set element scroll location subscribe routing changes scroll based update url based current position first part definitive done though might bit hacky depending easy get parent component directive also side note might guessed bit new world angular open source development even programming junior cs major bit confused terminology mean debouncing url updates talking rate limiting updates", "d": "9/2015"}, {"body": "iapark appreciate offer think matsko igorminar need sit design work idea work happy help implementing feature debouncing yep see", "d": "9/2015"}, {"body": "harry none sense file lists calculate via glob distjscjsperfjs exclude js dart protractorjsconfjs tobias mon aug harry terkelsen notifications githubcom wrote canonical list benchmarks would also like know ones supported js js seems like way find go benchmark source file see benchmarks declares tbosch reply email directly view github", "d": "9/2015"}, {"body": "igorminar early input using internationalization apis short might best path move forward", "d": "9/2015"}, {"body": "thanks linking issue tue sep pawel kozlowski notifications githubcom wrote igorminar early input using internationalization apis short might best path move forward reply email directly view github", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "believe requirements satisfied", "d": "9/2015"}, {"body": "yes work", "d": "9/2015"}, {"body": "agreeing work", "d": "9/2015"}, {"body": "preferences look like one file per component want folders directives services imo engineered case", "d": "9/2015"}, {"body": "note need likely need improve build script account multiple files shahata also wanted migrate code typescript think splitting first best agree pragmatic", "d": "9/2015"}, {"body": "gotcha", "d": "9/2015"}, {"body": "currently bug http file get around temporarily hacked file project get angular team fixes source file", "d": "9/2015"}, {"body": "resloved", "d": "9/2015"}, {"body": "stale", "d": "9/2015"}, {"body": "resolved removed traceur", "d": "9/2015"}, {"body": "thanks help got issue fri aug pm pawel kozlowski notifications githubcom wrote probably put something directive list nt exist time due missing misspelled import ex import imnothere somewhere view directives imnothere hard say without context please try support forum types questions want keep github issues bug reports feature requests thnx reply email directly view github", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "think saw weekly meeting notes going stay added", "d": "9/2015"}, {"body": "tbosch comment", "d": "9/2015"}, {"body": "mmm losing something componentcomponenttype type want specific instance created router new one constructor dont know maybe need different approach", "d": "9/2015"}, {"body": "yjbanov nt closed", "d": "9/2015"}, {"body": "gkalpak yep", "d": "9/2015"}, {"body": "sounds like resloved closing", "d": "9/2015"}, {"body": "would like either see replace component view problem style eg mygrid component component valid html dom element width attribute ignored way set width angular dealt using replace attributes directives tag copied", "d": "9/2015"}, {"body": "replace deprecated angular probably architectural issues removing dom element originally linked directive guess even reintroducing previously deprecated features could problematic also thinking shadow root host element guess could even problem general think nt good idea begin totally clean dom structure structuring components well nt need ceolter modern html nt really invalid dom element think terms custom element specification issue related fact browser default unknown elements ca nt certain box properties give style fine", "d": "9/2015"}, {"body": "gionkunz right current thinking nt want reintroduce makes hard reason directives components matching host element cases presented far looks like always better approach host attributes properties closing happy revisit different cases arise", "d": "9/2015"}, {"body": "gionkunz pkozlowskiopensource excellent makes sense shall try many thanks", "d": "9/2015"}, {"body": "closing listeners renamed drops lifecycleevent enum", "d": "9/2015"}, {"body": "digging code realized symbol mean nt executed controller instantiated neither working case someone else gets issue problem would way defining lifecycle hooks right least function userlistcontroller thisonactivate function thiscandeactivate function return true thisondeactivate function userlistcontroller canactivate function return true hope helps thanks answer brian", "d": "9/2015"}, {"body": "seems like nice improvement think renaming query types also good idea add think endusers going find subtleties viewcontent space challenging really sure done point simplify since core concept", "d": "9/2015"}, {"body": "closing due", "d": "9/2015"}, {"body": "reassigning kegluneq ready begin implementation transformers front start using lookupmap class right away depending lookupmap package necessary features landed initial support treeshaking keys available full implementation support constkeys available next dev release", "d": "9/2015"}, {"body": "fyi released yesterday support available dev channel", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "sumigoma mhevery btford pascalprecht ajoslin tlancina compile similar compile template component best way loadnexttolocation probably loaderloadtemplate nt instance component ca nt pass variables nt regards angular would service would call templateurl would compile template scope options service function", "d": "9/2015"}, {"body": "danicomas yes using", "d": "9/2015"}, {"body": "mhevery saying use dynamiccomponentloader passing root elementref ca nt use without elementref exist something like get template create scope compile", "d": "9/2015"}, {"body": "also use case plunkr example provided use compiler suggested mhevery compile template injected runtime", "d": "9/2015"}, {"body": "mhevery news tbosch vicb", "d": "9/2015"}, {"body": "create components fly like load using", "d": "9/2015"}, {"body": "nice mhevery see using services possible via injection core saying correct way load via loaderloadnexttolocation dynamiccomponentloader method instead get template compile", "d": "9/2015"}, {"body": "chatted alxhub think solution part", "d": "9/2015"}, {"body": "closed igorminar", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "fixed already", "d": "9/2015"}, {"body": "igorminar look like made dt yet", "d": "9/2015"}, {"body": "believe stopped publishing dts files definitely typed favor distributing via npm alexeagle confirm wed sep pm roland groza notifications githubcom wrote igorminar look like made dt yet reply email directly view github", "d": "9/2015"}, {"body": "still publishing definitelytyped angular release tracking work make possible depend angular typings npm nt decided still publish definitelytyped well however nt see folder latest npm alpha either note nt done release couple weeks lot breaking changes resolve alpha running angular build see finally cut release file published definitelytyped least make decision publishing typings npm package exclusively", "d": "9/2015"}, {"body": "alexeagle thanks curious since issue closed could see typings anywhere yet looking forward next release though", "d": "9/2015"}, {"body": "currently way remove calls function compilation", "d": "9/2015"}, {"body": "status vicb mhevery", "d": "9/2015"}, {"body": "aside could implemented pure pipe would cause transform called input changed", "d": "9/2015"}, {"body": "nt want another want create component input text select adding first component form mhevery possible solution", "d": "9/2015"}, {"body": "yes another form unwanted danicomas mhevery got workaround", "d": "9/2015"}, {"body": "vsavkin comment could create without demarcate container way", "d": "9/2015"}, {"body": "reopen issue mhevery vsavkin nt", "d": "9/2015"}, {"body": "imho think looking inputtext controlpath uppercase directives showerror formdirectives class inputtext controlpath string value string constructor also mix templatedriven forms modeldriven forms totally fine elaborate case reached point also takes bit effort need explanation", "d": "9/2015"}, {"body": "consolelog nt return modified value", "d": "9/2015"}, {"body": "think modified value need propagated parent component somehow probably write something custom like ngmodel sure though trying think related posted sample code question danicomas could see also trying something like posted post think lot people would trying solve problem mhevery vsavkin pointers solve much appreciated", "d": "9/2015"}, {"body": "updated example easier see problem pushing data pulling data sets twoway data binding since trying set similar would using setting binding value property component parent", "d": "9/2015"}, {"body": "found solution case answer post helped", "d": "9/2015"}, {"body": "yes problem nt know child value parent component think work think mhevery", "d": "9/2015"}, {"body": "mmrath solution working well nt know add click onsubmit form", "d": "9/2015"}, {"body": "made small typo rather seeing two logs rather one", "d": "9/2015"}, {"body": "nice updated mmrath solution ngform ngcontrol detected mmrath solution working expected controlgroup form working click submit button form invalid", "d": "9/2015"}, {"body": "wonder time use attributes like attribute inside throws error ca nt bind since nt known property element matching directives corresponding property", "d": "9/2015"}, {"body": "martinsik never binding attributes always properties write since element using property short always binding properties given dom element must property point changing property nt exist supported", "d": "9/2015"}, {"body": "martinsik fyi explained", "d": "9/2015"}, {"body": "chatting tbosch ideas", "d": "9/2015"}, {"body": "btford say able get angular new router", "d": "9/2015"}, {"body": "btford easy setting plunks prebuild artifact available online somewhere", "d": "9/2015"}, {"body": "sanderelias plunk example prebuilt artifact want use", "d": "9/2015"}, {"body": "would go specifying need change detection working simple view locals handy html width earlier versions using hack trigger change detection based events ca nt anymore unless would like update directive model sometimes might nt want working simple view locals best practice missing cheers", "d": "9/2015"}, {"body": "gionkunz using point accessing dom properties interested input value", "d": "9/2015"}, {"body": "pkozlowskiopensource actually debatable feature hacky actually really liked specify events element causes change detection explicit also flexible also whats maybe still nt listed example", "d": "9/2015"}, {"body": "right definitively update examples", "d": "9/2015"}, {"body": "sure understood question guess easier way redirect would router similar routerlink works way possible otherwise class route components best regards tiago braga", "d": "9/2015"}, {"body": "quick update issue fixed issues opened general fix redirects going close addressed feel free open new issues cases describe still work thanks", "d": "9/2015"}, {"body": "btford thank", "d": "9/2015"}, {"body": "antonmoiseev issue found point", "d": "9/2015"}, {"body": "antonmoiseev fixes problem", "d": "9/2015"}, {"body": "updates", "d": "9/2015"}, {"body": "temporarily added modified version sample project find", "d": "9/2015"}, {"body": "confirmed issue resolved", "d": "9/2015"}, {"body": "ups sorry", "d": "9/2015"}, {"body": "mhevery moving default pipes outside core assume keep inside core bound empty list compiler relies binding flatten view pipes default pipes user wanted use default pipes would override binding like", "d": "9/2015"}, {"body": "jeffbcross pipes directives set way since directives part core think pipes well", "d": "9/2015"}, {"body": "recapping vc mhevery moving forms core adding default bindings root injector keeping pipes core keeping pipes bindings root injector keeping directives core bundle bundle include core router concatenated include http router bindings default bundles plus testing bundles", "d": "9/2015"}, {"body": "closing major work landed several followup issues filed urgent docs typings make typings match bundles urgent refactor reorganize testing bundle import urgent refactor include http router chore move srccompiler srccorecompiler discuss remove refactor move refactor deprecate import dart", "d": "9/2015"}, {"body": "petebacondarwin could work one us hoping easy", "d": "9/2015"}, {"body": "look today", "d": "9/2015"}, {"body": "fix merged using ran similar issue sure exactly nt know open new issue use one", "d": "9/2015"}, {"body": "merged expect restart working coming weeks pending bootstrap refactoring happened", "d": "9/2015"}, {"body": "rkirov fixed last week using instead", "d": "9/2015"}, {"body": "pascalprecht mhevery nt think perf influence usage unless talking confirmed hot path good thing point constructs improve readability avoid stupid hoisting errors simplify treatment interests dominate similar sweeping perf arguments made captures know captures wonderful rare occasion nt hot path imo caveat sufficient reason prohibit discourage captures everywhere", "d": "9/2015"}, {"body": "wardbell agree still like know perf penalty transpile code also used natively", "d": "9/2015"}, {"body": "oh yes much penalty many loops difference hits knowledge good", "d": "9/2015"}, {"body": "afaik pretty welloptimized typescript nt need discouraged application developers regarding fat arrow ca nt remember details seen significant negative results macro benchmarks using think typescript compiler good choosing optimal fat arrow transpilation approach based context example put block typescript playground transpiles seems pretty safe docs nt think need worry using let fat arrow angular especially hotter parts like compiler di change detection important optimize pascalprecht pr changing di tests concern lots optimizations core would nt recommended best practices users like take look file", "d": "9/2015"}, {"body": "jeffbcross thanks clarifying comment assume perf penalty transpiling", "d": "9/2015"}, {"body": "still sure perf penatly expensive geniously curious", "d": "9/2015"}, {"body": "gkalpak sorry saying expensive sure cases fat arrow nt transpiled efficient code ie may transpiled", "d": "9/2015"}, {"body": "jeffbcross see thx clarifying never seen transpiled usually nt look transpiled code complex scripts definitely something keep eye hot paths", "d": "9/2015"}, {"body": "sorry still miss components services etc registration without polluting global scope reading times pascalprecht igorminar comments nt get yet solution following tiny working example appjs function var hellocomponent far ok would like example refactored way helloservicejs function function helloservice helloserviceprototypegreeting function return hello appjs function var hellocomponent seems understand port suggestion true mystery following snippet would way helloservicejs function angular module foo factory helloservice helloservice appjs function angular module foo controller mycontroller mycontroller seems missing mechanism di register get instances components played injector injectable api without success thanks lot hint update digging bit resolved usual global export approach programmer handle global appmodulejs var mymodule appservicejs function module function hellos hellosprototypegreeting function return hello mymodule appjs function module var hellocomponent hellos modulehellos mymodule", "d": "9/2015"}, {"body": "also able reproduce error explicitly state undefined still got message pkozlowskiopensource mentioned", "d": "9/2015"}, {"body": "obsolete", "d": "9/2015"}, {"body": "change query algorithm restriction relevant number queries given element used within subtree query since much less strict closing issue", "d": "9/2015"}, {"body": "fix", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "take one far see soon eventemitter removed dependency http blocking issues", "d": "9/2015"}, {"body": "mgechev yep coordinate robwormald prevent stepping toes since lot inside", "d": "9/2015"}, {"body": "selfassign consider mgechev actual assignee", "d": "9/2015"}, {"body": "less completed anyway whilst refactoring observable stuff couple bits mockbackend remove go isfunction whatnot kind things", "d": "9/2015"}, {"body": "case want task commit pr removing remaining facade stuff robwormald", "d": "9/2015"}, {"body": "ok love help next phase refax eventemitter facade think http control q handy things like isfunction facade useful pulled well sep jeff cross notifications githubcom wrote case want task commit pr removing remaining facade stuff robwormald reply email directly view github", "d": "9/2015"}, {"body": "robwormald think mhevery one ask facade recent convo think opinion utilities like pulled facade facade treated common abstractions platform apis subtle differences js dart", "d": "9/2015"}, {"body": "petebacondarwin look complicating api doc authoring work", "d": "9/2015"}, {"body": "naomiblack amp btford fix care take look", "d": "9/2015"}, {"body": "matsko looking", "d": "9/2015"}, {"body": "duplicate", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "would work minification would break", "d": "9/2015"}, {"body": "ah good point introduces minification problems angular closing unless igorminar way avoid minification problem", "d": "9/2015"}, {"body": "note abandoned weekly manual sync process nt figure good solution rebasing repo", "d": "9/2015"}, {"body": "pkozlowskiopensource updated pr feedback couple lines thoughts", "d": "9/2015"}, {"body": "landing rootinjectors array need mutated reflect injectors coming view containers", "d": "9/2015"}, {"body": "made progress broccoli build toolchain bootstrapping running next blocker run", "d": "9/2015"}, {"body": "fixed gulp buildjs gulp docs handing vsavkin continue fixing introduced errors angular current wip", "d": "9/2015"}, {"body": "remove duplicate looks like fixed different release would accept pull request", "d": "9/2015"}, {"body": "would needed reopen reading di code nothing environment specific would incredibly useful use nodejs project", "d": "9/2015"}, {"body": "davidsouther totally use module even without using angular however requires install whole framework might want would also like hear jeffbcross thoughts", "d": "9/2015"}, {"body": "agreed making standalone published module especially since dijs dying slow death", "d": "9/2015"}, {"body": "trouble getting working typescript node projects likely blocked microsofttypescript", "d": "9/2015"}, {"body": "seems like slowly moving away angular going framework decoupled libraries position safe say officially longer goal", "d": "9/2015"}, {"body": "nateabele good question primary goal moment focus creating good integrated experience framework definitely minds start thinking value decouple parts framework di obvious bit though di moved module vsavkin planning add npm release process soon sure going published existing di package npm new one though", "d": "9/2015"}, {"body": "jeffbcross sounds great thanks update", "d": "9/2015"}, {"body": "category names chrome changed identified changes far removed instead use working pr incorporate change benchpress", "d": "9/2015"}, {"body": "michael could try ping chrome team whether could actively tell us change protocol maybe mailing list already tue sep pm michael goderbauer notifications githubcom wrote category names chrome changed identified changes far disabledbydefaultdevtoolstimeline gcevent removed instead use devtoolstimeline minorgc devtoolstimeline majorgc minorgc devtoolstimeline minorgc majorgc devtoolstimeline majorgc disabledbydefaultdevtoolstimeline functioncall devtoolstimeline functioncall disabledbydefaultdevtoolstimeline layout devtoolstimeline layout disabledbydefaultdevtoolstimeline updatelayertree devtoolstimeline updatelayertree disabledbydefaultdevtoolstimeline paint devtoolstimeline paint disabledbydefaultdevtoolstimeline recalculatestyle blink devtoolstimeline updatelayouttree working pr incorporate change benchpress reply email directly view github", "d": "9/2015"}, {"body": "answer chrome team announce changes events regarding public interface yet however could contribute layout test checks events expect something along lines add ourself watch list test expectations see opening separate issue", "d": "9/2015"}, {"body": "vsavkin closed", "d": "9/2015"}, {"body": "tbosch syntax example rather right plunker working code anyone else playing around", "d": "9/2015"}, {"body": "kara yes correct", "d": "9/2015"}, {"body": "closed", "d": "9/2015"}, {"body": "think multiple checks see tests passes ongoing prs think already one yep need run another ci check", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "jeffbcross still experiencing issues systemjs consumes lot cpu", "d": "9/2015"}, {"body": "yjbanov jeffbcross always happy help perf feel free copy specific cases share", "d": "9/2015"}, {"body": "thanks guybedford include profile information today looks like performance degraded added layer indirection imports typescript coreexportsjs export srccoreservices srccoreservicesjs export foo servicesfoo export bar servicesbar", "d": "9/2015"}, {"body": "collected profile example app branch fetches data http renders page", "d": "9/2015"}, {"body": "jeffbcross thanks patience look profile seems like may bulk export issue described spending time declaration phase lots objectkeys calls exactly export uses declarations tell repo link running systemjs traceur build clarify exactly version traceur using thing check would transpiled source correct bulk exports format performance fix otherwise share instructions run folder check transpiled source would great help", "d": "9/2015"}, {"body": "guybedford thanks taking look actually close removing traceur build process think rkirov working details also rkirov recently updated output use cjs instead system format typescript compiler issues revisit system format make sure getting bulk export format either directly ts compiler build step", "d": "9/2015"}, {"body": "sure problem", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "awesome work vsavkin", "d": "9/2015"}, {"body": "include dts file got error find module typing tsc p src w following step step guide also trying run command liveserver open src root get error enoent file directory uvchdir suggestions might wrong", "d": "9/2015"}, {"body": "getting error sledan error file found", "d": "9/2015"}, {"body": "sledan jidesakin check post", "d": "9/2015"}, {"body": "dunken thanks editor vs code appts file line import component view bootstrap part still underlined red says find module even commands suggested also command root folder liveserver open src still get error enoent file directory uvchdir browser dont open know", "d": "9/2015"}, {"body": "sledan jidesakin dunken solve module errors run command chance tsd install rx rxlite save getting server running liveserver command yet figured one", "d": "9/2015"}, {"body": "dunken try including equals sign worked", "d": "9/2015"}, {"body": "okay guess simply feature still planned", "d": "9/2015"}, {"body": "yes need better support typescript standards", "d": "9/2015"}, {"body": "already fixed", "d": "9/2015"}, {"body": "referencing issue would helpful put typings custom location", "d": "9/2015"}, {"body": "agree johnpapa need fix tsd problem happy typings folder root project let see breaks mkdir tmp cd tmp npm install place need worry versioning tsd init tsd link cat typingstsddts far seems working okay trouble grep typescript reference relative typescript nt yet support multiple include paths breaks files present path could distribute copy two dependencies npm distro long licenses permit would clean also nt get version skew dt tends gloss otherwise would need change behavior repair references use symlinks problematic windows users", "d": "9/2015"}, {"body": "typescript includes module resolution feature mirrors node changed angular depends typings proof concept next step update angular packagejson documentationexamples users", "d": "9/2015"}, {"body": "problem routes dinamycal whith angular sou hard", "d": "9/2015"}, {"body": "closed", "d": "9/2015"}, {"body": "fyi issue referenced stackoverflow", "d": "9/2015"}, {"body": "use case similar want redirect login page canactivate returns", "d": "9/2015"}, {"body": "btford time resolve issue", "d": "9/2015"}, {"body": "tamascsaba maybe early next week update issue make progress", "d": "9/2015"}, {"body": "feature worked otherwise would like go would need pointers regards whether design decisions vs forms work angular made thanks cc caitp naomiblack igorminar", "d": "9/2015"}, {"body": "vsavkin mhevery take one thanks", "d": "9/2015"}, {"body": "yanivefraim would love contribution", "d": "9/2015"}, {"body": "cool thanks", "d": "9/2015"}, {"body": "yanivefraim started work yesterday saw comment today see work far basically implementation validatorsminlength validatorsmaxlength unit tests passing imho next step would add directive support see unit tests exercise formsdirectivesspects formsformbuilderspects amp formsintegrationspects", "d": "9/2015"}, {"body": "rafacm thanks much similar work minlength unit testing", "d": "9/2015"}, {"body": "mhevery change public api adding following validators minlength validators maxlength validators min validators max validators pattern need approval mentioned inside", "d": "9/2015"}, {"body": "vsavkin nt think names attached api one many kinds validations could thoughts handle", "d": "9/2015"}, {"body": "still seeing alpha route reloads correctly params ignored", "d": "9/2015"}, {"body": "since exposed public api may create confusion users pass strings methods using object literals using jeffbcross added support passing http method names strings think looks okay ready pr", "d": "9/2015"}, {"body": "mgechev left couple comments commit yeah looks good please pr assign show someone working github issues assigned commit access", "d": "9/2015"}, {"body": "since request exposed public api may create confusion users pass strings requestmethods http methods using object literals requestmethods using request agree please also add actually useful public api especially tests", "d": "9/2015"}, {"body": "took another look accepts however inside constructor already normalize method name means following valid however case constructor function used wo nt work added one extra call inside constructor pr", "d": "9/2015"}, {"body": "mgechev eventually accept interface scope pr think removed making work dart time ago", "d": "9/2015"}, {"body": "jeffbcross updated pr declaring argument constructor type scope pr open another one", "d": "9/2015"}, {"body": "rkirov finished last week", "d": "9/2015"}, {"body": "jeffbcross fyi one might affect number", "d": "9/2015"}, {"body": "case want know requirement use constructors think close", "d": "9/2015"}, {"body": "injectable actually good marker decorator think clearly conveys idea annotated class injected need", "d": "9/2015"}, {"body": "sorta honest good marker dsebastien says means want write party library work angular actually import angular get annotation kind bummer still reasonably certain decorator irrelevant needs decorator force typescript emit appropriate param decoration stuff happens something annotation appears", "d": "9/2015"}, {"body": "information jessegood suggested see using typescript nt need use http constructors works components still need services", "d": "9/2015"}, {"body": "great upgraded typescript confirm inject needed upgraded code deployed ericmartinezr thanks tip however still grab http typings file separately nt file added definitelytyped", "d": "9/2015"}, {"body": "thelgevold typings already added see", "d": "9/2015"}, {"body": "ah must missed", "d": "9/2015"}, {"body": "everyones interest everything related issue written think closed", "d": "9/2015"}, {"body": "thanks linking article pascalprecht hope find good way remove need", "d": "9/2015"}, {"body": "petersvintsitskyi look plunker render template dynamically using dynamiccomponentloader js thislaoderloadintolocation tocomponent template directives thiselementref container function tocomponent template directives component selector fakecomponent view template directives class fakecomponent return fakecomponent mhevery could resolve doubts correct use dynamiccomponentloader dirty dirty hack must never used", "d": "9/2015"}, {"body": "yes using similar approach without dynamiccomponentloader looks like compiled templates cached somewhere per class came even hacky solution typescript faking class declaration creating new instance time need var component new function var annotations new component selector foo new view template text directives worddirective", "d": "9/2015"}, {"body": "yes issue needed queries use dom distance determine direct children currently stop gap use injector distance ie direct child means flip using following example break", "d": "9/2015"}, {"body": "since looked http angular digging angular source code poc blog impression follows variation pattern pattern still part vision initial stab simplistic expose concepts like error handling chaining parallel requests surely plan clear look syntactically maybe even conceptually find current q based solution attractive comes chaining error handling parallel requests using qall etc another big advantage aligns well promise standard know developers know rxjs predates angular worried widely used promise model might seen angular odd man approach given huge pivot angular general think one allowed expect compelling argument favor change making changes things might even broken saying argument ca nt produced time interested hearing angular decided move away q suspect cool features built rx since decided go direction however think important forget use case http calls likely hitting api request simple json data point trade forcing everyone reeducate gain access features might already solved well current simple well known approach said change want learn reasoning behind", "d": "9/2015"}, {"body": "hey torgeir thanks input write depth response later look plunk might answer initial questions sep pm torgeir helgevold notifications githubcom wrote since looked http angular digging angular source code poc blog impression follows variation pattern pattern still part vision initial stab simplistic expose concepts like error handling chaining parallel requests surely plan clear look syntactically maybe even conceptually find current q based solution attractive comes chaining error handling parallel requests using qall etc another big advantage aligns well promise standard know developers know rxjs predates angular worried widely used promise model might seen angular odd man approach given huge pivot angular general think one allowed expect compelling argument favor change making changes things might even broken saying argument ca nt produced time interested hearing angular decided move away q suspect cool features built rx since decided go direction however think important forget use case http calls likely hitting api request simple json data point trade forcing everyone reeducate gain access features might already solved well current simple well known approach said change want learn reasoning behind reply email directly view github", "d": "9/2015"}, {"body": "thanks robwormald definitely take look plunk", "d": "9/2015"}, {"body": "glad see approach use di instead global changes make approach work libraries need encourage require http dependency need http work might worthwhile looking sort thing http returns raw response couple helper methods success error purely return response data vs whole response please nt make mistake handy thing breaks api signature gives wrong expectation example first version component return directly result client code written successerror later versions component find need return usual promise without successerror functions choices breaking change implementation successerror promise clients please follow observables api without additions", "d": "9/2015"}, {"body": "agree eoz introduce sth like also deprecated angular reasons eoz mentioned", "d": "9/2015"}, {"body": "difference successerror idea observable operator adding operators completely acceptable observable land rxnext specific api extending vs terminator gt resstatuscode gt map res gt resjson subscribe onsuccess note calling subscribe cases equiv take point tho thanks input keep coming", "d": "9/2015"}, {"body": "closing things seem order", "d": "9/2015"}, {"body": "gets merged would easy check space provided selector check", "d": "9/2015"}, {"body": "hi like work task started initial work branch moment would good get feedback thanks", "d": "9/2015"}, {"body": "rixrix lgtm could send pr", "d": "9/2015"}, {"body": "pascalprecht thanks looking pr sent", "d": "9/2015"}, {"body": "still refers outdated syntax", "d": "9/2015"}, {"body": "blnero docs rewritten hold horses", "d": "9/2015"}, {"body": "fyi limitto replaced slice finished see details", "d": "9/2015"}, {"body": "removed removed nt make one left list", "d": "9/2015"}, {"body": "looks like pipes created part", "d": "9/2015"}, {"body": "filters disappointed seriously avoid ngwat filter named filter", "d": "9/2015"}, {"body": "problems filter orderby types nt remember details probably dart imo least js ts work chrome due use internationalization api need work usable practice", "d": "9/2015"}, {"body": "mhevery also consider following use case actually run multiple times working say written component fires bunch custom events another developer likes component wants extend component wrapping lightweight component adding custom behaviors issue lightweight component manually export events inner component creating event emitter one wiring event emitter event subcomponent", "d": "9/2015"}, {"body": "think extra argument would result namespace clashes eg two subcomponents want bubble event name try catch event parent component could get two events different type bad enough currently native events like already reserved names events obvious happens accidentally use one names custom event think separate syntax entirely custom events digress", "d": "9/2015"}, {"body": "sekibomazic mhevery must say using lot angular still nt needed maybe necessary think bduffany first moment used native events understanding better angular works finally changed things think nt need feature anymore", "d": "9/2015"}, {"body": "apparently still working see plnkr", "d": "9/2015"}, {"body": "componentdirective events bubble right nt see strong enough use case could someone provide one ps better solved injecting services rather using events", "d": "9/2015"}, {"body": "mhevery opinion pretty much sekibomazic thinking bubble like event agree bduffany reusable components could hook custom events maybe really nt designed work like use services instead", "d": "9/2015"}, {"body": "also see list related issues", "d": "9/2015"}, {"body": "workaround", "d": "9/2015"}, {"body": "use elementref", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "woot", "d": "9/2015"}, {"body": "dose work update alpha alpha graves error set property lastinbinding undefined", "d": "9/2015"}, {"body": "believe issue reported", "d": "9/2015"}, {"body": "issue alpah", "d": "9/2015"}, {"body": "azasypkin could please share patched reflectioncapabilities patched application source angular", "d": "9/2015"}, {"body": "bestander nt patched version anymore iirc replaced ordinary like converted additional closure ok case patched application source angular able angular", "d": "9/2015"}, {"body": "thanks azasypkin suppose better open issue angular provide csp compliant reflectioncapabilites module", "d": "9/2015"}, {"body": "bestander yeah definitely maybe need reopen one", "d": "9/2015"}, {"body": "let honours sun sep pm aleh zasypkin notifications githubcom wrote bestander yeah definitely maybe need reopen one reply email directly view github", "d": "9/2015"}, {"body": "haha nt rights let ask reporter misko hey peellavaj mhevery reopen issue least tracking purposes still csp related issues least prevents us using lib highly restrictive environment eg firefox os apps addons", "d": "9/2015"}, {"body": "works expected run angular csp mode switch dynamic mode pregenerate change detectors offline documented done docs many things missing", "d": "9/2015"}, {"body": "also hard time deciphering usage", "d": "9/2015"}, {"body": "subclassing views nice option like idea allowing devs sure thin kits good idea angular box perhaps show docs guide folks want performance impact listing directives used also see would common use directive html template remove forget component", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"title": "error evaluating setter", "body": "hi posted question forum thought little seems like probably bug posting essence binding prop element object using square brackets fails examples posted nt work using simple texttextarea fields noticed work using complicated table field maybe something using string vs object value updated fiddle illustrate table fieldtype editing cells table fieldtype works fine editing texttextarea fields results another thing note line hardcode object key works fine eg obviously nt solve issue worked point right direction would fantastic", "num": "1378", "d": "9/2015"}, {"title": "chinese document error", "body": "\u5728\u4e2d\u6587\u7684\u6559\u7a0b\u91cc \u5728\u4e8b\u4ef6\u76d1\u542c gt \u6267\u884c\u8868\u8fbe\u5f0f\u8fd9\u91cc text \u53d1\u73b0li\u7684\u6587\u672c\u663e\u793a\u4e0d\u51fa\u6765 \u662f\u4e0d\u662f\u5e94\u8be5\u6539\u6210\u5982\u4e0b\u6240\u793a itemtext \u5728\u8fd9\u91cc\u6539\u52a8", "num": "1377", "d": "9/2015"}, {"title": "vue events emitted get listeners events property", "body": "emitting listeners nt work declared inside events property component", "num": "1376", "d": "9/2015"}, {"title": "component access methods use content insertion", "body": "component indexjs templatehtml using like getting error bug", "num": "1375", "d": "9/2015"}, {"title": "documentation grammar mistake", "body": "provide one static default option addition dyanmically", "num": "1374", "d": "9/2015"}, {"title": "get clean data form vue", "body": "get data server put vm data get getset methods inset want get clean data use vuefilter json get error", "num": "1373", "d": "9/2015"}, {"title": "pass partialscomponents strict mode default", "body": "generic grid pass partialscomponents rendering custom column contentmarkup past could reference component located parent name strict mode ca nt anymore parent data function return gridcolumns grid column definitions name name part optionspartialstest partials test partial child grid sadly fails idea dynamically pass componentspartials vuejs could probably call vm interpolate partials likely quite slow", "num": "1371", "d": "9/2015"}, {"title": "object updating correctly object mutated via", "body": "ref", "num": "1370", "d": "9/2015"}, {"title": "add preventdefault event filter", "body": "find pretty cumbersome add event parameter write every single method components would nice add filter automatically would used like js looks better method nt really know original event triggered call template", "num": "1369", "d": "9/2015"}, {"title": "typo examplesmodalmodalcss", "body": "visiblity toggled visibility", "num": "1368", "d": "9/2015"}, {"title": "filterby working vfor", "body": "hi upgrading newest vuejs version introduces switching markup markup following error data looks like fact remove every thing working filtered called triggers error mistake thanks", "num": "1367", "d": "9/2015"}, {"title": "vuewebpack reference global vue component", "body": "enviroment project cloning module refrence global object module thanks", "num": "1366", "d": "9/2015"}, {"title": "vrepeat underscore", "body": "hi got issue today nt know bug check fetching data mongodb data object list resources resource item mongo document use way showing data id nt work undefined use works think kind connected underscore", "num": "1365", "d": "9/2015"}, {"title": "second example bug", "body": "", "num": "1364", "d": "9/2015"}, {"title": "migrate using partial inside loop", "body": "trouble migrating following code use migration path vue setup vfor version throws warnings error believe bug", "num": "1363", "d": "9/2015"}, {"title": "createclass unsafe eval atom editor prevents use vue", "body": "developing atom editor package could nt proceed due atoms content policy nt allow usnafe eval issue vues case originates createclass function js function returns subclass constructor given name gives us much nicer output logging instances console param string name return function function createclass name return new function return function classify name options thisinit options trying decent pull request failed knowledge repo still little limited breaking quite lot tests many places however idea use babeljs implementation inheriting class generate one js use strict var createclass function function defineproperties target props var lt propslength var descriptor props descriptorenumerable descriptorenumerable false descriptorconfigurable true value descriptor descriptorwritable true objectdefineproperty target descriptorkey descriptor return function constructor protoprops staticprops protoprops defineproperties constructorprototype protoprops staticprops defineproperties constructor staticprops return constructor var get function get x var true function var object x property receiver desc parent getter undefined false object null object functionprototype var desc objectgetownpropertydescriptor object property desc undefined var parent objectgetprototypeof object parent null return undefined else x parent property receiver true continue function else value desc return descvalue else var getter descget getter undefined return undefined return gettercall receiver function classcallcheck instance constructor instance instanceof constructor throw new typeerror call class function function inherits subclass superclass typeof superclass function amp amp superclass null throw new typeerror super expression must either null function typeof superclass subclassprototype objectcreate superclass amp amp superclassprototype constructor value subclass enumerable false writable true configurable true superclass objectsetprototypeof objectsetprototypeof subclass superclass subclassproto superclass function createclass options var aclass function eventemitter inherits aclass eventemitter eventemitter return new aclass options maybe abandoning calling method could also ease makes sense land please let know try making pr", "num": "1362", "d": "9/2015"}, {"title": "factory function registering component inline via optionscomponents browserify", "body": "tried compile browserify example current beta unable register components inline quick fix vuejsvuebrowserifyexample assume wanted behaviour", "num": "1361", "d": "9/2015"}, {"title": "assigning computed property code nt invoke setter", "body": "binding template list items listed expected tags problem computed property selected setter property triggered checkbox clicked however property set code setter nt called start selection button hit checkboxes visible item user clicks checkbox setter computed selected property invoked however press select button sets selected property true checkboxes visible duly checked setter selected property nt triggered unexpected nt working either missing something bug vuejs link fiddle things try run gt click start selection gt tick checkboxes setter triggered gt message div remove remove selected items run gt click select checked gt press remove gt unexpected error div nothing remove nt happen help appreciated", "num": "1360", "d": "9/2015"}, {"title": "allow component templates loaded asynchronously", "body": "currently components must provide templates javascript strings embedding multiline string javascript something personally strong dislike would much rather template file however would require vue request template server put cache somewhere compile component similar angular things curious people dealing currently seems like huge roadblock using vue something large missing something", "num": "1359", "d": "9/2015"}, {"title": "make computed properties accessible proxy", "body": "convenience consistency use case want use computed property method without things computed property function", "num": "1358", "d": "9/2015"}, {"title": "vif attribute added page load", "body": "something like colorvalue colorcolor instanse every color formatted like working good issue nt show attributes set start colors show true page loads working idea override", "num": "1357", "d": "9/2015"}, {"title": "\u5173\u4e8evon \u6307\u4ee4\u7684\u4e00\u4e2a\u5c0f\u95ee\u9898", "body": "ngclick search", "num": "1356", "d": "9/2015"}, {"title": "keep inherit true component options", "body": "inherit option deprecated alway pass data child components via props consider use case since impossible know advance data used nothing predefined seems solution", "num": "1354", "d": "9/2015"}, {"title": "check current value object", "body": "object would like trigger function depending status person get value status new vue el foo data foo name jane status true name john status false", "num": "1353", "d": "9/2015"}, {"title": "updating list options", "body": "love example directive helps integration vue set four dropdowns dependent time one dropdown changes list available options succeeding dropdowns affected implementation options dropdown never change possible vue", "num": "1352", "d": "9/2015"}, {"title": "\u5173\u4e8e\u7ed1\u5b9a\u8868\u8fbe\u5f0f\u4f5c\u7528\u53ca\u8868\u73b0", "body": "\u5c1d\u8bd5\u4e86\u4e0b\u52a0\u5165", "num": "1351", "d": "9/2015"}, {"title": "output data twig template", "body": "hi please could help issue using twig template trying output data var list hotels jsonencode raw consolelog list vm set hotels list datajson consolelog list vmhotels console viewmodel var vm new vue el filterhotels data test ahahah setting vmhotels seems working properly vmhotels console properly output object set vm set datajson nt output nothing try use twig verbatim endverbatim tag result html source looks like data json errors shown console chrome vueminjs", "num": "1350", "d": "9/2015"}, {"title": "bind vue model multiple snippets html", "body": "eg something like html content content var model vue el data content thing bound could bind something like", "num": "1349", "d": "9/2015"}, {"title": "\u5173\u4e8e\u8ba1\u7b97\u5c5e\u6027\u7f13\u5b58\u751f\u6548", "body": "", "num": "1348", "d": "9/2015"}, {"title": "new vbind class nt support filters", "body": "works working", "num": "1347", "d": "9/2015"}, {"title": "cnvuejsorg \u793a\u4f8b\u4ee3\u7801\u4fee\u6b63", "body": "\u4e2d\u6587\u6587\u6863\u4e2d\u7684 \u4e8b\u4ef6\u76d1\u542c \u4e00\u8282 \u7684 \u6267\u884c\u8868\u8fbe\u5f0f text itemtext", "num": "1346", "d": "9/2015"}, {"title": "type check fail string prop looks like number", "body": "set value string prop success current behavior throwing warning prop gets value", "num": "1345", "d": "9/2015"}, {"title": "\u8054\u52a8\u7684select\u9009\u9879\u66f4\u65b0\u5931\u6548", "body": "provinceid \u7701 provinceid", "num": "1344", "d": "9/2015"}, {"title": "\u5728 vstyle \u4e2d\u4f7f\u7528 backgroundimage \u4ea7\u751f\u7684 \u95ee\u9898", "body": "html \u4e3a \u5728\u63d2\u5165", "num": "1343", "d": "9/2015"}, {"title": "feature request provide attribute tag", "body": "minor problem selects multiple child tag component result html contain whitespace child tag fine cases buttons whitespace button tags space buttons page add extra attribute tag solve", "num": "1342", "d": "9/2015"}, {"title": "dateinputfocus trigger native date picker android", "body": "think input focused focus css styles applys native date picker show click focused date input using finger trigger native date picker sure vue issue try make simple demo later", "num": "1341", "d": "9/2015"}, {"title": "feature animate element event trigger eg vanimateon dataloaded", "body": "hi already using production say really happy one feature would really help us ability trigger control transition system via event system right using hacky tricks achieve animations adding removing elements dom vif trying implement feature custom directive wanted use builtin transition system sadly exposed api wrong would glad contribute pull request please tell ways implement would really useful thank", "num": "1340", "d": "9/2015"}, {"title": "proper way let parent bind children data", "body": "consider example gets rendered need child component data display numbers numbers fetched api data twoway binded proper way get using props callbacks needs define prop inside child component using directives wo nt get data binded way think setting watches inside child component dispatchs new value upwards", "num": "1339", "d": "9/2015"}, {"title": "\u53ef\u5426\u5bf9unsafeeval\u505a\u4e0b\u517c\u5bb9\u5904\u7406", "body": "\u6211\u6700\u8fd1\u5728\u5f00\u53d1\u4e00\u6b3echrome\u63d2\u4ef6 \u5728devtool\u9762\u677f\u4e2d\u4f7f\u7528\u4e86\u60a8\u7684vue \u4f46\u662f\u9047\u5230\u4e00\u70b9\u95ee\u9898 \u800c\u60a8\u7684\u4ee3\u7801\u4e2d\u8bb8\u591a\u5173\u952e\u4f4d\u7f6e\u4f7f\u7528\u4e86new \u611f\u8c22", "num": "1338", "d": "9/2015"}, {"title": "\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u53cc\u5411\u7ed1\u5b9a\u5931\u6548", "body": "", "num": "1337", "d": "9/2015"}, {"title": "suggestions inlinetemplate directive", "body": "directive option present use html content replace insertion point instead replacing whole template least provide option behavior add component options nt use every time use component", "num": "1336", "d": "9/2015"}, {"title": "directives defined within component resolved", "body": "described guide specified docs components private assets wo nt work see fiddle please", "num": "1335", "d": "9/2015"}, {"title": "programmatically apply filter", "body": "", "num": "1334", "d": "9/2015"}, {"title": "observe bindings inside directive", "body": "example vuejs nt work options dynamically set loading observe options array avoid", "num": "1333", "d": "9/2015"}, {"title": "\u4e0b\u4f7f\u7528 webpack \u6253\u5305\u751f\u6210 \u6811\u72b6\u89c6\u56fe\u53ea\u80fd\u6e32\u67d3\u51fa\u7b2c\u4e00\u7ea7\u8282\u70b9", "body": "", "num": "1332", "d": "9/2015"}, {"title": "vue detecting autofill changes", "body": "previously discussed spa login submit button disabled browser autofills userpass submit markup focusing textboxes causes log button enabled google chrome", "num": "1331", "d": "9/2015"}, {"title": "using triple mustaches html symbol codes work", "body": "hello please look following jsfiddle triple mustache insert content html first top example doesnt perform begins work real tag added second bottom example looks like validates content really contain html echoes content html case catch html symbol codes decimal hexadecimal thank", "num": "1330", "d": "9/2015"}, {"title": "happened access index inside component", "body": "want call method inside component explicitly pass access know works done nt know going literally works components others even though built exactly fiddle clicking buttons log remains undefined", "num": "1329", "d": "9/2015"}, {"title": "custom component transcluded", "body": "example works fine contents inserted plain tags replace custom component tags seems able select first child", "num": "1328", "d": "9/2015"}, {"title": "lazy\u60f0\u6027\u66f4\u65b0\u7684\u4e2d\u6587\u652f\u6301", "body": "", "num": "1327", "d": "9/2015"}, {"title": "\u5728vrepeat\u7684\u5143\u7d20\u81ea\u5df1\u8eab\u4e0a\u52a0vif\u65e0\u6548", "body": "version mine edge jsfiddle demo", "num": "1326", "d": "9/2015"}, {"title": "binding syntax latest reference", "body": "quick reference first time read detailed changes first html detailed changes directive arguments concept multiple clauses multiple directives separated comma attribute deprecated directive arguments moved attribute name html using real directives example html literal directives longer literal directives implementation perspective directives reactive default makes easy know whether attribute value expression literal string wish pass directive literal string use following syntax html ending called binding modifier forces directive bound literal mode see concept used prop binding types well literal mode directive function called literal string argument attribute bindings mustache tags appear inside native attributes dynamically bind custom attribute prop use directive replaces html vue raise warning whenever mustaches used nonnative attributes enhancements particular since deprecated bindings dedicated enhancements pass javascript object array literals html props previously props use mustaches indicate reactivity must use html binding type indicators replaced explicit binding modifiers html shorthands may noticed using quite lot provide optional shorthand syntax two directives shortened single colon shortened single symbol html using vue enhancement existing html pages may want stick prefixed versions shorthand designed make template succinct building large spas vue manages everything nt worry looking like valid html browsers parse fine vue removes special stuff rendered html anyway child component also listen custom vue events emitted via used child component idea props events constitute public api component props passing data events handling actions typical component would look like shorthand modifiers leverage key modifier replaces old filter use old aliases usable key filter use direct keycode html addition use modifiers calling new syntax previously literal directives need give argument also make things explicit html refschildmsg caveat camelcase names converted lowercase html parsed gets rendered thus necessary use dashcase lt camelcase mapping refs similar props", "num": "1325", "d": "9/2015"}, {"title": "doubts", "body": "javascript title content moduleexports data title todos todos done true content learn javascript done false content learn vuejs put codes child component doest work changed moduleexportsdata", "num": "1324", "d": "9/2015"}, {"title": "ca nt use footer vuecomponent name", "body": "title says found set footer component name like throw error uncaught rangeerror maximum call stack size exceeded wonder mistake made", "num": "1323", "d": "9/2015"}, {"title": "toplevel elements vtransition display none fragment instance wo nt removed switching views", "body": "js venter vleave transition vuecomponent home template go vuecomponent template go home var app new vue el html data currentview home switch home several times many left dom tree", "num": "1322", "d": "9/2015"}, {"title": "options special parameter nt accept array numbers", "body": "something like nt render correctly", "num": "1321", "d": "9/2015"}, {"title": "question trying understand", "body": "looked observer code tests trying use outside vue try figure works looked object properties get converted setters getters trigger notify function dependency however try update property observed object nt call notify function js var observer windowobserver var obj var ob observercreate obj var dep obdep depnotify function alert object updated bind dep nt notify function called obja live example observer bundled via browserify also trouble understanding lines update property test specifically would appreciate help thanks bunch", "num": "1320", "d": "9/2015"}, {"title": "", "body": "hi modified quick example using iterator protocol great work version environments useful links", "num": "1319", "d": "9/2015"}, {"title": "preserve async component element loaded", "body": "example element removed component factory function may want loading text within element async component loaded classes element show loading animation", "num": "1318", "d": "9/2015"}, {"title": "value reactive", "body": "", "num": "1317", "d": "9/2015"}, {"title": "allow von also work custom events used child component", "body": "problem currently common practice parentchild communication passing method callback requires child declare function prop calling method communicate parent intuitive lot times nicer loose coupling real events previously directive serves exact purpose removed favor callbackprop pattern partly felt event system problematic due issues outlined problem somewhat mitigated solution proposed stop propagation default reconsider event pattern bring back new directive syntax would look like bad since already using native attributes props use native custom events proposal allow listen vue custom events used child component particular props events constitute public api component props passing data events handling actions typical component would look like shorthand", "num": "1315", "d": "9/2015"}, {"title": "issue changing component template created event", "body": "hi seems issue dynamically changing component template fiddle see fields component field child component different layouts depending field type input checkbox line js template change happening see nt work change line one starts working seems limited accept one template iteration let know details required", "num": "1314", "d": "9/2015"}, {"title": "legal way get repeater index inside component", "body": "hi say see good exists disappointed expanding see consequently could write private thanks", "num": "1313", "d": "9/2015"}, {"title": "vue \u4f55\u5982\u7ed1\u5b9a input type date \u7c7b\u578b", "body": "\u60f3\u7ed1\u5b9ainput \u4f46\u662f\u65e0\u6cd5\u6309\u7167\u9884\u671f\u5b9e\u73b0 birthday \u4e00\u76f4\u4e3a\u7a7a", "num": "1312", "d": "9/2015"}, {"title": "", "body": "\u5df2\u89e3\u51b3", "num": "1311", "d": "9/2015"}, {"title": "form value initialisation leads blank value blur", "body": "enter update text field form value value reverted upon blur issue seems begin following simple fiddlejs shows behaviour uncomment dog null thiscatname ginger issue disappears however uncommenting thiscat cat alone nt fix uncommenting thiscat cat thiscatname ginger causes issue persist seems odd btw thankful vuejs", "num": "1310", "d": "9/2015"}, {"title": "way shared global var function parent child components", "body": "way shared global var function parent child components example want define general output error function log catch error import output error function helperjs components page system huge hard maintain want define global var method parent child components use temporary solution user webpackstream gulp package helperjs main file way vue manage global var function component symtem", "num": "1309", "d": "9/2015"}, {"title": "binding syntax discussion thread", "body": "note post may contain outdated content latest reference maintained yet another long post new binding syntax know gone lot changes alpha phase please bear want make sure land something good enough called something consistent explicit importantly stable going strictly follow semver post nt want release months thinking discussion consistent feel new syntax may indeed bit different justifications additional prefixes based fact angular aurelia introducing custom syntax bindings realize vue angular aurelia two fullstack frameworks vue aims flexible many use cases possible let take step back think original problems set solve new syntax evaluate far confusion expressions vs literals directives example expression literal string way tell literal except looking directive documentation current solution explicit syntax literal directives also simplifies implementation custom directives think good change confusion mustaches allowed example html general rule mustaches allowed literal strings expressions mustaches make people think string template mindset assume work everywhere addition mustaches inside attributes subtle gotchas example used causes error used causes ie ignore current solution mustaches inside attribute values attribute bindings use special prefix someone pointed introduces additional prefix nt distinctive consistent also warts mostly related arguments multiple clauses microsyntax discuss details directive microsyntax example problem looks like object also becomes awkward format different indentation syntax highlight lot handlersattributes current solution think breaking binding single attribute definitely right move also introduced yet another prefix notsogood prop syntax example first looks like normal attribute bindings second noted mustache bindings indicates evaluates literal string however prop syntax ambiguous aspect passes actual object try concatenate abc object resulting abc object object binding indicator also confusing current solution getting rid mustaches move binding type indicator attribute name think solved issues relies extra prefix recap think current syntax addressed original issues also introduced new ones negative feedback concerned fact three prefixes instead one event handlers attribute bindings really deserive special prefix original intention would allow us get rid microsyntax issue mentioned also agree toplevel prefixes also introduce additional cognitive overhead update attempts address issue html instead currently html would write html little verbose consistent vuespecific maps concepts better using vue alone build spa prefix may important anymore still possible provide optional concise sugar top html probably would prefer shorthand component props well changing twoway indicator instead", "num": "1308", "d": "9/2015"}, {"title": "insert el target uncaught typeerror read property parentnode null", "body": "issue component repeated seven times outputing list day week using drag drop library users drag one list next mostly works users rearrange list use underscore update order data object problems solved however list items cleared completed deleted tasks new item addeddragged list see error uncaught typeerror read property parentnode null console points insert el target param element el param element target exportsbefore function el target targetparentnodeinsertbefore el target target null vue version working repo however idea may cause given info", "num": "1307", "d": "9/2015"}, {"title": "transitionmode outin causing issue directive", "body": "set demo issue sure posted basically use outin directive nt seem wait apply way transition modes sure issue approach directives applied early either way seems inconsistent light issue technique would awesome", "num": "1306", "d": "9/2015"}, {"title": "even destroyed vm mounted", "body": "destroyed vm mounted desired bug desired action clean remount", "num": "1305", "d": "9/2015"}, {"title": "ca nt access root data using browserify", "body": "running little issue using browserify trying set data component root like working fine nt use browserify use browserify get ca nt seem get data element everything accessible data seems goes file using pretty much replica jsbin link screen shot nt know issue browserify vuerouter", "num": "1303", "d": "9/2015"}, {"title": "call watch callback even value set current value", "body": "noticed callback watch function called value set current value would nice option callback called even though value fiddle demonstrating behavior open console see callback called value set value twice row", "num": "1302", "d": "9/2015"}, {"title": "vmodel write filters", "body": "hi vmodels write filter write value input changed like older version every input event examples working version working version inputs allow numbers", "num": "1300", "d": "9/2015"}, {"title": "uncaught typeerror read property get undefined", "body": "", "num": "1298", "d": "9/2015"}, {"title": "allow children inherit components registered parents", "body": "think feature removed intentionally cases useful put thing back probably making optional", "num": "1297", "d": "9/2015"}, {"title": "transition partial causes error", "body": "component displays text based number factorthis uses partials help expected output however try use transition partial get error take partial directly template component works expected", "num": "1295", "d": "9/2015"}, {"title": "duplicate objects", "body": "html lt div vrepeat items trackby id gt title lt div gt", "num": "1294", "d": "9/2015"}, {"title": "usage change binding syntax update", "body": "originally raised problem special builtin feature allow register child component dom node parent component really directives presented literal directives previous versions making literal directives explicit also makes writing little verbose example addition user needs consult doc remember registers registers explicit map well directive names proposal rename explicit properties use arguments new binding syntax mark ref id html refschildmsg caveats camelcase names converted lowercase html parsed gets rendered thus necessary use dashcase lt camelcase mapping refs similar props", "num": "1292", "d": "9/2015"}, {"title": "components nt get attached transcluded vif", "body": "issue vuejs fiddle illustrate", "num": "1291", "d": "9/2015"}, {"title": "suggestion velse", "body": "hello spotted thing remembered wanted badly sometimes hope implement", "num": "1290", "d": "9/2015"}, {"title": "checkboxes checked", "body": "trying implement check checkbox working expected checkboxes checked changed separately fiddle demonstrating issue reproduce steps check uncheck checkbox check david check uncheck checkbox nothing happens case os x google chrome version workarounds suggenstions", "num": "1289", "d": "9/2015"}, {"title": "", "body": "", "num": "1288", "d": "9/2015"}, {"title": "", "body": "", "num": "1287", "d": "9/2015"}, {"title": "use property specification autocasting literal properties", "body": "instead always autocasting leads confusing behavior like could use property specification type determine autocasting occur example hope impossible extend type like would work like current autocasting would autocasted number boolean would never autocasted type specified could default either purposes autocasting sure one would better case explicitly specify type avoid autocasting", "num": "1284", "d": "9/2015"}, {"title": "repeated component alias set property late", "body": "looping component vrepeat property child component set late trigger lot warnings console property required break every computed properties depending jsfiddle illustrate look debugger", "num": "1283", "d": "9/2015"}, {"title": "error scope fallback content slot", "body": "compiling transcluded slot content fallback content different scope however current compiled properly two compiled vm means value followed resolved outside world vm html something", "num": "1282", "d": "9/2015"}, {"title": "remove slot attribute", "body": "removing slot attribute makes hard apply css rules", "num": "1281", "d": "9/2015"}, {"title": "vfor push items child vue component scope", "body": "please refer expected output", "num": "1280", "d": "9/2015"}, {"title": "disable recursive component lookup", "body": "find component name defined set implicit component name template lead max call size exceeded way disable behavior expect rename component name others", "num": "1279", "d": "9/2015"}, {"title": "deprecate favor", "body": "problem previously necessary deal table element components html works literal directive nt go well new binding syntax directives expect bound expressions could use new literal syntax bit verbose proposal since already using attribute dynamic components ca nt use fact real custom element syntax possible issue page also happens reigster real custom element name unlikely real custom elements must namespaced hyphen vue components expect external real custom elements page", "num": "1278", "d": "9/2015"}, {"title": "new attr binding syntax problem", "body": "new attr binding syntax work filters produces vue warning please note missing curly brace typo missing warning message", "num": "1277", "d": "9/2015"}, {"title": "vrepeat inverse safari", "body": "jsfiddle expected output output mac safari windows safari", "num": "1276", "d": "9/2015"}, {"title": "", "body": "", "num": "1275", "d": "9/2015"}, {"title": "twoway filter writes blur", "body": "twoway filter writes blur even input value nt changed expected behavior suppose value technically changed originally filter applied eg added console logs currency example focus blur input several times see method called time", "num": "1274", "d": "9/2015"}, {"title": "unobservable objects data know mode", "body": "disallowing unobservable objects data makes sense sometimes really need pass example different kinds dragndrop implementations course avoided fluxlike architecture know nothing like say luxjs vue offer add option allow unobservable objects certain props explicitly like objects observed passed least allow access data without hacks", "num": "1273", "d": "9/2015"}, {"title": "listitems removed html changed scripts", "body": "hello render list divs based array items use sortablejs sorting function drag drop works well moved div another position sortablejs add things div show oh see comments anymore remove item data array remove deleted entry html entry changed html trigger function resort render entire list scatch", "num": "1272", "d": "9/2015"}, {"title": "suggestion using component options passing plugin configuration", "body": "would nice able pass plugin configuration using component options therefore plugin needs way register eventcallback called component instance created lifecycle events would allow plugin apply configuration values example create instance properties accordingly basically native options like already would great offer flexibility plugins well", "num": "1271", "d": "9/2015"}, {"title": "many warning", "body": "version updated warning shows trace call stack find error comes help", "num": "1270", "d": "9/2015"}, {"title": "improvement consistent filter behavior custom components", "body": "next code works fine one fails message function recognise complex binding expressions filters custom components worked around intuitive requires lots boilerplate code especially taking account work standard html elements", "num": "1269", "d": "9/2015"}, {"title": "error scope component slot", "body": "compiling example followed console print error raised directive called content linker function html itemvalue", "num": "1268", "d": "9/2015"}, {"title": "vuejs vuerouter two way databinding", "body": "hi evan trying use framework one question use vuerouter twoway binding data component parent parent components simple example three pages one page users second cards third main scheme simple main know cards users users know cards cards know nothing users main hope understand administration page could already understand please help important thanks", "num": "1267", "d": "9/2015"}, {"title": "initialize vue object dynamic dom creation", "body": "hi guys simple vue object page input div link opens modal window modal window takes contents element page case modal fires takes copy html containing vue object places modal body html title open modal pops contain following html title modal vue modal gets disconnected updating input nt change contents div title anyway rebind together thanks advance", "num": "1266", "d": "9/2015"}, {"title": "filters changing arrays objects break vrepeat", "body": "filters process arrays return hash eg grafting operation like lead evaluated expected workaround use method semantically correct cf fiddle", "num": "1265", "d": "9/2015"}, {"title": "custom filter access methods vm", "body": "", "num": "1263", "d": "9/2015"}, {"title": "prop validation occurring vif", "body": "component set requires prop type object yet also vif property prop validation fails value set null nt feel case vif caught falsey value renderedremoved component thus validation take place jsbin demonstrating mean", "num": "1262", "d": "9/2015"}, {"title": "write code better", "body": "\u60f3\u8981\u505a\u5230\u5207\u6362 classname", "num": "1260", "d": "9/2015"}, {"title": "handle methods differently user mobile", "body": "trouble setting vue components handle methods differently user mobile instance navigation drop user clicks link want prevent going location instead drop drop whereas desktop want go click drop hover need many aspects project main vue instance js var main new vue el body export default main components something like js import main main var navlink vuecomponent navlink template navlinktemplate return default value matter resolution ready methods seem run main ready method also feels like wrong setup thanks insight", "num": "1259", "d": "9/2015"}, {"title": "components keep tag wrapping", "body": "currently component tags replaced template gets rendered html custom component however way let rendered like keeping tag around template result infinite recursion option keep wrapping tags useful say want implement component tags like angular material want write something like html gets rendered obviously reasonable keep tag otherwise something like verbose", "num": "1258", "d": "9/2015"}, {"title": "component wo nt work registered vue bootstraping", "body": "took one hour figure work vue bootstrapped component registration migrating angularjs really seems weird used bootstrap framework first let register directives afterwards intended behavior least mentioned guide nt see anything covering important information", "num": "1257", "d": "9/2015"}, {"title": "warnings using xradovuevalidator plugin", "body": "idea happening", "num": "1256", "d": "9/2015"}, {"title": "ie nt register data style attribute", "body": "ie grabbing data inside style attribute style attribute wo nt display variables instance component template html caption registers classname index image alt caption registering data inside style attributes better way go chrome registers fine ie wo nt thumb component looks like js var sliderthumb vuecomponent sliderthumb template require templatesthumbhtml default height would think would show value components developing chrome working great forget check ie components somewhat broken thanks advice different way go setting heightwidthcoloretc elements would go style tag instead using data variable use developing jquery plugins use seems weird vue might though", "num": "1255", "d": "9/2015"}, {"title": "pass global javascript variable component", "body": "hello define global javascript variable like var relatedbooks relatedbooksjsonencode raw note use twig template engine pass variable property component tried following nt work", "num": "1254", "d": "9/2015"}, {"title": "vrepeat", "body": "html edittext", "num": "1253", "d": "9/2015"}, {"title": "read props component uses vrepeat", "body": "trying setup slideshow far html course expecting loop images backend code using laravel put brackets far javascript js var slider vuecomponent slider template var sliderthumb vuecomponent sliderthumb template var sliderslide vuecomponent sliderslide template however try get prop thumbnail sliderthumb component says undefined shows slideindex put spit variable spitting right number ca nt select props passed component uses vrepeat anyway around", "num": "1252", "d": "9/2015"}, {"title": "include computed properties", "body": "ref", "num": "1251", "d": "9/2015"}, {"title": "von click keyup", "body": "gallery next previous buttons previous next want work options clicking link clicking leftright arrows keyboard tried nt work possible vuejs", "num": "1250", "d": "9/2015"}, {"title": "uncaught typeerror read property vfrag null", "body": "update reproduction occurring dragging list item one unordered list another case using rubaxasortable manage lists appears caused location comment node items moved according comments typeerror read property vue null similar issue closed could reproduced billiam later provided details well jsfiddle example uses vfor instead vrepeat generates error read property vfrag null", "num": "1249", "d": "9/2015"}, {"title": "performance degradation since", "body": "displaying large list c rows vuejs noticed since performance degraded extremely nice fast simple fiddle exact press next previous see excruciatingly slow filter function become since also tested latest issue persists edit wrongly wrote meant", "num": "1248", "d": "9/2015"}, {"title": "snake case props support", "body": "somewhat related think probably global vue config option replace camel case snake case working vue props coffee script nt consistent variable naming convention making global option nt add visible performance overhead would great thing make vue coffee compatible introducing props concept", "num": "1247", "d": "9/2015"}, {"title": "leave transition hook called twice css false inout mode", "body": "ran trying suggestion", "num": "1244", "d": "9/2015"}, {"title": "filterby components", "body": "hi trying using error occurs uncaught typeerror read property push undefined", "num": "1243", "d": "9/2015"}, {"title": "support array objects", "body": "used work cfont ctextalign computed functions cfont ctextalign return object multiple values however bindstyle last one used eg text aligned colouredstyled reverse colouredstyled aligned", "num": "1242", "d": "9/2015"}, {"title": "triggering transitionend event enter transition done inout mode causes error", "body": "happens inout mode css transition triggers transitionend event entirely unrelated component transition example uses js callbacks already finished time transitionend event called uncaught typeerror read property parentnode null caused child el null", "num": "1241", "d": "9/2015"}, {"title": "von enhancement", "body": "proposal directive accept event instance html component vm emit hello", "num": "1240", "d": "9/2015"}, {"title": "svg tree view examples nt work mac", "body": "following examples nt work mbp chrome safari windows chrome", "num": "1239", "d": "9/2015"}, {"title": "expose fragment factory api", "body": "find features easier ever implemented using fragment factory expose let user create advance directive", "num": "1238", "d": "9/2015"}, {"title": "support filters inside prop expressions", "body": "thank reading developing tododemo trying use vue version update subcompnents props use prefix got invalid expression error want use filter computed property filter todo types vue config javascript let filters todos gt todosfilter todo gt todoisdelete false active todos gt todosfilter todo gt todoisfinished false amp amp todoisdelete false finished todos gt todosfilter todo gt todoisfinished true amp amp todoisdelete false let vm new vue data gt todos content hello world todos localstorage filter query todo content filter computed filteredtodos return filtersthisfilter components todolist comptodolist filters ordertodos todos return todossort gt return new date gettime new date gettime return return component using webpack package file file open browser get error developer tools call vue instance method pass string parameter get correct result thx", "num": "1237", "d": "9/2015"}, {"title": "\u600e\u4e48\u7ed9\u7ec4\u4ef6\u4f20\u4e00\u4e2adata\u4ee3\u66ff\u9ed8\u8ba4\u7684", "body": "\u6211\u770b\u6587\u6863\u4e0a\u6709\u5199 \u66b4\u9732 data \u4f5c\u4e3a prop data \u5bf9\u8c61 somedata", "num": "1236", "d": "9/2015"}, {"title": "allow setter instantiation data properties", "body": "often using vuejs framework handy kind private properties like theses beginning typical cases storing canvas context super useful vue adding getter setter properties however like boring always declare property inside hook set properly inside hook afterwards question possible allow setter private properties beginning component instantiate order setup component properly vs", "num": "1235", "d": "9/2015"}, {"title": "vfor filters", "body": "updated projekt rename vrepeat vfor problem filter receive undefined property filter function", "num": "1234", "d": "9/2015"}, {"title": "extract functionality separate npm modules", "body": "hey think would beneficial extract parts vue repos observable nexttick cache perhaps others could live inside github repos vuejs organization would open something like edit case like idea nt time would glad help", "num": "1233", "d": "9/2015"}, {"title": "vue slower", "body": "switched alpha app slow even rewrote things remove warnings known issue", "num": "1232", "d": "9/2015"}, {"body": "thank", "d": "9/2015"}, {"body": "\u4e2d\u6587\u6587\u6863\u7684 issue", "d": "9/2015"}, {"body": "repro note triggers event listeners instance", "d": "9/2015"}, {"body": "design template passed via evaluated different context parent vue instance context see", "d": "9/2015"}, {"body": "design see", "d": "9/2015"}, {"body": "please report doc issues docs repo better yet submit pr fixes", "d": "9/2015"}, {"body": "please post questions forum", "d": "9/2015"}, {"body": "use content insertion", "d": "9/2015"}, {"body": "btw please submit questions forum issues bugs", "d": "9/2015"}, {"body": "asking something related nonstrict mode deprecated guess right way generate component first party extend override assets third party js var grid require grid note third party component note first party component function gridfactory partials return template partials cell partialscell var cell note partial new vue el components gridone gridfactory cell cell gridtwo gridextend partials cell cell think worth discussing forum", "d": "9/2015"}, {"body": "tried implementing content insertion sadly unable access local scope deal breaker try way simplesmiler thanks", "d": "9/2015"}, {"body": "thanks prompt fix", "d": "9/2015"}, {"body": "yep moment use custom directive like", "d": "9/2015"}, {"body": "seofood sharing directive stuckouttongue", "d": "9/2015"}, {"body": "sure javascript moduleexports bind function thiseladdeventlistener click function e epreventdefault", "d": "9/2015"}, {"body": "would useful project seofood tried adding unbind clause code cleanup case stops working use combination vif directive sure even necessary unbind", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "created complete version automatically handles button anchor form elements find gist", "d": "9/2015"}, {"body": "could please put everything single reproduction next time use would make much easier debug", "d": "9/2015"}, {"body": "original usage wrong correct version note quotes around makes path search aka searching original code evaluating expression results also filter instead", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "finico required mainjs several time ok package init", "d": "9/2015"}, {"body": "honghe totally ok webpack inline calls module anywhere need instantiated", "d": "9/2015"}, {"body": "simplesmiler thank one question use replace packs code ca nt find definition", "d": "9/2015"}, {"body": "honghe nt think answer really depends implemented webpack update future please post questions forum tracker bugs", "d": "9/2015"}, {"body": "properties start underscore proxied vm instance may conflict vue internal private properties access template", "d": "9/2015"}, {"body": "got thanks reply good luck release", "d": "9/2015"}, {"body": "homepage css issue vue bug", "d": "9/2015"}, {"body": "sorry necro seems issue deeper cf html editor key editor key outer loop changed input lose value blur", "d": "9/2015"}, {"body": "actually separate issue opening new one", "d": "9/2015"}, {"body": "eljefedelrodeodeljefe cspcompliant build", "d": "9/2015"}, {"body": "thanks noting examples updated accordingly beta", "d": "9/2015"}, {"body": "many problems fiddle computed properties exposed component instance original data fiddle setting true raw data object actual component instances need use list access component instances nt know calling parent please read section carefully make sure understand method also pass number assume index remove item index need use native methods like removal getter check rather fixed fiddle", "d": "9/2015"}, {"body": "thanks evan reply seems misunderstood components well following suggestion code worked like charm first using methods since nt work somehow used methods methods working original code thank guiding right direction ritesh", "d": "9/2015"}, {"body": "retrieving multiple templates async results many http requests general bad production recommended approach use build tool like browserify webpack gives file modularity development ability bundle like production see vue treats components basic building block better load components asynchronously rather templates achieve webpack auto bundlesplitting vue async component feature", "d": "9/2015"}, {"body": "needs cost templates loads almost never consideration webpack adds significant level complexity nt feel need browserify hand used projects would play rather nicely babel direction leaning aside async component support actually really interesting little test case electron app wrote small component loader loads html disk approach could used anyone wishing load html templates threw gist case anyone interested", "d": "9/2015"}, {"body": "exposed", "d": "9/2015"}, {"body": "vue detect changes add afterwards set show variable data object also use method look", "d": "9/2015"}, {"body": "vue statement \u5fc5\u987b\u5728 js", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "\u4f60\u53ef\u4ee5\u8fd9\u6837", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "expect use case evaluated topmost scope work", "d": "9/2015"}, {"body": "yes misunderstood scoping rules everything working fine without thanks", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "please move questions forum", "d": "9/2015"}, {"body": "sorry new", "d": "9/2015"}, {"body": "see workaround", "d": "9/2015"}, {"body": "thanks much thelinuxlich went sure proper approach works far", "d": "9/2015"}, {"body": "glad worked", "d": "9/2015"}, {"body": "nt work filters however", "d": "9/2015"}, {"body": "yeah suggest use computed property", "d": "9/2015"}, {"body": "thanks works great", "d": "9/2015"}, {"body": "issue \u53ea\u5904\u7406 bug \u548c feature", "d": "9/2015"}, {"body": "thanks anyway share problem right place later using english best ability way forum url mentioned correct may right thanks solving problem", "d": "9/2015"}, {"body": "common parent parent instead child", "d": "9/2015"}, {"body": "simplesmiler use mvvm frameworks like angular avalon directive scope anywhere html document ca nt really done vue", "d": "9/2015"}, {"body": "kxxoling angular avalon simply scan whole page vue nt finer control part page put vue control want whole page", "d": "9/2015"}, {"body": "manage data one vue model vue supports nested scope decide use router lately worrying vue whole document get side effects btw use chinese make better explanation good english communication", "d": "9/2015"}, {"body": "kxxoling vue supports custom components instance component viewmodel ability pass data instance hierarchy via props think component elementdirectives angular", "d": "9/2015"}, {"body": "simplesmiler case little data shared need one attribute model whereas main interactive part easy way share data rather using hook manually change data", "d": "9/2015"}, {"body": "kxxoling instances may share data reference would recommend makes dependency implicit js var commondata var new vue el data commondata var new vue el data commondata", "d": "9/2015"}, {"body": "kxxoling look docs component props", "d": "9/2015"}, {"body": "simplesmiler works thanks lot nope thought would higher class functions nt get started study yet using", "d": "9/2015"}, {"body": "kxxoling component core vue recommend read guide get idea", "d": "9/2015"}, {"body": "thought feature thanks", "d": "9/2015"}, {"body": "javascript example", "d": "9/2015"}, {"body": "pretty sure never meant work way point filtering boolean", "d": "9/2015"}, {"body": "directives takes single javascript expression object literal use filter syntax inside javascript expressions add filters end directive filter would need process object instead string also recommended use computed properties binding value gets complicated", "d": "9/2015"}, {"body": "add use methods achieve something similar desired syntax", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "yeah known issue autocasting current prop syntax longer case using new prop syntax", "d": "9/2015"}, {"body": "\u7a81\u7136\u60f3\u5230\u8bbe\u7f6e vueconfigasync provinceid \u611f\u89c9\u5f02\u6b65\u6a21\u5f0f \u4e0b\u7684select", "d": "9/2015"}, {"body": "\u8bf7\u7528 jsfiddle \u7ed9\u4e2a\u91cd\u73b0", "d": "9/2015"}, {"body": "put rule english github", "d": "9/2015"}, {"body": "allanfreitas recommended use english would nt make required chinese users nt feel comfortable simply ca nt accurately describe issue english", "d": "9/2015"}, {"body": "closing inactivity", "d": "9/2015"}, {"body": "\u5982\u679c\u4f60\u77e5\u9053", "d": "9/2015"}, {"body": "ca nt use styles", "d": "9/2015"}, {"body": "good practice rely default whitespace use css instead", "d": "9/2015"}, {"body": "far know mobile os disallows programmatically triggering input behaviors eg raise keyboard trigger date picker works user triggered input nothing vue", "d": "9/2015"}, {"body": "ask use case nt mind mean usage general transitions would work element changes state might misunderstanding would trigger transition without changing element state", "d": "9/2015"}, {"body": "yes course jfiddle trying show painful animate element transition system thought handle leaving entering dom trying trigger animation place without removing element like page could useful also plenty stuff like trigger shake form validation fail etc clear thanks", "d": "9/2015"}, {"body": "internal transition system provided handles tricky parts around insertingremoving elements together css transitions insertingremoving stuff need internal transition system trigger css transition setting css style toggling css classes use external animation library anything want example", "d": "9/2015"}, {"body": "according contribution guide questions vuejsdiscussion", "d": "9/2015"}, {"body": "sorry moved", "d": "9/2015"}, {"body": "\u7528 csp csp", "d": "9/2015"}, {"body": "\u9488\u5bf9csp\u505a\u4e86\u517c\u5bb9\u5904\u7406\u7684", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "\u611f\u8c22\u4f5c\u8005 esprima\u6da8\u59ff\u52bf\u4e86", "d": "9/2015"}, {"body": "\u4f60\u662f\u7ed9 set \u6765\u5efa\u5c5e\u6027", "d": "9/2015"}, {"body": "really annoying see issues chinese traduction nt always reliable nt making effort one handle question ps english nt native language either", "d": "9/2015"}, {"body": "fnlctrl \u8bd5\u8fc7 set \u4e86 \u4e5f\u4e0d\u884c", "d": "9/2015"}, {"body": "posva sorry boss chinese mine native language easy known use chinese raise issue en version question mustache bindings model view disabled detail app runs well local server mock data run real server real data one sections view update model data get server async sever response data updated view keep image attached data consoled looks set get function missed need finish data operate vue instantiation try set function also make effort thanks", "d": "9/2015"}, {"body": "disabled actually probably never set read section make sure provide reproduction \u91cd\u73b0 describing issue almost never helps", "d": "9/2015"}, {"body": "recommend posting different language english chinese find hard express posva look positive side learned new word today \u91cd\u73b0 reproduction smile", "d": "9/2015"}, {"body": "azamatsharapov use word sexual reproduction reproduction saying aftrer looking single meaning character", "d": "9/2015"}, {"body": "posva \u91cd\u73b0 literally means recurrence chinese \u91cd chong \u73b0 xian appearanceoccurence offtopic", "d": "9/2015"}, {"body": "indeed offtopic kinda fun smile", "d": "9/2015"}, {"body": "posva idea saying fnlctrl made clear think anyways let see \u91cd\u73b0 issue", "d": "9/2015"}, {"body": "thanks issue fixed init data vue instantiation \u5b9e\u4f8b\u5316", "d": "9/2015"}, {"body": "use case component switching tabs similar angular material tabs looks like rendered component problems without directive wo nt work option ignored wo nt appear decide live solve problem add every time use annoying", "d": "9/2015"}, {"body": "sensible api without need using directive component created dispatches event parent register", "d": "9/2015"}, {"body": "wo nt work define within even see fiddle sorry typo works fine thanks", "d": "9/2015"}, {"body": "still needs work fiddle", "d": "9/2015"}, {"body": "nt think private component import together parent component", "d": "9/2015"}, {"body": "conceptually really private component never used elsewhere outside nothing capture dispatched events developers importing suffice usage intuitive otherwise needs documented every single ui component peer dependency", "d": "9/2015"}, {"body": "developer needs aware private sat sep pm fnlctrl notifications githubcom wrote conceptually tab really private component tabs tab dependency tabs peer dependency tab never used elsewhere outside tabs nothing capture dispatched events developers importing tabs suffice usage intuitive otherwise needs documented every ui component peer dependency reply email directly view github", "d": "9/2015"}, {"body": "ok private would better relationship dependency explicitly specified something like option injected parent vm case componentsdirectives otherwise using component means looking docs finding possible dependencies including parent vm exist", "d": "9/2015"}, {"body": "nt think really bad like composition rather dependency sat sep pm fnlctrl notifications githubcom wrote ok private would better relationship dependency explicitly specified something like dependency option injected parent vm case body componentsdirectives otherwise using component means looking docs finding possible dependencies including parent vm exist reply email directly view github", "d": "9/2015"}, {"body": "ok guess live thanks", "d": "9/2015"}, {"body": "read section component scope works using inside child component template", "d": "9/2015"}, {"body": "record use inlinetemplate component get directive working", "d": "9/2015"}, {"body": "read component scope communication instances still could nt figure clean way currently implementing tabs component would look like gets rendered directive intended dispatch event component registering current element content tab angular approach work used inside template tried adding still wo nt work directive function points instead understand reason compiled scope ca nt use pass current element tl dr actually need something added attribute directive prop whatever child elementcomponent execute function like dispatching event passing argument demonstrated guide without need manually defined child component definition would kindly give advice", "d": "9/2015"}, {"body": "thoughts think need directive uses scope component attached without defined component option like angularjs", "d": "9/2015"}, {"body": "ok found solution inside directive bind function use access scope component attached maybe provide public property accessing prefixed private properties nt look like quite right thing", "d": "9/2015"}, {"body": "please post questions vuejsdiscussion", "d": "9/2015"}, {"body": "oops sorry", "d": "9/2015"}, {"body": "use handle update", "d": "9/2015"}, {"body": "options array replaced nt work", "d": "9/2015"}, {"body": "idea seems like problem", "d": "9/2015"}, {"body": "got working ugly hack consider something similar example", "d": "9/2015"}, {"body": "html new vue el app components comp require path comp data let index return function createnode const node data index childnodes const l mathfloor mathrandom let lt l nodechildnodes createnode see pen bokvvo texvnars terencez codepen", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "vuejs", "d": "9/2015"}, {"body": "indexcoffee templatehtml html nodeareaname", "d": "9/2015"}, {"body": "terencez", "d": "9/2015"}, {"body": "terencez", "d": "9/2015"}, {"body": "\u662f\u5728 webpack progress colors watch", "d": "9/2015"}, {"body": "applies autofill login pages", "d": "9/2015"}, {"body": "tried autofillevent polyfill original angular thread polyfill correctly fires change event vue able catch", "d": "9/2015"}, {"body": "meh polyfill works jqueryangular guess need even generic polyfill", "d": "9/2015"}, {"body": "autocomplete seems work fine case browser autofills page load", "d": "9/2015"}, {"body": "actually issues initial page load later autofill separate form polyfill also nt appear work even though jquery loading", "d": "9/2015"}, {"body": "try vue instance hook following", "d": "9/2015"}, {"body": "nt fix sadly added notice everything autofilled except password input click anywhere dom login button gets enabled perhaps security feature", "d": "9/2015"}, {"body": "saying email data updated password", "d": "9/2015"}, {"body": "email appears loaded even without polyfill perhaps related", "d": "9/2015"}, {"body": "sounds like browser autofill implementation issue btw version vue using", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "update vue autofills fine firefox sure chrome password manager nt work anyway thanks looking issue", "d": "9/2015"}, {"body": "theoretically always wait short period page load force trigger events input fields unless chrome security limitations approach", "d": "9/2015"}, {"body": "great thank", "d": "9/2015"}, {"body": "note method context always bound instance declared matter called examples method called parent instance repeat instance better pass method instead", "d": "9/2015"}, {"body": "bad webpack failed changes loaded", "d": "9/2015"}, {"body": "quickfix use", "d": "9/2015"}, {"body": "posva yeah right bug report", "d": "9/2015"}, {"body": "see warning console telling nt use together ok still recommended use instead", "d": "9/2015"}, {"body": "update syntax updated according comment implemented", "d": "9/2015"}, {"body": "update sep implemented", "d": "9/2015"}, {"body": "put demo childvue component data needs function object", "d": "9/2015"}, {"body": "thanks see", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "yes ca nt use standard html tag names component names", "d": "9/2015"}, {"body": "thx lot", "d": "9/2015"}, {"body": "warning common elements future basically use inside like selfrecursive call never ends vue needs support selfrecursive components eg file tree components", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "suggestion break vue concept able", "d": "9/2015"}, {"body": "like see convincing use case supporting involves nontrivial addition observation mechanism", "d": "9/2015"}, {"body": "involves nontrivial addition observation mechanism maybe helps js var var set new set symboliterator set var arrayfrom set consolelog consolelog false like see convincing use case supporting new general thing js think support", "d": "9/2015"}, {"body": "nervgh use cases angular supporting cool scenario requires ui state set map", "d": "9/2015"}, {"body": "good point doable", "d": "9/2015"}, {"body": "also meet question solation make timer listen check dom height value get dom height value means dom render code \u7b80\u5355\u5224\u65ad\u5143\u7d20\u6e32\u67d3\u5b8c\u6210\u540e\u6267\u884c\u67d0\u64cd\u4f5c render function call var handle argv", "d": "9/2015"}, {"body": "ways solation ca nt check dom ist display dos ca nt get value height width", "d": "9/2015"}, {"body": "niluanxy think consider repo listen resize element writing component case however vue update size hook rewrite adding event bus trigger event like let know update size info needed way rewrite import vuesrctransition explicit possible export transition plugin use know", "d": "9/2015"}, {"body": "using model link input data", "d": "9/2015"}, {"body": "hoping would nt add property data object logic contained template usage kind like html one place add thing submit disabled textbox value empty another place add thing array works nt used able vel vref became reactive except binding button disabled property input element value use vmodel add property data object make value reactive would seem add little bit cruft also sync value two separate input boxes nt want", "d": "9/2015"}, {"body": "well nothing vue observe react simple input component using callback maybe wrong wait master turn", "d": "9/2015"}, {"body": "wo nt work vue reactivity requires source truth javascript dom vue observe change dom element property simple rule thumb need reactivity needs", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "nice", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "great", "d": "9/2015"}, {"body": "finally", "d": "9/2015"}, {"body": "like clear separation dataflow warning madness ahead currently two types directives first accept expressions similar props second accept statements similar props quite parallel props directives directives actually kind unbound props injected component instance modify instance behavior bit like adhoc mixins applied component component consumer look closely props directives make sense crazy", "d": "9/2015"}, {"body": "simplesmiler mind mentioned dropping v altogether make everything custom attributes saw happened", "d": "9/2015"}, {"body": "guess issue names start clash wonder solved unified call syntax proposal c went googling", "d": "9/2015"}, {"body": "would emit custom event child assuming bind parent syntax instance", "d": "9/2015"}, {"body": "thelucre", "d": "9/2015"}, {"body": "short answer supposed template compilations cached modifying runtime makes optimizations impossible use dynamic partials", "d": "9/2015"}, {"body": "know right", "d": "9/2015"}, {"body": "pass prop", "d": "9/2015"}, {"body": "wow thanks fast zap still one question pass component write correct behaviour", "d": "9/2015"}, {"body": "nt work scopes since going deprecated", "d": "9/2015"}, {"body": "ok miss smile", "d": "9/2015"}, {"body": "fiddle blank", "d": "9/2015"}, {"body": "sorry updated link", "d": "9/2015"}, {"body": "property observed declare set nondeclared property becomes nonobserved property convert observable property however set notice property nt exist therefore create observable property best practice always declare want observed", "d": "9/2015"}, {"body": "thanks evan mostly confused thiscatname ginger fixes issue thiscat cat nt would setting thiscatname created method mean thisdog becomes observed would setting thiscat cat prevent thisdog observed", "d": "9/2015"}, {"body": "simply causes error vm nt even finish initialization", "d": "9/2015"}, {"body": "ah yes see thanks sorry bother", "d": "9/2015"}, {"body": "several ways like import need actually recommended approach although repetitive clearly shows method comes add example instances better yet group global helpers mixin know look maintain make separate global like fine scope small put everything namespace object", "d": "9/2015"}, {"body": "thanks answer directive syntax best smirk component syntax yjeroen changing literaldynamictwowayonetime towards vue javascript instead template suggested option pretty good yum", "d": "9/2015"}, {"body": "looks good like possibility v prefix shorthand option also like prefix affix maybe consistency full notation shorthand example html sure improvement maybe makes harder think another maybe stupid question expressions amp literals use quotes literals leave quotes expressions something like html", "d": "9/2015"}, {"body": "really like latest proposal clear two major groups vue users us mostly backend developers using vue frontend library really wish keep consistent syntax others developing fullstack spa apps would prefer shorter concise syntax latest proposal caters well groups ca nt speak everyone came vue really disliked verbose frontend frameworks got angular good example introducing ton new syntax confusing backender like simple rule like would mean lot would make templates clear readable", "d": "9/2015"}, {"body": "new vue user use angular almost year one public angular modules placed sorry ad create long list like vue blush", "d": "9/2015"}, {"body": "dennisver full syntax denotes arguments best keep consistent nonquoted attribute values work value nt contain spaces impractical", "d": "9/2015"}, {"body": "agree thanks tried vue first time one first things clear whether use quotes coming ember nt really tried angular always associated quotes literal strings could also explain downside using mustaches expressions", "d": "9/2015"}, {"body": "dennisver ember templates parsed strings actually nonvalid html eg would work vue use real dom template vue templates must also valid html real html write attribute without quotes space encountered parsing nonquoted attribute value treated end value would actually parsed short always quote attribtues vue", "d": "9/2015"}, {"body": "like new proposal prefer events instead although clashes twoway syntax literal dynamic twoway onetime shortcuts think enforced prop definition instead dynamic props would standard literal could reuse shortcut twoway onetime component prop schema", "d": "9/2015"}, {"body": "thelinuxlich yeah like better especially trying real templates much easier spot also think might make sense use twoway bindings dynamic props default would imo confusing nothing differentiate normal attributes directives prefix also think beneficial able tell whether child component mutate parent state without look implementation details binding type indicator", "d": "9/2015"}, {"body": "another symbol twoway binding avoid misunderstanding maybe like ember mut var", "d": "9/2015"}, {"body": "clashes twoway syntax yeap literal dynamic twoway onetime shortcuts think enforced prop definition instead ie javascript think component like function js definition param number param object b param array c function foo b c code using foo need know work deal", "d": "9/2015"}, {"body": "correct analogy like", "d": "9/2015"}, {"body": "topic made sleepless came next problem first main goals changes see two make learning curve low possible avoid confusions make syntax flexible possible captain obvious yep opinion next things confusing three types directives literal nonliteral terminate ca nt find good reasons feels wrong complicated work well good design always dead simple see lots questions gitter github issues regarding vs nt always see code several types binding expressions remember combined acceptable proposal step let replace terminal directives controlflow tags never felt good nt see code time nt create indentation whatsoever stand vue also tags make one step extract control flow directives separate tags vue much readable imo feel intuitive people familiar template engine step make directive expressions uniform literal nonliteral directives let get rid term directive call expressions need types expressions direct value assignment simple work fine literal string number boolean assign evaluated expression work fine case expression freeform javascript expression evaluated vue instance context property path like valid js expression optional valid js expression last two cases expressions assignable nature gives us item onetime assignments use first syntax looks better follows concept everything double quotes expression twoway assignments expression writable avoid confusion working directive use next syntax evaluated twoway current vue instance context event handling new ideas vonclick etc sounds good consistency expression take current instance property bind event possible problems solution see room errors vue errors caught automatically directive code appropriate warnings displayed example let doodle little bit build shopping cart sketch vue moduleexports data function items name iphone quantity price validation errors object name value format validationerrors checkoutform name email methods validateform function validation code filters nameformatter read function value return value write function value return value component name email field error freeform markup compiled", "d": "9/2015"}, {"body": "karevn appreciate ideas concept terminal directive really exposed user normal user reactive vs literal every directive reactive default seems simple enough plus already like everywhere prefer binding type concept specifically designed component props component first class concept props mechanism data flow components directives different mixing binding type indicator normal directives nt sound like good idea using curlies indicate expressions sounds unnecessary already clearly defined expressions may appear attributes shorthand notations finally please note trying fix issues changes possible toned original proposal one want natural progression clear upgrade path trying reinvent syntax mistake made original proposal", "d": "9/2015"}, {"body": "tech standpoint works less fine conceptual readability standpoints feels illogical languages statements container control blocks attributes offered straightforward syntax universal native html tags components closer contemporary frameworks polymer react lower learning curve existing solution examples curlies used tell expressions vs literal values nt particularly like curlies may confused mustache bindings elegant option basically thougts breaks existing code relies vue rewriting dependent code inevitable already good time polish syntax revisit future nt experience angular came backbone directly took look first time impression hell going syntax polymer react syntax look much elegant natural taking account angular hype react polymer taking may sign everything good syntax vue learn lesson", "d": "9/2015"}, {"body": "karevn would argue latest proposal migration process drastically simplified certainly true breaks existing code changes view layer required sure actual logic furthermore current syntax proven popular lot developers due simplicity clarity judging learning curve already low compared frameworks like react never able fully comprehend", "d": "9/2015"}, {"body": "karevn syntax pretty much proposed polymer offers almost syntax terms logic except requires use wrapper element whereas vue optional use directly element reactjsx javascript expression completely different construct nt see proposal closer others nt see offering substantial improvement catering personal preference less trying force polymer expressions always mustaches mindset vue vue basic rule expressions always prefixed attributes one better subjective nt see convincing reason suddenly jump ship nt break anything seamlessly upgrade app following deprecation warnings would ideal process simpler people", "d": "9/2015"}, {"body": "think misunderstood proposal key points move control logic custom tags improve readability simple oversee currently implication think vue core code become cleaner change yes thinking minus specific symbol choice would equally happy whatever works best really think better vanything systems work polymer react even windows presentation foundation natural reinvent wheel works well frameworks also think vue internal directive code straightforward case sure acasar let describe worked switched days ago webpack recompiled everything refreshed page seen hundred warnings references line numbers code vue warnings show stacktraces vuejs code also js errors vue core code caused syntax incompatibility spent whole two days replacing syntax redebugging code even simple syntax change forces review templates use regexbased global replacement pray regex good enough forget replace forget explicitly declare variables use words even end world decent work simple yet manual mostly acasar totally right react syntax nightmare sometimes offering steal best properties simple attr binding syntax worst ones like mixing html js syntax", "d": "9/2015"}, {"body": "karevn said already always using everywhere almost exactly polymer said subjective natural nt necessarily mean natural personally find curlies expression wrapper symbols noisy annoying type make vue templates look like string templates fact html attribute annotations systems work valid argument argue polymer far far away taking inprogress versions unstable definitely nt represent best experience possible final ship together version focuses ensuring smooth upgrade experience latest proposal experience already improved would nt make sense make experience worse introducing even bigger syntax changes arguable improvements want make clear syntax change current syntax sucks fact working well many us trying fix small issues within current syntax let move something completely new sounds like goal maybe vue", "d": "9/2015"}, {"body": "karevn regarding upgrade experience upgraded medium sized app took hours ca nt say went completely smoothly frustrations along way overall anything drastic still bigger app waiting upgrade going hold finished proposals afraid upgrade process would even harder also personally big fan syntax proposed acknowledge come different backgrounds probably seems lot natural", "d": "9/2015"}, {"body": "make learning curve low possible avoid confusions closer contemporary frameworks polymer react lower learning curve existing solution nt fix broken took minutes memorize new changes thougth good memory mean general learning curve still think vue api makes perfect sense learnable day two funny comparing vue libraries mentioning learning curve new api bring sense explicity think makes easier learn compared libraries api", "d": "9/2015"}, {"body": "azamatsharapov calm please discussion", "d": "9/2015"}, {"body": "sorry forgot insert smiley smile", "d": "9/2015"}, {"body": "acasar two accounts azamatsharapov nt seem get point changes nt think current syntax worths efforts laziness learning anything spending time efficiently changes inevitable would like best syntax possible release keep referring libraries like newbies background see syntax feel familiar beginning increases vue chances succeed succeed library nice architecture pretty stable code vue good points unquestionably look familiar based experience people imagine went ruby rails backbone wpf world see attr src something hmm colon mean read docs make sure background see hmmm looks like assign ruby hash js object think got", "d": "9/2015"}, {"body": "read docs make sure personally took like days read vue docs first wo nt annoying public simple questions first js library yeah also backbone past probably much think mandatory learn docs first vue docs seem easy understand yeah understand mean people different backgrounds colon thing optional like ifelse vs ternary use sure miss something personally would nt use shortsyntax better type vbindvon later read html like plain english", "d": "9/2015"}, {"body": "karven posted company account mistake seems nt get unnoticed add one comment familiarity came angular felt right home vue even felt much easier intuitive use judging popular angular still many feel seems changing syntax completely nt end well well guess jury still azamatsharapov also prefer longer syntax see harm offering concise shorter one seems valid usecases understand optional", "d": "9/2015"}, {"body": "azamatsharapov indicates like people take look vue gitter thread see question would appear people read docs acasar think new syntax problem angular fact syntax changed people nt trust angular anymore", "d": "9/2015"}, {"body": "karevn yeah active used shout like hey read docs dude maintainer trying please people providing short syntax removes leaves easy read syntax people may say verbose", "d": "9/2015"}, {"body": "azamatsharapov always good idea remember human psychology designing technical system meeting peoples expectations key success", "d": "9/2015"}, {"body": "karevn right problem expectations necessarily represent vue users", "d": "9/2015"}, {"body": "sure thing neither best gather statistics vs vs proposal things work question preferred users", "d": "9/2015"}, {"body": "karevn note proposal based vue current syntax around quite time used many positive feedbacks blunt nt think opinions hold weight mine trying best address concerns changes really obligation accept suggestions think fine line suggestions like better put framework", "d": "9/2015"}, {"body": "think vue simple enough learned represented syntaxes nt see problem newbies learning make syntax logical anyone could get hold days rather focus code maintainability extensibility large ammounts code easily understandable supportable right see", "d": "9/2015"}, {"body": "taking account opinion one seriously differs less consistent always good idea give alternative ideas consideration sometimes change mind sometimes make sure original idea best engineering", "d": "9/2015"}, {"body": "karevn given fair consideration explained multiple times nt think would work may work designing brand new library context acknowledging constraints working also important part engineering", "d": "9/2015"}, {"body": "need blood hocho laughing american english british english talk russian english omg satisfied correct analogy like analogy correct example good comparison think completed directive syntax component syntax left hand right hand voting yjeroen thelinuxlich understand votes already blush", "d": "9/2015"}, {"body": "nervgh syntax particular sure link follow", "d": "9/2015"}, {"body": "javascript definition said thelinuxlich problem component props syntax propose something like need think js definition syntax", "d": "9/2015"}, {"body": "sure thing neither question preferred users funny evan bdfl gets votes rest us get mon sep pm evan notifications githubcom wrote nervgh syntax particular sure link follow reply email directly view github", "d": "9/2015"}, {"body": "markhahn actually others makebelieve democracy works nowadays", "d": "9/2015"}, {"body": "nervgh regarding prop binding types still believe declared template level possible enhancement would also offer verbose syntax since twoway oneway nt much meaning sake consistency readability may possible something like html", "d": "9/2015"}, {"body": "acasar latest comment twoway onetime modifiers declared templates readability mostly depend directive logic component logic think javascript moduleexports props propname twoway true declaration tells property requires twoway access using oneway template expression generate warning set false twoway access still available depending template onetime true property evaluated one time regardless template syntax request looks like good idea sure considering options", "d": "9/2015"}, {"body": "trust totally making end decision like latest proposal top feel post confusing shorthand von different thought component different binding shorthands since shorthands beginning attribute name maybe place beginning well instead end attribute name", "d": "9/2015"}, {"body": "acasar looks tempting one side smirk another side encapsulation way amount sides three abstraction encapsulation polymorphism dizzyface", "d": "9/2015"}, {"body": "acasar last comment looks reads well using wording rather twoway onetime bindings great idea personally pretty obvious shorthand maps words directly end sure make best decision library knows already gotten awesome library far", "d": "9/2015"}, {"body": "lucky bdfl look vue stands seen many shitty suggestions suggested people ca nt see big picture", "d": "9/2015"}, {"body": "acasar think helps attrprop bindings start prefix know belong category colon nonnative attribute tells prop binding type special symbol placed equal sign tells prop handles value differently different prefixes especially using shorthand makes less straightforward prop potentially start three different prefixes remember moved prefixes back one prefix", "d": "9/2015"}, {"body": "agree probably keep uniform prefix shorthand syntax across binding types problem originally trying address lack meaning shorthand symbols events bindings think quite good amp nt mean anything confusing since binding types common always check docs get right maybe could something like maybe even filter suggestions even keep bad expressive maybe bit confusing beginners", "d": "9/2015"}, {"body": "syntax eg looks like invalid xml basically way syntax could even work acasar proposal feels valid", "d": "9/2015"}, {"body": "problem current alpha syntax work without syntax work nt guys think second one preferrable related things grouped together avoiding confusion less code repeating would even cleaner", "d": "9/2015"}, {"body": "step let replace terminal directives controlflow tags concept terminal directive really exposed user normal user reactive vs literal every directive reactive default seems simple enough work webdev many examples directives like placing anywhere element html templates difficult reading looks like game directive directive think proposal make directives like elements bad comparison brings unification case single right way directives listed important propagate influence child elements", "d": "9/2015"}, {"body": "mentioned many times use control directives tag get exact result keeping code style consistent nothing library library force opinion form like brings unnecessary verbosity template punished meet someone expectations", "d": "9/2015"}, {"body": "simplesmiler deal people may put attribute end attribute list completely unreadable case visually scan line element make sure terminate directive proposal little bit longer errorprone possible implement syntaxes", "d": "9/2015"}, {"body": "syntax already use tue sep nikolay karev notifications githubcom wrote simplesmiler deal people may put vif attribute end attribute list completely unreadable case visually scan line element make sure terminate directive proposal little bit longer errorprone possible implement syntaxes reply email directly view github", "d": "9/2015"}, {"body": "simplesmiler punished meet someone expectations punished punished someone else judge expressed opinion proposal karevn believe could find compromise could find intuitive", "d": "9/2015"}, {"body": "nervgh sorry going happen nt see offers substantial benefits substantial enough warrant yet another breaking change", "d": "9/2015"}, {"body": "supporting etc avoid bc breaks let ppl choose happy problems except fact stuff build maintain", "d": "9/2015"}, {"body": "two ways something unless shorthand double docs users would need learn two ways", "d": "9/2015"}, {"body": "yjeroen consider shorthand ca nt difference note fact actually", "d": "9/2015"}, {"body": "actual discussion drifted away quite bit original post new syntax works mostly intuitive enough utilise go without consulting docs last vue project something thing struggling difference binding types hard grasp difference syntax rest looks easy enough accept move smiley positive statement", "d": "9/2015"}, {"body": "agree yjeroen two ways something even pain big project someone definitely something similar different way people go wtf every time see would even try search special meaning story method every single new developer beginning believe special meaning regular thought triggers special listeners something problem adding property component ofc", "d": "9/2015"}, {"body": "arrilot need attribute condition expression becomes nt better plus added new api makes people happy end different ways thing", "d": "9/2015"}, {"body": "nirazul binding type indicator assume people somewhat used possible provide verbose version special symbols shorthands maybe get rid could also apply literal directives", "d": "9/2015"}, {"body": "karevn implied control structures independent tags intuitive using attributes languages statements container control blocks attributes simple counter argument case css want show hide particular element would normally apply remove class element html stuff would nt wrap element another one purpose hiding html stuff also comparing vue languages even frameworks probably fallacy one insists compare directive angular used attribute intents purposes identical", "d": "9/2015"}, {"body": "use instead dots von uses syntax html suggestion would html", "d": "9/2015"}, {"body": "yjeroen actually think makes sense use modifier colon already double meaning arguments bind shorthand html think look pretty consistent although introducing sort another concept super easy read understand maybe drop use", "d": "9/2015"}, {"body": "although nice concise semantic benefits outweigh former", "d": "9/2015"}, {"body": "shorthand could twoway binding considered default dot modifier supplied would equivalent", "d": "9/2015"}, {"body": "youngsteveo currently consensus among major frameworks component dataflow topdown default twoway bindings allow child component mutate parent state makes sideeffects harder reason want explicit indicators", "d": "9/2015"}, {"body": "okay makes sense could one way considered default dot modifier supplied", "d": "9/2015"}, {"body": "youngsteveo yes current semantics props", "d": "9/2015"}, {"body": "aha good idea nt argument similar modifier problem see bind shorthand consistency issues see well shortened replaced shortened colon replaced well vs cases vxxx colon thought using colons argumentmodifier although colon way prettier decision drop semantic benefits", "d": "9/2015"}, {"body": "yjeroen think postfix html double duty colon tiny issue think ok ambiguity leading colon denotes shorthand colon directive name denotes argument consistent imo arg optional part full directive syntax theory keeping everything consistent also able", "d": "9/2015"}, {"body": "yes right see better rereading post actually reading code instead looking character differences clear read", "d": "9/2015"}, {"body": "quite like direction going favouring expressiveness short type opinion better way go expressive syntax always strong advantage vue however two questionsremarks prefer verbose wording onetime twoway binding types instead sync clear synonym onetime sync sync child property back parent shorter type without dash look seamless completely understand need introduce modifiers since mind needlessly add complexity structure much prefer multiple arguments separated colon explanation way almost think directives normal functions default argument values von event key expression gt function von event key expression vbind property binding expression gt function vbind property binding oneway expression", "d": "9/2015"}, {"body": "acasar sounds good describing original indicator types reasons using modifiers prevents ambiguity colon usage especially shorthand vs colon nt make sense literal modifier would look like argument proposal literal directive syntax still demands special concept semantically modifier already concept buried cryptic syntax arguments pretend", "d": "9/2015"}, {"body": "thanks reply makes sense noticed one thing explained original post proposal aims eliminate micro syntax expressions bind multiple classes single element currently like", "d": "9/2015"}, {"body": "special char like acceptable consider original syntax like", "d": "9/2015"}, {"body": "sync", "d": "9/2015"}, {"body": "acasar use object literal", "d": "9/2015"}, {"body": "hax considering nt compose well modifier syntax discussing", "d": "9/2015"}, {"body": "seems use indicate twoway binding sure strong use case binding anyway use bind event symbols indicate twoway binding interesting idea example use use twoway binding dolls", "d": "9/2015"}, {"body": "guess something like since seems really verbose common use case could nt make simpler making consistent event syntax could true style since special attribute besides class", "d": "9/2015"}, {"body": "hax personally nt like decision using indicating twoway overloads semantics listening events triggers digest cycle vue nt need digest cycle semantic mismatch also sure good idea copy syntax something works", "d": "9/2015"}, {"body": "acasar two braces even shorter reason like keep single attribute native counterparts also single attributes", "d": "9/2015"}, {"body": "something similar symbols makes really easy read template personally big fan symbols html", "d": "9/2015"}, {"body": "sure dotnotation definitely good decision drop cryptic notations totally thing exchange easy wrap mind around acasar start worrying complicated syntax arguments maybe right time outsource object javascript", "d": "9/2015"}, {"body": "azamatsharapov think symbol better longterm angular add symbol sugar though symbols angular chosen may fit vue", "d": "9/2015"}, {"body": "hax longterm hmm think actually using symbols better longterm read template time reading plain english easier symbols", "d": "9/2015"}, {"body": "azamatsharapov symbols may little learning curves suit common concept use operators write plain english please understand nonenglish users like plain english plain smile", "d": "9/2015"}, {"body": "hax funny concept though math symbols people get lower grade school seen many people nt know meaning", "d": "9/2015"}, {"body": "hax use operators study math school find easy spot means id html number real life vue using plain english almost everywhere look api docs yeah ca nt argue nationality may find easy memorize symbollike api", "d": "9/2015"}, {"body": "sorry good examples maybe better examples jquery even better example anyway know different thought example coffeescript replace many symbols plain english read coffeescript code without syntax highlighting find terribly kill eyes could read section readable think", "d": "9/2015"}, {"body": "decided main latest syntax reference separate discussion thread avoid confusions outdated proposalsreferences always refer thread latest proposal", "d": "9/2015"}, {"body": "latest proposal binding type indicators shorthand syntax omission dropped short syntax binding type indicators mind asking clarification", "d": "9/2015"}, {"body": "latest proposal dream coming true", "d": "9/2015"}, {"body": "considering latest syntax something like possible", "d": "9/2015"}, {"body": "latest proposal nice question warning raised people use camelcase reference instead using dash foresee people forgetting", "d": "9/2015"}, {"body": "yjeroen even possible thought browsers get rid case also like proposal going syntax getting really consistant", "d": "9/2015"}, {"body": "fairly large app written lurking interest waiting dust settles think converting looks coming together nicely wonder though spirit keep vobvious worth deprecating vel vref great like bindings treating simply shorthand element reference would make obvious easier explain well catering like readabilityverbosity think", "d": "9/2015"}, {"body": "small consistency improvement prevent anyone misunderstanding dotnotation suggest following change html", "d": "9/2015"}, {"body": "could explicit", "d": "9/2015"}, {"body": "fullfs yes", "d": "9/2015"}, {"body": "josephsilber tentatively dropping short syntax type indicators since explicit yjeroen seems impossible moment definitely looking solution looks like thing still seem bit unresolved replacement still keep eye", "d": "9/2015"}, {"body": "nice need", "d": "9/2015"}, {"body": "fullfs gone far say", "d": "9/2015"}, {"body": "fullfs simplesmiler nt decided whether remove yet bit verbose exact thing", "d": "9/2015"}, {"body": "tentatively dropping short syntax type indicators since explicit mean", "d": "9/2015"}, {"body": "could maybe add changelog next time change nt think see timestamp edit last time", "d": "9/2015"}, {"body": "thought still rooting make adding class condition little easier right code bad still tiny downgrade length readability object literals still form microsyntax understand natively single attribute every event attribute still add multiple handlers single element think would pretty much way also possible define multiple event handlers using object literals exclusive", "d": "9/2015"}, {"body": "acasar would nt call object literal microsyntax javascript expression know write javascript know write object literal point removing microsyntax always safely assume directive takes single expression event handlers use multiple attributes handle different events native syntax eg fact allow key modifier native syntax would force key detection javascript strict improvement hand nt see offers readability improvement object literal problem allows split classmanipulation logic multiple attributes mismatch native counterpart think two ways thing clear benefit example vs shorthand alternative syntax nt offer specific benefits removed considering removing altogether use", "d": "9/2015"}, {"body": "since curly braces used mustache expressions seeing single braces used object literals bit jarring even though nt allow mustaches attributes anymore always safely assume directive takes single expression mean would nt directive get object", "d": "9/2015"}, {"body": "josephsilber object literal valid javascript expression", "d": "9/2015"}, {"body": "latest syntax wonderful reads really well intuitively respect", "d": "9/2015"}, {"body": "thanks latest alpha release really like syntax think could find even concise wording modifier like example since essentially passing raw value nt parsed", "d": "9/2015"}, {"body": "acasar like since literals used place probably literal makes sense shorten name sure though vm variables raw literal strings", "d": "9/2015"}, {"body": "maybe string", "d": "9/2015"}, {"body": "thought shortening much less selfexplanatory", "d": "9/2015"}, {"body": "josephsilber like really short since passing raw value somehow appropriate options like expressive end fine using quotes probably work anyway since valid expression", "d": "9/2015"}, {"body": "another viable option", "d": "9/2015"}, {"body": "think precise semantic name use value literally interpolate aside nt even know directive binding debate mentioned official vue docs anywhere finally found vuerouter use grapnel routing apps propsbindings literal", "d": "9/2015"}, {"body": "simplesmiler laughed would open possibilities like validation future mean", "d": "9/2015"}, {"body": "shorter explains intent even better would mistake knowing value would string number", "d": "9/2015"}, {"body": "prefer reference type validation anything else related type value example parsing prefer etc", "d": "9/2015"}, {"body": "extra letters really hard deal imo semantically accurate important concise especially letters difference", "d": "9/2015"}, {"body": "looks bit long compared others makes different among", "d": "9/2015"}, {"body": "noticed change beta going way mean previously directive option like directive special syntax something simple name potentially overlapping almost anything", "d": "9/2015"}, {"body": "fullfs vue components already modeled web components custom elements contentslot api web components use normal elements indicate turn another element already using dynamic components", "d": "9/2015"}, {"body": "regarding vs something shorter personally nt mind extra characters however thelinuxlich brings good point vlink get string number technically literals case made using well explains intention pass value directive without parsing expression confusion parsing problem solved sufficient documentation felt worth drawing attention felt really good point might missed", "d": "9/2015"}, {"body": "morgul nt think evaluate syntax based make sense without docs impractical rather think evaluate syntax make sense enough need read docs may better reflect end result value bound string better reflects intent directive either reactive literal reactive directives take expressions literal directives take strings directive reactive default modifier makes literal reflect underlying difference", "d": "9/2015"}, {"body": "said agree", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "alright agree completely onboard", "d": "9/2015"}, {"body": "reactivenonreactive maybe something", "d": "9/2015"}, {"body": "might little messier nice shorthands must use colon vdirective besides though important rails users would feel bit inconvenient handle attributes contains colons use rails code generate html least hope syntax would remain release way directives alias basic directives like ok needed include attr name vue would framework project xd", "d": "9/2015"}, {"body": "cicholgricenchos colon necessary directive names contain hyphens know directive called", "d": "9/2015"}, {"body": "closing issue specific concerns please post forum instead", "d": "9/2015"}, {"body": "really depends drag drop lib using render mechanism may conflict party lib trying", "d": "9/2015"}, {"body": "closing repro", "d": "9/2015"}, {"body": "masonry relies element already inserted read width height wait vm attached masonry directive", "d": "9/2015"}, {"body": "thanks lot triggering window resize actual component attached get around issue feels better also helps keep unbind directive happening quickly getting weird right transition component comes", "d": "9/2015"}, {"body": "intended destroyed vm used want reuse component js var app vueextend template mount empty div append app instead mounting var app new app mount appendto app destroy old one app destroy true create new instance mount app new new app mount appendto app however sounds like rare use case want destroy remount instead resetting state app", "d": "9/2015"}, {"body": "thanks use way yes think abnormal usage smile trying reuse vuecomponent within meteor blaze template", "d": "9/2015"}, {"body": "dammit", "d": "9/2015"}, {"body": "use case fri sep pm jonas laursen notifications githubcom wrote noticed callback watch function called value set current value would nice option callback called even though value fiddle demonstrating behavior open console see callback called value set value twice row reply email directly view github", "d": "9/2015"}, {"body": "point api triggers value actually changed vue also buffers multiple changes event loop callback trigger latest value making trigger every set defeats purpose sure better way achieve want closing feel free continue discussion maybe start new thread trying vuejsdiscussion instead", "d": "9/2015"}, {"body": "case plot new value graph every time changes updating value changed graph represents wrong image change time", "d": "9/2015"}, {"body": "would need update graph value changed", "d": "9/2015"}, {"body": "trend change time imagine value changed times value changed times graph flat line followed small increment updating value changes graph turns continuously rising line instead obviously make event fire get new data trigger graph update may big issue", "d": "9/2015"}, {"body": "always rerender setinterval rather inside watch callback", "d": "9/2015"}, {"body": "ever better idea thanks", "d": "9/2015"}, {"body": "another thing store latest value list n latest values n number points drawn yet another one store alongside actual value increment callback watch callback draw graph", "d": "9/2015"}, {"body": "intended change old behavior formatting value user type results awkward ux scenarios found much natural useful let user type whatever want format later twoway filters originally designed want limit typed input add listener update input value", "d": "9/2015"}, {"body": "\u628a", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "real world use case", "d": "9/2015"}, {"body": "small use cases register everything globally large apps much maintainable component explicitly depend needs maybe useful situations benefits comes global tradeoff idea behind something marginally useful negative implications maintainability let remove", "d": "9/2015"}, {"body": "yep application popup window complex structure custom editor elements elements combined levels hierarchy making inefficient declare explicitly parent element parent types declared elements lines repeating code also good register globally never appear parts application love loaded locally", "d": "9/2015"}, {"body": "importing explicitly worthwhile repetition allows look component hierarchy alone understand dependencies come implicit fallback wo nt remember imported components hierarchy months later", "d": "9/2015"}, {"body": "good memory thanks remember app consists two different pieces registering welldefined set components specific would prefer choice load assets suspect thing happened custom directives filters let share impression worked went well minus minor learning curve things minimalistic clean api syntax reliable code became worse better code repetition features use removed making rewrite code starting think made mistake choosing vue react sure breaking changes waste time future", "d": "9/2015"}, {"body": "karevn much helpful actually list specific things made dev experience worse addition issue prereleases means api stability guarantee first place value stability stick wait stable also final migration release using prerelease means agreed deal constant breaking changes even released probably good idea use nonreleased workinprogress branch designing api based experience feedback entire community entitled whatever think feel free switch frameworks changes direction like fact react also import everything explicitly repeat even stuff", "d": "9/2015"}, {"body": "reading discussion almost agree really nt see point removing existing code provided feature instead making default tastes differ people prefer fallback approach intuitive sometimes especially components loaded dynamically worked around mixins factories etc takes precious time sure thing always balance ideal architecture cost changes case lines code namely would hurt anyone left cost significant time use unstable version really need readwrite binding filters feature probably backported see question api prefer prefer vue period question rely vue api long term reliability handsomeness changes breaking serious reason case new binding syntax broke code okay let readable forces better code structure case nope change might nonbreaking set default", "d": "9/2015"}, {"body": "yes upgrading always come pain refactoring chance vue break free legacy config options strictly semver nothing break want last long possible reliability issue talked regarding strict mode surely costs refactoring time heavily relied ideally new users pick vue nt even need know thing existed api surface small possible global structuring pattern consistent possible making possible disable strict mode essentially encourages two different styles structuring vue apps imagine people working one app uses moving another project uses creates fragmentation developer experience want get rid possibility reasonable place kind unlucky caught middle transition appreciate feedback needs done done", "d": "9/2015"}, {"body": "please provide reproduction", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "ids must unique point", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "totally agree", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "tried syntax find browser transform camelcase lowercase means write somecomp transform somecomp destroys benefits easy discover", "d": "9/2015"}, {"body": "terencez thanks pointing think solved adding warning suggests using dashcase auto converts camelcase like props", "d": "9/2015"}, {"body": "oh actually gets converted browser parsing really way detect guess make clear docs", "d": "9/2015"}, {"body": "alternatively html", "d": "9/2015"}, {"body": "actually something node intuitive esp new users clues guess wat stands even experienced users also make mistake using", "d": "9/2015"}, {"body": "ya also think alternative notation intuitive confused esp new users uses dot notation js equation template later seems assign imo although old notation let user remember transform nonintuitive confused", "d": "9/2015"}, {"body": "disagree argument notation intuitive even chrome devtools browser devtools selector syntax quite together ubiquitous jquery syntax many developers clear means select store variable", "d": "9/2015"}, {"body": "terencez nirazul agree", "d": "9/2015"}, {"body": "\u8fd8\u662fvref", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "zhongxingdou english please", "d": "9/2015"}, {"body": "people complaining intuitive could change instance properties instead html", "d": "9/2015"}, {"body": "thelinuxlich", "d": "9/2015"}, {"body": "thelinuxlich hmm looks like prop component though prop ref modifier say something like html let rename", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "agreed", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "ok maybe plaintext would nt hurt comprehension still love aliases use html", "d": "9/2015"}, {"body": "nirazul necessary shorthand something short nt think", "d": "9/2015"}, {"body": "seems necessary vbind von nt get difference shorness ease use", "d": "9/2015"}, {"body": "nirazul makes easier except used old syntax explicit easier remember new users", "d": "9/2015"}, {"body": "totally agree main syntax reason like decision drop really accustomed dollar syntax name dom references leading since forever syntax appealed nt want see go without least trying convince nevermind changes look promsing", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "wow ca nt believe finally lol", "d": "9/2015"}, {"body": "fiddle uses sure want ran working fine", "d": "9/2015"}, {"body": "simplesmiler oh thank swift response closing issue", "d": "9/2015"}, {"body": "ie \u4e0d\u652f\u6301\u539f\u751f template tag \u6240\u4ee5 template table tr \u4e0a vrepeat \u5373\u53ef", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "\u53ef\u4ee5 tue sep pm hbshun notifications githubcom wrote reply email directly view github", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "bug report \u548c feature request \u63d0\u95ee\u53ef\u4ee5\u5230", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "started working send pr soon", "d": "9/2015"}, {"body": "great", "d": "9/2015"}, {"body": "close let continue discussion pr thread", "d": "9/2015"}, {"body": "scoping issue require explicitly passing props type checks work expected disable type checking component", "d": "9/2015"}, {"body": "good point", "d": "9/2015"}, {"body": "read scoping difference", "d": "9/2015"}, {"body": "btw probably need update mustachetype props bindings replaced syntax anyone faced problem done", "d": "9/2015"}, {"body": "nav native element nt using component first place wed sep terencez notifications githubcom wrote find component name defined set optionscomponents implicit component name nav template lead max call size exceeded way disable behavior expect rename component name nav others reply email directly view github", "d": "9/2015"}, {"body": "think source vue checked tag name native html registering component might mistaking though", "d": "9/2015"}, {"body": "azamatsharapov missed new ones", "d": "9/2015"}, {"body": "closing think renaming obvious thing good idea avoid ambiguity native element vs recursive calls", "d": "9/2015"}, {"body": "copypaste typo examples opening different tag closing", "d": "9/2015"}, {"body": "youngsteveo oops fixed", "d": "9/2015"}, {"body": "would mean would work html element still workaround", "d": "9/2015"}, {"body": "youngsteveo would work anything", "d": "9/2015"}, {"body": "think mixing syntax vuecomponents syntax web components bad idea", "d": "9/2015"}, {"body": "question stay similar would become stay", "d": "9/2015"}, {"body": "nervgh vue components modeled web components already uses custom elements slot api yjeroen stay part component special vocabulary", "d": "9/2015"}, {"body": "new syntax javascript object literal ca nt mix filters pipe whole object filter cases probably want bind style computed property inlining filters multiple properties messy", "d": "9/2015"}, {"body": "makes sense think readable warning compatibility reasons", "d": "9/2015"}, {"body": "object repeat guarantee order javascript specified spec thus enginedependent need order guarantee use array use filter", "d": "9/2015"}, {"body": "upcoming", "d": "9/2015"}, {"body": "hbrls yes", "d": "9/2015"}, {"body": "\u53ef\u4ee5\u7528\u81ea\u5b9a\u4e49 filter key filter", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "writing blur necessary ensure correct twoway filter behavior write function must called order determine wether model value changed wo nt anything value remains current model value", "d": "9/2015"}, {"body": "hmm think warning may aggressive consider remove unobservable object warning", "d": "9/2015"}, {"body": "feeling warning unobservable objects fully ignored try put together example", "d": "9/2015"}, {"body": "vue convert keys nonnative objects replacing still reactive eg ca nt expect reactive", "d": "9/2015"}, {"body": "sure thing feeling confirmed formal tests completely ignored passed props gives field", "d": "9/2015"}, {"body": "nah works expected nt show jsonstringifiable", "d": "9/2015"}, {"body": "hmm makes sense bit confusing nt know jsonstringifiable nt think placeholder indicate object would great", "d": "9/2015"}, {"body": "yeah could use improvement future priority moment", "d": "9/2015"}, {"body": "trying pass result service call contains array dates route data hook throwing warnings turn debug mode able see useful logs spamming console", "d": "9/2015"}, {"body": "cheapsteak warning going removed next release", "d": "9/2015"}, {"body": "short screencast see problem", "d": "9/2015"}, {"body": "fixed small hack", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "yeah currently possible adhoc good standardize api", "d": "9/2015"}, {"body": "looks want actually way inject global mixin achieve like extend default vue instances behavior applied every single vue instance created however undocumented moment could make something like js apply global mixin vuemixin created function optionsmycustomoption consolelog optionsmycustomoption new vue mycustomoption gt one advanced use case may need special handling merging custom option values example hook special merge strategy merges multiple hook functions array called default strategy simple overwrite need custom merge strategy need register", "d": "9/2015"}, {"body": "sounds good mixin plugin hook every event merge strategies make also sense since might differ depending plugin option", "d": "9/2015"}, {"body": "issue occured vuevalidator maybe could solve issue try fix issue vuevalidator thanks", "d": "9/2015"}, {"body": "trace call stack tried switch debug mode", "d": "9/2015"}, {"body": "remove warning next version", "d": "9/2015"}, {"body": "azamatsharapov impact thing warnings warn trace data", "d": "9/2015"}, {"body": "yeah nt notice getting warning thought error wants see trace", "d": "9/2015"}, {"body": "probably related", "d": "9/2015"}, {"body": "supported current already support read filters twoway filters", "d": "9/2015"}, {"body": "questions posted vuejsdiscussion instead main repo", "d": "9/2015"}, {"body": "please post questions vuejsdiscussion", "d": "9/2015"}, {"body": "order make array filters like work array object repeats preconverts values arrays piping filters thus avoid returning nonarray values inside filters case better convert array another array rather object use method workaround future versions raise warning return nonarray values filter", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "answers question well", "d": "9/2015"}, {"body": "\u4ee5\u540e\u95ee\u9898\u8bf7\u53d1\u5230", "d": "9/2015"}, {"body": "\u989d", "d": "9/2015"}, {"body": "mouseup select index select index \u5728 notifications project \u53ea\u80fd parentlist set reply email directly view github", "d": "9/2015"}, {"body": "tcdona", "d": "9/2015"}, {"body": "sinoon hi function return \u73b0\u5728\u4e3b\u8981\u662f\u60f3\u5355\u72ec\u64cd\u4f5c project \u53ea\u80fd vmprojectlist set \u91cd\u5199\u6240\u6709\u7684\u6570\u636e\u7684\u65b9\u5f0f\u89c9\u5f97\u5f88\u4e0d\u4f18\u96c5 \u4ee5\u4e0a\u6211\u90fd\u6574\u7406\u5230 vuejsdiscussion", "d": "9/2015"}, {"body": "sinoon", "d": "9/2015"}, {"body": "\u4e0d\u884c\u662f\u56e0\u4e3a\u4f60\u7684\u521d\u59cb\u6570\u636e\u5bf9\u8c61\u91cc\u9762\u6ca1\u6709 vue \u5bf9\u8c61\u4e5f\u53ef\u4ee5\u76f4\u63a5 \u6570\u7ec4\u7684 \u4e0d\u63a5\u53d7 sinoon", "d": "9/2015"}, {"body": "vue", "d": "9/2015"}, {"body": "think need listen resize event window update mobile field handler", "d": "9/2015"}, {"body": "every single component seems repetitive trying avoid already know could get working like hate every single one main vue instance components fire main vue instance always default value", "d": "9/2015"}, {"body": "store check screenwidth method expensive use mixin btw type questions posted vuejsdiscussion instead", "d": "9/2015"}, {"body": "options", "d": "9/2015"}, {"body": "thanks problem solved try add guide later section guide wrong nt option still gets rendered tags around intended components implicitly get replace false option template", "d": "9/2015"}, {"body": "option used default changed guess guide slightly date needs updating", "d": "9/2015"}, {"body": "guide updated", "d": "9/2015"}, {"body": "mistake nt read guide carefully use registered component parent instance template make sure component registered instantiate root vue instance", "d": "9/2015"}, {"body": "looks like plugin creating nonobserved fields fly recommended practice still work though", "d": "9/2015"}, {"body": "edit explicit", "d": "9/2015"}, {"body": "nicee nt know looked directives obviously close enough sorry posting silly question variable passed data object like read documentation sure fully understanding got working documentation says use style object like elementstyleheight access like elementstyles appropriate behavior", "d": "9/2015"}, {"body": "yes like usually make computed property though", "d": "9/2015"}, {"body": "nt computed properties typically concatenation sort heavy logic replacing value key though", "d": "9/2015"}, {"body": "plus move computed properties tag ca nt read js data function return current current slide speed speed animation slide count many slides slider object thumbnailheight height thumbnails slidewidth style width height marginleft margin left entire slider container flip slides computed function return styles width function return thisstylewidth px height function return thisstyleheight px marginleft function return thisstylemarginleft px ca nt access thisstyles component vstyle styles wo nt work anymore read data method computed would like use computed automatically add thisstyleheight px getter instead typing px everywhere", "d": "9/2015"}, {"body": "ie throwing away mustache tags inside attributes longknown issue using vstyle preferred compatibility last comment using wrong syntax computed", "d": "9/2015"}, {"body": "see computed properties things inferred existing data styles fall description would", "d": "9/2015"}, {"body": "oh thank", "d": "9/2015"}, {"body": "need connect global vm option becomes available data binding", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "scope gotcha use component root node compiled parent scope actually sends parent scope nt instead automatically available inside component see note replaced different scoping behavior works way expected", "d": "9/2015"}, {"body": "ah figured anyway achieve read guide would like pass prop index value", "d": "9/2015"}, {"body": "nt need access inside component template already", "d": "9/2015"}, {"body": "want access component though template wanted pass prop inside vue component wanted access prop component code know slide thumbnail refers", "d": "9/2015"}, {"body": "inside component", "d": "9/2015"}, {"body": "oh wow thanks nt realize easy", "d": "9/2015"}, {"body": "way get inside template upd decided problem", "d": "9/2015"}, {"body": "thanks", "d": "9/2015"}, {"body": "global keypress events dispatched elements better handle global keypress events separately eg attach listeners component event", "d": "9/2015"}, {"body": "sorry novice example code", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "provide repro using", "d": "9/2015"}, {"body": "sure thing repro created", "d": "9/2015"}, {"body": "spent time nt think due comment issue affected looks like comment nodes output dom vue using vfor far tell issue caused something else ca nt seem resolve", "d": "9/2015"}, {"body": "ok anchor nodes empty textnode normal mode comment node debug mode code hacks around comment nodes also check empty textnodes", "d": "9/2015"}, {"body": "thanks info however nt resolve issue walk reproduction steps updated fiddle read property error still appears note happens dragging two lists like example dragging within list appears ok ideas", "d": "9/2015"}, {"body": "guess meant indeed performs superior fiddle", "d": "9/2015"}, {"body": "yes right thanks correction updated issue correct versions", "d": "9/2015"}, {"body": "actually situation seems complicated fix indeed improve performance still major performance regression using sufficiently complex large array items filtering slicing itemsit fine nearly unusable unfortunately nt time moment dig deeper set new fiddle demonstrates filtering works fine setting value js terribly slow inputting values vmodel input form reverted back", "d": "9/2015"}, {"body": "also situaton user input extremely slow ended implementing custom filter case", "d": "9/2015"}, {"body": "duebbert filtering computed property using array specify specific key filter like", "d": "9/2015"}, {"body": "regression filtering large arrays fixed duebbert would appreciate try", "d": "9/2015"}, {"body": "earliest monday sep evan notifications githubcom wrote regression filtering large arrays fixed duebbert would appreciate try reply email directly view github", "d": "9/2015"}, {"body": "tested seems fixed excellent work many thanks", "d": "9/2015"}, {"body": "still use snakecase declaring props options templates use camelcase refer parsed minus operation", "d": "9/2015"}, {"body": "actually meant something like fact coffee somecomponent vueextend props somevalue props somevalue type string html html somevalue underscore perfectly aligned coffeescript conventions declaring props html markup using totally acceptable difference vue would parse html attribute variable instead based optional config option", "d": "9/2015"}, {"body": "ca nt use html", "d": "9/2015"}, {"body": "right somehow nt thought looks like quite nice workaround issue anyway hand nt aligned html conventions least bit uncommon still think would nice feature vue solution makes happy smile thanks lot", "d": "9/2015"}, {"body": "close", "d": "9/2015"}, {"body": "thought related", "d": "9/2015"}, {"body": "nt fix bug unfortunately", "d": "9/2015"}, {"body": "please describe steps reproduce error", "d": "9/2015"}, {"body": "hi see link developer toolsfirebug open explain app list component working vrepeat ok need add search field searching list item change de vrepeat add letter filtering list remove letter clear search term occurs error thank", "d": "9/2015"}, {"body": "vuevalidator bug please open issue vuevalidator repo instead", "d": "9/2015"}, {"body": "hi sorry mistake thk", "d": "9/2015"}, {"body": "multiple clause longer supported make support array objects probably use one single computed property instead", "d": "9/2015"}, {"body": "bindstyle taking array good save lots additional computed properties achieve thing", "d": "9/2015"}, {"body": "add transition see red tip end section", "d": "9/2015"}, {"body": "specifically dom events tied dom dispatched user interactions therefore handled dom vue events often app internal logic emitted javascript handled javascript mixing two would likely cause confusion want simple write custom directive listen vue events though", "d": "9/2015"}, {"body": "likely due jsdelivr cdn errors version upgrade work fine", "d": "9/2015"}, {"body": "filters currently supported inside prop expressions probably", "d": "9/2015"}, {"body": "ok thx reading receiving", "d": "9/2015"}, {"body": "implemented", "d": "9/2015"}, {"body": "nt declare property wo nt observed two examples listed actually equivalent setting want unless fully understanding use case maybe option simply attaches nonobserved properties instance", "d": "9/2015"}, {"body": "moment first code block actually dealing problem event declare property starting hook hook maybe option statics simply attaches nonobserved properties instance mean statics keyword proposal add statics options vue", "d": "9/2015"}, {"body": "swannknani ah see problem vue private properties ca nt proxy prefixed properties found data maybe relaxed checking property already exists proxying", "d": "9/2015"}, {"body": "ok thanks understand maybe option statics simply attaches nonobserved properties instance ok implement something like order deal cases maybe pointed check property already exists proxying otherwise throw warning something like", "d": "9/2015"}, {"body": "swannknani thought probably bad idea may need add new private properties vue prototype future weird prefixed worked upgrade starts throw warning original use case using vector data binding expect reactive need declare data yes prefix", "d": "9/2015"}, {"body": "original use case using vector data binding expect reactive need declare data yes prefix nt need property reactive stop wrong declare straight component way access", "d": "9/2015"}, {"body": "nt need reactive nt declare still attach plain property vm eg", "d": "9/2015"}, {"body": "btw beneficial mean would documentation tests issue tracker used people without require vue directly would also make vue source code bit easier read since fewer files", "d": "9/2015"}, {"body": "see comment evan reply", "d": "9/2015"}, {"body": "thanks azamatsharapov missed thread guess close one extract", "d": "9/2015"}, {"body": "azamatsharapov thanks point thread", "d": "9/2015"}, {"body": "probably track exactly slow like people otherwise may hard help", "d": "9/2015"}, {"body": "info refers cpu profile cpu profile", "d": "9/2015"}, {"body": "questions lot complex computed properties tried building using production settings", "d": "9/2015"}, {"body": "tried building using production settings computed object", "d": "9/2015"}, {"body": "see understand turned default caching computed properties seems cached default nt want manually set cache false every computed properties like", "d": "9/2015"}, {"body": "add computed properties perf issue go away alpha default", "d": "9/2015"}, {"body": "yes works thanks good work", "d": "9/2015"}, {"body": "guess going back default", "d": "9/2015"}, {"body": "youngsteveo yep memory cost seems trivial compared situations like", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "refactored code removing two complex mindate maxdate set single method method manually called needed ajax calls less magic performant even cache set true", "d": "9/2015"}, {"body": "support atom somehow normal release trying get atom use vue would problem could option use strict mon aug pm evan notifications githubcom wrote closed reply email directly view github", "d": "9/2015"}, {"body": "markhahn csp support involves shipping entire javascript parserinterpreter file size becomes twice large two versions first place", "d": "9/2015"}, {"body": "understand pester atom team using strict tue sep evan notifications githubcom wrote markhahn csp support involves shipping entire javascript parserinterpreter file size becomes twice large two versions first place reply email directly view github", "d": "9/2015"}, {"body": "markhahn probably due restrictions chromium embedded framework atom running privileged app access file system allowing eval opens potential security loopholes also chrome os firefox os apps also enforce csp although environments file size nt matter anyway", "d": "9/2015"}, {"body": "size nt matter atom either already gigantic use one copy npm module packages make csp version available npm tue sep evan notifications githubcom wrote markhahn probably due restrictions chromium embedded framework atom running privileged app access file system allowing eval opens potential security loopholes also chrome os firefox os apps also enforce csp although environments file size doesnt matter anyway reply email directly view github", "d": "9/2015"}, {"body": "markhahn already", "d": "9/2015"}, {"body": "npm name tue sep evan notifications githubcom wrote markhahn already reply email directly view github", "d": "9/2015"}, {"body": "tag", "d": "9/2015"}, {"body": "yes vue csp works ok", "d": "9/2015"}, {"body": "thanks never seen syntax like thought versions tue sep pm notifications githubcom wrote yes vue csp works ok reply email directly view github", "d": "9/2015"}, {"body": "hmm seems vue csp nt work apm publish sure probably way include js file", "d": "9/2015"}, {"body": "hmm seems vue csp nt work apm publish please post issue atomapm thu sep pm notifications githubcom wrote hmm seems vue csp nt work apm publish sure probably way include js file reply email directly view github", "d": "9/2015"}, {"body": "closing inactivity", "d": "9/2015"}, {"body": "great first see options think voptions", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "use like", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "actually problem sorry nt see already issue opened", "d": "9/2015"}, {"body": "closing repro available", "d": "9/2015"}, {"body": "reference", "d": "9/2015"}, {"body": "would overridable globally andor per component per computed property", "d": "9/2015"}, {"body": "simplesmiler probably per property global override nt seem like good idea cases time disable caching know want access getter contains nonreactive dependencies eg datenow dom sizes", "d": "9/2015"}, {"body": "package manager bower vs package ready install via npm bower duo leverage favorite eco system", "d": "9/2015"}, {"body": "ok interesting thanks sep pm adam patarino notifications githubcom wrote practice dynamic components passing data children currently something like new spec would like reply email directly view github", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "holic vshow simple css toggling vif true conditional compilation example component inside vif destroyedcompiled vif toggled vif also lazy ie condition false load wo nt anything use really depends use case", "d": "9/2015"}, {"body": "number case vif nt work vshow never took trouble find going think vshow cleaner anyway nt change dom structure mon aug pm evan notifications githubcom wrote holic vshow simple css toggling vif true conditional compilation example component inside vif destroyedcompiled vif toggled vif also lazy ie condition false load wo nt anything use really depends use case reply email directly view github", "d": "9/2015"}, {"body": "never faster improve overall performance application removing dom elements nt need right things like modals dropdown menus", "d": "9/2015"}, {"body": "call method binding expression eg", "d": "9/2015"}, {"body": "holic toggling css element display noneblock vs compiling inserting new dom nodes think pretty obvious markhahn ive got edge case vif moment need look complete upgrade something along lines simplesmiler drop menus sure would vshow case unless dynamically generated", "d": "9/2015"}, {"body": "separate prefix use properties prefix becomes literal string also torn losing mustaches makes sense would nice still able bar baz value foo mycomponent string mean value foo always string always oneway binding way works actually means pass string pass number would break bc change changed string templating would consistent difference would subtle confusing would make sense think also taking logical extreme would mean bind variable whose name starts ends value", "d": "9/2015"}, {"body": "nkovacs attributes props different things means dynamically binding plain html attribute specifically data passing components original syntax basically guess something prop normal attribute also considering preserving mustaches normal attribute bindings mustaches inside never happen", "d": "9/2015"}, {"body": "well components basically custom elements nt really see much difference attributes properties would nice able able use mustaches literal strings properties instead side note would nt also make sense already works one way yes need special code handle twoway binding looks logical template reinforces properties attributes different", "d": "9/2015"}, {"body": "nkovacs idealistic view makes sense polymer vue vue components custom elements even real elements attributes properties different bad idea pretend explained proposal purpose prefix know follows always expression nt make sense mustaches inside expressions mustaches string interpolations appear inside plain strings vue templates string templates real html plus binding syntax want make explicit", "d": "9/2015"}, {"body": "sorry made mistake example tooltip property prefix", "d": "9/2015"}, {"body": "considering new binding syntax way bind clicks right sometimes use constructions like useful extending components", "d": "9/2015"}, {"body": "sep thoughts like get feedback one remaining problem new syntax literal directives previously reactive literal directives share prefix ideal see prefixed directive template remember whether literal order read understand value new syntax prefixed directives supposed reactive lose ability create custom literal directives sometimes actually useful example directive used vuerouter time want literal string value following reactivity rule need wrap inside quotes bit awkward thinking start ask really necessary keep prefix directives simply custom attributes example register directive named longer appears instead similar normal attributes also use prefix indicate reactivity core directives would become html indicates attribute values expressions simulate literal directive simply omit prefix suppose rename use follows html downside lose familiar prefix explicitly tells us something directive may also much conceptual shift current api find less disruptive way solve literal directive problem would great", "d": "9/2015"}, {"body": "fullfs maybe something like currently clean", "d": "9/2015"}, {"body": "ok like ability pass arguments functions ca nt imagine something like rejecting prefix actually thing vuerelated attributes", "d": "9/2015"}, {"body": "current v syntax readable mixing bind stuff would throw away useful visual information make less readable wed sep pm andrey notifications githubcom wrote onclick event event ok like ability pass arguments functions ca nt imagine something likeonclick event event sep thoughts rejecting v prefix actually thing vuerelated attributes reply email directly view github", "d": "9/2015"}, {"body": "also like prefix immediately recognize properties something vue process fixing app work see warning props declared child component one use case always trigger warning understood warning correctly page uses dynamic components components tabs utilizes different props end component looking like would advice case also transitions work plain element css transitions fails suspect may transition applied noncomponent nt time verify somewhat offtopic unobservable objects also giving headaches used able store variable display current time update timer every x seconds throws warning walker goes object stumbles date object inside complains seem fail nested component works fine top level simply switching back solves problem deprecation warning displayed", "d": "9/2015"}, {"body": "lot things normal html attributes component props directives expressed way html attributes one way make everything consistent would normal html attributes prefixed props prefixed directives prefixed everything attributes props directives literal default prefix something achieve reactivity downside verbose almost case except instead prefix used mustaches props prefixed directives implicitly reactive without mustaches another thing go using special symbols attribute names prefix suffix literal prefix oneway reactive prefix twoway reactive prefix onetime computed", "d": "9/2015"}, {"body": "alchen components stick certain probably implement single interface read set props", "d": "9/2015"}, {"body": "new approach like approach remove special cases little confusing makes consistent dynamic binding tag attributes special vue related directives would definitely like see prefix allows see related vue sure event syntax seems fine almost equal readability sure nt use much looking familiar without prefix agree accept expression default therefor ca nt without prefix maybe also reduce amount different variations still doubts looking cleanclear mustache way looks nicer performance without mustache better simplesmiler making everything literal default nt seems good way mostly use dynamic reactive binding vm properties instead passing plain string values think code became much bloated special symbols either best way makes code alien stuff first look person familiar enough vue", "d": "9/2015"}, {"body": "agree fullfs von expression based event handlers vprop prop expressions vbind expression based directives attributes v literal directives plain literal attributes nothing vue clean would nice likely impossible trying cram multiple namespaces single existing one element attributes", "d": "9/2015"}, {"body": "davidkhess suggestion looks quite nice", "d": "9/2015"}, {"body": "really appreciate feedback everyone updated proposal directives flow control amp form handling html handlers also used component props used like html literal directives add colon end directive name indicate literal html also eliminates need custom directive declare literal simply provide function used literal directive plain string passed function used dynamically value expression passed instead call changes note reason choosing colon practice nonalphabetic easilytypable chars allowed attributes names colon looks natural used assignment operator many languages", "d": "9/2015"}, {"body": "perfect", "d": "9/2015"}, {"body": "looks pretty good", "d": "9/2015"}, {"body": "looks nice much remember evaluated expected quite natural events ordinary attributes without prefixes always literal expected literal directives evaluated default also expected due prefix behavior could changed advanced usecase need worry really need", "d": "9/2015"}, {"body": "really like dropping prop simpler better still kind like vbind von otherwise think latest really good compromise competing design issues really like hack attribute name nice use xml namespace syntax", "d": "9/2015"}, {"body": "feels unique inverting logic suffix nosuffix rule simple nosuffix literal suffix reactive html update mnemonics write literal value assign variable", "d": "9/2015"}, {"body": "simplesmiler actually looks great makes rule simple get feeling event handlers look like colon hyphen longer necessary feels much cleaner hyphen html click double colon looks bit weird maybe colon used single purpose", "d": "9/2015"}, {"body": "clap", "d": "9/2015"}, {"body": "simplesmiler really looks even simple remember kind long type verbose read", "d": "9/2015"}, {"body": "seems little trouble syntax jade users", "d": "9/2015"}, {"body": "byodkm afaik jade handle fine valid attribute names", "d": "9/2015"}, {"body": "sorry tested mixin element needs care", "d": "9/2015"}, {"body": "think implemented fallback thus making syntax colon shorthand", "d": "9/2015"}, {"body": "simplesmiler nice", "d": "9/2015"}, {"body": "whether directive twoway bound decided directive props decided calling syntax default oneway twoway onetime would make sense apply rules directives directives special enough directive may require twoway syntax via declaration show warning called oneway syntax may performance benefit oneway directive called onetime syntax literal custom directives looks bit wordy explicitly says may modify value explicit oneway onetime may performance benefit well got complicated thought", "d": "9/2015"}, {"body": "agree nosuffix literal suffix reactive v directives nt need nt literal case", "d": "9/2015"}, {"body": "simplesmiler point twoway binding explicit enough imo however probably make sense something like sounds unnecessary best practice avoid mutating alias reference vue also handles special case use alias pointing primitive value negligible performance implications jfliu change core directives reactive still possible create literal custom directives eg vuerouter also important keep rule consistent whenever see know expression plain string", "d": "9/2015"}, {"body": "way plain text templating would still strings mean nice variables attributes plain text use syntax would seem different", "d": "9/2015"}, {"body": "fullfs still considering whether keep mustaches attributes problem slippery slope allow attributes people would think able use anywhere eg ok somewhat solved syntax rule mustaches allowed inside expressions still nt like two ways thing latter bit harder type keeps things consistent", "d": "9/2015"}, {"body": "practice dynamic components passing data children currently something like new spec would like", "d": "9/2015"}, {"body": "adampatarino still flux see comments simplified syntax would look like", "d": "9/2015"}, {"body": "ah yup like better definitely current consistency", "d": "9/2015"}, {"body": "see well synstax nice clear ps way okay actually mean sometimes nice dynamic", "d": "9/2015"}, {"body": "fair enough directives able replace many cases radio buttons textarea also files work either yet textarea would work lack value attribute radio buttons wo nt work bind guess possible hijack semantics attribute need anyway feels wrong say better stick warn binding another option would make special case directive radio buttons textarea", "d": "9/2015"}, {"body": "wow unfortunately seems ie handle attributes end colon fine stupid", "d": "9/2015"}, {"body": "unfortunate specifically colon angular deal angular templates full special symbols", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "simplesmiler afaik longer directly write real html templates angular everything parsed engine materialized dom specifically ie discards attributes ends colon thinks namespace followed empty string attribute name empty also weird situation attribute names like parsed browser try call name results error", "d": "9/2015"}, {"body": "guess revert syntax looks verbose compared ugghh hate ie much", "d": "9/2015"}, {"body": "oh actually ie handle attribute names start colon looks weird html also ie treats invalid leading char", "d": "9/2015"}, {"body": "feels lispy maybe edit hand probably worth", "d": "9/2015"}, {"body": "simplesmiler much different issue makes core directives verbose html", "d": "9/2015"}, {"body": "following bad people hate drop technical reason keep prefix maybe missed", "d": "9/2015"}, {"body": "moment verbose less expressive", "d": "9/2015"}, {"body": "would argue prefix easier spot rather easier miss suffix see following examples", "d": "9/2015"}, {"body": "arguments prefixing vuerelated properties give vue nice namespace work within avoids clashing frameworks eg one set could reactive another could literal", "d": "9/2015"}, {"body": "holic reactive indicator work props nt make sense prefixes", "d": "9/2015"}, {"body": "maybe edit nt look beautiful though", "d": "9/2015"}, {"body": "simplesmiler considered invalid spec unfortunately", "d": "9/2015"}, {"body": "since always treated expressions syntax could look something like trouble deal literal vs reactive always reactive prefix prefix treated regular directiveprop directives need prefix denote compiled differently regular directives", "d": "9/2015"}, {"body": "following option nt like want hear opinion need support ie run templates automatic tool turn growing", "d": "9/2015"}, {"body": "holic personally fine dropping prefix altogether instead think directives custom attributes instead prefixed attributes conceptual shift though people seem care lot knowing something vue specific html colon prefix read lispy think actually cool", "d": "9/2015"}, {"body": "use without prefix native attribute personally nt like dropping prefixes directives start clash normal attributes component properties regarding prefixes fine use unprefixed versions custom elements would work would still required least shenanigans props may clash normal attributes", "d": "9/2015"}, {"body": "rewrote todomvc colon prefix syntax holic pointed really easier spot", "d": "9/2015"}, {"body": "maybe overthinking get rid concept literal directives prefixes always means expressions colon prefix essentially syntax sugar directives like simply need quotes seems like okay tradeoff considering cost differentiating literal reactive html", "d": "9/2015"}, {"body": "like simple clear custom directives prefix remain", "d": "9/2015"}, {"body": "finico prefix remain custom directives", "d": "9/2015"}, {"body": "directives like simply need quotes ugh directives reactive literal", "d": "9/2015"}, {"body": "josephsilber", "d": "9/2015"}, {"body": "yeah could work guess ie ok quacks colon", "d": "9/2015"}, {"body": "yep found implemented colon syntax sat sep pm joseph silber notifications githubcom wrote yeah could work guess ie ok quacks colon reply email directly view github", "d": "9/2015"}, {"body": "vuejs user may add two cents much prefer expressive syntax instead messy yes takes milisecond longer write reads well looks good far important mind also liked much vue properties prefixed really important visual clue thrown window easily actually prefer see something like html", "d": "9/2015"}, {"body": "think better since used separating words property names coud make shorthand syntax developer choose one use", "d": "9/2015"}, {"body": "maybe suffix could optional shortened think consistent would provided defaults", "d": "9/2015"}, {"body": "acasar think prefix overrated also pretty obvious spot vue already uses custom elements custom attributes directive params nt look vue specific vocabulary library get used another reason dropping semantically different directives event handling different data binding means make whatever attribute follows reactive makes applicable normal attributes component props using props feels semantically wrong finally shortening creates confusion", "d": "9/2015"}, {"body": "latest proposal updated original post without literal directive special case yet", "d": "9/2015"}, {"body": "sure like fact colon used two different contexts start attribute name indicates reactivity middle attribute name separates name filter might little confusing", "d": "9/2015"}, {"body": "josephsilber also thought kind confuse colon syntax optional shorthand could fine", "d": "9/2015"}, {"body": "latest proposal great agree everything love shorthand syntax people would like everything v prefix cmon directives", "d": "9/2015"}, {"body": "bemoaning lack directive though", "d": "9/2015"}, {"body": "josephsilber still renamed", "d": "9/2015"}, {"body": "something like hold hats folks late little loopy html leave hyphens wordseparators leave colons separating vue stuff stuff attribute names doublecolon binding switch second colon denote twowayonetime bindings valid attribute name according attention grabbing", "d": "9/2015"}, {"body": "sethlopezme looks confusing tbh especially directives seed vue colonel smile", "d": "9/2015"}, {"body": "hmm looking latest proposal would like point would many different styles nt bindattr bind attr makes sense optionally drop bind happened v bind styles binding", "d": "9/2015"}, {"body": "yjeroen colon shorthand optional nt use binding attributes consist alphanumeric chars hyphens consistent nt make sense together less confusing use colon one purpose using first char literal literal already means take literal string bindings one special char followed expression api since different syntaxes different types bindings directives event handlers attributeprop bindings prefixing everything prefix nt make complexity go away want explicitness previously three types mixed umbrella directives microsyntax using arguments multiple clauses giving event handlers attribute bindings syntax makes directives much simpler time makes binding types explicit realize binding types lowered number core directives complete gotten rid directive arguments multiple clauses", "d": "9/2015"}, {"body": "would mind point something directives syntax lately facing issue vmodel filters got components representing fields abstract form fields could used multiple times template different data templates contains example inputs vmodel filter something like issue filter nice fields filters form config represented simple js object question way make filter name variable could controlled components data hope get feature ps felt like could related deciding directives syntax", "d": "9/2015"}, {"body": "fullfs nvm nt notice yeah currently impossible dynamically apply filters sounds like could solved designing components differently would need details though", "d": "9/2015"}, {"body": "still renamed different directives", "d": "9/2015"}, {"body": "josephsilber previous literal directives attributes literal default able", "d": "9/2015"}, {"body": "info regarding stylesclasses missing latest spec info", "d": "9/2015"}, {"body": "matmoo thanks added", "d": "9/2015"}, {"body": "think vue directive start v attributes nt prefix may mistaken attributes libs specially people begininng vue recently", "d": "9/2015"}, {"body": "renanvaz happening current proposal directives start v event handlers attribute bindings directives", "d": "9/2015"}, {"body": "renanvaz agree vue directives start important visual cue helps namespace vue without prefix feels like vue polluting global namespace", "d": "9/2015"}, {"body": "thelinuxlich believe attributes vue resources part lib prefix something essential identify resources part package regardless function see attribute begin v know know look", "d": "9/2015"}, {"body": "zfedoran sense global namespace false assumption likely never using two dombased databinding solutions together already using custom elements everywhere polymer aurelia amp angular use tons nonprefixed custom attributes well technically nt really matter mostly mindset issue use vue html managed vue anything native html attribute likely vuespecific frameworks dombased templating plus like long list three prefixes really hard remember pointed thelinuxlich explained comment event handlers attribute bindings different semantics directives", "d": "9/2015"}, {"body": "like see counter argument people developing huge single page apps anything helps code sanity welcome", "d": "9/2015"}, {"body": "thelinuxlich matters even less huge spas building spa framework means fully adopt framework idioms tolerance api intrusiveness higher think people advocating prefix mostly use vue enhancement existing html thus keeping vue easily spottable important understandable use case vue believe new syntax worthwhile tradeoff", "d": "9/2015"}, {"body": "dare repeat point prefixes without prefixes custom directives may clash component properties", "d": "9/2015"}, {"body": "simplesmiler keeping directives people arguing everything vue related", "d": "9/2015"}, {"body": "evan got question gone deal related shenanigans", "d": "9/2015"}, {"body": "suggestion make prefixes configurable us would really prefer vue attributes easily spottable change von bind vbind everyone happy", "d": "9/2015"}, {"body": "comments based development experience big small systems concern growth vue community startups focus one product focus specific tools believe detail use influence lot decision really would write cleanest syntax web producrs agencies large flow projects variety used libraries bigger detail makes much easier identify part package example someone trying maintain small project made vue undocumented resources help identify attributes part library used also seen cases systems part legacyold one area system reformulated used different lib case could also problems id package", "d": "9/2015"}, {"body": "renanvaz sure appreciate comment anyone picks project would still need learn vue btw need capitalize every character first prefix nt magically tell vue works learned know vuespeicific nt really make much difference practice", "d": "9/2015"}, {"body": "simplesmiler good question open new issue", "d": "9/2015"}, {"body": "people willing make much costlier sacrifices adopting framework like react feel like counterarguments lack substance kind rant disappears year p", "d": "9/2015"}, {"body": "think newbie html vue", "d": "9/2015"}, {"body": "rather learn upfront v bind knowing exactly feature get confused middle learning curve api seems inconsistent", "d": "9/2015"}, {"body": "honest like keep prefix useful seeing code tells like functionattribute something maybe something else prefix like see something special vuerelated attributes colon good one example going used literal directives right looks crazy also feeling first meeting directives options like wtf nt even right sometimes problem ca nt spot attribute ca nt detect something functional could take minutes understand going", "d": "9/2015"}, {"body": "agree fullfs new syntax learning curve much steeper remember almost everything prefixed vue used custom prefixes quite lot working wordpress environment control possible conflicts third party things worked without conflicts native html attributes clever modifiers minimalistic clear tons new syntax remember reason code clarity nt fix broken", "d": "9/2015"}, {"body": "broken horribly whole point way know template whether attribute value literal expression becomes confusing fast angular made mistake fixing angular aurelia also special syntax differentiate two behooves us remake mistakes others already rectified", "d": "9/2015"}, {"body": "josephsilber point still angular directiveswhatever something special syntax variables directives bindings ca nt see functional attributes looking like common attribute still opinion angular syntax mess glad see vuejs syntax nice clear compared angular", "d": "9/2015"}, {"body": "people complaining readability nt easier read sure super easy read anyone basic english knowledge think also saves time see everything may find looking api docs often speaks", "d": "9/2015"}, {"body": "azamatsharapov well nt bad worries talking readability important thing teammates chosen vuejs project simplicity short time required starting write really awesome work directive easy understand remember ps synonyms first used function bind events using", "d": "9/2015"}, {"body": "ps bind synonyms first used function bind events using sounds like ing much think evan mentioned somewhere would like remove thing better use said kind agree used times written projects vue already team use also prop like", "d": "9/2015"}, {"body": "like disagree terms using relied heavily two projects vuejs far perfect replacement messy classhooks pollute class namespaces cleaned dom initialisation gets used supposed used js automated really really great easy use", "d": "9/2015"}, {"body": "azamatsharapov places used project reliable", "d": "9/2015"}, {"body": "hmm interesting nt select elements js code much css yeah people code different", "d": "9/2015"}, {"body": "like thank everyone contributed discussion far think still issues disagree let recap stay would best syntax denote literal directive visually obvious without verbose awkward still question happy syntax either unprefixed special attributes agree less obvious vuespecific directives prefix nt make sense also need distinguish several types special attributes component props easily identifiable appear custom element components using component know props expects directive params eg attributes appear alongside directive uses similar components using directive know params accepts works multiple directives still appear alongside either component flowcontrol directive appear alongside components special case problematic people plain attribute linked directive component makes obvious vuespecific scanning template possible solutions find better syntax literal directives make literal directive moment feels bit awkward find different obvious syntax case accept special case one single attribute like find syntax clean explicit impossible bad idea try please everyone please make sure comments backed technical reasoning rather personal preference", "d": "9/2015"}, {"body": "thoughts expression bindings literal html", "d": "9/2015"}, {"body": "latest proposal btw extend syntax binding types sake consistency html also filters", "d": "9/2015"}, {"body": "fan far natural read fact current syntax works well ok maybe tweak another complete change", "d": "9/2015"}, {"body": "matmoo another option drop colon shorthand use reactive bindings literal bindings colon looks different plain attributes fact benefits stands providing visual clue lot people want always indicates reactivity", "d": "9/2015"}, {"body": "karevn normal attributes html primitive exception set strings dictionary maybe svg attributes like ordered list points commands", "d": "9/2015"}, {"body": "simplesmiler props future attributes may", "d": "9/2015"}, {"body": "latest proposal literal component property stands different html also since shorthand shorthand literal leading dash html think technically valid attribute", "d": "9/2015"}, {"body": "karevn pass expression prop attributes like basically special cases among native attributes attributes plain strings expect nt even make sense also future attributes may demand different ways handle value eg quite complex microsyntax impossible generalize mapping objectarrays final string unknown future attributes", "d": "9/2015"}, {"body": "another option drop colon shorthand use v reactive bindings v v literal bindings looks really consistent v clearly shows vue related things case matter habit already used old syntax new one looks weird sometimes", "d": "9/2015"}, {"body": "actually possible result binding expression passed attributespecific function future", "d": "9/2015"}, {"body": "variations comparison use dot instead colon indicate reactivity benefits looks cleaner shorthand actually reads quite naturally componentprop something html", "d": "9/2015"}, {"body": "karevn write function already right", "d": "9/2015"}, {"body": "would leading work ie", "d": "9/2015"}, {"body": "simplesmiler quite funny ie parse fine ca nt call leading luckily latter avoided work ie ie drops attributes ending even parsing phase", "d": "9/2015"}, {"body": "ca nt wait reverse binding filters support notation look good probably people confuse class definitions", "d": "9/2015"}, {"body": "karevn dot denotes class css nt see confusion comes", "d": "9/2015"}, {"body": "stylistically leading colon looks much better leading dot", "d": "9/2015"}, {"body": "css background may think method call outstanding coder mean others nt make learning curve steeper", "d": "9/2015"}, {"body": "karevn unfamiliar syntax steep learning curve learning curve api handles inherent complexity dot colon nt make difference complex things", "d": "9/2015"}, {"body": "favor syntax also josephsilber said reads much better leading syntax though thought hyphenated attribute w filter looked weird could perhaps something like also prop syntax way put attribute name always felt odd part value attribute perhaps something like edit actually nevermind last part nt valid apparently", "d": "9/2015"}, {"body": "dot colon notations look good also satisfied elref got back actually everything wanted also came idea dots colons could used onewaytwoway notations oneway one dot twoway two dots", "d": "9/2015"}, {"body": "really like discussion going everyone think best readable styles syntaxes looks quite messy use everywhere imho either", "d": "9/2015"}, {"body": "yjeroen yeah seems using literal introduces least amount change current html", "d": "9/2015"}, {"body": "btw new syntax think makes sense deprecate global config", "d": "9/2015"}, {"body": "testing internal changes actually expand characters usable attribute names still feel different prefixes reactiveliteral directives look stylistically weird consistently denoting directive whether literal looks weird using chars verbose really something special really directives leverage special chars like html finally move binding type indicator component prop value", "d": "9/2015"}, {"body": "last change binding type indicator nice rest ugly dollar sign directive name looks like", "d": "9/2015"}, {"body": "sorry dislike everything last comment excluding last one disappointed happen think looks waaay better ugh", "d": "9/2015"}, {"body": "definitely favor binding type indicators new syntax still sure though looks even odd using denote literal", "d": "9/2015"}, {"body": "note really sorta like thinking loud form said everyone different stylistic taste comments technically bad idea welcome nt like ughh really constructive", "d": "9/2015"}, {"body": "nt really much discuss technically besides ie quirks anything goes thought stylistic preferences", "d": "9/2015"}, {"body": "syntax consistency semantic correctness readability somewhat subjective everything stylistic preference wed sep pm joseph silber notifications githubcom wrote nt really much discuss technically besides ie quirks anything goes thought stylistic preferences reply email directly view github", "d": "9/2015"}, {"body": "going explicitness road like emberjs example mut keyword", "d": "9/2015"}, {"body": "thelinuxlich good point aurelia also uses syntax template going quite verbose think special char less tradeoff easier type succinct templates vs able understand going without reading docs although value latter quickly diminishes become familiar framework assuming keep binding indicators think idea indicating literal directive also adding special symbol makes sense keeps idea directives start consistent consistent prop binding type indicators special char use largely stylistic preference list everything already taken html super explicit", "d": "9/2015"}, {"body": "support syntax feel like much easier type also nt look weird might used correct", "d": "9/2015"}, {"body": "kinda interesting go along special syntax html childmsg ugly maybe maps surprisingly well javascript", "d": "9/2015"}, {"body": "nt think ugly like", "d": "9/2015"}, {"body": "think syntax used often intuitiveness ease typing also quite important easier type requires shift key", "d": "9/2015"}, {"body": "oh easy type define objects like instead hard type also requires shift key need type often", "d": "9/2015"}, {"body": "important make code readable otherwise understand wrote year ago", "d": "9/2015"}, {"body": "oevgeny come requires key must use special keyboard", "d": "9/2015"}, {"body": "ok got agree karevn code readability utmost importance", "d": "9/2015"}, {"body": "greennyreborn mistake would anything else ok typing much vue karevn expressed idea better", "d": "9/2015"}, {"body": "agree code readability important nt forget html standard syntax javascript code html template", "d": "9/2015"}, {"body": "way really step make things intuitive imho user need remember refel need know define component access via inside component found confused accessing refel via wrong shortcut couple times syntax make clear", "d": "9/2015"}, {"body": "ijackua alternative syntax great", "d": "9/2015"}, {"body": "renanvaz stable specification html templates official one mess mozilla google apple nt settle common ground yet anything goes", "d": "9/2015"}, {"body": "also like syntax looks less obvious also let think comment", "d": "9/2015"}, {"body": "renanvaz restrictions character sets attribute names largely legacy sgmlxml longer make much sense html context chars valid serialized html ie parsed browser restrictions dom methods standards body working relax restrictions dom methods well really fine ref see twitter thread", "d": "9/2015"}, {"body": "really love sytax proposal name name name name happy concernig directives bindings prefer colon syntax", "d": "9/2015"}, {"body": "try value expression except maybe change better", "d": "9/2015"}, {"body": "one thing syntax style classes often contain dashes pretty tiresome write code like html also really easy forget single quote somewhere making optional like html match json format seems pretty much intuitive", "d": "9/2015"}, {"body": "karevn use camelcase", "d": "9/2015"}, {"body": "booyah", "d": "9/2015"}, {"body": "opinion overhead unified clean syntax component html overhead etc unified like syntax html etc vattr enough cases could add specific directives like smile vue api could concise expressive like gulp api great relax vue relaxed", "d": "9/2015"}, {"body": "overall big fan react design philosophy one issue react jsx render function often involves lot logic ends looking like piece program fact rather visual representation interface developers bonus designerdeveloper hybrids like template makes much easier think visually design css jsx mixed javascript logic breaks visual model need map code design contrast vuejs pays cost lightweight dsl directives visually scannable template logic encapsulated directives filters believe v prefix overrated makes easy visually scan code vue specific attributes kind visual representation interface vs piece program stated one differences vue react one advantages vue imo goes well libraries dropping v prefix makes template kind piece program work libraries besides nt see downside keeping vprefix", "d": "9/2015"}, {"body": "nervgh missing points binding type prop flexible runtime rather fixed definition explicit template nt dig implementation details child component order understand binding type prop special cases like also overhead imo worse upfront learn works consistently comparison edge cases higher cost remember know edge cases argument multiple clause syntax necessary use also overhead amp explained nt see proposal expressive concise", "d": "9/2015"}, {"body": "nervgh sorry going tangent gulp simple thing well much complexity complexity showed plugins modules even gulp suffers simplicity things like caching arbitrary file lookup transformations failure management play well streams", "d": "9/2015"}, {"body": "dennisver really correct analogy difference jsx vs templates completely different single prefix vs prefixes dropping prefix simply breaking prefixes explicitly defined functionality semantics realized simply calling everything directives nt hide inherent complexity different types data bindings people worry makes harder work libraries without giving real examples library specific would break used vue honestly sounds like fud see real example new syntax breaks compatibility another lib", "d": "9/2015"}, {"body": "v prefix stands vue hold attributes related vue framework used directives still use prefix v directive letter v nt mean directive give feeling used vue related attributes think everyone gives vue try first time feeling whether correct nt worry libraries break worry lot harder scan html vue related attributes let take bootstrap example button trigger modal vclass vbindclass bindclass attribute nt tell vue related whereas vclass", "d": "9/2015"}, {"body": "except know anything data nowadays javascript framework dsl", "d": "9/2015"}, {"body": "anything data nowadays javascript framework dsl technically anything data valid html everyone ignores rules though sat sep pm alisson cavalcante agiani lt notifications githubcom wrote except know anything data nowadays javascript framework dsl reply email directly view github", "d": "9/2015"}, {"body": "dennisver people may think vue related always meant directives day register custom directive gets prefix point new api feels different current impression new api make sense also nt make much difference putting multiple attributes line honest equally bad personally multiple attributes really worry making look visually different use colon shorthand", "d": "9/2015"}, {"body": "installed rewrited directive new syntax looks confusing binding type prop flexible runtime rather fixed definition explicit template nt dig implementation details child component order understand binding type prop special cases like vhref vsrc vstyle also overhead imo worse bind upfront learn works consistently comparison edge cases higher cost remember know edge cases argument multiple clause syntax necessary use vattr also overhead right new syntax according proposal moment already directives different hidden behaviour think directive component may behavior naturally ps anyway thanks vue", "d": "9/2015"}, {"body": "nervgh honestly nt understand confusing colon means dynamic prop star means one time every special symbol clear purpose ambiguity comparison think confusing something string expression way tell would component mutate parent state way tell nt know props twoway way answer find implementation child component compare template way way bigger overhead props directives", "d": "9/2015"}, {"body": "big thank everyone participated conversation far feedback appreciated thread gone bit longer expected like reset conversation based current syntax let continue discussion", "d": "9/2015"}, {"body": "changing literaldynamictwowayonetime towards vue javascript instead template taking example vue component template wrote head sure right way sorry nt fun mind exercise", "d": "9/2015"}, {"body": "implement component hierarchy two components assetcomponent", "d": "9/2015"}, {"body": "indus explicitly depend assetcomponent components", "d": "9/2015"}, {"body": "sorry revive old thread couple helper filters example lets shorthand found handy drop anywhere debugging mean register filters every component wish use alternative", "d": "9/2015"}, {"body": "jasonvarga register globally", "d": "9/2015"}, {"body": "root vue instance gives deprecation warnings use inside component", "d": "9/2015"}, {"body": "vuefilter pre", "d": "9/2015"}, {"body": "oh right wonderful thanks", "d": "9/2015"}, {"body": "activate hook called using", "d": "9/2015"}, {"body": "alexandrebonaventure used dynamic component switching", "d": "9/2015"}, {"body": "guess way right call resolve promise instance loading remote data also wondering way reference child vm refs using", "d": "9/2015"}, {"body": "alexandrebonaventure yes since using lowerlevel imperative api responsible managing timing fo refs using latest alphabeta pass private option creating child", "d": "9/2015"}, {"body": "thanks asking questions using vue wisiwyg software called hype need mount child components separate wrappers way found maybe helpful know usage development", "d": "9/2015"}, {"body": "alexandrebonaventure cool looks really interesting", "d": "9/2015"}, {"body": "thanks interest link latest project using vue hype workflow gives us ability prototype design quickly keeping stable structure logic javascript vue", "d": "9/2015"}, {"body": "note fix reverted reason users care computed properties getters called definition computed property getter pure side effects behavior demonstrated vue internal async update queue works vue relies async update queue ensure correct behavior actually matters example amp", "d": "9/2015"}, {"body": "although top two examples result new data still performance problem modified new result old data wait old data wait unnecessary calculation new data wait spend time sync true reduce performance problem caused computed properties reevaluated case javascript vueconfigdebug true vue new vue el demo data content old data methods readcontent function var self", "d": "9/2015"}, {"body": "performance problem actually slows app simple computed properties fast evaluate extra calls ok tradeoff ensure correctness system real case behavior cause noticeable performance issue consider fixing", "d": "9/2015"}, {"body": "able", "d": "9/2015"}, {"body": "also problem line vue chrome client browser version works fine chrome", "d": "9/2015"}, {"body": "configurable separately implemented branch", "d": "9/2015"}, {"body": "knownasilya hi found solution attaching vue infowindow regards", "d": "9/2015"}, {"body": "pavelpolyakov see comment", "d": "9/2015"}, {"body": "knownasilya thought found another solution well anyhow think looks better", "d": "9/2015"}, {"body": "update released vuesuper ran case well written pretty simple plugin provides super property access parent methods sure pitfalls would make sense formalize vue best left plugin javascript vuesuperjs export default function install vue objectdefineproperties vueprototype super get function const methods thisconstructorsuperoptionsmethods windowvue windowvueuse install", "d": "9/2015"}, {"body": "code trying use int filter hotelstarscode consolelog val outputs typeof object try parseint values get string value hotelstarscode defined example returns nan check return zero int vrepeat get error even return int problem vuejs nt int filter vrepeat ca nt get value solve help please sorry english", "d": "9/2015"}, {"body": "lensgolda returning array filter", "d": "9/2015"}, {"body": "oh thanks", "d": "9/2015"}, {"body": "vif multiple expressions seem supported tried worked expected", "d": "9/2015"}, {"title": "unit tests using qunit syntax", "body": "unit tests using qunit syntax ie global instead using object etc otherwise qunit nt yet however probably know qunit syntax fact available qunit consuming possible migrate everything order make eventual consumption qunit easier unless strong objections raised discussion happy migrate tests tool makes job lot easier batches nt matter", "num": "3813", "d": "9/2015"}, {"title": "yii extension display selected value update view", "body": "issue query trying solve stuck point please solve mystery using extension fortunately searchable drop like start typing loads stored data business table query show selected business update view currently address view four fields sector city business street getting business name using extension working update address every stored field data comes except business code addressviewsform var model address var form cactiveform beginwidget bootstrapwidgetsbsactiveform array id gt addressform please note enable ajax validation make sure corresponding controller action handling ajax validation correctly call performajaxvalidation commented generated controller code see class documentation cactiveform details enableajaxvalidation gt false fields required errorsummary model textfieldcontrolgroup model streetnumber array size gt maxlength gt error model streetnumber labelex model businessid widget array name gt address businessid data gt chtml listdata business model findall id businessname whole available list htmloptions gt array placeholder gt search business name options gt options selected values multiple gt multiple style gt textfieldcontrolgroup model sector array size gt maxlength gt error model sector textfieldcontrolgroup model city array size gt maxlength gt error model city isnewrecord create save endwidget", "num": "3812", "d": "9/2015"}, {"title": "add underscore methods findlastindexsortedindex", "body": "finding writing much better", "num": "3809", "d": "9/2015"}, {"title": "changedattributes behaving weird", "body": "using write computed field helper issue returns false expected least reproduced pen javascript consoleclear let backbone windowbackbone var new backbonemodel let log txt obj gt documentwrite txt jsonstringify obj let lastchange mon change gt log lastchange lastchange mchangedattributes lastchange log lastchange mset search text emit false changed mset search mset search text need multiple instances code model instance use determine dependency changes computed fields expected behavior", "num": "3808", "d": "9/2015"}, {"title": "npm tarball missing license", "body": "license file present tarball missing guess due please add back", "num": "3807", "d": "9/2015"}, {"title": "multi inheritance", "body": "hi project needed multi inheritance capability backbone implemented feel free give feedback positive negative feature could useful", "num": "3805", "d": "9/2015"}, {"title": "constructor delegateevents regression bug", "body": "old backboneview var view backboneview function options thiscid uniqueid view options options extend pick options viewoptions thisensureelement thisinitializeapply arguments thisdelegateevents new var view backboneview function options thiscid uniqueid view extend pick options viewoptions thisensureelement thisinitializeapply arguments delegateevents removed many patterns rely collections models set initialize", "num": "3802", "d": "9/2015"}, {"title": "collection byid hash sync removing models", "body": "following removemodels function models options var removed var lt modelslength var model thisget models model continue return removedlength removed false updates collectionmodels removing model event emitted collectionbyid mapping model id model updated collectionbyid sync collectionmodels problem listener tries remove model currently removed collection case occurs uses collectionbyid determines model fact collection returns following splice clobbers model array", "num": "3801", "d": "9/2015"}, {"title": "router passing object route params handler", "body": "currently matched parameters passed action javascript routes folder name mode openfolder openfolder function name mode querystring stuff would like actions given object instead resembling express routing solution javascript routes folder name mode openfolder openfolder function routedata routedata name openfolder params name valueofname mode valueofmode querystring querystring amp ab could option enabled bbrouter good idea functionality base bbrouter external library tried seems working well new set tests cloned current router test make sure nothing breaks thanks", "num": "3799", "d": "9/2015"}, {"title": "syntaxerror unexpected token p objectparse native kparsejson", "body": "backbone tries call objectparse default object validate false parse false createurl url contenttype applicationjson beforesend contenttype applicationjson createurl emulatehttp false emulatejson false error e n errorthrown syntaxerror unexpected token p objectparse native kparsejson j n xmlhttprequestkajaxtransportqcorstcrossdomainsende message unexpected token p stack get stack set stack proto error parse false success textstatus parsererror url validate false xhr object proto object object validate false parse false createurl url contenttype applicationjson beforesend contenttype applicationjson createurl emulatehttp false emulatejson false error e n errorthrown syntaxerror unexpected token p objectparse native kparsejson j n xmlhttprequestkajaxtransportqcorstcrossdomainsende message unexpected token p stack get stack set stack proto error parse false success textstatus parsererror url validate false xhr object proto object", "num": "3798", "d": "9/2015"}, {"title": "chainable routes", "body": "alternative interim step overhauling router could adding ability chain routes built several applications required executing routes varying combinations rendering wrote lightweight plugin handle simply wondering something community open including library rather plugin creating pull request examples implementation full documentation found example usage using dot syntax within callback names able chain callbacks executing one chained routes parameters would passed parameters respectively want include additional route middle chain intended passed parameters bracket callback", "num": "3796", "d": "9/2015"}, {"title": "inconsistent events callback", "body": "far tell problem javascript appeventson function eventname consolelog eventname triggered works expected appeventson somethingelse function eventname consolelog eventname triggered nope gon na work eventname automatically available callback first argument listen first arg event name listen specific event first arg event name bad fixed", "num": "3795", "d": "9/2015"}, {"title": "incorrect behavior collection method", "body": "retrieving model unexisting index expect undefined value check index lt index thislength nothing index less thislength example index collection length please remove line index lt index thislength cause bug", "num": "3793", "d": "9/2015"}, {"title": "make model attribute sync server", "body": "hi saw cases store states view like dropdown countries data country list get server want add selected attribute country model need change selected value view get rendered selected attribute meanless server nt want sent server local attribute backbonemodel use set get set modify attributes local attribute also fires events sync server right way", "num": "3791", "d": "9/2015"}, {"title": "update event fails fire times", "body": "use backbone react flux build application uses babel listen add remove update change events backbone collection react component collection polls server times fetch models adds collection works fine lot add remove gets fired cases models replaced avoid removed add remove fire one update component sometimes work fine sometimes wont observed situation models returned new whole collection changed problem network response verified never fires update event confirm also thisbind update function tried logging problem fire added add remove statements back statement works fine said interested addition causes react components rerender many times look issue happy give details", "num": "3790", "d": "9/2015"}, {"title": "undocumented collectionat behavior", "body": "functionality introduced documented may lead surprising results record mentioned changelog nt stop breaking app tests obscure cases would happy add sentence method doc agree", "num": "3789", "d": "9/2015"}, {"title": "saving model part collection sync event triggered collection", "body": "able find anywhere documentation sure happens help would appreciated thanks advance", "num": "3786", "d": "9/2015"}, {"title": "possible get code books code words vector quantization", "body": "working matlab vector quatization know vector quantization provide set code words input get code vectors used lpg loyed algorithms result locations code word want locations code book subset locations code vectors ali", "num": "3785", "d": "9/2015"}, {"title": "hotel booking integration using catalook", "body": "hi want add hotel booking system dnn site concept discussed given link tried hotel booking using catalook catalook store found hotel related fields like number bed rooms beds bath rooms accommodates property type ammenities etc clear add custom field catalook product detail page filtering things using latest catalook version dnn need additional fields adding product hotel management sure booking hotel system using catalook module please assist move forward configuring online reservation system using catalook module urgent please thanks advance thanks amp regards jay", "num": "3783", "d": "9/2015"}, {"title": "modelprototypeget counts properties", "body": "hi stumbled following behaviour returns constructor function object rather expecting method filter properties return also hold true line underscore filter properties without model object would true hash thoughts", "num": "3782", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "awesome looking forward pull", "d": "9/2015"}, {"body": "want work pr", "d": "9/2015"}, {"body": "sure submitted one though sure approach adding iteratee value arguments reverse order underscore methods thoughts", "d": "9/2015"}, {"body": "closed", "d": "9/2015"}, {"body": "looking passing object event compare previous attributes current meaning comparing think want closer sure previous attributes behavior expected someone else want weigh", "d": "9/2015"}, {"body": "license mit packagejson sufficient needs", "d": "9/2015"}, {"body": "packagejson whole license text sufficient according license requires copy license text included reason care maintain fedora package backbone required ship license text package", "d": "9/2015"}, {"body": "thing multiple inheritance javascript mix properties instead", "d": "9/2015"}, {"body": "hum yep precisely purpose avoid mixing manually properties", "d": "9/2015"}, {"body": "precisely mixing properties prototype multiple inheritance", "d": "9/2015"}, {"body": "yes simulates multiple inheritance final result use many module want js test extend multi inheritance function var function return", "d": "9/2015"}, {"body": "see", "d": "9/2015"}, {"body": "thanks write looks duplicate though", "d": "9/2015"}, {"body": "sorry missed one", "d": "9/2015"}, {"body": "could might nice addition implementation little heavyweight though way could slim", "d": "9/2015"}, {"body": "thanks please give pointers heavy code might think could cleaned bit replace current logic done backward compatibility mind added stuff top existing logic", "d": "9/2015"}, {"body": "would guess without looking much possible combine logic already respond diff", "d": "9/2015"}, {"body": "related router changes cc jmeas", "d": "9/2015"}, {"body": "great idea think folks looking feature baserouter returns hash named params query params though ca nt recall works splats evident commit referenced op dsl implementation backbone biggest hindrance feature nt planning making changes dsl implementation keep concerns separate hugely favor updating vague plan subsequent pr focused solely dsl sure ifwhen get chance anytime soon", "d": "9/2015"}, {"body": "sorry jmeas done better research pretty much already implemented baserouter converting querystring object also great addition think possibly objectified rare case someone needs use raw value", "d": "9/2015"}, {"body": "possibly querystring objectified query routedata rare case someone needs use raw querystring value seems like good idea comes single point entry router think giving user much information possible best open pr baserouter merge cut release p query parameters super interesting comes router two leading clientside router philosophies uirouter ember router take fairly different approaches uirouter blends query parameter rest route sense ember keeps separate also todo list evaluate pros cons approach nt reached conclusions prefer dsl working client side router ignores query params moment reason", "d": "9/2015"}, {"body": "closed ps mark answer correct", "d": "9/2015"}, {"body": "nice suggestion plenty times would nt want previous routes run view edit comment page example nt need post data counterpoint could nt common method called routes need", "d": "9/2015"}, {"body": "counterpoint could nt common renderpost method called routes need yes commonly solved plenty times would nt want previous routes run agreed routes would simply pass chained callback string", "d": "9/2015"}, {"body": "routes simply would pass chained callback string ah note readme cool concept opinion magical problem ultimately trying solve data view dependencies metaframeworks like marionette chaplin use regions layouts help sure tack take gives flexibility control without learn esoteric router syntax", "d": "9/2015"}, {"body": "aside able implement event router something like js chainedrouter backbonerouterextend constructor backbonerouterapply arguments thison route thischainedroutes", "d": "9/2015"}, {"body": "yeah confirm really bad", "d": "9/2015"}, {"body": "special event specifically prepend event name callback know event called bind listener event already know event triggered listener", "d": "9/2015"}, {"body": "yeah consistent callbacks every events event name first parameter callback imo", "d": "9/2015"}, {"body": "negative number indicates select end collection would indicate last item collection believe works expected need negative number indicate found suggest check calling", "d": "9/2015"}, {"body": "believe works expected need negative number indicate found suggest check calling agreed", "d": "9/2015"}, {"body": "hi please use mailing list stackoverflow questions like github issues maintaining framework", "d": "9/2015"}, {"body": "happy look provide test case", "d": "9/2015"}, {"body": "sure thing since add remove working perfectly fine sure part share debug", "d": "9/2015"}, {"body": "whatever calling causes event also state collection beforehand", "d": "9/2015"}, {"body": "overrided parse looks like consolelog prints response received every time fires adds removes update calling set directly fetch call fires parse calls set assume instance api calls give objects time gives adds removals time updates verified via issuing bind collection logging changes update", "d": "9/2015"}, {"body": "adding found another one collection firing change event bypassed binding sync seems like hack", "d": "9/2015"}, {"body": "write jsfiddle demonstrate", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "docs event triggered model collection also triggered collection directly convenience allows listen changes specific attributes model collection example documentson change selected", "d": "9/2015"}, {"body": "thanks gone documentation thoroughly bad", "d": "9/2015"}, {"body": "see", "d": "9/2015"}, {"body": "something address objectcreate might worth looking drop", "d": "9/2015"}, {"body": "polyfilled black magic think", "d": "9/2015"}, {"body": "prior art exoskeleton see etc general say right generally nt realworld use case naming keys constructor hasownproperty keep mind object hash change easy comes minimal side effects let bite bullet", "d": "9/2015"}, {"body": "may good reasons eventually drop using properties like nt one let leave", "d": "9/2015"}, {"body": "may good reasons eventually drop using properties like constructor nt one let leave trouble actual current project made sad case treatment overwrite collection", "d": "9/2015"}, {"body": "thing happens dumping backbone routers initialised seems app freezes nt get executed upon navigation works fine cases bang routing behaviour btw also break backbone marionette routing", "d": "9/2015"}, {"body": "browser using post code sample", "d": "9/2015"}, {"body": "using latest chrome code sample difficult actually marionette app quite complex modularised routers", "d": "9/2015"}, {"body": "weirdest thing running issue end backbonehistoryhandlers array empty properly initializing approuter", "d": "9/2015"}, {"body": "ps forked fork jashkenas backbone v ember performance demo add backbone incremental dom stunningly fast", "d": "9/2015"}, {"body": "jridgewell maybe incremental dom future backbone", "d": "9/2015"}, {"body": "jridgewell cool ambitions see opportunities integrating backbone incremental dom", "d": "9/2015"}, {"body": "beside promoting defacto templating language wink nt think anything done majority use cases exactly analogous using html lt content gt underscoreviewtemplate template documentgetelementbyid template text idomviewtemplate function data incrementaldomelementopen div null null class box id box datanumber style top datatop px left dataleft px background rgb datacolor incrementaldomtext datacontent incrementaldomelementclose div pretty hand write several others working precompilation x gt idom using swap build target compiled function compiled idom continue use jst object however referencing templates replace jquery part use js var view backboneviewextend template underscoreviewtemplate render elhtml thistemplate thismodelattributes return var view backboneviewextend template idomviewtemplate render idompatch thisel thistemplate thismodelattributes return", "d": "9/2015"}, {"body": "pretty hand write several others working precompilation x idom using template swap build target template compiled function compiled idom continue use jst object however referencing templates replace jquery innerhtml part render use idompatch kind hinting perhaps idom templating language ready bake render function backbone sets thought", "d": "9/2015"}, {"body": "could certainly", "d": "9/2015"}, {"body": "way override bit ugly also obvious clean backbone rides line magic allowing implementer understand happening quite well would nt want middleware approach personally megawac make backbone plugin extends backbone exactly suggested", "d": "9/2015"}, {"body": "pretty common major plugin developers fall trap thrash sync environment storing access originalprevious sync way may conflict instance mixing two popular sync overrides run stack overflow issues due recursive calls load second occurs resolves default case ajaxsync thus causing resolve though could implemented plugin nt think optimal way disseminate change think core feature something implemented officially", "d": "9/2015"}, {"body": "would good additional functionality baked sync could configure behaviour rather pluginchainoverride system", "d": "9/2015"}, {"body": "maybe could rename enough convention", "d": "9/2015"}, {"body": "like suggestion allows backwards compatibility also believe addresses megawac concerns thorough explanation got thinking differently", "d": "9/2015"}, {"body": "reason martynsmith generic code backboneorm update fix", "d": "9/2015"}, {"body": "use case collection callback sync problem listener tries remove model currently removed collection case occurs thisget models uses collectionbyid determines model contained collection thisindexof model returns following splice clobbers model array generic sense seems wrong finds model also uses probably vulnerable whole method inlined callback model property unset callback could cause code relies property fail", "d": "9/2015"}, {"body": "going make work class properties way need class properties annotated create special decorator attaches decorated property prototype js class todoview extends backboneview protoprop static tagname li function protoprop target name descriptor targetprototype name descriptorinitializer see babel repl example relied experimantal things works", "d": "9/2015"}, {"body": "justboris discussed blog comments behavior seeing implementation detail babel handling class properties decorators specs defined behavior proposal right want things way want make issues andor make decorators class properties standardized behavior otherwise could probably break time", "d": "9/2015"}, {"body": "benmccormick wycatsjavascriptdecorators already extra definition regarding property initializers main concern property initializers usual descriptor well class methods decorators wrap well nt see reasons worry spec section remains unchanged", "d": "9/2015"}, {"body": "ah cool nt seen thanks pointing mon sep boris serdiuk notifications githubcom wrote benmccormick already extra definition regarding property initializers main concern property initializers usual descriptor well class methods decorators wrap well nt see reasons worry spec section remains unchanged reply email directly view github", "d": "9/2015"}, {"body": "agree would useful natively needed reset attributes without mangling id attribute clear gist", "d": "9/2015"}, {"body": "someone please help issue", "d": "9/2015"}, {"body": "check nt actually seem useful since lacks caseinsensitive regex modifier urls work well", "d": "9/2015"}, {"body": "think backbone changing url browser dropping bookmark folks go back later thing need change application state would say state machine web developer use", "d": "9/2015"}, {"body": "jvitela solution works well sometimes adds little delay dont use partial template root tags generated view moreover still workaround started learn backbone one week maybe miss something solution one saw wich fully functionnal surprising think essential feature native way define root tag template template view yes please give us example possible associated pull request one use template el thanks", "d": "9/2015"}, {"body": "hi ylacaute native way define root tag template backbone template agnostic free choose whatever want template system imposible provide generic way achieve", "d": "9/2015"}, {"title": "binding size fails", "body": "jsbin try deleting entire username see error uncaught indexsizeerror failed set size property htmlinputelement value provided invalid size nt occur component passes auto according post valid works equivalent component", "num": "12413", "d": "9/2015"}, {"title": "component scope component block incorrect", "body": "believe scoping actions curly components incorrect canary canary jsbin illustrates component yielded component block scope changed canary beta release cc wycats chancancode", "num": "12409", "d": "9/2015"}, {"title": "node version info date emberjscom getting starting page", "body": "emberjs getting starting page older version node recommended compared version recommended embercli getting start ed page", "num": "12406", "d": "9/2015"}, {"title": "emberisempty returns false passing empty string", "body": "hi using ember emberisempty returning false passing empty string", "num": "12405", "d": "9/2015"}, {"title": "select component nightmare idea", "body": "sourcecode ugly ununderstandably complicated component complicated lot parameters content selection labelpathwhat component unusable want use helpers label value example need translations usage approach code selectcomponent optioncomponent lines also usage woud much dynamic compared existing solution selectcomponentjs import embercomponent ember export default embercomponentextend selected null changed function event thisset selected eventtargetvalue init function thissuper arguments thison change thischanged selectcomponentemblem say want create pr", "num": "12403", "d": "9/2015"}, {"title": "error attempting register unknown factory", "body": "using embercli generated application adapter serializer edited adapter serializer extend jsonapiadapter jsonapiserializer respectively run generated unit test get following error looks like failure happening moduleformodel step even first line code actual test executed environment reproduce problem clone app ember new cd ember g adapter application ember g serializer application gt edit appadaptersapplicationjs extends dsjsonapiadapter like import ds emberdata export default dsjsonapiadapterextend gt edit appserializersapplicationjs extends dsjsonapiserializer like import ds emberdata export default dsjsonapiserializerextend browser navigate see please advise thanks advance", "num": "12402", "d": "9/2015"}, {"title": "explicit array index syntax nt work htmlbars loops", "body": "would expect following twiddle would printed times fact worked recent version ember think could wrong", "num": "12400", "d": "9/2015"}, {"title": "set computed property component outside inconsistent behavior", "body": "basic idea try pass component property handled inside component computed property jsfiddle example shows realworld application approach list items component items selected header component checkbox selectunselect items communicate controller boolean property worked ember ember least behavior changed select items unselect one items get unselected ember ember correct expected behavior previous behavior convenient point view workaround get behavior newer versions ember", "num": "12385", "d": "9/2015"}, {"title": "embercomputedfilterby embercomputednotempty breaks use returned value observes bind ui", "body": "summary object property value hasvalue computed property calculated value object b list objects computed properties based hasvalue using embercomputedfilterby notempty make change objects hasvalue true first time make change b anyhavevalue property set correctly observer function also watching anyhavevalue observer function calls get anyhavevalue second time change value hasvalue still true b anyhavevalue becomes false still true removing thisget anyhavevalue observes function makes problem go away though nt help app bind ui property need able evaluated dependencies change difficult explain purely words code reproduces var item emberobjectextend value hasvalue embercomputedgte value var itemlist emberobjectextend items itemswithvalue embercomputedfilterby items hasvalue true anyhavevalue embercomputednotempty itemswithvalue showstate function comment next line things start work properly consolelog anyhavevalue thisget anyhavevalue observes anyhavevalue var row itemlistcreate rowget items pushobject itemcreate consolelog rowget anyhavevalue false none rowget items set value consolelog rowget anyhavevalue true rowget items set value consolelog rowget anyhavevalue still true consolelog line observes function shows incorrectly false rowget items set value consolelog rowget anyhavevalue still true remains broken note original complex code app worked properly ember upgrading ember app started failing investigation bug reduces code like", "num": "12380", "d": "9/2015"}, {"title": "feature request allow pass computed property emberon", "body": "hi know new syntax firing observer certain event actually workaround issue cp encountered situation would like pass intuitively wish would work cp compued important part think nt cause property computed nt logs use observer another property b computed property referenced somewhere else template code simple twiddle", "num": "12379", "d": "9/2015"}, {"title": "updatedat createdat returns undefined", "body": "ember app simple model route data returned server json api format go path returns value returns protected thanks", "num": "12376", "d": "9/2015"}, {"title": "icajax async testing", "body": "hi got simple seeming headscratcher simple ajax form component like js import ember ember import ajax icajax export default embercomponentextend tagname form snip submit e epreventdefault snip acceptance test like js test surfaces errors function assert visit test let component andthen function component find myform missing something creating promise nt seem set meaning nt wait form submit return thanks", "num": "12374", "d": "9/2015"}, {"title": "emberrunonce running several times method anonymous function", "body": "good jsfiddles pretty clear behaviour confusing nt fit docs tested ember note arr foreach loop impact created show clear example want use function method want nest inside without writing still another cp emberrunnext method available tend use everywhere app different kind confusing behavior storefilter remember well case use function method property string make work", "num": "12369", "d": "9/2015"}, {"title": "nested routes ca nt find top level loading substates", "body": "according loading substate guide define apptemplatesloadinghbs slow loading route able find however happening nested routes nested routes seem look far route initiated transition consider example three routes contains asynchronous model hook foo foobar router terms foobar foobarbaz foobarbaz transitioning index foo triggers loading substate transitioning index foobar triggers loading transitioning index foobarbaz triggers loading transitioning foo foobar trigger loading transitioning foo foobarbaz trigger loading transitioning foobar foobarbaz trigger loading enabling resolver logging shows search loading substate stops source route example going foo foobar stops search fooloading going foobar foobarbaz stops search foobarloading based substate guide would expect entire route hierarchy traversed top level loading template found otherwise would need put loading templates every level route hierarchy", "num": "12367", "d": "9/2015"}, {"title": "broccolisourcemapconcat", "body": "pulling latest nomboming causes build break error seems bug created issue project workaround remove latest version install compatible version nice screenshot", "num": "12366", "d": "9/2015"}, {"title": "broccolisourcemapconcat", "body": "pulling latest nomboming causes build break error seems bug created issue project workaround remove latest version install compatible version", "num": "12365", "d": "9/2015"}, {"title": "error calling method npobject firefox", "body": "monitoring system application reporting occasional errors method error message specific firefox happens browser happens sporadically users unfortunately nt able replicate however stack trace figure comes ie line file firefox exposing window objects interface assuming including even sure bug emberjs firefox given little information bug sure much issue worth thought post anyway case someone else encountered similar issues knows", "num": "12364", "d": "9/2015"}, {"title": "ca nt extend linkcomponent", "body": "issue similar except solution provided results error understand extending possible way make params available", "num": "12363", "d": "9/2015"}, {"title": "promise proxy mixin exceptions catchable", "body": "relates issue proxied fail handler nt called exception rethrown promiseproxymixin nt caught application causing error handling acceptance tests fail promisearray experiencing issue linked related issue rethrown exceptions promiseproxymixin catchable application level thrown error reads uncaught return type console jsfiddle example", "num": "12361", "d": "9/2015"}, {"title": "docs unclear usecases", "body": "docs properties nt clear never used terminal used terminal see", "num": "12360", "d": "9/2015"}, {"title": "results dynamically set null", "body": "got template correctly renders change dynamically renders demo thx alexspeller", "num": "12358", "d": "9/2015"}, {"title": "properties leaked components", "body": "jsbin example see description using component context template component rather context adjacent know deprecated unable find correct way outside example several components share surrounding template example heavily simplified like dry usage properties passed template across components follow pattern would great could instead", "num": "12357", "d": "9/2015"}, {"title": "throws assertion failed calling set destroyed object", "body": "documentation errortolerant form emberset blow part chain undefined null destroyed open console see assertion error", "num": "12356", "d": "9/2015"}, {"title": "objectproxy private mean exactly", "body": "docs see objectproxy marked private use daytoday return route async paint resolve update template private mention keep people nt library authors thisshould throw dep warning kind using ember beta nt see warnings errors using arrayproxy", "num": "12355", "d": "9/2015"}, {"title": "bodyparser contenttype applicationvndapijson", "body": "appears needs bodyparser middleware read reqbody bodyparser like json api media type applicationvndapijson content type generated jsonapiadapter required json api spec post request contenttype applicationvndapijson reqbody empty without bodyparser reqbody undefined seems like bug please advise", "num": "12352", "d": "9/2015"}, {"title": "routetransitionto working queryparams", "body": "ca nt seem make route transition addition queryparams example simply fill import ember ember export default emberrouteextend aftermodel model transition transitionqueryparamsfooparam return thistransitionto queryparams fooparam bar internal route transitions reported follows transition clearly attempted aftermodel hook never completes initially thought issue route parameters nested routes eventually got pretty simple test case shows feature working get results whether use beforemodel aftermodel", "num": "12349", "d": "9/2015"}, {"title": "actions caught item controller", "body": "may discovered another bug closely related jsbins contain something like ember action caught item controller loop one would expect ember action bypasses item controller goes directly route controller unless behavior deprecated think may regression working broken filed separate issue seems likely two separate causes since introduced different versions feel free close duplicate need", "num": "12347", "d": "9/2015"}, {"title": "provide documentation protecting ember apps xss attacks bound style attributes", "body": "working deal xss vulnerabilities brought attention ember bound styles cause warnings say bound attributes need properly escaped multiple issues listed remove warning could find lot information ember guides related protecting actual app started escaping css attributes could never tell actually successful lot resources showing css vulnerabilities never able get execute javascript resources showing xss attacks happen style attributes created jsbin someone theoretically access computed style property never able get javascript execute warning something theoretical vulnerability protecting app theoretical attack something ca nt reproduce using modern browser protection old browsers something wrong reproducing attack would really like would example possible xss attack could look like ember proper escaping prevented let know taking discussion another site stack overflow thanks", "num": "12346", "d": "9/2015"}, {"title": "new logo", "body": "sorry say way ember logo sucks nt inspire confidence imho think replace something represents ember really even blueprint eiffel tower image main page better job actual logo", "num": "12343", "d": "9/2015"}, {"title": "actions broken using item controller", "body": "user stackoverflow discovered ember introduced bug item controllers far tell two jsbins code uses item controller first action caught controller everything works fine second action goes unhandled causing error thrown gist code tested seems still", "num": "12340", "d": "9/2015"}, {"title": "doc beta registry container reform", "body": "land two weeks following docs lacking x initializer docsguides must updated accept argument x instance initializer docsguides must updated accept argument x guides must audited emberjsguides x requires deprecation guide entries relevant items main guidance existing today blog post beta also links rfcs prs please tag prs", "num": "12336", "d": "9/2015"}, {"title": "way route based subdomain", "body": "example helpdomaincom routes help route path", "num": "12335", "d": "9/2015"}, {"title": "bootstrapselect", "body": "ember version emberarrayfilter line bootstapselect calls method host object nt define host objects causes error know nt supported chance guys add check object method series", "num": "12333", "d": "9/2015"}, {"title": "public methods private object embermap", "body": "wanting call keys values map seems pretty innocuous get support public keys values methods rather needing inspect map object keys", "num": "12332", "d": "9/2015"}, {"title": "observing array using working", "body": "reproduced", "num": "12329", "d": "9/2015"}, {"title": "observing nested objects properties arrayproxy fails using works explicit index", "body": "observing nested objects properties arrayproxy fails using works explicit index like arrayproxy fires correctly property changes using concrete index content nt using content neither using ember version see demo jsbin open dev tools console toggle checkbox clicking following logged issue nt logged using observing objects properties nt work", "num": "12328", "d": "9/2015"}, {"title": "broken childviews support", "body": "property trigger observers new views added code implemented workaround redefining component note difference ember implementation usage instead", "num": "12327", "d": "9/2015"}, {"title": "component documentation misses lifecyclehooks", "body": "embercomponent currently documents following events see didinsertelement willclearrender willdestroyelement willinsertelement stated events currently undocumented didupdateattrs willupdate didupdate didreceiveattrs didrender", "num": "12326", "d": "9/2015"}, {"title": "issue complex righttoleft language", "body": "found emberjs cute tried demo emberjscom home page name want learn ember typed text persian text english gets reverse name \u0627\u06cc\u0644\u062f\u0631\u0645\u06cc name \u0627\u06cc\u0644\u062f\u0631\u0645\u06cc want learn ember name ilderemi name imeredli want learn ember", "num": "12324", "d": "9/2015"}, {"title": "embercollectionview looses controller binding rendering child view", "body": "put example behavior basically problem collectionview initially rendered bound controller however child view added collection collectionview childview lose controller binding looks like recent regression release display behavior suspect issue introduced pr", "num": "12322", "d": "9/2015"}, {"title": "deprecate embermerge favor objectassign", "body": "embermerge similar purpose objectassign think good idea deprecate createuse polyfill opened issue since sure ember policy polyfills differences embermerge merge contents two objects together first object objectassign copy values enumerable properties one source objects target object plan deprecate embermerge createadd polyfill objectassign update ember code base suggestionsopinions thanks", "num": "12320", "d": "9/2015"}, {"title": "docs dsrestserializer normalize normalizesave normalizeresponse etc", "body": "suspect methods serializers commonly used given change pre ed finding solid examples hard new users specifically docs methods address difference method universal save responses provide example fixing common json responses without root key different id key common andor populating model fields save response show populate model fields response empty outgoing save eg rendered text clarify requirements output matter root key single object pluralized root key need pluralized array response docs show nonplural vs plural keys nt matter pluralize time relative newcomer discoverable trialanderror nt ideal", "num": "12319", "d": "9/2015"}, {"title": "inner component action sent wormhole component instead outer component", "body": "use modal dialogs app outer component inner component inside wormhole inner component sends action action used fired outer component since pr action fired wormhole causes error note error inner component wormhole defined outer component template action works fine componentwormhole controller template fiddle reproduces issue changing ember dependency fixes issue", "num": "12317", "d": "9/2015"}, {"title": "bump morphrange better error messages", "body": "pending gives better error message something attempts bind function worst throw best throw", "num": "12316", "d": "9/2015"}, {"title": "query params maping different controllers", "body": "following structure reports controller buyer controller app transition reports reportsbuyer receive ember v version node npm os linux", "num": "12308", "d": "9/2015"}, {"title": "checkboxes checked value interaction", "body": "twiddle replication click control checkbox control checkbox still checked even property false unclicked checkbox copy control checkbox unchecks correctly issue binding value seems overwritten mutation property step see control checkbox unchecks property set rechecks point ember guess default helper property still trying set use case want create checkboxes check read checkedness helper property fire action without setting checked", "num": "12307", "d": "9/2015"}, {"title": "makedictionary could faster", "body": "always", "num": "12304", "d": "9/2015"}, {"title": "canary link component longer binds href", "body": "working bisect component nt appear trigger computed properties fired hook consequence property bound component broken commit prior linkto cleanup work landing known work base fork started cleanup", "num": "12302", "d": "9/2015"}, {"title": "classnamebindings updated", "body": "text nt change canary text becomes green underlined timeout may related previous report sure", "num": "12300", "d": "9/2015"}, {"title": "ember isarray returns false array proxy", "body": "returns false ember greater noticed one change replacing isarray function", "num": "12298", "d": "9/2015"}, {"title": "currentwhensplit function", "body": "upgrading seeing issue using argument helper resulting error twiddle demonstrates problem seems occur regardless defined note problem nt persist set directly string template need able set dynamically", "num": "12296", "d": "9/2015"}, {"title": "radio buttons render text input", "body": "tiny example course renders fine rendering minimal example dynamically via component results text input instead upgraded ember problem exist", "num": "12295", "d": "9/2015"}, {"title": "jquery version", "body": "particular reason using jquery default using application without bugs cheers", "num": "12293", "d": "9/2015"}, {"title": "data actions input component nt update nearby label", "body": "written component contains input helper put ember twiddle look shows label getting length greater zero initial render class click text field click ember correctly inserts class label something wrong input helper data actions miss understood part setup getset computed application level quantity allow set defaults based variables required kept simple use valuechange action component report internal value change back application level update quantity", "num": "12291", "d": "9/2015"}, {"title": "add deprecation modifying properties inside didinsertelement hook deprecations guide", "body": "issue mentioned following deprecation mentioned deprecations guide like request someone knowledgeable reasons behind deprecation add guide least meantime explain", "num": "12290", "d": "9/2015"}, {"title": "toggleproperty set properties component default value", "body": "trying implement nested components ember getting strange behavior use function inside action handler first component looks like javascript import ember ember export default embercomponentextend false hello default text changehello function thisset hello text set init actions thistoggleproperty second one javascript import ember ember export default embercomponentextend data dosomeimportentstuff function var data name text set bool false name text set bool true component creates two buttons names text set click button text changes text set execution function called action handler remove function remove setting everything works expected ie text buttons stays always text set function set back properties something wrong behavior action seen", "num": "12287", "d": "9/2015"}, {"title": "emberinjectservice doesnt respect singleton flag", "body": "singleton service instantiated initializer singleton flag inside component ca nt get singleton service instead gives new instance use emberinjectservice", "num": "12284", "d": "9/2015"}, {"title": "support usage app instances test helpers", "body": "previously discussed embercliembercli desirable able use app instances acceptance tests avoid recreating entire application calling every test currently use get functionality mostly working testing environment lose ability properly use test helpers since bound application rather app instance applies helpers use instancespecific info eg accesses container fixed proper way fix initial thought rerouted use called within context test update point new app instance sure correct thoughts cc stefanpenner petethepete", "num": "12277", "d": "9/2015"}, {"title": "ever possible outlet default content aka template inheritance", "body": "something like ever possible natively template inheritance come would great feature apptemplatesindexhbs always stays outlet default paragraph always render page unless child route renders inside overrides outlet ps used looks like component block form example referring standard outlet use case index route like display default content route child routes override content currently render inside outlet", "num": "12273", "d": "9/2015"}, {"title": "readonly bound boolean value input helper ember", "body": "ember version define controller template expecting rendering writable field isreadonly false renders html like simplified essentially readonly text field worked expected ember found behavior changed least intentional", "num": "12271", "d": "9/2015"}, {"title": "routerender outlet fails application level called lower level route", "body": "recent issue application highlighted believe issue routerender commands called different routes fiddle shows issue application route child route dummy modal outlet application level child route first button shows modal modal outlet run child route subsequent call show modal whether application modal button fail without error call action application route failure persistent even modal closed contrast resetting application modal loaded occurs application route modal button succeeds whether application modal level modal button used possible switch modal indefinitely soon modal rendered child route calls render modal fail presume unintended even displaying modals calling routerender different levels usual practice nt recall failure upgraded ember thanks help", "num": "12268", "d": "9/2015"}, {"title": "memory leak transitioning inverse block", "body": "tried make reproduction simple possible basically inside statement transition inverse leak bunch related morphs dom fragments reproduction heap snapshot see hiding thing cleaned rendered templates deleted coresponding items list compare statement without inverse much cleaned list removed thanks rwjblue batting one back forth pain reproduce", "num": "12267", "d": "9/2015"}, {"title": "deprecation code nt need throw errors browsers", "body": "new chrome works fine something like following work cc teddyzeenny", "num": "12266", "d": "9/2015"}, {"title": "memory leak element component handlebars attribute", "body": "appears present least far back separate memory leak mentioned earlier today fixed sample app repro instructions readmemd github based research looks like whenever dom element component attribute made using handlebars expression entire component gets leaked route transitions example leak inside component template inside component template tidbits element handlebars attribute inside component tried putting span route leaks nt happen amount leaked proportional element count component affected element count containing route seems indicate rendered component leaked route first noticed app repro app repro toy app", "num": "12265", "d": "9/2015"}, {"title": "enable multiple dynamic keys get", "body": "currently believe helper limited one dynamic key case multiple dynamic keys path eg current workaround use multiple nested get propose get helper use remaining params individual keys almost acts like concat helper allowed current implementation", "num": "12263", "d": "9/2015"}, {"title": "promiseproxymixin seems wrong docs", "body": "ca nt say mistake docs maybe something wrong docs seems resolved content automatically appear part object docs js assuming following json firstname stefan lastname penner properties accessible proxy proxyget firstname gt stefan proxyget lastname gt penner get content via property means edit ember version", "num": "12261", "d": "9/2015"}, {"title": "ca nt specify class attribute tagless components", "body": "tagname specified empty string error thrown whenever attempt define class property component logical classnamebindings wo nt work tagless component think preventing developers overwrite property named class mistake", "num": "12258", "d": "9/2015"}, {"body": "srsgores seems like internally ember uses instead idea", "d": "9/2015"}, {"body": "still nt explain getting converted", "d": "9/2015"}, {"body": "thanks reporting definitely issue recent removal template locals done around enabling legacy flags make work properly test suite passes dig bit tonight", "d": "9/2015"}, {"body": "issue elementaction keyword using", "d": "9/2015"}, {"body": "created failing test working fix tonight", "d": "9/2015"}, {"body": "current release embercli issued warning using node wait update docs warning resolved release version", "d": "9/2015"}, {"body": "good thanks", "d": "9/2015"}, {"body": "sure empty string hidden whitespace quick test ember twiddle shows reports true", "d": "9/2015"}, {"body": "hmm seems like test specifically test passing branch provide jsbin showing issue track going", "d": "9/2015"}, {"body": "code avatarurl coming api blank emberisblank returns true check empty returns false model represents league momentum export default dsmodelextend embervalidations admins dshasmany user async true maxteamsize dsattr number stepsperpoint dsattr number nameen dsattr string namefr dsattr string descriptionen dsattr string descriptionfr dsattr string sloganen dsattr string sloganfr dsattr string lingual dsattr string avatarurl dsattr string blank string benefit dsbelongsto benefit async true returns avatar absolute url return string avatarabsoluteurl embercomputed avatarurl function let relativeurl thisget avatarurl absoluteurl null", "d": "9/2015"}, {"body": "jpoiri going guess empty string string containing whitespace returns true string contains whitespace whereas return true string content fact isblank simply isempty check whitespace javascript whitespace emberisblank true emberisempty false completely blank string emberisblank true emberisempty true", "d": "9/2015"}, {"body": "ok thanks clarification", "d": "9/2015"}, {"body": "understand examples nt really done emblem templates completely agree absolutely horrible reason deprecated removed", "d": "9/2015"}, {"body": "rwjblue select helper core deprecated infavor following approaches using htmlhtmlbars directly using special purpose select addons typically attempting make specific scenarios ergonomic light closing misunderstood please provide clarification explore", "d": "9/2015"}, {"body": "stefanpenner thank awesome", "d": "9/2015"}, {"body": "although surprising javascript works enumerate sparse arrays javascript really represents hood implemented javascript leak user land inbound access sparse array index value first seems like array undefined values actually case array prealloc without values access index end undefined actually true lot represents hole given slot value undefined slightly quirky understandable javascriptism hope explanation helps appear like bug going close issue misunderstood please clarify reopen needed", "d": "9/2015"}, {"body": "stefanpenner think extremely weird behavior also nt think something differently js odd worked previously coming ended give desired behavior", "d": "9/2015"}, {"body": "stefanpenner fwiw underlying problem handlebars nt simple iterators case getting rating api want use count output ratings stars really need handlebars know done writing custom helper seems like basic building block nt written every developer needs", "d": "9/2015"}, {"body": "denisovlev think proper way achieve effect define computed property two components depend sure exactly setter function gets called example something passing binding parent controller overwriting computed property think might depending undefined behavior older versions ember broke note example also works move inside", "d": "9/2015"}, {"body": "xtian thank response define computed property idea item inside item list gets wrapped defined order pollute model header panel component may rendered rather far list generally work different lists know much inside lists general without header point view strange behavior fact change computed property calls setter computed property certain pass binding inside component handle computed property undefined behavior convenient way connect components otherwise works reliable obscures logic application solution send action sibling child component sent controller able call action another component pass inside component whole context controller parent component register object component controller seems best idea couples tightly different parts application kind event bus ember way makes logic complex feels like right way imo worth considering", "d": "9/2015"}, {"body": "ca nt wrap model proxy higher application method nt feel like right way since header implicit dependency sideeffect list component added somewhere else application seems like confusing architecture since little indicate relationship two components nothing preventing another component clobbering binding computed property implementation imo build ui easily using data actions pattern", "d": "9/2015"}, {"body": "since observers synchronous consuming cps sets race conditions cached value observer gets installed invalidate cached value observers ember generally low level primitive set flags schedule work easiest way use would use emberrunonce would schedule work one time asynchronously recompute value worked complex bookkeeping still free race conditions given trying make work removed complex code trying make work partially succeeding simply force cps recompute complex dependency graphs synchronously", "d": "9/2015"}, {"body": "okay live wrap observes emberrunonce use computed properties know still seems like bug break actual value property reading observer maybe needs documented somewhere runtime warning something", "d": "9/2015"}, {"body": "would recommend getting computed property need add extra work requires bonus works today fan adding orthogonal features caveats unique implementation teach potential traps", "d": "9/2015"}, {"body": "yeah sure works observer maybe could also work cp worth close issue think would like approach also would nt require create another method illusion would worth behavior understand closed", "d": "9/2015"}, {"body": "init actually call afterinit happens init changes within broadcast unexpected costly change events one typically wants merely initial state object primed specific way init also init nt provide ordering assurances especially inheritance involved lead tricky bugs hard work around issues using init less error prone deterministic performant also worth noting allowing cp remain lazy advantages forcing eager compute typically result anti patterns encouraging behavior sugar seems like footprints gun although appears add symmetry cp observers symmetric observers really low level unwieldy concepts primarily intended framework low level integration foreign libraries code typically recommended app code", "d": "9/2015"}, {"body": "understood thanks information", "d": "9/2015"}, {"body": "maybe question emberjsdata", "d": "9/2015"}, {"body": "depending serializer attributes may get camelized yes likely question better asked stackoverflow appear like bug bug emberdata repo", "d": "9/2015"}, {"body": "wrote answer couple hours ago forgot press comment gcorbel defaults dasherized attribute relationship members use customize behavior", "d": "9/2015"}, {"body": "sounds like good question ask stackoverflow", "d": "9/2015"}, {"body": "ok opened smells bit like ember testing bug stack overflow post gets resolved bug close", "d": "9/2015"}, {"body": "seems working expected random promises currently part test promise chain nonobvious would work since tests also written using promises would likely cause deadlocks constantly plans make returning promises actions handlers automatically opt test promise still needs fleshed implemented", "d": "9/2015"}, {"body": "im going close works expected future features planned improve situation", "d": "9/2015"}, {"body": "ok bummer anyone knows example acceptance test component like love example", "d": "9/2015"}, {"body": "passing anonymous function receives new function time prevents check possible since getting legitimate new function believe covered runloop guide sure open issue guidewebsite repo", "d": "9/2015"}, {"body": "totally makes sense docs updated", "d": "9/2015"}, {"body": "looks like issue introduced", "d": "9/2015"}, {"body": "opened issue suggestions fix maybe free cycles test new undestanding related functions gladly give feedback submission", "d": "9/2015"}, {"body": "also reference api docs accurate", "d": "9/2015"}, {"body": "extra comment ensure confusion api docs", "d": "9/2015"}, {"body": "thanks api docs would replaced testing would time learning ember rails testing framework testing website first know overburdened everything day less suffocated certainly add fork embersync localstorage adapter may useful big issue ls believe especially new guys testing ember performance wih ls adapter", "d": "9/2015"}, {"body": "ok got sorry docs correct anonymous function case dealt unfortunately looking doc function without checking scheduleonce technically docs correct replacing function docs would helped case realized method must properly work nonanonymous function sorry waste time", "d": "9/2015"}, {"body": "code reproduce", "d": "9/2015"}, {"body": "otherwise would need put loading templates every level route hierarchy", "d": "9/2015"}, {"body": "nt according routing substate guide ember traverse base application route hierarchy ember try find loading route hierarchy foobarslowmodel transition starting foobarslowmodels sibling foobarloading fooloading loading considering also loading event routing substate guide states loading handler defined specific route event continue bubble transition parent route providing route application opportunity manage seems imply loading event specifically bubbles entire route hierarchy target route route application unreasonable assume resolver perform resolution path looking loading route perform intermediate transition however clearly happening demonstrated resolver logging sample code provided routing guide code clearly disagreement consumer framework applies common sense seems intent guide correct error code", "d": "9/2015"}, {"body": "otherwise would need put loading templates every level route hierarchy nt understand seems like poor design constraint ember need copypaste loading screen every route even loading screen effectively component ca nt define loading screen root hierarchy done seems like resolver able heavy lifting guides seem indicate hence bug", "d": "9/2015"}, {"body": "agreeing mikepost experiencing unexpected behaviour least according guides well small jsfiddle illustrate matter well", "d": "9/2015"}, {"body": "mikepost guides correct issue guides repo locks fix guides seem indicate however expectation guides may correct repo example loading template top route transition beginning route loading template transition beginning route without loading template nt behavior rendering loading template guides ember try find loading route hierarchy foobarslowmodel transition starting foobarslowmodels sibling seem indicate one loading template top route tree route gt child gt grandchild would work says says try find loading route loading template also nt say generate loading route route loading template nt even know magic happens based example want transition route tree need provide loading template level", "d": "9/2015"}, {"body": "transition beginning route without loading template nt behavior rendering loading template agree current behavior question code bug guide wrongmisleading posit sensible thing define single top level loading template used entire application thus bug would code based slack conversations far one possesses point view bug exists consensus needhelp channel current behavior broken bug filed says try find loading route loading template also nt say generate loading route route loading template nt even know magic happens good point updated example repo include explicit loading route result unchanged", "d": "9/2015"}, {"body": "mikepost created embertwiddle example twiddle uses pods default question code bug guide wrongmisleading think perhaps guides completely clear regarding use loading template bug ember try find loading route hierarchy foobarslowmodel transition starting foobarslowmodels sibling foobarloading fooloading loading wording around sibling think routing transitions embertwiddle example fooloadingtemplatehbs file utilized transitioning applicationindex foobar applicationindex foobarbaz foo foobar foo foobarbaz fooloadingtemplatehbs file utilized transitioning foobar foobarbaz hence need put loading template level routing transitions begin basically everywhere embertwiddle example believe would feature request resolve path loading template anywhere transition start end perhaps write rfc issue see feature request docs", "d": "9/2015"}, {"body": "locks perhaps clarity needed guides regarding loading templates see example twiddle links one loading template loading template nested structure", "d": "9/2015"}, {"body": "thanks reporting", "d": "9/2015"}, {"body": "duggiefresh perhaps tracked embercli project instead emberjs one think", "d": "9/2015"}, {"body": "pixelhandler fyi turned issue emberjsbuild", "d": "9/2015"}, {"body": "u create duplicate issue gh", "d": "9/2015"}, {"body": "first inclination sounds like ff issue although mentioned without info nt know", "d": "9/2015"}, {"body": "zulaica perhaps use beta release maybe feature flag", "d": "9/2015"}, {"body": "inclined believe bug cc rwjblue asking fix curious agree zulaica provide quick jsbin make easy diagnose even better failing test pr", "d": "9/2015"}, {"body": "stefanpenner quick jsbin try submit failing test tomorrow", "d": "9/2015"}, {"body": "ya bug fixed betacanary prior nt really possible many issues existed use link variant nt think regression suggested solution use betacanary take advantage refactoring done make possible", "d": "9/2015"}, {"body": "acalfo true tried another example well however sure bug intended design marked private disagree public powerful mixin", "d": "9/2015"}, {"body": "appears issue jquery promises broken changing code first make rsvp well behaved promise library wrap jquery one appears solve issue misunderstand please clarify reopen", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "bookmarked whenever need reminder", "d": "9/2015"}, {"body": "jamesarosen true helpful clarify", "d": "9/2015"}, {"body": "lolmaus guess work around use ifelse rather condition use case seems like attr bound default condition determines value attribute sure first rendering fixed browser js appears example mucking value breaks shows empty attr want attr binding present based condition seems reliable use ifelse define component sets attribute binding based property component", "d": "9/2015"}, {"body": "pixelhandler helper nt help see example", "d": "9/2015"}, {"body": "seems work attributes href href definitely bugged", "d": "9/2015"}, {"body": "lolmaus meant using else template instead relying conditional value assignment html attribute seems like gamble expect value assignment attribute indicate whether attribute present empty missing present value expected browsers behave accordingly", "d": "9/2015"}, {"body": "suspect may related special cased reflected", "d": "9/2015"}, {"body": "pixelhandler would result code duplication gets really burdensome link content complex", "d": "9/2015"}, {"body": "danwang example bin appear time behavior expected see added show happening layout parent template child use appears shadow childvalue current scope controller seems would best explicitly pass values component properties avoid shadowing properties appears controller defining picked layout template avoid using templatename components sounds like refactoring needed partial works great may avoid repeating variable assignments", "d": "9/2015"}, {"body": "agreed like use entirely block partials exist ember unable use solution", "d": "9/2015"}, {"body": "xrxr indeed looks like bug still simple workaround use examples show case tolerant set destroyed object work code nt seem support claim docs either see either docs wrong implementation nt support docs", "d": "9/2015"}, {"body": "points issue chain may refer path though documentation say deprecated test deprecated comment", "d": "9/2015"}, {"body": "might relevant", "d": "9/2015"}, {"body": "workmanw awesome find thank", "d": "9/2015"}, {"body": "toranb yeap use emberobjectproxy time time especially bufferproxy related things", "d": "9/2015"}, {"body": "mean open issue ember cli repo", "d": "9/2015"}, {"body": "maybe need read routing guide adding makes behave expected", "d": "9/2015"}, {"body": "yeah believe working intended", "d": "9/2015"}, {"body": "mikepost correct need use reload model hooks value query param changes", "d": "9/2015"}, {"body": "work around set target action manually item controller unsure change semantics appear aligned context shifting works", "d": "9/2015"}, {"body": "prior behavior seems like bug noncontext shifting foo bar bar foo actions block absolutely target thing action outside block exactly contexttarget outside block", "d": "9/2015"}, {"body": "rwjblue agreed behavior wanted public api trick closing", "d": "9/2015"}, {"body": "older browser quirky css implementations allowing scripts external resources loaded even unexpected restyle page considered vulnerability could vector clickjacking merely disrupt ui users basic dos sorts another vector information leak could also used inconjunction another vector example consider day font vulnerability another forcing unintended fontload could tl dr security nt guarding obvious vectors also mitigate potential vectors strategy successful limiting impact given operation scope intended anything beyond avoided reality software complex impossible prevent vectors opportunity take full advantage", "d": "9/2015"}, {"body": "mostly agree stef said problem allowing arbitrary css older browsers execute javascript crosssite scripting xss leads sorts bad stuff like steal sessions etc modern browsers like stef alluded problem redressing attacks make site look like something else confuse phish user nt big problem xss fixed answer title documentation stef working security documentation ember css definitely part stay tuned front", "d": "9/2015"}, {"body": "great thank quick responses appreciate focus mainly xss sessions cookies used application better idea need protect app look forward security documentation worked looks like question kinda place gon na close issue correspond one particular bugfeature thanks taking time address", "d": "9/2015"}, {"body": "colinlgray take security quite seriously although may lack docs system really designed safe clientside system time goes plug holes also aim give developers framework secure thing first lack nice userland docsguides something mentioned working pretty hefty undertaking hope something comprehensive lands", "d": "9/2015"}, {"body": "rodfersou unfortunately would difficult disappoint young programmers getting ember immediate change smile mention companies linkedin yahoo groupon mcgraw hill conde nast happy participate ember ecosystem logo thanks constructive criticism would suggest starting platform x sucks would like motivate changes project future cheers", "d": "9/2015"}, {"body": "emberconf vid might offer perspective defense hamster mascot", "d": "9/2015"}, {"body": "mixonic machty thank", "d": "9/2015"}, {"body": "agreed regression quick look changelog would guess related", "d": "9/2015"}, {"body": "tells offending commit confirmed commit works expected unfortunately familiar enough code know fix hopefully good starting point somebody", "d": "9/2015"}, {"body": "glad see issue getting love think bugs root cause please let know anything help team looked pretty extensively would love help testing anything else", "d": "9/2015"}, {"body": "cc dgeb also sent bat signal docs team", "d": "9/2015"}, {"body": "initializer docsguides must updated accept application argument instance initializer docsguides must updated accept applicationinstance argument seems correct documented", "d": "9/2015"}, {"body": "registry methods must made public methods doc methods application make public unsure container registry absolutely made public made small subset functionality public mixin see proxy mixins seem appropriately documented marked please double checkconfirm chance absolutely may missed something", "d": "9/2015"}, {"body": "deprecated method registryproxy flagged deprecated property deprecated calling methods never documented either public private would document suggesting add documentation mention deprecated requires deprecation guide entries relevant items agreed", "d": "9/2015"}, {"body": "submitted screenshots ensure proper linkages docs", "d": "9/2015"}, {"body": "updated confirming robert feedback property deprecated calling methods applicationregistry never documented either public private would document suggesting add documentation emberapplication registry mention deprecated shows public suggesting registryproxy likely public", "d": "9/2015"}, {"body": "shows registryproxy public suggesting registryproxy likely public added add link properly update", "d": "9/2015"}, {"body": "changed class level methods still", "d": "9/2015"}, {"body": "guides must audited ran guides far see nt using initializers anywhere want per locks remember correctly locks confirm", "d": "9/2015"}, {"body": "acorncom rather heavily documented ideally chance docs improve front", "d": "9/2015"}, {"body": "mixonic indeed stand corrected defense believe changes nt yet deployed live site made comment", "d": "9/2015"}, {"body": "mixonic opened guides issue docs team want reference checklist due way guides versioning currently work may pull request pending merge soon released", "d": "9/2015"}, {"body": "acorncom updated thanks", "d": "9/2015"}, {"body": "feature guides documentation needs land released documented fact believe current contract new features without documentation documented guides probably blocker", "d": "9/2015"}, {"body": "michaelrkn train stops one stuckouttongueclosedeyes either remove feature get guides updated api documentation addressed pr notated week get done need volunteer dancers", "d": "9/2015"}, {"body": "future changes like get issue opened guides repo sure us knew coming happened browsing noticed docs mention", "d": "9/2015"}, {"body": "sorry chime willing help needed", "d": "9/2015"}, {"body": "dgeb take", "d": "9/2015"}, {"body": "michaelrkn ok", "d": "9/2015"}, {"body": "nullvoxpopuli outside scope ember router browser treats subhuman reference ip address dns full domain including subdomain necessary browser load website loaded path used ember router anything url domain", "d": "9/2015"}, {"body": "would possible say page load transition particular route based current subdomain like xmysitecom gt routex ymysitecom gt routey", "d": "9/2015"}, {"body": "nullvoxpopuli could use redirect applicationroute appear bug rather question typically recommend stackoverflow geared qa feature requests rfc process", "d": "9/2015"}, {"body": "branch target pr affect would love land fix time track submit pr", "d": "9/2015"}, {"body": "different experience ca nt polyfill please use foreach enumerate", "d": "9/2015"}, {"body": "nothing appears consuming makes everything work appears working expected", "d": "9/2015"}, {"body": "also redundant observing superset", "d": "9/2015"}, {"body": "stefanpenner consuming", "d": "9/2015"}, {"body": "case aggressive optimization observer observing computed property enough trigger consumption", "d": "9/2015"}, {"body": "simpler example", "d": "9/2015"}, {"body": "stefanpenner valuesdidchange consuming allvalues yes fires already consumed changes", "d": "9/2015"}, {"body": "stefanpenner takeaway observe computed property unless computed property consumed elsewhere", "d": "9/2015"}, {"body": "stefanpenner takeaway observe computed property unless computed property consumed elsewhere yes correct think schr\u00f6dingers computed properties consumed state undefined state change notification possible laziness invariant actually quite nice results single caveat discussed", "d": "9/2015"}, {"body": "stefanpenner correct way going get work", "d": "9/2015"}, {"body": "devinus call", "d": "9/2015"}, {"body": "believe might related", "d": "9/2015"}, {"body": "yes also thought referencing issue issue", "d": "9/2015"}, {"body": "kuzirashi nt believe observing nested properties supported instead supported property object object see note works one level deep use nested forms like todos eachownername todos eachowner eachname", "d": "9/2015"}, {"body": "note works one level deep use nested forms like todos eachownername todos eachowner eachname actually meant say cant work", "d": "9/2015"}, {"body": "kanongil creating pull request fix ember believe correct use required triggering observers", "d": "9/2015"}, {"body": "believe intend childviews observable overhead supporting possible cases quite tricky", "d": "9/2015"}, {"body": "well unfortunate used work pre excepting changed behavior without deprecation notice afaik documented normal property restriction could modify directly", "d": "9/2015"}, {"body": "kanongil even childviews array observable worked tried call notifyproperty childviews parentview changed even still bugs blessed way really array observing container view way nt breaking edge casing general better future proof app would derive hierarchy state derive state component hierarchy", "d": "9/2015"}, {"body": "krisselden exactly desire derive state viewcomponent hierarchy makes natural fit application suspect others well case use handle dpad focus navigation parent view determines next focusable child view gain focus key presses", "d": "9/2015"}, {"body": "documentation underway hooks part angle bracket component feature believe chancancode working though could mistaken", "d": "9/2015"}, {"body": "yes try submit pull request feedback soon understand reason hooks attrs property docs intentional considered publicfinalized yet primarily usable without glimmercomponentangle bracket components anyhow docs writing done time glimmer component nt think expect major changes resolved soon", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "hmm nt personally much experience rtl languages ember app though sure done well perhaps others experience chime maybe examples", "d": "9/2015"}, {"body": "ca nt reproduce issue", "d": "9/2015"}, {"body": "found emberjs cute tried demo emberjscom home page name want learn ember typed text persian text english gets reverse browser os version ember", "d": "9/2015"}, {"body": "ok firefox google chrome problem firefox nightly firefox os windows server build", "d": "9/2015"}, {"body": "html emberjscom website sets lang browser supposed treat english lefttoright sounds like browser firefox playing nice building web pageapp righttoleft audience needs locale configured properly browser needs support locale emberjs issue shown emberjs site optimized one locale sure team supporting localization ember website documentation significant effort would best treat emberjscom website one optimized english sure firefox problems", "d": "9/2015"}, {"body": "thanks everyone", "d": "9/2015"}, {"body": "agree points closing duplicate tricknotes working", "d": "9/2015"}, {"body": "searching embermergeobjectassign issues emberassign caught attention thanks", "d": "9/2015"}, {"body": "elithrar issue emberjsdata project emberjsemberjs project also perhaps join documentation channel embercommunityslackcom chat let know need clarity", "d": "9/2015"}, {"body": "move", "d": "9/2015"}, {"body": "may regression", "d": "9/2015"}, {"body": "address existing issue either repo generally sure lack warningerror shows today", "d": "9/2015"}, {"body": "takes branch errors", "d": "9/2015"}, {"body": "released tasks todo next x update morphrange htmlbars x pull htmlbars write regression test ember", "d": "9/2015"}, {"body": "needs included updated htmlbars version released updated", "d": "9/2015"}, {"body": "tiny modules updated todo list", "d": "9/2015"}, {"body": "hello stefanpenner two three prerequisites completed left write regression test within ember repo got enough plate nt mind closing issue long give hint regression test would look like rose tulip thanks", "d": "9/2015"}, {"body": "duggiefresh thanks believe sufficient try template resulting error rather useless p", "d": "9/2015"}, {"body": "pertinax assertion clear app define query param parent child work prior version ember perhaps make embertwiddle example showing working code", "d": "9/2015"}, {"body": "pixelhandler understand error means example app", "d": "9/2015"}, {"body": "aldhsu using default action helper checkbox intercepts click behavior mention also bind event think looking note accomplishes thing", "d": "9/2015"}, {"body": "thanks xtian solves issue define event explicitly future action helper template expected click default prevented helper emberjs guide default action helper listens click events triggers action user clicks element however actually preventing default click original twiddle see event undefined action intended behaviour", "d": "9/2015"}, {"body": "constructed twiddle bit surprised results called result event default action helper nt work expected event passed action helper click specified also nt work little surprising event passed template specified click works surprising given event passed action helper onchange specified works expected event passed", "d": "9/2015"}, {"body": "aldhsu yeah intended actions higherlevel abstraction event handlers nt receive dom event using normal helper style nt realize action would receive event using style makes sense action function explicitly set callback event typically want interact dom events create component bind events js import component embercomponent import embereventedon export default componentextend click ev handler click function ev", "d": "9/2015"}, {"body": "thanks clarification xtian", "d": "9/2015"}, {"body": "largely delete shape costly appears like improvement w benchmark code js var assert require assert function makedictionary parent var dict argumentslength objectcreate parent dict dict null delete dict dict return dict function makedictionarynodelete parent var dict argumentslength objectcreate parent dict dict null return dict var proto objectcreate null without always still end new emptyobject constructor object constructor value undefined enumerable false writable true function emptyobject emptyobjectprototype proto function makedictionarywithemptyobject var dict new emptyobject dict dict null delete dict dict return dict function makedictionarywithemptyobjectnodelete var dict new emptyobject dict dict null return dict assert makedictionary assert makedictionarynodelete assert makedictionary null assert makedictionary assert makedictionarywithemptyobject assert makedictionarywithemptyobjectnodelete require doyouevenbench name makedictionary fn function return makedictionary name makedictionarynodelete fn function return makedictionarynodelete name makedictionary null fn function return makedictionary null name makedictionary parent fn function return makedictionary name makedictionarywithemptyobject fn function return makedictionarywithemptyobject name makedictionarywithemptyobjectnodelete fn function return makedictionarywithemptyobjectnodelete", "d": "9/2015"}, {"body": "nice benchmarking planning submitting pr notating details issue make sure nt loose track", "d": "9/2015"}, {"body": "noting details get cross browser numbers first good submit pr", "d": "9/2015"}, {"body": "chrome safari version version", "d": "9/2015"}, {"body": "stefanpenner yes great dictionary like objects nt know perf increase nice using objectcreate null enum types ember side", "d": "9/2015"}, {"body": "commit breaks linkto assuming tests still pass including ones inspect attribute appears insidious bug cc wycats", "d": "9/2015"}, {"body": "make reproduction jsbin submit failing test pr test suite indeed pass seems odd linkto href completely busted", "d": "9/2015"}, {"body": "repro inspect anchor note nt literally simple possibly could click link still works gets fired imagining tests still continue pass also maybe forced lazy evaluation computed property accessing attr show time tests", "d": "9/2015"}, {"body": "mobile atm test also", "d": "9/2015"}, {"body": "works works current beta channel", "d": "9/2015"}, {"body": "thank", "d": "9/2015"}, {"body": "submitted writeup fix", "d": "9/2015"}, {"body": "looks like works", "d": "9/2015"}, {"body": "xtian thanks checking likely fixed", "d": "9/2015"}, {"body": "confirmed jsbin nt work earlier yesterday likely fix also app saw problem first works thanks", "d": "9/2015"}, {"body": "believe duplicate already fixed latest release beta build try link issuepr later", "d": "9/2015"}, {"body": "think pr", "d": "9/2015"}, {"body": "looks like fixed canary", "d": "9/2015"}, {"body": "awesome thanks checkingconfirming", "d": "9/2015"}, {"body": "fix back ported rwjblue", "d": "9/2015"}, {"body": "dhaulagiri sure commit fixes opposed backporting someone tracks safe enough immediate release", "d": "9/2015"}, {"body": "try look super familiar ember code base blocking issue upgrade though try make time", "d": "9/2015"}, {"body": "rwjblue would like us chat class issue meeting today need stance upgrade blocking bugs undermine ease upgrade goals obviously fix want make sure everyone understanding aligned", "d": "9/2015"}, {"body": "also fixed difference seems particular case object wheres gt presumably string", "d": "9/2015"}, {"body": "quick glance suggests leaking", "d": "9/2015"}, {"body": "ya leaking potentially others", "d": "9/2015"}, {"body": "wycats hinted quick check confirms instead direct attrs interaction solve issue calls replace example js import getvalue emberhtmlbarshooksgetvalue var currentwhen getvalue attrs currentwhen", "d": "9/2015"}, {"body": "dhaulagiri spare cycles", "d": "9/2015"}, {"body": "stefanpenner provided get guidance needed happy leg work early next week", "d": "9/2015"}, {"body": "closed", "d": "9/2015"}, {"body": "thanks dhaulagiri", "d": "9/2015"}, {"body": "jerel quick way someone see emulated nt personally pc", "d": "9/2015"}, {"body": "ought help", "d": "9/2015"}, {"body": "jherdman curious anything quicker installing perhaps web based really nt want install", "d": "9/2015"}, {"body": "pixelhandler screenshot result code far tell resulting html correct compared versions guessing something element created timing type added perhaps guess", "d": "9/2015"}, {"body": "pixelhandler free trial browserstack offers", "d": "9/2015"}, {"body": "likely came", "d": "9/2015"}, {"body": "eddflrs yeah would cool could group fund browserstack ember debugging community", "d": "9/2015"}, {"body": "jerel yeah browsers display correctly either way", "d": "9/2015"}, {"body": "appear caused ember trying set element dom temporary workaround implemented component put template works", "d": "9/2015"}, {"body": "kennedytedesco think past series jquery use older browser support support older browsers offhand idea plan use version jquery default dependency appaddon developer free change", "d": "9/2015"}, {"body": "pixelhandler yes thought forgotten change core dependencies smile issue important stand open closing", "d": "9/2015"}, {"body": "works fine valuelength replaced value", "d": "9/2015"}, {"body": "confirm list deprecations pending addition deprecations guide list large checklist issue emberjswebsite issues", "d": "9/2015"}, {"body": "rwjblue deprecations add issue made comment request added", "d": "9/2015"}, {"body": "handling deprecation currently using implementation instead cases", "d": "9/2015"}, {"body": "thanks furkanayhan solution currently using definitely removes deprecation interested hear reasoning behind deprecation well officially recommended alternatives", "d": "9/2015"}, {"body": "bratukham looks like using set data seems introduce race condition forked example without using init set data would expected name passed dname hello prop renders properly example using init appear passed value hello changed init usage click data used hello value", "d": "9/2015"}, {"body": "pixelhandler problem data coming changed little bit rendering possibility race condition actually expected bahavior ember race conditions used", "d": "9/2015"}, {"body": "really understand twiddle trying make clearer step step explanation error state happens", "d": "9/2015"}, {"body": "services general singleton default would expect single instance share reproduction jsbin embertwiddle", "d": "9/2015"}, {"body": "jsbin", "d": "9/2015"}, {"body": "orgil rwjblue yeah appears problematic cloned jsbin example also logged equality check injected service instance service found via container lookup however change service use init method works works breaks", "d": "9/2015"}, {"body": "possible set array property without init due array nature shared instance", "d": "9/2015"}, {"body": "sure indeed bug far see reregistering service class different name registry fetching instance respectively however point view container instances plural singletons scope name see jsbin", "d": "9/2015"}, {"body": "thriqon nt know intended documented intended behavior whole point ca nt access singleton instance emberinject even passed registry name always returns new instance works pull container name jsbin", "d": "9/2015"}, {"body": "well access singleton instance use correct name registering service class new name effectively giving constructor two names name singleton instance intuitively expect", "d": "9/2015"}, {"body": "registering service class new name effectively giving constructor two names name singleton instance intuitively expect yes registering get whole new thing seems working intended theory people want alias things could explore feature anyways closing appears working expected", "d": "9/2015"}, {"body": "one idea make test helpers available app rather global would simplify solve existing issues cc teddyzeenny", "d": "9/2015"}, {"body": "mean registering app instance test helpers currently get registered app indirectly via property eg", "d": "9/2015"}, {"body": "stefanpenner keep helpers application instance applicationinstance instances instead also changed receive app instance instances instead application instance try provide better feedbacksuggestions evening", "d": "9/2015"}, {"body": "applicationinstance instances instead yes continue global helpers rather clear creation new instance mashes globals previous ones also important people delete appinstances leak like mad", "d": "9/2015"}, {"body": "applicationinstance instances instead also changed receive app instance instances instead application instance maybe also start discouraging use globals", "d": "9/2015"}, {"body": "sounds like two parts move test helpers use applicationinstance instead application deprecate somehow discourage use global helpers picturing unfolding like js module acceptance test thisapp applicationcreate beforeeach thisinstance run thisapp buildtestinstance creates instance registers test helpers aftereach run thisinstance destroy run thisapp destroy test test assert gt thisinstancevisit route click button deprecation make sense also backcompat assuming using instances instead app test helpers break bunch stuff", "d": "9/2015"}, {"body": "ya similar picturing", "d": "9/2015"}, {"body": "could always enable shorthand gt", "d": "9/2015"}, {"body": "could bundle way mirrors component integration tests cause would huge", "d": "9/2015"}, {"body": "timevans", "d": "9/2015"}, {"body": "timevans something like maybe plan start work either weekend monday stefanpenner thoughts backwards compatibility important maybe two methods registering test helpers one uses applicationinstance old one application", "d": "9/2015"}, {"body": "sounds right line current test helpers another option would nt care long provides consistency would wonderful able things", "d": "9/2015"}, {"body": "functionality already effectively create another child route called index index chains deeply route exists", "d": "9/2015"}, {"body": "hey bravely ok say following routes right renders way effectively indexhbs page contain content child route render outlet like outlet index page also contain default content wondering explained lines", "d": "9/2015"}, {"body": "one template want route render default render go show route", "d": "9/2015"}, {"body": "bravely ok cool try thanks", "d": "9/2015"}, {"body": "possible related", "d": "9/2015"}, {"body": "ltouro thanks closed", "d": "9/2015"}, {"body": "andrewjmc create second jsfiddle example working forked appears behavior", "d": "9/2015"}, {"body": "ah perils working train saved version final version code lacks necessary handlers different routes tablet try produce example previous successful version tomorrow", "d": "9/2015"}, {"body": "sorry delay jsfiddle ember open modal application route find merrily switch modal open child route able switch", "d": "9/2015"}, {"body": "find works ember nb close fails application level opened child route behaviour failing render without error clearly wrong however whether intended render fail error succeed clear would seem sensible ember agnostic route command render template disconnect outlet came", "d": "9/2015"}, {"body": "related seeing similar issue", "d": "9/2015"}, {"body": "seems similar conceptually definitely exactly issue fixed", "d": "9/2015"}, {"body": "bead random mind dump follows solution ensure template last yielded need clear morph rendering fix working tests", "d": "9/2015"}, {"body": "fixes upstream", "d": "9/2015"}, {"body": "try master appears related cherry picked branch travis done able bower install save ember get fix source rwjblue", "d": "9/2015"}, {"body": "think might fixed leak used combine strings", "d": "9/2015"}, {"body": "sounds exactly like give try", "d": "9/2015"}, {"body": "thanks thorough bug report please confirm latest builds indeed fixed able use latest builds channel get fix", "d": "9/2015"}, {"body": "thanks everyone coincidence got pred today narrowed end", "d": "9/2015"}, {"body": "nested seem okappropriate seem wrong", "d": "9/2015"}, {"body": "rwjblue im curious path variation disallowed", "d": "9/2015"}, {"body": "rwjblue seems like would nice shorthand deep key paths reads better something nested gets even using concat option makes brain go ick multiple params seems logical perhaps others feel differently", "d": "9/2015"}, {"body": "rwjblue nt like get act like emberget hand something easy asttransform better solution future", "d": "9/2015"}, {"body": "mmun", "d": "9/2015"}, {"body": "", "d": "9/2015"}, {"body": "use helper", "d": "9/2015"}, {"body": "btecu helper used need dynamic member lookup much like js examples template equivalent equivalent heard typically used dealing polymorphic models often dynamic forms", "d": "9/2015"}, {"body": "mmun rereading everything sounds like feel least support currently allowed would enable use mean asttransform", "d": "9/2015"}, {"body": "nt work sad forget ast transform misunderstood problem agree work", "d": "9/2015"}, {"body": "mmun believe mentioned intro description currently disallow key include period see", "d": "9/2015"}, {"body": "simple removing assert nt see anything else holding back periods multiple dynamic keys could handled function maybe changing line something like would allow either realize multiple dynamic keys option nt popular ya trying figure could enabled", "d": "9/2015"}, {"body": "fully addressed", "d": "9/2015"}, {"body": "could show create object proxy", "d": "9/2015"}, {"body": "js var proxy emberobjectextend emberpromiseproxymixin create promise emberrsvppromiseresolve hello settimeout function consolelog proxyget contenthello consolelog proxyget hello undefined", "d": "9/2015"}, {"body": "orisomething seems working expected proxy would", "d": "9/2015"}, {"body": "exactly dspromiseobject defined emberdata", "d": "9/2015"}, {"body": "thank feel stupid disappointed", "d": "9/2015"}, {"body": "adding attribute would normally affect standard tagged component element result error used tag less component also add assertion detect event handlers ie click function root component help prevent situations folks fully understand tagless component expect events andor element attributes somehow work element", "d": "9/2015"}, {"body": "rwjblue nt warning enough errors limiting folks understand tagless components experimenting react past months ca nt help think tagless components de facto solution would recommended way implement example seems component tagnames inherit views behaviors namely default action", "d": "9/2015"}, {"body": "upcoming feature allow us remove special scenarios mostall current js api managing component element example added component js definition used way would recommended way implement example sure question questions something generally better suited stack overflow see errors attempting introsetup going go ahead close issue happy reopen demonstrate bug though demo", "d": "9/2015"}, {"body": "strange thanks time provide details whenif replicate issue", "d": "9/2015"}, {"body": "acalfo see one jsfiddle example assigned promise two results returns one promise referenced arrays since code creates one promise seems correct function failure executed", "d": "9/2015"}, {"body": "thanks response realize terrible job showing problem updated fiddle better job trouble even though handling error promise keep getting error console uncaught undefined open console run fiddle see talking", "d": "9/2015"}, {"body": "sorry raise issue plugin using causing issue plugin modifying target key controller resetting back", "d": "9/2015"}, {"body": "problem glad got figured", "d": "9/2015"}, {"body": "ah chance missed", "d": "9/2015"}, {"body": "thanks teddyzeenny correct case explicitly reloaded model trigger setupcontroller another time currently eg import ember ember export default emberrouteextend model function params gets called initial load refresh explicitly reload model server return thisstorefindrecord mymodel paramsmymodelid reload true setupcontroller function controller model gets called initial load refresh thissuper controller model actions refreshroute function thisrefresh", "d": "9/2015"}, {"body": "bjubinville perhaps put code embertwiddle jsbin check older version see setupcontroller called past nt", "d": "9/2015"}, {"body": "pixelhandler", "d": "9/2015"}, {"body": "favor reverting put time fixing issue one described", "d": "9/2015"}, {"body": "rwjblue curious view deprecations would classnames applied application view like import ember ember export default emberviewextend classnames corewrapper", "d": "9/2015"}, {"body": "tomoguisuru see comment directly suggested using addon nonhacky way today", "d": "9/2015"}, {"body": "stefanpenner symbol implementation proposed public api private public maybe move rfc issue", "d": "9/2015"}, {"body": "private internal", "d": "9/2015"}, {"body": "fixed stefanpenner review see eligible backporting", "d": "9/2015"}, {"body": "take care backport", "d": "9/2015"}, {"body": "indirectly definitely bit ended overriding application adapter return custom type response nt pass felt clunky compared able directly grab status far removed example docs making underlying http status making available within top level make testing status codes much simpler", "d": "9/2015"}, {"body": "anyone else runs issue currently extending resolve routes sitting next renderable components follows added benefit requiring prefix routablecomponent routes defined templates issue closed works well routable components implementation likely change rfc implemented", "d": "9/2015"}, {"body": "thanks following providing solution", "d": "9/2015"}, {"body": "possibly related", "d": "9/2015"}, {"body": "nt closed merged rwjblue", "d": "9/2015"}, {"body": "seems good thanks", "d": "9/2015"}, {"body": "runspired asakusuma app issue coming undefined error removed function runspired hinted route transitions successful using ember sure else could provide assist issue please let know", "d": "9/2015"}, {"body": "ryanlitalien figure way fix issue tests still pass would awesome tried change mentioned weeks ago broke tests", "d": "9/2015"}, {"body": "also experiencing issue render work fine forces glimmer rerender old elements removed obviously bad", "d": "9/2015"}, {"body": "also definitely labeled glimmer regression", "d": "9/2015"}, {"body": "additionally present even use", "d": "9/2015"}, {"body": "suspect initially reported issue related one memory leak bugs fixed causing ifelse torn properly traversing truthy falsey blocks", "d": "9/2015"}, {"body": "upstream fixing pr description issue confirmed reported issue jsbin working without error", "d": "9/2015"}, {"body": "looks like another scenario reported noslouch need dig also reopening", "d": "9/2015"}, {"body": "rwjblue definitely happening", "d": "9/2015"}, {"body": "rwjblue information seems like passing index component within like noslouch example well", "d": "9/2015"}, {"body": "jsbin array numbers iterated via component created using iteration index components click button underlying array numbers swapped another array numbers triggering rerender rerender assertion triggered two items exist following walk happening initially rendered create components new entry added used new entry added used new entry added used new entry added used new entry added used new entry added used click change frequency templating layer begins processing new list items new entry added used new entry added used previously rendered item reused item iterated prior iteration already rendered new entry added used previously rendered item reused item iterated prior iteration already rendered new entry added used see actually told ember create two elements id assertion correctly telling digging tracking actually happening nt something fix unless completely throw away rerender optimizations added", "d": "9/2015"}, {"body": "stefanpenner like close call", "d": "9/2015"}, {"body": "thank clear explanation ember internals use case runspired brings comment form elements labels taking advantage html native clicklabelandfocusinput behavior labels inputs matching attributes situation ended resolving rendering frequency displaying based another property seems like asking performance lags maybe glimmer handle", "d": "9/2015"}, {"body": "need avoid using element created never update believe warningassertion somewhere try change item reused likely cause issue used similarly walk however use something object yielded roughly guaranteed avoid type conflict underlying object reused still needhave value point technique asking attribute value input technique works perfectly well use something based object yielded basis reuse rendering engine example could something like assuming thing yielded object primitive javascript apphelpersidentityforjs import ember ember export default emberhelperhelper function object return emberguidfor object", "d": "9/2015"}, {"body": "rwjblue agreed although suspect may cause upgrade pains feels like big footprints gun relying dynamically toggling id settling correctly unintended hazard apologies past exposed hazard", "d": "9/2015"}, {"body": "noslouch example exactly wondering nt element reused trying create element id", "d": "9/2015"}, {"body": "also solved using eg", "d": "9/2015"}, {"body": "update hunch correct using solves problem guessing longer tries tie element previous elements array rwjblue", "d": "9/2015"}, {"body": "also using seems much faster case", "d": "9/2015"}, {"body": "rwjblue stefanpenner still possible create pr deprecation remove functionality mmun written remove beta", "d": "9/2015"}, {"body": "far late preparation ember", "d": "9/2015"}, {"body": "also experiencing issue jquery sortable ember controller action sort given item attribute filename sorts array properly computed property position array updates accordingly ui actual sequence items dom changed seems sortable plugin something interferes helper keeping track whether items need rendered commenting sortable function allows controller action changing array sort order reflected dom", "d": "9/2015"}, {"body": "think similar issue nt know needs issue maybe jsbin shows issue observerscomputed properties component gets value nt triggering changes value seems happen value object workaround using different nonobject property trigger observerscomputed properties instead ember", "d": "9/2015"}, {"body": "ping wycats help us issue", "d": "9/2015"}, {"body": "shipit", "d": "9/2015"}, {"body": "workaround issue ca nt use disabled property text needs selectable copyable although chrome allows selectcopy text disabled input field firefox", "d": "9/2015"}, {"body": "lazloman works pass undefined instead false readonly", "d": "9/2015"}, {"body": "opened fix embertesthelpers", "d": "9/2015"}, {"body": "upgraded ember test helpers nt resolve problem think use fork necessary still", "d": "9/2015"}, {"body": "previously failing test added switchflyembertesthelpers confirming rendered component integration test test passes canary test blimmer submit pr tests show failing try jump figure else might needed", "d": "9/2015"}, {"body": "spent time trying figure written test nt failing could nt figure however make simple project shows still failing current emberqunit using current embertesthelpers maybe missing something nt obvious looking minutes failing tests branch code easy repro steps change bowerjson ember emberqunit embertesthelpers change ember still fails message", "d": "9/2015"}, {"body": "rwjblue fix incoming beers", "d": "9/2015"}, {"body": "see raytiley thanks working figure issue fix", "d": "9/2015"}, {"body": "wonder already update", "d": "9/2015"}, {"body": "possibly related", "d": "9/2015"}, {"body": "also getting error upgrading even using query param aliases normal properties noticed occurs set query params used work fine controller js queryparams period preset default date range preset past days period day setdatesfrompreset init observer preset function setdatesfrompreset const preset thisget preset const period reportcontrollerdatepresetqueryparams preset", "d": "9/2015"}, {"body": "karanjthakkar find solution upgrade components broken using rerender everywhere switch readonly editonly modes", "d": "9/2015"}, {"body": "kushdilip used new syntax event publishing rerender dom", "d": "9/2015"}, {"body": "karanjthakkar paste snippet something implement helper nt find event component code triggers dom rerender", "d": "9/2015"}, {"body": "ping rwjblue going make", "d": "9/2015"}, {"body": "pr less work initial render removes double looping removes cases", "d": "9/2015"}, {"body": "also note emberperformance suite used numbers suffers issue causes embermetal debug build ember created issue track makes comparisons using emberperformance ember versions bit since includes etc statements", "d": "9/2015"}, {"body": "pr update emberperformance tests work gathered raw caveat data spreadsheet", "d": "9/2015"}, {"body": "quick numbers performance test closed", "d": "9/2015"}, {"body": "issue ember component like interestingly attributebinding breaks event handlers eg never fires removing makes events work", "d": "9/2015"}, {"body": "ah get happening make sure nt related concatenatedproperties bug resolved upgraded problem attributebind overrides unique id added presumably binding event handlers workaround relevant issue", "d": "9/2015"}, {"body": "demo jsbin seems working properly branch", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "fix able bind seems break event handlers eg click handler try adding click handler example eg alert notice nt fire attributebindings includes drop try change css styling target class instead id could still see square notice handler works", "d": "9/2015"}, {"body": "think one closed", "d": "9/2015"}, {"body": "woo skeate smile", "d": "9/2015"}, {"body": "issue ever find solution", "d": "9/2015"}, {"body": "would go something like want render error template errors get white screen", "d": "9/2015"}, {"body": "heading away unable look detail given problem fires looks like ember data error suspect unrelated report", "d": "9/2015"}, {"body": "also ran issue safari accidentally defined property twice model get error browser took tweaking code get appear initially failed silently", "d": "9/2015"}, {"body": "runspired thanks workaround used application didtransition hook coffeescript route emberrouteextend actions didtransition gt emberrunschedule afterrender gt formattitle formattitle gt urlsplit windowlocationhrefsplit", "d": "9/2015"}, {"body": "see also", "d": "9/2015"}, {"body": "final workaround code allow components passed data different property keys controller instance controller property data wants use model router property key matter component need fixed property key always used controller foo instead dynamically find would really prefer ember support internally controllers components", "d": "9/2015"}, {"body": "please provide jsbin demo workaround disabled enabled", "d": "9/2015"}, {"body": "lolmaus jsbin demo", "d": "9/2015"}, {"body": "awesome looks like generalized addon", "d": "9/2015"}, {"body": "rwjblue henrymazza much thought think incorporated actions better ember based code trying make party libs events easy possible use often see attempts emulating actions via events coming party components nt break jquery based eventing semantics given prevalent", "d": "9/2015"}, {"body": "knownasilya rebase hope alright liked documentation provided mixonic nt know mergedproperties feature crystal clear reading", "d": "9/2015"}, {"body": "triplecurly use discouraged prototypal training team recent emberjs training session chicago may still need helper", "d": "9/2015"}, {"body": "internal helper think would generally someone wanted document feature flag exposing public api", "d": "9/2015"}, {"body": "rolling custom helper also quite trivial", "d": "9/2015"}, {"body": "course done strikes one things everyone anyway maybe framework default", "d": "9/2015"}, {"body": "everyone definitely nt believe needed yet example even everyone needed need make nice addon share wink", "d": "9/2015"}, {"body": "decorators spec stable enough rwjblue project great step right direction classes decorators builtin ember would dramatically improve developer experiences mention morale", "d": "9/2015"}, {"body": "anywhere ember guides api difference explained ca nt seem find sort entry", "d": "9/2015"}, {"body": "kurtrmueller try googling without mentioning ember tons info", "d": "9/2015"}, {"body": "guess demo app pretty important case stuck problem getting facebook see meta tags head change dynamically go new news item got al working noticed idd fb run javascript defaults standard og description etc kinda stuck probably looking something like working demo would come handy", "d": "9/2015"}, {"body": "wwwprerenderio combined help waiting fastboot land packages feature demos enough help way", "d": "9/2015"}, {"body": "add duizendnegen suggestion embercli heroku buildpack supports prerenderio config current setup works fine still ca nt wait fastboot though", "d": "9/2015"}, {"body": "duizendnegen dankjewel defiantly help way find prerenderio already setting test docker ill post findings someone wants use docker setup flow", "d": "9/2015"}, {"body": "let us know", "d": "9/2015"}, {"body": "unfortunate bug user expects work spend much time tracking issue", "d": "9/2015"}, {"body": "knownasilya paste sample code qpcp properties", "d": "9/2015"}, {"body": "machty sure exactly case working", "d": "9/2015"}, {"body": "closing recursion removed", "d": "9/2015"}, {"body": "solution skoryky nt work wrap refresh emberrunonce avoid transitionaborted error js router code actions queryparamsdidchange function emberrunonce thisrefresh", "d": "9/2015"}, {"body": "skoryky workaround worked ember thanks guys", "d": "9/2015"}, {"body": "update even changing value controller url updates couple ms goes back old value even controller new value variable", "d": "9/2015"}, {"body": "case anyone find via google issue basically solved edge case remain query param nt set controller serialize var animalscontroller embercontrollerextend queryparams mycat mycat null deliberately set illustrate issue export default animalscontroller", "d": "9/2015"}, {"body": "definitely fixed new similar memory leak arisen symptoms similar yogananthan including leaked dom trees proportional size templates involved github demo follow readmemd setup instructions checkout commit watch leak big component every transition stackoverflow post encouraged post instead", "d": "9/2015"}, {"body": "arthare open new issue sure test latest also", "d": "9/2015"}, {"body": "k", "d": "9/2015"}, {"body": "updated fixed guess", "d": "9/2015"}, {"body": "fixed arthare", "d": "9/2015"}, {"body": "issue using ember including id dynamic route linkto call solved eg linkto homeindex id tagname li", "d": "9/2015"}, {"body": "alexzielenski example fix nginx", "d": "9/2015"}, {"body": "joshuairl sorry two years ago nt remember though judging response seems nt touch nginx config instead defined resource paths forwards slash prefix instead used", "d": "9/2015"}, {"body": "lol issue horrid deploying cap nt include dist directory commit horrible sent iphone sep pm alex zielenski notifications githubcom wrote joshuairl sorry two years ago nt remember though judging response seems nt touch nginx config instead defined resource paths forwards slash prefix instead used reply email directly view github", "d": "9/2015"}, {"body": "hot css loading well weppack", "d": "9/2015"}, {"body": "css reloading already possible", "d": "9/2015"}, {"body": "requirejs amd reload anything js css html part point requirejs easily asynchronously load files anytime development", "d": "9/2015"}, {"body": "views gone new ember way", "d": "9/2015"}, {"body": "implementation missing embercomputeddynamicalias", "d": "9/2015"}, {"title": "css getting opacity value setting results invalid value iframe firefox", "body": "test expected result alert message passed eg chrome firefox result expected opacity value returned value jquery versions available jsfiddle result os windows test details firstly opacity element set value received set nt try another properties tried opacity workarounds works fine following tests settimeout get call jquery free test iframe free test", "num": "2622", "d": "9/2015"}, {"title": "find pseudo selectors behaves strangely dom", "body": "take look following example firefox look div within developer tools inspector click attribute gets added subsequent click removed however css styling get applied closing opening dev tools also removes chrome dev tools div element flashes indicating sort change gets set however ie seems nothing good seems happen element set whenever pseudo selector used might also restricted method", "num": "2620", "d": "9/2015"}, {"title": "jqueryparam semantically incorrectly handles boolean properties", "body": "boolean values ca nt passed query string explicitly turns boolean properties input object strings turned turned example returns cases server side scripts nt ability check whether query variable originally boolean string auto conversion boolean turns would great handles boolean properties like html checkbox element returns state empty string state example would return", "num": "2619", "d": "9/2015"}, {"title": "jquery data method play nicely angularjs", "body": "problem described", "num": "2614", "d": "9/2015"}, {"title": "document ready waits images download script included asynctrue", "body": "documentready binding async script waits imagesresources downloaded detailed description url nt act like loaded without async", "num": "2611", "d": "9/2015"}, {"title": "safari fails createhtmldocument support test", "body": "browserstack removed amp restored safari api started failing createhtmldocument support test unrelated jquery core code changes restarted older job failed even though successful initially user agents browsers differ old one succeeded new one fails notice vs token edit comparison see successful run old safari broken one new safari", "num": "2609", "d": "9/2015"}, {"title": "minified syntax error causing hangs isarraylike function", "body": "function contains following code minification reduces firefox javascript interpreter misreading throwing following typeerror invalid operand btolowercase function r var b length amp amp alength cmtype ret someone put space length thanks", "num": "2606", "d": "9/2015"}, {"title": "visible selector including invisible elements", "body": "please see comment quick review example fix addressing issue reopened please close issue", "num": "2604", "d": "9/2015"}, {"title": "fire global function response ready callback function fires", "body": "user authentication using ajax make request resource accessed authenticated user redirect user browser login page find authentication current user add checking callback function every ajax calling verbose however global function setting like ajaxstart help helpful already added local jquery file call beforecallback specify business code beforecallback function", "num": "2603", "d": "9/2015"}, {"title": "allow jqueryajaxsettingsbeforesend handle async promises", "body": "hi currently jqueryajaxsettingsbeforesend works sync code would nice could support async code let look code example imagine need value added jquery ajax request headers app web moving async operations imho would make sense support pattern jquery thoughts thanks", "num": "2600", "d": "9/2015"}, {"title": "ieedge taking unusually long time create many elements", "body": "update one sites dissects textinput tries explain depending length text end several thousand elements functions lightningfast chrome firefox ie stalls trying create elements many problem nt rendering elements actual creation demo show browsers two tests take comparable time per browser limit loop approaches edge likely stall seeing lot website takes seconds edge takes seconds two tests chrome firefox handily four seconds five solid minutes waiting edge passes closed process chrome less seconds strange edge many things much quicker ie frequently speeds rival exceed chrome firefox sample run across browsers mentioned results first number test renders screen second number populates jquerycreated element experienced crashes tests nt think browser likes tags nested deep actually anyway experienced crashes test writes jquerycreated element ms browsers code document ready function clk click function starttime new date gettime var htm var lt htm append htm recip html htm endtime new date gettime totaltime endtime starttime alert totaltime ms var recip click function starttime new date gettime var htm var lt htm append htm reciphtml htm endtime new date gettime totaltime endtime starttime alert totaltime ms", "num": "2597", "d": "9/2015"}, {"title": "ie clears expando instead setting undefined", "body": "following test fails ie", "num": "2596", "d": "9/2015"}, {"title": "json ajax post messed postcontent content", "body": "issue reported closed supposedly duplicate however opposed desribed url gets damaged actual data content also means ca nt fixed cleaner usage jquery avoiding double questionmarks urls function var data aa bb ajax beforesend function alert passed ajax data value nn data nnbut going sendnn thisdata type post url data data datatype json post part ajax request content gets damaged code demonstrates version jquery used also branch error problem browser independent function var data aa bb ajax beforesend function alert passed ajax data value nn data nnbut going sendnn thisdata type post url data data datatype json", "num": "2595", "d": "9/2015"}, {"title": "json ajax post messed postcontent content", "body": "post part ajax request content gets damaged code demonstrates version jquery used also branch error problem browser independent function var data aa bb ajax beforesend function alert passed ajax data value nn data nnbut going sendnn thisdata type post url data data datatype json", "num": "2594", "d": "9/2015"}, {"title": "floating point missing width", "body": "element lets call may real width floating point number example element width set css parent element width want set another element lets call width use width however jquery width function returns integer instead floating point number jquery rounds width cases problem noticed sometimes width particular fraction jquery returns number results rendeded one pixel compared jquery made returns floating point widths like browser internally uses order get consistent results time browser accepts floating point widths jquery rounds sometimes leads wrong behavior", "num": "2593", "d": "9/2015"}, {"title": "event delegation firefox target inside disabled element event bubble", "body": "hi made pen reproduce problem works properly desktop version ie chrome safari firefox sure right place post issue cause nt think really problem jquery rather firefox however post anyway maybe someone point already existing firefox issue moreover seems somehow correlated", "num": "2592", "d": "9/2015"}, {"title": "stop resets slidetoggle", "body": "something like slidetoggle animation stop clicked reset start position inspect content element see overflow hidden rule inline style call stop animation rule removed toggle stop content toggle click function content slidetoggle stop click function content stop", "num": "2591", "d": "9/2015"}, {"title": "offset fractions test fails chrome", "body": "two days ago testswarm updated jquerycore browser set chrome chrome revealed test failure offset fractions see check top expected result looks like chrome precise tests expect", "num": "2590", "d": "9/2015"}, {"title": "ajax type jsonp excute callback url response status", "body": "", "num": "2587", "d": "9/2015"}, {"title": "animate", "body": "elements perform original animation callback get called least get called", "num": "2585", "d": "9/2015"}, {"title": "ajax response contenttype detected wrongly", "body": "ajax call made download excel file server responds excel file server sets content type jquery reads response detects content type since content type contains word xml jquery tries parse binary file xml triggers error content type wrongly detected following function jquery version used", "num": "2584", "d": "9/2015"}, {"title": "data unused method", "body": "question found code blocks datajs js todo calls data removedata replaced direct calls datapriv methods deprecated data function elem name data return dataprivaccess elem name data jquery use like comments going remove", "num": "2583", "d": "9/2015"}, {"title": "fr tail access function", "body": "easy get text sibling elements want get need write something like also need add arrayfindindex polyfill let stole tail name function return possibly changeadd next text node sibling see also cheeriojscheerio", "num": "2580", "d": "9/2015"}, {"title": "use operator search length", "body": "error show show", "num": "2579", "d": "9/2015"}, {"title": "add git hook linter", "body": "could run linters triggered command possible garbage would caught time maybe smoke tests would also appropriate thinking could job", "num": "2577", "d": "9/2015"}, {"title": "triggering jquery event working firefox versions", "body": "triggering new jquery event jquery element everything works fine chrome opera comes firefox throws exception like jquery version line exception browser firefox alpha", "num": "2576", "d": "9/2015"}, {"title": "jquery supporting ie", "body": "get error ie object nt support property method addeventlistener working browser version gt ie", "num": "2573", "d": "9/2015"}, {"title": "use dot notation throws property", "body": "ref dmethvin leave quoted fix remove next minormajor release back yuicompressor version since jscs chokes", "num": "2571", "d": "9/2015"}, {"title": "looks like sizzle", "body": "looking repository trying understand something jquery site working stumbled across jqueryexternalsizzledistsizzlejs line statement condition checked using instead general coding practice variables nt set conditional statements except extreme optimization going either looks like common typo looks like common typo comment explaining developer clever", "num": "2570", "d": "9/2015"}, {"title": "problem ajax contexn", "body": "used pyhedgehog decision javascript var popup api key key id callapi function opt originally popup windowpopup true wrong use approach everything works returns problem value changed", "num": "2569", "d": "9/2015"}, {"title": "jquery angular edge eventdispatch question", "body": "angular app jquery included minified vendor file uses one case inside directive basically use animate scrolling element added dom noticed error logs tell us much happens edge browsers eventdispatch found two places jquery code question might something jquery edgeangular issue jquery used", "num": "2565", "d": "9/2015"}, {"title": "work extend method", "body": "code example using callapi method property api also changes javascript popupcallapi data mess text lt url data key key id mess text popupapi lt key key id mess text using jquery", "num": "2564", "d": "9/2015"}, {"title": "html uses regular expression performs badly ie gt", "body": "rnoinnerhtml lt scriptstylelink causes significant performance issues ie ie edge inserting large amounts html using html function rewritten following rnoinnerhtml performs level browsers exponentially faster ie tests show two columns rows difference seconds versus milliseconds ie note testing first test always slower second chrome firefox ticket logged microsoft however think jquery fixed anyways", "num": "2563", "d": "9/2015"}, {"body": "updated firefox version result", "d": "9/2015"}, {"body": "failed result firefox well historically manipulating iframe instance jquery iframe dicey nt unit tests ensure works case eg sameorigin report mozilla link", "d": "9/2015"}, {"body": "thanks feedback exactly report mozilla mentioned jquery free test works differences test happened inside jquery going investigate later may clarify", "d": "9/2015"}, {"body": "okay sorry missed code multiplebrowser bugs described file maybe firefox fixed original bug caused process", "d": "9/2015"}, {"body": "works mentioned getstylesjs see parent like test though chrome works cases strange", "d": "9/2015"}, {"body": "yeah right prove adding fiddle", "d": "9/2015"}, {"body": "result current dom methods like lacking true rooted selection method sizzle workaround temporarily apply root used selector new findfindall methods fix nobody seems implemented", "d": "9/2015"}, {"body": "dmethvin question applies case presented sounds like bug", "d": "9/2015"}, {"body": "think bug ff dev tools note reopening tools makes go away phantom thing really element", "d": "9/2015"}, {"body": "dmethvin ha indeed recreate jsbincom escape iframe madness open firefox see dev tools returns returns highlight div could report mozilla post link close issue since bug", "d": "9/2015"}, {"body": "go", "d": "9/2015"}, {"body": "mzgol sure problem fired event", "d": "9/2015"}, {"body": "element changed add remove", "d": "9/2015"}, {"body": "dmethvin understood sizzle conversation even removed firefox think also problem anyway sizzle nt simple thing like something else modifying explicitly", "d": "9/2015"}, {"body": "root element already sometimes used otherwise one temporarily added sizzle nt simple thing like domelementsizzle null something else modifying id explicitly modifying property rather attribute prevent firing gone sometimes mutating dom nt present always probably nt good let timmywil weigh whether using property would help opened sizzle ticket", "d": "9/2015"}, {"body": "modifying property rather attribute prevent mutationobserver firing yeah sure mutation nt detect change input element currently way detect change property sadly", "d": "9/2015"}, {"body": "sizzle nt simple thing like domelementsizzle null something else modifying id explicitly need work attribute ca nt select arbitrary properties dmethvin modifying property rather attribute prevent mutationobserver firing property every property change reflected property result mutationobserver firing unless nt understand propose", "d": "9/2015"}, {"body": "property every property change reflected property result mutationobserver firing unless nt understand propose proposed something fired mutationobserver mutationobserver dom detect attribute change dom property js think able future", "d": "9/2015"}, {"body": "dmethvin said set use would property", "d": "9/2015"}, {"body": "yep nt know fact sorry nt understand qsa needs know instead something like edit ahh get trick found right qsa nt allow strangely", "d": "9/2015"}, {"body": "matches elements ancestor even also ancestor following example matches desired undesired remedy prefix selectors ensure descendance context element eg context nt already id add one long enough execute selection note also cases clean point attribute ever exist value", "d": "9/2015"}, {"body": "qsa logic explained long time ago since support forum", "d": "9/2015"}, {"body": "sad john pointed drawbacks seven years ago dom api implementations still nt findfindall yet despite years jquery user code proving useful youmightnotneedjquery", "d": "9/2015"}, {"body": "thanks lot nt know huge fact qsa oo clear sure remove know jquery quiet possible hours ago found jquery make event fired reading dom sound clearly like bug bug feature", "d": "9/2015"}, {"body": "sounds like pretty drastic backwardsincompatible change unlikely land even new major release also seems easy enough work around using custom implementation dependency work around", "d": "9/2015"}, {"body": "dependency use solution process data object passing javascript function filterobjforjqueryparam data var obj data instanceof array ajax url type post data filterobjforjqueryparam foo true bar false flag controls output behavior passed described problem controlled similar way change still impossible continue use solution", "d": "9/2015"}, {"body": "think docs say well note universally agreedupon specification param strings possible encode complex data structures using method manner works ideally across languages supporting input use json format alternative encoding complex data instead", "d": "9/2015"}, {"body": "docs data cover works fetches attributes first time ask uses internal data want setget attributes use code depending using api incorrectly report", "d": "9/2015"}, {"body": "declare script browser waits document ready loads andor runs script point domcontentloaded event already fired jquery uses fallback event case pretty sure describing close dup", "d": "9/2015"}, {"body": "yes think checking interactive state also fix bug thanks", "d": "9/2015"}, {"body": "btw safari ua suggests safari fact safari disguise", "d": "9/2015"}, {"body": "likely invoking string supported version duplicate space causing change behavior would mean serious bug firefox parser syntax error get exactly error unminified version test case please share close see loading jquery nt cause errors firefox", "d": "9/2015"}, {"body": "approach like suggest tried abandoned fact crossbrowser inconsistencies see current model essentially defines position page seems sidestep issues performance degradations implementations free filter selected elements another benefit perspective broadest meaningful definition use case one reliance custom selectors deeply buried", "d": "9/2015"}, {"body": "much spending time dom seems case really comes anchor tags already resolution one might consider length gt least check clientrectlist widthheight hidden point academic cases tested actual behavior suggestion overhead consider request withdrawn thank hard work", "d": "9/2015"}, {"body": "confused issue", "d": "9/2015"}, {"body": "jquery already global methods ajaxstart ajaxstop ajaxcomplete ajaxerror ajaxsuccess ajaxsend suggest add one called ajaxbeforecallback global methods become ajaxstart ajaxstop ajaxcomplete ajaxerror ajaxbeforecallback ajaxsuccess ajaxsend set ajaxbeforecallback function jquery received response server call ajaxbeforecallback function exists call callback function input jquery ajax function jquerypost url data callback ajaxbeforecallback function specify global function check something login status code callback function need add checking code callback function every jquery ajax call", "d": "9/2015"}, {"body": "believe use case already handled function makes easy evaluate andor modify every ajax request sent", "d": "9/2015"}, {"body": "meaning sent mean sent received response server example handle response code", "d": "9/2015"}, {"body": "already object set globally like", "d": "9/2015"}, {"body": "put handling logic put logic every ajax callback function costs lot time copyandpaste work", "d": "9/2015"}, {"body": "mentioned set options globally drawback calls may expecting global behavior apply may override global behavior complete control pageapp understand code run want make kinds changes folks forums stackoverflow probably help implementation", "d": "9/2015"}, {"body": "ok name ajaxbeforecallback confused want entry point handling responses ajax requests use however nt usually recommend applies ajax requests cause unexpected behavior", "d": "9/2015"}, {"body": "blitz dave", "d": "9/2015"}, {"body": "smilecat", "d": "9/2015"}, {"body": "ok let put code add lines jquerydone method deal problem ajax send back specified string redirect user login page set ajaxbeforecallback method page onload method suggestion handle redirection based logic server side ajax calls whole website code callback everything done function done status nativestatustext responses headers var issuccess success error response modified statustext nativestatustext get response data responses response ajaxhandleresponses jqxhr responses convert matter way responsexxx fields always set response ajaxconvert response jqxhr issuccess customized code start call customerized function received respones var iscontinue true fireglobals iscontinue globaleventcontexttrigger ajaxbeforecallback jqxhr issuccess success error typeof iscontinue undefined iscontinue true customized code end iscontinue successerror issuccess deferredresolvewith callbackcontext success statustext jqxhr else deferredrejectwith callbackcontext jqxhr statustext error", "d": "9/2015"}, {"body": "bug tracker nt good place ask help forum stackoverflow", "d": "9/2015"}, {"body": "asking help want make request see whether suggestion accepted part jquery library wrong place place request contribution put request", "d": "9/2015"}, {"body": "vitoou request needs fleshed submitting feature requestbug fix jquery core echo dmethvin recommendation ask forums stackoverflow perfectly fitting ask suggestions handle something", "d": "9/2015"}, {"body": "see sorry", "d": "9/2015"}, {"body": "nt need done imo nt done inside create memoizing function call using definitely bad idea unless written understand every ajax call made new semantics", "d": "9/2015"}, {"body": "unless written understand every ajax call made new semantics dmethvin yep exactly case hand anyways ended although wish jquery ajax could provide better async way handle situations cheers", "d": "9/2015"}, {"body": "seems like probably dup", "d": "9/2015"}, {"body": "issue seems based edge performance regarding regular expression user ticket ms edge team states", "d": "9/2015"}, {"body": "tried making changes regex jquery unfortunately change performance demo test website", "d": "9/2015"}, {"body": "see provide fix", "d": "9/2015"}, {"body": "fixed", "d": "9/2015"}, {"body": "please nt create new issue older one got closed see comments think something worth reopening reopen reopened one shortly submitted issue", "d": "9/2015"}, {"body": "thanks apologies users jquery familiar reporting bugs", "d": "9/2015"}, {"body": "duplicate", "d": "9/2015"}, {"body": "nt seem duplicate url gets damaged actual data content", "d": "9/2015"}, {"body": "hmm ok reopen though likely cause analogous could provide test case jsfiddle jsbin", "d": "9/2015"}, {"body": "pass string data argument need encode body contenttype using encodeuricomponent case seem wan na send json need specify contenttype actually json setting option fact jquery modified body incidental troubles backends nt specify proper contenttype special characters body regard encoding backends attempt decode body user code access", "d": "9/2015"}, {"body": "jaubourg agreed thanks explanation", "d": "9/2015"}, {"body": "jaubourg thanks explanationwe resolved issue way", "d": "9/2015"}, {"body": "dupe please always test newest development copy jquery make sure bug still exists", "d": "9/2015"}, {"body": "caused workaround jquery side use phase would cause lot issues common events nt think lot", "d": "9/2015"}, {"body": "thanks mzgol since bug firefox problem suppose close issue", "d": "9/2015"}, {"body": "thanks brunoscopelliti", "d": "9/2015"}, {"body": "cc gnarf", "d": "9/2015"}, {"body": "animation completes width height animation removes overflow hidden property curious people think right move keep overflow hidden stop case note means next toggle reset overflow back original value overflow hidden get stuck also thanks great test case chance turn jsbin jsfiddle jquery git build", "d": "9/2015"}, {"body": "width height animation width height animation phone autocorrect", "d": "9/2015"}, {"body": "also quick userland workaround css overflow hidden calling slidetoggle", "d": "9/2015"}, {"body": "yeah noticed even updating browsers seen chrome locally wanted sure machine thanks report anyway", "d": "9/2015"}, {"body": "actually seems chrome less precise older versions need investigate nt want decrease test expectation without making sure output acceptable", "d": "9/2015"}, {"body": "well means content whereas transport got ta", "d": "9/2015"}, {"body": "hi markelog yes means content firfox chrome excute complete tested edge jquery give behavior detect request finished trigger error event status jquery bind onerror event script tag case url response correct data need something jsonp request finished", "d": "9/2015"}, {"body": "yeah callbacks fired checked ie ca nt repro though", "d": "9/2015"}, {"body": "markelog test ie thanks", "d": "9/2015"}, {"body": "previously tested windows windows browserstack version ca nt repro reopening confirmation", "d": "9/2015"}, {"body": "animation animation completed complete callback called", "d": "9/2015"}, {"body": "docs say multiple elements animated callback executed per matched element animation whole inside callback element completed animation would value elements animated need completion entire animation look", "d": "9/2015"}, {"body": "also tried function hideandshow h hanimate opacity duration easing linear always function haddclass dhide sremoveclass dhide animate opacity linear nt work either tried complete done always according documentation nt always property always run always means nt", "d": "9/2015"}, {"body": "question stackoverflow forum territory point please ask help one places", "d": "9/2015"}, {"body": "ok thanks anyway still think going give option always option whatever always always happen regardless happens prior bug imho thanks", "d": "9/2015"}, {"body": "always called element collection elements collection use mentioned", "d": "9/2015"}, {"body": "agree pretty sloppy check point concerned think happen make check strict best solution case explicit let us use infamous misnamed intelligent guess algorithm case smart whether change intelligent guess algorithm discussion need", "d": "9/2015"}, {"body": "difference master compat regarding data implementation always pain butt far cherry picking concerned would good could eliminate diffs one way another use still pretty common think firefox chrome grope data make breakpoints fall user code may make hard remove", "d": "9/2015"}, {"body": "dmethvin thanks taking time explain history", "d": "9/2015"}, {"body": "external tools rely interfaces need keep foreseeable future try use code public websites use somewhere nt depend breaking even patch releases give guarantees", "d": "9/2015"}, {"body": "true always hard manipulate bare text nodes jquery nt ever meant case control markup wrap something would easier select nt see us adding textnode manipulation tricky problem text nodes nt methods elements", "d": "9/2015"}, {"body": "ok adding methodselector prevnext node sibling addition element sibling", "d": "9/2015"}, {"body": "use perhaps one element nt think worth api surface", "d": "9/2015"}, {"body": "considering situation one author control html content js code always true example one use jquery greasemonkeycompatible scripts", "d": "9/2015"}, {"body": "nt lot info report going assume duplicate likely passing supported jquery", "d": "9/2015"}, {"body": "per meeting decided try would nt annoying linting changed files", "d": "9/2015"}, {"body": "please provide reproducible test case without code look nothing", "d": "9/2015"}, {"body": "closing ticket inactivity usually kind problems best triaged forum clear really bug", "d": "9/2015"}, {"body": "browsers support addeventlistener example internet explorer versions less nt support event bubbling try instead", "d": "9/2015"}, {"body": "ie version", "d": "9/2015"}, {"body": "report vague need reproducible test case able debug problem nt provide code ca nt know wrong said error seems basic nt seem like could come jquery going close report please look help jquery forums stack overflow something turns jquery bug test case reopen", "d": "9/2015"}, {"body": "vaguely remember qunit restore alias problems could remind us jzaefferer", "d": "9/2015"}, {"body": "little late narwhal nt matter closure compiler might okay recommend testing", "d": "9/2015"}, {"body": "typo unit tests would definitely catch way check truthiness time assign variable saves little space pattern like someone wrote would nt work jshint would assignment check wrapping double parens make error go away treat developer hint assignment intended", "d": "9/2015"}, {"body": "please look programming help jquery forums stack overflow bug tracker support forum", "d": "9/2015"}, {"body": "opinion bug pointed context callback function received expected", "d": "9/2015"}, {"body": "bug deep cloning object one also code contains couple syntax errors nt run please look help forums stack overflow", "d": "9/2015"}, {"body": "really much go application working properly error logs come thing give list mentioned stack trace", "d": "9/2015"}, {"body": "pretty big angular app works fine edge definitely completely broken people would notice anyway nt use angular form validation though posted looks like excerpt stack trace actual error message really hard say anything scarce info could create test case", "d": "9/2015"}, {"body": "sorry forgot include error message rootscope infdig digest iterations reached aborting might even jquery problem wondering maybe someone somehow could tell going error tracked opbeat js experimental gives limited information worst thing ca nt reproduce though try windows phone emulator using edge sorry add info get close sure jquery case", "d": "9/2015"}, {"body": "closed due inactivity", "d": "9/2015"}, {"body": "believe typo anyway works correctly key reference extends", "d": "9/2015"}, {"body": "easiest way copy object case", "d": "9/2015"}, {"body": "thanks report confirmed slow edge build would like submit pr take credit perf fix", "d": "9/2015"}, {"body": "sure done correctly also go branches well", "d": "9/2015"}, {"body": "done putting empty string instead null even though people currently using get affected oring empty string see demo", "d": "9/2015"}, {"body": "block code nt even need change emptyarray yield identical results returning empty string would definitely incorrect", "d": "9/2015"}, {"body": "accepted today meeting", "d": "9/2015"}, {"body": "followup everyone ie seem wrong wrong forever might able fix edge cases ca nt fix general issue disabled elements firing mouse events convinced fixing edge cases worth risk encountering additional bugs mouseenter including known safari bugs since never used", "d": "9/2015"}, {"body": "nt think worth workaround jquery happily review patch predict attempt fix cause issues outweigh one fortunately mozilla agreed fix end push fix vendors", "d": "9/2015"}, {"body": "going close seems working intended", "d": "9/2015"}, {"body": "markelog never happened chances never happen fyi happened new jshint released master broken like thought grunt plugin wrapping library use cc rwaldron edit reported upstream edit jshint unpublished build green", "d": "9/2015"}, {"body": "edit jshint unpublished build green like said also would happen us like jshint implicitly updated nt need show error contributor since might provoke contributor fix unrelated part code would commit would two unrelated things two commits one pr would different things contributor fixed pr would failed pr merge commit fix asap ask contributor rebase", "d": "9/2015"}, {"body": "provide test case please", "d": "9/2015"}, {"body": "also try test jquery latest", "d": "9/2015"}, {"body": "please explain issue unable understand", "d": "9/2015"}, {"body": "well created fiddle working must something wonky w code closing issue", "d": "9/2015"}, {"body": "discussed meeting decided added additional complexity inside ajax implementation little gain since already done current api added need additional documentation docs already complex api inside jquery", "d": "9/2015"}, {"body": "game write documentation well ever becomes something want address future argue add lot magic point feel like entire api async cleaning logic tremendously go hack side implement thanks consideration", "d": "9/2015"}, {"body": "think really something ajax interface approach systematic way", "d": "9/2015"}, {"body": "think trying change behavior bound break andor complicate talked creating cleaner api based around api would need shimming also currently lacks important features like stop request", "d": "9/2015"}, {"body": "dmethvin wrote already done current api probably missing something would kind give code example done current api thanks", "d": "9/2015"}, {"body": "fixed forgot add fixes reference", "d": "9/2015"}, {"body": "closing due inactivity", "d": "9/2015"}, {"body": "fixed reduce support title first part basic tests finished", "d": "9/2015"}, {"body": "pr", "d": "9/2015"}, {"body": "landed", "d": "9/2015"}, {"body": "landed via", "d": "9/2015"}, {"body": "generates changelogs publishes website regards yb", "d": "9/2015"}, {"body": "good remove per meeting", "d": "9/2015"}, {"body": "almost done latest part pr", "d": "9/2015"}, {"body": "everything planned done", "d": "9/2015"}, {"body": "closing since suspect nt possible without breaking existing code causing performance issues someone post solution proving wrong reopen", "d": "9/2015"}, {"body": "closing pretty sure current code use possible infamous cases like positional selectors jsperf provided nt looking jquery code", "d": "9/2015"}, {"body": "closed dup", "d": "9/2015"}, {"body": "nt think issues left resolve close reopen needed open focused issue", "d": "9/2015"}, {"body": "bumped milestone critical still work", "d": "9/2015"}, {"body": "nt think rearrange documented callback order using years recommendation would explicitly set process none vagaries automatic conversions affect", "d": "9/2015"}, {"body": "also clarify case attacker web site asking data via happens script similar include third party code via tags proposed fix would like see", "d": "9/2015"}, {"body": "via always nt specify datatype", "d": "9/2015"}, {"body": "sure though cc jaubourg", "d": "9/2015"}, {"body": "everything automated script detection configurable pretty easy disable untested examples work js good disable javascript detection globally ajaxsetup contents javascript false acceptable disable text javascript promotion break intended manual conversions ajaxsetup converters test gt javascript false preferred use prefilter specific crossdomain ajaxprefilter function scrossdomain scontentsjavascript false fan changing behaviour within lib understand rationale though recommand removing javascript datatype detection default options", "d": "9/2015"}, {"body": "fan changing behaviour within lib understand rationale though recommand removing javascript datatype detection default options would disable detection requests whereas origin request still considered safe", "d": "9/2015"}, {"body": "fan changing behaviour within lib understand rationale though recommand removing javascript datatype detection default options would disable detection requests whereas origin request still considered safe exactly option use prefilter makes behaviour pretty difficult document imo hence rather go pushing solution userland", "d": "9/2015"}, {"body": "jaubourg teaching users hard remember locationhash bug took years vulnerable apps jquery fix one posted used wild yet imagine many apps use code like", "d": "9/2015"}, {"body": "change execute cross domain scripts default much less obtrusive turning script execution default think markelog solution worth trying next release", "d": "9/2015"}, {"body": "homakov lots ways execute malicious scripts dom api alone case user input unchecked used case code reaching knowingly hardcoded url big difference people around globe already using scripts domains cdns poses exact issue timmywil since handle configuration ie prefilter nt see appeal hacking deep conversion logic", "d": "9/2015"}, {"body": "jaubourg agree handled easily prefilter advantage changing default behavior users err side security rather unintentionally executing cross domain scripts", "d": "9/2015"}, {"body": "many people use cdns definitely nt expect current behavior would rank low severity fix simple think worth", "d": "9/2015"}, {"body": "op nt replied sounds like correct behavior jquery nt try catch errors like", "d": "9/2015"}, {"body": "nt think critical trivial change still clear whether apply close ticket get reply reopened", "d": "9/2015"}, {"body": "timmywil seems like sth done please revert milestone change disagree", "d": "9/2015"}, {"body": "appears firefox nt fixed bug years old take conservative approach leave guard place modifying check edit reproduced firefox", "d": "9/2015"}, {"body": "dmethvin marked issue mentioned one blocking jquery metaissue", "d": "9/2015"}, {"body": "dup see also cause", "d": "9/2015"}, {"body": "edoardocavazza provide relatively simple test case could use detect ideally include polymer since unit test use cases code trying get styles shadow root", "d": "9/2015"}, {"body": "since nt reply closing ticket", "d": "9/2015"}, {"body": "fixed note use make work ie register one polyfills form features", "d": "9/2015"}, {"body": "impossible copy file jsbin jquery various feature detects force layout would expensive document size version taken done lazy basis think really best solution load html needed initial view pull rest via make page load faster", "d": "9/2015"}, {"body": "relates apis currently undocumented assume deferring would ok", "d": "9/2015"}, {"body": "ok deferred please revert disagree", "d": "9/2015"}, {"body": "closed since done plugin first", "d": "9/2015"}, {"body": "full proposal thread guess plugin would traction anyway p", "d": "9/2015"}, {"body": "object length attribute passed function function behave", "d": "9/2015"}, {"body": "uptoeleven function exposed publicly need ask specific public method use since methods like jqueryeach usually documented accept array object jquery pass string", "d": "9/2015"}, {"body": "attempting use datatables project still receiving error attached plunker change jquery version cdn link html works well leave view developer tools see following typeerror use operator search length category", "d": "9/2015"}, {"body": "first google result jquery isarraylike datatables ticket updated datatables plugin", "d": "9/2015"}, {"body": "yes even tried using nightlies cdn", "d": "9/2015"}, {"body": "report problem datatables team", "d": "9/2015"}, {"body": "sorry thought datatables issue posted wrong tab", "d": "9/2015"}, {"body": "apologies commenting closed issue believe case warrants review using clientrectlistprototypelength anchor tag text visible mention one child elements dimension either please consider part new intended behavior apologies", "d": "9/2015"}, {"body": "nt think necessary", "d": "9/2015"}, {"body": "moving", "d": "9/2015"}, {"body": "landed via", "d": "9/2015"}, {"body": "agree w tjwudi common case included main jquery package", "d": "9/2015"}, {"body": "seems handled close ticket", "d": "9/2015"}, {"body": "looking code docs see lot undocumented behavior around progress notification drop seems like could greatly simplify things treat args thenables regardless source could still document notify master deferred would fire subordinate resolved desirable curiously nt done today notifies passed subordinates seems less useful fine dropping notifications entirely though especially since docs", "d": "9/2015"}, {"body": "bumping revert think needs go", "d": "9/2015"}, {"body": "leonardobraga still interested", "d": "9/2015"}, {"body": "mzgol sure work weekend send pr thanks", "d": "9/2015"}, {"body": "closing seems like fixed safari probably never fixable jquery issue", "d": "9/2015"}, {"body": "timmywil dmethvin moving wo nt breaking change nt go revert change disagree", "d": "9/2015"}, {"body": "since closed accepted seems appropriate close issue well leave open another week comment objection closed sept fwiw glad issue received attention deserved far tell use cases mine regarding setting tab order visible elements new method offsetwidthoffsetheightgetclientrects seems work extremely well modern browsers thank hard work", "d": "9/2015"}, {"body": "moving", "d": "9/2015"}, {"body": "since broken long time think might well wait", "d": "9/2015"}, {"body": "confirm issue clients got bunch errors failed read responsetext property xml value accessible object responsetype text arraybuffer env windows xp jquery able reproduce fix proposed mzgol fixed issue client pc arraybuffer blob indexof xhrresponsetype lt amp amp typeof xhrresponsetext string", "d": "9/2015"}, {"body": "moving", "d": "9/2015"}, {"body": "moving nt solution would suggest remove label", "d": "9/2015"}, {"body": "nt solution would suggest remove label yeah right moved future probably decide future milestone distinction clear", "d": "9/2015"}, {"body": "mzgol btw suggest cssom", "d": "9/2015"}, {"body": "future means want sure milestone means accepted development yet likely neglected set milestone status unknown", "d": "9/2015"}, {"body": "ok seems future good fit micha\u0142 go\u0142\u0119biowski", "d": "9/2015"}, {"body": "nt lot traction recently new feature bumping milestone disagree please revert change", "d": "9/2015"}, {"body": "timmywil still want nt lot progress need cut corners", "d": "9/2015"}, {"body": "moving", "d": "9/2015"}, {"body": "rescheduling", "d": "9/2015"}, {"body": "dmethvin plan finish time since looks like nonbreaking change seems could defer please update milestone agree", "d": "9/2015"}, {"body": "dmethvin bumped feel free want", "d": "9/2015"}, {"body": "rescheduling nontrivial still lot", "d": "9/2015"}]