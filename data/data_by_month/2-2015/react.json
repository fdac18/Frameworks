[{"title": "reactproptypesnode nt understand opaque reactfragment type", "body": "causes reactfragment opaque type accessing properties deprecated warning", "num": "3286", "d": "2/2015"}, {"title": "could make less painful inline reactelement objects", "body": "hi spicyj said open issue disclaimer trying sort sketchy things know nt supported think would nice writing library want support react output optionally right trying inline reactelements instead almost completely functional except validation react dev mode right literals nt key assumed validators react dev work around without duplicating props write wrapper function create element little unideal slower adds unnecessary keys nondev mode would reasonable short circuit checks happen store actually present reactelement happy submit pull request rush react though curious thoughts thanks aria", "num": "3285", "d": "2/2015"}, {"title": "calling super method reactcomponent children", "body": "inheritance app shown using babeljs transpiler calling super method generates exception js class component extends reactcomponent class mycomponent extend component componentdidupdate supercomponentdidupdate error could call undefined smth think easiest solution add empty methods reactcomponent class something wrong", "num": "3280", "d": "2/2015"}, {"title": "componentdidreceiveprops please", "body": "would like humbly request componentdidreceiveprops hook often times would like something componentwillmount componentwillreceiveprops nt set yet forced pass props around instead reading directly new hook javascript componentwillmount thissetup thispropsid componentwillreceiveprops next thissetup nextid setup id useractionsload id new hook javascript componentwillmount thissetup componentdidreceiveprops thissetup setup useractionsload thispropsid simple example may seem like small thing often times passing props runs deep instead conveniently referencing thisprops one forced plumb props throughout component please consider adding hook leverage code leveraged componentwillmount without forcing plumb props throughout component", "num": "3279", "d": "2/2015"}, {"title": "reference domscry api", "body": "reacttestutils contains todo referencing api work incorporate react projects find left wanting complete dom traversalquery api get references components writing tests documentation included entire domscry api documentation implement submit pull request", "num": "3278", "d": "2/2015"}, {"title": "add gruntfilejs mainjs lint", "body": "currently gruntfile formatstyle differs lot code src verified running lint gruntfile nt gruntfile added well checked prepared fix errors concerning making pr gruntfile added lint grunt task well", "num": "3272", "d": "2/2015"}, {"title": "lint task fails master", "body": "caused pull request made fail travis well even though none errors anything changed see checkout master run grunt lint", "num": "3270", "d": "2/2015"}, {"title": "internet explorer compatibility", "body": "please see description problem gladly post example use om clojurescript nt think would legible tutorial simple enough make easy reproduce problem", "num": "3268", "d": "2/2015"}, {"title": "mutating state inside shouldcomponentupdate", "body": "antipattern mutate call inside listen changes order change something", "num": "3262", "d": "2/2015"}, {"title": "hook componentwillmount render even first render", "body": "would feasible provide function allows developer hook component lifecycle componentwillmount render would need always possible even initial render maybe something like rendervalidatedcomponentwithoutownerorcontext function var inst thisinstance instwillrender check hook defined instwillrender hook called var renderedcomponent instrender dev allow automocks proceed returning null typeof renderedcomponent undefined amp amp instrenderismockfunction probably bad practice consider warning deprecating convenience renderedcomponent null return renderedcomponent right write mixins hook componentwillmount would called equivalent function component leaves opportunity act props state whatever component developer point render trying insert various tracking properties automated testing validation debugging switched prop allowing us also validate automate ui testing real pain ask developers either add code cut paste coding every time write amend components ask call function mixin commence render even simple render functions highly error prone tend forget much easier add easy statically verify added initial render course hook via use componentwillupdate bypassed initial render phase nt work consistent way able hook component mounted developer codes renders able put something like mixin would make much simpler less time consuming general importantly significantly less error prone", "num": "3261", "d": "2/2015"}, {"title": "custom property object flattened pushed attributes props", "body": "small mixin creates proptype follows getall function returns object like effectively passing back custom collection objects various values used property thisotherdata holds information reference components using standard dot notation thisotherdatavariablestimeout gets value issue reason getting flattened thisattributes thisattributes objects sign otherdata object could logically understooed adding custom property thisprops would go guess questions two fold put thisattributes first place thisprops flattened hierarchy instead adding otherdata object", "num": "3260", "d": "2/2015"}, {"title": "nachrichten", "body": "", "num": "3259", "d": "2/2015"}, {"title": "refs passed along syntheticmouseevent reactid", "body": "sure way best approach following issue dot consider react class whiteboard use dot whiteboard know dot selected click circle syntheticmouseevent returned etarget refers reference dot javascript var whiteboard reactcreateclass select function e feels wrong seems dirty feels better feels like better solution sample jsbin approach javascript var dot reactcreateclass getinitialstate function return selected false select function e thispropsonselect e render function return best solution solutions better one another would make sense pass ref along react id event callback", "num": "3258", "d": "2/2015"}, {"title": "multiple react instances per dom using amd example", "body": "using amd component might use react dependency poses problem another instance react already manipulated dom wrong events get fired id collisions occur invariant violation reactmount two valid unequal nodes jsbin internet points google group post", "num": "3252", "d": "2/2015"}, {"title": "triggering events real dom nodes nt trigger synthetic events", "body": "twitter using phantomjs testing browser interaction often times seems happen values get changed directly dom elements change event triggered element interacting reactjs elements phantomjs jquery nt work interactive elements like course easiest solution take real elements mounted attach event listeners like nt pleasant experience interest mirroring events real nodes synthetic events situation normal like able interact application phantomjs seems quite blocker interacting input select elements jsbin example", "num": "3249", "d": "2/2015"}, {"title": "autofocus warn like attribute", "body": "user writes instead htmlfor warning shown suppose autofocus instead autofocus warn", "num": "3248", "d": "2/2015"}, {"title": "animations nt work properly one switches browser tabs browsers", "body": "fiddle demonstrating issue stay fiddle everything works perfectly fine leave another browser tab seconds come back see animation stops completely talking people reactjs irc channel believe issue something like following whatever picture gets added away receive correct css classes almost like react idea added anyways guess seems incredibly problematic believe reactjs bug", "num": "3245", "d": "2/2015"}, {"title": "get object tree presentation components tree initial render", "body": "one way found apply mixin every component takes treat path construct object includes ids react components elements well", "num": "3244", "d": "2/2015"}, {"title": "rework msg danger expected markup render nodes rendered invariant", "body": "hi invariant message give great insight happening syranide helped find might related malformed html content used actually case use autolinker library transform text links html links bug produces malformed html content see bug actually broke whole ui user unperformant workaround parse string passing react something like seems quite common frontend apps code transform shorten dynamic html content bug libraries seriously mess react case called markuplist size call elements returned one elements malformed parsing browser produced dom nodes calling nt really know maybe better documented used wellformed html even browser fix markup maybe invariant message could helpful user case telling user could due malformed html maybe case malformed html could handled react nt really know could done without performance penalty tried parse single markup individually inputoutput number following code fails later", "num": "3242", "d": "2/2015"}, {"title": "wrong ordering table rows adding new", "body": "gents simple single column table rows coming simple list last row table link add another row default content callback list component expected last add new row static row remains last new row added prior practice new row added static row gist using divs instead table works fine tried using keys key z value assigned static row rest lexically lower values success sounds like bug", "num": "3241", "d": "2/2015"}, {"title": "add function map", "body": "hi search add function map without latter triggered page generation code explain therefore launch page function thisdeleteteam triggered whereas want triggered click button param members array object datas correctly display problem functions triggered datas loaded thanks regards edit tried problem edit find xd usefull someone problem", "num": "3238", "d": "2/2015"}, {"title": "append classname replace style top level dom object added component", "body": "may filed already quick search could nt find please close case react component reusability view highly limited without strong ties css currently passing classname component eg nothing unless explicitly consumed implementation requires implementation read immutable prop possibly use react css addon append class top level dom explicitly set result creates lot code duplication components need flexibility used multiple contexts understanding internals may bit lacking believe feature would mesh well jsx since already protected keywords certainly let know missing something obvious would bad feature", "num": "3237", "d": "2/2015"}, {"title": "deprecate replacestate", "body": "use cases replacestate seems fit one patterns let state temporarily null data fetched reset null using replacestate later point use immutablejs record store state way use cursors convenience methods like update batching using immutablejs map store data use state map ie adding new keys dynamically use cases break need add another state value makes refactoring pain thought would nt need also means mixins ca nt add state particularly found pattern common one could potentially add native support would expand record type one contains fields required mixins would like add warning expand state fields original getinitialstate reason vms optimize around records keep type signature changing type signature dynamically introduce performance penalties ca nt add warning patterns used", "num": "3236", "d": "2/2015"}, {"title": "refs work", "body": "spinoff discussion pretty sure need change current way refs work see however new ref callbacks also ideal relies imperative code suffers timing issues like imperative lifecycles also convenient without arrow functions even arrow functions might suffer performance issues things refs tries solve imperative access apis nt declarative counterparts yet eg dom layout fastpath tree update deeply bypass reconciliation perfoptimization get current state child nt want control without duplicating state might possibly diverge send signalspulses downwards", "num": "3234", "d": "2/2015"}, {"title": "could remove ternary operators released npm package", "body": "released npm package react directory structure like react dist lib accumulateinfojs autofocusmixinjs beforeinputeventpluginjs callbackqueuejs nodemodules try opening files accumulateinfojs callbackqueuejs find syntax using ternary operators production processenvnodeenv invariant ternary operators react working could remove ternary operators released npm package", "num": "3231", "d": "2/2015"}, {"title": "eventdata passed simulate methods deep merge", "body": "using change event ran simple extremely agitating problem supply object one properties object completely replace existing one key quick example correctly fire event completely overwrite case event handler using one needed supply test ideally supplying deep merge instead replacing things outright", "num": "3229", "d": "2/2015"}, {"title": "optimizing compiler inline reactelements", "body": "starting react able inline reactelements javascript bar objects improves performance existing call inlining result defaultprops component might default props need resolved transpiler runtime exception ref string unfortunately still nt figured final semantics refs current semantics relies getting current react owner therefore apply optimization ref attribute might string nonjsx work reactcreateelement functions created reactcreatefactory first argument inline object literal otherwise safe since object might reused mutated production mode optimization applied production mode currently fires various warnings proptypes key warnings flag set true optimization would skip warnings would bad development mode difficult part figuring way work everyone environment everyone ability use different transpilers development production mode one solution might use ternary rely minifiers strip extra code pain source maps though another solution would different flags transpilers make sure people actually use correctly otherwise problems due firing warnings think react slow screwed config", "num": "3228", "d": "2/2015"}, {"title": "optimizing compiler tagging reactelements", "body": "make optimized reconciliation tagging reactelements hidden class props example guaranteed always three props javascript c could tag every element properties unique id could use hidden class generate optimized diffing algorithm instead iterating properties presumably would need since diff native components bonus points determine properties constant perhaps using property descriptor object would use heuristic inside react determine create optimized differ example updates component like jit would javascript oldelementt newelementt numberofupdates else numberofupdates numberofupdates optimizeddiffer generateoptimizeddiffer newelement optimizeddiffer oldelement newelement else numberofupdates gt optimizeddiffer oldelement newelement else manualdiffing oldelement newelement", "num": "3227", "d": "2/2015"}, {"title": "optimizing compiler reuse constant value types like reactelement", "body": "starting able start treating reactelements props objects value types ie instance conceptually equivalent values allow us reuse reactelement whose inputs deeply immutable effectively constant take function example optimized moving jsx function body time called instance returned allow us reuse objects react automatically bail reconciliation constant components without manual reference equality objects javascript reference equality meaning optimization actually change behavior code calls render uses object equality uses reactelement key map optimization break use case nt rely change semantic contract reactelements difficult enforce hopefully future version javascript notion value equality custom objects enforced constant simplest assumption entire expression including props children literal value types strings booleans null undefined jsx result constant variable used expression must first ensure ever mutated since timing affect behavior safe move constant higher closure variable never mutated move scope shared variables objects constant arbitrary objects considered constant transpiler never move reactelement scope parameters mutable object react silently ignore updates change behavior object provably deeply immutable effectively immutable never mutated transpiler may move scope object created received javascript function render var style objectfreeze proto null width return safe reuse might expect render propsstyle nottobe render propsstyle however function createcomponent width var style objectfreeze proto null width width return function render return safe move one level due fact arbitrary objects referential identity javascript however semantics immutable object expected value equality might ok treat value types example data structure created immutablejs may treated value type deeply immutable exception ref string unfortunately one exception prop might potentially might string value never safe reuse element due fact capture react owner time creation unfortunate artifact looking various options changing refs semantics fix nonjsx work jsx reactcreateelement functions created reactcreatefactory example safe assume function call generates constant reactelement javascript var foo reactcreatefactory fooclass function render return foo bar therefore safe reuse advanced optimizations also imagine even clever optimizations optimize perinstance elements memoizing instance allows autobound methods treated effectively constant track purefunctions even treat calculated values constants input pure function constant static analysis tools like flow makes possible detect even elements constant", "num": "3226", "d": "2/2015"}, {"title": "jsxtransformer breaks creating source maps defineproperty available", "body": "jsxtransformer called option javascript environment transformation dies object nt support property method defineproperty exception degrade gracefully simply turn source maps available pass rather true everything works fine seems like code needs gated environment check appear logic jsxtransformer try detect seems like check either incomplete code also needs wrapped check also see", "num": "3225", "d": "2/2015"}, {"title": "expose refs dom components direct handles actual dom node", "body": "mental model polyfill layer support browser would support support future ideas propagate standards fact currently implemented wrapper unobservable implementation detail perhaps nt implemented wrapper upgrade path would need monkey patch existing legacy methods onto upgrade path would work immediately warn used replaced imperative layer simply multiple calls replaced take either arbitrary component dom node directly use something unsure cases simply get rid call together use dom ref directly", "num": "3223", "d": "2/2015"}, {"title": "rendering array produces warning message", "body": "upgraded discovered rendering array child components without providing keys react produced warning thought odd reactjs would tell go look undefined looked source sure going string line nt make sense simple example top stack rummaged get far", "num": "3222", "d": "2/2015"}, {"title": "umbrella", "body": "new cool features x pure functions stateless components x allow arbitrary attributes dashed tags ie custom elements jimfb see x fix error utils guard see reactcompositecomponenterrortest mostly affects fb internals ties better error handling general sebmarkbage x add trusted key reactelements leebyron sebmarkbage package changes x build separate packages react isomorphic dom server rendering still need handle zpao x deprecate dom renderer react package replace separate package warnings used zpao x ship react addons separate packages remove react repo possibly kill already deprecated ones like classset build warnings existing package used zpao x endoflife reacttools clean legacy reactnative react repo zpao x figure reactnative needs react amasad sebmarkbage ship indexiosjs react reactnative components immediately start using react package sebmarkbage decouple dependencies react dom react isomorphic except react dom still needs set react isomorphic sebmarkbage see comment x browser build reactdom zpao kill deprecations x props dev remove old props mutation warnings jimfb see x make return toarray objects spicyj x kill spicyj x kill jimfb see x clean remaining ownercontext stuff jimfb new deprecations x deprecate setpropsreplaceprops replace external reactrenderer package nt forget include replaceprops renderer api ship package jimfb see x deprecate getdomnode replaced reactfinddomnode spicyj x expose dom component refs actual dom nodes spicyj x warnings using dom component ref getdomnode props spicyj x clean remainders context jimfb probably deprecate replacestate needs immutablejs solution sebmarkbage deprecate ismounted needs promise solution sebmarkbage detect event target available eg shadow dom jimfb see disabled", "num": "3220", "d": "2/2015"}, {"title": "csstransitiongroup behaves oddly using child component", "body": "ran bug similar happens calling child component nested within set fiddle reproduces issue reproduce firefox chrome", "num": "3219", "d": "2/2015"}, {"title": "warn react dom modified notreact", "body": "discussed complementary improvement turn mutation observer dev warn someone react modifies dom andor dom nodes appear without datareactid thus indicating extension script fancy magic", "num": "3218", "d": "2/2015"}, {"title": "start building native", "body": "able build native mobile apps using react", "num": "3216", "d": "2/2015"}, {"title": "typeerror e undefined reactwithaddonsjs", "body": "installed reactjs via bower downloads latest version firefox get error typeerror e undefined elimiter autocompactresolver l configuration eextend h flconfig nt happen", "num": "3214", "d": "2/2015"}, {"title": "avoid global window", "body": "currently react relies global works browser works environments one sets global however relying globals prevents multiple independent react engines running together testing example benefits strongly isolated environments would nice one could run separate tests without manually cleaning every time another use case programatic behaviour inspection interesting load multiple windows compare behavior one library different calls react involved however impossible avoiding relying globals added backwardscompatible fashion global keep existing behavior nt instead exposing api expose factory taking returning api example see jquery decision avoid globals means refactoring existing code base pass explicitly everywhere maintaining attitude future opinion feature", "num": "3213", "d": "2/2015"}, {"title": "nested render trees", "body": "way implement portals nested reactrender componentdidmountupdate also reactart switch render mode middle tree comes problems ca nt reason depth component implement mountorder ca nt reason position tree debugging purposes reactdevtools ca nt pass context next subtree firstclass concept nested render trees optionally use different render mode", "num": "3210", "d": "2/2015"}, {"title": "warn rendering", "body": "gaearon come warn rendering directly documentbody list children often manipulated third party scripts browser extensions leading subtle reconciliation issues", "num": "3207", "d": "2/2015"}, {"title": "changing array state update component", "body": "coffee getinitialstate selected renderselect celldata celldatakey rowdata index onrowsingleclick target index selected stateselectedslice selected index selected index setstate selected selected go alter selected state certain row negate checkbox updated bug something wrong", "num": "3204", "d": "2/2015"}, {"title": "safari slow performance rendering large amount text", "body": "action chrome safari load click comment icon article lots comments wait load chrome render performance well collapsing thread clicking comment near instant safari freeze browser seconds code comments render even without dangerouslysetinnerhtml see really slow performance safari remove comment text altogether speeds dramatically source slowness put together smaller demo", "num": "3203", "d": "2/2015"}, {"title": "testutilsrenderintodocument failing components containing", "body": "get following stack trace attempting render component containing test set minimal test case inapp everything renders fine using things go little crazy", "num": "3202", "d": "2/2015"}, {"title": "handle nonfactory component function errors better", "body": "js var component reactcreateclass reactrender component typeerror undefined uncaught typeerror read property reactautobindmap undefined nice warning warning something calling react component directly use factory jsx instead see", "num": "3200", "d": "2/2015"}, {"title": "drag events fire svg elements", "body": "react svg elements would like drag around drag events seem working although work html elements click events working fine svg elements however following example print syntheticdragevent console try drag parent fire event either even modify perhaps unrelated issue attempt put element react render outside anyway renders html test test test draggable however", "num": "3192", "d": "2/2015"}, {"title": "deprecation warnings cause errors", "body": "version occurs sure earlier versions bug example code cause errors installed regardless call deprecated methods due supporting shimming value used property descriptors workaround set disabled debug messages hence deprecation warnings", "num": "3188", "d": "2/2015"}, {"title": "double click single click event fired shoudl nt", "body": "code event handlers called div element double clicked call single click event handler chance fixed thanks", "num": "3185", "d": "2/2015"}, {"title": "component", "body": "", "num": "3181", "d": "2/2015"}, {"title": "looking good way test react", "body": "hey currently looking different solutions testing react exploring anyone good suggestions repos read quite articles everyone seems different way wondering good solid way compatible newer releases react thanks", "num": "3178", "d": "2/2015"}, {"title": "attach displayname class methods", "body": "including ones autobound like lifecycles would help debugging stack traces better also thought added point", "num": "3173", "d": "2/2015"}, {"title": "underscore property prefixing performed template string expansion", "body": "underscore property prefixing facebookreact performed expanding template strings leads incorrect results combining two becomes", "num": "3172", "d": "2/2015"}, {"title": "warning proptypesobjectisrequired prop", "body": "type prop empty object still type object practically still warns nt think supposed happen stops warning anymore pretty sure warn", "num": "3163", "d": "2/2015"}, {"title": "changelog beta releases", "body": "actually conly information could find version blog post could add release notes changelog development releases", "num": "3155", "d": "2/2015"}, {"title": "use https embeds github pages blog posts prevent blocks due mixed content", "body": "trying read page none code snippets show tracked http iframe embeds using https github pages mixed content completely blocked browsers days https embeds pages served http works fine though jsfiddle supports https embeds see reason prefer embeds pages served embeds changed use also help guidelines maybe enforced test case ps read page properly without turn https everywhere extension prefer", "num": "3153", "d": "2/2015"}, {"title": "uncontrolled form jest simulatechange", "body": "testing uncontrolled form input via jest confirm value null code sample docs say supply value sets null uncontrolled component uncontrolled value rendered element reflect user input uncontrolled form works per docs browser jest handle change use valuelink test pass think fails onchange handler set reactdominputjs thinking throw warning change handler exists code test form input test javascript update value function var instance testutilsrenderintodocument var el testutilsfindrendereddomcomponentwithclass instance inputemail var node elgetdomnode result", "num": "3151", "d": "2/2015"}, {"title": "react updating dom", "body": "seems react doesnt updates dom approach simply update img src every seconds set breakpoint see always latest correct url reactdevtools component gets updated every seconds new url look dom tab see still hints im clueless might wrong using see demo jsx var react require react var randomimage reactcreateclass moduleexports randomimage", "num": "3149", "d": "2/2015"}, {"title": "createnodesfrommarkup renders global document", "body": "apparently support rendering iframes petehunt always render new markup global document move rendered elements iframe document afterwards jsdom throws try browsers nt seem mind however apart perhaps nice various reasons seems affect performance significantly drops performance ff drops rendering global document moving rather rendering directly iframe document easily solved everywhere except renders different documents batched well cc spicyj zpao", "num": "3146", "d": "2/2015"}, {"title": "test utils clicking submit button trigger form onsubmit", "body": "see calling click function trigger button onclick form submit action undocumented trigger form bug onsubmit implementation react test utils", "num": "3141", "d": "2/2015"}, {"title": "reacttools npm sources always returns sourcejs", "body": "hey guys know lot issues try make quick clear issue generate sourcemap using node module calling always output property sourcemap generated way specify actual source file thought perhaps option would allow change unfortunately matter set property always returns array small snippet code quickly verify js var jsx require reacttools assert require assert var output jsxtransformwithdetails sourcemap true sourcefilename pathtosourcejs var assertequal outputsourcemapsourceslength var assertequal outputsourcemapsources pathtosourcejs consolelog sources contains one entry consolelog sources entry correct", "num": "3140", "d": "2/2015"}, {"title": "feature request allow classname take array", "body": "often use components internal well optional passed prop way implementing either local array construct serialize prop b using b slightly less verbose harder use modifier classes well eg suggesting allowing classname string array array react internals would compact serialize classname array classname string good idea could make attempt pr", "num": "3138", "d": "2/2015"}, {"title": "reactcsstransitiongroup child element blinking", "body": "hi getting initial blink using reactcsstransitiongroup added element get enter class applied attached dom even gets immediately see reactcsstransitiongroupchildcomponentwillenter queued dispatched action adds element dom causes behavior know issue would nt make sense element added enter class moment inserted thanks", "num": "3137", "d": "2/2015"}, {"title": "isnodejs checks", "body": "hi asapjs module checking whether environment isnodejs fake environment browserify processnexttick used check causing uncaught exceptions stop rendering", "num": "3136", "d": "2/2015"}, {"title": "abnormal workflow prevents onchange fired ie", "body": "included test link alert happen change select item essentially letting back end rendered dom drive converted react components nt freedom render back following route works fine always except events nt fired think may something fact calling component instance instead string case either reject component instance events trigger properly", "num": "3131", "d": "2/2015"}, {"title": "regression refs siblings nt resolved previous siblings componentdidmount", "body": "sure fix probably needs separate queues", "num": "3128", "d": "2/2015"}, {"title": "docs image nt correspond text", "body": "regarding image shows red vdomeq icon node though text states last interesting case node react compute virtual dom since equal old one nt reconcile dom think icon supposed green ie virtual doms equal", "num": "3125", "d": "2/2015"}, {"title": "invariant displaying overlay unable find element probably means dom unexpectedly mutated", "body": "running invariant trying display overlay prerendered browser js layoutjs moduleexports reactcreateclass mixins navigationmixin statemixin componentwillmount function thisstateusersize thistransitionto newusersession render function return js overlayjs moduleexports reactcreateclass mixins statemixin render function return whenever updates get following error using regards overlay understand browser may something dom cause react issue finding component seems simple common problem overlays bug stupidity", "num": "3124", "d": "2/2015"}, {"title": "strict proptypes mode", "body": "would nice able set flag trigger invariant warnings time prop referenced passed component declared proptypes", "num": "3113", "d": "2/2015"}, {"title": "getdomnode fails get dom node safari", "body": "testing react discovered inconsistencies browsers safari os x try call thisgetdomnode within safari dom node returned actual node mounted dom suspect virtual copy reacts virtual dom try call getboundingclientrect returns empty clientrect object code works expected chrome version firefox worth noting using jsx preprocessor reactify gulp", "num": "3112", "d": "2/2015"}, {"title": "reactaddonstransitiongroup fails remove multiple children dom time", "body": "using reactaddonstransitiongroup remove one item time remove fail remove last child dom later children added back removed special lifecycle methods componentwillentercomponentdidenter called already dom jsfiddle illustrating problem", "num": "3111", "d": "2/2015"}, {"title": "extra nodes emitted rendering result mapping immutable collection", "body": "basically yields looks like properties immutable wrapper emitted along actual values going look get time later today figured good get tracked issue thanks", "num": "3102", "d": "2/2015"}, {"title": "race tutorial optimistic updates", "body": "last step tutorial optimistic updates added believe race condition following occurs called ajax get call started called adding new comment state ajax post call started ajax call returns stale data ajax call returns new data called ajax get call started result seen user", "num": "3099", "d": "2/2015"}, {"title": "onchange nt work ie typerange", "body": "nt know yet newbie bug event nt work ie even example code yes use crap patch", "num": "3096", "d": "2/2015"}, {"title": "getting unknown runtime error", "body": "hi searching could find could put hopes people know lot trying run reactjs app referenced amp sham well consolepolyfill getting kind error seems related changing element using unminified verison react currently available npm function throwing js executionenvironmentcanusedom updating created node innerhtml leading whitespace removed updating existing node innerhtml whitespace root textnodes also collapsed see feature detection known behave improperly like var testelement documentcreateelement div testelementinnerhtml testelementinnerhtml setinnerhtml function node html magic theory supposedly differentiates added updated nodes processing innerhtml innerhtml updated nodes suffers worse whitespace behavior readding node like triggers initial favorable whitespace behavior todo detached node nodeparentnode nodeparentnodereplacechild node node according line number line else branch exception originates would love hear could", "num": "3095", "d": "2/2015"}, {"title": "chinese doc", "body": "friends translating documents chinese days plan lot jobs introduce react chinese frontend developers like forum discussing useful components writing blogs etc ok add link organization readmemd thanks", "num": "3094", "d": "2/2015"}, {"title": "return balise", "body": "hi searched since morning return balise information line however write page click email nt work mail field fill thisstateuseremail firstnamename mailcom regards", "num": "3093", "d": "2/2015"}, {"title": "webworkers", "body": "discussion webworkers petehunt made already implementation sebmarkbage ideas wants accomplish within current code base remember correctly react run webworker main thread webworker waiting sebmarkbage would great could give detailed outline ideas get moving", "num": "3092", "d": "2/2015"}, {"title": "react testutils simulate change nt change checked state checkbox", "body": "sure react simulate thing something dom works jest simple test click checkbox report new state back component worked fine browser simulatechange nt report new state example shows error happening checkbox javascript describe checkbox function change checked state checkbox function var changehandler function e consolelog ecurrenttargetchecked expect see true console happens browser chrome amp firefox test understanding change handler supposed happen state change element test shows behaviour use controlled uncontrolled component shows behaviour simulate click event use click handler", "num": "3091", "d": "2/2015"}, {"title": "react binding", "body": "noticed new version react require manual binding problem lessened still want recommend extension jsx language bind functions scope akin arrow functions", "num": "3090", "d": "2/2015"}, {"title": "mouse events fired components listening", "body": "sure profound misunderstanding react events actual bug mouse events registered parents sometimes fire children bin mousing around two divs eventually result inner div getting highlighted red even though nt event trigger attaching uihover class though parent", "num": "3088", "d": "2/2015"}, {"title": "onended working", "body": "audio element want know finished playing event event works natively react nt appear mapping ended event new react maybe something missing seems like bug react nt wrap native dom events way easily bind listener another way", "num": "3087", "d": "2/2015"}, {"title": "dom operations performance counters", "body": "would possible expose counters rendering vdom diff algorithm resulting dom operations development mode react really good job running fast still entirely possible human error thwart algorithms well human ignorance fast enough hide bad code lead poor performance long term generally visible really really bad would nice interface sends back object counters every time touches dom fully satisfy diff would counters isolated per would nt reset user would responsible subtracting previous values like one would measuring fps animation loop example use case press button visually text changes field appears counters indicate several dom nodes created along various operations would know either something horribly wrong b something wrong likely much efficient way assuming counters reflect back actually think happen would nice check rendering well least good think", "num": "3086", "d": "2/2015"}, {"title": "automatically objectassign receives array", "body": "react native two styles automatically composed currently trying similar technique react dom produces following principles learn write everywhere style prop behave similarly across implementations", "num": "3081", "d": "2/2015"}, {"title": "vanilla proptypes library", "body": "thinking proptypes could extremely useful vanilla javascript write exploring possibility right wondering difficult would pull proptypes react standalone vanillajs library sounds like reasonable thing would start edit clear really ability add type checking functions without using something like typescript typescript bad investigating alternatives would awesome abstraction check arguments function way checks properties given components really", "num": "3079", "d": "2/2015"}, {"title": "prop validation component class", "body": "hello question component accepts component constructor prop noticed support proptype documented checking prop react class missing something reason use props way", "num": "3077", "d": "2/2015"}, {"title": "ontouchend execute twice ios safari", "body": "ontouchend execute twice function event handler live example first tap button confirmation appear everything seems okay tap ok cancel moment tap place around button confirm appear tap button live example qrcode", "num": "3076", "d": "2/2015"}, {"title": "markdown parsing error docs", "body": "following markdown markdown note transfer cloned component wish preserve key add object similarly preserved parsed incorrectly seen", "num": "3075", "d": "2/2015"}, {"title": "thisforceupdate crashes component mounted", "body": "sure bug general confusion tried master crashes component mounted makes sense say however call directly nt crash suggests ok ok call happens use fluxlike architecture nt use combination flux suggests error get invariant violation receivecomponent update mounted component example shows problem", "num": "3071", "d": "2/2015"}, {"title": "false warnings controlled components", "body": "controlled component nt listener listened parent component following warning logged currently warning provided prop form field without handler render readonly field field mutable use otherwise set either check render method example", "num": "3070", "d": "2/2015"}, {"title": "make autofocus show rendered markup", "body": "currently nt handle specially runtime serverrendered content would good make actually work cc syranide", "num": "3066", "d": "2/2015"}, {"title": "support map interface props", "body": "high performance map implementations starting appear modern web browsers supporting map interface users instead supply props immutablejs clojurescript map instance change would even require providing equality hook first pass users memoize props users embracing immutable data huge change means styles defined code overridden shared efficiently react dom elements memoized immutable props skipped etc", "num": "3059", "d": "2/2015"}, {"title": "react todo application example raising warning", "body": "todolist component renders list elements nt unique key raises warning child array unique key prop check render method todolist see information understanding done way sake simplicity unique id used performant virtual dom diffing good idea warning raised example home page react see", "num": "3049", "d": "2/2015"}, {"title": "functionality directly add html string render function", "body": "render different html class different state value one option make every small html content different react class call individually like add html lines directly render function way something like makes difficult certain cases lot small html manipulations different state values better way add html directly return function using notation like missing something actually better way react", "num": "3044", "d": "2/2015"}, {"title": "component namespace sharing", "body": "var form myformcomponent var app kind component namespace sharing still available syntax", "num": "3042", "d": "2/2015"}, {"title": "bind dom event handlers component instance", "body": "gives us possibility use javascript prototype based inheritance instead using method problem brings need explicitly bind dom event handlers component since react autobinding works classes declared time looks weird even native dom event listeners work manner nt think good example follow please notice native dom apis introduced thousands years ago nt get wrong nt see usecases event handler called within context global object would nt better react bind dom event handlers class instance imaging one custom component inspired bemreact project js class button extends reactcomponent onfocus thissetstate focused true onblur thissetstate focused false render return reactcreateelement div classname button thisstatefocused buttonfocused reactcreateelement button classname buttoncontrol onfocus thisonfocus onblur thisonblur thispropstext would expect event handlers would called instance context would error thrown global method let clear know arrow function well ways bind function context however react eventlistener internally think might possible provide desired behaviour box think", "num": "3040", "d": "2/2015"}, {"title": "recursive forceupdate", "body": "would nice way call way would applied recursively children elements currently using paired immutablejs similar fashion om found behavior preferable cases one concrete use case would gaearon hot loader currently attempts gather elements trigger forceupdate seems still somehow hitting application nt quite tracked wherehow another use case would simple solution context issue context changed want able element children", "num": "3038", "d": "2/2015"}, {"title": "react nt eval java nashorn javascript engine", "body": "nashorn new javascript engine shipped java nashorn compiles javascript java bytecode runs natively jvm unfortunately react nt evaluate properly nashorn due fact nashorn nt support kind module system like amd box code creates new nashorn engine evaluates react jvm running code results following error simple workaround create variable referencing global context btw fully working isomorphic java example commentbox tutorial commentbox initially rendered server nashorn", "num": "3037", "d": "2/2015"}, {"title": "jsxharmony outputs nonsensical code arrow function expressions", "body": "given following input code traceur compiler yields syntax error outputs nt know behaviors correct know produces following output correct thanks", "num": "3029", "d": "2/2015"}, {"title": "two mixins cause invariant violation defining methods", "body": "hi trying figure whether wrong way react issue deal two mixins pulling state different stores trying mixed view gist showcasing issue given two mixins view uses var view reactcreateclass mixins render function return view view fails getstate wrong approach maybe react issue googling symptoms found facebookreact strictly related plus nt seem default spec policy enforced multiple definitions thanks dar\u00edo", "num": "3027", "d": "2/2015"}, {"title": "jsx parsing error", "body": "entirely sure causing issue fails nt", "num": "3019", "d": "2/2015"}, {"title": "valuelink working react", "body": "", "num": "3015", "d": "2/2015"}, {"title": "img tags get duplicated virtual dom", "body": "hi simple component like debug using react dev tools inspect react dom see breaks unit tests expect one element use issue virtual dom browser dom looks like expected interesting note change line element nt duplicated anymore using react", "num": "3014", "d": "2/2015"}, {"title": "make controllable", "body": "affected user interaction enabled makes sense controlled uncontrolled introduced needs introduced zpao sounds good could good first bug", "num": "3010", "d": "2/2015"}, {"title": "streaming rendertostaticmarkup", "body": "messing around trying get current project cater critical rendering path ie first data asap landing page quite heavy content takes around process time want users wait get something screens currently everything tag first content finishing bundled json dump data server used render page js webpack bootstrapping gets somewhere get background color title first rountrip content would neat version returned node stream option specify function tells number bytes render pushing stuff downstream example", "num": "3009", "d": "2/2015"}, {"title": "comments jsx working expected", "body": "comment section jsx children component jsx transformer nt seem transform correctly elements hidden dom nt seem work intuitively something wrong", "num": "3008", "d": "2/2015"}, {"title": "unnecessary return", "body": "hello reading react tutorial last really necessary yes necessary", "num": "3006", "d": "2/2015"}, {"title": "checked attribute realizing dom", "body": "recently updated checkbox element hooked dynamically updating browser using react inspector chrome seems toggling fine reason changes nt propagate dom sure specific update messed something nt realize render function js render function let classname thispropsitemisactive classname isactive return thispropsitemtext", "num": "3005", "d": "2/2015"}, {"body": "logically trying call component already get reference statics javascript class mycomponent extends reactcomponent static somemethod consolelog something render mycomponent accessible", "d": "2/2015"}, {"body": "true explicitly call rather could potentially enable better code reuse", "d": "2/2015"}, {"body": "clear would changing checks like reactelementvalidator assume exists sebmarkbage one", "d": "2/2015"}, {"body": "since base class nt define think indeed expected real issue opinion using inheritance react components bad pattern book jordan explains many people become accustomed using oo inheritance tool primary means abstraction application worked java shop know talking personal opinion classical oo inheritance implemented many popular languages often best tool jobs let alone jobs situation approached even caution inheritance used within framework paradigm uses functional composition primary abstraction react certain patterns want prevent many strange things people come combining render inheritance nt make sense addressed via simple composition also risk making mutation convenient might make sense start classes simply better syntax react component creation intentionally limiting use cases limiting inheritance depth making react base class methods final used react components course nonreact use classes would nt restricted use case absolutely sure ca nt simple composition something react powerful", "d": "2/2015"}, {"body": "offcourse things simple composition javascript abstraction cool oo stuff things easier though", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "looking projects see done similar needs another one deriving chunk state based props passing different set props needed pass something extra reusing without duplicating knowledge props needed", "d": "2/2015"}, {"body": "syranide trouble setup needs call methods also need props needs call methods also needs props eventually entire component plumbing around props", "d": "2/2015"}, {"body": "seems like bunch needless wiring app current pattern could concise standardized way solve problem seen bunch people get burned thisprops inside componentwillreceiveprops clear sign intuitive", "d": "2/2015"}, {"body": "differ nt matter terribly bunch changes went linting part thought probably getting", "d": "2/2015"}, {"body": "ah never mind indeed gruntfile run grunt lint looking forked repo outdated facepalm", "d": "2/2015"}, {"body": "actually one commented pr", "d": "2/2015"}, {"body": "thanks missed guess got confused since failing master machine", "d": "2/2015"}, {"body": "warnings ok errors lot warnings long lines need clean admittedly hard find want make lint changes show nt yet noted error coming change going close", "d": "2/2015"}, {"body": "getting result running grunt lint machine travis getting errors", "d": "2/2015"}, {"body": "nevermind figured errors build folder", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "sounds like issue tutorial servers close issue leave one open fix", "d": "2/2015"}, {"body": "magalhas right place afaik", "d": "2/2015"}, {"body": "use case able filter state set", "d": "2/2015"}, {"body": "yaycmyk update owner component state change easily create infinite loop since filter update triggers nt know alternatively could pass callback second argument fits usecase maybe better way achieve want yeah nt mutate state closing unless questions btw stackoverflow helps", "d": "2/2015"}, {"body": "note prop mutation deprecated see also something else ca nt done componentwillmount let know reopen discuss", "d": "2/2015"}, {"body": "really understand prop mutation deprecated means implications deprecated write multitenant platform number customers add components shared used users system unlike facebook guess wish able automate lot testing components pass use environment certain attributes injected ui renders right execution order goes like componentdidmount mixin write code componentdidmount component third party code gets values store stuff control potentially sets states style properties anything else want render component control ca nt anything ask developer write attributes createelement write follow convention means less component repeat code mixin naming adding attributes thisprops element nt created yet ask render function thismixtestobsprops function names obscure prevent clashes thismixtrackobsprops anything user may create thismixvendobsprops properties mixin might choose add thismixuseobsprops add functions mixin thismixsylobsprops code meaning developer concentrate need write point keys resultant value based props state developer may load componentdidmount phase reactresolver binds componentdidmount already mixin forces thisforceupdate effectively making components double work fact library even exists shows need type feature trying make whole solution faster single set dom writes render writing dom rewriting dom render time additional dom inserts component used grid cells te main reason choosing react speed would like way able add properties elements get created render didmount fired mixin component get added single hit", "d": "2/2015"}, {"body": "return object wrapped object ie nt flatten object thisattributes happens reactcompositcomponent mountcomponent thisprops thisprocessprops thisprops createmergedresultfunction mergeobjectswithnoduplicatekeys thiscomponentwillmount", "d": "2/2015"}, {"body": "course loose ability reference property longer exists via", "d": "2/2015"}, {"body": "ignore mixin third party causing issue rolling everything attributes raised issue", "d": "2/2015"}, {"body": "closing per last comment", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "usual way write something like js select function color e partial application callback arguments passed bind passed first argument callback however looking code see problems importantly never ever set another component state calling anything except state thought component private variables could expose method dot component really belongs parent component state passed automatically props dot components something like work note nt need refs need update child individually idiomatic react code rarely uses refs let know example makes sense", "d": "2/2015"}, {"body": "may bold see two ways forward either react knows instances react something global operating entire dom react instance creates random root key similar", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "see one similar want warning presumably act upon removing one reacts mistakenly loaded scenarios multiple instances operating dom component tree required", "d": "2/2015"}, {"body": "scenarios multiple react instances operating dom component tree required nt understand use case", "d": "2/2015"}, {"body": "scenarios multiple react instances operating dom component tree required nt understand use case cases seen usually around addons widgetsscripts", "d": "2/2015"}, {"body": "use case mine ui composition via amd could something like two separate commonjs bundles page possibly nt use commonjs widgets", "d": "2/2015"}, {"body": "issue ca nt reliably use dependency injection mechanism eg change batching strategy using components multiple modules instance react dependency even version react originally posted sorry duplicate comment", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "submitted pull request", "d": "2/2015"}, {"body": "also happens one resizes browser zooms mobile", "d": "2/2015"}, {"body": "need", "d": "2/2015"}, {"body": "experimenting concept global state object programmatically constructed represent hierarchy components tree thus easier pass state props root component tree", "d": "2/2015"}, {"body": "sure mean give code example problem trying solve", "d": "2/2015"}, {"body": "related way traverse render tree rendering eg graphql work ahead time tree traversal pulling calls use mixin every component graphql calls", "d": "2/2015"}, {"body": "iamdustan yeah somewhat question spicyj ok check thread idea use hierarchical object mirrors components tree app", "d": "2/2015"}, {"body": "thanks issue right assume dangerouslysetinnerhtml markup valid nt ever expect error message fire sanity check least try document better improve error message maybe also consider validating markup development mode", "d": "2/2015"}, {"body": "parse together performance reasons", "d": "2/2015"}, {"body": "least try document better improve error message believe mentioned time ago perhaps put onetime message first time used people probably use somewhere nag get rid maybe also consider validating markup development mode aware reasonably fasteasysmall way validating markup using parser even would could make robust helpful interspersing markup comment validate comments order ca nt give reasonsource error ca nt validate markup context either invalid nesting plays part thing seems realistic wrapping markup comment side walk tree ensure special comments level always mercy chance root problem user must made aware markup must wellformed valid context safesanitized", "d": "2/2015"}, {"body": "believe mentioned time ago perhaps put onetime message first time used nt work codebases worked one person", "d": "2/2015"}, {"body": "specific example working appears expect firefox chrome least add new row always last item ps let try assume gents", "d": "2/2015"}, {"body": "ouch possibly forgotten clone bin kept playing one shared original working one saw effort make work strangely rearrangement started producing expected results nothing see radically different ps let", "d": "2/2015"}, {"body": "ah looks like main difference lack broken example browsers fun change dom insert markup write table without tbody browser inserts one original rows tbody new rows appended directly table show original content warning fires conditions try detect ca nt always leads weird things like", "d": "2/2015"}, {"body": "zpao related optimistically traversing unexpected nodes like seems like bad idea hides invalid nesting issues like make surface sometimes rather consistently seem far preferable", "d": "2/2015"}, {"body": "wups early submit nt automatically propagated whether pass class even component decide ps also special way dom components receive special treatment jsx information could useful depending components set", "d": "2/2015"}, {"body": "sure get argument would love understand component sure fb team architectural answer however make argument propagated consider component jsx well takes special immutable special keywords result rendering attribute would extension functionality cite gwt functionality exists preprocessed xml view", "d": "2/2015"}, {"body": "words components thin bundles dom opaque decide rendered take classstyle forward rendered dom component responsibility component given even single universally agreeable way anyway hence discarded also consider something like reactkit native apps concept styleclass native apps", "d": "2/2015"}, {"body": "certainly understand saying humbly disagree specific case talking components abstract construct also talking jsx implementation jsx effectively acts mini render html defining specific way rendering clear understanding class style agree jsx present reactkit working html output could possibly imagine android xml layout preprocessor may face similar issues maybe add add jsx preprocessor title want add adamant adding propagation correct definitely want understand underlying architecture may prevent make bad idea", "d": "2/2015"}, {"body": "jsx effectively acts mini render html jsx frontend neutral made html think defining specific way rendering clear understanding class style jsx knowledge meaning individual props agree jsx present reactkit working html output definitely use jsx reactkit point", "d": "2/2015"}, {"body": "ok makes sense thought jsx purely html preprocessor mistakenly classname class mapping turns special case javascript lang instead html", "d": "2/2015"}, {"body": "posterity done react dom components", "d": "2/2015"}, {"body": "yep important least initial assumption mapping result jsx interpreting html dom like said jsx frontend neutral however jsx still js frowned upon definitely clarifies jsx substituting classname instead interpreting since jsx javascript identifiers class discouraged xml attribute names instead react dom components expect dom property names like classname htmlfor respectively", "d": "2/2015"}, {"body": "fairly safe say equivalent though neat idea deprecate well infavor ie without responsible updating make assumptions easily readd base class tangent technically could even move something like want avoid publicly exposing methods base component class would left right even seems imaginable drop base component class entirely wanted also means mixins ca nt add state particularly found pattern common one shoulder shrug class choice nt use object also accept wo nt compatible standard mixins would like add warning expand state fields original getinitialstate", "d": "2/2015"}, {"body": "would like move authoritative state object internals ideally also frozen render would resurface whatever internals thinks current state object way internals could implemented terms immutable treescursors component structure could also quickly hydrated restored need reclaim memory eg infinite scrolling lists ideally even would nt work nested objects would still work mutating state also timing issues comes mutation", "d": "2/2015"}, {"body": "mutating state also timing issues comes mutation oh right yeah", "d": "2/2015"}, {"body": "effectively means stateful components must define getinitialstate kneejerk reaction bad thing starting like", "d": "2/2015"}, {"body": "another one thinking parentbased refs could treat refs similar context assign unique key bubbles upwards parent hierarchy everyone hierarchy gets access effectively reversed context useful things work cases possibility screwing nested would provide way identify upwards signals proposal anyway idea spinoff ideas", "d": "2/2015"}, {"body": "kindofmentioned suspect part answer refs wellsuited eventtriggered interaction uncontrolled components clicking save saving etc whereas refs nt wellsuited lifecycle events refs based lifecycle whereas really interested lifecycle target nt want ref want instance momentarily target mountedupdatedunmounts ps obviously complete story seems refs lifecycle events might right way go", "d": "2/2015"}, {"body": "ternary operators nt exist browser need preprocess file using something like browserify webpack serve premade builds either dev prod", "d": "2/2015"}, {"body": "thank prompt reply preprocessed using gulp browserify like guess mainjs loads react react modules preprocessed bundle operating anything", "d": "2/2015"}, {"body": "see also \u00f4\u00e5\u00e2\u00f0 \u00e3 \u00e2 ironyee notifications githubcom \u00ed\u00e0\u00ef\u00e8\u00f1\u00e0\u00eb \u00e0 thank prompt reply preprocessed using gulp browserify like browserify srcjsmainjs transform reactify bundle guess mainjs loads react react modules preprocessed bundle operating anything reply email directly view github", "d": "2/2015"}, {"body": "react specifies use contextify browserify happen automatically replaces believe webpack something similar built going keep time nothing", "d": "2/2015"}, {"body": "deep merging always tricky need assume things shape arbitrary objects case would actually want deep merge value actual dom node passed would surprising passing args simulate would end mutating node directly react tests mutate target value directly simulating change event like approach recommend", "d": "2/2015"}, {"body": "cc sebmck", "d": "2/2015"}, {"body": "difficult part figuring way work everyone environment everyone ability use different transpilers development production mode mean using different transpilers using transpiler flick switch unless misunderstanding something another solution would different flags transpilers make sure people actually use correctly otherwise problems due firing warnings think react slow screwed config developers already know use different build react development production nt think confusing introduce concept transpilation step toying idea production development mode babel things like tdz really want enable default would absolutely kill performance hot code purpose basically prevent development errors", "d": "2/2015"}, {"body": "mean using different transpilers using transpiler flick switch unless misunderstanding something yea meant developers already minifiers use production mode effectively thing", "d": "2/2015"}, {"body": "ah right yeah definently developer education issue technical one", "d": "2/2015"}, {"body": "nit developer education technical issue look much technical trouble go add warnings locking api developers nt unknowingly shoot foot", "d": "2/2015"}, {"body": "yeah absolutely agree probably specific referring specifically educating developers potential production mode transpilers since real way warn compiled production code development mode", "d": "2/2015"}, {"body": "sebmarkbage unfortunately still nt figured final semantics refs current semantics relies getting current react owner therefore apply optimization ref attribute might string mentions past inverting refs instead provide refobject updated sounded great gets rid implicit owner possibly even magic object additionally could set refsobject could take care lists components work well today strings implemented ref callback instead receives instance argument something distinguish whether mounted unmounted kind similar works sense way leave exact implementations user preference either individual instances lists instances store even store could even chained easily longer system refs basically externally chainable lifecycle method listeners used reimplement refs imagine could benefits future expose lifecycle callbacks could use say easily measure frontend objects without ever store instance provide complex logic determine whether frontend object actually updated exact usecase idea approach seems lot react reusable naturally efficient seems like something avoid unless explicitly dealing uncontrolled components case option perhaps way utility seems solves lot problems refs meant solve better ways actually storing refs necessary dealing uncontrolled components uses reasonable capable thing directly instance callback called reimplementing refs asis could look something like code could easily made reusable helper could take number shapes perhaps key nt even interesting putting instances set enough decide keep updated measurements component would simply editor nt update automatically avoid remeasuring free editor updates component still remeasure get updated height", "d": "2/2015"}, {"body": "syranide already implemented firstclass refs switched callbacks nt keeping convenient imperative since need keep reference timing lifecycles nt ideal therefore comfortable deprecating current refs sure model final make sure good upgrade path codemodable", "d": "2/2015"}, {"body": "sebmarkbage facepalm", "d": "2/2015"}, {"body": "could tag every element properties unique id seems problematic watcher builds generally keeping bundle hashes static production intended production build postprocess sort even problems separate parts apps builtmaintained individually could use hidden class generate optimized diffing algorithm instead iterating properties presumably would need type since diff native components would useful nondom elements would think would optin bonus points determine properties constant perhaps using property descriptor object seems would also want reference shared unique id would identify unique set actual props check end potential differs rather n n unique sets prop names check would use heuristic inside react determine create optimized differ example updates component like jit would nt globally per rather per instance", "d": "2/2015"}, {"body": "cc sebmck", "d": "2/2015"}, {"body": "great exactly type thing mind babelbabel babel pretty strong scope reassignment tracking types optimisations relatively straightforward", "d": "2/2015"}, {"body": "optimization applied children array props object might reused independently element useful reusing empty props objects", "d": "2/2015"}, {"body": "sure need graceful degradation better throws try get sourcemaps ca nt best throw nicer error note even default output classes use defineproperty quickly becoming unmanageable support old environments maybe future net tooling nicer nodeiojs integration", "d": "2/2015"}, {"body": "reactjsnet already supports uses msie fallback available perhaps enforce usage newer msie engines modified retry without source map generation throws exception sent mobile feb pm sebastian markb\u00e5ge notifications githubcom wrote sure need graceful degradation better throws try get sourcemaps ca nt best throw nicer error note even default output classes use defineproperty quickly becoming unmanageable support old environments maybe future net tooling nicer nodeiojs integration reply email directly view github", "d": "2/2015"}, {"body": "protect jsxtransformer looks like nt protect right use otherwise master nt extra branch maybe throw reality ship sailed oh well perhaps get fresh start whatever make next feb pm daniel lo nigro notifications githubcom wrote reactjsnet already supports uses msie fallback available perhaps enforce usage newer msie engines modified retry without source map generation throws exception sent mobile feb pm sebastian markb\u00e5ge notifications githubcom wrote sure need graceful degradation better throws try get sourcemaps ca nt best throw nicer error note even default output classes use defineproperty quickly becoming unmanageable support old environments maybe future net tooling nicer nodeiojs integration reply email directly view github reply email directly view github", "d": "2/2015"}, {"body": "mental model polyfill layer reactdominput support browser would support support future ideas propagate standards fact currently implemented wrapper unobservable implementation detail perhaps nt implemented wrapper agree unobservable implementation detail would accomplish perhaps nt implemented wrapper anyway seems direct interaction underlying frontend objects something want users avoid instead favoring reduced api bridge necessary would fulfill needs users one could also reimplementedproxied community wrappers intended fiximproveextendemulate native components compatibility reduced api bridge could also provide additional benefits caching batching alternative apis suitable react environment accessing underlying frontend object would last resort idea returning actual dom node instead component ref really interesting think directionsreasons appear ca nt really boil questionsconcerns something sensible trust replaced imperative layer simply multiple calls would nt work though", "d": "2/2015"}, {"body": "knowledge displayname thing added via jsxtransformer use jsx transformer take give display name based variable assigning nt using one getting issues example jsx set javascript parser example", "d": "2/2015"}, {"body": "using gruntreact uses reacttools transform jsx nt use jsx jsbin simplicity upgraded reactjs also upgraded gruntreact uses reacttools sure work see identical example using jsx nt produce warning however regardless jsx transformer issues still believe issue official docs state nt use jsx react nt side effects within react code using using jsx", "d": "2/2015"}, {"body": "alexmcmillan taking add key object pass createclass want make pull request clear documentation", "d": "2/2015"}, {"body": "ok cool thought hinted tighter relationship reactjs jsx implied documentation guess way react put anything meaningful missing", "d": "2/2015"}, {"body": "still nt write undefined sounds like bug", "d": "2/2015"}, {"body": "expose dom component refs actual dom nodes monkey patch props setprops getdomnode onto upgrade path hmm seems kind weird especially inlight etc unless intend discontinue recommended addons would think preferable direction would away direct dom interaction going tangent including sense basically discontinuing use dom events infavor passing reactevent even new value callbacks perhaps really makes sense addon perhaps", "d": "2/2015"}, {"body": "breaking separate discussion sure mean passing reactevent anyway", "d": "2/2015"}, {"body": "deprecate replacestate things like", "d": "2/2015"}, {"body": "kharin page mentions safer use nested state property anyway could build native support would work would merge react would likely support record type maps though would still problems mixins", "d": "2/2015"}, {"body": "sebmarkbage record trick looks great sure would performance implications though react merge usual likely slower since deops property setters wanted know thoughts practice understood correctly using replacestate usecase discouraged react lends sort native support", "d": "2/2015"}, {"body": "right added spinoff issue discussion", "d": "2/2015"}, {"body": "would nt surprised coming conversation without proper context etc still somewhat new react perhaps helpful others position two basic questions today use get handle component sometimes call sometimes call method instance realize might ideal superhandy plan prevent kind thing continue supported different way currently toplevel component receives data state via setprops amp setstate usecase aim get folks move using directly prop updates realize docs suggest approach still access component instance setstate thanks great lib", "d": "2/2015"}, {"body": "yeah refs components define still work way talks happens take ref node directly like looking making img node directly case yeah recalling reactrender top level preferred solution plans change instance returned though treat state private component call ie never another instance handle expose custom setter method cases better pass new values via props", "d": "2/2015"}, {"body": "spicyj great thanks", "d": "2/2015"}, {"body": "workaround mentioned moving style class seems work us", "d": "2/2015"}, {"body": "seems sensible cases outside manipulation reactrendered dom desired though like rte safer set false modifications event listeners user content nt accidentally get overwritten diff resolution", "d": "2/2015"}, {"body": "going implement nt time work encountered bugs nonreact javascript touched react nodes broke everything", "d": "2/2015"}, {"body": "seems like would create annoying noise instances use cases direct dom mutation desirable represents actual simpliest implementation animation definitely one case also mentioned wrapping none react library widgets jquery ui etc would nt want false positives drown real warnings maybe turned hinted apply certain components", "d": "2/2015"}, {"body": "seems like would create annoying noise instances use cases direct dom mutation desirable imo cases explicitly marked perhaps attribute something quite rare", "d": "2/2015"}, {"body": "fine opting encourages general better behavior long nt need react chastising know p cases makes sense downside adding api surface area albeit small bit still seems sort silly add api development warnings", "d": "2/2015"}, {"body": "mutation dom node attributesproperties safe avoided mutation dom node hierarchy anything insertion nodes empty leaves disaster waiting happen nt issue discerning unsafe mutation safe", "d": "2/2015"}, {"body": "would useful particular introducing react legacy codebases perhaps something like jquerydojox still exists idea get rid time", "d": "2/2015"}, {"body": "reactnative released nt set date working get soon possible", "d": "2/2015"}, {"body": "would nice figure event bubbling works well cf", "d": "2/2015"}, {"body": "wow thewebworldsucks nt think many plugins go crazy stuff instance google extension rewrites anything looks like phone number link click dial via voip direct child body likely confuse react sure warn rendertobody hope plugins nt modifying parts dom think worth thinking possibility graceful solution handles general way even overwriting plugin dom changes rather warning dev hoping best sure solution food thought least could probably setup dom watch warn anyone except react modifies element rendered react", "d": "2/2015"}, {"body": "sebmarkbage took stab adding warning wording close original comment let know missed anything", "d": "2/2015"}, {"body": "actually wondering possible run mutation observer dev mode warns nodes without datareactid inserted valid cases insertions would helped catch issue much earlier", "d": "2/2015"}, {"body": "gaearon big difference two approaches mutation observer would catch offending scriptsextensions run unknowable combination extensions users app installed using warning like helps think problem arises", "d": "2/2015"}, {"body": "meant complementary approach true offense happens level", "d": "2/2015"}, {"body": "agreed would definitely cool", "d": "2/2015"}, {"body": "tracking mutation observer solution separate issue", "d": "2/2015"}, {"body": "give bit context perhaps jsfiddle calling event handler one case seen", "d": "2/2015"}, {"body": "calling try jsfiddle", "d": "2/2015"}, {"body": "nt call preventdefault unless intend prevent default behavior browser make change event work means actually handling click event preventdefault checkboxes prevents visually updated nt know calling preventdefault nt", "d": "2/2015"}, {"body": "ok fiddle forked part code someone else added problem click anywhere row expect checkbox inverted happening hope find cause thanks", "d": "2/2015"}, {"body": "nt anything wrong react using event handler incorrectly movielist onclick look like index needs first bind arguments come right order render movielist looping movies look like need create new function bound index called", "d": "2/2015"}, {"body": "ah bad thanks heaps learning", "d": "2/2015"}, {"body": "ummm zpao wrote better test case still issue clues", "d": "2/2015"}, {"body": "binarykitchen event handlers receive event object new value want similar fixed also added clones array creating new copy instead modifying old one place tends easier reason though nt strictly necessary", "d": "2/2015"}, {"body": "spicyj oh see thanks added code another problem event handler also modifies state somehow error thrown click checkbox directly selected state row click reflected checkbox", "d": "2/2015"}, {"body": "balanceiskey onchange apparently also passes value particular field first param synthetic event arg handlechange called calling translates obviously error", "d": "2/2015"}, {"body": "browniefed sorry ca nt follow nt understand mean synthetic event think could update code", "d": "2/2015"}, {"body": "binarykitchen sorry meant event argument type syntheticevent cobbled together event react make obvious happening put debugger top checkout passed", "d": "2/2015"}, {"body": "oh see fixed still code working click checkbox row checkbox rerendered", "d": "2/2015"}, {"body": "would look table components setstate getting called bound right thing render getting called right state rendercheckbox nt getting called though perhaps rowgetter returning data components decided treat reason rerender perhaps moving selected state row data would resolve regardless seems outside react hands issue components nt control edit see updates since last loaded page think comment still stands though", "d": "2/2015"}, {"body": "see tell checkbox watch changes inside selected state ab use want move selected state row data imo whole table nt rerendered one checkbox changed performance", "d": "2/2015"}, {"body": "guessing somebody already trying make performance optimizations cellrenderer nt getting called guess anyway would look try prematurely optimize make work try make faster", "d": "2/2015"}, {"body": "agree table rows", "d": "2/2015"}, {"body": "worthless nt make work first afaict nothing directly related react dig components find nt updating", "d": "2/2015"}, {"body": "ok fair enough works good", "d": "2/2015"}, {"body": "ca nt repro safari put together smaller demo repros reliably happy take look", "d": "2/2015"}, {"body": "think shows import two versions react accident see nt see evidence test case maybe related", "d": "2/2015"}, {"body": "looked actually could related expect throw matter dom component rendered var component reactcreateclass render return testutilsrenderintodocument test environment everything renders expected see changing l example return", "d": "2/2015"}, {"body": "ack feel like idiot moving assignment call seems fix issue strange nt break elements checked anyway anyone idea might", "d": "2/2015"}, {"body": "input elements implemented hood wrapper deals events making controlled component closing already aware sort problem manifest multiple copies react already etc track", "d": "2/2015"}, {"body": "second issue browser automatically fixing invalid dom tree react may possible react warn dev mode unaware reasons drag events working svg elements try take look weekend", "d": "2/2015"}, {"body": "thanks dustan super familiar internals would nt even know start let know help thu feb pm dustan kasten notifications githubcom wrote second issue browser automatically fixing invalid dom tree react may possible react warn dev mode unaware reasons drag events working svg elements try take look weekend reply email directly view github", "d": "2/2015"}, {"body": "cc sebmarkbage syranide expertise trycatch even throwing error catching thus comment catch expect behavior sure coming block", "d": "2/2015"}, {"body": "n ca nt reproduce bug anymore one example used maybe another instance nt wrapped trycatch let see reproduce issue", "d": "2/2015"}, {"body": "ok got reproduced happens works fine clarify anyone stumbling across future code linked version", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "quite certain correct asis click stands click singleclick", "d": "2/2015"}, {"body": "syranide yup vanilla events happen usual additional event dispatched clicks happen within certain timeframe binarykitchen another interaction paradigm use feature recommend exploring double click support nt worth annoyance personal experience", "d": "2/2015"}, {"body": "see onclick stands clicks single clicks want distinguish single double clicks yaycmyk understand agree double clicks unusual working large ui double clicks important change behaviour otherwise many customers get confused currently migrating react would sad double click support", "d": "2/2015"}, {"body": "want distinguish single double clicks trying snark something take browser react simply best normalize according defined standards able achieve distinction native events free bind manually wrap reusable component perfect close", "d": "2/2015"}, {"body": "binarykitchen suppose could set timer single clicks see double click event happens ms artificially slowing ui perhaps imperceptibly forcing single clicks wait anyway react job syranide said bug", "d": "2/2015"}, {"body": "good point syranide let say want add two new event handlers called reusable table mean reactbased examples adding custom events already wrote hack coffee distinguish two events figuring hide parent class react components inherit coffee onrowclick e index", "d": "2/2015"}, {"body": "simulate doubleclick handler unfortunately means single clicks slower fire wait see user action actually doubleclick something like", "d": "2/2015"}, {"body": "binarykitchen bind manually", "d": "2/2015"}, {"body": "thanks figured new parent component dealing double clicks", "d": "2/2015"}, {"body": "probably best bet built top pretty sure uses facebook react uses expect continue working react future", "d": "2/2015"}, {"body": "sure wed feb pm dustan kasten notifications githubcom wrote probably best bet built top jasmine pretty sure uses jsdom facebook react uses expect continue working react future reply email directly view github swapnil netankar", "d": "2/2015"}, {"body": "currently using karma mocha webpack sinon building tests result still working tho bad using karma plugins actually test browsers easily debuggable compared jest however since using lot libs tools sometimes makes wrap head around karma webpack causes unknown problem problems come webpack webpack loaders instance currently able use mode mocha test fail unknown message would nice time provide kind boilerplate picked company repo", "d": "2/2015"}, {"body": "correct use jest built top jasmine jest configuration calls jsdom simple tests phantomjs complex tests obviously best bet run inside real browser also difficult setup strongly opinionated testing environment use go whatever best meets needs since nt bug react going close issue basically takes radar feel free continue conversation thread move discussion stackoverflow", "d": "2/2015"}, {"body": "jest always uses jsdom never phantomjs react testing runs set tests environments though well browser local debugging sauce labs obviously work one would want fb primarily rely jest webdriver tests strongest suggestion", "d": "2/2015"}, {"body": "yeah", "d": "2/2015"}, {"body": "guess need", "d": "2/2015"}, {"body": "hey sebmarkbage would like get started would able give context", "d": "2/2015"}, {"body": "something like assuming using jsx transformer class means shows debuggers thing method names stack trace error include instead whatever browser default name", "d": "2/2015"}, {"body": "chenglou let languish nt bad rebase", "d": "2/2015"}, {"body": "fairly certain reported also assuming typo example code actual code experiencing issue", "d": "2/2015"}, {"body": "yep typo nt real code pulling real project code structure slightly different", "d": "2/2015"}, {"body": "moved facebookjstransform", "d": "2/2015"}, {"body": "equivalent value object empty otherwise nt want warn nt make required effect testing presence key something would recommend", "d": "2/2015"}, {"body": "agree ca nt think many use cases would want force user specify value would willing accept null valid value practical purposes isrequired warning null sensible expected behavior", "d": "2/2015"}, {"body": "spend minutes looking gitrepotree take say grain salt looks like removed internals merge example marked deprecated changed license verbage maybe added removed warnings appear development mode documentation lots maybe buildsystem optimizations repo personally speculate released soon somebody writing blog post speak explaining wtf happen major changes take place outsider speculating literally idea released officially nt look like making significant changes changed mind still nothing crazy api mostly internals literally idea talking", "d": "2/2015"}, {"body": "paglias sure find umbrella issue interesting", "d": "2/2015"}, {"body": "concur rickbeerendonk actually went files released quite bit realized umbrellas checked might released immediately depends important issues fast take patch", "d": "2/2015"}, {"body": "also think would great started project reactupgrade python script built codemod goes old propertiesmethods asks user want replace new propertymethod would good knew updates users could seamlessly upgrade without worries still working update open contributions think warnings good idea ambiguous tells something wrong specifically know transition new version react need use exporting classes indicative change needs happen another note people use module libraries like requirejs commonjs etc essentially acting factory find weird introduced since would end used like see beneficial memory wise someone nt use module loader assuming many people going lot people fully released thoughts please correct wrong", "d": "2/2015"}, {"body": "rnbwd sorry sort github glitch caused boxes checked fixed umbrella issue accurately reflect progress date correct majority changes internals rather public api try really hard minimize publicapi churn biggest changes public api refs still figuring classes documented joshbedo runtime error messages generally suck life working dynamic language like javascript try usefuldetailed possible regards createfactory introduced createfactory much exposed createfactory previously bundled createclass change several advantages including simpler api classes future better support static methods better support automocking better language interoperability thought longandhard change documented decisionramifications hope clears misgivings may factory change", "d": "2/2015"}, {"body": "anxious release process building new components rather complex already using babel flux implementation alt know fixedtablecomponent capable handling upgrade seems logical embrace next class syntax react fits well current work flow hesitant start writing especially depreciated hard use officially released due peer dependencies libraries wondering worth process migrating know experimental beta recall previous beta lasting days without much change beta official release seems like ambitious endeavor probably substantial release terms modifying api seen since using react", "d": "2/2015"}, {"body": "going changelog betas time around consider moving forward rnbwd answer timeline question approaching rc soon gone short time rc final nt actually done betas past part nt need start using classes could write something forward compatible easily", "d": "2/2015"}, {"body": "hooray jsfiddle supports tried make changes docs one problem left code gets shown properly result tab empty external resources fiddles work guess facebook needs update fiddles first docs get changed", "d": "2/2015"}, {"body": "ca nt fork fiddle change urls change docs submit pr since suspect fb uses static blog generator sources changed instead resulting html", "d": "2/2015"}, {"body": "sources docs repo facebook wants control fiddles fork fiddles", "d": "2/2015"}, {"body": "okay wait", "d": "2/2015"}, {"body": "like people view page served embeds break need instead leave protocol use works pr set ready go update fiddles independently", "d": "2/2015"}, {"body": "zpao far tell would work using bit nicer opinion fiddles get updated independently would nt update change urls fiddles", "d": "2/2015"}, {"body": "move things forward made pull request atom support browsers including maybe even older todo update fiddles thinking react page", "d": "2/2015"}, {"body": "cody seems like fixed means closed looking issues fix contribute reading seems fixed", "d": "2/2015"}, {"body": "sure every page green lock least closing feel free send prs run straggling", "d": "2/2015"}, {"body": "link tests", "d": "2/2015"}, {"body": "related tests actually set value dom node first simulating event nt actually fire native event component nt anything event case input wrapper nt actual dom node wo nt updated also ca nt use like actually set node pass explicitly merging like nt work time going say set value directly ensure triggering change nt actually change node value", "d": "2/2015"}, {"body": "fiddle code pasted code change made give actual url picture dom updates every seconds everything looks fine guess need see code", "d": "2/2015"}, {"body": "ok link work", "d": "2/2015"}, {"body": "see problem smiley try render element rendering works", "d": "2/2015"}, {"body": "wont work", "d": "2/2015"}, {"body": "change properties container element children changed element children allowed ca nt used render", "d": "2/2015"}, {"body": "ok close issue merci bien could think behavior improved", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "actually disconnect expectations reality working browser unfortunately simulating events quite browser click submit button simulating click essentially creates native event dispatches button however event fired wanted test exactly like browser would behave trusted events everything need run tests browser probably use something like selenium webdriver accurately get results otherwise want simulate click submit separately", "d": "2/2015"}, {"body": "agreed think fair expect something named reacttestutils event simulation would tie reacts potentially browserenvironment aware event model would work though considering adds lot complexity reacttestutils eg simulating return key press input element would also trigger parent form onsubmit handler worth adding reacttestutils docs", "d": "2/2015"}, {"body": "thanks guys quick fix beers", "d": "2/2015"}, {"body": "actually undefined get extra space classname cares", "d": "2/2015"}, {"body": "also write see though unlikely due perf", "d": "2/2015"}, {"body": "thanks spicyj context figured already investigated", "d": "2/2015"}, {"body": "knowledge asapjs react maintained codebase following url home asap project module q seems share issue projects probably indexof processtitle look node string", "d": "2/2015"}, {"body": "exists nowhere react codebase seemingly related react", "d": "2/2015"}, {"body": "yes apologies looked closer made assumption react sorry time wasting", "d": "2/2015"}, {"body": "worries feb dominataa notifications githubcom wrote yes apologies looked closer made assumption react sorry time wasting reply email directly view github", "d": "2/2015"}, {"body": "additional tests seem allude events triggered also experienced event triggered", "d": "2/2015"}, {"body": "hmm ca nt refs queue componentdidmount queue ref component order componentdidmount componentdidmount componentdidmount componentdidmount ref could interleaved ref ref ref pa componentdidmount pb componentdidmount pa ref pb ref think specifically child refs need resolve parent componentdidmount called right componentdidmount ref componentdidmount ref pa componentdidmount pa ref componentdidmount ref componentdidmount ref pb componentdidmount pb ref saying pa componentdidmount needs come cb ref", "d": "2/2015"}, {"body": "could fire refs child componentdidmount would guarantee refs resolved componentdidmounts fired sure best worse seems like two reasonable choices either keeping master think choice needs based easiest deal trying compose two events", "d": "2/2015"}, {"body": "thought nt working assigning back", "d": "2/2015"}, {"body": "think ship rc current state see havoc causes", "d": "2/2015"}, {"body": "updated thanks", "d": "2/2015"}, {"body": "definitely stupidity problem within overlay rendered transitioned transitioning back login assuming rendered differently causing invariant solution use static perform auth check", "d": "2/2015"}, {"body": "invariant probably harsh console warning", "d": "2/2015"}, {"body": "know cause asked", "d": "2/2015"}, {"body": "seems like also dupe", "d": "2/2015"}, {"body": "going close duplicate tldr bit tricky transferpropsto whatever instead might props need passed even nt consume said think good idea would prefer optimize common case unrecognized prop mistake rather less common case people transferring props easy might seem first glance", "d": "2/2015"}, {"body": "mounting node html html document", "d": "2/2015"}, {"body": "set ca nt imagine anything bug safari react sets calls could wrong ca nt see anything moment", "d": "2/2015"}, {"body": "seems work fine fiddle suspecting gulp reactify", "d": "2/2015"}, {"body": "aronallen fiddle work shows empty object works", "d": "2/2015"}, {"body": "edit seems reproducible bit quick returned rect fiddle properties", "d": "2/2015"}, {"body": "seems error lies consolelog safari react resubmitting bug apples feedback", "d": "2/2015"}, {"body": "thanks tracking", "d": "2/2015"}, {"body": "going guess relevant", "d": "2/2015"}, {"body": "cc sebmarkbage", "d": "2/2015"}, {"body": "cc leebyron", "d": "2/2015"}, {"body": "gurdasnijor using react", "d": "2/2015"}, {"body": "html output looks like using react current production version need explicitly cast immutable collection array js immutablelist map gt toarray wo nt necessary react children accepts iterable array include immutable collections well collections", "d": "2/2015"}, {"body": "leebyron sebmarkbage running checked verify issue nt produced installed npm thanks quick responses closing", "d": "2/2015"}, {"body": "sounds plausible interested making fix requires lot code probably worth line two extra happy take", "d": "2/2015"}, {"body": "tried integer instead float fact onchange never fires ie", "d": "2/2015"}, {"body": "confirm fiddle broken", "d": "2/2015"}, {"body": "hi broken windows ie also using ie devtools working latest ff chrome", "d": "2/2015"}, {"body": "syranide interest taking think probably might need handle different event ranges like use clicks checkboxes", "d": "2/2015"}, {"body": "windows internet explorer", "d": "2/2015"}, {"body": "oh work well updated every step updated end user choice", "d": "2/2015"}, {"body": "zpao nt really done much actual event normalization feels somewhat alien believe spicyj made amazing implementation", "d": "2/2015"}, {"body": "kud try native event listener", "d": "2/2015"}, {"body": "checked native change event fires fine drag react onchange seem fire though input nt fire", "d": "2/2015"}, {"body": "spicyj seems input event fire range types ie react trying use issue seems check fails ie chromeff sure ya checks like could change changeeventplugin include sort check make sure uses change event addendum also seems case", "d": "2/2015"}, {"body": "browsers behave different react behaving like one browsers even inconsistent browsers ie chrome firefox react ie react chrome react firefox drag onchange per step oninput per step oninput per step oninput onchange per step oninput onchange per mouse move drag end onchange onchange key leftrightupdown onchange oninput onchange oninput oninput onchange oninput onchange codepen interesting thread", "d": "2/2015"}, {"body": "xymostech bug mentioned yesterday interested involves working changeeventplugin listen input change events inputs current code structure nt super amenable change possible little refactoring", "d": "2/2015"}, {"body": "dupe", "d": "2/2015"}, {"body": "steps repro first hearing problem cc syranide", "d": "2/2015"}, {"body": "yes access code tomorrow prototypical project put repo pass link browserifybased straightforward get running", "d": "2/2015"}, {"body": "documentcreateelement style innerhtml unknown runtime error ie get call node nt support case react try update contents check tag name node report back please", "d": "2/2015"}, {"body": "yes read something problem unfortunately nt direct control particular call either way repo github hopefully reproduces issue would happy hear figured", "d": "2/2015"}, {"body": "flq works fine ca nt spot anything funky code think anyway need tag name node reproduce end simply enable debugging check", "d": "2/2015"}, {"body": "okay node question section unknown causes throw badly try set innerhtml changing div fixed issue dizzyface sorry bother thanks looking leave satisfaction closing bow", "d": "2/2015"}, {"body": "flq ok need use cough minimal fork uses simple hack make behave style correctly sorry bother thanks looking leave satisfaction closing bow worries", "d": "2/2015"}, {"body": "link", "d": "2/2015"}, {"body": "try", "d": "2/2015"}, {"body": "thanks answer yeah works", "d": "2/2015"}, {"body": "see", "d": "2/2015"}, {"body": "currently thinking taking following steps implement function implement next initially returns empty dummy element updated webworker create webworker wrapper component optimize render call using prerender exactly sure yet starting webworkers wonder performance penalties syncing ui changes dealing events passing react inside webworker perhaps something smaller deal nonwebworker browsers feedback wanted", "d": "2/2015"}, {"body": "cecilemuller problem using dom longer integrate synchronous apis build high level wrapper apis main thread imo best way building high level apis main thread build react components expose asynchronous apis think solution react react rendering sanderspies top section requires invasive changes core working anyway need help basic stuff start worker load modules worker determine root render unit test system", "d": "2/2015"}, {"body": "start worker see following solutions problem separate file includes necessary worker would require extra build steps create worker fly blob work every browser expect would performance penalties also resolving dependencies worker going painful impossible without extra build steps start entire build multiple workers still would still require usage build tool yeah nt see working without build tool preference would go first one determine root render would expect main react always start main thread components leaving stubs thread write want course writing dom still needs done via normal react reconciliation mechanism possible single worker used multiple components makes bit challenging probably extra id needs given communicate right component unit test system would testing render function would initially show webworker stubs testing result webworker would something different something like callback webworker result could work comes mind options missing something would definitely like hear", "d": "2/2015"}, {"body": "bug nt understand another value could send simulate functions pass event get click show checkbox changed", "d": "2/2015"}, {"body": "nt think might solve problem", "d": "2/2015"}, {"body": "nope", "d": "2/2015"}, {"body": "closing really jsx react already created issue", "d": "2/2015"}, {"body": "excerpt alternative using jsx syntax bind js class componentbase constructor var excludefuncs render objectgetownpropertynames objectgetprototypeof foreach function func excludefuncsincludes func amp amp typeof func function func func bind setstate state consolelog state class component extends componentbase onclick thissetstate items test var x new component var xonclick syranide would possible reopen keep discussion implementing react core use thread via jsx explore options edit use better compatibility", "d": "2/2015"}, {"body": "keep discussion implementing react core may misinformed think whole point making classes available react stop trying provide type system thus autobinding non based classes nt opinion belong core", "d": "2/2015"}, {"body": "think point another class system use standard whilst favourite suggestion still via jsx overriding prototypal properties like uncommon see array instance property overrides prototype property edit forgot actually another thread let keep closed continue discussion", "d": "2/2015"}, {"body": "believe former misuse target vs currenttarget please pardon intrusion", "d": "2/2015"}, {"body": "currently supported react seems always attach listeners manually neat works", "d": "2/2015"}, {"body": "exactly perf tools addons see printdom particular let know looking something else", "d": "2/2015"}, {"body": "spicyj tried definitely looking perf timers looking perf counters need presentation work done time spent work please reopen issue measuring time spent different browsers worst spend time various operations others different systems spend time operations others better cpus factors even system decent ca nt really assume many resources browser time trying work dev machines since focusing work usually dedicated lot resources task dev machines also may buffed user machines even worst browser installed hard emulate userland times hand measuring work done many hard dom changes many easy changes many changes intuitively tell either task may run poorly soandso browser based operations counters task work needs task efficient good enough given state changes involved also specific issues perf api intended work api seems specifically designed hand tool run console rather integrate project nothing measurement tooling go along inbrowser frame data personally need instrumentation ondemand tool grabbing something like initial render fairly straight forward grabbing render changes seems really akward something like work example documentation really mentions passing get mountunmount common case common case performs state changes mountunmount cost preferably measured part cost parent state changing timing data useful ca nt really say definetly lot time investment integrating serious level able get useful usable data even really really simple example since easier conceptualize rightwrong small changes state rather everything easier fix well requires much minute instrumentation thing really interested excluding components rooted separate dom node ie potentially people work otherwise want counterstimers fire back every diff virtual representation every actual work set satisfy diff required changes yes realize could potentially stick mixin maybe even sure nt bork perfstart many times stick everywhere lot busy work conceptually really really simple api prints console sorry interested printing console actually interested data either customize way print console right really filter want display want b build sophisticated easier use way visualizing data simple api boilerplate dealt simple helpers inside perf api js var countdiff function prev next var diff map next function val key return val prev key return diff prevvirtualcounters diffs componentsdiffed prevdomcounters domnodesadded dommounts domattributechanges domtextchanges example js var renderingunit reactrender documentqueryselector mountnode simple analysis renderingunitonvirtualrepresentationchange function counters countdiff prevvirtualcounters counters consolelog diff renderingunitondomchange function counters similar onvirtualrepresentationchange frame analysis globalrequestanimationframe function virtualcounts renderingunitgetvirtualrepresentationcounters domcounts renderingunitgetdomchangecounters animation etc visualising individual components rather markers go though hoops setting startstop essentially point say would simply add text array counters array reset every time new diffchange reported essentially gives ability filter want similar something like network tab filter css xhr etc simple usage example", "d": "2/2015"}, {"body": "srcspider describing seems like fit well gurdasnijor presented reactconf loader could inject work done perf tracker describing automatically even part react perf tools", "d": "2/2015"}, {"body": "irvinebroque thats bad idea would nt better implemented directly react main issue solution make heavily coupled reacts current implementation impossible write anything break every single patch react well use world break loosely like give false results", "d": "2/2015"}, {"body": "see also want get consistent story things obviously yet", "d": "2/2015"}, {"body": "thanks spicyj thought searched posting maybe forgot remove filter", "d": "2/2015"}, {"body": "although nt think supports custom functions", "d": "2/2015"}, {"body": "thanks gaearon really hoping something use without preprocessing necessary want distribute part library", "d": "2/2015"}, {"body": "proptypes functions throw error prop nt match expected value could actually define proptypes", "d": "2/2015"}, {"body": "thanks jsfb understood would like able use outside react reasonably think going build fun", "d": "2/2015"}, {"body": "proptypes functions return error ftfy yea super complicated hey open source repurpose code long license right plans pull going close", "d": "2/2015"}, {"body": "use reactproptypesany basically disables typechecking lets pass anything want sure public api take grain salt might subject change time without notice careful nothing magical default proptype validators functions validate property throwing error property invalid write validator get started look implementation default validators closing issue since technically bug future reference stackoverflow best place questions bugs", "d": "2/2015"}, {"body": "write custom validator want suppose real question weather react discouraging using component constructors props architectural reason", "d": "2/2015"}, {"body": "ca nt repro rate anything fancy touch events sending twice means receiving twice browser nt know could fix", "d": "2/2015"}, {"body": "tested ipad air simulator ios", "d": "2/2015"}, {"body": "spicyj thank reply maybe right although read reactjs source code understand works issue exists actually please test real ios device simulator maybe safari make something wrongand example code simple exclude wrong", "d": "2/2015"}, {"body": "dexbol go see bug safari replicated basic javascript nonreact", "d": "2/2015"}, {"body": "camspiers thank much sorry carelessness safari bug", "d": "2/2015"}, {"body": "welcome", "d": "2/2015"}, {"body": "think binding parent forceupdate props nt representation yet children may rendered nt lifecycle state compositelifecyclestate null notice pass parent prop also ca nt use setstate parent either reasons strange thispropsparentismounted considered true actually call forceupdate component within componentwillmount already run lifecycle methods children representation compositelifecyclestate mounting pretty sure calling thisforceupdate nothing rendered yet still manipulate state props rendered correctly", "d": "2/2015"}, {"body": "well callback called one easily verify alerts nt make sense first call outer outer moments later inner", "d": "2/2015"}, {"body": "take look tldr calling setstate forceupdate notmounted component code smell strongly suggests leaking objects prematurely cleaning references removed throws invariant violation attempt force clean code practice probably aggressive discussion downgrading invariant warning maybe even noop technically identical think issue sufficiently related mark duplicate", "d": "2/2015"}, {"body": "yes agree solving problem allowing called thanks", "d": "2/2015"}, {"body": "case makes sense suppose someone attaches onchange listener root document hotkey navigation whatever would easy developer create form toplevel component forget attach onchange handler using components may even aware ancestor attached change handler also example form immediate parent formatting code might lot less obvious event handled reasons warning makes sense dev warning fatal easy workaround attach noop change handler documents example warning still useful even change event handled parent easy workaround also helps give developer nice place document going close desiredexpected behavior", "d": "2/2015"}, {"body": "makes sense thanks suggesting workaround really big form warnings drowning real warnings", "d": "2/2015"}, {"body": "zpao never really liked way turned focus mounted decent way least also already manually focused elsewhere nice kind tricky ignore browsers nt support could make something smart nt focus focus already set either perhaps nt reusing far supported behaves would expect page load browsers good yeah makes sense add markup serverrendering currently ca nt add markup selectively must remove markup reusing must rendered markup clientside seems solve need something like think make server clientrendering detectable reusing incur additional render transitions server clientstate allowing properties removed etc something seems creeping elsewhere able tell server clientrendering apart able generate different markup two", "d": "2/2015"}, {"body": "must rendered markup clientside issue using rendering client side", "d": "2/2015"}, {"body": "jsfb decided use every browser unique interpretation work literally browsers differently overloading rendering markup time seems like bad idea", "d": "2/2015"}, {"body": "ok probably going get rid tag whitelist eventually anyway would sending autofocus dom behavior autofocus browserdependent user beware maybe something clean behavior make consistent entirely clear though done easilywell seems reasonable either way think assumption autofocus ca nt used clientside nt taken givenassumption going forward correct behavior see would make autofocus work consistently possible environments ie isomorphic", "d": "2/2015"}, {"body": "maybe something clean behavior make consistent entirely clear though done easilywell seems reasonable problem iirc ff autofocuses pageload chrome autofocuses initial element creation ie autofocuses every time element becomes visible ios autofocus etc something like memory fuzzy total mess literally useless anything pageload targetting specific browser overloading normalized behavior ok probably going get rid tag whitelist eventually anyway know talked ca nt see happening practically translation attribute property arbitrary would handle boolean attributes avoid garbage ending markup attributes really forwarded asis react dom needs good safe abstraction removing whitelist going opposite direction regardless enticing know", "d": "2/2015"}, {"body": "second would huge boon performance using react clojurescript", "d": "2/2015"}, {"body": "yes supporting map allow many possibilities cursors etc sounds good", "d": "2/2015"}, {"body": "actually quite good idea would love see react without clojurescript offers considerably improved styles working react environment", "d": "2/2015"}, {"body": "suppose main thing blocking keyref passed like props useable syntaxapi allow adding jsx would pretty straight forward xml createelement variadic problem potential solutions meta object key ref js breaking change reactcreateelement tag map childrenalwaysasanarray metaorundefined reactcreateelement tag props map key ref childrenalwaysasanarray add another function makes explicit react treat second argument opaque data structure metadata separate tag map metaornull children generic react agnostic array see unsure feasible performance tag map childrenalwaysasanarray metaorundefined related consider using jsonml notation reactelement", "d": "2/2015"}, {"body": "oh nt already", "d": "2/2015"}, {"body": "yesssss", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "actually verified using objects props exactly objects intended seems set known keys used maps way higher memperf overhead objects props would assume ps also would access specific prop universal way possible afaik", "d": "2/2015"}, {"body": "syranide case using immutablejs turn component state immutable maprecord would like able props order api object far perf goes way make props immutable along state would allow us effectively perform equality checks shouldcomponentupdate doubt slightly higher memperf cost immutable maps would ever much issue stands check state equality immediately still form shallow equals comparison props object slower also robust", "d": "2/2015"}, {"body": "syranide many well known old tricks supporting hash map interface incurring small overheads common approach encode small maps typical many programs including react arrays", "d": "2/2015"}, {"body": "far perf goes way make props immutable along state would allow us effectively perform equality checks shouldcomponentupdate dmhood objects immutable immutability enough get away simple equality test nt know would even go universally reusing nonmutated props renders many well known old tricks supporting hash map interface incurring small overheads common approach encode small maps typical many programs including react arrays swannodette certainly making faster nt make fast object hidden class cheaper instantiate use less allocated memory faster access object seems like obviously correct ds props state ask maps nt replaced objects replaced objectsasmaps anyway assume cjs sees differently might make sense afaik nt make sense regular react would even come big cost", "d": "2/2015"}, {"body": "syranide explain big cost", "d": "2/2015"}, {"body": "skrat vs ca nt also memory perf may less measurable", "d": "2/2015"}, {"body": "syranide allocation access costs supporting map interface almost entirely userland huge bottleneck removes object iteration cost react eats everywhere reconciliation going faster iterating object checks iterating array never seen former outperform later couple memoization story provides suspect immutablejs map props based programs kick regular react ones ass", "d": "2/2015"}, {"body": "swannodette huge bottleneck removes object iteration cost react eats everywhere reconciliation object iteration slow afaik current relatively costly really problem soon drop safe proceed assumption environment worth supporting breaks object prototype would say also could also provide abstraction returns object list keys thus avoid check without resort overheads related maps nt include overhead actually dynamically creating accessing underlying array structure apis nt designed standpoint current performance characteristics ask couple memoization story provides suspect immutablejs map props based programs kick regular react ones ass would realistically perform universal fast memoization props perhaps missing something ca nt see would accomplish also memoization work equally well objects maps nt favor one", "d": "2/2015"}, {"body": "syranide skrat thispropsfoo vs thispropsget foo ca nt also memory perf may less measurable ca nt seems like could change createelement function accept constructor collection like immutable map could smart building right type props object cc brigand suggestions think majority cases perf difference going negligible really would help us turning immutablejs clojurescript currently program around props object fit whatever paradigm choose dmhood objects immutable immutability enough get away simple equality test making immutable give us equality test adding map interface allow us easily use libraries immutablejsclojurescriptetc bring along features need nt know would even go universally reusing nonmutated props renders sure mean elaborate", "d": "2/2015"}, {"body": "nt know would even go universally reusing nonmutated props renders syranide readable way requires compile time transforms nonchanging props js rcc render return rce comp foo bar var foo bar rcc render return rce comp already due keyref props object react allocates new object copies properties anyway think anyone confirm could smart building right type props object dmhood nt mean could mix normal props collection object automatically converting eg map object infeasible performance impossible keys nt stringsymbol would also lose wrappercursor passing good main requirement feature would react treats props opaque nt attempt inspectmodify passes around needs go see people talk equality comparison immutable data structures clear ca nt determine contents equal using wo nt give false positives false negatives common actually use determine inequality object contents js would make constructor need list instances memory leak compare contents tobecreated object objects type ie feasible context shouldcomponentupdate nt cause return false incorrectly need mindful reducing false negatives shouldcomponentupdate use proptypes could also create tooling generating shouldcomponentupdate based proptypes getinitialstate plain comparisons rather loop runtime object properties sure someone eventually post link find time one prop points immutable object state one key pointing immutable object basically immutable state props issue saving propsstate object allocation little typing vs", "d": "2/2015"}, {"body": "need wrap jsx translate html elements contexts translate react classes", "d": "2/2015"}, {"body": "thanks lot wasting much time silly mistake", "d": "2/2015"}, {"body": "yes", "d": "2/2015"}, {"body": "zpao example syntax please", "d": "2/2015"}, {"body": "syntax classes nt affect", "d": "2/2015"}, {"body": "could react know context use event handler attached dom component react could use context calling callback probably wanted composite instance nt directly tied element returning", "d": "2/2015"}, {"body": "hm thought native event handlers attached node handlers declare within method stored kind internal event storage component mounting time noticed react stores component instance inside object possible store proper bound handlers event storage well find unmounting", "d": "2/2015"}, {"body": "would want bind context button would call mention already get access button", "d": "2/2015"}, {"body": "would want bind context button please read description issue binding event handlers component instance htmlnode", "d": "2/2015"}, {"body": "sorry think get answer thread yes would solve issue although nt think suggestion works function definitions imported instance class method applied already ca nt class syntax without using hacks workarounds issue call becomes completely lost context class instance since nt access context ca nt bind functions way counteract would use pass argument like arrayprototypeforeach arrayprototypemap nt different writing still really ugly jsx suggestion would writing nt deal ugliness", "d": "2/2015"}, {"body": "one prefer react get way let bind functions however want auto binding weird non idiomatic javascript presumes much especially give performance concerns bind admittedly proper class behavior language would nt want react taking liberties like outside createclass", "d": "2/2015"}, {"body": "sorry yet third posting code managed achieve autobinding works overriding prototype functions bound functions take back suggestion work js class componentbase constructor objectgetownpropertynames thisconstructorprototype foreach function func componentbasenoautobindfuncsincludes func amp amp typeof func function func func bind setstate state consolelog state componentbasenoautobindfuncs constructor render class component extends componentbase onclick thissetstate items test var x new component var xonclick", "d": "2/2015"}, {"body": "admittedly proper class behavior language would nt want react taking liberties like outside createclass", "d": "2/2015"}, {"body": "unfortunately would nt help still need walk tree autobind hotpatched methods seems still somehow hitting shouldcomponentupdate application nt quite tracked wherehow case specifically checked put reproducible example take look", "d": "2/2015"}, {"body": "also use something akin om state completely outside react single jsbased atom everything always rerendered top pure functional way want able hot swap user language retranslate react app target locale without refresh whole html page use reactintl uses context would ok recursive forceupdate top component locale change related", "d": "2/2015"}, {"body": "note tested unmount remount toplevel node updated context see unmount remount node event loop tick visually looks like recursive forceupdate component unmounted simply rerendered fresh vdom guess seems behavior constant unmountingremounting event loop also appear randomly settimeout introduced", "d": "2/2015"}, {"body": "root issue build tool browserify dependency browserpack dependency umd templatejs checks window global self send pr fall back last resort recommend using instead often used determine script run browser", "d": "2/2015"}, {"body": "thanks hint filed another issue", "d": "2/2015"}, {"body": "fyi issue fixed umd meanwhile found another incompatibility react nashorn available nashorn instead nashorn defines global function using simple workaround get react example working jvm js var global var console consoledebug print consolewarn print consolelog print dunno fixes possible issues found far", "d": "2/2015"}, {"body": "docs say require console polyfill browsers engines nt support nt sound like anything else need closing", "d": "2/2015"}, {"body": "thanks pointing", "d": "2/2015"}, {"body": "since artifact using jstransform esprima filed issue elsewhere pick changes tahnks filing", "d": "2/2015"}, {"body": "way get around defining mixins functions component decide naming things js var makestoremixin function name store var makestate function data var name data return var mixin js var view reactcreateclass mixins makestoremixin foo foostore makestoremixin bar barstore render function assuming foostore barstore getstate return arrays return thisstatefoolength thisstatebarlength", "d": "2/2015"}, {"body": "cool thanks definitely keep mind marty author suggested simpler way around framework may end applying", "d": "2/2015"}, {"body": "hmm since actually parse error file issue nothing react", "d": "2/2015"}, {"body": "yes bad sorry", "d": "2/2015"}, {"body": "hmm looks like error tests use work fine display duplicate tags devtools could bug devtools plugin", "d": "2/2015"}, {"body": "cc sebmarkbage think might devtools issue new since", "d": "2/2015"}, {"body": "wrapped react composite devtools exposes instances sort weird artifact bug think deduped make sure since devtools broken atm", "d": "2/2015"}, {"body": "think content behavior closing", "d": "2/2015"}, {"body": "fixed yes feb pm ben alpert notifications githubcom wrote think content behavior closing reply email directly view github", "d": "2/2015"}, {"body": "lot stuff audiovideo changes due user interaction probably need real plan make something works", "d": "2/2015"}, {"body": "posterity attribute affected user interaction agree might make sense make properties controllable always pose problem serverrendering probably something react provide outofthebox left party components instead", "d": "2/2015"}, {"body": "pretty sure would require huge rewrite minimal gain already caching output serving cdn get much better results", "d": "2/2015"}, {"body": "yea would pain nt want write completely streaming markup browser definitely thing people serverside rendering story nt great might turn realistic way react architected somebody wants investigate interested hearing goes", "d": "2/2015"}, {"body": "already caching output serving cdn get much better results unfortunately already using caches hitting cdn pretty much everything however views much variation per country screen size estimating screen sizes based ua session server side userspecific information benefit caching would interesting see experiments least even never made core", "d": "2/2015"}, {"body": "jussikalliokoski zpao quite simple might future", "d": "2/2015"}, {"body": "syranide yea thinking pr even big assumption flushed nt worked streaming markup nt know might change though might actually matter much", "d": "2/2015"}, {"body": "zpao well built like replace something internal voila", "d": "2/2015"}, {"body": "made something based syranide try quick benchmark fed callback application mbp first landing view pushed downstream within lt whereas rendering whole document would flushed downstream", "d": "2/2015"}, {"body": "seems like would great rendertostring rendertostaticmarkup", "d": "2/2015"}, {"body": "way make comment jsx javascript comment otherwise would way jsx make difference text comments", "d": "2/2015"}, {"body": "see configurable parsing options probably never need text", "d": "2/2015"}, {"body": "sure maybe address issue", "d": "2/2015"}, {"body": "going close let discussions go repo", "d": "2/2015"}, {"body": "always equivalent aside potential static transforms type checkers fntostring probably typo", "d": "2/2015"}, {"body": "may reason looks unnecessary feel free get rid", "d": "2/2015"}, {"body": "fix go next docs push thanks", "d": "2/2015"}, {"body": "controlled component gets value props event calls function within component usually means alter props guess using solve problem hope helps otherwise please give information usually best way make minimal repo case jsfiddle", "d": "2/2015"}, {"body": "read docs controlled components tried using nt seem fix issue fiddle", "d": "2/2015"}, {"body": "thanks fiddle made changes main fix remove event handler maybe one devs explain breaks", "d": "2/2015"}, {"body": "really interesting find cody thanks help", "d": "2/2015"}, {"body": "actually use event checkboxes attempt normalize change handling actually makes browser visually update even actually toggling may actually want use instead depending trying achieve minimal example duplicating happening pure js fun fact putting toggle make work browser acts like nt know", "d": "2/2015"}, {"body": "interesting zpao thanks insight good know checkboxes actually fires click event documented anywhere", "d": "2/2015"}, {"body": "implementation detail nt worry sometimes becomes slightly relevant", "d": "2/2015"}, {"body": "sounds good thanks help", "d": "2/2015"}, {"body": "yep vsiao right nt updated docs yet approach final", "d": "2/2015"}, {"body": "far mixins made reactmixin based nonreactspecific smartmixin library far usefulness classes seems aiming less react specificness better worse", "d": "2/2015"}, {"body": "yeah ima blame previous comment ignorance obviously read post properly looks great", "d": "2/2015"}, {"body": "syranide think definitely transition period everything fits place neatly esx catches think vision behind current direction sound come instead using vendor specific reactcreateclass vendor specific behaviors features interop libraries use native classes native classes drawbacks compatibility classes transprilers code mangling intermediary layers js var react require react objectassign combination objectassign objectcreate first paramter etc compose different objects vary depending needs merge function popular library also suffice var merge require somemergefunction var hellomessage function reactcomponentapply arguments hellomessageprototype merge reactcomponentprototype render function return hello thispropsname nt need brigand library either example vanilla javascript js var react require react var merge require somemergefunction var somemixin require mixinssome var foo function reactcomponentapply arguments fooprototype merge reactcomponentprototype somemixin render function return original reactmixin example reference gaearon change subtle easy misinterpret react drank class koolaid gon na use inheritance composition syranide words react moving direction away unnecessary forced opinions library bloat react focus best future implementation everything else community provide official addons absolutely necessary everyone different opinion right way everyone freedom choose sorry ca nt help feel trying forcefully push sake pretext good intentions benefit whatsoever moment anything integration separate module way round nt deal nonsense oh mangle entire codebase though wonderful codetononsense default react addons turning case move stand criticism pushing feature useless removes useful functionality even mixincomposition support even considered mangles syntax raw interface nt mean interface really dumb sake less lines code serving people toying based discussion elsewhere seems general move simply cater everyone else third class citizen best claiming nt seem line actually eg moving direction away unnecessary forced opinions classes much extremely forced opinionated change", "d": "2/2015"}, {"body": "native classes drawbacks compatibility classes transprilers code mangling intermediary layers wait saying nt work react almost certainly tried something similar work", "d": "2/2015"}, {"body": "serving people toying es opposite useful people using even js matter clojurescript adepts find useful om nt jump hoops custom initialization cleaner fp api also makes react easier consume typescript coffeescript nt get focusing nothing change making optional instead forcing upon users change better long term nt hurt short term problem", "d": "2/2015"}, {"body": "srcspider feel like misunderstanding use library native class implementation like nt see problem nt like classes nt use syntax sugar really anyway keep using prefer", "d": "2/2015"}, {"body": "nt need brigand library either example vanilla javascript srcspider long somemergefunction merges functions ensuring called handles left operand usually prototype nonenumerable properties case class methods days ago still merging correctly extra errors nice imo required", "d": "2/2015"}, {"body": "thanks feedback good know community thinking people love classes others nt like much fortunately react lets choose syntax like use syranide brigand gaearon mentioned change makes react classes less reactspecific makes interoperable libraries even languagesdialects also reduces learning curve since javascript programmers soon familiar classes wo nt need learn special semantics magical reactcreateclass method said use mixins internally abundantly aware usefulness may see mixins return classes others mentioned free continue using reactcreateclass prefer style going close issue since technically bug", "d": "2/2015"}, {"body": "hi syranide like take look link working check please", "d": "2/2015"}, {"body": "javpaw fixed hour really change run code react build see", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "jsfb sebmarkbage spicyj plan fix warning expose something else", "d": "2/2015"}, {"body": "think warning still valid even though owner idea ref put unique handle component kind lasso pull real instance gets mounted tree overriding breaking assumptions caller workaround simply remove ref original specification way clear intended ref rely missing feature react add new api way preserve ref adding fields ok clone element without destroying ref could make possible nt try override ref field", "d": "2/2015"}, {"body": "nt see one handle component instance nt solution right missing feature really frustrating times expect ref property coming parent visible inside component", "d": "2/2015"}, {"body": "myagoo yeah one reasons looking new types refs get one handle discussion also see lets change props preserving ref closing", "d": "2/2015"}, {"body": "child handle pass calling guess might actually work", "d": "2/2015"}, {"body": "yup children nt state form component always single source truth", "d": "2/2015"}, {"body": "sounds good thanks", "d": "2/2015"}, {"body": "find alternative works close", "d": "2/2015"}, {"body": "yea work around proposed jaredly quite decent going close one", "d": "2/2015"}, {"body": "yea really intended implemented", "d": "2/2015"}, {"body": "seem seeing bug well", "d": "2/2015"}, {"body": "looks like fixed master already add test nt regress", "d": "2/2015"}, {"body": "sedovsek interesting idea would rabbit hole information time reported dig deeper good work", "d": "2/2015"}, {"body": "pr fine next time generate website thanks", "d": "2/2015"}, {"body": "zpao pleasure never learned much trivial bug", "d": "2/2015"}, {"body": "really react issue going close lots discussion babel issue", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "implement childrentoarray", "d": "2/2015"}, {"body": "closed", "d": "2/2015"}, {"body": "done tooling jsonml past considered jsonml tagname properties children special casing text nodes like second library bunch form helpers completely framework agnostic implemented jsonml creating elements amp html strings zero diffing patching since moved away jsonml reasons got frustrated lisp problem lot trailing braces prefer hyperscript something like small thing helps large performance penalty converting jsonml data structure tree virtual nodes basically full deep copy need kind optimized tree patch diff algorithm efficient jsonml really intermediate format", "d": "2/2015"}, {"body": "syranide solves first problem arguing whether jsonml looks nicer btw actually think fine like raynos said unless lisp guy using paredit might bit noisy always make jsx compile worst case raynos good know exist mean perf cost immutable collections mitigate", "d": "2/2015"}, {"body": "chenglou still nice way would nt like nt jsonml point seems weird make jsonml target make jsonml compile best target instead like jsx", "d": "2/2015"}, {"body": "would also align us spec almost like standard heart", "d": "2/2015"}, {"body": "syranide yeah clojurescript people", "d": "2/2015"}, {"body": "chenglou internal representation virtual dom react amp virtualdom jsonml means convert data structures includes full deep copy basically virtualdom avoid helper looks like jsonml returns instance internal data structure used virtualdom reduces amount performance overhead phase", "d": "2/2015"}, {"body": "recently ran problem well found workaround worked nb must defined non pseudoclass selector personally never cared defining pattern likely common enough might cause problems since nt actually set pointer element normal state ios nt detect clickable", "d": "2/2015"}, {"body": "dupe essentially fixed pr", "d": "2/2015"}, {"body": "would also always keep mind web components everywhere might strong assumption near future features might need rethinked current assumption react components everywhere instance error propagation completion propagation might doable neither desirable web components black boxes thing cents", "d": "2/2015"}, {"body": "resolution current solution turn comfortable keeping way different upstream", "d": "2/2015"}, {"body": "cc sebmarkbage", "d": "2/2015"}, {"body": "jsx spec nt make claims scoping rules variables including semantic meaning including scope expressions contained attributes obviously limitation ca nt reason things like unused variables etc also feature want implement semantic meaning move forward full semantic spec ready since different implementations different requirements also actively changing semantics tag html well might future concept xml like use create elements went lowercase convention react added compromise allow subset valid identifiers scope however nt make extend extends ast therefore adding within nt enough make seamlessly work still reason around might well special case also remember nt reserved keyword already issues even though reserved strict mode seems strange special cased already talk using reserved keywords include reflective syntax sugar like therefore nt think makes sense special case unless also want every possible reserved partially reserved identifierexpression", "d": "2/2015"}, {"body": "instead used wrapper braces could make full free put whatever ofc problem closing tags looking weird", "d": "2/2015"}, {"body": "sebmarkbage think confusing output like regular behave like one extremely confusing surprising reactjsx developer see behave way", "d": "2/2015"}, {"body": "sebmck issue still bug however bug transpilers jsx spec parsers like also bug jstransform matter", "d": "2/2015"}, {"body": "sebmarkbage ah thanks explanation completely agree nt handled jsx spec happy adapt whatever changes deem necessary", "d": "2/2015"}, {"body": "closing nt sound like react issue post full code sample maybe someone help debug problem stack overflow probably better place codelevel debugging questions", "d": "2/2015"}, {"body": "pete hunt already reactclassset module npm believe well", "d": "2/2015"}, {"body": "jquense according readme reactclassset deprecated favor mentioned library", "d": "2/2015"}, {"body": "pretty much except negligible differences deprecated former latter active maintainer", "d": "2/2015"}, {"body": "code sample show us jsbincom putting example code documentation appears work fine unable reproduce check see rerendering component quickly seen double renders cause problems transitions", "d": "2/2015"}, {"body": "sort thing parentbased context work", "d": "2/2015"}, {"body": "confused want allow using mixin want error fire instead react admittedly somewhatconfusing one", "d": "2/2015"}, {"body": "confirm elements inside svgs safari firefox seems work okay though", "d": "2/2015"}, {"body": "worth noting using case utilize attribute svgs", "d": "2/2015"}, {"body": "mixin using change key parent every time props change force fully rerender modify posting first version involved keeping key fell apparent component actually used state dangerouslysetinnerhtmlinnerhtml dom node create new one var function var nextprops thisprops var nextstate thisstate var lastprops var laststate", "d": "2/2015"}, {"body": "pretty sure much simpler workaround", "d": "2/2015"}, {"body": "great included reacttestutils worked attribute attributes trying write test verifies component creates attribute seems like oneliner", "d": "2/2015"}, {"body": "see helpers easy implement outside react always add code though", "d": "2/2015"}, {"body": "true spec nt guarantee virtually browsers engines planning leave asis alternate solutions manual bookkeeping tend significantly slower", "d": "2/2015"}, {"body": "closing favor guess", "d": "2/2015"}, {"body": "er", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "probably switch warning module use consoleerror instead gives stack trace browsers think", "d": "2/2015"}, {"body": "yeah enterleave special bubbling nt capture phase update docs", "d": "2/2015"}, {"body": "yeah gone except gone merges nt likely name conflict anyway", "d": "2/2015"}, {"body": "wonderful thanks great work folks", "d": "2/2015"}, {"body": "sebmarkbage defined nt fall warn one release drop next ps well defined warning nt actually return function", "d": "2/2015"}, {"body": "syranide nt exist previously releases exposing explicitly prevent new code relying", "d": "2/2015"}, {"body": "sebmarkbage makes sense problem see fail arbitrarily depending whether component moved away realize fairly rare circumstances bite ie component affected consumer component well", "d": "2/2015"}, {"body": "syranide also moves responsibility instance global escape hatch", "d": "2/2015"}, {"body": "sebmarkbage yeah definitely saying breaks first warn break approach react seems generally take also getting updated component could mean app instantly breaks telling use rather warning also working personally nt mind already fixed callsites saying", "d": "2/2015"}, {"body": "scenario nt break also adding new component think fine", "d": "2/2015"}, {"body": "syranide maintain react components upgrade classes bump major version probably good thing noted release announcement", "d": "2/2015"}, {"body": "yeah anything going warn add new properties state getinitialstate nt return", "d": "2/2015"}, {"body": "happened", "d": "2/2015"}, {"body": "spicyj ty", "d": "2/2015"}, {"body": "think favor though obvious order update methods called mixins interdependent", "d": "2/2015"}, {"body": "spicyj main issue giving control back developer interdependent mixins left developer order mixins given like reverse order see example top", "d": "2/2015"}, {"body": "sorry see favor rickbeerendonk proposal effectively reverse order var mixina mixins var mixinb mixins var component reactcreateclass mixins mixina mixinb depthfirst traversal mixins mixinacomponentdidmount mixinbcomponentdidmount componentcomponentdidmount reverse traversal componentcomponentdidmount mixinbcomponentwillunmount mixinacomponentwillunmount intent lifecycle methods mirror one another resources allocated state mutated former reversed latter mixins assume particular state mounted able assume state unmounting conceptually matching curly braces html tags etc", "d": "2/2015"}, {"body": "told reliable source componentwillmount render componentdidmount happen together chance callback returning somewhere middle confused ismounted issue refers setstate unmounted case", "d": "2/2015"}, {"body": "nt want pile think additional issue open separate issue maybe ismounted meant used guard unsafe setstate componentwillunmount ismounted true safe call setstate would seem issue regardless whether calling setstate componentwillunmount whatever guard setstate case return status set state componentwillunmount", "d": "2/2015"}, {"body": "closing due inactivity discuss still issue", "d": "2/2015"}, {"body": "second issue fixed batch initial render sure first probably still problem", "d": "2/2015"}, {"body": "make minimal repro case like jsfiddle obvious issue hard set run example ca nt test", "d": "2/2015"}, {"body": "looking issues contribute seems one already fixed", "d": "2/2015"}, {"body": "yea let call fixed couple passes done clean", "d": "2/2015"}, {"body": "andrewrota use custom elementsweb components react tried getting error created stackoverflow thread", "d": "2/2015"}, {"body": "gnestor need greater believe", "d": "2/2015"}, {"body": "andrewrota ok thanks", "d": "2/2015"}, {"body": "landed closing", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "also ca nt repro chrome", "d": "2/2015"}, {"body": "yuck due autobinding guess rc gives error", "d": "2/2015"}, {"body": "would really useful third party transition libraries example", "d": "2/2015"}, {"body": "agree would nice able easily assert props passed sub component", "d": "2/2015"}, {"body": "closing repro case please post", "d": "2/2015"}, {"body": "giving whole jsx code script tag html page order declaration components could cause issue inbuilt compiler sees component later declared code throw error however plain terms means component missing", "d": "2/2015"}, {"body": "yeah moving static properties going close", "d": "2/2015"}, {"body": "reopened latest announcement given unfortunatelyfortunately already made necessary changes make enumerable react version used class header export default header reactcreateclass headerprototype code generates prototype object given methods properties fails properties enumerable hence react nt find method prototype", "d": "2/2015"}, {"body": "sebmarkbage thoughts", "d": "2/2015"}, {"body": "fwiw pass option babel guess loose mode generate classes enumerable members", "d": "2/2015"}, {"body": "touchesir thanks temporary way make react work curious find anything done front make react work nonenumerable class methods future release", "d": "2/2015"}, {"body": "problem enumerability ca nt polyfilled old ie still support detection definition want support nt want different react behaviors depending browser use ca nt depend detecting enumerability otherwise someone may accidentally rely working yet break nobody properly tests days luckily first class support classes", "d": "2/2015"}, {"body": "sebmarkbage thanks dependency problems reactrouter reactasync using react trying figure solution", "d": "2/2015"}, {"body": "sounds like dupe", "d": "2/2015"}, {"body": "proposed alternative custombutton wrapper good general nt want deep merges props could look like anything necessarily plain js objects automatically merged closing", "d": "2/2015"}, {"body": "presume http compression would work pretty well type duplication", "d": "2/2015"}, {"body": "might make warnings louder general moving towards warnings prod build skip unnecessary checks closing", "d": "2/2015"}, {"body": "spicyj could keep open change request warning", "d": "2/2015"}, {"body": "sorry actually misunderstood thought description already warning actually checked error added time issue filed actually fixed", "d": "2/2015"}, {"body": "okay think pull request fix issue correct logic one preferred pull request get heads similar fix problem components", "d": "2/2015"}, {"body": "still think react checking presence key value want component uncontrolled nt pass value prop controlled uncontrolled removes possible confusion since longer need know possible values know textarea controlled", "d": "2/2015"}, {"body": "nt disagree think line thinking bigger change would also affect documentation suggest go pull request overall picture think right clearer distinction controlleduncontrolled behavior avoids edge cases like", "d": "2/2015"}, {"body": "rymohr makes sense way breaks props work feel like something inherently wrong controlled component well nt authority pretty sure js defines meaning literally undefined treating anything else breaks expectations", "d": "2/2015"}, {"body": "true developer intention falling pit success guys like say happens values nobody passes prop component want uncontrolled use switching keypresence check would simplify underlying code make controlled vs uncontrolled components easier explain easy misinterpret current documentation set controlled component examples set happens set", "d": "2/2015"}, {"body": "believe input misbehaving textarea syranide also revealing nobody complained current behavior behavior people find surprising regardless technically misbehaving react expectations", "d": "2/2015"}, {"body": "cc yungsters know may remember early thoughts around controlled components sold returning right call general whole thing bit grey area consistent regardless route take", "d": "2/2015"}, {"body": "zpao returning makes sense would equivalent treating separate modescomponents ie resets switch convinced first p becomes quite obvious think react inherently kind stateless certain set props always get output rendering sometimes rendering test last value without user interaction depending whether input previously controlled makes sense transition controlleduncontrolled really makes practical sense different nothing else really makes sense context react", "d": "2/2015"}, {"body": "user typed something leave value dom subsequent renders could think react stateless dom nt respect uncontrolled components treat changing prop like treated user manually changing value would nt return saying right thing precedent", "d": "2/2015"}, {"body": "zpao yeah ofc improved post bit posted comes fact transitioning controlled uncontrolled nt really make sense pick one stick supposed use controlled readonly state uncontrolled input controlled uncontrolled transition really transition reset ie forgot give proper key edit usecase transitioning controlled uncontrolled could make sense keep value ca nt think", "d": "2/2015"}, {"body": "also easy reproduce behavior value sticking simply updating appropriately always keeps last value way get back manually detect transition update value dom node", "d": "2/2015"}, {"body": "zpao hmm actually let rephrase like easy let consider instead quite convinced correct answer step bar ie reset foo would looking old irrelevant value whether react rerendered inbetween consider rafbatching whatever irrelevant visual state shown user", "d": "2/2015"}, {"body": "zpao agree approach consistent consistent approach would one mentioned rymohr basically one simple rule imagine controlled component nonnull value gets changed interpretations component becomes uncontrolled current behavior intuitive otherwise issue page would nt exist leads discussion zpao syranide right go back keep previous content would consistent rymohr suggestion component stays controlled null value means clear ambiguities enables intuitive clearing controlled component simply set value feel almost musthave behavior otherwise would clear component reasoning behind current definitionbehavior nt good reasons besides way defined would probably better change definition", "d": "2/2015"}, {"body": "martinstein still transitions controlled uncontrolled inputs regardless whether considered controlled edit think turning controlled component rather counterintuitive solution make uncontrolled controlled inputs separate components using magic propertiesvalues also note easily create wrapper enable behavior prefer", "d": "2/2015"}, {"body": "syranide right still transitions two types would fewer ambiguitiesinconsistencies explain find counterintuitive feel behavior intuitive would nt need extra page explaining phenomenon ruleset would simpler currently rule simpler rule would generally simpler approach better intuitive one right", "d": "2/2015"}, {"body": "martinstein much find controlled counterintuitive breaks basic expectations value means counterintuitive means defaultno value ask would expect hold like would argue hold extension also commonly used optimize hidden classes generally expected behavior specified unless merging objects", "d": "2/2015"}, {"body": "nt think breaks basic expectations people would expect means exactly input empty value supposed mean uncontrolled input specify value sorry repetition intuitive extra page docs would necessary language perspective javascript specifically treats different defined expectation evaluated definitely hold agree sometimes used shortcut optimize code case makes code complicated pullrequest would simpler without special treatment", "d": "2/2015"}, {"body": "think collectively beaten one death point new eyes core team take look give fresh take", "d": "2/2015"}, {"body": "nt think setting reset dom behavior desired composing component continue setting otherwise setting uncontrolled state leave dom asis letting component authors rely conditionally setting order reset pretty confusing would want anyone relying behavior even consistent whether control dom allow mean component value controlled value may argue empty string ambiguity make think control prop value besides reasonable component authors want controlled value empty string set fix", "d": "2/2015"}, {"body": "yungsters take example copied think thing make sense get latest value set becoming uncontrolled equivalent reset example consider scenario obvious let consider instead new state rendered due batching would argue quite strongly value still bar whether component actually performed intermediate rerenders irrelevant especially affected batching strategy reset becoming uncontrolled always consistent said however nt think going controlled uncontrolled something best solution would nt possible ask simply make best one makes sense context react meant work deterministic way keeping last value simply nt", "d": "2/2015"}, {"body": "think simple presentation editor allows edit text slide people going model slides like form controlled bound move slide slide still see old text letting nuance way react handles controlled components leak data model nt feel right nt think issues mention actually problem especially since control options select treated wanted anything else need pass string eg", "d": "2/2015"}, {"body": "rymohr form controlled bound thisstateslidetext move slide slide still see old text huh controlled definition always shows correct value", "d": "2/2015"}, {"body": "syranide prevent components going controlled uncontrolled makes sense wanted could use something like though ca nt think good reason", "d": "2/2015"}, {"body": "rymohr consumer responsible translating configuration text empty string rendering react component", "d": "2/2015"}, {"body": "syranide gt huh controlled definition always shows correct value nt whole point discussion arguing defines controlled see first comment thread", "d": "2/2015"}, {"body": "syranide supplied case would argue input value empty", "d": "2/2015"}, {"body": "yungsters logic also developer responsibility sanitize input still point aligning developer expectations intentions preventing shooting foot argument guys would moot simply said passing prop value creates controlled component", "d": "2/2015"}, {"body": "yungsters nt think anything ultimately right wrong usecase really makes sense see two options ambiguity keep last value even though may make intuitive sense nt see would ever want behavior final value depends batching strategy whether operations batched regardless controlled uncontrolled transition make sense relation two otherwise key properly would argue case always seeing old value consider type uncontrolled nt relying stateful dom ideosyncrasies value input would actually reproduced ways well feel free replace change handler highlight issue fail see ever makes practical sense saying usecase nt exist nt see seems arbitrary sense condones controlled uncontrolled transitions legitimate sure agree context react batching strategies etc etc reset default value seeing two different values reason simply nature uncontrolled components importantly neither inherently wrong opinion value shown simply subject inherent shortcomings uncontrolled components consider example type resets becomes empty nt ask would want showing deterministic state also take alternative example type resets becomes would expect nt ask would want showing deterministic state include fact resetting like also near identical proper keying except maintaining focus seems like another benefical sideeffect treating controlled separate incompatible uncontrolled still maintains practically reliable behavior obvious choice things considered ultimately academic perspective would nt mind controlled want uncontrolled behavior use wrapper generic reasonable agree defacto interface controlled components", "d": "2/2015"}, {"body": "rymohr describing used work value provided including would use default value however pain building components sometimes wanted default value times wanted specific value example", "d": "2/2015"}, {"body": "treating controlled separate incompatible uncontrolled hmm actually like lot zpao think willing go reason resetting values changing controlled uncontrolled", "d": "2/2015"}, {"body": "yungsters think misunderstood underscore established accepted precedent merging default values defaults always overwrite undefined values handled way would surprise developers saying passing key developer giving massive hint want component controlled ignoring suggest bring discussion back original issue posted rszewczyk value property textarea changes null undefined non blank value text displayed dom change fiddle captures issue notice behavior different text input talking current behavior lining expected behavior argue textarea holding onto bar correct internal architecture standpoint end user completely counter intuitive reset yes simplify entire controlled vs uncontrolled thing well", "d": "2/2015"}, {"body": "rymohr agree stumbled issue dumbfounded behaves illogically react team behavior totally unexpected please make remain controlled set value peons wondering nt work ghetto fix", "d": "2/2015"}, {"body": "reset yes simplify entire controlled vs uncontrolled thing well kind simplification looking besides resetting mounted value switching inout controlled", "d": "2/2015"}, {"body": "yungsters please reread comments part still unclear", "d": "2/2015"}, {"body": "similar issue attributes well code something like disable state pattern set undefined string instead removing attribute dom element results broken input field similarly tried approach nt work either still attribute removed dom element", "d": "2/2015"}, {"body": "problem attribute removed dom updated", "d": "2/2015"}, {"body": "mainly bad run jsxtransformed files thought without dozen warnings pop could disable warning allows make error code", "d": "2/2015"}, {"body": "quite bit interest see references", "d": "2/2015"}, {"body": "yes gaearon want pass localization data context let user able change language runtime letting components rerender updated translations currencies date formattings far understand seems hard see also", "d": "2/2015"}, {"body": "slorber also adopted custom clearly could get broken stricter middle gaearon says third parameter disappear always rely props however let see issue evolve", "d": "2/2015"}, {"body": "gpbl check seems case want rerender whole app top case context change unmount remount node event loop tick produce flickering effects constantly perfect workaround dealing user language changes", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "plan make onchange consistently fire every change browsers see use maybe behavior looking native onchange event varies widely across browsers even nt anything special react probably want", "d": "2/2015"}, {"body": "closing standard", "d": "2/2015"}, {"body": "closing dupe", "d": "2/2015"}, {"body": "sounds vaguely reasonable think going instead close", "d": "2/2015"}, {"body": "sorry bit late anything closing", "d": "2/2015"}, {"body": "general way statically identify might valid component consider last example function string might valid specific type", "d": "2/2015"}, {"body": "issue unset background image position repeat color attachment clip origin size sure came original list think best course action make sure unset properties supports take shorthand properties kind pain", "d": "2/2015"}, {"body": "issue today problem using browserify instead hope helps", "d": "2/2015"}, {"body": "issue ca nt reliably use dependency injection mechanism eg change batching strategy using components multiple modules instance react dependency even version react", "d": "2/2015"}, {"body": "thanks gaearon", "d": "2/2015"}, {"body": "merged", "d": "2/2015"}, {"body": "createelement nt internal api use arrays vs varargs distinguish child keys believe benchmarked comparable even faster varargs going close", "d": "2/2015"}, {"body": "hey followup issue flux repo nt want us editing flux documentation since flux copy getting updates", "d": "2/2015"}, {"body": "githubfirst months zpao things close issue", "d": "2/2015"}, {"body": "still things improved process perhaps go github otherwise good go", "d": "2/2015"}, {"body": "little history next person investigates since original link longer points meaningful target looks like tagname taken reactdomcomponent put onto wrapper got moved reactdefaultinjection tagname appears wrappers dom elements mimics tagname already exists native dom elements wrappers temporary going away happens users get native dom elements native tagname property semantics since scheduled deletion happen naturally part future commit going close issue", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "would still appreciated looks like referencer issue issue closed without discussed resolution deliberate", "d": "2/2015"}, {"body": "thechrisproject issue still open", "d": "2/2015"}, {"body": "spicyj ah closed sorry fairly new using github read closed state issue transitioned closed", "d": "2/2015"}, {"body": "yep audio video components essentially unsupported react need grab dom node everything manually nt able get anyone care oversight nt look like fixed anytime soon", "d": "2/2015"}, {"body": "contra someone cares enough submit pr surely accepted react team currently focused getting react core stable would say dom fixes community afaik could look time busy elsewhere lately", "d": "2/2015"}, {"body": "worries nt big issue originally thought realized could set listeners componentdidmount remove componentwillunmount keep good work thursday february andreas svensson notifications githubcom wrote contra someone cares enough submit pr surely accepted react team currently focused getting react core stable would say dom fixes community afaik could look time busy elsewhere lately reply email directly view github", "d": "2/2015"}, {"body": "curious decision jasonkuhrt suggestion make override well pointed possible keep suggested solution really desired currently possible override", "d": "2/2015"}, {"body": "react support", "d": "2/2015"}, {"body": "binarykitchen work fine intended", "d": "2/2015"}, {"body": "syranide bad referring react fixeddatatable support yet", "d": "2/2015"}, {"body": "another case ran ui kit placing children inside fixed scrollable container like children must passed array composite class passed must also implement styles avoid breaking adds layer complexity completely understand complex must make change throwing hat support", "d": "2/2015"}, {"body": "jwietelmann natew using react beta building webpack similar use reactparentcontextpatchjs play around parent contexts moment assume break pretty quickly though nt build anything relies make sure require", "d": "2/2015"}, {"body": "jamesknelson thanks hacking week let goes", "d": "2/2015"}, {"body": "dupe", "d": "2/2015"}, {"body": "seems impossible use inline flexbox serverrendered doms already exists could nice similar way use string inline styles", "d": "2/2015"}, {"body": "autoprefixing every style probably outofscope react db autoprefixer especially push towards inline styles react native would nice foundational technologies like flexbox transform autoprefixed react consensus apis unprefixed everyone safari end whipped last night solves problem long remember litter codebase calls love see similar solution builtin react", "d": "2/2015"}, {"body": "appsforartists also handles animation properties seems common problem indeed broken serverside rendering", "d": "2/2015"}, {"body": "nt use react came across issue searching missing familiar react works events using raw dom events managed get reasonable using following js function blurhandler e var relatedtarget erelatedtarget eexplicitoriginaltarget documentactiveelement maybe help someone", "d": "2/2015"}, {"body": "assuming contexts would right super easy solution would need standardized really make work usable throughout", "d": "2/2015"}, {"body": "would cool builtin way parse serverside code jsx clienttargeted bundle bundling time know variety tools job something officiallyrecommended would aid isomorphic app story", "d": "2/2015"}, {"body": "yaycmyk parse serverside code jsx clienttargeted bundle bundling time huh", "d": "2/2015"}, {"body": "nt already reuse existing markup isomorphic apps nt point checksum entirely sure understand motivation components render different markup server side adding branchescodepaths need testedmaintained point isomorphic rendering avoid exactly otherwise implement seo version separately also sites penalized content display users deviates show google entirely convinced good seo story first place intuition nt recommend nt going stop going use global probably behavior third party components participating specific example usecase nt easily handled implementationspecifc global", "d": "2/2015"}, {"body": "jsfb ca nt feature detection serverside hence complex inline styles polyfills impossible serverside also way generate placeholder content apply stylespolyfills clientside mounts transition taking place worked picture imgset polyfill works great impossible make work serverrendering simply done current", "d": "2/2015"}, {"body": "transition taking place perhaps missunderstanding could nt forceupdate page loads update placeholder content perhaps triggered onmount think nt get called serverside still feeling like globaluseragent sufficient vast majority cases would useful specific example piece markup usefuldesirable unworkable serverside saying examples nt exist looking persuasive example", "d": "2/2015"}, {"body": "perhaps missunderstanding could nt forceupdate page loads update placeholder content perhaps triggered onmount think nt get called serverside still lacking way find server clientrendering hmm yes actually work batched could preferable something based context would seamless reacty nt necessity say guess neat thing approach could technically exported globally via would needed would useful specific example piece markup usefuldesirable unworkable serverside anything requires feature detection ie vendor styles polyfills large user agent sniffing generally big nono fragile feature detection work could ultimate approach way would still need backup makes mistake tl dr work great still needs way detect serverrendering", "d": "2/2015"}, {"body": "syranide would nt want ship servertargeted markup client would suggesting would nice officiallysupported holistic approach development isomorphic apps using react", "d": "2/2015"}, {"body": "jsfb oh right lazy imageslistsetc require something like serverrenderable", "d": "2/2015"}, {"body": "would also love workaround seems like wanting use refs transitiongroup children would common requirement", "d": "2/2015"}, {"body": "seems like solved", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "want reference reactnexus example want supported within react essentially rewrite works except builds component tree without actually mounting dom writing string allows traverse component tree fire asynchronous methods tree built issue implementation throws away first tree calls anyway whereas would nice take prerender tree rendermount willing work within core would need pointers think one requirements making globally referenced async would nt cause issues globals might run issues well", "d": "2/2015"}, {"body": "mridgway mistaken global might compat thing go away might wrong", "d": "2/2015"}, {"body": "gaearon yeah sense got withcontext deprecation", "d": "2/2015"}, {"body": "yes exactly want able tell react start managing new named dom events eg api like would make much much simpler hook things like external gesture recognizers etc", "d": "2/2015"}, {"body": "issue seem related changing classes item transitioning simply adding another element within transitioning item changing classes fixes issue", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "causing issues ios", "d": "2/2015"}, {"body": "really issue tommoor discussed might good idea add docs tell users wrap components variable classes", "d": "2/2015"}, {"body": "question workaround", "d": "2/2015"}, {"body": "damianmr also thought problem later discovered fault maybe using might", "d": "2/2015"}, {"body": "nope react shows warning cases", "d": "2/2015"}, {"body": "would nice another way keep fixed width strokes without used meantime", "d": "2/2015"}, {"body": "foreignobject", "d": "2/2015"}, {"body": "referencing pr text baseline attributes", "d": "2/2015"}, {"body": "oh shit need tag disappointed", "d": "2/2015"}, {"body": "resigned using custom component render function returns ugly works", "d": "2/2015"}, {"body": "vote jsx support netbeans", "d": "2/2015"}, {"body": "maybe could use html entities opening curly brace closing nt solve looks like crap problem might work nope looks like works still gets spans", "d": "2/2015"}, {"body": "old topic think js string literals actually valid solution problem also solved putting sheet prop use instead children see", "d": "2/2015"}, {"body": "related facebookjsx", "d": "2/2015"}, {"body": "interested testing react component without rendering dom works fine making assertions triggering events possible somehow render tree react components without ever mounting dom performing assertions triggering synthetic events realize things like could never work given nt using anywhere also please tell silly idea", "d": "2/2015"}, {"body": "exactly coming called shallow testing supported able start using try beta today see details documentation links impl", "d": "2/2015"}, {"body": "looks interesting indeed commenting pr", "d": "2/2015"}, {"body": "believe hit issue two components two different divs nt share common root create components dynamically end ids set similar reproduce outside code", "d": "2/2015"}, {"body": "macqm prerendering perhaps rendering static markup two different places", "d": "2/2015"}, {"body": "syranide nt prerendering tried create component place create element react class different module loaded require browserify class created locally works fine load exact module via browserify work illustration works loading react class via browserify causes issue get different error missed moment changed code looks almost identical", "d": "2/2015"}, {"body": "macqm find reactid mentioned likely due invalid nesting things like", "d": "2/2015"}, {"body": "syranide ooops div nested another div believe caused issue back original reactid error looks like wrong browserify nt seem matter code using create widget class javascript var widget reactcreateclass getinitialstate function return text render function return widget thisstatetext handlechange function e thissetstate text etargetvalue try initialize widget floating window created using ventus library javascript create react component class var component reactcreateelement widget reactrender component windows title contentget dom element floating window soon focus input receive following error indeed newly created element gets assigned reactid", "d": "2/2015"}, {"body": "macqm repro could look assuming external library mucking dom ps nesting divs fine p div inside p etc", "d": "2/2015"}, {"body": "syranide trying reproduce problem noticed loading believe reason ended two instances react app possible need investigate capital react worked browserify using reactify issue thanks help", "d": "2/2015"}, {"body": "macqm common issue nonlinux environments caseinsensitive filesystems bundler nt warn", "d": "2/2015"}, {"body": "encountered message root problem included two independently webpacked bundles one copy react two bundles seemed work miracle get error message unequal nodes consolidating single copy react resolved problem thank macqm tip wonder way catch scenario within react include warning multiple versions react may present would go nicely along useful helpful error descriptors", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "status hard choose losing benefits serverside rendered react remembering customer selected options right workaround solves put extra duplicate selected value top option list cry spicyj", "d": "2/2015"}, {"body": "really wish drawbacks pending state nt issue though desires purely aesthetic edit though additionally would make declaratively accurate name", "d": "2/2015"}, {"body": "maybe terrible idea passed could use destructuring get something similar maybe worse wanted get idea table edit actually works already hardly fantastic think", "d": "2/2015"}, {"body": "wondering subclassing solve mixin extend components need use mixin could extend seems working missing something besides fact mixins already created compatible pattern", "d": "2/2015"}, {"body": "tomethod officially planned", "d": "2/2015"}, {"body": "even without tomethod could built like however think making composition easier higher priority making arbitrary mixins work", "d": "2/2015"}, {"body": "played sebmarkbage example bit nt really like fact super calls become mandatory augmented method also played around brigand looks one reasonable solutions nt like syntax status quo mixinstraits would better fill syntax using something like example scala something like", "d": "2/2015"}, {"body": "scala syntax looks good oo", "d": "2/2015"}, {"body": "also struggling trying animate elements using componentwillenter componentdidenter tweenmax methods nt seem get called reactcsstransitiongroup model nganimate would expecting call methods javascript animation along adding enter leave change classes", "d": "2/2015"}, {"body": "cameronjroe far understand behaviours introduced one next releases react check taking look master branch", "d": "2/2015"}, {"body": "nt notice looks like methods exclusively nt noticed difference", "d": "2/2015"}, {"body": "think warning docs pretty big flaw caught guard would submit pull request sure convention warning bugs react docs belong note markdown block quote convention severe warnings ca nt find examples", "d": "2/2015"}, {"body": "issue causes react based longer lists unusable mobile", "d": "2/2015"}, {"body": "petehunt knowing deprecated options handle", "d": "2/2015"}, {"body": "love somebody could revisit issue real pain use workaround", "d": "2/2015"}, {"body": "related even set content clientside technically even render react able perf hit ca nt think reason would ever care contents clientside ps feel like something dirty happening behind scenes would nt make sense disallow children people want implicit behavior wrapped custom component", "d": "2/2015"}, {"body": "yeah think suggested ignoring contents client would cause checksum issues ssr mistaken rendering string may dirty opinion acceptable kind dirtiness since protects user inherent complexity dealing wonky browser bug guess could argue cdata child happens string html actual dom children outside purview react seems make largely useless without custom component", "d": "2/2015"}, {"body": "matthewwithanm oh right yeah reusing clientside would require special flag internally would use serverrendering rules constructing initial markup", "d": "2/2015"}, {"body": "future searchers workaround wrapped component case set commonjs module relies constant adapt needed javascript const react require reactaddons moduleexports reactcreateclass displayname noscript mixins reactpurerendermixin render processbrowser return else return", "d": "2/2015"}, {"body": "zpao bug actually limited text element say something simple like character escaping intentional since bug involves invisible characters everything go boom well personally fan magical span insertion way react previously whitespace manually inserted actually nice feature since removed need crappy hacks meant everything always exactly intended less harmless html use cases svg text really inserted tags think react disable magic altogheter guess tricky disable magic span insertion happens certain html tags eg span p h cases react strip whitespace wo nt inject anything code work parties people want whitespace properly use html tags people like part nt want ever stick divs everywhere", "d": "2/2015"}, {"body": "noted need set non pseudoclass selector otherwise ios nt register clickable moox would think might able something like css myclickablething cursor pointer myclickablething hover cursor help", "d": "2/2015"}, {"body": "could react handle simply adding element onclick handler user agent ios device really mobile device since cursor nt affect display mobile", "d": "2/2015"}, {"body": "understand click listener attached trick simple workarround specify body class ios ready", "d": "2/2015"}, {"body": "registering handler nt problem problem ios nt think element clickable unless set setting body render whole body clickable ios every single element dom either clickable depending ios handling inherited values child elements setting element seems like reasonable solution probably optin instead default", "d": "2/2015"}, {"body": "original pr fixed reverted causing problems internally fb look bringing back fix good", "d": "2/2015"}, {"body": "getting warning following example potato carrot corn warning helping indicating something wrong surely perfectly acceptable design pattern", "d": "2/2015"}, {"body": "ides like webstorm recognize jsx inside configure ide detects jsx prompt use instead", "d": "2/2015"}, {"body": "finally decided finish work alpha version working need extra works based master branch typescript publish npm soon someone could help testing bit especially visual studio since osx would help thanks", "d": "2/2015"}, {"body": "fdecampredon cool test available time", "d": "2/2015"}, {"body": "cool", "d": "2/2015"}, {"body": "definitely take spin", "d": "2/2015"}, {"body": "congratulations", "d": "2/2015"}, {"body": "fdecampredon thanks continued contributions space wish released reactjs conf definitely would mentioned talk updated tsloader webpack support jsxtypescript using typescriptjsxwebpack may interested", "d": "2/2015"}, {"body": "thanks jbrantly unfortunately much work react conf since company nt use typescript react work topic free time thank tsloader generally use browserify thinking switching webpack since workflow browserify bit painful", "d": "2/2015"}, {"body": "using browserify gulp incremental typescript compilation write would helpful need check tsloader", "d": "2/2015"}, {"body": "something flag written proposal another use characters within typescript language used places defining generics already done want make sure conflicts", "d": "2/2015"}, {"body": "nathggns nt think problem place generic defined really prone conflict jsx hardest part type assertion resolved lookahead closetags map like cyrusnajmabadi described compromise accept forbid usage char jsx text use entities disambiguate cases like might still case think anyone find one please report issue", "d": "2/2015"}, {"body": "traverse recursively nt seem work function visit node return reactchildrenmap nodepropschildren visit", "d": "2/2015"}, {"body": "found file tests generic dispatched iframe cases would interesting test", "d": "2/2015"}, {"body": "semirelated", "d": "2/2015"}, {"body": "used conditionlooping constructs traditional templating languages would prefer use like might consider basically turns neater style syntax ternary syntax described", "d": "2/2015"}, {"body": "run situation", "d": "2/2015"}, {"body": "input firing onchange", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "looking solution like well standard dom event called say somehow able tell react start managing exactly events like eg currently react event system feels quite exclusive party libs", "d": "2/2015"}, {"body": "guys would use create react components documentation api comment live example", "d": "2/2015"}, {"body": "revolunet fwiw currently working open sourcing tool use internally regarding examples nt think good automatic solution components examples useful likely need complex examples well children event handlers etc overall think would great could establish guidelines around write react component provide examples", "d": "2/2015"}, {"body": "fkling yeah think guidelines could helpful angular styleguides talk ideas syntax conventions structure ex", "d": "2/2015"}, {"body": "eh long using human maintained docs think continue path without problems small surface area nt think actually need autogenned docs", "d": "2/2015"}, {"body": "ran across custom attributes issue trying render standard svg thought add real world example issue trying use masks like first problem make syntax work attribute set tag whitelisted attr ok add call function needed also attribute whitelisted react need go modify dom nodes one one well many masked items rendered hopefully shows standard attributes react missing support", "d": "2/2015"}, {"body": "disclaimer new react understand correctly react method advantage directly modifying component state calling lets developer avoid unnecessary rerenders overloading effective however need use immutable data structures eg closurescript om react immutability helpers immutablejs etc without immutability ca nt detect changes fact often ca nt use using mutable data ca nt remove item list using unless shallow cloned whole list think immutability takeaways using immutable data structures use enjoy confidence always sync using mutable data structures modify directly call live sync bright side get write vanillajs update code wo nt run confusion detailed issue new react please clarify got something wrong", "d": "2/2015"}, {"body": "aldendaniels think mixed two concepts correct implementation safe props state use immutable values including string number bool however independent implementation still perfectly safe use even using mutable data props state fact never mutate directly considered immutable", "d": "2/2015"}, {"body": "hi leebyron thanks reaching never mutate thisstate directly considered immutable little dubious react docs react lets use whatever style data management want including mutation also see facebook official todomvc flux example state treated immutable using immutable state javascript without using party library like listed previous post quickly becomes slow tedious dealing large nested data sets mutable state really antipattern ears also concerned invasiveness requirement", "d": "2/2015"}, {"body": "difference later still accepted former bit gray area considered antipattern since object considered owned react", "d": "2/2015"}, {"body": "yes clarify okay okay", "d": "2/2015"}, {"body": "preferable", "d": "2/2015"}, {"body": "take mailing list please guys", "d": "2/2015"}, {"body": "definitely changed update immediately current behaviour confusing forces us pass new state around achieve sensible results", "d": "2/2015"}]