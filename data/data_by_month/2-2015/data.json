[{"title": "reactproptypesnode nt understand opaque reactfragment type", "body": "causes reactfragment opaque type accessing properties deprecated warning", "num": "3286", "d": "2/2015"}, {"title": "could make less painful inline reactelement objects", "body": "hi spicyj said open issue disclaimer trying sort sketchy things know nt supported think would nice writing library want support react output optionally right trying inline reactelements instead almost completely functional except validation react dev mode right literals nt key assumed validators react dev work around without duplicating props write wrapper function create element little unideal slower adds unnecessary keys nondev mode would reasonable short circuit checks happen store actually present reactelement happy submit pull request rush react though curious thoughts thanks aria", "num": "3285", "d": "2/2015"}, {"title": "calling super method reactcomponent children", "body": "inheritance app shown using babeljs transpiler calling super method generates exception js class component extends reactcomponent class mycomponent extend component componentdidupdate supercomponentdidupdate error could call undefined smth think easiest solution add empty methods reactcomponent class something wrong", "num": "3280", "d": "2/2015"}, {"title": "componentdidreceiveprops please", "body": "would like humbly request componentdidreceiveprops hook often times would like something componentwillmount componentwillreceiveprops nt set yet forced pass props around instead reading directly new hook javascript componentwillmount thissetup thispropsid componentwillreceiveprops next thissetup nextid setup id useractionsload id new hook javascript componentwillmount thissetup componentdidreceiveprops thissetup setup useractionsload thispropsid simple example may seem like small thing often times passing props runs deep instead conveniently referencing thisprops one forced plumb props throughout component please consider adding hook leverage code leveraged componentwillmount without forcing plumb props throughout component", "num": "3279", "d": "2/2015"}, {"title": "reference domscry api", "body": "reacttestutils contains todo referencing api work incorporate react projects find left wanting complete dom traversalquery api get references components writing tests documentation included entire domscry api documentation implement submit pull request", "num": "3278", "d": "2/2015"}, {"title": "add gruntfilejs mainjs lint", "body": "currently gruntfile formatstyle differs lot code src verified running lint gruntfile nt gruntfile added well checked prepared fix errors concerning making pr gruntfile added lint grunt task well", "num": "3272", "d": "2/2015"}, {"title": "lint task fails master", "body": "caused pull request made fail travis well even though none errors anything changed see checkout master run grunt lint", "num": "3270", "d": "2/2015"}, {"title": "internet explorer compatibility", "body": "please see description problem gladly post example use om clojurescript nt think would legible tutorial simple enough make easy reproduce problem", "num": "3268", "d": "2/2015"}, {"title": "mutating state inside shouldcomponentupdate", "body": "antipattern mutate call inside listen changes order change something", "num": "3262", "d": "2/2015"}, {"title": "hook componentwillmount render even first render", "body": "would feasible provide function allows developer hook component lifecycle componentwillmount render would need always possible even initial render maybe something like rendervalidatedcomponentwithoutownerorcontext function var inst thisinstance instwillrender check hook defined instwillrender hook called var renderedcomponent instrender dev allow automocks proceed returning null typeof renderedcomponent undefined amp amp instrenderismockfunction probably bad practice consider warning deprecating convenience renderedcomponent null return renderedcomponent right write mixins hook componentwillmount would called equivalent function component leaves opportunity act props state whatever component developer point render trying insert various tracking properties automated testing validation debugging switched prop allowing us also validate automate ui testing real pain ask developers either add code cut paste coding every time write amend components ask call function mixin commence render even simple render functions highly error prone tend forget much easier add easy statically verify added initial render course hook via use componentwillupdate bypassed initial render phase nt work consistent way able hook component mounted developer codes renders able put something like mixin would make much simpler less time consuming general importantly significantly less error prone", "num": "3261", "d": "2/2015"}, {"title": "custom property object flattened pushed attributes props", "body": "small mixin creates proptype follows getall function returns object like effectively passing back custom collection objects various values used property thisotherdata holds information reference components using standard dot notation thisotherdatavariablestimeout gets value issue reason getting flattened thisattributes thisattributes objects sign otherdata object could logically understooed adding custom property thisprops would go guess questions two fold put thisattributes first place thisprops flattened hierarchy instead adding otherdata object", "num": "3260", "d": "2/2015"}, {"title": "nachrichten", "body": "", "num": "3259", "d": "2/2015"}, {"title": "refs passed along syntheticmouseevent reactid", "body": "sure way best approach following issue dot consider react class whiteboard use dot whiteboard know dot selected click circle syntheticmouseevent returned etarget refers reference dot javascript var whiteboard reactcreateclass select function e feels wrong seems dirty feels better feels like better solution sample jsbin approach javascript var dot reactcreateclass getinitialstate function return selected false select function e thispropsonselect e render function return best solution solutions better one another would make sense pass ref along react id event callback", "num": "3258", "d": "2/2015"}, {"title": "multiple react instances per dom using amd example", "body": "using amd component might use react dependency poses problem another instance react already manipulated dom wrong events get fired id collisions occur invariant violation reactmount two valid unequal nodes jsbin internet points google group post", "num": "3252", "d": "2/2015"}, {"title": "triggering events real dom nodes nt trigger synthetic events", "body": "twitter using phantomjs testing browser interaction often times seems happen values get changed directly dom elements change event triggered element interacting reactjs elements phantomjs jquery nt work interactive elements like course easiest solution take real elements mounted attach event listeners like nt pleasant experience interest mirroring events real nodes synthetic events situation normal like able interact application phantomjs seems quite blocker interacting input select elements jsbin example", "num": "3249", "d": "2/2015"}, {"title": "autofocus warn like attribute", "body": "user writes instead htmlfor warning shown suppose autofocus instead autofocus warn", "num": "3248", "d": "2/2015"}, {"title": "animations nt work properly one switches browser tabs browsers", "body": "fiddle demonstrating issue stay fiddle everything works perfectly fine leave another browser tab seconds come back see animation stops completely talking people reactjs irc channel believe issue something like following whatever picture gets added away receive correct css classes almost like react idea added anyways guess seems incredibly problematic believe reactjs bug", "num": "3245", "d": "2/2015"}, {"title": "get object tree presentation components tree initial render", "body": "one way found apply mixin every component takes treat path construct object includes ids react components elements well", "num": "3244", "d": "2/2015"}, {"title": "rework msg danger expected markup render nodes rendered invariant", "body": "hi invariant message give great insight happening syranide helped find might related malformed html content used actually case use autolinker library transform text links html links bug produces malformed html content see bug actually broke whole ui user unperformant workaround parse string passing react something like seems quite common frontend apps code transform shorten dynamic html content bug libraries seriously mess react case called markuplist size call elements returned one elements malformed parsing browser produced dom nodes calling nt really know maybe better documented used wellformed html even browser fix markup maybe invariant message could helpful user case telling user could due malformed html maybe case malformed html could handled react nt really know could done without performance penalty tried parse single markup individually inputoutput number following code fails later", "num": "3242", "d": "2/2015"}, {"title": "wrong ordering table rows adding new", "body": "gents simple single column table rows coming simple list last row table link add another row default content callback list component expected last add new row static row remains last new row added prior practice new row added static row gist using divs instead table works fine tried using keys key z value assigned static row rest lexically lower values success sounds like bug", "num": "3241", "d": "2/2015"}, {"title": "add function map", "body": "hi search add function map without latter triggered page generation code explain therefore launch page function thisdeleteteam triggered whereas want triggered click button param members array object datas correctly display problem functions triggered datas loaded thanks regards edit tried problem edit find xd usefull someone problem", "num": "3238", "d": "2/2015"}, {"title": "append classname replace style top level dom object added component", "body": "may filed already quick search could nt find please close case react component reusability view highly limited without strong ties css currently passing classname component eg nothing unless explicitly consumed implementation requires implementation read immutable prop possibly use react css addon append class top level dom explicitly set result creates lot code duplication components need flexibility used multiple contexts understanding internals may bit lacking believe feature would mesh well jsx since already protected keywords certainly let know missing something obvious would bad feature", "num": "3237", "d": "2/2015"}, {"title": "deprecate replacestate", "body": "use cases replacestate seems fit one patterns let state temporarily null data fetched reset null using replacestate later point use immutablejs record store state way use cursors convenience methods like update batching using immutablejs map store data use state map ie adding new keys dynamically use cases break need add another state value makes refactoring pain thought would nt need also means mixins ca nt add state particularly found pattern common one could potentially add native support would expand record type one contains fields required mixins would like add warning expand state fields original getinitialstate reason vms optimize around records keep type signature changing type signature dynamically introduce performance penalties ca nt add warning patterns used", "num": "3236", "d": "2/2015"}, {"title": "refs work", "body": "spinoff discussion pretty sure need change current way refs work see however new ref callbacks also ideal relies imperative code suffers timing issues like imperative lifecycles also convenient without arrow functions even arrow functions might suffer performance issues things refs tries solve imperative access apis nt declarative counterparts yet eg dom layout fastpath tree update deeply bypass reconciliation perfoptimization get current state child nt want control without duplicating state might possibly diverge send signalspulses downwards", "num": "3234", "d": "2/2015"}, {"title": "could remove ternary operators released npm package", "body": "released npm package react directory structure like react dist lib accumulateinfojs autofocusmixinjs beforeinputeventpluginjs callbackqueuejs nodemodules try opening files accumulateinfojs callbackqueuejs find syntax using ternary operators production processenvnodeenv invariant ternary operators react working could remove ternary operators released npm package", "num": "3231", "d": "2/2015"}, {"title": "eventdata passed simulate methods deep merge", "body": "using change event ran simple extremely agitating problem supply object one properties object completely replace existing one key quick example correctly fire event completely overwrite case event handler using one needed supply test ideally supplying deep merge instead replacing things outright", "num": "3229", "d": "2/2015"}, {"title": "optimizing compiler inline reactelements", "body": "starting react able inline reactelements javascript bar objects improves performance existing call inlining result defaultprops component might default props need resolved transpiler runtime exception ref string unfortunately still nt figured final semantics refs current semantics relies getting current react owner therefore apply optimization ref attribute might string nonjsx work reactcreateelement functions created reactcreatefactory first argument inline object literal otherwise safe since object might reused mutated production mode optimization applied production mode currently fires various warnings proptypes key warnings flag set true optimization would skip warnings would bad development mode difficult part figuring way work everyone environment everyone ability use different transpilers development production mode one solution might use ternary rely minifiers strip extra code pain source maps though another solution would different flags transpilers make sure people actually use correctly otherwise problems due firing warnings think react slow screwed config", "num": "3228", "d": "2/2015"}, {"title": "optimizing compiler tagging reactelements", "body": "make optimized reconciliation tagging reactelements hidden class props example guaranteed always three props javascript c could tag every element properties unique id could use hidden class generate optimized diffing algorithm instead iterating properties presumably would need since diff native components bonus points determine properties constant perhaps using property descriptor object would use heuristic inside react determine create optimized differ example updates component like jit would javascript oldelementt newelementt numberofupdates else numberofupdates numberofupdates optimizeddiffer generateoptimizeddiffer newelement optimizeddiffer oldelement newelement else numberofupdates gt optimizeddiffer oldelement newelement else manualdiffing oldelement newelement", "num": "3227", "d": "2/2015"}, {"title": "optimizing compiler reuse constant value types like reactelement", "body": "starting able start treating reactelements props objects value types ie instance conceptually equivalent values allow us reuse reactelement whose inputs deeply immutable effectively constant take function example optimized moving jsx function body time called instance returned allow us reuse objects react automatically bail reconciliation constant components without manual reference equality objects javascript reference equality meaning optimization actually change behavior code calls render uses object equality uses reactelement key map optimization break use case nt rely change semantic contract reactelements difficult enforce hopefully future version javascript notion value equality custom objects enforced constant simplest assumption entire expression including props children literal value types strings booleans null undefined jsx result constant variable used expression must first ensure ever mutated since timing affect behavior safe move constant higher closure variable never mutated move scope shared variables objects constant arbitrary objects considered constant transpiler never move reactelement scope parameters mutable object react silently ignore updates change behavior object provably deeply immutable effectively immutable never mutated transpiler may move scope object created received javascript function render var style objectfreeze proto null width return safe reuse might expect render propsstyle nottobe render propsstyle however function createcomponent width var style objectfreeze proto null width width return function render return safe move one level due fact arbitrary objects referential identity javascript however semantics immutable object expected value equality might ok treat value types example data structure created immutablejs may treated value type deeply immutable exception ref string unfortunately one exception prop might potentially might string value never safe reuse element due fact capture react owner time creation unfortunate artifact looking various options changing refs semantics fix nonjsx work jsx reactcreateelement functions created reactcreatefactory example safe assume function call generates constant reactelement javascript var foo reactcreatefactory fooclass function render return foo bar therefore safe reuse advanced optimizations also imagine even clever optimizations optimize perinstance elements memoizing instance allows autobound methods treated effectively constant track purefunctions even treat calculated values constants input pure function constant static analysis tools like flow makes possible detect even elements constant", "num": "3226", "d": "2/2015"}, {"title": "jsxtransformer breaks creating source maps defineproperty available", "body": "jsxtransformer called option javascript environment transformation dies object nt support property method defineproperty exception degrade gracefully simply turn source maps available pass rather true everything works fine seems like code needs gated environment check appear logic jsxtransformer try detect seems like check either incomplete code also needs wrapped check also see", "num": "3225", "d": "2/2015"}, {"title": "expose refs dom components direct handles actual dom node", "body": "mental model polyfill layer support browser would support support future ideas propagate standards fact currently implemented wrapper unobservable implementation detail perhaps nt implemented wrapper upgrade path would need monkey patch existing legacy methods onto upgrade path would work immediately warn used replaced imperative layer simply multiple calls replaced take either arbitrary component dom node directly use something unsure cases simply get rid call together use dom ref directly", "num": "3223", "d": "2/2015"}, {"title": "rendering array produces warning message", "body": "upgraded discovered rendering array child components without providing keys react produced warning thought odd reactjs would tell go look undefined looked source sure going string line nt make sense simple example top stack rummaged get far", "num": "3222", "d": "2/2015"}, {"title": "umbrella", "body": "new cool features x pure functions stateless components x allow arbitrary attributes dashed tags ie custom elements jimfb see x fix error utils guard see reactcompositecomponenterrortest mostly affects fb internals ties better error handling general sebmarkbage x add trusted key reactelements leebyron sebmarkbage package changes x build separate packages react isomorphic dom server rendering still need handle zpao x deprecate dom renderer react package replace separate package warnings used zpao x ship react addons separate packages remove react repo possibly kill already deprecated ones like classset build warnings existing package used zpao x endoflife reacttools clean legacy reactnative react repo zpao x figure reactnative needs react amasad sebmarkbage ship indexiosjs react reactnative components immediately start using react package sebmarkbage decouple dependencies react dom react isomorphic except react dom still needs set react isomorphic sebmarkbage see comment x browser build reactdom zpao kill deprecations x props dev remove old props mutation warnings jimfb see x make return toarray objects spicyj x kill spicyj x kill jimfb see x clean remaining ownercontext stuff jimfb new deprecations x deprecate setpropsreplaceprops replace external reactrenderer package nt forget include replaceprops renderer api ship package jimfb see x deprecate getdomnode replaced reactfinddomnode spicyj x expose dom component refs actual dom nodes spicyj x warnings using dom component ref getdomnode props spicyj x clean remainders context jimfb probably deprecate replacestate needs immutablejs solution sebmarkbage deprecate ismounted needs promise solution sebmarkbage detect event target available eg shadow dom jimfb see disabled", "num": "3220", "d": "2/2015"}, {"title": "csstransitiongroup behaves oddly using child component", "body": "ran bug similar happens calling child component nested within set fiddle reproduces issue reproduce firefox chrome", "num": "3219", "d": "2/2015"}, {"title": "warn react dom modified notreact", "body": "discussed complementary improvement turn mutation observer dev warn someone react modifies dom andor dom nodes appear without datareactid thus indicating extension script fancy magic", "num": "3218", "d": "2/2015"}, {"title": "start building native", "body": "able build native mobile apps using react", "num": "3216", "d": "2/2015"}, {"title": "typeerror e undefined reactwithaddonsjs", "body": "installed reactjs via bower downloads latest version firefox get error typeerror e undefined elimiter autocompactresolver l configuration eextend h flconfig nt happen", "num": "3214", "d": "2/2015"}, {"title": "avoid global window", "body": "currently react relies global works browser works environments one sets global however relying globals prevents multiple independent react engines running together testing example benefits strongly isolated environments would nice one could run separate tests without manually cleaning every time another use case programatic behaviour inspection interesting load multiple windows compare behavior one library different calls react involved however impossible avoiding relying globals added backwardscompatible fashion global keep existing behavior nt instead exposing api expose factory taking returning api example see jquery decision avoid globals means refactoring existing code base pass explicitly everywhere maintaining attitude future opinion feature", "num": "3213", "d": "2/2015"}, {"title": "nested render trees", "body": "way implement portals nested reactrender componentdidmountupdate also reactart switch render mode middle tree comes problems ca nt reason depth component implement mountorder ca nt reason position tree debugging purposes reactdevtools ca nt pass context next subtree firstclass concept nested render trees optionally use different render mode", "num": "3210", "d": "2/2015"}, {"title": "warn rendering", "body": "gaearon come warn rendering directly documentbody list children often manipulated third party scripts browser extensions leading subtle reconciliation issues", "num": "3207", "d": "2/2015"}, {"title": "changing array state update component", "body": "coffee getinitialstate selected renderselect celldata celldatakey rowdata index onrowsingleclick target index selected stateselectedslice selected index selected index setstate selected selected go alter selected state certain row negate checkbox updated bug something wrong", "num": "3204", "d": "2/2015"}, {"title": "safari slow performance rendering large amount text", "body": "action chrome safari load click comment icon article lots comments wait load chrome render performance well collapsing thread clicking comment near instant safari freeze browser seconds code comments render even without dangerouslysetinnerhtml see really slow performance safari remove comment text altogether speeds dramatically source slowness put together smaller demo", "num": "3203", "d": "2/2015"}, {"title": "testutilsrenderintodocument failing components containing", "body": "get following stack trace attempting render component containing test set minimal test case inapp everything renders fine using things go little crazy", "num": "3202", "d": "2/2015"}, {"title": "handle nonfactory component function errors better", "body": "js var component reactcreateclass reactrender component typeerror undefined uncaught typeerror read property reactautobindmap undefined nice warning warning something calling react component directly use factory jsx instead see", "num": "3200", "d": "2/2015"}, {"title": "drag events fire svg elements", "body": "react svg elements would like drag around drag events seem working although work html elements click events working fine svg elements however following example print syntheticdragevent console try drag parent fire event either even modify perhaps unrelated issue attempt put element react render outside anyway renders html test test test draggable however", "num": "3192", "d": "2/2015"}, {"title": "deprecation warnings cause errors", "body": "version occurs sure earlier versions bug example code cause errors installed regardless call deprecated methods due supporting shimming value used property descriptors workaround set disabled debug messages hence deprecation warnings", "num": "3188", "d": "2/2015"}, {"title": "double click single click event fired shoudl nt", "body": "code event handlers called div element double clicked call single click event handler chance fixed thanks", "num": "3185", "d": "2/2015"}, {"title": "component", "body": "", "num": "3181", "d": "2/2015"}, {"title": "looking good way test react", "body": "hey currently looking different solutions testing react exploring anyone good suggestions repos read quite articles everyone seems different way wondering good solid way compatible newer releases react thanks", "num": "3178", "d": "2/2015"}, {"title": "attach displayname class methods", "body": "including ones autobound like lifecycles would help debugging stack traces better also thought added point", "num": "3173", "d": "2/2015"}, {"title": "underscore property prefixing performed template string expansion", "body": "underscore property prefixing facebookreact performed expanding template strings leads incorrect results combining two becomes", "num": "3172", "d": "2/2015"}, {"title": "warning proptypesobjectisrequired prop", "body": "type prop empty object still type object practically still warns nt think supposed happen stops warning anymore pretty sure warn", "num": "3163", "d": "2/2015"}, {"title": "changelog beta releases", "body": "actually conly information could find version blog post could add release notes changelog development releases", "num": "3155", "d": "2/2015"}, {"title": "use https embeds github pages blog posts prevent blocks due mixed content", "body": "trying read page none code snippets show tracked http iframe embeds using https github pages mixed content completely blocked browsers days https embeds pages served http works fine though jsfiddle supports https embeds see reason prefer embeds pages served embeds changed use also help guidelines maybe enforced test case ps read page properly without turn https everywhere extension prefer", "num": "3153", "d": "2/2015"}, {"title": "uncontrolled form jest simulatechange", "body": "testing uncontrolled form input via jest confirm value null code sample docs say supply value sets null uncontrolled component uncontrolled value rendered element reflect user input uncontrolled form works per docs browser jest handle change use valuelink test pass think fails onchange handler set reactdominputjs thinking throw warning change handler exists code test form input test javascript update value function var instance testutilsrenderintodocument var el testutilsfindrendereddomcomponentwithclass instance inputemail var node elgetdomnode result", "num": "3151", "d": "2/2015"}, {"title": "react updating dom", "body": "seems react doesnt updates dom approach simply update img src every seconds set breakpoint see always latest correct url reactdevtools component gets updated every seconds new url look dom tab see still hints im clueless might wrong using see demo jsx var react require react var randomimage reactcreateclass moduleexports randomimage", "num": "3149", "d": "2/2015"}, {"title": "createnodesfrommarkup renders global document", "body": "apparently support rendering iframes petehunt always render new markup global document move rendered elements iframe document afterwards jsdom throws try browsers nt seem mind however apart perhaps nice various reasons seems affect performance significantly drops performance ff drops rendering global document moving rather rendering directly iframe document easily solved everywhere except renders different documents batched well cc spicyj zpao", "num": "3146", "d": "2/2015"}, {"title": "test utils clicking submit button trigger form onsubmit", "body": "see calling click function trigger button onclick form submit action undocumented trigger form bug onsubmit implementation react test utils", "num": "3141", "d": "2/2015"}, {"title": "reacttools npm sources always returns sourcejs", "body": "hey guys know lot issues try make quick clear issue generate sourcemap using node module calling always output property sourcemap generated way specify actual source file thought perhaps option would allow change unfortunately matter set property always returns array small snippet code quickly verify js var jsx require reacttools assert require assert var output jsxtransformwithdetails sourcemap true sourcefilename pathtosourcejs var assertequal outputsourcemapsourceslength var assertequal outputsourcemapsources pathtosourcejs consolelog sources contains one entry consolelog sources entry correct", "num": "3140", "d": "2/2015"}, {"title": "feature request allow classname take array", "body": "often use components internal well optional passed prop way implementing either local array construct serialize prop b using b slightly less verbose harder use modifier classes well eg suggesting allowing classname string array array react internals would compact serialize classname array classname string good idea could make attempt pr", "num": "3138", "d": "2/2015"}, {"title": "reactcsstransitiongroup child element blinking", "body": "hi getting initial blink using reactcsstransitiongroup added element get enter class applied attached dom even gets immediately see reactcsstransitiongroupchildcomponentwillenter queued dispatched action adds element dom causes behavior know issue would nt make sense element added enter class moment inserted thanks", "num": "3137", "d": "2/2015"}, {"title": "isnodejs checks", "body": "hi asapjs module checking whether environment isnodejs fake environment browserify processnexttick used check causing uncaught exceptions stop rendering", "num": "3136", "d": "2/2015"}, {"title": "abnormal workflow prevents onchange fired ie", "body": "included test link alert happen change select item essentially letting back end rendered dom drive converted react components nt freedom render back following route works fine always except events nt fired think may something fact calling component instance instead string case either reject component instance events trigger properly", "num": "3131", "d": "2/2015"}, {"title": "regression refs siblings nt resolved previous siblings componentdidmount", "body": "sure fix probably needs separate queues", "num": "3128", "d": "2/2015"}, {"title": "docs image nt correspond text", "body": "regarding image shows red vdomeq icon node though text states last interesting case node react compute virtual dom since equal old one nt reconcile dom think icon supposed green ie virtual doms equal", "num": "3125", "d": "2/2015"}, {"title": "invariant displaying overlay unable find element probably means dom unexpectedly mutated", "body": "running invariant trying display overlay prerendered browser js layoutjs moduleexports reactcreateclass mixins navigationmixin statemixin componentwillmount function thisstateusersize thistransitionto newusersession render function return js overlayjs moduleexports reactcreateclass mixins statemixin render function return whenever updates get following error using regards overlay understand browser may something dom cause react issue finding component seems simple common problem overlays bug stupidity", "num": "3124", "d": "2/2015"}, {"title": "strict proptypes mode", "body": "would nice able set flag trigger invariant warnings time prop referenced passed component declared proptypes", "num": "3113", "d": "2/2015"}, {"title": "getdomnode fails get dom node safari", "body": "testing react discovered inconsistencies browsers safari os x try call thisgetdomnode within safari dom node returned actual node mounted dom suspect virtual copy reacts virtual dom try call getboundingclientrect returns empty clientrect object code works expected chrome version firefox worth noting using jsx preprocessor reactify gulp", "num": "3112", "d": "2/2015"}, {"title": "reactaddonstransitiongroup fails remove multiple children dom time", "body": "using reactaddonstransitiongroup remove one item time remove fail remove last child dom later children added back removed special lifecycle methods componentwillentercomponentdidenter called already dom jsfiddle illustrating problem", "num": "3111", "d": "2/2015"}, {"title": "extra nodes emitted rendering result mapping immutable collection", "body": "basically yields looks like properties immutable wrapper emitted along actual values going look get time later today figured good get tracked issue thanks", "num": "3102", "d": "2/2015"}, {"title": "race tutorial optimistic updates", "body": "last step tutorial optimistic updates added believe race condition following occurs called ajax get call started called adding new comment state ajax post call started ajax call returns stale data ajax call returns new data called ajax get call started result seen user", "num": "3099", "d": "2/2015"}, {"title": "onchange nt work ie typerange", "body": "nt know yet newbie bug event nt work ie even example code yes use crap patch", "num": "3096", "d": "2/2015"}, {"title": "getting unknown runtime error", "body": "hi searching could find could put hopes people know lot trying run reactjs app referenced amp sham well consolepolyfill getting kind error seems related changing element using unminified verison react currently available npm function throwing js executionenvironmentcanusedom updating created node innerhtml leading whitespace removed updating existing node innerhtml whitespace root textnodes also collapsed see feature detection known behave improperly like var testelement documentcreateelement div testelementinnerhtml testelementinnerhtml setinnerhtml function node html magic theory supposedly differentiates added updated nodes processing innerhtml innerhtml updated nodes suffers worse whitespace behavior readding node like triggers initial favorable whitespace behavior todo detached node nodeparentnode nodeparentnodereplacechild node node according line number line else branch exception originates would love hear could", "num": "3095", "d": "2/2015"}, {"title": "chinese doc", "body": "friends translating documents chinese days plan lot jobs introduce react chinese frontend developers like forum discussing useful components writing blogs etc ok add link organization readmemd thanks", "num": "3094", "d": "2/2015"}, {"title": "return balise", "body": "hi searched since morning return balise information line however write page click email nt work mail field fill thisstateuseremail firstnamename mailcom regards", "num": "3093", "d": "2/2015"}, {"title": "webworkers", "body": "discussion webworkers petehunt made already implementation sebmarkbage ideas wants accomplish within current code base remember correctly react run webworker main thread webworker waiting sebmarkbage would great could give detailed outline ideas get moving", "num": "3092", "d": "2/2015"}, {"title": "react testutils simulate change nt change checked state checkbox", "body": "sure react simulate thing something dom works jest simple test click checkbox report new state back component worked fine browser simulatechange nt report new state example shows error happening checkbox javascript describe checkbox function change checked state checkbox function var changehandler function e consolelog ecurrenttargetchecked expect see true console happens browser chrome amp firefox test understanding change handler supposed happen state change element test shows behaviour use controlled uncontrolled component shows behaviour simulate click event use click handler", "num": "3091", "d": "2/2015"}, {"title": "react binding", "body": "noticed new version react require manual binding problem lessened still want recommend extension jsx language bind functions scope akin arrow functions", "num": "3090", "d": "2/2015"}, {"title": "mouse events fired components listening", "body": "sure profound misunderstanding react events actual bug mouse events registered parents sometimes fire children bin mousing around two divs eventually result inner div getting highlighted red even though nt event trigger attaching uihover class though parent", "num": "3088", "d": "2/2015"}, {"title": "onended working", "body": "audio element want know finished playing event event works natively react nt appear mapping ended event new react maybe something missing seems like bug react nt wrap native dom events way easily bind listener another way", "num": "3087", "d": "2/2015"}, {"title": "dom operations performance counters", "body": "would possible expose counters rendering vdom diff algorithm resulting dom operations development mode react really good job running fast still entirely possible human error thwart algorithms well human ignorance fast enough hide bad code lead poor performance long term generally visible really really bad would nice interface sends back object counters every time touches dom fully satisfy diff would counters isolated per would nt reset user would responsible subtracting previous values like one would measuring fps animation loop example use case press button visually text changes field appears counters indicate several dom nodes created along various operations would know either something horribly wrong b something wrong likely much efficient way assuming counters reflect back actually think happen would nice check rendering well least good think", "num": "3086", "d": "2/2015"}, {"title": "automatically objectassign receives array", "body": "react native two styles automatically composed currently trying similar technique react dom produces following principles learn write everywhere style prop behave similarly across implementations", "num": "3081", "d": "2/2015"}, {"title": "vanilla proptypes library", "body": "thinking proptypes could extremely useful vanilla javascript write exploring possibility right wondering difficult would pull proptypes react standalone vanillajs library sounds like reasonable thing would start edit clear really ability add type checking functions without using something like typescript typescript bad investigating alternatives would awesome abstraction check arguments function way checks properties given components really", "num": "3079", "d": "2/2015"}, {"title": "prop validation component class", "body": "hello question component accepts component constructor prop noticed support proptype documented checking prop react class missing something reason use props way", "num": "3077", "d": "2/2015"}, {"title": "ontouchend execute twice ios safari", "body": "ontouchend execute twice function event handler live example first tap button confirmation appear everything seems okay tap ok cancel moment tap place around button confirm appear tap button live example qrcode", "num": "3076", "d": "2/2015"}, {"title": "markdown parsing error docs", "body": "following markdown markdown note transfer cloned component wish preserve key add object similarly preserved parsed incorrectly seen", "num": "3075", "d": "2/2015"}, {"title": "thisforceupdate crashes component mounted", "body": "sure bug general confusion tried master crashes component mounted makes sense say however call directly nt crash suggests ok ok call happens use fluxlike architecture nt use combination flux suggests error get invariant violation receivecomponent update mounted component example shows problem", "num": "3071", "d": "2/2015"}, {"title": "false warnings controlled components", "body": "controlled component nt listener listened parent component following warning logged currently warning provided prop form field without handler render readonly field field mutable use otherwise set either check render method example", "num": "3070", "d": "2/2015"}, {"title": "make autofocus show rendered markup", "body": "currently nt handle specially runtime serverrendered content would good make actually work cc syranide", "num": "3066", "d": "2/2015"}, {"title": "support map interface props", "body": "high performance map implementations starting appear modern web browsers supporting map interface users instead supply props immutablejs clojurescript map instance change would even require providing equality hook first pass users memoize props users embracing immutable data huge change means styles defined code overridden shared efficiently react dom elements memoized immutable props skipped etc", "num": "3059", "d": "2/2015"}, {"title": "react todo application example raising warning", "body": "todolist component renders list elements nt unique key raises warning child array unique key prop check render method todolist see information understanding done way sake simplicity unique id used performant virtual dom diffing good idea warning raised example home page react see", "num": "3049", "d": "2/2015"}, {"title": "functionality directly add html string render function", "body": "render different html class different state value one option make every small html content different react class call individually like add html lines directly render function way something like makes difficult certain cases lot small html manipulations different state values better way add html directly return function using notation like missing something actually better way react", "num": "3044", "d": "2/2015"}, {"title": "component namespace sharing", "body": "var form myformcomponent var app kind component namespace sharing still available syntax", "num": "3042", "d": "2/2015"}, {"title": "bind dom event handlers component instance", "body": "gives us possibility use javascript prototype based inheritance instead using method problem brings need explicitly bind dom event handlers component since react autobinding works classes declared time looks weird even native dom event listeners work manner nt think good example follow please notice native dom apis introduced thousands years ago nt get wrong nt see usecases event handler called within context global object would nt better react bind dom event handlers class instance imaging one custom component inspired bemreact project js class button extends reactcomponent onfocus thissetstate focused true onblur thissetstate focused false render return reactcreateelement div classname button thisstatefocused buttonfocused reactcreateelement button classname buttoncontrol onfocus thisonfocus onblur thisonblur thispropstext would expect event handlers would called instance context would error thrown global method let clear know arrow function well ways bind function context however react eventlistener internally think might possible provide desired behaviour box think", "num": "3040", "d": "2/2015"}, {"title": "recursive forceupdate", "body": "would nice way call way would applied recursively children elements currently using paired immutablejs similar fashion om found behavior preferable cases one concrete use case would gaearon hot loader currently attempts gather elements trigger forceupdate seems still somehow hitting application nt quite tracked wherehow another use case would simple solution context issue context changed want able element children", "num": "3038", "d": "2/2015"}, {"title": "react nt eval java nashorn javascript engine", "body": "nashorn new javascript engine shipped java nashorn compiles javascript java bytecode runs natively jvm unfortunately react nt evaluate properly nashorn due fact nashorn nt support kind module system like amd box code creates new nashorn engine evaluates react jvm running code results following error simple workaround create variable referencing global context btw fully working isomorphic java example commentbox tutorial commentbox initially rendered server nashorn", "num": "3037", "d": "2/2015"}, {"title": "jsxharmony outputs nonsensical code arrow function expressions", "body": "given following input code traceur compiler yields syntax error outputs nt know behaviors correct know produces following output correct thanks", "num": "3029", "d": "2/2015"}, {"title": "two mixins cause invariant violation defining methods", "body": "hi trying figure whether wrong way react issue deal two mixins pulling state different stores trying mixed view gist showcasing issue given two mixins view uses var view reactcreateclass mixins render function return view view fails getstate wrong approach maybe react issue googling symptoms found facebookreact strictly related plus nt seem default spec policy enforced multiple definitions thanks dar\u00edo", "num": "3027", "d": "2/2015"}, {"title": "jsx parsing error", "body": "entirely sure causing issue fails nt", "num": "3019", "d": "2/2015"}, {"title": "valuelink working react", "body": "", "num": "3015", "d": "2/2015"}, {"title": "img tags get duplicated virtual dom", "body": "hi simple component like debug using react dev tools inspect react dom see breaks unit tests expect one element use issue virtual dom browser dom looks like expected interesting note change line element nt duplicated anymore using react", "num": "3014", "d": "2/2015"}, {"title": "make controllable", "body": "affected user interaction enabled makes sense controlled uncontrolled introduced needs introduced zpao sounds good could good first bug", "num": "3010", "d": "2/2015"}, {"title": "streaming rendertostaticmarkup", "body": "messing around trying get current project cater critical rendering path ie first data asap landing page quite heavy content takes around process time want users wait get something screens currently everything tag first content finishing bundled json dump data server used render page js webpack bootstrapping gets somewhere get background color title first rountrip content would neat version returned node stream option specify function tells number bytes render pushing stuff downstream example", "num": "3009", "d": "2/2015"}, {"title": "comments jsx working expected", "body": "comment section jsx children component jsx transformer nt seem transform correctly elements hidden dom nt seem work intuitively something wrong", "num": "3008", "d": "2/2015"}, {"title": "unnecessary return", "body": "hello reading react tutorial last really necessary yes necessary", "num": "3006", "d": "2/2015"}, {"title": "checked attribute realizing dom", "body": "recently updated checkbox element hooked dynamically updating browser using react inspector chrome seems toggling fine reason changes nt propagate dom sure specific update messed something nt realize render function js render function let classname thispropsitemisactive classname isactive return thispropsitemtext", "num": "3005", "d": "2/2015"}, {"body": "logically trying call component already get reference statics javascript class mycomponent extends reactcomponent static somemethod consolelog something render mycomponent accessible", "d": "2/2015"}, {"body": "true explicitly call rather could potentially enable better code reuse", "d": "2/2015"}, {"body": "clear would changing checks like reactelementvalidator assume exists sebmarkbage one", "d": "2/2015"}, {"body": "since base class nt define think indeed expected real issue opinion using inheritance react components bad pattern book jordan explains many people become accustomed using oo inheritance tool primary means abstraction application worked java shop know talking personal opinion classical oo inheritance implemented many popular languages often best tool jobs let alone jobs situation approached even caution inheritance used within framework paradigm uses functional composition primary abstraction react certain patterns want prevent many strange things people come combining render inheritance nt make sense addressed via simple composition also risk making mutation convenient might make sense start classes simply better syntax react component creation intentionally limiting use cases limiting inheritance depth making react base class methods final used react components course nonreact use classes would nt restricted use case absolutely sure ca nt simple composition something react powerful", "d": "2/2015"}, {"body": "offcourse things simple composition javascript abstraction cool oo stuff things easier though", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "looking projects see done similar needs another one deriving chunk state based props passing different set props needed pass something extra reusing without duplicating knowledge props needed", "d": "2/2015"}, {"body": "syranide trouble setup needs call methods also need props needs call methods also needs props eventually entire component plumbing around props", "d": "2/2015"}, {"body": "seems like bunch needless wiring app current pattern could concise standardized way solve problem seen bunch people get burned thisprops inside componentwillreceiveprops clear sign intuitive", "d": "2/2015"}, {"body": "differ nt matter terribly bunch changes went linting part thought probably getting", "d": "2/2015"}, {"body": "ah never mind indeed gruntfile run grunt lint looking forked repo outdated facepalm", "d": "2/2015"}, {"body": "actually one commented pr", "d": "2/2015"}, {"body": "thanks missed guess got confused since failing master machine", "d": "2/2015"}, {"body": "warnings ok errors lot warnings long lines need clean admittedly hard find want make lint changes show nt yet noted error coming change going close", "d": "2/2015"}, {"body": "getting result running grunt lint machine travis getting errors", "d": "2/2015"}, {"body": "nevermind figured errors build folder", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "sounds like issue tutorial servers close issue leave one open fix", "d": "2/2015"}, {"body": "magalhas right place afaik", "d": "2/2015"}, {"body": "use case able filter state set", "d": "2/2015"}, {"body": "yaycmyk update owner component state change easily create infinite loop since filter update triggers nt know alternatively could pass callback second argument fits usecase maybe better way achieve want yeah nt mutate state closing unless questions btw stackoverflow helps", "d": "2/2015"}, {"body": "note prop mutation deprecated see also something else ca nt done componentwillmount let know reopen discuss", "d": "2/2015"}, {"body": "really understand prop mutation deprecated means implications deprecated write multitenant platform number customers add components shared used users system unlike facebook guess wish able automate lot testing components pass use environment certain attributes injected ui renders right execution order goes like componentdidmount mixin write code componentdidmount component third party code gets values store stuff control potentially sets states style properties anything else want render component control ca nt anything ask developer write attributes createelement write follow convention means less component repeat code mixin naming adding attributes thisprops element nt created yet ask render function thismixtestobsprops function names obscure prevent clashes thismixtrackobsprops anything user may create thismixvendobsprops properties mixin might choose add thismixuseobsprops add functions mixin thismixsylobsprops code meaning developer concentrate need write point keys resultant value based props state developer may load componentdidmount phase reactresolver binds componentdidmount already mixin forces thisforceupdate effectively making components double work fact library even exists shows need type feature trying make whole solution faster single set dom writes render writing dom rewriting dom render time additional dom inserts component used grid cells te main reason choosing react speed would like way able add properties elements get created render didmount fired mixin component get added single hit", "d": "2/2015"}, {"body": "return object wrapped object ie nt flatten object thisattributes happens reactcompositcomponent mountcomponent thisprops thisprocessprops thisprops createmergedresultfunction mergeobjectswithnoduplicatekeys thiscomponentwillmount", "d": "2/2015"}, {"body": "course loose ability reference property longer exists via", "d": "2/2015"}, {"body": "ignore mixin third party causing issue rolling everything attributes raised issue", "d": "2/2015"}, {"body": "closing per last comment", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "usual way write something like js select function color e partial application callback arguments passed bind passed first argument callback however looking code see problems importantly never ever set another component state calling anything except state thought component private variables could expose method dot component really belongs parent component state passed automatically props dot components something like work note nt need refs need update child individually idiomatic react code rarely uses refs let know example makes sense", "d": "2/2015"}, {"body": "may bold see two ways forward either react knows instances react something global operating entire dom react instance creates random root key similar", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "see one similar want warning presumably act upon removing one reacts mistakenly loaded scenarios multiple instances operating dom component tree required", "d": "2/2015"}, {"body": "scenarios multiple react instances operating dom component tree required nt understand use case", "d": "2/2015"}, {"body": "scenarios multiple react instances operating dom component tree required nt understand use case cases seen usually around addons widgetsscripts", "d": "2/2015"}, {"body": "use case mine ui composition via amd could something like two separate commonjs bundles page possibly nt use commonjs widgets", "d": "2/2015"}, {"body": "issue ca nt reliably use dependency injection mechanism eg change batching strategy using components multiple modules instance react dependency even version react originally posted sorry duplicate comment", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "submitted pull request", "d": "2/2015"}, {"body": "also happens one resizes browser zooms mobile", "d": "2/2015"}, {"body": "need", "d": "2/2015"}, {"body": "experimenting concept global state object programmatically constructed represent hierarchy components tree thus easier pass state props root component tree", "d": "2/2015"}, {"body": "sure mean give code example problem trying solve", "d": "2/2015"}, {"body": "related way traverse render tree rendering eg graphql work ahead time tree traversal pulling calls use mixin every component graphql calls", "d": "2/2015"}, {"body": "iamdustan yeah somewhat question spicyj ok check thread idea use hierarchical object mirrors components tree app", "d": "2/2015"}, {"body": "thanks issue right assume dangerouslysetinnerhtml markup valid nt ever expect error message fire sanity check least try document better improve error message maybe also consider validating markup development mode", "d": "2/2015"}, {"body": "parse together performance reasons", "d": "2/2015"}, {"body": "least try document better improve error message believe mentioned time ago perhaps put onetime message first time used people probably use somewhere nag get rid maybe also consider validating markup development mode aware reasonably fasteasysmall way validating markup using parser even would could make robust helpful interspersing markup comment validate comments order ca nt give reasonsource error ca nt validate markup context either invalid nesting plays part thing seems realistic wrapping markup comment side walk tree ensure special comments level always mercy chance root problem user must made aware markup must wellformed valid context safesanitized", "d": "2/2015"}, {"body": "believe mentioned time ago perhaps put onetime message first time used nt work codebases worked one person", "d": "2/2015"}, {"body": "specific example working appears expect firefox chrome least add new row always last item ps let try assume gents", "d": "2/2015"}, {"body": "ouch possibly forgotten clone bin kept playing one shared original working one saw effort make work strangely rearrangement started producing expected results nothing see radically different ps let", "d": "2/2015"}, {"body": "ah looks like main difference lack broken example browsers fun change dom insert markup write table without tbody browser inserts one original rows tbody new rows appended directly table show original content warning fires conditions try detect ca nt always leads weird things like", "d": "2/2015"}, {"body": "zpao related optimistically traversing unexpected nodes like seems like bad idea hides invalid nesting issues like make surface sometimes rather consistently seem far preferable", "d": "2/2015"}, {"body": "wups early submit nt automatically propagated whether pass class even component decide ps also special way dom components receive special treatment jsx information could useful depending components set", "d": "2/2015"}, {"body": "sure get argument would love understand component sure fb team architectural answer however make argument propagated consider component jsx well takes special immutable special keywords result rendering attribute would extension functionality cite gwt functionality exists preprocessed xml view", "d": "2/2015"}, {"body": "words components thin bundles dom opaque decide rendered take classstyle forward rendered dom component responsibility component given even single universally agreeable way anyway hence discarded also consider something like reactkit native apps concept styleclass native apps", "d": "2/2015"}, {"body": "certainly understand saying humbly disagree specific case talking components abstract construct also talking jsx implementation jsx effectively acts mini render html defining specific way rendering clear understanding class style agree jsx present reactkit working html output could possibly imagine android xml layout preprocessor may face similar issues maybe add add jsx preprocessor title want add adamant adding propagation correct definitely want understand underlying architecture may prevent make bad idea", "d": "2/2015"}, {"body": "jsx effectively acts mini render html jsx frontend neutral made html think defining specific way rendering clear understanding class style jsx knowledge meaning individual props agree jsx present reactkit working html output definitely use jsx reactkit point", "d": "2/2015"}, {"body": "ok makes sense thought jsx purely html preprocessor mistakenly classname class mapping turns special case javascript lang instead html", "d": "2/2015"}, {"body": "posterity done react dom components", "d": "2/2015"}, {"body": "yep important least initial assumption mapping result jsx interpreting html dom like said jsx frontend neutral however jsx still js frowned upon definitely clarifies jsx substituting classname instead interpreting since jsx javascript identifiers class discouraged xml attribute names instead react dom components expect dom property names like classname htmlfor respectively", "d": "2/2015"}, {"body": "fairly safe say equivalent though neat idea deprecate well infavor ie without responsible updating make assumptions easily readd base class tangent technically could even move something like want avoid publicly exposing methods base component class would left right even seems imaginable drop base component class entirely wanted also means mixins ca nt add state particularly found pattern common one shoulder shrug class choice nt use object also accept wo nt compatible standard mixins would like add warning expand state fields original getinitialstate", "d": "2/2015"}, {"body": "would like move authoritative state object internals ideally also frozen render would resurface whatever internals thinks current state object way internals could implemented terms immutable treescursors component structure could also quickly hydrated restored need reclaim memory eg infinite scrolling lists ideally even would nt work nested objects would still work mutating state also timing issues comes mutation", "d": "2/2015"}, {"body": "mutating state also timing issues comes mutation oh right yeah", "d": "2/2015"}, {"body": "effectively means stateful components must define getinitialstate kneejerk reaction bad thing starting like", "d": "2/2015"}, {"body": "another one thinking parentbased refs could treat refs similar context assign unique key bubbles upwards parent hierarchy everyone hierarchy gets access effectively reversed context useful things work cases possibility screwing nested would provide way identify upwards signals proposal anyway idea spinoff ideas", "d": "2/2015"}, {"body": "kindofmentioned suspect part answer refs wellsuited eventtriggered interaction uncontrolled components clicking save saving etc whereas refs nt wellsuited lifecycle events refs based lifecycle whereas really interested lifecycle target nt want ref want instance momentarily target mountedupdatedunmounts ps obviously complete story seems refs lifecycle events might right way go", "d": "2/2015"}, {"body": "ternary operators nt exist browser need preprocess file using something like browserify webpack serve premade builds either dev prod", "d": "2/2015"}, {"body": "thank prompt reply preprocessed using gulp browserify like guess mainjs loads react react modules preprocessed bundle operating anything", "d": "2/2015"}, {"body": "see also \u00f4\u00e5\u00e2\u00f0 \u00e3 \u00e2 ironyee notifications githubcom \u00ed\u00e0\u00ef\u00e8\u00f1\u00e0\u00eb \u00e0 thank prompt reply preprocessed using gulp browserify like browserify srcjsmainjs transform reactify bundle guess mainjs loads react react modules preprocessed bundle operating anything reply email directly view github", "d": "2/2015"}, {"body": "react specifies use contextify browserify happen automatically replaces believe webpack something similar built going keep time nothing", "d": "2/2015"}, {"body": "deep merging always tricky need assume things shape arbitrary objects case would actually want deep merge value actual dom node passed would surprising passing args simulate would end mutating node directly react tests mutate target value directly simulating change event like approach recommend", "d": "2/2015"}, {"body": "cc sebmck", "d": "2/2015"}, {"body": "difficult part figuring way work everyone environment everyone ability use different transpilers development production mode mean using different transpilers using transpiler flick switch unless misunderstanding something another solution would different flags transpilers make sure people actually use correctly otherwise problems due firing warnings think react slow screwed config developers already know use different build react development production nt think confusing introduce concept transpilation step toying idea production development mode babel things like tdz really want enable default would absolutely kill performance hot code purpose basically prevent development errors", "d": "2/2015"}, {"body": "mean using different transpilers using transpiler flick switch unless misunderstanding something yea meant developers already minifiers use production mode effectively thing", "d": "2/2015"}, {"body": "ah right yeah definently developer education issue technical one", "d": "2/2015"}, {"body": "nit developer education technical issue look much technical trouble go add warnings locking api developers nt unknowingly shoot foot", "d": "2/2015"}, {"body": "yeah absolutely agree probably specific referring specifically educating developers potential production mode transpilers since real way warn compiled production code development mode", "d": "2/2015"}, {"body": "sebmarkbage unfortunately still nt figured final semantics refs current semantics relies getting current react owner therefore apply optimization ref attribute might string mentions past inverting refs instead provide refobject updated sounded great gets rid implicit owner possibly even magic object additionally could set refsobject could take care lists components work well today strings implemented ref callback instead receives instance argument something distinguish whether mounted unmounted kind similar works sense way leave exact implementations user preference either individual instances lists instances store even store could even chained easily longer system refs basically externally chainable lifecycle method listeners used reimplement refs imagine could benefits future expose lifecycle callbacks could use say easily measure frontend objects without ever store instance provide complex logic determine whether frontend object actually updated exact usecase idea approach seems lot react reusable naturally efficient seems like something avoid unless explicitly dealing uncontrolled components case option perhaps way utility seems solves lot problems refs meant solve better ways actually storing refs necessary dealing uncontrolled components uses reasonable capable thing directly instance callback called reimplementing refs asis could look something like code could easily made reusable helper could take number shapes perhaps key nt even interesting putting instances set enough decide keep updated measurements component would simply editor nt update automatically avoid remeasuring free editor updates component still remeasure get updated height", "d": "2/2015"}, {"body": "syranide already implemented firstclass refs switched callbacks nt keeping convenient imperative since need keep reference timing lifecycles nt ideal therefore comfortable deprecating current refs sure model final make sure good upgrade path codemodable", "d": "2/2015"}, {"body": "sebmarkbage facepalm", "d": "2/2015"}, {"body": "could tag every element properties unique id seems problematic watcher builds generally keeping bundle hashes static production intended production build postprocess sort even problems separate parts apps builtmaintained individually could use hidden class generate optimized diffing algorithm instead iterating properties presumably would need type since diff native components would useful nondom elements would think would optin bonus points determine properties constant perhaps using property descriptor object seems would also want reference shared unique id would identify unique set actual props check end potential differs rather n n unique sets prop names check would use heuristic inside react determine create optimized differ example updates component like jit would nt globally per rather per instance", "d": "2/2015"}, {"body": "cc sebmck", "d": "2/2015"}, {"body": "great exactly type thing mind babelbabel babel pretty strong scope reassignment tracking types optimisations relatively straightforward", "d": "2/2015"}, {"body": "optimization applied children array props object might reused independently element useful reusing empty props objects", "d": "2/2015"}, {"body": "sure need graceful degradation better throws try get sourcemaps ca nt best throw nicer error note even default output classes use defineproperty quickly becoming unmanageable support old environments maybe future net tooling nicer nodeiojs integration", "d": "2/2015"}, {"body": "reactjsnet already supports uses msie fallback available perhaps enforce usage newer msie engines modified retry without source map generation throws exception sent mobile feb pm sebastian markb\u00e5ge notifications githubcom wrote sure need graceful degradation better throws try get sourcemaps ca nt best throw nicer error note even default output classes use defineproperty quickly becoming unmanageable support old environments maybe future net tooling nicer nodeiojs integration reply email directly view github", "d": "2/2015"}, {"body": "protect jsxtransformer looks like nt protect right use otherwise master nt extra branch maybe throw reality ship sailed oh well perhaps get fresh start whatever make next feb pm daniel lo nigro notifications githubcom wrote reactjsnet already supports uses msie fallback available perhaps enforce usage newer msie engines modified retry without source map generation throws exception sent mobile feb pm sebastian markb\u00e5ge notifications githubcom wrote sure need graceful degradation better throws try get sourcemaps ca nt best throw nicer error note even default output classes use defineproperty quickly becoming unmanageable support old environments maybe future net tooling nicer nodeiojs integration reply email directly view github reply email directly view github", "d": "2/2015"}, {"body": "mental model polyfill layer reactdominput support browser would support support future ideas propagate standards fact currently implemented wrapper unobservable implementation detail perhaps nt implemented wrapper agree unobservable implementation detail would accomplish perhaps nt implemented wrapper anyway seems direct interaction underlying frontend objects something want users avoid instead favoring reduced api bridge necessary would fulfill needs users one could also reimplementedproxied community wrappers intended fiximproveextendemulate native components compatibility reduced api bridge could also provide additional benefits caching batching alternative apis suitable react environment accessing underlying frontend object would last resort idea returning actual dom node instead component ref really interesting think directionsreasons appear ca nt really boil questionsconcerns something sensible trust replaced imperative layer simply multiple calls would nt work though", "d": "2/2015"}, {"body": "knowledge displayname thing added via jsxtransformer use jsx transformer take give display name based variable assigning nt using one getting issues example jsx set javascript parser example", "d": "2/2015"}, {"body": "using gruntreact uses reacttools transform jsx nt use jsx jsbin simplicity upgraded reactjs also upgraded gruntreact uses reacttools sure work see identical example using jsx nt produce warning however regardless jsx transformer issues still believe issue official docs state nt use jsx react nt side effects within react code using using jsx", "d": "2/2015"}, {"body": "alexmcmillan taking add key object pass createclass want make pull request clear documentation", "d": "2/2015"}, {"body": "ok cool thought hinted tighter relationship reactjs jsx implied documentation guess way react put anything meaningful missing", "d": "2/2015"}, {"body": "still nt write undefined sounds like bug", "d": "2/2015"}, {"body": "expose dom component refs actual dom nodes monkey patch props setprops getdomnode onto upgrade path hmm seems kind weird especially inlight etc unless intend discontinue recommended addons would think preferable direction would away direct dom interaction going tangent including sense basically discontinuing use dom events infavor passing reactevent even new value callbacks perhaps really makes sense addon perhaps", "d": "2/2015"}, {"body": "breaking separate discussion sure mean passing reactevent anyway", "d": "2/2015"}, {"body": "deprecate replacestate things like", "d": "2/2015"}, {"body": "kharin page mentions safer use nested state property anyway could build native support would work would merge react would likely support record type maps though would still problems mixins", "d": "2/2015"}, {"body": "sebmarkbage record trick looks great sure would performance implications though react merge usual likely slower since deops property setters wanted know thoughts practice understood correctly using replacestate usecase discouraged react lends sort native support", "d": "2/2015"}, {"body": "right added spinoff issue discussion", "d": "2/2015"}, {"body": "would nt surprised coming conversation without proper context etc still somewhat new react perhaps helpful others position two basic questions today use get handle component sometimes call sometimes call method instance realize might ideal superhandy plan prevent kind thing continue supported different way currently toplevel component receives data state via setprops amp setstate usecase aim get folks move using directly prop updates realize docs suggest approach still access component instance setstate thanks great lib", "d": "2/2015"}, {"body": "yeah refs components define still work way talks happens take ref node directly like looking making img node directly case yeah recalling reactrender top level preferred solution plans change instance returned though treat state private component call ie never another instance handle expose custom setter method cases better pass new values via props", "d": "2/2015"}, {"body": "spicyj great thanks", "d": "2/2015"}, {"body": "workaround mentioned moving style class seems work us", "d": "2/2015"}, {"body": "seems sensible cases outside manipulation reactrendered dom desired though like rte safer set false modifications event listeners user content nt accidentally get overwritten diff resolution", "d": "2/2015"}, {"body": "going implement nt time work encountered bugs nonreact javascript touched react nodes broke everything", "d": "2/2015"}, {"body": "seems like would create annoying noise instances use cases direct dom mutation desirable represents actual simpliest implementation animation definitely one case also mentioned wrapping none react library widgets jquery ui etc would nt want false positives drown real warnings maybe turned hinted apply certain components", "d": "2/2015"}, {"body": "seems like would create annoying noise instances use cases direct dom mutation desirable imo cases explicitly marked perhaps attribute something quite rare", "d": "2/2015"}, {"body": "fine opting encourages general better behavior long nt need react chastising know p cases makes sense downside adding api surface area albeit small bit still seems sort silly add api development warnings", "d": "2/2015"}, {"body": "mutation dom node attributesproperties safe avoided mutation dom node hierarchy anything insertion nodes empty leaves disaster waiting happen nt issue discerning unsafe mutation safe", "d": "2/2015"}, {"body": "would useful particular introducing react legacy codebases perhaps something like jquerydojox still exists idea get rid time", "d": "2/2015"}, {"body": "reactnative released nt set date working get soon possible", "d": "2/2015"}, {"body": "would nice figure event bubbling works well cf", "d": "2/2015"}, {"body": "wow thewebworldsucks nt think many plugins go crazy stuff instance google extension rewrites anything looks like phone number link click dial via voip direct child body likely confuse react sure warn rendertobody hope plugins nt modifying parts dom think worth thinking possibility graceful solution handles general way even overwriting plugin dom changes rather warning dev hoping best sure solution food thought least could probably setup dom watch warn anyone except react modifies element rendered react", "d": "2/2015"}, {"body": "sebmarkbage took stab adding warning wording close original comment let know missed anything", "d": "2/2015"}, {"body": "actually wondering possible run mutation observer dev mode warns nodes without datareactid inserted valid cases insertions would helped catch issue much earlier", "d": "2/2015"}, {"body": "gaearon big difference two approaches mutation observer would catch offending scriptsextensions run unknowable combination extensions users app installed using warning like helps think problem arises", "d": "2/2015"}, {"body": "meant complementary approach true offense happens level", "d": "2/2015"}, {"body": "agreed would definitely cool", "d": "2/2015"}, {"body": "tracking mutation observer solution separate issue", "d": "2/2015"}, {"body": "give bit context perhaps jsfiddle calling event handler one case seen", "d": "2/2015"}, {"body": "calling try jsfiddle", "d": "2/2015"}, {"body": "nt call preventdefault unless intend prevent default behavior browser make change event work means actually handling click event preventdefault checkboxes prevents visually updated nt know calling preventdefault nt", "d": "2/2015"}, {"body": "ok fiddle forked part code someone else added problem click anywhere row expect checkbox inverted happening hope find cause thanks", "d": "2/2015"}, {"body": "nt anything wrong react using event handler incorrectly movielist onclick look like index needs first bind arguments come right order render movielist looping movies look like need create new function bound index called", "d": "2/2015"}, {"body": "ah bad thanks heaps learning", "d": "2/2015"}, {"body": "ummm zpao wrote better test case still issue clues", "d": "2/2015"}, {"body": "binarykitchen event handlers receive event object new value want similar fixed also added clones array creating new copy instead modifying old one place tends easier reason though nt strictly necessary", "d": "2/2015"}, {"body": "spicyj oh see thanks added code another problem event handler also modifies state somehow error thrown click checkbox directly selected state row click reflected checkbox", "d": "2/2015"}, {"body": "balanceiskey onchange apparently also passes value particular field first param synthetic event arg handlechange called calling translates obviously error", "d": "2/2015"}, {"body": "browniefed sorry ca nt follow nt understand mean synthetic event think could update code", "d": "2/2015"}, {"body": "binarykitchen sorry meant event argument type syntheticevent cobbled together event react make obvious happening put debugger top checkout passed", "d": "2/2015"}, {"body": "oh see fixed still code working click checkbox row checkbox rerendered", "d": "2/2015"}, {"body": "would look table components setstate getting called bound right thing render getting called right state rendercheckbox nt getting called though perhaps rowgetter returning data components decided treat reason rerender perhaps moving selected state row data would resolve regardless seems outside react hands issue components nt control edit see updates since last loaded page think comment still stands though", "d": "2/2015"}, {"body": "see tell checkbox watch changes inside selected state ab use want move selected state row data imo whole table nt rerendered one checkbox changed performance", "d": "2/2015"}, {"body": "guessing somebody already trying make performance optimizations cellrenderer nt getting called guess anyway would look try prematurely optimize make work try make faster", "d": "2/2015"}, {"body": "agree table rows", "d": "2/2015"}, {"body": "worthless nt make work first afaict nothing directly related react dig components find nt updating", "d": "2/2015"}, {"body": "ok fair enough works good", "d": "2/2015"}, {"body": "ca nt repro safari put together smaller demo repros reliably happy take look", "d": "2/2015"}, {"body": "think shows import two versions react accident see nt see evidence test case maybe related", "d": "2/2015"}, {"body": "looked actually could related expect throw matter dom component rendered var component reactcreateclass render return testutilsrenderintodocument test environment everything renders expected see changing l example return", "d": "2/2015"}, {"body": "ack feel like idiot moving assignment call seems fix issue strange nt break elements checked anyway anyone idea might", "d": "2/2015"}, {"body": "input elements implemented hood wrapper deals events making controlled component closing already aware sort problem manifest multiple copies react already etc track", "d": "2/2015"}, {"body": "second issue browser automatically fixing invalid dom tree react may possible react warn dev mode unaware reasons drag events working svg elements try take look weekend", "d": "2/2015"}, {"body": "thanks dustan super familiar internals would nt even know start let know help thu feb pm dustan kasten notifications githubcom wrote second issue browser automatically fixing invalid dom tree react may possible react warn dev mode unaware reasons drag events working svg elements try take look weekend reply email directly view github", "d": "2/2015"}, {"body": "cc sebmarkbage syranide expertise trycatch even throwing error catching thus comment catch expect behavior sure coming block", "d": "2/2015"}, {"body": "n ca nt reproduce bug anymore one example used maybe another instance nt wrapped trycatch let see reproduce issue", "d": "2/2015"}, {"body": "ok got reproduced happens works fine clarify anyone stumbling across future code linked version", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "quite certain correct asis click stands click singleclick", "d": "2/2015"}, {"body": "syranide yup vanilla events happen usual additional event dispatched clicks happen within certain timeframe binarykitchen another interaction paradigm use feature recommend exploring double click support nt worth annoyance personal experience", "d": "2/2015"}, {"body": "see onclick stands clicks single clicks want distinguish single double clicks yaycmyk understand agree double clicks unusual working large ui double clicks important change behaviour otherwise many customers get confused currently migrating react would sad double click support", "d": "2/2015"}, {"body": "want distinguish single double clicks trying snark something take browser react simply best normalize according defined standards able achieve distinction native events free bind manually wrap reusable component perfect close", "d": "2/2015"}, {"body": "binarykitchen suppose could set timer single clicks see double click event happens ms artificially slowing ui perhaps imperceptibly forcing single clicks wait anyway react job syranide said bug", "d": "2/2015"}, {"body": "good point syranide let say want add two new event handlers called reusable table mean reactbased examples adding custom events already wrote hack coffee distinguish two events figuring hide parent class react components inherit coffee onrowclick e index", "d": "2/2015"}, {"body": "simulate doubleclick handler unfortunately means single clicks slower fire wait see user action actually doubleclick something like", "d": "2/2015"}, {"body": "binarykitchen bind manually", "d": "2/2015"}, {"body": "thanks figured new parent component dealing double clicks", "d": "2/2015"}, {"body": "probably best bet built top pretty sure uses facebook react uses expect continue working react future", "d": "2/2015"}, {"body": "sure wed feb pm dustan kasten notifications githubcom wrote probably best bet built top jasmine pretty sure uses jsdom facebook react uses expect continue working react future reply email directly view github swapnil netankar", "d": "2/2015"}, {"body": "currently using karma mocha webpack sinon building tests result still working tho bad using karma plugins actually test browsers easily debuggable compared jest however since using lot libs tools sometimes makes wrap head around karma webpack causes unknown problem problems come webpack webpack loaders instance currently able use mode mocha test fail unknown message would nice time provide kind boilerplate picked company repo", "d": "2/2015"}, {"body": "correct use jest built top jasmine jest configuration calls jsdom simple tests phantomjs complex tests obviously best bet run inside real browser also difficult setup strongly opinionated testing environment use go whatever best meets needs since nt bug react going close issue basically takes radar feel free continue conversation thread move discussion stackoverflow", "d": "2/2015"}, {"body": "jest always uses jsdom never phantomjs react testing runs set tests environments though well browser local debugging sauce labs obviously work one would want fb primarily rely jest webdriver tests strongest suggestion", "d": "2/2015"}, {"body": "yeah", "d": "2/2015"}, {"body": "guess need", "d": "2/2015"}, {"body": "hey sebmarkbage would like get started would able give context", "d": "2/2015"}, {"body": "something like assuming using jsx transformer class means shows debuggers thing method names stack trace error include instead whatever browser default name", "d": "2/2015"}, {"body": "chenglou let languish nt bad rebase", "d": "2/2015"}, {"body": "fairly certain reported also assuming typo example code actual code experiencing issue", "d": "2/2015"}, {"body": "yep typo nt real code pulling real project code structure slightly different", "d": "2/2015"}, {"body": "moved facebookjstransform", "d": "2/2015"}, {"body": "equivalent value object empty otherwise nt want warn nt make required effect testing presence key something would recommend", "d": "2/2015"}, {"body": "agree ca nt think many use cases would want force user specify value would willing accept null valid value practical purposes isrequired warning null sensible expected behavior", "d": "2/2015"}, {"body": "spend minutes looking gitrepotree take say grain salt looks like removed internals merge example marked deprecated changed license verbage maybe added removed warnings appear development mode documentation lots maybe buildsystem optimizations repo personally speculate released soon somebody writing blog post speak explaining wtf happen major changes take place outsider speculating literally idea released officially nt look like making significant changes changed mind still nothing crazy api mostly internals literally idea talking", "d": "2/2015"}, {"body": "paglias sure find umbrella issue interesting", "d": "2/2015"}, {"body": "concur rickbeerendonk actually went files released quite bit realized umbrellas checked might released immediately depends important issues fast take patch", "d": "2/2015"}, {"body": "also think would great started project reactupgrade python script built codemod goes old propertiesmethods asks user want replace new propertymethod would good knew updates users could seamlessly upgrade without worries still working update open contributions think warnings good idea ambiguous tells something wrong specifically know transition new version react need use exporting classes indicative change needs happen another note people use module libraries like requirejs commonjs etc essentially acting factory find weird introduced since would end used like see beneficial memory wise someone nt use module loader assuming many people going lot people fully released thoughts please correct wrong", "d": "2/2015"}, {"body": "rnbwd sorry sort github glitch caused boxes checked fixed umbrella issue accurately reflect progress date correct majority changes internals rather public api try really hard minimize publicapi churn biggest changes public api refs still figuring classes documented joshbedo runtime error messages generally suck life working dynamic language like javascript try usefuldetailed possible regards createfactory introduced createfactory much exposed createfactory previously bundled createclass change several advantages including simpler api classes future better support static methods better support automocking better language interoperability thought longandhard change documented decisionramifications hope clears misgivings may factory change", "d": "2/2015"}, {"body": "anxious release process building new components rather complex already using babel flux implementation alt know fixedtablecomponent capable handling upgrade seems logical embrace next class syntax react fits well current work flow hesitant start writing especially depreciated hard use officially released due peer dependencies libraries wondering worth process migrating know experimental beta recall previous beta lasting days without much change beta official release seems like ambitious endeavor probably substantial release terms modifying api seen since using react", "d": "2/2015"}, {"body": "going changelog betas time around consider moving forward rnbwd answer timeline question approaching rc soon gone short time rc final nt actually done betas past part nt need start using classes could write something forward compatible easily", "d": "2/2015"}, {"body": "hooray jsfiddle supports tried make changes docs one problem left code gets shown properly result tab empty external resources fiddles work guess facebook needs update fiddles first docs get changed", "d": "2/2015"}, {"body": "ca nt fork fiddle change urls change docs submit pr since suspect fb uses static blog generator sources changed instead resulting html", "d": "2/2015"}, {"body": "sources docs repo facebook wants control fiddles fork fiddles", "d": "2/2015"}, {"body": "okay wait", "d": "2/2015"}, {"body": "like people view page served embeds break need instead leave protocol use works pr set ready go update fiddles independently", "d": "2/2015"}, {"body": "zpao far tell would work using bit nicer opinion fiddles get updated independently would nt update change urls fiddles", "d": "2/2015"}, {"body": "move things forward made pull request atom support browsers including maybe even older todo update fiddles thinking react page", "d": "2/2015"}, {"body": "cody seems like fixed means closed looking issues fix contribute reading seems fixed", "d": "2/2015"}, {"body": "sure every page green lock least closing feel free send prs run straggling", "d": "2/2015"}, {"body": "link tests", "d": "2/2015"}, {"body": "related tests actually set value dom node first simulating event nt actually fire native event component nt anything event case input wrapper nt actual dom node wo nt updated also ca nt use like actually set node pass explicitly merging like nt work time going say set value directly ensure triggering change nt actually change node value", "d": "2/2015"}, {"body": "fiddle code pasted code change made give actual url picture dom updates every seconds everything looks fine guess need see code", "d": "2/2015"}, {"body": "ok link work", "d": "2/2015"}, {"body": "see problem smiley try render element rendering works", "d": "2/2015"}, {"body": "wont work", "d": "2/2015"}, {"body": "change properties container element children changed element children allowed ca nt used render", "d": "2/2015"}, {"body": "ok close issue merci bien could think behavior improved", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "actually disconnect expectations reality working browser unfortunately simulating events quite browser click submit button simulating click essentially creates native event dispatches button however event fired wanted test exactly like browser would behave trusted events everything need run tests browser probably use something like selenium webdriver accurately get results otherwise want simulate click submit separately", "d": "2/2015"}, {"body": "agreed think fair expect something named reacttestutils event simulation would tie reacts potentially browserenvironment aware event model would work though considering adds lot complexity reacttestutils eg simulating return key press input element would also trigger parent form onsubmit handler worth adding reacttestutils docs", "d": "2/2015"}, {"body": "thanks guys quick fix beers", "d": "2/2015"}, {"body": "actually undefined get extra space classname cares", "d": "2/2015"}, {"body": "also write see though unlikely due perf", "d": "2/2015"}, {"body": "thanks spicyj context figured already investigated", "d": "2/2015"}, {"body": "knowledge asapjs react maintained codebase following url home asap project module q seems share issue projects probably indexof processtitle look node string", "d": "2/2015"}, {"body": "exists nowhere react codebase seemingly related react", "d": "2/2015"}, {"body": "yes apologies looked closer made assumption react sorry time wasting", "d": "2/2015"}, {"body": "worries feb dominataa notifications githubcom wrote yes apologies looked closer made assumption react sorry time wasting reply email directly view github", "d": "2/2015"}, {"body": "additional tests seem allude events triggered also experienced event triggered", "d": "2/2015"}, {"body": "hmm ca nt refs queue componentdidmount queue ref component order componentdidmount componentdidmount componentdidmount componentdidmount ref could interleaved ref ref ref pa componentdidmount pb componentdidmount pa ref pb ref think specifically child refs need resolve parent componentdidmount called right componentdidmount ref componentdidmount ref pa componentdidmount pa ref componentdidmount ref componentdidmount ref pb componentdidmount pb ref saying pa componentdidmount needs come cb ref", "d": "2/2015"}, {"body": "could fire refs child componentdidmount would guarantee refs resolved componentdidmounts fired sure best worse seems like two reasonable choices either keeping master think choice needs based easiest deal trying compose two events", "d": "2/2015"}, {"body": "thought nt working assigning back", "d": "2/2015"}, {"body": "think ship rc current state see havoc causes", "d": "2/2015"}, {"body": "updated thanks", "d": "2/2015"}, {"body": "definitely stupidity problem within overlay rendered transitioned transitioning back login assuming rendered differently causing invariant solution use static perform auth check", "d": "2/2015"}, {"body": "invariant probably harsh console warning", "d": "2/2015"}, {"body": "know cause asked", "d": "2/2015"}, {"body": "seems like also dupe", "d": "2/2015"}, {"body": "going close duplicate tldr bit tricky transferpropsto whatever instead might props need passed even nt consume said think good idea would prefer optimize common case unrecognized prop mistake rather less common case people transferring props easy might seem first glance", "d": "2/2015"}, {"body": "mounting node html html document", "d": "2/2015"}, {"body": "set ca nt imagine anything bug safari react sets calls could wrong ca nt see anything moment", "d": "2/2015"}, {"body": "seems work fine fiddle suspecting gulp reactify", "d": "2/2015"}, {"body": "aronallen fiddle work shows empty object works", "d": "2/2015"}, {"body": "edit seems reproducible bit quick returned rect fiddle properties", "d": "2/2015"}, {"body": "seems error lies consolelog safari react resubmitting bug apples feedback", "d": "2/2015"}, {"body": "thanks tracking", "d": "2/2015"}, {"body": "going guess relevant", "d": "2/2015"}, {"body": "cc sebmarkbage", "d": "2/2015"}, {"body": "cc leebyron", "d": "2/2015"}, {"body": "gurdasnijor using react", "d": "2/2015"}, {"body": "html output looks like using react current production version need explicitly cast immutable collection array js immutablelist map gt toarray wo nt necessary react children accepts iterable array include immutable collections well collections", "d": "2/2015"}, {"body": "leebyron sebmarkbage running checked verify issue nt produced installed npm thanks quick responses closing", "d": "2/2015"}, {"body": "sounds plausible interested making fix requires lot code probably worth line two extra happy take", "d": "2/2015"}, {"body": "tried integer instead float fact onchange never fires ie", "d": "2/2015"}, {"body": "confirm fiddle broken", "d": "2/2015"}, {"body": "hi broken windows ie also using ie devtools working latest ff chrome", "d": "2/2015"}, {"body": "syranide interest taking think probably might need handle different event ranges like use clicks checkboxes", "d": "2/2015"}, {"body": "windows internet explorer", "d": "2/2015"}, {"body": "oh work well updated every step updated end user choice", "d": "2/2015"}, {"body": "zpao nt really done much actual event normalization feels somewhat alien believe spicyj made amazing implementation", "d": "2/2015"}, {"body": "kud try native event listener", "d": "2/2015"}, {"body": "checked native change event fires fine drag react onchange seem fire though input nt fire", "d": "2/2015"}, {"body": "spicyj seems input event fire range types ie react trying use issue seems check fails ie chromeff sure ya checks like could change changeeventplugin include sort check make sure uses change event addendum also seems case", "d": "2/2015"}, {"body": "browsers behave different react behaving like one browsers even inconsistent browsers ie chrome firefox react ie react chrome react firefox drag onchange per step oninput per step oninput per step oninput onchange per step oninput onchange per mouse move drag end onchange onchange key leftrightupdown onchange oninput onchange oninput oninput onchange oninput onchange codepen interesting thread", "d": "2/2015"}, {"body": "xymostech bug mentioned yesterday interested involves working changeeventplugin listen input change events inputs current code structure nt super amenable change possible little refactoring", "d": "2/2015"}, {"body": "dupe", "d": "2/2015"}, {"body": "steps repro first hearing problem cc syranide", "d": "2/2015"}, {"body": "yes access code tomorrow prototypical project put repo pass link browserifybased straightforward get running", "d": "2/2015"}, {"body": "documentcreateelement style innerhtml unknown runtime error ie get call node nt support case react try update contents check tag name node report back please", "d": "2/2015"}, {"body": "yes read something problem unfortunately nt direct control particular call either way repo github hopefully reproduces issue would happy hear figured", "d": "2/2015"}, {"body": "flq works fine ca nt spot anything funky code think anyway need tag name node reproduce end simply enable debugging check", "d": "2/2015"}, {"body": "okay node question section unknown causes throw badly try set innerhtml changing div fixed issue dizzyface sorry bother thanks looking leave satisfaction closing bow", "d": "2/2015"}, {"body": "flq ok need use cough minimal fork uses simple hack make behave style correctly sorry bother thanks looking leave satisfaction closing bow worries", "d": "2/2015"}, {"body": "link", "d": "2/2015"}, {"body": "try", "d": "2/2015"}, {"body": "thanks answer yeah works", "d": "2/2015"}, {"body": "see", "d": "2/2015"}, {"body": "currently thinking taking following steps implement function implement next initially returns empty dummy element updated webworker create webworker wrapper component optimize render call using prerender exactly sure yet starting webworkers wonder performance penalties syncing ui changes dealing events passing react inside webworker perhaps something smaller deal nonwebworker browsers feedback wanted", "d": "2/2015"}, {"body": "cecilemuller problem using dom longer integrate synchronous apis build high level wrapper apis main thread imo best way building high level apis main thread build react components expose asynchronous apis think solution react react rendering sanderspies top section requires invasive changes core working anyway need help basic stuff start worker load modules worker determine root render unit test system", "d": "2/2015"}, {"body": "start worker see following solutions problem separate file includes necessary worker would require extra build steps create worker fly blob work every browser expect would performance penalties also resolving dependencies worker going painful impossible without extra build steps start entire build multiple workers still would still require usage build tool yeah nt see working without build tool preference would go first one determine root render would expect main react always start main thread components leaving stubs thread write want course writing dom still needs done via normal react reconciliation mechanism possible single worker used multiple components makes bit challenging probably extra id needs given communicate right component unit test system would testing render function would initially show webworker stubs testing result webworker would something different something like callback webworker result could work comes mind options missing something would definitely like hear", "d": "2/2015"}, {"body": "bug nt understand another value could send simulate functions pass event get click show checkbox changed", "d": "2/2015"}, {"body": "nt think might solve problem", "d": "2/2015"}, {"body": "nope", "d": "2/2015"}, {"body": "closing really jsx react already created issue", "d": "2/2015"}, {"body": "excerpt alternative using jsx syntax bind js class componentbase constructor var excludefuncs render objectgetownpropertynames objectgetprototypeof foreach function func excludefuncsincludes func amp amp typeof func function func func bind setstate state consolelog state class component extends componentbase onclick thissetstate items test var x new component var xonclick syranide would possible reopen keep discussion implementing react core use thread via jsx explore options edit use better compatibility", "d": "2/2015"}, {"body": "keep discussion implementing react core may misinformed think whole point making classes available react stop trying provide type system thus autobinding non based classes nt opinion belong core", "d": "2/2015"}, {"body": "think point another class system use standard whilst favourite suggestion still via jsx overriding prototypal properties like uncommon see array instance property overrides prototype property edit forgot actually another thread let keep closed continue discussion", "d": "2/2015"}, {"body": "believe former misuse target vs currenttarget please pardon intrusion", "d": "2/2015"}, {"body": "currently supported react seems always attach listeners manually neat works", "d": "2/2015"}, {"body": "exactly perf tools addons see printdom particular let know looking something else", "d": "2/2015"}, {"body": "spicyj tried definitely looking perf timers looking perf counters need presentation work done time spent work please reopen issue measuring time spent different browsers worst spend time various operations others different systems spend time operations others better cpus factors even system decent ca nt really assume many resources browser time trying work dev machines since focusing work usually dedicated lot resources task dev machines also may buffed user machines even worst browser installed hard emulate userland times hand measuring work done many hard dom changes many easy changes many changes intuitively tell either task may run poorly soandso browser based operations counters task work needs task efficient good enough given state changes involved also specific issues perf api intended work api seems specifically designed hand tool run console rather integrate project nothing measurement tooling go along inbrowser frame data personally need instrumentation ondemand tool grabbing something like initial render fairly straight forward grabbing render changes seems really akward something like work example documentation really mentions passing get mountunmount common case common case performs state changes mountunmount cost preferably measured part cost parent state changing timing data useful ca nt really say definetly lot time investment integrating serious level able get useful usable data even really really simple example since easier conceptualize rightwrong small changes state rather everything easier fix well requires much minute instrumentation thing really interested excluding components rooted separate dom node ie potentially people work otherwise want counterstimers fire back every diff virtual representation every actual work set satisfy diff required changes yes realize could potentially stick mixin maybe even sure nt bork perfstart many times stick everywhere lot busy work conceptually really really simple api prints console sorry interested printing console actually interested data either customize way print console right really filter want display want b build sophisticated easier use way visualizing data simple api boilerplate dealt simple helpers inside perf api js var countdiff function prev next var diff map next function val key return val prev key return diff prevvirtualcounters diffs componentsdiffed prevdomcounters domnodesadded dommounts domattributechanges domtextchanges example js var renderingunit reactrender documentqueryselector mountnode simple analysis renderingunitonvirtualrepresentationchange function counters countdiff prevvirtualcounters counters consolelog diff renderingunitondomchange function counters similar onvirtualrepresentationchange frame analysis globalrequestanimationframe function virtualcounts renderingunitgetvirtualrepresentationcounters domcounts renderingunitgetdomchangecounters animation etc visualising individual components rather markers go though hoops setting startstop essentially point say would simply add text array counters array reset every time new diffchange reported essentially gives ability filter want similar something like network tab filter css xhr etc simple usage example", "d": "2/2015"}, {"body": "srcspider describing seems like fit well gurdasnijor presented reactconf loader could inject work done perf tracker describing automatically even part react perf tools", "d": "2/2015"}, {"body": "irvinebroque thats bad idea would nt better implemented directly react main issue solution make heavily coupled reacts current implementation impossible write anything break every single patch react well use world break loosely like give false results", "d": "2/2015"}, {"body": "see also want get consistent story things obviously yet", "d": "2/2015"}, {"body": "thanks spicyj thought searched posting maybe forgot remove filter", "d": "2/2015"}, {"body": "although nt think supports custom functions", "d": "2/2015"}, {"body": "thanks gaearon really hoping something use without preprocessing necessary want distribute part library", "d": "2/2015"}, {"body": "proptypes functions throw error prop nt match expected value could actually define proptypes", "d": "2/2015"}, {"body": "thanks jsfb understood would like able use outside react reasonably think going build fun", "d": "2/2015"}, {"body": "proptypes functions return error ftfy yea super complicated hey open source repurpose code long license right plans pull going close", "d": "2/2015"}, {"body": "use reactproptypesany basically disables typechecking lets pass anything want sure public api take grain salt might subject change time without notice careful nothing magical default proptype validators functions validate property throwing error property invalid write validator get started look implementation default validators closing issue since technically bug future reference stackoverflow best place questions bugs", "d": "2/2015"}, {"body": "write custom validator want suppose real question weather react discouraging using component constructors props architectural reason", "d": "2/2015"}, {"body": "ca nt repro rate anything fancy touch events sending twice means receiving twice browser nt know could fix", "d": "2/2015"}, {"body": "tested ipad air simulator ios", "d": "2/2015"}, {"body": "spicyj thank reply maybe right although read reactjs source code understand works issue exists actually please test real ios device simulator maybe safari make something wrongand example code simple exclude wrong", "d": "2/2015"}, {"body": "dexbol go see bug safari replicated basic javascript nonreact", "d": "2/2015"}, {"body": "camspiers thank much sorry carelessness safari bug", "d": "2/2015"}, {"body": "welcome", "d": "2/2015"}, {"body": "think binding parent forceupdate props nt representation yet children may rendered nt lifecycle state compositelifecyclestate null notice pass parent prop also ca nt use setstate parent either reasons strange thispropsparentismounted considered true actually call forceupdate component within componentwillmount already run lifecycle methods children representation compositelifecyclestate mounting pretty sure calling thisforceupdate nothing rendered yet still manipulate state props rendered correctly", "d": "2/2015"}, {"body": "well callback called one easily verify alerts nt make sense first call outer outer moments later inner", "d": "2/2015"}, {"body": "take look tldr calling setstate forceupdate notmounted component code smell strongly suggests leaking objects prematurely cleaning references removed throws invariant violation attempt force clean code practice probably aggressive discussion downgrading invariant warning maybe even noop technically identical think issue sufficiently related mark duplicate", "d": "2/2015"}, {"body": "yes agree solving problem allowing called thanks", "d": "2/2015"}, {"body": "case makes sense suppose someone attaches onchange listener root document hotkey navigation whatever would easy developer create form toplevel component forget attach onchange handler using components may even aware ancestor attached change handler also example form immediate parent formatting code might lot less obvious event handled reasons warning makes sense dev warning fatal easy workaround attach noop change handler documents example warning still useful even change event handled parent easy workaround also helps give developer nice place document going close desiredexpected behavior", "d": "2/2015"}, {"body": "makes sense thanks suggesting workaround really big form warnings drowning real warnings", "d": "2/2015"}, {"body": "zpao never really liked way turned focus mounted decent way least also already manually focused elsewhere nice kind tricky ignore browsers nt support could make something smart nt focus focus already set either perhaps nt reusing far supported behaves would expect page load browsers good yeah makes sense add markup serverrendering currently ca nt add markup selectively must remove markup reusing must rendered markup clientside seems solve need something like think make server clientrendering detectable reusing incur additional render transitions server clientstate allowing properties removed etc something seems creeping elsewhere able tell server clientrendering apart able generate different markup two", "d": "2/2015"}, {"body": "must rendered markup clientside issue using rendering client side", "d": "2/2015"}, {"body": "jsfb decided use every browser unique interpretation work literally browsers differently overloading rendering markup time seems like bad idea", "d": "2/2015"}, {"body": "ok probably going get rid tag whitelist eventually anyway would sending autofocus dom behavior autofocus browserdependent user beware maybe something clean behavior make consistent entirely clear though done easilywell seems reasonable either way think assumption autofocus ca nt used clientside nt taken givenassumption going forward correct behavior see would make autofocus work consistently possible environments ie isomorphic", "d": "2/2015"}, {"body": "maybe something clean behavior make consistent entirely clear though done easilywell seems reasonable problem iirc ff autofocuses pageload chrome autofocuses initial element creation ie autofocuses every time element becomes visible ios autofocus etc something like memory fuzzy total mess literally useless anything pageload targetting specific browser overloading normalized behavior ok probably going get rid tag whitelist eventually anyway know talked ca nt see happening practically translation attribute property arbitrary would handle boolean attributes avoid garbage ending markup attributes really forwarded asis react dom needs good safe abstraction removing whitelist going opposite direction regardless enticing know", "d": "2/2015"}, {"body": "second would huge boon performance using react clojurescript", "d": "2/2015"}, {"body": "yes supporting map allow many possibilities cursors etc sounds good", "d": "2/2015"}, {"body": "actually quite good idea would love see react without clojurescript offers considerably improved styles working react environment", "d": "2/2015"}, {"body": "suppose main thing blocking keyref passed like props useable syntaxapi allow adding jsx would pretty straight forward xml createelement variadic problem potential solutions meta object key ref js breaking change reactcreateelement tag map childrenalwaysasanarray metaorundefined reactcreateelement tag props map key ref childrenalwaysasanarray add another function makes explicit react treat second argument opaque data structure metadata separate tag map metaornull children generic react agnostic array see unsure feasible performance tag map childrenalwaysasanarray metaorundefined related consider using jsonml notation reactelement", "d": "2/2015"}, {"body": "oh nt already", "d": "2/2015"}, {"body": "yesssss", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "actually verified using objects props exactly objects intended seems set known keys used maps way higher memperf overhead objects props would assume ps also would access specific prop universal way possible afaik", "d": "2/2015"}, {"body": "syranide case using immutablejs turn component state immutable maprecord would like able props order api object far perf goes way make props immutable along state would allow us effectively perform equality checks shouldcomponentupdate doubt slightly higher memperf cost immutable maps would ever much issue stands check state equality immediately still form shallow equals comparison props object slower also robust", "d": "2/2015"}, {"body": "syranide many well known old tricks supporting hash map interface incurring small overheads common approach encode small maps typical many programs including react arrays", "d": "2/2015"}, {"body": "far perf goes way make props immutable along state would allow us effectively perform equality checks shouldcomponentupdate dmhood objects immutable immutability enough get away simple equality test nt know would even go universally reusing nonmutated props renders many well known old tricks supporting hash map interface incurring small overheads common approach encode small maps typical many programs including react arrays swannodette certainly making faster nt make fast object hidden class cheaper instantiate use less allocated memory faster access object seems like obviously correct ds props state ask maps nt replaced objects replaced objectsasmaps anyway assume cjs sees differently might make sense afaik nt make sense regular react would even come big cost", "d": "2/2015"}, {"body": "syranide explain big cost", "d": "2/2015"}, {"body": "skrat vs ca nt also memory perf may less measurable", "d": "2/2015"}, {"body": "syranide allocation access costs supporting map interface almost entirely userland huge bottleneck removes object iteration cost react eats everywhere reconciliation going faster iterating object checks iterating array never seen former outperform later couple memoization story provides suspect immutablejs map props based programs kick regular react ones ass", "d": "2/2015"}, {"body": "swannodette huge bottleneck removes object iteration cost react eats everywhere reconciliation object iteration slow afaik current relatively costly really problem soon drop safe proceed assumption environment worth supporting breaks object prototype would say also could also provide abstraction returns object list keys thus avoid check without resort overheads related maps nt include overhead actually dynamically creating accessing underlying array structure apis nt designed standpoint current performance characteristics ask couple memoization story provides suspect immutablejs map props based programs kick regular react ones ass would realistically perform universal fast memoization props perhaps missing something ca nt see would accomplish also memoization work equally well objects maps nt favor one", "d": "2/2015"}, {"body": "syranide skrat thispropsfoo vs thispropsget foo ca nt also memory perf may less measurable ca nt seems like could change createelement function accept constructor collection like immutable map could smart building right type props object cc brigand suggestions think majority cases perf difference going negligible really would help us turning immutablejs clojurescript currently program around props object fit whatever paradigm choose dmhood objects immutable immutability enough get away simple equality test making immutable give us equality test adding map interface allow us easily use libraries immutablejsclojurescriptetc bring along features need nt know would even go universally reusing nonmutated props renders sure mean elaborate", "d": "2/2015"}, {"body": "nt know would even go universally reusing nonmutated props renders syranide readable way requires compile time transforms nonchanging props js rcc render return rce comp foo bar var foo bar rcc render return rce comp already due keyref props object react allocates new object copies properties anyway think anyone confirm could smart building right type props object dmhood nt mean could mix normal props collection object automatically converting eg map object infeasible performance impossible keys nt stringsymbol would also lose wrappercursor passing good main requirement feature would react treats props opaque nt attempt inspectmodify passes around needs go see people talk equality comparison immutable data structures clear ca nt determine contents equal using wo nt give false positives false negatives common actually use determine inequality object contents js would make constructor need list instances memory leak compare contents tobecreated object objects type ie feasible context shouldcomponentupdate nt cause return false incorrectly need mindful reducing false negatives shouldcomponentupdate use proptypes could also create tooling generating shouldcomponentupdate based proptypes getinitialstate plain comparisons rather loop runtime object properties sure someone eventually post link find time one prop points immutable object state one key pointing immutable object basically immutable state props issue saving propsstate object allocation little typing vs", "d": "2/2015"}, {"body": "need wrap jsx translate html elements contexts translate react classes", "d": "2/2015"}, {"body": "thanks lot wasting much time silly mistake", "d": "2/2015"}, {"body": "yes", "d": "2/2015"}, {"body": "zpao example syntax please", "d": "2/2015"}, {"body": "syntax classes nt affect", "d": "2/2015"}, {"body": "could react know context use event handler attached dom component react could use context calling callback probably wanted composite instance nt directly tied element returning", "d": "2/2015"}, {"body": "hm thought native event handlers attached node handlers declare within method stored kind internal event storage component mounting time noticed react stores component instance inside object possible store proper bound handlers event storage well find unmounting", "d": "2/2015"}, {"body": "would want bind context button would call mention already get access button", "d": "2/2015"}, {"body": "would want bind context button please read description issue binding event handlers component instance htmlnode", "d": "2/2015"}, {"body": "sorry think get answer thread yes would solve issue although nt think suggestion works function definitions imported instance class method applied already ca nt class syntax without using hacks workarounds issue call becomes completely lost context class instance since nt access context ca nt bind functions way counteract would use pass argument like arrayprototypeforeach arrayprototypemap nt different writing still really ugly jsx suggestion would writing nt deal ugliness", "d": "2/2015"}, {"body": "one prefer react get way let bind functions however want auto binding weird non idiomatic javascript presumes much especially give performance concerns bind admittedly proper class behavior language would nt want react taking liberties like outside createclass", "d": "2/2015"}, {"body": "sorry yet third posting code managed achieve autobinding works overriding prototype functions bound functions take back suggestion work js class componentbase constructor objectgetownpropertynames thisconstructorprototype foreach function func componentbasenoautobindfuncsincludes func amp amp typeof func function func func bind setstate state consolelog state componentbasenoautobindfuncs constructor render class component extends componentbase onclick thissetstate items test var x new component var xonclick", "d": "2/2015"}, {"body": "admittedly proper class behavior language would nt want react taking liberties like outside createclass", "d": "2/2015"}, {"body": "unfortunately would nt help still need walk tree autobind hotpatched methods seems still somehow hitting shouldcomponentupdate application nt quite tracked wherehow case specifically checked put reproducible example take look", "d": "2/2015"}, {"body": "also use something akin om state completely outside react single jsbased atom everything always rerendered top pure functional way want able hot swap user language retranslate react app target locale without refresh whole html page use reactintl uses context would ok recursive forceupdate top component locale change related", "d": "2/2015"}, {"body": "note tested unmount remount toplevel node updated context see unmount remount node event loop tick visually looks like recursive forceupdate component unmounted simply rerendered fresh vdom guess seems behavior constant unmountingremounting event loop also appear randomly settimeout introduced", "d": "2/2015"}, {"body": "root issue build tool browserify dependency browserpack dependency umd templatejs checks window global self send pr fall back last resort recommend using instead often used determine script run browser", "d": "2/2015"}, {"body": "thanks hint filed another issue", "d": "2/2015"}, {"body": "fyi issue fixed umd meanwhile found another incompatibility react nashorn available nashorn instead nashorn defines global function using simple workaround get react example working jvm js var global var console consoledebug print consolewarn print consolelog print dunno fixes possible issues found far", "d": "2/2015"}, {"body": "docs say require console polyfill browsers engines nt support nt sound like anything else need closing", "d": "2/2015"}, {"body": "thanks pointing", "d": "2/2015"}, {"body": "since artifact using jstransform esprima filed issue elsewhere pick changes tahnks filing", "d": "2/2015"}, {"body": "way get around defining mixins functions component decide naming things js var makestoremixin function name store var makestate function data var name data return var mixin js var view reactcreateclass mixins makestoremixin foo foostore makestoremixin bar barstore render function assuming foostore barstore getstate return arrays return thisstatefoolength thisstatebarlength", "d": "2/2015"}, {"body": "cool thanks definitely keep mind marty author suggested simpler way around framework may end applying", "d": "2/2015"}, {"body": "hmm since actually parse error file issue nothing react", "d": "2/2015"}, {"body": "yes bad sorry", "d": "2/2015"}, {"body": "hmm looks like error tests use work fine display duplicate tags devtools could bug devtools plugin", "d": "2/2015"}, {"body": "cc sebmarkbage think might devtools issue new since", "d": "2/2015"}, {"body": "wrapped react composite devtools exposes instances sort weird artifact bug think deduped make sure since devtools broken atm", "d": "2/2015"}, {"body": "think content behavior closing", "d": "2/2015"}, {"body": "fixed yes feb pm ben alpert notifications githubcom wrote think content behavior closing reply email directly view github", "d": "2/2015"}, {"body": "lot stuff audiovideo changes due user interaction probably need real plan make something works", "d": "2/2015"}, {"body": "posterity attribute affected user interaction agree might make sense make properties controllable always pose problem serverrendering probably something react provide outofthebox left party components instead", "d": "2/2015"}, {"body": "pretty sure would require huge rewrite minimal gain already caching output serving cdn get much better results", "d": "2/2015"}, {"body": "yea would pain nt want write completely streaming markup browser definitely thing people serverside rendering story nt great might turn realistic way react architected somebody wants investigate interested hearing goes", "d": "2/2015"}, {"body": "already caching output serving cdn get much better results unfortunately already using caches hitting cdn pretty much everything however views much variation per country screen size estimating screen sizes based ua session server side userspecific information benefit caching would interesting see experiments least even never made core", "d": "2/2015"}, {"body": "jussikalliokoski zpao quite simple might future", "d": "2/2015"}, {"body": "syranide yea thinking pr even big assumption flushed nt worked streaming markup nt know might change though might actually matter much", "d": "2/2015"}, {"body": "zpao well built like replace something internal voila", "d": "2/2015"}, {"body": "made something based syranide try quick benchmark fed callback application mbp first landing view pushed downstream within lt whereas rendering whole document would flushed downstream", "d": "2/2015"}, {"body": "seems like would great rendertostring rendertostaticmarkup", "d": "2/2015"}, {"body": "way make comment jsx javascript comment otherwise would way jsx make difference text comments", "d": "2/2015"}, {"body": "see configurable parsing options probably never need text", "d": "2/2015"}, {"body": "sure maybe address issue", "d": "2/2015"}, {"body": "going close let discussions go repo", "d": "2/2015"}, {"body": "always equivalent aside potential static transforms type checkers fntostring probably typo", "d": "2/2015"}, {"body": "may reason looks unnecessary feel free get rid", "d": "2/2015"}, {"body": "fix go next docs push thanks", "d": "2/2015"}, {"body": "controlled component gets value props event calls function within component usually means alter props guess using solve problem hope helps otherwise please give information usually best way make minimal repo case jsfiddle", "d": "2/2015"}, {"body": "read docs controlled components tried using nt seem fix issue fiddle", "d": "2/2015"}, {"body": "thanks fiddle made changes main fix remove event handler maybe one devs explain breaks", "d": "2/2015"}, {"body": "really interesting find cody thanks help", "d": "2/2015"}, {"body": "actually use event checkboxes attempt normalize change handling actually makes browser visually update even actually toggling may actually want use instead depending trying achieve minimal example duplicating happening pure js fun fact putting toggle make work browser acts like nt know", "d": "2/2015"}, {"body": "interesting zpao thanks insight good know checkboxes actually fires click event documented anywhere", "d": "2/2015"}, {"body": "implementation detail nt worry sometimes becomes slightly relevant", "d": "2/2015"}, {"body": "sounds good thanks help", "d": "2/2015"}, {"body": "yep vsiao right nt updated docs yet approach final", "d": "2/2015"}, {"body": "far mixins made reactmixin based nonreactspecific smartmixin library far usefulness classes seems aiming less react specificness better worse", "d": "2/2015"}, {"body": "yeah ima blame previous comment ignorance obviously read post properly looks great", "d": "2/2015"}, {"body": "syranide think definitely transition period everything fits place neatly esx catches think vision behind current direction sound come instead using vendor specific reactcreateclass vendor specific behaviors features interop libraries use native classes native classes drawbacks compatibility classes transprilers code mangling intermediary layers js var react require react objectassign combination objectassign objectcreate first paramter etc compose different objects vary depending needs merge function popular library also suffice var merge require somemergefunction var hellomessage function reactcomponentapply arguments hellomessageprototype merge reactcomponentprototype render function return hello thispropsname nt need brigand library either example vanilla javascript js var react require react var merge require somemergefunction var somemixin require mixinssome var foo function reactcomponentapply arguments fooprototype merge reactcomponentprototype somemixin render function return original reactmixin example reference gaearon change subtle easy misinterpret react drank class koolaid gon na use inheritance composition syranide words react moving direction away unnecessary forced opinions library bloat react focus best future implementation everything else community provide official addons absolutely necessary everyone different opinion right way everyone freedom choose sorry ca nt help feel trying forcefully push sake pretext good intentions benefit whatsoever moment anything integration separate module way round nt deal nonsense oh mangle entire codebase though wonderful codetononsense default react addons turning case move stand criticism pushing feature useless removes useful functionality even mixincomposition support even considered mangles syntax raw interface nt mean interface really dumb sake less lines code serving people toying based discussion elsewhere seems general move simply cater everyone else third class citizen best claiming nt seem line actually eg moving direction away unnecessary forced opinions classes much extremely forced opinionated change", "d": "2/2015"}, {"body": "native classes drawbacks compatibility classes transprilers code mangling intermediary layers wait saying nt work react almost certainly tried something similar work", "d": "2/2015"}, {"body": "serving people toying es opposite useful people using even js matter clojurescript adepts find useful om nt jump hoops custom initialization cleaner fp api also makes react easier consume typescript coffeescript nt get focusing nothing change making optional instead forcing upon users change better long term nt hurt short term problem", "d": "2/2015"}, {"body": "srcspider feel like misunderstanding use library native class implementation like nt see problem nt like classes nt use syntax sugar really anyway keep using prefer", "d": "2/2015"}, {"body": "nt need brigand library either example vanilla javascript srcspider long somemergefunction merges functions ensuring called handles left operand usually prototype nonenumerable properties case class methods days ago still merging correctly extra errors nice imo required", "d": "2/2015"}, {"body": "thanks feedback good know community thinking people love classes others nt like much fortunately react lets choose syntax like use syranide brigand gaearon mentioned change makes react classes less reactspecific makes interoperable libraries even languagesdialects also reduces learning curve since javascript programmers soon familiar classes wo nt need learn special semantics magical reactcreateclass method said use mixins internally abundantly aware usefulness may see mixins return classes others mentioned free continue using reactcreateclass prefer style going close issue since technically bug", "d": "2/2015"}, {"body": "hi syranide like take look link working check please", "d": "2/2015"}, {"body": "javpaw fixed hour really change run code react build see", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "jsfb sebmarkbage spicyj plan fix warning expose something else", "d": "2/2015"}, {"body": "think warning still valid even though owner idea ref put unique handle component kind lasso pull real instance gets mounted tree overriding breaking assumptions caller workaround simply remove ref original specification way clear intended ref rely missing feature react add new api way preserve ref adding fields ok clone element without destroying ref could make possible nt try override ref field", "d": "2/2015"}, {"body": "nt see one handle component instance nt solution right missing feature really frustrating times expect ref property coming parent visible inside component", "d": "2/2015"}, {"body": "myagoo yeah one reasons looking new types refs get one handle discussion also see lets change props preserving ref closing", "d": "2/2015"}, {"body": "child handle pass calling guess might actually work", "d": "2/2015"}, {"body": "yup children nt state form component always single source truth", "d": "2/2015"}, {"body": "sounds good thanks", "d": "2/2015"}, {"body": "find alternative works close", "d": "2/2015"}, {"body": "yea work around proposed jaredly quite decent going close one", "d": "2/2015"}, {"body": "yea really intended implemented", "d": "2/2015"}, {"body": "seem seeing bug well", "d": "2/2015"}, {"body": "looks like fixed master already add test nt regress", "d": "2/2015"}, {"body": "sedovsek interesting idea would rabbit hole information time reported dig deeper good work", "d": "2/2015"}, {"body": "pr fine next time generate website thanks", "d": "2/2015"}, {"body": "zpao pleasure never learned much trivial bug", "d": "2/2015"}, {"body": "really react issue going close lots discussion babel issue", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "implement childrentoarray", "d": "2/2015"}, {"body": "closed", "d": "2/2015"}, {"body": "done tooling jsonml past considered jsonml tagname properties children special casing text nodes like second library bunch form helpers completely framework agnostic implemented jsonml creating elements amp html strings zero diffing patching since moved away jsonml reasons got frustrated lisp problem lot trailing braces prefer hyperscript something like small thing helps large performance penalty converting jsonml data structure tree virtual nodes basically full deep copy need kind optimized tree patch diff algorithm efficient jsonml really intermediate format", "d": "2/2015"}, {"body": "syranide solves first problem arguing whether jsonml looks nicer btw actually think fine like raynos said unless lisp guy using paredit might bit noisy always make jsx compile worst case raynos good know exist mean perf cost immutable collections mitigate", "d": "2/2015"}, {"body": "chenglou still nice way would nt like nt jsonml point seems weird make jsonml target make jsonml compile best target instead like jsx", "d": "2/2015"}, {"body": "would also align us spec almost like standard heart", "d": "2/2015"}, {"body": "syranide yeah clojurescript people", "d": "2/2015"}, {"body": "chenglou internal representation virtual dom react amp virtualdom jsonml means convert data structures includes full deep copy basically virtualdom avoid helper looks like jsonml returns instance internal data structure used virtualdom reduces amount performance overhead phase", "d": "2/2015"}, {"body": "recently ran problem well found workaround worked nb must defined non pseudoclass selector personally never cared defining pattern likely common enough might cause problems since nt actually set pointer element normal state ios nt detect clickable", "d": "2/2015"}, {"body": "dupe essentially fixed pr", "d": "2/2015"}, {"body": "would also always keep mind web components everywhere might strong assumption near future features might need rethinked current assumption react components everywhere instance error propagation completion propagation might doable neither desirable web components black boxes thing cents", "d": "2/2015"}, {"body": "resolution current solution turn comfortable keeping way different upstream", "d": "2/2015"}, {"body": "cc sebmarkbage", "d": "2/2015"}, {"body": "jsx spec nt make claims scoping rules variables including semantic meaning including scope expressions contained attributes obviously limitation ca nt reason things like unused variables etc also feature want implement semantic meaning move forward full semantic spec ready since different implementations different requirements also actively changing semantics tag html well might future concept xml like use create elements went lowercase convention react added compromise allow subset valid identifiers scope however nt make extend extends ast therefore adding within nt enough make seamlessly work still reason around might well special case also remember nt reserved keyword already issues even though reserved strict mode seems strange special cased already talk using reserved keywords include reflective syntax sugar like therefore nt think makes sense special case unless also want every possible reserved partially reserved identifierexpression", "d": "2/2015"}, {"body": "instead used wrapper braces could make full free put whatever ofc problem closing tags looking weird", "d": "2/2015"}, {"body": "sebmarkbage think confusing output like regular behave like one extremely confusing surprising reactjsx developer see behave way", "d": "2/2015"}, {"body": "sebmck issue still bug however bug transpilers jsx spec parsers like also bug jstransform matter", "d": "2/2015"}, {"body": "sebmarkbage ah thanks explanation completely agree nt handled jsx spec happy adapt whatever changes deem necessary", "d": "2/2015"}, {"body": "closing nt sound like react issue post full code sample maybe someone help debug problem stack overflow probably better place codelevel debugging questions", "d": "2/2015"}, {"body": "pete hunt already reactclassset module npm believe well", "d": "2/2015"}, {"body": "jquense according readme reactclassset deprecated favor mentioned library", "d": "2/2015"}, {"body": "pretty much except negligible differences deprecated former latter active maintainer", "d": "2/2015"}, {"body": "code sample show us jsbincom putting example code documentation appears work fine unable reproduce check see rerendering component quickly seen double renders cause problems transitions", "d": "2/2015"}, {"body": "sort thing parentbased context work", "d": "2/2015"}, {"body": "confused want allow using mixin want error fire instead react admittedly somewhatconfusing one", "d": "2/2015"}, {"body": "confirm elements inside svgs safari firefox seems work okay though", "d": "2/2015"}, {"body": "worth noting using case utilize attribute svgs", "d": "2/2015"}, {"body": "mixin using change key parent every time props change force fully rerender modify posting first version involved keeping key fell apparent component actually used state dangerouslysetinnerhtmlinnerhtml dom node create new one var function var nextprops thisprops var nextstate thisstate var lastprops var laststate", "d": "2/2015"}, {"body": "pretty sure much simpler workaround", "d": "2/2015"}, {"body": "great included reacttestutils worked attribute attributes trying write test verifies component creates attribute seems like oneliner", "d": "2/2015"}, {"body": "see helpers easy implement outside react always add code though", "d": "2/2015"}, {"body": "true spec nt guarantee virtually browsers engines planning leave asis alternate solutions manual bookkeeping tend significantly slower", "d": "2/2015"}, {"body": "closing favor guess", "d": "2/2015"}, {"body": "er", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "probably switch warning module use consoleerror instead gives stack trace browsers think", "d": "2/2015"}, {"body": "yeah enterleave special bubbling nt capture phase update docs", "d": "2/2015"}, {"body": "yeah gone except gone merges nt likely name conflict anyway", "d": "2/2015"}, {"body": "wonderful thanks great work folks", "d": "2/2015"}, {"body": "sebmarkbage defined nt fall warn one release drop next ps well defined warning nt actually return function", "d": "2/2015"}, {"body": "syranide nt exist previously releases exposing explicitly prevent new code relying", "d": "2/2015"}, {"body": "sebmarkbage makes sense problem see fail arbitrarily depending whether component moved away realize fairly rare circumstances bite ie component affected consumer component well", "d": "2/2015"}, {"body": "syranide also moves responsibility instance global escape hatch", "d": "2/2015"}, {"body": "sebmarkbage yeah definitely saying breaks first warn break approach react seems generally take also getting updated component could mean app instantly breaks telling use rather warning also working personally nt mind already fixed callsites saying", "d": "2/2015"}, {"body": "scenario nt break also adding new component think fine", "d": "2/2015"}, {"body": "syranide maintain react components upgrade classes bump major version probably good thing noted release announcement", "d": "2/2015"}, {"body": "yeah anything going warn add new properties state getinitialstate nt return", "d": "2/2015"}, {"body": "happened", "d": "2/2015"}, {"body": "spicyj ty", "d": "2/2015"}, {"body": "think favor though obvious order update methods called mixins interdependent", "d": "2/2015"}, {"body": "spicyj main issue giving control back developer interdependent mixins left developer order mixins given like reverse order see example top", "d": "2/2015"}, {"body": "sorry see favor rickbeerendonk proposal effectively reverse order var mixina mixins var mixinb mixins var component reactcreateclass mixins mixina mixinb depthfirst traversal mixins mixinacomponentdidmount mixinbcomponentdidmount componentcomponentdidmount reverse traversal componentcomponentdidmount mixinbcomponentwillunmount mixinacomponentwillunmount intent lifecycle methods mirror one another resources allocated state mutated former reversed latter mixins assume particular state mounted able assume state unmounting conceptually matching curly braces html tags etc", "d": "2/2015"}, {"body": "told reliable source componentwillmount render componentdidmount happen together chance callback returning somewhere middle confused ismounted issue refers setstate unmounted case", "d": "2/2015"}, {"body": "nt want pile think additional issue open separate issue maybe ismounted meant used guard unsafe setstate componentwillunmount ismounted true safe call setstate would seem issue regardless whether calling setstate componentwillunmount whatever guard setstate case return status set state componentwillunmount", "d": "2/2015"}, {"body": "closing due inactivity discuss still issue", "d": "2/2015"}, {"body": "second issue fixed batch initial render sure first probably still problem", "d": "2/2015"}, {"body": "make minimal repro case like jsfiddle obvious issue hard set run example ca nt test", "d": "2/2015"}, {"body": "looking issues contribute seems one already fixed", "d": "2/2015"}, {"body": "yea let call fixed couple passes done clean", "d": "2/2015"}, {"body": "andrewrota use custom elementsweb components react tried getting error created stackoverflow thread", "d": "2/2015"}, {"body": "gnestor need greater believe", "d": "2/2015"}, {"body": "andrewrota ok thanks", "d": "2/2015"}, {"body": "landed closing", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "also ca nt repro chrome", "d": "2/2015"}, {"body": "yuck due autobinding guess rc gives error", "d": "2/2015"}, {"body": "would really useful third party transition libraries example", "d": "2/2015"}, {"body": "agree would nice able easily assert props passed sub component", "d": "2/2015"}, {"body": "closing repro case please post", "d": "2/2015"}, {"body": "giving whole jsx code script tag html page order declaration components could cause issue inbuilt compiler sees component later declared code throw error however plain terms means component missing", "d": "2/2015"}, {"body": "yeah moving static properties going close", "d": "2/2015"}, {"body": "reopened latest announcement given unfortunatelyfortunately already made necessary changes make enumerable react version used class header export default header reactcreateclass headerprototype code generates prototype object given methods properties fails properties enumerable hence react nt find method prototype", "d": "2/2015"}, {"body": "sebmarkbage thoughts", "d": "2/2015"}, {"body": "fwiw pass option babel guess loose mode generate classes enumerable members", "d": "2/2015"}, {"body": "touchesir thanks temporary way make react work curious find anything done front make react work nonenumerable class methods future release", "d": "2/2015"}, {"body": "problem enumerability ca nt polyfilled old ie still support detection definition want support nt want different react behaviors depending browser use ca nt depend detecting enumerability otherwise someone may accidentally rely working yet break nobody properly tests days luckily first class support classes", "d": "2/2015"}, {"body": "sebmarkbage thanks dependency problems reactrouter reactasync using react trying figure solution", "d": "2/2015"}, {"body": "sounds like dupe", "d": "2/2015"}, {"body": "proposed alternative custombutton wrapper good general nt want deep merges props could look like anything necessarily plain js objects automatically merged closing", "d": "2/2015"}, {"body": "presume http compression would work pretty well type duplication", "d": "2/2015"}, {"body": "might make warnings louder general moving towards warnings prod build skip unnecessary checks closing", "d": "2/2015"}, {"body": "spicyj could keep open change request warning", "d": "2/2015"}, {"body": "sorry actually misunderstood thought description already warning actually checked error added time issue filed actually fixed", "d": "2/2015"}, {"body": "okay think pull request fix issue correct logic one preferred pull request get heads similar fix problem components", "d": "2/2015"}, {"body": "still think react checking presence key value want component uncontrolled nt pass value prop controlled uncontrolled removes possible confusion since longer need know possible values know textarea controlled", "d": "2/2015"}, {"body": "nt disagree think line thinking bigger change would also affect documentation suggest go pull request overall picture think right clearer distinction controlleduncontrolled behavior avoids edge cases like", "d": "2/2015"}, {"body": "rymohr makes sense way breaks props work feel like something inherently wrong controlled component well nt authority pretty sure js defines meaning literally undefined treating anything else breaks expectations", "d": "2/2015"}, {"body": "true developer intention falling pit success guys like say happens values nobody passes prop component want uncontrolled use switching keypresence check would simplify underlying code make controlled vs uncontrolled components easier explain easy misinterpret current documentation set controlled component examples set happens set", "d": "2/2015"}, {"body": "believe input misbehaving textarea syranide also revealing nobody complained current behavior behavior people find surprising regardless technically misbehaving react expectations", "d": "2/2015"}, {"body": "cc yungsters know may remember early thoughts around controlled components sold returning right call general whole thing bit grey area consistent regardless route take", "d": "2/2015"}, {"body": "zpao returning makes sense would equivalent treating separate modescomponents ie resets switch convinced first p becomes quite obvious think react inherently kind stateless certain set props always get output rendering sometimes rendering test last value without user interaction depending whether input previously controlled makes sense transition controlleduncontrolled really makes practical sense different nothing else really makes sense context react", "d": "2/2015"}, {"body": "user typed something leave value dom subsequent renders could think react stateless dom nt respect uncontrolled components treat changing prop like treated user manually changing value would nt return saying right thing precedent", "d": "2/2015"}, {"body": "zpao yeah ofc improved post bit posted comes fact transitioning controlled uncontrolled nt really make sense pick one stick supposed use controlled readonly state uncontrolled input controlled uncontrolled transition really transition reset ie forgot give proper key edit usecase transitioning controlled uncontrolled could make sense keep value ca nt think", "d": "2/2015"}, {"body": "also easy reproduce behavior value sticking simply updating appropriately always keeps last value way get back manually detect transition update value dom node", "d": "2/2015"}, {"body": "zpao hmm actually let rephrase like easy let consider instead quite convinced correct answer step bar ie reset foo would looking old irrelevant value whether react rerendered inbetween consider rafbatching whatever irrelevant visual state shown user", "d": "2/2015"}, {"body": "zpao agree approach consistent consistent approach would one mentioned rymohr basically one simple rule imagine controlled component nonnull value gets changed interpretations component becomes uncontrolled current behavior intuitive otherwise issue page would nt exist leads discussion zpao syranide right go back keep previous content would consistent rymohr suggestion component stays controlled null value means clear ambiguities enables intuitive clearing controlled component simply set value feel almost musthave behavior otherwise would clear component reasoning behind current definitionbehavior nt good reasons besides way defined would probably better change definition", "d": "2/2015"}, {"body": "martinstein still transitions controlled uncontrolled inputs regardless whether considered controlled edit think turning controlled component rather counterintuitive solution make uncontrolled controlled inputs separate components using magic propertiesvalues also note easily create wrapper enable behavior prefer", "d": "2/2015"}, {"body": "syranide right still transitions two types would fewer ambiguitiesinconsistencies explain find counterintuitive feel behavior intuitive would nt need extra page explaining phenomenon ruleset would simpler currently rule simpler rule would generally simpler approach better intuitive one right", "d": "2/2015"}, {"body": "martinstein much find controlled counterintuitive breaks basic expectations value means counterintuitive means defaultno value ask would expect hold like would argue hold extension also commonly used optimize hidden classes generally expected behavior specified unless merging objects", "d": "2/2015"}, {"body": "nt think breaks basic expectations people would expect means exactly input empty value supposed mean uncontrolled input specify value sorry repetition intuitive extra page docs would necessary language perspective javascript specifically treats different defined expectation evaluated definitely hold agree sometimes used shortcut optimize code case makes code complicated pullrequest would simpler without special treatment", "d": "2/2015"}, {"body": "think collectively beaten one death point new eyes core team take look give fresh take", "d": "2/2015"}, {"body": "nt think setting reset dom behavior desired composing component continue setting otherwise setting uncontrolled state leave dom asis letting component authors rely conditionally setting order reset pretty confusing would want anyone relying behavior even consistent whether control dom allow mean component value controlled value may argue empty string ambiguity make think control prop value besides reasonable component authors want controlled value empty string set fix", "d": "2/2015"}, {"body": "yungsters take example copied think thing make sense get latest value set becoming uncontrolled equivalent reset example consider scenario obvious let consider instead new state rendered due batching would argue quite strongly value still bar whether component actually performed intermediate rerenders irrelevant especially affected batching strategy reset becoming uncontrolled always consistent said however nt think going controlled uncontrolled something best solution would nt possible ask simply make best one makes sense context react meant work deterministic way keeping last value simply nt", "d": "2/2015"}, {"body": "think simple presentation editor allows edit text slide people going model slides like form controlled bound move slide slide still see old text letting nuance way react handles controlled components leak data model nt feel right nt think issues mention actually problem especially since control options select treated wanted anything else need pass string eg", "d": "2/2015"}, {"body": "rymohr form controlled bound thisstateslidetext move slide slide still see old text huh controlled definition always shows correct value", "d": "2/2015"}, {"body": "syranide prevent components going controlled uncontrolled makes sense wanted could use something like though ca nt think good reason", "d": "2/2015"}, {"body": "rymohr consumer responsible translating configuration text empty string rendering react component", "d": "2/2015"}, {"body": "syranide gt huh controlled definition always shows correct value nt whole point discussion arguing defines controlled see first comment thread", "d": "2/2015"}, {"body": "syranide supplied case would argue input value empty", "d": "2/2015"}, {"body": "yungsters logic also developer responsibility sanitize input still point aligning developer expectations intentions preventing shooting foot argument guys would moot simply said passing prop value creates controlled component", "d": "2/2015"}, {"body": "yungsters nt think anything ultimately right wrong usecase really makes sense see two options ambiguity keep last value even though may make intuitive sense nt see would ever want behavior final value depends batching strategy whether operations batched regardless controlled uncontrolled transition make sense relation two otherwise key properly would argue case always seeing old value consider type uncontrolled nt relying stateful dom ideosyncrasies value input would actually reproduced ways well feel free replace change handler highlight issue fail see ever makes practical sense saying usecase nt exist nt see seems arbitrary sense condones controlled uncontrolled transitions legitimate sure agree context react batching strategies etc etc reset default value seeing two different values reason simply nature uncontrolled components importantly neither inherently wrong opinion value shown simply subject inherent shortcomings uncontrolled components consider example type resets becomes empty nt ask would want showing deterministic state also take alternative example type resets becomes would expect nt ask would want showing deterministic state include fact resetting like also near identical proper keying except maintaining focus seems like another benefical sideeffect treating controlled separate incompatible uncontrolled still maintains practically reliable behavior obvious choice things considered ultimately academic perspective would nt mind controlled want uncontrolled behavior use wrapper generic reasonable agree defacto interface controlled components", "d": "2/2015"}, {"body": "rymohr describing used work value provided including would use default value however pain building components sometimes wanted default value times wanted specific value example", "d": "2/2015"}, {"body": "treating controlled separate incompatible uncontrolled hmm actually like lot zpao think willing go reason resetting values changing controlled uncontrolled", "d": "2/2015"}, {"body": "yungsters think misunderstood underscore established accepted precedent merging default values defaults always overwrite undefined values handled way would surprise developers saying passing key developer giving massive hint want component controlled ignoring suggest bring discussion back original issue posted rszewczyk value property textarea changes null undefined non blank value text displayed dom change fiddle captures issue notice behavior different text input talking current behavior lining expected behavior argue textarea holding onto bar correct internal architecture standpoint end user completely counter intuitive reset yes simplify entire controlled vs uncontrolled thing well", "d": "2/2015"}, {"body": "rymohr agree stumbled issue dumbfounded behaves illogically react team behavior totally unexpected please make remain controlled set value peons wondering nt work ghetto fix", "d": "2/2015"}, {"body": "reset yes simplify entire controlled vs uncontrolled thing well kind simplification looking besides resetting mounted value switching inout controlled", "d": "2/2015"}, {"body": "yungsters please reread comments part still unclear", "d": "2/2015"}, {"body": "similar issue attributes well code something like disable state pattern set undefined string instead removing attribute dom element results broken input field similarly tried approach nt work either still attribute removed dom element", "d": "2/2015"}, {"body": "problem attribute removed dom updated", "d": "2/2015"}, {"body": "mainly bad run jsxtransformed files thought without dozen warnings pop could disable warning allows make error code", "d": "2/2015"}, {"body": "quite bit interest see references", "d": "2/2015"}, {"body": "yes gaearon want pass localization data context let user able change language runtime letting components rerender updated translations currencies date formattings far understand seems hard see also", "d": "2/2015"}, {"body": "slorber also adopted custom clearly could get broken stricter middle gaearon says third parameter disappear always rely props however let see issue evolve", "d": "2/2015"}, {"body": "gpbl check seems case want rerender whole app top case context change unmount remount node event loop tick produce flickering effects constantly perfect workaround dealing user language changes", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "plan make onchange consistently fire every change browsers see use maybe behavior looking native onchange event varies widely across browsers even nt anything special react probably want", "d": "2/2015"}, {"body": "closing standard", "d": "2/2015"}, {"body": "closing dupe", "d": "2/2015"}, {"body": "sounds vaguely reasonable think going instead close", "d": "2/2015"}, {"body": "sorry bit late anything closing", "d": "2/2015"}, {"body": "general way statically identify might valid component consider last example function string might valid specific type", "d": "2/2015"}, {"body": "issue unset background image position repeat color attachment clip origin size sure came original list think best course action make sure unset properties supports take shorthand properties kind pain", "d": "2/2015"}, {"body": "issue today problem using browserify instead hope helps", "d": "2/2015"}, {"body": "issue ca nt reliably use dependency injection mechanism eg change batching strategy using components multiple modules instance react dependency even version react", "d": "2/2015"}, {"body": "thanks gaearon", "d": "2/2015"}, {"body": "merged", "d": "2/2015"}, {"body": "createelement nt internal api use arrays vs varargs distinguish child keys believe benchmarked comparable even faster varargs going close", "d": "2/2015"}, {"body": "hey followup issue flux repo nt want us editing flux documentation since flux copy getting updates", "d": "2/2015"}, {"body": "githubfirst months zpao things close issue", "d": "2/2015"}, {"body": "still things improved process perhaps go github otherwise good go", "d": "2/2015"}, {"body": "little history next person investigates since original link longer points meaningful target looks like tagname taken reactdomcomponent put onto wrapper got moved reactdefaultinjection tagname appears wrappers dom elements mimics tagname already exists native dom elements wrappers temporary going away happens users get native dom elements native tagname property semantics since scheduled deletion happen naturally part future commit going close issue", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "would still appreciated looks like referencer issue issue closed without discussed resolution deliberate", "d": "2/2015"}, {"body": "thechrisproject issue still open", "d": "2/2015"}, {"body": "spicyj ah closed sorry fairly new using github read closed state issue transitioned closed", "d": "2/2015"}, {"body": "yep audio video components essentially unsupported react need grab dom node everything manually nt able get anyone care oversight nt look like fixed anytime soon", "d": "2/2015"}, {"body": "contra someone cares enough submit pr surely accepted react team currently focused getting react core stable would say dom fixes community afaik could look time busy elsewhere lately", "d": "2/2015"}, {"body": "worries nt big issue originally thought realized could set listeners componentdidmount remove componentwillunmount keep good work thursday february andreas svensson notifications githubcom wrote contra someone cares enough submit pr surely accepted react team currently focused getting react core stable would say dom fixes community afaik could look time busy elsewhere lately reply email directly view github", "d": "2/2015"}, {"body": "curious decision jasonkuhrt suggestion make override well pointed possible keep suggested solution really desired currently possible override", "d": "2/2015"}, {"body": "react support", "d": "2/2015"}, {"body": "binarykitchen work fine intended", "d": "2/2015"}, {"body": "syranide bad referring react fixeddatatable support yet", "d": "2/2015"}, {"body": "another case ran ui kit placing children inside fixed scrollable container like children must passed array composite class passed must also implement styles avoid breaking adds layer complexity completely understand complex must make change throwing hat support", "d": "2/2015"}, {"body": "jwietelmann natew using react beta building webpack similar use reactparentcontextpatchjs play around parent contexts moment assume break pretty quickly though nt build anything relies make sure require", "d": "2/2015"}, {"body": "jamesknelson thanks hacking week let goes", "d": "2/2015"}, {"body": "dupe", "d": "2/2015"}, {"body": "seems impossible use inline flexbox serverrendered doms already exists could nice similar way use string inline styles", "d": "2/2015"}, {"body": "autoprefixing every style probably outofscope react db autoprefixer especially push towards inline styles react native would nice foundational technologies like flexbox transform autoprefixed react consensus apis unprefixed everyone safari end whipped last night solves problem long remember litter codebase calls love see similar solution builtin react", "d": "2/2015"}, {"body": "appsforartists also handles animation properties seems common problem indeed broken serverside rendering", "d": "2/2015"}, {"body": "nt use react came across issue searching missing familiar react works events using raw dom events managed get reasonable using following js function blurhandler e var relatedtarget erelatedtarget eexplicitoriginaltarget documentactiveelement maybe help someone", "d": "2/2015"}, {"body": "assuming contexts would right super easy solution would need standardized really make work usable throughout", "d": "2/2015"}, {"body": "would cool builtin way parse serverside code jsx clienttargeted bundle bundling time know variety tools job something officiallyrecommended would aid isomorphic app story", "d": "2/2015"}, {"body": "yaycmyk parse serverside code jsx clienttargeted bundle bundling time huh", "d": "2/2015"}, {"body": "nt already reuse existing markup isomorphic apps nt point checksum entirely sure understand motivation components render different markup server side adding branchescodepaths need testedmaintained point isomorphic rendering avoid exactly otherwise implement seo version separately also sites penalized content display users deviates show google entirely convinced good seo story first place intuition nt recommend nt going stop going use global probably behavior third party components participating specific example usecase nt easily handled implementationspecifc global", "d": "2/2015"}, {"body": "jsfb ca nt feature detection serverside hence complex inline styles polyfills impossible serverside also way generate placeholder content apply stylespolyfills clientside mounts transition taking place worked picture imgset polyfill works great impossible make work serverrendering simply done current", "d": "2/2015"}, {"body": "transition taking place perhaps missunderstanding could nt forceupdate page loads update placeholder content perhaps triggered onmount think nt get called serverside still feeling like globaluseragent sufficient vast majority cases would useful specific example piece markup usefuldesirable unworkable serverside saying examples nt exist looking persuasive example", "d": "2/2015"}, {"body": "perhaps missunderstanding could nt forceupdate page loads update placeholder content perhaps triggered onmount think nt get called serverside still lacking way find server clientrendering hmm yes actually work batched could preferable something based context would seamless reacty nt necessity say guess neat thing approach could technically exported globally via would needed would useful specific example piece markup usefuldesirable unworkable serverside anything requires feature detection ie vendor styles polyfills large user agent sniffing generally big nono fragile feature detection work could ultimate approach way would still need backup makes mistake tl dr work great still needs way detect serverrendering", "d": "2/2015"}, {"body": "syranide would nt want ship servertargeted markup client would suggesting would nice officiallysupported holistic approach development isomorphic apps using react", "d": "2/2015"}, {"body": "jsfb oh right lazy imageslistsetc require something like serverrenderable", "d": "2/2015"}, {"body": "would also love workaround seems like wanting use refs transitiongroup children would common requirement", "d": "2/2015"}, {"body": "seems like solved", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "want reference reactnexus example want supported within react essentially rewrite works except builds component tree without actually mounting dom writing string allows traverse component tree fire asynchronous methods tree built issue implementation throws away first tree calls anyway whereas would nice take prerender tree rendermount willing work within core would need pointers think one requirements making globally referenced async would nt cause issues globals might run issues well", "d": "2/2015"}, {"body": "mridgway mistaken global might compat thing go away might wrong", "d": "2/2015"}, {"body": "gaearon yeah sense got withcontext deprecation", "d": "2/2015"}, {"body": "yes exactly want able tell react start managing new named dom events eg api like would make much much simpler hook things like external gesture recognizers etc", "d": "2/2015"}, {"body": "issue seem related changing classes item transitioning simply adding another element within transitioning item changing classes fixes issue", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "causing issues ios", "d": "2/2015"}, {"body": "really issue tommoor discussed might good idea add docs tell users wrap components variable classes", "d": "2/2015"}, {"body": "question workaround", "d": "2/2015"}, {"body": "damianmr also thought problem later discovered fault maybe using might", "d": "2/2015"}, {"body": "nope react shows warning cases", "d": "2/2015"}, {"body": "would nice another way keep fixed width strokes without used meantime", "d": "2/2015"}, {"body": "foreignobject", "d": "2/2015"}, {"body": "referencing pr text baseline attributes", "d": "2/2015"}, {"body": "oh shit need tag disappointed", "d": "2/2015"}, {"body": "resigned using custom component render function returns ugly works", "d": "2/2015"}, {"body": "vote jsx support netbeans", "d": "2/2015"}, {"body": "maybe could use html entities opening curly brace closing nt solve looks like crap problem might work nope looks like works still gets spans", "d": "2/2015"}, {"body": "old topic think js string literals actually valid solution problem also solved putting sheet prop use instead children see", "d": "2/2015"}, {"body": "related facebookjsx", "d": "2/2015"}, {"body": "interested testing react component without rendering dom works fine making assertions triggering events possible somehow render tree react components without ever mounting dom performing assertions triggering synthetic events realize things like could never work given nt using anywhere also please tell silly idea", "d": "2/2015"}, {"body": "exactly coming called shallow testing supported able start using try beta today see details documentation links impl", "d": "2/2015"}, {"body": "looks interesting indeed commenting pr", "d": "2/2015"}, {"body": "believe hit issue two components two different divs nt share common root create components dynamically end ids set similar reproduce outside code", "d": "2/2015"}, {"body": "macqm prerendering perhaps rendering static markup two different places", "d": "2/2015"}, {"body": "syranide nt prerendering tried create component place create element react class different module loaded require browserify class created locally works fine load exact module via browserify work illustration works loading react class via browserify causes issue get different error missed moment changed code looks almost identical", "d": "2/2015"}, {"body": "macqm find reactid mentioned likely due invalid nesting things like", "d": "2/2015"}, {"body": "syranide ooops div nested another div believe caused issue back original reactid error looks like wrong browserify nt seem matter code using create widget class javascript var widget reactcreateclass getinitialstate function return text render function return widget thisstatetext handlechange function e thissetstate text etargetvalue try initialize widget floating window created using ventus library javascript create react component class var component reactcreateelement widget reactrender component windows title contentget dom element floating window soon focus input receive following error indeed newly created element gets assigned reactid", "d": "2/2015"}, {"body": "macqm repro could look assuming external library mucking dom ps nesting divs fine p div inside p etc", "d": "2/2015"}, {"body": "syranide trying reproduce problem noticed loading believe reason ended two instances react app possible need investigate capital react worked browserify using reactify issue thanks help", "d": "2/2015"}, {"body": "macqm common issue nonlinux environments caseinsensitive filesystems bundler nt warn", "d": "2/2015"}, {"body": "encountered message root problem included two independently webpacked bundles one copy react two bundles seemed work miracle get error message unequal nodes consolidating single copy react resolved problem thank macqm tip wonder way catch scenario within react include warning multiple versions react may present would go nicely along useful helpful error descriptors", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "status hard choose losing benefits serverside rendered react remembering customer selected options right workaround solves put extra duplicate selected value top option list cry spicyj", "d": "2/2015"}, {"body": "really wish drawbacks pending state nt issue though desires purely aesthetic edit though additionally would make declaratively accurate name", "d": "2/2015"}, {"body": "maybe terrible idea passed could use destructuring get something similar maybe worse wanted get idea table edit actually works already hardly fantastic think", "d": "2/2015"}, {"body": "wondering subclassing solve mixin extend components need use mixin could extend seems working missing something besides fact mixins already created compatible pattern", "d": "2/2015"}, {"body": "tomethod officially planned", "d": "2/2015"}, {"body": "even without tomethod could built like however think making composition easier higher priority making arbitrary mixins work", "d": "2/2015"}, {"body": "played sebmarkbage example bit nt really like fact super calls become mandatory augmented method also played around brigand looks one reasonable solutions nt like syntax status quo mixinstraits would better fill syntax using something like example scala something like", "d": "2/2015"}, {"body": "scala syntax looks good oo", "d": "2/2015"}, {"body": "also struggling trying animate elements using componentwillenter componentdidenter tweenmax methods nt seem get called reactcsstransitiongroup model nganimate would expecting call methods javascript animation along adding enter leave change classes", "d": "2/2015"}, {"body": "cameronjroe far understand behaviours introduced one next releases react check taking look master branch", "d": "2/2015"}, {"body": "nt notice looks like methods exclusively nt noticed difference", "d": "2/2015"}, {"body": "think warning docs pretty big flaw caught guard would submit pull request sure convention warning bugs react docs belong note markdown block quote convention severe warnings ca nt find examples", "d": "2/2015"}, {"body": "issue causes react based longer lists unusable mobile", "d": "2/2015"}, {"body": "petehunt knowing deprecated options handle", "d": "2/2015"}, {"body": "love somebody could revisit issue real pain use workaround", "d": "2/2015"}, {"body": "related even set content clientside technically even render react able perf hit ca nt think reason would ever care contents clientside ps feel like something dirty happening behind scenes would nt make sense disallow children people want implicit behavior wrapped custom component", "d": "2/2015"}, {"body": "yeah think suggested ignoring contents client would cause checksum issues ssr mistaken rendering string may dirty opinion acceptable kind dirtiness since protects user inherent complexity dealing wonky browser bug guess could argue cdata child happens string html actual dom children outside purview react seems make largely useless without custom component", "d": "2/2015"}, {"body": "matthewwithanm oh right yeah reusing clientside would require special flag internally would use serverrendering rules constructing initial markup", "d": "2/2015"}, {"body": "future searchers workaround wrapped component case set commonjs module relies constant adapt needed javascript const react require reactaddons moduleexports reactcreateclass displayname noscript mixins reactpurerendermixin render processbrowser return else return", "d": "2/2015"}, {"body": "zpao bug actually limited text element say something simple like character escaping intentional since bug involves invisible characters everything go boom well personally fan magical span insertion way react previously whitespace manually inserted actually nice feature since removed need crappy hacks meant everything always exactly intended less harmless html use cases svg text really inserted tags think react disable magic altogheter guess tricky disable magic span insertion happens certain html tags eg span p h cases react strip whitespace wo nt inject anything code work parties people want whitespace properly use html tags people like part nt want ever stick divs everywhere", "d": "2/2015"}, {"body": "noted need set non pseudoclass selector otherwise ios nt register clickable moox would think might able something like css myclickablething cursor pointer myclickablething hover cursor help", "d": "2/2015"}, {"body": "could react handle simply adding element onclick handler user agent ios device really mobile device since cursor nt affect display mobile", "d": "2/2015"}, {"body": "understand click listener attached trick simple workarround specify body class ios ready", "d": "2/2015"}, {"body": "registering handler nt problem problem ios nt think element clickable unless set setting body render whole body clickable ios every single element dom either clickable depending ios handling inherited values child elements setting element seems like reasonable solution probably optin instead default", "d": "2/2015"}, {"body": "original pr fixed reverted causing problems internally fb look bringing back fix good", "d": "2/2015"}, {"body": "getting warning following example potato carrot corn warning helping indicating something wrong surely perfectly acceptable design pattern", "d": "2/2015"}, {"body": "ides like webstorm recognize jsx inside configure ide detects jsx prompt use instead", "d": "2/2015"}, {"body": "finally decided finish work alpha version working need extra works based master branch typescript publish npm soon someone could help testing bit especially visual studio since osx would help thanks", "d": "2/2015"}, {"body": "fdecampredon cool test available time", "d": "2/2015"}, {"body": "cool", "d": "2/2015"}, {"body": "definitely take spin", "d": "2/2015"}, {"body": "congratulations", "d": "2/2015"}, {"body": "fdecampredon thanks continued contributions space wish released reactjs conf definitely would mentioned talk updated tsloader webpack support jsxtypescript using typescriptjsxwebpack may interested", "d": "2/2015"}, {"body": "thanks jbrantly unfortunately much work react conf since company nt use typescript react work topic free time thank tsloader generally use browserify thinking switching webpack since workflow browserify bit painful", "d": "2/2015"}, {"body": "using browserify gulp incremental typescript compilation write would helpful need check tsloader", "d": "2/2015"}, {"body": "something flag written proposal another use characters within typescript language used places defining generics already done want make sure conflicts", "d": "2/2015"}, {"body": "nathggns nt think problem place generic defined really prone conflict jsx hardest part type assertion resolved lookahead closetags map like cyrusnajmabadi described compromise accept forbid usage char jsx text use entities disambiguate cases like might still case think anyone find one please report issue", "d": "2/2015"}, {"body": "traverse recursively nt seem work function visit node return reactchildrenmap nodepropschildren visit", "d": "2/2015"}, {"body": "found file tests generic dispatched iframe cases would interesting test", "d": "2/2015"}, {"body": "semirelated", "d": "2/2015"}, {"body": "used conditionlooping constructs traditional templating languages would prefer use like might consider basically turns neater style syntax ternary syntax described", "d": "2/2015"}, {"body": "run situation", "d": "2/2015"}, {"body": "input firing onchange", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "looking solution like well standard dom event called say somehow able tell react start managing exactly events like eg currently react event system feels quite exclusive party libs", "d": "2/2015"}, {"body": "guys would use create react components documentation api comment live example", "d": "2/2015"}, {"body": "revolunet fwiw currently working open sourcing tool use internally regarding examples nt think good automatic solution components examples useful likely need complex examples well children event handlers etc overall think would great could establish guidelines around write react component provide examples", "d": "2/2015"}, {"body": "fkling yeah think guidelines could helpful angular styleguides talk ideas syntax conventions structure ex", "d": "2/2015"}, {"body": "eh long using human maintained docs think continue path without problems small surface area nt think actually need autogenned docs", "d": "2/2015"}, {"body": "ran across custom attributes issue trying render standard svg thought add real world example issue trying use masks like first problem make syntax work attribute set tag whitelisted attr ok add call function needed also attribute whitelisted react need go modify dom nodes one one well many masked items rendered hopefully shows standard attributes react missing support", "d": "2/2015"}, {"body": "disclaimer new react understand correctly react method advantage directly modifying component state calling lets developer avoid unnecessary rerenders overloading effective however need use immutable data structures eg closurescript om react immutability helpers immutablejs etc without immutability ca nt detect changes fact often ca nt use using mutable data ca nt remove item list using unless shallow cloned whole list think immutability takeaways using immutable data structures use enjoy confidence always sync using mutable data structures modify directly call live sync bright side get write vanillajs update code wo nt run confusion detailed issue new react please clarify got something wrong", "d": "2/2015"}, {"body": "aldendaniels think mixed two concepts correct implementation safe props state use immutable values including string number bool however independent implementation still perfectly safe use even using mutable data props state fact never mutate directly considered immutable", "d": "2/2015"}, {"body": "hi leebyron thanks reaching never mutate thisstate directly considered immutable little dubious react docs react lets use whatever style data management want including mutation also see facebook official todomvc flux example state treated immutable using immutable state javascript without using party library like listed previous post quickly becomes slow tedious dealing large nested data sets mutable state really antipattern ears also concerned invasiveness requirement", "d": "2/2015"}, {"body": "difference later still accepted former bit gray area considered antipattern since object considered owned react", "d": "2/2015"}, {"body": "yes clarify okay okay", "d": "2/2015"}, {"body": "preferable", "d": "2/2015"}, {"body": "take mailing list please guys", "d": "2/2015"}, {"body": "definitely changed update immediately current behaviour confusing forces us pass new state around achieve sensible results", "d": "2/2015"}, {"title": "ngrepeat within ngrepeat input model loses focus input", "body": "sure bug see plnkr ngmodel inside ngrepeat using direct reference parent array ngmodel loses focus upon input work around need able edit actual array ngrepeat", "num": "839", "d": "2/2015"}, {"title": "controller instantiated dynamically added directive element", "body": "angularjs script demonstrates controller dynamically added directive element instantiated script two directives element meant contain one elements add necessary html markup see example code page run app controller elements available via however added dynamically controller available controller reported complete example demonstrating problem run browser viewscontainer display block outline solid red padding view display block outline solid blue padding var angularmodule testapp mdirective viewscontainer function return restrict e controller function var registeredviews thisregisterview function ctrl registeredviews ctrlviewname ctrl link function scope element attrs viewsctrl scopeviews viewsctrl inner view components mdirective view function return restrict e require view viewscontainer controller function element attrs thisviewname attrsname link function scope el attrs ctrls var viewctrl ctrls var viewsctrl ctrls consolelog view attrsname link function called viewscontainer controller viewsctrl view directive controller viewctrl viewsctrlregisterview viewctrl code allow adding viewscontainer view dynamically code mrun function rootscope compile rootscopeaddviewscontainer function html lt viewscontainer gt lt p gt lt code gt viewscontainer lt code gt lt p gt lt button ngclickaddview event gt add view lt button gt lt viewscontainer gt postlinkfunction compile angularelement html element postlinkfunction rootscope angularelement documentbody append element rootscopeaddview function event viewelement angularelement eventtarget parent parent viewname aview new date gettime html lt view name viewname gt lt gt view viewname lt gt lt p gt look web developer console lt p gt lt p gt see lt code gt view viewname view controller undefined lt code gt lt p gt lt p gt undefined solution lt p gt lt view gt rawelement angularelement html angularelement viewelement append rawelement postlinkfunction compile rawelementcontents element postlinkfunction rootscope consolelog view viewname viewscontainer controller elementcontroller viewscontainer consolelog view viewname view controller elementcontroller view consoleerror help", "num": "838", "d": "2/2015"}, {"title": "upgrade jasmine report async errors", "body": "right async errors report stack traces tests fail makes hard debug issues", "num": "830", "d": "2/2015"}, {"title": "impossible inject default appdocument di dart", "body": "today default app document registered using applicationjs like injected another class would write javascript import appdocumenttoken export class title appdocument constructor inject appdocumenttoken appdocument thisappdocument appdocument works perfectly fine js fails dart compilation time internal error package error line pos expression valid compiletime constant title inject appdocumenttoken appdocument sure transpilation problem dart limitation ca nt overcome case probably change document registered example introducing new type using token di blocks", "num": "827", "d": "2/2015"}, {"title": "demo toast incorrectly pushes fab", "body": "head unselect toast position checkboxes open toast options notice bottom right fab move even though top left toast appears container also bottom left toast move bottom right fab would expect two toasts appear without affecting fab moving breaks paperness material design spec image showing issue", "num": "822", "d": "2/2015"}, {"title": "benchpress report fps spf missed frame count", "body": "fps average min max frames per second spf average min max seconds per frame missed frame count number frames took", "num": "821", "d": "2/2015"}, {"title": "create scriptspublishpubpublishsh", "body": "similar script must scrub pubspecs prior publishing", "num": "820", "d": "2/2015"}, {"title": "relying asi auto semicolon insertion atscript makes tooling harder", "body": "stock webstorm gives warning statements nt end semi could turn warning ide rather rely asi like format codebase clangformat nt understand javascript syntax enough understand statement terminates linebreak instead semicolon instead removes linebreak breaking code general pity carry forward asi atscript since complicates tooling anyone strong desire omit semicolons atscript code mprobst suggests well working mechanism finding asi abuses codebase", "num": "817", "d": "2/2015"}, {"title": "bug ngmessages ngmessagesinclude crashes inside ngrepeat", "body": "bug introduced using ngmessagesinclude inside ngrepeat ngform might relevant crashes error see demo code working fine crash occur empty must content ie paste demo code html matsko related", "num": "816", "d": "2/2015"}, {"title": "use static di benchmarks", "body": "tbosch really use static di benchmarks configuration pain maintain would great switch dynamic di ie reflection dart", "num": "815", "d": "2/2015"}, {"title": "feat ngmessages allow using template tags included messages", "body": "projection", "num": "810", "d": "2/2015"}, {"title": "fix foreach nt add initial iterator item", "body": "started work turned bug directive pass collection items collection empty still iterates least one empty item bug visualised right vicb asked add test fix created issue forget work gon na try fix ngconf", "num": "809", "d": "2/2015"}, {"title": "terminate compilation early style elements", "body": "currently step encounter style element set true disable steps terminating compile process earlier case would speed compilation see two ways returning value add method export class compilecontrol exit boolean internalprocess results startstepindex parent compileelement current compileelement thisexit false var istartstepindex istepslength amp amp thisexit terminate thisexit true tbosch think", "num": "808", "d": "2/2015"}, {"title": "stop minifying benchmark code", "body": "gives unhelpful error messages clue li without minifying", "num": "805", "d": "2/2015"}, {"title": "allow directive guard changeddetection", "body": "directive able disable change detection light dom knows current view visible needs annotation level information html compiler generate additional class current view presence type injection let compiler know artificial change detection boundary child elements decorator selector pane bind selected selected class pane interface cdc changeddetectioncontrol constructor cdc changedetectioncontrol thiscdc cdc set selected value thiscdcenable value would allow", "num": "795", "d": "2/2015"}, {"title": "allow directive control changedetection contract", "body": "currently changedetection supports pruning branches updating components binding changes current mechanism imperative declarative one suggested property set default", "num": "794", "d": "2/2015"}, {"title": "port dart changedetection generator", "body": "need implement see example", "num": "793", "d": "2/2015"}, {"title": "support query injection elementinjector", "body": "cases component would like inject list child components light dom list needs observable component notified child component creationdestruction example would inject could databound inside component template querylist works list like data bound children apis allow component listen additionremovereposition children change content response child components adderemoved light dom support control direct child match light dom", "num": "792", "d": "2/2015"}, {"title": "elvis operator expressions", "body": "currently thrown error expression suppress null dereferencing support would short circuit evaluation null way could explicit notation would show values could syntax fallow dart proposal", "num": "791", "d": "2/2015"}, {"title": "dart dom facade innerhtml", "body": "wired thing going dart dom facade property gt false gt true gt exists gt null basically means ca nt use name test property name lookup setter dart going specialcase property unblock person familiar dart could give hand one would awesome", "num": "789", "d": "2/2015"}, {"title": "add support css files build system", "body": "css copied dist folder possible add css files examples", "num": "788", "d": "2/2015"}, {"title": "support alternative ways firing events components", "body": "current support support injection streamcontroller support retrieval streams component eventssource close closestream class mycomponent closestreamcontroller closestreamcontroller closestream stream constructor closestreamcontroller new streamcontroller closestream closestreamcontrollerstream", "num": "781", "d": "2/2015"}, {"title": "improved style support components rough proposal", "body": "part emulating shadow dom implement solution loading css inside components embedding style rules directly component template undesirable makes templates harder read makes much harder use css preprocessors sass less would lead duplicating common styles problems element normal way loading css inert shadow dom css generally frowned upon performance reasons opportunity since angular control styles actually rendered component shadow dom emulation extend ideathe process give component authors power proposal angular core implements directive include style file via url discussion sake let call probably end something like though used component native shadow dom output element rendered inside shadow dom component using emulated shadow dom one common element added document head component instances also used provide component authors means apply arbitrary transformation embedded style could look vaguely something like purposefully handwaving lot details want get idea across main usecase mind creating style rules defined terms theme eg would let people whatever arbitrary transformation incoming rules including applying sass less fly wanted reason css shimming enabled process would occur userdefined transformations css shim could potentially another transform notes possible mechanism nt tightly coupled styles could instead part interceptorstransforms work http requests depending http support looks built", "num": "779", "d": "2/2015"}, {"title": "viewcontainer hydrate element injector linking", "body": "consider following parentdirective childdirective used follows example work currently throws throws hydrating child element injector attaching tree find parentdirective", "num": "777", "d": "2/2015"}, {"title": "compiler reliably know element properties ahead time", "body": "line checks order setup element property binding however element web component properties known element part live dom simplest solution skip check altogether always bind element property however directive element bound property bind directive", "num": "776", "d": "2/2015"}, {"title": "ensure versions shared packages pubspecyaml", "body": "already done done way", "num": "775", "d": "2/2015"}, {"title": "special case attrfoo bindings", "body": "allow binding attributes escape hatch binding properties working fallow philosophy would bind attribute property element", "num": "773", "d": "2/2015"}, {"title": "compiler run build step", "body": "x fix core workaround circular dependencies nodejs x refactor changedetection remove circular dependencies x create dom adapter compiler execute outside browser implement nodejs dom adapter x implement dart dom adapter protoview serializer deserializer", "num": "760", "d": "2/2015"}, {"title": "consider renaming eval methods disallowed strict mode", "body": "trying get running babel stumbled issue methods named disallowed strict mode opinion one plans change name something wo nt conflict strict mode", "num": "755", "d": "2/2015"}, {"title": "verify role whitelist allowed roles", "body": "discussed would hugely valuable validate role values whitelist allowed roles relatively fixed ones want allow include widget document landmark roles abstract roles throw warning along invalid ones examples throw errors error valid role error abstract roles used directly specifying valid replacements like instead would add complexity would super helpful roles whitelist widgets composite widgets document structure landmark roles", "num": "754", "d": "2/2015"}, {"title": "transpiler nt fully support promisethen promisecatch", "body": "promisethen nt currently support argument promisecatch generates transpiler error example following samples fail integrationspecjs support promisecatch done gt tplresolversettemplate mycomp new template inline compilercompile mycomp gt done catch err gt generates identifier expected exception done support promisethen done gt tplresolversettemplate mycomp new template inline raises incorrect number arguments passed method named compilercompile mycomp gt done err gt done", "num": "753", "d": "2/2015"}, {"title": "ngrepeat render order reversed ngif", "body": "expected behaviour element created reversed behaviour root element using issue exist using instead", "num": "752", "d": "2/2015"}, {"title": "delete analyzerdart files successful analysis", "body": "could see leaving analysis fails aid debugging analysis succeeds confusing", "num": "751", "d": "2/2015"}, {"title": "update changedetection take advantage localvariables", "body": "depends currently know vars locals query runtime change compile time resolution done", "num": "748", "d": "2/2015"}, {"title": "error build benchmarksexternal macos", "body": "hi running gulp build results error benchmarksexternal macos stating null object getter isempty find attached gists", "num": "746", "d": "2/2015"}, {"title": "benchpress add cloud reporter", "body": "", "num": "744", "d": "2/2015"}, {"title": "list local variables known statically", "body": "order decide runtime time executes negative perf implication need know vars locals compilation information collected html compiler available work need proper initialization pull things compileelementvariablebindings verify vars get added", "num": "741", "d": "2/2015"}, {"title": "form email validation issue", "body": "looking guide forms within angular noticed first example email field validates value like following myemail mail still valid email example looking page", "num": "740", "d": "2/2015"}, {"title": "upgrade traceur", "body": "landed fixes syntax error builds would nice pull", "num": "733", "d": "2/2015"}, {"title": "injector create singletons", "body": "hi changed like javascript use matching binding available function var injector new injector bind car toclass sportscar defaultbindings true thought injector always returns singletons test fails correct behavior injector", "num": "731", "d": "2/2015"}, {"title": "hammerjs template interaction causes npe", "body": "assume template get turned gets instantiated attempt register event issue element clone yet inserted main document rendering try register listener wrong document null see hammerjs issue null since main document proposed fix use documentimportnode element true instead", "num": "723", "d": "2/2015"}, {"title": "samplebenchmark apps broken safari", "body": "running helloworld app one benchmarks safari get following errors btford related zonejs see", "num": "721", "d": "2/2015"}, {"title": "use travis cache", "body": "related nt really depend use travis cache cache following dependencies directory npm dependencies directory pub dependencies example commit done angular docs travis caching", "num": "719", "d": "2/2015"}, {"title": "lock external dependencies", "body": "build currently nondeterministic therefor hard reproduce many external dependencies resolved build time possible single sha create many different build artifacts depending build happens fix need lock external dependencies include npm dependencies locked via pub dependencies locked via file dart sdk dartium dependencies locked fetching concrete version rather whatever latest version dependencies locked use travis cache cache dependencies speed build startup time like angularjs repo", "num": "718", "d": "2/2015"}, {"title": "change shorthand template syntax", "body": "currently reads confusing use instead", "num": "717", "d": "2/2015"}, {"title": "remove", "body": "turns replaced component selector myapp template inline directives bind container toclass tabs pane class myapp component selector tabs template class tabs extends container directive selector pane class pane constructor c container", "num": "711", "d": "2/2015"}, {"title": "support binding", "body": "add bindingbuilder return instance typea bind typeb toalias typea implies injectorget typea injectorget typeb", "num": "710", "d": "2/2015"}, {"title": "templatedirectives take bindings types", "body": "take full binding support update reason issue something like component selector tabs class tabs component selector pane class pane constructor tabs tabs inject would like write different tab participates imagine would work even thought implements fix would would work expected", "num": "709", "d": "2/2015"}, {"title": "directive dependency looku either elementinjector injector optional injection", "body": "currently lookup directives starts proceeds dom tree parents used point lookup switches see instead vs choice made statically template compilation time based type means either service directive current cross replaced", "num": "708", "d": "2/2015"}, {"title": "transpiler erases implements generated dart code remove import well", "body": "testcorecompiler viewspecjs viewcontainerspecjs use annotation generated dart code nt leading unused import warning", "num": "704", "d": "2/2015"}, {"title": "remove import dart mirrors", "body": "imports dart mirrors need remove source currently examplessrchelloworldindexdart directly imports amp creates possible avoid user deal directly made bit complicated since transformers write across package boundaries one option would use seam probably move file avoid rewrite imports new file maybe could move say generated code rewrite user calls use generated call involves moving around files messing around imports completely ignores would affect js side things may appropriate solution somewhere start discussion", "num": "700", "d": "2/2015"}, {"title": "rename", "body": "needs add mapping dart", "num": "699", "d": "2/2015"}, {"title": "locationchangestart nt fire routing variables changed", "body": "set application routing like appconfig routeprovider function routeprovider routeproviderwhen templateurl myviewhtml controller mycontroller b myvar templateurl controller add listener application like scope locationchangestart function event nexturl currenturl consolelog location changed route changes b listener get called however change route bfoo bbar listener nt get called way listener gets fired routing variable changes", "num": "698", "d": "2/2015"}, {"title": "add zippy example", "body": "hey everyone playing angular code last days built rudimentary zippy component wonder would interested added examples folder sure others would interested send pull request polish together want", "num": "696", "d": "2/2015"}, {"title": "error building seems like run build", "body": "thoughts yjbanov", "num": "694", "d": "2/2015"}, {"title": "benchpress smoke tests", "body": "selenium server use one protractor add example uses plain dom button loop versions js direct usage via jasmine command line test dart via guiness command line test dart via guiness command line test", "num": "693", "d": "2/2015"}, {"title": "refactor test suffixes folders", "body": "change gulpfile suffixes protractor benchpress enabled previous protractor benchpress disabled previous karmajs karmadart tests previous jasmine guiness command line tests previous toolstranspilerunittesttranspilertestjs folders move unit tests folder well see eg see move tests folder contains html page test", "num": "692", "d": "2/2015"}, {"title": "helloworld example dart nt work", "body": "built project launch servers works fine returns console", "num": "691", "d": "2/2015"}, {"title": "locationabsurl undefined base href", "body": "running angular base href load assets specific subdirectory enable html mode routes setup like upon loading application following error thrown n times believe per anchor href page debugging issue found line returns guess base href throwing matching routes undefined", "num": "690", "d": "2/2015"}, {"title": "add support reading static attributes components", "body": "would useful read components static attributes bindings probably prerequisite many usecases example use case imitating native input api standard radio buttons put one singleinputcanbechecked group name attribute component author wants support api custom radio button author needs able read name attribute usually need though create binding property", "num": "688", "d": "2/2015"}, {"title": "support event bindbubbleevent syntax", "body": "", "num": "686", "d": "2/2015"}, {"title": "remove cyclic dependencies", "body": "cyclic dependencies work modules loaders eg systemjs nt work commonjs get rid issue also includes changing build ensure wo nt get cyclic dependencies back eg walking nodejs dependencies via done module module fashion avoid many merge conflicts", "num": "683", "d": "2/2015"}, {"title": "move min version dart", "body": "x update readme x disable stable release travis file hits stable x update pubspecs define sdk version constraint", "num": "681", "d": "2/2015"}, {"title": "dgeni honor new lines tags", "body": "see html exp render html exp renders", "num": "680", "d": "2/2015"}, {"title": "emulatedshadowdomstrategy error component around another binding", "body": "using following works mdbutton however component followed preceded seemingly binding error thrown lightdomjs html header demo click html demo click header error pretty easy see error occurring tracing back route cause much faster someone familiar shadow dom emulation", "num": "679", "d": "2/2015"}, {"title": "add support optional parent ancestor", "body": "required work injector look either ca nt cross boundaries determined compile time makes sense property take verify x support binding remove couple usecases optional injection custom radiobutton radiobutton appear inside radiobuttongroup standalone inside group user interacts radiobuttons group one focus stop keyboard shortcuts standalone radiobuttons placed anywhere inside cells mdradiobutton needs able use injected mdradiogroup register use different code path absent theming currently ngmaterial lets specify theme section app using html defaultthemed content everything inside uses ponies theme applying theme obviously optional optional injection would necessary check theme applied element", "num": "675", "d": "2/2015"}, {"title": "self closing components", "body": "self closing components time around", "num": "673", "d": "2/2015"}, {"title": "build fails due unavailable option command", "body": "hi pulled latest changes repository ran output dart super familiar command line tool however error says flag apparently supported might due outdated version gon na verify letting know might want update readme accordingly specific version required", "num": "670", "d": "2/2015"}, {"title": "improve css shim", "body": "emulated shadow dom strategy used compiler update html css scope styles current implementation needs improvements x works component selector tag name selector complex ie would fail reason try add selector name attribute child nodes valid attribute name fixed x selector replaced component tag name use tag name see first bullet point need generate distinct attribute component notice attribute component attribute inside component fixed support see x way shim dynamically added nodes done adding arbitrary html view view prevent view reuse", "num": "669", "d": "2/2015"}, {"title": "global resolve", "body": "think helpful provide kind mechanism initially wait optional global resolve app initialization scenarios fetch auth role based permission data model structures etc etc executing router handler put resolve login route feels super ugly also really first app execution nothing afterwards resolves routes useless sure plan include way angularjs also thanks", "num": "662", "d": "2/2015"}, {"title": "methods resolved right context presence context locals", "body": "template f throws seems evaluated local context", "num": "660", "d": "2/2015"}, {"title": "markdown collides special chars docs", "body": "interesting docs table noninformative screenshot", "num": "659", "d": "2/2015"}, {"title": "empty option select shows last position using ngoptions ngif empty option", "body": "check options loaded http request plunkr use timeout empty option apears last position using ngif use ngshow everything works well", "num": "658", "d": "2/2015"}, {"title": "routeupdateparams replaces variable adds search parameter", "body": "let say route optional use replace parameter job also adds search parameter end url following code demonstrate issue angular bug monkeytalk angularmodule app ngroute config function routeprovider routeproviderwhen page variation param template variation param controller function scope route routeparams consoleinfo set param routeparamsparam routeupdateparams param walk consoleinfo set template default traced problem line angularroutesjs", "num": "656", "d": "2/2015"}, {"title": "cssshim crashes browser encountering css import", "body": "reproduce create component following template try render emulatedshadowdomstrategy land something cssshim infinite loop crashes chrome tab firefox instance add comment immediately crash occur elements added empty", "num": "654", "d": "2/2015"}, {"title": "benchpress params broken pub serve", "body": "tries load corresponding utility file hardcoded location fails", "num": "653", "d": "2/2015"}, {"title": "question join early adopter program", "body": "consultant recommend application built angular want understand changes happening provide feedback framework get shape get involved", "num": "650", "d": "2/2015"}, {"title": "application able override shadow dom strategy", "body": "currently application able override root shadow dom strategy primordial injector", "num": "649", "d": "2/2015"}, {"title": "flip attrvalue componentbind", "body": "currently reason right multiple properties mapping property name silly given property single mapping possible attribute mapped multiple properties especially", "num": "648", "d": "2/2015"}, {"title": "make component bindings optional", "body": "component bindings optional currently elementbinderbuilder throws error binding attribute value empty might useful eventually add support specifying optional vs required bindings simplest shortterm approach make bindings optional far angular concerned component perform assertions", "num": "647", "d": "2/2015"}, {"title": "support function types typescript aka typedefs dart", "body": "transpile currently atscript nt support", "num": "645", "d": "2/2015"}, {"title": "support enums", "body": "dart typescript basic syntax note dart vm supports enums outofthebox dartanalyzer need enable flag enableenum", "num": "644", "d": "2/2015"}, {"title": "question planning support datadriven views angularjs", "body": "use angularjs develop suit enterprise applications heavily rely datadriven views views definitions derived database known compile time planning support datadriven views angularjs datadriven views would fit componentbased directives planning keep compile available compiling arbitrary fragments html", "num": "642", "d": "2/2015"}, {"title": "static properties initialized dart output", "body": "transpiles initialized atscript dart", "num": "640", "d": "2/2015"}, {"title": "abstract methods body dart", "body": "transpiles method body", "num": "639", "d": "2/2015"}, {"title": "strip final const abstract annotations dart output", "body": "pollute dart code example import const final abstract abstract class blah final const constructor thisi transpiles library import package show const final abstract abstract class blah final const const blah removed still imported unnecessarily", "num": "638", "d": "2/2015"}, {"title": "abstract effect dart output", "body": "transpiles", "num": "637", "d": "2/2015"}, {"title": "support const fully", "body": "class const constructor like class blah final int const constructor int thisi correctly transpiled however way use wrong transpiler allows supported", "num": "636", "d": "2/2015"}, {"title": "support parameter properties", "body": "per typescript parameter properties example atscript dart", "num": "635", "d": "2/2015"}, {"title": "add support flag attributes components", "body": "way component check whether attributes provided example end user html boo ahh component able know difference attribute present empty top example vs attribute absent bottom example", "num": "633", "d": "2/2015"}, {"title": "add support setting default component role", "body": "component configuration include option default element role", "num": "631", "d": "2/2015"}, {"title": "handling structural change detection transformers", "body": "agreed upon registries differs directives store snapshot compose supported thinking component selector foreach bind collection list field prop gt gt class todos collection list formatter name observable input observable class observable apply input return input formatter name filter input list class observable apply list predicate return listfilter predicate", "num": "627", "d": "2/2015"}, {"title": "support lifecycle methods", "body": "lifecycle sure depending structural changes issue shakes see", "num": "626", "d": "2/2015"}, {"title": "allow directives export variables", "body": "exporting variables different exports variables child change values runtime happens reaction function exports variables current view change values runtime happens view hydration directive instantiation change detection", "num": "625", "d": "2/2015"}, {"title": "add support const bindings", "body": "think addition bindings directive able get list static values injectable constructor reasons might good idea explicit certain properties meant static defining bindings forces implement setters throw someone tries rebind semantically properties bindings rather directive configuration allows write directives init work constructor right delay first onchange lack properties cripples forms api consider formvalue formvalid example form constructed html construct binding fires example work value valid modified binding comes next static properties could construct form change detection kicks hydration example would work closed issue text would useful read components static attributes bindings probably prerequisite many usecases example use case imitating native input api standard radio buttons put one singleinputcanbechecked group name attribute component author wants support api custom radio button author needs able read name attribute usually need though create binding property closed issue text way component check whether attributes provided example end user html boo ahh component able know difference attribute present empty top example vs attribute absent bottom example jelbourn would nt proposal sufficient cover usecase proposal one could", "num": "622", "d": "2/2015"}, {"title": "declaratively bind events properties", "body": "goal dom reference directive decorator selector input typetext events click onclick class somedirective constructor property value valuesetter function thisvaluesetter valuesetter onclick event something thisvaluesetter clear", "num": "621", "d": "2/2015"}, {"title": "dialog service", "body": "", "num": "620", "d": "2/2015"}, {"title": "correct capitalization bindings", "body": "attr vs prop attr vs prop others general list overrides correct discrepancies compiler", "num": "619", "d": "2/2015"}, {"title": "port angularjs router atscript", "body": "", "num": "618", "d": "2/2015"}, {"title": "transpile atscript comments dart", "body": "allow generation dartdoc source code", "num": "616", "d": "2/2015"}, {"title": "syntactic sugar instantiating components tests", "body": "prerequisite describe mycomponent gt instantiate injectable tb testbed gt var element element tb directive mydirective override new template new component compile html lightdom instantiate instance type element component selector mycomponent class mycomponent", "num": "615", "d": "2/2015"}, {"title": "way override instances primordialinjector unit tests", "body": "tests needs separate instance primordial injector delay creating injector execute method add method test vocabulary overriding injector main describe test gt bind bind tovalue bind tofactory bind toclass bind toasyncfactory see di", "num": "614", "d": "2/2015"}, {"title": "title service", "body": "injectable service would allow application update title needed since longer place bindings indexhtml", "num": "612", "d": "2/2015"}, {"title": "readwrite dom queue", "body": "", "num": "611", "d": "2/2015"}, {"title": "add support component selectors", "body": "selector pseudoclass probably supported component selector would let things like js component selector scarybutton href template new templateconfig inline class scarybutton component selector scarybutton href use anchor instead button template new templateconfig inline class scarylinkbutton might also worth exploring based performance pseudoclass optional syntax excludeselector eg", "num": "609", "d": "2/2015"}, {"title": "cleanup npm publish", "body": "rename rename source folder change transpile options use instead change depend change use name rename npm name angular change publish changes packages angular npm adjust script use new path adjust script use prefix npm tag name run unpublish previous versions via npm repo npm repo", "num": "607", "d": "2/2015"}, {"title": "add support role aria attribute bindings", "body": "angular currently supports data binding properties aria spec however extension html relies attributes end result would need allow user things like html", "num": "606", "d": "2/2015"}, {"title": "ngclass doenst evalute object changes", "body": "faced problem project using ngclass ajax call return array objects wanted use property object css class property like example span tag rendered ajax call yet finish ngclass nt choose class expected ajax call finished condition ajaxarray type true ngclass changed inspected element via chrome ourdinamicclass true appeared element sure nt work fix put span certain bug strange behavior decided report", "num": "605", "d": "2/2015"}, {"title": "add todo app examples", "body": "davideast already running app locally", "num": "604", "d": "2/2015"}, {"title": "angular forms support form attribute inputs", "body": "making use form attribute inputs contained table nt lend wrapped form correctly using form attribute still make use ngsubmit form attribute submit form however pass form submit function nt additional inputs available outside form assumption due form directive access part dom inputs ca nt attach form object information could look plans later version angular", "num": "603", "d": "2/2015"}, {"title": "passing static attributes components", "body": "designing components wrap native components lot attributes enddeveloper would want apply underlying native element example take common wrap component order manipulate appearance add animation still using native button underneath html spec attributes etc still work expected would super fantastic component authors easy way passcopy type attribute without manually creating binding one types elements quite attributes time attributes like completely static thus using data binding feels like overkill element types think would apply things someone could conceivably want wrap custom component passes static attributes also global attributes passing static attributes would useful class tabindex additionally passing event bindings would also keep boilerplate wrapping kinds components especially media events could usecases considering since set elements seems limited could something scoped specifically elements example something like", "num": "602", "d": "2/2015"}, {"title": "dart put package imports file imports", "body": "dart import package show future promisewrapper import package show map list mapwrapper listwrapper import package show functionwrapper type ispresent isblank import bindingdart show binding bindingbuilder bind import exceptionsdart show providererror noprovidererror invalidbindingerror asyncbindingerror cyclicdependencyerror instantiationerror import keydart show key", "num": "599", "d": "2/2015"}, {"title": "dart avoid leading importingexporting subdirectory", "body": "dart library export srcdirectivesforeachdart export srcdirectivesifdart export srcdirectivesnonbindabledart export srcdirectivesswitchdart dart library export srcdirectivesforeachdart export srcdirectivesifdart export srcdirectivesnonbindabledart export srcdirectivesswitchdart", "num": "598", "d": "2/2015"}, {"title": "support multiple templates per component", "body": "prerequisite goal given component needs able use different templates per locale device type test requires decouple definition rename example simple component separate annotation local devices get added system add note different templates different directive imports works existing reflector since rewritten class mycomponent reflectoraddannotation mycomponent new component selector mycomponent reflectoraddannotation mycomponent new template url someurl directives dira dirb reflectoraddannotation mycomponent new template locale en url someurlen directives dira dirc rewritten reflector form properly tree shaken based locale compiler support compiler needs aware current compiling templates compiler need new dependency select right per also used tests override templates compilation pipeline start component use convert use covert html", "num": "596", "d": "2/2015"}, {"title": "rename template viewport", "body": "rename needed", "num": "595", "d": "2/2015"}, {"title": "support array arrays templateconfig directives", "body": "currently templateconfigdirectives takes list means importing whole list enumerated supporting array arrays arbitrary deep var coredirectives ngforeach ngif var appdirectives coredirectives new templateconfig directives appdirectives", "num": "592", "d": "2/2015"}, {"title": "warn user defining binding capitals", "body": "fail html attributes case insensitive actually bound variable however currently error thrown descriptive option detect bindings template loading option print current context evaluation fails user see inside", "num": "591", "d": "2/2015"}, {"title": "change detection provide previous value flipping array null", "body": "assuming watching structurally array changes ex foo bar reference changes null need know form change detection system foo bar removed today information delivered change detection system changes got bot currentvalue previousvalue equal null ones would keep state manually based discussion vsavkin working directive", "num": "588", "d": "2/2015"}, {"title": "proposal singlesource documentation site", "body": "think build angular documentation site autogenerate shared sources supported languages motivation users angular choice programming language maintaining separate documentation site every supported language would wasteful also strive consistency accuracy completeness across supported languages proposal generate site atscript html markdown sources use atscript code snippets use html markdown prose code snippet boxes show little tabs next allowing reader switch languages sticky query parameter would set language globally across code examples accuracy keep docs accurate code snippets tested ci server", "num": "579", "d": "2/2015"}, {"title": "events break tree element injectors", "body": "try submit div button point proto element injector correct angular throw trying hydrate view easy way fix change protoelementinjectorbuilder add sure good fix though", "num": "577", "d": "2/2015"}, {"title": "benchmarks track code size", "body": "", "num": "575", "d": "2/2015"}, {"title": "benchmarks track app build times", "body": "implementation transformers could affect build time application influences developer productivity track", "num": "574", "d": "2/2015"}, {"title": "implement formatters", "body": "", "num": "573", "d": "2/2015"}, {"title": "breaks cookies", "body": "seems unless put fully qualified url cookies set nt survive refresh example problem developmentstaging domain domains protocols non dev change", "num": "569", "d": "2/2015"}, {"title": "illegal invocation infinite digest deep watch property dom jquery object", "body": "example jsbin steps reproduce create scope set property scope dom element create watch scope set objectequality property true angularmodule app controller somectrl function scope scopedata test documentbody", "num": "566", "d": "2/2015"}, {"title": "track compile time benchmarks", "body": "good metric developer experience", "num": "565", "d": "2/2015"}, {"title": "angular plans virtual dom", "body": "per suggestion transferring issue project active member southern california angular community noticed trend lately angular starts loosing traction reactjs impression formed minds developers angular slow large apps due direct dom manipulation plans angular switch virtual dom maybe better technology view layer similar reactjs think would huge win minimize number developers may loose frameworks like react please share vision share socal angularians thank", "num": "561", "d": "2/2015"}, {"title": "gulp build copy license file proper places dist", "body": "", "num": "558", "d": "2/2015"}, {"title": "transpile merge patches traceur upstream remove", "body": "see see patches added transpile run removed changes land upstream traceur", "num": "555", "d": "2/2015"}, {"title": "perfciangularjsorg", "body": "deferring atscript rewrite fixed shortly thereafter", "num": "552", "d": "2/2015"}, {"title": "implement largetable benchmark angular", "body": "", "num": "550", "d": "2/2015"}, {"title": "execute html compiler outside angular zone", "body": "", "num": "544", "d": "2/2015"}, {"title": "ngmodel nt change value input tag case type hidden", "body": "input tag typehidden ngmodelname inside controller changed value name variable found value attribute input tag updated works used ngvalue input tag typehidden ngvaluename ngmodel directive update value attribute input tag case type hidden", "num": "536", "d": "2/2015"}, {"title": "select get null failed filters", "body": "choose default null want empty string use filter get correct answer", "num": "535", "d": "2/2015"}, {"title": "create exceptionservice", "body": "create service see fix todo", "num": "533", "d": "2/2015"}, {"title": "drop ng prefix angular directives rename ngrepeat foreach", "body": "gt gt gt", "num": "532", "d": "2/2015"}, {"title": "add missing support binding string literals", "body": "given decorator decorator selector test bind test test class test constructor consolelog test nametest property", "num": "531", "d": "2/2015"}, {"title": "throw errors binding property found element dev mode", "body": "would catch errors imported", "num": "527", "d": "2/2015"}, {"title": "switch shadowdom strategy emulated default", "body": "must also update benchmarks change check todo app example vsavkin doc outlines options", "num": "526", "d": "2/2015"}, {"title": "integration protractor need expose protractor testing api", "body": "", "num": "525", "d": "2/2015"}, {"title": "support overriding templateconfig compiler", "body": "currently compiler takes extracts hack allows us supply different element mostly used testing actually incorrect general need override need either general mechanism overriding need way pass compiler", "num": "524", "d": "2/2015"}, {"title": "support", "body": "depends would nice create pseudo events keys would extended would need understand named keys letters modifiers implementation done event manager see", "num": "523", "d": "2/2015"}, {"title": "support syntax", "body": "current syntax allow short hand syntax syntax replaces attribute prefix also pulls keyword value attribute name", "num": "522", "d": "2/2015"}, {"title": "compiler macro pass", "body": "new compiler needed work macro selector mybutton class mybutton constructor injectable created transform el element called multiple times matches happen perform dom transformation template used transforming transforming migrated", "num": "521", "d": "2/2015"}, {"title": "publish angulardart", "body": "angulardart needs published single module", "num": "520", "d": "2/2015"}, {"title": "di instantiate dependencies wrong injector", "body": "seems like di instantiate dependencies using injector binding resolved instead requesting injector dependency present requesting injector would fail resolve deps function var parent new injector car var child parentcreatechild bind engine toclass turboengine possible override dep child injector expect fails returns resolve deps function var parent new injector car engine var child parentcreatechild bind engine toclass turboengine", "num": "519", "d": "2/2015"}, {"title": "variables exist", "body": "issue html file debug firefox", "num": "518", "d": "2/2015"}, {"title": "lexer support utf javascript", "body": "currently lexer change detection uses dart returns supports utf js returns support utf", "num": "517", "d": "2/2015"}, {"title": "typeerror undefined function evaluating scopecheckagain", "body": "scopecheckagain controller error undefined know reason", "num": "516", "d": "2/2015"}, {"title": "hello world example url", "body": "hello instruction run hello world seems wrong built angular package per instruction gulp dev server starts ok url seems wrong per readme url gives get exampleswebhelloworld please suggest run example", "num": "511", "d": "2/2015"}, {"title": "transpiler output dart constructors checked", "body": "force habit made write following atscript code meant define treat method dart becomes constructor transpiler fail sees", "num": "510", "d": "2/2015"}, {"title": "transpiler wrong handling string templates", "body": "dart string interpolation works regardless quote style string templates perform interpolation oldstyle strings transpiler unaware therefore produces wrong result transpiles wrong believe currently results bug dom event binding", "num": "509", "d": "2/2015"}, {"body": "yes check tracking duplicates section info", "d": "2/2015"}, {"body": "sorry waste time thank much", "d": "2/2015"}, {"body": "wrong repo sounds like support question asked one support channels", "d": "2/2015"}, {"body": "dart requires annotations const dart like js custom object needs fields needs done opaquetoken needs made transpile object dart using const transpiler annotation see afaik dart treat string interpolation compiletime constant needs changed string addition initializer list become sure transpiler output yes fundamental limitation might need traspiler work make happen", "d": "2/2015"}, {"body": "rkirov thnx info try change use annotation report back hit pbs", "d": "2/2015"}, {"body": "sorry wrong repo", "d": "2/2015"}, {"body": "context rules automatic semicolon insertion essentially safe time except return break continue throw statements course code occasionally fail sucks might feasible error cases essentially unreachable code cases relying asi simple fix makes tooling easier also stuff like error recovery compilers martin alex eagle notifications githubcom schrieb feb um uhr stock webstorm gives warning statements nt end semi could turn warning ide rather rely asi like format codebase clangformat doesnt understand javascript syntax enough understand statement terminates linebreak instead semicolon instead removes linebreak breaking code general pity carry forward asi atscript since complicates tooling anyone strong desire omit semicolons atscript code mprobst suggests well working mechanism finding asi abuses codebase reply email directly view github", "d": "2/2015"}, {"body": "dropping asi also dart nt asi nt see transformer add already mostly using mandatory semicolons", "d": "2/2015"}, {"body": "wrong repo", "d": "2/2015"}, {"body": "benchmarks measure fast create pages objects reflection used finding dependencies classes also creating even ignored compilation time would still affect view instantiation", "d": "2/2015"}, {"body": "right thanks", "d": "2/2015"}, {"body": "let add also move method found step waits promise replace element text also get parts via method otherwise compiler could return protoview styles yet resolved promise might waiting cases go local fields", "d": "2/2015"}, {"body": "tobias thanks explanations resolvecss return promise inline hence fetch via xhr css however nt want wait ready rather parallelize nested templates download done style promises pushed protoviewstylepromises promises compiler delay protoview resolution resolved also think ignore children step shims dom adding attribute element still run le f\u00e9vrier tobias bosch notifications githubcom \u00e9crit let add also move method found step waits promise replace element text also get parts via method otherwise compiler could return protoview styles yet resolved promise might waiting cases go local fields reply email directly view github", "d": "2/2015"}, {"body": "overall js dart land minify minify eventually think want run benchmarks minified code could change performance characteristics need measure though anyways set source maps correctly even nt minify actually would like real dart source code line hint could change pr instead turning minification", "d": "2/2015"}, {"body": "actually even source maps wo nt applied stack traces read via webdriverprotractor following create source maps running translate stacktraces using source maps tests print errors use translation logic", "d": "2/2015"}, {"body": "davideast fyi", "d": "2/2015"}, {"body": "vsavkin suggest better name add thoughts", "d": "2/2015"}, {"body": "working", "d": "2/2015"}, {"body": "landed master", "d": "2/2015"}, {"body": "thoughts based discussions mhevery work css import generally frowned upon performance reasons use stay close web components performance issue would inlined build system would lead duplicating common styles styles scoped current styles rewritten per component hence duplicate styles component however plans emulated strategy shared styles strategy take care deduplicating ie styles inserted main usecase mind creating style rules defined terms theme eg backgroundcolor primarycolor could nice require thinking rules would possible share styles ie different components could different including applying sass less fly wanted reason also something discussed mhevery currently possible probably include support however ideas mind support css transformations handling css transformations need quite flexible need inline rewrite urls optionally scope rules dev mode prod mode none happen templates preprocessed designing support easy add sass less whatever arbitrary transform support", "d": "2/2015"}, {"body": "use import stay close web components vicb mean close web components css around long time popular sentiment avoided even browsers improved still common perception slower may still problem ie ms blog post less year ago still advises probably need testing styles scoped current emulatedshadowdomstrategy styles rewritten per component hence duplicate styles component style component scoping want able build components explicitly use css shimming mainly performance reasons plan building styles components work native emulated shadow dom modes rules would possible share styles ie different components could different primarycolor left background whole point build components primary color etc coming way material design prescribes selecting palette choose primary color accent color lighterdarker hues rest colors determined choice palette affects every material component", "d": "2/2015"}, {"body": "conversion w misko different idea moving forward work currently place", "d": "2/2015"}, {"body": "actually bug arv already fixed afaik", "d": "2/2015"}, {"body": "mean allow methods named eval bug cc sebmck", "d": "2/2015"}, {"body": "mean allow hang trying dig bug", "d": "2/2015"}, {"body": "particularly one maybe still different version bug either accident", "d": "2/2015"}, {"body": "ah interesting thanks clarifying closing", "d": "2/2015"}, {"body": "order avoid difficult locate problems angularjs validate role get changed set preferred done create entirely new node delete replace old one see spec ideally setting role done node gets inserted dom current javascript execution ends implicit roles associated elements might get picked immediately node gets inserted validate required parent child roles example menuitem exist without parent menu menubar role stretch goal validate interim structures need role presentation order handle correctly quoting spec roles element types authors must change role values time user actions authors wishing change role must deleting associated element children replacing new element appropriate role following invalid menu markup html deals vegas caracas whereas valid markup interim structures hierarchy annotated role presentation html deals vegas caracas", "d": "2/2015"}, {"body": "blaporte may add", "d": "2/2015"}, {"body": "ok thanks thought promisewrapper used create promises ie wrap etc realize also used call functions returning promises least want pass error function solves problem live without would much added value imo close issue thanks", "d": "2/2015"}, {"body": "wrong repo please move issue angular repo", "d": "2/2015"}, {"body": "previous implementation needs use new interface needs unit tests", "d": "2/2015"}, {"body": "thanks", "d": "2/2015"}, {"body": "vizuaalog file issue repository angular", "d": "2/2015"}, {"body": "ok sorry", "d": "2/2015"}, {"body": "sekibomazic think slight confusion nutshell turning option allows instantiate di bindings previously registered encountering nonregistered binding option injector create new binding using method use new binding create new instance mentioned magic happens case could view sugar hope desugared version makes obvious separate bindings separate keys di separate instances hope clarifies things", "d": "2/2015"}, {"body": "pkozlowskiopensource thanks explanation yes clarifies definitely", "d": "2/2015"}, {"body": "note solved master branch hammer gesture example embed custom build based master part latest official release hammer guess even better fixes", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "slightly complicated due npm vulnerable cache poisoning workaround though see", "d": "2/2015"}, {"body": "noticing things seem like could removed generated dart might allow removal import entirely many cases const type int abstract", "d": "2/2015"}, {"body": "merge", "d": "2/2015"}, {"body": "yup", "d": "2/2015"}, {"body": "discussing issue team decided current approach safest dependencies lt lt assume code reflectionreflector new reflectioncapability var module mytype bind mycomponent toclass mycomponentimpl var injector createinjector module code call requires us lookup constructors means correct reflector already set notice wrapped method short hand syntax means call delayed inside createinjector implications declaring dependencies module creating injector requires correct application runtime must module declaration since bindings delayed lookup imagine application setup google analytics reflectionreflector new reflectioncapability createinjector googleanalytics get googleanalytics run bootsrap angular app bootstreap myapp get application going register di totally reasonable means ca nt change reflector since configured think two problems standalone library depends must configured first use depends assume first user result configure think means developer correct position know needs configured transformer simply rewrite statement", "d": "2/2015"}, {"body": "going close issue think correct implementation correct reopen feel otherwise", "d": "2/2015"}, {"body": "thanks explanation disagreement approach going reopen bug track work rewrite import amp assignment couple questions understand correctly call whatever generated method replace assignment example appear immediately call status separate package mean codegenwise need transformer independent things stand declared service one dependencies included codegen since signal start searching annotations", "d": "2/2015"}, {"body": "assigned answers looks like emails may sent issue reassign updated", "d": "2/2015"}, {"body": "kegluneq yes setupreflection take assignment yes long term want pull di separate package happens transformer think need think deeper break transformers", "d": "2/2015"}, {"body": "wrong repo guess wanted open though please provide runtime reproduce scenario", "d": "2/2015"}, {"body": "yes please send pr", "d": "2/2015"}, {"body": "cool gon na tomorrow", "d": "2/2015"}, {"body": "get try", "d": "2/2015"}, {"body": "gulp clean fixes although wondering pub install pub upgrade tue feb pm yegor notifications githubcom wrote get gulp build try gulp clean gulp build reply email directly view github", "d": "2/2015"}, {"body": "probably use worried hits server time making build longer", "d": "2/2015"}, {"body": "hmm true travis happens anyway since pubspeclock file locally run issues since may building outdated set dependencies least latest pay bit local build time travis avoid issues like one reported make sure local build matches happens travis even forget clean tue feb pm yegor notifications githubcom wrote probably use pub get worried pub upgrade hits server time making build longer reply email directly view github", "d": "2/2015"}, {"body": "perhaps add gulpdartupgrade target would consistent use pub use pub get pub build mostly pub upgrade occasionally tue feb pm kevin moore notifications githubcom wrote hmm true travis happens anyway since pubspeclock file locally run issues since may building outdated set dependencies least latest pay bit local build time travis avoid issues like one reported make sure local build matches happens travis even forget clean tue feb pm yegor notifications githubcom wrote probably use pub get worried pub upgrade hits server time making build longer reply email directly view github reply email directly view github", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "benchpress smoke tests command line tests", "d": "2/2015"}, {"body": "iminar think", "d": "2/2015"}, {"body": "think get rid separate test tree move unit tests level source files move perf tests separate directories called perf within individual src directories way things stay together logically split nt hundreds files directory reason unit tests mixed source files mirror source closely also serve documentation source file separate directory makes discovery hard extensions proposed fine", "d": "2/2015"}, {"body": "update description", "d": "2/2015"}, {"body": "ca nt build project last version brew required somebody knows please let know install dart", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "kevmoo thanks new error urgent important", "d": "2/2015"}, {"body": "try running say", "d": "2/2015"}, {"body": "finally finished build still gives gulp serveexamplesdart even chromium dart", "d": "2/2015"}, {"body": "try per readme", "d": "2/2015"}, {"body": "kevmoo yes result", "d": "2/2015"}, {"body": "found could find asset webhelloworld package examples", "d": "2/2015"}, {"body": "bad didnt realize angular repo", "d": "2/2015"}, {"body": "cc vsavkin think dup", "d": "2/2015"}, {"body": "example usecase radio part control", "d": "2/2015"}, {"body": "precise commonjs handle cyclic deps albeit particular way returning halfbaked module objects case getting rid cycles good thing", "d": "2/2015"}, {"body": "cycles type annotations natural example planning break", "d": "2/2015"}, {"body": "current list circular dependencies generated madge also used validation build time changedetection part quite easy solve extract constants separate file compiler part around much challenging", "d": "2/2015"}, {"body": "actually workaround could use types nt import include whole module includes tested nodejs yet work theory eg import vc viewcontainer class view viewcontainers list", "d": "2/2015"}, {"body": "kevmoo curious required prefer dev stable channel dev channel could unstable sometimes", "d": "2/2015"}, {"body": "vicb hitting issue fixed", "d": "2/2015"}, {"body": "problem markdown renderer treats backticked code blocks inside html elements case inline code spans nt extract code language case first line wrap code block tag needed preserve whitespace", "d": "2/2015"}, {"body": "probably simplest solution without hacking party rendering engine ditch tables use headings", "d": "2/2015"}, {"body": "switching instead backtics would solve would change code keep table format tue feb pm pete bacon darwin notifications githubcom wrote probably simplest solution without hacking marked party rendering engine ditch tables use headings reply email directly view github", "d": "2/2015"}, {"body": "tried switching fine lose syntax highlighting switching headings would mean losing tables horrible hard coded method would render code elsewhere copy paste actual html table cells", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "jelbourn small repro case somewhere reproduce modified hello world", "d": "2/2015"}, {"body": "branch error occuring see action run hit", "d": "2/2015"}, {"body": "vsavkin fix", "d": "2/2015"}, {"body": "believe", "d": "2/2015"}, {"body": "vsavkin vicb confirm seems fixed", "d": "2/2015"}, {"body": "injector look either ca nt cross boundaries determined compile time makes sense property take verify support binding remove", "d": "2/2015"}, {"body": "probably html parsing issue nt able fix way browser parses html", "d": "2/2015"}, {"body": "lol self close top level app component assume everything belows belongs light dom", "d": "2/2015"}, {"body": "well fix problem html parsing would moved javascript probably webworkers", "d": "2/2015"}, {"body": "closing would make templates compatible html caitp per html spec browser parsers work use browser parser", "d": "2/2015"}, {"body": "could allowed shorthand template compilation output long version would happy example gain expressive powers small components small components wo nt need access light dom reason use another example simple cmp thing really teach new users use shorthand index page something users probably anyways teach new users set systemjs zonejs traceur index page anyways well bootstrapping etc", "d": "2/2015"}, {"body": "browser parses dom ca nt tell element self closed information lost asking possible unless parser break html spec nt think good idea", "d": "2/2015"}, {"body": "maybe ask see button chrome ff safari missing something sorry", "d": "2/2015"}, {"body": "asking totally works problem probably nt work ie etc keep mind developing chrome like developing instagram filter lot constructive feedback opinion add convo submit work focus work stuff lolz suggesting something like example using pseudo code rather using use similar api like since extending native element still end missing one attributes self closing", "d": "2/2015"}, {"body": "jamm planker example works becouse html parsing rules meaningless try parsing inspect dom browser customelement sibling child", "d": "2/2015"}, {"body": "mhevery thanks see looks like standardized bug think purposes much easy use attribute decorator instead component", "d": "2/2015"}, {"body": "okay turns required version gon na send pull request accordingly", "d": "2/2015"}, {"body": "vicb sorry forgot close one", "d": "2/2015"}, {"body": "works component selector tag name assign unique id every component use id compiling templates styles wo nt depend selector way shim dynamically added nodes one way implement inject prebuilt object component cssshimservice use compile dynamicallygenerated dom", "d": "2/2015"}, {"body": "vsavkin first two items fixed sure dynamically adding node good idea would prevent view caching", "d": "2/2015"}, {"body": "actually really easy current setup importing configrun block module app afterwards think ways fix affect appjs import bootstrap import config run appconfig import todoapp componentstodoapptodoappjs export function main config runs app bootstraps run return config gt bootstrap todoapp gt run indexhtml html systemimport app function module return modulemain catch consoleerrorbind console", "d": "2/2015"}, {"body": "nice mentioned documentation", "d": "2/2015"}, {"body": "lot flexible compared one neat benefits get even use systemjs wanted since promises", "d": "2/2015"}, {"body": "great nt play watch conferences talking looks really promising ca nt wait thanks", "d": "2/2015"}, {"body": "sure action one fully control bootstrap process guess thing need assure people easily get hands fundamental services might needed prebootstrap ex equivalent going close one possible current design think making things easier users framework stabilises bit see reallife usecases", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "sometimes information duplicated following text important info missing", "d": "2/2015"}, {"body": "pr", "d": "2/2015"}, {"body": "wrong repo see", "d": "2/2015"}, {"body": "wrong repo see", "d": "2/2015"}, {"body": "vicb bug addressed closed", "d": "2/2015"}, {"body": "mhevery fixed yet working currently hopefuly close sometime week going close item left", "d": "2/2015"}, {"body": "nt official program one would recommend build simple app gage api going would recommend checking todo app davideast would also suggest submit issues concerns may api long check previous issues submitting", "d": "2/2015"}, {"body": "closing actual work us", "d": "2/2015"}, {"body": "also good closely matches angular directive scope structure every time write binding far remember right backwards", "d": "2/2015"}, {"body": "mhevery sent pr wondering still got bindings described leftover docs", "d": "2/2015"}, {"body": "yes bindings part sure implemented yet tue feb pm pawel kozlowski notifications githubcom wrote mhevery sent pr wondering still got event bindings described leftover docs reply email directly view github", "d": "2/2015"}, {"body": "seems like covered sure actual syntax used make happen", "d": "2/2015"}, {"body": "thanks prompt response nt played angularjs yet ca nt work whether code reference answer questions understand thus far componentdirectives need put routes instead controllers would serve views case need predefined list directives going use something known compile time us derived database would able explain would angurlarjs way dealing cases thanks advance", "d": "2/2015"}, {"body": "see saying want actually define directives compile time database nt info imagine post boilerplate code shows someone could look figure might work might change time least developers could see usecase move forward", "d": "2/2015"}, {"body": "put together example jsfiddle simplified shows generate database derived views angular two pages available home book book one datadriven could please explain example would look like angular", "d": "2/2015"}, {"body": "jelbourn would nt proposal sufficient cover usecase proposal one could", "d": "2/2015"}, {"body": "pkozlowskiopensource yes issue really detailrequirement reading static attributes implemented", "d": "2/2015"}, {"body": "interesting nt thought specifying role component level somehow makes sense sent pr bind role attribute templates sure idea issue template bindings needed guess", "d": "2/2015"}, {"body": "yeah needed letting bind role saying given component always role x default", "d": "2/2015"}, {"body": "makes sense", "d": "2/2015"}, {"body": "take stab jumping impl though advantage expressing role js opposed attribute template guess makes things easier multiple templates", "d": "2/2015"}, {"body": "want make component always particular role would annoying boilerplate specify role every time like obviously component always component author save user boilerplate", "d": "2/2015"}, {"body": "jelbourn sure meant moving attribute template component realise would probably wrong place since role would marked element child element right", "d": "2/2015"}, {"body": "pkozlowskiopensource right would potentially inside shadow dom would invisible screen readers", "d": "2/2015"}, {"body": "jelbourn fine screen readers seems like break shadow root barrier mhevery rkirov would best place add logic special case directiveparser step maybe worth dedicated pipeline step", "d": "2/2015"}, {"body": "think would compile step since want update template nt clone assume template compiling template would come across would know component could see component update element template would one time thing resulting template", "d": "2/2015"}, {"body": "mhevery yep totally agree compile step reason work view creation question create new specific compiler step modify existing one best think would directiveparser slightly leaning towards creating new step nt feel strongly asking", "d": "2/2015"}, {"body": "think new think may things may need question mind decorator matches component adding role would trigger decorator think fine", "d": "2/2015"}, {"body": "agree misko note goes design goal templates fully describe happening without going annotations case developer productivity gains outweigh also pawel make sure mark steps mutate template nodes vs ones read far viewsplitter mutates step second", "d": "2/2015"}, {"body": "rkirov mhevery ok separate sounds good thnx input rkirov mean exactly mark steps mutate template nodes documenting special flag", "d": "2/2015"}, {"body": "yeah add comments", "d": "2/2015"}, {"body": "attribute scope solution generic aria", "d": "2/2015"}, {"body": "jelbourn comment", "d": "2/2015"}, {"body": "funny enough starts sound like place similar things previously discussed compiler macro pass", "d": "2/2015"}, {"body": "mlaval role attribute mind becuase see needed frequently aria attributes could make sense sometimes though arialive ariaatomic maybe really want specify set static attributes want applied component element role one", "d": "2/2015"}, {"body": "set attributes applied component", "d": "2/2015"}, {"body": "vsavkin ca nt remember decided wanted capture", "d": "2/2015"}, {"body": "implemented via", "d": "2/2015"}, {"body": "vsavkin need forms makes sense cc jelbourn", "d": "2/2015"}, {"body": "mhevery yes currently use components implements forms change would allow using decorators instead addition exporting properties directive able export otherwise would use following workaround", "d": "2/2015"}, {"body": "example usecase feature", "d": "2/2015"}, {"body": "jelbourn forms api example template html", "d": "2/2015"}, {"body": "injection values empty string", "d": "2/2015"}, {"body": "remarks traceur support types arrow functions compile ok see reflexion information added anonymous functions retrieve reflexion info anonymous function see", "d": "2/2015"}, {"body": "since testing important part angular story great see design test infrastructure start implementing example support following use cases running tests synchronously using mockzone running tests asynchronously without mocking zones api testing components isolation without html testing components html replacing injectables injector tree replacing directives component tree good answer angulardart everything hierarchical even harder solve", "d": "2/2015"}, {"body": "take stab creating design doc issues", "d": "2/2015"}, {"body": "duplicate", "d": "2/2015"}, {"body": "first example using pseudoclass javascript component selector scarybutton href template inline class scarybutton use anchor instead button component selector scarybutton href template inline class scarylinkbutton introducing optional syntax may lead us back directive api trying get away", "d": "2/2015"}, {"body": "nt access npm actually publishunpublish things sent relevant code changes", "d": "2/2015"}, {"body": "published following packages rttsassert", "d": "2/2015"}, {"body": "nothing changed recently based discussion mhevery going specialcase compiler", "d": "2/2015"}, {"body": "correct looking forward pr", "d": "2/2015"}, {"body": "got initial improved support binding attributes via", "d": "2/2015"}, {"body": "initial support attr bindings added via", "d": "2/2015"}, {"body": "guess next step improve existing impl based yjbanov idea yjbanov ping whenever got time discuss", "d": "2/2015"}, {"body": "sounds like angular question angular repo reopen issue", "d": "2/2015"}, {"body": "list examples needs built", "d": "2/2015"}, {"body": "davideast example probably dependent firebase", "d": "2/2015"}, {"body": "time work still interested", "d": "2/2015"}, {"body": "mhevery yup still interested need update refactor open pr get filters working would need update zonejs watch location hash manually trigger change detection alternatively could filter collection user clicks link rather update zonejs html active completed", "d": "2/2015"}, {"body": "btford think", "d": "2/2015"}, {"body": "going example pr soon think would best work example get example merged review prs also ideas examples please let us know", "d": "2/2015"}, {"body": "mhevery davideast got everything working used link initial state set component todofooterjs location service made add router need opinions code organized since move logic around fit suggested style example storing state business logic todosfilterediting todostore small refactor could switch design glorified flux architecture also known pubsub architecture could also refactor todo logic app component pass state children unidirectional whole app rerender mindset could make mvp version lot less code one component sidenote refactor css nt built components mind make example one example todo app suggestions todo location router service todofooterjs pluralize service todofooterhtml todofooterjs filter foreach todomainhtml todomainjs todostorejs filter currently function todomainhtml repo live view component overview update push small fix traceur nt binding arrow functions todostore", "d": "2/2015"}, {"body": "vsavkin makes sure support use case", "d": "2/2015"}, {"body": "believe able support use case input handling tied html forms something like submitform receive object containing name age", "d": "2/2015"}, {"body": "think looking simple extending native component said think create facade native component extend assuming propagate correct events etc html submit template inline lt button gt lt content gt lt content gt lt button gt component selector awesomesubmitbutton class awesomesubmitbutton extends htmlbuttonelement constructor el ngelement thiselement el", "d": "2/2015"}, {"body": "mhevery today returns max directive per type seems like need update support multiple directives ie case updating also support multiple directives cases think second decorator annotation currently effect use case want support could create prerequisite issue", "d": "2/2015"}, {"body": "yes supporting multiple directives supporting multiple sure would mean two also sure part primordialinjector due different apps may different", "d": "2/2015"}, {"body": "mhevery could discuss terminology making actual change think current good name good name makes hard distinguish list reference proposal would keep current rename annotation line documentfragment html doc uses terminology chose rename could rename prefer latest container methods like collection views", "d": "2/2015"}, {"body": "vsavkin rkirov please add thoughts goal rename something else freed component template annotations thoughts people seem allergic reaction interesting proposal vsavkin rkirov thoughts liked controller manages viewport create collision current point valid opinion", "d": "2/2015"}, {"body": "current favorite vicb arguments valid argument want evoke connection html really right connection directives live elements since ca nt use pick name connection", "d": "2/2015"}, {"body": "prefer viewport views viewport viewcollectionviewcontainer works", "d": "2/2015"}, {"body": "ok", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "wrong repo", "d": "2/2015"}, {"body": "wrong repo", "d": "2/2015"}, {"body": "moved", "d": "2/2015"}, {"body": "track full build times require pub build let track time require transformers part build thanks", "d": "2/2015"}, {"body": "angular developer wanted give experience building large applications angular far experienced performance problems big angular applications really due dom operations rather due way change detection bindings implemented well inability disconnect certain parts ui change detection resulting huge digest loops afaik reading design docs well read source code repo angular problems heavily addressed angular course might gains made something like virtual dom react think would minor wo nt result much bettermore performant user experiences course developers run performance problems angular unable work around inability figure performance problems happen blame framework case might right move onto next shiny framework fail see problem angular community though developers run different performance problems new shiny frameworks sooner later scenario maybe losing developers much loss community course opinion based experience developers frameworks last years believe respectable application developer really understands browser rendering javascript engines work able make application performant framework curious hear members core angular team answer question something like virtual dom might actually cool thing especially since interaction dom handled facade already also understand correctly get compiler work server without dom available way related well", "d": "2/2015"}, {"body": "tommym thank sharing feedback think explain show developers addressed likely retain talent course framework chasers switch anyway big portion quality developers greater confidence investment angular separate note onetime bound expressions help disconnect certain ui parts watch array understanding intention course available", "d": "2/2015"}, {"body": "demisx thank asking question concerns things like performance maintainability large applications driven much development effort angular tommym thank views make lot sense application developers find balance expecting framework using provide good performance options making wise decisions applications make options rather focus question whether angular implement feature x framwork team done spend lot time designing better system highly performant maintainable lot ideas going expanded upon coming months especially ngconf read new approach change detection victor savkin excellent blog post describes reactive structure angular apps combined intelligent disconnecting components need checked give us fantastic performance gains hope helps", "d": "2/2015"}, {"body": "petebacondarwin thanks pete definitely read later today broadcast far dom manupulations go guys forsee major changesimprovements common complaint hear long web forms pages lots ui elements greatly affect performance reactflux virtual dom usually pitched alternative right question angular use virtual dom question angular plans make dom manipulations superior thank", "d": "2/2015"}, {"body": "petebacondarwin thanks linking blog post nt read yet demisx separate note sometimes want disconnect things watch nt necessarily onetime bound think tabs complete views ui nt visible ui states want ability disconnect reconnect speed change detection angular rather hacky see example angular material implementation tabs victor blogpost source code yet completely reimplemented change detection show solved angular combined much better implemented change detection general result huge performance wins even take step try get point let data flow one direction would result scenario run digest loops could done example use twoway data binding rather get data ui state helper methods like new implementation forms landed angular codebase today get back ontopic believe important retain talent within community done explaining angular sometimes performant improvedfixed angular", "d": "2/2015"}, {"body": "demisx saw response wrote previous might wrong experience reason long web forms pages lots ui elements greatly affect performance often dom manipulations due pages generally resulting huge tree result slow change detection course always careful create big relative dom structures since result slower browser layouts perform dom operations dom tree usually work around disconnecting parts dom setting position absolute example stretch scrollable content area using position absolute top right bottom left prevent manipulations dom inside cause browser layout whole page thus resulting much faster manipulations shadowlight dom probably also help prevent huge browser layouts havent tested yet though another problem people often run reading writing multiple times dom within one rendering frame browser every time read something dom pending writes applied layout recalculation done many times within one frame result application feeling sluggish benefit something like virtual dom react apply dom changes thus shielding developer think stuff like however prevent happening dom reads first apply dom writes browser automatically queue writes till end frame apply one layout recalculation resulting much smoother user experience course usually applies people creating custom components directives people writing frameworks nt concern developers using angular frameworks something always keep mind general believe responsibility application developers learn platform case browser write applications help write performant applications regardless framework use ps sorry long rants worked frameworks long time sometimes gets tiresome see developers blame frameworks inability use properly think great trying convince developers stay community explaining run problems", "d": "2/2015"}, {"body": "tommym yeap make good example disconnects totally see value also thank dom disconnect tips appreciate time writing make sure share counterparts great stuff know thank petebacondarwin everyone chiming great info help us explain better community done address current shortcomings major breaking redesign great going many great angular developers want continue feel superheroic", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "see well", "d": "2/2015"}, {"body": "see well", "d": "2/2015"}, {"body": "see well", "d": "2/2015"}, {"body": "see well", "d": "2/2015"}, {"body": "see well", "d": "2/2015"}, {"body": "depends", "d": "2/2015"}, {"body": "wrong repo guess wanted open issue spare effort supposed work elements reason handle data binding ca nt data binding hidden elements users ca nt interact use interpolation attribute use ngattrs", "d": "2/2015"}, {"body": "elvismacak wrong repo probably looking frankly kind support question asked elsewhere see", "d": "2/2015"}, {"body": "actual link mentioned todo", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "kind late party curious reasoning behind change public explanationdiscussion somewhere github issueforumgoogle doc", "d": "2/2015"}, {"body": "also interested reasoning behind change nt drop prefix less future proof decide come native attribute cc pascalprecht", "d": "2/2015"}, {"body": "rkirov think one depends strategy made global currently strategies native emulated something could bind strategy native shadow dom supported emulated think", "d": "2/2015"}, {"body": "yes get asap given shim build compatible switching native emulated per browser something want avoid app developer might test chrome ship app might completely broken firefox limitations emulated mode", "d": "2/2015"}, {"body": "prototype change good news emulated shadow dom works examples benchmarks bad news slower tree benchmark native script time emulated script time", "d": "2/2015"}, {"body": "rkirov look today", "d": "2/2015"}, {"body": "tried binding shadowdomstrategy emulatedshadowdomstrategy root bindings applicationjs loading simple components components work native strategy emulated make crash browser chrome firefox", "d": "2/2015"}, {"body": "rkirov could please status update", "d": "2/2015"}, {"body": "issue reported jelbourn pb strategy moved application level injector root bindings", "d": "2/2015"}, {"body": "rkirov sure worth strategies api ctor change see change pr landed", "d": "2/2015"}, {"body": "vicb yes handle merged also blocked adding dom readwrite queue getting close done without emulated strategy bit slower native tree benchmark finally features missingbugs emulatedshadowdomstrategy would need fixing final switch see", "d": "2/2015"}, {"body": "incomplete list x decide whether angular compatible protractor exists whether create new branch protractor x scaffolding exporting testability api window x provide way protractor know application stable pending requests promises see provide testability api exposes useful ways finding elements compatible existing protractor would model binding rethink best options angular see provide way add modules may override modules app page load see provide way turn animations element speed tests pending concrete animation lib consider tests hooks would useful instrumentation debugging tools need vague future work best guess time estimate think doable februarymarch edit hahaha", "d": "2/2015"}, {"body": "juliemr please update status issues", "d": "2/2015"}, {"body": "progress see work progress pr", "d": "2/2015"}, {"body": "superseded", "d": "2/2015"}, {"body": "started investigate identify physical key keycode however different key codes events generated printable characters ie char code ref keyjs", "d": "2/2015"}, {"body": "like idea vicb probably saw already wanted mention anyway could design based keyboardeventkey instead keycode since targeting future browsers angular polyfill keyboard events using keycode charcode etc one available polyfill could find nt used sure good commits since may guys would probably write anyway p", "d": "2/2015"}, {"body": "got another idea would like share since investigating probably belongs separate issue scenario particularly relevant keyboard events start built apps smart tv prototypes wanted use scopecontext maintain life cycle key binding bind dom element attribute used needed document handler would trigger regardless focused element position way approach angular write directives bind everything document use scope createdestroy bindings appropriate moments translate approach syntax could look like sure still using character situations intend syntax referencing item ngrepeat addition case multiple bindings key often needed way distinguish scenarios multiple handlers called scenarios one highest priority called case scope created last usually highest priority modaldropdown example would enable specify pressing dropdown closed pressing modal closed projects returning false expression simply nt thought anything better yet resemblance maybe inspiration take designing better syntax would nice additions keyboard handling would use often helped keep controllers clean easily control key binding life cycles even document", "d": "2/2015"}, {"body": "sure whether allow macro directives use app injector otherwise need run app server precompile templates server would require services run server well tue feb mi\u0161ko hevery notifications githubcom wrote new macro compiler needed work macro selector mybutton class mybutton constructor injectable app level injector created transform el element called multiple times matches happen perform dom transformation template used transforming transforming exp migrated reply email directly view github", "d": "2/2015"}, {"body": "agree sure useful macro directives would without injector guess try without injection add later macro directive different compiler step", "d": "2/2015"}, {"body": "opinion compiler step although nicer api tue feb pm mi\u0161ko hevery notifications githubcom wrote agree sure useful macro directives would without injector guess try without injection add later macro directive different compiler step reply email directly view github", "d": "2/2015"}, {"body": "let punt revisit experience", "d": "2/2015"}, {"body": "create new package phase development", "d": "2/2015"}, {"body": "document track publishingreleasing decisions", "d": "2/2015"}, {"body": "live pub see", "d": "2/2015"}, {"body": "known issue talked misko vojta come good solution one easy understand performs well", "d": "2/2015"}, {"body": "note need fix templateloader pr makes shadow dom strategy global strategy injected compiler bindings declared root bindings fix enables overriding strategy bootstrap time application injector without fix strategy would always retrieved root injector impossible override", "d": "2/2015"}, {"body": "thinking merge operation lists bindings driven config benchpress provide defaults think might easier using child injector let talk person wed feb victor berchet notifications githubcom wrote note need fix templateloader pr makes shadow dom strategy global strategy injected compiler bindings declared root bindings fix enables overriding strategy bootstrap time application injector without fix strategy would always retrieved root injector impossible override reply email directly view github", "d": "2/2015"}, {"body": "actually along lines binding provide default bindings dependencies uses wed feb tobias bosch tbosch googlecom wrote thinking merge operation lists bindings driven config benchpress provide defaults think might easier using child injector let talk person wed feb victor berchet notifications githubcom wrote note need fix templateloader pr makes shadow dom strategy global strategy injected compiler bindings declared root bindings fix enables overriding strategy bootstrap time application injector without fix strategy would always retrieved root injector impossible override reply email directly view github", "d": "2/2015"}, {"body": "vicb sounds like natural thing would child rebinds dependency would invalidate instance lives parent however consider resolve deps function var parent new injector car engine var child parentcreatechild bind engine toclass turboengine however poses question instance live store child injector breaks expectation injector holds instances bindings never bound explicitly trying convince bug rather design decision among different options messy semantics going abithardertouse explicit option rebind dependency explicitly rebind dependent bindings want affected example work rebind doubt surprises everyone first considering different solutions would warn prevent getting error got", "d": "2/2015"}, {"body": "tbosch guarantee last binding wins repeated binding injector", "d": "2/2015"}, {"body": "vsavkin add test case show intentional behavior", "d": "2/2015"}, {"body": "consider rule parent injector reference child injector need able reason lazy loaded code unload unused child injectors rule broken order loading child injector matter want explicitly allow creating child injector way effect someone reference parent injector rule prevents asking", "d": "2/2015"}, {"body": "created pr adding test case showing intentional behavior", "d": "2/2015"}, {"body": "repo angular js please reopen issue", "d": "2/2015"}, {"body": "class shimcssjs shadowdomemulation limitation", "d": "2/2015"}, {"body": "sorry skipped", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "tried reproducing issue existing tests langspecjs however test passes incorrectly reason test run transpiler well assertion executed test becomes words bug applied expected well actual think right solution new test fixture allows us simply execute compiler small snippet assert dart code produces without executing run node browser think could use mocha test runner add simple test case added advantage easy debug since nt transpile test easily step transpiler webstorm nt possible gulptranspilekarma setup send pr", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "closed", "d": "2/2015"}, {"body": "needed animation needs little work find actually", "d": "2/2015"}, {"body": "need also style", "d": "2/2015"}, {"body": "support added support added remains support", "d": "2/2015"}, {"body": "moving blocked structural changes", "d": "2/2015"}, {"body": "support pipes added issue unblocked", "d": "2/2015"}, {"body": "vsavkin yup saw commits working topic right could please review going need pipe objects least persuaded going need", "d": "2/2015"}, {"body": "seems like complicated issues list mention pretty straightforward complete", "d": "2/2015"}, {"body": "handing mlaval done experiments", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "per mhevery comment syntax changed map flipped annotation", "d": "2/2015"}, {"body": "making sure annotations nt lost transform looking define different way final code similar js annotations attached constructor object property", "d": "2/2015"}, {"body": "kegluneq sorry updated text", "d": "2/2015"}, {"body": "long requiring user specify entry point nt problem nt seem different angular polymer right nt seem like take long famous last words", "d": "2/2015"}, {"body": "package initialize designed situation used similar things polymerdart able make work also", "d": "2/2015"}, {"body": "remove import dart mirrors", "d": "2/2015"}, {"body": "dom facade good example could get rid static class toplevel members dart export functions directly instead exporting class exports", "d": "2/2015"}, {"body": "poking bit run problem many functions angular atscript code nt declare return type return statement means ca nt check type info determine void peek ahead ast see return scope infer truly void", "d": "2/2015"}, {"body": "could annotate methods per", "d": "2/2015"}, {"body": "yes discussing possibility tobias concern wo nt useful long devs still adding void functions declaring void think need kind tooling like linter", "d": "2/2015"}, {"body": "make atscript compiler yell one creates function without return type definition seriously light lot great analysis dart mention making apidocs lot clear users", "d": "2/2015"}, {"body": "personal preference explicit typing discussing rkirov get sense team would rather explicitly type functions void note even put void bug nt make transpiler dart probably fixing unless intend start typing atscript functions void without types declared input think hard transpiler infer", "d": "2/2015"}, {"body": "strongly disagree return type omitted user expect something returned return types argument types explicit possible problem atscript ambivalent void dart style absolutely opinion generating dart api follow best practices", "d": "2/2015"}, {"body": "slight misunderstanding proposed solution unacceptable replacing lack return type void lack type declaration atscript source left lack type declaration dart transpiler job infer add types bug omitted transpiration valid fixed finally agree dart style guide however current time clear exactly angular public api apis kept internal alexeagle said ok omitting types get closer defining public api surface annotate argument return types including reopen issue time likely rolled larger issue defining style guide codebase cleaning code", "d": "2/2015"}, {"body": "awesome thanks fri feb pm rado kirov notifications githubcom wrote slight misunderstanding proposed solution unacceptable replacing lack return type void lack type declaration atscript source left lack type declaration dart transpiler job infer add types bug void omitted transpiration valid fixed finally agree dart style guide however current time clear exactly angulars public api apis kept internal alexeagle said ok omitting types get closer defining public api surface annotate argument return types including void reopen issue time likely rolled larger issue defining style guide codebase cleaning code reply email directly view github", "d": "2/2015"}, {"body": "brian pr looking good", "d": "2/2015"}, {"body": "try using solve problem", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "working updated designs roadmaps publish proposals feedback within next couple weeks starting new http library thanks benjamingr", "d": "2/2015"}, {"body": "intentionally leaving issue open", "d": "2/2015"}, {"body": "cool thanks jeffbcross", "d": "2/2015"}, {"body": "done", "d": "2/2015"}, {"body": "done", "d": "2/2015"}, {"body": "done", "d": "2/2015"}, {"body": "closed", "d": "2/2015"}, {"body": "rado reviewed pr looking good little xhr open issue di needs resolved", "d": "2/2015"}, {"body": "ref", "d": "2/2015"}, {"body": "closed", "d": "2/2015"}, {"body": "implemented", "d": "2/2015"}, {"body": "update newest release chromedriver shadow dom support seeing issues filed issue chromedriver see also latest comment edit update turns issues bad nt updated chromedriver appropriately fixed via", "d": "2/2015"}, {"body": "since done chromedriver using bycss deep myclass work note latest protractor release installs chromedriver manually upgrade todos update protractor new default version consider creating helper element locator", "d": "2/2015"}, {"body": "fyi thanks julie digging sat feb pm julie ralph notifications githubcom wrote since done chromedriver using bycss deep myclass work note latest protractor release installs chromedriver manually upgrade todos update protractor new default version consider creating helper element locator bydeepcss myclass equivalent tobycss deep myclass reply email directly view github", "d": "2/2015"}, {"body": "release new version protractor installs chromedriver webdrivermanager look updating use today sun feb pm tobias bosch tbosch googlecom wrote fyi thanks julie digging sat feb pm julie ralph notifications githubcom wrote since done chromedriver using bycss deep myclass work note latest protractor release installs chromedriver manually upgrade todos update protractor new default version consider creating helper element locator bydeepcss myclass equivalent tobycss deep myclass reply email directly view github", "d": "2/2015"}, {"body": "done", "d": "2/2015"}, {"body": "wo nt implemented", "d": "2/2015"}, {"body": "implemented needed concrete benchmark", "d": "2/2015"}, {"body": "doc tracking plan packaging releasing", "d": "2/2015"}, {"body": "modules done benchpress rewritten atscript part folder see transpiler published", "d": "2/2015"}, {"body": "maintained", "d": "2/2015"}, {"body": "current implementation lives publish modules except subfolders yet npm today tomorrow", "d": "2/2015"}, {"body": "tbosch mean right", "d": "2/2015"}, {"body": "done", "d": "2/2015"}, {"body": "closed", "d": "2/2015"}, {"body": "integrate charting dart nt", "d": "2/2015"}, {"body": "initial version iosdriver almost working", "d": "2/2015"}, {"body": "hankduan taking look", "d": "2/2015"}, {"body": "wo nt implemented", "d": "2/2015"}, {"body": "nt need graph results time via dart team", "d": "2/2015"}, {"body": "looks like fixed already added passing test case", "d": "2/2015"}, {"body": "may late conversation would like type annotations available templates could validated ide build time gulpgrunt task atscript typescript ngtype attribute could removed template build task would needed development build otherwise would get ignored production could help ides issues trying understand angular template system", "d": "2/2015"}, {"body": "think reason people voting rob dot syntax looks good semantically think works seems flexible would implore angular team mhevery please listen people suggestions frankly seen video alpha release syntax looks visually terrible hope never write syntax", "d": "2/2015"}, {"body": "tonypee see votes compared size thread nothing wonder ngnl presentation current docs templates still promoting parts new syntax opening post thread contains elementsetattribute foo exp work especially svg requires valid xml valid xml problems solved somehow nt know please let us know", "d": "2/2015"}, {"body": "jamm voting followed positive multiple comments support prefixsuffix style defining binding originally eisenbergeffect suggested bind etc people supporting pascalprecht sanderelias donaldpipowitch yamafactory recently dot suffix mhevery suggested semantically positive support deborahk alxandr akircher nborelli circlingthesun seems readability amp usability might taking backseat perceived restrictions feel comments suggest people would rather elegant syntax interested see full examples syntax understand change hard initially perception important syntax looks elegant readable", "d": "2/2015"}, {"body": "tonypee actually voting anything withdraw mine favor current syntax using using create todo app found pretty clear keep mind also use current syntax since considered shorthand problem solved using facade api dom aka using", "d": "2/2015"}, {"body": "thanks example code think agree long new use make syntax easier beginners experienced user use shorthand readable terse code think good solution", "d": "2/2015"}, {"body": "like syntax markers aesthetically would like confirmation refutation mhevery igorminar et al break svg broader xml interoperability", "d": "2/2015"}, {"body": "read summary syntax two forms shorthand canonical form canonical forms basically could use using angular inside svg x ht ml documents", "d": "2/2015"}, {"body": "petebacondarwin document evolved quite bit since last looked thanks pointing updates", "d": "2/2015"}, {"body": "thanks petebacondarwin finally resolved", "d": "2/2015"}, {"body": "davidsouther indeed true attribute syntax incompatible applicationxhtmlxml document dots however valid eg onclick foo agree attribute syntax readable prefix proposal think using sigils general place keywords results things terse ultimately harder comprehend feel way sigilheavy programming languages also strongly recommend two different ways writing templates really confusing new developers results inconsistent hardtoread templates developers write one way others write another reminds developers would use datang others ng three different ways dependency injection one ban despite used every sample talk internet case would ban syntax xml metatemplating tools would nt able parse given lack xmlsvg compatibility would say syntax simply fails meet constraints eliminated altogether favor prefix proposal", "d": "2/2015"}, {"body": "obsolete", "d": "2/2015"}, {"body": "added unit test dart transpiler resolve issue also want example unit testing particular transformer transpiling", "d": "2/2015"}, {"body": "actually never removed hack transpiler never used new feature traceur see", "d": "2/2015"}, {"title": "object value", "body": "hi assume following markup data option selected somehow possible set objprop whole object value thanks", "num": "729", "d": "2/2015"}, {"title": "strange error watch work list", "body": "demo list watching watch replace text null text text add item later clear list see error html remove second condition error replace conditions error explain wrong ps sory bad english", "num": "728", "d": "2/2015"}, {"title": "passing strings starting directives breaks expression parser", "body": "fiddle seems happen also tried fine", "num": "727", "d": "2/2015"}, {"title": "suggestion vref vrepeating object", "body": "thing always returns array items indexes synthetic relation actual data object keynames vs indexes parent vm ca nt surely match indexes object keys maybe case return object matching keynames would nice get feature", "num": "726", "d": "2/2015"}, {"title": "webcomponentsjs breaks vue using link routing", "body": "looks like webcomponentsjs hearder causing dynamic component able switch version tests version fine checked diff roughly nt know changes could related broken hint fix thanks", "num": "724", "d": "2/2015"}, {"title": "scroll event working", "body": "event works fine event fire", "num": "723", "d": "2/2015"}, {"title": "support callback parameters", "body": "understand possible communicate parent child components via events would convenient vuejs supported calling callback attributes would allow write html something like javascript code like var parent methods dosomething function args something var child cbattributes oncallback ready function thisoncallback args function new vue el body currently fake using passing function name string calling function child like would much nicer explicitly supported tried passing callbacks like seem work also want point couple parent child searched similar issues find one apologize advance duplicate", "num": "722", "d": "2/2015"}, {"title": "support sorting", "body": "", "num": "721", "d": "2/2015"}, {"title": "pass multiline object directive", "body": "ok typeerror res undefined live demo", "num": "717", "d": "2/2015"}, {"title": "read property teardown null", "body": "hi subscribe warcher null object property eg keypath objectprop prop null exception occures call unsubscriber sample code javascript var unwatch vm watch keypath function newval oldval unwatch exception fires cause exception following code exportsdestroy function", "num": "716", "d": "2/2015"}, {"title": "passing values nt work", "body": "pass strings integers booleans nt work fiddle", "num": "715", "d": "2/2015"}, {"title": "vref seem work certain times", "body": "parent component okay corresponding vuemodel instance component input field want access text child component parent problem seems work sometimes times also way get data child environment without leak data parent child though using events let say multiple search components page want field events would nt work case maybe something like child component exposes api components well parent", "num": "714", "d": "2/2015"}, {"title": "vm dom elements vel undefined transitions", "body": "hi ca nt access vm dom elements ex transitions pretty useful use rather select element dom param fiddle click window toggle child log value console thanks", "num": "713", "d": "2/2015"}, {"title": "issues options directive select tag", "body": "notice two issues vue recently directive take filters particularly annoying rare data already format directive nt work without less likely problem still seems unnecessary definitely possible want dynamic select options without data binding jsfiddle demonstrating problems", "num": "712", "d": "2/2015"}, {"title": "checkbox directive source code different distvuejs srcdirectivesmodelcheckboxjs", "body": "vuejs amp distvuejs work safari osx srcdirectivesmodelcheckboxjs code work better", "num": "711", "d": "2/2015"}, {"title": "child component ready hook fired", "body": "basically parent view attached different way eg google maps using neither hooks fired child components", "num": "710", "d": "2/2015"}, {"title": "read property refid undefined vuejs", "body": "error occurs vcomponent points component nt currently exist worked annoying making spa routing vuejs wo nt loaded current page component vue instance first created js fiddle html change", "num": "708", "d": "2/2015"}, {"title": "breaks repeat using", "body": "writing application needs list arbitrary values json object two levels deep values arrays whose constituent objects contain properties consider following code html key id value code outputs list four items expected using vue outputs nothing using vue nt believe test case cover particular use case", "num": "707", "d": "2/2015"}, {"title": "component", "body": "scenes maybe one model needs several children models scope childs need share data methods parent midel like js tried simplest way nt work one effective model parent thought components used nt want make component thing like controller angular like vue awesome components may heavy scenes mentioned way seems chrome app nt support component system give error like", "num": "706", "d": "2/2015"}, {"title": "filters way get keycode", "body": "example got filter placing spaces numbers removing gt using filter input via vmodel allowed change value set cursor near space going remove expecting removed symbol number space expected nothing happens numbers removed could access keycodes could handle case understanding number need remove space judging removed symbol keycode code example", "num": "704", "d": "2/2015"}, {"title": "vrepeat component", "body": "currently ca nt something like something like data nt passed html jsfiddle", "num": "703", "d": "2/2015"}, {"title": "way reset component", "body": "currently component want reinitialize include component expression set expression blank reset expression back component html better way", "num": "702", "d": "2/2015"}, {"title": "fails silently component root element fiddle included", "body": "legacy docs mentions root element restriction current version seems work components multiple root elements vwith breaks warning nt work works javascript var componenta vueextend template bar works template bar doesnt replace true new vue el body template data foo test test test test components componenta componenta", "num": "701", "d": "2/2015"}, {"title": "nt suitable view root element", "body": "hi wrote simple demo table contained vrepeated table contained chosen view root element vue viewmodel way nt work templates nt replaced changing solved issue thing happens referring github commits fiddler sample change root element bug expected behavior", "num": "700", "d": "2/2015"}, {"body": "first select boxes like question html select box value string want whole object value could use jsonstringify jsonparse though people would consider ugly solution", "d": "2/2015"}, {"body": "hello know options attribute using repeat suitable cases eg add empty value first thank explanation add support whole object select would nice feature", "d": "2/2015"}, {"body": "found another way get error add item run timeout timeout set value cleaning list see error demo", "d": "2/2015"}, {"body": "note change default value text null text default work well", "d": "2/2015"}, {"body": "guess summarize problem anyone else list cleared conditions false however inner condition still executed resulting error even though skipped due outer condition evaluating false looks like evaluated hierachically instead order evaluated", "d": "2/2015"}, {"body": "expressions expected valid javascript unless set flag true", "d": "2/2015"}, {"body": "thank sorry missed docs", "d": "2/2015"}, {"body": "issue nt happen chrome firefox also changed include webcomponentslitejs firefox issue nt happen think related shadow dom vue", "d": "2/2015"}, {"body": "make simple reproduction issue sun feb pm notifications githubcom wrote issue nt happen chrome firefox also changed include webcomponentslitejs firefox issue nt happen think related shadow dom vue reply email directly view github", "d": "2/2015"}, {"body": "test link test chrome click link view updated test firefox view nt change thanks", "d": "2/2015"}, {"body": "looks like getting mangled", "d": "2/2015"}, {"body": "wow actually nothing vue seems webcomponentjs breaks safari ff", "d": "2/2015"}, {"body": "filed issue", "d": "2/2015"}, {"body": "silly mistake made everything works fine", "d": "2/2015"}, {"body": "looks like looking", "d": "2/2015"}, {"body": "right pretty much however interesting note compiled directives would cool way thing something like compiled could use cleaner syntax like instead btw really love framework managed create elegant well documented easily comprehensible software economy features previously used angular finally realized despite supported google widely recommend inelegant overcomplicated inefficient mess also interested mithril ultimately turned idea forced template html javascript use jade works well vuejs frontend software stack currently consists vuejs jquery jade stylus autoprefixer browserify gnu make setup working really well moving vuejs breath fresh air", "d": "2/2015"}, {"body": "noticed one significant difference feature originally proposed allow caller get return value since usual case one receiver significant disadvantage example say got callback child needs either confirm reject changes based success callback may require contacting server andor user interaction easily handled parent returning promise callback called however possible granted could solved parent responding broadcast event need event handlers context possibly way differentiate children type", "d": "2/2015"}, {"body": "actually additional arguments provided passed callback", "d": "2/2015"}, {"body": "talking return values", "d": "2/2015"}, {"body": "oh see misread case promise valid sure worth adding specific optionsyntax hand possible use simple callbacks", "d": "2/2015"}, {"body": "ok callbacks bad option still like idea option could really simplify parentchild interaction coupling", "d": "2/2015"}, {"body": "think could easily implemented mixin including core would feel redundant btw appreciate kind words framework", "d": "2/2015"}, {"body": "understand reluctance add features parallel way work together ignoring ability return data would like thought", "d": "2/2015"}, {"body": "agree userland plugin suggestion anything core plugins", "d": "2/2015"}, {"body": "fixed merging", "d": "2/2015"}, {"body": "thanks fixed", "d": "2/2015"}, {"body": "ca nt help first problem need give specific situation undefined second issue yes way get data child pass parent variable child using use modifies variable case would use variable vue guide talks data passing vwith jsfiddle passes parent field child manipulates textbox top child component change text underneath also changes parent scope meaning working want html vara", "d": "2/2015"}, {"body": "oh using bidirectional bindings using introduced guess use vwith case think really nice could expose sort api component scope introducing property viewmodel expose certain functionsdata", "d": "2/2015"}, {"body": "well data already exposed access example way annoying imperative comparison would access child data idea able update without breaking changes", "d": "2/2015"}, {"body": "yeah saying child data exposed gives read write access child data potentially dangerous however suggesting commonjs style functionality components let say data variable child component read well modify could expose function child component way could parent could read child component parent accidentally modify gives fine grained control really want expose components", "d": "2/2015"}, {"body": "run something similar ref inside nested component using passed data data passed data changed inside became workaround manually saving reference reference hook probably best way go things need get done", "d": "2/2015"}, {"body": "fix related bug sure addressed issue though", "d": "2/2015"}, {"body": "could use option tag add remove vmodel filter etc also advantage explicit", "d": "2/2015"}, {"body": "problem ing tags scope data set template compiled example pass data component using value nt set big issue using directive time problems", "d": "2/2015"}, {"body": "hmm parameter nt directive specific parameter hence expressions evaluated case want input output seems strange", "d": "2/2015"}, {"body": "okay might right one side point noticed investigating first problem look source code though seems suggest take expression reason nt take filter seems strange", "d": "2/2015"}, {"body": "tmiguelt might try sure makes sense perhaps using computed property would preferable", "d": "2/2015"}, {"body": "support filters merging", "d": "2/2015"}, {"body": "probably looking dist file instead code checkbox", "d": "2/2015"}, {"body": "interestingly neither parent child hooks fired using thought might let get vm dom pass curious", "d": "2/2015"}, {"body": "thoughts", "d": "2/2015"}, {"body": "workaround vm", "d": "2/2015"}, {"body": "note hook depends hook turn triggered two ways element already document vm compiled vm inserted via vue either method like directive controls child vm like directly inserting vm element able trigger stated docs", "d": "2/2015"}, {"body": "would handle case", "d": "2/2015"}, {"body": "supposed work design", "d": "2/2015"}, {"body": "okay thanks help think add list things need user friendly error messages make pr get chance", "d": "2/2015"}, {"body": "show jsfiddle shows behaviour copied code changed component base vue instance completely skipping", "d": "2/2015"}, {"body": "think thats point change renders expected something", "d": "2/2015"}, {"body": "apologies tmiguelt post unnecessarily ambiguous skipped bit template spews custom filter returns expected behaviour actually see nothing case displaying stringified array objects updated op avert possible confusion anyone else might caught issue thank much fix calebboyd", "d": "2/2015"}, {"body": "fixed merging", "d": "2/2015"}, {"body": "thanks evan smiley", "d": "2/2015"}, {"body": "sorry last error chrome app component must defined model entity since tried two ways mentioned nt work really ca nt accept make html file several templates separating sharing data way implement things like controllers vuejs", "d": "2/2015"}, {"body": "nt think vue simulate controllers like right make child component often still put child template child component ca nt use existing parent template example work think would worked vue changed start compiling html parent scope issues compiling working way actually second point thread similar problem wanting controllerscomponents without template evan think reasonable way make everyone happy scoping issues compile template child scope child component template far know component without template totally useless moment going break existing code think would solve problems course could call controllers try distinguish components like ember either way might good idea", "d": "2/2015"}, {"body": "random idea maybe attribute flag eg indicates nt want content transclusion inside component", "d": "2/2015"}, {"body": "yeah quite like idea effect suggestion explicit might allow reuse component different template contexts", "d": "2/2015"}, {"body": "way getting keycode directly within filter use separate listener", "d": "2/2015"}, {"body": "believe supposed use", "d": "2/2015"}, {"body": "sorry jsfiddle ate fiddle recreate", "d": "2/2015"}, {"body": "fiddle still nt seem repeater", "d": "2/2015"}, {"body": "interesting problem since know component state stored data variable always override original data store original data rather function generates module component like javascript function exactly data function component originally function getdefaultdata return b b moduleexports data getdefaultdata methods resetdata function data getdefaultdata assuming components commonjs modules recommend anyway browserify vueify transform", "d": "2/2015"}, {"body": "seems like work thanks", "d": "2/2015"}, {"body": "thanks seems duplicate", "d": "2/2015"}, {"body": "edit post put backticks around html markdown parser nt delete", "d": "2/2015"}, {"body": "done thanks", "d": "2/2015"}, {"body": "thanks much easier read according html spec element contain phrasing content ie content mostly text related markup table list accepted child nodes quite possible browser deleted component placing inside issues like past basically yes expected behaviour vue issue related html spec obvious solution use elements direct root vue components", "d": "2/2015"}, {"body": "elements special usage vue used block container nt work", "d": "2/2015"}, {"body": "thank reply fiddles minimum code caused error actually like use vrepeat template vcomponent paramattribetus explain created new fiddles fiddle work fine would nt like nesteddiv tryed change div template nt work tryed vrepeat template outside vcomponent vwith inside amp enable replaceoption nt work implement use paramattributesoption without nesteddiv vrepeat vcomponent might wrong way", "d": "2/2015"}, {"body": "nt think able use template specify property seems like trying", "d": "2/2015"}, {"body": "oh makes sense would nt like write template html actually use amp building large app used customtag instead vcomponent expected", "d": "2/2015"}, {"body": "use appendto older vue version", "d": "2/2015"}, {"body": "vwith twoway", "d": "2/2015"}, {"body": "indeed fixed", "d": "2/2015"}, {"body": "directly replacing also work make isolated jsfiddle replacing causing original issue", "d": "2/2015"}, {"body": "sure necessary general want avoid implicit conventions since makes code harder understand unless already know convention", "d": "2/2015"}, {"body": "problem bit today attr would work", "d": "2/2015"}, {"body": "issue allow type horizontal cancellation listener order remain order registered regardless children sorted later basically means event trigger order guaranteed vm order array think broadcast definition reach possible children level words behavior component able affect event propagation children siblings original use case probably better idea pass extra argument broadcast call accurately identify matching child", "d": "2/2015"}, {"body": "vue converts object fresh array update ca nt place updates array identity changed maybe diffing actual object better solution work around converting object array use array instead need data persistence convert array back object nt sound ideal work", "d": "2/2015"}, {"body": "thank end implementing suggested workaround ago wadditional parsing data persistence luckily nature data completely arbitrary worked fine happy close thread unless prefer leave open future implementation purposes", "d": "2/2015"}, {"body": "yeah older versions android quirky implementation bugs nt device version test glad know found workaround", "d": "2/2015"}, {"body": "basically tmiguelt said seems browser behavior issue", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "tags treated symbolic wrappers block nt work", "d": "2/2015"}, {"body": "okay understood another question would consider make support directives please really nice use sometimes especially costructions tabletrtd guess could redirect top level element component template check one would render", "d": "2/2015"}, {"body": "sure understand use case tabletrtd give example", "d": "2/2015"}, {"body": "templates placing keep templates tpl files near js files time time use plain without classes serving template holder looks like lt lt one holder without classes visual decoration example case forced keep component template container separated content container thing want keep content one tpl file case ca nt use extra table structure components whose containers display inlineblock", "d": "2/2015"}, {"body": "using though seems simply want access raw template something like use template", "d": "2/2015"}, {"body": "nah accessing template case case decomposition want decompose page several components content toppanel header footer etc also smaller components using component mount point allows escape using extra wrapper example got block named toppanel html main articles feedback block container notice actual part toppanel visual decoration want mount toppanel page actually two ways first one get extra wrapper without actual role use second one got rid extra wrapper toppanel containerstarting point got detached content makes mess templates preventing toppanel normal reusing using solves problem serves mount point disappears rendering", "d": "2/2015"}, {"body": "looks like issue one root element template switching table divs recreates problem adding albeit invalid wrapper around fixed", "d": "2/2015"}, {"body": "possible duplicate fails silently component root element", "d": "2/2015"}, {"body": "yes think right duplicate issue guess leave discussion thread", "d": "2/2015"}, {"body": "agonbina definitely try pinpoint amp isolate difficult happens sometimes though happen right emit event receiver vcomponent updated executed html perhaps gives first insight according hackernewsexample working isolating issue", "d": "2/2015"}, {"body": "please see comment issue believe issue related events cause components added removed changing variables effect alters event propagation case list event listeners may change event code traversing list think event propagation code make copy event listener list begins processing list iterating list check listener still exists calling", "d": "2/2015"}, {"body": "component names slashes supported", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "write filters present longer force update back dom", "d": "2/2015"}, {"body": "good improvement allows almost everything except way currency example storing valid values yes way currency restricting user input yes vue user point view ideally would way explicitly enable disable forced update like example however would probably make sense able set template difference presentational belongs element modified example double pipe loosen filter update cycle maybe separate attribute", "d": "2/2015"}, {"body": "twoway currency problem ca nt fixed disabling sync alone since requires detailed control place cursor updating input value dom particular cases like probably better write custom directive instead", "d": "2/2015"}, {"body": "point disabling sync update input value dom need replace cursor right", "d": "2/2015"}, {"body": "nt want format currency example reason hard interact nt know correctly restore cursor position dom update resets cursor", "d": "2/2015"}, {"body": "thinking format would disabled input manipulated user let user write anything edit yes even though talking would best talking compromise", "d": "2/2015"}, {"body": "oh mean delay formatting user blurs input", "d": "2/2015"}, {"body": "yes", "d": "2/2015"}, {"body": "use although would time make sync model delayed", "d": "2/2015"}, {"body": "great option caveat mentioned problem situations", "d": "2/2015"}, {"body": "actually template contains one node component becomes block component means nt root node rather documentfragment directives attached placeholder like lost transclusion theoretically fixed though", "d": "2/2015"}, {"body": "fix recently run workaround utilising time priority fixed rather glaring issue imo", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "thanks lot looking forward formal release", "d": "2/2015"}, {"body": "duplicate issue closed", "d": "2/2015"}, {"body": "seeing problem exactly likely related notice loop vuejs greater equal think happening calls modify words events cause event listeners added removed example event affects scoped variable components may detached able work around using instead places event could affect value", "d": "2/2015"}, {"body": "recently made prerelease project working use vuejs also insane script imitates vue behavior server side vueserver use one component code server client glad say working fine sorry russian ca nt help could press buttons also check javascript disabled see serverside html ps thanks much vuejs like made fall love frontend development", "d": "2/2015"}, {"body": "nice glad know working", "d": "2/2015"}, {"body": "heard emberjs building htmlbars started simpledom think jsdom pretty heavy weight slow ssr features necessary", "d": "2/2015"}, {"body": "kazupon thanks holding events glad see community growing japan moment plan adding major new features feel api feature set reached good state focus stabilizing mostly fixing bugs issue growth rate slows probably ca nt guarantee date though", "d": "2/2015"}, {"body": "thank comment busy time got", "d": "2/2015"}, {"title": "inelegant fail empty response put post", "body": "returning empty response api successful post put modelsave console getting uncaught syntaxerror unexpected end input change return something anything error goes away understand correct form empty response empty json object ie opposed absolutely nothing although nt think empty response invalid must return something mean return nothing however suggest backbone treat empty response way throw meaningful error", "num": "3520", "d": "2/2015"}, {"title": "iterate object array attributes passed view template", "body": "someone may help problem try present object array attributes example locationcode could successfully present model parent like modelrecordnum amp modeltitle child attributes modelrecmetadatacreationdategmt could present object array attribute locationcode biblocation property process template underscore using jade template output html indexjade express two questions possible display object array attributes passed underscore template jade please teach right syntax confusing mixing template systems recommended wrong mix templates please direct right way use model thismodeltojson passing model view template different using thismodelattributes want confirm appropriate way pass model properties iterated also appreciate fresh feedback accomplish task view var bib backboneviewextend tagname li classname bib render function var template bibtemplate html var compiled template template var html compiled thismodelattributes var html compiled model thismodeltojson elhtml html return json object passed template id recordnum title historical guide us government biblocation bibrecordid locationcode cllrf bibrecordid locationcode llrft recmetadata id creationdategmt iterating object jade file script idbibtemplate typetextxunderscore lt modelrecordnum gt lt modeltitle gt lt modelrecmetadatacreationdategmt gt lt model gt j ibiblocation jlocationcode", "num": "3519", "d": "2/2015"}, {"title": "fat arrow go back original scope", "body": "hey would like know way go back original scope single arrow inside function uses fat arrow want would chosen single arrow need change also need parent functions scope", "num": "3518", "d": "2/2015"}, {"title": "collectioncreate update model id returned server", "body": "find slightly unexpected behavior expectation using collectioncreate create new model would add model collection immediately persist model server update model properties server sync event however current behavior nothing model returned server thus collection left incomplete model instance", "num": "3517", "d": "2/2015"}, {"title": "add extra trigger would complement current request event", "body": "currently generic event triggered model nt allow easy binding specific http request types could possibly add another trigger would work similarly current change events adding change would allow explicit event binding newly available events would follows", "num": "3514", "d": "2/2015"}, {"title": "collectionset fails model present add false remove false", "body": "trying set model collection iff exists already current version fails set expects model collection call using think fair working since parameters pretty descriptive thoughts", "num": "3509", "d": "2/2015"}, {"title": "document args optional", "body": "method documentation eg model view collection argument please documented optional since actually want setup prototype chain access prototype like point params nt documented optional", "num": "3503", "d": "2/2015"}, {"title": "unexpected parameter passed", "body": "experiencing strange bug object returned http request structure like example collection run model associated collection also gets initialised value", "num": "3502", "d": "2/2015"}, {"title": "document collection push unshift args return values events", "body": "documented accepting single model hood pass arg accepts model array arg intended restricted accepting single model documented accepting array accepting values passed return value documented methods return return value edit undocumented trigger event", "num": "3496", "d": "2/2015"}, {"title": "acceptable values arg collectionremove", "body": "current documentation implies model objects acceptable hood uses take model object supposed restricted model objects documented accepting values", "num": "3494", "d": "2/2015"}, {"title": "add gettersetter support extend method", "body": "since getterssetters supported much prevalent nice backbone extend method supported js var person backbonemodelextend get fullname return thisget firstname thisget lastname var elonmusk new person firstname elon lastname musk consolelog personfullname gt gt elon musk right would result using calling getter", "num": "3483", "d": "2/2015"}, {"title": "bug memory leak unable remove object", "body": "windowwebformview new formview el form windowwebformviewremove windowwebformview new formview el form keeps events first instance amp never remove memory big memory leakage issue advice move irc instead fix let us know exact todo write code manage issue", "num": "3481", "d": "2/2015"}, {"title": "unable remove view amp related events", "body": "windowwebformview new formview el form windowwebformviewremove tried code working remove", "num": "3479", "d": "2/2015"}, {"title": "collection create nt properly pass final options success callback", "body": "wraps callback order handle wrapper take third argument calls wrapped callback instead sends options received breaks custom sync code might modifying options downstream instance breaks adds options sync server failed succeeded localstorage instead nt know type signaling via supported ca nt see would hurt wrapper callback actually take options callback called pass along instead shortcircuiting original options would pr change acceptable", "num": "3478", "d": "2/2015"}, {"title": "modelfetch docs", "body": "docs modelfetch misleading say fetch reset model attributes server request attribute x exists model sent server model retains x reset set", "num": "3477", "d": "2/2015"}, {"title": "undefined id collectionget id function", "body": "class personsroutersspecialities extends backbonerouter initialize gt collection new personscollectionsspecialities collectionfetch reset true routes new newspeciality index index idedit edit id show index index gt view new personsviewsspecialitiesindex collection collection unseen html viewrender el show id gt alert entry id newspeciality gt alert new spec view new personsviewsspecialitiesnew collection collection unseen html viewrender el edit id gt speciality collectionget id alert speciality alert undefined view new personsviewsspecialitiesedit model speciality unseen html viewrender el getting undefined speciality bug backbone", "num": "3473", "d": "2/2015"}, {"title": "modelparse called incorrectly certain cases collectionset", "body": "seems call collectionset array mixed models attributes options backbone call parse model attributes perhaps desired behavior definitely nt expect quick example var testmodel backbonemodelextend parse function r options rothervalue null rtranslatedvalue rothervalue mb delete rothervalue else rtranslatedvalue set return r var new testmodel othervalue parse true var c new backbonecollection cset othervalue parse true mget translatedvalue mb alert created jsfiddle well", "num": "3472", "d": "2/2015"}, {"title": "inconsistency attribute name model response server returns key object snake case", "body": "using backbone get data several apis noticed almost every attributes compound words comes snakecase thus attribute model created snake case well think ideal normalizing attributes something optional defaults turned something similar eg js bad thismodelattributes gt foobar whatever would ideal camel case eg js good thismodelattributes gt foobar whatever wan na know opnion everyone agrees nothing progress willing contribute pull request thanks", "num": "3471", "d": "2/2015"}, {"title": "model save parse option", "body": "reading src suggests passing saving model would prevent parse nt seem matter pass option always gets parsed missing something obvious openmouth", "num": "3470", "d": "2/2015"}, {"body": "searched nt find similar issue duplicate like read discussion around", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "saying unexpected end input error console emanates jquery", "d": "2/2015"}, {"body": "yes applicationjson request needs valid json response", "d": "2/2015"}, {"body": "nt function one jquery available within handler", "d": "2/2015"}, {"body": "thanks", "d": "2/2015"}, {"body": "huh got failing test case", "d": "2/2015"}, {"body": "yea make clear behavior applies properties id code wo nt run backbone test suite basic idea behavior expect using create model instance set properties model returned server fwiw locally patched create method like javascript create function model options options options clone options model thispreparemodel model options return false", "d": "2/2015"}, {"body": "certainly setting properties model need failing test case", "d": "2/2015"}, {"body": "jashkenas could nt figure run tests locally best attempt", "d": "2/2015"}, {"body": "ajsharp hi still cant undererstan goes wrong want use restful solution javascript var book backbonemodelextend parse function data return data case model mixed server response sync call var books backbonecollectionextend url books model book lets get books var library new books libraryfetch var added librarycreate book david sulc year wait true success function model resp options deal added model send post request response server need someting like complicated solution collection get item id jashkenas think dont need failling test case fine ajsharp maybe nt understand question think started studying backbone please read modeparse also change id attribute add model modelidattribute many options thanks upd mb need add urlroot model fast writed dont need parse function demo", "d": "2/2015"}, {"body": "kyleneedham check discussed recently believe type event added recommended implementation example", "d": "2/2015"}, {"body": "tsjoberg fair amount time ago would interested opinion feel natural backbone", "d": "2/2015"}, {"body": "clientside application nt overly concerned type http request sent server relevant information relevant clientside ed forth", "d": "2/2015"}, {"body": "takes array models single one", "d": "2/2015"}, {"body": "sorry made mistake snippet passing array code", "d": "2/2015"}, {"body": "jridgewell totally take single model aside work already correct js var collection new backbonecollection var new backbonemodel id title great gatsby new backbonemodel id title tale two cities collectionadd consolelog collectionget true consolelog collectionget false consolelog collectionget get title great gatsby collectionset add false remove false merge true consolelog collectionget true consolelog collectionget false consolelog collectionget get title tale two cities", "d": "2/2015"}, {"body": "filipmares asking", "d": "2/2015"}, {"body": "noticing backbonejs bower different github vs", "d": "2/2015"}, {"body": "sorry singular array models working perfectly noticing backbonejs bower different github linked master bunch unreleased commits able make jsfiddle error", "d": "2/2015"}, {"body": "jridgewell let put one", "d": "2/2015"}, {"body": "jridgewell open console note error line", "d": "2/2015"}, {"body": "well ca nt merge nothing something need set options", "d": "2/2015"}, {"body": "ah see already fixed master", "d": "2/2015"}, {"body": "jridgewell yea looks like idea see release thnx", "d": "2/2015"}, {"body": "soon hopefully", "d": "2/2015"}, {"body": "create small jsfiddle demonstrating problem calls add hood clear would happening", "d": "2/2015"}, {"body": "sorry isolating collection resolves issue tried opening issue something elsewhere code interfering", "d": "2/2015"}, {"body": "say implementation detail documented public behavior add single model way nt need use ugly hack like really want nt think need document however return value documented methods return return value turn returns value returns added model models sure needs documented either care return value stick method documented return value point doubt making sweeping changes collection methods fine regardless", "d": "2/2015"}, {"body": "way nt need use ugly hack like really want huh way mean calling hood exactly would accomplish nt accept model arguments either would passing actually clear difference behavior default options documented need dig around code find significant difference means need instead multiple models indeed mean something like instead turn returns value returns added model models right sure needs documented either return values methods also implementation detail care return value stick method documented return value significant difference problem document methods assume must important difference else one would listed alias point doubt making sweeping changes collection methods fine regardless told consider implementation detail willing document certainly willing rely code", "d": "2/2015"}, {"body": "document", "d": "2/2015"}, {"body": "collection etc methods meant mimic ones found array names exact api might slightly different questions try source well commented easy follow logic moving methods hook debugger head rabbit hole actually clear difference behavior push default add options main difference option end essentially tells ignore default sorting behavior say comparator push models end could document sure willing document certainly willing rely code nt use method ignore return values methods realize backbone nt going change drastically area", "d": "2/2015"}, {"body": "collection etc methods meant mimic ones found array names exact api might slightly different know say analagous necessarily identical array methods accepted single item reason backbone methods could nt accept multiple array accept one elements backbone methods would actually analagous also questions try source well commented easy follow logic moving methods hook debugger head rabbit hole already said figure differences think substitute good documentation fundamentally disagree based suggestion seem think collection methods signature array methods fact suggestion makes sense would arguably make sense ability part api could document sure thumbsup nt use add method ignore return values methods realize backbone nt going change drastically area wo nt documented say implementation detail ah hell rely anyway thanks jashkenas says documented see turns", "d": "2/2015"}, {"body": "mention undocumented methods trigger event", "d": "2/2015"}, {"body": "wan na whip docs pull take", "d": "2/2015"}, {"body": "sure essentially page accept argument return value trigger event discussed difference respect also documented nt chance wrap head around yet", "d": "2/2015"}, {"body": "yes right document accepting model references model ids", "d": "2/2015"}, {"body": "want submit pr next week plan would say elements array consist acceptable values arg", "d": "2/2015"}, {"body": "theory contain combination right", "d": "2/2015"}, {"body": "theory contain combination right mean currently practice uses hood expectation supposed theory described pull request", "d": "2/2015"}, {"body": "jmm yeah got yeah expecting wanted make sure", "d": "2/2015"}, {"body": "reason could nt better written know function call using getters setters part bad idea js go one core ideas backbone models doubt see support added anytime soon", "d": "2/2015"}, {"body": "anything would partially aligned new class syntax property initializers class syntax even spec yet interop issue go one core ideas backbone models core idea also getters partial solution existing problem backbonecollection", "d": "2/2015"}, {"body": "spent minutes trying make jsperf different solutions", "d": "2/2015"}, {"body": "core idea idea setting retrieving property object transparent logical reason always know never anything setting property value ditto retrieval use functions handle things like computed properties change events main reason wrapper methods around first place also getters partial solution existing problem backbonecollection modelidattribute reason current wrapper nt work either primitive function also fixed", "d": "2/2015"}, {"body": "sorry linked issue speaking bringing mainly backbone class syntax largely already compatible es class syntax seems reasonable compatible considering added support coffeescript", "d": "2/2015"}, {"body": "coffeescript nt support setters getters largely reasons look issues background starting nt roadblock supporting backbone objects classes sorry linked issue speaking remind straining see connection bat besides changes would done closing wontfix", "d": "2/2015"}, {"body": "coffeescript nt support setters getters largely reasons nt speaking getterssetters speaking backbone added interop coffeescript makes sense support classes manner remind straining see connection bat besides changes extend would done extend closing wontfix definitely right place change anything would new method makes much sense supported imo also issue gets closed forgotten would like address okay backbone extend interop issues es classes coffeescript classes", "d": "2/2015"}, {"body": "well seeing ie tech preview browser even remotely decent support even traceur nt yet convert ways even necessary aside backbone nt going go way break backwards compatibility support feature nt great idea begin", "d": "2/2015"}, {"body": "even traceur nt yet convert actually require support static properties widely supported also reason backwordscompatibility needs broken could even made faster selectively used available", "d": "2/2015"}, {"body": "thejameskyle want turn pr instead issue worth looking", "d": "2/2015"}, {"body": "sure", "d": "2/2015"}, {"body": "tejastank think expected behaviour method view removes view elementdom node dom stops listening events", "d": "2/2015"}, {"body": "tried things even many different way also delete old events amp memory object exists even remove methods see example formview old instance keep calling", "d": "2/2015"}, {"body": "try mailing list irc channel questions github issues maintaining framework", "d": "2/2015"}, {"body": "hi tejastank try mailing list irc channel questions like github issues maintaing framework", "d": "2/2015"}, {"body": "prefer post bugissue github instead irc prefer irc someone help fix let know complete bug unable remove create object memory keep memory leak amp wrong framework affects kindly reopen", "d": "2/2015"}, {"body": "carljm opened deal seems works basically everywhere else uses directly since delegates callback actually gets options caveat changes point new object object yet propagate pass options object callback may need thinking believe fixes issue please feel free give try let know", "d": "2/2015"}, {"body": "platinumazure thanks pr fix issue though think necessary change really addition following two lines rest pr looks like entirely cosmetic changes though experienced backbone dev probably missing something nt see reason adding new vars everywhere", "d": "2/2015"}, {"body": "carljm right one real necessary change wanted add tests around others add variables want general allow modify options object need make sure modified asynchronous call starts fires success callback otherwise could get really weird behavior example attempting model collection twice", "d": "2/2015"}, {"body": "platinumazure ah get makes sense thanks fix", "d": "2/2015"}, {"body": "totally maybe say merges instead feel free open pull", "d": "2/2015"}, {"body": "ralfthewise first fogget create collection proto model attr second backbone debug chome must develop backbone application open debuger see models collection mb normal way use modelparse jsfiddle example always get first model attr translatedvalue upd fixed example jsfiddle please read modelparse thanks", "d": "2/2015"}, {"body": "nope see previous tickets", "d": "2/2015"}, {"body": "noticed nt want call parse passed parse false expecting parse method would nt called missing something", "d": "2/2015"}, {"body": "curiosity would need prevent parsing response server", "d": "2/2015"}, {"body": "think dont need get changes server call parse simple dont make complicated", "d": "2/2015"}, {"body": "curiosity would need prevent parsing response server since refactored code nt need anymore situation pretty durn specific though think roughly three conditions happening api client represented data differently specifically api followed json api spec attributes resource returned nested attribute always created particular resource client without nesting would pass method assume nesting later saved call would break parse method due nested attribute particular instance server returned nt need used client needed ignore response parse like said specific situation anway still think important code fixed clear nt option many methods backbone source acts documentation options given method accepts prob whip pr update method nt forget", "d": "2/2015"}, {"body": "jmeas dont used durty checking like thanks", "d": "2/2015"}, {"body": "yup something like posting issue stuckouttongue surprised original idea nt work reading sauce", "d": "2/2015"}, {"body": "actually need sure ever situation want trigger using object right think reason works result using hood reason make official codified behavior", "d": "2/2015"}, {"body": "think docs cover though bit removed trigger actually trigger docs list single spaceseparated events supported think reason works result using eventsapi hood reason make official codified behavior old indeed implementation detail new reducing something hack love see behavior removed reverted", "d": "2/2015"}, {"body": "feel free remove revert reduced api", "d": "2/2015"}, {"body": "closed", "d": "2/2015"}, {"body": "maybe missing something simply specify calling model set", "d": "2/2015"}, {"body": "overrides behaviour every model get tiresome could also create base model class", "d": "2/2015"}, {"body": "saying default put extra leg work fix bug current behaviour cause invalid data present bug design fixed without rely developer fixing every time use", "d": "2/2015"}, {"body": "bug disagreement design project automatically imply bug forcing validation every time breaking change maintainers simply decided direction wanted go left open consumers choose whether validate every set using merely save allows flexibility argue validation default people pass disable model set breaking change something maintainers likely choose without cutting new release version least", "d": "2/2015"}, {"body": "minimum needs fixed previous values saved validation run correctly reset last valid value", "d": "2/2015"}, {"body": "minimum needs fixed previous values saved validation run correctly reset last valid value yes sounds like interesting idea although one might trickier figure practice theory would worth exploring pr", "d": "2/2015"}, {"body": "epitome object set models prototype merged options argument breaking lets js let backbonemodelextend options validate true let new nearly equivalent system let new backbonemodel validate true", "d": "2/2015"}, {"body": "yes sounds like interesting idea although one might trickier figure practice theory would worth exploring pr hmm maybe could beginning recordreplayreverse sort thing suppose implemented stack attributes objects level could also valid metadata property indicate set attempt valid invalid sounds little much bet one plugins could handle sort thing", "d": "2/2015"}, {"body": "thanks bug report sorry late reply saw", "d": "2/2015"}, {"body": "unfortunately nt vm try jdalton anything stand", "d": "2/2015"}, {"body": "happen vm sayhello create jsbin issue", "d": "2/2015"}, {"body": "looking issue bit truly unfortunate safari bug codebased workarounds seem add unnecessarily ugly code break basic functionality docs page", "d": "2/2015"}, {"body": "update release schedule backbone", "d": "2/2015"}, {"body": "ah yes slipped would good cut release soon possible afraid nt particular plan", "d": "2/2015"}, {"body": "encountered issue upgrading today found code like would get post collection get put collectionundefined totally abhorrent practice changing api get rid feel inconsistency modelisnew modelurl surprising odd", "d": "2/2015"}, {"body": "really sounds like bug actually happening put", "d": "2/2015"}, {"body": "pr ready sure correct way go fixed falling back idattribute url appears change introduced", "d": "2/2015"}, {"body": "sure feel simply open pr failing test case patch ping caseywebdev", "d": "2/2015"}, {"body": "yup failing test would great", "d": "2/2015"}, {"body": "cbroome let test pr want whip one", "d": "2/2015"}, {"body": "sorry pr unfamiliar acronym", "d": "2/2015"}, {"body": "pr pull request github", "d": "2/2015"}, {"body": "ahhh duh yeah give go next couple days", "d": "2/2015"}, {"body": "thanks", "d": "2/2015"}, {"body": "pull request", "d": "2/2015"}, {"body": "disagree coming wondering intentional thing like goal require things like code fine note call occurs hood would get passed along case switching would force validation every time give one choice matter agree code unclear case though would certainly like docs take stance", "d": "2/2015"}, {"body": "could nt implement function ignore undefined attributes complain nulls empty strings take care save scenario simply pass option like calling check", "d": "2/2015"}, {"body": "makes sense may dupe", "d": "2/2015"}, {"body": "right pretty dead let close look forward pull request whenever thing appears", "d": "2/2015"}, {"body": "jdalton one", "d": "2/2015"}, {"body": "oh man pain trap nt think backbone issue scan stackoverflow find lots issues around setting older ie", "d": "2/2015"}, {"body": "thanks jdalton", "d": "2/2015"}, {"body": "thinking bit luozhihua could issue iframe backbone creates try manually changing backbone document would need changed backbone loaded", "d": "2/2015"}, {"body": "anyone solved problem id undefined collectionget obj", "d": "2/2015"}, {"body": "revive dying thread opened relates problem using events might added end debounce time realtime syncing collections tabs debounce also keeping track indexes get difficult changes proposed small hopefully resolve issue many others raised topic", "d": "2/2015"}, {"body": "option wasted hour figuring bugbehavior please least update documentation", "d": "2/2015"}, {"body": "new github know ask doubts asking please help solve issue thanks advance trying control mouse help image processing using dsp processor davinci board know interrconnect opencv code board", "d": "2/2015"}, {"title": "templates display property descriptor values ember", "body": "clone repo reproduce bug", "num": "10551", "d": "2/2015"}, {"title": "foundationbootstrapskeleton grids none work expected", "body": "attempting use responsive grid seems ones tried recently embercli using ember missing columns malformed anyone run problem fix", "num": "10546", "d": "2/2015"}, {"title": "ember htmlbars template compiled undefined problem ember beta", "body": "hi precompilation application templates looks like embertemplates application emberhtmlbarstemplate function return ishtmlbars true blockparams cachedfragment null hasrendered false build function build dom var domcreatedocumentfragment var domcreatetextnode domappendchild var domcreatetextnode domappendchild return render function render context env contextualelement var dom envdom var hooks envhooks content hookscontent domdetectnamespace contextualelement var fragment envusefragmentcache amp amp domcanclone thiscachedfragment null fragment thisbuild dom thishasrendered thiscachedfragment fragment else thishasrendered true thiscachedfragment fragment domclonenode thiscachedfragment true else fragment thisbuild dom thiscachedfragment domrepairclonednode fragment var domcreatemorphat contextualelement content env context outlet return fragment get following uncaught error uncaught error assertion failed template rendered compiled match revision begin look problem could bug dont get error", "num": "10543", "d": "2/2015"}, {"title": "access failed transition error substate", "body": "trying display better error messages would like access failed transition led entering error substate goal display url user wanted enter make easier debug problem tried different hooks route could nt find way retrieve failed transitions way think one", "num": "10542", "d": "2/2015"}, {"title": "input helper valuebinding updated", "body": "code stopped working recently regression caused", "num": "10541", "d": "2/2015"}, {"title": "returning object computed property loose data binding", "body": "little bit weird basically app returning result ember data computed property use promiseproxy flag show loading spinner route first loads works fine subsequent returns computed property object returned correctly see ember id increasing jsbins ispending properties never updated stash promise inspect manually int console changing reflected rendered output app hope makes sense broken canary working", "num": "10539", "d": "2/2015"}, {"title": "ember build nt adding templatecompiler building ember", "body": "steps reproduce", "num": "10537", "d": "2/2015"}, {"title": "scheduleonce supposed create run loop one nt exist", "body": "according documentation automatically start runloop however finding unit tests embercli qunit chunk code return error turned testing mode disabled runloop autorun need wrap code asynchronous sideeffects run digging source code seems like error could intentional runloopjs something different test documentation wrong seems fix problem seems read right way", "num": "10536", "d": "2/2015"}, {"title": "initializer giving invalid router container lookup", "body": "hi problem trying create initialiser allows control embers router outside ember canarycli pojs problem seems occur mainly deployed versions using embercli mainly seems work local served local apache initializer roughly following problem gives router location property whereas source run locally local apache fully populated router instance router targetstate properties seem consistent either platform tried ways including much simpler unreliable results suspect may kind event runs failing instance initializes router properly maybe like looking solution bug blocking release way set initializer load last way access container router instances completely outside ember thanks", "num": "10535", "d": "2/2015"}, {"title": "fastboot changes seem break setting application customevents within initializer", "body": "longer set within initializer instance passed initializer different whatever line code", "num": "10534", "d": "2/2015"}, {"title": "emberjs emberjs", "body": "typing github repositories search nt return first results searching yields results rather lack actually resolves repository raising issue let guys know might worthwhile bringing consistency corresponds com domain instead", "num": "10532", "d": "2/2015"}, {"title": "application rendered twice defined router mapping", "body": "discovered strange behaviour worked previously router looks like javascript routermap function mustache welcome emberjs outlet rendered html html welcome emberjs welcome emberjs get feeling resource always implicit overriden defined router jsbin working double rendering", "num": "10531", "d": "2/2015"}, {"title": "view component tagname returns many nodes", "body": "see expected alert received alert returns entire dom parent nodes nt verify", "num": "10529", "d": "2/2015"}, {"title": "router class nt used", "body": "machty", "num": "10526", "d": "2/2015"}, {"title": "ember select binding value", "body": "example export default embercontrollerextend questiontext null questioncategory view select contentmodelcategories optionvaluepath contentid optionlabelpath contentname prompt valuequestioncategory textarea valuequestiontext name id cols rows select binding questioncategory binding textarea works fine debug ember debug ember data debug jquery", "num": "10522", "d": "2/2015"}, {"title": "bug paramsfor work nested routes cases", "body": "hi use case parent route force set default query params setupcontroller retrieve setupcontroller nested route using method however work params always null created jsbin replicates issue jsbin uses using beta experiencing issue note using default values controller emberjs consider default values hence user change query params goes back default value default value appear anymore query params highly problematic specific use case basically application either query params case use default values query params thanks", "num": "10521", "d": "2/2015"}, {"title": "throws unexpected call method property access component tag", "body": "append child notes element might tags append child component view work since renderbuffer appends text node every component renderbufferjs sure fixed wish understanding whats going renderer using different tagname like label wrapper adding actual element template works temporary fix example code", "num": "10520", "d": "2/2015"}, {"title": "preset attributes breaks bindattr", "body": "seems like automatically presets attributes available original html tag bind attributes using helper throw error manually setting attribute think changed warning since overwrite value everything work properly case developer mistakenly set attribute static value see warning console know fix luckily issue occur using production builds since asserts removed makes debugging issues impossible without removing assert sample code", "num": "10519", "d": "2/2015"}, {"title": "embercomputed documentation namespace", "body": "much like think namespace api documentation rather related sub properties belong think page using following notation moves property namespace", "num": "10516", "d": "2/2015"}, {"title": "route address bar", "body": "ember reproduction steps generate new route add linkto helper generated route apptemplatesapplicationhbs click link click go back click link", "num": "10515", "d": "2/2015"}, {"title": "keyboard shortcuts special characters like \u00ee working", "body": "keyboard shortcuts special characters like \u00ee option mac working htmlbars soon press option \u02c6 character added textbox wait additional key strokes issue seems browser specific could reproduce chrome safari firefox fine try jsbins stole another issue latest canary working working edit hmmn definitely working differently posted update asap", "num": "10512", "d": "2/2015"}, {"title": "resolver creates multiple instances controllers", "body": "following jsbin explains quick recap app controllers objects general long names eg ing one controllers whether use dasherized name underscored name returns different instances controllers behaviour visible except accepts dotted notation reading code implies standard way underscore notation nt resolver resolve object matter notation deprecate warn throw team would see fit depending notation", "num": "10511", "d": "2/2015"}, {"title": "observer triggers unchanged property", "body": "hello property like observer property observer gets called somevaluea somevalueb changes even someproperty never change documentation says observers ember currently synchronous means fire soon one properties observe changes observer called noticed properties property one property two change value x property two gets called even though propertyone change somehow feels like functions examples called nothing changes misunderstanding something", "num": "10510", "d": "2/2015"}, {"title": "text input behavior android browser upgrade", "body": "upgrading beta text inputs bound values become impossible use galaxy sure android issue specific phone type characters get repeated order gets jumbled cursor jumps around tried swype keyboard samsung one going back problem disappears", "num": "10508", "d": "2/2015"}, {"title": "routename undefined init", "body": "see routename assigned init run possible change routename available init method", "num": "10506", "d": "2/2015"}, {"title": "bug routing transition changed query params", "body": "trying transition updated query params state using route method within beforemodel hook transition promise seem get rejected due kind invalid state handlerinfo objects sure bug something happens intentionally jsbin", "num": "10504", "d": "2/2015"}, {"title": "attrnode method", "body": "using update controller child view code throws error controllerdidchange observer controller function thisisdestroying return trying call changed workaround sure best way actually fixing using ember", "num": "10502", "d": "2/2015"}, {"title": "adapter host nt apply store", "body": "using ember emberdata want change host adapter external one way javascript appapplicationadapter dsrestadapterextend host namespace kraken appstore dsstoreextend adapter appapplicationadapter appindexroute emberrouteextend model function return thisstorefind game fact adds namespace request still makes request nt know bug misunderstanding bet second option pretty new emberjs wrong ideas thanks", "num": "10500", "d": "2/2015"}, {"title": "locationtypenone respected tests url storeconfiginmetafalse", "body": "setup working behaviour navigate tests run expected url remains steps reproduce edit navigate url changed", "num": "10499", "d": "2/2015"}, {"title": "wrapping unless around yield pass controller properties", "body": "wrap around helper seem losing context since controller properties passed rendered template jsbin", "num": "10497", "d": "2/2015"}, {"title": "throw better error went passing namespaced path view helper", "body": "currently throw would helpful could detect presence namespace throw error cc stefanpenner send pr tonight feel free modify proposed error message guessing check amp throw nonproduction env", "num": "10496", "d": "2/2015"}, {"title": "click test helper nt fire click handlers", "body": "component trying write test js moduleforcomponent incrementbutton incrementbuttoncomponent setup function app startapp component thissubject component thisappend teardown function emberrun app destroy app null test clicking increments count function click button andthen function equal componentget count test fails added statement found never gets called", "num": "10495", "d": "2/2015"}, {"title": "emberselect nt select correct value default content array resolved promises", "body": "commit looks like emberselect attempting properly handle case content array promises nice unfortunately nt seem always behave properly specifically promises already resolved render time looks select unsetting value rendering bryanalves tried trace sequence events think happens value gets correctly set runs sees content method causes schedule called later html renders onto page triggers event ember listening actual selection yet deferred step instead emberselect thinks selection changed nothing finally method get called late underlying value already set undefined got two jsfiddles demonstrating problem one emberselect run value gets unset page load exact thing emberselect removed run value stays french fries simply emberselect page alters value property page render", "num": "10492", "d": "2/2015"}, {"title": "htmlbars subexpressions allowed first argument attribute bindings", "body": "think possible use helpers subexpressions binding attribute case instead throwing exception demonstration tested ember using inside old works", "num": "10491", "d": "2/2015"}, {"title": "ember generated objectcontroller missing controllers", "body": "getting following message emberobjectcontroller deprecated please use embercontroller use tracking found controller ember generated would think ember creating controllers missing controllers objectcontrollers", "num": "10488", "d": "2/2015"}, {"title": "incorrect deprecation message", "body": "think arraycontroller deprecated yet however received following message using ember beta deprecation attempted access object proxying deprecated please use instead nt believe modelarrangedcontent correct syntax use fact im sure deprecation actually fix would think needs fixed arraycontroller", "num": "10487", "d": "2/2015"}, {"title": "itemcontroller", "body": "use tell use insteadbut nt work problem", "num": "10485", "d": "2/2015"}, {"title": "promises consistentlyeagerly call asyncstartend testing", "body": "ember extends rsvp notify qunit async subtle issue config hook nt get called time invoke callbacks subscribed via friends resolve asynchronously within callback qunit test suite already left test called makes ember attempt pause test case rsvp promises settled flimsy seems solution would call within rsvp promise constructor least moment callback subscribed via et al sure easily hooked also doubts even entirely catchwait every rsvp promise would nt lead confusion someone uses non rsvp promise lib another lib uses non rsvp dependency either way like hear stefanpenner one might missing something", "num": "10484", "d": "2/2015"}, {"title": "cursors jump end input new value set", "body": "demonstrations repro canary repro beta stable fine", "num": "10481", "d": "2/2015"}, {"title": "object nt support property method addeventlistener", "body": "fairly anonymous error think regression caught generic handler unhelpful stack places vendorjs nt seem use alternatives like attachevent function completed readystate complete good enough us call dom ready oldie documentaddeventlistener eventtype load documentreadystate complete detach jqueryready supportfocusinbubbles jqueryeach focus focusin blur focusout function orig fix delete emberfeatures featuresstrippedtest warnifusingstrippedfeatureflags emberenvfeatures featureswerestripped thanks", "num": "10480", "d": "2/2015"}, {"title": "emberrunlater sometimes execute callback time", "body": "hi seeing something looks like race condition sometimes stops runlater working concretely looks like runs get stuck runloop nt executed specified time something else starts new runloop example click something dom changes even interesting even enough put another js console looks like runloop started scheduled runs processed minimal example could reproduce need run times trigger behaviour see nt printed console press start runloop button get printed console immediately next example closer app also slightly complicated nt need include someview triggered way often examples look bit artificial happens app setting properties observers afaict need promise also new function without ca nt reproduce app even reduces probability far remove hardly ever trigger fwiw chromium best regards domme", "num": "10479", "d": "2/2015"}, {"title": "rendertemplate behavior changed", "body": "prior latest canary could render common outlets parent routes rendertemplate would persist seems like first call render works behavior couple days ago sure exact day using behavior canary til behavior notice common template nt rendered latest", "num": "10478", "d": "2/2015"}, {"title": "text misinterpreted", "body": "emberjs embercli following template snippet arrow misinterpreted html element", "num": "10477", "d": "2/2015"}, {"title": "new optional index helper nt allow itemview", "body": "", "num": "10476", "d": "2/2015"}, {"title": "test uncaught error ca nt trigger action closemodal app nt finished transitioning first route", "body": "hi got modal dialog component applicationroute action coffee actions openmodal modaltpl args render modaltpl application outlet modal model args works fine real app test fails test test modal dialog open close expect visit foo andthen equal find modal length initiall modal dialog andthen equal find modal length modal dialog appear andthen equal find modal length modal dialog disappear first two assertions succeed route successfully renders modal throws error uncaught error ca nt trigger action closemodal app nt finished transitioning first route subsequently third assertion fails action executed modal removed question happening deal issue nt want heavily refactor app like error suggests problem testing app", "num": "10474", "d": "2/2015"}, {"title": "request support", "body": "", "num": "10473", "d": "2/2015"}, {"title": "need suggestion ember applications thought handlebar helpers still would great could give suggestion", "body": "", "num": "10472", "d": "2/2015"}, {"title": "template compilation error", "body": "using embersource gem rails get following error uncaught error assertion failed template rendered compiled match revision", "num": "10471", "d": "2/2015"}, {"title": "change latest release github releases page", "body": "change latest release recent one stable beta instead hiding two recent ones displaying latest release might confusing someone regulary check new releases", "num": "10460", "d": "2/2015"}, {"title": "aftereach failed exists", "body": "trying embercli unit tests models giving error aftereach failed exists convert undefined null object typeerror convert undefined null object objectkeys native ember data lib system recordarraymanager values emberobjectextendwilldestroy even test model defaultempty test libraries embercli embercliqunit ember emberdata emberqunit qunit reverting everything works everything else remaining equal", "num": "10459", "d": "2/2015"}, {"title": "internet explorer ember input type time error invalid argument", "body": "", "num": "10458", "d": "2/2015"}, {"title": "docs telling use foo bar nt work", "body": "example deprecations however using trick using htmlbars", "num": "10457", "d": "2/2015"}, {"title": "handling subdirectories emberhtmlbarscomponentgeneration", "body": "handlebars component express emberhtmlbarscomponentgeneration work edit error", "num": "10456", "d": "2/2015"}, {"title": "emberjs guide issues testing live examples broken", "body": "emberjs guide testing category quite live example test broken examples error setup failed root lists first page posts call without template compiler loaded please load prior calling error uncaught referenceerror emq defined", "num": "10455", "d": "2/2015"}, {"title": "htmlbars vs handlebars compiled output comparison", "body": "ran quick comparison maybe fair handlebars htmlbars production output ember cli looking default application template ember numbers represent packed minified size beautified lines code get rough idea size nt like using bytes measurement ember handlebars bytes loc beautified ember htmlbars bytes loc beautified comparison shows bytes two standards originally posted", "num": "10454", "d": "2/2015"}, {"title": "emberjs queryparams rfc compliant", "body": "rfc says appropriate format url query string anchors aka seems queryparams ember wants fragment querystring reason opposite approach taken", "num": "10453", "d": "2/2015"}, {"title": "please provide way test production mode", "body": "previously build server would compile app production mode run tests upon passing release staging server upgrading appears removed production builds ember production mode behave unfortunately nt past tests failing production mode passing development without option test production unable catch differences releasing also nt feel right releasing code effectively untested could add testing back production mode provide another solution thanks", "num": "10452", "d": "2/2015"}, {"title": "yield block context variables", "body": "following template inside context arraycontroller called page example corresponding template list view problem following block inside list view helper doesnt context despite controller content correct code well version bellow", "num": "10451", "d": "2/2015"}, {"title": "embertextfield cursor position lost setting new value", "body": "found bug using input helper htmlbars sadly ca nt get jsbin work reproduce creating new ember project using ember cli replace bowerjson edit brocfile add applicationhbs type text put cursor middle type text cursor automaticly jump last character instead staying middle", "num": "10449", "d": "2/2015"}, {"title": "assert templates mismatched ember templatecompiler", "body": "add sort flag template compiler used compare running assert different", "num": "10447", "d": "2/2015"}, {"title": "meta upgrade retrospective", "body": "ember upgrade retrospective hi writeup pain points upgrading app took around commits changes get everything back working state includes bunch refactors scheduled move app compatible background app work inventory management product art galleries called ember app located curious see ember inspector shows fairly large app complex cases around routes components moment use embercli tooling amazing quite time unable upgrade stable due ember data requiring old style emberset used rather nt want upgrade ember data needed resolved nt happen late december troubles upgrading emberdata htmlbars compiler providing unhelpful error messages bit html invalid sneaky caused compiler barf found fixed refactoring templates components trouble managing actions simple manner chose punch components controllers routes using api nt public change several times upon finishing upgrade get everything settle right way addition punching components needed helpers changed helpers use htmlbars style helpers oldstyle handlebars helpers missing meta data using punch controllers routes following internal helpers ember one instance used trying get existing helpers working found calls chain helpers ie view helpers changed api signature instead process wanted remove deprecated code codebase specifically wrote get features htmbars provides ease one bits code removed deprecating soon deleting repository get bad pattern public eye code base spent good deal time taking upgrade good time refactor parts application use components heavily encountered bugs around helper rendering template model caused unexpected side effects solved refactoring templates used pattern components acceptance tests involving css selectors suddenly broke reason vague selectors tests made tests pass broke tests consider bad thing tests accurate trouble working around helper needs observe properties model needed unwrap model promise observe keys used helper painful unexpected coming makeboundhelper working use case bug drag drop list animation code looking content childviews expecting able access change", "num": "10446", "d": "2/2015"}, {"title": "html filtered select views ember canary", "body": "component html options selection working fine html markup passed select element styled using semantics see jsbin see html displayed text real component would displayed markup canary html markup filtered see happened documented intended regression activated takes sooo much effort track sudden changes thought introduced bug app realized hours later ember silently swallowing html", "num": "10445", "d": "2/2015"}, {"title": "multiple outlets working canary", "body": "multiple outlets application template get uncaught typeerror read property insertbefore null", "num": "10438", "d": "2/2015"}, {"title": "embersubscribe breaks backwards compatibility", "body": "according docs part instrumentation api however appears part embermetalstreams believe emberinspector depends upon embersubscribe instrumentation method exposed different manner", "num": "10435", "d": "2/2015"}, {"title": "embercanary object proxy work", "body": "object proxy supposed deprecated still working working anymore least partials details", "num": "10434", "d": "2/2015"}, {"title": "cached computed properties seem invalidated often", "body": "consider code var usercontroller emberobjectcontrollerextend firstname john lastname doe largefirstletter function consolelog recomputing return thisget firstletter touppercase property firstletter firstletter function return thisget fullname substr property fullname fullname function return thisget fisrtname thisget lastname property firstname lastname var usercontroller new usercontroller consolelog usercontrollerget largefirstletter consolelog usercontrollerget largefirstletter usercontrollerset lastname smith consolelog usercontrollerget largefirstletter idea dependency tree largefirstletter lt firstletter lt fullname lt firstname lt lastname operations perform change output console ember spec seems promise recomputed dependencies longer valid experiment reveals actually means deeper dependencies also taken account even though direct dependency change gets recomputed example simple hit problem advanced scenario causing lot redraws situations nothing actually changed fixed making real computed property manually recomputing using observe fullname something wrong", "num": "10433", "d": "2/2015"}, {"title": "ember community actively repelling newbies", "body": "removing handelbars dependency builds could run without ember cli producing call compile without template compiler loaded error several threads dedicated issue amazingly nobody asked link compiler missing everybody considered recommended work around guessing correct download url ok ok policy actively repelling newbies wonder necessary", "num": "10432", "d": "2/2015"}, {"title": "ca nt get support deep properties", "body": "property dependency nt work need define get handle transparently least throw exception deep property used", "num": "10430", "d": "2/2015"}, {"title": "clarify difference binding embercomputedalias", "body": "noticed differences binding embercomputedalias ca nt seem find information clarify maybe add docs", "num": "10429", "d": "2/2015"}, {"title": "render named outlet application route broken uncaught typeerror read property routename undefined", "body": "broken version ember also broken latest beta release uncaught typeerror read property routename undefined code causing working bin ember working example seems code renderoptions returns application gets set undefined problem code reason missing something", "num": "10428", "d": "2/2015"}, {"title": "render outlet application template", "body": "regression stable currently broken beta canary see jsbin simple application templates handlebars application application template outlet outlet foo foo foo outlet route error occurs line since application route undefined causing error", "num": "10427", "d": "2/2015"}, {"title": "properties view render helpers resolve", "body": "appears system quite time saw similar behavior hash itemsproperties added render view helper resolved prior passed unless directly set helper following accessible sometemplate viewdirect following accessible sometemplate viewparsed full example using related", "num": "10426", "d": "2/2015"}, {"title": "template must function", "body": "getting following error console upgrading ember guess something new htmlbars engine using gulpembertemplates precompiling templates file issue perhaps easy way create gulp task", "num": "10423", "d": "2/2015"}, {"title": "ember precompile render function problems", "body": "updated ember htmlbars using ember handlebars everything worked fine compiling templates using gruntembertemplates index template different renders render templatename ember inspector transitioned index transition transition complete uncaught typeerror object function see error inside render function exactly line output template context options weird using htmlbars compiled index template changed html html readable", "num": "10422", "d": "2/2015"}, {"title": "beta active async route bug", "body": "seems like linkto active state async routes updates bit late weird try switch foo bar jsbin", "num": "10421", "d": "2/2015"}, {"title": "access controller view ember", "body": "currently facing problem controller property views undefined previous versions property automatically set corresponding controller behaviour changed ember could find anything changelog maybe something else going wrong app like know start debugging", "num": "10420", "d": "2/2015"}, {"title": "helper test regression call without template compiler loaded", "body": "helper tests started failing seems like failure occurring ember docs nt lot insight yet", "num": "10419", "d": "2/2015"}, {"title": "using modal dialogs undefined error canary", "body": "canary code work yields following error uncaught typeerror read property routename undefined points return thisrender modalname", "num": "10416", "d": "2/2015"}, {"title": "mergedproperties needs documentation", "body": "searching documentation little luck typing emberjscom search box gives api hits typing gives none sure made much difference", "num": "10415", "d": "2/2015"}, {"title": "properties nested objects ember nt fire object key pascalcase", "body": "update property inside object inside properties related wo nt update example update wo nt update included fiddle javascript appcustommodel emberobjectextend workprop function return thisget workval property workval wontworkprop function return thisget wontworkval property wontworkval appindexroute emberrouteextend model function return appcustommodelcreate work val bar wontwork val bar fiddle", "num": "10414", "d": "2/2015"}, {"title": "consider components name valid", "body": "pain point code organization app currently component definitions would like push components folder organizational purposes small sample components organized artwork vertical also willing hear organizational strategies like pods need guidance hesitant move pods unless major positives current info app upgrading canary running embercli working also refactoring application process upgrading canary since using workarounds patterns longer supported thanks", "num": "10407", "d": "2/2015"}, {"title": "typeerror thisbootresolver undefined ember", "body": "seeing error firefox comes ember application function js didbecomeready function thisautoboot environment default hasdom thisdeprecatedinstancesetupeventdispatcher", "num": "10406", "d": "2/2015"}, {"title": "rerender array sorted change properly notified", "body": "demo code js appapplicationcontroller embercontrollerextend anarray sleeping eating pizza programming looking lolcats trigger action array gets sorted created second property make sure first property change console output see computed property receives sorted value recalculate every button click sorting reflected page demo", "num": "10405", "d": "2/2015"}, {"title": "two model instances id", "body": "hi starting ember ember data repeatedly able end two models model store id standard ember data setup rest adapter backed django rest framework api works great however django changes model create update delete send event amqp json serialisation model bridge turns qpid events socketio events ember app listen model change events get push store create update unload delete event unfortunately instances ember app get event including original requestor django serial operations socketio event gets back originally requesting instance app http request finished guessing seems logical every time end model store twice introduce second delay amqp socketio bridge everything works fine presumably push function call store updates model orginally recieved via rest interface second previsouly using happy answer questions help al", "num": "10404", "d": "2/2015"}, {"title": "fresh embercli application nt work ember emberdata", "body": "steps reproduce set bowerjson remove handlebars dependency remove add fix bug handlebars required brocfilejs error get followed seems caused line emberdata updating emberdata help everything seems working fine ember canary", "num": "10403", "d": "2/2015"}, {"title": "broken yield combo inside view layout template", "body": "inside view layout seems yield template gets incorrect context called inside block working fiddle ember see context expected lead controller lead view instance code get code working change layoutname template without block", "num": "10402", "d": "2/2015"}, {"title": "wrong context rendering component instance view helper", "body": "passing view instance view helper context inside view template remains parent demo broken demo working", "num": "10401", "d": "2/2015"}, {"title": "uncaught error assertion failed fragment pushed buffer contains content", "body": "hey upgrading app ember get following error message", "num": "10400", "d": "2/2015"}, {"title": "error autolocation", "body": "code causes following error please note jsbin nt really support history location jsbin still demonstrates error", "num": "10396", "d": "2/2015"}, {"title": "bindattr inserting attributes falsy values", "body": "attribute falsy value attribute get inserted element tag stringified version value eg rendered jsbin reproduction rendered output would jsbin cc rwjblue", "num": "10395", "d": "2/2015"}, {"title": "register helpers ember", "body": "changelog ember cleanup htmlbars public api claims use create helper however function actually private preferred way registering helper", "num": "10394", "d": "2/2015"}, {"title": "html character entities escaped linkto helper", "body": "used work fine earlier nt using inline version html character entities escaped example go go rarr obviously get around using block form wanted share", "num": "10392", "d": "2/2015"}, {"title": "acceptance tests cause error destroying app teardown function", "body": "ember acceptance tests generates error calling method", "num": "10390", "d": "2/2015"}, {"title": "emberdata failing test teardown", "body": "migrating shell app beta beta passing test fails error emberdata note point app using emberdata models record arrays created emberdata beta working assumption needs null check record arrays process aftereach failed site navigation requested keys value object ms source keys native code ember data lib system recordarraymanager values willdestroy superwrapper invoke flush flush end run run willdestroy superwrapper invoke flush flush end run run teardown runhook process begin", "num": "10388", "d": "2/2015"}, {"title": "documentation request confusing behavior async realtionships", "body": "loading related async models using helper confusing documentation able return promise related model hook route related models resolved template rendered given router models entering url loading page fetches related models navigating route via helper fetch related models js routerjs routermap function thisresource index path function thisresource nodes function thisresource node path nodes nodeid routesnodejs export default emberrouteextend aftermodel function model var promise modelget relatedmodels return promise modelsnodejs import ds emberdata export default dsmodelextend type dsattr string name dsattr string relatedmodels dshasmany relatedmodel async true modelsrelatedmodeljs import ds emberdata export default dsmodelextend name dsattr string node dsbelongsto node async true expected behavior documentation updated figure fetch access related model click link related models called", "num": "10385", "d": "2/2015"}, {"title": "cps recomputeare accessible destroyed objects", "body": "removal meta destroying object would render cp still try cause cp recompute release canary notice canary version actually returning cp", "num": "10383", "d": "2/2015"}, {"title": "build failed file emberhtmlbarstestshelpersviewtestjscstestjs", "body": "trying build latest master get build error jscs stack trace rwjblue hunch related dependency update", "num": "10378", "d": "2/2015"}, {"title": "custom attributes added via attributebindings always lowercase", "body": "example generating following dom inspector html note property added cased beta jsbin canary jsbin", "num": "10376", "d": "2/2015"}, {"title": "ca nt access service another service documentation", "body": "done controllers initializer register time using embercli generate service blueprint also makes initializer another service services access even use like export function initialize container application applicationinject route first service first applicationinject controller first service first applicationinject view first service first export default name firstservice initialize initialize export function initialize container application applicationinject route geoservice service geo applicationinject component geoservice service geo export default name geoservice firstservice initialize initialize services accessible route firstservice accessible geoservice misspell firstservice ember breaks saying service know evaluated makes difference name accurate seems issue might logic depends register saw service generation blueprint missing register line like controllers says nt need services infer change logs embercli ember docs make reference using controllers service nothing find services embercli generates make depend services api docs entry service nt tell anything either feature finished using regular controller register bug filed embercli way generates services initializers", "num": "10374", "d": "2/2015"}, {"title": "issue nesting index route inside resource specified path", "body": "sure explain happening stumbled uppon issue trying make jsbin example afaik jsbin print templates fails nest inside seems break something", "num": "10371", "d": "2/2015"}, {"title": "noncontext switching switches context inside loop", "body": "following controllers javascript appfooscontroller emberarraycontrollerextend itemcontroller foo appfoocontroller embercontrollerextend following template template since using noncontextswitching versions helpers expect every namely instead first two statements print third prints bug completely misunderstanding something jsbin", "num": "10370", "d": "2/2015"}, {"title": "href attribute svg image element updated template", "body": "handlebar template href attribute image element inside svg bound property controller property set data uri ie complete image data encoded property string setup worked ember ember minimal example change version ember see expected image", "num": "10368", "d": "2/2015"}, {"title": "model unit tests different", "body": "see discussion stackoverflow model unit test objects returned encountered bug upgrading nonembercli project embercli sure whether bug lies emberjs embercli even emberqunit", "num": "10367", "d": "2/2015"}, {"title": "asynchronous routes cause wonky linkto behaviour nested", "body": "pattern previously used mark outer html tag eg tag rather link something like worked perfectly fine going back think even broken canary still works fine current beta route asynchronous clicking transitions page perfectly fine classes updated solution add inner like regression expected one sure changing nt exactly intended api know pattern used wild wanted bring attention noted synchronous transitions exhibit problem jsbin", "num": "10366", "d": "2/2015"}, {"title": "reopen nt apply previously created objects new object created", "body": "hi trouble getting reopen apply previously created objects jsbin demonstrates issue appears calling class new properties applied new object class created also appears manually invoking rather creating new object also apply new properties previously created objects", "num": "10364", "d": "2/2015"}, {"title": "feature debounce embercomputed property", "body": "idea implementing emberrundebounce bit cumbersome needed certain cases propose willing much legwork skills allow debounce becomes part embercomputed api example would allow filteredarray treated computed property templates etc would delayed seconds debounce would defining default context would open would could allow configurable open ideas feel improved please let know terrible idea great idea etc first time contributor wrong please let know", "num": "10361", "d": "2/2015"}, {"title": "issue linkto helper causing page freezes", "body": "ember version recently encountered issue rendering particular view causing browser slow eventually freeze bit digging culprit turned following line cases expected null turned root cause triggered browser freeze could nt find anything docs explain would handle ui would render empty string expected find strange would cause browser freeze give context lefthand side page navigation panel lists models collection clicking links show action resource issue nt occur first seems build clicking links lefthand nav container let know anymore info code post help", "num": "10360", "d": "2/2015"}, {"title": "ca nt use xml namespaces component attribute names", "body": "code applyattributebindings function buffer attributebindings var attributevalue var unspecifiedattributebindings thisunspecifiedattributebindings thisunspecifiedattributebindings trying create component uses xml namespace eg xlink href code splits attribute name improperly resulting output xlink instead xlink href looking ember jquery code ca nt find way escape colon make ember happy", "num": "10359", "d": "2/2015"}, {"title": "ca nt use xmlns component attributes", "body": "code applyattributebindings function buffer attributebindings var attributevalue var unspecifiedattributebindings thisunspecifiedattributebindings thisunspecifiedattributebindings trying create component uses xml namespace eg xlink href code splits attribute name improperly resulting output xlink instead xlink href looking ember jquery code ca nt find way escape colon make ember happy", "num": "10358", "d": "2/2015"}, {"title": "issue nested query params objectcontroller", "body": "app describe nested query params application controller query param used across entire app routescontrollers utilize query params noticed today app recently upgraded embercanary htmlbars nt proven yet issue new versions using helper queryparams specify queryparams current controller queryparams application controller actually cleared link clicked noticed happening know deprecated unsure yet could causing issues figured go ahead open ticket jsbin demonstrating issue notice selecting color try select shape clears previous query param", "num": "10357", "d": "2/2015"}, {"title": "accidental creation", "body": "edit accidentally created issue", "num": "10356", "d": "2/2015"}, {"title": "unknown helper error raised", "body": "block hook raise assertion throw error call helper exist see currently try use helper available get cryptic error calling undefined", "num": "10355", "d": "2/2015"}, {"title": "link arraycontroller fails context object", "body": "using linkto object context route extracts array object ember gives following error going directly url well jsfiddle", "num": "10354", "d": "2/2015"}, {"title": "emberprod contains asserts", "body": "example suspect provides us better cycle support modules confusing defeaturify believe remove assert statements", "num": "10347", "d": "2/2015"}, {"title": "index range error transitioning routes", "body": "common error ember application one presumably happens user transitions one routes happens often production much rarer development tells might due number elements array thought maybe bug still happens newest version ember nt reliable way triggering error switch back forth lot stack trace sure start looking one", "num": "10343", "d": "2/2015"}, {"title": "compatibility class syntax", "body": "would great feature usable people using embercli kind work would need go make possible x align decorators stability x loose mode proto nt support x constructor vs init vs suspect new form new behaviour would prefer fire", "num": "10341", "d": "2/2015"}, {"title": "new dependency injection syntax counterintuitive", "body": "watched great talk ember ebryn linked time mark starts talking new dependency injection system great apart little detail know probably little late individual opinion importance heavily disagree logic implementation example ebryn talking js export default embercontrollerextend anothercontroller emberinjectcontroller injects anothercontoller anothercontroller export default embercontrollerextend anothercontroller emberinjectcontroller foo injects anothercontroller foo take look version notice attribute name alias left hand side controller address right hand side new syntax exact opposite goes general idea javascript syntax always assign right hand value left hand variable attribute way around make obvious js plain old js way right hand side assigned left hand side var foo anothercontroller counter intuitive wrong injection way left hand side supposed assigned right hand side anothercontroller var foo", "num": "10339", "d": "2/2015"}, {"title": "ember helpers", "body": "using canary able use htmlbars bounds updated recent canary version everything stopped working caused helpersjs following thrown using embercli", "num": "10333", "d": "2/2015"}, {"body": "nt appear bug rather question request help stackoverflow discuss forum venues facilitate better recommend continuing discussion cross linking back", "d": "2/2015"}, {"body": "confirmed bug", "d": "2/2015"}, {"body": "provide jsbin demonstrates issue release canary reopen", "d": "2/2015"}, {"body": "fwiw use foundation problems w grid prior versions ember ran uses metamorph script tags foundation use lastchild sibling selector", "d": "2/2015"}, {"body": "would nice cc machty", "d": "2/2015"}, {"body": "seems like good idea work done router moment touches stuff keep mind dig private api something hacky like pretty sure errored transition looking probably stashing approach could try", "d": "2/2015"}, {"body": "checked possible use unlimited times clear user entered value", "d": "2/2015"}, {"body": "take look hours one broke", "d": "2/2015"}, {"body": "pretty sure know write test submit patch bit", "d": "2/2015"}, {"body": "nice thanks raytiley", "d": "2/2015"}, {"body": "seems like regression", "d": "2/2015"}, {"body": "playing around looks like commit broke previous commit works expected basing travis builds master since way know get builds throw jsbin willing put sometime figure anyone point right direction", "d": "2/2015"}, {"body": "caused changes wycats tomdale ring bell", "d": "2/2015"}, {"body": "tried master works fine", "d": "2/2015"}, {"body": "found related commits seem like main one way build ember changed lot ember might hack around manually add embertemplatecompiler right place", "d": "2/2015"}, {"body": "irc", "d": "2/2015"}, {"body": "post example unit test", "d": "2/2015"}, {"body": "digging source code seems like error could intentional intentional must wrap roots async runloop variantvalueselected function var emberrun function emberrunscheduleonce afterrender thatsetproductvariation observes childcontrollercollection eachvalue also incorrect suggest referring help make correct choice questions like arise please feel free open stackoverflow question cross link", "d": "2/2015"}, {"body": "thanks posted stackoverflow question since little confused incorrect statement read runloop docs nt sure pointing", "d": "2/2015"}, {"body": "initializers entities going break many things ideally want let app assemble lookups", "d": "2/2015"}, {"body": "zyllorion call transitionto application initialized last two cases lookup happens initialization right think similar code works app may try debug app pausing including caught exceptions maybe something fails apps silently also way control order initializers loaded using", "d": "2/2015"}, {"body": "well found solution setup within application router rather initialiser help others continue stefanpenner know another way access router instance container instance force transition outside ember please let know happily look router fully initialised find documentation guarantee happens orkon transitionto run manually well ember initialises transition internally ember fine linkto etc think may creating new instance router initialisation", "d": "2/2015"}, {"body": "zyllorion make lookup right transition created jsbin similar works app", "d": "2/2015"}, {"body": "looks like eagerly copying properties instance initializers run easy enough set initializers run everything continue work", "d": "2/2015"}, {"body": "seems like something make github aware", "d": "2/2015"}, {"body": "lol double outlet fun think make top level name reserved similar", "d": "2/2015"}, {"body": "agree fixed simply removing resource defined router fast reactions way", "d": "2/2015"}, {"body": "thought totally crazy components always need tag moment right however seems irc many people using behaviour great either add assertion tagname required document feature supported many people actually seem using supported would actually quite useful", "d": "2/2015"}, {"body": "duizendnegen using gives component element therefore return expect bug caveat using tagless viewscomponents alexspeller tagless viewscomponents used quite extensively internally anything extends using main reason documented illustrated exact issue get element means work properly also means dom events folks would normally expect get fired things like caughthandled element present listen events tldr support tagless viewscomponents whole slew caveats trivially explained batted around idea making something could extend would provide real documentation caveats", "d": "2/2015"}, {"body": "submitted add helpful assertion calling tagless viewcomponent", "d": "2/2015"}, {"body": "cc tomdale perhaps fastboot collateral", "d": "2/2015"}, {"body": "definitely regression likely caused one pr try dig bit later evening", "d": "2/2015"}, {"body": "almost certainly related work kept particular api mind easy fix likely dumb oversight part", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "likely needs", "d": "2/2015"}, {"body": "nt see router registered subsequently resolved code nm resolves default time go sleep guess", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "nice", "d": "2/2015"}, {"body": "isolate jsbin please", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "want questiontext updated whenever questioncategory selected select box think missing piece code example also ids model unique", "d": "2/2015"}, {"body": "sorry really works problem select customized", "d": "2/2015"}, {"body": "pretty sure nt bug according qp guides inside articles route changes category property articlescontroller cause url update query param default query param property change wo nt cause full router transition ie wo nt call model hooks setupcontroller etc update url returns initial params route transition since never actual transition returns initial value upon entering route updated one", "d": "2/2015"}, {"body": "sounds like bit unusual setup point suggest asking question stackoverflow see approaching issue correct way", "d": "2/2015"}, {"body": "mentioned confirmed mdn void element permitted content issue original jsbin component default contains layout amounts adds empty text nodes cause error gets around setting using built base class setting fix issue original jsbin", "d": "2/2015"}, {"body": "course many ways get around issue still exist ember probably add empty test nodes void elements guess complex fix minimum update docs throw warning component tag set void element currently using one addon sets input component base name sure many developers idea issue devtools issues enormously hard debug", "d": "2/2015"}, {"body": "course many ways get around issue still exist yes likely millions ways code write app could cause problem cost pay supporting old platform using normal mechanisms get bound ember extending works properly ember probably add empty test nodes void elements guess complex fix may possible think time think definitely avoid adding text nodes supplied template aka template block component", "d": "2/2015"}, {"body": "rwjblue added take look", "d": "2/2015"}, {"body": "works reproduce jsbin", "d": "2/2015"}, {"body": "ca nt use embercli instead ember starter kit check source code", "d": "2/2015"}, {"body": "repo helpful thx comrade see behavior described top post yet errors console looks like legit bug log", "d": "2/2015"}, {"body": "makdi gave pretty specific example trigger issue app general helpful put together simple app jsbin reproduces problem expectation put entire app jsbin", "d": "2/2015"}, {"body": "clear normally realistic us jump code track bugs simplified reproduction jsbin pretty essential prompt resolution issues", "d": "2/2015"}, {"body": "rdossantos seeing behavior jsbins latest chrome double check potentially update steps reproduce", "d": "2/2015"}, {"body": "latest canary build fixes issue", "d": "2/2015"}, {"body": "wooho", "d": "2/2015"}, {"body": "think resolver works fine resolves factory problem container knowledge rules specific resolver using container uses string comparison determine factory andor instance cached case resolver dashized underscore values resolve could imagine exotic resolver actually different files think ultimately consequence comes flexibility design would say best bet use constant camelcase naming across app", "d": "2/2015"}, {"body": "already use consistent naming suggested camel case issue faced setup using therefore automatically resolved ember provided first parameter another controller also needed provided controller instead ending instance every place different instances could build another jsbin thought former summed", "d": "2/2015"}, {"body": "hyphenated naming standard ember module approach standard ember defaultresolver method ideally address problem describing failing unit test would good way testdrive fix", "d": "2/2015"}, {"body": "sorry perhaps misunderstood reason nt using controller", "d": "2/2015"}, {"body": "workmanw reason maybe reason failing find guidelines syntax double worded controllers making things overly complicated unamused another jsbin precisely reproduces experienced behaviour hopefully code tell better lukemelia wanted know whether behaviour expected adding tests work relevant test", "d": "2/2015"}, {"body": "xcambar definitely bug", "d": "2/2015"}, {"body": "hope like", "d": "2/2015"}, {"body": "nitpick dasherized foobar camelcased foobar anyway dasherizing probably best default practice", "d": "2/2015"}, {"body": "correction say dasherizing best default embercli apps standard going forwards also suspect use going away nevertheless see improve", "d": "2/2015"}, {"body": "computed properties ember recompute values eagerly instead dependent key changes marked invalid consumed recompute ember nt know observer going every computed property dependent key computing eagerly compare values would often wasteful observers observe changes paths ember know observed path changed thus fires observer execution observer causes recomputation occur second example may inaccurate colored fact used template would need make jsbin discuss detail want something value really changed suggest store last value compare subsequent observer calls example beforeobserver deprecation guide", "d": "2/2015"}, {"body": "closing favor please keep eye progress", "d": "2/2015"}, {"body": "martinthogersen possible today without breaking dependency injections must appropriate hook case etc general always aim keep routes fairly stateless", "d": "2/2015"}, {"body": "mixonic perhaps creative creating listview want write little code possible order create sortable template queryparams built mixin takes care everything including template ember needs controller queryparams make work nt want add controller routes nt write import mixinlistroute mixinsmixinlistroute export default emberrouteextend mixinlistroute routename tourcategoriesindex needed available init model function return thisstorefind tourcategory figured need create controller init defined user order make queryparams work properly better way export default embermixincreate init function var fullname controller thisroutename var currentcontroller thiscontainerlookup fullname currentcontroller var f thiscontainerlookupfactory controller basic extend isgenerated true queryparams emberkeys thisget queryparams tostring function return generated thisroutename controller", "d": "2/2015"}, {"body": "martinthogersen maybe question better suited listview issues still pretty confused trying achieve immediate thought may missing call mixin method", "d": "2/2015"}, {"body": "mixonic question related auto generating controller nt use listviews project need autogenerate controller set queryparams controller way made work posted issue looks like queryparams initialized early doesnt allow updating controller created create controller queryparams setting route init method regarding missing super right added", "d": "2/2015"}, {"body": "jsbin nt accurately reproduce bug mention", "d": "2/2015"}, {"body": "locks checked chromefirefox transition promise always gets rejected additionally url params set window location", "d": "2/2015"}, {"body": "cc machty", "d": "2/2015"}, {"body": "gigafied cane push patch", "d": "2/2015"}, {"body": "gigafied template look like trouble understanding would happen wild", "d": "2/2015"}, {"body": "think might specific know official release listview supports ember maybe issue template pretty simple", "d": "2/2015"}, {"body": "gigafied trying recreate error test worried wo nt actually fix issue unless reproduction try jsbin today", "d": "2/2015"}, {"body": "tough time finding case fires makes testing fix pretty tough", "d": "2/2015"}, {"body": "yeah recycles views scroll applies new contextcontroller trying repro jsbin", "d": "2/2015"}, {"body": "ok able repro stefanpenner fixed listview ember", "d": "2/2015"}, {"body": "gigafied also open listview issue need find time dig see whats borked", "d": "2/2015"}, {"body": "heads seems ember data question bug ember ember data issues ember data sure use ember data issue tracker issues ember use issue tracker questions help recommend using stack overflow much better knowledge sharing venue additionally keep issue tracker focus run going close issue recommend open stackoverflow question please cross link answer questions stackoverflow", "d": "2/2015"}, {"body": "thanks sorry confusion", "d": "2/2015"}, {"body": "oops meant create embercli sorry", "d": "2/2015"}, {"body": "looks like duplicate fixed canary beta release fix", "d": "2/2015"}, {"body": "ebryn thanks work", "d": "2/2015"}, {"body": "would helpful could detect presence namespace throw error passed namespace view helper factory type likely meant view foo bar", "d": "2/2015"}, {"body": "stefanpenner thinking little would agree assertion better suited embercli emberresolver instead view helper", "d": "2/2015"}, {"body": "jasonmit convinced", "d": "2/2015"}, {"body": "also tried replacing change", "d": "2/2015"}, {"body": "test passes js var application moduleforcomponent incrementbutton beforeeach function application startapp aftereach function emberrun application destroy application null test works function assert assertexpect var component thissubject thisrender assertequal componentget count count clicking click button andthen function assertequal componentget count count clicking moving call previously works move previously test fails seems like bug ember ember test helpers aside feels bit strange start app like component test see people agree issue", "d": "2/2015"}, {"body": "kimroen great research feels bit strange start app like component test agree though nt know else test behavior event handlers suspect appstart required set ember global event dispatcher", "d": "2/2015"}, {"body": "jamesarosen booting app test component", "d": "2/2015"}, {"body": "nt care app booting care test helpers like former seemed way get latter", "d": "2/2015"}, {"body": "jamesarosen clarify nt work nt boot app", "d": "2/2015"}, {"body": "nt think booting app requirement testing components seems like bug", "d": "2/2015"}, {"body": "wagenet helpers needed specifically added window calling require app completely agree would nice able use unit testing component try dig bit see could support worlds", "d": "2/2015"}, {"body": "also issues emberselect version failing test would nice actually surprised passed tests", "d": "2/2015"}, {"body": "trying write test thinking problem might little subtler originally thought nt look emberselect supposed support array promises content support property set promise way ran trying upgrade old codebase still using deferredmixin places including case content select nt actually promises treated incorrectly property case one deferredmixin maybe better way emberselect determine something promise think post better idea", "d": "2/2015"}, {"body": "one nondeprecated way trigger issue appears use array objectproxies promiseproxymixin content select least nondeprecated clear supported use emberselect anyone know", "d": "2/2015"}, {"body": "certainly duplicate", "d": "2/2015"}, {"body": "stefanpenner agree clear actually means expect issues emberselect fixed rewritten scratch", "d": "2/2015"}, {"body": "nbudin patches fix bugs absolutely accepted glad help folks minefield pr keeping many issues open piece known issues intend replace drags ability triage issues", "d": "2/2015"}, {"body": "rwjblue thanks much thinking trying make emberselect support thenables content make fork let know anything worth looking", "d": "2/2015"}, {"body": "subexpressions syntax allowing calling helpers inside handlebars expressions like helper params means leave parens work fine subexpressions required cases like know example kinda silly correct wrong though", "d": "2/2015"}, {"body": "also even suggesting valid usecase issue likely belongs handlebars repo", "d": "2/2015"}, {"body": "right stupid calling without parentheses totally works", "d": "2/2015"}, {"body": "istefo maybe think getting convinced compiler ignore parens instead throwing error", "d": "2/2015"}, {"body": "cahbriangantzler applications built previously relying default proxying behavior would broken define controller must create instance due semver requirements generated controller warn attempt use proxying behavior", "d": "2/2015"}, {"body": "k makes sense mean time manually create controllers order get rid deprecations know good problem creating another file want remove deprecations know im ready means creating controllers nt might want add note somewhere others know well", "d": "2/2015"}, {"body": "create controllers prevent deprecations nt use properties defined controller trigger proxying behaviors deprecations", "d": "2/2015"}, {"body": "getting following warning deprecation emberobjectcontroller deprecated please use embercontroller use seems indicate objectcontroller created using proxy objectcontroller", "d": "2/2015"}, {"body": "sorry appears using objectcontroller still looking arrangedcontent even working", "d": "2/2015"}, {"body": "probably better ask kind question something like stack overflow emberjs issues framework bugs", "d": "2/2015"}, {"body": "reopen stackoverflowcom usually pretty active group contributors grateful try tackle kind debugging issues ahacking said try keep issue tracker bugs open stack overflow may want use emberjsjsbincom create reproduceable demo issue thanks", "d": "2/2015"}, {"body": "ok thanksi nt know weather framework bug declared template file depends itemcontroller arraycontrollerbut changed nt notificated update", "d": "2/2015"}, {"body": "surpmillet looks like asking multiple questions think one eachin syntax vs eachas seems something specific behavior another method added focus one would make easier us reply determine bug", "d": "2/2015"}, {"body": "humble addon kindly added test launches assertions run promise fulfilled expecting work js recordsave andthen function ok totally nt assertion run test failed teardown came clever solution refactored questions expectation valid wait complete issue ticket related", "d": "2/2015"}, {"body": "duplicate", "d": "2/2015"}, {"body": "ouch something seems funky suspect may issue", "d": "2/2015"}, {"body": "cc", "d": "2/2015"}, {"body": "thanks bug report looks like triggered nondefault renders main render variation example works using nonnamed outlet top investigate", "d": "2/2015"}, {"body": "thanks fix things easy enough change default outlet requirement structure app year may need make documentation change log beta somewhere maybe since nt see anyone else saying borked", "d": "2/2015"}, {"body": "think still bug get fixed instead documented", "d": "2/2015"}, {"body": "since nt see anyone else saying borked affects application well adding plain outlet fixes errors", "d": "2/2015"}, {"body": "another issue think may related templates name main render hooks like didinsertelement run output empty sure related showed time issue", "d": "2/2015"}, {"body": "since nt see anyone else saying borked happening application well", "d": "2/2015"}, {"body": "bndw html may work entered browser actually valid using validator service see error suggestion encoded agree better error message likely tracked", "d": "2/2015"}, {"body": "mixonic good point move htmlbars", "d": "2/2015"}, {"body": "works put options", "d": "2/2015"}, {"body": "omghax example correct block param always last parameter closing", "d": "2/2015"}, {"body": "yay got first error happened teardown test second assertion test failed due fact modal closed reason happened using bootstrap process closing modal click modal background bootstrap performs animations emits event meaning modal hidden component wrapper listen event trigger action problem seems click triggers event kinda asynchronously really sure going matter kind asynchrony detected result test finishes modal actually closes solution replace execution synchronous neither assertion teardown fail", "d": "2/2015"}, {"body": "hi baskarsugumar may implemented using wonderful lib please check please post details issue something else", "d": "2/2015"}, {"body": "sort question better suited stack overflow irc try keep issues actual bugs ember closing issue feel free post back post", "d": "2/2015"}, {"body": "sort question better suited stack overflow irc try keep issues actual bugs ember closing issue feel free post back post also need open two issues thing seems like duplicate", "d": "2/2015"}, {"body": "current version compiler ember emer expects either ember ember replace ember ember ember code", "d": "2/2015"}, {"body": "sorry issues fix asap", "d": "2/2015"}, {"body": "fix", "d": "2/2015"}, {"body": "ya good point get updated", "d": "2/2015"}, {"body": "updated thanks reminder", "d": "2/2015"}, {"body": "yeah think need new release ember data address canarybeta concerns releasing new version today igort bmac one issues requires new release", "d": "2/2015"}, {"body": "yes fixed pr already merged canary", "d": "2/2015"}, {"body": "closing favor emberjsdata look later today", "d": "2/2015"}, {"body": "awesome thanks", "d": "2/2015"}, {"body": "ie nt support ember issue references", "d": "2/2015"}, {"body": "rwjblue issue ember previously nt exist ie reverts text input", "d": "2/2015"}, {"body": "hmm creating dom directly dom created invalid given platform sure path fixing would reopen others chime might fixable without megahacks mixonic love thoughts", "d": "2/2015"}, {"body": "apologize wo nt able look detail tuesday coming week hard get context limited resources right quantumking inputs revert text box handle differing value formats coming input type text text input date time input strict final formatting sounds like regardless ember need testing support handling return values differently really want support think several places ember explode use unsupported api example use svg explode creating entire alternative rendering solution svg viable think creating browserdoesntsupportthis fallbacks make features appear work actually behave good practice across board tl dr make input formats fallback text cause crashes also actually supposed would bad merely illusion supporting imo supporting need really support handle cases sun feb robert jackson wrote reopened reply email directly view github links", "d": "2/2015"}, {"body": "mixonic using time input preview screens mobile app mobile app code reused website create preview particular case need process value input preview serves visual demonstration would suck maintain two separate codebases include conditional ie mobile end", "d": "2/2015"}, {"body": "inspecting dom tree ie nt change input text", "d": "2/2015"}, {"body": "ran input type email degradation text would totally acceptable would totally understand gets marked wo nt fix would nice get something cryptic error like meantime working around binding input type computed property jquery obviously wo nt work things like datetime input though", "d": "2/2015"}, {"body": "definitely works properly latest beta build closing demonstrated work latest beta builds happy reopen reproduction demonstrating issue", "d": "2/2015"}, {"body": "rwjblue make difference precompiling", "d": "2/2015"}, {"body": "quantumking yep ca nt good news wrote blog", "d": "2/2015"}, {"body": "rwjblue got working cheers", "d": "2/2015"}, {"body": "found reason none html code script tag links embertemplatecompilerjs emberqunitmainjs issues refused execute script mime type textplain executable strict mime type checking enabled gets changed work", "d": "2/2015"}, {"body": "atsjj thanks comparison discussion template output probably done htmlbars though say big changes compiled template output coming make templates much smaller even handlebars templates going close issue already consider work address well way please reopen missed something", "d": "2/2015"}, {"body": "watching hell issue going awesome lands thanks taking look issue", "d": "2/2015"}, {"body": "smaller completely minimal still include fragment building portion inline atsjj compare gzipped file sizes well local repetition createdocumentfragment createtextnode etc compress well", "d": "2/2015"}, {"body": "mmun great point ember handlebars bytes compressed gzip ember htmlbars bytes compressed gzip", "d": "2/2015"}, {"body": "router nt support urls fragments proper sense hash seeing used backwards compatibility older clients see", "d": "2/2015"}, {"body": "mean nt need support older clients create noncompliant urls tell ember handle compliant way", "d": "2/2015"}, {"body": "use historylocation described docs guides namely router include", "d": "2/2015"}, {"body": "yes sorry makes sense thanks", "d": "2/2015"}, {"body": "need include generated along rest build assets running tests precisely embercli running", "d": "2/2015"}, {"body": "awesome thanks bunch", "d": "2/2015"}, {"body": "duplicate", "d": "2/2015"}, {"body": "jsbins reproducing problem latest canary latest beta seems work properly", "d": "2/2015"}, {"body": "would love try fix push right direction", "d": "2/2015"}, {"body": "reproductions mixonic demonstrations repro canary repro beta stable fine", "d": "2/2015"}, {"body": "submitted add info templates", "d": "2/2015"}, {"body": "please reopen expected version hardcoded many places beta hardcoded versions differ rendering beta unusable", "d": "2/2015"}, {"body": "octagon working properly latest embersource", "d": "2/2015"}, {"body": "thanks writeup unsure goal issue need address something recap others pain points", "d": "2/2015"}, {"body": "recap request wycats stefanpenner", "d": "2/2015"}, {"body": "gotcha thanks definitely things could easier", "d": "2/2015"}, {"body": "ugh impossible manually register hyphenless helper component", "d": "2/2015"}, {"body": "endash read carefully still yes may still register hyphenless helpers", "d": "2/2015"}, {"body": "sorry bit hyperbolic making private api effectively thing intend circulate code beyond projects start discussion arguing merits think several use cases top head extend ember low level conceptually want short hyphenless names", "d": "2/2015"}, {"body": "oh long helpers rereading distinction still nt clear happy get clarification", "d": "2/2015"}, {"body": "endash timevans fill handlebars helpers include dashes possible afraid bump function bypassing linting helper component names longer public still works always issue maybe nt understand", "d": "2/2015"}, {"body": "mixonic", "d": "2/2015"}, {"body": "ah damn right back bummed regular helpers need dashes hopefully republicing api nt far", "d": "2/2015"}, {"body": "hey mixonic rwjblue could limit contributors discussion nt want big political mudslinging thing nt even copyedit issue", "d": "2/2015"}, {"body": "sorry barging first heard", "d": "2/2015"}, {"body": "endash fine nt want blow whole community putting cents", "d": "2/2015"}, {"body": "refers still register nondasherized helper via api supported strong commitment semver fwiw api removed reason locked limiting api decisions past making one internal time explore new options regret may miscommunication behalf wrote release blog posts continuing support apis want clear worked hard ensure apis still work accordance commitment api stability apis kept flux room iterate exciting ideas timevans closed issue wo nt pull back want disengage totally understand definitely thinking political issue want write great software see others keep thanks notes", "d": "2/2015"}, {"body": "mixonic much appreciated like nice set notes improve subsequent releases get notes fleshed fully fine engaging want careful reporting issues", "d": "2/2015"}, {"body": "look forward whole post mortem thanks timevans think use fully understand pain avoid going forward", "d": "2/2015"}, {"body": "ok think done enough cc wycats", "d": "2/2015"}, {"body": "gonvaled definitely intended behavior strings passed definitely considered safe default make strings instances render expected going close issue consider bugfix regression feel free reopen missed something", "d": "2/2015"}, {"body": "mixonic mmmm ok makes sense bit unfortunate working wrong along btw example linked correctly could add correct link help refactor code", "d": "2/2015"}, {"body": "gonvaled doublechecked link time", "d": "2/2015"}, {"body": "mixonic thanks seems ok escapemarkup filter component must return plain string know obtain html string safestring reverse operation safestring htmlstr", "d": "2/2015"}, {"body": "gonvaled familiar component referencing call object get back unescaped value", "d": "2/2015"}, {"body": "mixonic able get working added simple component two test cases good ember safestring see plain strings work safestrings dont bad embercanary safestring see neither plain strings safestrings produce html markup component restore ember canary old behaviour component able show html markup would say issue yet clarified kept open", "d": "2/2015"}, {"body": "using issue prevents us upgrading please reopen", "d": "2/2015"}, {"body": "lolmaus succeeded upgrading stopping use emberselect derived view moving addon refactoring straightforward though plusside getting probably thoroughtested featurecomplete component", "d": "2/2015"}, {"body": "gonvaled issue happen", "d": "2/2015"}, {"body": "know implemented issue", "d": "2/2015"}, {"body": "due morph refactor compiled template follows created morph triggering error mmun would mind reviewing", "d": "2/2015"}, {"body": "jsbin using incompatible versions ember embertemplatecompiler canary", "d": "2/2015"}, {"body": "mmun bingo", "d": "2/2015"}, {"body": "ugh likely due new transpiler sane good catch", "d": "2/2015"}, {"body": "closed", "d": "2/2015"}, {"body": "seems working properly provide reproduction showing seeing", "d": "2/2015"}, {"body": "seems happen controller manually defined added also partial initially thought related partials extending controller problem appears", "d": "2/2015"}, {"body": "following means specifically saying want want use object controller manually defined controller must extend different past versions", "d": "2/2015"}, {"body": "one refactorings performed moving canary deprecation warnings objectcontroller must changed controller clear least documentation deprecation warnings also losing property proxying", "d": "2/2015"}, {"body": "gonvaled reason use property proxying job deprecation warning received started honoring instructs use extend instead definitely need details deprecation guide open issue", "d": "2/2015"}, {"body": "rwjblue fair enough probably oversaw comment objeccontroller controller code get rid obvious warnings appear instantiating controllers probably related since tested templates refactoring anyway working transition canary unfortunately automatic testing realize losing properties guess could bite people clear warning transition guide would help", "d": "2/2015"}, {"body": "cp lazy invalidated something needs pull data imagine following dk chain becomes dirty values also known derived even ultimately computes original value current experience still recompute many scenarios actually works fine wont cause rerenders simple template bindings diff previous new value decide rerender needed basic code actually lives fall short currently dealing complex objects values aware tomdale wycats currently working template rendering side problem although goal server side rendering scooped client side potential help mitigate issue cp side currently paired changeevent contract followed although would breaking change may able reimagine downstream pulls previous newvalue compared didchange emitted newvalue different ultimately side change imagine work simple values arrays objects pathalogical cases may help much unfortunately although may seem simple change likely pretty dramatic without caveats believe template rendering side sufficient context handle complex object case much better although solutions could work together reactive template approach likely near term solution", "d": "2/2015"}, {"body": "scenario problem actually something somewhat difficult compute comparing message text search query thus reevaluating messages even though query nt change seemed bit slow probably attributed slowdown rerenders actually computation slow words consider scenario rerenders issue recomputation property costly bad pattern cp costly compute", "d": "2/2015"}, {"body": "hi octagon raise good point absolutely link new compiler builds page ember run entirely good people volunteering free time project chances team time add link builds page yet interested great opportunity contribute builds page ember app source sure everyone would greatly welcome pull request adding link like pair let know happy work smiley", "d": "2/2015"}, {"body": "going fold website octagon work hard building welcoming civil community framework reliable steady thanks raising website issue", "d": "2/2015"}, {"body": "aexmachina think exception assert would best deep chaining observers perform poorly building ember around idea wo nt need deep observation new codebases", "d": "2/2015"}, {"body": "goal flesh diffing story never need use let alone nested", "d": "2/2015"}, {"body": "awesome sounds great think right throw exception people know", "d": "2/2015"}, {"body": "agreed", "d": "2/2015"}, {"body": "yes please", "d": "2/2015"}, {"body": "remember trying get assertion long time ago huge pain butt gave sure gotten easier", "d": "2/2015"}, {"body": "difficult impossible get assert inline maybe grepbased warning build would suffice", "d": "2/2015"}, {"body": "aliases synchronously link two different properties single object example getsetswatchunwatchaddobserveretc applied redirected applied act key bindings asynchronously link two different properties single object moreover bindings actually change property sides binding contrast aliases proxy property declared binding object model know add two observers side binding one observer case one way bindings schedule synchronization values either side changes specifically either side changes synchronization binding scheduled run loop queue fact usage queue buy us well backburner run loop configured disable observer notifications sync queue coalesce one observer notification effect absorbing churn properties sides binding change many times queue reached another feature bindings deterministically break ties sides binding change consider template imagine component button clicked changes internal property imagine component immediately sends action caught controller causing controller change property assume happens queue reached sides binding changed wins bindings introduce determinism always wins case controller set wins please nt use bindings especially twoway bindings avoided really really like remove entirely ember also recommend using aliases favour writing full dependency key yes verbose makes code much able frankly current implementation bugs regarding observing alias nt use either prefer explicitly passing data via use services", "d": "2/2015"}, {"body": "great response thanks much going bookmarks next confused", "d": "2/2015"}, {"body": "please feel free follow questions ping irc", "d": "2/2015"}, {"body": "awesome thanks okay need funnily enough hit subtle new bug fixed changing binding alias must result something another part codebase changing binding alias", "d": "2/2015"}, {"body": "duplicate", "d": "2/2015"}, {"body": "closing favor issue", "d": "2/2015"}, {"body": "nt supported render deprecated want behavior please use component", "d": "2/2015"}, {"body": "possible cause one addons using nt updated", "d": "2/2015"}, {"body": "got error", "d": "2/2015"}, {"body": "package seems outdated try", "d": "2/2015"}, {"body": "going close based presumption joeruello pointed uptodate library please reopen missed something", "d": "2/2015"}, {"body": "using ember past two months nt problem today downloaded starter kit created new project everything worked fine till installed libraries precompile templates gruntfilejs moduleexports function grunt gruntinitconfig pkg gruntfilereadjson packagejson embertemplates compile options templatebasepath apptemplates files distjstemplatesjs apptemplateshbs watch embertemplates files apptemplateshbs tasks embertemplates examined output files templates compiled correctly get error idea resolve issue nt able find anything helpful internet far someone could clear would really appreciate thanks", "d": "2/2015"}, {"body": "inexuscore robert core team great writeup search gruntembertemplates page follow link pr find looking", "d": "2/2015"}, {"body": "fivetanley yes read post today still trouble compiling templates updated grunt task accordingly templates compiled fine start app get error posted pr clues thanks", "d": "2/2015"}, {"body": "templates htmlbars templates need configure gruntembertemplates path template compiler", "d": "2/2015"}, {"body": "mean adding embertemplatecompilerjs starter kit js folder", "d": "2/2015"}, {"body": "something like following", "d": "2/2015"}, {"body": "references", "d": "2/2015"}, {"body": "rwjblue thank following wrote found wrong important options must specified neither take effect used templatecompilerpath handlebarspath nt work", "d": "2/2015"}, {"body": "found problem view reference instead seems like internal moved", "d": "2/2015"}, {"body": "ember framework currently undergoing significant changes part really easy take care version transition point view really helps aware plans changes follow relevant people twitter read blog posts etc probably starting reading ember rfc would best mentioned many times controllers going away components taking actually deprecates objectcontroller also use views either", "d": "2/2015"}, {"body": "know plans transition components slowly transitioning way large app take time see mention controller property change version wrongly using close issue solved thanks response", "d": "2/2015"}, {"body": "specifically tests use method testing nested components", "d": "2/2015"}, {"body": "mentioned blog posts error message need compile runtime load assuming embercli needwant testing following would work javascript brocfilejs appenv production appimport bowercomponentsemberembertemplatecompilerjs posts", "d": "2/2015"}, {"body": "ah ticket probably still serves good documentation ticket since tests actively failing site example code tests", "d": "2/2015"}, {"body": "slexaxton great point looks like fivetanley opened track one", "d": "2/2015"}, {"body": "noticed problem selenium tests morning nt time debug went back fixed problem", "d": "2/2015"}, {"body": "thanks ilkkao guess team aware problem", "d": "2/2015"}, {"body": "may related recent outlet fixesrefactoring", "d": "2/2015"}, {"body": "bisected problem case use modals exactly instructed maybe example upgraded use canary version demonstrate problem", "d": "2/2015"}, {"body": "nt hard demo click change name see error", "d": "2/2015"}, {"body": "duplicate", "d": "2/2015"}, {"body": "error thrown emberroutinglibsystemroutejs basically rendering outlet route parent route calling guard better solution", "d": "2/2015"}, {"body": "adding guard sufficient work tonight nobody gets first also make sure add regression test case", "d": "2/2015"}, {"body": "fix works opening modals yields uncaught typeerror read property routename undefined", "d": "2/2015"}, {"body": "iamjstates submitted another pr takes care disconnection thanks beta tester added scenarios integration tests never break behaviors people", "d": "2/2015"}, {"body": "worries glad help anyway", "d": "2/2015"}, {"body": "sadly due pretty old way semantics assumes paths starting capital letter globals intend phase concept stuck supporting due semver concerns", "d": "2/2015"}, {"body": "rwjblue add milestone nt want forget one", "d": "2/2015"}, {"body": "issue", "d": "2/2015"}, {"body": "work ember", "d": "2/2015"}, {"body": "curious would resolver know look component sub folder thought pods otherwise functioned predictable structures edit would love feature components currently replace itemcontrollers components", "d": "2/2015"}, {"body": "also unable get work still need dasherized name component nested example moving component work maybe combination component pod structure slash ember ember cli edit seems combination component pod structure nested nature structure throws unfound helper error using template", "d": "2/2015"}, {"body": "working fine still need dasherized name", "d": "2/2015"}, {"body": "made demo repo see commit", "d": "2/2015"}, {"body": "workmanw curious would resolver know look component sub folder thought pods otherwise functioned predictable structures concern nathanpalmer kindly explained issue", "d": "2/2015"}, {"body": "lolmaus yea given subdirectory part name makes sense one thing still curious play htmlbars shed handlebars templates following keep working", "d": "2/2015"}, {"body": "yes also htmlbars stop allowing usage mustaches likely always use curlies things like etc", "d": "2/2015"}, {"body": "rwjblue hey thanks quick reply", "d": "2/2015"}, {"body": "rwjblue think misunderstood would like consider valid would like regex dash slash", "d": "2/2015"}, {"body": "timevans interesting idea flagging discussion next core team meeting", "d": "2/2015"}, {"body": "thanks", "d": "2/2015"}, {"body": "like", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "seems like might already partially supported emberjsemberjs document path based componenthelper names wycatshandlebarsjs helper names paths", "d": "2/2015"}, {"body": "nathanpalmer nope yet", "d": "2/2015"}, {"body": "found happens appadvancereadiness called without appdeferreadiness firefox", "d": "2/2015"}, {"body": "may previous issue posted", "d": "2/2015"}, {"body": "quantumking unlikely solve issue without jsbin reproduction", "d": "2/2015"}, {"body": "pushing array reflected page well", "d": "2/2015"}, {"body": "changed worked new demo note without template updated believe cache layer template checking new property since template updated", "d": "2/2015"}, {"body": "know setting whole property new object forces rerender point issue ticket able announce property change without clone object stored property without resetting whole property ps thank using bulkier", "d": "2/2015"}, {"body": "rerender observer nt fired cp value respect strict equality recomputes even though array changed mean time ember nt know marcioj suggestion array correct future use array diffing provide ergonomic solution problem", "d": "2/2015"}, {"body": "hey wrong using proper instead update view would nt redraw right please explain andor reopen", "d": "2/2015"}, {"body": "funny thing sort pushobject foo pushed object appears last rest array update still unsorted resulting view demonstrates state array never posessed example initial state sort get pushobject get view demonstrates mmun say problem due compares references objects unless primitives arrays nt primitives thus would expect update view magic behind", "d": "2/2015"}, {"body": "behaviour also correct two ways collection view update complete rerender partial rerender complete rerender happen content array reference changes detected using regular property observers returning array reference cp preventing kind rerender partial rerender happen whenever called content array detected using array observers desugars etc case call performing partial rerender last position diffing container views replace two behaviours single consolidated update strategy easier reason", "d": "2/2015"}, {"body": "mmun instead property observers detect change applied without", "d": "2/2015"}, {"body": "use depends want mutate original array", "d": "2/2015"}, {"body": "mmun mean impossible notify observers object changed without replacing different object somehow able announce change without replacing object right", "d": "2/2015"}, {"body": "lolmaus", "d": "2/2015"}, {"body": "could try replacing array nt know works nt see value", "d": "2/2015"}, {"body": "thank clarifications mmun last question close behavior counterintuitive contradicts computed properties behave problem recalculating ignores announcements looks like legit problem worth addressing", "d": "2/2015"}, {"body": "working expected nt ignoring announcements announcement made value nt change problem inflexibility observing changes array nothing", "d": "2/2015"}, {"body": "announcement announcement computed properties understand recalculate properly problem inflexibility observing changes array fires every time nt even need jsbin see computed property logs changed array every time click button nothing place far fails notice", "d": "2/2015"}, {"body": "lolmaus computed properties optimization prevent notifying changed return object", "d": "2/2015"}, {"body": "ebryn linked optimization within method think nothing", "d": "2/2015"}, {"body": "apologies misread situation looking seems counterintuitive cc krisselden", "d": "2/2015"}, {"body": "problem bound changes calls value content observers notified see generally time binding synchronizes value already observers receiving end called", "d": "2/2015"}, {"body": "issue nt unique happens across binding example binding value component", "d": "2/2015"}, {"body": "aha suspected related shortcircuiting nt reference right place p", "d": "2/2015"}, {"body": "behavior makes sense reason pushing object works even though reference array add arrayobserver check problem sort mutate array nt notify arrayobservers sort native true nonnative methods like sortby sure good solution", "d": "2/2015"}, {"body": "lolmaus really wanted force without creating new array could call arraywillchangearraydidchange instead property counterparts see", "d": "2/2015"}, {"body": "miguelmadero da real mvp", "d": "2/2015"}, {"body": "sorry put data repo moving", "d": "2/2015"}, {"body": "ran issue seems borked beta tag running works also think update emberdata", "d": "2/2015"}, {"body": "rwjblue setup johanobergman recently trying get ready ember updated beta days ago followed directions render htmlbars removing hbstemplatecompiler everything okay realized morning dropped beta went upgrade removed ran nt clean npm though error happened ended using suggested shortly looked like beta tag nt quite right nt sure nt come back investigate", "d": "2/2015"}, {"body": "ember cli ships ember ember data default errors boots fine going close happily reopen still issue", "d": "2/2015"}, {"body": "likely related", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "line causing context overwritten one think issue component passed nt controller context gets overwritten components context context nt get overwritten", "d": "2/2015"}, {"body": "believe underlying issue also", "d": "2/2015"}, {"body": "also noticed properties set view helper carry eg", "d": "2/2015"}, {"body": "make small reproduction jsbin repo try help track", "d": "2/2015"}, {"body": "try reproduce something small scale really hard reproduce idea comes really strange app works fine immediately breaks launching ember", "d": "2/2015"}, {"body": "meanwhile found error thrown code located emberdebugjs renderbuffer strange part instance override render method view template markdown also seems legit worked fine maybe helps bit", "d": "2/2015"}, {"body": "problem strange thing value thisbuffer supposed contain content generated handlebars removed handlebars updating", "d": "2/2015"}, {"body": "number ways come across issue mentioned earlier need reproduction jsbin repo able help", "d": "2/2015"}, {"body": "traced issue app depends heavily seems helper break app running app think also relates issue fyi using latest embercli", "d": "2/2015"}, {"body": "getting rid react used component renderfunc problem went away everything works fine hurray assume something wrong components thinking bit removing react application chromedevelopertools stopped crashing time inspecting svg rendered component maybe react somehow behaves strange nasty domtrickery confuses emberchromedevelopertools specific circumstances cc", "d": "2/2015"}, {"body": "sergetab maybe related using version see problems using current beta", "d": "2/2015"}, {"body": "fpauser traced case caused component overridden yield function switch context luckily new syntax yield nt need anymore problem solved", "d": "2/2015"}, {"body": "ok problems solved issue closed", "d": "2/2015"}, {"body": "sergetab thanks bumped well also overriding yield components expose keyword knew needed remove upgrade nt done yet nt traced source problem", "d": "2/2015"}, {"body": "caused changes", "d": "2/2015"}, {"body": "caused missing statement working fix", "d": "2/2015"}, {"body": "going consider regression include fix new attributes rules propfirst run browsers process internally set string going keep behavior new bindings however useless consistent attrs handled new world case nt want break semver work patch removes src value", "d": "2/2015"}, {"body": "awesome thanks quick response switch binding syntax account conditionals ensuring properties default works want clarify radar time comes upgrade smile", "d": "2/2015"}, {"body": "switch binding syntax attr prop account nullundefined conditionals ensuring properties default yes plan", "d": "2/2015"}, {"body": "specific scenario best pattern seems using interpolated version value value interpolation occurs join converts nothing attr value raw value blank string", "d": "2/2015"}, {"body": "excellent thank congrats shipping htmlbars", "d": "2/2015"}, {"body": "experiencing similar issue images setting value null see chrome try load resource interpreted image transferred mime type texthtml similar issue value initially null nt try load image update model delete image making value null bound false dom still makes call null url wrong", "d": "2/2015"}, {"body": "typeoneerror attempt reproduction jsbin fact url definitely related fixed fact url getting loaded seems suspect though unrelated anything ticket", "d": "2/2015"}, {"body": "mixonic real reliability jsbin seems forward null url request tough repro guessing chrome thing forwardproofed current code thanks", "d": "2/2015"}, {"body": "quantumking registering handlebars style helpers still supported via compatibility mode added performance implications want use htmlbars helpers without using private api would need allow resolved assuming name would following options globals define modules create module contains export default emberhtmlbarsmakeboundhelper function params hash options env helper code", "d": "2/2015"}, {"body": "also trying make work getting htmlbars solution making unbound helpers", "d": "2/2015"}, {"body": "rwjblue mean htmlbars helpers dasherized name registered via public apis previously helped pointed private makes dasherizing real option see renaming issue right info custom helpers htmlbars somewhat dated", "d": "2/2015"}, {"body": "much logic bindings raw values pass unified past releases looks like used consider raw string passed linkto htmlsafe crazy raw strings bound ones differing safeness seems predictable unified unsafe bring discussion may also point need nested helper would usable bound unbound values", "d": "2/2015"}, {"body": "think helper would really well received flagging good contribution fairly straight ahead would need go regular featureflag process", "d": "2/2015"}, {"body": "canary triple curlies version applied every inline helper produce htmlsafe output far see go", "d": "2/2015"}, {"body": "please provide simple reproduction possible try look", "d": "2/2015"}, {"body": "simplest steps reproduce scratch generate new project using embercli update ember version create simple acceptance test modified slightly output js import ember ember import startapp helpersstartapp var application module acceptance dummy setup function application startapp teardown function emberrun application destroy test visiting function visit andthen function equal currentpath index ember visit run tests", "d": "2/2015"}, {"body": "pgengler rwjblue problem ember coming emberdata try emberdata canary bower new version released info check", "d": "2/2015"}, {"body": "working ember data thanks", "d": "2/2015"}, {"body": "technomage could open issue ember data repo suspect changes ember map class", "d": "2/2015"}, {"body": "bmac mentioned belongs emberdata repo closing favor future issue", "d": "2/2015"}, {"body": "technomage ca nt find issue ember data repo work around", "d": "2/2015"}, {"body": "originally try without using template nothing loaded simply iterating like fetch loaded template update make jsbin reproduce", "d": "2/2015"}, {"body": "arg works jsbin using fixtures instead mock server works fixture data already loaded test repo issue", "d": "2/2015"}, {"body": "hey nichoth nt tried repo replaced fixtures backend mock jsbin still works", "d": "2/2015"}, {"body": "nichoth tried repo works without errors console tried opening link refreshing page e entering child route via direct link please elaborate", "d": "2/2015"}, {"body": "clarify nt show errors get data page whether click link enter url link thanks testing", "d": "2/2015"}, {"body": "nichoth think try", "d": "2/2015"}, {"body": "yes jsbin works like would expect interesting try environment soon", "d": "2/2015"}, {"body": "cc ebryn stefanpenner", "d": "2/2015"}, {"body": "consider prior behavior undefined especially since tests verifying behavior nt view computed properties differently simple properties methods neither behavior", "d": "2/2015"}, {"body": "removal descs meta destroying object would render cp undefined still try cause cp recompute alone nt seem like problem resulting issues maybe like change events fire post deletion", "d": "2/2015"}, {"body": "change events fire objects flagged isdestroying point isdestroying teardown without causing lot churn hoping nothing changed regard", "d": "2/2015"}, {"body": "actually whole reason isdestroying set willdestroy run async", "d": "2/2015"}, {"body": "also nt want recreate meta already destroyed", "d": "2/2015"}, {"body": "nt see change event related behavior would changed still get assert emberset ran isdestroying true", "d": "2/2015"}, {"body": "jscs enabled additional checks default caused new style checking errors caused bug crop broccolijscs regarding escaping error messages jscs fix upstream temp fix emberjsbuild", "d": "2/2015"}, {"body": "thanks filing one fixed", "d": "2/2015"}, {"body": "problem builds grinning", "d": "2/2015"}, {"body": "believe culprit", "d": "2/2015"}, {"body": "behavior", "d": "2/2015"}, {"body": "jsbin without ember exhibits behavior javascript var elem documentcreateelement div elemsetattribute somecamelthing foo log elemouterhtml gt", "d": "2/2015"}, {"body": "afaict injecting service routes controllers views injecting routes components nowhere injecting service nt access able something like following hook new services stuff able easily without injections currently behind feature flag canary beta looks coming soon eg access service controller iirc work services", "d": "2/2015"}, {"body": "tried injecting services like routes components gave error saying ca nt supposed inject every single service explicitly error inject service register different type perform typeinjection actually using canary try new style dependency injection thanks", "d": "2/2015"}, {"body": "hmm sure injecting services services currently going directly via container opposed application frowned upon deprecated think eg following app javascript import ember ember export default name current initialize function container var current emberobjectcreate new style stuff better though probably preferred option going forwards", "d": "2/2015"}, {"body": "error inject service register different type perform typeinjection error message terrible nt even solution", "d": "2/2015"}, {"body": "following work correctly please provide example jsinbembercli app based repo gladly take look", "d": "2/2015"}, {"body": "stefanpenner thanks forces every service needs right", "d": "2/2015"}, {"body": "mgenev yes inject something onto constructor injections syntax lazy thus supports cycles", "d": "2/2015"}, {"body": "updating error", "d": "2/2015"}, {"body": "stefanpenner explicitly work thanks opening ticket clean messaging save people time", "d": "2/2015"}, {"body": "mgenev ya suspect docs area needed especially comes best practices", "d": "2/2015"}, {"body": "resources nt match urls routes ember generates routes resources order access resource posts url ember would generate child route postsindex path something like post path applicable index piotrpalek providing index route preventing ember generate default index route route equivalent route index path index ember match like post path applicable index index couple experiments test saying navigate index see templates rendered define path index like route index path opinion ember log error warning attempt override path nested index route value different", "d": "2/2015"}, {"body": "ajadex makes sense thanks explanation", "d": "2/2015"}, {"body": "believe related", "d": "2/2015"}, {"body": "fixed", "d": "2/2015"}, {"body": "good news works properly latest beta builds", "d": "2/2015"}, {"body": "yoranbrondsema nearly positive bug please open issues burnt", "d": "2/2015"}, {"body": "thanks posted issue", "d": "2/2015"}, {"body": "aside ideally helper detecting route active could used subexpression would nt nest anymore something like might easier implement helper fix linkto regression amp make nested linkto thing past", "d": "2/2015"}, {"body": "use following technique usually", "d": "2/2015"}, {"body": "brettburley expected behavior additionally actually strongly considering removing ability reopen first instance created extremely dubious error prone functionality source many embers performance issues", "d": "2/2015"}, {"body": "lukemelia take direction chat last nyc meetup inline thoughts", "d": "2/2015"}, {"body": "disconnect description part vs function prototype extension shown example macro would look like think approach better adding additional method implement addon would suggest first others try realworld apps vet api usefulness proves helpful good number people consider addition ember core", "d": "2/2015"}, {"body": "agree lukemelia extending function prototype somewhat aggressive computed property macro might good idea seems convenient want make pr", "d": "2/2015"}, {"body": "excellent agreed thinking would defined computed macro called fnprototype see confusion good call exploring usefulness moving core guess jumping gun cibernox try get pr embercpm beforeduring emberconf thanks guys", "d": "2/2015"}, {"body": "provide demonstration issue maybe jsbin example app", "d": "2/2015"}, {"body": "nt way around eg", "d": "2/2015"}, {"body": "woodzu good point thought looking docs looks like following ways using supported stefanpenner get jsbin soon might days big backlog work go", "d": "2/2015"}, {"body": "sure related definitely kind weird regression related helper canary issue experiencing different op mine random completely arbitrary links cause classes updated upon transition like click link transitions successfully old link remains highlighted try either bisect create jsbin shows issue anyone experienced something similar", "d": "2/2015"}, {"body": "seeing well app recently upgraded specifically link whose text bound input field typing characters field causes browser freeze thrown together quick jsbin demonstrate issue edited updated jsbin url", "d": "2/2015"}, {"body": "downloaded latest starter kit looks like happens well seems problem inline form block form works fine", "d": "2/2015"}, {"body": "burned us bad deploy nt see pushed make jsbins show regression", "d": "2/2015"}, {"body": "fyi info app", "d": "2/2015"}, {"body": "burned us bad deploy nt see pushed make jsbins show regression thanks", "d": "2/2015"}, {"body": "stubled upon confirm omghax mentioned happens inline form quick jsbin edit fixed link press links times see happening looking timeline panel seen link clicked time spent jquery events increases heap size might step try update bin canary later investigate bit cc stefanpenner thanks usual", "d": "2/2015"}, {"body": "sounds related effectively duplicate believe sure current status mixonic", "d": "2/2015"}, {"body": "nt see evidence pr problem fixed questionable code still although discussion nt seem resolved also nt see tests covering scenario yes dupe", "d": "2/2015"}, {"body": "right sorry nt mean suggest fixed already point problem referenced", "d": "2/2015"}, {"body": "closing favor tracking", "d": "2/2015"}, {"body": "jdmarshall please provide background reopen done bunch work namespaced attrs recently", "d": "2/2015"}, {"body": "version code", "d": "2/2015"}, {"body": "opened pull request", "d": "2/2015"}, {"body": "closed", "d": "2/2015"}, {"body": "provided model object model hook called passed object used instead object passing nt match type object previously used model example model order collection lines pass collection lines order link", "d": "2/2015"}, {"body": "sure could sets dynamic part url undefined url becomes see besides scale great amount order lines", "d": "2/2015"}, {"body": "stackoverflow great place get help strategy tips problems like seeing intended behavior nt think consider bug", "d": "2/2015"}, {"body": "another flavor defeatureify recently fixed", "d": "2/2015"}, {"body": "rwjblue awesome lets close canary build updated", "d": "2/2015"}, {"body": "yep", "d": "2/2015"}, {"body": "canary still contains", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "confirm", "d": "2/2015"}, {"body": "updates fix issue travis build used cached package instead defeatureify contains fixes cleared cache retriggered last travis build", "d": "2/2015"}, {"body": "build updated contains debug statements", "d": "2/2015"}, {"body": "leave open stefanpenner ebryn confirm", "d": "2/2015"}, {"body": "lgtm thanks rwjblue", "d": "2/2015"}, {"body": "issue loaded objects sorted displayed using components changed route error sure solved case remember good", "d": "2/2015"}, {"body": "going redoing everywhere using certainly potential way forward particular case", "d": "2/2015"}, {"body": "arraycontroller deprecated anyway maybe better refactor application later", "d": "2/2015"}, {"body": "plan like make sure actually problem people sake superfamiliar functions mentioned stack trace looks pretty generic reduce computed", "d": "2/2015"}, {"body": "kuzirashi seeinghearing arraycontroller deprecated fought toothandnail past interesting find anything emberjscom otherwise", "d": "2/2015"}, {"body": "andrewbranch gathered resources created gist", "d": "2/2015"}, {"body": "kimroen get isolated example try canary", "d": "2/2015"}, {"body": "stefanpenner like said ca nt reliably reproduce bit tricky tell able isolate problem certainly try canary wo nt really able tell works", "d": "2/2015"}, {"body": "kimroen sure time zone try carve time screen share", "d": "2/2015"}, {"body": "stefanpenner move mountains make work ping irc something", "d": "2/2015"}, {"body": "kimroen stefanpenner gmailcom", "d": "2/2015"}, {"body": "kuzirashi thanks", "d": "2/2015"}, {"body": "stefanpenner fairly certain async property changes come setproperties array proxies reduce computed duplicate issues", "d": "2/2015"}, {"body": "using reduce computed functions using want careful change one item time", "d": "2/2015"}, {"body": "stefanpenner fairly certain async property changes come setproperties array proxies reduce computed duplicate issues ya also suspicion get diffing pluginize rc ar", "d": "2/2015"}, {"body": "coming across error well think situation pretty similar kimroen using ember stack trace", "d": "2/2015"}, {"body": "elidupuis smells like rcac sa im pairing kimroen weekend hopefully confirm situation", "d": "2/2015"}, {"body": "stefanpenner awesome thanks glad hitting error wink", "d": "2/2015"}, {"body": "reference bug referred might", "d": "2/2015"}, {"body": "kind related", "d": "2/2015"}, {"body": "wo nt possible js adds annotations also wo nt work said sure want", "d": "2/2015"}, {"body": "comment incorrect result available example notice", "d": "2/2015"}, {"body": "oh god ca nt imagine glad clarification case misunderstanding presentation error", "d": "2/2015"}, {"body": "watched presentation sure said", "d": "2/2015"}, {"body": "fault nt pay enough attention ebryn saying blinded fear stupid syntax sorry buzz", "d": "2/2015"}, {"body": "oops typo part sorry monday february jan buscht\u00f6ns notifications githubcom wrote fault nt pay enough attention ebryn saying blinded fear stupid syntax sorry buzz reply email directly view github", "d": "2/2015"}, {"body": "repro error jsbin base one usually use demoing new issues canary", "d": "2/2015"}, {"body": "downloaded canary error see reproduce", "d": "2/2015"}, {"body": "took another shot replication canary stupid simple helper seems work properly definitely need help reproducing stupid helper", "d": "2/2015"}, {"body": "error coming emberinflector relevant commit looks like btecu library using emberinflector needs updated", "d": "2/2015"}, {"body": "seems ember data set", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "worth changing latest canary yesterday fixed issue", "d": "2/2015"}, {"body": "yes think happens serialization using ember data specify canary version bower", "d": "2/2015"}, {"body": "dependencies gotcha make sure use sha canary branch actual ember repository", "d": "2/2015"}, {"body": "mitchlloyd think understand underlying problem yet able reproduce jsbin one using canary emberdata ember use fine", "d": "2/2015"}, {"body": "narrowed commit possible something going could result undefined", "d": "2/2015"}, {"body": "jsbin uses without issue latest canary builds emberinflector using emberhtmlbarshelper created", "d": "2/2015"}, {"body": "starting new embercli project upgrading latest canary ember latest ember data beta demonstrates problem load index page see errors seeing", "d": "2/2015"}, {"body": "mitchlloyd thanks repro thats exactly needed working", "d": "2/2015"}, {"body": "believe due root cause", "d": "2/2015"}, {"body": "thanks rwjblue mitchlloyd", "d": "2/2015"}, {"body": "fixed please update latest build mitchlloyd updated demo repo submitted pr", "d": "2/2015"}, {"body": "still getting error latest ember beta works canary though", "d": "2/2015"}, {"body": "also getting behavior johanobergman", "d": "2/2015"}, {"body": "johanobergman yall open new issue repro cause particular issue definitely fixed perhaps issues tracked", "d": "2/2015"}, {"body": "opened new issue", "d": "2/2015"}, {"body": "sure", "d": "2/2015"}, {"body": "closing believe solution issue caused older versions pretender sync", "d": "2/2015"}, {"body": "yes happen gets removed core", "d": "2/2015"}, {"body": "hey looking issue lately believe found cause throw error willtransition gets caught transition created error set along promisereject error point error thrown error expected problem transition taken transitions promise gets set javascript transitionthen null function error error errorname return assert recognize unrecognizedurlerrors unfortunately started looking ember know enough general architecture make call handled", "d": "2/2015"}, {"body": "blessenm behavior perfect input value updated ie moment key got released one work", "d": "2/2015"}, {"body": "matrixz like lolmaus mentioned using nt seem trigger action", "d": "2/2015"}, {"body": "seems working properly", "d": "2/2015"}, {"body": "rwjblue wont syntax work took example input helper guides replaced event name", "d": "2/2015"}, {"body": "would nt think would made work way specifying action want triggered along eventaction seems much straightforward line would write components consider versus later example disjointed fails allow using multiple actions trigger different events wanted something like confusing upon reading api docs nt read part time unsure state rewriterestructure make clearer", "d": "2/2015"}, {"body": "rwjblue makes sense guess guides may need updated fyi picked syntax mentioned", "d": "2/2015"}, {"body": "rwjblue bug parent view destroys views connected outlet rendering errors trying reattach destroyed views", "d": "2/2015"}, {"body": "hi updating app found issue maybe another one rerender application view works fine rerender throw error canary rerender works fine simple jsbin demonstrate reproduce issue play set script tags", "d": "2/2015"}, {"body": "closing works beta shortly canary become", "d": "2/2015"}, {"body": "alright running issue tangentially related one basically case sensitivity respected using view issue svg property snippet javascript export default emberviewextend tagname svg attributebindings myviewbox viewbox myviewbox rendered page property inserted thus respected browser note currently using htmlbars issue reopened brought new issue update confirmed issue also exists htmlbars although sure issue htmlbars", "d": "2/2015"}, {"body": "kellysutton tried emberjs beta", "d": "2/2015"}, {"body": "yet give try report back feb pm matthew beale notifications githubcom wrote kellysutton tried emberjs beta reply email directly view github", "d": "2/2015"}, {"body": "believe working properly canary soon", "d": "2/2015"}, {"body": "closing favor", "d": "2/2015"}, {"body": "one thing though leaks observers removed destroy really would think since observers object would get cleaned destroy could probably come something remove final observer destroy anybody give definite answer", "d": "2/2015"}, {"body": "ksnyde rwjblue said use compiler paired particular release ember identified pattern canary also work verified embertemplatecompilerjs url pattern embertemplatecompilerjs case", "d": "2/2015"}, {"body": "himansudesai believe unless thick compiler version comes version ember picked bower nt scenario compiler ember version become sync case tracked problem use plugin also including quite dusty components created emberclibootstrapsassy plugin removes unwanted dependency well", "d": "2/2015"}, {"body": "ksnyde right case using ember straight trouble locating correctly paired version embertemplatecompiler since getting identical error figured mismatched pair well glad tracked issue", "d": "2/2015"}, {"body": "could underlying cause keep mind arguments provided transitionto linkto correspond change query param values change route hierarchy considered full transition means hooks like model setupcontroller wo nt fire default rather controller properties updated new query param values url query params works full transition jesenko example theoretically controller properties updated controller exist yet", "d": "2/2015"}, {"body": "dremora interesting state things seeing recently well issue little similar happening ie log app reload app homepage browser session get error mentioned happening run happening built app wanted confirm seeing behavior well", "d": "2/2015"}, {"body": "issue though nt believe related firefox believe issue unknown motivated third line code pasted quantumking managed figure use jsbin reproducible example based mainly emberjs guide example note error arises setting resolved change sure actually bug maybe useful error message could displayed", "d": "2/2015"}, {"body": "ianhoolihan seeing error without routes", "d": "2/2015"}, {"body": "found reason bug appeared app due improperly upgraded indexhtml included page twice markup slightly broken removing dupes fixing markup mitigated issue", "d": "2/2015"}, {"body": "reiterate unlikely able fix issue without jsbin reproduction", "d": "2/2015"}, {"body": "given happened one particular project convinced bug longer case seemed trying run previously called removing adding resolved issue case oddly ca nt seem recreate set circumstances jsbin present leaning toward bug much user error", "d": "2/2015"}, {"body": "going go ahead close gladly reopen failing jsbin", "d": "2/2015"}, {"body": "since eager url way closing open new ticket issue urlhistory state change entering error state back button works", "d": "2/2015"}, {"body": "appears fixed ember closing", "d": "2/2015"}, {"body": "reference question stackoverflow related discussion protractor tracker", "d": "2/2015"}, {"body": "encountered issue well feel like observable resorted ca nt observe anything either", "d": "2/2015"}, {"body": "iterate current want observe size", "d": "2/2015"}, {"body": "mean iterate feb pm stefan penner notifications githubcom wrote iterate current want observe size reply email directly view github email message attachments may contain confidential legally privileged information intended recipient otherwise authorized receive message use copy distribute disclose take action based information contained email attachments received message material error please advise sender immediately reply email delete message thank behalf applied geographics inc appgeo", "d": "2/2015"}, {"body": "ca nt iterate today", "d": "2/2015"}, {"body": "ok nt solve problem know iterate keep another property set every time add remove map feb pm stefan penner notifications githubcom wrote ca nt iterate today reply email directly view github email message attachments may contain confidential legally privileged information intended recipient otherwise authorized receive message use copy distribute disclose take action based information contained email attachments received message material error please advise sender immediately reply email delete message thank behalf applied geographics inc appgeo", "d": "2/2015"}, {"body": "extend class create counter variable wil make easier upgrade bug fixed", "d": "2/2015"}, {"body": "fivetanley observe pojos call emberset obj foo value modifying", "d": "2/2015"}, {"body": "krisselden understand comment correctly suggestions pull request fix issue add tests", "d": "2/2015"}, {"body": "unsure want observable", "d": "2/2015"}, {"body": "opinion logical observe collection enables execute function composition collection changes maybe understand comment full extent would alternative", "d": "2/2015"}, {"body": "enables execute function composition collection changes observing insufficient mutation map set nt include also results change event map orderedset meant fast partial polyfills swap native implementations sufficient number vendors support additionally currently reevaluating current array change detection strategies approach extremely likely change interim observation plans remain hold", "d": "2/2015"}, {"body": "stefanpenner thank reply clear remove pull request leave bug report open", "d": "2/2015"}, {"body": "seems stll problem ember beta version workaround possible disable feature", "d": "2/2015"}, {"body": "dertoti fix coming shortly since feature apply css class name disable feature supplying css", "d": "2/2015"}, {"body": "thanks rwjblue", "d": "2/2015"}, {"body": "additionally besides deprecation guide please update guide page using controllers asap deprecated currently taught best practice guide guide also nt eschew proxying access rather repeatedly exactly bad practice please change guide", "d": "2/2015"}, {"body": "sphtkr thanks pointing would mind making pr fixing guide", "d": "2/2015"}, {"body": "willing little unsure exactly best practice especially case impending deprecation get instead simply replaced everything else remain generally appreciate spirit behind categorical response hey nt gripe contribute think may something core team address previously proxying behavior selling point eg linked guide advantage architecture easy get started accessing properties model via object controller however need transform model property template welldefined place without adding viewspecific concerns model tune new architecture direction guiding change sure could adequately rewrite message change technical change exactly sure new messagenarrative around use controller layer architecture think many us nt deprecation feels like came left field nt misunderstand thrilled changes see happening ember know every change breaks someone workflow particular one seems like pretty significant shift architecture direction hidden technical change point arguably whole guide one really longer even makes sense", "d": "2/2015"}, {"body": "concur sphtkr lost justification behind change would appreciate explanation better understand", "d": "2/2015"}, {"body": "message change technical change exactly sure new messagenarrative around use controller layer architecture think many us nt objectcontroller deprecation feels like came left field sphtkr correct lot messaging items touch object controller changes release yet need update docs add deprecation guide definitely make release effort revamp guides docs lead trek amongst others check sounds like documentation updates continues go website repo otherwise noted justification change proxies confusing new developers experience ember users us probably comfortable know template like means name probably comes model know needs referenced explicitly actually proxy new developers disaster tricky concept learn throws hurdle try anything complicated display data even experienced developers bit proxy nt expect one large app proxies use mean dynamic behavior optimized well static class shape reasons generally align ember component patterns solutions none use proxies removing object array proxies", "d": "2/2015"}, {"body": "think done via ast plugin basically would walk templates actually rewrite specified would work", "d": "2/2015"}, {"body": "seems working properly", "d": "2/2015"}, {"body": "right know way google undertand app", "d": "2/2015"}, {"body": "google crawler executes javascript google crawl ember apps search engines ca nt", "d": "2/2015"}, {"body": "taras practice little success google crawler ember app seems like may work simpler ones admit nt spent much time digging", "d": "2/2015"}, {"body": "prerenderio worked magic also available open source package sat feb nathan palmer notifications githubcom wrote taras practice little success google crawler ember app seems like may work simpler ones admit nt spent much time digging reply email directly view github", "d": "2/2015"}, {"body": "landed believe next chopping block", "d": "2/2015"}, {"body": "rwjblue listened podcast last week talked htmlbars readiness looked latest believed completed requirement rendering htmlbars mentioned podcast broccoli grunt support htmlbars migration want bring support write module gulphtmlbars could take look compatibility issue included changelog thanks", "d": "2/2015"}, {"body": "meantime issues documentation proper way adding child views", "d": "2/2015"}, {"body": "issue still exists released though particular case polygon element", "d": "2/2015"}, {"body": "superlou right support must regressed polished implementation attrnodes renderer landed refactor attributebindings beta needs work graduating release part porting classnamebindings new system expecting introduce classnamebindings svg elements", "d": "2/2015"}, {"body": "original jsbin updated apply class element update changed updated jsbin", "d": "2/2015"}, {"body": "hey extracted rpc addon changes fix various issues anyone interested", "d": "2/2015"}, {"body": "impression htmlbars supposed get rid dataattr requirement ps new emberjs forgive mislead lol", "d": "2/2015"}, {"body": "joshuairl feature dependent htmlbars nt introduced beta", "d": "2/2015"}, {"body": "finally fixed canary shortly thank patience mixonic hard work", "d": "2/2015"}, {"body": "mixonic rwjblue thanks hard work", "d": "2/2015"}, {"body": "upgrading application version time ran well got bizarre thing would sometimes work sometimes would nt example custom select element view required disabled readonly bound attributes would pass three true view dom element would get disabled required readonly attribute thanks hard work issue", "d": "2/2015"}, {"body": "rwjblue deprecating ember start using instead reasons find helper really useful real shame ca nt use first property dynamic property", "d": "2/2015"}, {"body": "petermumford suitable replacement", "d": "2/2015"}, {"body": "petermumford controllers going away naturally would go away guessing recently merged helper would replacement", "d": "2/2015"}, {"body": "jbrown jasonmit thanks pointing really like way swap components form dynamic property useful need revise currently got using controller data biggie", "d": "2/2015"}, {"body": "jbrown well components side effects use route inside template render also important controller isolated example access store", "d": "2/2015"}, {"body": "krutius sure mean components side effects also nt understand comment controllers isolated see also future direction", "d": "2/2015"}, {"body": "isenbeqiri problem please elaborate bit problem happens post solution unloadall type hasmany side feels like dirty solution", "d": "2/2015"}, {"body": "upstream issue addressed fix included chrome stable april", "d": "2/2015"}, {"body": "thanks lot mixonic got notifications chromium board", "d": "2/2015"}, {"body": "oneeman going implement plan described believe", "d": "2/2015"}, {"body": "also bug think closely related one stack trace sure even start debugging start new issue", "d": "2/2015"}, {"body": "kimroen using ember newer please file new issue otherwise try upgrading first", "d": "2/2015"}, {"body": "little confused one closed ran similar issue recently except mine still looking optimal solution mziwisky valid point everything reading", "d": "2/2015"}, {"body": "mixonic thanks information really useful makes sense moving direction examples helped still nt able solve problem two different use cases external libraries static elements generated emberhtmlbars external library needs consume eg displaying items autocomplete live elements external library adds parts dom need raise actions corresponding context bindings work working fine ember yes behind know trying catch example using worked great simple cases since nt care updates simply get html jsbin nt change library work markup instead strings however need use nested components ca nt find jsbin use instead calling directly jsbin seems render templates never calls didinsertelement jsbin looking deeper createelement calls rendererrendertree wo nt call didinsertelement essential nested components work second scenario seems working fine without nested components working able verify instances work also need tweakhack external libraries certainly doable go path anything changed since oct", "d": "2/2015"}, {"body": "seems hacky actually better makes sense render nt call didinsertelement simply call manually see jsbin element inserted dom included jsbin something equivalent events like willdestroy another jsbin tests bindings actions simple change use element instead string need look real world scenarios", "d": "2/2015"}, {"body": "oh found another problem approach even though boundviews work nt dig branch thread since went beyond original context already", "d": "2/2015"}, {"body": "also ran got around using", "d": "2/2015"}, {"body": "mixonic sure follow would deprecated use extensively addons especially ability modify class initializing hugely useful could understand throwing warning instance already created assume mixins applied via nt impact existing instances", "d": "2/2015"}, {"body": "personally wary using addon change ember base classes quickly open library conflicts libraries instead suggest exporting extended version ember class nt want nit pick specifics though class model maintains lot complexity allow reopening class already instantiated improve performance ember whole nt", "d": "2/2015"}, {"body": "mixonic something similar method extending ember addon base classes extending ember namespace path like app automatically use example instead reopening extending app view export new view called something like extend app views example js viewsbasejs import ember ember export default emberviewextend stuff would done reopen js viewsindexjs import ember ember import baseview appnameviewsbase export default baseviewextend", "d": "2/2015"}, {"body": "sirdunxalot exactly better yet functionality exported mixin instead base class way merge behaviors several mixins several addons", "d": "2/2015"}, {"body": "mixonic use feature monitor every time recommendation without", "d": "2/2015"}, {"body": "orisomething need componentsviews", "d": "2/2015"}, {"body": "asgaroth use inform parent needs resize every edge case use scrollable good case far search resizable create child class would mean use", "d": "2/2015"}, {"body": "mixonic whilst agree cases reopen equally maintainable mixins class extensions valid use case ab tests ab testing framework test mixin methodsproperties change class original functionality use reopen something like js export default embercontrollerextend checkfortest function thisget testid thisreopen thisget container lookup somemixinwithtestid init would fall category running original class initiated nt see emberish alternative nt allow dynamic module names though hackable thus one would argue exist form maybe another way nt mean get topic believe root issue method think discussion acceptable maybe wrong either way thanks following", "d": "2/2015"}, {"body": "trek looking public documentation feature nt see example hitting enter without additional blur even test cases show additional step making think requires keycodes reason like help clarify documentation tests better help grow communityetc example projectjsbinsomething shows simply hit enter key inside ember testing", "d": "2/2015"}, {"body": "basically point something like ember nt actually fire event expect", "d": "2/2015"}, {"body": "quick update looks like keydown missing sauce", "d": "2/2015"}, {"body": "clarify might confuse future namespace context refers global namespaces refer route namespaces case routes want support deprecate please someone correct wrong", "d": "2/2015"}, {"body": "case routes want support thisresource foobar deprecate thisresource foobar please someone correct wrong correct", "d": "2/2015"}, {"body": "many issues closed favor one issue lacks specificity says make emberselect better plan exactly done looks like nobody solves former emberselect issues tickets closed nobody works new emberselect details", "d": "2/2015"}, {"body": "rwjblue tell exactly wrong old one mainly performance like performance drains component", "d": "2/2015"}, {"body": "fwiw wrap elements elements components select objects instead strings embercli addon", "d": "2/2015"}, {"body": "knownasilya asking curiosity want see roadmap list closed issue forgotten", "d": "2/2015"}, {"body": "lolmaus specifically nt guaranteeing new version attempt much old one going start scratch likely fewer features less complexity", "d": "2/2015"}, {"body": "good day block params help case need component ref eg ref handles action thanks", "d": "2/2015"}, {"body": "make layout following", "d": "2/2015"}, {"body": "thinking taking crack issue link edit rsvp part documentation site broken", "d": "2/2015"}, {"body": "happycollision pretty sure rwjblue person coordinate sounds like specific plan mind", "d": "2/2015"}, {"body": "happycollision link documentation", "d": "2/2015"}, {"body": "machty services thoughts", "d": "2/2015"}, {"body": "rwjblue documentation see differences standard handlebars ember version getting error finding reason frustrating since according handlebars docs work sure anymore features use", "d": "2/2015"}, {"body": "reopening documentation issue instead bug definitely seems like confusion behavior try clear", "d": "2/2015"}, {"body": "object keys stable modern browsers diffing lands lbe able support fairly simply presently difficult nt observe insertiondeletion keys objects", "d": "2/2015"}, {"body": "changing value input cause blur element worked martinelvar", "d": "2/2015"}, {"body": "pointers nt seem work hashes used ember route location using seems stripping away hashes actually transitioning route", "d": "2/2015"}, {"body": "duizendnegen looks like prs merged supposed resolve issue open new issue failing jsbin", "d": "2/2015"}, {"body": "waiting prs merged stable ember cli feel free close open another issue needed", "d": "2/2015"}, {"body": "deprecated", "d": "2/2015"}, {"body": "status changed still manually enable injections onto models", "d": "2/2015"}, {"body": "status changed still manually enable injections onto models still manual unsure emberdata fixed yet p", "d": "2/2015"}, {"body": "came across issue thinking building component pass return value action promiseproxy case yield component template think done without feature described issue maybe something think idea component xform actionsave targetmymodel onsubmit promise result promiseispending promiseisrejected error errormessage etc xform", "d": "2/2015"}, {"body": "given idea thinking feel actions fundamentally fire forget return value action needs send return value action handler either send action back original sender original sender pass promise argument action resolve future point time prefer latter supports sync async uniformly allows original senders context preserved handling return value also allows aggregation action results even completion action sends multiple recipients need occur eg sending collapse action tabs accordion wrapped mechanism could wrapped sendpromiseaction api palatble name", "d": "2/2015"}, {"body": "stuff nt really line direction ember headed someone wants pr great going close since nt think likely spend time", "d": "2/2015"}, {"body": "think might want add information run loop ember inspector help see going think teddyzeenny", "d": "2/2015"}, {"body": "seem like trips lot people fwiw solution edit though instead using injection service might perfect config thought", "d": "2/2015"}, {"body": "ebryn think run loop tab embertesting tab inspector works tests would really helpful", "d": "2/2015"}, {"body": "issue rendering using render helper seemed thati could use controllerfor access controller instantiated render helper changed using extra route instead render helper could access instance guess would nt work eery situation though route kinda made sense app anyways", "d": "2/2015"}, {"body": "yeah still broken foundation foundation even switched using nthoftype messing nt fix grid layout problems anyone luck getting work ember", "d": "2/2015"}, {"body": "know old post thank wycats needed", "d": "2/2015"}, {"body": "htmlbars following convention reactjs capable hot swapping template perhaps good time consider reopening issue", "d": "2/2015"}, {"body": "hi property binding via suffix displayed deprecations tab ember inspector status deprecation", "d": "2/2015"}, {"title": "data incorrect work", "body": "use jquery chrome ff div id mydiv mydiv data zz mydiv data zz return div return empty set mydiv attr datazz mydiv attr datazz return div return div mydiv data zz div return empty set", "num": "2112", "d": "2/2015"}, {"title": "make jquery works polymer", "body": "jquery query document dom default visit shadowdom use jquery amp polymer semanticui library", "num": "2111", "d": "2/2015"}, {"title": "css converts percents pixels", "body": "jq code sets css property pixels eg works correct add percent works correct versions", "num": "2110", "d": "2/2015"}, {"title": "performance dimension methods significantly degraded elements style display none", "body": "calling dimension methd namely method page element style display none operation method significantly slower calls elements without property able reproduce behaviour firefox linux mint firefox mac osx yosemite chrome mac osx yosemite using jquery provided demonstration test performs calls dimension accessor visible hidden div printing timing information console sample output machine visible width milliseconds hidden width milliseconds visible inner width milliseconds hidden inner width milliseconds visible outer width milliseconds hidden outer width milliseconds visible height milliseconds hidden height milliseconds visible inner height milliseconds hidden inner height milliseconds visible outer height milliseconds hidden outer height milliseconds indicate dimension calls hidden elements take longer visible elements led discover issue attempting use selectable interaction jqueryui library able select rows table selection ordinarily responsive also offer filtering table implemented hiding rows setting style display none soon filtering applied selection became unresponsive managed identify slowdown caused refresh function defined line time writing managed improve responsiveness modifying function following thisrefresh function selectees thatoptionsfilter thatelement selecteesaddclass uiselectee selecteeseach function var pos thisoffset visible thiscss display none data selectableitem element element left posleft top postop right posleft visible thisouterwidth bottom postop visible thisouterheight startselected false selected thishasclass uiselected selecting thishasclass uiselecting unselecting thishasclass uiunselecting bypassing outerwidth outerheight calls hidden elements responsiveness par unfiltered version unable find existing issue matched problem however find stack overflow post encountered problem interacting different part jqueryui api posted three years ago post also contains link featured benchmark particular problem demo provided albeit older version jquery", "num": "2108", "d": "2/2015"}, {"title": "add new functionality", "body": "felt many time toggle boolean values wrote separate function time code given could called function name toggleboolean state could add new functionality hope help us function toggleboolean state var booleanformat true false yes false true yes var obj jsonparse booleanformat return obj statetolowercase", "num": "2107", "d": "2/2015"}, {"title": "unexpected token eof", "body": "trying compress assets rails rake task error file unexpected token eof undefined line col pos", "num": "2106", "d": "2/2015"}, {"title": "map vs", "body": "js map foreach similar signatures jquery map different leads tons stupid mistakes understand kinda breaking change going release jquery good time breaking changes", "num": "2105", "d": "2/2015"}, {"title": "possible browser compatibility regressions", "body": "due impending purging testswarm data migrate app new server data possible regressions found last days let failures rerun filter false negatives left jquery started failing test failures effects module modules passed started failing test failure dimensions module modules passed jquery weekly android started failing traversing module timed repeatedly modules passed", "num": "2104", "d": "2/2015"}, {"title": "add promise constructor function", "body": "would like suggest adding constructor function jquery works similar spec return function exists create jquery deferred combined suggestion offer decent compatibility layer native promises least terms use", "num": "2103", "d": "2/2015"}, {"title": "add catch promise objects", "body": "relates far simpler request given method matches promise spec extra progress parameter would nice compatible method per dmethvin could call return passthrough", "num": "2102", "d": "2/2015"}, {"title": "restore init", "body": "see need put back despised live code commented know smilecat", "num": "2101", "d": "2/2015"}, {"title": "check documentreadystate interactive document ready", "body": "comment mentioned probably give incorrect interactive readystate affects interactive accepted browsers using requirejs load scripts exactly jquery many scripts loaded domcontentloaded fully loaded scripts depending document ready wait load event triggered currently use get around problem another implementation domready accept interactive readystate browsers excluding ie reason jquery nt", "num": "2100", "d": "2/2015"}, {"title": "datepicker working safari", "body": "date picker working chrome safari fiddle", "num": "2099", "d": "2/2015"}, {"title": "submit event triggered using enter keypress silents first trigger event", "body": "reproduce focus text input press enter keyboard key submit input issue first registered event data describing jquery event eg custom data namespace demo markup script required reproduce issue html js function addressinput blur function e data consolelog ok data screenshot event log", "num": "2095", "d": "2/2015"}, {"title": "event handlers nt work like native ones", "body": "event handler registered addeventlistener instantly removed removeeventlistener nt work like example", "num": "2094", "d": "2/2015"}, {"title": "jquery ui dialog resize problem", "body": "lot resizes internal dialog space decreases pixel iteration bootstrap included process faster", "num": "2093", "d": "2/2015"}, {"title": "suggestions add new serialization html json", "body": "hello would nice use json formation data pass use found lots functions extended jquery however none satisfies lacks many functions searched many times net results even use serializearray nt meet needs hope function either serialize form none form html mean tag input types serialized json radio button tags name serialize choosen one checkbox button tags name return array choosen multiple values even none choosen make empty array left table tag offer customers one boolean value indicates whether need serialize row json object serialize whole table input values usual notice point table tag familiar tags well", "num": "2091", "d": "2/2015"}, {"title": "change jqueryeach jquery signatures", "body": "since use second argument one place always documented internal might good time remove since decrease size improve performance", "num": "2090", "d": "2/2015"}, {"title": "unable subscribe dom node removing using api", "body": "sometimes necessary know element removed jquery api remove empty html use cases delete data associated element created another module third party library custom jquery plugin unable frames current jquery api one possibly workarounds override cleandata method jquery ui cleandata function orig return function elems var events elem elem elems null try cleandata workaround looks dirty hack reasons implement public api scenario box view necessary create remove event case", "num": "2088", "d": "2/2015"}, {"title": "css fails elements null ownerdocumentdefaultview", "body": "doc new domparser parsefromstring texthtml docdefaultview null doc find div css uncaught typeerror read property getcomputedstyle null", "num": "2086", "d": "2/2015"}, {"title": "remove deprecated ajax methods", "body": "deprecated since time remove", "num": "2084", "d": "2/2015"}, {"title": "deploy project local environment", "body": "hi deploy project local environment", "num": "2083", "d": "2/2015"}, {"title": "empty remove clear jquery data focusout", "body": "jquery version encountered version persists browser chrome operating system windows professional sp jsfiddle issue give element jquery data focus something causes element removed dom via empty remove empty remove deletes jquery data element empty remove triggers focusout event element focusout handlers check element jquery data sorely disappointed data longer would expect jquery data would still available element actually removed dom current workaround issue blur focused element calling empty remove", "num": "2082", "d": "2/2015"}, {"title": "ajax settingsdata undefined beforesend typeget", "body": "would like adjustmodify valuesdata beeing sent ajax request beforesend callback atm seems possible post request defined get typed request intended behaviour see", "num": "2081", "d": "2/2015"}, {"title": "setting transitionduration set requires instead", "body": "following question stackoverflow short remove transitionduration element already transitionduration applied one would call jquery requires rare cases completely removing style attribute example provides stackoverflow javascript var duration dot click function transitionduration set click works jquery transitionduration set click bug jquery transitionduration set click fix jquery", "num": "2080", "d": "2/2015"}, {"title": "native abort abort jqxhr", "body": "native xmlhttprequest aborted eg calling abort suspending computer unloading page jqxhr fire callbacks expected fire error complete callbacks test code reproduce test code jsfiddle note bug present master versions", "num": "2079", "d": "2/2015"}, {"title": "setup integration testing infrastructure", "body": "allow us use webdriver times prefer test", "num": "2078", "d": "2/2015"}, {"title": "add jquerydeparam", "body": "jquery nice method serializing object string used query string acemetrix offered jquerydeparam things reversely quite common use case think merged jquery thoughts", "num": "2077", "d": "2/2015"}, {"title": "nested table even odd selector returns wrong expected set", "body": "even odd selector returns wrong set rows nested table latest jquery version issue appears latest chrome firefox please look class added odd row added rows nested table switching odd even shouldbeeven rows nested table selected rows selected", "num": "2076", "d": "2/2015"}, {"title": "qmik", "body": "stop", "num": "2075", "d": "2/2015"}, {"title": "please use qmik develop mobile", "body": "qmik", "num": "2074", "d": "2/2015"}, {"title": "standardize custom pseudo object", "body": "cc timmywil scottgonzalez sizzle pseudos object exposed three distinct properties sizzle defines first two jquery defines third none appear current jquery documentation though sizzle documents object pseudos separately documents related setfilters sure published instructions define custom pseudo least would necessarily reference one also internal uses least two libraries core defines defines hidden visible animated extending calls visible pseudo ui defines data focusable tabbable widget pseudos extending replaces animated filter calls issue affects three source repositories jqueryapijquerycom crux standardize one internally deprecate others things considered vote would", "num": "2073", "d": "2/2015"}, {"title": "mutation observer feature jquery core", "body": "really would like see easy way work mutation observers jquery maybe excited plugin think could really something jquery core provides", "num": "2072", "d": "2/2015"}, {"title": "animated toggle turns display inline display inlineblock", "body": "example nonanimated appears work normally animation like put property element example causes red text drop new line instead wrapping normally happens whether span explicitly set display inline earlier inheriting default value bug seems similar apparently closed prior release nt quite", "num": "2071", "d": "2/2015"}, {"title": "data keys match data specification two dashes used", "body": "jquery provided method since change made conform data specification according specification key converted converted method allows arguments provided docs says return values object calling data parameters retrieves values javascript object jquery works correctly matches one would expect jquery data attributes two consecutive dashes converted way data attributes containing single dash means treated way converted special notes attributes containing two dashes row included returned object appeared fixed makes first version bug appears tests html code used testing html jquery test js var data div data assertequal data one none assertequal data nestedsingle single assertequal data nesteddouble double pass fail test js var data div dataset assertequal data one none assertequal data nestedsingle single assertequal data nesteddouble double passes expected refs cc loic", "num": "2070", "d": "2/2015"}, {"title": "chaining submit add nt work ie", "body": "following syntax works safari osx chrome winosx firefox winosx work nonmetro ie windows var html html html expect work ie browsers document add html submit also work ie browsers body append html submit thing get work ie also works browsers body append html theform submit", "num": "2069", "d": "2/2015"}, {"title": "support cross domain patch requests using broke", "body": "jquery versions provided support making cross domain patch requests using jqueryajax method assuming client server settings configured correctly cors support broke beginning jquery properly configured ajax request fails error could complete operation due error stepping relevant jquery code shows underlying error thrown permission denied breaking change appears occurring newly added condition getpostheadputdeleteoptions itest thistype amp amp code determining type xhr object use complete description including code snippets found would happy provide jsfiddle link showing vs support link shared privately regards john", "num": "2068", "d": "2/2015"}, {"title": "ca nt import module bower properly", "body": "try import package bower get error message feb error component json file c devreposspajsclientjavaserverclientsrcmainbowercomponentsjeditablebowerjson must property see", "num": "2067", "d": "2/2015"}, {"title": "callback function called blur event", "body": "versions gt gt browser chrome steps reproduce save following html file html bind blur function consolelog blur focus call trigger blur callback print console blur open file chrome open debug panel click anywhere debug panel refresh expected callback function called print console observed output console matters callback works expected nt click debug panel something window active sense word active ca nt tell bug related bug also occurs using karma test runner jasmine making tests involving fail versions jquery gt culprit suspect problem something clicking debug panel call trigger event callback", "num": "2065", "d": "2/2015"}, {"title": "double fired mouseenter chrome", "body": "version jquery browser chrome demo native event fired chrome jquery event fired twice chrome", "num": "2064", "d": "2/2015"}, {"title": "animation windows store apps", "body": "line line always return undefined windows store app used lines forward crashes use case trying use jquery blockui within windows store app", "num": "2062", "d": "2/2015"}, {"title": "inserting", "body": "hello issue pertains warning message synchronous xmlhttprequest main thread deprecated detrimental effects end user experience help check appears inserting", "num": "2060", "d": "2/2015"}, {"title": "find context performance weirdness", "body": "hi must missing something big big difference performance number times faster", "num": "2059", "d": "2/2015"}, {"title": "nt expose jqueryswap", "body": "even wantneed internally still nt expose reason robust modular architecture method undocumented technically could stop exposing whenever want better moment release nt see code make sure scottgonzalez amp arschmitz assume uimobile nt depend", "num": "2058", "d": "2/2015"}, {"title": "investigate possible performance improvements showhide methods", "body": "related", "num": "2057", "d": "2/2015"}, {"title": "update jscs", "body": "released later week lot jquery related changes last meeting decided update beta release would nt clutter prs", "num": "2056", "d": "2/2015"}, {"title": "sizzleattr typeerror", "body": "code throws uncaught typeerror exception sizzleattr tries call getattribute comment element comments function", "num": "2055", "d": "2/2015"}, {"title": "jquery sizzle generates wellformed error", "body": "scripts work fine upgraded get error rather cryptic note running seamonkey similar firefox uses exact javascript engine sure version really far feels like interpreter like value identifier ends definitively seem like good identifier wondering occurs something slightly wrong somewhere whether sizzle wrongly generates invalid identifier control thus far seem prevent scripts working least happens cleanup variable garbage collection particularly seems happening dealing xml document opposed standard html dom jsfiddle offers jquery specify js store use google version fiddle url", "num": "2054", "d": "2/2015"}, {"title": "integrate velocityjs replace jquery animate", "body": "issue explore possibility integrating velocityjs jquery huge change naturally need everybody involved discussion cc slexaxton paulirish", "num": "2053", "d": "2/2015"}, {"title": "click working innerhtml changed", "body": "", "num": "2052", "d": "2/2015"}, {"title": "removeattr onsubmit working ie", "body": "tested ie developer tools disabled submit functions run chrome ie developer tools open function run bug occurs jquery edge compat edge", "num": "2051", "d": "2/2015"}, {"title": "drop support android lt", "body": "android lt market share androids whereas android platform takes mobile market share gives us android lt whole mobile market share would account desktop browsers calculations get super low percentage android lt whole browser market share plus nt remember tickets old android except ones created mzgol added testswarm found bugs given drop support know wan na", "num": "2050", "d": "2/2015"}, {"body": "data attributes pulled first time data property accessed longer accessed mutated data values stored internally jquery need modify attributes please use", "d": "2/2015"}, {"body": "thank question jquery process adding support shadow dom casebycase basis however question better suited forums", "d": "2/2015"}, {"body": "second issue resolved lands first appears working expected please post link reopen edit reproduce first issue reopen", "d": "2/2015"}, {"body": "get dimensions hidden elements jquery must make element visible measure requires browser expensive reflows nothing say docs issue already note goes every dimensions page clear enough getting dimensions hidden elements always going unreliable slow especially applied hundreds elements", "d": "2/2015"}, {"body": "would better classed issue jquery ui library investigated nt expectation library would checking dimension inner elements making selections surprising see big performance difference due filtering looking different means hiding filtered rows table avoid problem happening", "d": "2/2015"}, {"body": "might things jquery ui make faster sure anything selectableitem data would valid hidden elements whole thing might able skipped", "d": "2/2015"}, {"body": "kinds utilities make jquery used internally plugins utility libraries code best ways cover use case", "d": "2/2015"}, {"body": "intro outro files syntactically incorrect purposeful build half wrapper around built source standalone modules sure assets task suspect attempting concactenate files src folder looking build jquery custom build instructions readme", "d": "2/2015"}, {"body": "make confusing", "d": "2/2015"}, {"body": "agree given time machine one first things would killed hitler time someone noticed inconsistencies suggested fix back decided even back would break much code today ratio jquery native web probably hundreds one nt make sense create backcompat nightmare match semantics different method used different types objects want exact arguments method jquery create little plugin implement also means nt broken existing code continues use get ways", "d": "2/2015"}, {"body": "dont touch hitler nobody knows could without fix spend next years regreting missing opportunity untill another chance fix", "d": "2/2015"}, {"body": "fixing regrettable action equivalent way solve want", "d": "2/2015"}, {"body": "check", "d": "2/2015"}, {"body": "careful us exposing shim browser builtins freezes makes much harder remove later want people also expect us fixes making close native possible imo would make sense mostly wanted people able provide implementations assigning sure useful would", "d": "2/2015"}, {"body": "see us creating alias different though latter adds new handler existing deferred", "d": "2/2015"}, {"body": "course would need done trigger reserved word treatment older browsers", "d": "2/2015"}, {"body": "got", "d": "2/2015"}, {"body": "recast question form bugfeature think would whether jquery support lazyloaded would run handlers fires read background seems like could use hack domready uses", "d": "2/2015"}, {"body": "seems like could use hack domready uses hack needed ie lt code looks like", "d": "2/2015"}, {"body": "reference mentioned hack last commit dropping ie lt", "d": "2/2015"}, {"body": "meant check use domready turns method went away using indirect feature check penalize least think would mean", "d": "2/2015"}, {"body": "ah library domready coreready sorry", "d": "2/2015"}, {"body": "filing issue native browser features fiddle nt even use jquery", "d": "2/2015"}, {"body": "realize thanks", "d": "2/2015"}, {"body": "dup", "d": "2/2015"}, {"body": "think may relying undefined behavior chrome firefox nt show nt try browsers find spec reference says event path change delivery jquery honors nt find discussion happen listener removed midst dispatch find one", "d": "2/2015"}, {"body": "found something like method allows removal event listeners event target eventlistener removed eventtarget processing event triggered current actions eventlisteners never invoked removed", "d": "2/2015"}, {"body": "yes seem like spec intended behavior similar language mdn note none three browsers seem call event listener added process handling event seems oddly asymmetrical nt seem special case laid way classic modifying collection enumerated dilemma jquery single dom event listener jquery handlers element takes snapshot handlers exist time event arrives tried use live collection would need guard case alreadycalled handler removed could skip handler still attached lot mess really rare edge case jquery event handler semantics nt match dom event listeners exactly fact even browsers consistently tells rarely people depend suggested resolution add sentence docs clarifying handler list element set event first delivered far wanted would something like solution", "d": "2/2015"}, {"body": "funny thing anything jquery project wanted know case work native event handlers browsers checked jquery found mismatch know understand making changes part code responsible event handlers good idea complicate much agree rare case proven think first one noticed adding notification jquery docs sufficient job", "d": "2/2015"}, {"body": "api issue opened", "d": "2/2015"}, {"body": "please file issue reduced test case", "d": "2/2015"}, {"body": "seems like good idea plugin would nt go jquery core", "d": "2/2015"}, {"body": "yes", "d": "2/2015"}, {"body": "duplicate", "d": "2/2015"}, {"body": "afraid always fail case even would use host window guess best nop fyi method detached nodes always bad idea", "d": "2/2015"}, {"body": "arguable throwing error preferable even returned style declaration every value empty string nt see use case retrieving styles early useful", "d": "2/2015"}, {"body": "stems perf advice longer relevant building dom detached avoid layouts paints yeah node detached throw error", "d": "2/2015"}, {"body": "current behavior seems fine unless better use case showing commonly happen really help caller return empty strings case", "d": "2/2015"}, {"body": "ok seems team agreement thank opening issue desired behavior retrieving styles detached elements opened docs issue", "d": "2/2015"}, {"body": "would fine making lot changes promisea compliance would also move people towards standard methods", "d": "2/2015"}, {"body": "sounds good let also open ticket jquery migrate tho", "d": "2/2015"}, {"body": "opened", "d": "2/2015"}, {"body": "created docs issue", "d": "2/2015"}, {"body": "better question forum stackoverflow", "d": "2/2015"}, {"body": "browser decides fire element removed dom appears jquery removed data element actually removed focus management flakey general many browsers particularly ie blur asynchronous example nt even get final event nt lot jquery need handle removing focused element add logic code", "d": "2/2015"}, {"body": "given situation behavior depend getting focusout event element removed explicitly set focus visible element removing element focus good practice anyway", "d": "2/2015"}, {"body": "docs seem pretty clear purpose prerequest callback function used modify jqxhr jquery xml object sent use set custom headers etc time reaches point bookkeeping already completed want change data could prefilter", "d": "2/2015"}, {"body": "dmethvin thanks anwser use set custom headers etc interpreted also would something allowed modify", "d": "2/2015"}, {"body": "thatt modifying jqxhr though", "d": "2/2015"}, {"body": "somehow possible use one call possible register globally", "d": "2/2015"}, {"body": "one ajax call could nt pass data options encode url call getting forumstackoverflow territory might want start thread best way deal use case", "d": "2/2015"}, {"body": "data already provided ajax using option lib using problem nt control code hook mechanics event fired want intercept adjust data beeing transmitted without modifying lib", "d": "2/2015"}, {"body": "root cause give javascript opposed tries helpful add end value seemed right thing different change method reset css property empty string setting actual value value number would worked method maintains evergrowing list properties truly unitless transitionduration unitless properties one specific value lack units unambiguous numeric value like could mean various different time units wonder place value actually need units could simply skip adding one case", "d": "2/2015"}, {"body": "wonder place value actually need units could simply skip adding px one case", "d": "2/2015"}, {"body": "experts correct plain time value incorrect example probably valid code changes required", "d": "2/2015"}, {"body": "", "d": "2/2015"}, {"body": "since polls would seem okay say really sure okay though seems like would need hander notified seeing notifications change version master", "d": "2/2015"}, {"body": "problem using plugin people nt need adding quite bytes nothing", "d": "2/2015"}, {"body": "agreed thank opening issue think best left plugin", "d": "2/2015"}, {"body": "looks right please reread docs ask help forum stackoverflow", "d": "2/2015"}, {"body": "ok figured wrong selector instead thanks putting time cheers", "d": "2/2015"}, {"body": "mrducnguyen odd positional selector means filters selection independent dom structure selectors nonstandard slow quite frankly atrisk future versions strongly recommend switching nthchild cases like siblings interchangeable filter generalpurpose afterthefact collection reduction instead use one following note css oneindexed opposed zeroindexed javascript", "d": "2/2015"}, {"body": "thanks suggestions actually found another interesting thing actually different use adds class row index adds class row index", "d": "2/2015"}, {"body": "stems fact nested table related document order nested tr elements follow tr elements outer table yet another reason avoid positional selectors", "d": "2/2015"}, {"body": "stop spamming repository", "d": "2/2015"}, {"body": "actually would like keep probably prevalent user code needs stay regardless long time nt used much nwmatchers name filters intuitive name regardless like continue recommending use createpseudo method creating custom selectors making choice one property somewhat moot except jquery ui already uses available", "d": "2/2015"}, {"body": "actually would like keep sense moving deprecated standardizing probably prevalent user code needs stay regardless still exceedingly rare among things lack documentation fix could nt simpler rate though propose deprecation think remove anytime soon promote consistency long time nt used much would depend measurement criteria probably used execution count jquery ui alone extent specialcase functionality used much bet updating apijquerycom would address educational gap nwmatchers name filters intuitive name appears nwmatcher moved least api perspective addressing however even nt maintaining surface area jquery core support transitioning independent selector engine seems overaccommodating regardless like continue recommending use createpseudo method creating custom selectors making choice one property somewhat moot except result still assigned object property eg", "d": "2/2015"}, {"body": "would depend measurement criteria probably used execution count jquery ui alone extent specialcase functionality used much bet updating apijquerycom would address educational gap think different wavelengths terms defining custom pseudos said jquery ui mostly used used still referring user code general remember seeing much often maybe memory result createpseudo still assigned object property eg data totally true brain fart however main point nt jquery documentation either documenting custom pseudo creation jquery fine picking property sticking still nt see value behind deprecating properties deprecation voices intention removal whether say use property documentation seems like enough", "d": "2/2015"}, {"body": "thank opening issue think best left plugin maintained independently", "d": "2/2015"}, {"body": "looks correct necessary actually change dimensions element animation text wraps strangely animation changes width height opacity width reduces less length text text wraps expect happen", "d": "2/2015"}, {"body": "definitely related fixed supports solution arguably distinct", "d": "2/2015"}, {"body": "sure expecting code like therefore also nt know mean work expect append form body trigger submit event body whereas something like would append immediately submit form", "d": "2/2015"}, {"body": "ah expecting submit triggered newly added html apparently understanding incorrect thank", "d": "2/2015"}, {"body": "posted fiddle fiddle loads jquery default runs see result patch verb success step versions jquery using ie find works versions point see fail detail error appears jsfiddle different reported perhaps due jsfiddle overhead copy code html page run directly using without running jsfiddle see error reported", "d": "2/2015"}, {"body": "thank detailed issue try make fix", "d": "2/2015"}, {"body": "jquery property bowerjson seems issue connected project", "d": "2/2015"}, {"body": "add reproducible changed", "d": "2/2015"}, {"body": "looks like nt issue", "d": "2/2015"}, {"body": "seems work take look fuzzy rules focus try native methods jquery breaking something works native methods please provide test case", "d": "2/2015"}, {"body": "trying accomplish modifying contents element mouseenterleave pretty dicey note clarification fiddle", "d": "2/2015"}, {"body": "try replace image video mouseenter back mouseleave event jquery event native behave differently fired fired think lack older browsers script normal browsers behave would great implementation mouseenter would work older browsers true emulated eventover", "d": "2/2015"}, {"body": "sounds like understand difference due code simulate mouseenter mouseover even chrome bugs synthesized event double fires problem mouseover event fired img handler div removes seems required event flow says dom event flow event listeners might change position event target document event object dispatched changes affect propagation path second event mouseenter synthesizer checks related element child nt removed perhaps could also check whether related element even document deal edge case nt know occurs situations far work around issue could position img element rather modify dom", "d": "2/2015"}, {"body": "take rare edge case occurs element event path manipulated may fix checking related element removed document mentioned may side effects", "d": "2/2015"}, {"body": "difference behavior nativeevent jqueryevent difficult consider true problem dom event general jquery browsers handle event difficult decide way correct sent bug report firefox example decide bug chrome everything right problem jquery", "d": "2/2015"}, {"body": "understand security model since store apps elevated privileges nt take kindly iframes may unknown content provide jsfiddle smallest sample code windows store app crashes code path taking defaultdisplay suspect use show inside blockui always bad idea guess may turn eliminate process dealing breaking change unlikely land soon", "d": "2/2015"}, {"body": "provide complete test case reopen", "d": "2/2015"}, {"body": "go away lands", "d": "2/2015"}, {"body": "since nt see line items let continue working towards resolution", "d": "2/2015"}, {"body": "valid test variable contains every single element page whereas contains single one since indexed use valid comparison see equivalent", "d": "2/2015"}, {"body": "ah sorry inspected prep code closely found base test", "d": "2/2015"}, {"body": "definitely nt use ui", "d": "2/2015"}, {"body": "nt even know existed saw related discussion definitely mobile either", "d": "2/2015"}, {"body": "sounds good think originally exposed users could control retrieve useful values hidden elements use case rare best", "d": "2/2015"}, {"body": "ok assigning", "d": "2/2015"}, {"body": "turns something needs nt want internally could put jquery migrate doubt used externally never documented plus really bad practice performance standpoint", "d": "2/2015"}, {"body": "could improve case simplifying avoiding check visibility seems webkit taking getting value sure would work yet though", "d": "2/2015"}, {"body": "check visibility could optional passing argument disabled default would nt sacrifice performance really needed", "d": "2/2015"}, {"body": "according jquery always adds page pageload use much simpler code support ie browsers obey selector nt know performance characteristics though class selectors probably faster attribute selectors another benefit either classbased attributebased toggling animated css means jquery plugin decide show show happens without changing plugin code", "d": "2/2015"}, {"body": "jamesarosen showinghidding elements used think attribute good choice however spec includes description makes inappropriate number cases hidden attribute must used hide content could legitimately shown another presentation example incorrect use hidden hide panels tabbed dialog tabbed interface merely kind overflow presentation one could equally well show form controls one big page scrollbar similarly incorrect use attribute hide content one presentation something marked hidden hidden presentations including instance printers encourage use ariahidden ties directly actual state element also means element hidden accessible manner", "d": "2/2015"}, {"body": "related could punt small might well come valid test cherrypick somewhat indirectly prevents issue surfacing", "d": "2/2015"}, {"body": "nodetype check", "d": "2/2015"}, {"body": "looks like duplicate jquerysizzle harmless already fixed upstream resolved next jquery release", "d": "2/2015"}, {"body": "hey author velocity even nt come fruition excited explore potential improve animation jquery velocity thoughts pro faster animation within jquery particularly lowpowered mobile devices velocity optimized willingness gut velocity redo internals wrap web animation api means even performance benefits particularly situations high concurrent main thread load css currently shines considerably expanded workflow features jquery users talking frivolous niceties rather valuable basics lot people would expect jquery first place transform animation svg animation robust scrolling syntax color animation better animation chaining multicall management removal redundant bloat use jquery w velocity gsap transit svg animation library velocity inside jquery quite bit space saving although mention one remove bytes nuts con could breaking changes certain edge cases may ultimately interested addressing attempted address every edge case velocity would wind far away original intention make animation better make jquery animation better velocity uses jquery animate syntax awesome trying improve upon jquery wanted best animation library could make jquery perfect starting point getting point users velocity people care webbased motion design workflows would expect development principle going forward principle nt completely beholden jquery past yes would likely minor breaking changes nothing big though sure core stuff jquery animate velocity however jquery going semver release par course anyway people want stay comfort zone stick want catch times upgrade read lines new documentation jquery probably needs go regardless remain competitive frameworks big improvements require big changes politicking ca nt turn prolonged backandforth sufficient majority opinion within jquery core move ahead come within reasonable timeline put necessary work get velocity ready internal replacement whatever else guys gals bring attention", "d": "2/2015"}, {"body": "personally love idea gsap velocity around performance perspective reason use current jquery animation engine aside cost adding another dependency app", "d": "2/2015"}, {"body": "reiterate points made meeting nt tests lint code ciintegration uses ua detection instead feature detection clear much would performance gain would since jquery also uses raf test velocity animate tests drop replacement would fail tests first point widely considered bad way write code second recognized bad practise long time ago basically everyone else always advocated logic third point believe jquery performed slower nt case would like see performance test forth point failures api incapability internal really nt mixed feelings statement velocity animation engine api jquery animate although would nt consider replacement would interesting see could reuse tricks library course something interesting aside use see velocity popularity result qualified marketing efforts anything else would nice prove wrong", "d": "2/2015"}, {"body": "cc gnarf", "d": "2/2015"}, {"body": "nt tests lint code ciintegration nt publicize later week uses ua detection instead feature detection microconcern quickly refactored sparing use ua detection limited small subset behavior could probably rip entirely concern better suited subsequent discussion entailing velocity would refactor order replacement clear much would performance gain would since jquery also uses raf articles detail velocity performance optimizations go far beyond raf refer velocity documentation regardless primary benefit velocity one workflow enhancement reversal proper scrolling looping svg animation transform animation ui mocking people switch also continue using performance allure checking test velocity animate tests drop replacement would fail tests yep one thing spoke david interest passing tests something consider jquery semver release example would nt necessarily pass every littleused animation edge case tbd believe minor breaking changes occur better tbd see velocity popularity result qualified marketing efforts anything else would nice prove wrong articles tutorials velocity focus workflow benefits performance workflow benefits inarguably game changer anyone ui motion design fad popularity would nt enduring ps cool velocity stuff", "d": "2/2015"}, {"body": "refer velocity documentation think better perf test numbers best arguments think workflow benefits arguing wonder jquery scope since one jquery goals try small possible want something extensive task might better suited specific animation framework quieter would nt clutterderail discussion since would really interesting hear thoughts cc people", "d": "2/2015"}, {"body": "jquery animate nt ever performance imo dealing really common animation use cases web dev world use cases changing velocity covered interested knowing parts jquery animation unit tests would need compat work velocity core ca nt work velocity core much work julianshapiro thinks personal costbenefit nt think performance even topic thread microperf best performance something work together well lot us experience interested hearing arschmitz well", "d": "2/2015"}, {"body": "following velocity change jquery raf pretty closely since jquery mobile planning switching js based animation transitions decision partially part move share code ui partially seen improvements speed js based animation things like velocity lot headaches surrounding css based solutions gnarf well rest ui mobile teams talked pro cons around current approach going start jquery core see performance issue depending outcome next step going either look using velocity directly try improve directly done limited prototyping around months ago see performance looked like older mobiles tests purely visual frame rates anything time velocity give noticeable benefit though pages admittedly simplistic complex pages velocity would make difference understanding nt think performance even topic thread microperf best performance something work together well lot us experience think work together either way perf concern nt really opinion velocity vs replacing velocity beyond would really like see us work together whatever solution going make sense whole", "d": "2/2015"}, {"body": "also julianshapiro feel free reach irc gnarf google hangouts gmail want talk unit tests jquery", "d": "2/2015"}, {"body": "thanks edit reserved comment julianshapiro everyone else scroll reread comment number could breaking changes certain edge cases idea edge cases may although mention one remove bytes nuts idea difference weight effectsjs velocityjs currently like small compact things nuts could probably help politicking ca nt turn prolonged backandforth sufficient majority opinion within jquery core move ahead totally board plan little worried breaking gt much lt backwards compat significantly increasing file size basic jquery given thoughts making velocitycore could include adding bigger byte size features like color plugins also looked jquerycolor apiway thing really like idea taking core velocity replace effects cover units minimum needed easy install plugins everything else", "d": "2/2015"}, {"body": "julianshapiro thank effort obviously still details work concerning implementation think would safe say move forward couple addenda take lead adapting velocity inclusion team help however still lot would ask patience first address remaining issues want move ahead nt think say certain going included code prepared reach point reassess things need take care inclusion following semver also try make breaking changes unless passing unit tests goal shoot leeway holy grail would pass bulk work completed would great could put together numbers performance comparisons may primary concern still concern first step improving performance measuring also numbers great making release notes ambition improve jquery animations much appreciated", "d": "2/2015"}, {"body": "ambition improve jquery animations much appreciated qft hearteyes", "d": "2/2015"}, {"body": "excited idea mostly antiraf situation getting bad fixed yay feel little conflicted first markelog original concerns seem pretty valid tests published get go hooked ci sure heart broken ua sniffing definitely seems addressable kinda surprised primary benefit velocity one workflow enhancement true velocity library targets sort authoring amp workflow feature set beyond basic animate api shoots inside jquery really interested animation engine reversal proper scrolling looping svg animation transform animation ui mocking sugar available respect combo little funny velocity value proposition around workflow aspects jquery needs basic animationtweening core even snabbtjs size velocity functionality jquery needs performance easy show velocity whopping legacy test cases probably better show difference real world sites measuring avg framerate amp std dev missed frames cpu time per frame tangentially related see julian questions necessity backward compatibility particular amp methods provide ability totally tank performance developers either invalidate styles via mutations force recalc layout probably upgrading animate performance might require addressing two guys", "d": "2/2015"}, {"body": "gnarf paulirish idea edge cases may hook velocity jquery tests find shortly idea difference weight effectsjs velocityjs currently like small compact things nuts could probably help take consideration velocity internal css gettersetter engine would replace jquery process initially spoke david would net negative saving bytes without taking consideration probably around ungzipped extra check velocity goes inside jquery removing features keep necessity focused case would likely size boost even hypothetical situation tests published get go reasons hint wanted discourage pr time happy code feature requests always great tests day one publish weekend mentioned heart broken ua sniffing definitely seems addressable kinda surprised feel like let dad jquery needs basic animationtweening core core assumption nt heard echoed elsewhere fact far understand motivation jquery behalf rethink statement whole short must asking jquery basic animation functionality answer motivationperspective base level svg color transform animation support arguably unacceptable jquery continues lack features going forward animation functionality continue need widespread supplementation enriched workflow level agree advanced workflow features velocity offers probably part jquery good news even part velocity begin relegated velocity ui pack velocityjsorg uipack", "d": "2/2015"}, {"body": "going put worth long time jquery velocityjs user business web development discovered velocity long came impressed low overhead smooth animations compared jquery extent add projects need animations beyond basic use best tool job quite happy custom build jquery without animation support use css animations depending trying achieve still coming back velocity something repeated large number sites using yet never run velocity without jquery scale sites need develop words animate useful bit like hammer velocity screwdriver bits toolbox etc bringing core velocity possibly couple small changes calls fit jquery things would positive thing already extra library mean extra bandwidth part entire balancing act job almost suggest jquery slimline base velocity ie b animations basic control add rest things make velocity special jqueryui colours sequences etc unlike things already already ability build custom version needed would make major code shuffle already minor reshuffle begin far breaking things changing api goes best knowledge api changes would additions rather replacements big differences related wrappers updated tl dr version basically jquery could write improved animation code projects could continue duplicating efforts fix issues improvements browsers projects could come together extra initial work end something better", "d": "2/2015"}, {"body": "html", "d": "2/2015"}, {"body": "div contains sap element innerhtml changed javascript language", "d": "2/2015"}, {"body": "please ask programming help stackoverflow jquery forum", "d": "2/2015"}, {"body": "see note removing inline onclick event handler using removeattr nt achieve desired effect internet explorer avoid potential problems use prop instead note include ie funny like", "d": "2/2015"}, {"body": "mobile market share counted separately desktop otherwise get low values almost everything mobile devices still nontrivial amount jquery mobile also needs support cc arschmitz besides real market share likely higher android dashboard counts people visiting google play store amp people newer devices nt think", "d": "2/2015"}, {"body": "one thing could introduce grades support like mobile make sure apis work would nt care pixel differences android etc know rwaldron though", "d": "2/2015"}, {"body": "mobile market share counted separately desktop exactly otherwise get low values almost everything could define everything besides real market share likely higher android dashboard counts people visiting google play store amp people newer devices sorry speculation think statistics close get real data couple years ago android lt share rapidly dropping giant pain support might wait little branch would make sense mentioned nt real old android issue gives optimistic attitude topic", "d": "2/2015"}, {"body": "one additional thing consider hybrid apps one main uses vs always said hybrid apps similar also one main ways jquery mobile used android lt dropped main branch longer able use many hybrid apps support android often goal hybrid apps also idea single code base likely means cases especially using jquery mobile apps start switching platforms like ios well able use version jquery everywhere making apps android cross platform market huge number think would decrease usefulness main branch drive people use compat im really sure thats want", "d": "2/2015"}, {"body": "one thing could introduce grades support like mobile make sure apis work would nt care pixel differences android etc know rwaldron though would ok however would say careful little bit pain point time still trying figure right way handle mobile", "d": "2/2015"}, {"body": "markelog mobile market share counted separately desktop exactly people divide ones using firefox chrome ie etc nt divide people using android ie desktop opera etc use desktop browser mobile one smartphone use mobile one rarely desktop one use conflating desktop amp mobile browsers nt take account", "d": "2/2015"}, {"body": "android lt dropped main branch longer able use many hybrid apps support android often goal hybrid apps also idea single code base likely means cases especially using jquery mobile apps start switching platforms like ios well able use version jquery everywhere actually officially nt support hybrid apps branch dropping android would mean nt support android hybrid apps", "d": "2/2015"}, {"body": "would put mobile really hard spot force us either drop support hybrid apps recommend people never leave need support android would also make actually defining core dependency kind complicated", "d": "2/2015"}, {"body": "would put mobile really hard spot force us either drop support hybrid apps recommend people never leave need support android yup yet another reason dropping android lt would premature point long mobile supports", "d": "2/2015"}, {"body": "need support android mean need support android really need shared opinion keep open could revisit later dmethvin", "d": "2/2015"}, {"body": "seems like still reasonably big numbers android would bad idea break outright platform example issue think keeping android phantomjs point took code would blow nothing would work", "d": "2/2015"}, {"body": "markelog meant need support android whole generalization fully aware many apps written android support versions android currently supported app store actually ok ignoring numbers sooooo low think devs realistically ignoring well nt think ignore", "d": "2/2015"}, {"body": "arschmitz ago run test suite android via browserstack turns nt fail many tests android currently mostly work even nt test difference amp far greater", "d": "2/2015"}, {"body": "mzgol aware nt bring since nt think anyone advocating us supporting yes reality probably fairly safe run nt actually test would recommend anyone", "d": "2/2015"}, {"body": "given current usage stats need android support mobile nt think dropping support yet looking hopeful able drop support later version open new issue time comes", "d": "2/2015"}, {"body": "trust working mobile want drop support anyone cheer day happens cant today", "d": "2/2015"}, {"body": "hidden inputs ca nt contain focus rule jquery break", "d": "2/2015"}, {"body": "dmethvin trying focus hidden input clicking visible textbox time focusin event occurs handler hides sibling input prevents click event propagated another take demo nt used hide time used empty instead", "d": "2/2015"}, {"body": "agree confused thought wrapped however also happens bare dom far tell look correct nt think anything click nt delivered", "d": "2/2015"}, {"body": "dmethvin yes looks correct tried chrome ie ff dom caption clearing nt work", "d": "2/2015"}, {"body": "removing element text box moves underneath mouse pointer keep mouse depressed move box click appears", "d": "2/2015"}, {"body": "ok guess click event considered mousedown mouseup need happen target click happens parent child target moved considered click anymore look demo guess workaround use mousedown instead click parent get mousedown mouseup anyway", "d": "2/2015"}, {"body": "third argument difference branches obviously nt go path", "d": "2/2015"}, {"body": "could cache fact selector failed skip subsequent ones actually entry sizzle cache nt mean must failed previously", "d": "2/2015"}, {"body": "hmm bad idea", "d": "2/2015"}, {"body": "yeah like lot panacea selectors theirselves different avoids lot pain little effort", "d": "2/2015"}, {"body": "issue opened address issue fairly well little cost gibson said close issue merge sizzle update", "d": "2/2015"}, {"body": "paulirish happy know see improvement", "d": "2/2015"}, {"body": "wow amazing", "d": "2/2015"}, {"body": "nice one awesome", "d": "2/2015"}, {"body": "wow cool", "d": "2/2015"}, {"body": "screen shot console running fiddle", "d": "2/2015"}, {"body": "looks like returns tablebending chicanery going sure much use table instead", "d": "2/2015"}, {"body": "sufficiently obscure difficult work around think mark wontfix nt like divs styled table elements", "d": "2/2015"}, {"body": "thaina hey checking would able provide test case markelog asked", "d": "2/2015"}, {"body": "forgot close issue doh", "d": "2/2015"}, {"body": "seems android problem ios sure happens android seems ca nt ca nt scroll code gon na blacklist", "d": "2/2015"}, {"body": "patch restoring hack android landed problem reappear browsers likely need mark wontfix add note docs", "d": "2/2015"}, {"body": "like take dependencyfree promisecompatible approach etc shims gaps build restrictions js var readyfiring readycallbacks whenready function callback readycallbackspush callback jqueryfnready function callback whenready callback return could also thenable function want jqueryready fn dont jqueryready jqueryfnready suitably wired load events documentreadystate holdready function resolveready whenready function callback readycallbackspush callback readyfiring readycallbackslength callback readycallbacksshift jqueryisfunction callback perfect backcompat synchronous call context trycatch break bit want callbackcall document jquery readyfiring whenready additionally deprecate etc favor deprecate nasty global behavior modifier better covered casespecific deferredpromise patterns remove alreadydeprecated document ready event", "d": "2/2015"}, {"body": "additionally sound good", "d": "2/2015"}, {"body": "oh really simple way patch things like fact nt dependencies agree extras well never really liked nt seem widely used seems like maybe older stealjs uses case talking removal point deprecation", "d": "2/2015"}, {"body": "note better worse mediawiki currently makes use method thenable view source wikipedia page example uses fire jquery domready handlers towards end actual end script tags html windowjquery amp amp jqueryready windowmw mwloaderrequire windowmw mwdataset backendhost mediawikiincludesoutputpage bottomscripts added mediawiki fixes bug solved firefox bug regards also simplified things little needing jquery crossbrowser stuff served way effectively bring browsers bootstrapping scripts loaded run document ready run scripts loaded bottom body requestedloadedparsed thus making lot likely run initial rendering reduce flashes lesser styled content", "d": "2/2015"}, {"body": "added could test instead good make sure fixed edge nt apply even hacky workaround soon", "d": "2/2015"}, {"body": "sure hook really needed everywhere monteslu error harmless cause issues", "d": "2/2015"}, {"body": "actually breaking anything looks awful", "d": "2/2015"}, {"body": "added could test instead still need test could use additional restriction beyond register thrilled work", "d": "2/2015"}, {"body": "anything core push fix firefox nt think force clicking asynchronously internally", "d": "2/2015"}, {"body": "trick event special api correct method calling leads teardown calling", "d": "2/2015"}, {"body": "actually read comment looks like okay scottgonzalez clarify repeat summation earlier long meaningful values returned nt problems possible break existing code reason push break quotes common cases centering pixels probably noticeable cases agree possible break code somewhere hand ca nt think would nice expose way get dimension already provided examples would actually break see", "d": "2/2015"}, {"body": "scottgonzalez nt mean annoy still clear position seems presented arguments sides said breaks barely noticeable reminded dave listed multiple examples would break existing code simply neutral", "d": "2/2015"}, {"body": "neutral change enables reasonable use cases think ok allow breaking change major release userland fix breaking change pretty simple", "d": "2/2015"}, {"body": "would like add since nt see mentioned anywhere css height css width also rounding values fiddle hope helps", "d": "2/2015"}]