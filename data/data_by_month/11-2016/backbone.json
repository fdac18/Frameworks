[{"title": "seeking model key collection", "body": "tried add objects like collection multiple times got many objects collection created models similar discovered happens bit inaccurate method seeks without checking model instance think check added", "num": "4103", "d": "11/2016"}, {"title": "collection byid lookup used inconsistently", "body": "typical behavior store model determined model implementation andor backbone convenience places fine except issue using access effectively bypassing access higher priority considering documented methodology precedent anyone inadvertently implements create collisions may interesting time determining suddenly missing merged models within collections tested willing concede scenario peculiar change small accurate documentation", "num": "4102", "d": "11/2016"}, {"title": "issue question registratorconsul", "body": "makes registrator skip mesosagent consul entry get following output docker ps consul marathon mesosmaster also nt entry weaveworksscope task running nt app listening port", "num": "4100", "d": "11/2016"}, {"title": "broken links", "body": "main page jasmine jquery templates", "num": "4099", "d": "11/2016"}, {"title": "modelfetch", "body": "new thought would reraise needs way use modelfetch fetch server fact merges client already actually nt really true big problem fetch expect model returned model fetched anyone work around like hear", "num": "4098", "d": "11/2016"}, {"title": "collection docs missing note parse option", "body": "model docs note passed option attributes first converted parse set model appears true collections well documented", "num": "4097", "d": "11/2016"}, {"title": "promise argument collection add remove reset set methods", "body": "would say add ability pass collection methods plain objects arrays models also promise add code like method useful decided change methods sync async like javascript user modelextend getproducts function return productswhere userid thisget id become return get products userid thisget id code sync async bagadd usergetproducts", "num": "4096", "d": "11/2016"}, {"title": "webpack babel typeerror undefined", "body": "appjs import marionette backbonemarionette export default marionetteapplicationextend region app initialize var applayoutview marionettelayoutviewextend template layoutviewtemplate el appmodals regions menu menu content content name yourapp description description author name version repository type git url scripts start webpackdevserver prebuild rm rf public build npm run amp amp webpack p lint eslint app test echo test dependencies backbone backbonemarionette bootstrap fileloader handlebars handlebarsloader jquery underscore urlloader devdependencies babelcore babelloader copywebpackplugin cssloader eslint extracttextwebpackplugin styleloader stylus underscoretemplateloader webpack webpackdevserver webpackmerge webpackconfigjs module loaders test js exclude nodemodules loader babel query presets tried possible settings babel conslole typeerror undefined initialize marionetteobject constructor extendchild appjs function module exports webpackrequire use view works appjs console onstart", "num": "4095", "d": "11/2016"}, {"body": "backbone call modelparse first time page loads nt calls parse time called something else funny going app", "d": "11/2016"}, {"body": "noticed problem", "d": "11/2016"}, {"body": "think pr tested type trying use key", "d": "11/2016"}, {"body": "uncertain proceed referenced master pr nt changed anything yet even check would inappropriate use model advance", "d": "11/2016"}, {"body": "sorry wrong place", "d": "11/2016"}, {"body": "thats pretty useful keep local state moving throughout app least apps thats useful already seen examples using way understand idea move models collections models forwards backwards views routers backboneradio window global directly instantiating using instance something could implement fetch method clears model fetching modelclear options keep mind idattribute default id removed also would like keep link preserve clear set right clear thats normally necessary fetch rest api endpoint single modelresource", "d": "11/2016"}, {"body": "think going add promises backbone holistically like fits starts", "d": "11/2016"}, {"body": "looks like issue also nt layoutview itemview anymore merged", "d": "11/2016"}, {"body": "version using layout view", "d": "11/2016"}, {"body": "sorry watched incorrect documentation", "d": "11/2016"}, {"body": "arvara little offtopic also shave chars code instead keep style moving onwards code", "d": "11/2016"}, {"body": "hello reports also seeing issue investigation could replicate using jsfiddle chromewindows safari mac see issue root problem seems webkit replicates issue location hash url encoded chrome replicate url hash encoded attach screenshots showing behaviour causes route fire twice firstly route function fires due jsfiddle code calling routenavigate calls loadurl expected behaviour happens platforms wo nt mention following handling event hash change event fires causes checkurl method fire note value locationhref return value thisgetfragment encoded value thisfragment encoded check line fails causes line thisnavigate causes route function fire second time", "d": "11/2016"}, {"body": "chrome values different note time windowlocationhref thisgetfragment encoded check line succeeds line skipped second route happen", "d": "11/2016"}, {"body": "actually confusing originally thought encoded version href safari nt url encoded version original url value decodes printable value", "d": "11/2016"}, {"body": "information appears straight bug safari set locationhash containing diacriticals seems get corrupted", "d": "11/2016"}, {"body": "latest webkit nightly corruption nt occur behaviour still going different chrome note url remains encoded unlike chrome decodes getting locationhref nt know one correct", "d": "11/2016"}, {"body": "hey megawac far away landing", "d": "11/2016"}, {"body": "would like know far", "d": "11/2016"}]