[{"title": "changedattributes broken using collection", "body": "test case click li selected attribute gets toggled upon rendering item shows changed attributes find odd priority attribute said changed upon rendering changed model constructor passing option silent true feel flagged changed click item selected attribute toggled item rendered still says priority changed nt click selected attribute flagged changed ok martin", "num": "105", "d": "11/2010"}, {"title": "fixing javascript case sorting comparators", "body": "might issue underscore rather backbone library found javascript os x safari sorts uppercase lowercase abcabc using collection comparator functions return name model seems wrong simply fixed appending touppercase comparator functions might want bake fix unexpected behaviour", "num": "104", "d": "11/2010"}, {"title": "collection get fails using model id zero", "body": "create collection add mode id try collectionget returns try collectionget returns model", "num": "103", "d": "11/2010"}, {"title": "eventstrigger unbind break multiple views listening model", "body": "say model views b listening views bind model remove event handler unbind remove event problem one remove event gets triggered", "num": "102", "d": "11/2010"}, {"title": "compiler problem nested scopes results variable", "body": "try compiling following coffeescript get following output problem way nested results variables declared typically multiple nested scopes new variables produced called something like case occurring two results variables declared inner scope reference outer results variable check lines results push called undefined variable problem seems use closure inside nested forloops nt return closure cause problem short repro remove inner function use single unnested forloop problem goes away however playing around still nt found good workaround using closure surrounded doublenested forloops seems pretty serious appears new problem code used construct project using worked fine upgraded", "num": "101", "d": "11/2010"}, {"title": "error event called modelscollections default", "body": "specifically think event gets automatically fired error callback call recognize pass callback options hash would cool included default functionality way view could bind event exactly way happy implement send pull request curious intentionally left", "num": "99", "d": "11/2010"}, {"title": "multiple inheritancemixins supported via extend", "body": "come across scenarios benefited use multiple inheritancemixins predominantly view objects currently way use following style code would really neat could handle within backbone class extend code passing multiple objects would allow us extend previous classes thoughts case anyone cares scenario modal boxes differ enough common functionality allows inherit default modal box view common functionality", "num": "98", "d": "11/2010"}, {"title": "simple data bindings questionsuggestion", "body": "hi really like backbone approach simple building blocks make creating interactive js apps easier still leveraging power csshtmlraw js playing around bit maybe understanding wrong seems easy way data binding dom properties models trying build two views tied model updating model expecting views get redrawn automatically seems like keep track views bound models implement updating modelchange seems lot work something want often see attempt assumptions correct would love layer top current objects would make data bindings lot easier example psuedocode examples databind body cssbackgroundcolor preferencescolor databind cartviewtotal text carttotal function values return valuestotal databind personviewname html modelfirstname modellastname function values return valuesfirstname valueslastname realize crippled approach would nt cover twoway bindings bind input field automagically updates model changed dependent keys trigger binding fullname either firstname lastname get updated collection binding bind example name selected person list even deal multiple selections smart way would help making simple applications lot easier thoughts", "num": "97", "d": "11/2010"}, {"title": "methods getting binded", "body": "hi developing askani graphical interface django models generator using backbone coded views one big appview trying refactor leave one view model problem everything works one thing methods nt get binded events could point wrong thanks", "num": "96", "d": "11/2010"}, {"title": "modulerequire features", "body": "maybe missing module loading support backbonejs correct people using requirejs like projects evaluating js libs right backbone looking right balance heavyjs frameworks sparse javascript libs", "num": "94", "d": "11/2010"}, {"title": "allow query params passed modelfetch", "body": "bit similar issue would great way pass url params fetch method many apis allow pass extra params get data instance twitter lets pass param get metadata hashtags user mentions ideally could add url params options object passed fetch method var user backbonemodelextend url twitteruser new user twitteruserfetch data userid includeentities true success function something instead overwriting url property stringing bunch query params", "num": "93", "d": "11/2010"}, {"title": "typeerror result expression list undefined object", "body": "using backbone jquery mobile come bug calling model save bug fixed like something needs fixed backbone jquery messing arrays somehow using prototype", "num": "91", "d": "11/2010"}, {"title": "access collection model", "body": "need access collection model get error relevant code function var namespace window stack trace chromium", "num": "90", "d": "11/2010"}, {"title": "changing view initialization flow pt", "body": "hi jeremy simplified example want achieve want create view needed create root element view instantiated basically want markup clean possible hold view related things place related code class markup template sure create element view creating instance view would interesting view related things encapsulated view class also nt want viewel set body example want keep container element narrow possible really simplified example real application render template instead creating elements fly testview backboneviewextend el home achieve behavior needed call ensureelement delegateevents calling initialize method ensureelement could called initialize case create useless element think controlling flow using options hash fully understand moving ensureelement call initialize bad idea current applications could rely existence element initialize method want share experience using backbone maybe give ideas gotchas using real environments application worked around issue base class views extends backboneview using events hash different name called processed calling descendant initialize method", "num": "88", "d": "11/2010"}, {"title": "double submit unchecking item", "body": "wrote small app based example code simpler primary function persist checkbox state server reportview toggleactive method bound click active check unchecked box works properly uncheck checked box calls toggleactive method twice sending two put actions server one attribute set one unset", "num": "85", "d": "11/2010"}, {"title": "add backbonemodel escape htmlescaping attributes", "body": "bit discussion afternoon different techniques escaping usergenerated content xss attacks folks prefer escape way database folks template interpolation tags escape text default right html rendered pros cons escape way database content never escaped formats later escaping template layer notoriously inefficient piece data may htmlescaped hundreds times single view using template escaping also incorrect arguably majority interpolations nt originate usersupplied content think information available backbone better job usergenerated data always going attribute model know escaping html browser proposing add method backbonemodel alternative instead returns htmlescaped value attribute could use view template like lt accountescape name gt could smart lazily cache attributes escaping given attribute need never escaped one time even rendered hundreds places ui thoughts", "num": "84", "d": "11/2010"}, {"title": "collection change design frustrating", "body": "current collection change notification architecture makes writing clean efficient view code difficult collection change events come two different ways addremove vs refresh drawbacks addremove could make view heavy peritem setup costs efficient however collections may sorted view needs mirror underlying collection order indexof lookup model leads potential performance bottleneck lookup n times number additions refresh convenient model perspective burdens every observer responsibility keeping track model state refresh event basically means old practical implement view way clearing everything view needs know specifically items deleted keep track method issues biggest gripe observer must handle types events stay sync collection implement add single item handler remove single item handler remove old item add current item handler two paths implement two paths test view might appear work fine casual testing one path fail bug path encountered thinking work around team current project improve design backbonejs particular project see single addremove changes exception rather common case going try mapping three events single refresh handler blows away current view contents regenerates current collection state may result occasional interface flashing less code maintain means reliable app general solution collection exposed two events externally remove arrayofmodels insert arrayofmodels prevmodelornull nextmodelornull seems like would allow model communicate efficiently observers bulk single updates observers would implement two elementary operations everybody else think idea", "num": "83", "d": "11/2010"}, {"title": "appending items collection", "body": "trying manage performance application wondering best way append items collection would nt see inbuilt method handling currently bootstrapping app collection upon page load using refresh add models database user may lot items wanting lazy load demand user scrolls keeping previously loaded items page rails side treating pagination based url parameter", "num": "82", "d": "11/2010"}, {"title": "enabling collection comparator leads average fetchrefresh complexity", "body": "array input collectionprototypeadd sent peritem collectionprototypeadd sorted fetchesrefreshes may inefficient way two methods interact comparator set essentially insertion sort average case complexity n input existing array items may need shifted since n combination easiest workaround might collection disable comparator bulk inserts let underscore normal n log n sort done note insertion sort efficient small changes alreadysorted array", "num": "81", "d": "11/2010"}, {"title": "ability declare set default attributes model", "body": "discussing irc think would nice could somehow declare set default attributes model would get automatically set associated values model initialized think implementation could something along lines suggested even simpler", "num": "80", "d": "11/2010"}, {"title": "rails response namespace", "body": "curious intended solution rails returning model response usersall usersfirst namespace results eg example default behavior backbone collection fetch creates local instances user attribute whose value object id attribute recognize parse method users collections solves however seems like really common thing write collection elegant solution adding every collection parse function raw thanks love backbone", "num": "79", "d": "11/2010"}, {"title": "api suggestions regarding fetching models modelfind", "body": "thanks fixing issue fast idea regarding model fetch adding class method takes id fetches model right away instead writing one could write said class method could load whole collection documents fashion current strategy regarding supply queryparams fetching collection items server server deliver reduced set resources according specified queryparams could imagine supplying along model collection fetch resp totally like json based syntax mql query language used freebasecom perhaps could strategy used along backbonejs sure fits current design though esp regarding separation models collections idea inspired api datamapper michael", "num": "78", "d": "11/2010"}, {"title": "backbonemodel tojson called backbonemodel fetch", "body": "realized gets called every even gets called corresponding collection fetched intensional expect tojson called using backbone causes problems case since models documents nt valid serializable state fetched parsed scenario like load document creating new document id property calling fetch tojson unnecessarily imo called causing error document contentgraph thisg nt setup properly parse function looks like", "num": "77", "d": "11/2010"}, {"title": "updates controller doc section", "body": "possibly make clearer controllers routing requires backbonehistorystart focussing trying functionality docs nt make super clear", "num": "76", "d": "11/2010"}, {"title": "clicking backbutton chrome backbonejs cycles last states indefinitely", "body": "recreating accidentally closed first time created using backbone chrome dev extensions disabled win following issue create controller couple routes initialize like new workspacecontroller backbonehistorystart click hashlinks match routing pattern things go well however use back button chrome dev cycle last hashlinks instead going backwards normally example say links click works taking need go click back button takes back expected click back would expect go instead taken back click back repeatedly cycles indefinitely chrome firefox behavior expected back back also backbutton pressed forward button enabled browser thinks action taken backbutton fresh new event truly going backwards history instead adding note combo appears important back button functionality works expected chromexp running virtually", "num": "75", "d": "11/2010"}, {"title": "support json root node request response", "body": "currently json support serializing model attributes within root node believe default rails behavior parsing incoming parameters generating json patch soon", "num": "73", "d": "11/2010"}, {"title": "backbutton support", "body": "sure supposed supported find back button function expected click various routed links trigger onhashchange work fine pressing back nt iterate back instead goes back prior page ignoring hashchange events example go cnncom go page using backbonejs click eg click click press back expect go instead winxp v get dumped back cnncom sure supported browser thought mention", "num": "72", "d": "11/2010"}, {"title": "cyclic history clicking backbutton backbonejs cycles last states indefinitely", "body": "using backbone following issue create controller initialize new workspacecontroller backbonehistorystart click hashlinks match routing pattern things go well however use backbutton chrome dev cycle last hashlinks behavior expected broken firefox example say links click works taking need go click backbutton takes back expected click back would expect go instead taken back click back repeatedly cycles indefinitely chrome firefox behavior expected back back", "num": "71", "d": "11/2010"}, {"title": "segments url history object property", "body": "working backbone internal project one thing found often need segments url seen router easy assign segments route gets executed would handy processed automatically controller routes request exposed global backbone variable maybe history object", "num": "69", "d": "11/2010"}, {"title": "allow loading route empty fragment", "body": "like able load route empty fragment current checkurl prevents", "num": "67", "d": "11/2010"}, {"title": "model validate called properly", "body": "playing example called todos wiki wanted add validate method added following work function would called twice expected object content order done object simple key called proto containing lot garbage ca nt seem find way actually get vaildate function work modified todos code minimanlly add validate method must assume example coded correctly assume bug backbonejs", "num": "66", "d": "11/2010"}, {"title": "split source file", "body": "think could interesting split backbone source separate file class case vant use view part model part application would include sync override later good one file distribution power users beter multiple files think", "num": "65", "d": "11/2010"}, {"title": "save specific model attributes server", "body": "clean model saving would nice save specific attributes", "num": "64", "d": "11/2010"}, {"title": "json posts emulatehttp", "body": "sure change emulatejson oddly named point setting removed seems wanting emulate http wanting raw json posts two separate needs want json posts emulate ca nt backbone pass xhttpmethodoverride header done understand frameworks make hard get raw post data sure two settings tied together", "num": "62", "d": "11/2010"}, {"title": "versions headers builds", "body": "please include version header comment backbonejs please preserve header comment backboneminjs see code way also include header comment automatically", "num": "61", "d": "11/2010"}, {"title": "processdata ajax parameter emulatehttp mode", "body": "think ajax parameter originally set line never changed think say line backbonejs backboneemulatehttp paramsprocessdata true way loving backbonejs", "num": "60", "d": "11/2010"}, {"title": "ca nt update model within change callback", "body": "trying figure act changed select dropdown view renders multiple select controls changing one might trigger change subsequent ones think country city select sequence problem according cautionary notes docs change submit reset events bubble current versions internet explorer means ca nt use view event delegation suppose tried attaching change handler directly select element nt work end render function set model view call stack view render function end change function seems changing model triggers immediate rerendering view fine end thismodel undefined points model surely something wrong pointers appreciated", "num": "58", "d": "11/2010"}, {"title": "optional protoprops hash subclasses", "body": "idea protoprops optional argument couple reasons eliminates resulting error omitted b means instanceof accurate subclasses exist descriptive c consistency considering classprops optional studied inheritance code ca nt see reason protoprops required create subclass especially conceptual one anyone comments", "num": "57", "d": "11/2010"}, {"title": "best way model collection inside model", "body": "team working interesting data schema basically document name version array items belongs items nt ids associated belong larger model items addedediteddeleted main document model looks something like name test version items name item position name item position would great use collection underlying items model whenever collection gets updated model post back server url best way model backbone happy post gist info needed", "num": "56", "d": "11/2010"}, {"title": "allow mobilefriendly framework zepto used place jquery", "body": "backbone great mobile webapp jquery large download mobile platform standards large cached safari mobile matter fact real performance downer providing options use zeptojs replacement would real blessing mobile web app developers humble opinion note basic testing substituting zepto jquery initializing backbonejs seemed work fine hack create zepto unbind function nt exist time writing see hack function fn unbind function return zepto thisjquery thiszepto", "num": "55", "d": "11/2010"}, {"title": "providing function view id attribute", "body": "attempting construct id model attributes view passing function id attribute debugging see assumes id classname static functions function executes context tag nt view anymore thinking updating following code optionally execute properties functions best way submit pull request", "num": "51", "d": "11/2010"}, {"body": "couple options tag model extra information set onetime flag view render next change event trigger listen different event", "d": "11/2010"}, {"body": "two first solutions nt work consider views b changing model around time way know originator event handler last option would work requires views listening model understand events nt scale could pass options object handler argument options object passed set save clear etc could set originator options handler would know triggered event would", "d": "11/2010"}, {"body": "sure thing commit makes possible take look let know think", "d": "11/2010"}, {"body": "yes triggers change attr would nt hurt append options arguments well error event performvalidation harm standardizing collection well", "d": "11/2010"}, {"body": "sure thing", "d": "11/2010"}, {"body": "default comparator function strings would certainly normalize case comparing however since write comparison functions something", "d": "11/2010"}, {"body": "sure using latest version backbone test models ids zero", "d": "11/2010"}, {"body": "ordering problem work either ca nt remove event within event current situation allow event removed firing wo nt affect current triggering event sure preferable", "d": "11/2010"}, {"body": "two scenarios need able delete bindings event perform one time action upon destruction view model seems john resig used proxies jquery handle see code bind one would nice support box", "d": "11/2010"}, {"body": "would sufficient clone list callbacks looping trigger way ensure callbacks called even one got unbound callback", "d": "11/2010"}, {"body": "mean post jashkenascoffeescript please move issues page", "d": "11/2010"}, {"body": "oops thanks sorry sure happened", "d": "11/2010"}, {"body": "issue would like something like ideas tanks", "d": "11/2010"}, {"body": "danigb possible use extensively want inherit two separate classes method used original post solution could find layout along lines issue every time add method want inherit prototype specifically wo nt happen soon add method parent class", "d": "11/2010"}, {"body": "true sorry mess issue thanks", "d": "11/2010"}, {"body": "allright got work see gist actually quite like current approach apart scoping thing maybe smarter way", "d": "11/2010"}, {"body": "maybe could leverage jquerydatalink plugin oneway twoway binding lets customize bindings add converters alter values think could add couple converters convertfn know work backbone models collections wrap link function automatically create settings map tells plugin use converters binding backbone model collection think", "d": "11/2010"}, {"body": "yeah makes sense like backbone everything jquery approach good helpers would cool nt looked datalink plugin play around", "d": "11/2010"}, {"body": "thanks excellent question part idea backbone make easy accomplish efficient data binding models views means explicitly supporting style syntax directly binding attributes models attributes dom elements way nice granular makes extremely difficult manage necessary bookkeeping maintaining application performance instead backbone targets coarsegrained views default behavior simply rerender view model state changed done nt manually wire model attribute several bits ui update model attribute causes single innerhtml change single browser reflowrepaint course nt straightjacket coarsegrained renders nt like view expensive rerender prefer granular update events available interested hearing think rationale", "d": "11/2010"}, {"body": "cloned project github took look causing events get bound found problem really stemmed way rendering things first problem came across way setting render function djangomodelfieldview changed per view render went ahead changed initialize function djangomodelfieldview following reasoning nt set el something nt exist since generated per view el lastly went ahead modified appview createfield function little bit changing bottom part something makes use changes made djangomodelfieldview side note would probably change appview createfield code bit like matter personal preference suppose think better save selector etarget beginning function since using function save calls finally would suggest come documentcloud ircfreenodenet would like get help backbonejs appropriate problems like imho", "d": "11/2010"}, {"body": "applied changes worked gives better idea backbone works thanks", "d": "11/2010"}, {"body": "used sample project hope find useful", "d": "11/2010"}, {"body": "correct module loading support nt think torequirejsornottorequirejs anything backbone really personal opinion javascript module loading place web applications concatenating compressing gzipping js assets single file app loaded single cacheable http request preferably farfutures expires headers stab sort thing context rails app available dynamic module loading make sense context truly enormous js apps like gmail talking megabytes javascript loaded portion app accessed good asset packaging still useful things like requirejs still overkill", "d": "11/2010"}, {"body": "callbacks removed using array correctly spliced nt need extra check mind bit logging figure current state many elements thinks callback removed", "d": "11/2010"}, {"body": "well weird set first page load ideas", "d": "11/2010"}, {"body": "got sorted overriding constructor without calling closing ticket", "d": "11/2010"}, {"body": "note model markable gets called via namespacemoveview backboneviewextend tagname td template template movetemplate html initialize function bindall render render function thisel html thistemplate thismodeltojson return lt consolelog thismodelcid gt lt consolelog thismodelmarkable gt div id square lt gt lt j gt class square squarerow lt gt squarecolumn lt j gt lt mark gt", "d": "11/2010"}, {"body": "looks like nt actually method defined right looking", "d": "11/2010"}, {"body": "changing nt work either thing either inside laterondefined witch case seems like chicken egg issue either hidden behind proxy function somewhere", "d": "11/2010"}, {"body": "oh course collection class constructor function instance collection like make instance need", "d": "11/2010"}, {"body": "indeed issue basic mistake thank", "d": "11/2010"}, {"body": "nt look like attach documents code rendered page messagetracer report approval lt tr class report amp lt activatedat active amp gt gt lt td gt lt input class active type checkbox amp lt activatedat checked checked amp gt gt lt td gt lt td class reportname gt lt td gt lt td class reportdestroy gt lt td gt lt tr gt amp lt active amp gt lt span class reportsactive gt lt span class number gt amp lt active amp gt lt span gt lt span class word gt active lt span gt lt span gt amp lt amp gt amp lt total amp gt lt span class reportscount gt lt span class number gt amp lt total amp gt lt span gt total lt span class word gt amp lt total report reports amp gt lt span gt lt span gt amp lt amp gt lt cdata function inputactive click function consolelog click amp gt reportjs function report model basic report model attributes windowreport backbonemodelextend report collection collection report backed rails app windowreportlist backbonecollectionextend create global collection reports windowreports new reportlist approvaljs jqueryready function report view dom element report windowreportview backboneviewextend application reportapproval toplevel piece ui windowreportapproval backboneviewextend finally kick things creating app windowapp new reportapproval server response reports name test createdat activatedat updatedat id nominatedat", "d": "11/2010"}, {"body": "completeenough example able try locally put somewhere take look action get started probably drop debugger function trace backwards original calling function", "d": "11/2010"}, {"body": "action tried debugging safari inspector times hit toggleactive backtrace nt helpful showed cases change context jquery see target element ie shows", "d": "11/2010"}, {"body": "first draft pushed master", "d": "11/2010"}, {"body": "deal vs add remove general methods simply optimization wish use leave fine way go relatively small numbers models note also implement terms example context view list models idea provide way convey idea collection changed much easier rerender everything scratch render one model time touching dom tight loop would adding oneatatime performance killer especially internet explorer notion makes possible efficient rendering large numbers models single dom insertion single reflowrepaint", "d": "11/2010"}, {"body": "easy clear dom element types views consider view shows collection map layers ca nt blow away every map layer whenever collection says refresh figure changed map layers nt added collection", "d": "11/2010"}, {"body": "use pass array models working properly", "d": "11/2010"}, {"body": "works hoping something bit elegant honest fetching data collectionurl seems intuitive framework handle something like rather creating ajax request handler spoonfeed data collection append option calling fetch would certainly help usecases", "d": "11/2010"}, {"body": "sounds like nice addition want take stab figuring best api based usecase", "d": "11/2010"}, {"body": "actually binary insertion sort effectively point welltaken disabling comparator sorting triggering events seems like best way go", "d": "11/2010"}, {"body": "actually given javascript performance may think like see benchmark proves problem large collections decide problem cook one", "d": "11/2010"}, {"body": "see splice algorithm insertion middle array n comes", "d": "11/2010"}, {"body": "yes ugly thisget desapear", "d": "11/2010"}, {"body": "great idea patch adds attribute suggest along documentation tests thanks closing ticket", "d": "11/2010"}, {"body": "change rails default behavior omit namespaces suitable activerecord baseincluderootinjson false read", "d": "11/2010"}, {"body": "thanks", "d": "11/2010"}, {"body": "added documentation thanks ticket", "d": "11/2010"}, {"body": "great questions nt originally include method personal experience opinion found almost never need load single model clientside js always search list working single model probably already loaded clientside experience tells differently love hear usecase using app terms query params filtering collections using something add perhaps explicit method adding query params often come realurl form example documentcloud search nt use explicit parameters looks like urlencoded actually running databasestyle queries javascript think bit inappropriate server would nt able trust js query conditions would able validate make sure browser nt trying look something nt allowed access better use url endpoint query accepts whitelisted parameters think", "d": "11/2010"}, {"body": "app document editor always dealing single document edited want open different one fetching list available documents choose items list contain documents contents meta data like title modifiedat etc document gets selected eventually fetch full version contents convenient model get id leaving collection untouched however since working realtime editor makes use websockets anyway tempted use whole clientserver communication particular look seems nice solution providing interface server client however rather offtopic wonder stick backbone models using rmi approach regarding queryparams might right suggesting urlencoded params get requests leaving task user terms transparency however urlencode everything explicitly something always disrupted would rather use declarative approach imo specifying params always work way matter dealing get post put delete problem special case get params part url requestbody two concepts mixed somehow correct saying somehow wrong however http works api point view one would need workaround desired jqueryajax provides data property specify params get requests without urlencode manually maybe would make sense collection fetch take optional data property urlencoded combined existing url backbone internally", "d": "11/2010"}, {"body": "nt particular usecase refreshingexpanding contents alreadyexisting model already handled", "d": "11/2010"}, {"body": "mhh rather given loaded document doca user usually wants load switch different document docb replacing current model new one updating property calling would work however feels somehow wrong", "d": "11/2010"}, {"body": "say get terms retrieving new model fetch terms refreshing contents existing model", "d": "11/2010"}, {"body": "think going close ticket time seeing semantic problem get ca nt return reference model synchronously nowhere store example nt work get must async feels like overkill", "d": "11/2010"}, {"body": "argh body issue disappeared updated issue title typing whole thing", "d": "11/2010"}, {"body": "thanks taking time retype fixed bug pushed backbone closing ticket", "d": "11/2010"}, {"body": "thanks hopefully update makes clearer think places mention go let know", "d": "11/2010"}, {"body": "tried windows windows xp chrome dev working expected gist code send link example app working", "d": "11/2010"}, {"body": "one thing try using javascript call instead literal urls seeing makes difference", "d": "11/2010"}, {"body": "test page reproduces problem provide evidence works chome dev virtual xp instance reboot see somehow fixes problem end", "d": "11/2010"}, {"body": "ok github needs move comment close button away currently located need look clicking argh sorry", "d": "11/2010"}, {"body": "nt worry reopen easily", "d": "11/2010"}, {"body": "ok tested example page windows still works properly think something going setup andor example code recommend trying different example", "d": "11/2010"}, {"body": "rebooting still seeing exact behavior going try machines around lab next see many affects helpful even recorded screencast since odd see among things forward button never gets activated click back history looking examples online using backbone history amp routing support ca nt find point one gladly try meantime try see hook listen going see going wrong", "d": "11/2010"}, {"body": "chrome webkit issue seems problem occurs even using backbonejs js page matter even works push one two three cnn closing since backbone problem", "d": "11/2010"}, {"body": "see pull request", "d": "11/2010"}, {"body": "ideal way get behaviour override function model something like outset backbone namespaced responses built via removed", "d": "11/2010"}, {"body": "thanks jeff right overriding tojson parse model works fine", "d": "11/2010"}, {"body": "closing modelside solution available", "d": "11/2010"}, {"body": "finish ticket mean json support serializing model attributes within root node", "d": "11/2010"}, {"body": "sorry meant backbone serializing model attributes default json", "d": "11/2010"}, {"body": "wish provide old behavior globally monkey patch prototype tojson method like", "d": "11/2010"}, {"body": "back button working closing ticket duplicate discuss", "d": "11/2010"}, {"body": "mentioned following browser chrome dev win also backbutton pressed forward button enabled browser thinks action taken backbutton fresh event truly going backwards history", "d": "11/2010"}, {"body": "accidentally closed argh definitely nt intend", "d": "11/2010"}, {"body": "interesting idea mind sharing code use case showing would easier access params globally instead passing", "d": "11/2010"}, {"body": "second thought ca nt nt necessarily names parameters could stick values global array would nt know route coming refer better handle route action knows meaning arguments another reason ca nt routing executed changed outside call would cause global params incorrect", "d": "11/2010"}, {"body": "fix merged master thanks patch", "d": "11/2010"}, {"body": "actually working correctly call model default implementation backbone trigger two calls thus two calls clientside model sent server server responds new attributes updated client taking todo list example toggle checkbox todo item first get call change attributes localstorage finished saving model get another call time including generated localstorage plugin well", "d": "11/2010"}, {"body": "would change validate make work", "d": "11/2010"}, {"body": "something like var todo new todo todobind error function err todoset content", "d": "11/2010"}, {"body": "well still gets added even fails validation honestly see value validate method works way get new todo without content even though validate works said", "d": "11/2010"}, {"body": "nt know related happily move new issue found calling collectioncreate method results validation called empty attributes object creating new model running save method model triggers validation correctly create method passing attributes correctly model returns attributes validation method returns empty attributes object model validate method", "d": "11/2010"}, {"body": "beseku thing said still append something useless view create instance object", "d": "11/2010"}, {"body": "nope seems work fine", "d": "11/2010"}, {"body": "agreed", "d": "11/2010"}, {"body": "addition jr akefile build pieces together also minification would nice", "d": "11/2010"}, {"body": "mulling little time like stick singlefile library allows us setup namespacing within single closure provides common baseline functionality assumed load backbone library bigger compressed perhaps worried give take half k nt much concerned real power user suggest replacing version copy backbone", "d": "11/2010"}, {"body": "ok agree point", "d": "11/2010"}, {"body": "reason backbone sends model attributes update restful performing model representation specific url benefits well send attributes changed request possible two different clients update model mutually conflicting attributes restful request model always consistent state reason calling rails django always saves attributes model overhead incurred sending attributes minimal compared ajax request model heavy enough starting problem", "d": "11/2010"}, {"body": "conversation surrounding original decision unify indeed case want truejson request fauxhttp application server using prefers combination", "d": "11/2010"}, {"body": "using backbone iis yes easily get raw data posted server json request iis easily really work put delete verbs", "d": "11/2010"}, {"body": "oh also sent pull request got assigned issue case guys agreed nt feel like reimplementing", "d": "11/2010"}, {"body": "nt use quite patch commit separates two bits note capitalization change closing ticket", "d": "11/2010"}, {"body": "thanks really appreciate adding back", "d": "11/2010"}, {"body": "sure particular reason", "d": "11/2010"}, {"body": "preserving header comment includes licensing information good users dotting crossing versions easier find version currently using project know newer version got", "d": "11/2010"}, {"body": "alright go thanks ticket", "d": "11/2010"}, {"body": "thank also checked underscore think would useful thing", "d": "11/2010"}, {"body": "done", "d": "11/2010"}, {"body": "thanks", "d": "11/2010"}, {"body": "whoops thanks fix patched pushed master closing ticket", "d": "11/2010"}, {"body": "give try", "d": "11/2010"}, {"body": "nt change anything perhaps nt explained precisely happens get typeerror result expression thismodel undefined object render function view select control defines change event handler understand change event fires select control causes model get updated causes model change event fire causes view render function get called fine nt understand thismodel undefined within render function undefined render triggered change event perhaps something really stupid ca nt figure another way select controls update model cause view change", "d": "11/2010"}, {"body": "ahh sorry try adding line function bind current instance add functions call ensure preserved take look docs underscore details", "d": "11/2010"}, {"body": "ah seems trick nt understand render method useful people without though thought people would eventually see render called within event handler many thanks help great code share", "d": "11/2010"}, {"body": "depends call within event handler calling like bind advance calling like problem", "d": "11/2010"}, {"body": "sure thing thanks explanation change patch fixes closing ticket", "d": "11/2010"}, {"body": "say two main options first leave items vanilla attribute backbone uses deep equality check attributes change inner item updated document know option pull items document attach models right inside collection stuck document something along lines documentcloud example roughly speaking either work well", "d": "11/2010"}, {"body": "would recommend also add document property back document object could accessed needed items", "d": "11/2010"}, {"body": "believe binding items change event document save missing piece although adding document itemset looks helpful well try today let guys know turns", "d": "11/2010"}, {"body": "worked well biggest issue mongoid thanks help guys", "d": "11/2010"}, {"body": "deal unbinding callbacks zepto never remove callback", "d": "11/2010"}, {"body": "using combination overriding child class similar patch zepto calls callbacks object pain remove events call like jquery anyhow opened ticket", "d": "11/2010"}, {"body": "correct wrong looking zepto source seems like places mentioned places mentioned kinda seems like zepto still halfbaked point way unbind events added", "d": "11/2010"}, {"body": "exactly think oversight zeptos part something backbone worry", "d": "11/2010"}, {"body": "let freeze one zepto gets little baked currently jeff ticket still nt addressed", "d": "11/2010"}, {"body": "anything else neededdesired zepto would useful invest time write needed functionality zepto", "d": "11/2010"}, {"body": "got backbone tests passing modified fork zepto", "d": "11/2010"}, {"body": "nt think need much complexity set id either create model id advance view function set id correctly based model call", "d": "11/2010"}, {"body": "good idea thanks pointing", "d": "11/2010"}, {"body": "duplicate", "d": "11/2010"}, {"body": "reason backbone coercing empty strings two indistinguishable html point view return empty string input cleared usually want column database happens said agree poor behavior messing bit data may meaningful distinction application removed line closing ticket", "d": "11/2010"}, {"body": "closing ticket favor second pull request", "d": "11/2010"}, {"body": "please note perfectly clean perfectly restful way sending data upwards happens bad data format hierarchical data hierarchical data needs encoded via encoding convention railsjquery encoding mechanism good would certainly support sending data upwards better formats json yaml xml would retain option sending data upwards", "d": "11/2010"}, {"body": "use use function keep models consistent sort order times change function call resort set listening events everything update correctly automatically hope helps", "d": "11/2010"}, {"body": "thanks yes makes sense case refresh add etc would need clear view correct example comparator sorting models first name already displaying bob charlie add albert would need clear view render", "d": "11/2010"}, {"body": "refresh add etc would need clear view correct yes event would clear rerender entire list models comparator sorting models first name already displaying bob charlie add albert would need clear view render insert new views appropriate location dom instead simple jquery might want use put albert right place", "d": "11/2010"}, {"body": "insert would efficient way find neighbours collection thinking bind add event get index newly inserted model could check see next index something like", "d": "11/2010"}, {"body": "yep get position within collection look adjacent elements either direct reference models record code handles case looks like", "d": "11/2010"}, {"body": "cool thanks help", "d": "11/2010"}, {"body": "seems something dealt server want payload send back server pure orm agnostic goodness coupling bad orthogonality good saying goes case couchapps needing attribute think custom couchapp sync best like jeremy suggested", "d": "11/2010"}, {"body": "sounds like nt many folks issue closing wontfix time reopen later necessary", "d": "11/2010"}, {"body": "worth reading topic", "d": "11/2010"}, {"body": "prodding discovery sammy work never worked internet explorer lt starting earnest work far", "d": "11/2010"}, {"body": "reimplement logic make ie lt handle back buttons ben alman already created jquery plugin widely adopted used community unless missing something first admit possible nt see ca nt integrated build script also found common view want clean next route entered reason particular emitting events enter exit events right specifically think would cool trigger specific route exit events way controller nt bind global level route events exit enter events particular route think lot cleaner every single route bind every route change clean hinted conversation thoughts", "d": "11/2010"}, {"body": "reason include exit events urls supposed stateless able navigate new url fragment without knowing anything state currently loaded share couple examples use exit events pineapple project ben alman project fine resource first released big fan far longer complex necessary serializes state fairly gross urls default lines code jquerybbq backbone hashchange stuff included", "d": "11/2010"}, {"body": "would think exit would perspective running application instance exit could hide view previously showing cleanup order pass focus application new view", "d": "11/2010"}, {"body": "example give exit event basically whenever going new route found usually rerendering large portion page activating new widgets etc start entering given page globally disablehidedestroy everything replace new stuff overkill would easier every route perform page purging let route clean way nt telling widgets already disabled disable ones need disabled get message psuedocode jquery bbq yes bbq large arguably bloated however ben alman also released jquery hashchange plugin implements logic needed back button quite bit smaller bbq built top hashchange whatever floats virtual boat speak", "d": "11/2010"}, {"body": "ahh beauty mutuallyexclusive css class names instead blowing away entire tree uiviews tab away recreating tab back much nicer set css class highup node even example loading workspace tag looks something like change tabs say documents help class name maintabhelp makes faster tabbing around single dom repaint instead expensive ui building helps keep things stateless nt need worry wether projects rendered entities ready rendered times thoughts", "d": "11/2010"}, {"body": "clever like technique lot question remains though add remove classes body example changes like", "d": "11/2010"}, {"body": "naturally simple thing something bit sophisticated handles mutuallyexclusive classes actually almost part initial backboneview got pulled release right little extension documentcloud makes view enter mode modes mode group mutually exclusive modes group setting update view modes hash well set html class mode group view element convenient way swap styles behavior backboneviewprototypesetmode function mode group thismodes thismodes thismodes group mode return thisel setmode mode group thismodes group mode fnextend see backboneview setmode setmode function state group group group mode var new regexp w group g var mode state null state group thiseach function thisclassname thisclassnamereplace mode replace ssg return mode view opens call get entitiessidebar class blowing away sidebar classes also say get back advocating extension perfectly sufficient needs lot stuff mutuallyexclusive classes handy", "d": "11/2010"}, {"body": "backbonejs includes controllers hashchangebased routing closing ticket", "d": "11/2010"}, {"body": "flag nt make much sense model method models always valid nt allow set invalid properties", "d": "11/2010"}]