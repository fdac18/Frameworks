[{"title": "repeated sentence doc", "body": "text sync function may overriden globally backbonesync finergrained level adding sync function backbone collection individual model appears twice", "num": "1160", "d": "3/2012"}, {"title": "search engine optimization", "body": "read previous issue mentioned since backbone designed applications require search engine optimization wont supported used backbone api exposed application create website therefore important seo came across seo ajax websites whenever web crawler requests page need take html snapshot page return crawler html snapshot nothing loading page running javascripts return end result found qt webkit accomplished use python binding qt ie pyqt try take html snapshot face problem javascipt gets executed page returned anyone done would great one could provide alternative", "num": "1159", "d": "3/2012"}, {"title": "models added collection constructor overwritten initialised", "body": "new bug came across today upgrading backbone adding model collection constructor coffeescript class exportstags extends backbonecollection model tag initializing model longer exists", "num": "1157", "d": "3/2012"}, {"title": "collectioncreate return jqxhr", "body": "made mistake documented returns noticed however returns created model however seems incorrect seems place compared persistence methods furthermore accessible way thus way observe outcome request reference model several scenarios success model added collection failure need reference model success model added collection failure model added collection case number bit problematic could easily circumvented removing model failed request thoughts", "num": "1155", "d": "3/2012"}, {"title": "classname property ensure class names existing elements", "body": "write view like expect every view created would class happen pass existing dom element view anyone else think backbone ensure classattributes view elements even existing elements look view code states classname something expect view weird missing sometimes", "num": "1153", "d": "3/2012"}, {"title": "router confused route queryparams ie", "body": "backbones router gets confused routes query params problem route caches queries works except ie quirck foobla gets parsed ok navigate works ok manually entering browsing url contain eg fooble ie add hence recognize route hence call callback works ok chrome amp ff probleem seen ie earlier versions probably problem reproduce following route intended javascript var workspace backbonerouterextend browse foobar expected result url rewritten foobar callback query called actual result url rewritten callback called fix following patch fixes problem backbonebackbonejs backbonejs opened nonpushstate browser thisfragment fragment var loc windowlocation var atroot locpathname thisoptionsroot var atroot locpathname thisoptionsroot amp amp locsearch", "num": "1151", "d": "3/2012"}, {"title": "method name conflict prototype chain event binding", "body": "ok kind hard explain try offer test case reproducible also note discovered version know changes way event binding works subsequent versions worth checking anyway could also bug chrome sure problem discovered store reference view another view views method name bind method event views unable successfully unbind event method referenced view example please read comments var parentview backboneviewextend var childview backboneviewextend var app views appviewsparent new parentview model new mycustommodel appviewsparentviewschild new childview model new mycustommodel call appviewsparentviewschildonclose render unbound mycustomevent event get zombie view hack solve problem change name referenced child view render method change say renderme works properly inspecting view renderme property view instead found one level prototype chain expected think conflict going prototype chain method names colliding", "num": "1149", "d": "3/2012"}, {"title": "router delegation", "body": "looking instantiate class extends backbonerouter delegates route handlers different class could tell routerbindroutes expects route handler string referencing method defined extended router nt allow external callback routerroute allows callback specified third argument applies within context router way found around wondering missing something obvious coffee class delegatingrouter extends backbonerouter constructor options delegate optionsdelegate class delegatedto constructor router new delegatingrouter delegate routes thisindex barf thisbarf barfsuper ok thissuperbarf index barf superbarf ok", "num": "1147", "d": "3/2012"}, {"title": "default values passed reference", "body": "empty array default value definitely trick user intended", "num": "1145", "d": "3/2012"}, {"title": "error message trying add model collection twice", "body": "threw ca nt add model collection twice error helped identify resolve serious serverside bug might gone unnoticed time clientside error thrown see duplicates ignored silently clearly conscious decision wondered motivation ca nt think reason bug trying add duplicate model collection ca nt support duplicates would therefore expect see error message even code able mitigate error", "num": "1142", "d": "3/2012"}, {"title": "add events syncing", "body": "like see complete set events managing state communications persistance layer collections models currently way backbone outofthebox fulfil common requirement loosely related events sync triggers savedelete fetch error triggers save error cover common use cases common use case extra events updating ui reflect state model collection acted use cases though depending events implemented preprocessing communication postprocessing returned data though predicting events could used models collections may hook onto sync events already requests feature github demonstrates indeed common requirement worthy included backbonejs arguments adding hooks seem poor illjustified none issues pull requests come real resolution think backbone wants remain unassuming barebone framework needs provide hook methods developers use foundations buildon functionality users like nt need tread heavily overwriting core methods using messier workarounds sync events implemented discussion though like see least moreorless correspond equivalent ajax callbacks jquery sync successful sync failed sync complete sync actual event names example sync sync complete sync success sync error nt need additional events save fetch long type operating determined use sync events eg create read update delete arguments provided events could operation type mentioned datamodelcollection operation possibly optional communication object like jquery ajax object jqxhr response object anticipating suggestion use jquery callbacks manage event state requires lot boilerplate micromanagement fewer words crap know either means need repeat objects otherwise put common prototype children need explicitly wrap parents callbacks callbacks gets fiddly messy really quick events allow easily hook onto states many times want set forget set constructor works matter view state changed backbone method even bind event parent object views inherit please adding events thoroughly considered", "num": "1139", "d": "3/2012"}, {"title": "backbone breaks backbonerelational changed events", "body": "upgraded backbone using bbrelational attribute level events changed model nt seem firing ie model book change title attribute change event gets fired change title traced problem apparently modelchange logic changed attribute shows thispending reason nt trigger event", "num": "1138", "d": "3/2012"}, {"title": "merge results collectionfetch", "body": "calling fetch existing collection appear way merge results adds updates deletes triggering events respectively", "num": "1136", "d": "3/2012"}, {"title": "collections accept models type", "body": "sure design though would nt surprised collection preparemodel check model instanceof model decide allows object added nt check use model property explicitly set collection see case like ensure collection works certain subclasses model", "num": "1135", "d": "3/2012"}, {"title": "backbonecollection constructor treats backbonecollection model", "body": "backbonemodel clone method corrupt backbonecollection stored attribute nest collections via initialize command unless explicitly prevent backbonecollection constructor called backbonecollection object offending lines code similar preparemodel incorrectly called backbone collection due line easily avoidable using modelsmodels array however left issue recursively cloning clone like see option collection nt know ramifications thoughts", "num": "1134", "d": "3/2012"}, {"title": "backbonehistorynavigate", "body": "functionality backbonehistorynavigate new page route opened scroll page remains position could something done navigate automatically leads scrolling top page", "num": "1133", "d": "3/2012"}, {"title": "broken link annotated source", "body": "second sentence demo uses simple localstorage adapter persist backbone models within browser localstorage adapter link points nt exist", "num": "1132", "d": "3/2012"}, {"title": "backbone phonegap problem", "body": "obviously nt phonegap problem runs pretty snappily browser still would sudden perform properly hits ios fixable", "num": "1131", "d": "3/2012"}, {"title": "include context fetch", "body": "little disappointed could nt add kind context fetch method meaning let say following var someimportantinfo thisgogetimportantinfo importantargument blahfetch data b c success thissuccess error thiserror success callback method way obtaining someimportantinfo value could obviously save get callback changes meantime like able send context object along fetch like many async frameworks allow example like able var someimportantinfo thisgogetimportantinfo importantargument blahfetch data b c success thissuccess error thiserror context someimportantinfo success function could look like function success collection response importantinfo use importantinfo important stuff meantime going wrap ie var someimportantinfo thisgogetimportantinfo importantargument var blahfetch data b c success function collection response thatsuccess collection response someimportantinfo error thiserror sure need test otherwise still little kooky would lot slicker context parameter allowed could override sure others would appreciate", "num": "1130", "d": "3/2012"}, {"title": "router handles paging bug", "body": "router tab paging resolved correctlythis feature previous version availablemay regular match causes please see next issue like ok tab paging example become", "num": "1127", "d": "3/2012"}, {"title": "default modelurl function give priority modelurlroot collection url", "body": "seems backwards default url function models give priority collection url functionvalue opposed model urlroot functionvalue collection take precedence model model final word url collection specifically line backbone could changed instead use case would valuable models belong multiple parents example files folders case file collection folder id might url post url would create new file object folder let say new file id however file url file might also belong many folders therefore files url likely model urlroot property took priority collection url could insert logic urlroot function return appropriate url depending wether model new however right collection url takes priority possible return simple files base url file part collection without overriding url function would imagine cases backwardsseeming behavior gets way must another side argument nt see collection url take priority model urlroot", "num": "1126", "d": "3/2012"}, {"title": "getting uncaught rangeerror maximum call stack size exceeded using super", "body": "code javascript var v backboneviewextend initialize function var vextend initialize function thisconstructorsuperinitializecall var initialize function thisconstructorsuperinitializecall var v new get", "num": "1125", "d": "3/2012"}, {"title": "suggestion initializing function views", "body": "problem extend view problem setting new init function every extension javascript var backboneviewextend initialize function options code function thisdothat var initializetwo function options thisdosomethingelse var initializethree function options thisdoanotherthing etc solution would nt great initialize function cached extension nt need change reference every extension something like javascript var backboneviewextend initialize function options consolelog var initialize function options consolelog var v new expected logging patch could cache initialize function every instance changing code backbonejs inherits variable javascript line childprototype new ctor new code caching initialize initializationarray var initializationarray clone parentprototypeinitializationarray initializationarraypush parentprototypeinitialize childprototypeinitializationarray initializationarray done add prototype properties instance properties subclass supplied protoprops extend childprototype protoprops base backboneview variable rewritten like javascript line var view backboneview function options thiscid uniqueid view thisconfigure options thisensureelement var args arguments typeof thisinitializationarray object var self thisinitializationarray function fn typeof fn function fnapply self args thisinitializeapply arguments thisdelegateevents possible problems nt backward compatible", "num": "1124", "d": "3/2012"}, {"title": "idea add callback modelset", "body": "would extremely helpful specifically cases models synced server event nt cover curious know thoughts", "num": "1123", "d": "3/2012"}, {"title": "model unset clear poison argument", "body": "found functions modify argument particularly add option point view undesirable side effect example expect following code removes attribute set attribute value actually removes attributes", "num": "1122", "d": "3/2012"}, {"title": "collections call initialize models set", "body": "hi previous versions backbone upgrading new collection objects created way models made available usercustomized initialize method bb longer true seems wrong prevents manipulating models creation time absence hook postinit regression reason behind change glad proposing small patch relevant btw thx", "num": "1121", "d": "3/2012"}, {"title": "router handles paging bug", "body": "router tab paging resolved correctlythis feature previous version availablemay regular match causes please see next issue like ok tab paging example become", "num": "1120", "d": "3/2012"}, {"title": "siblings inheritance conflict", "body": "encountered strange bugs application found bacbkone inheritance pattern seemed quite broken two classes extend parent siblings seems keep common references parameters check simple test case var myparentclass backboneviewextend items foo initialize function", "num": "1118", "d": "3/2012"}, {"title": "confusing behaviour tojson", "body": "define route model coffeescript like class route extends backbonemodel initialize obj gt name objn firebug webkit dev console new route n route routename routen undefined routetojson name undefined route tojson n wonder enyone else finds little confusing", "num": "1117", "d": "3/2012"}, {"title": "router allow multiple actions", "body": "way could add ability watch multiple actions singlepage application multiple tabs open displaying different action views like able add history support user clicks back bring previous action viewing tab", "num": "1115", "d": "3/2012"}, {"title": "found", "body": "git show commit message linking backbonejsorg directly see future see", "num": "1113", "d": "3/2012"}, {"title": "would useful able pass model option collection constructor", "body": "creating collection like var mycollection new backbonecollection jsonarrayofmodels currently possible specify type model collection fill initializing json data passed constructor order fill particular type model object say mymodel either var mycollection new backbonecollection jsonarrayofmodels function thismodeljson mycollectionadd new mymodel thismodeljson define collection class inherits backbonecollection defines model attribute mymodel first option ugly second option often overkill standard collection class suffice needs therefore would useful able say var mycollection new backbonecollection jsonarrayofmodels model mymodel collection constructor automatically sets model attribute created collection value passed options parameter case mymodel course relatively easy derive basecollection object works like image common need would help lot people built collection object box", "num": "1112", "d": "3/2012"}, {"title": "model new modeldestroy returns undefined making dangerous use xhr functions", "body": "modeldestroy generally returns xhr object great makes possible modeldestroy error function put model back original collection since destroy failed server however case model new destroy method returns undefined additionally funny logic looks like bug var triggerdestroy function modeltrigger destroy model modelcollection options thisisnew return triggerdestroy triggerdestroy funciton return value destroy ends returning undefined new models sure intended way logic written make clear anyway primary problem nice sytax mentioned using error method xhr object fails case model new generally speaking nt think people take account fringe case end breaking sites already production sure best way solve issue maybe return new xhr object instead undefined case model new nt work current inconsistent behavior least well documented people nt trip", "num": "1108", "d": "3/2012"}, {"title": "enhancement idea speeding event unbinding", "body": "line events unbound far see code job without calling", "num": "1107", "d": "3/2012"}, {"title": "validation force attributes change option", "body": "based limited experience backbone dealing user input feels like needs middle ground normal modelset fires validations silent true option bypasses validations entirely nt fire change events would propose force true option would execute validations fire appropriate error events would go apply invalid changes fire change events example save button form designed disabled form valid like bind change error events single method checks modelisvalid also tab view around form title tab changes title field changes also based change notification nt happen validation errors", "num": "1106", "d": "3/2012"}, {"title": "easy way stop listening events", "body": "would love backboneeventon returned object perhaps noarguments function stop listening event subscribed later thisunsub currently code block subscribe model events nearly duplicate block unsubscribe alternately away unsubscribe given context ie", "num": "1105", "d": "3/2012"}, {"title": "backbone coffeescript inheritance issue", "body": "trying break methods using across backbone models nt understand nt working baseclassjscoffee class myappmodelsbaseclass extends backbonemodel linked gt linked link form gt linked false form backbonelink prefixed true linked true else form backbonepopulate prefixed true dirty gt dirty true clean gt dirty false isdirty gt dirty pagejscoffee require baseclass class myappmodelspage extends myappmodelsbaseclass initialize gt consolelog page object initialized dirty false changes name page linked false url gt pages id however go console page new myappmodelspage gt page object initialized pagelink myform gt uncaught typeerror object method link dont understand methods nt inherited jsfiddle issue", "num": "1104", "d": "3/2012"}, {"title": "error backbonejs", "body": "hitting head wall got mamp setup php making backbonejsslim app backbone tries send put requests slim slim responds method allowed suggestions", "num": "1101", "d": "3/2012"}, {"title": "modelclear set default values", "body": "assume model defined lets create new instance check looks like get execute output attributes set default values reset opinion output", "num": "1099", "d": "3/2012"}, {"title": "touch events firing subviews", "body": "hi come across potential bug ios devices android seems work expected jsfiddle sets two divs one subview anotherwhen click light pink one get foo click dark pink div get bar expected look jsfiddle setup except outer div parent set listen touchstart events would expect touching outer div nothing works expected touching inner div alert bar however tap inner div nothing happens comparison purely jquery version example example work expected", "num": "1095", "d": "3/2012"}, {"title": "inherits helper constructor function new subclass", "body": "inherits helper create constructor function new sublcass without statement want redefine object parent constructor nt work statement solve problem", "num": "1094", "d": "3/2012"}, {"title": "possible offer backbone mit gpl duallisence", "body": "started working deep integration drupal backbone one extremely excited potential backbone brings drupal world drupal moving direction heavy focus rest serviceoriented systems believe backbone could become significant part drupal stack signifiant limiting factor backbone adoption drupal community probably difference two projects licenses drupal code hosted drupalorg must gpl well drupal flexible api handling external libraries facilitate download backbone underscore individually using packagejsonlike makefiles ideal able distribute backbone drupal backbone module future would love see backbone included drupal way jquery currently part drupal core must gpl licensing option would possible offer backbone backbone licensing scheme similar jquery dual license nt think would need impact current users product choose mit license choice would allow gpl world make full use foundation backbone provides backbone patterns makes extremely powerful building block frameworkspecific adaptation integration really hope consider licensing option thank", "num": "1090", "d": "3/2012"}, {"title": "backboneview element namespace support", "body": "element possibly others needs created appropriate namespace render properly views use need override method create elements using rather see", "num": "1088", "d": "3/2012"}, {"title": "unable bind error event model collectioncreate", "body": "started using backbonejs yesterday may misunderstanding work basically tried create model instance preparemodel method trigger error event instance though nt see way bind event instance object obtain object event triggered even event triggered alternatively tried initialize instance pass create simply skips validate validate may related issue end probably get around set save bind event beforehand", "num": "1087", "d": "3/2012"}, {"title": "feature request backbonehistory route event args provide named parameters", "body": "would nice callback parameter args would provide object similar small example javascript backbonehistoryon route listener var listener function router route args comes array en idea en language entityid consolelog args would help structure like would passed language en entityid ugly workaround map named parameters value javascript initialize function backbonehistoryon route thisonroutechanged onroutechanged function router route args save current active route information thiscurractiveroute router router route route args args getnamedviewparam function param thisnamedviewparams thisnamedviewparams thisresolvenamedviewparams thiscurractiverouterouter thiscurractiverouteargs resolvenamedviewparams function router args argslength gt var h backbonehistoryhandlers var lt hlength find actual route application wide router routes h routetest backbonehistoryfragment keys keys routerroutes find route request routes router var j lt keyslength j h routetest keys j extract named parameters route matches keys j match wg strip named parameters need better regex var cleaned map matches function param return paramreplace combine args named args return zip cleaned args hope someone else might interested kind functionality nt found easier way achieve", "num": "1083", "d": "3/2012"}, {"title": "modelunset attribute silent true nt update previousattributes", "body": "silent passed true unset method previousattributes never updated unset attribute previousattributes updated modelchange method never called silent true line optionssilent amp amp thishaschanged thischange options provide pull request u think valid issue", "num": "1082", "d": "3/2012"}, {"title": "binding modelsave change event causes infinite loop localstorage", "body": "bind model event saving localstorage infinite loop results action triggers event turn invokes another save see action adding following code method todos model sample app strangely issue nt appear put invokation inside settimeout leading believe quickness saving localstorage causes finish change event dispatching complete", "num": "1081", "d": "3/2012"}, {"title": "back button registering backbonehistory", "body": "issue sporadically sure cause debug backbonehistoryfragment returns x page backbonehistorygetfragment returns occurs click back chrome nt fragment getfragment always sync back action registring backbonehistory occurs none routes called", "num": "1080", "d": "3/2012"}, {"title": "view router constructor option", "body": "hello want propose use declaration similar router initialize method assign view instance property would nice view attribute router resolves collectionmodel attribute view", "num": "1077", "d": "3/2012"}, {"title": "backbone unset bug", "body": "var model new backbonemodelextend var silent silent true modelset foo bar works modelunset foo silent changes silent silent true unset true modelset foo work new value silent", "num": "1074", "d": "3/2012"}, {"title": "document local sync override ability", "body": "backbone allows permodel override backbonesync see backbonemodelfetch docs make mention though", "num": "1073", "d": "3/2012"}, {"title": "collection ist fetching data url", "body": "hey pretty new backbonejs created collection added url fetching data api browser see request response also contains expected data nothing happened tried overwrite parse method collection check stuff method never gets executed something overseen code samples found stackoverflow home someone help", "num": "1072", "d": "3/2012"}, {"title": "model fetch reset attributes server state append", "body": "model object gets server model afaik incorrect appends attributes model replaces please see example coffee live class model extends backbonemodel sync method model options gt serverrepresentation b optionssuccess serverrepresentation success new model text jsonstringify appendto output mfetch text jsonstringify appendto output opinion give b whereas currently prints b expected behavior", "num": "1069", "d": "3/2012"}, {"title": "order model sync collection order events", "body": "hi wondering would issue swapping order line model sync event fired collection add event seems sync add would better semantics thanks", "num": "1068", "d": "3/2012"}, {"title": "make modelurl check model urlroot first", "body": "putting issue instead pull request small change found writing app model part collection saving model would use collection url instead urlroot set model due line takes first nonnull url sees propose altering order checks urls", "num": "1067", "d": "3/2012"}, {"title": "modeldestroy foreign key", "body": "hi one go deleting nested resources need authorized serverside using backbone rails app multiple nested layers obviously going let anyone delete resource without proper authorization standard session method scope everything need go two levels deep issues arise basic example user gt bookshelf gt book serverside controller ruby class bookscontroller lt applicationcontroller respondto json def destroy respondwith currentuserbookshelvesfind params bookshelfid booksfind params id destroy end end coffeescript shell hits proper url would nice somehow able pass foreign key bookshelf model nt first load every bookshelf current user memory server map find book tried something like printing params delete request also tried without nesting params nt help nt overlook supported anyone tell one handles deletion nested resources thanks", "num": "1066", "d": "3/2012"}, {"title": "backbone amp mootools", "body": "hello planning undock backbone jquery trying make friends backbone mootools crash change view element property including event redelegation setelement function element delegate el element thisel el delegate false thisdelegateevents return try create view mootools changed code like setelement function element delegate el element thisel element thisel el delegate false thisdelegateevents return working", "num": "1064", "d": "3/2012"}, {"title": "misleading documentation validate method", "body": "docs method state validate called set save passed attributes updated understanding means attributres passed passed however looks like actually attributes passed instead eg passes attributes updated method inside following code merges attributes updated attributes model passes besides looks like object used eg populated object actually validated thus validations backbone passes attributes ca nt easily validate attributes supposed changed", "num": "1063", "d": "3/2012"}, {"title": "missing useful things", "body": "worked backbone amp senchatouch would love get things inside backbone powerful classmanager senchatouch gets clean easy class definition via extdefine function easy overriding mixins like normalized multiple inheritance instance call thiscallparent sencha ugly things like superinitializecall backbone senchatouch classes also gets nice statics really useful base application object thant handles initialization stores collections amp controllers global object query classes amp instanciated objects would great appgetstore contactlist appgetmodelclass contact intend implement theses things", "num": "1062", "d": "3/2012"}, {"title": "sort documentation methodsproperties alphabetical name", "body": "know bit pedantic kinda annoying probably easy fix methods amp properties documentation sorted alphabetically moment bit confusing learning use example model currently extend constructor initialize get set escape unset clear id idattribute cid attributes defaults tojson fetch save destroy validate isvalid url urlroot parse clone isnew change haschanged changedattributes previous previousattributes", "num": "1060", "d": "3/2012"}, {"body": "went go find documentation pretty sure however seems right undocumented functionality least far could see feel like documentation completeness avoid possible naming confusion maybe undocumented avoid confusion collection show docs attribute model however usage model within collection talked faq gt nested models collections think overall documentation would benefit added", "d": "3/2012"}, {"body": "thanks fix although referring collection property model inside collection c new backbonecollection new backbonemodel consolelog mcollection undefined cadd consolelog mcollection object gets added collection c get new property collection references c collection property undocumented mcollection feel nt meant used publicly mcollection meant used documentation missing", "d": "3/2012"}, {"body": "looks like fixed master pushed place ghpages branch yet nt able actually find commit fixed issue def seeing sentence correctly master however see typo ive site ghpages branch sure manage getting documentation updated github branch hopefully someone come update close issue well get fixes see master live docs", "d": "3/2012"}, {"body": "hi amandoi thanks question probably wo nt get much response though took liberty posting mailing list think much better luck", "d": "3/2012"}, {"body": "correct discussed collection fully initialized including called first models added two choices situation add model constructor calling super constructor add model creating collection hope helps", "d": "3/2012"}, {"body": "yes easy way access jqxhr object would useful", "d": "3/2012"}, {"body": "nope pass concrete element view overriding default element created etc semantics want", "d": "3/2012"}, {"body": "ended something like instead", "d": "3/2012"}, {"body": "remember javascript objects passed reference include object default value shared among instances expected behavior use function defaults return object contains reference type", "d": "3/2012"}, {"body": "yes intentional different behavior provided function please see information", "d": "3/2012"}, {"body": "long time position reasoning along lines duplicate models collection indicate application logic error warned early number folks appreciate sloppy adds keep trying add models collection without checking first made change forgiving feel free override copy early check error like", "d": "3/2012"}, {"body": "loose coupling models objects want observe state definitely good thing however questions regarding proposal different existing events already fired successful failed ajax calls change discussed made think would suffice fired different akin jquery think easy enough use use case showing loading status model altering state request sent rather like idea though think prefer used past overriding like given ease implemented inclined think best left apps plugins", "d": "3/2012"}, {"body": "another quick note agree also fire xhr method included", "d": "3/2012"}, {"body": "would moreorless alias per error current implementation existing event triggered idempotent operations like would fired operation completed regardless whether succeeded failed going back indicators hide loading indicator event events map jquery success error complete beforesend events known prefilters mentioned question use cases ca nt predict use cases used however like events backbone provided tool many possible applications give us tools decide use moreorless philosophy ruby backbone seems inspired hooks merrier observablesevents sane way keep realtime interface sync backend data processes backbone opinion going way provide many event hooks possible ideally events alone drive interface ui events data events communication events etc", "d": "3/2012"}, {"body": "hrm appears might fix stay tuned", "d": "3/2012"}, {"body": "yes pull request fixes issue hopefully get merged backbonerelational soon", "d": "3/2012"}, {"body": "explicitly provided backbone provide necessary tools accomplish discussed recently would mind directing comments thread", "d": "3/2012"}, {"body": "actually check nt decide object added decides converted model added probably filter models calling possibly overriding collection", "d": "3/2012"}, {"body": "ca nt speak backbone devs experience nt like supporting use cases nt use least nt intend library words wo nt see fully supporting modelscollections attributes models objects default values case nested collections even though lots people want use backbone way suspect ticket gone days response bad news good news though devs willing support cases backbone proper problem fact think encourage people building solutions issues designed framework way pretty open modifications recommendation similar issue override preparemodel collection overridden version follows preparemodel function model options model instanceof mycollection could change backbonecollection allow collection modelcollection modelcollection set collection property original method would return model handle normal noncollection case return backbonecollectionprototypepreparemodelapply arguments nt perfect solution involves overriding underscored ie psuedoprivate method possible future versions backbone add functionality preparemodel update override accordingly ever happens however used override successfully nt mind one potential downside works great letting add collections collections", "d": "3/2012"}, {"body": "would likely want opposed adding backbone understand might want functionality feels specific backbones goals swoop take control navigate method whatever want quick sample something similar track page view via google analytics directly thru navigate method tracknavigate gt trackpageview trackpageview navigate windowbackbonehistoryprototypenavigate adjust navigate also calls method creation case would scroll top likely jquery oneliner", "d": "3/2012"}, {"body": "aterris right overriding listening event likely best way go", "d": "3/2012"}, {"body": "even obviously backbone issue tore bb code still dog slow", "d": "3/2012"}, {"body": "javascript closures allow access like var importantinfo important blahfetch success function importantinfo available", "d": "3/2012"}, {"body": "nt want write inline function want call function used elsewhere extremely common scenario kinds callback frameworks nt respond logical request saying workaround", "d": "3/2012"}, {"body": "development thinking backbonejs cool thank author", "d": "3/2012"}, {"body": "also experiencing sometimes invoking routing page everything gets stripped user gets redirected", "d": "3/2012"}, {"body": "looks like exists fixed master use time wait next tagged release", "d": "3/2012"}, {"body": "appears addressed issue already", "d": "3/2012"}, {"body": "awesome thanks brad", "d": "3/2012"}, {"body": "must use instead reason always evaluate function one used instantiate object", "d": "3/2012"}, {"body": "happens nt know parent view constructor point script eg javascript optionsuser true viewsuser else viewsguest var initialize function thisconstructorsuperinitializecall var v new", "d": "3/2012"}, {"body": "correct changing value use naturally inside initialize value instance instead reference classes name", "d": "3/2012"}, {"body": "biggest problem completely ignores prototype chain adding special semantics function certain name initialize instead headache call super javascript var backboneviewextend initialize function options consolelog var initialize function options options consolelog coffeescript class extends backboneview initialize gt consolelog class extends initialize gt super consolelog", "d": "3/2012"}, {"body": "callback", "d": "3/2012"}, {"body": "synchronous function nt need callback whatever need next line", "d": "3/2012"}, {"body": "agree altering options undesirable copying prohibitively expensive please see discussions details", "d": "3/2012"}, {"body": "agree cloning argument expensive way solve problem please see approach", "d": "3/2012"}, {"body": "seems like complicated solution problem something like instead", "d": "3/2012"}, {"body": "solve real problem problem call expensive backbone avoids cost making options immutable application pay general idea backbone avoid cloning knows options revert changes much cheaper nt think overcomplicated basic wrapper pattern save state call wrapped function restore state soon wrapper reasonable use", "d": "3/2012"}, {"body": "discussed issue see details change issue ran issue issue day however ended overriding constructor work around current behavior collections", "d": "3/2012"}, {"body": "thx replied", "d": "3/2012"}, {"body": "afraid nt understand question issue router working far know", "d": "3/2012"}, {"body": "like ok tab paging example become", "d": "3/2012"}, {"body": "perfectly normal since child classes share reference parent prototype properties object accessed cases believe looking following sets property instance time new one initialized hope helps", "d": "3/2012"}, {"body": "yep thanks case someone wants dig info related stackoverflow question", "d": "3/2012"}, {"body": "need use setters", "d": "3/2012"}, {"body": "paulmillr right see default implementation tojson also docs uses values", "d": "3/2012"}, {"body": "oops thanks lot great replies apologies investigating enough creating issue", "d": "3/2012"}, {"body": "mean multiple actions far know backbone already history support user clicks back button previous route triggered opportunity reload previous state something need besides", "d": "3/2012"}, {"body": "sure explain application library administration software application check check create records search catalog etc consider action many things application actions contained within tab many tabs open like history tabs tracked backbone history feature possible track tabs", "d": "3/2012"}, {"body": "sure tab associated url route backbone certainly able track browser history", "d": "3/2012"}, {"body": "could give example ca nt see would work", "d": "3/2012"}, {"body": "sure thing general structure would follows javascript var router backbonerouterextend routes function navigate function navigate know bit simplistic exactly sure looking user navigates corresponding function called ui reflects interaction user navigates corresponding function called user clicks back button url changes back corresponding function called mean", "d": "3/2012"}, {"body": "need track user tab tab", "d": "3/2012"}, {"body": "see want save state tab definitely possible probably appropriate place discuss strategies think much better luck asking mailing list", "d": "3/2012"}, {"body": "mean url nt resolve hosted using github pages yesterday outage try", "d": "3/2012"}, {"body": "reason following suffice", "d": "3/2012"}, {"body": "yes looks like would work best solution far one would also work think like better var mycollection new backbonecollection mycollectionmodel mymodel mycollectionreset jsonarrayofmodels appreciate tradeoff involved adding additional option seems like common need would useful able var mycollection new backbonecollection jsonarrayofmodels model mymodel especially people new backbone still trying understand pieces fit together", "d": "3/2012"}, {"body": "situations think snippet work however agree handy option available", "d": "3/2012"}, {"body": "like option well", "d": "3/2012"}, {"body": "return value think reasonable choice could however made explicit documentation nt seem indicate anywhere return jqxhr definitely remedied", "d": "3/2012"}, {"body": "update fixed error suggestion", "d": "3/2012"}, {"body": "correct events currently triggered however since called make sure list mutated iteration hence call creating new immutable list nodes code pass test suite", "d": "3/2012"}, {"body": "nt tried yet noticed browsing code check nt ill close issue", "d": "3/2012"}, {"body": "nt test fails unbind alter callback list closing", "d": "3/2012"}, {"body": "probably backbone maintainers tell soon backbone designed accomplish form validation use better suited jquery plugin framework", "d": "3/2012"}, {"body": "see asking essentially remove impediment building validation top backbone quite taken much prefer centralize validation logic model", "d": "3/2012"}, {"body": "really must already accomplish without extra options however purpose get invalid state building top circumventing goal seems bit self defeating", "d": "3/2012"}, {"body": "braddunbar right backbone also gives tools need build exactly behavior instead using builtin validate different purpose initialize function thisbind change thischeck check function thisisvalid thistrigger error etc etc", "d": "3/2012"}, {"body": "definitely way accomplish think ideal api would would satisfy needs", "d": "3/2012"}, {"body": "would work well", "d": "3/2012"}, {"body": "think feature would work greatly general question regarding braddunbar solution unbind listeners context model would also suggest option define model parameter resulting unbinding context events specific model", "d": "3/2012"}, {"body": "example modelviewcollectionetc would remove handlers whatever constructor happens", "d": "3/2012"}, {"body": "get makes complete sense thanks typical viewmodel scenario like hlship example would using something like instead multiple calls", "d": "3/2012"}, {"body": "personally like clean simple easy remember", "d": "3/2012"}, {"body": "bad lt facepalm white space issue please close issue", "d": "3/2012"}, {"body": "fyi close issues created see top right comment area", "d": "3/2012"}, {"body": "familiar setup nt really appropriate place question like think much succes mailing list thanks", "d": "3/2012"}, {"body": "think problem much backbone slim giving error put request presented", "d": "3/2012"}, {"body": "think actually clear model simply like reset default values", "d": "3/2012"}, {"body": "maybe would good implement could automatically deal", "d": "3/2012"}, {"body": "opinion current functionality consistent since create new empty model defaults set default call clear backbone function reset model initial state support user create class override clear method places code use even thousand calls code", "d": "3/2012"}, {"body": "really worried duplicating code use backbone extensibility adding new method", "d": "3/2012"}, {"body": "well worrying duplicating code since already fixed disadvantage sources overriding clear abstractmodel class want highlight current backbone implementation opinion inconsistent area", "d": "3/2012"}, {"body": "bit digging found seems bind touch events element added dom updated jsfiddle works nice", "d": "3/2012"}, {"body": "thanks report sounds like ios bug fixed need call delegateevents get events bind certainly meantime", "d": "3/2012"}, {"body": "correct way supposed work returning objects constructors javascript antipattern use factory method instead", "d": "3/2012"}, {"body": "correct wrong nt mit license gpl compatible mit license page wikipedia license also gplcompatible meaning gpl permits combination redistribution software uses mit license", "d": "3/2012"}, {"body": "thanks clarifying question sindresorhus expert licensing indeed correct mit compatible gpl comment indicates could hosted drupal drupalorg policy hosting party libraries except necessary reasons complexity seems like drupal backbone team got bit work get backbone integrated drupal might consider adding drupal core dream point users download whole js files closing", "d": "3/2012"}, {"body": "yep mit pretty much whatever like including integrating drupal suite code let know get static using drupal plans sound interesting keep posted", "d": "3/2012"}, {"body": "correct wrong issues app stores gpl licenses transmissionbt duallicensed mitgpl seems ca nt enter mac app store case strongly prefer able sell backbonebased apps instead chance using integrated backbone amp drupal", "d": "3/2012"}, {"body": "paulmillr gpl license nothing mit license", "d": "3/2012"}, {"body": "think alright time given ca nt yet rely crossbrowser yet", "d": "3/2012"}, {"body": "right want bind object error event need reference object first", "d": "3/2012"}, {"body": "though nt defeat purpose nice error event bind object supposed use new set save instead create curious create little different new save", "d": "3/2012"}, {"body": "logical order things possibly listen event object reference object", "d": "3/2012"}, {"body": "yes understand think misled without giving model object collectioncreate create new model object validate trigger error save giving model object binded collectioncreate skip validation go straight save basically triggers bind object nt trigger bind object perhaps natural way using collectioncreate sorry trying argue want understand", "d": "3/2012"}, {"body": "hey hetsch really like route testing named params could join documentcloud freenode talk", "d": "3/2012"}, {"body": "tbranyen sure waiting", "d": "3/2012"}, {"body": "would nice afraid support arbitrary regexes routing clean route strings afraid ca nt support makes great backbone plugin", "d": "3/2012"}, {"body": "intended behavior passing delays change events fired thus delays reset later call fire events reset solve problem", "d": "3/2012"}, {"body": "scenario little bit different weird unset attribute say x silent true made ajax call populate attribute x data get unsetting attribute x change event never triggered haschanged method retruns false thus modelchange trigger change event never trigger change event point previousattributes never set null unset hoping made clear explanation let know u need example", "d": "3/2012"}, {"body": "yes clear example scenario change never fire perspective model value never changed passing tells model ignore changes next time called want behavior ca nt pass", "d": "3/2012"}, {"body": "see point thanks lot time explanation closing isssue", "d": "3/2012"}, {"body": "problem thanks taking time report way make docs clearer point get issue lot tried clarify feel like people still nt get right away", "d": "3/2012"}, {"body": "love send u pull request weekend works", "d": "3/2012"}, {"body": "wonderful thank", "d": "3/2012"}, {"body": "localstorage adapter using", "d": "3/2012"}, {"body": "using one todos app uses one version", "d": "3/2012"}, {"body": "nested save within change events fine using latest backbone important thing nt using demo localstorage adapter anything demo todo app example", "d": "3/2012"}, {"body": "clarify using exact version used todos example showing example easy reproduce issue look case provided nt think issue localstorage adapter suggesting recommended use localstorage backbone merely version shown example latter link better localstorage adapter former link documentation", "d": "3/2012"}, {"body": "regarding localstorage wiki maintained community folks post things vetting plugins listed saying localstorage example used todo app nt intended real use infinite loop save function causes change event fire change event causes save function run yes infinite loop nt much backbone feel free remove call event handler use change logic noop nt cause change", "d": "3/2012"}, {"body": "something backbone call model backbone internally calls returned attributes function supposed figure whether attributes changed believe lines trigger change event needed case localstorage adapter code incorrectly deducing returned attributes changed nt lot time track cursory step firebug object still shows changes save new attrs object model attributes causing backbone trigger change event immediately saving anyway causing infinite loop believe localstorage save synchronous saves asynchronous synchronous save causing sort race condition try dig little deeper time meaning bug report taken please tracking help fix issue", "d": "3/2012"}, {"body": "digging deeper issue seems conditional line called function registered event true conditional run set true line assume check put case functions registered events manually call however downside produces infinite loop synchronous saves registered events seems like solution create queue changes queue would solve race condition issue prevent check things like backbone internal function happy submit pull request interested change", "d": "3/2012"}, {"body": "philipwalton looks though using backbone would mind trying latest master code changed significantly since think perhaps issues would solved", "d": "3/2012"}, {"body": "braddunbar right using switching latests fixed issue infinite loop looks like still double loop synching twice stopping since likely different issue investigate post separate issue find anything worth noting", "d": "3/2012"}, {"body": "afraid nt know reproduce problem probably nt much help let reopen test case check", "d": "3/2012"}, {"body": "would primary use case would used", "d": "3/2012"}, {"body": "use case would nice routers definitely singleviewspecific normal router handle urls tens hundreds internal views nt think adopt change", "d": "3/2012"}, {"body": "clear problem options argument altered include", "d": "3/2012"}, {"body": "yes exactly thanks brad dunbar reply replygithubcom guysadger guysadger yahoocom sent wednesday march pm subject backbone backbone unset bug clear problem options argument altered include reply email directly view github", "d": "3/2012"}, {"body": "although change would convenient turns costs outweigh benefits discussed pass object throw away reference", "d": "3/2012"}, {"body": "pretty sure previous version current one fixed asap", "d": "3/2012"}, {"body": "sure get diff view indexhtml state backbonesync makes mention case currently backbonesync doc says suppose could clearer modified permodel basis perhaps adding function reference underneath model doc menu like would make explicit sync overridden thoughts", "d": "3/2012"}, {"body": "override suggests redefine follows definitely imply override single model", "d": "3/2012"}, {"body": "agree nt clear detail would beneficial either directly backbonesync documentation underneath documentation backbonemodel", "d": "3/2012"}, {"body": "agree someone ask today", "d": "3/2012"}, {"body": "give irc channel mailing list try better able assist", "d": "3/2012"}, {"body": "expected behavior server sends attributes would like change client side clientside model state get blown away", "d": "3/2012"}, {"body": "expected documentation misleading fetch modelfetch options resets model state server useful model never populated data like ensure latest server state second really goes rest principles common sense server know state currently client delete attributes needed", "d": "3/2012"}, {"body": "think also related implement asked need reset collection existing models exactly server state update leaving phantom old attributes", "d": "3/2012"}, {"body": "also different resets models changes server would like add true different really adds whatever objects updating either seems like consistent behavior worse obviousexpected newcomers make poll provedisprove took time debugunderstand could turn others although backbone wonderful library overall propose changing default resetting model adding option maybe update true current behavior case anyone relies make patch agree change ps discovered never used model fetch documentcloud intentional", "d": "3/2012"}, {"body": "jashkenas even open discussion issue still think current default behavior needs reconsideration could provide code decide give try", "d": "3/2012"}, {"body": "general backbone try support commoncase default semantics get fetches state resource server clientsideonly state get destroyed similarly puting backbone model server probably nt set columns corresponding database table like different semantics great backbone give tools case easy enough", "d": "3/2012"}, {"body": "enough unfortunately model stays empty request inflight breaks things would need rewrite fetch scratch make behave commonsense default semantics would argue much common sense clientside model object local representationcache http resource fetch operation syncs resource current behavior clientonly state still getting destroyed dont write specific server code support client model get messed old attributes hanging around new attributes common sense mine maybe could open issue people could think us comment", "d": "3/2012"}, {"body": "sure thing", "d": "3/2012"}, {"body": "thanks", "d": "3/2012"}, {"body": "ok discussed irc results pro change resource optional attributes fetched several times refreshed model state screwed bug seems bizarre con change seems optional attributes prevalent natural see highlevel property names part api fex default rails get columns json property names every time even null people keep ui state model along server attributes arguably really good practice case developer must sure client attributes clash server attributes way model safely fetched client state kept mostly problem splits two really rare server resource attributes optional yet research widelyused public apis optional attributes enough reallife usage would suggest add option ala add true collection fetch case documentation must updated reflect cases currently really misleading", "d": "3/2012"}, {"body": "tend agree generally consistency nice resets collection perhaps reset model well unfortunately many cases use model let say user track model changes used reflect state ui tradeoff serverside data validation know attributes model valid ones invalid suggestion introducing collectionmodel method achieves op request existing applications need upgrading next version need change calls keep functionality already using modified version backbone collectionupdate modelupdate similar solution akin jeremy fetch overload collectionfetch resets collection models server also create new models new cid collectionupdate updates collection new models nt reset models keeps cid references alive got events bound models modelfetch resets model data server removes attributes currently set keeps cid modelupdate updates model attributes server nt remove difference attributes", "d": "3/2012"}, {"body": "closing ticket discussed still think current semantics useful default semantics functions looking currently easy write backbone said also happy take look pull request holistically addresses mergevsreset styles update", "d": "3/2012"}, {"body": "nope indicates operation completed model successfully present collection", "d": "3/2012"}, {"body": "ah ok worries", "d": "3/2012"}, {"body": "makes sense", "d": "3/2012"}, {"body": "last two apps use collections custom urls saving models becomes really inconvenient inherit collection url", "d": "3/2012"}, {"body": "little iffy classlevel might considered less specific collection url yall agree", "d": "3/2012"}, {"body": "", "d": "3/2012"}, {"body": "jashkenas well whatever interface defines case url urlroot defined backbone model something programmer manipulate urlroot less specific specifically designed root url url generates class vs object level urlroot treated differently algorithm maybe justifies different variable indicate intention expect url property cascade able override cents", "d": "3/2012"}, {"body": "ahh see modified bad thanks", "d": "3/2012"}, {"body": "nt change make sort difficult create freefloating model separately collection code creating model adding collection later set urlroot model order able model added collection later would pick url collection longer case way accomplish scenario", "d": "3/2012"}, {"body": "kevindente well change nt affect free floating model opposite fact like dgbeck said model final word url collection needs add model collection remove model urlroot ii override concrete model url function check collection urlroot first hth", "d": "3/2012"}, {"body": "twashing ok traced bit understand going access url initializer throws new freefloating objects urlroot nt set able wrap call isnew check avoid problem sorry confusion think well", "d": "3/2012"}, {"body": "one way thought getting around would work way backwards serverside would anyone recommend terms performance another way would also add foreign key model direct look without going bookshelf layer like would little redundant would spare lots queries especially start nesting even deeper two levels using mongodb redundancy order gain performance denormalizing nt abnormal let assume using rdbms please advise", "d": "3/2012"}, {"body": "serverside question probably better luck irc mailing list bug ticket tracker assuming rdbms lookup book validate current user edit access delete", "d": "3/2012"}, {"body": "plan provide backbone goes away jquery api integration light pretty easy make mootools version see old project example", "d": "3/2012"}, {"body": "", "d": "3/2012"}, {"body": "noticed issue well however disagree documentation updated account functionality functionality changed match documentation removing line way retrieve attribute delta validate method attrs extend thisattributes attrs", "d": "3/2012"}, {"body": "merged updated documentation", "d": "3/2012"}, {"body": "lxb perfect solution easily calculate attributes delta inside method using underscorejs", "d": "3/2012"}, {"body": "sure kinds changes could fit well backbone philosophy views handle including base app object create app view nt persistent server mixin already present via extend method real class ala java js mess imho although understand kind structure useful complex app others frameworks ember better job usecases create backbone plugin seems another decent option cents curious see others opinions subject", "d": "3/2012"}, {"body": "agree second point global application object however think problem lack documentation keep backbone app maintainable tutorials find solutions authors try something like would nice forced reinvent wheel follow documented pattern app organization nt feel first point useful working coffee script imo backbone coffee works well code elegant", "d": "3/2012"}, {"body": "backbone nt intended basic objectorientationhelper library js lots backbone stay debate possible base application object good idea go right ahead windowapp appmodelscontactlist appmodelscontact", "d": "3/2012"}, {"body": "complex backbone apps total mess bad guruguys want commit rails guess lot us really need soon build something todo app try extend core fit needs since pretty much suck lowlevel javascript thing guess look another framework future needs", "d": "3/2012"}, {"body": "use coffeescript solves oop problems also brunch makes rails backbone provides cool structure days also provide bunch cool predefined stuff", "d": "3/2012"}, {"body": "never really looked coffeescript get real added value switching needtobecompiled language obvious css amp lesssass also fan indentation critical thing maybe time dig little definitely check brunch thanks pointing", "d": "3/2012"}, {"body": "though might make sense keep extend amp constructor top", "d": "3/2012"}, {"body": "quite right tries order group things logically basic standard functionality fancier things think quality worth preserving looking particular function instead scanning alphabetically use search page", "d": "3/2012"}, {"body": "latest backbonelocalstorage work example please take look merge maybe updating example someone could update latest version ls well", "d": "3/2012"}, {"body": "happy update pr support latest backbonelocalstorage elfpavlik nt difficult", "d": "3/2012"}, {"body": "closing favor new pull request", "d": "3/2012"}, {"body": "nt sound like bug root app empty string change state unless understanding incorrectly either way feel free send along pull request failing test case use case take closer look", "d": "3/2012"}, {"body": "thanks exploring jalada think patch sensible actually longer applies made success callback reasonable remove", "d": "3/2012"}, {"body": "think general rule stay howtodoobjectorientationinjavascript debate backbone might one day expose generic class object nt", "d": "3/2012"}, {"body": "braddunbar particular issues addressed past month still impasse push comes shove nt think need religious able handle every possible recursive pattern", "d": "3/2012"}, {"body": "nt able resolve still sure address inclined agree handling recursive cases nt necessarily desirable", "d": "3/2012"}, {"body": "alright given value solves particular ticket let leave entertain pull requests anyone use cases combinations listed", "d": "3/2012"}, {"body": "nt permission reopen issue love add comment way app works want bind sync event occasional provide success callback thanks", "d": "3/2012"}, {"body": "looks like set visavis ticket duplicate model additions noop master", "d": "3/2012"}, {"body": "actually seeing latest well even change happens also copy url hash open new tab paste go", "d": "3/2012"}, {"body": "thanks checking take another look", "d": "3/2012"}, {"body": "tried reproduce page gist root repo appears work correctly one x produced get different results submit reduced test case", "d": "3/2012"}, {"body": "yep works fine", "d": "3/2012"}, {"body": "sure state reproducing bug certainly ca nt reproduce master feel free send us patch test let us reproduce problem still trouble", "d": "3/2012"}, {"body": "glad entertain pull request smart resets already easy accomplish tools backbone gives etc furthermore deal number api choices right answer model present collection response delete model present response collection add work infinitescrollstyle collections fetching window models server", "d": "3/2012"}, {"body": "happening general javascript using backbonejs tried pass html element object jsonstringify modern browsers xmlserializer api turning html xml elements string prior json encoding", "d": "3/2012"}, {"body": "change pretty regressive imo changed workflow break legacy apps current implementation makes sense maybe adding hook postinit way one expected override initialize would allow cover needs allow previous behavior along new providing way access mint models reverting previous implementation constructor think", "d": "3/2012"}, {"body": "think pick one better way stick like access new models constructing collection", "d": "3/2012"}, {"body": "yes guess providing one workflow way go really say two usecases likely common say able pass models initialization time argument unable make anything pretty useless hand legitimate need exposed issue current time extracall think providing noop default hook would get triggered initialization one dive without monkey patching requiring extramessy code backbone core", "d": "3/2012"}, {"body": "think providing noop default hook would get triggered initialization think less clear simply calling additional method", "d": "3/2012"}, {"body": "personally find current behavior calling initialize reset correct theory however practice think previous behavior widely used expected ran exact issue last week overrode constructor get desired behavior", "d": "3/2012"}, {"body": "stick extra call redef maybe adding bit doc would sweet", "d": "3/2012"}, {"body": "agree michaf using loadurl function right need functionality app initial view built server use backbone router means initializing view javascript user app clicking around use historyrouter pull additional jsdata necessary init subsequent views without page reload anyone see reason loadurl function could cause problem open separate bug", "d": "3/2012"}, {"body": "looks like rails going make heavy use patch", "d": "3/2012"}, {"body": "reference purposes latest version specification", "d": "3/2012"}, {"body": "could reproduce backbone triggers events expectedl", "d": "3/2012"}, {"body": "following pattern getting overridden behavior using latest version code described patch javascript var baseview backboneviewextend extend function alert extend called return backboneviewextendcall arguments var subview baseviewextend nothing var baseviewprototypeextend alert shown use case identical want add postextension hook ideas problem could", "d": "3/2012"}, {"body": "jashkenas case view registered event listeners associated model collection remove view dom modelcollection still holds reference view wo nt garbage collected johnny answer stack overflow question addresses issue nicely first comment answer dmitry polushkin also brings good point destruction nested views think backbone provide mechanism view remember objects hold references via event listeners listeners could removed automatically view removed would receptive something like backbone core", "d": "3/2012"}, {"body": "would receptive something like backbone core sure ends something useful apps apps tend throw away views models time nt ever run issue", "d": "3/2012"}, {"body": "main problem person disability lot screen reader able run js lot work make backbonejs accessible google blind work make read js need easystandard way make stuff like works box search engine read js look roles see content actions know lot peoples nt care want play json fun stuff tell going major barrier web applications public market least documented", "d": "3/2012"}, {"body": "thiloplanz tchak guys ever discuss transport tchak xhr upload separate request via formdata backbone attribute request via ajax datatype json backbonesync default serialize model attributes formdata", "d": "3/2012"}, {"body": "looks like latest backbone index reported event accurate loops sorted collection triggering add events added models order appear sorted collection", "d": "3/2012"}, {"body": "nt major datastomping issue let say two users viewing model time first user saves change one attribute second user saves change different attribute immediately current logic overwrite changes made first user data get stomped opinion backbone send put request changed attributes entire model definition perform sync submitting put request ask user confirm overwrite made also nt sending entire model definition save going massively slow operation large schema definition would much efficient send attributes wish update missing something", "d": "3/2012"}]