[{"title": "setstate called twice trigger render twice", "body": "use examplesbasicclickcounterindexhtml change method add method click element invoked twice invoked one time invoked callback invoked multi times", "num": "5760", "d": "12/2015"}, {"title": "internal components", "body": "facebook plans releasing reusable components websites like reactive native know community making happen would good see components used internally facebookinstagram", "num": "5757", "d": "12/2015"}, {"title": "trigger new context changes", "body": "method triggers props change however situations context changes props method trigger makes really difficult alter state update ca nt perhaps new method like added previous simply renamed something like always called propstatecontext changed", "num": "5756", "d": "12/2015"}, {"title": "ie unable render elements popup window state changed", "body": "using encountered issue ie examplified following piece code javascript import react react import reactdom reactdom class example extends reactcomponent render return class anothercoolcomponent extends reactcomponent constructor props super props thisstate showsomething false showsomething thissetstate showsomething thisstateshowsomething render return thisstateshowsomething amp amp paragraph class popoutwindow extends reactcomponent constructor props super props thisstate openedwindow null componentdidmount var win container openedwindow componentdidupdate thisstateopenedwindowupdate thispropschildren render return windowaddeventlistener load function var container documentcreateelement div documentbodyappendchild container reactdomrender container issue state changes react tries render paragraph fails throwing error line state changes another error thrown probably happens element nt rendered tested chrome ff works fine", "num": "5755", "d": "12/2015"}, {"title": "way create pluggable decorating component", "body": "possible make pluggable aopstyle component transforms props transmits child precisely pass props child element parent render method want use like javascript scalablejs example aopstyle decorating component import react react const scalable children gt const scaleddata childrenpropsdatamap e gt e example transformation childrenpropsdata scaleddata children want scalableproptypes children reactproptypeselementisrequired javascript scalableplotjs plug transform data passed render transformed data import react react const scalableplot data gt js plotjs import react react const plot data paint plot using data plotproptypes data reactproptypesarrayof reactproptypesnumber however react renders child element without data props upd solution used reactcloneelement", "num": "5754", "d": "12/2015"}, {"title": "better tools debug needed", "body": "better tools debug needed rather current", "num": "5752", "d": "12/2015"}, {"title": "wrong version npm", "body": "instead versions npm indeed", "num": "5751", "d": "12/2015"}, {"title": "copyright messages need updated year", "body": "previously copyright messages needed updated every year see prevent need yearly copyright message updates touching almost every file adopt copyright message react native copyright becomes copyright", "num": "5747", "d": "12/2015"}, {"title": "replace native improve performance chrome", "body": "react autobinds methods components created slow chrome chromium derived browsers post discussing adaption test code one test google chrome finding calling bound function overhead even larger heavy math computation long fixes long standing issue new version adopted en masse meanwhile react may improve performance chrome writing", "num": "5745", "d": "12/2015"}, {"title": "ca nt use variable containing html set inner contents tag", "body": "getting error babel trying use dangerouslyset inner html div using gulpfile watch jsx files gulpfile const gulp require gulp const react require gulpbabel const babel require gulpbabel path object convenience var paths jsx staticjsxjsx js staticjs gulptask transform gt return gulpsrc pathsjsx pipe babel presets react pipe gulpdest staticjs gulptask watch function gulpwatch pathsjsx transform gulptask default watch problem try use code complains tokens unexpected array mapping return list elements item list string containing html tags paragraph interpreted html instead rendered literal text content nt hoping react problem babel linter stack trace starting transform throw er unhandled error event syntaxerror usersdaviddesktopmeetupprojectstaticjsxparentjsx unexpected token localeventsmap function item consolelog item return parserppraise parserppunexpected parserppexpect parserppjsxparseexpressioncontainer parserppjsxparseattributevalue parserppjsxparseattribute parserppjsxparseopeningelementat parserppjsxparseelementat parserppjsxparseelementat parserppjsxparseelement", "num": "5743", "d": "12/2015"}, {"title": "warn access", "body": "props reserved react used internally component authors may attempt access properties thinking could read value per could use dev mode warn accessed point user notediscussion somewhere way users actually run issue always get timely message sends directly relevant explanationdiscussion would good first bug decide actually want", "num": "5742", "d": "12/2015"}, {"title": "mouseenter event bubbling happens reverse order", "body": "expect mouseenter event bubble top element bottom way onclick event contrary bubbles bottom element top element chrome ff native mouseenter bubbling works expected top bottom also mouseover bubbles top bottom expected either native react", "num": "5739", "d": "12/2015"}, {"title": "react props change object array", "body": "", "num": "5738", "d": "12/2015"}, {"title": "children component mounted parent compoent", "body": "hi page want get host detail main view think actually", "num": "5737", "d": "12/2015"}, {"title": "svg attributes set namespace", "body": "say view rendering loop first render displays instances fine newly appended would show also calling would return returning initial nodes jsbin example reproducible issue", "num": "5734", "d": "12/2015"}, {"title": "difference currenttarget target syntheticevent", "body": "properties syntheticevent currenttarget target identical usage difference", "num": "5733", "d": "12/2015"}, {"title": "support svg strokelinejoin attribute", "body": "support svg attribute", "num": "5726", "d": "12/2015"}, {"title": "error invariant violation findallinrenderedtree instance must composite component", "body": "hello writing test cases project new jest taken long time configure days started writing test case written test case mentioned test giving error stuck facing error since days error ran command please help resolve problem thanks jameer khan", "num": "5723", "d": "12/2015"}, {"title": "bug componentwillunmount called componentdidmount", "body": "called must impossible additional check calling inside causes code example output jsbin example javascript import react component react import render finddomnode reactdom let buggyuid class buggybehavior extends component constructor super thisbuggy buggyuid componentdidmount consolelog didmount thisbuggy finddomnode componentwillunmount consolelog willunmount thisbuggy render return class willreceiveupdater extends component componentwillreceiveprops nextprops nextpropsinterval nextpropsprop nextpropssetinterval nextpropsinterval nextpropsprop render return class main extends component constructor super thisuid thisstate data interval b uid componentdidmount settimeout gt thissetstate data uid thisuid setinterval value gt thissetstate interval value uid thisuid render return const app gt render documentgetelementbyid root code output example", "num": "5719", "d": "12/2015"}, {"title": "server client render markup react still indicates checksum invalid", "body": "", "num": "5717", "d": "12/2015"}, {"title": "diffpatch markdown preview", "body": "preview huge markdown file changes dangerouslysetinnerhtml slow use react smart innerhtml nt know thx", "num": "5710", "d": "12/2015"}, {"title": "add code coverage reporting", "body": "jest report coveralls code climate nt matter nt require much work need finishing touches ben travisci integration plan soon nobody else jumps", "num": "5704", "d": "12/2015"}, {"title": "add inbrowser unit testing", "body": "currently nt run unit test suite browsers open source run internal web driver suites facebook however nt helpful external contributors helpful browser vendors since ca nt run tests builds disabled solve issues replace new runner would great community", "num": "5703", "d": "12/2015"}, {"title": "datatransfer dropeffect working ieedge minified version reactjs", "body": "code exmaple nonminified version minified version code html js difference referenced different version reactjs files three boxes dragging drag box show start top show dragged either normal drop drop react box show end drop two drop boxes everything works fine firefox minified version works fine ie edge thing dose work nonminified version ieedge dragging drop react box shows console see lines get result thought also accessible ieedge nonminified version reactjs files", "num": "5700", "d": "12/2015"}, {"title": "consequences unsynchronized clientserver renders", "body": "consequences client render sync server render example button want users javascript disabled able access nt want react client app takes would like minimize file size using instead two questions basically summarized performance consequences rendering slightly different dom tree server mounting nonempty dom", "num": "5696", "d": "12/2015"}, {"title": "testutils shallowrenderer automatically call componentdidmount", "body": "hi got case try use shallowrenderer test component ex test consolelog called wo nt work componentjsx class testcomponent extends reactcomponent componentdidmount consolelog componentdidmount render return componenttestjs", "num": "5690", "d": "12/2015"}, {"title": "would one pass latex code component", "body": "fairly rare given internet means unusual situation need embed latex code needs interpreted later mathjax katex etc following code nt work due jsx intepretation bits inside point point distance ratio frac percentage new point distance cdot ratio using tempating strings also nt work gets interpreted instead point point distance ratio frac percentage new point distance cdot ratio coure double escaping works becomes impossible read write point point distance ratio frac percentage new point distance cdot ratio jsx feature turns interpretation element something like treats text inside element untouchable point point distance ratio frac percentage new point distance cdot ratio", "num": "5688", "d": "12/2015"}, {"title": "invalid string style definition breaks ie safari", "body": "pesky bug hard track react defining key twice element finally discovered defined element like clearly mistaketypo part production code caused duplicate entry object breaks ie safari would nice see invariant warning something may using sure", "num": "5684", "d": "12/2015"}, {"title": "click events delayed render causing clicks incorrect nodes", "body": "got weird one take bit explain app filter drop menu opened shows options appears large chunk content composed number clickable tiles one appears underneath filter menu filter menu opened clicked react watching onclick event responds triggering url update tiles rerender blocking manner per react way life works fine single click tricky part comes two clicks happen dead dropdown menu element rest page rerendering since tiles numerous contain complex graphs page takes upwards seconds render new macbook pro blocking ui entire time react executes gigantic amount pure javascript recalculate render graphs oof graphs recalculated gigantic blocking function completes additional clicks menu execute way would expect instead clicking menu seem click whatever appeared result rerendering case clickable tiles double click causes app switch pages view details tile seems though react keeping track xy coordinates click applying whatever rerender happens things tried nt helped tried capturing click many levels filter drop menu try prevent event propogation realized nt even clicking menu deferred executing hopefully clicks could pile rendering solved making menu go away keep clicking tiles rerender rerendered actually clicked new tiles confusing expected behavior understand events queued later would expect click events apply elements events happened whatever shows render expected suggestions working around", "num": "5682", "d": "12/2015"}, {"title": "remove reactlibwebcomponentsjs npm package", "body": "react file nt shipped part npm package looks like changes happened build system since file shipped npm perhaps unintentionally less sophisticated build systems nt ignore unused files might bundling client perhaps nt change could worth investigating unused files", "num": "5681", "d": "12/2015"}, {"title": "improve documentation using react webpack", "body": "made clear could better improved situation slightly still nt discuss actually use things together quickest short term fix would explicitly describe would use defineplugin envify nice concise longer term like flushed docs around using react start finish browserify webpack maybe needed let start simple", "num": "5679", "d": "12/2015"}, {"title": "style property lineheight pixels problem", "body": "hello setting lineheight number value dom set pixels would great work like height set value dom pixels attached jsfiddle link thanks", "num": "5678", "d": "12/2015"}, {"title": "stateless functional components shouldcomponentupdate", "body": "probably question documentation issue places doc read ideal world components would stateless functions stateless components follow faster code path within react core recommended pattern possible pattern designed encourage creation simple components comprise large portions apps future also able make performance optimizations specific components avoiding unnecessary checks memory allocations find unclear explainations react optimize rendering using stateless functional components good sense would react uses something similar know call function react enforce strict immutability yet mean purerendermixin actually option default wonder functional components behave think better documented memoization technique used rendering functional components obvious app perform almost better choose replace components using purerendermixin statelifecycle methods functional components nt much insights internal working optimizations done", "num": "5677", "d": "12/2015"}, {"title": "declare proptypes recursive data structures like tree", "body": "hi like something like guess really work ends calling know probably javascript limitation due implementing lazy evaluation way declare structure properly proptypes seen documented", "num": "5676", "d": "12/2015"}, {"title": "changelog upcoming release changes added", "body": "check diff current last stable release upcoming one master branch lot changes could changelog file updated along dev process way possible anticipate deprecations example", "num": "5675", "d": "12/2015"}, {"title": "get index clicked element", "body": "list item want know one clicked user set onclik every item user get node clicked get issue items children nodes user click children inside element element want fix code js var react require react var reactdom require reactdom var cc reactcreateclass var app reactcreateclass getinitialstate function return arr reactdomrender documentgetelementbyid app user click inside return fix add attribute element children like nt think elegant way", "num": "5674", "d": "12/2015"}, {"title": "unclear documentation generating production build", "body": "mentioned react downloads page needs set production development warnings disabled suggests using searching quite bit found petehunt webpackhowto project could declare like tried setting nt work manually debug setting nodeenv nt removing warning like said would takes around generate production build every small change make need wait check change finally found react code check setting nodeenv passed global variable code since passed global variable code react checks uninitialised seems like actually need set process variable using tried got cyclic dependency error finally hack processenvnodeenv processenvnodeenv development new webpackdefineplugin process jsonstringify env processenv works development warnings removed turns quite small without setting nodeenv nodeenvproduction setting nodeenvproduction actually increases file size", "num": "5672", "d": "12/2015"}, {"title": "add alias methods react lifecycle components", "body": "classic example creating react class js export class counter extends reactcomponent componentwillreceiveprops nextprops nextcontext shouldcomponentupdate nextprops nextstate nextcontext render things find bothersome lifecycle method names problem including component method name redundant since extending class liskov substitution tells us subclass implementing implement behaviors since know class component saying redundant could well say redundancy may seem trivial typing boilerplate thus errorprone name nonorthogonal lt confused end typing often would like admit best distraction worst subtle source bugs proposed solution add alias methods fore lifecycle methods obviously require deprecation cycle need warn users using method names reasons seems somewhat common quick search github shows many people conclusion although may seem like bikeshedding think important save timeagony long future react users old new heart", "num": "5671", "d": "12/2015"}, {"title": "bug syntaxerror unexpected token", "body": "getting syntax error code js reactdomrender error happens line says written comments incorrectly may bug babel transformer", "num": "5670", "d": "12/2015"}, {"title": "value attributes invalid components rerendered properly", "body": "add attribute tag tag nt attribute work add attribute updated properly depends state trigger render wo nt change value real dom guessing incompatibilities virtual real dom allowed tags virtual dom knows ca nt add value real dom allows either way think bad fails silently believe either work completely give always error simple example reproduces problem see click button content div updated attribute dom happens chrome dev firefox", "num": "5669", "d": "12/2015"}, {"title": "remove install warning reacttools prefers installed globally", "body": "npm runs package script calls etc execution environment appended dir cli packages nt need installed globally work propery currently installation warning necessary npm major versions worth removing warning keep install log clean", "num": "5668", "d": "12/2015"}, {"title": "plan decouple reactdom react", "body": "since reactdom introduced sorry really buggy bundle react projects following line indexjs means require file directly require source code however save time bundle react make react component unaware whether always bundle directly use browserify expose module makes component always start following line usually bundle react sitecorejs app website sitecorejs completely independent use browserify expose module require components want react components want reactaddons till end require reactaddons component need get nothing expose problem reactcom always want require require duplicated react bundle see temp solution asking plan decouple reactdom react sorry asking", "num": "5667", "d": "12/2015"}, {"title": "react js display data text field particular selected id", "body": "following react render works successfully get single input tag error occurs error parse error line adjacent jsx elements must wrapped enclosing tag gt param object options options pass jstransform render multiple input text fields render function var currentid thisstatecurrentid", "num": "5665", "d": "12/2015"}, {"title": "", "body": "noticed calls function often wrapped conditional compiled redundant gates build process eg code compiled nt matter end since whole block removed dead code elimination uglify guess source files could cleaned nt checks missing something", "num": "5664", "d": "12/2015"}, {"title": "event order changes input field present initial render", "body": "difficult explain created jsfiddle code runs fine changing first variable null rerunning display issue experiencing sure expected behavior thanks advance guidance note experiencing version created fiddle version sure upgrading nt going resolve problem", "num": "5662", "d": "12/2015"}, {"title": "rules allowed static properties classes method", "body": "see", "num": "5661", "d": "12/2015"}, {"title": "stateless component performance", "body": "stateless components optimized using reactcreateelement arent rerendered props havent changed would nice mention docs significant difference following js somecomponent props gt return propshugelistmap performant props gt return notperformant props gt return somecomponent hugelist propsfriends may seem evident someone thinking functions", "num": "5660", "d": "12/2015"}, {"title": "reactcloneelement breaks children lifecycle events", "body": "try make easy understand probably pretty lengthy process converting toolkit library react started accordion component accordion components parent wrapper handles state events etc nested within rendered within seen rough implemented import accordion uicomponentsaccordionjsx phasellus viverra convallis ex sit amet convallis sed accumsan dignissim massa eu volutpat tellus semper quisque non lectus sit amet lectus consectetur tincidunt nec sem fusce lobortis blandit turpis vel vestibulum nulla egestas vitae vivamus quis orci vitae odio elementum facilisis vestibulum suscipit quam dictum ullamcorper sed lectus quam faucibus id pellentesque nec suscipit elit issue running pass props information parent children seeing implemented manually developer generated parent component simply ca nt define explicit props way currently solved cloning children passing custom props seen suggested google problem approach children recloned every time parent renders breaks child lifecycle events lifecycle event like receive props every render making extremely difficult see exactly changed top constantly recloning everything seems like expensive process also tried modifying child props readonly course quite annoying instance tried cloning children first render attempting update single props subsequent render turned really difficult nigh impossible thought using event system within parent hook children listen still could nt figure looking contexts seem new unstable feel like basic common use case supported yet giant pain right one issue either stackoverflow exactly best approach solving contexts deal cloning issue advice would appreciated", "num": "5659", "d": "12/2015"}, {"title": "use server side rendering react expressjs app", "body": "documentation nt neither examples links examples want know step step use react server expressjs application component files look connected templates layouts expressjs behave render react server include react components template components compiled advance many questions particularly dustjs template rendered way controller compile concat assets one file include template like want know use react server need change current routine compilerender react template server use get errors nt know mean react documentation nt errors explanations", "num": "5656", "d": "12/2015"}, {"title": "warning validatedomnesting appear child", "body": "using component renders getting error message console ideas", "num": "5652", "d": "12/2015"}, {"title": "optimizing componentwillreceiveprops shouldcomponentupdate", "body": "react component lifecycle dictates new props roll gets called calculate new state set without second cycle afterwards shouldcomponentupdate gets called compare props state last cycle next one however state product props makes sense check whether props changed calculating state unnecessary calculations avoided produces ugly looking code first runs code would otherwise based result sets new state terminates simplified example componentwillreceiveprops function nextprops nextprops thisprops return shouldcomponentupdate function nextprops nextstate return thisstate nextstate cleaner way approaching resources wasted unnecessary state calculations", "num": "5650", "d": "12/2015"}, {"title": "include testutils production version react", "body": "mozilla testing infrastructure firefox forces us use production build firefox represents exact build nightly user would use problem uses production version react testutils included need run js tests reason js code size included dev version forcefully include production version react work fine custom build right switch use dev version want fix asap", "num": "5649", "d": "12/2015"}, {"title": "image request pending frequently refreshing page", "body": "use server rendering write dynamic value function may proper react shows warning console refresh tab frequently image request tab pending problem dose disappear even remove dynamic value env react chrome osx babel", "num": "5645", "d": "12/2015"}, {"title": "reflects", "body": "note works perfectly fine earlier versions windows mac os x code js var test reactcreateclass getinitialstate function return value onchange function e thissetstate value etargetvalue consolelog etargetvalue render function return whenever onchange triggered assuming value starts changes correctly change value", "num": "5641", "d": "12/2015"}, {"title": "way disable getinitialstate warning", "body": "really like convenience api react decided reimplement simple wrapper around get annoying warning way disable warning since intentionally providing functionality", "num": "5639", "d": "12/2015"}, {"title": "inline event handlers get lost", "body": "bit hacking render function function need replace node react injects component making sure wo nt break ui layout components injected contain keep extra wrapping div dataregion breaks ui used function weird inline event handler nt work anymore works addeventhandler though style preserved seems inconsistent", "num": "5638", "d": "12/2015"}, {"title": "typeerror instrender function testing stateless functional components", "body": "functional component looks like included conventional component causes component test failing react jest npm node suggestions get rid", "num": "5637", "d": "12/2015"}, {"title": "anchor download attribute handling filename correct", "body": "according download attribute set download dialog box prompt filename set attribute file referred href tried react nt seem like change fixing issue master branch example expected behavior browser download dialog box imagejpg actual behavior browser download dialog box testjpg", "num": "5635", "d": "12/2015"}, {"title": "delete", "body": "oops sorry wrong place", "num": "5634", "d": "12/2015"}, {"title": "stop showing warnings errors", "body": "ca nt debug code warnings spam warning spam beyond control react router conflicts history nt resolved frustrating experience without recourse short installing date deps show warnings warnings", "num": "5632", "d": "12/2015"}, {"title": "null owner addcomponentasrefto hard fix", "body": "migrating ui encountered following error messages loading page tried fix still following simple component const test reactcreateclass handleclick consolelog thisrefstestvalue render return export default render targetid return reactdomrender documentgetelementbyid targetid clearly ref set method code fails investigated possibility twice react loaded one line sure proves anything since complex build generates code probably issue somewhere build ensured react code output script also put breakpoint reactcurrentowner line hit nt know sufficient load react went deeper debugging see call put breakpoints set non null value reactcompositecomponent lines reactmultichild line start application breakpoint hit twice time thiscurrentelementprops time reset null line call addcomponentasrefto done outside two windows owner null investigate", "num": "5631", "d": "12/2015"}, {"title": "react virtual dom v ios", "body": "hi sorting table works expected site opened desktop browser android device ios browsers safari chrome nothing happens sort icon changes state idea sorted source items map custom itemrow component implements shouldcomponentupdate avoid unnecessary renderings sort order change missed ios browsers", "num": "5627", "d": "12/2015"}, {"title": "missing onload onerror events svg tag", "body": "svg supposed far know support least onload onerror events supports looking react code events handled specific elements would easy create pull request add image cases seems separation js files handle dom svg codebase might collide correct adding cases functions right place also handle svg image", "num": "5626", "d": "12/2015"}, {"title": "prevent child onclick event parent onmouseup event", "body": "click mouse move click events apply within element area events defined parent element try prevent event component way via see need prevent childs event parent component via using", "num": "5625", "d": "12/2015"}, {"title": "reactaddonsupdate requires peer react none installed", "body": "get reactaddonsupdate requires peer react none installed error latests react update npm install reactaddonsupdate save working", "num": "5624", "d": "12/2015"}, {"title": "event bubbling onscroll appear consistent native behavior", "body": "two nested elements scrolled want listen parent scroll event textarea scrolled event bubbles parent onscroll event working example bug feature appears like ought bubble according spec workaround verify target element handling scroll event maybe preventing textarea sending scroll events tested react", "num": "5622", "d": "12/2015"}, {"title": "documentation refs shallow rendering", "body": "docs say refs shallow rendering shallow testing currently limitations namely supporting refs however shallow render component property present correctly using reactshallowtestutils like feature stable rely present", "num": "5620", "d": "12/2015"}, {"title": "webkitinputplaceholder", "body": "webkitinputplaceholder seems work add simple css works fine job anyone issue popular css attribute need customization options btw nt think react could crossbrowser support prefixed css stuff remove webkitinput moz ms prefix together react let think dom much still think browser prefixes", "num": "5619", "d": "12/2015"}, {"title": "stateless functions declared using named function statements", "body": "arrow function syntax suggested docs components declared using nt proper name say reactdevtools used instead guess could issue debugging", "num": "5618", "d": "12/2015"}, {"title": "svg attributes aria attributes different pattern", "body": "following jsx sample svg element raw html represented seems jsx attributes follow camelcase format immediately thought adding instead question pattern jsx attributes yes follow pattern fact like idea nt preprocess raw svg reactjs understand could expected behavior trying understand patterns different aria svg", "num": "5617", "d": "12/2015"}, {"title": "dangerouslysetinnerhtml nt apply style properties", "body": "hi guys got issue dangerouslysetinnerhtml problem decode html entities nt apply style properties thanks advance guys", "num": "5616", "d": "12/2015"}, {"title": "svg attributes support missing filter attribute", "body": "svg attributes support missing filter attribute crossbrowser way apply svg filters ie edge", "num": "5612", "d": "12/2015"}, {"title": "change devtools install message file urls", "body": "visiting file url devtools installed chrome get download react devtools better development experience nt work file urls might fixed chrome side could improve message say something like download react devtools use http server instead file url better development experience", "num": "5608", "d": "12/2015"}, {"title": "simulateclick nt propagate event", "body": "using components component renders something like jsx save new password test call handler gets called js var submitbutton testutilsfindrenderedcomponentwithtype renderedform button var submitbuttondom reactdomfinddomnode submitbutton testutilssimulateclick submitbuttondom", "num": "5606", "d": "12/2015"}, {"title": "rendering snap svg image", "body": "hi new react looking use snap svg rendering svg images views however quite sure best set using babel transpiler could explain best way add snap svg render view please really looking best practise rather completely wrong way thanks", "num": "5604", "d": "12/2015"}, {"title": "slow first user click handler", "body": "hello screen see profiler timeline react app first click handler slow think", "num": "5598", "d": "12/2015"}, {"title": "input onchange mounting", "body": "onchange event fired mounting input component dom occur chrome firefox new value event actual nothing changed scenario initial app render mounting component nested input user event action haschanged reproduction react min nonmin browser probably tested specific component structures could find minimum structure simple reproduce input looks like stack trace using nonminified reactwithaddons onchange event handlechange line col numericinputjsx linkedvalueutilsexecuteonchange line col reactwithaddonsjs handlechange line col reactwithaddonsjs reacterrorutilsinvokeguardedcallback line col reactwithaddonsjs executedispatch line col reactwithaddonsjs executedispatchesinorder line col reactwithaddonsjs executedispatchesandrelease line col reactwithaddonsjs executedispatchesandreleasetoplevel line col reactwithaddonsjs foreachaccumulated line col reactwithaddonsjs eventpluginhubprocesseventqueue line col reactwithaddonsjs runeventqueueinbatch line col reactwithaddonsjs reacteventemittermixinhandletoplevel line col reactwithaddonsjs handletoplevelwithoutpath line col reactwithaddonsjs handletoplevelimpl line col reactwithaddonsjs mixinperform line col reactwithaddonsjs reactdefaultbatchingstrategybatchedupdates line col reactwithaddonsjs batchedupdates line col reactwithaddonsjs reacteventlistenerdispatchevent line col reactwithaddonsjs", "num": "5597", "d": "12/2015"}, {"title": "always remove keys children shallow rendering", "body": "component alters children jsx compjs import react proptypes react const comp reactcreateclass proptypes children proptypesnodeisrequired export default comp testing whether children jsx comptestjs jestdontmock comp import react react import testutils reactaddonstestutils const comp require comp describe comp gt outputs given children gt const renderer testutilscreaterenderer rendererrender const result renderergetrenderoutput keys differ using would work fine want able alter shallow rendering try harder remove keys something wrong", "num": "5594", "d": "12/2015"}, {"title": "controlled reflecting correct state selection", "body": "case value depending state select baz item combobox nt anything onchange handler combobox suddenly displays first element even though state still state combobox inconsistent state value property seems happen least chrome safari", "num": "5592", "d": "12/2015"}, {"title": "calling setstate render causes infinite loop", "body": "may seem really silly call render however possible happen component callback called immediately render callback handler call", "num": "5591", "d": "12/2015"}, {"title": "svg display new elements state update", "body": "hello component way var iconessvg reactcreateclass getinitialstate function return icones positions componentdidmount function var c settimeout function csetstate icones positions component mounted everything works espected different locations rendered properly state updated sec demonstration new elements displayed fact present dom displayed probably due issues namespace cut amp paste firefox tools place suddenly appear", "num": "5586", "d": "12/2015"}, {"title": "reacttestutilssimulate nt fire portals", "body": "trying simulate event element portal event never fires simulate browser dispatchevent var mycomponent reactcreateclass handlemousedown function consolelog mouse pushed render function return rendered reacttestutilsrenderintodocument var mydiv renderedrefsmydiv reacttestutilssimulatemousedown mydiv var downevent documentcreateevent mouseevents downeventinitevent mousedown true true mydivdispatchevent downevent mouse pushed", "num": "5585", "d": "12/2015"}, {"title": "isomorphic code require different code server", "body": "docs example server side code example client side code thought isomorphic code supposed work automatically", "num": "5583", "d": "12/2015"}, {"title": "document recommended eslint config", "body": "sure intended nt see anything documentation using reactdom requires import react even react never required example project backbone shim view use merely render page component reactspecific transform occurs page however fails react available assume problem fact reactcreateelement needed conversion jsx js deduceable intuitive also causes linters fail import react without actually using anywhere cases imagine desirable behavior recommendations think bare minimum called explicitly somewhere apologies already missed", "num": "5582", "d": "12/2015"}, {"title": "could reactcsstransitiongroup use getcomputedstyle get transition timeouts automatically", "body": "reading new etc thought struck get timeout directly css transitioning classes applied transition group child anyone foresee problem approach", "num": "5580", "d": "12/2015"}, {"title": "android emulator displays weird error messages", "body": "delete please confused repository reactnative", "num": "5579", "d": "12/2015"}, {"title": "basic example precompiled jsx unexpected token", "body": "trying compile example ran two issues first seemed needed install babelcli able run next set commands get error syntaxerror examplejs unexpected token react successfully running seconds seconds return message still new using react probably user error figured put issue case", "num": "5578", "d": "12/2015"}, {"title": "onmouseover work chrome", "body": "using react something like render return trackmouseposition event object consolelog change eventclientx eventclienty firefox works chrome nt", "num": "5577", "d": "12/2015"}, {"title": "reactcsstransitiongroup delayed animation", "body": "something similar handle sliding updown content kind accordion like behaviour works fine content mounted problem occurs nodes need hidden replaced value case seems onenter animation fired empty node executing onleave animation previous node making leaving animation delayed time enter animation empty node nt happening think empty node nt animated entering dom onenter onleave animation triggered simultaneously using version", "num": "5575", "d": "12/2015"}, {"body": "yeah simple fix abort jqxhr although wonder whole pageexample eliminated example problems like handling updates components ajax bit antipattern anyway use something like flux ensure consistency across page deduplicate requests data", "d": "12/2015"}, {"body": "hi would like give shot new kindly guide process", "d": "12/2015"}, {"body": "calllater maybe solution var calllater new calllater var expensivemethod function expensivemethod invoked calllatercall expensivemethod calllatercall expensivemethod var calllater function var incalllaterphase var calllaterflag var tostring objectprototypetostring var methodmap function var data return add function f thisgetindex f datapush f f getindex function f var l datalength lt l data f f return return remove function f var thisgetindex f gt datasplice function callback var l datalength lt l callback data f data data reset function data thiscall function method args target incalllaterphase tostringcall method object function return", "d": "12/2015"}, {"body": "jsbin showing master", "d": "12/2015"}, {"body": "plans time components tightly integrated stack styles may open source couple things around complex patterns fixed data table one already published", "d": "12/2015"}, {"body": "fact trigger changes example fiddle used accomplished read using lifecycle methods", "d": "12/2015"}, {"body": "implementation work add never gets triggered even context constantly changes parent idea since example perhaps issue using latest react example carousel use edit curiosity added trigger still idea edit removed everything except basic render method still would trigger", "d": "12/2015"}, {"body": "debugging react source seems always trigger true clause seems agree original issue nt called props nt changed", "d": "12/2015"}, {"body": "might need create complete dom popup window rendering would helpful know markup inside popup looks like first render best guess ie done something different perhaps quirks mode something sure windowopen api works blank", "d": "12/2015"}, {"body": "looks like figured solution future reference usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core", "d": "12/2015"}, {"body": "specific requests devtools please file issue project", "d": "12/2015"}, {"body": "hmm looks like version nt wrong maybe release tag blog post confusing", "d": "12/2015"}, {"body": "oh forgot tag release pushed release messed fbjs dependency either work", "d": "12/2015"}, {"body": "based page", "d": "12/2015"}, {"body": "solved required function call return json object attribute could set properly however still maintain work able take json object directly attribute assignment clear explanation error message ca nt set html attribute json object directly", "d": "12/2015"}, {"body": "side note nt use random keys", "d": "12/2015"}, {"body": "sounds like great idea", "d": "12/2015"}, {"body": "yeah seems reasonable", "d": "12/2015"}, {"body": "far know expected time fires dom manipulation makes sense parent receives children mounted said use fires opposite direction parents first", "d": "12/2015"}, {"body": "think problem uses dummy later assign innerhtml pull created node however seems like namespaced properties taken account svg elements created inside cc spicyj", "d": "12/2015"}, {"body": "presumably reason works initially inside markup first assembled rendered", "d": "12/2015"}, {"body": "related", "d": "12/2015"}, {"body": "work okay master since use documentcreateelement ns everything except server rendering", "d": "12/2015"}, {"body": "work okay master awesome thanks temporary workaround wrap elements hopefully may help somebody", "d": "12/2015"}, {"body": "mimics dom event object api also currenttarget target documentation always refers element event handler attached opposed identifies element event occurred", "d": "12/2015"}, {"body": "currently addressing close issue leave pr open merged make sure property works closing thank", "d": "12/2015"}, {"body": "usage question best answered another place stack overflow usually direct people going close result unless think react bug followups please start elsewhere come support bug reporting still see answer question guess since using variable jsx transform actually treating dom element thus string type end return value dom component composite component thus error thrown jsx transform babel blindly lower case jsx want use variable starts uppercase letter perhaps would also suggest starting newer version jest unless stuck node", "d": "12/2015"}, {"body": "tried example confirm behaviour exists expected behaviour prevent memory leaks clean something constructor even component mounted yet", "d": "12/2015"}, {"body": "cc sebmarkbage spicyj", "d": "12/2015"}, {"body": "might", "d": "12/2015"}, {"body": "nt enough information actionable error usually usage question components likely something causes checksums differ sometimes reasons subtle like unprintable character usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow provide minimal test case demonstrates bug react core investigate", "d": "12/2015"}, {"body": "exactly solution debounce updating preview fixed interval say delay updating ui acceptable users", "d": "12/2015"}, {"body": "need real time solution long users", "d": "12/2015"}, {"body": "need realtime solution probably want diffing sort may able convert output markdown library jsx elements using code similar would allow react diffing may able modify markdown library produce jsx elements instead similarly allows react diffing may diffing writing code compare source markdown pass changes markdown library targeted updates regardless solution choose usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "12/2015"}, {"body": "interested know steps get tried setting babel jest coverage line numbers wrong nothing matched properly", "d": "12/2015"}, {"body": "probably need retainlines option babel already running tests stack traces usable", "d": "12/2015"}, {"body": "jumped", "d": "12/2015"}, {"body": "done thanks help yaycmyk reporting seems pretty accurate retain lines flag would recommendation", "d": "12/2015"}, {"body": "zpao thanks followed instructions seems like issue globbing added every file supposed looking works", "d": "12/2015"}, {"body": "yaycmyk yea option sort sucks nt support globbing noticed jdalton added code expand globs write separate config gets consumed including coverage reporting", "d": "12/2015"}, {"body": "also want public regression benchmarks tracked separate issue unit test support", "d": "12/2015"}, {"body": "sebmarkbage clear looking run jest tests browser looking write newseparate unit tests", "d": "12/2015"}, {"body": "ideally would running existing tests since jest tests likely keep writing", "d": "12/2015"}, {"body": "maybe simplest solution one would require least amount changes react would make kind generic browsercapable version jest runner", "d": "12/2015"}, {"body": "imo easiest way get test suite running real browsers would adopt karma use karma browserstack free oss router history projects works well time still requires bit tinkering get working correctly reliably fails every inbrowser ci testing complicated beast oliverwoodings nt jest tool use organize tests would nt easiest thing adopt mature test runner like karma", "d": "12/2015"}, {"body": "mjackson jest nt run tests handles mockingstubbing commonjs modules well ties running tests node jsdom since overrides global require function", "d": "12/2015"}, {"body": "oliverwoodings ah see thanks explanation used using separate bundler webpackbrowserify resolves statements test framework nt actually know anything", "d": "12/2015"}, {"body": "one owning jest idea would turn jest server resolution server send modules client client would require isolated environments match jest behavior done happy mentor anyone willing work nt really need fb would pretty good open source community supportive", "d": "12/2015"}, {"body": "impractical jest feed information browserifywebpackfbspecific bundler even server ca nt deal module resolution mocking leave bundling tool specifically built edit despite new collaborator badge little idea jest works without react worked mocha karma say stupid things", "d": "12/2015"}, {"body": "jest pr also focused making module resolution modular done think provide module resolution implementations may ship js browser end building", "d": "12/2015"}, {"body": "gaearon thinking thing cant jest core plugins different bundlers would make stuff like babeljest unnecessary let user write tests whatever flavour js currently popular", "d": "12/2015"}, {"body": "kind behavior jest could never work us fb thousands test files tens thousands modules bundler completely separate javascript code incredibly complex unpredictable humans uses machine learning optimize packages using system run unit tests would incredibly slow reserved integration tests actually open web browser load individual web sites interact said given said completely open help anyone wants spent time building jest designed modular never great job presenting way pr mentioned going help lot going focus making actually modular add documentation future highlight realize lot projects nt facebook scale benefit features", "d": "12/2015"}, {"body": "cpojer surely could done way made module loader optional ie default loader would behaviour jest", "d": "12/2015"}, {"body": "changing module resolution jest solve browser tests offtopic seems like changing runner would much viable nt let us integrate test fb infra run react native avoid use browser version jest runner would ideal could also carve space separate set dom related tests since tests generic enough nt add additional test dom makes contributing bit pain since need learn two test runners", "d": "12/2015"}, {"body": "sebmarkbage right ca nt use jest browser two things code bundled meaning ca nt executed easily browser especially relevant source code needs kind precompile step eg babel even code bundled changing module resolution necessary right jest module resolution specific node overrides resolution filesystem order mock modules making module resolution pluggable would mean kind bundler could used including ones target browser instead node", "d": "12/2015"}, {"body": "would nt opposite pluggable module resolution jest would mean would want use jest module resolution different bundler", "d": "12/2015"}, {"body": "inbrowser runner would certainly ship require implementation quite convinced want jest play part bundling test runs unit testing generally nt want kind bundling bundling set transforms prod please proof wrong though", "d": "12/2015"}, {"body": "cpojer would nt create restriction production code use whatever transformation tools supported jest get jest needs play part bundling process maybe instructing loader bundle rather actual bundling transforming articles like one example jest make hard write production code newer js features nt supported jest", "d": "12/2015"}, {"body": "sebmarkbage pluggable transforming resolution files done bundlers jsdf seems proposing similar thing", "d": "12/2015"}, {"body": "oliverwoodings oh yes agree part pr make transform function async transformers injected easily", "d": "12/2015"}, {"body": "confused mean browser runner ship require implementation surely would provided browserifywebpackwhatever bundler using jest please excuse actually mean", "d": "12/2015"}, {"body": "jest like vm virtualizes javascript run inside require implementation found contains cleaner version pr large part module loader jest mean entirely thing commonjs additional features like mocking allows wipe away cache easily able build tests nt carry state one test next", "d": "12/2015"}, {"body": "cpojer interested look working better perf tools react well defaultperf nt providing would like would nice pairing perf multiple browsers well", "d": "12/2015"}, {"body": "cases summarized follows react client blow away existing dom nodes rendering take time lose data server rendered client also lose state dom added user react mounted perhaps avoid rendering difference use noscript optimizing markup nt reactids might worth either gone next major release", "d": "12/2015"}, {"body": "zpao spicyj reactids gone ssr somehow thought retaining ssr maybe wrong", "d": "12/2015"}, {"body": "edit previous comment componentwillmount seems calledbut guess know", "d": "12/2015"}, {"body": "shallow rendering renders one level deep means component fully rendered component allowed things based assumption since shallow rendering nt fully render component calling lifecycle would incorrect", "d": "12/2015"}, {"body": "jimfb would better shallowrendering acceptance test", "d": "12/2015"}, {"body": "lovedota per makes sense invoke method need method using regular rendering instead shallow rendering regular rendering allows render process complete thus legally invoke", "d": "12/2015"}, {"body": "jimfb full tree rendered testing leaf nodes attempt shallow rendering call lifecycle methods backed issue also confusing method call one likely assumes always called", "d": "12/2015"}, {"body": "let output arbitrary data node", "d": "12/2015"}, {"body": "legibility probably worst solution", "d": "12/2015"}, {"body": "render react going need get latex sort javascript form one way another entirely outside react control depending server build architecture may able use macros file generationinjection sort generate file insert variable value read another source get javascript becomes domain react want usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason issue closed welcomed continue conversation may want move site intended sort questions like stackoverflow", "d": "12/2015"}, {"body": "noted thanks help", "d": "12/2015"}, {"body": "best bet lint since jsx gets compiled objects either constantelements option otherwise props actually problem duplicate keys objects strict mode violation way runtime know duplicate keys nt get strictmode parse error react ca nt protect since jsx builtin lint rules nt work want something like rule eslintpluginreact warn sorry ca nt anything good luck case ca nt tell strongly suggest integrating eslint workflow nt already", "d": "12/2015"}, {"body": "hmm yeah events tricky seems though react keeping track xy coordinates click applying whatever rerender happens admittedly event handling deep dark part react pretty sure nt suspect seeing browser behavior fiddle demonstrates bunch work click handler hiding button resulting subsequent clicks applied second button course syranide spicyj would know better point could wrong", "d": "12/2015"}, {"body": "yeah behavior seems like native behavior would say entirely logical click removes something screen clickable longer exists click either ignored go whatever cursor position update although would argue browsers buffer clicks sure nonobvious nonfragile workaround event timestamp dispatched user interaction think", "d": "12/2015"}, {"body": "thanks much responses well tricky one nt completely stumped anything", "d": "12/2015"}, {"body": "thanks heads", "d": "12/2015"}, {"body": "zpao downloads page mention already use wording getting started page expand include defineplugin example dan", "d": "12/2015"}, {"body": "use wording getting started page expand include defineplugin example dan could reopen add open new pr", "d": "12/2015"}, {"body": "applegrain got pr going", "d": "12/2015"}, {"body": "oh nice", "d": "12/2015"}, {"body": "think expected behaviour mentioned csspropertyjs defined unitless value according mdn resulting line height value multiplied element font size case get need", "d": "12/2015"}, {"body": "ok nt know lineheight unitless value case agree expected thanks", "d": "12/2015"}, {"body": "complex components defining eg pure render generally exceed performance benefits stateless components sentences docs hinting future optimizations planned whereby wo nt allocate internal instance stateless functional components call function also might keep holding props etc tiny optimizations nt talk details docs optimizations nt actually implemented yet stateless components open doors optimizations", "d": "12/2015"}, {"body": "thanks understand currently functional components memoize execution based shallowcompare props right could nt implemented easily", "d": "12/2015"}, {"body": "correct memoization would break application using immutable data optimization would making assumption root prop reference changes data changes imagine prop array pushing array would show shallowcompare optimization valid default", "d": "12/2015"}, {"body": "use memoization functional component able future guess could wrap hoc probably defeats purpose using functional components coming little optimizations done", "d": "12/2015"}, {"body": "discussions flag could set function allowing participate shouldupdate lifecycle currently implemented moment stateless functions purerender worth keeping mind sometimes people abuseoveruse purerender sometimes expensive running render iterating array props potentially things like string compares extra work components ultimately return true proceed rerender anyway purerender really considered escape hatch performance necessarily something blindly applied every component", "d": "12/2015"}, {"body": "would happy flag yes understand however cases start compare primitive values generally parent may already memoized rendering often data coming api stored objects primitives probably immutable object first dispatched deeper components thus giving dispatcher parent block rendering think elm om applied default tree works pretty well bad compare strings vs comparing object identities guess strings hashes compared first", "d": "12/2015"}, {"body": "elm om far functionalimmutable general javascript probably makes sense supporting standard javascript target language javascript language mutability common perf benchmarks found string compares sometimes quite slow stringcompares propnames predefined values need handle specially nt even arbitrarily long data compares hash comparison detect missmatches guarantee two strings equal due collisions prove equality still need walk whole string assumption two strings equal common case otherwise would using purerender ie hashing still need walk whole string supposed common case string pooling better job hashing starts get complicated anyway digress simple answer nt pure render default may provide way optin future", "d": "12/2015"}, {"body": "fine nt know much javascript inner working coming java world string pooling builtin may assume wrong things js", "d": "12/2015"}, {"body": "also come java background java pooling works pretty well still ca nt depend java exactly reason pooling guaranteed jvm starts get complicated", "d": "12/2015"}, {"body": "seems workaround function lazyfunction f return function return f apply arguments var node ptshape value childrens ptarrayof lazyfunction gt node isrequired", "d": "12/2015"}, {"body": "assumption nt want easier generate changelog prior release go history end anyway ensure nt forget something along way easier organize list holistic view final release whole point able git log linked generally provide fairly advanced notice things like deprecations instance docs indicate methods like deprecate eg see also watch github issues pull requests either would give pretty good indication done cc zpao reopen decides something actually want", "d": "12/2015"}, {"body": "jimfb example another oss project use also make great prissues great review process also work hard dx developper experience aspects deprecations file exist handy starting point decide go upgrade", "d": "12/2015"}, {"body": "plans understand desire done projects think mostly happy generating hand fact", "d": "12/2015"}, {"body": "written jsfiddle show done without using data attributes basically bind index function passed parameter called also usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core", "d": "12/2015"}, {"body": "thanks yangshun", "d": "12/2015"}, {"body": "yangshun joy offence thought get official answer question always add label issues", "d": "12/2015"}, {"body": "yangshun answer exactly us would said official answer", "d": "12/2015"}, {"body": "zpao prefer github issue stackoverflow joy", "d": "12/2015"}, {"body": "littlee every minute spend answering usage questions github one fewer minutes spend fixing react make better everyone push people toward stackoverflow answers generally good sometimes better nt consume disproportionate amounts time", "d": "12/2015"}, {"body": "documentation step step process could use improvement right sorry trouble going close filed improving docs issues relevant anecdotal benefit concise description action items file size done string replacement want reduce file size well need use something dead code elimination remove blocks", "d": "12/2015"}, {"body": "please see", "d": "12/2015"}, {"body": "aha bug misleading commenting parent wrapper children instead require single child root render", "d": "12/2015"}, {"body": "looks like issue workaround use issue still open hopefully get fixed one day", "d": "12/2015"}, {"body": "nt supported anymore plans push new release remove setting", "d": "12/2015"}, {"body": "love inheriting projects longer maintained dependencies replaced also even plans push new release preferglobal please much push release turns flag causes npm warn project longer maintained courtesy everyone inherited project still uses", "d": "12/2015"}, {"body": "pomax replaced babel", "d": "12/2015"}, {"body": "cheers", "d": "12/2015"}, {"body": "message actually little interfered react native still using reacttools historical reasons longer case push message back nt require new release wo nt change preferglobal bit", "d": "12/2015"}, {"body": "ah cool thanks", "d": "12/2015"}, {"body": "components want react components want reactaddons change components depend individual addon packages released reactaddonstransitiongroup", "d": "12/2015"}, {"body": "plan decouple nt solid timeline plan sorry causing problems going close since nt anything immediately actionable", "d": "12/2015"}, {"body": "hi gaearon yes react components rely matter simply add separated addon modules future hi zpao wondering update code something similar following edited use strict var react require react react moduleexports reactsecretdomdonotuseoryouwillbefired else var g typeof window undefined g window else typeof global undefined g global else typeof self undefined g self else g greact moduleexports greactsecretdomdonotuseoryouwillbefired know might concerns nt know idea reference put benpptungreactdomtemp personal react component starter kit benpptungappstackrclientgenerator", "d": "12/2015"}, {"body": "ca nt something like must return single jsx element two adjacent jsx elements instead try something like single jsx tag two children usage question try keep github issues tracking bugs react core going close please ask usage questions stackoverflow future", "d": "12/2015"}, {"body": "checks warnings actually fire nodeenv development meant dev process building production reference dead code elimation remove speedier production app", "d": "12/2015"}, {"body": "ah yes maybe question nt clear enough understand would want warnings dev mode production nt understand needed around produce checks", "d": "12/2015"}, {"body": "calls wrapped checks eg need unless get really strict write lint rule enforcing always inside check internal transform removes calls entirely prod builds need conservative support hybrid devprod runtimes npm", "d": "12/2015"}, {"body": "ok cool words would effect development production environments remove eg line thanks info curious", "d": "12/2015"}, {"body": "sure issue filed react repository static property initializers approved though may approved either way syntax rules part babel react also afaik documentation uses following pattern afaik validlegal", "d": "12/2015"}, {"body": "afaik optimization time", "d": "12/2015"}, {"body": "usage question rather issue react reason going close usage discussions better asked stackoverflow use github issues tracking bugs react core pattern known wormhole currently couple workarounds like datadriven admittedly imperfect discussing pattern long time nt yet come blessed solution sure communicate ideasdesign cloning element usually fine solution using would also work entirely sure mean breaks child lifecycle events get called multiple times expected regardless whether clone recloning really nt expensive datadriven solution one workarounds mentioned one nt mention something like iterate data render accordion items data want want allow people customize accordion item take function prop takes titlebodywhateveryouraccordionwantstoprovide returns jsx representing new accordionitem appropriate props might look something like anyway good luck app closing per free continue discussion thread move discussion stackoverflow", "d": "12/2015"}, {"body": "well reason reported values passed always example according lifecycle event would receive instead props changed makes impossible determine previous state since cloned element completely fresh applies willdid lifecycle events next previous propsstate useless know might fixable side effect cloning thought would report anyways also looked datadriven solution sure like requires another layer unnecessary complexity", "d": "12/2015"}, {"body": "makes impossible determine previous state since cloned element completely fresh applies willdid lifecycle events next previous propsstate useless know might fixable side effect cloning thought would report anyways statement confuses cloning element create fresh instance", "d": "12/2015"}, {"body": "children recloned parent rendered hence new cloned instance anyways able solve issues using contexts requiring children explicitly pass index prop ideal works hopefully better way future done related note would nice children passed index position children list", "d": "12/2015"}, {"body": "wzup github issues used track bugs react core much usage advice recommended use stackoverflow join one irc channels universal rendering complex topic many variables tradeoffs seeing numerous tools place may also want google around blog posts andor write one others solve", "d": "12/2015"}, {"body": "iamdustan said use github issues track bugs core iamdustan listed good places discussions like", "d": "12/2015"}, {"body": "examples", "d": "12/2015"}, {"body": "warning suggests js battery browsers need tag code browser automatically insert work fine first render table gets updated dom tree different react expects give strange bugs therefore react warns insert really helpful warning", "d": "12/2015"}, {"body": "ah makes sense problem solved thanks", "d": "12/2015"}, {"body": "forcefully include testutils production version react work think ca nt think anything top head reaching devonly internals", "d": "12/2015"}, {"body": "cool thanks coworker also thought building separate lib well would probably easier think try leave issue open resolved us options kind stuff would great", "d": "12/2015"}, {"body": "fix issue server rendering reason chrome refresh tab frequently always cause image request pending", "d": "12/2015"}, {"body": "sounds like issue related react disagree let know reopenreinvestigate", "d": "12/2015"}, {"body": "know version chrome", "d": "12/2015"}, {"body": "onchange handler wrong use", "d": "12/2015"}, {"body": "example code works fine mac earlier versions windows latest version chrome", "d": "12/2015"}, {"body": "seeing well nt reproduce isolated jsfiddle weird", "d": "12/2015"}, {"body": "details able make issue reproduce reliably adding handler alters state var test reactcreateclass getinitialstate function return value onchange function e thissetstate value etargetvalue consolelog etargetvalue onclick function e thissetstate visible true render function return reproduces chrome windows linux os x reproduce chrome platform", "d": "12/2015"}, {"body": "confirm see behavior chrome linux first selection initial value null works subsequent selections fail update value", "d": "12/2015"}, {"body": "short forking react currently effective way disabling warning problem using even disabled warning ever decided share component outside environment would start getting warning better avoid function name plenty names choose p achieve thing defining constructor sets state", "d": "12/2015"}, {"body": "aware made abstraction lot cleaner writing calling one thing subclassed children alrighty thanks", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "sure react version provide fiddle demonstrates problem fiddle", "d": "12/2015"}, {"body": "fiddle describes absolutely correct case cause problems runtime try test jest smth like jestautomockon import react react import testutils reactaddonstestutils import hello hello describe hello gt let component render hello gt const renderedcomponents testutilsscryrenderedcomponentswithtype component hello expect renderedcomponentslength tobe test fail error specified", "d": "12/2015"}, {"body": "yeah issue testutils issue unit tests using one componentwithtype methods tracking duplicate", "d": "12/2015"}, {"body": "attribute present source browser adopted specific feature yet", "d": "12/2015"}, {"body": "ah apparently works sameorigin browsers", "d": "12/2015"}, {"body": "recall correctly react uses access stack trace said errors nt coming react coming history module using warning module", "d": "12/2015"}, {"body": "mentioned coming react something else use stack trace find guilty party encourage reactrouter whomever improvements dedupe warnings eg react reduce spam attempt dedupe type location warning", "d": "12/2015"}, {"body": "exactly problem get head around weird thing seems related build setup works fine development setup fails problems built jenkins running docker container", "d": "12/2015"}, {"body": "typically means two reacts bundled page try checking whether package depending react dragging outdated version dependency situation better ask maintainer package specify react instead switch nt install peer dependencies automatically way ca nt get duplicates also wrote problem", "d": "12/2015"}, {"body": "thanx gaearon seemingly endless patience responding problems case caused outdated modules jenkins build called npm install every build instead cleaning first probably module somewhere tree still depending react updated lazy requirements btw link medium gives", "d": "12/2015"}, {"body": "happens believe handles better deterministic installs install order nt matter anymore fixed link thanks", "d": "12/2015"}, {"body": "enough information us debug sounds like bug user land sounds like maybe array nt getting sorted correctly incorrect though little hard imagine either would browserspecific try removing components printing jsx tags render immediately prior returning may give insight going super simple testcase jsfiddle demonstrates bug react core investigate", "d": "12/2015"}, {"body": "jimfb thank pointing create testcase preparing found issue sort function anyway check works android desktop ios odd", "d": "12/2015"}, {"body": "thank", "d": "12/2015"}, {"body": "use touch device event perfectly prevents code", "d": "12/2015"}, {"body": "nodkz think general issue react specific", "d": "12/2015"}, {"body": "attaching mouseup event child preventing propagation", "d": "12/2015"}, {"body": "mking looks like bug general issue lack specification internally works otherwise realized standard behavior mouse element move mouse outside element make mouse case appear element coderk solution implemented number children low incapsulated component case ca nt done cause hundreds elements mount remember every component attach event looks strange fraught errors need prevent events children swipedrag parent element logic must encapsulated children components need know preventing", "d": "12/2015"}, {"body": "npm wont install peer deps automatically install react first fine works expecting", "d": "12/2015"}, {"body": "mattstyles probably right peer dependencies always explicitly included", "d": "12/2015"}, {"body": "synthetic event system allows us smooth events api also make minor changes think behavior better browser behavior general easy ignore bubbling event harder bubble event bubble let user ignore bubbling event nt care event information interesting semirelated article anyway assuming intended feature syranide spicyj disagree reopen feel free continue discussion thread", "d": "12/2015"}, {"body": "yeah events bubble nt feel great decision intended behavior", "d": "12/2015"}, {"body": "thanks info", "d": "12/2015"}, {"body": "assume used form thing note prefixing css selector indicates pseudo element style inline really targeting different element targeting inline style dom cssom", "d": "12/2015"}, {"body": "yes pseudo element target react found workaround focus similar ca nt think one maybe add default text text color onclick replace blank normal text color basicly would text without real placeholder placeholder text better way", "d": "12/2015"}, {"body": "use css seeing indeed react bug usage discussion would better take place stack overflow github", "d": "12/2015"}, {"body": "building component used different places want pure js component less dependencies external stuff like css somewhere css reset lines custom styles global textdecoration none color hover focus color textdecoration underline abbr borderbottom dashed cursor help strong fontweight bold", "d": "12/2015"}, {"body": "liesislukas guess react ca nt anything maybe works", "d": "12/2015"}, {"body": "sorry last thing would like using react example code would leak global space notime add id class least would help leaking would controlled leak", "d": "12/2015"}, {"body": "yes pseudo element target react liesislukas ca nt webkit nt expose shadow dom impossible style inline without using undesirable techniques like cody said instead add css class external stylesheet applies desired style add class react element want", "d": "12/2015"}, {"body": "rendering stuff client site find another way adding global css think make trick mentioned post", "d": "12/2015"}, {"body": "liesislukas directly render block using react well nt fullyexternal stylesheet", "d": "12/2015"}, {"body": "mentioned ca nt react closing", "d": "12/2015"}, {"body": "maybe kept open implement future releases", "d": "12/2015"}, {"body": "impossible react support inline styles perhaps way inline styles possible future pseudoelements would definitely considered would impossible miss feature nt need specific issue kept open specific pseudoelement", "d": "12/2015"}, {"body": "possible already implemented pseudo element behaviour state props used onfocus onblur onchange events keeping state value keeping props placeholder amp value values code big lines js believe possible implement thing react give prop placeholdercolor similar community would work crossbrowser also strategy could used react native code samples get idea working draft getinitialstate function return focus false color thispropsvalue thispropscolor thispropsplaceholdercolor value thispropsvalue thispropsplaceholder handleonfocus function thisstatevalue thispropsplaceholder thissetstate value focus true color thispropscolor else thissetstate focus true color thispropscolor handleonblur function thisstatevalue thissetstate value thispropsplaceholder color thispropsplaceholdercolor focus false else thissetstate focus false handleonchange function e thissetstate focus false value etargetvalue render f styles", "d": "12/2015"}, {"body": "radium seems suggest falling back creating styles pseudoelements curious come solution ran something similar spinner buttons numeric input elements added style fragment suggested elsewhere use webpack require thought might nice keep entirely within component", "d": "12/2015"}, {"body": "liesislukas rude take hint multiple people thread saying thing becomes possible handle clean performant nonhacky way sure react team meantime said earlier rendering block address need without unnecessary event listeners", "d": "12/2015"}, {"body": "fine wanted talk different solution adding global css block external css file", "d": "12/2015"}, {"body": "believe solved newer version babel reactdisplayname plugin generates name file name anonymousunnamed function used suspect proper name devtools definitely solvable solved problem likely outside scope idiomatic react docs", "d": "12/2015"}, {"body": "hmm nt really problem prior stateless components since classes generally names spicyj sebmarkbage could attach element name dev mode warnings pull name elements instead pulling class reason nt already", "d": "12/2015"}, {"body": "jimfb depending declare function necessarily problem either believe devtools display name named function declarations like stateless functions need property added either statically author compiler thought responsible quick reading source seems handle calls", "d": "12/2015"}, {"body": "specifies strategy adding implicit based variable property anonymousfunctiondefinition gets assigned ideally would solved babel level least dev mode functions get name assigned assigning jsx ideal cases like", "d": "12/2015"}, {"body": "ok per inperson conversation current thinking might useful pieces information warnings devtools could print things like components referenced name differs created name would also allow us print sensible name someone exports anonymous component achieve would probably upgrade transform add jsx tag name", "d": "12/2015"}, {"body": "babel babel specfunctionname adds names functions", "d": "12/2015"}, {"body": "think considered custom attributes section jsxgotchas page", "d": "12/2015"}, {"body": "guess likely reasoning aria nt completely supported spec many aria roles properties provided native elements attributes", "d": "12/2015"}, {"body": "reinforce react checks custom attributes either", "d": "12/2015"}, {"body": "also see explanation", "d": "12/2015"}, {"body": "merged starting next release svg attributes passed like attributes attributes custom web components dom attributes treated differently react occasionally normalizes behavior across browsers magic nt cases", "d": "12/2015"}, {"body": "thanks working dan gaearon", "d": "12/2015"}, {"body": "nt decode entities puts markup directly browser sees entities renders text browsers bug modified fiddle believe wanted", "d": "12/2015"}, {"body": "added pull request", "d": "12/2015"}, {"body": "fixed via cheers", "d": "12/2015"}, {"body": "question trying achieve handler form handler button", "d": "12/2015"}, {"body": "usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "12/2015"}, {"body": "fault sorry", "d": "12/2015"}, {"body": "related perhaps", "d": "12/2015"}, {"body": "syranide thx exactly nt notice association earlier reason case polish text placeholder confirm ie bug simple test raw html", "d": "12/2015"}, {"body": "maybe useful would use something though unclear semantics maybe actually want test keys", "d": "12/2015"}, {"body": "agree unclear since posted issue found reagent solved problems", "d": "12/2015"}, {"body": "general never happen anything remotely related modifying component state within render function curious use case callback setstate mind sharing", "d": "12/2015"}, {"body": "ran accident instead would nice react detected problem threw error setstate detected render somecomponent instead going infinite loop", "d": "12/2015"}, {"body": "video player playing component sets styles scrub bar component sets styles updates fires callback good reason beyond explaining simple issue listening callback calling notify component changes happened general nt evaluated next render case calls immediately divergent behaviour normal usage", "d": "12/2015"}, {"body": "understanding flow correctly still nt see howwhy would occurring within component function mean within single reconciliation cycle keep mind recursive common missconception child render function called parent render function mikkoh wrote component sets styles updates fires callback assume using provide simple jsfiddle exampletestcase demonstrates error running", "d": "12/2015"}, {"body": "oversimplification code handlesomething value thissetstate something value render return receives props calls turn calls cause called immediately gets called oversimplification might dumb still nt call immediately reconciliation cycle", "d": "12/2015"}, {"body": "oversimplification might dumb still nt call immediately reconciliation cycle fact support calling accident order trigger update sometimes useful", "d": "12/2015"}, {"body": "mikkoh find workaround came across exact issue", "d": "12/2015"}, {"body": "ended implementing callback gets called workaround fix spicyj called called rather callback resultedwas called component rendered", "d": "12/2015"}, {"body": "mikkoh provide specific code example sure understand exactly issue", "d": "12/2015"}, {"body": "spicyj posted snippet earlier renders call via unfortunate cause ca nt remember remember stage render lifecycle gets called etc basically simple act rendered called handlesomething value thissetstate something value render return", "d": "12/2015"}, {"body": "still failing understand causes infinite loop say adding alleviates problem either case call setstate repeatedly component continue rerender post working code example jsbin example shows problem happy take another look since ca nt understand actionable nt understand intention code trying update parent state whenever child renders would nt expect cause infinite loop", "d": "12/2015"}, {"body": "complement elements create initial render namespace properties svg elements ex ownersvgelement elements created initial render namespace svg property", "d": "12/2015"}, {"body": "yes needs added list created specially exists address though planning fixing svg broadly react soon right spicyj", "d": "12/2015"}, {"body": "thank quick answer changed list manually modules meantime right fixed issue", "d": "12/2015"}, {"body": "fixed master already", "d": "12/2015"}, {"body": "sure would post portal component definition using", "d": "12/2015"}, {"body": "nt dom server side html markup sent client thus need rendertostring instead rendertodom isomorphic code generally allows lots code reuse always going edge cases instance datastore implementations might slightly different account cachingsecurity differences serverclient also need little wiring revive markup client side ie pointed usage question rather bug react core usage questions better answered sites like stackoverflow try use github issues tracking bugs react core reason going close issue feel free continue conversation move stackoverflow", "d": "12/2015"}, {"body": "ok kind confused detailed docs npm package noticed took main react library npm package little confused", "d": "12/2015"}, {"body": "sure mean detailed docs npm package docs react withwithout npm getting started react nt used npm npm stuff often adds unnecessary confusioncomplication might try downloading starter pack playing code follow along docs get hang react write simple react app worry making app isomorphic setting infrastructure", "d": "12/2015"}, {"body": "mean comfortable npm react guess confusing main react package another react part inside another package seems like would included react saying part react separate npm package main package nt include confusing although think kind understand", "d": "12/2015"}, {"body": "zwhitchcox may help tldr react core renderers reactnative reactdom official reactblessed reactart reactcanvas etc", "d": "12/2015"}, {"body": "sure called somewhere nt good job discussing suggested tooling think babel might complain react nt scope maybe used linting would recommend using eslint eslintpluginreact package reactjsxusesreact reactreactinjsxscope enabled ensure react available eslint nt complain react unused case described", "d": "12/2015"}, {"body": "possible might slower nt careful query appropriate time due forced style recalc also unclear one transition element think would take fair amount work make really bulletproof nt think gains large enough could make version component", "d": "12/2015"}, {"body": "ah sorry directions babel babel different behavior get updated meantime date directions need preset transform jsx", "d": "12/2015"}, {"body": "thanks", "d": "12/2015"}, {"body": "minimal working example import react reactaddons var attachelement documentgetelementbyid main var divstyle backgroundcolor red width px height px reactrender attachelement gecko eg firefox event status onclick ok ondoubleclick ok onmouseenter ok onmouseleave ok onmousemove ok webkit eg epiphany event status onclick ok ondoubleclick ok onmouseenter ok onmouseleave ok onmousemove ok blink eg chromechromium event status onclick ok ondoubleclick ok onmouseenter fail work mouse left button press onmouseleave fail work mouse left button press onmousemove fail work mouse left button press", "d": "12/2015"}, {"body": "closing since since need fixed upstream", "d": "12/2015"}, {"body": "fiddle fwiw unable reproduce issue chromelinux", "d": "12/2015"}, {"body": "bad news animation still unstable latest react wonder facebook use animation products anyway guess following pr could fix issue could improve stability animation moreover", "d": "12/2015"}, {"body": "thanks much explanation quick response makes sense though explain know guys probably busy sec check talking one professors wondering using explicit jsx declaration could potentially fix issue something along lines var foo reactcreateclass rendertype jsx render function return could work", "d": "12/2015"}, {"body": "emkolardev probably specifying class spec would sufficient disambiguate grammar would trivial disambiguate obvious start end token since jsx javascript couple extra token types effectively empty floating block legal javascript empty block similar javascript blocks like us reasonable chance disambiguating ultimately one could write parser used clever backtracking heuristics figure something said managing complexity keeping something reminiscent grammar interested stuff take class compilers", "d": "12/2015"}, {"body": "ok sorry fault", "d": "12/2015"}, {"body": "causes array never gets added list components type", "d": "12/2015"}, {"body": "thanks extra info bouk jimfb seeing rejected know plans fix properly somewhere limitation documented referring release notes look limitations stateless components refs lifecycle methods etc would good one similar place", "d": "12/2015"}, {"body": "camjackson yes tracking realized going close one redirect discussion issue difficulty little nontrivial fix testutils per pr likely require api change mean time workaround generally wrap stateless component simple class described tracking issue duplicate", "d": "12/2015"}, {"body": "playing wrapper helps react errors check plnkr using project threw together help diagnosedetect errors may also help scenario thoughts", "d": "12/2015"}, {"body": "going close duplicate let keep discussion thread", "d": "12/2015"}, {"body": "unconfirmed month still issue please provide simple jsfiddle demonstrates issue reinvestigate", "d": "12/2015"}, {"body": "jimfb spicyj think one closed nt react bug", "d": "12/2015"}, {"body": "thanks", "d": "12/2015"}, {"body": "reference", "d": "12/2015"}, {"body": "migrated app react babel nt found way maintain inbrowser transpilation previously react jsxtransformer make sad convenient way development", "d": "12/2015"}, {"body": "noted still use babel browser would nt recommend using anything except test cases quick examples though whole app build pipeline rely", "d": "12/2015"}, {"body": "yes exactly build pipeline slow wait seconds jsx files transpiled grunt gruntreact plugin rely webpack babel lot faster enough fast development inbrowser transpilation found seems successor babelbrowser great news resolves issue hope maintained", "d": "12/2015"}, {"body": "could passed chained promise resolves desired state changes component unmounts pending promises eventual result ignored", "d": "12/2015"}, {"body": "istarkov nice pattern like slightly altered api js create new promise const response cancel await cancelable fetch apidata cancel cancel", "d": "12/2015"}, {"body": "nt understand closed malucomarinero nt saying seeing parent get called ref child got resolved would mean bug behavior nt match invariant spicyj described currently debugging issue gets called child gets called ref resolved child would bug correct", "d": "12/2015"}, {"body": "argh seems weird complex interaction causing issue ancestor ref parent dispatching redux action received new router causes new props passed redux state within event event queue happening case getting called multiple times refs resolving wrapping dispatch prevented happening unfortunately spent hour trying come minimal repro case failed", "d": "12/2015"}, {"body": "believe malucomarinero trying access sibling components componentdidmount via synchronous callback parent nt kosher", "d": "12/2015"}, {"body": "supported mobile safari afaik explains results fyi test passes ios simulator nt test real device trust simulator desktop attribute ignored actually looks like pretty much thing safari said property boolean attribute supports values corresponding property markup generation code nt currently support booleans properties corresponding specific values attributes best course action probably suggest make", "d": "12/2015"}, {"body": "e babel v babelcore e babel presets react watch src outdir build syntaxerror srcrandommessagejsx unexpected token thispropsmessage", "d": "12/2015"}, {"body": "implemented getinitialstate function call within constructor extended reactcomponent thisstate thisgetinitialstate yaycmyk seems like pointless overhead rose", "d": "12/2015"}, {"body": "entitled opinion maintain ui library used inside company people prefer abstraction constructor super simple need", "d": "12/2015"}, {"body": "yaycmyk meant offence rose", "d": "12/2015"}, {"body": "using jquery also seeing errors seems empty", "d": "12/2015"}, {"body": "fixed", "d": "12/2015"}, {"body": "spicyj fixed please check", "d": "12/2015"}, {"body": "verified user code still throwing using user fiddle using matters", "d": "12/2015"}, {"body": "also came across behavior testing app perf tools react updates text inputs type update attribute every refresh despite fact value changed progress planned changes", "d": "12/2015"}, {"body": "trying pass dom component element tree upon rerendering noticed skipping optimization wrapping key subtrees composite components results orders magnitude faster rerenders passes check bail early feels like hack", "d": "12/2015"}, {"body": "bumped handoptimizing react redux end used combination constant element optimization wanted", "d": "12/2015"}, {"body": "using seeing issue message server markup client markup post rendering displayed warning message warning react attempted reuse markup container checksum invalid see verified diff difference markup pre post render client presenceabsence datareactchecksum attribute element rendered something special ensure dangerouslysetinnerhtml cause difference checksum", "d": "12/2015"}, {"body": "hunch checked dangerous inner html nonstandard characters found removed warning stupid mistake sorry guess understand part motivation behind name", "d": "12/2015"}, {"body": "resurrect issue ca nt find anywhere change discussed nt mind change behind passing objects arrays children seemed completely natural everything breaking", "d": "12/2015"}, {"body": "arrays still fine pojos lt see breaking changes section", "d": "12/2015"}, {"body": "right reasoning change trying combative screws patterns using like know rationale", "d": "12/2015"}, {"body": "want able treat object react element would allow jsx transform transform objects directly instead reactcreateelement function calls ca nt well objects also meaning", "d": "12/2015"}, {"body": "unfortunately nt think public api supports right", "d": "12/2015"}, {"body": "spicyj please explicitly relate status thread original escape shown thread ideas clear stands relates original problem jsbin demonstrates departure previous versions jsbin shows testutils longer test entire set react supported output elements specifically shows elements supported however still renderedsupported react thanks advance", "d": "12/2015"}, {"body": "localnerve issue nothing findrendereddomcomponentwithtag renderintodocument creates div ca nt render html tag inside div sure nt html nesting warning moment something like creates new iframe given html hope helps", "d": "12/2015"}, {"body": "error appears fixed master instead erroring return match semantics node nt found something emits warning ca nt guarantee would execute function specific pattern could work detect within", "d": "12/2015"}, {"body": "rethinking exception handling normal debugging workflow completely disrupted current behavior swallowing rethrowing andor logging exceptions stopped ing exceptions development mode", "d": "12/2015"}, {"body": "react catch exceptions exceptions swallowed something else toolchain likely promises", "d": "12/2015"}, {"body": "sorry delay nt use svg react much nt big priority us suggestion react could fix", "d": "12/2015"}, {"body": "also seem experiencing thing ios safari using anchors svg inside button click event bound clicking svg click event triggered similar report issue jquery", "d": "12/2015"}, {"body": "problem delay think working solution real drawbacks far see make pr within next couple days", "d": "12/2015"}, {"body": "sorry delay currenttarget set element bubbles always going point dom node listener attached matter element dispatch event simulate bubbling like real events ca nt changed div receive click event pointing div domelement pointing span happening bug seeing behavior expected", "d": "12/2015"}, {"body": "understand saying principle apply target gets assigned based element listener attached simulate allow us override done implementation detail matter point view user writing test override currenttarget using simulate impossible test event listeners right another way aware almost sure bug solved", "d": "12/2015"}, {"body": "give example component struggling test", "d": "12/2015"}, {"body": "well right holidays code front simple listener click mistaken something like wanted listent clicks inside ul part list something nt remember exactly", "d": "12/2015"}, {"body": "condition true add ul like dispatch event ul descendants point node bubbles event handler", "d": "12/2015"}, {"body": "case react component renders custom element behaves like checkbox custom element comes library used throughout company wrapping use easily react mainly exposing certain properties react component setting handlers custom events custom elements trigger internally custom element uses native checkbox various reasons one within form form submitted value gets sent form primarily custom element applies nice custom skin would like react special properties checked defaultchecked etc react implements native checkbox apply react component well poked around reactdominput see might apply component nt really look like possible least nt clear anyway way would tremendously helpful otherwise end trying manually reproduce properties behaviors react components tips would helpful even sorry manually recreate properties components would helpful well thanks", "d": "12/2015"}, {"body": "yea manually recreate properties components sorry talk making special behaviors composites instead builtins nt seem likely short term custom element probably better avoid weird special cases browsers deal", "d": "12/2015"}, {"body": "need providing direct attribute mapping custom element caused issues number react users think main one simply custom elements special view taken specification special nt treated current way handling custom elements change react behaviour thereby making special case often counter productive realised today coding react already precedence dealing mapping data straight dom seen style dangerouslyset attributes would seem best course would use way thinking provide dangerouslysetattributes probably dangerous user managed attribute provided object mapped element required instance js let customattrs haschildren true childname thomas tank engine result think would provide means passing arbitrary attributes element easy importantly assumptions would nt need made purpose custom element seen syranide already made similar suggestion also keen children set serialised version child elements think wrong treat props attributes appears lot confusion happening customelements react handles elements dumping props attributes cases probably unwanted behaviour allowing custom attributes enforcing custom attributes two different things latter", "d": "12/2015"}, {"body": "working without customelements weeks think worth pointing initial fears around losing customelements materialised force inspecting dom lot difficult riddled generic elements make difficult scan hierarchy view composed several components contain components attempts mitigate custom attributes eg makes things worse noise using classname attribute problem custom elements brilliant way improve readability dom considering react users spend large amount time inspecting dom developer tools sane readable dom hierarchy considered important developer friendly feature removed benefit web component crowd incredibly frustrating", "d": "12/2015"}, {"body": "gargantuan trouble understanding mean sorry fwiw recommend use react dev tools debugging react apps show react component structure nt fit workflow whatever reason maybe fix instead", "d": "12/2015"}, {"body": "spicyj issues react dev tools page reloads reset hierarchy view select tool switches elements view css inspection compatible webpack hotloading issue webpack still undermines usefulness react dev tools practice still debugging elements view console react tool typically means lot context switching customelements means elements views bears relation react view result found rarely use react dev tools think focusing react dev tools fix shortcomings introduced making customelements second class citizens would engineering", "d": "12/2015"}, {"body": "think focusing react dev tools fix shortcomings introduced making customelements second class citizens would engineering really confused mean second class citizens react second class browser react render elements attributes passed happens point inspector view outside react control issues listed sounds like general react devtools issues probably tracked", "d": "12/2015"}, {"body": "thanks answer question sebmarkbage", "d": "12/2015"}, {"body": "jimfb react attribute eg classname applied custom element ignored react mean say customelements second class citizens longer possible write idiomatic jsx custom elements breaking change came blue others require sizeable refactor anyone using customelements refactors bad thing reasons using customelements remain usefulness taken away one enjoys refactor means codebase becomes cluttered difficult read react dev tools neither issue solution issue complaints react dev tools ways work without right tool way work issue always custom elements useful nonweb component users clear nt see merits custom elements clear nt think anything lost change going acknowledge merits people see discussion lump", "d": "12/2015"}, {"body": "gargantuan still trouble understanding exactly specific complaint expert web components please forgive obvious issue could previously write must write instead misunderstanding completely missing something else changed", "d": "12/2015"}, {"body": "assure changes made custom elements work intended make useful less", "d": "12/2015"}, {"body": "spicyj although original issue raised dom element props event handlers etc name couple also longer work seems strange dom elements treated differently especially automatically without developer explicitly opting react handling props actually really like mikeybox suggestion kind attr would much explicit transparent developer vs bit hindrance inconsistency event handling particularly bad feel much rather consistent interface dealing dom elements including custom elements able add events within react eg adding kind normalized event handling rather react make decision switch completely escaping props passing everything web component attributes created kind custom image type web component example might want web component api still want control things like drag click events within react instance feel much clearer going assumed attrs props unless explicitly declared otherwise user would explicitly opt react controlled props rather react implicitly making decision based something arbitrary wether element hyphen name eg", "d": "12/2015"}, {"body": "mentioned earlier thread better event support still planned blocked couple browser bugs prevent us supporting reliably event support tracked several issues notably want support events custom elements todo list nuances regarding customelement events need considered handled properly browser bugsinconsistencies making infeasible current workaround events custom elements officially supported react attach add event handlers imperatively gargantuan regarding prior post said jimfb clear nt see merits custom elements please keep comments check nt room topics discussed could nt wrong particular point developer meetings would see strongest proponent custom elements would see pushing incredibly hard provide custom element support would see always pushing keep react compliant new web standards humanly possible make every attempt listen feedback continue improve react meet everyone needs need understand custom elements still considered experimental technology details much nuanced might expect browsers start converge semantics reintroduce diffs fix rough edges", "d": "12/2015"}, {"body": "jimfb response events support stuff maybe misunderstanding looks like potential change way events work general wether happens still nt understand would nt preferable consistent approach right events props may get added future dom elements allow developers escape attrs want considered decided nt viable", "d": "12/2015"}, {"body": "hellosmithy yes considered approach meet constraint numbers", "d": "12/2015"}, {"body": "jimfb hmmm well guess comes difference opinion escaping solution seems intuitive futureproof intuitive behaviour used elsewhere dom elements difference behaviour based hyphenated vs nonhyphenated element names hand seems completely counterintuitive especially given precedent working former way futureproof keeps control developer single attr would need whitelisted eg strawman example developer wanted use attr web component would still able ca nt see would cause issues", "d": "12/2015"}, {"body": "jimfb sure setattr prop attribute mapping would nt support constraints seems like would likely fit must intuitive users ideally first thing people try work nt work users must obvious next step try fix code ie happens attribute wanted use gets rewritten get useful error message intuitively know try next attribute currently supported current list html attributes next step would find way manually set attributes already know set html would nt much leap assume theres function attributes hey thats documentation play nice futureproof us maintaining evergrowing whitelist browsers add new elementsattributes theres need place arbitrary behaviour dashes tag names standard already declares custom elements special treated basic form merely naming convention react already supports official list attributes may change update time would problem standard dom behaviour real solution would remove ambiguity object props string attributes", "d": "12/2015"}, {"body": "thread going way long circling back points already made previously thread nt think useful keep rehashing issue rendering exactly user typed intuitive user type see literally outputted try well appears outputting exactly typed see works nt take long realize pattern custom elements get outputted directly even miss pattern quickly arrive correct solution single trialanderror attempt escaping solution would type would get rewritten would intuitive way knowing magic escape prop need use called whitelisting would extensive would need whitelist dom attributes boolean values andor otherwise behave intelligent ways dom properties would need applied property instead attribute various dom event handlers etc", "d": "12/2015"}, {"body": "jimfb already seeing change standard dom elements custom element behaviour counter intuitive thats point made assume currently using would output thats happens everywhere else suddenly behaviour changes dash element name arbitrary assuming use dash means want create web component going special handling attributes currently counter intuitive keeps going around circles seems like extensive whitelisting result behaviour change added custom elements props mapped clear care stuff react probably coolest framework around use every day yeah people going get passionate important whats important especially us use custom elements standard html elements using current behaviour prejudice elements equal saying nonequality proposed done using setattr rather current behaviour forking seems wrong", "d": "12/2015"}, {"body": "jimfb wonder talking crosspurposes circling back think points disputed seems reasonable enough echo mikeybox care keeping react great project rendering exactly user typed intuitive user type classname see literally outputted try ca nt speak others say certainly nt intuitive debugged upgrading seemed like bug whitelisting would extensive would need whitelist dom attributes boolean values andor otherwise behave intelligent ways suggesting make arbitrary disctinction would extra whitelisting single point entry setting escaped attrs suggestion simply default behaves fact behaviour worked exactly way without extra ability set kind escape attr want connect external webcomponent apis", "d": "12/2015"}, {"body": "ok think time call day pretty good discussion conversation looping back self past point productive thread rehashing points already made think fully understand concerns mentioned issue update thread new information provide", "d": "12/2015"}, {"body": "comments month closing believe bug react please try provide simplified jsfiddleexample demonstrates problem reinvestigate", "d": "12/2015"}, {"body": "code nt rely going get mangled use check child specific type bad practice", "d": "12/2015"}, {"body": "silvenon would nt recommend compare type object exactly", "d": "12/2015"}, {"body": "mind blown openmouth thanks bunch others stumble onto discussion jsx import react react import foo foo const bar props gt propschildrentype foo return", "d": "12/2015"}, {"body": "stateless functions support static members would possible support way well", "d": "12/2015"}, {"body": "dminkovsky nt tried would expect already work", "d": "12/2015"}, {"body": "spicyj totally works", "d": "12/2015"}, {"body": "dont guys zpao think unfair open source project broad patents claim mean nt anyone file patents lawsuit facebook nothing react dont think affects open source movement whole open opinion regarding rather give generic contact legal team response understand may much say regarding cant open opinion", "d": "12/2015"}, {"body": "iamdustan right seems test event handling shallow renderer least gather", "d": "12/2015"}, {"body": "hi iangreenleaf found solution works previous code failing error var mycomponent testutilsrenderintodocument assertequal testutilsscryrendereddomcomponentswithtag mycomponent length test checks component rerendered changing state code fixed var wrapper reactcreateclass render function return thispropschildren var mycomponent testutilsrenderintodocument assertequal testutilsscryrendereddomcomponentswithtag mycomponent length normal react component fail anymore hope help", "d": "12/2015"}, {"body": "iangreenleaf find solution nested lookup issue stuck exactly spicyj way nested lookup specifically iangreenleaf mentioned like testutils complains error invariant violation findallinrenderedtree instance must composite component", "d": "12/2015"}, {"body": "issue please give worked solution find element", "d": "12/2015"}, {"body": "moroshko nope cryingcatface solution find different tool abandon testutils lowlevel unit tests", "d": "12/2015"}, {"body": "iangreenleaf tool end", "d": "12/2015"}, {"body": "moroshko nt settled anything yet probably looking something integrationoriented works real dom xpathcssstyle selectors moment sticking capybara since already running ruby limited scope testutils fine testing individual components unwieldy actually simulating user interactions", "d": "12/2015"}, {"body": "tried looks promising", "d": "12/2015"}, {"body": "fixed", "d": "12/2015"}, {"body": "definitely endorse also facing issue simply want ability keep using input uncontrolled input ability change defaultvaluedefaultchecked reflect change active dom element", "d": "12/2015"}, {"body": "dylanpiercey found good solution case might solve well turns case trying render form component default values uncontrolled inputs populated ajax request triggered another component sibling lets call component whenever new ajax request triggered user interaction component call callback provided component main component children prop component actually request way scope inside callback render form component c new ajax request triggered one form rendering another renders", "d": "12/2015"}, {"body": "marking good first bug instructions earlier comment feel free ask clarification", "d": "12/2015"}, {"body": "leandro mentioned solution earlier simple wrapper form inputs handler checks manually updates worked okay sad ca nt use regular elements spicyj thanks looking", "d": "12/2015"}, {"body": "also causing issues running react nwjs issue check checks people reference directly simple fix would update note nwjs nt add global node context edit figured would also post solution came nwjs others find run app build results one output js file include js file script tag html triggers nwjs run react browser context", "d": "12/2015"}, {"body": "seems return toplevel component ie page eventually found one problem way deep little tag list included inside various pages hunting around find causing error warning excruciatingly time consuming", "d": "12/2015"}, {"body": "ok problem key always supplied directly components array container html child component array also pain means setup keys inside components render code everywhere use component calling function ugh", "d": "12/2015"}, {"body": "closing favor merge soon", "d": "12/2015"}, {"body": "status experienced issue today using react", "d": "12/2015"}, {"body": "also experiencing disabled doubleclick checkbox behavior react", "d": "12/2015"}, {"body": "ran issue today created qa mixin allows us easily define attributes elements looks like trivial turn method think would nice able use getter instead mind getters methods two entirely different purposes huge fan using latter place former", "d": "12/2015"}, {"body": "still issue react needs get good comprehensive crossbrowser svg support", "d": "12/2015"}, {"body": "ping jimfb sebmarkbage syranide got bit happy pr something current mouseleaveenter code seems really deeply integrated event propagator current stumbling block way missing listen child events ie mouseoutover also return event nt bubble problem need emit event fire dependent dom events outleave fire tests seem using examples seem either emit every child event respond bubbled child events", "d": "12/2015"}, {"body": "adding spicyj syranide spicyj either know good example normalize way either provide tips", "d": "12/2015"}, {"body": "sure would inclined think mouseenter mouseleave fire little weird click nt kind justify one mind", "d": "12/2015"}, {"body": "spicyj tend agree problem though mouseout mouseover fire disabled elements sure spec stuff seen suggests click events nt browsers seem go mouse events context might consistent also allow mouse enterleave well honest moot discussion unless implementation nt rely either mouseout mouseover may possible common seems", "d": "12/2015"}, {"body": "also problem elements containing disabled element works nt jsx consolelog ok onmouseleave e gt alert nt work gt test native event works expected situation", "d": "12/2015"}, {"body": "situation often standard events offer perfect control reading value input good example range input triggered continuously dragging handle blur drag end react events triggered time understand react way handling inputchange events simplifies things handler subscribed live updates reason behind decision even possible move closer standard behaviour stage", "d": "12/2015"}, {"body": "munter give bit info ended getting work tried putting block test dice everything works first mocha test run using save file test blows using react", "d": "12/2015"}, {"body": "jasonblanchard running tests requirejs module loader cache clearing part tests using packaged version react means work running react source probably specific files create cache dom nodes explicitly clear require cache really love react exposed method clear cached nodes nonpublic api", "d": "12/2015"}, {"body": "bugging testing wanted throwing nt dom node nt method saved thanks cachecontrol thought reactdom thing nt using wonder got", "d": "12/2015"}, {"body": "silvenon using node would nt useragent check prevent message add check consoledebug would helpful", "d": "12/2015"}, {"body": "spicyj oh right faked user agent radium wanted real one react picked bad sweat", "d": "12/2015"}, {"body": "sebmarkbage forgive need clarity extend also inferring override add new events saw perfect candidate today", "d": "12/2015"}, {"body": "answered", "d": "12/2015"}, {"body": "reviewing one senior project went run create poc noticed longer issue able get error message anymore like original post stated believe issue reviewed closed due existent issue anymore new part github sure method go though guidance would greatly appreciated", "d": "12/2015"}, {"body": "demonstration seen written back latest release utilizes ssr require bit tinkering make run ssr requires checksum match ca nt edit manually need generate markup using verify longer issue think close bug know changes regards react ids event handling work possible fixed think also pretty good chance still issue verify original repro html urls identical difference browserjs referenced inside working use settimeout thisupdatenow instead thisupdatenow", "d": "12/2015"}, {"body": "ok thank use information develop proof concept show findings hopefully something next days originally using issue use", "d": "12/2015"}, {"body": "use branch changes would need go master anyway give uptodate changes", "d": "12/2015"}, {"body": "spicyj issue checked table tag add dynamically works expected without error remove dynamically works view remove expected also throw error idea solve", "d": "12/2015"}, {"body": "scarletsky post simple jsbin shows problem new github issue ideally happy take look", "d": "12/2015"}, {"body": "spicyj demo two days debugging sure error related still know happen", "d": "12/2015"}, {"body": "thanks solid test case confirmed believe also manifestation believe would fixed instead added removed rows stores response changetablerows directly drop addrow removerow completely instead chaining actions together componentwillreceiveprops generally considered flux antipattern also ties code views makes harder refactor code later leave open confirm fact dupe", "d": "12/2015"}, {"body": "yeah sure", "d": "12/2015"}, {"body": "sure whether related know component get component via props every thing works expected however component get store via throw error", "d": "12/2015"}, {"body": "spicyj fact implementing spreadsheet like excel react redux store see change table rows dispatch caculate action dispatched component render component componentdidmount function also dispatch action dispatch action componentwillunmount functiion part demo say antipattern listen action change", "d": "12/2015"}, {"body": "scarletsky flux expert sorry understanding chaining actions always discouraged", "d": "12/2015"}, {"body": "storetable storerows storecells listen changetablerows action change redux apps work yes", "d": "12/2015"}, {"body": "gaearon thanks information", "d": "12/2015"}, {"body": "noticed another related case seems ca nt rerender different component shallow renderer repl session demo var require reactaddonstestutils undefined var react require react undefined x reactcreateclass render function return span thispropsx function reactcreateclass render function return div function reactcreateelement function var r tcreaterenderer undefined rrender x undefined rgetrenderoutput typeof symbol reactelement type span key null ref null props children owner null store rrender undefined rgetrenderoutput typeof symbol reactelement type span key null ref null props children undefined owner null store", "d": "12/2015"}, {"body": "nt think issue probably nt bug think intended behavior picker missing part date possible value since valid date issue long part picker empty wo nt fire change input parts filled change given part fire change wanted correct choice tho sure since input gives feedback vanilla js either happens clicked mouse", "d": "12/2015"}, {"body": "fix", "d": "12/2015"}, {"body": "personally nt seen error ages anyone thread still issue please provide example repo actually test otherwise guessing app", "d": "12/2015"}, {"body": "ended using glittershark approach state updated code export default class checkboxdropdown extends reactcomponent constructor super componentdidmount thissetstate mounted true windowaddeventlistener mousedown thispageclickbind false componentwillunmount thissetstate mounted false windowremoveeventlistener mousedown thispageclickbind false pageclick e thisstatemounted return checkclickedobject thetarget return thetarget amp amp thetargetclasslistcontains changed export default class checkboxdropdown extends reactcomponent constructor super componentdidmount thismounted true thistoggleeventlistener componentwillunmount thismounted false thistoggleeventlistener toggleeventlistener let fn thispageclickbind handletoggle thisstatetogglestate thissetstate togglestate true handleclick thissetstate togglestate thisstatetogglestate pageclick e thismounted return shoulddisabletoggle target return targetinnerhtml thispropsthistitle amp amp thischeckclickedobject target amp amp thischeckclickedobject targetoffsetparent amp amp thischeckclickedobject targetoffsetparentoffsetparent checkclickedobject target return target amp amp targetclasslistcontains thisclasslistname classlistname return", "d": "12/2015"}, {"body": "hectron see issues approach properly adding removing event listener cdm cwu need check use preventing reference check succeeding simple fix using property initializers javascript class foo extends reactcomponent componentdidmount windowaddeventlistener mousedown thispageclick false componentwillunmount windowremoveeventlistener mousedown thispageclick false use combination property initializer arrow function bind compiles roughly pageclick e gt thisshoulddisabletoggle etarget otherwise constructor", "d": "12/2015"}, {"body": "tracking cancellable promise seems fairly verbose forces adding state component seems undesirable keeping reference promise cancel seems equivalent manually tracking state described would nice logic could selfcontained similar cancellable observables sure react would generate unmounted signal work", "d": "12/2015"}, {"body": "came across issue today bit different point view configuration creating embeddable element receive configuration options one react class use rendering example want able pass prop changes react class use instead rendering render method call problems react class object gets passed working intended use case calling rails helper limits prop types represented json means receiving string prop instead actual class currently using get actual react class works leaves bad taste mouth hoping would use also wants actual class instead string", "d": "12/2015"}, {"body": "react nt global registry wo nt ever builtin functionality could registry make sure class registers could access inside use example js differentlistelementjsjsx var differentlistelement reactcreaceclass reactcomponentregistryset differentlistelement differentlistelement embeddablelistjsjsx var embeddablelist reactcreaceclass render var listelement reactcomponentregistryget thispropslistelementclass return essentially ben described registry object either way would require different global object available thing may setting creating class default behavior asset pipeline could actually write would slightly less bad taste nt using jsx still need class object pass", "d": "12/2015"}, {"body": "updates issue", "d": "12/2015"}, {"body": "custom react root id", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "already exists called however case like iammerrick example need loadtriggeretc something perform render means one one thing something wrong things like introduce statefullness either component much worse outside ever need data every time component receives props nt even guaranteed new lazyloading proper way request data method render var actions useractionsload id actions render else show spinner return null etc useractionsload function id data return data else request data emit change success robyoder passing arguments functions nt ugly may seem verbose natural programming language chosen trashing api adding spare lifecycle method reduce verbosity definitely ugly indeed", "d": "12/2015"}, {"body": "tell meandre opinion serve different purposes helpful like two hypothetical called reasons new props plus nt given access previous props benefit previous props would nt load data every time conditional based props whether changed obviously ugliness eye beholder adding proper lifecycle method seems like much cleaner solution", "d": "12/2015"}, {"body": "maybe another way look let say main goals reduce human error forgot pass parameters use yet reduce nonvalue adding boilerplate code write something unnecessarily reduce cognitive burden trying decide lifecycle methods use need think sort thing keep using slightly different approaches depending feel day etc maybe solution space around simplifying use react react api achieve goals think problem goals mind maybe lifecycle methods could merged interested knowing initialization vs update tell calling signature arguments example personally feels like many lifecycle methods called consistently without prevprops prevstate initial pass update could simplify code increase productivity plus lifecycle method names pretty long tend copy paste around rather typing hard remember exist makes think could simplified", "d": "12/2015"}, {"body": "robyoder short answer huge difference similar course mainly prefixed state changed component update componentwillupdate yes componentwillreceiveprops yes may noticed lifecycle points conditions one method gets called distinct lifecycle methods however described topic represent component state condition nt give access anything adds slight syntactical sugar may may seem useful easier personal preference technical requirement exactly reason nt added subjective say passing arguments ugly also said ugliness eye beholder seems like answered", "d": "12/2015"}, {"body": "meandre might responding kmalakoff robyoder time maybe take opportunity move discussion forward raising perhaps thinking current api three goals could give new insights perspectives one might simplify api achieve course going exercise might end place let go exercise let assume topic followed something important let say addition good idea increases api surface area keeping mind table goals put forward anyone ideas simplify api another way give people thread desire expand api maybe even reducing simplifying", "d": "12/2015"}, {"body": "kmalakoff points talk connected api use api encounter nt caused bad design first problem talk lifecycle methods take different arguments well perfectly natural serve different purposes takes props moon full method added receiving props yet assigned component passed methods may differ actually hint issue problem hard decide callback approach use well really problem methods talk signature equal read meaningless methods get entangled spare options alternatives problem boilerplate code well react thin library beautiful easy strict want make wrapper would simplify lives reduce amount code write every day publish depends done regarding many lifecycle methods yet wo nt ever stop requesting new callbacks nt technical need technical need implement complex component middle work understand absolutely way without ugly hack trigger tricky dom method need something get called time component x method add one use settimeout hopefully would nt land earlier need say oh got tired writing props thisprops one thing welldesigned react application nt need methods talk use rarely suffice time current project relatively large commercial app used twice throughout app would use environment read browser imperfect manipulating certain statefulinitself things relying layout computations future requires manual synchronizing transitions dom changes however normal cases nt need know transition happens", "d": "12/2015"}, {"body": "meandre based experience working react believe room improve simplify api alone issue raised first place answer providing feedback analysis nt think really move forward avoided far since bit biased towards status quo justifying current api happy provide feedback potential solutions people engaged issue looking explore improvement ideas potential api changes address issues raised experience using react like outlined maybe right community innovation move api forward maybe rolled back core maybe current api perfect think great opportunity consider change may look like react team maybe reason making arguments users library less depth understanding currently api decisions went maybe could pull react team members equally experienced knowledgeable see get different perspective maybe even come great solution get consensus good gets", "d": "12/2015"}, {"body": "kmalakoff imagine react engine wheels every time want go somewhere build rest car eventually starts annoying otherwise complain need remember lowlevel engine details turning front wheels hands nt feel right way would recommend either get complete vehicle fullfledged framework build needed components way reuse time see thread engine users complaining engine hydraulic system interior lights feel get complete crap add features nt belong react framework diffpowered rendering engine exposes powerful component system low level minimalistic api yet powerful enough enable build literally anything top please nt hesitate contacting via email feel like need clarify something nt want thread become tutorial", "d": "12/2015"}, {"body": "meandre believe understand position line argument well thank may right api already good get also possibility improved someone make case changing api eg providing comparative analysis various options add componentdidreceiveprops vs merge simplify apis vs change", "d": "12/2015"}, {"body": "react team watching issue discuss internally principal always lean toward eliminating api surface area find leaning toward meandre arguments however team sometimes affectionately refers missing lifecycle method serious discussions potentially adding important thing enable best practices without catalyzing bad practices would useful us least solid understanding people want lifecycle method trying lifecycle nt sufficiently covered lifecycle methods would someone want within instead within render suggested think reason curious reasons use cases initiating dataload based props", "d": "12/2015"}, {"body": "jimfb believe exactly need methods inappropriate could wrong happily explain usecase route looks like need fetch data profile external source order properly need make http request method unfortunately navigate one profile another react router nt call constructor method method course could bug going assume thought fixing using theoretical unfortunately yet exist serve needs pointers would greatly appreciated hunch exactly need", "d": "12/2015"}, {"body": "elaborate serve needs", "d": "12/2015"}, {"body": "also component need make http request http request contain data nt updating component asynchronously data callback returns", "d": "12/2015"}, {"body": "jimfb common case load something asynchronously response prop change involves setting state indicate loading happening data loaded setting state mounting receiving new props trigger loading cycle place call update function nt info whether new prop anyway setstate render nono one function loading pass parameter carefully avoid using date inevitably ends causing bugs remember use passed props get subtle onebehind errors changes arrive signatures methods involved complex props need passed yes done current api causes clumsier errorprone code react good avoiding general", "d": "12/2015"}, {"body": "jimfb need get new username nt yet need make http request order load profile data external source data nt stored locally update component render method feels bit dirty jsx constructor props super props thisstate id thispropsrouteparamsid profile componentdidmount thisgetprofile thisstateid render thispropsrouteparamsid thisstateid thisgetprofile thispropsrouteparamsid return thisstateprofilename", "d": "12/2015"}, {"body": "grassick wrote common case load something asynchronously response prop change involves setting state indicate loading happening data loaded setting state yes exactly usecase mounting receiving new props trigger loading cycle componentdidmount componentwillreceiveprops place call update function well said", "d": "12/2015"}, {"body": "ca nt done using instead javascript constructor props super props thisstate id thispropsrouteparamsid profile componentdidmount thisgetprofile thisstateid componentwillreceiveprops nextprops let id nextpropsparams id thisstateid thisgetprofile id profile gt thissetstate id id profile profile render return thisstateprofilename", "d": "12/2015"}, {"body": "grassick wrote common case load something asynchronously response prop change involves setting state indicate loading happening data loaded setting state grassick wrote render nt info whether new prop anyway setstate render nono spitballing got invoked initial render addition subsequent renders would solve use case could check props changed data loading right render would know loading data would alternative sufficient use cases use cases people involve components loading data based props", "d": "12/2015"}, {"body": "calmdev hm believe right try jimfb perhaps although tried using thought nt work take another look sounds like totally could check also seems like hack nt point ends working prefer bothers lack symmetry could use lieu feel like whole lifecycle could cleaner", "d": "12/2015"}, {"body": "question read react nt feel comfortable saying possibly nt request new features tool familiar even sounds absurd could use lieu ca nt stated readme called component gets dom well definitely replace one method another would break code reason methods aesthetics read symmetry may need one method preparation render initial dom querying manipulation render even exotic average react component normally nt need access dom manually sounds like totally could check thisstateprofilename thispropsprofilename also seems like hack nt yes entire approach hack told would guarantee changed nothing ever unless define way react works", "d": "12/2015"}, {"body": "meandre thanks jumping bit abrasive tastes also nt believe understood questions quite familiar wait jimfb response", "d": "12/2015"}, {"body": "also nt believe understood questions could please point miss point answer questions also could please clarify trying ask also discuss personalities tastes private talk neither tech support even stack exchange website could expect one guide area knowledge often talk local meetups well international conferences react open knowledge sharing appropriate could always contact directly via email skype regarding issue loading profile data trying solve problem applying classic imperative approach functionaloriented framework view react function props state environment like things get slightly complex real world otherwise react would nt exist although get pure functional components components entry function means start writing assume props always date nt care whether changed many times case could implemented following way profileviewjs var react require react moduleexports reactcreateclass contexttypes app reactproptypesobjectisrequired another option var app require app even var profiles require storesprofiles componentwillmount var app thiscontext another option require app appprofilesaddlistener change thisonstorechange componentwillunmount var app thiscontext another option require app appprofilesremovechangelistener change thisonstorechange onstorechange thisforceupdate render var app thiscontext var profile appprofilesread thispropsrouteparamsid profile profile loaded return profilename else yet return loading profilesstorejs appprofiles new profiles app initialization var eventemitter require events var inherits require util moduleexports profiles function profiles thisprofiles inherits profiles eventemitter profilesprototyperead function id var profile thisprofiles id profile get profile gt thisprofiles id profile thisemit change return profile pretty simple nt need nt even need similar hooks ever feel like need trivial case missing understanding things react order get please use appropriate resources nt trash issues section repository feels bit abrasive tastes even feels like nt respect others time", "d": "12/2015"}, {"body": "meandre probably worth toning language bit come across bit confrontational even though trying help want create welcoming community everyone newbies one point even though correct points apidesign fact many people issue indication something amiss try understand whatwhy people want lifecycle maybe problem sufficiently communicating properly write components documentation maybe react api needs change either way worth understanding complaintsquestionscomments checking see internal state component rendering matches parent asking component render almost definition component updating component uptodate nt see hacky least hacky idea fire dataupdate request prop changes setstate callback first place clear proposed lifecycle would nt enable anything could nt already today current lifecycles would merely make potentially convenient others mentioned trying possible current lifecycles multiple combinations lifecycles would allow achieve goal trying make work stackoverflow would better place discuss github issue attempting understand need relates developer ergonomics told componentdidreceiveprops would guarantee props changed meandre correct lifecycle methods nt actually guarantee something changed indicate something might changed reason always need check going something like make http request bunch people thread seem making assumption value changed merely lifecycle method fired meandre wrote trying solve problem applying classic imperative approach functionaloriented framework think might root cause people wanting new lifecycle method still trying figure whyhow people want use method entirely possible current lifecycle semantics slightly missaligned people commonly want", "d": "12/2015"}, {"body": "use cases loading data asynchronously response prop change cc grassick iammerrick", "d": "12/2015"}, {"body": "jimfb searched code also use build expensivetocreate objects needed render case suffers problem pass props careful use code", "d": "12/2015"}, {"body": "jimfb wrote meandre probably worth toning language bit come across bit confrontational even though trying help want create welcoming community everyone newbies one point even though correct points apidesign fact many people issue indication something amiss try understand whatwhy people want lifecycle maybe problem sufficiently communicating properly write components documentation maybe react api needs change either way worth understanding complaintsquestionscomments thank mentioning important make sure welcoming community communications pleasant jimfb wrote thisstateprofilename thispropsprofilename checking see internal state component rendering matches parent asking component render almost definition component updating component uptodate nt see hacky least hacky idea fire dataupdate request prop changes setstate callback first place yes seem reasonable jimfb wrote clear proposed lifecycle would nt enable anything could nt already today current lifecycles would merely make potentially convenient others mentioned trying possible current lifecycles multiple combinations lifecycles would allow achieve goal trying make work stackoverflow would better place discuss github issue attempting understand need componentdidreceiveprops relates developer ergonomics much agree nt post particular usecase receive help posted provide insight thought would useful dozen people posted clearly instinct use something like means likely hundreds thousands indicates api intuitive could jimfb wrote meandre correct lifecycle methods nt actually guarantee something changed indicate something might changed reason always need check previous next going something like make http request bunch people thread seem making assumption value changed merely lifecycle method fired making assumption leave check using one worst case additional request would triggered jimfb wrote think might root cause people wanting new lifecycle method still trying figure whyhow people want use method entirely possible current lifecycle semantics slightly missaligned people commonly want perhaps think", "d": "12/2015"}, {"body": "would helpful specific use case using reactrouter flux architecture component instantiated set state item store store emits change event update state using retrieval query props change navigated different item id route need query store component stuck state previous item store currently called check see route params changed call updateitemstate props actually changed yet must pass props method updateitemstate props props props thisprops getitemstate props props props thisprops would simply become updateitemstate thissetstate item thisgetitemstate getitemstate return thisitemstoreget thispropsparams thisparamname feel reasonable use case", "d": "12/2015"}, {"body": "akinneegl et al componentdidupdate got fired initial mount addition updates would solve use case", "d": "12/2015"}, {"body": "akinneegl use flux nt need set state store unless absolutely impossible maintain state one place comes flux place store store emits change store props change navigated different item id route need query store component stuck state previous item store never take look need render particular item store item render decide requirement expressed code way words component nothing order make play flux write reusable component store bindingunbinding var fluxwrapper reactcreateclass componentwillmount thispropsstoreaddlistener change thisonstorechange componentwillunmount thispropsstoreremovelistener change thisonstorechange onstorechange thisforceupdate render var component thispropscomponent return var component reactcreateclass render var item thispropsstoreread thispropsid return itemname see tiny components become use react properly however stores heavy ca nt every need caching middleware either reusable component similar intermediate proxy store shadows original method proxy stores easy cool cache reads also suppress changes parent store change nt important significant case called composition prefer composition inheritance extending functionality whatever composition scales soon got issue hard solve using one component please consider using components instead introducing complexity existing components jimfb regarding tone native english speaker nt even regular practice speaking may sometimes pick wrong words nt feel sound emotionally", "d": "12/2015"}, {"body": "interesting approach keep mind official docs react say keep render functions pure meaning access props state render methods flux examples show setting state store", "d": "12/2015"}, {"body": "jimfb problem componentdidupdate called reason props changing also would require wait component already updated call setstate update seems pretty inefficient", "d": "12/2015"}, {"body": "akinneegl may also called reasons props changing see must check see prop actually changed anyway regardless lifecycle choose also actually asynchronous data going waiting next event loop callback get fired anyway nt think would matter function got invoked immediately beforeafter render function right", "d": "12/2015"}, {"body": "jimfb well actually item prop referencing already store need render store yet may want show loading screen still nt make sense render twice see saying though meandre really like approach reading store render seem simplify code worry lose efficiency though lose ability control updating via shouldcomponentupdate requires add extra fluxwrapper component mentioned thoughts", "d": "12/2015"}, {"body": "monitoring discussion like resurface third option api great needs componentdidreceiveprops maybe simpler api looking issue opportunity see solve underlying need raised issue brainstorming deep changes api rather limiting discussion solution space simplified api could based following principles simplify code structure reduce boilerplate b keep props inputs separate state internal main reason find writing non valueadding boilerplate example componentwillmount thisactuallycheckthepropsandmaybedosomething componentwillreceiveprops nextprops thisactuallycheckthepropsandmaybedosomething nextprops actuallycheckthepropsandmaybedosomething props props props thisprops let pick props shallowequal changed something let pick props shallowequal changed something else would really rather following separate code path first time vs changed propsupdated prevprops shallowequal pick prevprops pick thisprops changed something shallowequal pick prevprops pick thisprops changed something b main problem componentdidupdate like mentioned trigger repeated method calls set state due property changes since called props inputs internal state code paths seems better decoupled props supplied outside state set inside eg tried considered fourth possibility simplified name componentdidupdate since fewer lifecycle methods could allow shorter naming using componentdidupdate reduce boilerplate find bit dissatisfied potential redundant second update calls logic seems quite independent practice based starting design principles sure wondering something along lines could potential third option discussion", "d": "12/2015"}, {"body": "kmalakoff always need check props changed since never able tell definitively props diddid nt change javascript valuetypes mutability", "d": "12/2015"}, {"body": "note perhaps could call shouldcomponentupdate tell call propsdidchange whatever separate issue though", "d": "12/2015"}, {"body": "jimfb following precisely language limitation referring relates simplifying api general please explain little detail example need explanation simplified expanded little understand", "d": "12/2015"}, {"body": "think means built fast way check may may two separate objects yields false two separate objects yields true actually reference object could recursively check property equality could pretty slow us implement", "d": "12/2015"}, {"body": "kmalakoff nt want digress thread gist tldr akinneegl exactly correct explanation thanks minor correction could nt always recursive check anyway even wanted performance nonissue way recursively check callback function passed prop let keep thread ontopic though p", "d": "12/2015"}, {"body": "thank hmmm still totally clear simplifying api option resolve issue add comments gist anyone wants participate wider range solutions please join us", "d": "12/2015"}, {"body": "jimfb calmdev tried suggestions full grasp nt really add anything new added additional function trusted word earlier makes intuitive sense case illustrate came realization like share newest code perhaps able help others well take look profile page component class profilepage extends component static proptypes fetchcurrentprofile proptypesfuncisrequired currentprofile proptypesobjectisrequired constructor props super props thisstate currentprofile componenthasnewrouteparams routeparams thispropsfetchcurrentprofile routeparamsid componentwillmount thiscomponenthasnewrouteparams thispropsrouteparams componentwillreceiveprops nextprops nextpropsrouteparamsid thispropsrouteparamsid thiscomponenthasnewrouteparams nextpropsrouteparams thissetstate currentprofile nextpropscurrentprofile render var profile thisstatecurrentprofile return profilename profilename null component mounted profile data needs load profile external source call function wrapped fetches data external source dispatch update action redux reducer receives action updates application state updates props component since props updated function called nt know context prop change event need figure props changed see id nt need call update component knows rerender new profile data yes could props another reason nt want go time could check see changed updating state nt expensive operation nt matter check let say want navigate one profile another click link router triggers route change new route parameters function gets triggered see changed call via new fetch comes back dispatches redux action prop updated state updated component rerenders new view example illustrates needs different behavior component mounts component receives new props also demonstrates props checked changes latter case certain functions called upon certain prop changes looking back essentially wanted function updated changed however need add another function everything want existing functions plus nt want complicate lifecycle something might help though documentation lifecycle working examples etc thanks help guys please let know anything got wrong hope helpful anyone stumbles upon thread future", "d": "12/2015"}, {"body": "example seems like reasonable case needing new api able achieve need without new api standpoint outlined thoughts still feel like able streamline api write less code imagine api allowed write functionality less boilerplate class profilepage extends component static proptypes fetchcurrentprofile proptypesfuncisrequired currentprofile proptypesobjectisrequired state currentprofile material example called init update willreceiveprops nextprops thisprops thispropsrouteparamsid nextpropsrouteparamsid nextpropsfetchcurrentprofile nextpropsrouteparamsid render var profile thispropscurrentprofile return profilename profilename null idea hoping considered reducing api surface area cut number code paths boilerplate wondering discussion anchoring initial request add something maybe looking different perspective would open new paths one option preference receivedprops prevprops ideally would one proprelated method could use thisprops important part one code path initialization component prop changes rather different code paths different api signatures whatever solution people agree better getting reduction boilerplate hoping issue achieve clarify need problem like brainstorm little widely solution could look like consider taking apis away changing lifecycle methods significantly shortening method names widely available components seem way forward etc", "d": "12/2015"}, {"body": "akinneegl application composed many tiny components much better heavy components several reasons approach connects single responsibility principle clearly see component easily compose features extend components wrapping methods properties collide easier extend feature one component encapsulates one feature regarding notice reading store render may inefficient made gist shows basic idea implement middleware component caching", "d": "12/2015"}, {"body": "taken another pass principles goals could lead improved api hopefully based around received props method suggested issue simplify code structure reduce boilerplate b keep props inputs separate state internal c allow method control rendering component simplify method naming based assumption component subclassing e reduce number props methods one initialization changes f props method thisprops latest value clarifications gist", "d": "12/2015"}, {"body": "kmalakoff per gist let increase scope issues issue already complex enough digressing conversation full apiredesign going tractable welcomed continue thinking issues please keep thread topic kmalakoff many points mentioning topics issues instance answered appropriate threads discussion looking generalholistic designapi discussions correct medium probably", "d": "12/2015"}, {"body": "jimfb given thought suggested move gist actually believe line analysis topic reason interested issue around received props believe received props lifecycle method allow reduce boilerplate please hear reducing boilerplate problem lifecycle method issue could solve believe also could significant part reason people interested lifecycle method current api encourages boilerplate would like said happy try decouple api improvements example focus exploring solution space around improving api related props issue", "d": "12/2015"}, {"body": "kmalakoff topic thread defined title first post title thread reducing boilerplate specifically introduction specific lifecycle method discussion alone already nuanced enough without introducing additional topics like renaming functions already discussed issues points valuable encourage discussion please move different thread want keep github threads focused topic hand otherwise discussions difficult trackmanage threads exist topics raised", "d": "12/2015"}, {"body": "jimfb people asking reason interested reduce boilerplate related props sure state clearly heard understood asked problems use cases stated problem shown use case responding seem ontopic within scope perspective important resolving issue agreed hold expanding scope general api issues improvements promise wink fyi stated previously reason started thought experiment around issue arguments seemed little narrowly focussed eg already everything need current api rather identifying underlying motivations behind issue know sometimes need step back focus view different angle revisit assumptions investigate underlying reasons behind request etc iterate towards best solution problem hopefully helped draw attention participation help get issue resolved satisfaction course also hoping react api evolve usefriendly continue discussion elsewhere thank links", "d": "12/2015"}, {"body": "kmalakoff ok reduce boilerplate make reusable classes components subclass compose another components nobody prevents defining common method components app react provide excellent extendability define components objects functions classes extend components subclassing mixins factories", "d": "12/2015"}, {"body": "meandre absolutely option issue lead api improvement issue raised promote discussion around desire make change api improve exploring alternatives client code definitively considered strong case made api changed sort workarounds would unnecessary order counter argue cases also need made improved api evaluated current api assess example demonstrate current api without defining custom superclass could used way reduce boilerplate eg using api incorrectly features current api used achieve similar level reduction boilerplate etc prove improvement possible eg general solutions exist major use case could supported api improvement options etc could make case api good enough api requires people write custom superclasses basic common control flow patterns strengthens argument case api improved", "d": "12/2015"}, {"body": "curious rationale triggered mounting think component really receiving props initialized receiving new props usecases would want trigger something upon receiving new props initial prop reception could missing something obvious trying reconcile viewpoints various parties case important cases one could still simulate modified performing check props coming kmalakoff triggered first time would meet standards api simplification", "d": "12/2015"}, {"body": "triggered mount reason people asking people asking wrote methods access called nextprops passed changed yet meaning pass methods called response instead leaving asis end ton ton passing every function call", "d": "12/2015"}, {"body": "good points different code paths initialization vs changes one root causes prop boilerplate root cause different signatures handling props like akinneegl points trying expand solution space considered eg also call init since could actually even better solution reduce prop boilerplate hope able get new hook componentwillmount thissetup thispropsid componentwillreceiveprops next thissetup nextid setup id useractionsload id new hook revised useractionsload check currently loaded id", "d": "12/2015"}, {"body": "kmalakoff talking api improvement absolutely available right make factory components share us along use case samples make proposal rationale hundred times clear since lifecycle points already appropriate callbacks introduce new method lifecycle point component state even mixin event emitter component make possible attach several handlers state change one possible reason get triggered first render thing time commonly comparing method triggered render would make also check presence moreover whole component completely uninitialized time receives initial render nt even kmalakoff twice posted code samples show organize react component way nt need similar hacks could please tell still strive change behavior react component instead adjusting code integrates react would great point samples inappropriate usecase akinneegl reason introduce new method accessing update method called even gets called check normally place etc feel like separate method setup nt subclass react component define following method nt see simplifies things react ecosystem keep requesting", "d": "12/2015"}, {"body": "meandre premise issue achieve want current api work around current api client code premise issue current react api suboptimal needs improved example come principles optimal api would look like tried current react api would score midlevel range suboptimal deficient number areas unfortunately providing ways client code work around react api address root causes problem shifts debate away addressing underlying issues lead debate around potential solutions improve react api short already workarounds working bunch react apps production best practices could great blog post using line debate issue sidetrack us real debate true purpose issue improve react api issue limited prop use cases boilerplate react aim top middle major version increase break backwards compatibility let go best possible api based learned years using version fyi think people might engaging examples much hoping coming get taught current api looking hoping improvements api eg could perceived good intentions slightly misaligned", "d": "12/2015"}, {"body": "think people might engaging examples much hoping coming get taught current api looking hoping improvements api ok come api improvement proposal show code way far react best practices things seem much like worst practices tell reason change yes reason change react codebase show reorganize code make work well react ignore proper usage showcase keep insisting nt seem constructive debate unfortunately providing ways client code work around react api address root causes problem wrap lowlevel api higher level api workaround common practice many brilliant frameworks follow idea keep telling wrap existing ugly api would like use share us along examples use explanations got better would incredible nt see reason nt talking common problem would great help many people bunch react apps production best practices could great blog post using line debate issue sidetrack us real debate commonly architectdesign api predicting problems hypothesizing usecases etc reason people hypothesize try abstract real world search ideal lack experience ca nt get experience advance tell experience seen real problems workarounds share exactly turn debate real effective react built real problems challenges solves real architecture problems write hello world lines", "d": "12/2015"}, {"body": "meandre hear line argument clear correct central argument establish better principles based collective experiences using current react api open debate include nondogmatic solutions may change api fundamental ways seize opportunity improve react api make even better today let rest laurels room improve would rate current react api around props let say using letter grades f would improve less", "d": "12/2015"}, {"body": "yakka solution except listen store changes parent component", "d": "12/2015"}, {"body": "use rendersubtreeintocontainer success conjunction tether change future", "d": "12/2015"}, {"body": "probably sometime new proposal moment", "d": "12/2015"}, {"body": "binarykitchen could post solution", "d": "12/2015"}, {"body": "wrote custom renderer reactjs using web workers try get performance numbers demo page repo noticed small applications cost associated postmessage seems make webworker approach slower using reactdom applications like dbmonster number nodes high pays performance also depends batching messages sent web worker main ui thread batch size needs chosen carefully detailed analysis", "d": "12/2015"}, {"body": "axemclion thanks writeup pretty cool writeup mentioned bottle neck appears become mutations ui thread presumably mutating values every row frequently possible obviously representative realworld use cases belief rerenders result changes majority typical application remains unchanged one frame next assumption typical rerender would lot work calculating diffs affect small number dom nodes wonder batching becomes less significant overall performance benefits running worker become evident especially respect things like scroll performance running rerender background", "d": "12/2015"}, {"body": "jimfb right real world use case time would expensive domdiffing would result little change browser dom batching would still interesting problem since seems another issue experiment set batch size ie call every dom mutation speed worse setting batch size something little bigger say think scope clever batching ui thread handing dom mutations tells us long mutations take based worker determines batch size way nt send many mutations take less start building backup scroll also tried running dom mutations seem make better", "d": "12/2015"}, {"body": "forgive obvious suggestion tried benchmarking transferrable objects", "d": "12/2015"}, {"body": "pfraze good idea could try converting dom mutations transferrable objects may hard though", "d": "12/2015"}, {"body": "also nt forget took figure hope helps someone", "d": "12/2015"}, {"body": "wonder one main trending technologies yet implemented idea mvp around us ever wellknown libraries frameworks use streaming rendering one natural solution node one could demand way plans working included react months year", "d": "12/2015"}, {"body": "btw children concat like proper way", "d": "12/2015"}, {"body": "reactchildrentoarray kidwm sure understand trying", "d": "12/2015"}, {"body": "spicyj nt know solve key problem use reactchildrentoarray concat keep way assign key index", "d": "12/2015"}, {"body": "nt know key problem trying solve explain maybe help", "d": "12/2015"}, {"body": "spicyj thank much tried way nt know address problem", "d": "12/2015"}, {"body": "something like would work though exactly keys assign elements depends want preserve child stateidentity", "d": "12/2015"}, {"body": "spicyj possible alter key maybe would simpler", "d": "12/2015"}, {"body": "yes also works rarely want index key", "d": "12/2015"}, {"body": "spicyj thanks final code", "d": "12/2015"}, {"body": "ran today within redux project triggering actions componentwillunmount unload things triggers state change rerender state bound hoc nt really opportunity unsubscribe first mentioned ismounted check nt help file issue react redux maybe find way fix", "d": "12/2015"}, {"body": "would sooner reactenv something takes precedence nodeenv changing works cause lot pain since everyone would need update build processes nt want lightly", "d": "12/2015"}, {"body": "spicyj another note could make sense ids associated errors keep minified builds along outputting additional arguments provided way always match message values later without significantly impacting bundle size", "d": "12/2015"}, {"body": "spicyj maybe want use exists fallback backwards compat would one options anything else dev mode maybe bad name since build mode environment important bit mode usable error messages none slow type checking assertions get idea though", "d": "12/2015"}, {"body": "syranide yeah want probably best solution", "d": "12/2015"}, {"body": "agree robot fallback backwards compatibility though fan flipping feature switches based broad env types rather see isolated env variable meaningful name suggested reactproductiondebugging example apposed overloading reactenv smile actually happy anything enable us switch debugging", "d": "12/2015"}, {"body": "maybe need different env variable feature instead env variable allow fine grained control enableddisabled nodeenv could used compute meaningful default features compatible existing build systems like javascript var isproduction processnodeenv production var perfmeasuresdefault isproduction var isperfmeasures processreactjsperfmeasures processreactjsperfmeasures true perfmeasuresdefault could nice little guide features could impact performance decide want however think meaningful errors production default setting nt understand would interested little perfbundle size improvements useless error messages constantly got useless bug reports like one user says ca nt delete comment actually come anywhere probably error thrown render user kind enough give screenshot console error however error useless way make useful also use getsentry react starts throw error render method generates lot errors afterward make lot error reportings getsentry guess related catching errors render existing issues like general way would nice doc run react production mean setting nodeenv flag talking topics like ease react production bug reporting nt make ui totally unusable errors thrown nt generate useless errors ui really bad state eventually give opportunity ask user refresh page something", "d": "12/2015"}, {"body": "also use getsentry react starts throw error render method generates lot errors afterward make lot error reportings getsentry guess related catching errors render existing issues like yes large project obviously important", "d": "12/2015"}, {"body": "werehamster would translate jsx using allow break things sure would achieved via jsx unless passed props attribute eg", "d": "12/2015"}, {"body": "thinking lately", "d": "12/2015"}, {"body": "interested issue idea problem solved efficiently", "d": "12/2015"}, {"body": "let leave open new feature complete", "d": "12/2015"}, {"body": "expected behavior going propagate error topmost component", "d": "12/2015"}, {"body": "error bubbles nearest error boundary component defined component errors trying handle error error keep rising", "d": "12/2015"}, {"body": "pr track want throw thanks well killing usual", "d": "12/2015"}, {"body": "first code catches errors initial render time sure issue number mentioned description see comment history", "d": "12/2015"}, {"body": "nice repro scarletsky verify gets fixed", "d": "12/2015"}, {"body": "another hours lost webpack config", "d": "12/2015"}, {"body": "diokuz say symptom experienced also using prebuilt reactjs would recommend using prebuilt reactdomjs well using webpack config since secret property unstable change next version hence name", "d": "12/2015"}, {"body": "spicyj yes problem prebuild version react second instance react came require react work somehow react migration even work partial code removal lead wrong way long debugging agree fault still expect something like every time instead rare warning spent hours find whats wrong refs seems like common problem detailed better documentation", "d": "12/2015"}, {"body": "xmlns xlink required html svg inline necessary tricky case case need image inside defs used xmlns xlink apparently necessary", "d": "12/2015"}, {"body": "confirming work releases hooray", "d": "12/2015"}, {"body": "", "d": "12/2015"}, {"body": "isdefined isrequired", "d": "12/2015"}, {"body": "jonchay could create component renders children use", "d": "12/2015"}, {"body": "whatknight wo nt work except cases already works", "d": "12/2015"}, {"body": "jsx render let user thisstateuser let profile userget data let view null least way return multiple fragments interpolation assembly example complaining img adiacent end inside main wrapper anyway one wrapper element wish could get rid", "d": "12/2015"}, {"body": "kilianc case simply write way using wo nt make difference issue gets resolved", "d": "12/2015"}, {"body": "fixed", "d": "12/2015"}, {"body": "means still two distinct bits information least browser implementation think critical maintain react support checkbox indeterminate checked indeterminate unchecked frustrating problem though change toggles resets jlas notes perhaps variation controlleduncontrolled pattern would work jsx downside something like adds bunch logic dominput wrappers know something folks trying make lighter weight", "d": "12/2015"}, {"body": "point html attribute developers always set status via js seems react nature patch something nt actually exist declarative dom land", "d": "12/2015"}, {"body": "seems react nature patch something nt actually exist declarative dom land yaycmyk correct imho arguable serverrendering way necessitates seems like hard problem otherwise decide draw line really weird nt attribute interesting", "d": "12/2015"}, {"body": "react adds declarative layers lot imperative dom api say bc html attribute nt actually mean declarative api prop sugar js api anyway agree bit weird add attribute main react api surface interacting dom objects possible nice fall bit outside norm react far think cc also discussions adding declarative api", "d": "12/2015"}, {"body": "form components go bit beyond normal html attributes give", "d": "12/2015"}, {"body": "spicyj huh yes add additional runtime functionality ie controlled initial state entirely captured attributes right missing something", "d": "12/2015"}, {"body": "yeah true", "d": "12/2015"}, {"body": "fixed", "d": "12/2015"}, {"body": "like use workaround seems deprecated guessing available client", "d": "12/2015"}, {"body": "thank thelamdaparty trying get work day tspan trick", "d": "12/2015"}, {"body": "thelambdaparty use workaround solution nt template everything ex purely static string keep svg getting span broken", "d": "12/2015"}, {"body": "hi guys got issue dangerouslysetinnerhtml problem decode html entities nt apply style properties", "d": "12/2015"}, {"body": "juztinlazaro believe found bug react core please open new issue provide jsfiddle simplified testcaseexample demonstrates bug", "d": "12/2015"}, {"body": "jimfb thanks sir", "d": "12/2015"}, {"body": "juztinlazaro nt decode entities puts markup directly browser sees entities renders text browsers bug modified fiddle believe wanted", "d": "12/2015"}, {"body": "jimfb oh sorry okay understand newbie okay maybe need decode first using dangerously thanks sir", "d": "12/2015"}, {"body": "juztinlazaro ok future reference usage questions better answered stackoverflow try keep github issues tracking bugs react core", "d": "12/2015"}, {"body": "jimfb okay thanks sir", "d": "12/2015"}, {"body": "actually stripe jquerypayment library preserves cursor position except cursor already end case keeps cursor end input generally feels pretty reasonable try example flickers inherent strategy could better might predictable common case expense introducing edgecase bugs nt need think happen example strategy feel broken case typing space type gets changed feels wrong cursor maybe behavior still better cc zpao second opinion", "d": "12/2015"}, {"body": "entertaining idea react default", "d": "12/2015"}, {"body": "wait would nt work filtering chars cursor would move whenever type invalid character maintaining distance end might work though", "d": "12/2015"}, {"body": "try numbers input works great cc input type try type character space cursor wrong place similarly typing typing character space wrong thing", "d": "12/2015"}, {"body": "yes possible well react knows format simply value changed could borrow heavily jquery mask plugin pretty great", "d": "12/2015"}, {"body": "tsheaff good opportunity thirdparty plugin wo nt put core maybe react mask component", "d": "12/2015"}, {"body": "draw line something like agree fully includingrebuilding jquery mask feels wrong amp bloated unclear middle ground solves meaningful part problem without introducing unintuitive bugs", "d": "12/2015"}, {"body": "tsheaff ask also accepts reports change browsers way events react reported asis seems kind fragile quirky core behavior thing implemented thirdparty component seems preferable least given circumstances", "d": "12/2015"}, {"body": "strml true recommended run babel libraries seen warnings tried babel transforminlineenvironmentvariables plugin production work", "d": "12/2015"}, {"body": "taitsmp technically enable processing nodemodules slow get work zpao feel compiling nondist builds rather require module caches env guess believe optimize well function call vs getter nt optimize call found babel plugin give try amp profile", "d": "12/2015"}, {"body": "strml thanks however seen warning suitable libraries used files app curious people use node modules commonly production", "d": "12/2015"}, {"body": "strml catch people use envify deadcode elimination remove non blocks changing pattern force downstream changes", "d": "12/2015"}, {"body": "understood suppose becomes question priorities unless think something creative unfortunately introduction reactdom possible use react minified builds server anymore unless use packager without duplicating due new halfwayshimmed packages directly", "d": "12/2015"}, {"body": "work", "d": "12/2015"}, {"body": "ah correct since deprecation notice get taken due production check", "d": "12/2015"}, {"body": "oh wait right reactdom require react", "d": "12/2015"}, {"body": "hah got confused require pretend reactdom knowing deprecation warnings would removed nt seem portable", "d": "12/2015"}, {"body": "initial bench results show wider performance gap last two runs op bench replace eliminating getter", "d": "12/2015"}, {"body": "wonder performance improved node core caching", "d": "12/2015"}, {"body": "asked interested programs may relying catching env changes possible change env running process able manage great improvement serverside rendering hosting top file evaluated best part uglifyjs sees const replaces member condition leaving removed entirely maintain code size backcompat hacks better perf issue may need postprocess replace case use browserify old browsers", "d": "12/2015"}, {"body": "hi referred link prop validation needed stateless components meaningless wrong put prop validation stateless components merely functions concept sake called react stateless component", "d": "12/2015"}, {"body": "prop validation needed stateless components never required components unless already using flow suggest put components different functional components", "d": "12/2015"}, {"body": "gaearon thanks wondering stateless functions components looks simply like functions come react treats components also correct saying stateless functions nt life cycle methods like didcomponentmount etc nt extend reactcomponent presenceabsence state ca nt difference usual components stateless function components", "d": "12/2015"}, {"body": "wondering stateless functions components looks simply like functions come react treats components starting react allows components declared functions useful simple components lifecycle methods state future react might apply certain optimizations today please read announcement release notes", "d": "12/2015"}, {"body": "gaearon thanks know jsx files simple functions taken components react thanks helped", "d": "12/2015"}, {"body": "issue ca nt reproduce simple example original code layered think reason real dom nt reconcile react debugger looks dangerouslysetinnerhtml proper html value nt equeal innerhtml actual element used extremely simple equally nasty workaround writing case help someone", "d": "12/2015"}, {"body": "reading rarely give put browser various kinds normalization repro standalone example though happy take look", "d": "12/2015"}, {"body": "well like control shot", "d": "12/2015"}, {"body": "closing going change anything least current component syntax recommended way transactional updates", "d": "12/2015"}, {"body": "pack reactjs jqueryjs reduxjs venderbundlejs reactjs anonymous module amd define", "d": "12/2015"}]