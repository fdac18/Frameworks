[{"title": "make backbone play nicer nosql rest apis", "body": "backbone currently nt play nicely nosql rest apis like mongodb rely substantially specific format api overridden results lot boilerplate code mongodb would use set something like book name main identifier api would look like since mongodb uses document attribute unique key backbone erroneously assume false trying create new entry save model isnew save create http post model already exists server save update http put one solution pass request method ie manually requests burden coder add extra boilerplate figure create update given view easier solution override backbonemodel something plays nicer mongodb problem creating boilerplate written comments model new never saved server lacks id nosql databases like mongodb nt rely ids like rdms solutions thus confuses new document old one issues put request instead post requires either boilerplate calls overriding somehow backbone already pretty unopinionated something feels little hacky considered clean able support nosql better particular scenario suggestion update method return model synchronized server implicitly would mean model new backwards compatibility issue option properly set api play nicely nosql database apis", "num": "3908", "d": "12/2015"}, {"title": "model id undefined", "body": "put model id undefined collection first get method collection always return model", "num": "3905", "d": "12/2015"}, {"title": "create two way binding", "body": "hi guys new backbonejs created bootstrap modal pop view child view calling parent view modal pop want add hide elements based dropdown box currently modal pop disappears rendering code var repeatmodalview backboneviewextend el repeatmodaltem elements urepeateverybyweek true urepeateverybyday false urepeaton true urepeatby false events change selectrctype selectrctype hidden close initialize function bindall show teardown render selectrctype thistemplate template repeatmodaltemplate html thisrender show function elfind repeatmodal modal show close function eldata modal null thisremove render function elhtml thistemplate elmodal show true dont show modal instantiation selectrctype function event thisrctype urepeats option selected val consolelog rctype thisrctype thiselementsurepeateverybyweek false thiselementsurepeateverybyday true thiselementsurepeaton false thiselementsurepeatby false else thisrctype", "num": "3901", "d": "12/2015"}, {"title": "extending collectionprototypefetch collection comes malformed", "body": "project place work need global error handler collectionmodel fetch errors models problems try extend fetch method collection prototype collection comes malformed cant tojson collection anymore default error fetch var originalcolfetch backbonecollectionprototypefetch backbonecollectionprototypefetch function options options var originalerror optionserror optionserror function collection error request originalerror originalerror collection error code extend collection fetch moment calling fetch arguments code model pretty similar works guys know could thanks", "num": "3890", "d": "12/2015"}, {"title": "run test cases play framework", "body": "new play framework juniti migrated play framework want write test casesi see result console play testtestonly testdemo command total test cases many got failedpassed able see test result browser working", "num": "3889", "d": "12/2015"}, {"title": "cobertura delta changes testing", "body": "hi already post cobertura issue last post also need report generation delta changes thanks advance", "num": "3888", "d": "12/2015"}, {"title": "cobertura manual gui testing maven", "body": "hi trying generate reports gui manual testing using cobertura need use without junit done instrumenting class using cobertura instrument generate instrumented classes manual testing shows data stored ser file even server shutdown help come issue thanks advance", "num": "3887", "d": "12/2015"}, {"title": "internal byid index collections wrong model change event", "body": "model change event attribute changes internal index containing collection invalid model obtained method even though id attribute already set nonintuitive internal indexing collections transparent end user returns null safe assume model id exist collection internally issue caused delayed firing collection method maintains index bound event model level handlers invoked events processed making collection update index change handlers executed please see example class entry extends backbonemodel initialize gt change e gt consolelog onchange model eid windowcollectionget eid windowcollectionget ecid windowcollectionget ecid id class collection extends backbonecollection model entry initialize gt change e gt consolelog onchange collection eid windowcollectionget eid windowcollectionget ecid windowcollection new collection entry collectionadd name unsaved entryset name saved console output please note model change handler collection invalid state produced returns meaning object id actually collection also second line shows inconsistency event bound collection level behaves correctly", "num": "3882", "d": "12/2015"}, {"title": "module conventions backbone libraries", "body": "process refactoring code backbone codebase leverage new features one features excited module system introduced still playing around different bundlers able load current browsers nt support yet curious see people using backbone conjunction modules seen two approaches regards underscore jquery backbone libraries assuming following html file html load libraries onto global window object access via window object seems like traditional way declaring library dependencies nt require adding boilerplate imports custom backbone filesmodules javascript file mainjs import oneview onejs import twoview twojs access backbone via global var new backbonemodel var new oneview var new twoview explicitly import libraries new module create explicit individual file clear dependent unit test file isolation dependencies stated selfcontained feels kind bloated though include imports custom backbone file type format also play nicely browserifywebpack bundlers also feels like languages module systems work javascript file onejs import jquery import underscore import backbone backbone export default oneview backboneviewextend el one javascript file twojs import jquery import underscore import backbone backbone export default twoview backboneviewextend el one javascript file mainjs import jquery import underscore import backbone backbone import oneview onejs import twoview twojs access backbone via global var new backbonemodel var new oneview var new twoview could probably combine jquery underscore backbone imports one helper module exports three would one export curious see anyone else found useful conventions wanted discuss tradeoffs experienced two methods", "num": "3881", "d": "12/2015"}, {"title": "route bug", "body": "user pushstate history link home hope route home fact route homea please check", "num": "3880", "d": "12/2015"}, {"title": "route arguments properly parsed", "body": "hi based documentation following route function handles route defined yes arguments receive based url hash give url hash tab path null null myselftiti titi null myselftititata titi tata front tata based documentation nt get tata think parsing issue", "num": "3878", "d": "12/2015"}, {"title": "routers bindroutes initialize function call", "body": "would nt better call bindroutes initialization try use objectmethods route object initialization objects initialize method routeobject looks like causes error object nt exist time bindroutes call currently using small workaroud set route initialize method call bindroutes manually", "num": "3877", "d": "12/2015"}, {"title": "amd mode backbone router error", "body": "backbonerouterextend initialize function thisbind route function consolelog routes home home function consolelog console log want log", "num": "3876", "d": "12/2015"}, {"body": "im always using idattribute id never issue since nt really get problem facing", "d": "12/2015"}, {"body": "elgubenis said", "d": "12/2015"}, {"body": "elgubenis id attribute would need passed api calls works fine app users making api calls want open api users would make api harder use api calls would like ugly like supposing book would unique identifier name ideally work like jridgewell nt question suggestion backbone less opinionated api structured nosql apis nt even let respond closing issue", "d": "12/2015"}, {"body": "ristostevcev think jridgewell closed question backbone default using rest want use someting like rewrite ready go nosql solution simple version javascript backbonesync function method model options options options switch method case create break ps done websokets simple powerfull", "d": "12/2015"}, {"body": "suggestion question nt use rest backbone relying headily api requests particular nt work elegantly set something else nt asking question looking use object id mentioned good reason original post explains issue nt see problem nt deserve consideration angularjs agnostic rest api structured backbone almost agnostic allowing set mentioned problem approach providing example breaks", "d": "12/2015"}, {"body": "ristostevcev said rethink arhitecture id db world unique identifier name want someting change sync method use elgubenis solution options try find way rethink arhitecture", "d": "12/2015"}, {"body": "id db world unique identifier name actually anything unique key db unique identifier identifier makes api easier use id used instead id eat user api request limit add additional load server user send additional request figure id something nt many real world popular apis either use id number unique identifier rest api looks completely different one backbone forces answer nt need rethink architecture sometimes different architecture makes sense sometimes architecture nt backbone flexible enough work kind api structure without internally changing rest api backbone relies say got wrong backbone rest api gold standard frankly little arrogant elitist impractical", "d": "12/2015"}, {"body": "one nt going change backbone sync designed rest architecture absurdly common want use arbitrary identifier case override", "d": "12/2015"}, {"body": "backbone designed rest architecture overall like implying designed particular flavor rest api work google right tell would write model backbone google rest api endpoint listbyactivity get activitiesactivityidpeoplecollection list people specified collection particular activity backbone expected rest api supports one identifier per model endpoint two identifiers activityid collection angularjs simple backbone requires additional boilerplate almost every rest api come across least one endpoint looking two identifiers nt get wrong angular issues think makes point clear", "d": "12/2015"}, {"body": "collection like activities thisactivityid people thisid person collection url like", "d": "12/2015"}, {"body": "valid syntax backbone something like angular backbone expected rest api collections looks like unless want add considerable amount additional wiring api nt match", "d": "12/2015"}, {"body": "template string activities thisactivityid people thisid var c new collection cid test cactivityid var collectioncreate murl gt", "d": "12/2015"}, {"body": "ok could transpile using babel still nt neatly match backbone api structure look table main id instead reality unique identifier resource required form unique resource model backbone allows one id really uncommon two identifiers endpoint forming unique resource moments possibly better example crud insert list fits backbone structure remove delete match backbone api structure instead might say close enough fitting could get delete fit url structure want access larger api issue pops constantly would feel okay forcing coder write bunch extra boilerplate backbone redesigned work better github wikimedia flickr apis mentioned earlier nt fit anywhere near neatly mainstream apis coder hack backbone code get fit structure strong opinion apis look like mentioned initially arguing ca nt find way make api work backbone override methods arguing adds bunch extra boilerplate instead play nicer kind api structure reasons mentioned extra boilerplate backbone specific use cases nt common applications", "d": "12/2015"}, {"body": "nt fight accept learn url method idattribute overriding sync method plenty options connect restflavors never heard issues backbone offers many different ways use rest backends", "d": "12/2015"}, {"body": "elgubenis missing point trying say make anything work backbone nt deny saying apis nt conform well enough backbone expected api requires considerable boilerplate even url method idattribute example flickr rest request format looks like looks completely different backbone expects addeditdelete methods require http post put delete differ enough backbone nt want override backbonesync accessing two apis app enter different method url fetch save destroy heard issue look enough backbone criticisms find people talking angularjs lets interface api easily emberjs hearing backbone proud change real world deal kinds endpoints make coders add boilerplate libraryframework already requires bunch boilerplate business perspective might option change api company uses especially lot clients already using could come new version nt know would go boss told change fight accept learn fight saying want accept learn made point lots apis use backbone framework similar said enough made point take wish original argument plenty merit online library service identify unique resource using something like never change makes api easier use less arbitrary requires less work using finding id forgive thinking horrible idea", "d": "12/2015"}, {"body": "forgive", "d": "12/2015"}, {"body": "actually comes model try determine collection already set uses tries since model nt property fetches model please split", "d": "12/2015"}, {"body": "view use backbone model backbonestickit realize two way databinding", "d": "12/2015"}, {"body": "also use issues qa please use thanks", "d": "12/2015"}, {"body": "hi nicknaso checked backbonestickit getting bind elements backbonestickit provide short example great help", "d": "12/2015"}, {"body": "hi elements must backbone model write little example base structure follow please refer styckit documentation rest really exaustive", "d": "12/2015"}, {"body": "kinds discussions best one channels questions working backbone general discussions", "d": "12/2015"}, {"body": "create jsfiddle codepen example demonstrating problem hard tell without actual code malformed means remove custom code work fine also github issues nt place debugging help please try stackoverflow gitter channel posting issue", "d": "12/2015"}, {"body": "hi jridgewell know close without reply", "d": "12/2015"}, {"body": "chance automatic responses new issues saying usual backbonestackoverflow thing maybe like", "d": "12/2015"}, {"body": "hi jridgewell know close without reply", "d": "12/2015"}, {"body": "nothing backbone", "d": "12/2015"}, {"body": "agree jridgewell", "d": "12/2015"}, {"body": "use model passed listener almost impossible fix updating hash done inside another listener guarantee called", "d": "12/2015"}, {"body": "see point sometimes case possible use model passed listener high level think way collection internal indexing done transparent user whether implementation done via simple array search ie via hashindexing method really matter user object given id collection returned returned neither case result object different id one searched currently inside model callback possibility know may hard fix current implementation maybe warning quirk docs would help others may fall always possible use model passed listener long read kanban tool global collections acting identity map stored objects time multiple ui components clean interface initialization requiring objectid input ie upon initialization look objects global collections encountered issue objecta saved handler new ui subcomponents created referencing objecta id components could find id global collection even though", "d": "12/2015"}, {"body": "high level think way collection internal indexing done transparent user whether get implementation done via simple array search ie id first thismodels mid mcid id via hashindexing essentially due landed instead getting pass model", "d": "12/2015"}, {"body": "think second better cleaner future reader know using backbone important things clear bad idea webpack define plugin", "d": "12/2015"}, {"body": "really question stackoverflow mailing list personally prefer import everything way much explicit easier refactor", "d": "12/2015"}, {"body": "explicitly import libraries new module create", "d": "12/2015"}, {"body": "please use stackoverflow mailing list questions github issues maintaining framework", "d": "12/2015"}, {"body": "proper syntax future please try stackoverflow mailing list gitter channel debugging help", "d": "12/2015"}, {"body": "might want add example docs trips well", "d": "12/2015"}, {"body": "definitely nt enough routing examples general", "d": "12/2015"}, {"body": "initialization pretty much always last however may interested case though could define routes initialize using could also potentially pass routes instantiating assuming object question point", "d": "12/2015"}, {"body": "thanks response thought special case makes sense call bindroutes initialization something may depend initialize method convention always call end constructor like said", "d": "12/2015"}, {"body": "order router calls goes callback routertrigger route home args routertrigger route args backbonehistorytrigger route args callback always called first would nt affected amd", "d": "12/2015"}, {"body": "good job", "d": "12/2015"}, {"body": "bug find nov changed fixed bug amd commonjs bug still exist", "d": "12/2015"}, {"body": "try add pr change well tests later today", "d": "12/2015"}, {"body": "missed issue also seems related also difference affects values field model opposed keys attributes", "d": "12/2015"}, {"body": "looks like found issue issue seems solutionworkaround nt using arbitrary strings model ids leave open imagine marked duplicate closed shortly", "d": "12/2015"}, {"body": "yup alternative run checks every lookup comment notes would expensive hot path potential backbone might built around maps sets high enough priority right though stick js best practices take care keys could also others prefixing keys namespace emulate hash plugin might look something like following js const prefix bb const basemodel backbonemodelextend get attr return backbonemodelprototypeget prefix attr set attr value opts typeof attr string attr prefix attr return backbonemodelprototypeset attr value opts", "d": "12/2015"}, {"body": "good question", "d": "12/2015"}, {"body": "looks like oversight part want work pr", "d": "12/2015"}, {"body": "seems fairly similar described", "d": "12/2015"}, {"body": "looks like safari buggy implementation assignment windowlocationhash \u5317\u4eac unicode ac faced issue ukrainian chars well log cityname \u0457\u0454 indexhtml line log locationhash citywt indexhtml line affects nonlatin chars addinig encodeuri updatehash assigning new hash fixes issue safari browsers links look like indexhtml city ba ac locationhash encodeuri fragment sure ok send pull requests", "d": "12/2015"}, {"body": "found better solution update tests done green", "d": "12/2015"}, {"body": "nt sound related bugfix addressing test see still getting issue", "d": "12/2015"}, {"body": "updates", "d": "12/2015"}, {"body": "remaining new features add preinitialize add update event feedback think cut unless prs ready merge looks like pr fallen idle merge conflicts", "d": "12/2015"}, {"body": "agreed think ready go", "d": "12/2015"}, {"body": "anyone want draft pull request changelogdocumentation updates", "d": "12/2015"}, {"body": "fix pulled master branch issue closed", "d": "12/2015"}, {"body": "something like seems work starting history though suppose throwing away entire prop would better use cases fwiw react seems behavior wherein malformed url parameter even one relevant router application prevent entire application working hand lean towards consensus bad urls bad urls really bugs handling certain ways sort particular needs application though otherwise blank page malformed url probably great fallback addition search strings might end url seen case party mailing programs generating email links bb applications including incorrectly encoded params", "d": "12/2015"}, {"body": "understand spec urls specifies case sensitivity fact solution requires good bit deviation normal way routes specified cause lot headaches countless bits web software deviated official specs turned official specs nt consider important use cases suggesting deviate spec default behavior offering option turn case sensitivity spec ignoring actual realworld demand behavior running net iis neither demand casesensitive urls requiring developers go back fix thousands urls scattered throughout project satisfy spec nt going happen stack overflow questions people posting hacks workarounds online prioritizing spec actual realworld users wo nt allow option least expose related code backbone currently closure override behavior without modifying original source", "d": "12/2015"}, {"body": "fact spec nt actually say urls case sensitive urls general casesensitive exception machine names may urls parts urls case nt matter identifying may easy users always consider urls casesensitive u general says users always consider casesensitive nt may properly routerserver configured case sensitivity feel like apache configured caseinsensitivy box backbone way", "d": "12/2015"}, {"body": "solution also nt help cases router root contains case error example app sitting root domain like case wwwexamplecommyapp regex solution going help user types wwwexamplecommyapp", "d": "12/2015"}, {"body": "hi wondering could help still open issue", "d": "12/2015"}, {"body": "figuring heck made frustrated please update documentation reset option", "d": "12/2015"}, {"body": "ran reset option", "d": "12/2015"}]