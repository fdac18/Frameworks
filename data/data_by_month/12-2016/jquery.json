[{"title": "caching camelcased strings", "body": "every time data attribute dataset accessed jquerycamelcase called adding cache camel cased strings would avoid running two regular expressions seeing decent performance improvement adding simple cache webapp somewhat abuses data calls", "num": "3477", "d": "12/2016"}, {"title": "using windowsetinterval unceasingly call api contextfind result glint element panel chrome dev tool", "body": "main javascript code follows see jsfiddle open chrome dev tools element panel find element diviframecontainercurrent blinking unceasingly using api children replace find solve problem also see next png image thx", "num": "3476", "d": "12/2016"}, {"title": "deprecate jquerynodename remove", "body": "description another undocumented utility function exposed jquery object remove probably long time link test case", "num": "3475", "d": "12/2016"}, {"title": "feature detection strategy illadvised", "body": "description historically type converting host object methods led problems strategy dismissed unviable almost ten years ago issue summed searching native serialization function also illadvised nothing beyond observations current browsers imply presence counted one example native localized link test case test case needed matter may fail future certainly past crossbrowser scripting often requires anticipating future browsers may rather observing patterns occur narrow set browsers today", "num": "3474", "d": "12/2016"}, {"title": "nesting tables results incorrect insert", "body": "description nesting tables results incorrect insert appears happen surrounding table tags provided static html inserting table body dynamically bug occur link test case test nested table td border solid bbb tr height minheight td width minwidth trnested height minheight document ready function function rows var var lt x n return var n var lt n rows n n main append nt happen dynamically add table body first body append n n div main html n n row gets appended nested main xx n main append", "num": "3472", "d": "12/2016"}, {"title": "ca nt set strokeopacity style svg elements", "body": "description ca nt set strokeopacity style svg elements strokeopacity included cssnumbers hash prevent automatically adding px property mysvgshape css strokeopacity fails set property mysvgshapecss strokeopacity correctly returns value link test case", "num": "3471", "d": "12/2016"}, {"title": "callbacks memory unlocked add", "body": "moved description erroneously unlocks callbacks memory link test case", "num": "3469", "d": "12/2016"}, {"title": "html method makes past string html show wrong order", "body": "hello passing string html function html shows page order string rendered html page button top page bottom page innerhtml equal string everything worked fine guess something strings used strings nt seem problem code", "num": "3468", "d": "12/2016"}, {"title": "statuscode parameter ajax nt work responses", "body": "expected print response observed nothing response actually observed network tab nothing happens handler nt seem triggered expected documentation awfully unclear interaction defined one following behavior could expected documented either handler called one two requests actually made api could defined handler returns false redirect followed otherwise additional setting whether follow redirects observed none success handler called adding end handler changes nothing cases", "num": "3467", "d": "12/2016"}, {"title": "jquery selector current event lose checked property checkbox input", "body": "description jquery selector current event eventcurrenttarget checkbox input lose checked property least nt find way retrieve boolean value checked property jquery link test case", "num": "3466", "d": "12/2016"}, {"title": "order deferred callback different older version promisea", "body": "description d\u00e9clare two deferreds one callback first deferred second callback wait callback resolve theses deferred order jquery order order resolve jquery callback wait always call first link test case jquery jquery native promisea", "num": "3465", "d": "12/2016"}, {"title": "jquery ajax response object contains number value", "body": "posted question stackoverflow valid json ajax seem handle first response either seems work curl", "num": "3461", "d": "12/2016"}, {"title": "accessing local binary file work", "body": "paste script local file get url foobinary processdata false complete function data success function data datatype binary expected enter success function wo nt least chrome chrome returns http code local successful file access incomplete fix patch applied line function done", "num": "3458", "d": "12/2016"}, {"title": "inconsistent event namespace property", "body": "description eventnamespace property available custom events namespaced standard events must accessed via eventhandleobjnamespace seems weirdly inconsistent ca nt tell oversight intended behavior javascript document testingtest function evt consolelog evtnamespace document trigger testingtest returns test document clicktest function evt consolelog evtnamespace returns undefined document clicktest function evt consolelog evthandleobjnamespace returns test link test case", "num": "3457", "d": "12/2016"}, {"title": "calling returns percentage width instead pixel width", "body": "calling expect get back width pixels get back width percentage seems effect browsers latest version jquery workaround problem using getting later time actually return pixel width using dom ready event seems effect tried create simple jsfiddle complex page unable reproduce problem far see also comments top answer stackoverflow question others problem", "num": "3455", "d": "12/2016"}, {"title": "restting file input ie", "body": "environment ie jquery description file input element file selected ie neither setting value resetting form reset file input empty value files solution maxmaxmaximus trick sideeffects solution nt found yet since bug ms wo nt maintain anymore think jquery handle link test case test case", "num": "3454", "d": "12/2016"}, {"title": "html working", "body": "html working", "num": "3453", "d": "12/2016"}, {"title": "method returns unexpected results", "body": "description expect happen passing array method work array contains selector strings jquery objects native dom elements references actually happens passing array method works array contains references native dom elements contains selector strings jquery objects browsers affected probably link test case fiddle test cases nt expected results however test cases seem correct results due coincidence relating reason cases unexpected results", "num": "3452", "d": "12/2016"}, {"title": "method returns unexpected results", "body": "description expect happen test cases following fiddle commented unexpected results actually happens wrong expected results browsers affected probably link test case fiddle test cases nt expected results however test cases seems correct result due coincidence relating reason cases unexpected results", "num": "3451", "d": "12/2016"}, {"title": "nt use computed styles get innerouter element dimensions", "body": "description tip iceberg heightwidthinnerheightinnerwidthouterheightouterwidth functions suffer usual problems trying deal elements html xml documents windows single interface javascript return value undefined get width height element requesting forcing parsefloat jquerycss elem type extra set width height element jquerystyle elem type value extra using outrageously complicated method get element dimensions inefficient simply begging trouble considering relies multiple calls also outrageously complicated occasionally buggy dom method provided browsers see issues related styles clear comment supposed mean digging deeper hooks computing various flavors height width pixel javascript jqueryeach height width function name jquerycsshooks name get function elem computed extra computed side note simply throw exception disembodied elements style never good idea try show latter measure rehide documentation alludes may even work even sure working would imply elements jquery attempt temporarily show rehide element order measure dimensions unreliable kidding considering arbitrarily decides temporary display style cases ca nt tell glance support comment supposed happen elements without parents part document fragments nothing good expect digress lot stuff every issue seems lead halfdozen regardless results less meaningless element display style completely confusing best get rid junk documentation also alludes showandrehide measurement feature may removed future version jquery deprecate practice immediately eg log warning going away future preferably near future drilling function javascript function getwidthorheight elem name extra consider comment nowhere check value property properties return anything expecting value subsequent check test negative numbers zero furthermore xml elements xhtml jquery never supported nt expected properties nt checked event see calls getclientrects getboundingclientrect work xml elements continuing happens conditions true uncomputed style clearly appropriate fallback computed style intrigue function think point made stop point ask code ever maintained even slightest degree confidence figure gathering evidence testing confirmation updates logic make sense evidence proves nothing browser scripting browsers perpetually updated almost constantly days old bugs fixed new bugs introduced etc anyway enough let start story course according documentation description get current computed inner width first element set matched elements including padding border use term computed computed styles confusing would imply string units goes say method returns width element including left right padding pixels combining information two statements ascertain returns number pixels including padding border words html elements seems really silly jump previous hoops try deal xml elements function event would much easier figure sort element dealing html xml act accordingly simply require different approaches realize much hoops described actually specific html elements example svg elements common xml elements found html doms css padding borders add subtract moving outerwidth documented returns width element including left right padding border optionally margin pixels words unless margin requested far optional margin outer methods clearly design mistake nt necessarily require computing styles either would require additional hoops figure reliably without deprecate option well ca nt imagine practical use case event see proposed solution issue html elements two oneliners standard mshtml since ie rendering engines standard since around turn century xml elements completely different approach required wo nt resemble anything existing code would much better idea separate constructor ie subclass xml elements well windows documents current design dates back cause many seemingly neverending issues jquery proper design simply would nt susceptible many issues see created year year situation wo nt change design problems addressed starting inside way go moment new constructors require complete reboot would jquery brand name also note setting dimension calling method without dimension may well return different number even going get setter bit point ps documentation states method applicable window document objects clearly case references entirely reliable indeed try get semblance outer width objects link test case test cases required logic clearly wrong documentation confirms code nt always work advertised", "num": "3450", "d": "12/2016"}, {"title": "offset module get rid getwindow function", "body": "description working deprecating ran internal function offset module comment incorrect returns reference passed reference node returns passed reference element node side note seems odd try derive reference considering many methods simply reference passed core initialization example perhaps bug see methods least attempt work multiple windows digress inappropriately named function used two places always reduce number one get rid function costs associated calling first one method obviously reduces javascript create scrollleft scrolltop methods jqueryeach scrollleft pagexoffset scrolltop pageyoffset function method prop var top pageyoffset prop confirms function expected return falsey value passed element reference something like replace call javascript var win elemwindow elem win elem else elemnodetype win elemdefaultview function deleted one less call bargain well one public deprecated rather deleted next hth ps consider large number issues related illadvised design object model tries deal elements documents windows among things using single constructor awkward interface users well similar mistake tried deal html properties xml attributes using single function link test case test case needed simply restructuring", "num": "3449", "d": "12/2016"}, {"title": "css hook left top styles makes sense", "body": "description nothing pointless browser scripting trying compute styles incorrectly referenced jquery method hideously complex black box virtually never needs opened twenty years browser scripting managed avoid almost entirely exception comes mind html editor regardless jquery aspires fix whole thing frequently gets trouble consider hook styles javascript support safari lt chrome lt add topleft csshooks using jqueryfnposition webkit bug blink bug getcomputedstyle returns percent specified topleftbottomright rather make css module depend offset module check jqueryeach top left function prop jquerycsshooks prop addgethookif supportpixelposition function elem computed computed computed curcss elem prop cryptically named flag refers test result percentagebased style fails compute pixel units issue dates back bad old days ie frequently used libraries slightlyoff substitute nt convert units pixels jquery certainly older versions problem familiar part attempts fix issue calls method instead attempts figure offset element document origin would equivalent computed styles small subset cases example element position style parent elements position would work hand element position would fail unless document scroll position origin furthermore element position would fail virtually every case hook simply cause browsers demonstrating quirk return nonsensical position values numerous cases even considering problems related rtl documents never bothered read p position primer old cinsoftnet site retired numerous usenet articles authored subject dating back least go general solution short save style eg get offset set style get offset find difference two offsets put old style back method pointless wrapper seems exist handle calls passing disembodied elements elements display style would advise simply calling documenting trying compute position styles offsets elements result undefined behavior recurring theme addition let callers know made mistake earliest possible time throw exception cases opposed returning zeros hth ps positions solution sits halffinished luckily archived related primer years ago pps old issue surely affects previous jquery versions curious old versions kept date bugs like fixed link test case test case needed logic clearly incorrect", "num": "3448", "d": "12/2016"}, {"title": "ready callbacks deferred", "body": "description hard imagine critical requirement running callbacks fast possible right order apps disorganized enough require one relation well calls intended happen last callback runs mention callbacks deal initial showing andor enabling ui components absolutely critical run call stack preventing browser anything eg processing user input example could well mashups assume listeners guaranteed run event fires know never true added sorts new bizarre possibilities javascript catch cases document ready called browser event already occurred support ie lt older ie sometimes signals interactive soon documentreadystate complete documentreadystate loading amp amp documentdocumentelementdoscroll else would also seem critical break compatibility previous jquery versions regard behavior short operation needs kept simple possible implementation jquery fails requirement words asking causing trouble multiple levels javascript deferred used dom ready var readylist jquerydeferred jqueryfnready function fn use complicated object perpetually causes unit tests fail due operations failing complete schedule hint enough tangle callbacks code furthermore callbacks wrapped timeouts unspecified delays begging trouble amount testing prove scheme work expected every time browsers already know simply make callbacks run correct order every time browsers ca nt imagine rationalization introducing slightest bit uncertainty added complexity incompatibility saying one browsers alleged supported easily coaxed running callbacks wrong order point browser buggy ever run callbacks wrong order timeouts used using timeouts pointless illadvised throw exceptions another timeout doubling pointlessness furthermore unneeded illadvised timeouts absolute poison debugging event exception obviously best break line failed intact aftermath environment inspect timed anonymous callback short getting way debugging good reason think debugger cop always better catch perpetrator crime unexpected occurrence causing exception scene evidence gathered immediately catching exception rethrowing delay like reviewing tape crime filing report later scene long since contaminated sometimes perp strikes predictable fashion sometimes nt best catch first time finally obvious fact critical behavior wildly changed would expected previous versions great examples consistency department read brief attempt explanation decision issue created debugging issues revisited buying consistent interface line nt even understand means neither consistent previous jquery versions browsers expected code like javascript documentaddeventlistener domcontentloaded function documentaddeventlistener domcontentloaded function think good form use two listeners expected called correct sequence nothing happen two calls hand timeouts thrown mix javascript documentaddeventlistener domcontentloaded function windowsettimeout function opens possibility browser handling asynchronous events two calls second example similar jquery say similar also extra complexity promiselike behavior course delays unspecified jquery presumably save extra two bytes would take much better explanation rationalize clearly wrong move nt bothered going back read related discussions know experience rational explanation possible please nt take word alone one ask around reputable forum ecmascript browser scripting ask anybody experience going back last decade ever heard weird things happening related timeout ordering wrapping callbacks trycatch throwing exceptions timeouts expected improve degrade debugging experience link test case test case needed nt need go looking trouble case", "num": "3447", "d": "12/2016"}, {"title": "redo jqueryextend clarity safety performance", "body": "description new javascript nt call jqueryextend inside core outside code could change delete extra dot operations affect performance well var extend extend jqueryextend jqueryfnextend function much easier read modulesafe certainly bit faster lessons learned refactoring apply much rest code let go bit bit javascript nt call jqueryextend inside core outside code could change delete extra dot operations affect performance well var extend extend jqueryextend jqueryfnextend function noted unsafe drag performance call methods inside module object exported tacking onto object adds global scope see create local function recursive calls another issue created address references eslint simply misconfigured extra redundant cases sides comparison type furthermore inconsistent loose inequality operator used throughout jquery without warnings disabling lint eg javascript jqueryisplainobject deprecated function isplainobject obj var proto last function reference deprecated moved slimmed version function parts original redundant use thrown see note objects passed foolish enough custom property constructor prototype supported squeamish change add another method check also note function longer susceptible meddling properties outside changes object eg overriding method finally note use instead method prototype would redundant already checked object prototype custom properties explicitly disallowed behavior prototypes undefined return inner function create closure containing private function note originally assigned made sense documentation method indicates first second deep usage object example original assignment would allow contradiction admonition documentation warning passing false first argument supported furthermore passing empty string number argument would undocumented effect behavior cases undefined ie pass nonsense risk expect exceptions best way help users quickly identify missteps scaffolding code removed production builds leave future issue afaik compiler capabilities time subject bit removed figure possible deep use case two recursive calls pass objects objects objects specific anyway one less call good deprecated future well like simply overly generalized crutch encourages poor designs suffered documented issues related poor design decisions trying handle host native objects single function digress trying put suggested changes context part unified vision takes account best practices ecmascript browser scripting well history issues project rest modifications mostly renamed variables simplified structures performance improvements aforementioned banishment exported object impossible could missed something seriously obfuscated undercommented code however passed unit tests first try something wrong refactoring unit tests insufficient either case something needs change changes fork starting diverge considerably trunk advise allot time daytoday issues concentrate improvements make code easier follow therefore likely help prevent future issues fact perpetual issues decade indicates need take step back look bigger picture treadmill due illadvised design decisions date back decade unclear code getting past eslint underdocumented overly complicated features leads users finding bugs either creating issues simply guessing get around continues cycle confusion busywork problems nt considered critical ascent library average web developer clue deal difference old ie versions varying degrees deviation dom standards furthermore alternative solutions minimal usually featured many mistakes days long gone library clearly muchdeserved decline nt clean act gone years gone web course take ages certainly considered irrelevant waste time mostly harmful present state link test case behavior unchanged performance mostly clarity", "num": "3444", "d": "12/2016"}, {"title": "deprecate isarraylike", "body": "description think code comments say javascript function isarraylike obj least one known issue ios bend rules handle ie quite predictable comes sorts methods clearly would much cleaner avoid thing would save time dealing obscure issues jquery needs method nothing dom certainly nt need call core three methods call clearly specific needs latter two internal use arguments middle dealing similar issues related simple enough untangle one even easier avoid sort issues dogged similarly illadvised method solid ecmascript code rely crutch functions history shows nothing trouble particularly try deal host native objects see reopened bugs discovered investigation refactoring must missed prematurely closed get done one untangle one similar fashion link test case test case required", "num": "3443", "d": "12/2016"}, {"title": "empty resolves undefined argument jquery arguments jquery", "body": "description use dynamic array deferreds load n things loop arguments done callback upgrading jquery code breaks link test case minimal test case call arguments resolve arguments correctly arguments done callback incorrectly argument done callback", "num": "3442", "d": "12/2016"}, {"title": "remove mystical incantations related selectedindex", "body": "description line example programming mystical incantation least one like logically expression noop comment indicates somebody saw cause side effect unspecified version safari reason lint pass line comment confirms lint forced ignore transgression fuse blows nt put tinfoil contacts trying tell something wrong furthermore makes us think parent could optgroup issue potential foul form input given high priority leave solution one exercise moment solution given resig several years ago discussed old jquery forum well usenet mentioned something wanting add extra line confirmed could nt find browser proved nt work ie show fails hint noop line answer discards link test case test case known sure might fail know elements without least one containing attribute vulnerable creates implicitly selected likely issue page loaded without reviewing dom standards ca nt say sure browsers required set property reflect implicit selection instead worrying testing let fix logic ps attempt feature test sets flag nt checked relation line checked areas code similar lines javascript var input documentcreateelement input select documentcreateelement select opt selectappendchild documentcreateelement option one problem test testing disembodied certainly guarantee pass based standard know would consult specifications false positives problem likely occur adding additional noop execution reason know jquery supposed work document fragments tested without even another problem nt test assumed solution see improves situation may problem result noop execution without reason expect anything useful third problem name flag descriptive supposed mean nt tacked object could make name long want minification process would reduce regardless saving bytes expense clarity bad trade mention http compression likely end saving bytes anyway fix logic half dozen related lines nt need test btw support ie lt imply see similar comments throughout nt make lot sense eg original hack case unspecified safari version", "num": "3441", "d": "12/2016"}, {"title": "stop calling methods exported object", "body": "description calling methods exported object currently add another reference called global scope core modules continue call methods object defeats purpose using modules outside code change methods potentially breaking code core modules modules using jquery sample line unless overwritten deleted function looks like javascript merge function first second var len secondlength j firstlength note reference function nt need called method extra reference jquery object dot operation unsafe selfimposed performance penalty one hundreds line makes unsafe deal exporting commonjs like module using jquery break module using jquery also note contradiction terms objects global abstain augmenting host object one several places terms window global used interchangeably sometimes line outside script simply something like related ticket particular see last comments related pull request link test case test case clear deleting overriding methods exported may cause code inside core modules break", "num": "3440", "d": "12/2016"}, {"title": "table tfoot inside plain table results weird dom", "body": "create simple table thead tfoot tbody tags insert plain table tr td get broken table example", "num": "3439", "d": "12/2016"}, {"title": "ajax always processes data requests without entity body", "body": "creating ticket based discussion pr litor nt forget review ajax requests using http methods request body get provided data always processed removed even caller specified seems contrary documentation says option contain either query string form object form latter form used data converted query string using jqueryparam sent processing circumvented setting behavior also present kind recent regression seem like bug suppose could argue processing circumvented refers serializing objects appending data url interpretation nt make sense would someone want appended url nt process would possible handler take object stringify url desired something like currently nonworking example", "num": "3438", "d": "12/2016"}, {"title": "feature request fncontents supports", "body": "todo return reference supported reference", "num": "3436", "d": "12/2016"}, {"title": "much recursion jquery firefox animate complete callback", "body": "versions firefox latest jquery thing loading bar animates lefttoright resets note uses complete callback animate fire repro load firefox run firefox minimize firefox window wait minutes get cup coffee come back drink coffee square stopped moving console shows much recursion note works wrap reset call settimeout speculation probably something requestanimationframe changes jquery leave window focused recursion error appear happen chromeie also nt happen jquery", "num": "3434", "d": "12/2016"}, {"title": "mouseenterleave changing mouseoverout", "body": "ca nt tell jquery browser issue forgive jquery looks like browsers changing mouseenter mouseleave event handlers mouseover mouseout looks like section jq library calls safari however done browsers go view event handlers bottom examples left div mouseovermouseout right div enterleave replaced mouseoutover comment code library issue nt happen lines code question", "num": "3433", "d": "12/2016"}, {"title": "jquery regression anchor working chrome", "body": "description criterias trigger issue pagea link pageb uses jquery pageb dynamically create element id foo opon document ready open pagea latest google chrome using ubuntu click link pageb brings pageb scroll element id foo viewport pageb repeat step replace jquery step issue happen code repro problem code pageb function body append lt idfoo gt foo lt gt jquery example good morninggood morninggood morninggood morning good morninggood morninggood morninggood morning good morninggood morninggood morninggood morning good morninggood morninggood morninggood morning good morninggood morninggood morninggood morning code pagea examples link test case", "num": "3432", "d": "12/2016"}, {"title": "multiple scripts dommanipulation appendto uidialog", "body": "opening issue file comment timmywil using jquery jqueryui post request appends result dom element nt manage get simpler function post function data data appendto container post requests returns function div thedialoguidialogcontent dialog destroy remove div thedialog dialog alert alert hello alert line prevent response running alert debug alert screenshot see scripts second one gets", "num": "3431", "d": "12/2016"}, {"title": "eliminate use isplainobject deprecate method", "body": "description function complicated unnecessary certainly internally count five cases used core one example javascript jqueryeach get post function method jquery method function url data callback type sort faux overloading generally illadvised ecmascript code make clear relatively inefficient hard follow wo nt clean entirely ca nt break compatibility one thing time case string object object mixed object created house various options obviously strange interface could pass twice named arguments object instead javascript jqueryeach get post function method jquery method function url data callback type let get rid call well method get treatment another issue foreshadowing javascript jqueryeach get post function method jquery method function url data callback type better right faster much easier follow enough going function start without adding calls odd functions important understand nt needed anywhere likely callback must object old callable object eg host objects object constructed objects result browsers one four go going bother rest indication agreement strategy sound much deal rest calls method deprecated nt encourage developers use functions either bigger picture lot core made easier follow similar restructuring link test case test case behavior remain existing test cases appropriate", "num": "3430", "d": "12/2016"}, {"title": "catching rethrowing ready exceptions", "body": "description catching rethrowing exceptions two issues makes finding correcting mistakes much harder need live stack trace paused code later report logged timeout nt much use debugging app code exists least starts ready callbacks absolutely crucial allows app continue know unknown state bad news development production exception stop show immediately already know counterargument answer simply method polyfill nt mimic browsers creates issues rethrow recent change little address issues always existing catching exceptions ready callbacks correct related code fork shortly link test case test case simply undesirable behavior corrected", "num": "3427", "d": "12/2016"}, {"title": "confusing code global object vs dom window vs fake dom window", "body": "description starting beginning code wrapperjs supposed browsers pass reference global object host object often least closely mimics global object nodejs reference module object passed ecmascript environment lacks global object global object passed also sure yet comment supposed mean moving start function javascript function global factory note first function argument called quite confusing may well reference host object nodejs module environments reference global object code continues javascript typeof module object amp amp typeof moduleexports object line checks global object browsers implies reference global object however seen may reference one three types objects object browsers sort module object nodejs surely property global object unspecified environments comments little help imply references object quite confusing inconsistency end know point object nt know whether object object jquery fail soon references argument name core adds additional confusion cleared three files nt even bothered run sure wasting time need understand changes accomplish offer feedback proceeding done much going point bigger issues require changes really allow passing global object reference object function global object passed object found property object made possible wrapperjs additional argument also added core script example likely used javascript var querynoconflict function deep window jquery window expose jquery identifiers even amd commonjs browser emulators noglobal windowjquery window jquery case would seem call global object whatever passing object happens browsers two usually equivalent environments link test case test case changes suggesting change behavior current unit tests suffice", "num": "3426", "d": "12/2016"}, {"title": "apply fix radio buttons checkbox", "body": "see fix also include buttons currently use jquery trigger click radio button event handlers get called state updated release notes change included say changed radio buttons even though nt", "num": "3423", "d": "12/2016"}, {"title": "replaceclass function", "body": "many times replace element class another one like instead", "num": "3419", "d": "12/2016"}, {"title": "emprovement css function", "body": "possibility add multiple css attribute name elemcss height fitcontent", "num": "3418", "d": "12/2016"}, {"body": "extremelyhighfrequency intended use case nt foresee us memoizing calls however noargument gives data object directly upon get set whatever properties like without worrying string manipulation", "d": "12/2016"}, {"body": "remember modify object directly still want able access via official api less performanceintensive parts code need use camelcased key names direct manipulation", "d": "12/2016"}, {"body": "break element see id added actually dont need id", "d": "12/2016"}, {"body": "experiencing chrome dev tools behavior jquery adds transient id make sure selection works properly", "d": "12/2016"}, {"body": "want remove deprecate", "d": "12/2016"}, {"body": "ca nt deprecate something documented deprecated", "d": "12/2016"}, {"body": "mgol still like give notice undocumented functions plan removing required might call courteous", "d": "12/2016"}, {"body": "concrete issue reported want us look please point examples pieces jquery code consider incorrect succint explanations wrong case", "d": "12/2016"}, {"body": "hard cut amp paste htmljs example htmlentitied example clearer using fixed width font still count pipes result amp test nested table td border solid bbb tr height minheight td width minwidth trnested height minheight document ready function function rows var var lt x n return var n var lt n rows n n main append nt happen dynamically add table body first body append n n div main html n n row gets appended nested main xx n main append", "d": "12/2016"}, {"body": "appears incorrect reference triggered plain tags inserted dom filling table one rows inserting dom reference still pointing previous table gets correctly updated static html tag template data gets provided insertion dom either adding inside triggers reference update used workaround", "d": "12/2016"}, {"body": "github uses markdown wrap code triple backticks even specify language", "d": "12/2016"}, {"body": "leonardjo instead create live example js binjsfiddleetc post link live examples better easily explore issue investigation", "d": "12/2016"}, {"body": "splitting example html css js parts works like charm jsbin cut paste whole thing cut css paste box cut js paste box paste remainder html box remove ref jquery add one drop please cut paste html file open browser hard wish create account jsbin required save bin get work jsfiddle immediately include jquery probably need account need jsbin please add testing jsbin appears bug also exists triggers adding plain tags either via static html append appending content always available adding tags seem cause table pointer correctly updated", "d": "12/2016"}, {"body": "used local includes nt think copy url jsbin provided example works jsfiddle", "d": "12/2016"}, {"body": "thank cleaned determined issue duplicate next release include fix", "d": "12/2016"}, {"body": "since svg nt focus jquery html library generally nt support nt think bug however want use jquery set svg property add cssnumber note nt maintaining branches anymore even add would go future branch writing code plugin needs work older versions would need add anyway", "d": "12/2016"}, {"body": "thanks patch jquery fillopacity svg specific believe cssnumber sure would nt strokeopacity well", "d": "12/2016"}, {"body": "large list svg css properties definitely others like strokemiterlimitfillopacity mistake imo unless going go add ticket added unit test nt use svg also clear list used pass real number rather string strings always unmolested always convert string discussion want avoid whole mess", "d": "12/2016"}, {"body": "thanks report future please post test cases jsfiddlenet jsbincom immediately see work however ca nt reproduce problem methods give identical results going close issue tweak test case show bug reopen", "d": "12/2016"}, {"body": "see browser automatically follows redirect jquery kind anything except seems new api wonder heck docs say request successful status code functions take parameters success callback results error including redirect take parameters error callback ever possibly happen", "d": "12/2016"}, {"body": "according xml follow redirects transparently cases jquery see instead see response status code redirect destination however spec also says redirect following limited origin url conveyed location header origin xml origin redirect violate infinite loop precautions transparently follow redirect observing sameorigin request event rules perhaps origin differs might infinite loop redirect status code would exposed", "d": "12/2016"}, {"body": "jquery properties objects retrieved via via ad bare dom read info", "d": "12/2016"}, {"body": "thanks report test cases modified log console instead alerting include performance metrics also swapped jquery really old jquery jquery native promise concerning jquery performance really suffers code simple yet first done callback invoked milliseconds chrome lot edit nt see performance issues locally maybe jsfiddle intervening somehow", "d": "12/2016"}, {"body": "impression sideeffect think edit right still leave issue open add proper test one", "d": "12/2016"}, {"body": "main issue mixing single multipleargument calls cf yet although great idea use legacy method callback registration care promisesa short answer nt guarantee callback execution order across deferreds case recovered dropping unnecessary jquerywhen introducing dummy argument", "d": "12/2016"}, {"body": "must something else switched back second also working", "d": "12/2016"}, {"body": "longer maintaining versions believe nonissue current codebase xml transport onload handler maps sending ajax callback please report back mistaken", "d": "12/2016"}, {"body": "namespace used event documented event originated browser never namespace namespace given event handler attached looking information part application probably deep jquery implementation details namespaces useful way selectively detach events without interfering handlers element rarely useful inspect discriminate namespace native events handled", "d": "12/2016"}, {"body": "without reproducible testcase nothing unfortunately note though node hidden might return incorrect result see additional notes value reported width guaranteed accurate element parent hidden get accurate value ensure element visible using width jquery attempt temporarily show rehide element order measure dimensions unreliable even accurate significantly impact page performance showandrehide measurement feature may removed future version jquery", "d": "12/2016"}, {"body": "seems like ca nt fix side fuweichin idea could fixed", "d": "12/2016"}, {"body": "suggested solution resetting type works considering ca nt reset form element using jquery api usually done natively nt think cover jquery solution thinking adding reset hook big side effect setting value think solution plugin best jquery plugins deal forms aware bug address nt think something address core", "d": "12/2016"}, {"body": "please look programming help stack overflow turns really bug jquery please create test case jsfiddlenet jsbincom link reporting issue", "d": "12/2016"}, {"body": "tldr support array input method work selectors dom element references jquery objects alike tests show array input works dom element references", "d": "12/2016"}, {"body": "added test cases show works", "d": "12/2016"}, {"body": "maybe best portability work level nested arrays see test case", "d": "12/2016"}, {"body": "behavior documented believe signature quite complex enough probably nt even mentioned since redundant want test array might include nonelements recommend converting jquery collection", "d": "12/2016"}, {"body": "agree confuses signature start accepting different things array case doubt works property wanted accept jquery collections", "d": "12/2016"}, {"body": "agreed cleaner explicit user convert array nt want make api even magical allowing mixed type arrays", "d": "12/2016"}, {"body": "please provide either test case demonstrating bug concise description requested change free side notes historical references note try return subpixel values applicable etc insufficient", "d": "12/2016"}, {"body": "please provide either test case demonstrating bug concise description requested change nt bug though clearly issues years including still exist mentioned documentation one performance clarity potential improving clear concise description requested change prolonged bits code big part described problem free side notes historical references benefit recurring theme issues opened last two weeks nutshell trying deal bugs taking time would better used analyzing causes perpetual presence bugs one code clarity main point making one example way tries handle html xml elements clearly need restructuring get shortly fork furthermore related comments obviously date note try return subpixel values applicable clientwidthoffsetwidthetc insufficient argue trying return values would make already muddled interface even worse leave wrapper example point method returns value redundant confusing particularly developers familiar would likely appreciate easy access properties like without tack array subscript something think future issues handled present even want add yet another wrinkle involving possible subpixel dimensions bulk arguments still valid really read including notes historical context wait update fork related changes", "d": "12/2016"}, {"body": "recurring theme issues opened last two weeks yes disincentivizing us consider offering remedy example point method returns value nt always return value ignores", "d": "12/2016"}, {"body": "yes disincentivizing us consider offering remedy completely backwards think really care whether actually use stuff trunk fork going diverge wildly point anyway idea carefully considering saying implementing recommended changes project benefit long run remain bug fix treadmill crystal clear ten years stuff making one last attempt get thing smoother path tired bad example behavior nt always return value css width ignores borderbox short unlike computed width computed width regardless box model cases others still others neither perfectly okay characterization ignoring particular box model wrong mentioned quoted comment either wires crossed something profoundly wrong andor methods look shortly certainly appears contradicting documentation difference css width width latter returns unitless pixel value example former returns value units intact example width method recommended element width needs used mathematical calculation edit see note width always return content width regardless value css boxsizing property side note documentation full little caveats like okay see getting though characterization issue backwards problem event cares used really need know dimensions simply get computed borders padding math suggested next line documentation jquery may require retrieving css width plus boxsizing property subtracting potential border padding element element boxsizing borderbox avoid penalty use css width rather width", "d": "12/2016"}, {"body": "idea considering saying implementing recommended changes benefit long run remain bug fix treadmill bugs matter ones users library reported appreciate help", "d": "12/2016"}, {"body": "bugs matter ones users library reported appreciate help sure would different agendas moment nt stand reason clean code fix things potential create bugs make fixing bugs precarious timeconsuming see gradual decrease number bugs reported less cases bug fixes lead new issues granted user library reports indeed contain bugs trouble getting closed bugs even discussed let alone understood lesser bugs nonuser reported anyway never set aside time deal bigger issues smaller issues become plentiful eventually overwhelm us seem know quandary trying help understand fix big picture long time", "d": "12/2016"}, {"body": "lesser bugs nonuser reported actually yes soon actually impact someone using library look pain causing determine priority impact compatibility", "d": "12/2016"}, {"body": "anyway never set aside time deal bigger issues smaller issues become plentiful eventually overwhelm us seem quite fair assessment one person overwhelming bug tracker moment manufactured situation fewer open bugs project installed base jquery pretty darned good", "d": "12/2016"}, {"body": "actually yes soon actually impact someone using library look pain causing determine priority impact compatibility bug bug regardless reports nt better squash bites others assuming nt already realize many bugs go unreported users simply go around getting try replies stackoverflow random experimentation discussing far present bugs talking profound easily correctable mistakes inhibit fixing present bugs well cause future bugs furthermore actually presenting solutions cases code", "d": "12/2016"}, {"body": "quite fair assessment one person overwhelming bug tracker moment manufactured situation got wrong end stick certainly referring reports rather rest asserted taking much time time left discuss anything else", "d": "12/2016"}, {"body": "see straighten mess remove odd caveat regarding methods documentation methods like simple enough require asides starts making simply parse number string returned function corresponding styles innerouter varieties way even involve fractions pixels mentioned left function also realize fractions pixels matter odd cases calculations may lead rounding errors ceiling single pixel worth making every dimensionrelated function slow complicated issueprone sake fractions pixels instead requiring user perform additional calculations results using border box model currently documented either use box models intended math results going grain eg trying find width element uses content box model clearly user nt know box model using implications results functions wo nt much meaning anyway demonstrate fork deprecate existing methods add others usual way preserve compatibility correcting longstanding design issues may break compatibility know changes nt going get merged anyway certainly calling parsing converting subtracting computed border widths nonstarter similar scenarios exist rest numbers wo nt add demonstrate trying simulate box model without padding results always differ weird fractional values chrome might expected trying calculate subpixels subtracting parsed styles simply useful", "d": "12/2016"}, {"body": "innerouter varieties way even involve fractions pixels mentioned left css function personal opinion people need subpixel values slightly slower integer ones going give already decided", "d": "12/2016"}, {"body": "agree proposed changes eliminate pull request welcome", "d": "12/2016"}, {"body": "sure fork current state would create another fork expect change came eliminating bigger issue dozen changes fork point might easier somebody else fix based suggestions case one closed due prematurely reason", "d": "12/2016"}, {"body": "calls method instead attempts figure offset element document origin would equivalent computed styles small subset cases see emphasis mine get current coordinates first element set matched elements relative offset parent test case needed logic clearly incorrect position tolerated claiming existence bug onus upon demonstrate", "d": "12/2016"}, {"body": "see emphasis mine get current coordinates first element set matched elements relative offset parent granted must method mind regardless invalidates portion issues raised ticket nt believe second method sufficient look add concerns related method side note method names confusing always vs clearly lead wasted time excuse certainly related lesson position tolerated claiming existence bug onus upon demonstrate something clearly wrong code logic eg function appropriate substitute rtl documents evidence gathering strictly secondary concern often close tickets prematurely without sufficient discussion points raised issues always bugs reproducible presently supported browsers may indicate potential future issues ca nt see wasting time test cases page agree address contained issues either understand code nt made one mistake one points still clearly valid ticket closed glad nt bother getting far example issue missing styles test case needed simply omission code nt quite sure nt miss writing test case prove code missing", "d": "12/2016"}, {"body": "quite sure nt miss writing test case prove code missing making noise recommend nt report bugs willing provide test cases", "d": "12/2016"}, {"body": "making noise figure simply hooks would take search jqueryjs right bottom one line know nothing issue hand test case needed prematurely closed ticket certainly going write one repeating comment hook emphasis mine side note wonder happens percentages would nt surprise leave speculation moment furthermore address previous objection see emphasis mine get current coordinates first element set matched elements relative offset parent nt even need look code realize inference fixes central issue raised false example elements style would finding offset relative offset parent help handle edge cases work coincidence obvious strategy fail far often works really need test prove regardless definitely writing test cases closed tickets ca nt see point closing tickets discussed point everyone understands issues raised well proposed solutions accounting thing recommend nt report bugs willing provide test cases told best place discuss proposed changes seeing seeing lot confused kneejerk reactions complaints taking time easy solution", "d": "12/2016"}, {"body": "told best place discuss proposed changes seeing unlike code reorganizations proposed ticket purports describe bug calls behavior change nothing sort would accepted without unit tests pointless even start changing code without demonstration problem willing provide test cases bug reports almost certainly closed makes sense file provide one reopen issue", "d": "12/2016"}, {"body": "unlike code reorganizations proposed ticket purports describe bug calls behavior change well adding code clearly nt exist look code jqueryjs see hooks styles code comment quoted indicates bug trying fix found exclusively styles nt take comment realize would case elements positioned percentage styles would also dig browser actually displays quirks alleged fixes try deal rest really need test determine finding offset positioned parent equivalent position style makes sense fallback much simpler agree logic cases wrong obviously wrong tests could ever disprove matter many browsers documents try test common theme browser scripting bugs inconsistencies come go time rtl issues clear styles reversed documents parts documents going account closing ticket indicates none issues valid amount testing prove problems result solutions never developed point try make issue tracker score look better like saying ca nt see bugs bugs ca nt see us hand ticket left open perhaps somebody undertake prove obvious stated repeatedly developing tests tickets prematurely closed nothing sort would accepted without unit tests unit tests added agree exactly trying fix agree code corrects problems logic done several tickets prematurely closed unit tests added insure regressions fixes result future changes", "d": "12/2016"}, {"body": "unit tests added agree exactly trying fix yeah trying fix user reported bug", "d": "12/2016"}, {"body": "yeah trying fix user reported bug see much explanation necessary summarize glaring omission style hooks way position elements obvious mistake using method fallback failed computing styles one example wo nt work another method going include margins whereas obviously separate styles another obvious mistake thinking appropriate figure styles rtl documents parts documents questions issues ask explanation discussing issues learn helps avoid repeated mistakes future fixing issues prevents compounded future closing tickets without much question productive previous comments conclude watching bug tracker scoreboard trying make score look respectable anyway best try fix bugs get users sort backwards quality control strategy waits customers already affected upgrade huge complicated monolithic dom library fix problem never mind may well pick new bugs process code constant state flux waiting around user complain pointless first look answer stackoverflow get dozen try responses involve jquery methods others bypass jquery entirely tacking subscript object calling dom methods event remain blissfully ignorant problem besides appears perpetual backlog count two people working issues currently open would nt try avoid queue go guess stackoverflow", "d": "12/2016"}, {"body": "see little evidence teamwork person reports issue nt work ticket simply closed without discussion nobody else bother pick ca nt see point sweeping bugs rug matter many open given time able prioritize allocate resources accordingly", "d": "12/2016"}, {"body": "see little evidence teamwork person reports issue nt work ticket simply closed without discussion nobody else bother pick agree work needs done matter many open given time able prioritize allocate resources accordingly encouraging focus bugs users library reporting theoretical bugs performance issues nobody encountered worth time triage fix", "d": "12/2016"}, {"body": "agree work needs done still nt agreement issues encouraging focus bugs users library reporting closing tickets instead prioritizing discourages others working bugs fall cracks likely big part code ended present state theoretical bugs performance issues nobody encountered worth time triage fix theoretical bugs nt understand nt make less real way know nobody encountered explained repeatedly well nt take time triage nt close somebody takes time understand", "d": "12/2016"}, {"body": "user reported bug fixing bug determined moment user report bug somebody find bug reported user means problem never occurred user trying understand process workflow experience see users including developers never report bugs instead fix locally need quite fast nt want wait specific ownersgroup people fix", "d": "12/2016"}, {"body": "user reported bug fixing bug determined moment user report bug biggest problem issue amp many others conflates many issues one clear effects requested changes really hard follow issues promote digressions discussion someone reports separate issue clearly requests one api change clear succint description preferably short code snippets showing change consider experience see users including developers never report bugs instead fix locally need quite fast nt want wait specific ownersgroup people fix true issue affects many people someone usually report end ca nt secondguessing users library", "d": "12/2016"}, {"body": "biggest problem issue amp many others conflates many issues one clear effects requested changes one hook related styles really hard follow issues promote digressions discussion jquery code tangled mess many places digressions occur feel free open additional issues see fit opposed closing door someone reports separate issue clearly requests one api change clear succint description preferably short code snippets showing change consider closing ticket precludes sort teamwork issue bother read closed users could expected provide code snippets potential solutions linked old primer demonstrates quite clearly figure styles without using problem hook question trying solve true issue affects many people someone usually report end end ca nt secondguessing users library mean coders therefore must able spot invalid logic makes way users least must proactive fixing bugs already made public nothing secondguessing sort guessing jquery users likely assume something wrong generally unlikely recognize bugs interfaces vague names often confusing results eg easily used misunderstood method furthermore even recognize odd result idea come straight report ridiculous users particularly jquery users often guessing rearranging patterns seem work fewer still able describe issues beyond nt work provide clear test cases ca nt abdicate responsibility finding reporting bugs users particularly silly case already found mistakes", "d": "12/2016"}, {"body": "ctomczyk davidmark anyone else provides test case demonstrating bug reopen issue", "d": "12/2016"}, {"body": "\uc624\ud6c4 richard gibson notifications githubcom\ub2d8\uc774 \uc791\uc131 closed receiving subscribed thread reply email directly view github mute thread", "d": "12/2016"}, {"body": "davidmark anyone else provides test case demonstrating bug reopen issue still nt understand issues described one reopen issue perhaps somebody continue work tired nonsense leave closed assure nobody work", "d": "12/2016"}, {"body": "bug report finishes test case needed logic clearly incorrect already starting wrong foot start test case clearly fails talk whetherwhy code wrong fix test case end unit tests happy", "d": "12/2016"}, {"body": "bug report finishes test case needed logic clearly incorrect already starting wrong foot really able agree logic wrong without seeing fail test case recurring theme never mind starting long past starting ticket closed solution reopen maybe somebody work long stays closed nobody going work particularly closing ticket tells everyone may interested helping move nothing see start test case clearly fails talk whetherwhy code wrong fix particular case makes think supported browsers even run bs hook code already know test fails outside recent versions handful browsers rejected irrelevant result hook never even runs today remain code nt fail tests current browsers follow ca nt rely test results everything actually understand code analyze test results solution propose remove whole mess run current unit tests whatever narrow range browsers consider supported see happens nobody going anything closed ticket", "d": "12/2016"}, {"body": "nt bothered going back ready related discussions please explicit design decision good starting point", "d": "12/2016"}, {"body": "please explicit design decision know illadvised decision sure really justifying something like glance linked issue", "d": "12/2016"}, {"body": "looked expected still thoroughly disagree ready callback throws exception bets callbacks period point idea state application document developer debugger looking stopped code traversing stack trace looking variable values etc determine went wrong callbacks muddy waters", "d": "12/2016"}, {"body": "seems bundling together many opinionated changes interested reviewing core please submit pull request without reference changes comparison changes", "d": "12/2016"}, {"body": "seems bundling together many opinionated changes interested reviewing core please submit pull request without isarrayisplainobject reference changes comparison changes noted one directly related prematurely closed issue part rewrite involves embedding slimmed version last barrier deprecating method main point neither mentioned changed extant calls method surprise already using method expect jqueryisarray deprecated", "d": "12/2016"}, {"body": "part rewrite involves embedding slimmed version last barrier deprecating method main point may motivation embedding vs referencing extant independent change may well choose accept changes without anything regarding neither mentioned changed extant calls method surprise already using method expect jqueryisarray deprecated indeed mistake action required", "d": "12/2016"}, {"body": "may motivation embedding vs referencing extant independent change may well choose accept jqueryextend changes without anything regarding jqueryisplainobject agree could separated fork would backtracking also see changes made better deprecated", "d": "12/2016"}, {"body": "closing per davidmark comments", "d": "12/2016"}, {"body": "closing per davidmark comments simply said nt backtracking fork clearly free want trunk", "d": "12/2016"}, {"body": "optimizations always considered see need keep issue open external demand necessitating change", "d": "12/2016"}, {"body": "optimizations always considered see need keep issue open external demand necessitating change nt need wait user complaints make improvements one getting rid inappropriate overly complicated obviously troubleprone function motivation needs come within understand time limited due neverending stream bugs stopping moment consider deal root causes pay dividends helping prevent future issues might learn experience well", "d": "12/2016"}, {"body": "nice catch thanks", "d": "12/2016"}, {"body": "lines around long time remember least trying remove finding current safari webkit still needed review blame file determine history probably related tickets several years old may take time find person advocating nonessential change show safe", "d": "12/2016"}, {"body": "lines around long time remember least trying remove finding current safari webkit still needed aware around long time please nt shout spend time later trying see offending lines could removed problem nt fixed properly time identified iirc yet another case wanting add line two due file size concerns however related feature test would removed result net would push worst mentioned posted solution several years ago usenet relayed resig decided use famously went attack character repeatedly another sad story history project though result add extra line try support different area code javascript var parent elemparentnode get function elem look carefully bug getter setter agreement implement noop hack established old mystical incantations needing incorrect review blame file determine history probably related tickets several years old may take time find need provided enough information post fix code without going back searching original proposed answer provide fix nobody comes hint solution simply delete noop lines though certainly vanish along indirect feature test pulling back bit posted snippet see context provides another clue javascript selected function elem accessing property makes selectedbydefault options safari work properly elemparentnode elemparentnodeselectedindex terse ambiguous comment bit oddly stated well exactly mean makes selectedbydefault options safari work properly rhetorical question hopefully know exactly hack trying accomplish discussed forum several years ago person advocating nonessential change show safe answer posted clear assurances needed basic logic problem usually case browser scripting gathering empirical evidence evidence proves nothing certainly talking unevenly applied mystical incantation testing comes logic clearly fixed figure existing unit tests added bet house wo nt needed thoroughly disagree nonessential change identified inconsistency use feature test result well indirect nature test words existing hack nt even applied consistently indicates unit tests either incomplete never run environment featuring quirk trying spackle additionally would difficult determine anyone ever bitten bug actually took time complain stackoverflow usenet etc would likely taken form nt work perhaps try suggestion helped get around recurring themes", "d": "12/2016"}, {"body": "anyone anyone know effects", "d": "12/2016"}, {"body": "sorry let repeat asking want make changes code bugs currently open please homework go back look browser bugs caused seemingly meaningless lines put source longer needed browsers occurred longer supported remove otherwise check list bugs reported users library see help", "d": "12/2016"}, {"body": "sorry let repeat asking want make changes code bugs currently open nt listening analysis trumps evidence gathering ie nt release code seems work coincidence customers nt want guinea pigs ca nt relied upon report every odd quirk encounter please homework go back look browser bugs caused seemingly meaningless lines put source already said responded solution remove lines replace logic makes sense need homework posted solution discussed forums several years ago longer needed browsers occurred longer supported remove wrong end stick browser scripting done proactively anticipate issues tend come go browsers create fix inconsistencies otherwise check list bugs reported users library see help treadmill project decade big reason code state", "d": "12/2016"}, {"body": "current code base bit clear explanation thanks analysis though would help would nt verbose next time though", "d": "12/2016"}, {"body": "current code base bit clear explanation cited code certainly still appears exactly cited lacking check flag well consideration includes old comment unspecified safari version code looking please nt bother splitting hairs saying code technically part sizzle jquery included jquery build repo fact may need updated elsewhere irrelevant waste time bring stage guessing meant current codebase remark event code linked nonsense discussed resig others several years back cited nothing changed although look carefully hack even applied evenly also mentioned furthermore ridiculous think hack anything like required setting selection short bunch voodoo nt even consistent application correct logical solution discussed forum years ago gave enough hints somebody come beyond belief nobody made slightest effort understand issue let alone suggest look correct solution thanks analysis though would help would nt verbose next time though verbosity issue comes repeatedly explaining thing responses repeatedly miss point one cycle code complete nonsense regardless attempts rationalize correct solution posted several years ago dismissed might added line two responses far nobody addressed point ticket prematurely closed nt expect anybody else consider issue also correct code eliminate need flag associated code entire solution actually reduce code size seems major focus almost exclusion concerns", "d": "12/2016"}, {"body": "guess spell answer q trying fix example q missing none elements attribute first implicitly selected q issue browsers known delay setting property implicitly selected old problem typically nt issue unless trying reference property document ready q first lose indirect feature test using disembodied second get rid hack set property clearly longer issue third get rid hack well simply discards answer finally andor method change way check whether selected hinted hack references throws away property property answer problem determining whether selected javascript var isoptionselected elselect elemparentnode elselecttagnametolowercase optgroup elselect elselectparentnode isoptionselected elem elselectoptions elselectselectedindex see makes logical sense deducing value using property opposed throwing away correct solution long attribute solution required multiselect implicitly selected options controls leave check exercise could also add check elements parent would nt bother getting setting property element makes sense ps worried performance browsers display quirk add direct feature test use result andor duplicate sizzle", "d": "12/2016"}, {"body": "guessing meant current codebase remark meant still sizzle repo sizzle jquery different projects differences important case important planning remove sizzle dep entirely browsers known delay setting selected property implicitly selected option old problem typically nt issue unless trying reference property document ready start testcase jsbinjsfiddle others trying tell first lose indirect feature test using disembodied select second get rid set hack set property clearly longer issue third get rid get hack well simply discards answer pull requests new tests without falling old tests code linked nonsense discussed resig others several years back cited nothing changed although look carefully hack even applied evenly also mentioned avoided since important information tend get lost supply philosophy irrelevant stories etc see", "d": "12/2016"}, {"body": "meant still sizzle repo sizzle jquery different projects differences important case important planning remove sizzle dep entirely ticket definitely planned create dump sizzle eliminate obvious problem raised sync bit late course good finally dumping thing meant nt say last thing need riddles also importance jquery builds web incorrect code rather brush obvious bug technicality would suggest discussing fixed across three major versions regardless repo code originally comes worry removing sizzle doubt going happen time soon obviously never versions start testcase jsbinjsfiddle others trying tell others saying saying really nt think good idea remove hack closed ticket understanding nt suggesting tenth time new audience implying logic needed replaced something made sense need understand lack failing test nt imply code makes sense wo nt fail future browser scripting involves analysis anticipation reviewing test results current browsers pull requests new tests without falling old tests need new test cases behavior change suggested original unit tests confirm used browsers actually quirk end story ticket closed nobody seemed understand issue thought saying remove hack closed nobody going work including pull requests nothing get avoided avoided appear quoted wrong bit response avoided discussing issue resig several years back definitely important many arguments mention go back review history issue confusedly thought suggesting removing hack without replacement mentioned repeatedly see answers right pointed instead telling go back would better follow lead review original issue proposed solution already knew posted perhaps mean avoided posting answer everyone else else refused go back look history mentioned nt really matter ticket closed want learn something history thread starts turns issue post matt kruse note matt states quite clearly start thread relaying suggestions kept telling wasting time telling go back read history words course know wrote book find rationale even bug discussed anyone point curious resig answers posts later hmm nt remember bug offhand reproduction failing passing later matt resig discussed halfbaked fix issue hack discussing seven years later mentioned repeatedly new test cases needed even dmethvin mentioned tried remove replace hack got unit test errors mention new test cases needed tickets referenced well filed fixed filed fixed note resig took half suggestions rejecting one mentioned start ticket replace hack logic makes sense code right first post almost exactly suggested comes paragraph matt starts discussion colleagues better approach identified would whoever else related clj discussion yes clj group resig refused read refused hear times insisting nobody could mention suggested solutions originated usenet group one reason obvious junk code remains jquery day addition resig else present first thread none dmethvin yes dmethvin guy singlehandedly stalled ticket closed insisting go back find history would confused code back would roughly another three years main subject thread ahem fixed well attempted reverted never know even getting junk point learn opening exchange kruse resig matt opens recounting numerous issues one code reviews know ones resig never read warned others avoid matt provided links review old attributes primer resig responded much way others responded ticket three first four sentences specific examples see", "d": "12/2016"}, {"body": "jquery historically exposed guts allowed spiesmocksetc undocumented methods already made actually private explicit design decision point would valuable little", "d": "12/2016"}, {"body": "jquery historically exposed guts allowed spiesmocksetc undocumented methods already made actually private late jumping hoops work modular frameworks exposing way renders modularity moot developers may think creating apps safe meddling fact basement door wide open nt personally care one way nt rely frameworks personally nt see way make browser scripts immune meddling outside particularly rely dom ironic see jquery paired things angularjs", "d": "12/2016"}, {"body": "public function nt see need privatize call privatized version nt experienced many problems design decision", "d": "12/2016"}, {"body": "resolved", "d": "12/2016"}, {"body": "jquerymerge public function nt see need privatize call privatized version nt experienced many problems design decision completely missed point closed issue prematurely suggest read issue everything export object public nt mean reference functions way defeats purpose using modules similar situation exporting calls commonjs nodejs module break module example count ten calls clearly good idea allow outside code change behavior function delete use modules first place going reference global shared variables within module idea link documentation supposed prove certainly adds support assertion public function method somehow immune modularity rules unclear suggest ask questions rather simply closing issue recurring theme", "d": "12/2016"}, {"body": "resolved think", "d": "12/2016"}, {"body": "seems like thing would happen without jquery ca nt stop building invalid html however test case pretty large would possible reduce even lot going", "d": "12/2016"}, {"body": "ok one kind cool appended table contains inner table one try find contain incoming row mistakenly use one inner table straightforward fix", "d": "12/2016"}, {"body": "thanks digging", "d": "12/2016"}, {"body": "invalid tbody required tr comes right table", "d": "12/2016"}, {"body": "shyliontjmn first glance looked like unclosed tag something dug jquery bug", "d": "12/2016"}, {"body": "ok thanks", "d": "12/2016"}, {"body": "seems indeed duplicate issue commit fixes issue see thank", "d": "12/2016"}, {"body": "know return something different depending collection approach trademark jquery early design fan continuing tradition especially case get information via works way back jquery strong argument gettersetter api might make sense nt think applies case", "d": "12/2016"}, {"body": "dmethvin comment sensible hard argue kinda want argue anyway might worth like see examples return values", "d": "12/2016"}, {"body": "timmywil one example html name suggests running produces nodes", "d": "12/2016"}, {"body": "put together js templatenodechildnodes gt nodelist templatenodecontentchildnodes gt nodelist text elements templatenodecontentchildren gt htmlcollection", "d": "12/2016"}, {"body": "discussed one given solution short currently return empty list fix something like", "d": "12/2016"}, {"body": "techquery would like pr", "d": "12/2016"}, {"body": "note careful make contents stop inert running need test ensures happen example could create tag containing script onload handler making sure none fires", "d": "12/2016"}, {"body": "timmywil like make new pr issue one question branch commit", "d": "12/2016"}, {"body": "techquery master nt maintain versions amp anymore", "d": "12/2016"}, {"body": "thanks report safari first part comment applies browsers create mouseenterleave events using mouseoverout eventtime checks event delegation works jquery pointerenterpointerleave pointeroverpointerout see also", "d": "12/2016"}, {"body": "somewhat related question browser scrolls initialization sequence consistent standard across browsers test chrome firefox edge safari", "d": "12/2016"}, {"body": "also since expecting code run page load might well scroll element code work browsers", "d": "12/2016"}, {"body": "issue happen jquery firefox jquery chrome jquery firefox issue happen jquery chrome sample code demonstration creating dynamic element directly using angularjs create dynamic elements indirectly", "d": "12/2016"}, {"body": "might jquery ready callbacks fire little later changed deferreds implementation lot think dmethvin right even though worked fine jquery might coincidence maybe people nt work even think need wait element appear use angular anchorscroll service scroll proper element", "d": "12/2016"}, {"body": "interesting definition browser suppose scroll element represented fragment identifier document loaded however decide tell document loaded well defined cross browsers least nt see seems happens domcontentloaded events however seems things changed jquery yes agree even jquery safely say document ready saw jquery might chances ready function could triggered timer solution allow application handle fragment identifier instead rely browser behavior inconsistent wo nt call regression anymore", "d": "12/2016"}, {"body": "want programmatically scroll specific element use popular jqueryscrollto nt think need core would much code case since using angular anchorscroll service would better solution going close issue please see decide whether include something core thank time", "d": "12/2016"}, {"body": "works try tweaking fiddle recreate failure", "d": "12/2016"}, {"body": "since response owner ticket quite time closing", "d": "12/2016"}, {"body": "hello sorry toolong look fiddle sorry bad link", "d": "12/2016"}, {"body": "abridged summary happens construct nodes html text identify temporarily disable contained script elements insert nodes dom script order reenable indocument already evaluated evaluate case first script invokes jquery ui ancestor later scripts evaluated applies dom manipulation process assumes indocument script elements already evaluated case static content marks accordingly time outer call gets around looking later script inner call already marked evaluated skipped weight code required fix issue probably great us justify adding especially since script evaluation undesirable legacy behavior easily worked around moving scripts outside manipulated ancestor", "d": "12/2016"}, {"body": "ignoring second part logically separate issue fine switching type check object string provided nt increase gzipped size jqueryminjs", "d": "12/2016"}, {"body": "ignoring second part logically separate issue fine switching type check object string provided nt increase gzipped size jqueryminjs thanks yet done thing brain sample required changes deprecated eventually deleted easily make additions incurred idea checking every commit see whether added bytes file size wrong premature something call premature counting bytes like checking gas level ounce every time hit stop light leave trend develops likely downward one fork plenty fat trim project time increased factors weigh size increases eg code clarity performance anyway round two", "d": "12/2016"}, {"body": "second one easy well method javascript var prefix add function key valueorfunction clearly three possibilities though comments mention one infer two array object object object constructed jquery object object constructed jquery objects prototype chain objects bad variable name leave moment line checks either array something object constructed base object object constructor call fancy object truthy property fairly poor duck typing inference clearly require next line arraylike object apparently assumed contain references form controls direct inference get future issue fair enough still make assumption contents arraylike object simply documented passing variation jquery object eg containing document reference lead undefined behavior know come head frames short answer frameset unlikely document another jquery would required jquery deals single window time would simply use frame would nt make sense pass jquery object constructed one frame another frame event could documented though would nt bother function would still work provided frame object illadvisedly augmented words would take perfect storm incompetence part caller break hand trivially easy break original indirect inference finally let dump reference straightforward eliminate javascript var prefix add function key valueorfunction leaves three go one require little inspection thought first two due overloading involving host objects two appears variation old function expect two fixed first leave single function calling matter insidious function appears truly nightmarish code appropriate bits simply folded deprecate eventually drop yes may increase code size temporarily sometimes cost progress important get design right first time ultimately net decrease removed mention creeping towards extinction along though far slowly dozens references look next one time confirmation page changes", "d": "12/2016"}, {"body": "appropriate bits isplainobject simply folded nt boilerplate seems odds claim net size reduction willing proven wrong", "d": "12/2016"}, {"body": "also compatible separate instances jquery unacceptable canonical method detecting jquery collections", "d": "12/2016"}, {"body": "isplainobject nt boilerplate seems odds claim net size reduction willing proven wrong feel quite sure wo nt require every line function eliminate call hand wrong still leaves performance clarity benefits latter makes code easier debug maintain seriously doubt increase size due proposed changes overshadow benefits see let know round", "d": "12/2016"}, {"body": "also instanceof jquery compatible separate instances jquery unacceptable jquery canonical method detecting jquery collections read dueling scenarios existing one trivial break however canonical consider test would require bizarre turn events including using separate instances even worth considering clear makes sense furthermore allowed pass nonarraylike fancy objects truthy property seems complicated document name allowing one instance jquery call another method makes head hurt thinking regardless make direct inference determine arraylike object containing form control elements simply arraylike object clearly assuming contents perhaps validate jquery object something like note calling way cover odd chance lacks prototype case object would actually make sense think check tomorrow best luck ps one hint augmented jquery break many places due unsafe forin loops", "d": "12/2016"}, {"body": "canonical could check object property definitely require makes check explicit allow", "d": "12/2016"}, {"body": "jqueryparam makes isplainobject check explicit allow jqueryparam jquery value see edited response sorry nt notice new reply interim", "d": "12/2016"}, {"body": "found line interesting light previous discussions canon context context instanceof jquery context context clearly canon consistent throughout", "d": "12/2016"}, {"body": "three go snippet mistakenly said earlier two calls one remaining two javascript handle html array match context context instanceof jquery context context handle id else line play case html string representing single tag element fact object properties representing ahem attributes whatever names values days believe mostly dom properties html attributes xml another long complicated story irrelevant problem hand attempting discern clue line apparently document element something else allowed case appears possibilities beyond host object include object anything else would lead undefined behavior well throw jquery lumps two together type checking arguments let say something falsey eg values element document host object object representing properties attributes set single element idea sort test need example function indicates seems easy solution eliminate simply asserting truthy also know appropriate property attribute set element would seem like simplest straightforward solution also consistent previous duck typing function furthermore allows fancy objects ie constructed something house namevalue pairs passed nt seem like common use case ca nt imagine reason objects disallowed never like see boolean type conversion host object properties known throw exceptions past history guide host object reactions appropriate let knock unneeded call javascript handle html array match context context instanceof jquery context context handle id else updated comment well correct wrong know set properties attributes depending dom type nt right somewhere around realized alone impossible make work added companion leaves calling simply identify bits still required add deprecate wait make sure objections suggestions diving one certainly get biggest performance boost particularly extending deep", "d": "12/2016"}, {"body": "let take step back exactly changes intended accomplish generally revisit code users report bugs performance issues refactoring code nt problems introduce compatibility problems requires time attention multiple people team members best time type refactoring region code reported issues refactoring helps resolve issue process makes code better dozen issues would great starting point changing code would also fix real problems users reported", "d": "12/2016"}, {"body": "let take step back afaik yet take step forward proposing several steps forward see takes us exactly changes intended accomplish explained clarity performance eliminating crutch isplainobject soon followed functions encourage poor design seen untangling code best hemmed design decisions date back decade likely never changed regardless making good progress long term expect reduce amount code well code size seems major focus generally revisit code users report bugs performance issues say led state code exactly define performance issue looking code seeing sorts unneeded function calls expensive furthermore untangling process identified inconsistencies eg use instanceof one place duck typing another try sniff jquery object inefficiencies redundancies code harder follow less clear makes harder document refactoring code nt problems introduce compatibility problems requires time attention multiple people team members sure define problems goes without saying refactoring code break compatibility requires time attention providing consider obscure inconsistent code problem document harder maintain clear consistent code every time go patch bug chance creating bugs tied clarity consistency code also know experience well reading code jquery relatively slow virtually everything remember jsperf comparisons posted comparing library coincidence know improve performance dojo several years back balked urge follow footsteps certainly nt lead forward dozen issues would great starting point changing code would also fix real problems users reported good luck bug fixes moment feel free use use whatever want explaining everything detail go really feel pat hand nobody complaining advise reevaluate position recall users reported real problems ua sniffing hand never shortage issues related specific causes never pinpointed complaints nt work variety code clearly hard follow underdocumented supposed myriad unit tests testers nt helping identify problems either code simply made sense sure seemed work per prescribed tests five years became clear tests simply insufficient diagnose problems design much code meet vaguely documented expectations coincidence hard follow expectations murky deviations simply written edge cases another coincidence related select elements pointed years ago still code today sure unit tests users yet complain code either though may well caused issues also dismissed edge cases sun spots problems phase moon etc get one perhaps somebody else go deal issue hand problem solution discussed public numerous times years ironically solution dismissed may added extra line two sound familiar resig could nt see evidence extant code nt work ie complaints problems philosophy design ca nt patched fit neatly tickets piling patches without longterm vision exactly code ends convoluted inconsistent much harder patch without creating new issues nt expect users evaluate clarity code performance either though may compare latter get similar libraries way stay ahead curve proactive digress moment dealing mostly crutch unable deal design issues created happily appears one go away entirely without changing api similar methods may go quietly see idea future methods crutches available require designs appropriate ecmascript browser scripting stay tuned", "d": "12/2016"}, {"body": "inspecting clear logic convoluted iterative mixin mashed recursive clonedeep two classic js functions spin recursive bit make simpler follow yes sure break issue least two well nt care mess method present state much simpler see splitting wrap isplainobject abatement split issue one likely renamed something like reduce dependency isplainobject second final nail also restructures really need third replace calls fine seems like able go commits perhaps change issue name reflect", "d": "12/2016"}, {"body": "see point old nature inherent problems nt necessarily show issues tests still bug reports led us refactoring code way john wanted long time however doubt removing documented method without obvious native equivalent point nt want go ripping guts method without bug reports motivate us besides may right needs discussed given limited time work volunteers decided like focus important issues based practical use cases may perfect wo nt considering changes moment thank contributions love like pick existing issue help", "d": "12/2016"}, {"body": "see point old nature attr inherent problems nt necessarily show issues tests still bug reports led us refactoring code way john wanted long time nt write blog post five years first mentioned design problem usenet review think quote along lines always suspected something wrong design problem required adding companion method lumping attributes properties one odd method never going work suppose point listened back also users best source information odd failures tend provide enough details code nt work history repeating may well reports failures related issues kicked could fallen cracks stackoverflow usenet years past wait get coherent bug report users see bugs right john wanted fix long time deprecate method replace two new ones suggested repeatedly usenet nt solution arrived five years later result project sorts new issues deal rightly criticized result quarters personally dealt projects frozen time supporting ie best simply using old version jquery old would nt work ie whatever aspired upgrade also seen projects could nt upgrade jquery new broke old code nobody involved knew black box even cause problems nobody reported anything fix advice always remove jquery equation nobody ever needed get set properties first place digress however doubt removing jqueryisplainobject documented method without obvious native equivalent point point deprecated removed time soon reason us users rely crutch nt increase code size much address concern well several related concerns uncovered dealing think nothing api would one unneeded function simpler removed future simply extraneous function nobody ever want need granted using internally main issue surely users well detriment nt want go ripping guts method without bug reports motivate us never suggested ripping guts simply deprecating methods require ripping due inconsistencies redundancies inefficiencies uncovered investigation issue though impossible unlikely get motivation fix issues due bug reports simply rare cases cause performance issues motivation fix things needs come within best motivation keep issues multiplying easier code follow easier debug misunderstandings lead creation new bugs dealing reported issues particularly concerned bugs flying radar unit tests also realize bugs unclear code silent failures call implies passed value could anything one function two cases could used used one however good reason use either case value question handful allowed possibilities hard follow inconsistent therefore difficult document users complicated test also find redundancy example cases test truthy value moving rest test certainly one first checks falsey values besides may right needs discussed given limited time work volunteers decided like focus important issues based practical use cases nt understand need close issue allocate focus contend reopened least finish time chime isplainobject may perfect wo nt considering changes moment never suggested changing one line suggest changes eliminate use internally elsewhere thank contributions love like pick existing issue help thanks could happen also volunteer work motivated given time right motivated wrap issue paste code fork whether ever gets merged irrelevant may also add additional issues springing one eg breaking strongly suggest everybody reread discussions carefully several mistakes uncovered see sense waiting around users report matter obscure cases may obscure less likely users report yet virtually everything jquery relies lowlevel functions eg furthermore suggested fixes brief simple review provided understand exactly code differs documented best luck", "d": "12/2016"}, {"body": "redid without splitting two turns would nt made much difference expected nt need near amount code needed bits slightly rewritten clarity speed private method deprecated javascript isplainobject function obj function used soon follow methods javascript eslintdisable nounusedvars conditionally created function used inside functions exists var deprecated null typeof windowconsole undefined amp amp typeof windowconsolewarn undefined deprecated jquerydeprecated function feature alternative alternative alternative please find another way windowconsolewarn feature deprecated alternative though used similar function could find code like exception handling likely restructure code share common function mentioned new rehab issue lessons learned investigation adjustment affected code indicative sort work required throughout project get treadmill nagging bug fixes see way regain maintain semblance relevancy problems unrelated theme eg multibrowser builds would pointless get basic issues addressed strongly advise reopening ticket even buy none clear mistakes inconsistencies uncovered previous comments read carefully top apparent", "d": "12/2016"}, {"body": "since jquery always execute callback asynchronously previously sometimes synchronously sometimes makes confusing api decided make uniformly async nt plan change behavior back hard finding issue get less stack trace jquery still see line threw error debugging nt harder example running dom ready jquery see jquery jquery version nt hide important information imo", "d": "12/2016"}, {"body": "hard finding issue get less stack trace jquery still see line threw error debugging nt harder debugging code stop immediately event one ready callback goes time halt possible reason continue code gone expected path goes callbacks debugging far better catch bug act inspect variables consider exceptions may occur sporadically case luck nt recur immediately comes experience debugging complex applications practical break caught exceptions debuggers allow option sucks caught exception allows rest code proceed possibly obscure cause ultimately comes catch ca nt think good reasons know experience plenty reasons catch", "d": "12/2016"}, {"body": "debugging code stop immediately event lot javascript happens asynchronously rule uncaught error async code nt stop code execution outside current async context nt lot jquery language ultimately comes catch already answered question want callback always invoked asynchronously instead sometimes synchronously sometimes nt plan change back thanks suggestion since seems issue making ready back sometimes synchronous nt plan going close", "d": "12/2016"}, {"body": "lot javascript happens asynchronously rule uncaught error async code nt stop code execution outside current async context doesnt lot jquery language completely false debugging ecmascript singlethreaded production still silly wrap callbacks trycatch ca nt imagine calling ready callbacks asynchronously either another story call synchronously asynchronously sure managing call synchronously perhaps referring happens inside callbacks digress already answered question want callback always invoked asynchronously instead sometimes synchronously sometimes nt plan change back none anything catching exceptions fact even important catch asynchronous operations cause likely harder track later ones sporadic well thanks suggestion since seems issue making ready back gt sometimes synchronous nt plan going close afraid completely missed point", "d": "12/2016"}, {"body": "one ready callback goes time halt gack nt want ready handler single point failure entire page previous versions caused lot trouble note also native domcontentloaded events behave way continue run additional handlers even previous ones throw errors aligning behavior possible reason continue code gone expected path reason modern web page code often nt written one person combination plugins code fragments work independently different parts page different ready handlers face hostile code ad blockers browser addons good chance something break combination browser platform addons want charitable donation form break rare failure tooltip plugin essential functionality page", "d": "12/2016"}, {"body": "tested nodejs see yet referring comment obviously depends order calls works expected global object time called chance augment either global object flag always set sure intended way always global object time called one created calling exported factory function two possibilities pass object augmented pass global object reference augmented makes lot sense global referenced like global variables calling module finally object global passed exported factory function global object window passed results correspond two difference two arguments must passed get second outcome seems cover every previous possibility adds particular interest ability augment global object calling module allows script reference browser code makes lot sense global object kept separate reflects fact object every environment clearly thoroughly documented", "d": "12/2016"}, {"body": "thank providing full thought process agree wrapperjs parameter poorly would accurate separate parameters might even better happily accept behaviorpreserving pr clean regarding behavior see code leads astray line javascript moduleexports globaldocument checks global document object browsers implies global reference global object however seen global may reference one three types objects window object browsers sort module object nodejs surely document property global object unspecified environments comments little help imply global references window object primary use case window object poorly named right line intended detect property global object ie parameter split suggested would quite confusing inconsistency end javascript else factory global know point moduleexports object nt know whether global object document object jquery fail soon references windowdocument argument name window core adds additional confusion actually primary use case mentioned like see made explicit wrapperjs refactor regardless lack means definitely engaged commonjsnodejs initialization therefore must window object succeed bigger issues require changes really allow passing global object reference window object factory function global object passed window object found property object made possible wrapperjs additional argument also added core script example likely used javascript expose jquery identifiers even amd commonjs browser emulators noglobal windowjquery window jquery strongly disagree refer example wrapperjs call add properties provided window object affect context environment anyone wanting free make call like context object initially windowlike bottom line despite naming flaws wrapperjs initialization working intended noncommonjs browser environment attaches function alias global commonjs exports function associated global attach nodejs exports factory function returns function resulting executing noncommonjs browser initialization provided window developed somewhat organically people wanted jquery new environments sometimes form multiple coexisting instances even multiple versions changes question proposals would clear consider backwards compatibility said proposal changing initialization behavior", "d": "12/2016"}, {"body": "thank providing full thought process agree wrapperjs parameter poorly would accurate separate window global parameters might even better happily accept behaviorpreserving pr clean look three files changed changes add extra argument initial function call add one factory function initial call always gets global object argument called moment even would inaccurate eg nodejs regarding behavior see code leads astray primary use case global window object poorly named right yes obviously browsers virtually identical global object may even object browsers get reference global object nt led astray code massively confusing written commented particularly variable naming regardless lack moduleexports means definitely engaged commonjsnodejs initialization therefore global must window object succeed global object well virtually identical object browsers look code covered everything point missing event something else passed least document property strongly disagree refer var jquery require jquery window example wrapperjs call add jquery properties provided window object affect context environment covered case code tested nodejs well also created option pass global object nodejs makes ultimately work exactly like browsers extra exported factory function course currently asymmetry behavior nodejs browsers extra exported factory function bottom line despite naming flaws wrapperjs initialization working intended noncommonjs browser environment attaches jquery function alias global window augments global object odd indirect way using host object conflation addressing commonjs exports jquery function associated global window attach written case environment global object truthy property case think makes far sense augment global object understand even though currently augmenting browsers effect augmenting global object end result correct odd way get nodejs exports factory function returns jquery function resulting executing noncommonjs browser initialization provided window issue provided global object scenario third case different odd behavior however change behavior one bit added support passing global object nodejs makes three cases behave without caller anything special simply pass global object instead addition object global object case pass fake nothing changes big winwin simplest way understand problem realize though first two cases augmenting object called effect augmenting global object similar declaring global variables third case fake object nothing global object three objects called window third one imposter nt near power first two developed somewhat organically people wanted jquery new environments sometimes form multiple coexisting instances even multiple versions understand things grow organically like sometimes grow asymmetrically case anyone wanting free make call like thisjquery require jquery window assume mean better proposed preclude original use case simply added option make nodejs behave browsers passing object instead addition object read code notes various use cases see enabled scenario propose without requiring additional work developer nodejs code changes question proposals would clear consider backwards compatibility highly recommend everyone stake review linked code changes think clear definitely designed backwardly compatible expect know sure unit tests run made things much easier follow added new wrinkles nodejs nt possible fairly sure new wrinkles catch developers realize missing good options added agreement code changes make sense make sense create another pull request", "d": "12/2016"}, {"body": "seem convinced jquery attach global object goal attaches window happens correlate global browsers need even care object except getting window", "d": "12/2016"}, {"body": "problem easy way write code works browsers nodejs example create global object mimic browsers javascript typeof global undefined globalwindow window add window nodejsdom whatever require jquery like require jquery global flag set nothing gets augmented currently must something like javascript var jqueryfactory require jqueryjs globalwindow window jqueryfactory window augments object augment global object javascript var jqueryfactory require jqueryjs globalwindow window jqueryfactory global latter case differ browsers calling module reference jquery well properties global object nt see problem case first backward compatible example passed instead global object side note would much better nodejsdom left window object simply used global object properties make sense nodejs eg already settimeout cleartimeout etc virtually identical actually global object browsers windows nodejs simply use global object add global property nodejs scripts nt windows abstraction would make sense well", "d": "12/2016"}, {"body": "seem convinced jquery attach global object goal goal nt goal make jquery flexible possible ideally make work nonbrowsers eg nodejs closely browsers least provide option without breaking past use cases done attaches window happens correlate global browsers understand augments global object specific ramifications nt make one bit difference happen slightly offkilter browsers using object result become part global scope clearly goal related lines core add properties object need even care object except getting window let try explain way adding add global object therefore left global scope lines core add properties would make sense would way reference except properties would break virtually every jquery script existence clearly jquery trying augment happenstance behaves global object browsers absolutely mandatory case jquery work expected browsers nt appropriately augment global object instead clearly conflation global object common mistake found many libraries applications even popular ones recall saying since first pull request case impetus changes remains case confusion straightened fork among benefits let confusion persist affect us moving forward perhaps must case offering tips suggestions would like hear least one developer giving", "d": "12/2016"}, {"body": "virtually identical actually global object browsers windows nodejs simply use global object add global property nodejs scripts nt windows abstraction would make sense well jsdom nt automatically create globals good use jsdom create fake instance put variable pass jquery factory globals involved property also use etc would nodejs philosophy jsdom put global object good also use etc global object since environments global versions disallowed see refactoring wrapper code take account preserve behavior described also add nt require people pass object factory nt need jquery sympathize concern confusingly named variable sure actually using passed value defined changes must take mentioned restrictions account looked code nt pass tests invoke see hard see works nt version wrapper", "d": "12/2016"}, {"body": "jsdom nt automatically create globals good use jsdom create fake window instance put variable pass jquery factory globals involved aware nothing break use case document property also use getcomputedstyle location requestanimationframe domparser xml etc yes properties object fake though illadvised shortcut would nodejs philosophy jsdom put global object good beside point think would good option least also use settimeout setinterval etc window global object since environments global versions disallowed see problem nothing affect furthermore issue mozilla extension bug unrelated anything talking perhaps meant different issue refactoring wrapper code take account preserve behavior described comment nt break existing behavior added additional flexibility might want also add nt require people pass global object factory nt need jquery require passing global object exported factory function simply gave option thus make nodejs environment line browsers eg reference sympathize concern confusingly named global variable sure actually using passed value window defined changes must take mentioned restrictions account took everything account looked code nt pass tests invoke npm test see hard see works nt version wrapper would prefer discussing code concerns arise logic subjecting integration unit tests ran assume received sort integration error surprised probably left something lint directives create pull request see integration results please nt close monitoring results", "d": "12/2016"}, {"body": "bunch trailing whitespace tabs inserted github editor fixed one issue left related newly introduced globalobject argument passed core claims never used checking", "d": "12/2016"}, {"body": "installing dependencies locally play around would prefer guess issue unused variable obvious anyone experienced building thing edit duplicated integration errors locally see see built edit suspected build munged possibly due indentation issues mentioned pull requests edit yep pretty fragile indentation breaks build", "d": "12/2016"}, {"body": "set test away ps ca nt believe using tabs instead spaces indentation must ask", "d": "12/2016"}, {"body": "would nodejs philosophy jsdom put global object good looked philosophical part seems node changed philosophy back around made accessible modules saying think good thing prior variable per module makes sense regardless version node app using changes pr allow calling module closely mimic browserjquery environment chooses unit tests passed assuming comprehensive set unit tests change one error message match test expected nodedocumentmissing would much prefer split test two one check missing also cause jquery fail error message confusing selfreferencing missing passed object good luck", "d": "12/2016"}, {"body": "thank thinking wo nt considering changes code time like focus pressing issues conversation quite time sink please feel free tackle existing issue", "d": "12/2016"}, {"body": "thank thinking quite welcome guess agree disagree one nearly concerned issues whether reported considered yet like focus pressing issues conversation quite time sink please nt use time issues pressing concerns wait hopefully lessons learned process primarily augmenting object browsers done strictly side effect augmenting global object hence adding global scope words nobody references properties object seen side effect available nonbrowser environments eg nodejs creating asymmetry across platforms ie augment fake dom requires referencing properties object closing larger related issue consider jquery references object exports performance penalty allows outside scripts affect module create new issue future see last comment pull request details", "d": "12/2016"}, {"body": "started making adjustments fork obviously nt going like virtually every module changed global exported constructornamespace reference shared core modules bet extra argument passed wrapper core looking pretty good right thing changed anyway opening new issue related calling methods exported objects defeats whole purpose using modules see", "d": "12/2016"}, {"body": "yes appear problem using instead", "d": "12/2016"}, {"body": "hi think understand mean would mind providing testcase similar resource would clear behaviour expect", "d": "12/2016"}, {"body": "test case also necessary pr would like work mbest", "d": "12/2016"}, {"body": "jsbin linked knockout issue", "d": "12/2016"}, {"body": "thanks report api propose nt save lot code nt think worth adding afaik also native equivalent api one asked want always define plugin", "d": "12/2016"}, {"body": "hi specific details example think forgot quotes height", "d": "12/2016"}, {"body": "notified bug css designers use multiple assignment property example class height fitcontent trick sure feature works also old browsers", "d": "12/2016"}, {"body": "already work browsers", "d": "12/2016"}, {"body": "tried else", "d": "12/2016"}, {"body": "explain problem detail since markelog posted works scenario described far", "d": "12/2016"}, {"body": "would expensive implement know want track specific animations add complete handler use get promise", "d": "12/2016"}, {"body": "since response owner closing please ping us want continue discussion", "d": "12/2016"}, {"body": "closing favor", "d": "12/2016"}, {"body": "since response owner closing please ping us want continue discussion", "d": "12/2016"}, {"body": "since testcase presented quite time closing please ping us want continue discussion", "d": "12/2016"}, {"body": "thank opening issue seeing downgrade behavior responds faster http redirecting order logs might confusing", "d": "12/2016"}, {"body": "think something like would work documentreadystate complete windowsettimeout jqueryready else documentreadystate interactive documentonreadystatechange function documentreadystate complete windowsettimeout jqueryready else documentaddeventlistener domcontentloaded completed idea called ready handler would fire pretty much immediately would wait fire neither event would used think preserve desired behavior except cases used case would seems like might okay", "d": "12/2016"}, {"body": "hmmm offence sounds awkward follow standards delete method work says implicitly pass data via body url instead dmethvin following processdata supposed key thing particular server accept entity body ability encode data querystring rather body implement way around would harder", "d": "12/2016"}, {"body": "bsthomas please read ticket dmethvin linked following spec nt disallow sending body delete different eg head requests explicitly disallow nt send body head requests want us forbid sending body delete requests first convince standard bodies explicitly disallow spec surely follow", "d": "12/2016"}, {"body": "burned app offers whiteboardinglike tool dragdrop element resize scaling change definitely caught us guard lot great discussion thing add unexpected would painted size instead layout size dealing element dimensions way seems desirable layout dimensions definitely see kind quagmire nt want make breaking change would guys consider adding argument event another function optionally restore behavior", "d": "12/2016"}, {"body": "think know fix looks like matter someone volunteering time implement core contributors included pulled directions latter half year", "d": "12/2016"}, {"body": "code breaking due undocumented backwards incompatibility current best practice working around issue getting untransformed", "d": "12/2016"}, {"body": "vanderlee work around added following utility functions application javascript function jquerysize elem name typeof elem string elem jquery elem elem instanceof jquery elem elem let val jquerystyle elem name return parsefloat val export function outerwidth elem return jquerysize elem width export function outerheight elem return jquerysize elem height use javascript import outerwidth utilsjqueryjs outerwidth useritem let useritem useritem outerwidth useritem could probably even monkey patch jquery party libraries depend behavior felt bit dangerous", "d": "12/2016"}, {"body": "salaamun alekum anyone tell write alternate linkelement primarymenu ul li target blank href datalightbox", "d": "12/2016"}, {"body": "please ask help stackoverflow", "d": "12/2016"}, {"body": "work issue", "d": "12/2016"}, {"body": "pretty sure one else feel free", "d": "12/2016"}, {"body": "gnarf help little needs done see reported callback also results animation adding documentation creating unit tests check", "d": "12/2016"}, {"body": "documentation exist optional signature unit tested call results default duration animation something along lines calling checking nt called perhaps checking state element correct showhide animation first frame check last frame probably sufficient", "d": "12/2016"}, {"body": "gnarf ok thanks look", "d": "12/2016"}]