[{"title": "onchange firing td element checkbox element inside", "body": "nt think expected behavior reporting bug creating data table component one projects component decided implement extensions table different types columns creating checkabletablecolumn extend regular column support toggle actions putting checkbox inside ran strange behavior try attach onchange handler checkbox upperinthetree component event firing twice looking found onchange event checkbox react translates onclick event bubbling td component contains checkbox simplicity spreading passed props managed reproduce behavior following bin reproduce click one checkboxes table know td element attaching onchange handler think problem latest stable chrome firefox opera react version currently using latest one thank advance", "num": "7157", "d": "6/2016"}, {"title": "setting autofocus input warns", "body": "want request feature report bug bug current behavior warns set steps reproduce render input autofocus prop set see spit warning demo expected behavior setting warn set versions react browser os affected issue work previous versions react seeing warning rc warn", "num": "7156", "d": "6/2016"}, {"title": "css minus positioning zindex working inside component", "body": "ok got img inside component want position two component one component end new begins middle img position img component nt hold img positioned top img zindex nt work bring img front idea many thanx aar", "num": "7155", "d": "6/2016"}, {"title": "group warnings unknown dom properties", "body": "ran react bootstrap doc page master saw ton warnings page really long maybe edge case least think group props element single warning example warnings could become one", "num": "7152", "d": "6/2016"}, {"title": "bug data attributes supported script element", "body": "currently following resulting script element custom data attribute problematic many libraries use add data load eg api keys etc data attributes appear supported elements specifically stripped scripts", "num": "7151", "d": "6/2016"}, {"title": "proposals reacttestrenderer api", "body": "want request feature report bug new feature current behavior returns instance primarily seems support two things getting representation rendered output calling methods instance via expected behavior good testing regular ui components testing infralevel components hocs often requires testing lifecycle hooks found need ability rerender component new props test etc unmount component altogether test changing props accomplished via helper using following work around issue javascript class propssetter extends reactcomponent constructor super thisstate active true props null setprops props thissetstate props unmount thissetstate active false render thisstateactive return const child reactchildrenonly thispropschildren thisstateprops return reactcloneelement child thisstateprops return child const inst reacttestrenderercreate instgetinstance setprops works updating props calling fails appears replacing component dummy failing preferably api would support directly versions react browser os affected issue work previous versions react new api master knowledge", "num": "7148", "d": "6/2016"}, {"title": "allow indirect children reacttransitiongroup", "body": "calls transitionrelated lifecycle hooks like direct children inconvenient child component wrapped thirdparty decorator decorators may return components outermost direct child receive lifecycle calls would possible let descendants register constructors instance receive calls would save app developers hassle writing wrapper component sits animated child intercept hooks pass presence intermediate wrapper components", "num": "7146", "d": "6/2016"}, {"title": "type input field correctly updated safari", "body": "want request feature report bug bug report current behavior safari type input field updated properly consider example linked react component display button input field type input field toggled file text clicking button change input type reflected believe issue safari setting property safari affect rendered current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior input type changed chrome firefox versions react browser os affected issue work previous versions react react reactdom browser safari chrome firefox os os x", "num": "7144", "d": "6/2016"}, {"title": "quick removal addition animated css class results animation", "body": "trying call followed remove flash class dom element add therefore triggering css animation defined class works first time working expected unless introduce timeouts first time class added animation triggered subsequent calls fail trigger animation sure issue way react updates dom inherent limitation css animations know react specialised utilities animations rather keep code way fix statjs javascript import react component react import link reactrouter import styles statscss export default class stat extends component constructor props super props thisstate flash false componentwillreceiveprops nextprops nextpropscount thispropscount const flash nextpropscount gt thispropscount thissetstate flash false gt thissetstate flash render const count name href thisprops const flash thisstate const flashclass flash styles return statnumber flashclass gt count name statscss scss highlightupcolor green highlightdowncolor red keyframes highlightup color highlightupcolor color default keyframes highlightdown color highlightdowncolor color default flashup animation highlightup flashdown animation highlightdown", "num": "7142", "d": "6/2016"}, {"title": "refs object extensible", "body": "wanted drop stringbased refs bindings replace callbackbased ones however tried replace received error nt find informations docs found issue frederickfogerty tried assume back sep worked nt something change refs object became nonextensible assigning refs manually callbacks considered bad practice", "num": "7136", "d": "6/2016"}, {"title": "onmouseenter propagation double reactroot", "body": "think bug onmouseenter event handler calls child element several reactroots reproduce run fiddle move mouse white square red back console see log link works wrong expected behavior handler haves call mouse enter red square see simiar example one reactroot works right react", "num": "7135", "d": "6/2016"}, {"title": "deprecate calling proptypes validators production", "body": "want strip code implements proptypes validation functions production mean functions throw production every time initial attempt much change people might calling production right introspection need deprecate calling production actually turning shims throw errors spicyj suggested good first step pass extra argument proptype checkers would warn argument passed passed match secret value way detect somebody manually calls validators warn production like work please comment many people implementing time would need pass extra argument prop type checkers production warn inside prop type checkers receive expected extra argument warning say something like forget write tests peek see write tests simulate production environment send pr discuss", "num": "7131", "d": "6/2016"}, {"title": "jest react django rest test implementation", "body": "rookie question code like create test case class apiinstanceview extends reactcomponent componentdidmount let insturl djangourlrestapisinstanceapireplace api thispropsapi let apiurl djangourlrestapisonereplace api thispropsapi get apiurl get insturl function api instance bind function error bind running jest code describe apiinstanceview gt change api instance view based state gt render checkbox label document const menu testutilsrenderintodocument get referenceerror djangourlrestapisinstanceapi defined define djangourlrestapisinstanceapi thanks", "num": "7130", "d": "6/2016"}, {"title": "clean toplevel event listeners unmounting roots", "body": "want request feature report bug bug maybe intended behaviour current behavior background app needs embedded apps customers idea react app javascript loaded iframe main window hosts dom elements customers react app bit works fine time goes react ui longer needed react root removed iframe destroyed apps often long lived times react app needs appear iframe recreated everything reloaded happen many times goal would like keep iframe around actually needed rather recreate time needed app used customers would like embed react app without interference app javascript iframe thing problem evident watching chrome dev tools timeline memory graph memory always increases time new iframe created react ui init unmounting destroying iframe never causes memory drop near original load value repeating process multiple times slowly show increase memory also causes immediate problem react throwing exceptions every event click type etc window iframe null proof first symptom event exceptions happens app exceptions happen cant share app cant repo parts apply react apps please read thru make sense get end examine poc destroying iframe leaves react event dispatching system memory mixture xtag webcomponents used create iframe load react app custom element used lets call console starts showing exceptions within react code side effect react dispatchevent still active trying stuff know snip disable react havent actually tried avoid exceptions would leave memory leak rather easy prove react remains memory simply goto compiled app find insert consolelog watch continues print stuff unmounting last component even though listeners case exception caused eventually default window target multiple copies basic idea various react functions tries get target assumes never null one doesnt load react iframe window always defined later tries read nodename undefined window iframe destroyed results exception null pointer etc current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior probably two possible solutions work tandem firstly react provide api remove global event listeners naturally could complain active components remain mounted api may internalprivate public implemented might called something like everything gone next react render would setup globals react dispose global event handlers last root component unmounted would call new api mentioned either option solves problem wish either let react shutdown gracefully mind could unmount iframe powered react ui component call reactdisposeglobals mentioned unmounting auto calls internal step skipped destroy iframe proof goto compiled locate add consolelog notice even last root container unmounted stuff continue printed event listeners still active quick scan abstraction around adding listeners couldnt see remove function stored called cleanup proof look last section proof concept form popular todomvc react example versions react browser os affected issue work previous versions react react reactdom reactredux might useful know reproducable use case sorry tried decided using facebook jsfiddle wasnt really smart thing following reasons compile jsx content means loading babel etc compile babel jsfiddle etc many moving parts hard get root component inserted output box even hard put jsx compiled output somewhere iframe src load forked popular todomvc app added minor edits recreate reload renderunmount destroy everything app try loop separated sleep todomvc main site todomvc github fork comments snapshots chrome dev tools timeline memory graph hopefully trust todomvc guys right thing dumb memory leaks examine obvious thing im adding support horrible create app run app renderunmount many times render unmount sleep bit loop counter exhausted sorry boring convenience list basic instructions run react version branch local machines clone root run gulp compile everything run something like python simplehttpserver navigate navigate examplesreact corresponds distexamplesreact directory gulp built poc supports concepts rerun todomvc window create iframe load todomvc js iframe render outer window unmount destroy iframe try create custom element webcontainer creates iframe load todomvc js iframe render outer window unmount destroy custom element try look pr todomvc see many helpful pictures memory leak graphs chrome dev tools described scenarios commentary", "num": "7128", "d": "6/2016"}, {"title": "refs undefined", "body": "react var react require react var foo reactcreactclass render function moduleexports foo im getting console could possibilities also using reactrails", "num": "7124", "d": "6/2016"}, {"title": "defaultprops react stateless function", "body": "pls help resolve error stateless function works provide function hello props return hello propsname hellodefaultprops name world var hellohello reactdomrender hello mountnode returns error tried based following documentation simplified component api intended components pure functions props components must retain internal state backing instances component lifecycle methods pure functional transforms input zero boilerplate however may still specify proptypes defaultprops setting properties function would set class", "num": "7123", "d": "6/2016"}, {"title": "polyfill mouseeventbuttons safari", "body": "mouse move event ebuttons returns undefined safari behaving correctly chrome pressing left mouse button moving mouse expect ebuttons return enativeeventwhich returns correct result safari sample code javascript import react react export default class canvas extends reactcomponent constructor props super props mousedown e consolelog mouse ebuttons enativeeventwhich mousemove e consolelog mouse move ebuttons enativeeventwhich mouseup e consolelog mouse ebuttons enativeeventwhich render var canvasstyle backgroundcolor rgba position absolute top left width height versions react safari os os x el capitan version computer model name macbook air model identifier processor name intel core processor speed ghz number processors total number cores cache per core kb cache mb memory gb", "num": "7122", "d": "6/2016"}, {"title": "thisprops nextprops parent state changes", "body": "changing parent state component nested child passing callback method props working expected state changed components updating properly however optimizing rendering noticed particular prop ends newest prop parent component object like jsx parent component class parent extends reactcomponent constructor props super props thisstate settings one true two true togglesetting key gt const settings thisstatesettings consolelog old settings settings produces expected old state results settings key settings key thissetstate settings consolelog new settings thisstatesettings produces expected new state results render return child component componentwillreceiveprops nextprops consolelog thispropssettings nextpropssettings new results would stop rerendering always true reason shouldcomponentupdate nextprops return thispropssettingsone nextpropssettingsone child render grandchild render behavior works expected except incoming props old props", "num": "7121", "d": "6/2016"}, {"title": "react", "body": "", "num": "7120", "d": "6/2016"}, {"title": "ship", "body": "next release react shipped rc npm last week react native went rc week using rc ship final rn using final versions think another week branch cut ideally get sooner nt heard issues going assume good shape planning ship react monday june cc ide sure running rn release time around feel free cc todo x pull prs x write changelog zpao x actually ship zpao keyanzhang blog post error codes keyanzhang", "num": "7118", "d": "6/2016"}, {"title": "shallow rendering proptypes validation", "body": "javascript const react require react function scopedforwarnings const c gt reactcreateelement div cdisplayname ci cproptypes c reactproptypesstringisrequired consolelog shallow rendering require reactaddonstestutils createrenderer render scopedforwarnings consolelog static markup rendering require reactdomserver rendertostaticmarkup scopedforwarnings actual expected unless mistaken cry working towards warnings react components tests thought using shallow would allow us stop mockingpassing tons useless props proptypes validation first level component even though really rendered proptypes validation still occurs normal", "num": "7115", "d": "6/2016"}, {"title": "context validation limitations", "body": "problem best expressed terms example function acts plugs implementation isomorphic style loader function simply set highlevel contains application services components whole shebang passed root component component inside essentially needs get style applier function context run naturally abstracting higher order component would make sense initiate styles dispose paired lifecycle note similar live implementation running site however since site duplicating class workaround mentioned problem however want couple component app context essentially want something like ts export function createstyledwith styleapplier cssstylestyleapplierfunction innercomponent styles class styledcomponent extends reactcomponent static displayname getdisplayname innercomponent private removecss gt void problem create pull service context simply pass decoupled style applier function component unless stored else access context outside component well solved providing closure accesses context pull services thought since nt react refuse acknowledge existence context really way make work without another unnecessary abstraction another higher order component pulls styleapplier context provides component called higher order components may gold fill entire ship gold sink great react community insisting hoc pattern seems little dogmatic way certain things seems totally wasteful components tiny exists hundreds hocs may small processor time requirement consume memory component diffing react things keep around lifecycle method executions note using example concern pattern involved encounter many scenarios seem jump hoops access want use higher order components good way solve things could potentially solve reasonable one imo make context validation optional nt shove component throat provide way access context outside without using higher order components well think kinda breaks many encapsulations leaving since would theoretically solve issue", "num": "7114", "d": "6/2016"}, {"title": "read property getnativenode null reactreconciler", "body": "hello everyone problem updating react current latest actually even tell exactly cause problem pages spa everything works fine one specific action app error happens problem appeared react dependent libraries update", "num": "7113", "d": "6/2016"}, {"title": "es target", "body": "targeting es compliant modern browsers latest version chrome safari etc would like leverage reduce size react build using latest version react already something possible options reduce size react setting node environment variable production", "num": "7111", "d": "6/2016"}, {"title": "documentation thisstate mutation seems contradictory", "body": "documentation component api says however documentation classes says perhaps would possible make exception mutation clear", "num": "7108", "d": "6/2016"}, {"title": "bug safarimessages copying text puts comment tags clipboard", "body": "reproducible osx safari mac messages app using react run example fiddle safari copy triple clicking text paste text messenger app paste chat window pasting clipboard content elsewhere outputs bug report composer example", "num": "7106", "d": "6/2016"}, {"title": "textfield type eq number bug", "body": "input string type eg eee accepted react windows chrome", "num": "7105", "d": "6/2016"}, {"title": "uncaught invariant violation react dom tree root always node reference", "body": "rendering following component server using causes error message logged chrome console error get logged index route thereafter navigating two routes causes error logged html served dynamically looks like html stuff click lorem ipsum dolor sit amet consectetur adipisicing elit nostrum sint totam ea quam iusto illum necessitatibus ad pariatur quos provident ipsum adipisci deserunt voluptatum vero eaque veniam reiciendis ipsam aspernatur lorem ipsum dolor sit amet consectetur adipisicing elit nostrum sint totam ea quam iusto illum necessitatibus ad pariatur quos provident ipsum client entry point looks like javascript const run gt reactdomrender router documentgetelementbyid root const loadedstates complete loaded interactive typeof document undefined loadedstatesincludes documentreadystate amp amp documentbody run else windowaddeventlistener domcontentloaded run false", "num": "7103", "d": "6/2016"}, {"title": "expose react build modeflags", "body": "kittens expressed concern people forget set nodeenv building react application result babel producing bloated builds due new devmode transforms never set production set every element would introduce substantial bloat would nt want production environment probably want able warn happens case think might want expose something transform could add runtime checks verify react dev mode warn know thinking switching real build flags various features maybe want expose individual flags anyway opening issue place discuss track", "num": "7100", "d": "6/2016"}, {"title": "value input range incorrectly rounded mounting step attribute ommited", "body": "want request feature report bug bug current behavior react beginning rounds value looks step parameter example result incorrect value input component mounts put attribute attributes works fine current behavior bug please provide steps reproduce possible minimal demo problem via similar template demo comment uncomment line see difference expected behavior always look step parameter round value required versions react browser os affected issue work previous versions react opera chrome firefox yes works", "num": "7099", "d": "6/2016"}, {"title": "wrap state props getter setter", "body": "development accidentally get directly manipulated warning pop though pretty dumb mistake happen occasionally tools like flow detect every uses", "num": "7096", "d": "6/2016"}, {"title": "keyboard events delivered divs", "body": "hi normal dom allows catch keyboard events focused element example make focusable need set tabindex react synthetic event system deliver keyboard events elements fixed", "num": "7095", "d": "6/2016"}, {"title": "global event handlers documentbody containing element run react event handlers", "body": "discovered add global event handler component stop inside react event handler global native event handler runs react one able stop set think bad behaviour react setting synthentic events window instead specific dom elements fixed", "num": "7094", "d": "6/2016"}, {"title": "unable find element id rerendering server generated content contains style tag", "body": "want request feature report bug bug current behavior serverrender page style tag style tag created using later gets rerendered without element see error console note happens serverrender page turn server rendering error goes away dom looks like error also goes away instead also goes away seems element expects one child current behavior bug please provide steps reproduce possible minimal demo problem via similar template nt able create small reproducable hope narrowed enough clear tell try create reproducable versions react browser os affected issue work previous versions react", "num": "7093", "d": "6/2016"}, {"title": "get reactsecretdomdonotuseoryouwillbefired", "body": "version npm installed reactdom file imports react dom related stuff react however nt reactsecretdomdonotuseoryouwillbefired property since react nt export result use totally useless", "num": "7092", "d": "6/2016"}, {"title": "warn string refs owner self", "body": "sebastian wants warn hard case find codemodding string refs callback refs", "num": "7091", "d": "6/2016"}, {"title": "composition type compoent", "body": "write baseinput code problem click button input nt change know nt use defaultvalue component compostion type nt work correct browser document really nt know idea baseinput update change see effect demo video", "num": "7087", "d": "6/2016"}, {"title": "sites using react disappeared", "body": "ca nt find page sites using react repo wiki", "num": "7086", "d": "6/2016"}, {"title": "component rerenders without checking shouldcomponentupdate", "body": "component rerenders without checking condition inside shouldcomponentupdate large app cant provide fiddle screenshot console rerender getting printed shouldcomponentupdate", "num": "7083", "d": "6/2016"}, {"title": "react displayname property", "body": "following piece code import react srclibreact reactclassjs library var reactclass creates composite component class given class specification param object spec class specification must define return function component constructor function public createclass function spec var constructor function props context updater breakpoint inspect variable breakpoint get following object displayname property came assigned testcomponent looked everywhere ca nt find", "num": "7078", "d": "6/2016"}, {"title": "proposition refactor isomorphism", "body": "hey guys wanted leave proposition project chris", "num": "7077", "d": "6/2016"}, {"title": "documentdocumentelement null causes typeerror loading react", "body": "bug behavior reproduce load react html document loaded case load react chromium web view cef window object ready natural race condition html document might might parsed yet meaning cases null test srcrenderersdomclientutilssettextcontentjs causes exception thrown expected behavior react gets loaded without errors independently html document load state expect control html document accessed ie implicitly react module loading possible fix code settextcontentjs check attempting perform object versions react browser os affected issue work previous versions react macos chromium embedded framework also confirmed", "num": "7074", "d": "6/2016"}, {"title": "call props checktype validation function", "body": "example question define custom prop type use validator like use prop validation function anywhere inside function signature whatever pass arguments always returns something wrong impossible check type way thanks", "num": "7072", "d": "6/2016"}, {"title": "include licensing header reactjs", "body": "currently reactjs distribution licensing header unfortunately removed webpack uglifyjs could please add file headers minifiers keep optimized versions license compliance achieved automated manner", "num": "7071", "d": "6/2016"}, {"title": "performance worsening version", "body": "hey folks maintainer reactvirtualized recently focused trying squeeze better fps components scrolling help created test harness scrolls lot measures fps test harness lets measure different versions reactvirtualized different versions react order compare performance testing discovered consistent drop performance react slower observed chrome safari firefox latest versions os x wanted share perhaps something silly test harness react react instructions reproduce load page open console click anywhere body start test wait complete log average fps total time information test run minimum times potentially longer satisfies confidence interval upon completion print average frame rate across test source code case helpful test code test case test runner", "num": "7067", "d": "6/2016"}, {"title": "invariant violation error message improvement", "body": "want request feature report bug error message bug current behavior uncaught invariant violation img void element tag must use check render method provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react found chrome universal", "num": "7065", "d": "6/2016"}, {"title": "browser unresponsive controlled text input containing large amount text focused", "body": "reproduce go paste long text chars good fit add whole tab freeze good amount time text input todo app application try scroll text input still focused gt really bad scrolling performance repositioning cursor takes second rendered contrast pasting text noncontrolled component like markdown editor right component using external plugins doe nt yield issue", "num": "7063", "d": "6/2016"}, {"title": "passing function setstate receives empty object even initial state", "body": "react dont initial state via getinitialstate usually thisstate null thissetstate receive function following signature function prevstate initial call seems react initializing empty object prevstate even though indeed still empty thus subsequent access state setstate returns returns empty object intended behavior", "num": "7061", "d": "6/2016"}, {"title": "bug invariant violation using reactaddonstransitiongroup", "body": "working rails project uses reactrails gem react premade modal component requires reactaddonstransitiongroup among things modal loads get following error uncaught invariant violation addcomponentasrefto reactowner refs might adding ref component created inside component method multiple copies react loaded details try close modal get error uncaught typeerror read property componentwillenter undefined trouble using react components already deleted reinstalled nodemodules folder known issue tips already reviewed following resources attempted debug per suggestions avail", "num": "7058", "d": "6/2016"}, {"title": "fix webcomponents example", "body": "reactcomponent gt webcomponent gt reactcomponent interop example currently partially broken chrome custom element createdcallback expect actual get work createdcallback function moved attachedcallback pull request coming soon", "num": "7056", "d": "6/2016"}, {"title": "reactperf totaltime measurement", "body": "relying total time output reactperfprintwasted measure performance components prevent degradation working reactdefaultperfanalysis replacement functionality expected come back future release", "num": "7055", "d": "6/2016"}, {"title": "access props", "body": "want request feature report bug seems like bug sure current behavior unable access props function defined outside current behavior bug please provide steps reproduce expected behavior expected behavior access props versions react browser os affected issue work previous versions react working though believe present older versions well", "num": "7052", "d": "6/2016"}, {"title": "checked attribute dom", "body": "want request feature report bug afaik bug current behavior setting checkbox checkbox indeed checked attribute nt actually dom means checkbox targeted case blocker regarding seleniumpowered tests use xpath target elements therefore nt work either current behavior bug please provide steps reproduce possible minimal demo problem via similar template check quick copypasta browser console ran right loading fiddle behaviour expected behavior attribute actually dom whenever relevant versions react browser os affected issue work previous versions react tried react fiddle uses app uses firefox chromium ubuntu previously stumbled upon nt find answer issue nt seem related thanks lot", "num": "7051", "d": "6/2016"}, {"title": "html attributes order object keys order", "body": "want request feature report bug bug current behavior react rendered html depends order keys props example gives two different html see attributes reversed critical isomorphic application two different renders nodejs server something client expected behavior rendered html must depend order keys objects versions react browser os affected issue work previous versions react react nodejs chrome actual cases change order keys get warning checksum mismatch client two different html", "num": "7049", "d": "6/2016"}, {"title": "componentwillmount called render", "body": "hi together learning react moment sure unterstanding core part react bug idea create simple login nt show login window user already logged authentication handled via firebase small snippet code var login reactcreateclass getinitialstate function return loggedin false componentwillmount function render function return thisstateloggedin login form end login problem following componentwillmount called render user already logged new state loggedin true renders backend login form unfortunately new state componentwillmount taken render actually renders login form thanks answer cheers martin", "num": "7048", "d": "6/2016"}, {"title": "react nt repeat proptype warnings multiple renders named component", "body": "bug react renders component invalid props logs warning named component rendered invalid props warning demonstration issue testing react components jasmine karma webpack components end referred sure means testing proptype validation subsequent tests different components named prop log warnings", "num": "7047", "d": "6/2016"}, {"title": "exception thrown render method suppressed jsx expression", "body": "hi please refer following code question exception suppressed error message thrown console difficult find error jsx skips render threw exception better approaches capture accident thanks", "num": "7041", "d": "6/2016"}, {"title": "reactdomserverrendertostaticmarkup cause iterator unique key prop warning", "body": "want request feature report bug bug nt think behaviour occur problem production current behavior warning appears warning child array iterator unique key prop check render method see information current behavior bug please provide steps reproduce possible minimal demo problem via similar template fiddle paste code case html jsx function list props return propsitemsmap x gt x let listitems array keys documentgetelementbyid container innerhtml reactdomserverrendertostaticmarkup expected behavior warning versions react browser os affected issue work previous versions react fiddle uses react tested chrome ubuntu nt test previous versions react suspect always way notes mistaken html generated via updated react essential dom attributes stripped away means necessary react never need match elements rerender supplying never used avoid warning tedious ergo warning suppressed jsx rendered via", "num": "7038", "d": "6/2016"}, {"title": "onchange work corectly", "body": "onchange work like oninput oninput work react v", "num": "7037", "d": "6/2016"}, {"title": "improve error messages invalid states", "body": "think create test suite throws errors different lifecycle methods make sure relatively sensible invariants early possible preferably component names example keep regressing actually test something like explicitly cc jingc yungsters facebookreactcore", "num": "7036", "d": "6/2016"}, {"title": "reactperf throws production defined error", "body": "using webpack build react project react somehow throwing production defined referenceerror reactperf webpack setting injecting nodeenv working fine advice", "num": "7032", "d": "6/2016"}, {"title": "handle proptypes undefined production", "body": "aware note performance reasons proptypes checked development mode development mode models collections eg js import proptypes react import layout componentlayout export const schema direction layoutproptypesdirectionisrequired components proptypesarrayof component react component expecting access property component works development environment however stripped production getting error uncaught promise typeerror read property direction undefined fix think user land adding safecheck eliminates deadcode build stage eg suboptimal would require updating instance used declare data shapes environment variable would force keep disable validation suggest alternative approach issue", "num": "7031", "d": "6/2016"}, {"title": "dispatch synthetic events define custom ones", "body": "right dispatch native events dom nodes way dispatch synthetic events virtual dom nodes like able dispatch synthetic events addition like way define custom event listeners usecase example component decorator adds event dom element get resized like able dispatch event element able listen using example reference logic decorator would dispatch event see right using makes event available real dom node means must listen event way inconvenient flexible need way dispatch synthetic events able listen using properties think would great addition react", "num": "7029", "d": "6/2016"}, {"title": "onchange randomly misses keys ie typing quickly", "body": "simple search bar controlled text input autocomplete type text quickly get onkeydown events every corresponding onchange event goes missing example type foobar input field may end showing foobr happens ie tested windows seen browser fiddle showing issue log note onkeydown handler sees onchange handler fiddle includes timer real code triggers ajax call somehow important issue remove timer reproduce issue react version fiddle happens", "num": "7027", "d": "6/2016"}, {"title": "bugbreaking change csstransitiongroup react", "body": "hope correct place file issue definitely related reactcsstransitiongroup could also related react router im using react router reactcsstransitiongroup order provide animation user navigates routes app instance provide nice fancy login animation also use hoc library wrote reduxauthwrapper secure routes authenticationauthorization checks hoc performs redirects using redux state data user authentication dispatching redirects typically via redux actions use react router context well hoc works perfectly upon upgrading infinite redirection loops clear using transition group way wrong obviously concern pages briefly rendered hoc uses componentwillmountcomponentwillreceiveprops trigger redirect forcing another redirection seems like cwrp called trying unmounted continually causing cwrp triggered created sample repo use master branch everything works expected click foo link type user name welcome text moving branch renpm install try perform process result infinite redirect loop beware crashing tabbrowser typically open new window open chrome dev tools soon loads starts looping using pause script button console tested chrome version thanks let know anything else help", "num": "7025", "d": "6/2016"}, {"title": "onchange firing using keyboard", "body": "hello firefox least changing values keyboard firing actually fires blur react thanks", "num": "7024", "d": "6/2016"}, {"title": "feature request proptypesdeny", "body": "writing proptypes ensure accuracy components sometimes necessary component receive particular prop may cause problems component receiving props lead confusion suggest following would output warning like", "num": "7023", "d": "6/2016"}, {"title": "virtual dom deeprenderer", "body": "virtual dom lot potential testing actually shallowrenderer uses great usable unit testing library like enzyme great deep rendering wo real dom huge performance boost case functional orand integration testing without real browser uses dom mock called jsdom opinion totally unnecessary virtualdom rendered output totally usable testing shallowrenderer proves made little hacky fully working patch shallowrenderer allows render children also pr propose introduce something like test utils modify patch worth skip jsdom noticable perf boost name renderer api look like", "num": "7019", "d": "6/2016"}, {"title": "allowfullscreen working", "body": "seems possible pass attribute like test script note camelcase attribute names hyphen would clearer", "num": "7018", "d": "6/2016"}, {"title": "recover bug validatedomnesting appear descendant see loginform gt statelesscomponent gt connect form gt form gt form gt gt statelesscomponent gt connect form gt form gt form", "body": "want request feature report bug current behavior current behavior bug please provide steps reproduce possible minimal demo problem via similar template expected behavior versions react browser os affected issue work previous versions react", "num": "7017", "d": "6/2016"}, {"title": "regression syntheticevent longer available handler", "body": "want request feature report bug bug probably major regression current behavior used first argument passed event handler current behavior bug please provide steps reproduce possible minimal demo problem via similar template simple case reproduce javascript var exampleapplication reactcreateclass render function return foo function event consolelog click event reactdomrender documentgetelementbyid container expected behavior type console output something like object output like unless intended behavior change otherwise looks like regression versions react browser os affected issue work previous versions react used work seems introduced affect following versions", "num": "7016", "d": "6/2016"}, {"title": "downloading script files could easier", "body": "want request feature report bug website feature meta improvement current behavior get file name like rename expected behavior download correct file name ie", "num": "7013", "d": "6/2016"}, {"title": "warn one instance reactperf page", "body": "gaearon normally bundle react addons different file application using reactperf forgot including bundle react reactdom noticed receiving empty array reactperf functions every time using reactdebugtool different application react means flushhistory also different think warning user one instance reactperfreactdebugtool page", "num": "7010", "d": "6/2016"}, {"title": "allow objects key", "body": "want request feature report bug feature current behavior need specify unique key current behavior bug please provide steps reproduce possible minimal demo problem via similar template na expected behavior behave using unique key string versions react browser os affected issue work previous versions react na idea came discussing module wrote take care functionality ca nt really think reason behavior nt work box regular setting people need either add id property objects array spend nonzero cogintive load figuring field fields unique set reason passing object nt work case collection refetched therefore previous references lost elements array tend order therefore cause perf hit nt know enough comment perf hit insert removal middle collection ssr similar perf hit say none although prop need stripped server rendered markup something worth pursuing", "num": "7009", "d": "6/2016"}, {"title": "expose minified react addons includes testutils perf", "body": "want request feature report bug feature requested feature currently upgrading react noticed test suite running considerably slower running minutes running minutes created custom version reactwithaddonsminjs remove brought time minutes request expose reactwithaddons file minified also includes versions react browser os affected issue work previous versions react react yes react test suite slowed", "num": "7007", "d": "6/2016"}, {"title": "bug csspropertyoperationssetvalueforstyles check component argument", "body": "version code component tolerant missing argument changed introduced breaking bug way calls without", "num": "7004", "d": "6/2016"}, {"title": "react work ie", "body": "seems createelement method call without checking candefineproperty make crash even throw error catched react", "num": "6999", "d": "6/2016"}, {"title": "typeerror read property replacechild null", "body": "maintainers problem please see explanation want request feature report bug bug current behavior error thrown using reactdnd see report current behavior bug please provide steps reproduce possible minimal demo problem via similar template provided sample code linked ticket create repo minimal demo necessary expected behavior error created versions react browser os affected issue work previous versions react react meteor react dnd", "num": "6998", "d": "6/2016"}, {"title": "warning", "body": "syranide jimfb issue vs around year still ca nt understand thinking behind reasoning give issues raise apologise following indicates misunderstanding something please clarify seem understand could please give example developer may use uncontrolled input seems react sees developer something like happens null terms intention means may nonnull value later leave component controlled component understanding react already issue warning gives currently react gives warning encounters says value null rather empty string undefined depending whether want controlled vs uncontrolled input release notes say react treats intention clear input warning dropped may lead developers code especially using async store patterns values may get set later point leads mistake losing value instances seems like something docs warning code yet see case developer uses value prop uncontrolled input direct result lack cases controlled input changed uncontrolled input case reach encourage developers explicit intention flow control mechanism returns different component altogether instead setting controlled input null", "num": "6996", "d": "6/2016"}, {"title": "relax validatedomnesting warning whitespace table", "body": "see since stopped wrapping text spans loosen validation validatedomnesting little think probably fine whitespace anywhere tree", "num": "6995", "d": "6/2016"}, {"title": "math error documentation", "body": "want request feature report bug bug current behavior see line means displaying nodes would require order one billion comparisons far expensive use case put number perspective cpus nowadays execute roughly billion instructions per second even performant implementation would nt able compute diff less second considering mentions cpus execute billion per second require billion comparisons come conclusion would nt able compute task less second expected behavior guess expected behavior would either provide correct cpus time update conclusion versions react browser os affected issue work previous versions react documentation bug", "num": "6994", "d": "6/2016"}, {"title": "react perf tools work react", "body": "month upgrade react react perf doesnt work anymore usually use like finished load react page call console result put thanks", "num": "6993", "d": "6/2016"}, {"title": "input browser warnings", "body": "render method something like first render input matter browser remains silent call press input focused moves cursor end yields warning jsfiddle might related happening nt tested version expected behavior", "num": "6992", "d": "6/2016"}, {"title": "documentation passing key reactcreateelement", "body": "nothing documentation indicates pass also explanation either especially using copied new children passed see also question", "num": "6991", "d": "6/2016"}, {"title": "render component server without mounting client", "body": "possible frozen component rendered serverside without processed client side without calling rendercycle let say cms statically generates html server legacy system want use react render output inside component structure prevent html exposed twice provide information server side html quite big nt want client site right nt see way tell react prevent calling render method component ugly workaround react complains checksum mismatch though javascript flow import react component element react type props id string classname string type state markup object export default class cmsblock extends component props props state state constructor props props super props const id props const createmarkup contentid gt return html globalcmscontent amp amp globalcmscontent contentid globalcmscontent contentid globalcmscontent amp amp globaldocument fixme wtf globaldocumentqueryselector innerhtml shouldcomponentupdate called initial clientmounting return false render element const classname id thisprops return used react", "num": "6985", "d": "6/2016"}, {"title": "resets value textarea placeholder used", "body": "want request feature report bug bug current behavior create textarea value placeholder set click using value reset empty string current behavior bug please provide steps reproduce possible minimal demo problem via similar expected behavior value textarea stays cursor placed clicked position versions react browser os affected issue work previous versions react react ie windows work earlier versions", "num": "6984", "d": "6/2016"}, {"title": "new reactperf eats lot cpu", "body": "migration react noticed application running slower usual quick debug chrome profiler shows method eats around application time every mouse move click method iterates huge amount elements nt know behaviour desirable", "num": "6983", "d": "6/2016"}, {"title": "remove hassideeffects logic", "body": "followup need remove dead code", "num": "6979", "d": "6/2016"}, {"title": "reactaddonsperf nt work", "body": "see error seems ie nt support consoletable", "num": "6978", "d": "6/2016"}, {"title": "rfc make refs optin", "body": "note personal proposal please announce anywhere react dropping refs higher order components solve many problems mixins however come problems painful one experience hide ref wrapped component treated transparent wrappers well described prepare deemphasizing mixins think important treat higher order components first class pattern react provide full support without clashes existing features means need fix refs work well higher order components community see people embrace stateless functional components even though public instances support refs pointed think good indication refs moving commonly needed feature escape hatch deemphasized becoming optin change works like provides node callback works like provides callback classes opt exposing ref spirit propose becomes optin api every class component want components reffable expose public instances refs need manually call constructor js class mycomponent extends component constructor props super props thisref exposing public instance print mycomponent instance default expose refs call constructor react automatically call js class mycomponent extends component print null means default class components act like functional components access instance unless class opts automatic cleanup class opts needs call constructor react take care automatically calling component unmounts new forwarding ref another component new feature since opt refs cleanly support ref forwarding higher order components js function wrap wrappedcomponent return class extends component passing let supply instance available way fact wrapped higher order component becomes unobservable also works fine conditionally switch different components delay rendering js function wrap wrappedcomponent return class extends component let say initially react would take care calling constructor ran since knows constructor never called initially parent receives expected mounts call instance make available parent unmounts react call instance cleaning works alternate upsides higher order components unobservable removes common pain point wrapping component hoc changes public api refs discouraged making optin better signal use data flow component also certain changing removing imperative method breaking change default expose ref exposes ref done intentionally providing explicit imperative apis component may also choose provide subset methods public api js class mycomponent extends component constructor props super props exposing stuff thisref focus thisfocusbind focus privatemethodidontwantanybodytocall lets component choose methods wants expose imperatively still considered implementation details downsides migration cost would easy enough codemod components add class component still cost considering components npm control arguably third party components provide imperative methods anyway cause trouble potential misuse imagine people method could get confusing see easy way prevent warn much freedom technically able pass weird things maybe could limit possible values react public instances hand ability provide subset methods described providing explicit imperative apis seems useful considerations could provided inside would argue want two reasons want react still manage partially calling component unmounts otherwise easy introduce memory leaks magic behavior one props would unexpected want transfer ref child would unexpected cases think cc facebookreactcore", "num": "6974", "d": "6/2016"}, {"title": "document test utils date", "body": "react gt following methods return instead scryrendereddomcomponentswithclass findrendereddomcomponentwithclass scryrendereddomcomponentswithtag findrendereddomcomponentwithtag guide page test utilities still says return check props ca nt thing think better make date avoid make people get confuse", "num": "6970", "d": "6/2016"}, {"title": "feature request ontransitionstart", "body": "think implemented", "num": "6968", "d": "6/2016"}, {"title": "difference render count instance count", "body": "trying measure time react takes bootstrap hydrate ssr client side javascript match routes location gt renderperfstart render documentgetelementbyid appcontainer renderperfstop results see difference render count instance count sometimes one double mean initial renders wasted detect happening also printed time count overall", "num": "6966", "d": "6/2016"}, {"title": "stoppropagation affects level dom node handlers", "body": "react expect corresponding dom element events still fired since level raising issue sure worth changing current behaviour check console focusing bluring two hello ce", "num": "6965", "d": "6/2016"}, {"title": "server side", "body": "wondering possible render react component server side without serialising string make possible trigger state changes without rerendering whole tree example like able something like pseudocode render test settimeout gt thissetstate ready true render const ready thisstate ready return ready return ready const tree render test rendertostring tree gt ready settimeout gt rendertostring tree gt ready nt really plan use timeouts illustrate idea would another way put javascript let setstate class test extends component componentwillmount important called consolelog componentwillmount called setstate thissetstatebind render const ready thisstate ready return ready return ready const tree render test outputs componentwillmount called consolelog rendertostring tree outputs ready setstate ready true consolelog rendertostring tree outputs ready possible currently would difficult implement", "num": "6964", "d": "6/2016"}, {"title": "react warn controlled components duplicate values", "body": "consider following example live react js const myselect props gt banana broccoli orange tomato class app extends reactcomponent constructor super thisstate thisonselectchange thisonselectchangebind onselectchange e thissetstate selectedvalue etargetvalue render return html nt seem problems duplicate values tag see example semantically valid reasons might want controlled component example makes impossible select eg orange tomato selection forced first matching value thought solution stores reactdom take sort index prop manipulate internal dom node sure bad form react could enhanced take foresee problems single source truth fruitvegetable example bit contrived may many realworld scenarios would want gut feeling warning developers like nt paint corner trying support case", "num": "6959", "d": "6/2016"}, {"title": "context updates unavoidable", "body": "see basically component supplies getchildcontext nothing check see context actually changed even long getchildcontext always new context problem rerender react redux context provider triggers update every single connected component even though return tripleequals reactelement render rerendered context changed arguably partially reactredux issue always returning new object getchildcontext nt seem mechanism react moment checking contexts suggest react provide mechanism like shouldcontextupdate shallow comparison context objects even changing getchildcontext like trygetupdatedcontext return null change check actually changed worked around issue simply making context provider root object never rerendering forceupdating child bit nasty also relates caching reactelements components icons react element use element global constant every case represent icon nt use context would nice could tell react ignore context changes deciding whether update elements", "num": "6956", "d": "6/2016"}, {"title": "feature let shouldcomponentupdate also return props triggered update nonimmutable deep comparisons", "body": "currently shallowdeep checks components propsstate returns boolean value triggered proposed update hook need check prop actually changed basically case deep check performing expensive comparison twice know props problem would arise react apps commit use props also object often immutable therefore despite beeing deep equal would still trigger rerender component propose introduce nonbreaking change let return array property names triggered update react would check could", "num": "6955", "d": "6/2016"}, {"title": "using react transformation outer div removed attributes", "body": "react chrome firefox transformation outter div removed", "num": "6954", "d": "6/2016"}, {"title": "distribute compiled files npm package", "body": "right npm package distributes files good used nodejs must precompile build system use would really nice files bower package distributed directory reactjs reactdomjs something like npm also used clientside package management", "num": "6952", "d": "6/2016"}, {"title": "changing state onfocus onchange select multiple element work firefox", "body": "want use controlled component react addition value also want keep focused state select state update state event handlers unfortunately issue firefox firefox update value change event select gained focus means user click twice select element change value focus would expect select gain focus change value click created jsfiddle demonstrate prolem react select multiple issue firefox demonstration see problem firefox select multiple ie chrome working expected firefox working expected form elements simple select checkbox radio text input textarea environment firefox react", "num": "6951", "d": "6/2016"}, {"title": "using react ie dangerouslysetinnerhtml nt work svg tag", "body": "hi since dom reconciliation produce deep dom manipulation instead setting innerhtml higher level html dom node every dom mutation done exactly done either html element svg element side effect use dangerouslysetinnerhtml svg element react create svg element using documentcreateelementns set innerhtml element new element pretty cool recent browser except ie nt support innerhtml svg tag script error assigning unknown property always allowed object nothing added dom tree example stateless component produce empty svg ie var icon svg gt return red icon var svgpath reactdomrender documentbody codepen demonstrating issue goal add string containing literal svg path svgpath code g tag wrapper inside svg generic react component first red icon created using second green icon created using direct dom manipulation setting innerhtml g tag third blue icon created using direct dom manipulation without using innerhtml g tag avery modern browser able display icons except internet explorer version capable display blue one blue one use hack use innerhtml directly g tag embed literal svg path svg literal tag create temporary div tag set innerhtml div tag loop divsvgchildnodes append g tag way know browser supports innerhtml svg tag way avoid issue current react statefull component embed hack describe componentdidmount eventually componentdidupdate methods considering exemple provided statefull version working class iconie extends reactcomponent static proptypes svg reactproptypesstringisrequired setinnersvg var iedivwrapper documentcreateelement div iedivwrapperinnerhtml thispropssvg arrayprototypeforeachcall iedivwrapperfirstchildchildnodes child gt thisrefsitemgappendchild child componentdidmount thissetinnersvg componentdidupdate prevprops prevpropssvg thispropssvg thissetinnersvg render return blue icon reactdomrender documentgetelementbyid patchedcontainer codepenio please notes partially regression dangerouslysetinnerhtml svg tag working initial render svgpath string added virtual dom string whole virtual dom generated render method added real dom using innerhtml one parents node working props update except setting key props high level svg tag forcing react use innerhtml parent without knowing know regards", "num": "6950", "d": "6/2016"}, {"title": "bug problems using reactaddonsperf", "body": "trying use reactaddonsperf google chrome found perfstart error messages displayed warning internal error react performance measurement code expect ctor timer start componentdidmount timer still progress another instance warning internal error react performance measurement code expect componentdidmount timer stop timer still progress another instance please report bug react typed perfstop try use getwasted error message displayed uncaught typeerror read property updatecount undefined", "num": "6949", "d": "6/2016"}, {"title": "document reduce bundle size", "body": "trying optimise bundle seems standard react import includes code backwards compatibility react found including react way reduces bundle size documented better supported significant gain standard way import react nt going break future updates", "num": "6947", "d": "6/2016"}, {"title": "react renders elements null firefox", "body": "firefox specific bug due react gt populates every element property caused weird firefox behaviour checking args number eg gt gt gt verified firefox react react", "num": "6943", "d": "6/2016"}, {"title": "reactcloneelement docs bit light", "body": "old nice example mentions deprecated favour meanwhile pretty terse links blog post decent example proposing adding guide page modifying child properties similar example old page linking cloneelement api docs seem reasonable put together pr", "num": "6942", "d": "6/2016"}, {"title": "tests found", "body": "trying run version return", "num": "6939", "d": "6/2016"}, {"title": "return mocked functional components", "body": "classes functional components see leads lot issues confusion people using jest realize maybe greatest implementation ever since support one align implementation add find better way deal easy add somewhere around spicyj", "num": "6932", "d": "6/2016"}, {"body": "think cover make sure gets releasing thanks testing", "d": "6/2016"}, {"body": "sounds like straight css issue make sure elements need set either absolute relative positioning share parent element", "d": "6/2016"}, {"body": "definitely nt sound react specific closing let know encountering bug react", "d": "6/2016"}, {"body": "like work please comment thread others know taking relatively high priority please also comment abandon others pick thanks", "d": "6/2016"}, {"body": "love take crack", "d": "6/2016"}, {"body": "got let know questions would good reference warning need change accumulate bad props emitting single warning outside loop", "d": "6/2016"}, {"body": "fixed via", "d": "6/2016"}, {"body": "afaik nt strip data script tags keep mind rendering capital composite component sort perhaps something one coworkers wrote might rendering data props react fault going close reopen proven wrong via jsfiddle demonstrates react something fishy", "d": "6/2016"}, {"body": "oh god damnit typo spent hours typo thanks ignore good god argh", "d": "6/2016"}, {"body": "typo lead error really component", "d": "6/2016"}, {"body": "sigh yes script component used loading party scripts case specifically trying create script element code nt bundled nt say naming things one problems programming nothing said lead annoyed enough refactor everything much sane sensibly nameddonemanaged net positive outcome btw dan still owe blog post react twist atomic design patterns nt forgotten", "d": "6/2016"}, {"body": "works updating props calling fails function appears replacing component dummy failing temporary workaround alternating essentially adding extra wrapping div might fix error", "d": "6/2016"}, {"body": "going use issue track bugsimprovements cpojer said replacing imagejs mock error thrown typeerror componentgetpublicinstance function reactcompositecomponentmixinattachref pretty sure work give better error message", "d": "6/2016"}, {"body": "temporary workaround alternating thispropschildren luck got error instead working around", "d": "6/2016"}, {"body": "agree painful one reasons personally recommend also using actively facebook good stewards future direction plan deprecate hand community think best moment fork implement proposal fork gains traction might point docs instead may also want consider alternatives like sorry", "d": "6/2016"}, {"body": "affects browsers notably actually throw error change type imho changing type equal changing component type remount entirely changing type keeping state nt really make sense would even assume whenever see means missing somewhere", "d": "6/2016"}, {"body": "one use case run across toggling input workflows let user see password entering requires state persist type change seem work safari browsers switching text input file input working syranide mentioned seems like step persisting state nt make lot sense", "d": "6/2016"}, {"body": "syranide aweary thanks comments example gave contrived one smallest example come demonstrate problem indeed would anyone wants toggle text file input well one practical use think let user choose uploading file giving link file problem encounter real application little realistic described end comment curious anyway think react something think react either sure react policy crossbrowser compatibility might irrelevant handle case correctly detects running affected browsers eg safari ie actually remount new dom instead updating property diff says property updated problematic value opt fix least docs updated warn user issue user avoid issue eg setting attribute better still warning logged runtime ideally think react go first option since really nice thing react whatever method returns rendered user nt really care mutations done achieve said totally understand option chosen since really browser bug imo aside real application encountered problem component building form multiple variations form variation differs another perhaps one two fields hence component several methods form render variation several methods form finally method simply big ifelse statement case values derived state property particular property modified user interact fields important context problem comes change two variations file input text input position eg changing variation b problematic notice text field b file field position", "d": "6/2016"}, {"body": "another variation problem easy workaround assign key know swap types forcing node removal new node insertion", "d": "6/2016"}, {"body": "using temporary fix kind works except animation retriggered another one pending javascript componentwillreceiveprops nextprops nextpropscount thispropscount const flash nextpropscount gt thispropscount thissetstate flash client windowcleartimeout thistimeout thistimeout windowsettimeout gt thissetstate flash false componentwillunmount client cleartimeout thistimeout", "d": "6/2016"}, {"body": "olalonde would say expected behavior since react batches updates dom raf probably use better way probably would use remove class", "d": "6/2016"}, {"body": "would say expected behavior since react batches updates dom raf correct react use raf delay applying updates react batches calls happen handling dom event olalonde create jsfiddle demonstrating problem", "d": "6/2016"}, {"body": "gaearon expected behaviour see background flash green whenever count goes flash red whenever count goes", "d": "6/2016"}, {"body": "looks like react processing classname change quickly nt actually register dom attribute flashes devtools indicating set class never removed workaround add delay second call work like describing", "d": "6/2016"}, {"body": "think anything actionable react call react update dom might call event handler lifecycle still tick two dom changes tick probably trigger animation something like work dom changes end tick reason still always animate even put sure look related react close encourage create plain js sample demonstrates behavior show issue happens react happy reopen seems like cssdom issue eg maybe better listen rather really know", "d": "6/2016"}, {"body": "found apparently related react still nice someone could point react way achieve trying", "d": "6/2016"}, {"body": "found following workaround javascript componentwillreceiveprops nextprops nextpropscount thispropscount const flash nextpropscount gt thispropscount thissetstate flash render const count thisprops const flash thisstate const flashclass flash return guess forces react diff algorithm believe needs create new dom element time key changes sure reliable though update jsfiddle", "d": "6/2016"}, {"body": "guess forces react diff algorithm believe needs create new dom element time key changes sure reliable though yes case might well use react inefficient bad performance", "d": "6/2016"}, {"body": "afaik never good practice recommended store directly instance", "d": "6/2016"}, {"body": "syranide elaborate nt really see storing references differs variants stored within instance", "d": "6/2016"}, {"body": "biphobe frozen object assign references directly", "d": "6/2016"}, {"body": "biphobe scrolling issue says ca nt assign refs nt work back either sorry confusion edit comment issue", "d": "6/2016"}, {"body": "frederickfogerty right omitted bottom half comments scanning issue sorry thanks replies syranide", "d": "6/2016"}, {"body": "happy work", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "djangourlrestapisinstanceapi defined reactjs related library facebook search production code see defined", "d": "6/2016"}, {"body": "seems like bug react stackoverflow would better place ask thanks", "d": "6/2016"}, {"body": "keyanzhang regarding question would know global variable specified would get reference error tried test script seems needs defined globally react loads module", "d": "6/2016"}, {"body": "think want provide new api react dispose global event handlers last root component unmounted would call new api mentioned sounds sensible aside new api implementation detail possible tried implementing proof concept", "d": "6/2016"}, {"body": "gaearon havent tried poc furthest got simply grepping abstraction sorry cant remember name calls noticed many times adding listener event returned function remove never stored anywhere add listener never store remover happens scattered places check rather quick didnt try poc anyway", "d": "6/2016"}, {"body": "returns function remove listener nt look like return value used might possible cache returned functions call call root component unmounted would similar already event system pretty complex though might easy", "d": "6/2016"}, {"body": "hey call happens return statement words nt returned anything yet accessing nt available take look examples since bug going close still anything unclear stackoverflow would better place ask thanks", "d": "6/2016"}, {"body": "sudharsanmit would nt call function react pass use component directly js function hello props return hello propsname hellodefaultprops name world reactdomrender mountnode", "d": "6/2016"}, {"body": "thanks aweary reply stateless functions still broken nt work well apis check example tried rendertostaticmarkup behaviour rendertostring well stateless functions generally incompatible nt find specific mentions try use strict var react require react var reactdomserver require reactdomserver function hello props return reactcreateelement div null hello propsname hellodefaultprops name world var hello hello name world consolelog reactdomserverrendertostaticmarkup hello consolelog reactdomserverrendertostaticmarkup node hellojs hello world c throw error invariant violation rendertostaticmarkup must pass valid reactelement invariant c objectrendertostaticmarkup c object c modulecompile objectmoduleextensionsjs moduleload trymoduleload functionmoduleload functionmodulerunmain startup", "d": "6/2016"}, {"body": "aweary mentioned nt call function pure function part way define way callinvoke take look since bug going close still anything unclear stackoverflow would better place ask thanks", "d": "6/2016"}, {"body": "sudharsanmit second example stateless component function function return react element via", "d": "6/2016"}, {"body": "aweary pls see first line output renders perfectly parameter name world passed chicoxyzzy ilustrate pass markups directly suggested aweary var hello hello return error shown first example ignores default prop", "d": "6/2016"}, {"body": "keyanzhang actually said issue rendered perfect call hello function issue ignores defaultprops even example provided states defaultprops used use strict var react require react var reactdomserver require reactdomserver function hello props return reactcreateelement div null hello propsname hellodefaultprops name world var hello hello name world consolelog reactdomserverrendertostaticmarkup hello node hellojs hello world", "d": "6/2016"}, {"body": "code string typo", "d": "6/2016"}, {"body": "keyanzhang illustrate ca nt pass even markup suggested first response var hello hello name world works var hello hello error", "d": "6/2016"}, {"body": "markup dsl desugars please read docs examples work expected", "d": "6/2016"}, {"body": "chicoxyzzy still nt answer defautprops ignored works provided input examples say include default props var hello hello name world works var hello hello error", "d": "6/2016"}, {"body": "call function without arguments parameter becomes js emits ca nt properties case javascript works react related issue", "d": "6/2016"}, {"body": "chicoxyzzy thanks makes lot sense", "d": "6/2016"}, {"body": "chicoxyzzy one renders props empty function defaultprops hit react returns blank may edge case ignored node hellojs hello use strict var react require react var reactdomserver require reactdomserver function hello props return reactcreateelement div null hello propsname hellodefaultprops name world var hello hello consolelog reactdomserverrendertostaticmarkup hello", "d": "6/2016"}, {"body": "hi sudharsanmit nt understand use stateless functional component react designed used way take look jsfiddle link aweary provided see definitely works functional component reason ca nt use jsx following code javascript function hello props return hello propsname hellodefaultprops name world reactdomrender mountnode actually gets transpiled javascript function hello props return reactcreateelement div null hello propsname hellodefaultprops name world reactdomrender reactcreateelement hello null mountnode instead actually second argument also see transformation", "d": "6/2016"}, {"body": "keyanzhang example work dependent reactdomrender try example reactdomserverrendertostaticmarkup able render node ideally render string way around btw var hello hello passes type div props null per api reactcreateelement hello null work hello reactclass", "d": "6/2016"}, {"body": "sudharsanmit call empty object argument object properties trying get object get renders empty string react nt work function returns instance component", "d": "6/2016"}, {"body": "chicoxyzzy react component created internally reactdomrender method invoked access defaultprops reactdomserverrendertostaticmarkup nt go render lifecycle create component hence defaultprops get ignored", "d": "6/2016"}, {"body": "property react component created internally reactdomrender method invoked nt react components render method returns instance already pass", "d": "6/2016"}, {"body": "chicoxyzzy defaultprops resolved based type see snippet defaultprops defined hello div reason fails hello looks typeof symbol reactelement type div key null ref null props children hello undefined owner null store reactdomelementjs resolve default props type amp amp typedefaultprops var defaultprops typedefaultprops propname defaultprops props propname undefined props propname defaultprops propname", "d": "6/2016"}, {"body": "react component created internally reactdomrender method invoked access defaultprops reactdomserverrendertostaticmarkup nt go render lifecycle create component hence defaultprops get ignored correct ignored using issue used incorrect supported way use functional component framework impossible us support invalid usages change behavior javascript wo nt work sorry think going lock conversation since bug invalid usage stackoverflow would better place ask thanks", "d": "6/2016"}, {"body": "looks like safari nt support polyfill would required safari nonstandard property nt support detecting buttons back forward usually", "d": "6/2016"}, {"body": "documentation says syntheticevent crossbrowser wrapper works identically across browsers nt mean buttons return value regardless browser possible", "d": "6/2016"}, {"body": "right exactly means currently react nt polyfill right could done reasonable way issue see implementing polyfill might difficult", "d": "6/2016"}, {"body": "likely mutating current object method since mutating current object using set next state getting reference current next state always treat immutable react expects treat state immutable way always recommended see notes never mutate thisstate directly calling setstate afterwards may replace mutation made treat thisstate immutable setstate immediately mutate thisstate creates pending state transition accessing thisstate calling method potentially return existing value", "d": "6/2016"}, {"body": "aweary course would normally snippet showed trying change particular key within object state turns incorrectly places consolelog line lower would caught changing original state way often forget anyway found immutability helpers work great thanks response", "d": "6/2016"}, {"body": "cc grabbou leading releases rn", "d": "6/2016"}, {"body": "yeah expected props validated element creation time mount time behavior similar static type systems like flow value expression gets evaluated first gets passed warning shows since bug going close feel free reopen comment anything unclear", "d": "6/2016"}, {"body": "note ca nt believe forgot react add rendering console output normal method parent called nt mountingrendering render function called children nt created parent rendered expected shallow renderer proptypes validation components really rendering nt return early something go proptypes validation shallow rendered components go back edit initial script add proptypes component get even though imo makes sense get something could work could merged behavior wanted edit ca nt reopen btw", "d": "6/2016"}, {"body": "hey sinewyk sorry nt notice time invoke element gets constructed thanks reporting graue spicyj intended behavior shallow renderer", "d": "6/2016"}, {"body": "like keyanzhang says expected testing would nt want check uses correctly omitting one required props bug render method", "d": "6/2016"}, {"body": "makes sense say absolute pain ass testing components guess guess answer would splitting components api surface narrowerflatter thanks answer graue", "d": "6/2016"}, {"body": "think understand issue maybe simpler complete example would help putting onto solve problem something like js export function createstyledwith innercomponent styles class styledcomponent extends reactcomponent static displayname getdisplayname innercomponent note context still experimental api make strong guarantees api possible change future might wise avoid building app completely around unless use places hide behind hocs", "d": "6/2016"}, {"body": "thank reporting also saw error production react native app find way reproduce try slimming small case reliably reproduces share case", "d": "6/2016"}, {"body": "note probably able fix without case reproducing", "d": "6/2016"}, {"body": "looks like fixed case obviously nt creating issue repo case problem react absentmindedness share case anyway problem appeared page radiobutton component materialui lib mentioned react update also updated dependent libraries including material ui new version mui file structure changed change way import mui components files problem roots mistakenly imported radiobutton component instead radiobuttongroup component familiar mui lib know structure radiobuttongroup gt radiobutton case radiobutton gt radiobutton inappropriate led error screenshot obviously led error read property getnativenode null", "d": "6/2016"}, {"body": "super useful thanks", "d": "6/2016"}, {"body": "think still counts exception thrown render", "d": "6/2016"}, {"body": "well know throwing lead child multichild sure repro", "d": "6/2016"}, {"body": "change babel plugins use compile react fit needs however see actually use features quite selectively sure see huge difference might also interested feel free comment reopen anything unclear", "d": "6/2016"}, {"body": "options reduce size react setting node environment variable production commonjs envify uglify get smaller build one ship cdn", "d": "6/2016"}, {"body": "nt mutating api specifically says api similar reactcreateclass exception getinitialstate instead providing separate getinitialstate method set state property constructor setting state nt mutating state classes provide initial state creating object component instance even state exist initialize constructor assigning new value muting existing object would still considered mutation", "d": "6/2016"}, {"body": "could make clearer though divide aweary would want try adding additional sentence clarifying assignment required classes", "d": "6/2016"}, {"body": "zpao sure happy", "d": "6/2016"}, {"body": "messenger app tested facebookcom messengercom internal messenger app everything looked fine unable reproduce also tried android chromemessenger unable reproduce referring ios app testing phone upload screencast youtube something", "d": "6/2016"}, {"body": "web tests using safari version", "d": "6/2016"}, {"body": "sorry mac messages app amp safari version screencast using different react app issue", "d": "6/2016"}, {"body": "look little bit closely computer sure actually want filing bug apple control safari clipboard implementation able repro outside react complex enough dom making use html comments since happening", "d": "6/2016"}, {"body": "guess could also messages paste implementation clipboards fun basically data multiple formats pasting get decide format read messages may reading one format safari another perhaps paste textarea fine messages input", "d": "6/2016"}, {"body": "yeah thought seems apple issue", "d": "6/2016"}, {"body": "filed bug apple see anything anybody even access thanks letting us know", "d": "6/2016"}, {"body": "duplicate", "d": "6/2016"}, {"body": "started happening added eventlistener must", "d": "6/2016"}, {"body": "fyi updating seems solved issue case", "d": "6/2016"}, {"body": "clarify comes step rounded comes yeah something really order props never matter cc spicyj kind makes sense new renderer need apply certain properties specific order one depends value another", "d": "6/2016"}, {"body": "ugh inputs already put type first getnativeprops reactdominput probably step although little stranger since inputs wo nt attribute", "d": "6/2016"}, {"body": "props already frozen development mode better wrapping getters setters throws try add new props addition mutating existing props also recently introduced warning prevents mutating children array anyway already practical proposal discussed freezing state object state already conceptually mutable via setstate ca nt deep freeze obvious reasons nt much gain freezing going close assuming understand request correctly asking already implemented least valuableactionable parts", "d": "6/2016"}, {"body": "sorry working fault closing", "d": "6/2016"}, {"body": "think bad behaviour react setting synthentic events window instead specific dom elements fixed actually delegation preferable setting event handlers every dom element iirc sometimes add event handlers specific dom nodes absolutely necessary times try reuse toplevel handler described docs event delegation react nt actually attach event handlers nodes react starts starts listening events top level using single event listener component mounted unmounted event handlers simply added removed internal mapping event occurs react knows dispatch using mapping event handlers left mapping react event handlers simple noops learn fast see david walsh excellent blog post would say generally react implements events implementation detail might change suggest trying prevent native event handler synthetic event handler vice versa use events react please consider treating encapsulated system escape hatch always sidestep react event system use dom apis js class mycomponent extends reactcomponent componentdidmount thisnodeaddeventlistener componentwillunmount thisnoderemoveeventlistener render return gives access raw dom apis lets attach handlers dom elements want comes performance penalty suggest often hope helps", "d": "6/2016"}, {"body": "thank detailed explanation", "d": "6/2016"}, {"body": "andersekdahl took look one nt able reproduce issue far tell multiple string children style element appears work fine reviving markup think going need reproducible fiddle otherwise nt actionable end", "d": "6/2016"}, {"body": "later gets rerendered without style element clarify mean conditionally rendering style element something", "d": "6/2016"}, {"body": "render html get json structure server contain style elements cms editors gets creative navigating nt reload page render new content could new content nt include style elements", "d": "6/2016"}, {"body": "unless changed since last involved actually correct way providing text child sometimes works selector incorrectly escaped issues believe break ever changes value well providing text child actually supported perhaps something made nicer correct due technical reasons", "d": "6/2016"}, {"body": "simple jsfiddle reproduce", "d": "6/2016"}, {"body": "syranide clear fiddle demonstrating nodes broken user might expect single string entirely clear fiddle demonstrating fiddle appear trigger invariant violation mentioned bug report right least nt get invariant machine tested chrome firefox still nt repro invariant violation right", "d": "6/2016"}, {"body": "jimfb meant showcase outputs following comments text valid content styletag like scripttags ca nt actually get throw invariant violation due new renderer afaik resume ssr update contents styletag get note actually nodes inspect text content wrong illustrate outputs styletag single text child actual comment nodes happens use ssr hence invariant violation trying update styletags much like scripttags may updated unless explicitly handle tags separately currently renders kind ok definitely", "d": "6/2016"}, {"body": "way go happy camper issue closed perhaps added documentation point docs submit pr", "d": "6/2016"}, {"body": "think files intended used global tags browser node requires browser environment reactdom pick global object contains property specific use case", "d": "6/2016"}, {"body": "said think true line might redundant think zpao", "d": "6/2016"}, {"body": "keyanzhang want use minfied reactdomserver server side rendering use hack minified version better performance server side rendering nt react nt encourage use", "d": "6/2016"}, {"body": "mocheng set achieve thing", "d": "6/2016"}, {"body": "actually going minified version react performant since minification eliminates dead code skips dynamic lookups costly", "d": "6/2016"}, {"body": "keyanzhang imho concern really minifying entire codebase deal cases unless someone show benchmark showing consistent measurable difference doubt seems premature dead code would marginally affect startup time ca nt see costly enough would measurable", "d": "6/2016"}, {"body": "syranide yeah think minifying entire codebase option problem directly requiring need change requiresimports end different builds react specifically third party library imports react need change well think adding minification pass webpackbrowserify makes sense surprisingly reading processenv nt cheap", "d": "6/2016"}, {"body": "problem directly requiring distreactmin need change requiresimports end different builds react specifically third party library imports react need change well usually solved using option like webpack redirects requires eg", "d": "6/2016"}, {"body": "gaearon using webpack minifying already easily part process really native nodejs would say", "d": "6/2016"}, {"body": "using webpack minifying already easily part process really native nodejs would say know webpack people often used precompiled bundles faster build times", "d": "6/2016"}, {"body": "usually solved using option like webpack redirects requires eg case problem becomes solved assume since require would also get rewritten think recommendation going going try use dist files node might bad time nt recommend trying get performance improvements minification dev checks removed precompile everything otherwise going problem small issue umd setup keyanzhang pointed even addressed issues keyanzhang brought components dependencies requiring node module rewrite address point problem solved easily include react build minifiy even add build time", "d": "6/2016"}, {"body": "fwiw future npm module may single file rather single devprod check split whole optimization point becomes moot part want follow along", "d": "6/2016"}, {"body": "would likely done", "d": "6/2016"}, {"body": "probably would separate dev tool sanity checked element element mounted need fix transform first since nt think even using prop right iirc", "d": "6/2016"}, {"body": "transform referring like take look possible nt think even using source prop mean required", "d": "6/2016"}, {"body": "sorry yeah editedfixed reply transform referring like take look possible", "d": "6/2016"}, {"body": "would affect people use explicitly", "d": "6/2016"}, {"body": "keyanzhang miss potentially useful warning unfortunately really nt much make experience better afaik", "d": "6/2016"}, {"body": "cc facebookreactcore public api change", "d": "6/2016"}, {"body": "well could also make transform adds self calls always wanted log internally sure makes sense give warning externally guess probably reasonable", "d": "6/2016"}, {"body": "suhaotian set prop returned dom element value controlled see", "d": "6/2016"}, {"body": "aweary yes type composition input like chinese nt work", "d": "6/2016"}, {"body": "see demo video", "d": "6/2016"}, {"body": "suhaotian looks like using also happen hellendag heard issues ime lately", "d": "6/2016"}, {"body": "think related event fires ime \u8f93\u5165\u6cd5 string constructed handler newly inputted value discarded since controlled however sure need use simple might enough could elaborate use case suhaotian", "d": "6/2016"}, {"body": "keyanzhang type chinese words fire event nt want fire change event", "d": "6/2016"}, {"body": "zpao also happen code drafteditorcompositionhandlerjs maybe learn vue text work fine baseinput work without demo effect", "d": "6/2016"}, {"body": "hey guys solved proplem online work demo effect", "d": "6/2016"}, {"body": "thanks fixed", "d": "6/2016"}, {"body": "thanks", "d": "6/2016"}, {"body": "logged sure returned unfortunately unlikely would able help without reduced test case", "d": "6/2016"}, {"body": "shouldcomponentupdate even called rerendering component screenshot might help try code reduced test case hours", "d": "6/2016"}, {"body": "guess would helpful could print stacktraces instead logging might save produce reduced test case lucky also assuming everything actually works tried logging mountunmount well might reason unmounted mounted lack shouldcomponentupdate makes total sense case would guess", "d": "6/2016"}, {"body": "really related ca nt imagine calling best way determine update necessary", "d": "6/2016"}, {"body": "looks like using chrome right please check jit issue try running code another browser", "d": "6/2016"}, {"body": "chance using", "d": "6/2016"}, {"body": "syranide excellent guess component gets close issue recheck issue component gets unmounted reopen needed keyanzhang app issue caused due unexpeced component thymikee works browsers issue component gets unexpectedly", "d": "6/2016"}, {"body": "hey gets added jsx transform babel information found actual compiler pass since technically issue going close first feel free comment reopen stuff missing thanks", "d": "6/2016"}, {"body": "thanks interest helping solve issues unfortunately right place proposal repository discussing react core react core nothing routing control webpack neither proposals could addressed repository proposal first inherent design issue webpack designed client side rendering something solved repository perhaps post webpack repository proposal second issue documentation coming telling people server side render solutions wo nt work webpack great tools however serious flaws terms implementation nt think anywhere documentation let know reactjscom unopinionated packager webpack otherwise doubt telling people server side rendering webpack clear concepts react core think might reactrouter concepts regardless actionable bug within repository perhaps reactrouter repository ideas make projects better encourage pursue ideas one great way implement ideas instance believe documentation lacking particular area feel free write better documentation publish long history people writing blog posts various features feel underdocumented eg articles become popular enough often transformed official documentation similarly ideas server side rendering could done better feel free create projectlibrary releasing libraries opportunity fully control people vote library using instead existing alternatives another option start contributing existing open source projects recommendation would start simple work way bigger tasks learn development process project learn things designed way often underlying reasons may aware anyway lots ways get involved open source development encourage unfortunately github issue relevant repository therefore actionable us reason going close interested getting started contributing react would encourage take look goodfirstbugs list linked happy coding", "d": "6/2016"}, {"body": "thanks awesome response jimfb unfortunately inherent issues webpack would require heavy refactoring order achieve point proposal couple custom tailored solution transpiles jsx prerendered html also rendering client side problem precompiled webpack code interpolation issues incompatible seriously considering creating amd module bundler designed isomorphism order achieve elsewise would create isomorphic transpiler works directly webpack hopefully understand context situation suggest send people cheers chris", "d": "6/2016"}, {"body": "hey chriscates think library might interest", "d": "6/2016"}, {"body": "would like address case quite clear dear facebook webpack truly want help contribute projects guys need open work feel insulted disrespected one jr developers answer correctly andor reading proposed solution resolve issue regarded see neither taion timdorr work facebook also sure identify jr developers maintainers react router community project asked question specifically webpack importing image files webpack feature thus supported node environments ways work around eg precompiling app node environment webpack stackoverflow much better place ask react router project maintainers use issue tracker tracking bugs issue bug react usage question webpack closing act disrespect attempt insult technical decision close issue related project goes repo well would like stress react community member badge mean person facebook employee works react means help maintain one packages reactjs community github organization", "d": "6/2016"}, {"body": "react router project maintainers use issue tracker tracking bugs issue bug react usage question webpack closing act disrespect attempt insult technical decision close issue related project goes repo well correct exactly reason actions took chriscates disservice discussing unrelated concepts closed issue people looking problems super huge expert things webpack would get limited utility stack overflow thousands people browsing react webpack issues day currently people sitting reactiflux moment way people help simply trying direct places trying get help effective keyanzhang pointed probably looking something like assetswebpackplugin want see former action highly recommend browsing react redux universal hot example excellent patterns use set webpack config", "d": "6/2016"}, {"body": "thanks awesome feedback guys appreciate try library give thoughts terms implementation", "d": "6/2016"}, {"body": "looked everything feel like guys understanding proposal proposal create seamless continuous delivery flow enables transpile webpack code plain html would enable send server side rendered code request also gracefully becoming client side rendered script dom registered understand intentions good sorry making assumption jr reactjs developer meant part facebook hopefully discuss detail soon sketched rough idea architecture flow proposal chris", "d": "6/2016"}, {"body": "loading react html document would imagine access would cause issues outside", "d": "6/2016"}, {"body": "aweary least two ways able trigger using cef although suspect web view environment control loading javascript different points web view lifetime could used trigger situation described one mac app working using react web views loaded internet embedded app executable view needs load react immutablejs etc every time starts turns take quite loaded file system computer mechanical disk figured load react per chromium render process appcompile time embed various js modules needed app executable nodejs nodejs boot quickly still load lot js code first approach load react chromium extension kind worked costs least resources interprets loads executes extension per render process view executed process gets access alreadyhot code approach mostly worked see exceptions like possibly related issues chromium extensions nt access console window etc code loaded immutable second approach load react every new javascript context chromium creating meaning code mutable access window etc loaded html document created third approach turns best option right although slower loading rect chromium extension load reach ondemand app memory though custom url scheme basically loaded html document uses eg app setup byte stream reading memory rather disk network would really great react could loaded chromium extension kind native dynamic libraries work immutable provides code constant data", "d": "6/2016"}, {"body": "familiar cef hopefully someone react team offer better detailed advice would say code reactdom renderer going dependent access extension able wrap call check verifies available suppose another option would implement react renderer wraps reactdom renders document available", "d": "6/2016"}, {"body": "right work react evaled work based think typical browser environment work guarded including one pointed nt happen eval time later normal execution looks like specific case passing environment check supposed good enough nt nt actually check existing pointed bunch places even stands nt support changing environment work start handling throughout", "d": "6/2016"}, {"body": "could provide jsfiddle template found thanks", "d": "6/2016"}, {"body": "keyanzhang made jsfiddle example works issue may closed", "d": "6/2016"}, {"body": "solomatov help get merged", "d": "6/2016"}, {"body": "gaearon definitely help thank", "d": "6/2016"}, {"body": "seem measuring development versions please check production regressions known regression dev fixed master likely seeing check comparing master dev build find one", "d": "6/2016"}, {"body": "gaearon idea hosted builds master branch thanks", "d": "6/2016"}, {"body": "doh feel foolish using builds speeds things substantially also thanks pointer master build", "d": "6/2016"}, {"body": "whoops never mind cloudfare naming scheme confused even though called seems minified build", "d": "6/2016"}, {"body": "hmm confused open appears minified minified build", "d": "6/2016"}, {"body": "ok get first lines minified saw mobile", "d": "6/2016"}, {"body": "yeah scanned first lines well sorry", "d": "6/2016"}, {"body": "expected behavior void element tag must children includes whitespace use instead", "d": "6/2016"}, {"body": "issue error could use language improvement", "d": "6/2016"}, {"body": "starkch works give full code snippet reproduce", "d": "6/2016"}, {"body": "linoleumjs zpao issue error message could use improvement several us working code found current message unclear", "d": "6/2016"}, {"body": "react bug browser behavior ie happens without react well", "d": "6/2016"}, {"body": "indeed chrome issue far test", "d": "6/2016"}, {"body": "depoulo unable reproduce pasted text textbox left focused tried scrolling within textbox within page general responsive tested chrome", "d": "6/2016"}, {"body": "jimfb osx could windows something could definitely reproduce", "d": "6/2016"}, {"body": "seems happen windows", "d": "6/2016"}, {"body": "little hard tell since run windows vm sometimes slow anyway think able reproduce windows appears chrome bug windows depoulo want file bug google chrome team", "d": "6/2016"}, {"body": "well minutes six friday evening file bug still reproduce monday morning", "d": "6/2016"}, {"body": "uses merge existing state new state since state updates use immutable pattern ignore argument always result returning new object empty instance state would say intended behavior nt returning calling obviously trying update key state object returning supported pattern afaik wo nt achieve anything want begin state value update whatever reason returning object key component expecting", "d": "6/2016"}, {"body": "intended behavior sure intended behavior seems likely something overlooked generally try avoid allocating new objects unnecessary guess bigger question care component probably either using state case always object using state case nt able tell difference run issue cc spicyj thoughts", "d": "6/2016"}, {"body": "hoc receives redux like reducer something like reducers initial state baked default args eg reducer always start empty object state start empty obj default arg assign state", "d": "6/2016"}, {"body": "generally try avoid allocating new objects unnecessary would alternative maybe throwingwarning nt object seems either update instantiate state invoked reducer always start empty object state start empty obj default arg assign state avoid namespacing data using value state instead state instead", "d": "6/2016"}, {"body": "aweary reducers already well defined initial state based default args think ok handle hoc side eg empty treat null pass reducer initially expecting behave nt initial state passed", "d": "6/2016"}, {"body": "rochej provide jsfiddle reproducible case sounds like error causing second", "d": "6/2016"}, {"body": "uncaught invariant violation addcomponentasrefto reactowner refs might adding ref component created inside component render method multiple copies react loaded details sounds like duplicate react bundle please run check one", "d": "6/2016"}, {"body": "note running may enough maybe modal component bundles additional react mistake best way tell inspect bundle look string like compiled bundle see duplicate react unfortunately able help diagnose issue unless provide example reproducing", "d": "6/2016"}, {"body": "thanks duplicate copy react buried component", "d": "6/2016"}, {"body": "cc gaearon tracking related issue already", "d": "6/2016"}, {"body": "internal module name part public api using never supported using instead said still includes old methods including new methods addition previously existing methods able use purpose anything missing makes unsuitable use case total time output algorithm changed measure time spent react anymore measure user code time took run components code removed total time little misleading said still sum rows find total time valuable use lower level calculation way like getwasted implementation might give idea calculate specific stats measurements", "d": "6/2016"}, {"body": "works javascript var func function e alert thispropsval var comp reactcreateclass func render function return reactdomrender documentgetelementbyid container doesnt javascript var func function e alert thispropsval var inner var comp reactcreateclass func render function return inner reactdomrender documentgetelementbyid container nt javascript var func function e alert thispropsval var comp reactcreateclass render function return reactdomrender documentgetelementbyid container", "d": "6/2016"}, {"body": "simply works javascript reason first three examples works autobinds functions defined object becomes component instance cases simply function without explicit thus references something equally meaningless manually bind following js var func function e alert thispropsval var comp reactcreateclass render function return reactdomrender documentgetelementbyid container", "d": "6/2016"}, {"body": "want define component outside like example ca nt bind defining component outside right since pointing something else anyway bind component context tried got props undefined", "d": "6/2016"}, {"body": "syranide correct javascript works confusing yes something react fix reason going close issue feel free continue discussion move stackoverflow last example nt work binding function class returned createclass instead binding instance class represents rendered component instance class available prior rendering", "d": "6/2016"}, {"body": "possible make sure component access props maybe binding constructor function", "d": "6/2016"}, {"body": "component instance always props binding classconstructor nonstarter", "d": "6/2016"}, {"body": "sorry meant functions passing class component instance reactcreateclass autobinds functions issue function referring declare component outside auto bound member function class initial definition point bound function inside class anyhow", "d": "6/2016"}, {"body": "cc jimfb value handled differently checked", "d": "6/2016"}, {"body": "iirc handled differently happy submit pr checked trivially easy value much complicated like p create pr", "d": "6/2016"}, {"body": "actually sure ever worked looks like set via property would duplicating work set property actually trying straight dom looks like even browsers setting property clicked sure anything", "d": "6/2016"}, {"body": "zpao reason bunch people running react set innerhtml attribute correct initial render generally thing people testing attribute updated updates people nt notice people rarely test updates yes never officially supported though might nice consistency avoid people banging heads wall trying figure nt working since reason nt discoverable", "d": "6/2016"}, {"body": "confirm must worked react since team wrote tests back using supporting initial render would great imo perfectly understand easily done nt relevant overall think docs least reflect though forms page maybe happy pr doc change nt require indepth explanation nt supported anyway try working around adding attribute relying prop testing instead meantime please let know guys decide thanks", "d": "6/2016"}, {"body": "neemzy make function traverses document updates attribute reflect property tests", "d": "6/2016"}, {"body": "syranide path see going towards obscure forgotten implementation detail people rant future path willing follow anyway tests suddenly turned green morning reason keep updated mistakenly rollbacked react", "d": "6/2016"}, {"body": "anything help regarding", "d": "6/2016"}, {"body": "fyi ran year ago", "d": "6/2016"}, {"body": "neemzy expertise perhaps speaking turn seems like problem testing environment assumes things html guaranteed using xpath query checked checkboxes put differently method work checkboxes user many libraries interacted either attribute reflects initial value yes kind shitty patch dom mentioned working around problem usage xpath actually bug react part larger testing framework selenium perhaps something consider finding workaround another note problem querying checkboxes applying filter removing ones unchecked would otherwise assume", "d": "6/2016"}, {"body": "syranide correct actually correctness bug react users find surprising confusing especially since shown browser devtools attributes principle least surprise might worth fixing end", "d": "6/2016"}, {"body": "jimfb sure even confused controlled component simulated interaction never worked uncontrolled component simulated interaction never update attribute use library interacts checkbox also note really extend userinteractive properties etc solving everything making worse snide principle least surprise right p sense current behavior best behavior never works never get impression react imho know always prefer strictness bad behavior uncovered soon possible effectively encouraging means soon back asking nt work x fix problem source nt really care imho seems like charitable thing actually opposite", "d": "6/2016"}, {"body": "bug nodejs bug react think installed workaround react upgrade react version see fixes issue discussion", "d": "6/2016"}, {"body": "invoke callback synchronously", "d": "6/2016"}, {"body": "control", "d": "6/2016"}, {"body": "try render component firebase resolved user first time js var login reactcreateclass getinitialstate function return loggedin false loaded false componentwillmount function render function thisstateloaded return return thisstateloggedin login form end login way nt show either screen resolved actual auth state user otherwise ca nt really control firebase api extent likely inherently asynchronous make http request resolves almost always going occur component renders", "d": "6/2016"}, {"body": "yeah sounds like callback nt get called immediately likely launch request firebase server set auth state server replies regardless data available render time effectively request closing duplicate two issues workaround suggested aweary currently sebmarkbage generally recommends", "d": "6/2016"}, {"body": "hmm seems like code thissate completely ignored could cause sorry interrupting completely new react next time posting first", "d": "6/2016"}, {"body": "mnbucher setstate nt completely ignored may asynchronous big red notice documentation says setstate immediately mutate thisstate creates pending state transition accessing thisstate calling method potentially return existing value guarantee synchronous operation calls setstate calls may batched performance gains maybe running", "d": "6/2016"}, {"body": "update line causing source guess intended behaviour imo seems wrong suggestions test proptypes given warnings get suppressed would great", "d": "6/2016"}, {"body": "believe logs nt keep logging errors every time component rendered would try investigate components referenced instead seems actual problem", "d": "6/2016"}, {"body": "testing react components jasmine karma webpack components end referred sure maybe enabled minification tests", "d": "6/2016"}, {"body": "yeah going close deduplication error messages intentional avoid log spew nt anything actionable end error messages would nt super useful anyway component names seems like first problem solve fixed unit test configuration assume deduplication wo nt problem anymore also one recommendation use strong test issolation react reinitialized every test avoid issues one error message gets eaten previous unit test also make unit tests less flakey general good idea feel free continue discussion thread", "d": "6/2016"}, {"body": "fixed test disabling minification suggested still seems strange dedupe errors code though especially since chrome devtools console already combines identical messages", "d": "6/2016"}, {"body": "especially since chrome devtools console already combines identical messages suppose componentapp emits two warnings devtools ca nt combine warning thrash suppose client debugging logging warnings multiple different components constantly trying interject gets annoying thus deduplicate", "d": "6/2016"}, {"body": "also one recommendation use strong test issolation react reinitialized every test avoid issues one error message gets eaten previous unit test also make unit tests less flakey general good idea nice strong test isolation add significant overhead testing eg use something like proxyquire test file gets new react maybe blow away modules cache would help per file measures slow test writing time running time empirically would say packages use stateless reinitializing modules often unnecessary impractically makes tests slower exposing something like call test would super simple fast easy use", "d": "6/2016"}, {"body": "nice strong test isolation add significant overhead testing eg use something like proxyquire test file gets new react maybe blow away modules cache would help per file ugliyish strategy using personal project something like every test helps avoid caching obviously far ideal future official devtools api possible isolate warnings tests better yet keeping mind though", "d": "6/2016"}, {"body": "nt understand issue error thrown console jsx skip render threw exception", "d": "6/2016"}, {"body": "sorry nt know state issue well case jsfiddle nt show issue use babelloader compile jsx case jsfiddle wo nt throw error webpack", "d": "6/2016"}, {"body": "sounds like issue webpack config closing notareactbug", "d": "6/2016"}, {"body": "jimfb investigation believe issue related exception catched block undefined since nt finish rendering exception catched wo nt pipe console", "d": "6/2016"}, {"body": "exceptions get caught finally blocks bug react able reproduce within jsfiddle without webpackdependencies", "d": "6/2016"}, {"body": "yeah technically true talks back potentially case could become single function react would nt need additional data dom would make dontemitkeywarning difference much harder justify also something said remaining consistent writing components nt specify key components ca nt sharedused future decreases reusability increases fragmentation maybe would opinionated us enforce could make argument maintaining single cohesive component ecosystem important honestly would pretty low priority us see easy fix want submit pr say chance coin toss getting merged probably depending primarily complexity nt want introduce global state whole ton routing decide warning needs emitted probably best bet would move warning devtool devtool become aware type render performed nested renders would need considered going close nt clear win us almost certainly something team would bandwidth internally someone community passionate fixing take look prs ca nt make promises priori", "d": "6/2016"}, {"body": "fair enough would nt rate high priority either thank taking time respond jimfb", "d": "6/2016"}, {"body": "intentional react uses modified semantics closer semantics nt need use really need native event behaviors break react register event listeners manually recommended general", "d": "6/2016"}, {"body": "substitutes specify value specifying embeds contents string code blows correct configuration key notice apostrophes inside quotes way webpack put js string code work notice example configurations use exactly reason becomes string containing specify raw form like tldr replace config", "d": "6/2016"}, {"body": "however proptypes stripped production getting error proptypes currently stripped production proposal agreed case react call proptypes production defined stay declarations get stripped builds specifically choose eg via babel plugin default behavior react close unactionable us", "d": "6/2016"}, {"body": "apologies blunder forgot account addition includes", "d": "6/2016"}, {"body": "incidentally might get solved custom events part duplicate issue extent also partial duplicate general however augmenting primitive dom nodes add additional behaviors practice generally frown upon cause confusion people readingmaintaining code components like behave differently expectationdocumentation would better practice composite component take callback eg call callback component resized way people registering componentapi since component one providing event", "d": "6/2016"}, {"body": "really weird nt see anything wrong code happen indeed bug ca nt really wrap head around behavior happening interesting see causing really interesting", "d": "6/2016"}, {"body": "cc jquense sure love", "d": "6/2016"}, {"body": "interesting pasieronen could possibly try using react master see still problem also wonder happens older iehmm", "d": "6/2016"}, {"body": "affected edge unaffected", "d": "6/2016"}, {"body": "looks like setting value soon user types keystroke enqueuing event handler result timeout callback calls setstate causes reconciliation resets input value causes handler read wrong value dom node notice replace logic input starts working expected looks like bug ie setting value happen immediately prior calling onchange rather bug react", "d": "6/2016"}, {"body": "looks like bug ie setting value happen immediately prior calling onchange rather bug react jimfb polyfilled seems like odd statement missing something anyway debugging nt really feel lot smarter however seems root problem may related keyupkeydownetc handling changeeventplugin sense accurately reproduce problem hold key press different one without letting go first reproduced problem may hint underlying problem also worth noting instance logging actually output correct value overwritten react update state turn correct another note anyone know nt using", "d": "6/2016"}, {"body": "jimfb onchange polyfilled seems like odd statement missing something sure correctly said native event causes handler function fire another note anyone know nt using oninput cc jquense", "d": "6/2016"}, {"body": "recent reason fires often inconsistently changing placeholder instance fires oninput reusing polyfill quick way fix though seems probably cause bugs fixed browsers master listens onchange oninput dedupe em hopefully correct solution learned polyfill nt scale super well first good ie seems break bunch msisms make work also probably bunch bugs old ie nt notice lower market share", "d": "6/2016"}, {"body": "temporal workaround could applied app", "d": "6/2016"}, {"body": "smashercosmo think could update value controlled component timeoutsetstate call mentioned earlier notice replace ontimeout logic thissetstate unused value thisrefsinputvalue input starts working expected alternatively could restructure code avoid calling setstate asynchronoustimeout callback think call setstate event handler things work without issue since problem race condition characters typed setstate calls realize neither particularly good workarounds would also recommend filing bug team since looks like ie bug setting node value firing event handlers synchronous timersevents like settimeout injected two operations assumes understanding issue correct reproduce bug without react possible whatever react probably setting node value directly settimeout call would sufficient likely help ie team narrow issue end sure much could problem first glance appears browser bug though love proven wrong conceivable react bug assuming browser bug might able mitigate problem may able eliminate entirely years react first person run probably highest item todo list understand annoyingfrustrating run things like unfortunately browser bugs often difficult us fix end", "d": "6/2016"}, {"body": "end sure much could problem jimfb considering report new value correctly intuitively entirely fixable unless something else blocking alternatively could restructure code avoid calling setstate asynchronoustimeout callback think call setstate event handler things work without issue since problem race condition characters typed setstate calls true nt take consideration unrelated asynchronous updates may happen elsewhere application would cause update rerender outside control would also recommend filing bug team since looks like ie bug setting node value firing event handlers synchronous timersevents like settimeout injected two operations convinced really fault far tell hacky workaround reimplementing oninput may rely specific browser behavior keydownkeyupetc keydown fires value updated determining exact fault adding native oninput seems work mix may solve problem nt faith shipping fix time soon ever everyone also updating bound support long time", "d": "6/2016"}, {"body": "jimfb syranide thing react handles correctly two demos exact code different versions react one buggy one buggy demo nonbuggy demo", "d": "6/2016"}, {"body": "smashercosmo react version fiddle happens smashercosmo thing react handles correctly two demos exact code different versions react one buggy one oh weird ok broken fixed broken correct tried master fiddle seemed fine smashercosmo verify fixed fiddle", "d": "6/2016"}, {"body": "jimfb confirm latest react nt speedtyping issue tested demos mine", "d": "6/2016"}, {"body": "master listen oninput ie correctly reporting fixed like said turns polyfill oninput actually lot edge cases one noticed p assumptions nt quite work", "d": "6/2016"}, {"body": "ok close bugs fixed master fix part future release", "d": "6/2016"}, {"body": "know bug closed changes master still affecting branch nt think syranide correct bug correctly points seems caused making asynchronous updates state think cause bug react uses generate change events asynchronous consequently state changes triggered response change event racy may cause input lost", "d": "6/2016"}, {"body": "please try master build react", "d": "6/2016"}, {"body": "gaearon possible use reactaddons nt depend git branch addon", "d": "6/2016"}, {"body": "usually clone react repo run copy files project", "d": "6/2016"}, {"body": "gaearon tried master build result infinite loop redirects", "d": "6/2016"}, {"body": "js componentwillreceiveprops nextprops thisensurenotloggedin nextprops ensurenotloggedin props gt const isauthenticated replace redirect props like js componentwillreceiveprops nextprops const isauthenticated replace redirect nextprops const isauthenticated wasauthenticated thisprops seems like correct logic react may call many times likes guarantee calls something changes check value changed see also", "d": "6/2016"}, {"body": "ah interesting yeah would agree seems like much safer approach typically follow pattern elsewhere code think got lulled thinking redirect happen immediately checking change nt necessary give try", "d": "6/2016"}, {"body": "way typo although probably unrelated redirection loop issue", "d": "6/2016"}, {"body": "closing see indication bug react fixed infinite loop logging still infinite loop logging seems problem assumes ensureauth synchronously update props react works dispatch action guarantee receive old props another time fact get even relaxed future incremental reconciler unwise action inside based next props especially action leads prop change best detect prop changes comparing previous value please expect react synchronously updates props call old props", "d": "6/2016"}, {"body": "gaearon thanks input suggestions going work tonight improve reduxauthwrapper suggestions", "d": "6/2016"}, {"body": "blur mean selected item menu goes away believe event actually fired selection made change nt occurred see native behavior demonstrating event nt occur selection made", "d": "6/2016"}, {"body": "mean menu closed changing selection keyboard updown keys chrome opera ie event fired immediately ff fires loses focus seems like impossible consistent behavior across browsers", "d": "6/2016"}, {"body": "iotch ca nt reproduce behavior react native example fire event selection made input blurred consistent firefox chrome machine os x seeing behavior native example jsfiddle posted", "d": "6/2016"}, {"body": "yes seeing difference described firefox windows", "d": "6/2016"}, {"body": "yeah seeing presumably buggy behavior know firefox notion confirmation namely value nt take effect user locks choice nt think going specifically change value keyboard see nodevalue change per user fiddle appears fire change event despite fact nodevalue changed cc jquense syranide zpao", "d": "6/2016"}, {"body": "nt look like ff firing oninput events change fired select blur nt work select closed focused either", "d": "6/2016"}, {"body": "presumably want listen keyboard events polyfill", "d": "6/2016"}, {"body": "sure interested ff made choice sure line allowing browsers make different calls nonspeced stuff presumably changing also firing oninput may bug way easily", "d": "6/2016"}, {"body": "seems like longstanding issue firefox", "d": "6/2016"}, {"body": "currently semantic way polyfill behavior specific browser familiar react event system seems like want avoid listeningresponding keyboard events browsers actually firing inputchange events", "d": "6/2016"}, {"body": "feel fine calling choice widget interaction vs bug unless specced reasonable see keyboard updown analogous scanning list mouse want fix though value dedupe logic may simple matter listening checking value may create lot noise safari nt dedupe change events ugh safari", "d": "6/2016"}, {"body": "well considered bug per bugzilla report initially wontfix reopened current status unresolved spec clarify behavior bugzilla report initial justification behavior spec onchange event occurs control loses input focus value modified since gaining focus could nt find clarification behavior spec though since already considered bug react already normalizations nt seem unreasonable normalize behavior", "d": "6/2016"}, {"body": "nt seem unreasonable normalize behavior agree though cost normalizations zero worth talking gray areas spec clarify behavior general understanding inside widget implementor consider date input fires changes date sections filled example intuitive agree illustrates fuzziness ff case considering keydowns item scanning vs selection argument polyfilling concern seems minor", "d": "6/2016"}, {"body": "yeah cost polyfilling relatively low say worth shot honestly sure yet would take interested figuring behavior implemented based oudated spec never changed making consistent friendly would nice", "d": "6/2016"}, {"body": "make custom validator explained", "d": "6/2016"}, {"body": "yes also use custom validations could also done easeofuse proptypes easeofuse", "d": "6/2016"}, {"body": "nbradytechempower believe proptypes basically maintenance mode meaning core team nt looking expand proptype feature set way best using custom validator keyanzhang mentioned", "d": "6/2016"}, {"body": "get saying already using custom validations suggestion enhancement maintenance mode looking expand fine maybe submit pr add see take", "d": "6/2016"}, {"body": "nbradytechempower similar pr requesting deprecation message see turned per jimfb proptypes mostly legacy maintenance mode replaced tools like flow generally shied away adding new featuresfunctionsapi reason functionality needs tied react intuition best strategy create thirdparty library helps users define deprecated proptypes post github think applies create library open source", "d": "6/2016"}, {"body": "aweary never seen anything react api documentation suggested reactproptypes legacy feature especially since using type model new experimental context api thanks information way moving probably issue updating reactproptypes documentation suggest", "d": "6/2016"}, {"body": "nbradytechempower longer term plan move away proptypes favor static analysis tools like flow aweary mentioned absolutely apply probably wo nt adding proptypes since mostly legacy maintenance mode welcomed release part open source proptype library update documentation proptypes ready officially deprecate time yet come nothing actionable moment thus open issue going close reasons mentioned feel free continue discussion thread end releasing open source library feel free link library thread", "d": "6/2016"}, {"body": "think added exact api subject change might want track happens weeks close already exists soon", "d": "6/2016"}, {"body": "lol exactly talking gj spicyj", "d": "6/2016"}, {"body": "allowfullscreen correct casing variant work like example correctly adds dom node add dom node docs maybe misunderstand note ca nt test actual fullscreen button jsfiddle result displayed inside sandboxed iframe nt allow fullscreen control", "d": "6/2016"}, {"body": "sorry working made error earlier", "d": "6/2016"}, {"body": "need restructure component tree forms allowed forms browser restructure dom beneath puts react inconsistent state ca nt recover", "d": "6/2016"}, {"body": "thanks thorough report intentional change made applies development build goal provide better warning messages specifically around storing references events problems arise used certain ways otherwise identical functionality production builds use proxies", "d": "6/2016"}, {"body": "thanks details glad know feature bug", "d": "6/2016"}, {"body": "sounds great would like look send pr improve", "d": "6/2016"}, {"body": "keyanzhang nt think anything downloads page think way cdn works something someone outside facebook could reasonably fix may require switching different cdn something need figure internally makes sense", "d": "6/2016"}, {"body": "jimfb yeah said might possible change link end markdown link html tag specify download attribute attribute might work browsers better", "d": "6/2016"}, {"body": "keyanzhang tl dr download attribute rename file browser tested download attribute react page completely ignored firefox crossorigin download chrome downloaded file instead displaying set correct name edge downloads file either way never renames ie safari generally nt support attribute nt test opera adding download attribute almost effect", "d": "6/2016"}, {"body": "tehwalris thanks looking yeah seems like nt work since link crossorigin", "d": "6/2016"}, {"body": "seems like issue duplicate react share setup ended including two reacts immediately obvious use umd bundle commonjs module", "d": "6/2016"}, {"body": "course demo run browserify version see problem talking using commonjs umd familiar duplicate react issue setup nt end two react two reactdebugtool seems happen browserify webpack probably issue browserify set wrong", "d": "6/2016"}, {"body": "sure wrong suspect related vendor configuration webpack config webpack expert sure help issue react side close changing package things anyway part also related issue let continue discussion", "d": "6/2016"}, {"body": "case collection refetched therefore previous references lost elements array tend order therefore cause perf hit nt know enough comment perf hit insert removal middle collection use mapping get different everything provide different update data immutably seems majority cases react apps get different reference update corresponding item would thus get different blow entire tree old gone new appears list order react kills old component mounts completely new one place", "d": "6/2016"}, {"body": "yeah general case generating keys impossible without knowledge identity data keys erroneously reused accidentally transfer state one component another keys erroneously regenerated loose component state fail specify key make educated guess based element position array also emit warning really require human look specify appropriate key based understanding meaning incoming data", "d": "6/2016"}, {"body": "bit confused test suite running considerably slower running minutes running minutes related expose reactwithaddons file minified also includes testutils perf case perf regression likely fixed closest release", "d": "6/2016"}, {"body": "well built custom reactwithaddons minified also includes testutils perf perf regression went away guess exposing file like necessary", "d": "6/2016"}, {"body": "built another custom reactwithaddons include since using saw results seeing removing leads believe something runs dev mode", "d": "6/2016"}, {"body": "check still problem master", "d": "6/2016"}, {"body": "much better seems bog towards end test suite run tests end running slower run tests end run fast would expect", "d": "6/2016"}, {"body": "close problem mostly solved master per report marginal improvements better done prs welcome contribute", "d": "6/2016"}, {"body": "gaearon follow roadmapeta react", "d": "6/2016"}, {"body": "think anything particular slated release whatever months breaking changes track merged milestone prs", "d": "6/2016"}, {"body": "okay thanks", "d": "6/2016"}, {"body": "public api used thirdparty code feel free file bug thirdparty repository", "d": "6/2016"}, {"body": "see filed bug thirdparty code issue resolvable except hack trick react fake component even though internal api usage component inside internal api consistent code file proper check since particular code used code paths anyway stops put simple check code rest file", "d": "6/2016"}, {"body": "code file proper component check mean single line see places used trying nitpicky want make sure understand reason think makes sense check line calls method always supplies argument ever perhaps possible past seem think anything needs fixing react", "d": "6/2016"}, {"body": "yep line understand issue migrate another page transition module maybe good thing", "d": "6/2016"}, {"body": "gaearon jimfb clarify believe means none functions warnings included imported modules previously required parameter believe good reason commit pke referenced divergence pattern params optional granted imported modules follow pattern assuming general pattern react large correct wrong edvinerikson see added name css warnings wrapped owner checks thoughts general practice parameters optional think also hints bigger architectural discussion needs mainly answering questions sugar like helpful warnings permitted lessen sharability shared module via required parameters narrowing contexts module used also used react native style nt parameters ever required always optional overtime required believe increases rigidity bloat modules framework large module rigidity function dev tooling light precedent started checks importantly imported modules means pattern one parameters optional answer dev params required yes either way wanted make sure departure norm least module imported conscious architecture decision made react believe pivot path significant implications shared resources regards well shareability also kind smelly breaks dev without component prod tagging sebmarkbage refactoring guy granted put instructed put module folder may marked pun intended interest resources evolve cheers", "d": "6/2016"}, {"body": "also kind smelly breaks dev without component prod exactly point either breaks always never since used debug helping output optional", "d": "6/2016"}, {"body": "pke buildbreakdo feel like impedance mismatch gaearon talking right past case gaearon correct think also hints bigger architectural discussion needs mainly answering questions larger architectural discussion questions irrelevant function works react use case parameter always available function works intended set required parameters never caused problem within core simply problem function public api", "d": "6/2016"}, {"body": "dev sugar like helpful warnings permitted lessen sharability shared module shared dom client dom server renderer code shared sense used elsewhere desire sharability dom client dom server renderers intended users bigger picture think method signature change every day may add remove parameters whether devonly please nt rely method public api", "d": "6/2016"}, {"body": "understanding correctly crash dev build prod build fwiw would affect developer experience enduser experience going close since supported platform would probably accept pr fix like write one", "d": "6/2016"}, {"body": "try version using couple releases old think potentially relevant bug fixes since also minimal repro least one runs jsfiddle ideally one nt rely thirdparty dependencies like reactdnd would helpful try reproducing whatever reactdnd userland minimal repro without dependencies", "d": "6/2016"}, {"body": "opinion big proponent strict lenient may nice enables error prone behaviors allows otherwise easily detected bugs go production complicates debugging first root problem controlled uncontrolled components separate components never switch two manage controlledness existence weird ways argue either changing would cause major head ache still fix situation however still saying providing internally coercing good idea even separate components weird way controlled input value soon change never go back even undo something funky also means internal state may report despite visually identical result something else nt coerce anyway may test tests would succeed despite empty may handy behavior dirty complex cases even arbitrary ambiguous number inputs etc free implement component whatever want internally may even go far creating asyncaware inputs prevent modifying loaded represented whichever way prefer improve behavior suit project default tell something generally bad leave component controlled component understanding react already issue warning gives warning dropped may lead developers code especially using async store patterns values may get set later point leads mistake losing value instances imho bad thing becoming solved hide behind helper prefer yes terribly nice neither passing around passing strings async callback progress nt mean emptydefault valid substitute explicit javascript many times allowing strings inplace numbers another one nt mean means code may break unexpectedly unrelated parts code reach encourage developers explicit intention flow control mechanism returns different component altogether instead setting controlled input null agreed separate", "d": "6/2016"}, {"body": "thanks syranide great answer", "d": "6/2016"}, {"body": "think probably fine whitespace anywhere tree yah torn considering mostly validate invalid nesting strict seems fine let even though useless however nonwhitespace strings allowed break ssr", "d": "6/2016"}, {"body": "syranide nt understand torn issue whitespace always safe even ssr right", "d": "6/2016"}, {"body": "jimfb yeah safe also useless virtually reason exist warning could good thing nt really big deal though much edgecase still", "d": "6/2016"}, {"body": "thank opening ticket forbecause think warning bad actually someone tries writing something like warning would suppressed emptywhitespace string become legitimate problem soon value put causing error time worst kind bug however empty strings falsey avoiding warning situations would actually beneficial also hard amend code make sure comes bool leaning towards keeping warning also going create rather avoid even invisible", "d": "6/2016"}, {"body": "interested taking stab fixing pr later week", "d": "6/2016"}, {"body": "worth saw error comment end line example produces error space title tag js expression comment throws error easily fixed bit surprising", "d": "6/2016"}, {"body": "joshhunt ah part jsx parsing rules replace comment actually empty expression string makes lot sense rules apply", "d": "6/2016"}, {"body": "yeah got figured extra space char wound generated response figured nothing wrong white space head tag would fall issue", "d": "6/2016"}, {"body": "going give go", "d": "6/2016"}, {"body": "one comparison probably one instruction executed cpu though guess take consideration stating cpu capable executing billion instructions per second wo nt able perform one billion comparisons timeframe edit reference", "d": "6/2016"}, {"body": "yeah nt really see problem could certainly refined wrong one comparison translate one cpu instruction even close imho could drop entire point cpu becoming billion comparisons enough convey severity", "d": "6/2016"}, {"body": "yeah think fine nothing factually incorrect since fine asis going close issue propose alternate wording people like better update docs feel free discuss discussreactjsorg continue discussion thread", "d": "6/2016"}, {"body": "assuming unknowingly running two instances react due npm quirks clear andor upgrade avoid", "d": "6/2016"}, {"body": "work entry deprecated warned every access completely removed make sure version use like", "d": "6/2016"}, {"body": "gaearon thanks works beer", "d": "6/2016"}, {"body": "radekmie read controlled component related", "d": "6/2016"}, {"body": "read okay might related fix even normal handler used empty handler quicker warning occurs cursor moved end", "d": "6/2016"}, {"body": "radekmie reproduce error proper handler info browser version", "d": "6/2016"}, {"body": "warning still present got warning chrome", "d": "6/2016"}, {"body": "chrome trying smart warning set invalid value outside event handler idea getting value app instead user input valid value personally think chrome overly aggressive warning design decision could file bug chrome like explain use case etc regardless bug react nt know anything could mitigate issue going close", "d": "6/2016"}, {"body": "thanks jimfb", "d": "6/2016"}, {"body": "passed prop nothing mentioned nothing special per question components never edit children stackoverflow correct place usage questions close favor post", "d": "6/2016"}, {"body": "thank time components never edit children else higherorder component changes rendering", "d": "6/2016"}, {"body": "clone must never mutate place post mentioned editing place always antipattern", "d": "6/2016"}, {"body": "mutating place question remains children passed props third parameter two arguments nt equal", "d": "6/2016"}, {"body": "nt matter whichever prefer nt pass prop second argument also pass third prop choose one", "d": "6/2016"}, {"body": "okay nt documented", "d": "6/2016"}, {"body": "would certainly possible would nt get hopes rather niche edit hmm actually flawed due checksummismatches imho simplest workaround trying achieve probably render simple guidstring instead html stringreplace html shipping client react none wiser technically legal long nt change value react wo nt replace ps beware checksummismatches recreate dom ruin magic trick", "d": "6/2016"}, {"body": "mhhh html rendered visible fetching page already also component mounts react try render component client side would maybe expect hook overwrite like verbose similar could compare server side props content checksums etc one supplied client side could decide happen next", "d": "6/2016"}, {"body": "bowlingx theoretically could could impossibly work checksummismatch react clientside framework nt really make lot sense feature exists single niche serverside usage also behaves unconventional way another possibility said keep guid id node mounting react clientside theoretically find node guid store unparent dom let component move back inside upon render guid would also survive checksummismatches imho although bit quirky probably sense proper solution problem implemented right would also allow work transparently clientside well", "d": "6/2016"}, {"body": "tried approach checksum somehow still invalid outer component removing staticly generated html nodes component react boots reinsert javascript flow import react component react type props id string classname string type state markup object export default class cmsblock extends component props props state state constructor props props super props const id props globaldocument const createmarkup contentid gt return html globalcmscontent amp amp globalcmscontent contentid globalcmscontent contentid parent element componentdidmount globalcmscontent thispropsid foreach childs gt thisparentappendchild childs render const classname id thisprops return", "d": "6/2016"}, {"body": "error structure simplified looks like html react would complain cmsblock element like", "d": "6/2016"}, {"body": "prevent html exposed twice provide information server side html quite big nt want client site elaborate exactly problem trying save bandwidth sending markup client possible frozen component rendered serverside without processed client side without calling rendercycle general think antipattern find way true anything make happen hack best fragile unsupported however understanding issue correctly potentially ways solve issue instance could store ssr markup string use string immediately populate empty dom node eg rendered react", "d": "6/2016"}, {"body": "jimfb yeah idea save bandwidth markup correctly rendered without need javascript enabled seo fallback purposes understand looks like hacky way hand lot static generated markup wo nt touched send twice client", "d": "6/2016"}, {"body": "yeah agree page lots static content sending code regenerate static content seems like crying shame one mitigating factor already got content front user background loading data somewhat less problem generalized problem avoid sending static codedata never needed never change initial render could load componentsdata absolutely necessary think could good research opportunities area especially ifwhen switch incremental renderer however nt know shortterm solutions nt horrible hacksantipatterns", "d": "6/2016"}, {"body": "going close nt see anything actionable feel free continue discussion thread reopen able come action plan", "d": "6/2016"}, {"body": "cc jquense hmm probably cc spicyj jimfb related new renderer valuelogic perhaps", "d": "6/2016"}, {"body": "dbl check though nt think event plugin related case something tested specifically tried address p could missed case suppose", "d": "6/2016"}, {"body": "jquense neither thought might interested", "d": "6/2016"}, {"body": "p intrigued really", "d": "6/2016"}, {"body": "fyi also tested see error", "d": "6/2016"}, {"body": "hi could try building react master giving another try know spicyj optimized nt released yet", "d": "6/2016"}, {"body": "mark unconfirmed happy look provide example app reproduces", "d": "6/2016"}, {"body": "checked latest version master better stil eats around maybe connected shouldcomponentupdates need analyze closely", "d": "6/2016"}, {"body": "problem nt try master though", "d": "6/2016"}, {"body": "far tell last two screenshots nt show anything perf tools function names look like normal batchingupdate code", "d": "6/2016"}, {"body": "gaearon thanks help spicyj know closed observed one thing regarding topic developing map based web app user mostly browse move around map actions fire lot map events like screenshot profiler one session user browses map nt use heavily react part application react master eats cpu similar session react see time much bigger latest version wanted let know", "d": "6/2016"}, {"body": "unrelated reactperf nt measuring production builds", "d": "6/2016"}, {"body": "also seeing using seems issue built master issue seems go away", "d": "6/2016"}, {"body": "built reactjs master issue seems go away fixed master fix next release", "d": "6/2016"}, {"body": "gaearon true unrelated reactperf sorry making mess beginner open source need learn lot production mode times think debug mode little heavier latest version thanks help", "d": "6/2016"}, {"body": "please feel free investigate difference might well low hanging fruit optimization dev master", "d": "6/2016"}, {"body": "related", "d": "6/2016"}, {"body": "ping zpao", "d": "6/2016"}, {"body": "plans remove entirely hold reason", "d": "6/2016"}, {"body": "unfortunate recommend profile using chrome firefox reactperf measures time components big difference different browsers measure actual painting dom operation time usually much smaller time spent components future intend bring reactperf react devtools possible integrate react devtools ie interested webapp something actively working probably close fixing priority us reasonable workaround call methods instead methods read measurements also polyfill hope helps somewhat suggestions please let us know", "d": "6/2016"}, {"body": "thanks regarding big difference due different js engines something fast chrome could slow ie therefore results could different mind anyway thanks support", "d": "6/2016"}, {"body": "yea could practice argue see difference much work inside components anyway agree bit inconvenient want put much effort maintaining console api would rather work integrating devtools proper said polyfill reasonable solutions", "d": "6/2016"}, {"body": "yes thanks", "d": "6/2016"}, {"body": "bikeshed would obvious close could also make less fun type signal discouragement since bound would confusing autobound js return return could either keep forwarding ref awkward bind wasteful cases live inconsistency", "d": "6/2016"}, {"body": "would great push people use stateless function component ease high order component use", "d": "6/2016"}, {"body": "ability provide subset methods public api would great would give clear idea methods available consumers component imho important limit possible values react public instances null would nt allow specifying object custom set methods flow understand type ref could made understand new mechanism nt really tried thought yet", "d": "6/2016"}, {"body": "think could split two proposals make possible set ref basically thisref constructor part would also make possible opt exposing ref transferring ref providing subset api change default behaviour exposing ref understand correctly already make possible support ref forwarding higher order components advantage upgrade path would better opinion would implemented first maybe warning development default behaviour change future would still possible change default behaviour later apart really like idea exposing subset methods public api", "d": "6/2016"}, {"body": "overall think positive direction however also like move direction special instead prefer component expected set null componentwillunmount means sfc forward ref", "d": "6/2016"}, {"body": "however also like move direction ref special instead thisref prefer thispropsref component expected set null componentwillunmount worried easy forget never hard us seems like problem carrying ref child usually want", "d": "6/2016"}, {"body": "true second benefit actually new compared seems like higher order components unobservable providing explicit imperative apis also covered new thing seems idea optin explanatory less magic also arguably confusing understand going nt like sideeffectful api especially one used constructor since nt know instance yet would mutate something instance read getter anyway see corresponding even allowed constructor something explicitly want get rid primary api confusing timing issues might seem like could invoke ref callback right constructor actually way early callback needs able invoked multiple times ref changes assume benefit easier forward ref nt need store state", "d": "6/2016"}, {"body": "could call time lifetime change ref", "d": "6/2016"}, {"body": "like approach forwarding refs exposing custom shape ref think callback prop better ended recently wanted something like ref slightly different lifecycle eg perhaps something specific would suitable", "d": "6/2016"}, {"body": "whatever worth whenever needed work around refs hocs apps used prop la jimfb comment pretty rare needed seems like main benefit keeping class refs firstclass concept harder screw considering class refs escape hatch generally avoided react already expects subscriptions though maybe nt firstclass api subscriptions would awesome think strong argument people manually prop", "d": "6/2016"}, {"body": "curious common using class refs opposed dom refs really done maybe twice entire time react developer cases dealing really old debtinfested code dan mentioned twitter animations common use case sure quite mean fb use often", "d": "6/2016"}, {"body": "see common form libraries try use way though see may useful probably perf big forms sometimes advertised directly examples", "d": "6/2016"}, {"body": "true second benefit actually new compared seems like higher order components unobservable providing explicit imperative apis also covered new thing seems idea optin explanatory less magic also arguably confusing understand going sure specific proposal described hard say get refired proposal issue setting ref imperative either fire constructor delegate child component fire yea similar proposal comment except completely remove two ways achieve thing assume benefit getpublicinstance easier forward ref nt need store state also full control refire could call thisref time lifetime change ref yes however cases probably want manually two use cases really want expose subset instance js class textfield extends component constructor props super props thisref focus thisfocusbind focus privatemethodidontwantanybodytocall want forward ref could refired js class mycomponent extends component render return class extends component render return thispropssomething", "d": "6/2016"}, {"body": "timing aspects really difficult get right fire constructor expose methods yet ready used component nt fully initialized also nt yet child refs ensured refs would fired use however also ensure ref expose get fired nt expose incomplete instance ca nt yet used similarly updated refs get deferred reconciliation done otherwise move burden handler ref somehow know call method", "d": "6/2016"}, {"body": "also current contract whenever value changes old function called new one called instance", "d": "6/2016"}, {"body": "ensured refs would fired componentdidmount use however also ensure ref expose get fired componentdidmount nt expose incomplete instance ca nt yet used similarly updated refs get deferred reconciliation done super useful thanks explaining understand constraints better current contract whenever value ref changes old function called null new one called instance yea forward ref proposal issue think would exactly would happen definitely room error start calling imperatively", "d": "6/2016"}, {"body": "dislike refs currently recommended way obtaining root component render since render longer synchronously returning component able discourage use refs need alternate way getting root component render maybe either special reacttestutils render return component synchronously allow render take callback called component available", "d": "6/2016"}, {"body": "make pr", "d": "6/2016"}, {"body": "pr merged closed", "d": "6/2016"}, {"body": "fixed", "d": "6/2016"}, {"body": "nt seem working even natively ie actually", "d": "6/2016"}, {"body": "render count many times function called instance count many instances component exist instance count render count means instances rendered twice example may caused inside hard say without seeing code mean initial renders wasted necessarily example maybe loading additional data changing state measuring dom nodes check wasted renders using look like bug think renders counted please provide case reproducing", "d": "6/2016"}, {"body": "ping shubhamsizzles", "d": "6/2016"}, {"body": "closing appear anything actionable us feel free leave comments cheers", "d": "6/2016"}, {"body": "use case want render component multiple times update state server", "d": "6/2016"}, {"body": "assume olalonde trying components load data calling setstate data arrives couple problems approach generally great pattern client side means ca nt start loading data child component parent component finished rendering data means component tree depth require round trips server fetch data page load complete would much better figure data needed top fetch everything single trip beginning server side eventually need send markup client way knowing render done thus ready sent client could outstanding data requests could call setstate component point future component data internal component state experience using mechanism stateful components makes code much difficult reason particular case especially unnecessary component data copy sideways loaded data duplicating source truth related reading list goes couple issues interest time truncate list general recommend fetching data storing data state extent request async ssr data duplicate", "d": "6/2016"}, {"body": "storing data state would store data fetched server", "d": "6/2016"}, {"body": "mxstbr external flux datastore redux pretty popular use relay facebook dearth data management frameworks disposal point data general application state internal component state modeled application layer modeling data correct layer way keep application fast internally consistent", "d": "6/2016"}, {"body": "ah thought storing data state included application state bad thanks answer", "d": "6/2016"}, {"body": "jimfb wow read way much example going reply objections although nt think relevant issue client side means ca nt start loading data child component parent component finished rendering data inevitable regardless react example app displays currently logged user username header full load given page least n api requests least one round trip fetch user profile fetching everything single round trip always possible especially control api using means component tree depth require round trips server fetch data page load complete nt see would necessarily case case pages require round trips one get logged user profile another load rest data would much better figure data needed top fetch everything single trip beginning terms efficiency yes terms maintainability loading data component needs data declares needs instead duplicate information somewhere else server side eventually need send markup client way knowing render done thus ready sent client could outstanding data requests could call setstate component point future incorrect keep track async calls done know render done without using timeouts code using right inefficient would nt react offered api described issue actually quite useful allowed get server side rendering work existing code base nt build server side rendering mind tiny modifications code base component data internal component state experience using setstate mechanism stateful components makes code much difficult reason actually using redux pretty much never call directly dumbed example get heart issue regardless nt think debate stuff mentioned asked quite simple api went effort avoid mentioning async data loading know subject much controversy quite lot issues dedicated topic", "d": "6/2016"}, {"body": "regardless nt think debate stuff mentioned asked quite simple api went effort avoid mentioning async data loading know subject much controversy quite lot issues dedicated topic nt understand motivation request async data loading elaborate use cases data loading", "d": "6/2016"}, {"body": "could used testsimulate react server side example anyways take would nt easy implement fine", "d": "6/2016"}, {"body": "could used testsimulate react server side example still nt understand motivation testing including updates using instead polyfilling browser api eg jsdom using real browser using", "d": "6/2016"}, {"body": "honestly would pretty low priority us yeah ideal world would probably emit warning feel free submit pr", "d": "6/2016"}, {"body": "jimfb could take hopefully submit pr within days", "d": "6/2016"}, {"body": "cynicaldevil help would also like contribute", "d": "6/2016"}, {"body": "warn instead selecting proper option dom think better consistency", "d": "6/2016"}, {"body": "see problem think problem design code instead using attribute directly binding value could use attribute set initial selected value nt set initial value somehow detach binding react ca nt determine options selected value attribute tweaked webpackbin maybe helps understand trying explain", "d": "6/2016"}, {"body": "markboyall think shouldcomponentupdate passing third argument shallowequal update examplepoc", "d": "6/2016"}, {"body": "main point context going fold lengthy disucssion", "d": "6/2016"}, {"body": "honestly nt common pattern nt coming often enough would justify adding feature nt think would going close reopen thinking changes however curious use case componentdidupdate figured props changed", "d": "6/2016"}, {"body": "specific happening give test case nothing actionable us provided", "d": "6/2016"}, {"body": "zpao", "d": "6/2016"}, {"body": "already directory package part directory package", "d": "6/2016"}, {"body": "confirm see apparently buggy behavior happens leads suspect getting triggered reconciliation setting property prior firing confusing firefox", "d": "6/2016"}, {"body": "workaround could use react changed resolve issue open bug report firefox sure go", "d": "6/2016"}, {"body": "cc spicyj", "d": "6/2016"}, {"body": "okay change setinnerhtml along lines var reusablesvgcontainer documentcreateelement div function setinnerhtml node html reusablesvgcontainerinnerhtml html var svg reusablesvgcontainerfirstchild svgfirstchild nodeappendchild svgfirstchild case svg missing innerhtml support ie also create container lazily", "d": "6/2016"}, {"body": "sound fine thank", "d": "6/2016"}, {"body": "share jsfiddle reproducing issue use base", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "yeah fairly sure duplicate fix next patch release", "d": "6/2016"}, {"body": "also swapped drop likely improvement tested independently nt realise reactdom package pointed back react package", "d": "6/2016"}, {"body": "checked package deps things drastically changed closed", "d": "6/2016"}, {"body": "nt look like issue", "d": "6/2016"}, {"body": "fwiw nt overall difference noticeable end day react package export dom related things deprecated reactdom package still pointing directly react package files getting exported react use used reactdom total size pretty similar result never used reactdom paying cost wo nt", "d": "6/2016"}, {"body": "thanks reply think came conclusion upgraded without modifications import path", "d": "6/2016"}, {"body": "sorry duplicate", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "omerts running master branch seems work fine", "d": "6/2016"}, {"body": "aweary getting test results fwiw windows machine", "d": "6/2016"}, {"body": "getting test results master archlinux", "d": "6/2016"}, {"body": "omerts made changes locally os x get test results well", "d": "6/2016"}, {"body": "pretty sure tests used run fine windows nt vm handy test right cc cpojer case recent jest upgrades broken perhaps something haste filesystem", "d": "6/2016"}, {"body": "work fine", "d": "6/2016"}, {"body": "aweary make changes get tests found even switching back master nt experience jest know looks look recursively looking root directory nt see folder subdirectories maybe problem directory lookup windows specs windows node npm make sure fresh clone follows still error", "d": "6/2016"}, {"body": "omerts nice thanks details definitely looks like problem someone else running windows try reproduce ca nt reproduce os x", "d": "6/2016"}, {"body": "working fixing next jest release sorry causing trouble", "d": "6/2016"}, {"body": "hmm even pass absolute file path still ca nt find test files suspect issue jest however currently blocked easily investigating jest nt build windows due investigate get jest build properly", "d": "6/2016"}, {"body": "create brand new project using jest make single test works fine works nested directory ie c srctestappwithjestfoobartestsfootestjs wonder something configuration repository specifically", "d": "6/2016"}, {"body": "found bug occurs enabled jest config moved jest repo", "d": "6/2016"}, {"body": "thanks finding", "d": "6/2016"}, {"body": "cpojer kind mock functional component mean mock functional component without implementation mock functional component implementation please see even mocked component lil render implementatoin without tests nt pass", "d": "6/2016"}, {"body": "even need use mocks stateless functions trivial write quick function expected behaviors return whatever make assertions arguments andor track number times called favor rewriting callsite issue", "d": "6/2016"}, {"body": "issue automocking nt work module exports functional component jimfb", "d": "6/2016"}, {"body": "spicyj thought disabling automocking react", "d": "6/2016"}, {"body": "unrelated state whether react mocked also unrelated automocking exhibits problem example user code vs former render undefined throw latter render null component mocked using automocking multiple people reported annoying many components stub manually prefer align react work well functional components ways defining component", "d": "6/2016"}, {"body": "think hack reactcompositecomponent added avoid breaking unit tests always hack never intended goodsupported pattern would codemodded pattern away www almost thousand unit tests depending behavior moment nt see easy fixcodemod workaround think would work use instead mock function could probably add warning telling user use lambda function instead mock", "d": "6/2016"}, {"body": "nt think argument makes sense supporting hack www also open source right supporting hack partially want remove hack fine long good upgrade story nt going impact people developer efficiency nt understand people would use function comes mock may control primarily come open source people get angry jest used work fine classes nt work", "d": "6/2016"}, {"body": "want remove hack fine long good upgrade story nt going impact people developer efficiency concern support hack stateless functions digging deeper hole rather adding support rather use opportunity drive people away behavior like deprecate anyway want adopt stateless functions need stop relying legacy behavior nt understand people would use gt null function comes mock may control use instead default function mock presumably jest provides hook people override default mock behaviorimplementation right", "d": "6/2016"}, {"body": "well feedback received many stateless components manually mocking annoying especially handled jestreact previously people nt understand difference could change jest btw would unfortunately ca nt know whether something functional component upfront", "d": "6/2016"}, {"body": "yeah agree sure great solution open ideas make migration path away legacy behavior easier alternative workaround use real implementation instead mock sfcs becomes little closer integration test instead unit test upside behavior testing closer real life", "d": "6/2016"}, {"body": "confirmed see behavior joevp inheritance pattern priority us also affects legacy browsers would probably take pr fix like write fix", "d": "6/2016"}, {"body": "also clear babel bug react bug intuition looks like babel bug whereby property nt inherited properly cc hzoo kittens", "d": "6/2016"}, {"body": "joevp would try classes transform loose mode transformprototoassign using babel ref", "d": "6/2016"}, {"body": "thanks hzoo yep think mostly solves mystery going close notareactbug joevp see easy workaround would allow us support core likely take pr", "d": "6/2016"}, {"body": "looks like might potential fix nt tested side effects yet update original example set default props base component prototype update logic reactelement look well", "d": "6/2016"}, {"body": "zenjava code provided actionable among things references variables like undefined going need simplified jsfiddle demonstrates issue", "d": "6/2016"}, {"body": "response op closing", "d": "6/2016"}, {"body": "looks like fixed redirect separate site works fine", "d": "6/2016"}, {"body": "yea page redirects nothing", "d": "6/2016"}, {"body": "community driven sounds fine want contribute future removes burden support since nt likely actively maintaining downside make changes locally want upgrade defs official release sure process would look like long still possible us qualms plan sounds good", "d": "6/2016"}, {"body": "chicoxyzzy dt typings outdated mentioned want avoid forking type definitions multiple sources truth possible", "d": "6/2016"}, {"body": "hey chicoxyzzy might better hold moves dt currently exploring alternate acquisition story wait making major changes", "d": "6/2016"}, {"body": "vsiao think good one source truth btw nt current dt definitions global danielrosenwasser sure tell change github issues follow", "d": "6/2016"}, {"body": "everyone interested definitions delivery work typescript react definitions stay dt repo closing", "d": "6/2016"}, {"body": "record got answer react reuses component type key match want force recreation node need assign key changes want swap one component another without recreating nodes need make sure types match way replacing always unmount completely mount b b react earlier used generate html whenever mounting new subtree add new item list swap markup new list item would set using innerhtml react uses documentcreateelement directly sets innerhtml using dangerouslysetinnerhtml", "d": "6/2016"}, {"body": "gaearon related maybe solution want use bind everywhere implement available pure vanilla js dom event api think actual implementation ok compatible dom api using callback functions agree react team extracting variable odd seems like native created solve sort things using object polymorphic handleevent message", "d": "6/2016"}, {"body": "eventlistener interface lets decide want share one object handle several events reusing contexts lot oop creativity instead simple callback execution uninvertion control handler used handle several events could pass function locations right like need rebind every time trying solve problem support actual dom eventlistener interface works modern browsers question reason support api currently people may accept event handler wrap handler another handler calls original delegate part new function execution pattern becomes much difficult always need remember originaldelegate might eventlistener interface instead would probably want provides tangable wins like performance", "d": "6/2016"}, {"body": "jimfb devs unaware native behaviour vanillajs benefit disadvantage support feature devs wants use feature great question use limited way react add support full stated specs know usage something pretty unknown majority js devs doesnt seem disadvantage add support implementation changed lines works pretty well obviusly needs review smart guys maybe using solve lead successful pattern dealing", "d": "6/2016"}, {"body": "sminutoli disadvantage currently people may accept event handler wrap handler another handler calls original delegate part new function execution pattern becomes much difficult always need remember originaldelegate might eventlistener interface instead dev unaware feature disadvantage wrapper function fail exceptionally tries invoke delegate object instead function", "d": "6/2016"}, {"body": "nt think worth additional complexity point jimfb mentioned change require component calls parent handler need introspect handler see object function right simple consistent nt see enough gains taking approach recommending think interesting appreciate discussion could influence way think potential changes nt think right thing right cc sebmarkbage heard thinking something related recently perhaps final comment close", "d": "6/2016"}, {"body": "zpao see roughly added feature maybe missing something seems like simply adding logic works acceptable value handler attempt throw like pass nonfunction handler thanks taking prop consideration updated plunker clarify little purpose demo", "d": "6/2016"}, {"body": "jimfb ca nt see point getting right disadvantage mentioning indeed bad implementation nowadays works exactly like proposing big deal benefits know take advantage delegation", "d": "6/2016"}, {"body": "see implementation complex supporting existing components gets complex every component need add additional type check different things common pattern component composes another adds additional functionality event handler js app renders mybutton reactcreateclass proptypes onclick proptypesfuncisrequired handleclick e something first thispropsonclick e render return", "d": "6/2016"}, {"body": "zpao understand better concerns adding feature work basic jsx elements really subscribehandle listeners wrapper component like exposing public api must function stated supported interface writing component like choose something like javascript point onclick would onaction onwhatever isnt real onclick class mybutton extends reactcomponent constructor super handleevent evt call callback required props thispropsonclick evt call method present prototype chain runtime evaluated indeed mybutton class could extend another proto handleevent render need bind return autobinding function obviusly choose using support use common pattern exposed thanks keeping track", "d": "6/2016"}, {"body": "probably provide custom helper composite components dispatch event either encourage everyone write components like however seems components tend handle lot different types event different sources pattern ends used rarely functions preferred least seemed case experience pattern past end writing lot additional forwarding boilerplate code basically therefore seems unnecessarily restrictive force everyone building composites correspond interface simpler say everything function pass whatever also unclear whether binding actually perf problem issues plays andor generational gc said might valid reasons require pattern example schedule callback later point needed ensure props consistent good time handle event pattern also nice symmetry fluxredux patterns makes clearer state changes really pattern different root identities want first figure means functional components though since nt suspect might tricky many different ways close let keep seeing related things might make worth pattern available", "d": "6/2016"}, {"body": "cc gaearon regarding unifying event handlers redux patterns", "d": "6/2016"}, {"body": "sebmarkbage thanks lot feedback know pattern needs explored ie use achieve something similar oop way like share across instances well creative oop door supporting opens nt care sort things could keep basic callback handler need adopt pattern", "d": "6/2016"}, {"body": "fixed", "d": "6/2016"}, {"body": "updates", "d": "6/2016"}, {"body": "workload gon na report back results next week guess sorry delay", "d": "6/2016"}, {"body": "also running problem using rollbar instead sentry error", "d": "6/2016"}, {"body": "error please try figure way check native try attaching bug reports", "d": "6/2016"}, {"body": "thank repro verified duplicate fixed master via reproduce master closing fix next release", "d": "6/2016"}, {"body": "actually issue using react wordpress logout link rendered wordpress parsing correctly picking params", "d": "6/2016"}, {"body": "alexmarchant appears doubly escaped url escaped already prior rendering react", "d": "6/2016"}, {"body": "pgoldrbx oh ya right nt even notice pasting actually shows normally chrome url bar weird looking", "d": "6/2016"}, {"body": "pgoldrbx thought maybe reactdomserverrendertostring threw together jsfiddle looks like working fine must something end server side thanks helpful comment", "d": "6/2016"}, {"body": "fedgrant looks like nt problem react passing test case added represent use case reacteuropehackathon", "d": "6/2016"}, {"body": "cpb must something else using", "d": "6/2016"}, {"body": "fiddle op closing reexamine get fiddle demonstrates react bug", "d": "6/2016"}, {"body": "created pr", "d": "6/2016"}, {"body": "gaearon depeneding generate unique id nt good initial mount since event updates childids last event emitted therefore generating id based childids hooks run returns", "d": "6/2016"}, {"body": "show code nt fully understand using", "d": "6/2016"}, {"body": "gaearon sorry late response simplified code example reproduce problem dev tool javascript const eventhandlers onbeforemountcomponent debugid element elementtype button consolelog onbeforemountcomponent getuniquekey debugid elementtype onbeforeupdatecomponent debugid element elementtype button consolelog onbeforeupdatecomponent getuniquekey debugid elementtype reactinstrumentationdebugtooladddevtool eventhandlers function getuniquekey id var parentid reactcomponenttreedevtoolgetparentid id parentid var siblingids reactcomponenttreedevtoolgetchildids parentid var index siblingidsindexof id return getuniquekey parentid gt indextostring else return root jsx double render emit javascript class test extends reactcomponent render return test reactdomrender documentgetelementbyid root reactdomrender documentgetelementbyid root output", "d": "6/2016"}, {"body": "onbefore probably early tried hooks run like onmountcomponent", "d": "6/2016"}, {"body": "running code later works perfect thing added new event raised component state changes change component state childids set", "d": "6/2016"}, {"body": "ping jquense", "d": "6/2016"}, {"body": "others think fires oninputonchange propertychange event polyfill looking seems serious distancing vendor features ca nt believe complaining p fixed master still saying could put wanted", "d": "6/2016"}, {"body": "zpao hi sorry long response demo issue happens using jquery add additional dom react dom step reproduce click add gt animation happen gt jquery wrap react node click save gt uncaught notfounderror failed execute removechild node node removed child node click remove gt uncaught typeerror read property componentdidleave undefined", "d": "6/2016"}, {"body": "issue happens using jquery add additional dom react dom allowed", "d": "6/2016"}, {"body": "pretty new nt official documentation suggest actually see componentdidmount", "d": "6/2016"}, {"body": "alexzherdev ok modify content empty react nodes may mess hierarchy rendered react way react figure correctly apply updates modified hierarchy honestly sure explicitly stated somewhere docs limitation applies frameworks really", "d": "6/2016"}, {"body": "makes sense thanks explanation assuming directed", "d": "6/2016"}, {"body": "thanks following lovedota syranide said modifying dom generated react result bad time things safely ok wrapping content changes structure react knew particular reparenting nodes virtual dom representation gets sync real dom problems like pop ca nt recover", "d": "6/2016"}, {"body": "zpao posted issue happened upgraded react understood thanks time", "d": "6/2016"}, {"body": "issue still considered bug change use make warning", "d": "6/2016"}, {"body": "littlee nt blame blame us terrible", "d": "6/2016"}, {"body": "response op", "d": "6/2016"}, {"body": "response op", "d": "6/2016"}, {"body": "reproduce issue jsfiddle", "d": "6/2016"}, {"body": "real question calling within lifecycle method trying mount new component node current component mounted seems like antipattern use root parent component manage component renders instead trying remount root absolutely multiple react roots really good reason using sort helper system manage f multiple react roots single root gets deleted time recommend always create wrapper api look slightly different depending outer system looks like example facebook system automatically ties page transition router automatically call unmountcomponentatnode rather calling reactdomrender directly everywhere consider writingusing library manage mounting unmounting within application", "d": "6/2016"}, {"body": "fixed", "d": "6/2016"}, {"body": "jimfb similar issue textarea would treat initial value placeholder text demo test correct guessing directly related issue another issue", "d": "6/2016"}, {"body": "anderssonchristian", "d": "6/2016"}, {"body": "syranide pardon", "d": "6/2016"}, {"body": "anderssonchristian brain shortcircuit thought setting value placerholder text yeah believe error seeing related error mentioned fixed", "d": "6/2016"}, {"body": "fixed", "d": "6/2016"}, {"body": "one possible workaround ones still using unfixed version passing two decimal float number transform trick", "d": "6/2016"}, {"body": "sorry directly related issue first time seen proptypes marked legacy jimfb please provide link additional info becoming legacy used instead future invested time setting project find quite useful kind validations nice dev", "d": "6/2016"}, {"body": "keep using like going away soon longer term plan use something like flow emphasize docs proptypes", "d": "6/2016"}, {"body": "oh thanks dan makes total sense thinking overlaps proptypes typescript validations recently", "d": "6/2016"}, {"body": "others issue surely end approach worked open chrome debugger sources pane set event listener breakpoint event causing issue recreate issue execution break debug step forward particularly listener argumentz enter console save global reference object step forward choose step next function call get place throwing error break console result definitely running two instances case turned one libs using bundled", "d": "6/2016"}, {"body": "jquense seems work fine username password field goes variable null see node though looks like currently set field receives focus wo nt work password field never fires focus event ie autocomplete event handling", "d": "6/2016"}, {"body": "safe use production seems like may changed removed time production alternatives render component dom node manually", "d": "6/2016"}, {"body": "iotch little insight tweet", "d": "6/2016"}, {"body": "confirm context update using", "d": "6/2016"}, {"body": "fixed", "d": "6/2016"}, {"body": "least sad declare get context work surely presence could sufficient clue", "d": "6/2016"}, {"body": "jamesgpearce nt know child read would mean rerendering anything reads context anything changes instead rerendering specific keys would probably need something indicate specificity eg componentcontexttag somesymbol original diff seemed make sense reuse proptypes purpose note none static type systems way check context type providing dynamic type actually quite helpful track type error bugs even use static type system anyway nt really know make context efficient anyway likely use cases split addressed apis going forward highly recommended use higher order components using power user feature", "d": "6/2016"}, {"body": "add value attribute input field mount waiting released", "d": "6/2016"}, {"body": "fixed merged released upcoming release", "d": "6/2016"}, {"body": "also saw error rendering img remove src attribute img error disappeared error exist using npm package webpack everything ok individual build", "d": "6/2016"}, {"body": "confirm several mobile users android using chrome getting error react webpack stacktrace found", "d": "6/2016"}, {"body": "torarnek little without repro share code occurring dig deeper otherwise inactionable mentioned things appeared work individual builds bower builds find true", "d": "6/2016"}, {"body": "facing issue albeit occurring due video tag", "d": "6/2016"}, {"body": "able solve following instead declaring parent html node inside indexhtml removed div tag indexhtml added div js code follows hope works others well", "d": "6/2016"}, {"body": "gauravchaturvedi share minimal project reproduces problem", "d": "6/2016"}, {"body": "problem introduced using redux connect various subcomponents since critical production feature quick refactoring connect main component seems working fine problem seems affect media tags batch updates see previous stacktrace", "d": "6/2016"}, {"body": "unfortunately somebody share reproducing example left guessing would really help could spare hours find minimal reproducing sample hopefully react saved hours seems fair", "d": "6/2016"}, {"body": "hey dan knew create reproducible example would definitely made one guys deserve however case android mobile users certain chrome browser got issue tried reproduce android emulator able get error sorry", "d": "6/2016"}, {"body": "helpful info thanks sharing maybe somebody else able use publish case reproducing androids", "d": "6/2016"}, {"body": "summary stopped seeing able reproduce issue since use sentry track errors several projects see audio element issue occurring certain users compared stack traces insight users running using time running react several months stack traces browser reported error nt many mobile web users native apps would nt expect see browsers reported lt example stack trace reproduction attempt spun vm versions ran fiddles attempted reproduce avail someone wants give shot download opera copy windows ie hopefully new information lead someone else reproduction anyone keeping track bugs seeing similar browser pattern may useful learn", "d": "6/2016"}, {"body": "apologies naive question project objectassign switcheroo need occur lot comments saying need nt clue file may issues besides placement typescript seems angry period objectassign try import get expected also throwing bad path objectassign think probably overcome problems", "d": "6/2016"}, {"body": "assuming using npm see simply deleting nodemodules reinstalling probably fix want using browser build react use later", "d": "6/2016"}, {"body": "looking issue morning seems stems least partially fact called first child component rendered call switch order render second noop used error nt thrown remove final error nt thrown course implications", "d": "6/2016"}, {"body": "looks like time called already reset even though transaction wrapped call pulled object pool since noop incorrectly attempting apply batched updates nt", "d": "6/2016"}, {"body": "cc spicyj", "d": "6/2016"}, {"body": "still rather naive understanding works would reasonable enqueue calls still transaction nt released instead applying immediately way actions would finish batching strategy expected", "d": "6/2016"}, {"body": "iirc nt support nested server rendering moment another issue somewhere", "d": "6/2016"}, {"body": "spicyj opened pr fix resolves issue let know think", "d": "6/2016"}, {"body": "understand trick hooking refs nonvirtual dom nodes known time style applied relevant thread", "d": "6/2016"}, {"body": "successfully converted internal variables css variables using wrapper calculate applied giving user control higher level colors calculate relevant palettes allowed theming product insert variables top window optionally override dom tree top component passed theme prop componentdidupdate function looks like key const cssvalue thispropstheme key found setting property would replace old one needs removed first theme prop contains changed variables keeping overhead performance variables good allowed us remove large amount css", "d": "6/2016"}, {"body": "hey unfortunately invest time right must pause added onfocusinout mimicing onfocusonblur issues changing onfocusonblur nt bubble nt want slow awesomeness react anyone wants invest issue please nobody get back time good luck", "d": "6/2016"}, {"body": "issues changing onfocusonblur nt bubble want bubble previously said events bubble fine whatever leave decision spicyj since situational awareness", "d": "6/2016"}, {"body": "since tagged good first bug thought take stab let know still working cbrwizard", "d": "6/2016"}, {"body": "little investigating looks like focusin focusout events supported firefox still something want implement browsers nt support see", "d": "6/2016"}, {"body": "mrscobbler possible polyfill event browsers nt natively support several events supported particular browsers", "d": "6/2016"}, {"body": "ok good know", "d": "6/2016"}, {"body": "status", "d": "6/2016"}, {"body": "spent hours figuring events code never looked made progress possibly cbrwizard could walk done might get better understanding needs happen something want tackle needwant finished", "d": "6/2016"}, {"body": "gaearon great help using rollup threw minutes got files modules simple rollup script get people going run way linking issue also modules sorry covered somewhere else could nt find one access haste map react modules would handy automatically replace imports paths thanks", "d": "6/2016"}, {"body": "haste vs relative paths pushed code allows providesmodule keep used alias rollup included map alias commit easier people look generate module map react root rollup command nt change eg build reactdom seem many dependencies nt part codebase eg executionenvironment invariant keymirror etc imagine haste might providing internally right cc gaearon zpao", "d": "6/2016"}, {"body": "would awesome", "d": "6/2016"}, {"body": "seem many dependencies nt part codebase yea pull fbjs generated module map amp gets used rewriting requires", "d": "6/2016"}, {"body": "zpao reckon fbjs module map could leveraged", "d": "6/2016"}, {"body": "probably took quick look seems like similaridentical fyi ways committing something like working ever cool exploration definitely cycle back looking", "d": "6/2016"}, {"body": "discovered part gt upgrade thought leave note future googleability previously style property like applied element expected although perhaps subject bugs described never saw upgrading style applied missing altogether hunch removed applied way applied separate properties big deal sure improvement caught surprise", "d": "6/2016"}, {"body": "rmosolgo caught surprise please see release notes first change using instead setting mounting components fact coincidence never supported find pattern documentation worked generated html initial render became part html subsequent updates property would failed subsequent updates implemented react using dom api instead setting html broken happened work initial render mentioned release notes switches using dom api initial render well inside value longer works", "d": "6/2016"}, {"body": "cool thanks clarifying makes sense overkill case anyways thank goodness", "d": "6/2016"}, {"body": "proposal place incredibly useful getting cooked html server displaying inside react component right clean way treating links inside html caught reactrouter wish could dangerouslyset components", "d": "6/2016"}, {"body": "using commentnodes delimit textnodes perhaps could use principle simply render raw html instead text replace everything comment nodes html updated safe ssr always dangerous malformed html already issue", "d": "6/2016"}, {"body": "issue using fixed adding check since needed timeout browser side used image slider", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "unactionable current state march looks like browser quirk clear want smooth decide want smooth reopen meantime closing unactionable since nt appear bug react", "d": "6/2016"}, {"body": "fiber reconciler help solve owner concept issue anyhow could issue inline objects babel plugin solved flowtype typescript think nontrivial task also ca nt force people use static typing whole issue looks complicated mind split different tasks", "d": "6/2016"}, {"body": "issue extracting reactdom element factories separate module niche require maintaining whitelist separate issue removing reactcurrentowner feel free discuss", "d": "6/2016"}, {"body": "issue extracting reactdom element factories yes understand actually task glad help clear consensus solve problem propose split separate subtask", "d": "6/2016"}, {"body": "propose split separate subtask split separate subtask far see issue concerning thread", "d": "6/2016"}, {"body": "made module factories reactdom", "d": "6/2016"}, {"body": "moodysalem package react repo somewhere suppose also validators think preserve look context", "d": "6/2016"}, {"body": "fiber reconciler help solve owner concept issue anyhow would nt make difference", "d": "6/2016"}, {"body": "gaearon thought problems solved first original issue could splitted subtasks", "d": "6/2016"}, {"body": "chicoxyzzy points observations nothing actionable far see point problem described", "d": "6/2016"}, {"body": "fixed exact stack trace", "d": "6/2016"}, {"body": "fixed", "d": "6/2016"}, {"body": "fyi problem occurs passing nullderived props example would really like fixed across react codebase", "d": "6/2016"}, {"body": "going close since months nt look like going happen point mostly legacy point anyway preferred api use stateless function class", "d": "6/2016"}, {"body": "happened gone", "d": "6/2016"}, {"body": "hillbrad", "d": "6/2016"}, {"body": "oh weird could sworn fbme setting cors headers properly one point", "d": "6/2016"}, {"body": "dig final resource sets right headers fbme tue jun april king notifications githubcom wrote oh weird could sworn fbme setting cors headers properly one point receiving mentioned reply email directly view github mute thread", "d": "6/2016"}, {"body": "write issue exact api request usecase slightly different api provided would solve problem tl dr use case alert system uses single component represent queue alerts alert uses css transitions animate reliable way programatically determine exact moment old alert disappears new one appears component nt always unmount mount alert queued immediately appear old one dismissed provide details anyone cares know figured throw comment support suggestion thanks opening issue pr randscullard", "d": "6/2016"}, {"body": "hi thanks feedback done good job maintaining transitiongroup actively used inside facebook recommend fork add needed functionality plan hand community eventually strong enough use case capacity review issues pull requests related unless trivial thanks understanding", "d": "6/2016"}, {"body": "thanks reply gaearon would accept pr add note docs saying unsupported seems like important info community", "d": "6/2016"}, {"body": "hmm know maybe find good way phrase enumerated everything support would infinite list would extremely common use case us specifically draw attention", "d": "6/2016"}, {"body": "istarkov chicoxyzzy spicyj related issue closed issue closed stopped reproducing", "d": "6/2016"}, {"body": "jsbin broken fixed almost certainly thanks", "d": "6/2016"}, {"body": "giltig memoization function work intended multiple instances component different properties", "d": "6/2016"}, {"body": "cody lindley outlines seven different approaches react setups article taming react setup third one inline browser transpilation option tiny bit setup build step quote author systemjs help jspm cdn sort details react jsx babel ie dynamic loading browser runtime pretty amazing works major downside reliance jspm cdn sort means work internet connection offline use still might suit", "d": "6/2016"}, {"body": "thanks actually decided use jsx know much easier write straight javascript maybe nt yet developed large site react really sure jsx adds beyond making easier designers familiar html downsides huge babel became mess version six webpack kind odd choice package manger ask give year two becomes almost unusable well tons people react projects require major overhauls unless fb going pay developers work open source projects see dependencies major liabilities anyway pretty set", "d": "6/2016"}, {"body": "jsx transformer transforms jsx seems like something exist nt need babel lines going waste", "d": "6/2016"}, {"body": "jsx transformer transforms jsx gunn load jsx plugin babel nothing else bulk babel parsingtransformation code still necessary even want one plugin nt think anyone built simple nonast transform jsx though", "d": "6/2016"}, {"body": "afraid babelcore would still quite heavy ideas approach transforms jsx works hundreds lines nt know would problems edgecases maybe jstransform could made small enough nonjsx requires eliminated file", "d": "6/2016"}, {"body": "yeah simple parser parses jsx rather entire javascript ast would doable might able use bits vdtjs one jstransform still uses javascript parser esprima still going much heavier parsing jsx nothing else", "d": "6/2016"}, {"body": "finally integrated babelstandalone based zpao script automatically compile execute scripts tags smile", "d": "6/2016"}, {"body": "looks like grabs progress info implement updated fiddle demonstrating issue error message different cause", "d": "6/2016"}, {"body": "think found way use way spicyj advised send pr soon possible maybe tonight maybe tomorrow", "d": "6/2016"}, {"body": "okay trick question let setstate go use change instance make fail", "d": "6/2016"}, {"body": "answering question maybe initial mount nt use yet reactnoopupdatequeue", "d": "6/2016"}, {"body": "fixed", "d": "6/2016"}, {"body": "look since reactdom abstracted react core", "d": "6/2016"}, {"body": "looks like current implementation checks existence actually assigned called true seems like better attach flag indicating mounted", "d": "6/2016"}, {"body": "ping spicyj think something like", "d": "6/2016"}, {"body": "better attach flag invokecomponentdidmountwithtimer indicating mounted unrelated good place called dev specifically exists pay unnecessary indirection andor code size", "d": "6/2016"}, {"body": "thanks gaearon nt notice looking reconcilerreactcompositecomponentjs calls enqueued cases would expect set right called perhaps could enqueue function calls also sets flag used check flag instead", "d": "6/2016"}, {"body": "progress workaround till issue fixed nt involve adding entry point tried using polyfill nt work", "d": "6/2016"}, {"body": "shubhamsizzles put browser entrypoint libs using", "d": "6/2016"}, {"body": "getting whitespace somehow jsx databillingtype amp amp databillingtype hourly amp amp base kbformatcurrency datahourlyrate hr kbformathours datahours databillingtype flat amp amp flat rate kbformatcurrency baseamount feelistmap fee gt return feename feeamount grand total kbformatcurrency grandtotal rendered output html travel time total coming jsx strip nonexplicit whitespace nt edit nvm sorry guys empty string causing evaluate empty string suppose good warning kicked told something funky thanks slapping coerce bool works gets pretty nasty writing conditionals jsx way", "d": "6/2016"}, {"body": "mnpenner explicitly use exactly reason less error prone overall", "d": "6/2016"}, {"body": "think actually relax warning since nt spans certainly empty string", "d": "6/2016"}, {"body": "acceptable test functional component follow display highlights gt var props highlights label highlightitem picto label highlightitem picto label highlightitem picto fact treat function testing think", "d": "6/2016"}, {"body": "lauterry acceptable project put think pretty decent way however good way render could use enzyme shallow rendering", "d": "6/2016"}, {"body": "ended issue trying create stateless component show form app contains fields user focuses field keyboard shown due need scroll view box hidden behind keyboard need find node handle field using passing field since functional components ca nt refs wo nt able use functional components case ended creating traditional components nt state", "d": "6/2016"}, {"body": "thoughts whether reasonable work around", "d": "6/2016"}, {"body": "bradenqualtrics sounds like bad idea going hit kinds edge cases going bite cases current designsupport custom elements specifically designed help handle described earlier thread", "d": "6/2016"}, {"body": "jimfb using underscores element names might break reacthtml", "d": "6/2016"}, {"body": "nt nan null new style added get warning anyone idea thx figurestylerenderimgfigure", "d": "6/2016"}, {"body": "webpansy issue false positive warning cases warning fire correctly check whether mutating declaring inside method like warning says mutate prop really returned hard say seen code might want ask stackoverflow example reproducing problem", "d": "6/2016"}, {"body": "experience doc confusing making sound like prop updated interactive nt update prop attribute toggled obviously setting makes controlled component least mention doc elude fact attribute needs bound attribute", "d": "6/2016"}, {"body": "late reply issue came high list google future searchers gajus said correct need add another alias react capital r exact error op warning reactreactjs another module equal name case ignored lead unexpected behavior compiling filesystem casesemantic rename module multiple modules expected use equal casing one module expected warning reactreactjs another module equal name case ignored lead unexpected behavior compiling filesystem casesemantic rename module multiple modules expected use equal casing one module expected see warnings react different casing following worked", "d": "6/2016"}, {"body": "work would require polyfill property syntheticmouseevent would execute every mouse event would performance impact could added method executed ondemand would nt match native mouseevent interface", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "reproduce issue following jsbin", "d": "6/2016"}, {"body": "thought attribute", "d": "6/2016"}, {"body": "reserved word js ts flow welcome use class components jsx compilers quote keys eg reacttools aware constraints tool choices also keys hard add typings using typescript flow", "d": "6/2016"}, {"body": "right several attributes html particularly input button elements", "d": "6/2016"}, {"body": "posted thoughts", "d": "6/2016"}, {"body": "facing similar issue componentproptypes filter proptypesshape options openings proptypesarrayof proptypesshape id proptypesnumber name proptypesstring selected openingids proptypesarrayof proptypesnumber candidateaddeddaterange proptypesstring clue might missing thanks advance edit helped", "d": "6/2016"}, {"body": "also reactjs wrapper keypressjs quote works lets say want fire function user press javascript var react require react var keypress require reactkeypress reactcreateclass sayhello alert hello looking solution without dependencies use conditions like also gives proper key number nt know exceptional cases suppose workaround implemented anyway", "d": "6/2016"}, {"body": "gaearon error message usually mean render component threw initial mount ok sad thing try replace component throws error render another component like error message component currentelement error frown anyway case global error handler set windowonerror windowonerror setting errorscreen current throw error render badcomponent throws error render caught windowonerror errorscreen set react still rethrows currentelement error got infinite error loop currentelement error thrown trying render badcomponent", "d": "6/2016"}, {"body": "artinphares react currently recover error inside even custom handler help library internal state becomes corrupted error render something else error boundaries fully supported track think best remove container dom element create new one render sure whether would work higher chance existing container messed", "d": "6/2016"}, {"body": "gaearon ok looks like highly known issue thanks", "d": "6/2016"}, {"body": "seeing similar issue using jest async done walked debug appeared issues trying create component somehow decided appeared trashing props switched direct mock test everything working fine shrugmoji happy look anyone blocked perhaps assumption nt", "d": "6/2016"}, {"body": "going", "d": "6/2016"}, {"body": "idea get work workaround please see", "d": "6/2016"}, {"body": "installing g fedora linux os use sudo yum install usrbing sudo dnf install gccc", "d": "6/2016"}, {"body": "kennethaa thanks solution box", "d": "6/2016"}, {"body": "back react europe intend get back issue completing internal facebook work help convert oldstyle components classes", "d": "6/2016"}, {"body": "welcome back gaearon react europe really awesome heads updated pr follow standard style discussed", "d": "6/2016"}, {"body": "pages documentation still need changed like help still needed", "d": "6/2016"}, {"body": "page gone redirects offsite nt issue maybe hit cached page building", "d": "6/2016"}, {"body": "giving look mostly commit pull request history seems last spring summer sejoker gave earnest shot however never merged ultimately closed lacking tests andor reproducibility however couple efforts contributed resolving even couple days sejoker gave contributing djrodgerspryor changed require timeouts side effect removing code path needed aforementioned timer one zpao concerns lack tests contributing fixes zjjw added additional timeout cleaning code reactcsstransitiongroupchild test coverage interests issue gardening humbly recommend issue closed reacteuropehackathon", "d": "6/2016"}, {"body": "vjeux care close one", "d": "6/2016"}, {"body": "looks lovely nicely swept timeouts thanks", "d": "6/2016"}, {"body": "gaearon spicyj one issue see checking node instance jsdom return instances elements nt support like svg would throw false positives test suites use", "d": "6/2016"}, {"body": "hm good point", "d": "6/2016"}, {"body": "indeed different setups modes emacs javascript reactjsx", "d": "6/2016"}, {"body": "simply raises valid point files containing nt valid javascript runtime files many platforms unless first transpiled possibly named rather js however debatable point platforms run syntax without needing transpilation infuture unless actually using files runtime people consider naming source files runtime javascript javascript literally current version javascript logic rename source files whether browsers support bearing whether file written javascript jsx nt valid javascript js extension indeed different setups modes emacs javascript reactjsx use extension react opinion opinions differ need bump thread arguments use like", "d": "6/2016"}, {"body": "literally current version javascript fact current version edition", "d": "6/2016"}, {"body": "recently discovered fairly low tech way nt decided yet whether actually like seem work nicely would pr allows arrays createfragment get traction", "d": "6/2016"}, {"body": "live components one module works pretty well", "d": "6/2016"}, {"body": "rmoskal said able put something together also using different setup find rails well allow use import statements use npm packages rails browserify react created file put different components want use templates looks like class productcolor extends reactcomponent productcolorproptypes option reactproptypesobject moduleexports productcolor productcolor important part use make mapping happen parent module import templates componentsselectrselectroptiontemplates var optioncomponent templates thispropsoptioncomponent pass productcolor way get class name props previously set helper obviously work however get string class name best solution found far also reason throws error ca nt use", "d": "6/2016"}, {"body": "please", "d": "6/2016"}, {"body": "since used anymore assume feature work older versions well right", "d": "6/2016"}, {"body": "thinkxl unrelated still something makes sense", "d": "6/2016"}, {"body": "syranide right making reference jimfb suggestion discussed comment complementary improvement turn mutation observer dev warn someone react modifies dom andor dom nodes appear without datareactid trying figure without think nt elaborate question correctly sorry thinking use api would trigger callback goal make pr ideas without", "d": "6/2016"}, {"body": "thinkxl still exists internally via mechanisms ca nt explicitly check attribute", "d": "6/2016"}, {"body": "thinking use mutationobserver api reactdomrender would trigger callback thinkxl mutation observer would trigger devtool devtool would track sanctioned dom operation currently progress ignore dom mutations occur react performing dom operation", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "available reactnative react", "d": "6/2016"}, {"body": "dhruvasagar use replace input components method handle get rendered checked get destroyed another checked want something like iterate submit form way basic component important function react ca nt spent lots time got disappointed", "d": "6/2016"}, {"body": "sulinixl nt try handle dynamic inputs case overall disappointed forms one hard parts react right tried build abstraction top like described try abstract underlying implementation details using bootstrap framework worked specific scenario always felt hacky hence open source improve upon", "d": "6/2016"}, {"body": "case bit different download svg content images inline way js render const content thisprops content return null dead simple works chrome recent browsers nt tried hack using key asaayers trick without success", "d": "6/2016"}, {"body": "good news everyone issue fixed days ago", "d": "6/2016"}, {"body": "chime super interested see outcome unfortunately though codebase work still ancient react process upgrading avoided jsx past made upgrade extra difficult purposes decided fork implement something related top realize probably port forward catch whatever react version change ships suspect anyhow started fork react purposes find interested basically main change build debug version keeps around error messages invariants keeps key deprecation warnings legacy factory deprecation transferpropsto deprecation since upgrade warnings turn breakages code appears important keeping around displaynames debugging including debug build prop type checking object freezing prod former well known slow latter comments effect avoiding various internal react errors warnings suspect developing react hopefully provides interesting data point guys work working hard catch latest react would definitely prefer maintain fork", "d": "6/2016"}, {"body": "thanks production error code system implemented shipped release totally understand upgrading could take time might possible move error system current version fork newly added parts mostly buildtime", "d": "6/2016"}, {"body": "look think fork probably mostly working already need testing keep option mind", "d": "6/2016"}, {"body": "well done eagerly awaiting diagnose squash heisenbugs", "d": "6/2016"}, {"body": "getting promises state based changes would big plus shallow testing component lifecycles", "d": "6/2016"}, {"body": "would syntactically sound using bluebird library", "d": "6/2016"}, {"body": "since possibility callback working promise antipattern remove callback", "d": "6/2016"}, {"body": "getting uncaught typeerror read property createelement undefined solutions", "d": "6/2016"}, {"body": "ratneshnavlakhe please ask stackoverflow hard answer without seeing complete code", "d": "6/2016"}, {"body": "gaearon code import react component react import render reactdom class app extends component render return hello react webpack render documentgetelementbyid app", "d": "6/2016"}, {"body": "incorrect named export named confusing react commonjs module since using imports babel tries map semantics match exactly actually grabs might use instead less confusing", "d": "6/2016"}, {"body": "woah thank gaearon nice clarification", "d": "6/2016"}, {"body": "maybe changed recently tried worked perfectly fine tabindex either set case", "d": "6/2016"}, {"body": "version react using fixed react", "d": "6/2016"}, {"body": "problem reactredux returns reactelement signal update render method actually shortcut hit contexts well ca nt controlled component wholly sure done way though perhaps question reactredux guys", "d": "6/2016"}, {"body": "working redux see continued discussion prs point actually resolve make easy libraries use harder originally thought", "d": "6/2016"}, {"body": "note solution currently used reactrouter works frustrating hack requires mutate context inplace require users maintain referential identity context objects neither great real problem wormholing context around component hierarchy breaks one nicest bits react component model data flow anything middle authority adjust context goes passing context band components would need use different mechanism mapping context children admittedly common use case describes context usage anyway", "d": "6/2016"}, {"body": "two approaches least somewhat generic though best think", "d": "6/2016"}, {"body": "yes inded p noting still suboptimal good replacement fixing way context works general", "d": "6/2016"}, {"body": "jquense could nt component middle declare listen context object provide modified copy context descendents", "d": "6/2016"}, {"body": "darylcantrell components need optin piece context request way declare pass whole context wholesale component", "d": "6/2016"}, {"body": "n case point adjusting bits context possible great feature context broken workarounds issue", "d": "6/2016"}, {"body": "sure talking adjusting parts context goes scenario nt need get whole context whichever part planning override", "d": "6/2016"}, {"body": "darylcantrell whoops misread intent", "d": "6/2016"}, {"body": "wrote elegant global workaround monkeypatching check gist looking solution issue makes release edit also supporting hot reload", "d": "6/2016"}, {"body": "updates", "d": "6/2016"}, {"body": "sorry react dom primarily designed html", "d": "6/2016"}, {"body": "apologies missed somewhere styling svg inline svg", "d": "6/2016"}, {"body": "needs use probably always needed putting inline", "d": "6/2016"}, {"body": "zpao static though right like ca nt eval props eg", "d": "6/2016"}, {"body": "kevinsuttle pass string generate string template literals good ol concatenation work fine", "d": "6/2016"}, {"body": "jsfiddle working example", "d": "6/2016"}, {"body": "makes pretty hard react play nice semantic ui frustratingly uses nearly everywhere", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "definitely good idea add property nt solved currently use jsx shoudnotbechecked thisrefscheckboxindeterminate false thisrefscheckboxchecked false else shoudbechecked thisrefscheckboxindeterminate false thisrefscheckboxchecked true else thisrefscheckboxindeterminate true render return", "d": "6/2016"}, {"body": "cemasp recommendation mean time create checkboxinput component internally way want react ends implementing implementation end identical anyway part native input wrapper", "d": "6/2016"}, {"body": "hey guys something currently worked think issue growing importance recently made library sort extends react redux also specify container data requirements data requirements bundled runtime queried graphql single request think future data specifications promotes composability isolation also ensures performant fetching concepts seen relay problem server side rendering since ca nt statically analyze data requirements end currently need render one time get bundle query db hidrate redux store render get final string issue similar olalonde one would fantastic able trigger actions updates react elements tree get dom string result demand picture js const virtualtree reactdomrendervirtual rootele get bundled query redux store example const bundle storegetstate bundle fetch data according bundle const data fetchdatasomehow bundle hydrate store storedispatch type hydrate data components update marked virtual tree dirty virtualtreeupdate would update components needed update const domstring virtualtreerendertostring final result option simply let update like would client side hooks present working didmount instead mutating dom would mutate virtual dom representation render string demand well guys think something consider seeing completely wrong", "d": "6/2016"}, {"body": "hi subscribed issue year back thought needed able specify data loaded within components components primary unit modularity issue really important thought sure would get resolved next version react since developed much deeper respect ideals behind resthateos large scale simplicity emerges system applications browsers crawlers application servers proxies cdns etc guiding principles followed relates issue url one true representation application state determine information required service request view layer react determining constructed based data view function data data function url hesitated throw past keep hearing nice idea real world complex work occasionally hear examples make take step back wonder pedantic idealistic mull examples inevitably find reasonable way represent application state url state independently varying parameters represent separate query parameters state part big fit url name store immutable datastore refer name id state changing fast ca nt store forever congrats legit big data spring storage start thinking clever stuff shy away mutate data update queries accept forevercache things later views different different users served url eg personalized home page navigate upon user identification url includes user id building older application option break old url structure painful boat redirect old url structure well architected url structure translating session data whatever url path segments parameters little control architecture application case react designed nt want react getting mangled make fit something like mutually compatible wordpress magnolia umbraco architecture get work would otherwise ability one user bring another user place application sharing url ability navigate application using tools browser provides standard client element ability offer complex pagination way simple client follow link response fb graph api great example detailed graph user workflows google analytics option constructing said graph nothing request logs escape starroute chaos instead matching requests get use server application framework intended return correct http status codes requests instead star route enticing leads madness react star tool nt controlling operation get data know components render route data access function fetch data relevant request parameters repeat parsed whole url complete context object transform context simple response object possible going respond api request serving api request done dry pass minimally complex possibly large object top level component react component composition way render string respond let cdn know cache forever unless sacrificed option cdn identify urls states url sure cdns nt infinite storage prioritize nt mean troll feel strongly core theme requests issue misguided react implement anything accommodate least reasons seen past year aspects good application architecture obvious web especially hard get right learn respect wisdom ancestors built internet web instead sacrificing elegance sake comfort makes react great view best view view \u03bb", "d": "6/2016"}, {"body": "disagree trying make react view layer routing important definitely enough specify data requirements specifying data requirements componentcontainer level making react view layer provides much better isolation workflow app simplification work need big application imagine app routes want add user profile component one following route alternative data requirements specified go routes add data dependency specify data needs container component add component want plug play query components data dependencies optimized relay good example talks explains much better much respect old wisdom nt limit evolution creating new standards way see least proposal basically change react virtual way altering domcomponents tree basically react run server side think pretty simple block actions alter dom still caching cdn place growing dynamics sites applications nowadays static caching tend reduce another topic", "d": "6/2016"}, {"body": "view specifies dependencies data need way optimizing dependency graph transforming minimal number queries prepare data constructing view although could split two phases understand plan thread take collection moderately complex components would query example perhaps instances component nt pattern could collapsed single query suppose graphql tackling still need implement integrate gql servers datastores sorting parts optimized gql query handled datastore sounds pretty complex proposition complexity example large number routes needing data actually would see reason exclude identifier data source url would mount small data fetching middleware module fairly close root stack would attach user object context pass context along middleware way end route handler root react component might care particular part context would pass next level children might descendants care introduce unreasonably complex deep wiring something like flux store might called big topic separation isolation feel pain proposal two different systems transforming data form optimized storage retrieval form optimized abstract simplicity view transforming form suits passed component hierarchy keeping two systems loosely coupled adding feature requires additions systems would call hard also path least resistance mental switch programming data store programming dynamic ui real used separate backend frontend developers http served interface two paradigms trying internalize one application trying delegate convinced increasing complexity activity within applications precludes client state represented small object references much larger data set server consider massive multiplayer first person shooter lot happening fast want transmit minimum amount information necessary client game hostserver small could get map input states timestamp uncertainty range bit field keyboard dozen bytes mouse joystick vr headset orientation client would predicting optimistically rendering physicing server would deriving huge amount information client small state state history returning fairly large amount data correct update clients params nearby agents asset pushes stream client requests might still fit comfortably requests might boon application architecture wo nt ask educate relay graphql superficially explored apis reached stable version locked still convinced using components select graphql schemas specify data dependencies determines actual data needs fetched good plan maybe time took another look hard questions architecture go way topic beers ps nt mean suggest http would good communication protocol mmofps", "d": "6/2016"}, {"body": "completely understand hesitation skepticism never thought starting work graphql later introduction relay concepts really recommend give look implementing graphql new existing server difficult might picture even multiple data stores wanting go topic well important discussion believe level abstraction way go using relax cms workflow isolation bliss work data requested less ui needs made automatically collecting data component needs merging done relate interested checking also include component anywhere application sure work independent block application thing still figure server side rendering going react source code believe might already solution described could work solution someone react team agrees", "d": "6/2016"}, {"body": "also dare argue original post contains statement view function data data function url would nt call exactly revealing applies pretty much website web application completely random question whether example state open dialog windows also part url math school know function composed actual statement might see screen function url nothing really revealing formalization obvious main question construct function approach suggest feels similar good old serverside mvc applications eg spring mvc good example current url activates corresponding controller method business logic fetches required data passes view problem following look generated web page kind hierarchy components necessarily react components create generate hierarchy url twice first need decode hierarchy controller know data need fetch second need decode hierarchy view well render actual view nt think dry approach familiar spring mvc use often another mvc framework php framework called nette addresses problem similar way would like use react framework also supports components idea component eg form define factory code responsible instantiating component especially loading necessary data component possible included anywhere view write html code create view hierarchy simply insert component underlying factory takes care necessary initialization component behaves like small independent controller life cycle handles dependencies even parametrized view increases reusability using approach react clientside well seems viable react components beginning denoted controllerviews use controller components responsible data fetching view components care visuals whole page composed components types nicely decoupled easily reusable application isomorphic universal call today nt need stack using capable believe apart relay still experimental stack walked longest path matter fyi looks like core tool reactrouter allows hook asynchronous data request url works clientside serverside formally speaking approach suffers problem mentioned earlier controller components possible matters design allows define datahierarchy viewcomponent hierarchy place actual route definitions also hierarchical feels reactlike whole state data handled redux besides advantages keeps whole state single object means simple natural create object server send client also thanks approach necessary pass data top level using props would absolutely crazy considering current size application another piece puzzle reselect allows us keep state small possible also greatly increases decoupling factor still perfect significant progress available first came across thread sample implementation found", "d": "6/2016"}, {"body": "still issue seems anyone actively working updating", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "feel like working broke recently", "d": "6/2016"}, {"body": "", "d": "6/2016"}, {"body": "issue case value comes autopopulted username amp email fields", "d": "6/2016"}, {"body": "adding input attribute perfect helps warnings ocd", "d": "6/2016"}, {"body": "job note syranide note longer controlled", "d": "6/2016"}, {"body": "thanks miclaus worked", "d": "6/2016"}, {"body": "miclaus longer controlled", "d": "6/2016"}, {"body": "syranide want controlled surpass warning go setting normally make use component property idea documented somewhere hope helps", "d": "6/2016"}, {"body": "spicyj link another copy code", "d": "6/2016"}, {"body": "edited comment work", "d": "6/2016"}, {"body": "thanks", "d": "6/2016"}, {"body": "discovered add global event handler component stop inside react event handler global native event handler runs react one set stops successfully think bad behaviour react setting synthentic events window instead specific dom elements", "d": "6/2016"}, {"body": "solution came works full page powered react use provider component top rendertree passing subscription mechanism style order make size document times use component consumes subscribes events solution declarative use opensourced", "d": "6/2016"}, {"body": "bloodyowl wo nt work global events like", "d": "6/2016"}, {"body": "yes course ca nt put events listened react phase solves issue usecases like listening click outside amp mousemoveup though", "d": "6/2016"}, {"body": "want like flumpt", "d": "6/2016"}]