[{"title": "properly contributing someone elses respository", "body": "hello using github first time school project impression figured realized nt case problem partner created group repository made fork repository started adding commits pushed github getting repository branch commits ahead mypartnersname master read tutorial thought said fork repository maybe tutorial something else want use repository check repository sure enough missing commits made appears fork pretty simple guess hope simple fix someone help", "num": "3971", "d": "2/2016"}, {"title": "brackets support backbonecollection", "body": "backbonecollection actually subset array however currently nt allow access value using brackets instead need use", "num": "3970", "d": "2/2016"}, {"title": "docs collectionadd model", "body": "project work recently involved following workflow hit web endpoint returns list stanzas comma separated string order displayed ui ex endpointstanzas gt split list hit endpoints stanzas get detail display ex endpointstanzasstanza gt data etc since getting asynchronously sent also wanted add collection order list step ordered ran map comma split list string stored index point insert ex collectionadd fetchedmodel storedindex however turns collection nt quite behave like javascript array insert nonexisting index since collection nt dynamically resize javascript thought backbone would intuitively lost lot time debugging error result suggestion would following add docs collectionadd backbonejsorg providing index option larger size collection dynamically resize collection happy implement branch create pull request actually provide functionality desired", "num": "3969", "d": "2/2016"}, {"title": "collections modelid method passed model second argument", "body": "right passed plainobject representation model attributes makes difficult application developers create ndegree polymorphic collection subclasses contrived example javascript collection mixed entity types maintains sort order based joindate property var entities collectionextend modelid attrs id attribute use determined runtime comparator joindate two entity types different idattributes assume may n different entity types different idattributes determined database backing example application var company modelextend idattribute companyid var customer modelextend idattribute customerid proceeding add remove customers companies etc entities collection mess cache entities collection aware different possibilities runtime method written satisfy needs app modelid callback took form second argument model question backbone retain backwards compatibility allow application developers something like id entitiesmodelid function modelid attrs model return attrs modelidattribute thismodelprototypeidattribute id may even make sense make function default implementation support polymorphic collections box still maintains backwards compatibility implementation already polymorphic collections still function normally models idattribute set added collection collection model constructor already polymorphic type nonstandard idattributes already modelid method overwritten happy throw pr think good idea", "num": "3965", "d": "2/2016"}, {"title": "collection set add events sends optionsindex correspond wrong index", "body": "pointed issue deprecated events however certain cases events generated call collection set passes stale assigned generation events collection removemodels since options argument event handlers well documented able rely anything passed including optionsindex intent would sent specified however unset unspecified set unset events get stale removemodels since object reused across events add remove needs cleanup events triggered bug preconditions optionsremove true optionsat null passed attrs elements add collection elements remove bug manifestation removemodels set optionsindex sending triggers optionsat null set method clear optionsindex set removemodels triggering add events case last optionsindex remove events reused add events var array map function val return property val", "num": "3961", "d": "2/2016"}, {"title": "backbonecollection set add events may send wrong optionsindex", "body": "bug preconditions optionsremove true optionsat null passed attrs elements add collection elements remove bug manifestation removemodels set optionsindex sending triggers optionsat null set method clear optionsindex set removemodels triggering add events case last optionsindex remove events reused add events var array map function val return property val", "num": "3960", "d": "2/2016"}, {"title": "xiaomi mi lolipop mobile supported show custom emoji keybaord", "body": "customd new customdialog softkeyboardthis androidrstylethemenotitlebar customdsetcontentview rlayoutyourcustomlayout customdgetwindow setflags windowmanagerlayoutparamsflagnottouchmodal windowmanagerlayoutparamsflagnottouchmodal customdgetwindow setflags windowmanagerlayoutparamsflagwatchoutsidetouch windowmanagerlayoutparamsflagwatchoutsidetouch customdgetwindow setflags windowmanagerlayoutparamsflagaltfocusableim windowmanagerlayoutparamsflagaltfocusableim customdgetwindow clearflags windowmanagerlayoutparamsflagdimbehind customdgetwindow settype windowmanagerlayoutparamstypesystemalert customdgetwindow setsoftinputmode windowmanagerlayoutparamssoftinputstatevisible windowmanagerlayoutparams lp customdgetwindow getattributes lpwidth windowmanagerlayoutparamsmatchparent lpgravity gravitybottom gravityleft lpdimamount", "num": "3959", "d": "2/2016"}, {"title": "collection forof support", "body": "would nice could write maybe would take adding browsers without symbols generators probably nt forof anyway transpile think", "num": "3954", "d": "2/2016"}, {"title": "optionsindex add event sometimes exceeds collection length", "body": "adding models collection index greater collection length models added end test case shows index provided corresponding events reflects requested indices actual insertion indices sure qualifies bug tracking exact changes collection would great provided event would reliably reflect actual insertion index background need back native collectionviews mobile framework backbone collections js describe collection function var collection events beforeeach function events collection new backbonecollection collectionadd name name b collectionon add function model collection options eventspush add modelget name optionsindex set provides correct indices add events function b collectionadd name c name b c expect names collection tobe b c function names collection return collectiontoarray map function model return modelget name join", "num": "3951", "d": "2/2016"}, {"title": "wrong optionsindex add event", "body": "changing collection using events contain wrong indices added models problem tracking changes collection add test demonstrate problem js describe collection function var collection events beforeeach function events collection new backbonecollection collectionadd name name b collectionon add function model collection options eventspush add modelget name optionsindex collectionon remove function model collection options eventspush remove modelget name optionsindex set provides correct indices add events function var collectionat b collectionset name c name c expect names collection tobe c function names collection return collectiontoarray map function model return modelget name join", "num": "3950", "d": "2/2016"}, {"body": "kedarmanure please use stackoverflow questions ps solution read try fiddle fires event sec singleton extended backboneevents thanks", "d": "2/2016"}, {"body": "someone close", "d": "2/2016"}, {"body": "yep stackoverflow gitter channel better places help debug app thanks looks like listener set route triggered one solution move call setting", "d": "2/2016"}, {"body": "sorry posting extensive research googleso right backbonehistorystart called setting fixed issue", "d": "2/2016"}, {"body": "repository backbone js lib question scope issue tracker anyway find good resources github git", "d": "2/2016"}, {"body": "aw jeez really sorry thanks redirecting", "d": "2/2016"}, {"body": "wait go found backbone issue tracker website pointed", "d": "2/2016"}, {"body": "hmm really sure exactly think combination googling github help well paying much attention exactly got", "d": "2/2016"}, {"body": "backtrack history would nt believe often happens love figure happens", "d": "2/2016"}, {"body": "got googled github questions second result without paying much attention seemed like found looking", "d": "2/2016"}, {"body": "jashkenas let know opinion ok send pr", "d": "2/2016"}, {"body": "sure would good idea first would approach defining property whenever user addsremoves item collection point easily mixed something like core inclusion js var indexedcollection backbonecollectionextend constructor function backbonecollectionapply arguments", "d": "2/2016"}, {"body": "pretty complicated nt like subclassing fiddle works pretty well difference currently see settings property nt update internal object array nt remove items inside another technic relies js var collection extend backbonecollectionprototype properly arrayprototype objectsetprototypeof collection bacbonecollectionprototype", "d": "2/2016"}, {"body": "rivetsjs library nt support iteration complex collections arrays bad thing using slower loop items though wo nt big deal implement actually subset", "d": "2/2016"}, {"body": "subclassing issues weird side effects different javascript environments nt see happening backbone core also lead quite confusing scenarios user tried would way backbone intercept without defined properties mixed bag issues stalniy would suggest make rivets use iteration use collection mixin defines properties posted something like might cool backbone plugin", "d": "2/2016"}, {"body": "make sense nt thought setting items reading", "d": "2/2016"}, {"body": "ashivkum pretty simple use want make clear make pr close please thanks", "d": "2/2016"}, {"body": "please keep mind tried without much success", "d": "2/2016"}, {"body": "pr", "d": "2/2016"}, {"body": "want make pull request adding unit test merge investigate", "d": "2/2016"}, {"body": "look change log improve performance add optionsindex longer set event callback collectionindexof model used retrieve index model necessary nt set unless passed index", "d": "2/2016"}, {"body": "nt set optionsindex unless passed index bug add event backbone actually sending stale optionsindex set removemodels end removemodels needs documentation explicit sent options parameter callback able rely case stale data leftover remove event", "d": "2/2016"}, {"body": "sure let fix", "d": "2/2016"}, {"body": "pull request related open issue", "d": "2/2016"}, {"body": "unfortunately unsupported browsers throw syntaxerror point requiring backbone transpiled would make great plugin projects", "d": "2/2016"}, {"body": "support doable without throwing syntaxerror example lodash works iterator iterable wo throwing need detect func assigned symbol property returns lastly add function wrapper returns following iterator protocol iterator support makes happy pretty fun things work newer apis adding method little function", "d": "2/2016"}, {"body": "fix move mathmin logic figure guard line jridgewell thoughts future open runnable jsfiddle codepen assist debugging minor code golf function could written", "d": "2/2016"}, {"body": "fix move mathmin logic figure guard line jridgewell thoughts yup", "d": "2/2016"}, {"body": "take look solve", "d": "2/2016"}, {"body": "reopening due", "d": "2/2016"}, {"body": "whooops", "d": "2/2016"}, {"body": "set index prop passed otherwise undefined hand always sets index definitely inconsistency alternative costly add", "d": "2/2016"}, {"body": "different etc recall correctly stopped passing along avoid shadowing model url collection nt remember stopped passing", "d": "2/2016"}, {"body": "also future please open one issue pull request per change need two places", "d": "2/2016"}, {"body": "hi different asking ability pass collection init seems added somewhere deprecated fix bug tickets mentioned convo resulted allowing pased options collection model constructors respectively allowing collection somewhat indirectly solves bug argument allowing merely consistent change collection far see essentially proposing absence specific instruction model class collection creates model instance set url rather urlroot nt care done implement originally made urlroot option constructor actually thats wrong model specifies urlroot take precedence pushed squashed amendment pr minor thing easy enough hack around like feel correct inutitive behavior also future please open one issue pull request per change need two places problem try think pr opening issue future simple", "d": "2/2016"}, {"body": "actually board passing model constructor since may mean ajax url model url nt confusion", "d": "2/2016"}, {"body": "consistency argument pretty compelling urlroot work url", "d": "2/2016"}, {"body": "ca nt differentiate jquery model maybe open object passed options model", "d": "2/2016"}, {"body": "right point going one one broken nt seems kind gross though use case setting either method", "d": "2/2016"}, {"body": "edit fatfingered writing real comment", "d": "2/2016"}, {"body": "samatgithub brought use case model created collection tied collection nt know use case passing option modelcollection", "d": "2/2016"}, {"body": "model created collection tied collection urlroot already absolutely set collection could nt logic live collection passed option something like", "d": "2/2016"}, {"body": "currently item model instance removed collection longer talk remote urlroot edge case would make sense model keeps collection passed option nt code would perfect spot", "d": "2/2016"}, {"body": "wait use case creating model collection removing model collection surprised model nt keep collection url nt like think behavior currently right one model collection nt url urlroot set check collection nt collection responsible setting model tied collection longer", "d": "2/2016"}, {"body": "wait use case creating model collection removing model collection surprised model nt keep collection url well yes unexpected behavior motivated pr note however user removing model backbone remove model collections certain situations leaving hanging around without way talk remote unless specifically aware behaviour set things accordingly think behavior currently right one model collection nt url urlroot set check collection agree still case nt collection responsible setting model tied collection longer still tied backbonecollection still tied item remote collection model proxy backbonecollection factory backbonemodels proxies nt work standalone maybe subtle difference view responsibilities backbonemodel backbonecollection semantics remove opposed destroying model nt think backbonecollection reflection entire remote collection nt think view removing model collection synonymous deleting remote collection hey model fell view pr driven newb scratching head model part ui referencing got removed collection sync longer worked thought wrong end day understand behavior easy enough hack around took think though way models collection urls membership related bit think", "d": "2/2016"}, {"body": "agree surprise feel like many edge cases would backbone determine url urlroot nt set opposite behavior would surprising best bet probably set urlroot model initialize method know could potentially reference models outside collection right collection may reference models resource argue removed model collection usually reasoning behind sync removing model surprising still tie removed model collection longer member", "d": "2/2016"}, {"body": "thank feedback get path api already encoded navigate using path without extra encoding think found broken code called correctly called event listener compare cached decoded fragment decoded backbone result another fragment cached one including configured handler executed think backbone fixed eg calling thisdecodefragment thisgetfragment", "d": "2/2016"}, {"body": "want open pull proposed solution tests fail master happy take look", "d": "2/2016"}, {"body": "proposal including test", "d": "2/2016"}, {"body": "circumstances would id sounds like bug code better places fix code bugs backbone proper", "d": "2/2016"}, {"body": "categories coming external api one undefined like keep cause need get models collection category often", "d": "2/2016"}, {"body": "pr allow examples contrived favor adding tests back ensure backbone unopinionated reasonable ensures case tested", "d": "2/2016"}, {"body": "also similar case id object object", "d": "2/2016"}, {"body": "update pr case given nature accepting wide range values think judicious measures nt think adam going agree though p", "d": "2/2016"}, {"body": "duskpoet really model ids supposed used best bet first case fix bug second", "d": "2/2016"}, {"body": "really wish see new class properties proposal sets prototype seems many involved proposal worried implications find incredibly inconsistent class methods get directly attached prototype jeffmo proposal puts constructor gone attaching properties directly prototype able migrate pretty much reactbackbone code classes", "d": "2/2016"}, {"body": "option wonder rational behind models exact behaviour present collection optional toplevel keys api highly possibility specially external api", "d": "2/2016"}, {"body": "given link posted find current master git ref link uptodate would code", "d": "2/2016"}, {"body": "worth putting documentation website nt see mentioned router anywhere happy write something", "d": "2/2016"}, {"body": "takes searching documented application served root url domain sure tell history root really option backbonehistorystart pushstate true root publicsearch really history option router one", "d": "2/2016"}, {"body": "ah thanks pointing", "d": "2/2016"}, {"body": "", "d": "2/2016"}]