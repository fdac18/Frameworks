[{"title": "changelog master since", "body": "see debugging discrepancies behavior latest release around gets called nt following along closely hoping see changelog know intentional changes made", "num": "2324", "d": "2/2013"}, {"title": "attribute id set json response always set collection models", "body": "using collection models json returns array models id attribute set listening reset event callback method addtasks logging collection watching result consolelog models collection id undefined tried customize idattribute model class idbis customized works weird ideas", "num": "2322", "d": "2/2013"}, {"title": "backbone nt work ascii chrome", "body": "", "num": "2321", "d": "2/2013"}, {"title": "possibility override attribute assignment model set", "body": "attribute assignment simple cases would convenient override assignment example called merge object structure like would coffeescript brief coffeescript class extends model attributes colla new collection id model class b extends model attribute colla collb new collection id colla colla model b suppose new data attributes instance collection changed somewhere want update state instances overwrite attribute instance intention update collection instead would possible assignment abstracted something like javascript unset delete current attr thisupdate attr val options update function attr val options thisattributes attr val would possible override think", "num": "2316", "d": "2/2013"}, {"title": "complex model fields returned reference", "body": "model contains complex data fields say nested simple objects object returned refer reference mess around values object inadvertently silently poisoning model data directly example javascript init model data object var model new backbonemodel simplevalue foo objectvalue subobject nestedvalue bar create tojson representation var modeljson modeltojson change values tojson object modeljsonsimplevalue baz modeljsonobjectvaluesubobjectnestedvalue baz consolelog modelget simplevalue returns foo expected consolelog modelget objectvalue subobjectnestedvalue returns baz lolwut seems like returning references complex objects model clones desired behaviour took ages track issue postprocessing calculations results sending back server expecting free repercussions", "num": "2315", "d": "2/2013"}, {"title": "hook provide names child items useful debugging", "body": "pardon going right new joining community projects posted question stack overflow changing name chrome uses label children dev tools default called child backbone result extend function received great responses even monkey patch allowing developer insert name using aname property wonder type functionality might candidate inclusion default referred post thanks input", "num": "2314", "d": "2/2013"}, {"title": "modelchange removed", "body": "modelchange removed building python based big data visualization library push models websockets python render graph models variety plots infrastructure interdependent computed properties facilitate interactions plots push models server instantiate set attributes silently call change allows us ensure interdependent models ready change events fire easily add change superclass something wrong though using approach modelchange break future", "num": "2313", "d": "2/2013"}, {"title": "consistent returns branches eventsapi method", "body": "hi right branches return branches explicit return statements couple branches return dealbreaker unless good reason adding explicit return statements make code readable less surprisingconfusion cheers behrang", "num": "2312", "d": "2/2013"}, {"title": "sign lt gt mean", "body": "example todos lt title gt mean equal lt title gt", "num": "2310", "d": "2/2013"}, {"title": "send data java actions backbone", "body": "example get data java action fetch method save model java action use save method", "num": "2309", "d": "2/2013"}, {"title": "collectiondestroy range", "body": "right deleting models within collection seems require separate requests would better method takes array models get ids put header send one request server mass delete", "num": "2306", "d": "2/2013"}, {"title": "maybe bug modelget modelset maybe intention", "body": "hey sure happening design bug want retrieve value model modify set back model example like problem since value returned reference directly affects content call wo nt trigger change event since assumes model already changed would assume get returns clone model value avoid unintended changes model desired behavior would suggest add little notice docs function", "num": "2305", "d": "2/2013"}, {"title": "bindall backbonecollection causes error uncaught typeerror read property idattribute undefined", "body": "worked previous versions nt know bug nt javascript var model backbonemodelextend var collection backbonecollectionextend model model var collection new collection var model new model collectionadd model", "num": "2303", "d": "2/2013"}, {"title": "error previous attributes sets model", "body": "related model code text hi value sets model modelset text good bye modelset code modelset text hello modelseet value ask modelpreviousattributes returns code text hello value must code text good bye value method set overriding previous attributes call without checking attribute changed previous attributes must contains previous value property independently property changes", "num": "2302", "d": "2/2013"}, {"title": "error modelchangedattibutes cleaning change set", "body": "sets model modelset code modelset text hello modelseet value ask modelchangedattributes returns value must code text hello value actual behavior method set clear changed property without check changed already something changed last changed", "num": "2301", "d": "2/2013"}, {"title": "bind underscorejs lib backbone setparsed like", "body": "happy pull request consensus explanation proposition using backbone therefore dependencies embedded external websites js widget code encapsulated noconflict used possible however using underscore noconflict prevents backbone finding without binding backbone object trivial help backbone find thoughts kind regards gareth", "num": "2300", "d": "2/2013"}, {"title": "allowing modelget return multiple attributes", "body": "written improved version return hash attributes passed array", "num": "2297", "d": "2/2013"}, {"title": "error collectionget model id", "body": "model id try find collection method get nt find model cid value text collectionget model returns undefined collection model cid value text method get line return thisbyid objid objcid obj thisidattr obj javascript takes objid like false take value objcid id nt collection application recurrent problem need patch models close issue talks problem years old maybe error happen", "num": "2296", "d": "2/2013"}, {"title": "modelsave wait true nt work jquery", "body": "work jquery works details modelsave foo bar wait true method sends data server saving including pair foo bar server saves responds nothing happens change event triggered model still foo something old attributes modelsave foo bar works expected triggering change event immediately happened migrating jquery jquery everything worked expected jquery migrate plugin made purposes use uncompressed development version diagnose compatiblity issues generate warnings console use identify fix problems used saved generated warning jqmigrate logging active jqmigrate jqueryparsejson requires valid json string consoletrace migratewarn jqueryparsejson ajaxconvert done jqueryajaxtransportsendcallback say jquery migrate plugin modelsave wait true works provides backwards compatibility point versions libraries used jquery underscore backbone", "num": "2295", "d": "2/2013"}, {"title": "null null context nt work expected fix proposed", "body": "default behavior removes context callback null way filter context proposed solution separate function works", "num": "2293", "d": "2/2013"}, {"title": "extend works", "body": "fail since returned function extend method bound prototype", "num": "2292", "d": "2/2013"}, {"title": "puzzle listento method", "body": "writing web app using backbonejs found strange problem listento method call listento method one one like problem happen buf wrote like problem happen matter model thismodels occur test event eventhandler called object last one thismodels thismodels demo code bellow javascript var modela backbonemodelextend initialize function var modelb backbonemodelextend initialize function thismodels startlisten function call console output model model bug call console output model model function var", "num": "2291", "d": "2/2013"}, {"title": "character encoding hash firefox", "body": "per diff files causes bug href encoded different charset common versus problem point fix used get hash ff encoded wrongly unescaping value gets encoded right value used due previously mentioned commits escaping \u00f1 letter corresponds different might firefox bug either way could nice support characters including ones spanish french italian languages debugging could nt find solution soon everyone finds one stable backwards compatible let pull request", "num": "2290", "d": "2/2013"}, {"title": "passed optionserror triggered model invalid", "body": "sure bug feature upgraded model ca nt saved optionserror event trigger ig save error function success function problem validate comment current version event nt triggered anymore code changed", "num": "2289", "d": "2/2013"}, {"title": "standard web application", "body": "give correct structure web application built hibernate mean say tmw say", "num": "2288", "d": "2/2013"}, {"title": "add event fired multiple times collection", "body": "listening collection add event callback triggered per every model added individually use case want add bunch models collection rerender view models added backbone simply proxies model events though add models collection add event called times thus whole view rendered times unexpected behaviour since collection method takes arrays models rather passing individual expect reflected event callback since listening model collection whole currently clean way adapting collection support behaviour something could added core know expected behaviour moment raising bug sure useful currently", "num": "2287", "d": "2/2013"}, {"title": "nt get return copy attributes data", "body": "", "num": "2277", "d": "2/2013"}, {"title": "using listento bindall causes memory leaks", "body": "hello today ran another gc related issue apparently backboneview get garbage collected something like method remove one lines view gets gced jsfiddle replicates problem", "num": "2276", "d": "2/2013"}, {"title": "detect full page load vs navigationroute event", "body": "wanted ability determine code run full page load vs route event use case load full page content would normally loaded fetching model updating view still want route fire prefetch content passing silent true historystart function wo nt work came solution modifies backbonehistory object navigate method set flag also added function return variable pull request wanted see alternative var firstload true backbonehistoryisfirstload function return firstload var orignavigate backbonehistorynavigate backbonehistorynavigate function fragment options firstload false orignavigatecall fragment options later use something like prouteron route showprojects function projects new projectslist el content backbonehistoryisfirstload attach reset event navigate call view rendered projectsattachreset get data anyway projectsfetch", "num": "2275", "d": "2/2013"}, {"title": "parameter invalid options using collectioncreate", "body": "model validation fails invalid event fired model using collectioncreate reference model yet create function model options modelsave null options return model currently success error parameters options object add invalid parameter handle case", "num": "2273", "d": "2/2013"}, {"title": "collectioncreate passing model attributes validate correctly", "body": "trying create model like storecreate values wait true success function model data options see collectioncreate model created attributes assigned however call save made like modelsave null options therefore validate called thisvalidate attrs options return false attrs null validate fn receiving something wrong", "num": "2272", "d": "2/2013"}, {"title": "collection get garbage collected", "body": "code require jquery backbone underscore function backbone var mainview subview collection model main add remove subview removed memory collection models stay remove initialize collection gets garbage collected", "num": "2269", "d": "2/2013"}, {"title": "collectionupdate leads large number events", "body": "thing var collection new backbonecollection collectionon add function operate doms collectionon remove function operate doms collectionupdate function trigger large number events lead performance problem way solve", "num": "2268", "d": "2/2013"}, {"title": "added array add event callback collection", "body": "adding multiple items collection would helpful array models added callback maybe options following might work javascript somerandomcollectionon add callback function callback model collect options last model added something model last optionsadded dosomething", "num": "2265", "d": "2/2013"}, {"title": "modelclone overwrites null attributes default attribute value exists", "body": "following seems like unexpected behavior causing issues us", "num": "2263", "d": "2/2013"}, {"title": "question rest server curl backbnejs", "body": "currently developing application receives data via curl call however url change return url used data request remote server example receive data problem stuck trying get backbone routing work routes routes getdata init initdata start start controllermethod rest controller class data id get id data src get src url account started application data get id sharedid validation remote server data url url used data request created isset request value datas request value problem get either hash requests absolute url request work ideas missing please let know questions", "num": "2260", "d": "2/2013"}, {"title": "collection parse supported initializing collection", "body": "appears parsing behavior inconsistent initializing models vs collections pass parse true initializing collection would expect collections parse method called implemented similar way called resetting collection would expect models initializer parse method called misunderstanding use case", "num": "2259", "d": "2/2013"}, {"title": "optionsparse missing documentation", "body": "mentioned especially section model constructor initialize simplifies things much dealing deeply nested models found annotated source code like much later several discussions missing official documentation", "num": "2258", "d": "2/2013"}, {"title": "breaking codebase smaller modules", "body": "hello often need use events models collections projects without using views router history sync plans breaking backbone codebase kind modules developers pick parts use", "num": "2257", "d": "2/2013"}, {"title": "option parsing data initializing model", "body": "option parse data parse true initializing collection similar option initializing model application support creating either simple model collection subsequently fetching data server creating either model collection inline providing json object initialize method cases json requires massaging parsing works expect first case called fetch cleanup response however second case behavior feels inconsistent initializing collection specify parse true initializing individual model parse true option would make sense add parse true option initializing model", "num": "2256", "d": "2/2013"}, {"title": "extend routerroutes rather overwriting", "body": "let say extend class define generic routes always want create instance class pass pagespecific routes constructor problem constructor completely overwrites default property new passed constructor think two lists routes merged instead would require changing following line code constructor instead think", "num": "2255", "d": "2/2013"}, {"title": "stoplistening null name leaks event listeners", "body": "please see comment repeated bug report cause leaked event listeners example causes still listening var person backbonemodelextend new person new person melistento change function consolelog changed melistento sleep function consolelog wake consolelog listening melisteners expect nonempty hash correct youset name bob expect changed correct youtrigger sleep expect wake correct mestoplistening null sleep youtrigger sleep expect silence correct consolewarn melisteners expect nonempty hash still listening change incorrect notice empty hash youset name charly expect changed correct mestoplistening consolewarn need absolute silence melisteners youset name gloria expect silence incorrect", "num": "2253", "d": "2/2013"}, {"title": "modelsave options assume validate false", "body": "noticed modelsave fowards argument modelvalidate options object attrs optionswait call modelset would caused modelvalidate called twice", "num": "2252", "d": "2/2013"}, {"title": "check alternative english spelling initialise", "body": "would believe trouble remembering spell initialise us way initialize p realise us english basically standard language computer science asking everyone start spelling colour u etc still thought ask question least see opinions", "num": "2250", "d": "2/2013"}, {"title": "new model created unnecessarily merging attrs existing model", "body": "seems called partial attributes corresponding existing model collection even though existing model needs updated new model constructed example situation covered test right thinking really called new model going added collection seems strange new model initialized cid counter incremented new model needed", "num": "2249", "d": "2/2013"}, {"title": "modelsave status code error", "body": "hi api returns status code creating new user still needs information usable eg email verification save model backbone comes error handler rather success nt level status codes come success thanks input", "num": "2248", "d": "2/2013"}, {"title": "make ecurrenttarget default", "body": "hi guys wondering whether possible events include default within handler attached event would save instead define every time pretty standard definition essentially becomes events click mydiv clickhandler clickhandler function e elefind val etc", "num": "2246", "d": "2/2013"}, {"title": "add link japanese google group indexhtml", "body": "created japanese backbonejs google group though official group write document", "num": "2244", "d": "2/2013"}, {"title": "route backslashes working", "body": "router created pattern contains backslashes something unusual happening eg open page router append home eg localhost home got alert home append eg localhost url changed alert shown index enter localhost page reloaded alert shown open page router enter localhost right route matched alert shown", "num": "2243", "d": "2/2013"}, {"title": "comparator respected safari", "body": "open chromefirefox safari sort collection safari sorts order models added", "num": "2242", "d": "2/2013"}, {"title": "modelsave null success callbackfunction working properly calling error instead", "body": "hello looking existing issues ca nt find anything reported using jquery backbone master within model calling debugged see success function getting set properly also see backend responding correctly returns rails see error function status could wrong thanks", "num": "2241", "d": "2/2013"}, {"title": "collections maintain order model changes", "body": "let say collection sorted attribute one models collection changes attribute suddenly collection longer order would happy submit pull request change community wants right something like following first assumes new property set collections called determine comparator string changed property equal comparator comparator string property nt match sense sorting test fails sort anyway comparator function alternate way express would following", "num": "2237", "d": "2/2013"}, {"title": "allow add collection models custom constructor", "body": "using custom model constructors application base classes handles localisation validation extension example addy osamani book view class problems starts adding instance model collection preparemodel method reinstantiate model already instantiated", "num": "2234", "d": "2/2013"}, {"title": "add listen hash analogous events", "body": "first time posting issue let say great job backbonejs wonderful stuff everyone think something like following declarative binding backbone events analogous dom events hash javascript listen thison event handler event handler thislistento model event handler event model handler thislistento property event handler event property handler could submit pr jashkenas et like idea", "num": "2233", "d": "2/2013"}, {"title": "different meanings model property view collection", "body": "specifies model instance view connected hand specifies model class think instead", "num": "2230", "d": "2/2013"}, {"body": "agree need get edge docs date believe big one would nt much effect unless custom sync also removing silent merged edge docs know caseywebdev also internal refactoring differences seeing", "d": "2/2013"}, {"body": "mornin benoitnadaud ids stored field called idbis definitely use would mind providing jsfiddlejsbin illustrating problem afraid ca nt quite see problem based upon information provided", "d": "2/2013"}, {"body": "problem id attribute json nt use idattribute backbone model class fetching collection ids undefined tried add idbis attribute json use idattribute backbone model class works think bug populating id attribute nt use idattribute option", "d": "2/2013"}, {"body": "set default impossible doubt case post sample code json take look see", "d": "2/2013"}, {"body": "backbone", "d": "2/2013"}, {"body": "", "d": "2/2013"}, {"body": "routesroutenavigate search thatget q trigger false thatget q \u0442\u0435\u0441\u0442 trigger false ignore encodeuricomponent thatget q trigger false work", "d": "2/2013"}, {"body": "hi jedrichards thanks issue fact desired behavior one hottest code paths backbone deep clone attributes object significant performance difference issues around deepcloning brought several times likely something change find easier work deeply cloned attributes application feel free extend model prototype although might worth putting note", "d": "2/2013"}, {"body": "nt issue around behaviour relates behaviour moment change primitivesimple value result original model remains unchanged great expected change field resides structure nested primitives end silently poisoning model seems quite broken especially different behaviour two scenarios appreciate nt want add deep cloning expense sure reluctant add simple cloning json compatible primitives people used json operations producing safe copies constructs simple nested primitives behaviour breaks contract moment", "d": "2/2013"}, {"body": "issue really comes fact arrays objects passed reference javascript issue people often run object array exists attribute value modifying value setting back model trigger change since modifying reference attribute model would nt say broken javascript works prefer different approach best override backbone default mentioned edit think people used operations producing safe copies sure say ensures value formatted handled case object array would nt ensuring safe copy", "d": "2/2013"}, {"body": "think implies converting model something else jsoncompatible object ready transport think reasonable expect working converted object nt repercussions fact repercussions objects primitive values makes even troubling anyway worth", "d": "2/2013"}, {"body": "hey mpolichette welcome thanks ticket agree could useful debugging something added directly backbone pointed bit monkey patch solution nt really way dynamically inject name constructor without using bit like creating named function expression causes memory leaks ie lt wanted could clean wrap something like solution post mentioned plugin post link extensions plugins resources wiki page nt see debugging items yet also feel free post anything think could done better library issues find using backbone nt much protocol github tickets ask application specific questions nt related project related", "d": "2/2013"}, {"body": "hi hhuuggoo looks like mentioned last item change log model change method removed delayed attribute changes longer available reason go process instantiating manually opposed instantiating collection would prevent change events firing default able listen event know models properly instantiated describe little use case event necessary individual models", "d": "2/2013"}, {"body": "mornin behrangsa thanks pointing think right cleaned logic bit added comments", "d": "2/2013"}, {"body": "thanks braddunbar", "d": "2/2013"}, {"body": "means html escaped", "d": "2/2013"}, {"body": "thanks", "d": "2/2013"}, {"body": "try redirecting question backbonejs irc stack overflow github issues backbonejs rather specific applications", "d": "2/2013"}, {"body": "methods also nt request mass createupdate seen rest api supports mass delete", "d": "2/2013"}, {"body": "seen rest apis mass delete dropping entire collection quite common actually nt seen one deletes range statement limited exposure statement impossibility certainly seen rest apis support mass createupdate maybe backbone support well really couple lines code throwing idea see people think", "d": "2/2013"}, {"body": "seems already discussions", "d": "2/2013"}, {"body": "makes sense one size fits approach plugin time", "d": "2/2013"}, {"body": "posterity sake quoting rfc meaning ifmatch method performed representation selected origin server cache possibly using vary mechanism see section exists must performed representation exist ifmatch something overloaded mean mass anything seen mass everything restful usually something like following sh mass create patch resource delete range delete delete query delete resource amp ping like discuss", "d": "2/2013"}, {"body": "seen mass createupdate apis using post put usually older apis collection agreed overloading header indicate ranges could cause problems caches conforming way seems define mini language using query string", "d": "2/2013"}, {"body": "update also happens call method model code object compromised", "d": "2/2013"}, {"body": "paratron mean case clone attributes returned deep clone array copied reference first point returning reference clone thats issue value primitive value solved issue cloning would nice keep track necessary sure solution avoid confusion maybe return clone value primitive", "d": "2/2013"}, {"body": "hi paratron definitely design model get fairly hot code path thus nt cloning model tojson hand used persisting model server besides lesser performance requirements generally assumed data may altered model tojson sent server alterations usually done data returned model get cloning necessary edit assuming meant model tojson model getjson please let know", "d": "2/2013"}, {"body": "moudy yes course meant sorry aware performance loss cause clone every value returned get way one always careful retrieved values think beginning going extend backbonemodel method short get safe returns cloned value", "d": "2/2013"}, {"body": "paratron sounds like good option another option mentioned would replace model prototype would prefer using deep cloned attributes across application js backbonemodelprototypetojson function return jsonparse jsonstringify thisattributes backbonemodelprototypeget function key var attrs jsonparse jsonstringify thisattributes return attrs key", "d": "2/2013"}, {"body": "hi joshclose version backbone underscore using", "d": "2/2013"}, {"body": "latest backbone underscore", "d": "2/2013"}, {"body": "joshclose ability use additional arguments removed underscore commit take look discussion commit", "d": "2/2013"}, {"body": "tgriesser included version though unless joshclose using version master", "d": "2/2013"}, {"body": "ah thanks missed regardless might good aware otherwise think issue think another ticket issue line since removed current backbone master", "d": "2/2013"}, {"body": "starting think turned nop", "d": "2/2013"}, {"body": "related issue", "d": "2/2013"}, {"body": "imo unambiguously called antipattern", "d": "2/2013"}, {"body": "wookiehangover agreed", "d": "2/2013"}, {"body": "reading related issues sounds like remove add context param bindings non backbone callback use recommended way using", "d": "2/2013"}, {"body": "tgriesser perhaps appeal higher power jashkenas making decision reckon would us lot good use marked deprecated docs brief explanation best avoid", "d": "2/2013"}, {"body": "joshclose normal situations able use model collection methods rely correct value situations coerced need worry using set expected value", "d": "2/2013"}, {"body": "wookiehangover would need pass param function collectionreset would set collection current object correct changed nt need supply param anymore", "d": "2/2013"}, {"body": "yes provide third argument", "d": "2/2013"}, {"body": "discussion moved", "d": "2/2013"}, {"body": "think design going updating multiple attributes use hash", "d": "2/2013"}, {"body": "well read comment method changedattributes return object containing attributes changed false changed attributes useful determining parts view need updated andor attributes need persisted server unset attributes set undefined also pass attributes object diff model determining would change current implementation lose attributes must persisted server according first sentence must return changed attributes think one incorrect definition implementation opinion correct one specification must improved implementation", "d": "2/2013"}, {"body": "josejamart thanks issue nt seen piece comments useful determining attributes need persisted server looking note appears documentation right pointing using multiple sets definition method nt useful accurate sure intended used anything changes last model state change handler update ui case needs made clearer looking related methods ticket opened nt useful getting back valid state error occurs documentation notes least current validation approach pinging braddunbar since know opinions one going close ticket since two related consolidate discussion ticket", "d": "2/2013"}, {"body": "completely new backbone bear inexperience one first backbone gotcha assumed changedattributes would relate last time queried model changed attributes rather relating last time ny change event occurred working computed values one set model may trigger another set least way implemented perspective view still kind feels like one change model eg changing vatpercentage view causes total vat price change well user necessarily presented individual changes warranting consecutiveindividual updateschanges view wrongfully expected changedattributes return changed attribute set manually well depending computed values perspective view josejamart suggestion feels intuitive changedattributes relating anything changed since last time view queried model changed attributes alternative assume would create event handlers listen changes computed vaules model would nt closely tie view model instead simply observe global change event model model tell changes occurred way worked around extending backbone model prototype method operates way josejamart suggests amyway thanks amazing product everyone involved", "d": "2/2013"}, {"body": "today test found another reason think behaviour bug design execute code model new backbonemodel name backbone modelset name backbonechange modelset name backbonechange check changedattributes better run haschanged method returns false original value name backbone value name backbonechange changedattributes returns nothing ca nt use method hascanged know need save lot problems behaviour want use methods improve number server calls intended nt unnecessary call checking model haschanged save haschanged fetch revert nt want extend local backbone add behaviours considering must library project big maybe maintain local changes library updates killing believe two heads better one library amazing want come terms two proposals solve problem first proposal think better update changed attribute set maintain always last change attribute real previous attributes sets go back attribute think difficult implement second add new attribute called originalattributes use attribute compare attributes call changedattributes haschanged thinks worth solution performance operations advantage return original version model case might better use fetch get original version think", "d": "2/2013"}, {"body": "hi thinkgareth backbone keeps local reference able run backbone loaded", "d": "2/2013"}, {"body": "hey braddunbar would work nicely explicit counterpart appears less libraries using something would like look pull request otherwise consider issue closed", "d": "2/2013"}, {"body": "quite sure proposing think support use case mention would mind elaborating changes would make", "d": "2/2013"}, {"body": "think thinkgareth mentioning publicly expose could access would nt work like nt required backbone explicitly used view router set dynamically later whereas necessary immediately able set would nt real effect", "d": "2/2013"}, {"body": "thought one require lot changes maybe something like snippet work around add another layer indirection slow underscore calls something like even worth", "d": "2/2013"}, {"body": "tgriesser cheers makes sense nt aware utilised immediately gsamokovarov seems quite task nt think accept slowdown main issue window place pre backbone noconflict immediately backbone script aim make underscore dependency simple jquery appreciate nt simple first sounded", "d": "2/2013"}, {"body": "thinkgareth yep jquery dependency optional wanted use backbone server another nonbrowser environment would totally possible without jquery however underscore hard dependency used initializing library would nt possible separate going go ahead close one backbone loaded since backbone keeps local reference inside closure take care making sure okay third party js environments", "d": "2/2013"}, {"body": "please see comments thanks", "d": "2/2013"}, {"body": "thanks issue josejamart bug fixed", "d": "2/2013"}, {"body": "nothing backbone problem server returned nonvalid json string", "d": "2/2013"}, {"body": "submit failing test far know works expected", "d": "2/2013"}, {"body": "right works expected", "d": "2/2013"}, {"body": "thanks opening issue turns still fact working see test case", "d": "2/2013"}, {"body": "thanks feedback appears issue lodash problem fixed", "d": "2/2013"}, {"body": "hi zoowii appears issue scoping javascript block scope create function closure whenever want save value variable scope example probably easier understand following functions passed refer value one logs value end loop create function closure around call instead handler refer closed value example could use pattern hope helps edit forgot context fixed", "d": "2/2013"}, {"body": "zoowii one comment work explains problem think following much idiomatic less error prone sorry split response thought included", "d": "2/2013"}, {"body": "update seems using router handler function works fine", "d": "2/2013"}, {"body": "hi tomasdev issues encodingdecoding hash fragment firefox difficult fix though cases work without issue history information check related issues case think due unicode fragment", "d": "2/2013"}, {"body": "github issues posting questions issues relating development backbone library", "d": "2/2013"}, {"body": "use handler add event duplicate upd seems duplicates relates issues", "d": "2/2013"}, {"body": "convenient ca nt possibly good idea like saying need fetch event could wait couple seconds assuming data available", "d": "2/2013"}, {"body": "maybe could combined update event proposed fires following order event", "d": "2/2013"}, {"body": "cyberthom actually convenient would actually looking trigger function end several events like saying could wait couple seconds like saying wait end call stack trigger function matter many times called see jashkenas response end", "d": "2/2013"}, {"body": "looking get copy attributes data use", "d": "2/2013"}, {"body": "arturcharcenko see tgriesser comment garbage collection", "d": "2/2013"}, {"body": "done one things really easy implement casebycase basis said opposed simple flag simply flips especially bootstrapping even encouraged docs", "d": "2/2013"}, {"body": "hi petethepete thanks bringing think caseywebdev right though best implemented case case basis also use event set option", "d": "2/2013"}, {"body": "never mind nt see validate get called model constructor", "d": "2/2013"}, {"body": "hi arturcharcenko thanks issue tried replicate issues collection models would nt garbage collected nt able jsfiddle running clicking add subview remove subview repeatedly succession looking comparison view snapshots would typically see difference either child objects later snapshots extra model objects would freed guessing garbage collection nt run yet snapshot let know missing anything", "d": "2/2013"}, {"body": "hello tgriesser tried running jsfiddle issue occurred took heap snapshot initial state clicked add subview took snapshot clicked remove subview took another snapshot selected objects allocated snapshot summary view last snapshot child objects afterwards tried clicking addremove subview ten times took snapshot repeated step objects still maybe guess right subview gets collected collection models", "d": "2/2013"}, {"body": "try switching summary left tab objects allocated comparison look new vs deleted delta snapshot see removed", "d": "2/2013"}, {"body": "tried first compared snapshot like said deleted child objects compare snapshot taken hitting add subview first time see one object deleted means collection models created clicking add subview first time removed wrong", "d": "2/2013"}, {"body": "getting results arturcharcenko somehow object dereferenced since referenced dereferenced looking happening", "d": "2/2013"}, {"body": "caseywebdev seeing seeing recent models marked cid snapshot adding removing subview multiple times using jsfiddle code leading believe nt gced yet time recent snapshot", "d": "2/2013"}, {"body": "happens force gc dev tools", "d": "2/2013"}, {"body": "still next ajax call casey pointed errorsuccess nt dereferenced guess would somewhere jquery errorsuccess handlers last ajax call referenced", "d": "2/2013"}, {"body": "override still leaky though trying narrow successfully nt seem want drop wrapped callbacks", "d": "2/2013"}, {"body": "ah grabbing clone options reset fix right", "d": "2/2013"}, {"body": "tgriesser confirmed good work detective pushing fix", "d": "2/2013"}, {"body": "thanks arturcharcenko persistent one", "d": "2/2013"}, {"body": "hmm step right direction still seeing collection gc", "d": "2/2013"}, {"body": "nope say thing", "d": "2/2013"}, {"body": "irc", "d": "2/2013"}, {"body": "great fix caseywebdev maybe add test", "d": "2/2013"}, {"body": "caseywebdev thought circular references gced fine patch way fix cc braddunbar", "d": "2/2013"}, {"body": "sure could test garbage collection anyone else know tgriesser still bugging see simplified version leak take heap snapshot search notice still referenced interesting functions referenced object loop better way", "d": "2/2013"}, {"body": "caseywebdev reading bit gc works looks like nt sure way trigger full garbage collection round takes rounds remove everything garbage collected since everything circular reference eventually get taken care nt think need make code uglier account indeed leak would see reference count continuing climb subsequent snapshots child objects added removed nt case eventually nt available gced say let revert last two commits", "d": "2/2013"}, {"body": "yea whole thing bit fishy blaming moving", "d": "2/2013"}, {"body": "callbacks see etc", "d": "2/2013"}, {"body": "provide example use case", "d": "2/2013"}, {"body": "yes rendering newly added models could use add dom realize could use event figure last model added seems bit hackish", "d": "2/2013"}, {"body": "great stuff js onadd function model thisnewmodels thisnewmodels thisnewmodelspush thisrendermodel model thisappendnewmodelscall appendnewmodels debounce function elappend thisnewmodels thisnewmodels", "d": "2/2013"}, {"body": "hello cbtcoder github issues issues features related development backbonejs project rather application specific code questions probably try stackoverflow documentcloud irc help questions also looks like may need set properties documented section application served root url domain sure tell history root really option", "d": "2/2013"}, {"body": "happy submit patch want make sure understanding desired behavior first", "d": "2/2013"}, {"body": "hi genexp actually currently supported see test", "d": "2/2013"}, {"body": "ahh see sorry misunderstood", "d": "2/2013"}, {"body": "submitting patch", "d": "2/2013"}, {"body": "hi genexp reasons submitting patch english good unfamiliar git github still happy svn think achieve high quality official documentation think important maintained backbones main author knows best internals possible side effects style writing wrong short checking possibly ugly patch would take time jashkenas writing", "d": "2/2013"}, {"body": "created pull request update documentation first pull request project might done something wrong", "d": "2/2013"}, {"body": "hi hjortureh plans though nt stop picking choosing want use check precedent", "d": "2/2013"}, {"body": "aware least one project attempts help", "d": "2/2013"}, {"body": "thats good know including whole codebase right feels bit unnecessary add size page parts never used thanks answers", "d": "2/2013"}, {"body": "actually appear option closing", "d": "2/2013"}, {"body": "similar things proposed specifically view hash see general consensus javascript inheritance nt work way ie router nt automagically merging two hashes default pass via options hash override existing alternative solution would router allow routes defined function way lot model view properties bindroutes called like coffeescript routera backbonerouterextend routes gt help help help search query search searchkiwis search queryp page search routerb routeraextend routes gt extend super tab tabnumber loadtab sort sortby sorttable sortfirstname new routera consolelog keys help search query search queryp page new routerb consolelog keys help search query search queryp page tab tabnumber sort sortby new routerb routes foo bar consolelog keys foo passing routes overrides matter", "d": "2/2013"}, {"body": "would acceptable solution well plans", "d": "2/2013"}, {"body": "open pull wink", "d": "2/2013"}, {"body": "fixed thanks keeyip", "d": "2/2013"}, {"body": "right never need default", "d": "2/2013"}, {"body": "yeah wanted confirm thank", "d": "2/2013"}, {"body": "duplicate sorta basically nt want pollute api names need easy though", "d": "2/2013"}, {"body": "necessary called model context initialization changes applied comparing model mind thinking really going", "d": "2/2013"}, {"body": "ran problem yesterday planning reporting bug today seems johtso beat currently collectionupdate flow existing item updated new temporary model created thrown away manipulate source object parse method model overridden user case codebase update nested models collections source object via parse responsecomments thisget commentsco update responsecomments delete comments object wontt set alongside commentscol delete responsecomments scenario source comments object would deleted passed existing model sure move things around like set instead parse unexpected behavior backbones docs state parse method function passed raw response object return attributes hash set model nt mention source object modified parse accommodate scenarios like new collection update code running parse source passing existing object", "d": "2/2013"}, {"body": "pull requests elegantly solve issue finding preexisting model collection without initializing new one first gladly welcomed", "d": "2/2013"}, {"body": "fishmongr use altering original object better results", "d": "2/2013"}, {"body": "use fishmongr pattern well would nt expected problem caseywebdev perhaps done backbone level", "d": "2/2013"}, {"body": "philfreo yes actually looking solution busy tonight open pr soon", "d": "2/2013"}, {"body": "right problem stems fact parsing validation require existing model experimented bit behaviour stop new models created matching model found collection calling raw attributes model passed see issue raw attributes parsed way see changed would validation parsing linked creation model", "d": "2/2013"}, {"body": "way see changed would validation parsing linked creation model nt think going able guarantee people expect always corresponding model context closing", "d": "2/2013"}, {"body": "fyi using response clone response custom parse method may work complicated nested deserialization scenarios since shallow clone modifications deeper response object still associated original object even passing shallow clone line case app decided stick collectionreset instead dealing worms opened unfortunately nt time right delve submitting patch circle back time permits big release", "d": "2/2013"}, {"body": "fixed soon internal refactoring feb pm mark ledford notifications githubcom wrote fyi using response clone response custom parse method may work complicated nested deserialization scenarios since shallow clone modifications deeper response object still associated original object even passing shallow clone line case app decided stick collectionreset instead dealing worms opened unfortunately nt time right delve submitting patch circle back time permits big release reply email directly view github", "d": "2/2013"}, {"body": "\u00ba \u00ba\u30ce great", "d": "2/2013"}, {"body": "hi switzer believe backbone relies usually decision whatever ajax library using likely culprit also jquery recently started treating json responses valid errors instance endpoint returns empty response jquery consider failed probably likely case", "d": "2/2013"}, {"body": "gon na close since choice fire based ajax response ajax library choice backbone braddunbar says", "d": "2/2013"}, {"body": "asking would require making global variable also definitely always element looking probably best way avoid complications", "d": "2/2013"}, {"body": "yup half time callback even interested element", "d": "2/2013"}, {"body": "hi think would best add either resources section wiki languages section tutorials blog posts example sites wiki thanks", "d": "2/2013"}, {"body": "found problem problem jquerymobile property pushstateenabled set router working fine", "d": "2/2013"}, {"body": "fair sort comparator return true false", "d": "2/2013"}, {"body": "interesting maybe backbone care since chrome firefox work closing ticket since returning works", "d": "2/2013"}, {"body": "hi rpflorence reason nt want use string flavors", "d": "2/2013"}, {"body": "protip string come extra sort optimizations ca nt made function wink", "d": "2/2013"}, {"body": "function overridden callback", "d": "2/2013"}, {"body": "etagwerker looks like answer issue since jquery expecting json response error sent anything valid json response body including heard empty response see", "d": "2/2013"}, {"body": "caseywebdev nt overriden tgriesser thank solution return valid response changed line backend started working", "d": "2/2013"}, {"body": "easy implement casebycase basis nt see good fit core especially given inefficient sorting every change", "d": "2/2013"}, {"body": "see", "d": "2/2013"}, {"body": "thank pointing respond jashkenas concerns many complex views models come go events need bound unbound could function called delegate listeners current declarative syntax nt much facility dealing readding portion declared events needed could also accepts optional target argument undelegate events target could allow passed optional target would delegate events target thoughts concerns another cool idea following javascript listen thison event handler thison handler event handler thislistento property event handler thislistento property handler thislistento property handler event property handler nt exist becomes another event", "d": "2/2013"}, {"body": "see", "d": "2/2013"}, {"body": "think fine", "d": "2/2013"}, {"body": "agree philfreo", "d": "2/2013"}, {"body": "closing see", "d": "2/2013"}, {"body": "wow nt feel dumb", "d": "2/2013"}, {"body": "reason never knew create method existed", "d": "2/2013"}, {"body": "init collection ton add function msg opt", "d": "2/2013"}, {"body": "glad got sorted", "d": "2/2013"}, {"body": "hold bumps dependency", "d": "2/2013"}, {"body": "reason noticed backbone docs defers underscore collection method docs findwhere documented", "d": "2/2013"}, {"body": "tgriesser nope dependency bump look change mirrors underscore implementation one would expect", "d": "2/2013"}, {"body": "mistake caseywebdev looked first", "d": "2/2013"}, {"body": "hi nordhagen separate event event event triggered client side failed validation would need separate handler functions events used two different purposes answer question event use ca nt passed along function expecting event signature let know nt clear things", "d": "2/2013"}, {"body": "tgriesser please read initial message described separate event handlers error invalid know difference problem get invalid event fire failed validations instead models fire error events whenever return anything null validate method", "d": "2/2013"}, {"body": "nordhagen reproduce case jsfiddlecodepen see cause", "d": "2/2013"}, {"body": "nordhagen using latest backbone release", "d": "2/2013"}, {"body": "awkward wrote example locally first using copy backbone versjon ran errorhandler called even validation failure pasted jsbin nd added backbone invalidhandler works guess fault version", "d": "2/2013"}, {"body": "sorry wrong link", "d": "2/2013"}, {"body": "version comfirms issue", "d": "2/2013"}, {"body": "braddunbar suggest work one object receives use case user action view fires event one objects interested application level perform async operations event gets triggered async operations finish view continue executing rest code one async call fail get rejected view must proceed", "d": "2/2013"}, {"body": "something similar app single event allows cancellation implement include empty array one event arguments handlers push promise onto array event triggered array proceeding felt kind dirty far held well overlook wonkiness", "d": "2/2013"}, {"body": "sounds like something custom app going go wookiehangover answer close one please let us know come different solution", "d": "2/2013"}, {"body": "think noop backbone use case easily solved skinny arrow", "d": "2/2013"}, {"body": "hi af thanks issue looks like dropping latest zepto build fixes router related functions element creation syntax supported tests failing pinging madrobby mislav see tests would help reveal incompatibilities jquery event binding api next official release rc cut update test library", "d": "2/2013"}, {"body": "zepto event binding api compatible jquery exception binding custom data nt supported", "d": "2/2013"}, {"body": "mislav backbone nt binding custom data zepto support delegated events syntax", "d": "2/2013"}, {"body": "yep supported", "d": "2/2013"}, {"body": "timmywil tonylukasavage fix one internally success callback parameters reverted options model referenced closure successerror sync called single argument issues let us know reopen thanks", "d": "2/2013"}, {"body": "feel supporting patch backbone useful bumping issue jquery bug closed wontfix much rare corner case us deal workaround override xhr factory ajax options one situation still use ajax rewriting patch put default providing configuration could dangerous allowing patch broken would cause bug dangerous bug obviously fail vs silently destroying data could put another workaround emulatehttp patch workarounds use put implement api supporting put partial set attributes override xhr factory use activex use xhttpmethodoverride implement api support described jquery considers patch broken much edge case maybe acceptable", "d": "2/2013"}, {"body": "status override sync method", "d": "2/2013"}, {"body": "chrisabrams looks like going resolve issues related overriding sync method waiting one get pulled", "d": "2/2013"}, {"body": "sweet", "d": "2/2013"}, {"body": "still problem uncaught typeerror object object array method reset using latest source backbone backbonepaginator solved pulled", "d": "2/2013"}, {"body": "changes make easier override changes plugins would still necessary", "d": "2/2013"}, {"body": "braddunbar actually nt know case least issue paginator internal successerror functions called ajax resolvable single response parameter things work fine", "d": "2/2013"}, {"body": "good point since already passes response object first argument resolve nicely thanks pointing tgriesser even sold", "d": "2/2013"}, {"body": "gilbertwyw would mind giving source shot see fixes issue", "d": "2/2013"}, {"body": "braddunbar yep main point trying make closed pull request nt think articulated well enough", "d": "2/2013"}, {"body": "braddunbar sorry nt source moment collection backbonepaginator requestpager tried invoke fetch saw uncaught typeerror object object array method reset console tried source problem disappeared wonder paginator issue", "d": "2/2013"}, {"body": "braddunbar definitely fixes issue took look backbonepaginator issue internal sync signature change rather unrelated signature change passed option backbone sync methods cool since entirely optional make sense match event trigger signatures", "d": "2/2013"}, {"body": "problem see events triggered twice since moved back probably cut another release quickly mitigate problems", "d": "2/2013"}, {"body": "closing one resolved still issues reopen", "d": "2/2013"}, {"body": "spent couple hours digging around source figure issue found thread edge version immediately cleared issue paginator throwing error great work guys", "d": "2/2013"}, {"body": "running issues set save new ids models later go destroy model id recently changed removed see issue fiddle remove silents code everything works correctly model deleted silent model never deleted", "d": "2/2013"}, {"body": "wilkins exactly type issue talking silencing change event deprives collection notification causing state incorrect hopefully patch prevent type issue future", "d": "2/2013"}, {"body": "closing one merged removing option mention thread created simple plugin make transition little easier generally avoided", "d": "2/2013"}, {"body": "would brilliant", "d": "2/2013"}, {"body": "fixed", "d": "2/2013"}, {"body": "still fixed identical problem reoccured trying compute difference two updates array strings need compute difference means need keep version array previous update compare list current update problem ca nt save anything model collection every update creates new instance model throws away changes old model ca nt really see reason necessary create new model updating collection instead updating existing model", "d": "2/2013"}, {"body": "provide jsfiddlecodepen demonstrating problem", "d": "2/2013"}, {"body": "created jsfiddle demonstrate problem call fetch collection every fifth second data returned creates new model parses data model merges data existing model like fetching data parsing model init model existing model would expect parse update data existing model like fetching data parsing model existing model problem need parse data knowledge previous state model see data changed subtract data actually changed like new entries array nt know totally", "d": "2/2013"}, {"body": "ideally would able work correctly response data collection level model level order parse model level initialize new model simple response data circumvent model initialization since backbone openly supports complex response data meta data json etc ca nt", "d": "2/2013"}, {"body": "ok nt think fully understand try work around workaround could implement parse method collection parses response existing models backbone initiates new model merges two", "d": "2/2013"}, {"body": "done parse response previous model parsing data temporary model implemented custom function model implemented function collection javascript parse function response response function entry var model thisget entryid", "d": "2/2013"}, {"body": "carnevalle simplified", "d": "2/2013"}, {"body": "still issue known thought safe use bindall models collections see lots tutorials extremely handy recommendation use documented otherwise seems perfectly safe awesome", "d": "2/2013"}, {"body": "simpleascouldbe would disagree main source properties collection definitions nt know someone would use time rare case encounter callback need bind use function bind", "d": "2/2013"}, {"body": "tbranyen please specific believe bindall antipattern found useful given backbone oo idioms heavy reliance seeing lot well happens add new method happens remove method remember go inialize modify call bind bind useful cut duplication ooish code lots callbacks instead something harder read like understand ultimately going cause problems see really idiomatic javascript however clear message amp reasoning", "d": "2/2013"}, {"body": "think logic makes sense silent true one would expect underlying state changed without firing change event hence silent however subsequent behavior change ie changes attribute cause change events", "d": "2/2013"}, {"body": "quidproquo think removed point future making moot point check", "d": "2/2013"}, {"body": "confirm problem still code serverendpointimplementation returning location header containing path new resource backbone nt follow link retrieve values possible fix", "d": "2/2013"}, {"body": "hi sveba want link followed immediately return similar telling browser immediately fetch created resource success status redirection status thus treated final response", "d": "2/2013"}, {"body": "braddunbar answer helped", "d": "2/2013"}, {"body": "domain resolving", "d": "2/2013"}, {"body": "seems indicate alright able reach anything dns", "d": "2/2013"}, {"body": "yeah back used link well check earlier", "d": "2/2013"}, {"body": "got bit seems unexpected behavior conventional oo inheritance model subclasses inherit methods properties attributes parent class like see feature added nonclunky alternative provided perhaps defaults inheritabledefaults etc backward compatibility issue", "d": "2/2013"}, {"body": "moos simple answer want inheritance build see also take approach chaplin takes collect instances prototype chain chaplinjschaplin utilscoffee", "d": "2/2013"}]