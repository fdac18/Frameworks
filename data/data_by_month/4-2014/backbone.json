[{"title": "classname function call order", "body": "would like give subclass set runtime planned passing parameter via parameter method something like class myview extends backboneview classname gt pluralname layout initialize options gt pluralname optionspluralname super options unfortunately called prior instead assign constructor like well bug feature nt called feature tell called erroneously asked first like marionette thanks awesome tool well", "num": "3137", "d": "4/2014"}, {"title": "collectionmodel called collection context", "body": "issue demonstrated following code var modelcontext var c backbonecollectionextend model function modelcontext return new backbonemodel var c new c cadd foo bar consolelog model function called collection context cmodelcontext consolelog false function called collection object context seems problem collectionpreparemodel always calls beating head today wanted access collection attribute model function seems like somehow check model constructor vs regular fn sure possible docs updated clear context function gets called note still access collection function rather", "num": "3134", "d": "4/2014"}, {"title": "save example bug main backbonejsorg page", "body": "main documentation backbonejsorg homepage navigate save function reference book example press play button according documentation backbonesync receive create request first time update request second time however create request sent times sure example code incorrect documentation incorrect", "num": "3130", "d": "4/2014"}, {"title": "android web browser turns backbonehistoryhistory null pointer sometimes", "body": "yes actual real weird null pointer javascript null undefined javascript value js process simply dies javascript attempts anything trap trycatch looks little like backbonehistoryhistory lt gt using galaxy sii tablet os sure point releases happens backbone page app history api enabled backbone click normal link actually leave one page press back button return backbone app android browser makes attempt reconstruct inmemory image page silly thing constructs new windowhistory object apparently garbage collects one backbone grabbed first initialised nt count reference work around either patch backbone manually backbonehistoryhistory windowhistory code might cause backbone touch backbonehistoryhistory might want replace local pointer often nt use local pointer reference windowhistory directly", "num": "3128", "d": "4/2014"}, {"title": "get value calling trigger", "body": "get false value calling trigger event handler returns false useful maybe decide default action implemented chainable test failed", "num": "3124", "d": "4/2014"}, {"title": "fragment matching popstate checkurl", "body": "strange behavior application certain conditions history incorrectly changed popstate scenario following first history navigate called encoded fragment per documentation see fragment stored history object understand thisfragment holds encoded path string case pushstate listener added popstate event fires checkurl fired listener checkurl responds see backbone check make sure url changed loadurl get called however getfragment function always returns decoded string decodeuri called location ie therefore boolean current thisfragment evaluate true loadurl incorrectly called causing errors application eg items removed pushstate history call navigate without encoding uri condition correctly execute potential invalid url special characters exist fragment see issue exists stable using well current master slight difference getfragment even latest code decodeuri called checking encoded fragment stored context navigate see checkurl getfragment called everywhere certain decodeuri happening reason seems case considered thoughts", "num": "3123", "d": "4/2014"}, {"title": "model silent save", "body": "sorry bring back trying situation sure working expected try still fire sync event even though silent true passed see looks like trigger sync event always fired success callback model save look options object prior trigger silent defined property value true trigger inside block like sure done purpose could missing something", "num": "3122", "d": "4/2014"}, {"title": "nuget package dependancy problem", "body": "hi jeremy backbonejs nugetorg package still depends underscorejs gt could please update people using nuget", "num": "3121", "d": "4/2014"}, {"title": "complement parse", "body": "hello models timestamp fields server sendsreceives utc app though like work momentjs objects receive response server use transform utc string object however send data complementing function use would make sense add function similar would noop otherwise let process attributes sent server could anyone point better direction", "num": "3119", "d": "4/2014"}, {"title": "successful collectioncreate ca nt collectionget id", "body": "hey think bug collectioncreate method successful collectioncreate new model waits true posted new model returns model newly generated id would nice since wait set true model added collection id gets assigned model collection basically model added collection new id byid nt get updated reference id work pull request show expecting let know guys feel", "num": "3118", "d": "4/2014"}, {"title": "single model multiple collections", "body": "example detailing issue clear answer models placed multiple without problems noticed least one plugin relies detecting model part particular extension querying modelcollection property since property allow one collection often throws errors would possible advisable make property array collections model member", "num": "3113", "d": "4/2014"}, {"title": "history api disable chrome packaged app solution make work", "body": "list apis disabled packaged apps history api available package app still good type project people use backbone found router works normal webpage failed work packaged app every time trigger navigate event gives error solution make work instead replacing router", "num": "3112", "d": "4/2014"}, {"title": "value unhelpful bulk operations", "body": "consider following scenario let create collection var mycollection new backbonecollection let subscribe add events collection mycollectionon add function model collection options print model options given us consolelog model options let add items collection single add operation first index mycollectionadd id id id expecting see following printed backbonemodel backbonemodel backbonemodel however instead get backbonemodel backbonemodel backbonemodel value always even though specific model inserted index intended behavior seems undesirable would expect value correctly display index individual model bulk operation one", "num": "3110", "d": "4/2014"}, {"title": "allow proxying options url via fetch", "body": "discussed would useful proxy arguments url methods collections models via fetch methods fact recently tweaked backbone underscore using project working accomplish url method able translate various options passed logic calling fetch proper url proper way accomplish allow proxying options object via fetch translating options url logic outside url method would violate principle separation concerns use case required user action event requires fetching multiple urls parallel currently way url methods generate different urls application state change calls fetch planning send pull requests work latest code", "num": "3108", "d": "4/2014"}, {"title": "backbonemodelsave calling successerror functions", "body": "looks like true backend passing object back causes success error method never execute", "num": "3105", "d": "4/2014"}, {"title": "router parsing fragment hash causes information lost misinterpreted", "body": "general code setup backbonerouterextend routes query onqueryroute initialize function backbonehistorystart onqueryroute function query query impossible reliably parse query string due fullstring urldecode line backbonejs inside extractparameters scenario imagine single query parameter arbitrary value happens contain amp construct fragment string like var value encodeuricomponent amp routernavigate foo value refresh page onqueryroute event handler gets called receive string amp obviously impossible parse interpreted two query parameters actually one happening line inside extractparamters urldecoding whole fragment hash without splitting first particular usecase query parameters fixed arbitrary number ca nt easily set route regex automatically parses individual values structure url like amp amp amp foobar amp bazblah execute preprocessor method useless gets called extractparameters mangled hash string urldecoding whole without splitting first default current workaround override method extractparameters function route fragment return backbonerouterprototypeextractparameters call route encodeuricomponent fragment basically urlencode passing back original implementation get callback get original version proceed parse normally efficient like see fixed properly source thoughts", "num": "3104", "d": "4/2014"}, {"title": "delegate event element outside view element view", "body": "example set many backboneview elements every one click event calls function add css border selected element view well problem need delegate event click outside view elements calls function deselects views nt want something like would mixing logic views logic body element good practice modular", "num": "3103", "d": "4/2014"}, {"title": "requirejs jquery", "body": "loading jquery without requirejs backbone underscore requirejs throws error jquery found course specifying path jquery requireconfig possible set backbone", "num": "3102", "d": "4/2014"}, {"title": "way execute route without mutating history first", "body": "working extension allows programatic execution route callback fired first callback succeeds hash history mutated one issue approach discussed previous issue way retrieve hash router function accessing yet updated nt see way access hash order push onto history stack far tell simplest workaround add parameter execute right parameter another option would roll object later solution could additionally add parameter could mixed object passed could potentially add greater flexibility extending routes handled either solutions sound reasonable submit pull request", "num": "3101", "d": "4/2014"}, {"body": "theory backbone help underscore jquery work way back immediate plans otherwise assume stay way backbone nt usually employ bleeding edge tricks rare cases pushstate support history instance includes fallbacks older browsers case via hashchange specific questions advise try mailing list stackoverflow irc channel github issues generally improving framework", "d": "4/2014"}, {"body": "thanks clear answer sorry using wrong channel thought could question label", "d": "4/2014"}, {"body": "worries hope find looking", "d": "4/2014"}, {"body": "hi erikevenson certainly feature shortcut keeps calling super method constructor record calling super method fine reason called view element guaranteed exist called needed create called use source hope clears things smiley", "d": "4/2014"}, {"body": "thanks brad making reasoning clear call order cheers", "d": "4/2014"}, {"body": "beers", "d": "4/2014"}, {"body": "good catch get fixed post haste", "d": "4/2014"}, {"body": "fixed cherrypicked ghpages thanks reporting michaelbutler", "d": "4/2014"}, {"body": "whaaaat amazing want turn pull request demonstrating recommended fix", "d": "4/2014"}, {"body": "somewhat inelegant attempt without understanding reasons making local pointer begin hesitant aggressive modifications", "d": "4/2014"}, {"body": "hey ethanzheng would nt really work multiple event handlers single triggered event often case would happen returned true returned false possibly usefulrelevant created extension backbone events method uses promise library resolve result triggered events reject promise chain error thrown rejected promise returned event handlers could event handler assume however event handlers throw would exclusively used otherwise things would break errors caught promise", "d": "4/2014"}, {"body": "tgriesser one handlers return false calling eventtrigger returns false like dom event one event handler calls default action cancel", "d": "4/2014"}, {"body": "jquery method always returns jquery object handler special functionality preventing default event behavior false returned", "d": "4/2014"}, {"body": "hi justinhelmer thanks reporting take look see", "d": "4/2014"}, {"body": "excellent bug report way kudos", "d": "4/2014"}, {"body": "thanks lot guys always responsive issue queue", "d": "4/2014"}, {"body": "fixed thanks great bug report justinhelmer", "d": "4/2014"}, {"body": "hi tsjoberg yes intended behavior sync fire regardless options passed said always check options handler hope helps smiley", "d": "4/2014"}, {"body": "thanks braddunbar realized trigger handy options passed trigger sure maybe docs could bit specific docs make silent true global event stopper thanks", "d": "4/2014"}, {"body": "nt control anything nuget better asking seems", "d": "4/2014"}, {"body": "complement", "d": "4/2014"}, {"body": "sorry nevermind something wrong code apologize", "d": "4/2014"}, {"body": "think solution stackoverflow answer pointing good one would big break change array might ask plugin author add property instance plugin would keep date listening collection events", "d": "4/2014"}, {"body": "opinion relying generally antipattern models nt know anything collections contain much way objects nt generally contain reference containing array best method determining whether model part particular collection", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "brad totally agree using property nt best way accomplish task hand given exist feel like least complete understand change would insignificant break kinds things certainly nt unheard around parts see thisoptions views oh well guess", "d": "4/2014"}, {"body": "could always iterate collections demand need js var model new backbonemodel var new backbonecollection model model true model true var model backbonemodelextend collections function allcollections return filter allcollections function col return colcontains var collections new backbonecollection modelcollections allcollections", "d": "4/2014"}, {"body": "might better luck question stackoverflow irc channel mailing list github issues improving framework nt worked chrome apps apis ca nt say sure basically array behind scenes able get away pollyfilling history calling", "d": "4/2014"}, {"body": "sure backbone considers chrome packaged apps one senario use backbone backbone needs care tried disable url find disabled chrome maybe historyjs would also fall look later anyway thanks reply", "d": "4/2014"}, {"body": "maybe router isnt best way manage state chrome app lack url bar lead look state management elsewhere js thankfully backbone tools models collections views still useful context really depends use case", "d": "4/2014"}, {"body": "yeah kind drag guessing justification case internals add works case one easy work around find index model like snippet backbonecollectionview", "d": "4/2014"}, {"body": "unfortunately need index model collection index model bulk array models inserted try illustrate problem let create collection items var mycollection new backbonecollection id id id inserting collection later var bulkinsert id id id let subscribe add events collection mycollectionon add function model collection options want know index new model bulkinsert unfortunately two problems bulkinsert array holds regular objects instantiated backbonemodels indexof wo nt work application bulkinsert happens completely separate file way make reference variable consolelog inserting item bulkinsertindexof model bulkinsertlength let add items collection single add operation first index result collection models ids mycollectionadd bulkinsert suppose pass bulkinsert array options method seems really messy", "d": "4/2014"}, {"body": "pr might looking mind chiming", "d": "4/2014"}, {"body": "yup looks like fix issue closing ticket", "d": "4/2014"}, {"body": "sorry think best way handle either wrap create separate method calls fetch parameters place", "d": "4/2014"}, {"body": "example provided fetch method compose url query parameters stated translating options url logic outside url method would violate principle separation concerns violating separation concerns would make easier introduce bug introducing nonstandard method mycustomfetch would make code difficult people read wrapping fetch would inevitably violate dry generally hassle point using toolkit reduce hassle", "d": "4/2014"}, {"body": "hey henrytseng expects response json representation model passed first api nt implement form restfulness might return empty object better luck question irc channel mailing list issues development backbone", "d": "4/2014"}, {"body": "hi enunez version backbone using treatment query strings routing updated recently using latest version query string passed last argument route handler", "d": "4/2014"}, {"body": "hi braddunbar using latest release code issue occurs end extractparameters calling decodeuricomponent entire fragment instead looping individual parameters splitting amp extractparameters function route fragment var params routeexec fragment slice return map params function param nt decode search params paramslength return param null return param decodeuricomponent param null", "d": "4/2014"}, {"body": "ok misunderstood missed navigating directly gon na want put query string instead query string last argument router wo nt decoded", "d": "4/2014"}, {"body": "braddunbar think misunderstanding navigating contrived example navigating please read explained imagine anyone tries set query parameter value something contains amp character backbone current behavior make impossible parse", "d": "4/2014"}, {"body": "right got using issue either way need use query string prefixed", "d": "4/2014"}, {"body": "braddunbar hmm ok bit confused path correspond arbitrary string act hack get backbone urldecode query string nt polluting url unnecessary cruft surely come better solution tested solution indeed work pointlessbogus pathname url", "d": "4/2014"}, {"body": "right example use like", "d": "4/2014"}, {"body": "still superfluous url live thanks help", "d": "4/2014"}, {"body": "sure thing glad could help", "d": "4/2014"}, {"body": "hi edwardoyarzun advantage delegating within view events cleaned upon removal usually better idea add listener parent view call method trigger event child need help stop irc channel try mailing list issues generally reserved development backbone", "d": "4/2014"}, {"body": "probably need define path jquery reqiureconfig", "d": "4/2014"}, {"body": "thanks garthenweb unfortunately option jquery plugins attach functions window sometimes use somechild someplugin view setting jquery path someplugin exist backbone scope besides would define path jquery would loaded already embedded page", "d": "4/2014"}, {"body": "jquery still exposes global even using amd precisely reason set loader plugins fine also shim plugins use amd loader", "d": "4/2014"}, {"body": "technical details aside would ever want call route url history nt changed definition route supposed", "d": "4/2014"}, {"body": "calling route might checking see route valid given current state ie user logged turns route invalid need redirect kind view point click back button go back invalid route would ideal could avoid ever putting invalid route history stack", "d": "4/2014"}, {"body": "hi asakusuma written similar route filtering logic think proposed solution problems importantly ignores direct navigation url case history entry already created issue moot handled identically much better user experience imo leave url cases user choose go back like", "d": "4/2014"}, {"body": "braddunbar good points issues brought perhaps multipage form might better example let say page form accidentally click link another page say page ideally like stop routing happens still page show dialog asking user really wants navigate away form let say want go back page form hit browser back button page made history stack navigate page want manually navigate page user filtering action performed keep mind custom hook behavior default usual case means would agree cases leaving url best user", "d": "4/2014"}, {"body": "nah think stay closed nt want user go particular url nt make url clickable ui general url app user able go point time really point urls first place better form would remember data entered allow navigate away without complaint still halffilled press back button return backbone routing intended occur change location happened supposed get involved allow user go next", "d": "4/2014"}, {"body": "general url app user able go point time really point urls first place well put arrive eg found sure want filter based form state pretty easily days js var router backbonerouterextend execute function handler args thisformactive amp amp confirm sure handlerapply args else historyback history entry still think probably messing history confusing often", "d": "4/2014"}, {"body": "yeah think makes even worse least attributes seem update every attributes seem stick around forever think would help function determine whether within change event attributes hash cleared change event oh well thanks trying help mon mar pm adam krebs notifications githubcomwrote maybe thishaschanged function return thisget city thisprevious city reply email directly view github", "d": "4/2014"}, {"body": "speeds bower install make package look clean likely concat minify js bundle anyway include minified version think better question come files like componentjson cname nt ignored", "d": "4/2014"}, {"body": "think speed issue probably negligible whole point min file faster download said would assume anyone using bower probably comfortable build tools position really need download speed boost minified file gives probably know run build tools rest application", "d": "4/2014"}, {"body": "think better question come files like componentjson cname nt ignored good call", "d": "4/2014"}, {"body": "garey nt understand situation believe treating fetches like synchronous things asynchronous fetch called request issued server gives response collection populated javascript nt wait fetch complete continues executing rest code model fetch returns faster fetches potential collections could still empty go render template js var phones phonecollectionphones issues asynchronous call phonesfetch renew true var addresses addresscollectionaddresses issues asynchronous call addressesfetch renew true issues asynchronous call thismodelfetch success function potential empty model fetch call finishes phones addresses calls consolelog phonesmodels consolelog addressesmodels one solution would keep counter successful requests call another function counter reaches desired amount slightly crude would trick semi pseudocode js backboneviewextend initialize function thiscounter bindall successfulrequest render function thisphones phonecollectionphones thisphonesfetch renew true success thissuccessfulrequest libraries could help parallel tasks pseudo code could done like js backboneviewextend render function var self phones phonecollectionphones addresses addresscollectionaddresses hopefully nt heavy handed answer questions let know", "d": "4/2014"}, {"body": "hi garey suspect astraldragon correct probably get help irc channel mailing list issues reserved development backbone", "d": "4/2014"}, {"body": "one unexpected consequence addition found morning agree seems like half solution nt think minting new event gains us anything convinced need benefit composite keys backbone best support documentation lacking", "d": "4/2014"}, {"body": "agree seems like half solution let back master time", "d": "4/2014"}, {"body": "would set directly antipattern", "d": "4/2014"}, {"body": "perhaps included documentation morning", "d": "4/2014"}, {"body": "convinced need benefit composite keys backbone nt think backbone ca nt unopinionated force singlecolumn keys time really want revert try turn plugin gut instinct going quite invasive trivial implement", "d": "4/2014"}, {"body": "please revert keep talking way implement solves problem completely", "d": "4/2014"}, {"body": "revert pr", "d": "4/2014"}, {"body": "reverted closing discussion continued", "d": "4/2014"}, {"body": "check fiddle see problem", "d": "4/2014"}, {"body": "dirty checking told", "d": "4/2014"}, {"body": "issue world around", "d": "4/2014"}, {"body": "issue background background gt ok check change event triggered lt error copy paste", "d": "4/2014"}, {"body": "made copy paste error previous fiddle issue reality event triggered", "d": "4/2014"}, {"body": "right using reference array object examples change string return false new old values take look lines see actually going might help step code debugger different scenarios", "d": "4/2014"}, {"body": "best bet put primitives arrays objects properties models", "d": "4/2014"}, {"body": "understood right", "d": "4/2014"}, {"body": "maybe possible clone object arrays compare know would expensive permit detect changing state", "d": "4/2014"}, {"body": "js var background b c modelset background background change event var clone background modelset background change event var clone background modelset background change event", "d": "4/2014"}, {"body": "exactly mean hoping come source code backbonejs mine solution thanks", "d": "4/2014"}, {"body": "garbage collection take care dom element still exists view still referencing means something else still referencing view perhaps event fix fix problem root", "d": "4/2014"}, {"body": "jashkenas created gist issue first thought something wrong stripped everything back removed events etc however also see issue please excuse ive made silly error missed example simply removes view soon rendered use devtools take heap snapshot look htmldivelements see containing highlighted red adding fixes issue im happy log pr agree issue", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "adding never going real fix certainly take look", "d": "4/2014"}, {"body": "jashkenas thanks taking look look trace tree seemed indicate holding reference element thought realised made sense reference removed woud remove ability view calling maybe function would another option give devs choice", "d": "4/2014"}, {"body": "issue example variables declared globally never going garbage collected wrap example iife see gc takes place expected", "d": "4/2014"}, {"body": "worked debugging jashkenas seems like delete kick gc much faster actually never able get drop dom reference using example", "d": "4/2014"}, {"body": "variables declared globally never going garbage collected voila", "d": "4/2014"}, {"body": "welp", "d": "4/2014"}, {"body": "thanks tgriesser works expected problems code find smile", "d": "4/2014"}, {"body": "feature glitch affected maybe would simple assign outside callback synchronous callstack example jquery", "d": "4/2014"}, {"body": "darrrk rjs bug mentioned steps reproducetest case would prefer identify core issue via test case work based incomplete information please feel free add info rjs bug something use reproduce also backbone different jquery backbone dependencies need loaded backbone synchronously define dependencies available", "d": "4/2014"}, {"body": "yes issue still exists", "d": "4/2014"}, {"body": "problem", "d": "4/2014"}, {"body": "ahh see validation saving normal functionality", "d": "4/2014"}, {"body": "think assumptions wrong treating url pushstate contains query string basic http breaking backbone might mainly used javascript clientonly apps could used apps integrate complex website server interaction forced roll back wo nt able update fix personally think bad move would love jashkenas take matter", "d": "4/2014"}, {"body": "take braddunbar spent lot time thinking ways make work best personally think using query params within backbone router bit fool game necessarily fake actually parsed server better use convention query params like point folks want use change way allowing feel free patch copy backbone behave way like", "d": "4/2014"}, {"body": "right either consistent support query params fragment query string sent server cases since utility support former overwhelmingly greater gone said several options patch put parameter path eg use root leave query string fetch need page loads pass query params always sent server monkey patch", "d": "4/2014"}, {"body": "hi certainly wo nt deny time thinking braddunbar behind feature really point know could patch backbone keeping date original repo maintain single correction nt look really optimal problem feature expecting people something special keep project working like whole web intended work could nt least way opt feature", "d": "4/2014"}, {"body": "hey olance nt think provide option behavior would require great deal complexity seldomused feature ca nt justify costs besides nt think good idea general using backbone router saying client handle portions url past root", "d": "4/2014"}, {"body": "okay see point well bad really ca nt break support right guess freeze backbone version project patch need new features later", "d": "4/2014"}, {"body": "need case ulrira", "d": "4/2014"}, {"body": "frustrated backbone defined uri scheme inline http uri scheme rfc updated obsoleted rfc section states gives example empty segment path segment ending specifically addressed root uri important understand section build context around applying uri segments section also referenced examples fact rfc http rfc updated rfcs obsoleted specifically states compare urls section empty abspath equivalent abspath section section state structure request uri define requesturi absoluteuri abspath authority host port abspath query erroneous backbone treat trailing slashes nonpresent trailing slashes nonequivalent issue reopened reconsidered", "d": "4/2014"}, {"body": "eh nt mean rude extremely strong appeal authority without actually looking servers trailing slashes web currently carefully reading rfcs saying mean empty segment path empty abspath talking truly empty path ie root server well fine trailing slashes part nonempty path perhaps wrongly entirely semantic servers redirect equivalent automatically many backbone needs support use cases prefer also served user navigates broken url like let look wild say example page served without trailing slash try visiting one see get uri scheme inline http uri scheme arse", "d": "4/2014"}, {"body": "would care enlighten parts carefully reading references rfc section rfc section mean empty segment path empty abspath talking truly empty path ie root server well fine herein lies issue neither rfc states whether uri trailing slash equivalent one without fairly thorough reading interpreted mean equivalent disagree also clarify url broken user navigates broken url like uri hierarchical nature use slash character separating hierarchical components file systems character used denote hierarchical structure uri delimiter used construct file name hierarchy thus uri path look similar file pathname imply resource file uri maps actual filesystem pathname refute making appeal authority appeal authority roughly follows idea expert b b x way x right rfcs accepted become de facto specification concepts describe even claiming rfc authority appealing appeals authority necessarily fallacious seem implying misuse appeals authority problematic referencing specification misuse appeal authority fallacy expert web technologies treats trailing nontrailingslash uris nonequivalent trailing nontrailingslash uris nonequivalent subject logical fallacies consider also fallacy fallacy fallacy committed necessarily invalidate argument example example props interpretation fallacious appeal authority important developers consider happens end understand backbone treats urls differently whether agree examples support interpretation rfcs fallacious appeals authority must considered practicalities sake uri scheme inline http uri scheme arse need snark issue tracking forum roast way understanding point needing support cases perhaps form configuration option workable solution treating optional part route definition", "d": "4/2014"}, {"body": "way understanding point needing support cases perhaps form configuration option workable solution sure sounds like fine idea want cook pull request", "d": "4/2014"}, {"body": "perhaps yet still needs list supported runtimes feel free use objectdefineproperty directly", "d": "4/2014"}]