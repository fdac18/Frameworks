[{"title": "uncaught error using contenteditable true within chrome", "body": "basically pressing enter within contenteditable creates new p tag reactid", "num": "1466", "d": "4/2014"}, {"title": "ca nt insert root element type form inside createclass", "body": "whenever try insert form inside createclass method get following error uncaught error invariant violation findcomponentroot unable find element probably means dom unexpectedly mutated eg browser usually due forgetting using tables nesting tags please help", "num": "1465", "d": "4/2014"}, {"title": "csstransitiongroup segue nonnull null children", "body": "got bit trouble trying renderonethingornot wrapped seems gracefully handle going nonnull child empty array children back ca nt handle going something nonnull child something null child test case dies component null", "num": "1457", "d": "4/2014"}, {"title": "zindex component", "body": "try set div inside component via nt work element inspector becomes zindex workaround", "num": "1456", "d": "4/2014"}, {"title": "jstransform breaks jsxtransformer", "body": "caused upgrading downgrading jstransform sourcemap reverting old dep fixes jeffmo", "num": "1454", "d": "4/2014"}, {"title": "skip prompting installing chrome devtools already installed", "body": "right print message console every time according chrome document easy way achive devtools script insert content tag documentgetelementsbytagname head first child reactjs detect existence content tag delete temp content tag", "num": "1451", "d": "4/2014"}, {"title": "idea pernode dom configuration", "body": "highly unscientific delta nt significantly affected addition behaviors proper contains bunch attributes currently react also duplicates list node names exist create dom components ps less complete list nodes attributes exception obscure ones nt listed deprecatednot standard raw gz sizes buildjsxtransformerjs buildreactwithaddonsjs buildreactwithaddonsminjs buildreactjs buildreactminjs raw gz sizes buildjsxtransformerjs buildreactwithaddonsjs buildreactwithaddonsminjs buildreactjs buildreactminjs", "num": "1449", "d": "4/2014"}, {"title": "attributes removed set null updates", "body": "behavior attributes value inconsistent first render present element subsequent renders attribute sticks around empty value example renders expect value changes first render get case likely others empty attribute unintended side effects see fiddle", "num": "1448", "d": "4/2014"}, {"title": "expose reactlinkproptypeslink", "body": "reactaddons exposes linkedstatemixin best way expose reactlinkproptypeslink options think mutate reactproptypes sideeffect including mixin expose directly reactaddonsproptypes", "num": "1447", "d": "4/2014"}, {"title": "let reacttestutilssimulateclick work nondom components", "body": "sebmarkbage suggested avoid silly tagname requirement anything resolve node getdomnode work", "num": "1445", "d": "4/2014"}, {"title": "avoid escaping url attribute", "body": "hi wondering way avoid url attribute escaping react", "num": "1444", "d": "4/2014"}, {"title": "fix grunt test coverage", "body": "would nice fix make sure using lcov format report back codeclimate", "num": "1442", "d": "4/2014"}, {"title": "bump", "body": "due bug see", "num": "1438", "d": "4/2014"}, {"title": "invariant violation reactmount two valid unequal nodes", "body": "happen master sorry could make reproducible test case stack trace master generaly happen things main component render first time componentdidmount get data via ajax response update state render replaced another component moment later call react trap load event previous exception happen appreciate feedback help issue public link debuging could share public someone want see action let know pls", "num": "1436", "d": "4/2014"}, {"title": "issue running jasmine tests getting typeerror instanceof called object invalid prototype property", "body": "hi new react maybe missing something obvious using following relevant node modules gulpkarma karmareactjsxpreprocessor karmajasmine karma using following bower dependencies react bindpolyfill polyfill phantomjs bind method test file getting stack trace insight appreciated", "num": "1433", "d": "4/2014"}, {"title": "add media attribute", "body": "media element tag media attribute specify mime type target content helps browser know attempt download url skip support format", "num": "1432", "d": "4/2014"}, {"title": "nullifying value return component indeterminate state", "body": "expected given component value property transitions float expect attribute tag become unspecified putting control indeterminate state state animating barbershop pole pattern actual transitioning float value attribute tag becomes test case", "num": "1431", "d": "4/2014"}, {"title": "animation", "body": "great react support native element animate instead csstransitiongroup", "num": "1430", "d": "4/2014"}, {"title": "mixins input form validation", "body": "understand react focuses v mvc think primary focus web view support interaction user nice react support input form validation stumbled across stackoverflow demonstrates mixins make easier handle user input validation react plans add html form related tools like something official", "num": "1429", "d": "4/2014"}, {"title": "reacttools appjsx changed never ends", "body": "hi guys created issue stack overflow", "num": "1427", "d": "4/2014"}, {"title": "string values input typenumber amp input typerange", "body": "enhancement proposal create make etargetvalue return value type number input types amp reasoning input type number would expect value string duh thing might historical attainment linkedvalueutils seems different handling handling string amp boolean values init state number amp use valuelink initialize input properly second change input value change string possibly explode something say child property depending type number partial work around would using according docs demonstration number amp range inputs react amp vanilla js jsbin", "num": "1425", "d": "4/2014"}, {"title": "server side helper make somehow componentwillmount like method", "body": "hello nt want bother make big changes something like would like know intention something like application router route ran gathers data views needs instance views well little bad bigger applications new design route instance view subview load data needs subview b loads data needs componentwillmount called server notice server client uses exact routes views see live example thanks understanding", "num": "1423", "d": "4/2014"}, {"title": "dom updates minimal moving last child first place", "body": "rerender requires last child moved first place update dom minimal instead removing child question reinserting children removed readded instead bad two reasons unnecessary churn dom slowing things children contains video element video reset using keys shuffle children around pretty common implementing infinite scroll react dom element reuse work screencast showing dom changed scroll notice scroll first element correctly removed top inserted bottom scroll back instead moving last element react moves four using react", "num": "1422", "d": "4/2014"}, {"title": "react use markup wrap toplevel html setting", "body": "broken nt use setting html toplevel component editor incompatible anyway preview shows problem", "num": "1421", "d": "4/2014"}, {"title": "make possible use harmony transforms browser script tags", "body": "already option enabled browser transform export function takes option use reactrails et al nt make possible pass options blocks let since js data types html let ed attribute single option right need support options added easily come", "num": "1420", "d": "4/2014"}, {"title": "react handle click event mobile safari", "body": "get react handle click events element mobile safari see fiddle example browsers tested click alert triggered three elements tappedclicked except mobile safari tested ipad mini test example first element handled directly using use react second element rendered using react element trigger click alert tapped mobile safari third element button also rendered using react trigger click alert tapped mobile safari would indicate problem react since method works element works using react", "num": "1418", "d": "4/2014"}, {"title": "componentdidmount runs", "body": "hi im trying something always render componentdidmount called state change render way run method always render even state prop change", "num": "1416", "d": "4/2014"}, {"title": "add support html manifest attribute", "body": "could useful generating static html pages", "num": "1414", "d": "4/2014"}, {"title": "state set setstate callback componentwillmount", "body": "think alluded yungsters comment merged call callback called state set using react", "num": "1413", "d": "4/2014"}, {"title": "rendering component dom fails", "body": "following line inside fails dom yet reproing easy tested current master", "num": "1411", "d": "4/2014"}, {"title": "update refs example code use onchange", "body": "mentioned comments", "num": "1408", "d": "4/2014"}, {"title": "ondragleave event triggered enter amp leave", "body": "title using latest chrome react", "num": "1401", "d": "4/2014"}, {"title": "reactmount two valid unequal nodes", "body": "seems mainly cause invalid nesting tags etc know issuesprs regarding already afaik trying solvedetect seems reasonable improve noninformative error message meantime ps probably seen people get bitten think", "num": "1400", "d": "4/2014"}, {"title": "provide react cdn supports also https", "body": "using react page served https currently requires packaging app since oficial cdn supports http would nice also supported thanks", "num": "1399", "d": "4/2014"}, {"title": "reactrendercomponenttostaticmarkup nt generate selected attributes valuedefaultvalue", "body": "using static markup unit testing newforms output also like support using render forms static html adding nt generate static html appropriate attributes however get generated manually add components get warning messages console using development build react possible support use cases without manually setting attributes live warnings jsfiddle showing static html output", "num": "1398", "d": "4/2014"}, {"title": "refs break add domelements variables", "body": "react var render function thisrefs myref returns correct object thisrefs yourref returns undefined", "num": "1397", "d": "4/2014"}, {"title": "rendercomponent callback little awkward", "body": "right write nt defined callback called callback currently called synchronously component instance available obvious perhaps always call callback asynchronously cc", "num": "1396", "d": "4/2014"}, {"title": "add support svg tag", "body": "", "num": "1395", "d": "4/2014"}, {"title": "refs updated even shouldcomponentupdate returns false", "body": "reordering list components changing refs refer index nothing else would nice refs updated nt appear currently", "num": "1392", "d": "4/2014"}, {"title": "warn shouldcomponentupdate returns undefined", "body": "wrote accident puzzled components nt updating undefined treated false would nice warn case", "num": "1391", "d": "4/2014"}, {"title": "problem shouldcomponentupdate", "body": "using ajax request gets html updates state looks like works see little test top comparing next state current state see ajax request needed fired problem nextstate thisstate equal even show returning variable state nt happen update update section simply calling update function lives inside mixin inside another component top level component state passed prop wondering setting state mixin problem wondering going want ajax request fired twitter url changed things see current file", "num": "1388", "d": "4/2014"}, {"title": "function props state", "body": "comes discussion several people around animation feel like important enough warrant issue already insist pure function taking pass compositecomponent way write time still call internally able react even user able test water would valuable future example heard also solve problems pendingstate familiar issue jordwalke sebmarkbage petehunt", "num": "1387", "d": "4/2014"}, {"title": "xss facebookgithubio xd hahaha", "body": "screen shot", "num": "1383", "d": "4/2014"}, {"title": "rfc add doc tips shouldcomponentupdate false nonmanaged nodes", "body": "seems like something bunch people would find useful personally nt aware possible solution", "num": "1382", "d": "4/2014"}, {"title": "proposal porting react mixin apis generic primitive", "body": "currently react mixins allow multiple mixins implement method multiple mixin whitelist would like decouple mixin system react therefore need way solve without whitelist idea every mixin call super allow predictable chaining mixin mixins function would essentially create new prototype chain mixin set functions stacked top order object treated prototype function treated classconstructor gets static methods prototype merged javascript var componentdidmount super end calling empty function placed mixin consolelog class b static getqueries super end calling empty function placed mixin consolelog b componentdidmount consolelog b super class c extends mixin b static getqueries super consolelog c componentdidmount super consolelog c cgetqueries b c new c componentdidmount b c issue warnings mixin function called overlapping methods missing super calls solvable confusingcomplex issues javascript class c extends mixin b state intializer overrides state initializer base class current react class system merges two also valid since nt property initializers yet based typescript syntax state b true componentdidmount forgot put super call warning since mixin logic happens class created clear mixins escape hatch work around reusability limitations system idiomatic react idiomatic react reusable code primarily implemented terms composition inheritance", "num": "1380", "d": "4/2014"}, {"title": "need way force component reload", "body": "building component allows create social widgets problem run adding google plus twitter buttons remove react node id parse using google plus twitter api makes perfect sense way ignore fact react ca nt find node id rerender whole component situation would great component live updates type info gets invariant violation ca nt update widget little code case confused componentdidupdate function fbxfbmlparse twttrwidgetsload gapiplusonego gapiplusgo gapipagego componentdidmount function twttrwidgetsload fbxfbmlparse gapiplusonego gapiplusgo gapipagego functions remove react node id trying update twitter share button anything else user types information throws error", "num": "1377", "d": "4/2014"}, {"title": "unmounting svg title tag throws exception", "body": "example jsbin clicking first time works mounts svg clicking button unmount recttitle react throws exception clue get around help much appreciated thanks advance", "num": "1376", "d": "4/2014"}, {"title": "rfc pointer events", "body": "stumbled across days ago ms seemingly pushing become standard looking solutionsimplementations seem align practically seems like great thing support even react nt provide core polyfill simply adding support events users free polyfill using library choice seems like great thing nt mind providing pr simple matter agree", "num": "1375", "d": "4/2014"}, {"title": "error using amp strings", "body": "fails unexpected token illegal think problem safe html implementation jsx reactdom var hello reactcreateclass render function return hello thispropsname reactrendercomponent documentbody", "num": "1374", "d": "4/2014"}, {"title": "implement better refs api", "body": "ref api broken several aspects refer thisrefs myname strings closure compiler advanced mode compatible nt allow notion multiple owners single instance magical dynamic strings potentially break optimizations vms needs always consistent synchronously resolved means asynchronous batching rendering introduces potential bugs currently hook get sibling refs one component refer sibling context reference works one level breaks ability wrap one encapsulation ca nt statically typed cast use languages like typescript way attach ref correct owner callback invoked child ref attached callback issued current owner think solution must ultimately kind first class ref passed around refs chained create multiowner refs efficiently creating object ref also get rid keeping track owners descriptors saving perf common idiomatic case using refs secondary goal may may important idea making resolution refs asynchronous respond batched flushreconciliation concept first class ref basically reference object nt exist yet luckily first class notion language already called promise create new ref instance promise object eventually resolve actual instance javascript class foo mydivref reactcreateref handletick thismydivrefthen mydivnode gt thissetstate width mydivnodeoffsetwidth render return since builds top promises would able get asyncawait language features allow us something like solves use cases afaik asynchronous api little difficult deal makes less weird alternative batching involved unsolved problem refs update point different instance case promise would need reresolved promises good enough ultimately need something like observable handle multiple values ca nt wait spec though maybe allow promises reset call get new value", "num": "1373", "d": "4/2014"}, {"title": "warn using dangerouslysetinnerhtml incorrectly", "body": "happened times resulting confusion let either warn maybe allow string cc syranide", "num": "1370", "d": "4/2014"}, {"title": "warning second param reactdom undefined", "body": "sometimes forget set first param lets say parameters write giving warning second param undefined first param string react component", "num": "1369", "d": "4/2014"}, {"title": "special lifecycle hooks called using", "body": "using component special lifecycle hooks called think would useful nice know transition occurs state transition owns guess special methods meant expose states make work unless use way css classes applied transition documentation states reacttransitiongroup basis animations children declaratively added removed example special lifecycle hooks called example using one would expect special hooks called seems nt", "num": "1368", "d": "4/2014"}, {"title": "show warning throw error event handler function", "body": "could simplify debugging lot easy change believe whenever passed event handler etc valid function example warn developer", "num": "1367", "d": "4/2014"}, {"title": "setprops server render", "body": "tl dr nt seem work server since mounting nt really thing server appears ca nt update properties component instance tl dr positive react way would scenario let try explain got isomorphic code handles clientside actions code course runs server well render react pages browser strategy using react mount root component update new data comes server requests socket connections etc key client gets mostly empty component updates data comes server otherhand trouble code since server never mounts component hard time updating component properties returns error requires component mounted far aware nt possible server currently passing whole render process custom render function attached react componet manually merges new data object allows isomorphic code base since manually merging objects feels dirty brittle would sane person mutate component properties prior rendering server", "num": "1361", "d": "4/2014"}, {"title": "debounce onchange", "body": "hello problem text input onchange event need debouncing user input debounce onchange handle etarget opportunity extract input value hack situation example", "num": "1360", "d": "4/2014"}, {"title": "serve react unminified docs site", "body": "sometimes helpful playground grokking react features like use live editor docs site sketch ideas see code called library huge help site react source served unminified apparent going covers", "num": "1359", "d": "4/2014"}, {"title": "css property values strings nt px appended", "body": "weird gets turned think add value actual number", "num": "1357", "d": "4/2014"}, {"title": "touchmove nt fire removed element", "body": "ontouchstart handler removes div maybe replaces another one place useful certain draggable interactions ontouchmove handler nt fire events detached element longer bubble document probably bind touchmove handler element receives touchstart instead delegating document sort related cc merbs eater", "num": "1355", "d": "4/2014"}, {"title": "setstate componentwillmount render componentdidmount causes invariant violation", "body": "situation simultaneously render multiple instances component componentwillmount check made one props passed component event may raised causes components update state like example problem seems one components render method called component yet mounted call setstate throws exception uncaught error invariant violation findcomponentroot unable find element probably means dom unexpectedly mutated eg browser try inspecting child nodes element react id", "num": "1353", "d": "4/2014"}, {"title": "allow components optout reactinputselection handling", "body": "experimenting building new text editor component atom noticed ms per keystroke spent restore selection functionality could add property input like something along lines prevent dom access code requires flame graph showing access happens bit confusing due stack depth limit chromium profiler highlighted operations question", "num": "1350", "d": "4/2014"}, {"title": "better debugging duplicatedkeys invariant violation", "body": "would great tool could pull report elements virtual dom match given key would really help tracking causes error messages like invariant violation flattenchildren encountered two children key children keys must unique", "num": "1349", "d": "4/2014"}, {"title": "syntax highlight atomio", "body": "", "num": "1348", "d": "4/2014"}, {"title": "problem using jsx", "body": "jsx included code like given following error console seemed work added line return render function", "num": "1344", "d": "4/2014"}, {"title": "add support svg enablebackground property", "body": "", "num": "1343", "d": "4/2014"}, {"title": "consider providing default key dynamic children", "body": "many times performance issue find things like would make sense something like default", "num": "1342", "d": "4/2014"}, {"title": "gives problems", "body": "throws error tag nt exist rendered dom js jsx reactdom var hello reactcreateclass render function return thispropsx null reactrendercomponent documentbody reactrendercomponent documentbody thanks matthewwithanm pointing version", "num": "1341", "d": "4/2014"}, {"body": "works fine chrome mac probably problem jsfiddle", "d": "4/2014"}, {"body": "works fine well happens go directly going close unless find systemic problem", "d": "4/2014"}, {"body": "two nested elements html disallows please post minimal example showing problem", "d": "4/2014"}, {"body": "nested forms component post example child components necessary parent examplecomponentclass reactcreateclass onsubmit function e code componentwillmount function code render function return rendering component examplecomponentinstance reactrendercomponent documentgetelementbyid someid", "d": "4/2014"}, {"body": "please post working example jsbin jsfiddle reproduces problem", "d": "4/2014"}, {"body": "well tried making one looks similar code however problems component runs inside twitter bootstrap tab", "d": "4/2014"}, {"body": "going close let know make example problem", "d": "4/2014"}, {"body": "need bootstrap order repro problem okay include well", "d": "4/2014"}, {"body": "sorry found larger containing form nt noticed", "d": "4/2014"}, {"body": "use work correctly wo nt quote really warn open adding warning", "d": "4/2014"}, {"body": "oops accident let fix", "d": "4/2014"}, {"body": "ok fixed npm published patch react packagejson coming next", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "cc zpao", "d": "4/2014"}, {"body": "zpao updated roughly copy behaviors would probably look also cleared list html dom names reactdom constructed improved dom config instead result total bytes would dare say surprisingly accurate reflection expect added bunch attributes currently supported react react currently handful nonconformingdeprecated attributes currently listed config least seems surprisingly viable especially sense scalablemaintainable even considering svg nt really much common dom also possibility make dom nodes output properties default equivalent thus would need ship full config production build could use warn debug personal opinion sending invalid props nodes either intentional nt know bad practice never know happens valid property given node never rely strict never wrong", "d": "4/2014"}, {"body": "oh man discovered issue want", "d": "4/2014"}, {"body": "addons say", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "big deal forget using library scrapping react html generated files looking also nicer read", "d": "4/2014"}, {"body": "perhaps nt escape slashes see", "d": "4/2014"}, {"body": "seems good story back decision", "d": "4/2014"}, {"body": "gathered escaping seems extreme fear xss particular already solved escaping attribute values properly quoted pose danger wellconstructed html might inclined agree staying safe side argument quoting used attack properly quote attributes sidenote perhaps disallow possibly protocols anchor href", "d": "4/2014"}, {"body": "also would cool add object concise methods visitors plugged active", "d": "4/2014"}, {"body": "andreypopp object concise methods manually enable browserify config", "d": "4/2014"}, {"body": "could related also advertised ircchannel want direct communication", "d": "4/2014"}, {"body": "syranide yes message cause looks different first image unmounted later load happen uses previous dom representation old reactid already used another node thanks idea irc write today", "d": "4/2014"}, {"body": "hard tell could run bug nt remember exact cause bug something like root child issue update root root directly issues update child setprops setstate forceupdate child updates afterrwards initial update root propagate usual causing child update causes dom incorrectly overwritten sounds like could related totally", "d": "4/2014"}, {"body": "nope rather complex case", "d": "4/2014"}, {"body": "right stop irc could take look link ok nt think way send private information via github", "d": "4/2014"}, {"body": "spicyj zpao error apparently related seems like really update error message helpful", "d": "4/2014"}, {"body": "want submit pr close favor", "d": "4/2014"}, {"body": "ok never mind nt look like react issue tried removed polyfill tried chrome works", "d": "4/2014"}, {"body": "upon research found issue including completeness", "d": "4/2014"}, {"body": "hmm got media type mixed media exists nt thought guess nt need", "d": "4/2014"}, {"body": "first time contributing react project probably take time get around giving careful look see proposed solution acceptable one", "d": "4/2014"}, {"body": "hey danielschonfeld thanks pitching try fix left general comments writing code tests commits see introduced new attribute named aliased concerned degree breaks standard client programmers expect able set value dom control setting either property specialcasing element require set instead breaks away nt time look problem yet take say grain salt could plain old fixable bug respect elements indeterminateness property", "d": "4/2014"}, {"body": "interesting never heard spec looks quite new probably nothing another year two questions though sure much familiar use cases support scenario animated effects fading shifting required synchronization animations animations scripted actions removing table row dom animations completed mean animation somehow magically animates dom elements removed could huge also spec allow us define physicsbased animation general arbitrary animations js", "d": "4/2014"}, {"body": "familiar implementation spec maybe able receive answers", "d": "4/2014"}, {"body": "awesome asked two questions discussion group might might gamechanger react currently hard things animation unmounting physicsbased animation two supported cool issue draft wo nt stable perhaps another two years brief look seems easily fittable react lifecycle events case thirdparty integration time comes naturally feasible react changes necessarily might worth let zpao decide whether temporarily close issue edit thanks headsup edit update based replies received wo nt builtin facilities ease physicsbased animation nt surprising hey hoped animation unmounting planned api wo nt support animation removal however player events allow removal deferred removal completed bad api makes sense reason react ca nt defer whatever animation wrapper end using api like offload css animation css", "d": "4/2014"}, {"body": "nice react support input form validation random guy think would bad course tons nice schema validation type coercion libs already example could write wrapper mixin publish npm registry separated module", "d": "4/2014"}, {"body": "nt think input validation ever core react simply speaking something vanilla js handles need impose reactspecific api convenience mixin actually encouraged makes things less obvious", "d": "4/2014"}, {"body": "chenglou hmmm shame ask libraries facebook instagram use form validation input validation uis", "d": "4/2014"}, {"body": "novabyte like saw mixin vanilla js let way vanilla js reusable js input validation nt special category least react need special case facebook runs fine without special handling", "d": "4/2014"}, {"body": "chenglou seems odd using form validation mixins large web applications nt see value extracting code something reusable useful react addon part react core advocating pull third party libraries react handle form validation since react documentation advocates building forms examples require input field kind seems odd interactive aspect web ui least well catered library close issue shame plans helper mixins kind help form validation web ui", "d": "4/2014"}, {"body": "novabyte maybe miscommunicated nt mean necessarily extract mixin js method reason use handler directly got say backbone app side also reuse wrapperless vanilla js backbone app would nt able reuse code reactspecific", "d": "4/2014"}, {"body": "chenglou guess going wrong trying use react without frameworks libraries build web ui rest app guess look using backbone something else fill gaps build model validate etc", "d": "4/2014"}, {"body": "react much better jquery fullstack system unfortunately nt time build support andor endorse fullstack solution time relying community see wiki page future probably build tooling better enable community efforts solve specific problem check", "d": "4/2014"}, {"body": "try workaround componentwillreceiveprops instantiate component pass new props setprops method never tried way also reactasync seen reactquickstart andreypopp already", "d": "4/2014"}, {"body": "interesting think stick reactasync problem see dependency fibers last time tried nt work way need without fibers", "d": "4/2014"}, {"body": "componentwillmount method called server rendering let know missing something", "d": "4/2014"}, {"body": "yeah unfortunately case right could look finding actual minimal set mutations reordering list think reduces longest increasing subsequence", "d": "4/2014"}, {"body": "every policy causes node removed dom making decision actually remove node impossible know ones developer intends removed dom unfortunate dom api nt provide better way perform reordering without side effects maybe create way mark node pivot point reorderings occur around", "d": "4/2014"}, {"body": "see also way keep nodes iframes etc attached dom arranging nodes around also one could experiment optimizing common cases common head common tail", "d": "4/2014"}, {"body": "like idea specialcasing common operations like moving firstlast element lastfirst position probably take care use cases without introduce complex algorithms extra apis", "d": "4/2014"}, {"body": "solve problem btw specialcasing certain tags going take care case special tags occur inside children reordered example changing move even though video like children", "d": "4/2014"}, {"body": "well could similar used specify js language versions firefox", "d": "4/2014"}, {"body": "guessing dupe try adding rendering anything confirm case", "d": "4/2014"}, {"body": "spicyj seem fix see updated jsfiddle", "d": "4/2014"}, {"body": "ahh believe touchstart listener mobilesafariclickeventplugin nt ever get attached add note issue close one though workaround set css style element ios safari trigger click event", "d": "4/2014"}, {"body": "ok yep add works would cool fixed anyways thanks quick response", "d": "4/2014"}, {"body": "function looking componentdidupdate run updating occurs initial render", "d": "4/2014"}, {"body": "jkimbo right props change see componentwillreceiveprops closing", "d": "4/2014"}, {"body": "necessarily blocker related", "d": "4/2014"}, {"body": "good catch nt fix guessing wo nt fix afterwards", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "like living edge steadicat thumbsup", "d": "4/2014"}, {"body": "yup also running latest version", "d": "4/2014"}, {"body": "lol", "d": "4/2014"}, {"body": "sorry quite sure mean could elaborate little bit", "d": "4/2014"}, {"body": "oops little test jsbin works pretty well turns something goes wrong code issue sorry rudeness", "d": "4/2014"}, {"body": "repro nt think invalid nesting cause error", "d": "4/2014"}, {"body": "spicyj debugging session irc encountered error turns browser turned assume react sometimes happened upon second found element expecting ie first", "d": "4/2014"}, {"body": "nt believe browsers though nested links confused nt believe newlycreated elements datareactid attributes", "d": "4/2014"}, {"body": "demo showing datareactid nt end duplicated case let know see otherwise", "d": "4/2014"}, {"body": "reproduced ie yes nt may still make sense warn could cause", "d": "4/2014"}, {"body": "curious thank", "d": "4/2014"}, {"body": "issue", "d": "4/2014"}, {"body": "oh informed cdnjs guess would still better facebook hosted http could least link cdnjs version", "d": "4/2014"}, {"body": "jakubholynet talked briefly reason promote fb cdn control publish releases immediately aware https issue cdnjs often significant delay believe issue let answer authoritatively information meantime least", "d": "4/2014"}, {"body": "ok thank", "d": "4/2014"}, {"body": "right way file sent via fbme link bit hacky plan action make better supporting redirect use domain less likely blocked nt gotten around yet meantime use cdnjs", "d": "4/2014"}, {"body": "great thanks", "d": "4/2014"}, {"body": "assuming would problem serverside rendering well except unlikely initial page react take nodes fast enough would unlikely significantly affected insin btw warnings following code source something going change apparently", "d": "4/2014"}, {"body": "unfortunately hard fix right easier upcoming refactors sebmarkbage planning", "d": "4/2014"}, {"body": "see pull request", "d": "4/2014"}, {"body": "code works fine example", "d": "4/2014"}, {"body": "shoot tag actually problem ref failing need isolate better", "d": "4/2014"}, {"body": "also say passing result first parameter feels common notable exception jquery helper functions documentation either helps alleviate somewhat", "d": "4/2014"}, {"body": "context setstate makes sense agree nt intuitive rendercomponent", "d": "4/2014"}, {"body": "fair intuitive setstate", "d": "4/2014"}, {"body": "problem call nt swap state completely creates copy state given changes merged means nt give new url property keep old one could see adding call fixes", "d": "4/2014"}, {"body": "updating url state though updated separate form even tested adding url back state like suggested nt change", "d": "4/2014"}, {"body": "looks like mutating thisstatetwitter directly react nt deepcopy state want able compare old new state treat everything state immutable copy object updating something like using underscore clone could also use jquery similar helper", "d": "4/2014"}, {"body": "mentioned end api change nt considered isolation life cycle events correspond prevcurrentnext every stage", "d": "4/2014"}, {"body": "cf pending state updates may confusing store pending state updates directly thisstate", "d": "4/2014"}, {"body": "fair entire page less designed run arbitrary javascript testing purposes way change value text box via query string addition implementations markdown designed accept arbitrary html going call wo nt fix", "d": "4/2014"}, {"body": "note nt need typing enough", "d": "4/2014"}, {"body": "khanacademy fb woah", "d": "4/2014"}, {"body": "pointing compile typescript useful classes make easy people using typescript", "d": "4/2014"}, {"body": "good point nt think way create composable interfaces way typescript see alternatives", "d": "4/2014"}, {"body": "typescript way see implements something similar propose would something like typescript declare function applymixins target mixins void declare function supermixin class componentdidmount mymethoda return class b componentdidmount mymethodb return b class c implements b componentdidmount void supermixin componentdidmount consolelog c mymethoda gt string mymethodb gt string applymixins c b already tried wrap react logic class typescript usage obtained following result similar way way mixin roadmap typescript clue plan implement guess soon", "d": "4/2014"}, {"body": "nt see better way fdecampredon recommending notice contextual keyword would given ts error well used class", "d": "4/2014"}, {"body": "luckily mixins completely optional use whatever system want presumably typescript would build similar features use even frowned upon overused completely optional handwave punt", "d": "4/2014"}, {"body": "road map react soon", "d": "4/2014"}, {"body": "attach need way modifying nodes owned react node created react nt care", "d": "4/2014"}, {"body": "ended works looks horrible", "d": "4/2014"}, {"body": "either work", "d": "4/2014"}, {"body": "future record using seems preferable initial solution creating node owned react although result", "d": "4/2014"}, {"body": "speaking spicyj irc seems like neatest solution problem something like untested work generic container like", "d": "4/2014"}, {"body": "nt think completely work react still assume wo nt remove root element add another wrapper around fine", "d": "4/2014"}, {"body": "spicyj ah right confused thinking progressive enhancement jquerylibs usually modify children updated code", "d": "4/2014"}, {"body": "adding extra div something tried still causes problems trying live update change url sent mailbox iphone wed apr andreas svensson notifications githubcom wrote spicyj ah right confused thinking progressive enhancement jquerylibs usually modify children reply email directly view github", "d": "4/2014"}, {"body": "zackify yeah need always return false need change url need make url key either instance possibly rootdiv work need add check shouldcomponentupdate", "d": "4/2014"}, {"body": "ah react nt let unmount html element nt believe workaround right sorry cc petehunt", "d": "4/2014"}, {"body": "cover also cc joshduck think something point", "d": "4/2014"}, {"body": "zpao right saw issue forgot apparently basically discussion guess difference becoming proper standard meaning reason support prefixed events polyfills actually ready used browsers today seems quite straightforward point believe right path", "d": "4/2014"}, {"body": "close issue keep going go ahead adding lowerlevel polyfill might able take allow events added", "d": "4/2014"}, {"body": "nt mind providing pr simple matter agree syranide yes please", "d": "4/2014"}, {"body": "sebmarkbage sure", "d": "4/2014"}, {"body": "html entities interpreted within jsx attribute values use enclose string curly braces use ordinary js string parsing", "d": "4/2014"}, {"body": "thanks quick answer clarification makes sense", "d": "4/2014"}, {"body": "spicyj hmm may bit dirty escaping amp almost universally safe form \u00edt concerns developer code user input browsers deal gracefully simply reading treating way feels like logical thing based nondangerous nature makes lot edgecases visual eyesore ie urls variables short texts amp virtually guaranteed confused actual htmlentity generally features ambigious nature seems sane enough without detrimental obvious way", "d": "4/2014"}, {"body": "top could build dynamic refmap lazily creates ref promises allows easy creation refs sets data also makes nicer upgrade path existing code assumes strings javascript class foo refs new reactrefmap handletick thisrefsget mydiv mydivnode gt thissetstate width mydivnodeoffsetwidth render return also probably need provide synchronous api upgrade path similarly need ref maps", "d": "4/2014"}, {"body": "makes lot sense though guess totally convinced need async expect uses mountready handlers though suppose possible dom event handler called update pending", "d": "4/2014"}, {"body": "plan descriptors mounted one place", "d": "4/2014"}, {"body": "descriptors mounted one place refs guess warning maybe dom events want batch timers data fetching events goal flush happens raf therefore callback could refs pending additionally behavior didmount didupdate handlers currently undefined regards fire relation children therefore refs example componentdidupdate guaranteed fire children fully mounted", "d": "4/2014"}, {"body": "actually current state since queued dom generation queue guess guaranteed right may able preserve behavior sure alternative api would force refs extracted two lifecycle hooks store ever might lead memory leaks", "d": "4/2014"}, {"body": "second thought didmountdidupdate enough keep ref handles uptodate since child choose unmountremount descriptor point events enough potentially ref lifecycle callback could connected owner instance flexible first class ref guess however want something like resize handle child actually mountedremounted might troublesome set componentlevel subscription child ie call point however maybe handled explicit callback", "d": "4/2014"}, {"body": "mean child never mounts argument ref hang never resolve sounds odd", "d": "4/2014"}, {"body": "yea", "d": "4/2014"}, {"body": "suppose promise rejected next flush nt lead ref resolved", "d": "4/2014"}, {"body": "presumably thing happen ref nt used guess would make reasonable api unless missing something ref object wo nt know component belongs alternatively component wo nt list refs thus ca nt know mark rejected", "d": "4/2014"}, {"body": "every ref object go resolved unresolved back track way attachdetach ref eg unmounted act calling register ref pending next flush done pending refs gets callback invokes", "d": "4/2014"}, {"body": "api wrote way get component instance dom node means ca nt call methods etc child components intentional", "d": "4/2014"}, {"body": "actually imagine component instance reactdomcomponent could become dom node still controversial though alternative empty object getdomnode method", "d": "4/2014"}, {"body": "well sometimes want ref composite right nt thought much sounds like odd plan uniform across types browser components right pretty nice", "d": "4/2014"}, {"body": "yes ref composite would still composite instance unless stateless component would allowed ref resolve null problematic api since leaks internals component drills multiple levels abstractions without explicitly allowing expected return single node composite returning fragment multiple nodes also needs go base class every composite even art composites render tree composites markdown composites whatever unless every component wants required optin special dom base class nt guarantee ref method though think much better api would would work even instance real dom node would return", "d": "4/2014"}, {"body": "case need figure wrapper components dom node instances diverge composites going odd write expecting dom node get composite return", "d": "4/2014"}, {"body": "yea wonder passthrough reactdominput nt really make sense something like would cool", "d": "4/2014"}, {"body": "alternative idea make descriptors refpromises also provides nice reset functionality ref ever swapped javascript handleclick thisfoothen inst gt instdox render thisfoo ugh sideeffect render puke return also works nice multiple owners", "d": "4/2014"}, {"body": "perspective seems like name enough persuade lost souls turn back way easily guessed way know first place explicitly looked necessarily read docs seems like serves clutter confuse perfectly valid feature possibly presume broken solution problem obviously technically easy fix allow old syntax strings perhaps guys philosophical reasons wanting keep way ps nt mind providing pr need know ok sending plain strings", "d": "4/2014"}, {"body": "nt think going sorry see", "d": "4/2014"}, {"body": "put little jsfiddle demonstrate", "d": "4/2014"}, {"body": "believe lifecycle methods nt available cc petehunt confirm", "d": "4/2014"}, {"body": "thanks way let component know transition occurs guess animations need better explanation docs clear use animations performed special callbacks handling transitions timing", "d": "4/2014"}, {"body": "see intentional sometimesnull event handler", "d": "4/2014"}, {"body": "actually allowing disallowing", "d": "4/2014"}, {"body": "would mean user would forced specify instead simply omitting unless convert reason approach take components defaulting handlers empty function could make default function warns executed would meet requirement", "d": "4/2014"}, {"body": "oh forgot obvious solution declare type prop warn passed prop function exactly want", "d": "4/2014"}, {"body": "ohh thanks", "d": "4/2014"}, {"body": "create new component instance time data updated client get new data call reactrendercomponent app data data element sun apr pm lee olayvar notifications githubcomwrote tl dr componentsetprops nt seem work server since mounting nt really thing server appears cant update properties component instance tl dr positive react way would scenario let try explain got isomorphic code handles clientside actions code course runs server well render react pages browser strategy using react mount root component update new data comes server requests socket connections etc key client gets mostly empty component updates data comes server otherhand trouble code since server never mounts component hard time updating component properties compsetprops returns error requires component mounted far aware isnt possible server currently passing whole render process custom render function attached react componet manually merges new data componentprops object allows isomorphic code base since manually merging objects componentprops feels dirty brittle would sane person mutate component properties prior rendering server reply email directly view github andrey popp gmailcom", "d": "4/2014"}, {"body": "creating new components expensive exercise figured optimally wanted components live especially since creating new ones would destroy life cycles", "d": "4/2014"}, {"body": "component pass rendercomponent descriptor containing little json object specifying type props component want render rendercomponent simply update props run react entire diffing algorithm update dom necessary changes see componentwillunmountcomponentwillmount methods called least top level change props way fact reactrendercomponent ends calling reactmountjs implementation detail using rendercomponent instead setprops generally preferred declarative apis make app easier reason", "d": "4/2014"}, {"body": "bigger issue ca nt workaround scenario updating value input right away cause react actively revert old value readonly thus later update value cursor reset always end need debounce someone typing supersonic become issue also react takes care case anyway unless handler something ridiculously expensive", "d": "4/2014"}, {"body": "solution", "d": "4/2014"}, {"body": "think would helpful", "d": "4/2014"}, {"body": "think okay want send pr", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "chime mentioned chat last time think great solution means providing raw cssstring would mean providing raw cssstring makes sense logically however suddenly two different outcomes component passes value asis styleobject see intuitive way sure enforcing numbers technically right solution obvious new users document thoroughly potentially error prone user base accustomed html especially designers would assume nt mind making right way seems like way enforce runtime without developer burden understood entirely optional feature eyes seems kind fragile", "d": "4/2014"}, {"body": "dom spec kind strange", "d": "4/2014"}, {"body": "sorry strange unlike mousemove touchmove always fires element received touchstart limited testing browsers happily send events removed element", "d": "4/2014"}, {"body": "test device chromefirefox touch events enabled touch monkey disappear move finger get alert", "d": "4/2014"}, {"body": "hmmmm maybe nt supposed work sort feel like still work react well browser though", "d": "4/2014"}, {"body": "interesting summary mounting something like b calls setstate b componentwillmount dom wo nt populated html yet suppose setstate call queued componentdidmount called cc sebmarkbage", "d": "4/2014"}, {"body": "two keystrokes sure top head would called", "d": "4/2014"}, {"body": "sure keystroke stack depth limit flame graph creating confusion center single call pyramid could wrong think first segment reading selection information second restoring previous selection", "d": "4/2014"}, {"body": "well see mixininitializeall appears separately two get selectionstart calls two separate updates occurring sure exactly triggering updates perhaps combine one make things faster sounds like used maintain selection state avoiding moving reconciliation jordwalke vjeux know", "d": "4/2014"}, {"body": "yeah likely triggering many updates try reduce typing several things change underlying model cursor moves screen lines change etc tried using delay update seemed impact responsiveness negatively try way batching updates together without relying event loop anyway point taken probably lot room end improve things said trying make editor performance fast possible would great able opt selection restoration specific case know nt need maybe could restore selection know input removed readded dom", "d": "4/2014"}, {"body": "right problem nt know save selection removing element something along lines currently proactive react event handler things magically batched already try requiring like react combine setstate calls one", "d": "4/2014"}, {"body": "boom really appreciate tip really cleaned flame graph things looking much sane annotated portion associated selection restoration much clearer time going feel better potential optimize areas well", "d": "4/2014"}, {"body": "great hear sorry part publicdocumentedsupported api yet working making automatic raf batching work well also open expose batchedupdates function", "d": "4/2014"}, {"body": "also remind run nodeenv production code faster", "d": "4/2014"}, {"body": "also still looks like running two updates triggering update componentdidupdate similar", "d": "4/2014"}, {"body": "also remind run nodeenv production code faster performance sensitive environment nodeenv used require built reactjs bundle directly npm version see", "d": "4/2014"}, {"body": "related guess", "d": "4/2014"}, {"body": "likely future case crash give warning see also like able show problems like context dev tools", "d": "4/2014"}, {"body": "thanks spicyj either solutions would helpful", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "believe automated conversion textmate grammar", "d": "4/2014"}, {"body": "initial conversion found includes syntax snippets contributions greatly appreciated", "d": "4/2014"}, {"body": "nitpick would nt jsx opposed react", "d": "4/2014"}, {"body": "meh atom one based orktes thanks taking helpful many people anybody stumbling later repo bug reports fixes", "d": "4/2014"}, {"body": "sure fixed appears release", "d": "4/2014"}, {"body": "comment top file says", "d": "4/2014"}, {"body": "make sure using jsx well whether jsxtransformerjs reacttools", "d": "4/2014"}, {"body": "blargh using gruntreact build process date thanks tip", "d": "4/2014"}, {"body": "nt really need right", "d": "4/2014"}, {"body": "understand coming please nt ever made mistake one examples really bad actually end recreating nodes every render key different might hurt today one day couple points key really performance identity turn leads better performance randomly assigned changing values identity ca nt realistically provide keys without knowing data modeled would suggest maybe using sort hashing function nt ids already internal keys use arrays index array insert new element keys wrong said key warning pretty annoying driving people end solutions like probably spend time thinking better way tl dr", "d": "4/2014"}, {"body": "sure understand implications use single key per children apart degraded performance course something related future plans maybe agree random key worst key one use still better key one always spend time better solution performance becomes issue understandable trying avoid approach definitely working entities children components based value objects alternatives nt seem much appealing basically thinking keeping map objects ad hoc synthetic keys", "d": "4/2014"}, {"body": "ok think got identity point could think case state dom element previously linked another component inherited another similar component reuses element approach solved well enough imho see key unique persistent time opposite case still applies every time component rendered state handled react simply disappears hopefully future easier handle cases weakmaps", "d": "4/2014"}, {"body": "agree random key worst key one use still better key keys provided react uses index array almost always better random key", "d": "4/2014"}, {"body": "hmm going ruin best laid plans", "d": "4/2014"}, {"body": "assume mean", "d": "4/2014"}, {"body": "fixed internally use", "d": "4/2014"}, {"body": "chenglou commit done serverside rendering", "d": "4/2014"}, {"body": "matthewwithanm ugh sorry meant spicyj referring", "d": "4/2014"}, {"body": "totally makes sense want give go", "d": "4/2014"}, {"body": "sure would rather changed serialization default attributes could minimized value create new type", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "similar problem chrome nt tested browsers yet sure helps able get elements remove clearing readding opacity property inspector one element causes stuck ones removed well", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "reason ca nt perform animation componentdidmount", "d": "4/2014"}, {"body": "performing animation componentdidmount really easy might say mine think real problem performing animation component unmounting would nice adopt pattern reacttransitiongroup also animating onechild component", "d": "4/2014"}, {"body": "already use reacttransitiongroup single child correct", "d": "4/2014"}, {"body": "far tests saying least could would nt get special lifecycle methods called", "d": "4/2014"}, {"body": "give example something nt work transition children child vice versa animation hooks executed proper time", "d": "4/2014"}, {"body": "could result typo mistakte slow clap", "d": "4/2014"}, {"body": "wish values well event somehow exposed", "d": "4/2014"}, {"body": "going replace page wiki feel free edit directly", "d": "4/2014"}, {"body": "user care mouse moves fromto perhaps handled internally problem due bubbling may need dive code little get better understanding stop saying nonsense p", "d": "4/2014"}, {"body": "yes due bubbling dom structure mouse moves c c b receive mouseleave events receives mouseenter event receives nothing events bubble root perhaps good enough make simulated mouseenter mouseleave events bubble", "d": "4/2014"}, {"body": "would work least trying test testing generally nt need anything complex making sure right behavior triggers event happens hopefully way others well", "d": "4/2014"}, {"body": "discussion closed pull request came following suggestion sebmarkbage provide unique function approach needs wait relax checks master", "d": "4/2014"}, {"body": "could also copy prototype temporarily hack fnprototype genericomcomponenttypeprototype", "d": "4/2014"}, {"body": "sebmarkbage interesting one last question nt clear pull request thread get hold pass", "d": "4/2014"}, {"body": "benjamn take look", "d": "4/2014"}, {"body": "require react defining ie function believe error go away confirm", "d": "4/2014"}, {"body": "nope working tried variety solutions gotten following errors add react utils foreach also add foreach move end foreach suggestions got feeling mostly jsdom issue", "d": "4/2014"}, {"body": "confirm put line beforeeach well react nt use variables called source assume missing problem", "d": "4/2014"}, {"body": "get saying added correctly nt cause problem suggestions familiar yet react jsdom internals yet uncertain one", "d": "4/2014"}, {"body": "sorry make sure globalnavigator defined variables declared set value toplevel scope react required beforeeach utils set beforeeach based result react require work error get", "d": "4/2014"}, {"body": "fixed apparently declared sans value outside foreach loop work solution seems bit arcane could explain fixed js module dependencies var require var mocha require mocha var jsdom require jsdom var react var utils initialize variables var document var window initialize jsdom beforeeach function globalwindow jsdomjsdom createwindow globaldocument globalwindowdocument globalnavigator globalwindownavigator react require reactaddons utils reactaddonstestutils", "d": "4/2014"}, {"body": "declared beforeeach block variables scoped function one else access way variables shared across file initialized start test", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "currently event listeners attached react inserts nodes dom wondering handle thinking letting reacteventemitterlistento create bag local events later used new function addlocaleventlisteners called reactcomponentmountcomponentintonode thoughts", "d": "4/2014"}, {"body": "sure dom nodes created regardless probably want tie transaction see reactreconciletransaction stores queue componentdidmount callbacks ondomreadyqueueingreactmountready queue listeners put putlistenerqueueingreactputlistenerqueue put listener queue ca nt easily modified want though guessing make new transaction wrapper add list", "d": "4/2014"}, {"body": "matthewwithanm guessing problems saw wo nt problem want try rendertostaticmarkup approach", "d": "4/2014"}, {"body": "sure really fits know people wo nt using js control content since could browsers would nt shown safe assumption iframes", "d": "4/2014"}, {"body": "correct wrong contents used browser nt support iframes basically browsers support js", "d": "4/2014"}, {"body": "sure iframe support correlates js support whether disable matter browser changes content would thought would trigger error even elements nt react ids", "d": "4/2014"}, {"body": "react nt look inside iframe unless change contents later", "d": "4/2014"}, {"body": "similar problem make ajax call result comes back component unmounted getting invariant error breaks react app completely longer mount components etc wrapping response handlers option bit cumbersome", "d": "4/2014"}, {"body": "mrjoes one way could push ajax requests handlers array go array componentwillunmount abort course need remove array complete ajax call", "d": "4/2014"}, {"body": "ustun wo nt work data access layer separated ui returns promise nt access underlying ajax request object ca nt cancel cancelling requests option", "d": "4/2014"}, {"body": "exactly reason left data layer accumulates potentially long running request death thousand cuts need way handle canceling many data layers set infinite subscriptions data updates clean mechanism clearly memory leak bring entire react subtree streams observables good primitives cleanup semantics consider purely promise based data layer inherently flawed reason want output always promise based pass kind handler data layer cancelability hook ultimately think solution streamobservable based soon proposal would build native support cancelation mixin", "d": "4/2014"}, {"body": "well case dal handles timeout caller promised either response error problem react handling setstate unmounted component ok warning debug mode sure fail error", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "add native support smile meantime solved follows coffeescript transitionevents require reactlibreacttransitionevents moduleexports reactcreateclass displayname component render invoke follows component onanimationend handleanimationend", "d": "4/2014"}, {"body": "recreated issue simulate jsdom confirmed works dom element react component fails works", "d": "4/2014"}, {"body": "yanns test code change", "d": "4/2014"}, {"body": "interesting work dom component", "d": "4/2014"}, {"body": "josephsavona thanks feedback tried suggestion still failling tried update react got following error", "d": "4/2014"}, {"body": "problem seems getting set components test remove seems work okay sure implications would though also case using browser dom running karma jsdom", "d": "4/2014"}, {"body": "simplest test case think made test appears elements problem included button form input select option textarea ie everything want trigger events", "d": "4/2014"}, {"body": "brigand thanks huge help syranide fix", "d": "4/2014"}, {"body": "going close wrap thanks lot hunting anybody interested taking issue sounds like would help quite people", "d": "4/2014"}, {"body": "ever since ondemand event listening added mobilesafariclickeventplugin broken touchstart nt always listened okay workaround fix real somehow probably onclick handlers turn markup", "d": "4/2014"}, {"body": "think fixed sure solid unit test cover", "d": "4/2014"}, {"body": "flockonus going close nt think going support instead feel free open pr docs make clearer", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "nt heard problem nt think necessary", "d": "4/2014"}, {"body": "believe vendor prefixes supported consistently capitalization", "d": "4/2014"}, {"body": "return null render script", "d": "4/2014"}, {"body": "nt leak implementation detail relies parsing html strings certainly possible programmatically construct dom nested tags besides documenting would also helpful highlight cases exist least pointing another resource", "d": "4/2014"}, {"body": "one possible solution actually replace componentwillmount constructor since descriptor change constructor componentwillmount called time also clarifies componentdidunmount", "d": "4/2014"}, {"body": "sebmarkbage sounds reasonable spontaneous reaction really like obvious nature whereas using constructor instead removes obviousness becomes interms intuitively see", "d": "4/2014"}, {"body": "idea replace getinitialstate property initializer nt currently exist proposing similar typescript idea follow future idiomatic way handle initialization destruction primitive like net ever introduced would correspond mental model follow normal initialization process class add notion mountunmount since distinction model might able shorten mountunmount probably creates problems willdidupdate", "d": "4/2014"}, {"body": "sebmarkbage ah makes lot sense ps preally impressed overall discussion going api exciting stuff", "d": "4/2014"}, {"body": "may deserve thread related sebmarkbage comments figured post fact currently de facto constructor seems get way potential asynchronous rendering since definition called part synchronous rendering process agree decision switch current synchronous signature fwiw means stepping outside react stuff rendering example illustrates might create custom initializer invoke manually since de facto nt called try render component seems pretty strong argument kind initialization decoupled synchronous rendering formalized part life cycle", "d": "4/2014"}, {"body": "closing every instance seen fixed upgrading npm", "d": "4/2014"}, {"body": "use phantomjs react unit tests polyfill bind closing let know anything else unclear", "d": "4/2014"}, {"body": "spicyj idea happy last comment made neck deep debugging jasmine would nt run specs applying shim referenced works thanks", "d": "4/2014"}, {"body": "closing due lack activity let know help lrowe post mailing list may also helpful", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "sure really see motivation current solution compresses better", "d": "4/2014"}, {"body": "fixed filter option", "d": "4/2014"}, {"body": "lately simply using wrapped module works great could consider switching npm package scheme downsides", "d": "4/2014"}, {"body": "first attempt add top every file unfortunately uglify nt smart enough dead code removal wonder vendorconstantsjs essentially make two copies code one dev one prod transforms pay getter cost per module require time benjamn easy recast obvious interacts well cloning ast", "d": "4/2014"}, {"body": "talked cpojer probably solved", "d": "4/2014"}, {"body": "suggestion supporting typescript new file type effectively simple file replace multiline strings using logic jsx js files depend typescript support multiline strings tracked", "d": "4/2014"}, {"body": "wanted share dealt problem waiting permanent solution took idea edgejs project foreign code inserted multiline comment write render method typescript reactjsx declared function using bindings fdecampredon build process use simple transform using gulp var gulp require gulp typescript require gulptsc replace require gulpreplace react require reacttools gulptask compile function return gulpsrc ts pipe replace reactjsx rn gm function match fullcomment commentcontents return reacttransform jsx reactdom commentcontents slice pipe gulpdest dest typescript requires actual files disk memory pipe typescript compiledjs pipe gulpdest dest get intellisense etc get full typescript checking jsx code build time since transformed prior passed typescript compiler also source code line numbers preserved hope helps", "d": "4/2014"}, {"body": "epeli sorry later answer idea simply represents document fragment ie list nodes without parent currently reach seems implementationwise seems like want feature good enough unless css set strictly workaround solves everything kind makes sense today long single parent node multiple parents need use textnodes needx use things get bad provides single parent usecases thus allowing currently huge fan jsx conditionals suspect need think differently experimented separating separate methods seems work good seems make sense", "d": "4/2014"}, {"body": "thanks response guess makes simpler use javascript conditionals jsx think would also make possible implement something like tal example usage anything like considered reactjsx", "d": "4/2014"}, {"body": "epeli relaying interpretation answer yes considered adding dedicated syntax conditionals feel wrong solution intend go route still finding way around halfway inclined agree suggesting intuitive goto solution kind flawed seems said make clear conditionals currently possible react form cond cond amp amp currently recommended approach conditionally inserting elements personally branches contain lots code usually refactor individual methods individual components makes sense thus cond thisrenderloggedin thisrendernotloggedin actually introduce similar constructs really want strongly recommended could look untested sugar making actual component function logic pretty nifty stuff however mentioned strongly recommended generally speaking big issue templating languages syntax really poor conditionals sometimes solve allowing elseclause sometimes nested sometimes weird specialcase etc sure best solution really seems like using markup flawed though recommended approach top like theoretical perspective practical perspective ugly looking works great content refactored methods", "d": "4/2014"}, {"body": "would like see tutorial express rest api react without backbone", "d": "4/2014"}, {"body": "unify two concepts eliminate convenience constructors altogether people trusted point special proprietary handling overridden methods like componentwillmount componentwillreceiveprops nt classical oo equivalents trick typescript class reactcomponent componentwillmount consolelog base implementation class typeahead extends reactcomponent componentwillmount supercomponentwillmount perhaps missing something", "d": "4/2014"}, {"body": "see close issue since info stale", "d": "4/2014"}, {"body": "done", "d": "4/2014"}, {"body": "compiling pr based put shortly", "d": "4/2014"}, {"body": "progress original issue singledouble quotes get output looks like javascript input logout output reactdoma href logout datalink action logout mix types quotes making linter complain", "d": "4/2014"}, {"body": "btw good enough yes solved issue", "d": "4/2014"}, {"body": "chenglou allows successfully lint jsx syntax still need relax quote settings jshintrc bug nt think close yet", "d": "4/2014"}, {"body": "months ago", "d": "4/2014"}, {"body": "case always want pass callback little boring p reasons bound", "d": "4/2014"}, {"body": "think reasoning goes something like functions autobound often used event handlers callbacks user provided weird way object pass nt really everything gets copied different object originally nt autobinding would need place made opt class creation realized everybody autobinding everything time defaulted behavior actually thought people would complain since bit magical word company nt autobound never intended called outside component usual case binding internally never really ran issue common case data fetching usually involved passing function called setstate bound eg complicated could even callback defined component autobound passing another component callback something would discourage inherently wrong think makes state ownership less obvious callback data fetching function promises ajax callbacks etc nt totally unreasonable though fn pass must return promise setstate nt could happen future nt heard internally lot data fetching interested hear much problem people specific problems solving data fetched normalized error handled external component", "d": "4/2014"}, {"body": "ka codebase two uses thisforceupdatebind none setstatebind one uses forceupdate similar", "d": "4/2014"}, {"body": "generally rarely pass callback except use react rxjs see use case rxjs often ends wanting subscribe observer variable store bound version problem autobound would avoid repeating code components", "d": "4/2014"}, {"body": "hey guys want zpao think setstate forceupdate etc used callbacks nt describe behavior component internal api ca nt used outside component mean javascript var foo reactcreateclass componentwillmount function apigetuserbyid thispropsuserid thissetstate bad thissetuser good setuser function user thissetstate user user one day need extend method example idea case spicyj btw describe docs developers actually happens inside componentdidmount bit difficult describe prefer write something like hope thoughts clear thanks", "d": "4/2014"}, {"body": "include closures render function callbacks similar problems likewise refs inconsistent also props parent nt flush callback invoked deferred reconciliation batching puts whole system inconsistent state correctly really reconcile anything may dependencies sideeffectful operation turns much complex issue thisstate alone", "d": "4/2014"}, {"title": "vmodel variable reference", "body": "working form elements came across potential bug deals points objects vmodel attribute point variable like personname works try point like person name nt work example", "num": "251", "d": "4/2014"}, {"title": "start tracking newly added property vm", "body": "hi custom directive create new property vm gets updated changes propagated controls see example console see vm gets updated controls nt get fresh values example create passing directive everything works fine model changes passed controls imagine problem caused fact vm augumented getterssetters order propagate model changes enforce process adding new members vm directive", "num": "250", "d": "4/2014"}, {"title": "separate inside component templates nt work", "body": "hi trying render tabular data row data price quantity computed values net amount taxes discounts etc crude example logically like row component computed properties handled cleanly row component look like component replace true html individual tags inside templates working tags simply disappear tried many combinations root element individual etc nothing seems work pointers", "num": "248", "d": "4/2014"}, {"title": "key filter breaks vm components", "body": "really weird bug ran boiled simple test case really seem legit bug vm property set filters used directives component template root template cease function properly simple test case notice run example see console logging hit enter text fields however console lines logged delete template property vm definition rerun example single text input rendered console lines logged hit enter seems totally crazy could presence components root vm stop key filters working drove nuts hour wacky", "num": "247", "d": "4/2014"}, {"title": "recollect dependencies evaluating computed properties", "body": "lead", "num": "246", "d": "4/2014"}, {"title": "parent data updated", "body": "nt know iseditmode true even set false home component thanks", "num": "245", "d": "4/2014"}, {"title": "select element multiple attribute vrepeat", "body": "select binding nt work right use select element multiple attribute vrepeat also refs two traces update calls first initial data update works bigger app second applied view switch nt work", "num": "244", "d": "4/2014"}, {"title": "conditionals templates", "body": "possible something like checks equals color shows otherwise show text", "num": "243", "d": "4/2014"}, {"title": "directive method calls nt support object params", "body": "directive calls sort method passes object options get two errors would expect work instead accepting primitive params", "num": "242", "d": "4/2014"}, {"title": "browserify fails syntaxerror compilerjs", "body": "running browserify entry point calls fails syntaxerror following reproduces issue npm install vue npm http get npm http vue nodemodulesvue cat lt lt eof gt indexjs var vue require vue eof browserify indexjs buildjs syntaxerror line unexpected string parsing nodemodulesvuesrccompilerjs browserify node", "num": "241", "d": "4/2014"}, {"title": "made simple wizard component", "body": "hi implemented simple wizard component rather draft fully fledged component anyway goes however problem transclusion placeholders content tags make component useful accept different numbers wizard pages right hardcoded four pages nt know loop content tag combine content tag vrepeat apply varying number transclusion points depeding actual state component data also tried another approach remainings method putpagecontents extract raw contents fragment compile also failed smile seems according source code compilercompile method accepts html element decorated v attributes method compile whole html fragment matter root element decorated vue attribs", "num": "240", "d": "4/2014"}, {"title": "argumentslength greater", "body": "self dispatch applicationprogressupdate start handle event applicationprogressupdate function true arguments start undefined argumentslength expected behavior", "num": "239", "d": "4/2014"}, {"title": "index primitive values tracked properly", "body": "happens duplicates", "num": "238", "d": "4/2014"}, {"title": "support post render event", "body": "using jqueryui ui components dynamically created library based markup need trigger rendering jqui components every time vue updates dom based data change far tried getting executed rendering really useful", "num": "237", "d": "4/2014"}, {"title": "problem computed property inside vattr", "body": "example markup imageid changed img src getting updated works dependent property included markup explicitly", "num": "236", "d": "4/2014"}, {"title": "looking example vrepeat css animation directives", "body": "hi could anyone explain use animation directives vtransition vanimation nt care right smile vrepeat desired effect animation may simple fade effect using opacity changes creating new item fadein removing existing item fadeout list thanks advance smile", "num": "235", "d": "4/2014"}, {"title": "problem nested vrepeat directives", "body": "hi nest vrepeat directives inner directive contents recreated every model update apart form performance penalty results loosing html input focus take look", "num": "234", "d": "4/2014"}, {"title": "destroy event", "body": "hi destroy event triggered destroy called", "num": "233", "d": "4/2014"}, {"title": "rendering lot nested views compontents", "body": "looking fiddle seems vue rendering cases nested objects repeating element best way test fiddle simple type something one inputs basically entire view renders reason make seem every time type input blur event occurs needing reselect input", "num": "232", "d": "4/2014"}, {"title": "short form tags", "body": "sure intended two components render properly template uses long form tags render properly define short form tags case renders minor inconvenience otherwise excellent framework", "num": "231", "d": "4/2014"}, {"title": "catch events", "body": "hi possibility use vm method catch incoming events would even cooler enable wildcards like thisvm delete function catch events starting delete right functionality useful diagnostics think would useful several scenarios well", "num": "230", "d": "4/2014"}, {"title": "context nested view objects", "body": "nt figured good way deal issue problem nested objects within array nt seem context individual object referenced methods actual vue object example actual code trying get work like typesgeneral object either context property parameter passed error method vue object right nt seem possible instead entire vue object passed context parameters added typesgeneral directly referenced versus iterating trying figure heck going html key singlekeykey error singlekeydescription", "num": "229", "d": "4/2014"}, {"title": "multiple clauses custom directives creates multiple instances directive", "body": "ideally great get args amp data passed one instantiation", "num": "228", "d": "4/2014"}, {"title": "vrepeat without creating new html elements", "body": "way force vrepeat directive create new html element data item behavior sometimes required tables want produce one element per data item example wrong since divs allowed tbody angularjs possible apply binding expression html comment comments allowed everwhere workaroud issue", "num": "227", "d": "4/2014"}, {"title": "recommended way communication vms", "body": "hi two vms members vm hierarchy totally independent components communicate together afaik event communication mechanism works within vm hierachy suggested solution", "num": "226", "d": "4/2014"}, {"title": "error parsing expression", "body": "tried use inline javascript expression described vue throws warning error parsing expression messagelength gt browser chrome tried use saw issue related previous version upd sorry forgot read databinding directives", "num": "225", "d": "4/2014"}, {"title": "track changes arraylist elements", "body": "hi need create directive accepts list array binding similar vrepeat recommended way determining actually changed bound list let say want remove one element middle list api detecting changes actually list changed three options valid elements one removed elements inserted elements changed positions index combination would great kind builtin mechanism detecting changes arraylike parameters", "num": "224", "d": "4/2014"}, {"title": "directive vview used already instantiated vm root node", "body": "hi component instantiated vcomponent directive root indexhtml file root vm component instantiates another component using vview directive results warning directive vview used already instantiated vm root node use parent template instead workaround imo nested vviews essential true composability btw vuejs great", "num": "223", "d": "4/2014"}, {"title": "vif multiple expressions", "body": "use vif multiple conditions currently working workarounds", "num": "222", "d": "4/2014"}, {"title": "prefix v windows application", "body": "people wants develop windows app vuejs instead winjs careful v prefix inserted template like component windows runtime nt like throw error unable add dynamic content rather use data prefix better datav prefix template perhaps custom data nt want vuejs warn unknown directive", "num": "221", "d": "4/2014"}, {"title": "ajax amp vue", "body": "made small example utilize promises ajaxing content use vue sure want post wiki figured people would want know good pattern edit reformatted example bit follow commonjs style utilize qjs promise batcher", "num": "220", "d": "4/2014"}, {"title": "input value changed javascript nt change data", "body": "using custom plugin date select select happens writes selected value input element change detected vue library event must triggered vue pick change another way", "num": "219", "d": "4/2014"}, {"title": "vref amp vif problem child access", "body": "hi issue using vref vif simply put vif directive node childs node whit vrepeat vref accessible parent view remove vif directive everything works fine html something like prepare fiddle needed submenubuttons never accessible vif directive dom understand list instantiated vif condition falsy even condition became truthy reference set parent intended behaviour many thanks", "num": "218", "d": "4/2014"}, {"title": "lazily load extended viewmodels", "body": "hi often define classes going use backbone models views etc dom ready way cut amount options need pass order instantiate later actually use however make sure happens dom ready etc recently trying something similar vue thinking would work similarly see live demo referring surprised find vue trying look dom elements template id configured use via actually used viewmodel happens templates processed realize workarounds get behavior want would nicetohave unless behavior design thanks", "num": "217", "d": "4/2014"}, {"title": "vwith object value iterator wo nt work", "body": "hi tried pass object component inside vrepeat iterator success example parent template component template html type optionstype color optionscolor vwith work strings numbers iterator gave quick blast codebase try fix failed far although someone wants reproduce issue forked repo branched added tests prove bug fork branch tests commit note first test pass second break", "num": "216", "d": "4/2014"}, {"body": "hellojosh try person name instead person person work", "d": "4/2014"}, {"body": "marfalkov thanks looking miss typed variable name fixed edit first textbox values change edit second textbox values change", "d": "4/2014"}, {"body": "hellojosh ahh see think", "d": "4/2014"}, {"body": "twarogowski would seem like something outlined would answer working said reason vue setting getter setter new property object seems happen method well lifecycle methods ready attached", "d": "4/2014"}, {"body": "see fiddle data objects augmented methods property additiondeletion properly tracked experimental feature fully documented yet", "d": "4/2014"}, {"body": "works indeed thanks smile methods make way stable api assume second argument add may also complex object whole newlyadded graph augumented", "d": "4/2014"}, {"body": "twarogowski actually already latest release officially documented complex object yes recursively tracks new object", "d": "4/2014"}, {"body": "superb thanks detailed answer smile vue great", "d": "4/2014"}, {"body": "closest could find issue nt use components also tried using root element component template tried repeat tags also nt work", "d": "4/2014"}, {"body": "think component template compiled documentfragment added document tree removed browser", "d": "4/2014"}, {"body": "ok seems generic problem dom interesting thing jquery seems coping well", "d": "4/2014"}, {"body": "okay tried latest works perfect release note says rocks", "d": "4/2014"}, {"body": "located source bug fix soon indeed wacky one", "d": "4/2014"}, {"body": "nt set parent values always sets values current vm general nt recommend changing parents state within child since makes tightlycoupled use events possible", "d": "4/2014"}, {"body": "thanks evan", "d": "4/2014"}, {"body": "seems fiddles working properly latest release let know things still break", "d": "4/2014"}, {"body": "sorry nt work example second example select list data group items group page initialization", "d": "4/2014"}, {"body": "due compiled compiled yet option elements present initial data manipulate set value hook work properly", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "got work hopefully cleaner way", "d": "4/2014"}, {"body": "something thinking involves different parsing strategy compared current implementation nt got time test yet syntaxwise probably go handlebarslike style since current syntax mustacheinspired", "d": "4/2014"}, {"body": "caused parser treating identifier current solution use method instead inline expression gets fixed", "d": "4/2014"}, {"body": "sounds good", "d": "4/2014"}, {"body": "reverting removes error allows browserify successful include vue build versions result error", "d": "4/2014"}, {"body": "also problem resolved updating browserify", "d": "4/2014"}, {"body": "thanks updated browserify error longer occurs", "d": "4/2014"}, {"body": "think similar spirit challenge containers arbitrary vue content work", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "reason happening line emitterjs see sure args explicity passed need digging src", "d": "4/2014"}, {"body": "yeah trick greatly improved internal emitter performance fixed amount args much faster guess case causes confusion user make external version use instead", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "use callback wait render", "d": "4/2014"}, {"body": "nt role vuenexttick", "d": "4/2014"}, {"body": "ayamflow ah yes using better safer", "d": "4/2014"}, {"body": "documented", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "ah missed somehow thanks exactly wanted", "d": "4/2014"}, {"body": "seems working make jsfiddle reproduce issue", "d": "4/2014"}, {"body": "tried works sorry bothering", "d": "4/2014"}, {"body": "basic example basically modify achieve whatever css effect want", "d": "4/2014"}, {"body": "great thank", "d": "4/2014"}, {"body": "yes happens identifiers used know causing issue try fix time", "d": "4/2014"}, {"body": "ok fact issue caused using primitive values arrays use objects instead primitive values bug nt occur general find better way handle primitive arrays", "d": "4/2014"}, {"body": "true wrapping primitive ints object see improvement recreating whole array dom elements however first update captured changes reflected vm please take look modified fiddle first keystroke reflected vm subsequent changes ignored try modify value text input first character gets updated", "d": "4/2014"}, {"body": "yes two events documentation", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "amchang imo problem occurs whenever nest vrepeat directives nt matter use components see issue", "d": "4/2014"}, {"body": "seems fiddle issue outer used object look time", "d": "4/2014"}, {"body": "merged", "d": "4/2014"}, {"body": "short tag syntax exist see element one void elements element foreign element may single solidus character character effect void elements foreign elements marks start tag selfclosing custom element foreign element void element case remove final get browser try close tags exactly get firefox dom inspector", "d": "4/2014"}, {"body": "thanks bpierre", "d": "4/2014"}, {"body": "thought maybe regex fits better case wildcards", "d": "4/2014"}, {"body": "pretty hacky way take look fairly easy understand introducing wildcardsregex emitter implementation would bring performance concerns since emitter central observation implementation called lot", "d": "4/2014"}, {"body": "thanks kind hacky solution good enough smile", "d": "4/2014"}, {"body": "never mind anyone else problem look response closing", "d": "4/2014"}, {"body": "multiple clauses meant create multiple instances otherwise pretty messy logic imo inside directives", "d": "4/2014"}, {"body": "could use semantically correct nested table hard say solve issue clear understanding trying accomplish without fiddle example", "d": "4/2014"}, {"body": "thanks brandon table expert imo nesting table solve problem proper aligning column widths better use multiple tbody sections within one table", "d": "4/2014"}, {"body": "depends components setup generally something like following inside child component dispatches event root vm trickle children vm another component could listen event like see technically could also add pub sub library communicate either way works matter personal preference point", "d": "4/2014"}, {"body": "thanks clarification", "d": "4/2014"}, {"body": "array callback second parameter exists means array mutated object containing mutation info", "d": "4/2014"}, {"body": "works fine many thanks", "d": "4/2014"}, {"body": "clarification get warnings try use vview vrepeat together like however vcomponent works fine problem need dynamic capabilities vview chance sort", "d": "4/2014"}, {"body": "question like would greatly helpful include fiddle trying accomplish number ways go trying", "d": "4/2014"}, {"body": "brandonpierce right narrowed problem let explain working sample problematic sample lists working difference fact latter example vview vrepeat directives applied element however change vview directive vcomponent works reason vcomponent mixed vrepeat within html element vview bug intended behavior", "d": "4/2014"}, {"body": "ok think got right vview recreates vm replaces html element would conflict vrepeat also creates new vms correct", "d": "4/2014"}, {"body": "essentially wrap method mustache binding vue knows evaluate value compile time see", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "tried computed properties", "d": "4/2014"}, {"body": "yes trying right computed value nt get updated one conditions change", "d": "4/2014"}, {"body": "need reference explicitly variables thislock true first pass thisstatus observed see end link javascript get function thislock thisstatus return thislock thisstatus", "d": "4/2014"}, {"body": "yes works thank", "d": "4/2014"}, {"body": "thanks sharing tip ljonathanl reminder kind discussion could posted since sourcecode related", "d": "4/2014"}, {"body": "brandonpierce awesome work cool", "d": "4/2014"}, {"body": "obsoleter thanks side note looks much cleaner decoupled used nodejs browserify environment", "d": "4/2014"}, {"body": "thumbsup", "d": "4/2014"}, {"body": "hey guys vacation lately nt active take closer look back work", "d": "4/2014"}, {"body": "problem read short dispatch native browser event input imo convenient", "d": "4/2014"}, {"body": "reasoning explained issue linked vue picks native events plugin probably firing jqueryonly events simply relay events manually", "d": "4/2014"}, {"body": "definitely create fiddle", "d": "4/2014"}, {"body": "see console first call menubuttons returns proper array buttons second instead submenubuttons returns undefined remove vif directive works expected", "d": "4/2014"}, {"body": "also creates intermediate vm wrap conditional block nt thought way make intuitive yet rough solution would give block access list", "d": "4/2014"}, {"body": "reason vue looks template definition converts string actual documentfragment internally easy solution put templates head find semantic yes nt hurt make lazy load", "d": "4/2014"}, {"body": "hi try", "d": "4/2014"}, {"body": "tried seems give result", "d": "4/2014"}, {"body": "ok seems happen nt reference elsewhere parent template weird bad guess nt need fixing mine probably bit edge case", "d": "4/2014"}, {"body": "try name component hyphen like explained example tagfruit example works javascript vuecomponent tagfruit template type optionstype color optionscolor var fruits new vue el fruits data fruits type banana color yellow type orange color orange", "d": "4/2014"}, {"body": "yeah seems work way guess incorrect use thanks mate", "d": "4/2014"}, {"body": "doc value primitive value arrays containing primitive values access value simply value", "d": "4/2014"}, {"body": "brandonjpierce make component text area accomplish using compiler nt think much documentation yet", "d": "4/2014"}, {"body": "yeah textarea currently handles one time evaluation compile time reason since textarea twoway binding modified user content evaluated longer possible determine part content considered bindings", "d": "4/2014"}, {"body": "problem thanks clarification", "d": "4/2014"}, {"body": "yeah add something like", "d": "4/2014"}, {"body": "ljonathanl think intended behavior assign part viewmodel data converted object intercepts array methods getterssetters objects keeping reference item list keep ability insert value back two questions would expect happen instead use case keeping references list items around list purged use empty array instead splice truly new array viewmodel old reference affect", "d": "4/2014"}, {"body": "thank answer agree data model belong vue see update fiddle item created added list list purged item modified another vue example business part secondly think bug modify item frame waiting vuenexttick example list kept empty good behavior empty array solution data model belong vue example set listitems empty array lost reference model", "d": "4/2014"}, {"body": "use manual compilation note partial compilations partially undone bindings released entire vm destroyed", "d": "4/2014"}, {"body": "thanks thoughts approach tab generic panelling component maybe panel tab could generic vm manually call compile injected dom content", "d": "4/2014"}, {"body": "unsafecode please upvote hah would excellent support vue scoped callback use", "d": "4/2014"}, {"body": "need revisit vue definition problems run defined var amp functions generate gettersetters different api location typescript wants understand behavior statically dynamic nature limits type benefits across codebase examples vue new vue data title todos vuetitle new location title variable shifts configuration runtime use configdatatitle vuetitle true methods vue configuration object must object literal modules classes typescript uses functions define internal structures thus makes approach incompatible working make generation object literal dynamic pass strongly typed class reflects runtime api vue yet generates object literal vue constructor feel approach work requires shimconversion code construction planning use vue typescript app thus need get complete soon estimate weeks time remains", "d": "4/2014"}, {"body": "great hear working looked definitelytyped contribution guide important really top page links page codeplex wiki handy patterns inspiration recently added sure cached", "d": "4/2014"}, {"body": "plan submit definitely typed really want get api right typescript weakness applying metadata driven apis extangularvue side effects find important often go beyond definition making typescript features mesh framework ton value modulesclasses ts large frameworks ship oop model within framework used work sencha worked mapping typescript extjs core issue typing metadata class abstraction tough puts heavy burden compiler saw build times generated definition files ext find real benefit wrapping framework apis vs raw definition simplifies development model exposes deeper typing support speeds compilation time ext wrote wrapper called exts strongly typed proxy ext apis net effect get proxy performance hit app startup construction get really clean compiletime errors option use moduleclass patterns ts provides definitions great small complexity rises find wrapping often better approach tsvue wrapper vue attempts ts class approach vue todomvc app ts module approach vue todomvc app class approach work need get object literal generation working correctly fri apr bart van der schoor lt notifications githubcom wrote great hear youre working looked definitelytyped contribution guide important really top page links page codeplex wiki handy patterns inspiration recently added sure cached reply email directly view github", "d": "4/2014"}, {"body": "cool know stuff personal experience modelling meta data driven systems know angularjs ts defs dt popular highly rated never used though looking forward solution vue quite sure would work practice requires runtime code might suited dt project dt typings preference either way world would like combine vue typescript way works great", "d": "4/2014"}, {"body": "hey updates typescript definitions quite keen integrate two", "d": "4/2014"}, {"body": "nothing report expect good state month active project depends thu apr nathan ridley notifications githubcomwrote hey updates typescript definitions quite keen integrate two reply email directly view github", "d": "4/2014"}, {"body": "img tag affiliated windowdocument document setting imgsrc wo nt trigger download give try", "d": "4/2014"}, {"title": "browser versions supported", "body": "hello find information supported browsers asking browser versions currently supported backbonejs planned abandon older versions near future thanks", "num": "3138", "d": "4/2014"}, {"title": "classname function call order", "body": "would like give subclass set runtime planned passing parameter via parameter method something like class myview extends backboneview classname gt pluralname layout initialize options gt pluralname optionspluralname super options unfortunately called prior instead assign constructor like well bug feature nt called feature tell called erroneously asked first like marionette thanks awesome tool well", "num": "3137", "d": "4/2014"}, {"title": "collectionmodel called collection context", "body": "issue demonstrated following code var modelcontext var c backbonecollectionextend model function modelcontext return new backbonemodel var c new c cadd foo bar consolelog model function called collection context cmodelcontext consolelog false function called collection object context seems problem collectionpreparemodel always calls beating head today wanted access collection attribute model function seems like somehow check model constructor vs regular fn sure possible docs updated clear context function gets called note still access collection function rather", "num": "3134", "d": "4/2014"}, {"title": "save example bug main backbonejsorg page", "body": "main documentation backbonejsorg homepage navigate save function reference book example press play button according documentation backbonesync receive create request first time update request second time however create request sent times sure example code incorrect documentation incorrect", "num": "3130", "d": "4/2014"}, {"title": "android web browser turns backbonehistoryhistory null pointer sometimes", "body": "yes actual real weird null pointer javascript null undefined javascript value js process simply dies javascript attempts anything trap trycatch looks little like backbonehistoryhistory lt gt using galaxy sii tablet os sure point releases happens backbone page app history api enabled backbone click normal link actually leave one page press back button return backbone app android browser makes attempt reconstruct inmemory image page silly thing constructs new windowhistory object apparently garbage collects one backbone grabbed first initialised nt count reference work around either patch backbone manually backbonehistoryhistory windowhistory code might cause backbone touch backbonehistoryhistory might want replace local pointer often nt use local pointer reference windowhistory directly", "num": "3128", "d": "4/2014"}, {"title": "get value calling trigger", "body": "get false value calling trigger event handler returns false useful maybe decide default action implemented chainable test failed", "num": "3124", "d": "4/2014"}, {"title": "fragment matching popstate checkurl", "body": "strange behavior application certain conditions history incorrectly changed popstate scenario following first history navigate called encoded fragment per documentation see fragment stored history object understand thisfragment holds encoded path string case pushstate listener added popstate event fires checkurl fired listener checkurl responds see backbone check make sure url changed loadurl get called however getfragment function always returns decoded string decodeuri called location ie therefore boolean current thisfragment evaluate true loadurl incorrectly called causing errors application eg items removed pushstate history call navigate without encoding uri condition correctly execute potential invalid url special characters exist fragment see issue exists stable using well current master slight difference getfragment even latest code decodeuri called checking encoded fragment stored context navigate see checkurl getfragment called everywhere certain decodeuri happening reason seems case considered thoughts", "num": "3123", "d": "4/2014"}, {"title": "model silent save", "body": "sorry bring back trying situation sure working expected try still fire sync event even though silent true passed see looks like trigger sync event always fired success callback model save look options object prior trigger silent defined property value true trigger inside block like sure done purpose could missing something", "num": "3122", "d": "4/2014"}, {"title": "nuget package dependancy problem", "body": "hi jeremy backbonejs nugetorg package still depends underscorejs gt could please update people using nuget", "num": "3121", "d": "4/2014"}, {"title": "complement parse", "body": "hello models timestamp fields server sendsreceives utc app though like work momentjs objects receive response server use transform utc string object however send data complementing function use would make sense add function similar would noop otherwise let process attributes sent server could anyone point better direction", "num": "3119", "d": "4/2014"}, {"title": "successful collectioncreate ca nt collectionget id", "body": "hey think bug collectioncreate method successful collectioncreate new model waits true posted new model returns model newly generated id would nice since wait set true model added collection id gets assigned model collection basically model added collection new id byid nt get updated reference id work pull request show expecting let know guys feel", "num": "3118", "d": "4/2014"}, {"title": "single model multiple collections", "body": "example detailing issue clear answer models placed multiple without problems noticed least one plugin relies detecting model part particular extension querying modelcollection property since property allow one collection often throws errors would possible advisable make property array collections model member", "num": "3113", "d": "4/2014"}, {"title": "history api disable chrome packaged app solution make work", "body": "list apis disabled packaged apps history api available package app still good type project people use backbone found router works normal webpage failed work packaged app every time trigger navigate event gives error solution make work instead replacing router", "num": "3112", "d": "4/2014"}, {"title": "value unhelpful bulk operations", "body": "consider following scenario let create collection var mycollection new backbonecollection let subscribe add events collection mycollectionon add function model collection options print model options given us consolelog model options let add items collection single add operation first index mycollectionadd id id id expecting see following printed backbonemodel backbonemodel backbonemodel however instead get backbonemodel backbonemodel backbonemodel value always even though specific model inserted index intended behavior seems undesirable would expect value correctly display index individual model bulk operation one", "num": "3110", "d": "4/2014"}, {"title": "allow proxying options url via fetch", "body": "discussed would useful proxy arguments url methods collections models via fetch methods fact recently tweaked backbone underscore using project working accomplish url method able translate various options passed logic calling fetch proper url proper way accomplish allow proxying options object via fetch translating options url logic outside url method would violate principle separation concerns use case required user action event requires fetching multiple urls parallel currently way url methods generate different urls application state change calls fetch planning send pull requests work latest code", "num": "3108", "d": "4/2014"}, {"title": "backbonemodelsave calling successerror functions", "body": "looks like true backend passing object back causes success error method never execute", "num": "3105", "d": "4/2014"}, {"title": "router parsing fragment hash causes information lost misinterpreted", "body": "general code setup backbonerouterextend routes query onqueryroute initialize function backbonehistorystart onqueryroute function query query impossible reliably parse query string due fullstring urldecode line backbonejs inside extractparameters scenario imagine single query parameter arbitrary value happens contain amp construct fragment string like var value encodeuricomponent amp routernavigate foo value refresh page onqueryroute event handler gets called receive string amp obviously impossible parse interpreted two query parameters actually one happening line inside extractparamters urldecoding whole fragment hash without splitting first particular usecase query parameters fixed arbitrary number ca nt easily set route regex automatically parses individual values structure url like amp amp amp foobar amp bazblah execute preprocessor method useless gets called extractparameters mangled hash string urldecoding whole without splitting first default current workaround override method extractparameters function route fragment return backbonerouterprototypeextractparameters call route encodeuricomponent fragment basically urlencode passing back original implementation get callback get original version proceed parse normally efficient like see fixed properly source thoughts", "num": "3104", "d": "4/2014"}, {"title": "delegate event element outside view element view", "body": "example set many backboneview elements every one click event calls function add css border selected element view well problem need delegate event click outside view elements calls function deselects views nt want something like would mixing logic views logic body element good practice modular", "num": "3103", "d": "4/2014"}, {"title": "requirejs jquery", "body": "loading jquery without requirejs backbone underscore requirejs throws error jquery found course specifying path jquery requireconfig possible set backbone", "num": "3102", "d": "4/2014"}, {"title": "way execute route without mutating history first", "body": "working extension allows programatic execution route callback fired first callback succeeds hash history mutated one issue approach discussed previous issue way retrieve hash router function accessing yet updated nt see way access hash order push onto history stack far tell simplest workaround add parameter execute right parameter another option would roll object later solution could additionally add parameter could mixed object passed could potentially add greater flexibility extending routes handled either solutions sound reasonable submit pull request", "num": "3101", "d": "4/2014"}, {"body": "theory backbone help underscore jquery work way back immediate plans otherwise assume stay way backbone nt usually employ bleeding edge tricks rare cases pushstate support history instance includes fallbacks older browsers case via hashchange specific questions advise try mailing list stackoverflow irc channel github issues generally improving framework", "d": "4/2014"}, {"body": "thanks clear answer sorry using wrong channel thought could question label", "d": "4/2014"}, {"body": "worries hope find looking", "d": "4/2014"}, {"body": "hi erikevenson certainly feature shortcut keeps calling super method constructor record calling super method fine reason called view element guaranteed exist called needed create called use source hope clears things smiley", "d": "4/2014"}, {"body": "thanks brad making reasoning clear call order cheers", "d": "4/2014"}, {"body": "beers", "d": "4/2014"}, {"body": "good catch get fixed post haste", "d": "4/2014"}, {"body": "fixed cherrypicked ghpages thanks reporting michaelbutler", "d": "4/2014"}, {"body": "whaaaat amazing want turn pull request demonstrating recommended fix", "d": "4/2014"}, {"body": "somewhat inelegant attempt without understanding reasons making local pointer begin hesitant aggressive modifications", "d": "4/2014"}, {"body": "hey ethanzheng would nt really work multiple event handlers single triggered event often case would happen returned true returned false possibly usefulrelevant created extension backbone events method uses promise library resolve result triggered events reject promise chain error thrown rejected promise returned event handlers could event handler assume however event handlers throw would exclusively used otherwise things would break errors caught promise", "d": "4/2014"}, {"body": "tgriesser one handlers return false calling eventtrigger returns false like dom event one event handler calls default action cancel", "d": "4/2014"}, {"body": "jquery method always returns jquery object handler special functionality preventing default event behavior false returned", "d": "4/2014"}, {"body": "hi justinhelmer thanks reporting take look see", "d": "4/2014"}, {"body": "excellent bug report way kudos", "d": "4/2014"}, {"body": "thanks lot guys always responsive issue queue", "d": "4/2014"}, {"body": "fixed thanks great bug report justinhelmer", "d": "4/2014"}, {"body": "hi tsjoberg yes intended behavior sync fire regardless options passed said always check options handler hope helps smiley", "d": "4/2014"}, {"body": "thanks braddunbar realized trigger handy options passed trigger sure maybe docs could bit specific docs make silent true global event stopper thanks", "d": "4/2014"}, {"body": "nt control anything nuget better asking seems", "d": "4/2014"}, {"body": "complement", "d": "4/2014"}, {"body": "sorry nevermind something wrong code apologize", "d": "4/2014"}, {"body": "think solution stackoverflow answer pointing good one would big break change array might ask plugin author add property instance plugin would keep date listening collection events", "d": "4/2014"}, {"body": "opinion relying generally antipattern models nt know anything collections contain much way objects nt generally contain reference containing array best method determining whether model part particular collection", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "brad totally agree using property nt best way accomplish task hand given exist feel like least complete understand change would insignificant break kinds things certainly nt unheard around parts see thisoptions views oh well guess", "d": "4/2014"}, {"body": "could always iterate collections demand need js var model new backbonemodel var new backbonecollection model model true model true var model backbonemodelextend collections function allcollections return filter allcollections function col return colcontains var collections new backbonecollection modelcollections allcollections", "d": "4/2014"}, {"body": "might better luck question stackoverflow irc channel mailing list github issues improving framework nt worked chrome apps apis ca nt say sure basically array behind scenes able get away pollyfilling history calling", "d": "4/2014"}, {"body": "sure backbone considers chrome packaged apps one senario use backbone backbone needs care tried disable url find disabled chrome maybe historyjs would also fall look later anyway thanks reply", "d": "4/2014"}, {"body": "maybe router isnt best way manage state chrome app lack url bar lead look state management elsewhere js thankfully backbone tools models collections views still useful context really depends use case", "d": "4/2014"}, {"body": "yeah kind drag guessing justification case internals add works case one easy work around find index model like snippet backbonecollectionview", "d": "4/2014"}, {"body": "unfortunately need index model collection index model bulk array models inserted try illustrate problem let create collection items var mycollection new backbonecollection id id id inserting collection later var bulkinsert id id id let subscribe add events collection mycollectionon add function model collection options want know index new model bulkinsert unfortunately two problems bulkinsert array holds regular objects instantiated backbonemodels indexof wo nt work application bulkinsert happens completely separate file way make reference variable consolelog inserting item bulkinsertindexof model bulkinsertlength let add items collection single add operation first index result collection models ids mycollectionadd bulkinsert suppose pass bulkinsert array options method seems really messy", "d": "4/2014"}, {"body": "pr might looking mind chiming", "d": "4/2014"}, {"body": "yup looks like fix issue closing ticket", "d": "4/2014"}, {"body": "sorry think best way handle either wrap create separate method calls fetch parameters place", "d": "4/2014"}, {"body": "example provided fetch method compose url query parameters stated translating options url logic outside url method would violate principle separation concerns violating separation concerns would make easier introduce bug introducing nonstandard method mycustomfetch would make code difficult people read wrapping fetch would inevitably violate dry generally hassle point using toolkit reduce hassle", "d": "4/2014"}, {"body": "hey henrytseng expects response json representation model passed first api nt implement form restfulness might return empty object better luck question irc channel mailing list issues development backbone", "d": "4/2014"}, {"body": "hi enunez version backbone using treatment query strings routing updated recently using latest version query string passed last argument route handler", "d": "4/2014"}, {"body": "hi braddunbar using latest release code issue occurs end extractparameters calling decodeuricomponent entire fragment instead looping individual parameters splitting amp extractparameters function route fragment var params routeexec fragment slice return map params function param nt decode search params paramslength return param null return param decodeuricomponent param null", "d": "4/2014"}, {"body": "ok misunderstood missed navigating directly gon na want put query string instead query string last argument router wo nt decoded", "d": "4/2014"}, {"body": "braddunbar think misunderstanding navigating contrived example navigating please read explained imagine anyone tries set query parameter value something contains amp character backbone current behavior make impossible parse", "d": "4/2014"}, {"body": "right got using issue either way need use query string prefixed", "d": "4/2014"}, {"body": "braddunbar hmm ok bit confused path correspond arbitrary string act hack get backbone urldecode query string nt polluting url unnecessary cruft surely come better solution tested solution indeed work pointlessbogus pathname url", "d": "4/2014"}, {"body": "right example use like", "d": "4/2014"}, {"body": "still superfluous url live thanks help", "d": "4/2014"}, {"body": "sure thing glad could help", "d": "4/2014"}, {"body": "hi edwardoyarzun advantage delegating within view events cleaned upon removal usually better idea add listener parent view call method trigger event child need help stop irc channel try mailing list issues generally reserved development backbone", "d": "4/2014"}, {"body": "probably need define path jquery reqiureconfig", "d": "4/2014"}, {"body": "thanks garthenweb unfortunately option jquery plugins attach functions window sometimes use somechild someplugin view setting jquery path someplugin exist backbone scope besides would define path jquery would loaded already embedded page", "d": "4/2014"}, {"body": "jquery still exposes global even using amd precisely reason set loader plugins fine also shim plugins use amd loader", "d": "4/2014"}, {"body": "technical details aside would ever want call route url history nt changed definition route supposed", "d": "4/2014"}, {"body": "calling route might checking see route valid given current state ie user logged turns route invalid need redirect kind view point click back button go back invalid route would ideal could avoid ever putting invalid route history stack", "d": "4/2014"}, {"body": "hi asakusuma written similar route filtering logic think proposed solution problems importantly ignores direct navigation url case history entry already created issue moot handled identically much better user experience imo leave url cases user choose go back like", "d": "4/2014"}, {"body": "braddunbar good points issues brought perhaps multipage form might better example let say page form accidentally click link another page say page ideally like stop routing happens still page show dialog asking user really wants navigate away form let say want go back page form hit browser back button page made history stack navigate page want manually navigate page user filtering action performed keep mind custom hook behavior default usual case means would agree cases leaving url best user", "d": "4/2014"}, {"body": "nah think stay closed nt want user go particular url nt make url clickable ui general url app user able go point time really point urls first place better form would remember data entered allow navigate away without complaint still halffilled press back button return backbone routing intended occur change location happened supposed get involved allow user go next", "d": "4/2014"}, {"body": "general url app user able go point time really point urls first place well put arrive eg found sure want filter based form state pretty easily days js var router backbonerouterextend execute function handler args thisformactive amp amp confirm sure handlerapply args else historyback history entry still think probably messing history confusing often", "d": "4/2014"}, {"body": "yeah think makes even worse least attributes seem update every attributes seem stick around forever think would help function determine whether within change event attributes hash cleared change event oh well thanks trying help mon mar pm adam krebs notifications githubcomwrote maybe thishaschanged function return thisget city thisprevious city reply email directly view github", "d": "4/2014"}, {"body": "speeds bower install make package look clean likely concat minify js bundle anyway include minified version think better question come files like componentjson cname nt ignored", "d": "4/2014"}, {"body": "think speed issue probably negligible whole point min file faster download said would assume anyone using bower probably comfortable build tools position really need download speed boost minified file gives probably know run build tools rest application", "d": "4/2014"}, {"body": "think better question come files like componentjson cname nt ignored good call", "d": "4/2014"}, {"body": "garey nt understand situation believe treating fetches like synchronous things asynchronous fetch called request issued server gives response collection populated javascript nt wait fetch complete continues executing rest code model fetch returns faster fetches potential collections could still empty go render template js var phones phonecollectionphones issues asynchronous call phonesfetch renew true var addresses addresscollectionaddresses issues asynchronous call addressesfetch renew true issues asynchronous call thismodelfetch success function potential empty model fetch call finishes phones addresses calls consolelog phonesmodels consolelog addressesmodels one solution would keep counter successful requests call another function counter reaches desired amount slightly crude would trick semi pseudocode js backboneviewextend initialize function thiscounter bindall successfulrequest render function thisphones phonecollectionphones thisphonesfetch renew true success thissuccessfulrequest libraries could help parallel tasks pseudo code could done like js backboneviewextend render function var self phones phonecollectionphones addresses addresscollectionaddresses hopefully nt heavy handed answer questions let know", "d": "4/2014"}, {"body": "hi garey suspect astraldragon correct probably get help irc channel mailing list issues reserved development backbone", "d": "4/2014"}, {"body": "one unexpected consequence addition found morning agree seems like half solution nt think minting new event gains us anything convinced need benefit composite keys backbone best support documentation lacking", "d": "4/2014"}, {"body": "agree seems like half solution let back master time", "d": "4/2014"}, {"body": "would set directly antipattern", "d": "4/2014"}, {"body": "perhaps included documentation morning", "d": "4/2014"}, {"body": "convinced need benefit composite keys backbone nt think backbone ca nt unopinionated force singlecolumn keys time really want revert try turn plugin gut instinct going quite invasive trivial implement", "d": "4/2014"}, {"body": "please revert keep talking way implement solves problem completely", "d": "4/2014"}, {"body": "revert pr", "d": "4/2014"}, {"body": "reverted closing discussion continued", "d": "4/2014"}, {"body": "check fiddle see problem", "d": "4/2014"}, {"body": "dirty checking told", "d": "4/2014"}, {"body": "issue world around", "d": "4/2014"}, {"body": "issue background background gt ok check change event triggered lt error copy paste", "d": "4/2014"}, {"body": "made copy paste error previous fiddle issue reality event triggered", "d": "4/2014"}, {"body": "right using reference array object examples change string return false new old values take look lines see actually going might help step code debugger different scenarios", "d": "4/2014"}, {"body": "best bet put primitives arrays objects properties models", "d": "4/2014"}, {"body": "understood right", "d": "4/2014"}, {"body": "maybe possible clone object arrays compare know would expensive permit detect changing state", "d": "4/2014"}, {"body": "js var background b c modelset background background change event var clone background modelset background change event var clone background modelset background change event", "d": "4/2014"}, {"body": "exactly mean hoping come source code backbonejs mine solution thanks", "d": "4/2014"}, {"body": "garbage collection take care dom element still exists view still referencing means something else still referencing view perhaps event fix fix problem root", "d": "4/2014"}, {"body": "jashkenas created gist issue first thought something wrong stripped everything back removed events etc however also see issue please excuse ive made silly error missed example simply removes view soon rendered use devtools take heap snapshot look htmldivelements see containing highlighted red adding fixes issue im happy log pr agree issue", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "adding never going real fix certainly take look", "d": "4/2014"}, {"body": "jashkenas thanks taking look look trace tree seemed indicate holding reference element thought realised made sense reference removed woud remove ability view calling maybe function would another option give devs choice", "d": "4/2014"}, {"body": "issue example variables declared globally never going garbage collected wrap example iife see gc takes place expected", "d": "4/2014"}, {"body": "worked debugging jashkenas seems like delete kick gc much faster actually never able get drop dom reference using example", "d": "4/2014"}, {"body": "variables declared globally never going garbage collected voila", "d": "4/2014"}, {"body": "welp", "d": "4/2014"}, {"body": "thanks tgriesser works expected problems code find smile", "d": "4/2014"}, {"body": "feature glitch affected maybe would simple assign outside callback synchronous callstack example jquery", "d": "4/2014"}, {"body": "darrrk rjs bug mentioned steps reproducetest case would prefer identify core issue via test case work based incomplete information please feel free add info rjs bug something use reproduce also backbone different jquery backbone dependencies need loaded backbone synchronously define dependencies available", "d": "4/2014"}, {"body": "yes issue still exists", "d": "4/2014"}, {"body": "problem", "d": "4/2014"}, {"body": "ahh see validation saving normal functionality", "d": "4/2014"}, {"body": "think assumptions wrong treating url pushstate contains query string basic http breaking backbone might mainly used javascript clientonly apps could used apps integrate complex website server interaction forced roll back wo nt able update fix personally think bad move would love jashkenas take matter", "d": "4/2014"}, {"body": "take braddunbar spent lot time thinking ways make work best personally think using query params within backbone router bit fool game necessarily fake actually parsed server better use convention query params like point folks want use change way allowing feel free patch copy backbone behave way like", "d": "4/2014"}, {"body": "right either consistent support query params fragment query string sent server cases since utility support former overwhelmingly greater gone said several options patch put parameter path eg use root leave query string fetch need page loads pass query params always sent server monkey patch", "d": "4/2014"}, {"body": "hi certainly wo nt deny time thinking braddunbar behind feature really point know could patch backbone keeping date original repo maintain single correction nt look really optimal problem feature expecting people something special keep project working like whole web intended work could nt least way opt feature", "d": "4/2014"}, {"body": "hey olance nt think provide option behavior would require great deal complexity seldomused feature ca nt justify costs besides nt think good idea general using backbone router saying client handle portions url past root", "d": "4/2014"}, {"body": "okay see point well bad really ca nt break support right guess freeze backbone version project patch need new features later", "d": "4/2014"}, {"body": "need case ulrira", "d": "4/2014"}, {"body": "frustrated backbone defined uri scheme inline http uri scheme rfc updated obsoleted rfc section states gives example empty segment path segment ending specifically addressed root uri important understand section build context around applying uri segments section also referenced examples fact rfc http rfc updated rfcs obsoleted specifically states compare urls section empty abspath equivalent abspath section section state structure request uri define requesturi absoluteuri abspath authority host port abspath query erroneous backbone treat trailing slashes nonpresent trailing slashes nonequivalent issue reopened reconsidered", "d": "4/2014"}, {"body": "eh nt mean rude extremely strong appeal authority without actually looking servers trailing slashes web currently carefully reading rfcs saying mean empty segment path empty abspath talking truly empty path ie root server well fine trailing slashes part nonempty path perhaps wrongly entirely semantic servers redirect equivalent automatically many backbone needs support use cases prefer also served user navigates broken url like let look wild say example page served without trailing slash try visiting one see get uri scheme inline http uri scheme arse", "d": "4/2014"}, {"body": "would care enlighten parts carefully reading references rfc section rfc section mean empty segment path empty abspath talking truly empty path ie root server well fine herein lies issue neither rfc states whether uri trailing slash equivalent one without fairly thorough reading interpreted mean equivalent disagree also clarify url broken user navigates broken url like uri hierarchical nature use slash character separating hierarchical components file systems character used denote hierarchical structure uri delimiter used construct file name hierarchy thus uri path look similar file pathname imply resource file uri maps actual filesystem pathname refute making appeal authority appeal authority roughly follows idea expert b b x way x right rfcs accepted become de facto specification concepts describe even claiming rfc authority appealing appeals authority necessarily fallacious seem implying misuse appeals authority problematic referencing specification misuse appeal authority fallacy expert web technologies treats trailing nontrailingslash uris nonequivalent trailing nontrailingslash uris nonequivalent subject logical fallacies consider also fallacy fallacy fallacy committed necessarily invalidate argument example example props interpretation fallacious appeal authority important developers consider happens end understand backbone treats urls differently whether agree examples support interpretation rfcs fallacious appeals authority must considered practicalities sake uri scheme inline http uri scheme arse need snark issue tracking forum roast way understanding point needing support cases perhaps form configuration option workable solution treating optional part route definition", "d": "4/2014"}, {"body": "way understanding point needing support cases perhaps form configuration option workable solution sure sounds like fine idea want cook pull request", "d": "4/2014"}, {"body": "perhaps yet still needs list supported runtimes feel free use objectdefineproperty directly", "d": "4/2014"}, {"title": "route render intooutlet nt work specifying viewname", "body": "main view route nt appear set time render additional views using", "num": "4797", "d": "4/2014"}, {"title": "dynamic route segments nt urlencoded", "body": "read associated pr looks like everybody involved agreed url encoding work nt look like things ultimately landed issues closed favor rolling fix part alexspeller query params work unfortunately appears url encoding handled query parameters dynamic route segments quick example things go wrong take look js bin example two models one id raw one id encoded click link encoded model refresh page see loads raw one instead appear behavior would expect always encode dynamic path segments avoid kind ambiguity", "num": "4794", "d": "4/2014"}, {"title": "autolocation breaking bugfix", "body": "using released possible set rooturl location end slash eg blows would consider breaking bugfix currently tagged bugfix compounding issue changing rooturl makes impossible access app thereby breaking links across app expected redirect urls need trailing slashes seems like nasty thing encounter especially going thanks yall cc rjackson jayphelps", "num": "4793", "d": "4/2014"}, {"title": "templateroutecontrolleretc lookups fail lookup name exists objectprototype", "body": "see twitter thread tl dr firefoxonly bug prevents naming route embertemplateswatch detected function tries render function another jsbin route named fails probably limit want support let discuss careful lookup logic cc nathanhammond", "num": "4792", "d": "4/2014"}, {"title": "reseting classnames extending parent component breaks events", "body": "see jsbin dragging test component say first works expected basically component js var compone embercomponentextend classnames compone attributebindings draggable draggable true dragstart function consolelog compone dragstart var comptwo componeextend classnames comptwo wont work since keeps parents classnames resetclassnames function thisset classnames comptwo init drag get drag get nothing alternate way reset", "num": "4791", "d": "4/2014"}, {"title": "uncaught error assertion failed metamorph tags metamorphxyzstart metamorphxyzend different parents", "body": "noticed error appear tables specified appears though ember adding tag adding closing metamorph new tag instead original placing", "num": "4789", "d": "4/2014"}, {"title": "nesting foo bar inside baz quux causes inner render", "body": "details jsbin jsbin illustrates bug scope aliasing composable example see two cases two helpers one using notation nested inside two helpers one using alias notation nested inside using alias notation would expect see results cases instead using doublealiased notation causes inner render theoretically could related kind doubt unfortunately solved", "num": "4787", "d": "4/2014"}, {"title": "collectionview destroying childviews multiple times", "body": "example collectionview triggering twice computed content property set example using works expected", "num": "4784", "d": "4/2014"}, {"title": "handlebars helper within collection outputs statement result", "body": "array controller collection view controller collection view class mycollectionview embercollectionviewextend tagname ul itemviewclass emberviewextend show gt true property controller template handlebars statements within collection helpers output result ifstatment instead ever handlebarshtml put ifif code would result unordered list true instead list true true behaviour occurs using unless using ember beta", "num": "4782", "d": "4/2014"}, {"title": "option push promisaryarray content", "body": "hai nt find option push promisaryarray object content like please let know already available consider feature request thanks advance regards lokesh", "num": "4781", "d": "4/2014"}, {"title": "error template loading", "body": "sure something wrong applicationroute something like javascript actions error function error transition var self metadata timeout action function error transition bootstrapdialogalert message request timeout forbidden action function error transition selftransitionto companies unauthorized action function error transition windowlocationreplace errorresponsejsonredirecturl bad gateway action function error transition throw new error error errorhbs templete expect fired bad gateway error template nt load specific way load default error template thanks", "num": "4780", "d": "4/2014"}, {"title": "render helper rendering variable", "body": "unable pass variable render helper dynamically render controller something able reasons nt possible right ember throws error canary apr uscentral simply nt render nt say anything", "num": "4777", "d": "4/2014"}, {"title": "feature request pass dk triggered change", "body": "tying make feature computed properties found saying wish would receive name dependency triggered change spoked hjdivad nt see reason also told krisselden would gatekeeper changes add feature pretty minimal apparently js function iterdeps method obj depkey seen meta var guid guidfor obj seen guid seen guid seen guid depkey return seen guid depkey true var deps metadeps deps deps amp amp deps depkey deps var key deps var desc metadescs key desc amp amp descsuspended obj continue method obj key gt method embermetallibpropertyeventsjs function propertydidchange obj keyname var obj metakey watching amp amp mwatching keyname gt keyname length proto amp amp mproto desc amp amp mdescs keyname proto obj return nt mean watching key desc amp amp descdidchange descdidchange obj keyname gt pass along dk name watching amp amp keyname length return dependentkeysdidchange obj keyname chainsdidchange obj keyname false notifyobservers obj keyname since already data context free pass along could generalpurpose addition might helpful extra argument name dependentkey triggered change would optional course updated well keep coherence ready make happen prefer ask make changes delicate parts", "num": "4776", "d": "4/2014"}, {"title": "linkto update href related object change", "body": "assuming model related user object want make link user page template may write something like work perfectly good long user object wont replaced one like happens link update text keep old invalid href example workaround attached example would force linkto synchronization giving direct path object helper like please verify consider bug happy work fix ps noticed possibly related behaviour causing linkto href object id difference may due usage ember data async relations thus dspromiseobject able replicate", "num": "4773", "d": "4/2014"}, {"title": "runbind always convey return value callback", "body": "docs say ca nt done invoked within existing run loop someone unaware hidden complexities run loop nt make sense nt occlude return value neither using name bind already expected behaviour developers may easily assume providing enhanced version native case intuitive use promise chains promises may resolved outside run loop yet promise chains often depend assimilation methods transform resolve value surprise developer feature request convey return value callback cases", "num": "4771", "d": "4/2014"}, {"title": "concurrency history mechanism implemented emberrouter", "body": "curious reason behind decision stated presume workaround missing features", "num": "4767", "d": "4/2014"}, {"title": "embera always return array emberarraydetect returns true", "body": "jsbin jsbin inner iframe check js console ember assertion error break getting error need reload guides api docs seem imply passing array return assume type array consumed recently encountered situation getting weird error upon checking assertion fails turned returning false javascript array trying use upon reading docs led seemed perfect fit however even passing array getting error debugging jnhuynh realized since array coming outside emberland due situation things organized company product ember app run iframe gets data outside missing ember prototype extensions verified following quick test javascript var innerwindow iframe contentwindow outerarray innerwindowemberarraydetect innerwindowembera outerarray false nt exactly supposed address able get around using one two techniques recreate array elementbyelement array created emberland directly change array results jshint error deprecation felt wrong interest ember right thing feel right wrong thing feel wrong feel might issue worth investigating", "num": "4765", "d": "4/2014"}, {"title": "use property name views", "body": "property view causes collisions ember internals fiddle unhelpful error pops took way long figure", "num": "4764", "d": "4/2014"}, {"title": "normal see rejected promises transitionto", "body": "normal see lot rejected promises using transitionto library version ember inspector ember ember data emberfire handlebars jquery", "num": "4762", "d": "4/2014"}, {"title": "ember source gem seems messed", "body": "left right looks like something borked gem building process gem probably yanked rubygems asap many people get installed", "num": "4759", "d": "4/2014"}, {"title": "entry routermap method api", "body": "trying find comprehensive usage description router map ca nt even find method api", "num": "4758", "d": "4/2014"}, {"title": "good way make optional dynamic segments strange errors return", "body": "tried add dynamic segment optional app first thing nt know optional param syntax started getting strange non descriptive error templates things took hour realize going matter much tried make param optional param param could huge problem please fix", "num": "4757", "d": "4/2014"}, {"title": "support omitting trailing slashes rooturl autolocation", "body": "autolocation asserts rooturl ends slash breaks apps eg fix plan submitting pr soon", "num": "4751", "d": "4/2014"}, {"title": "ember package converted module", "body": "emberqunit uses module import ember instance ember however ember modules import ember instance embermetalcore instead using emberjs release file use custom build process following current convention converts ember modules amd ember package converted export ember variable module available could make available build process wondering possible default behaviour currently implemented", "num": "4749", "d": "4/2014"}, {"title": "expected deprecations test output hidden", "body": "without possible know hitting deprecated code unintentionally", "num": "4748", "d": "4/2014"}, {"title": "using createchildview still throws deprecation using defaultcontainer warning", "body": "containerview autogens children container views views added render matter add view child container get deprecation using defaultcontainer longer supported defaultcontainer lookup see error even first using createchildview context child containerview jsbin even skipped view sending var v thisget quad createchildview emberview attr thisget quad pushobject v still giving depreciated error pushobject told irc channel might bug posting examples interwebs woefully date thanks", "num": "4746", "d": "4/2014"}, {"title": "emberrsvppromiseall failing firefox safari", "body": "mac os x experiencing strange case using code looks something like loadtopology function var url emberenvapihost emberenvapinamespace join var store thiscontainerlookup store main var promises emberrsvppromiseall storefind tenant storefind host storefind tunnelzone storefind bridge storefind mnrouter storefind chain function values return values function reason rejection consolelog reason buildtopology function values prefetchdependencies debugger var raw values var store thiscontainerlookup store main call methods application route point thistopologyloadtopology function values bind function error consolelog error chrome version opera version statement prints correctly array full resolved promisesvalues safari version firefox version prints known bugs regarding safari firefox help would appreciated thanks alex", "num": "4744", "d": "4/2014"}, {"title": "arraycomputed performance regression", "body": "effects ember discuss thread fix introduced performance regression trades correctness performance patch eagerly computes non array dk invalidated easily induce serious datadriven thrashing likely correct path forward push cp semantics arraycomputed computed consumption likely easier said done unsure another path forward thanks gordon kristan initially reporting providing access app could track exact regression", "num": "4740", "d": "4/2014"}, {"title": "query params driving crazy", "body": "users route params like problem go page go whole different route go back still shows page instead default page spent day tracking ca nt figure please help thanks", "num": "4737", "d": "4/2014"}, {"title": "query params new bug", "body": "query params support great however hit bug trying error loading route error assertion failed arrayproxy expects array emberarrayproxy passed object put together jsbin reproducing error issue seems passed object contextmodel expects", "num": "4735", "d": "4/2014"}, {"title": "container lookupfactory code path normalizes multiple times", "body": "wasteful code path solution mimic rest container functions normalize validate external interface handle internals without normalize", "num": "4734", "d": "4/2014"}, {"title": "inconsistency currentpath routercurrenthandlerinfos", "body": "hey routes defines hit returns handlers application foo foobar application controller set confusing expecting see handler nt see one please close bug possible please clarify handlers nt result index path thanks", "num": "4727", "d": "4/2014"}, {"title": "binding class names render incorrect classes", "body": "hi maybe using incorrectly reproduced jsbin see expect emberview foo bar classes rendered instead emberview rendered using comma emberview foo bar makes css fails bug using incorrectly thansk", "num": "4726", "d": "4/2014"}, {"title": "improvement hook handle reducecomputed complete invalidations", "body": "write feel lacks way handle total invalidations acording reducecomputed docs dependent keys whose values arrays treated regular dependencies change computed property completely recalculated sometimes useful dependent arrays similar semantics dependent keys end use one time semantics item added removed dependency computed property completely recomputed way total invalidations handled undesirable side effect one application building list money transactions ordered date built cp acted filter function shows transactions within time frame limits time frame must bound cp observing one others previous one ended chart problem changed whole array thrown away performance killer cp received waterfall managed create generic naive primitive embercmp build cp using nt feel really natural think solution another function options object reducecomputed handle complete invalidations example course defined default invalidation strategy like empty array start would backwards compatible since addiction current api feel adding looking internals reducecomputed might able submit initial implementation receive hjdivad blessing", "num": "4724", "d": "4/2014"}, {"title": "showing server side validation errors base object", "body": "let say object story two properties title body validation rules title body also validation rules object whole nt apply one property directly example okay story duplicate title long body different rails suggested base level validation errors placed onto base attribute assuming object nt base attribute already javascript errors returned look like ember model story add base property ember place base validation errors onto model object base errors displayed page object invalid jsbin without base enter information click create object invalid notice base error messages displayed form fill new title new body object changes invalid state uncommited state jsbin base property base added property ember model following behavior occurs enter information click create object invalid base error messages displayed fill new title new body object change invalid thus exception thrown ember try save desired behavior would way display base error message let object saved user corrects title body", "num": "4723", "d": "4/2014"}, {"title": "qps idea add route", "body": "name would default set would pass set values sure qps values would allow using params without checks values nulls maybe could default sure would useful feature example js controller queryparams isadmin hasnotifications page somewhere action thissetproperties isadmin null page route queryparams passnulls false model function params consolelog params page hasnotifications undefined return thisstorefind user params", "num": "4721", "d": "4/2014"}, {"title": "qps idea add route option", "body": "basically prevent writing annoying configuration every qp route route allow every qp refreshes model", "num": "4720", "d": "4/2014"}, {"title": "queryparams pass model hook", "body": "expect qps model hook null string since ca nt pass params directly query backend using", "num": "4719", "d": "4/2014"}, {"title": "unbound helper handlebar helper throws exception", "body": "unbound helper assuming helpers registered emberhandlebarhelpers line case using ember appkit helpers object instead resolved container lookup came two work arounds involves registering helpers app initialized appkit specific emberkeys requirejseakseen filter function key return apphelperstest key foreach function modulename try var module require modulename null null true", "num": "4713", "d": "4/2014"}, {"title": "computedsort slows hangs sortproperties change", "body": "seems slow crawl hang browsers changed often minimal demo using click table headers reorder times things get noticeably slow pasted reference action table headers modifies turn used update works time changes internals take time theory appears multiple calls line interacting badly filling runloop redundant work relevant part confirmed also issue latest canary used jsbin cc hjdivad ebryn followup ps workarounds use computed property create instead refactor use possible", "num": "4712", "d": "4/2014"}, {"title": "avoid suggesting usage native promise", "body": "hey long ember supports correct avoid suggesting usage native object supported currently documented thanks", "num": "4711", "d": "4/2014"}, {"title": "allows changes initial object", "body": "using create oneway copy object allows modify initial object change property computed object example change input values expected behavior", "num": "4709", "d": "4/2014"}, {"title": "feature include ember delegations core", "body": "sick writing tons created small library allow define ember delegations following ruby delegate module example code could like sure unique problem company using ember production months ago find pattern useful guys think including ember core thanks", "num": "4708", "d": "4/2014"}, {"title": "htmlbars", "body": "ebryn kselden mmun working", "num": "4707", "d": "4/2014"}, {"title": "easy stomp cps components due default cp setters", "body": "due default setter semantics computed properties surprisingly difficult work around issue binding computed properties inside components illustrate issue contrived jsbin slightly realistic example details examples nt important following discussion nt presume read let say define computed property component bind property surrounding context like bindings update computed property component overwritten value controller bound probably case completely wipes computed property component ca nt avoid using throw error undesired update instead swallowing ca nt avoid semantics regular computed property nt setter defined however define computed property two unused arguments avoid default setter cf love solution catch makes even worse uglifyjs likely minifiers notice extra arguments unused rewrite function remove result adding two arguments nt need also using perform kind noop optimization nt get rid jumping hoops like really feels like going grain overlooking easy way avoid problem loss solved sensible way perhaps could modified accept flag would make writes noops instead throwing thrilled solution either best able come anyone else better solutions suggest would interested hear cc ghedamat", "num": "4705", "d": "4/2014"}, {"title": "autolocation rooturl work nonhistory browsers", "body": "circumstances user may redirected ember url respect configured application example instead redirecting historysupported url hashsupported url user redirected problem ember combining router browsers support ie see example repository explanation minimal application reproduces issue", "num": "4704", "d": "4/2014"}, {"title": "url location bar browser nt change user clicked link href", "body": "ember version browser chrome version use use location api browser hbs template links routes url browser locationbar changes click one problems click link url clicking nt change url locationbar anymore although still renders correct templates quite confusing since url locationbar nt change jsfiddle although nt show issue since location bar jsfiddle never change created screen cap", "num": "4701", "d": "4/2014"}, {"title": "withhelper controller operator loses scope", "body": "use withhelper controller option operator scope lost output properties scoped object see jsbin demo", "num": "4699", "d": "4/2014"}, {"title": "doc routing guide incorrect", "body": "routing guide nested resources gives examples like dynamic route template jsbin showing false example show template", "num": "4695", "d": "4/2014"}, {"title": "redirect hook resource triggered intrernal route transitions", "body": "tranisting controller via trainstiontoroute redirct hook parent resource call redirects default location js app emberapplicationcreate approutermap function thisresource testsuper path function thisroute testinner thisroute testbrother applogtransitionsinternaltrue apptestsuperroute emrouteextend redirect function transitioning default route thistransitionto testsupertestinner beforemodel function apptestsupercontroller emcontrollerextend actions transitiontobrother function thistransitiontoroute testsupertestbrother transitiontoelder function thistransitiontoroute testsupertestinner hbs lt gt welcome emberjs lt gt linkto testsupertestinner goelder linkto button action transitiontobrother gt brother button action transitiontoelder gt elder outlet behaviour started working fine", "num": "4692", "d": "4/2014"}, {"title": "router logs non error object rejects poorly", "body": "people reject non error objects likely good idea provide message property error logging router logs stack see", "num": "4691", "d": "4/2014"}, {"title": "testing click link linkto helper", "body": "hello try implement tests app works well try element built helper error tried result miss", "num": "4690", "d": "4/2014"}, {"title": "currentwhen linkto disregarded", "body": "property given helper disregarded routename set currentwhen route given linkto resource works correctly broken working jsbin broken jsbin debugging tracks line introduced route given linkto resource last handler index route evaluates true currentwhen overwritten possible solution index route previous handler assigned ready open pr solution correct without change wo nt work cc machty raytiley", "num": "4688", "d": "4/2014"}, {"title": "loading substate applicationroute nt working", "body": "trying perform asynchronous initialization application route want use substate user nt see blank screen however nt seem work jsbin demonstrates issue looks like like ember trying find route named actual route name checked paused line bug create magic route simply renaming template doesnt trick", "num": "4687", "d": "4/2014"}, {"title": "emberarraycomputed consider compound dependent keys", "body": "attempting work around mmun suggestion ended something like expecting two invocations item one empty object setupdata called set however even seeing two invocations one set another property needed still set tried continued fire twice still undefined times", "num": "4684", "d": "4/2014"}, {"title": "pushpayload finishing arraycomputed called", "body": "two caveats preemptive apologies question surely specific isolated whatever behavior speaking almost certainly wellunderstood ground anyone understanding ember well jsbin two models chat amp message create chat record use add message chat response happens sideload chats get property passed id available properties obviously problematic given intended nature calling thing item anyone help triage whether bug otherwise explain things way thanks tonywok amp helping work bit", "num": "4681", "d": "4/2014"}, {"title": "emberkeys never use objectkeys anymore", "body": "release version emberkeys objectkeys whereas beta emberkeys always version overriden browsers nt support objectkeys seems like done transformation emberruntime cc rjackson", "num": "4675", "d": "4/2014"}, {"title": "ember behaves differently", "body": "hi updated ember application getting rendered application using super lot places make problem using requirejs well debug app found triggered indexroute nothing happen route structure route map approutermap function thisresource public path public function thisroute login thisroute logout emberrouterreopen transitionto function name param handling code thissuper name appbaseroute emberrouteextend setup function context var thatsuper thissuper require rp function handling code thatsupercall self context function error handling error rendertemplate function router context windowscrollto appindexroute appbaserouteextend redirect function thistransitionto publiclogin apppublicloginroute appbaserouteextend", "num": "4674", "d": "4/2014"}, {"title": "thiselement null within embercomponent", "body": "trying something like null set use get element point", "num": "4673", "d": "4/2014"}, {"title": "arraycontroller addobject check object content", "body": "current implementation arraycontroller inherited emberarray specify arraycontroller use passing model instance one wrapped item controller return false object always added even might exist array model wrapped model checking object existence js bin able add green able add", "num": "4672", "d": "4/2014"}, {"title": "nt call textarea using shiftenter", "body": "hey guys sure issue maybe improvement parameter textarea great usually shiftenter add new line nt call see facebook behavior example might try pull request find time thanks", "num": "4670", "d": "4/2014"}, {"title": "way customize linkto active class", "body": "generally good practice prefix state class would like modify active class instead even able something like currently possible emberjs", "num": "4668", "d": "4/2014"}, {"title": "autolocation breaking hash browser given hash path", "body": "giving hash browser ie actual hash url resulting canceling router setup blank page tracked line also trying determine autolocation code release quite different master see significant changes master version may issue resolved unable find proper history changes rjackson jayphelps", "num": "4667", "d": "4/2014"}, {"title": "resolver issues updating", "body": "way background app currently mixture ember nonember code set cases manually instantiate views controllers add dom realize nonstandard use case necessary decided rebuild existing large app ember stages certain cases necessary us access ember objects store nonember code ie ember issues using resolver way resolver seem find corresponding objects time run container fashion function executes returns undefined realize nonstandard use case nt relying variable underscores around name work indefinitely however variable clearly still exists one methods returning undefined obvious reason see errors app prior lookups occurring ca nt find anything changelog suggests change would occurred incidentally found similar issues return null however coding issue end able work around", "num": "4666", "d": "4/2014"}, {"title": "unable linkto models route glob", "body": "put together jsbin tried make obvious possible issue expected outcome possible completely misunderstood seems real documentation around using route globs would expect take array models necessary generate glob seems work specify array directly however array generated computed property nt work also whenever array multiple values also seems longer work", "num": "4665", "d": "4/2014"}, {"title": "qunit explodes integrating opalrb", "body": "qunit test adapter dies using opalparserjs lines seem source update test suite runs look ember source found change causes test failures lines javascript test asyncstart calls stop function var originalstop windowstop try windowstop function ok true stop called adapterasyncstart finally windowstop originalstop test asyncend calls start function var originalstart windowstart try windowstart function ok true start called adapterasyncend finally windowstart originalstart changing gets test passing nt cause failures test suite sure logic attaching qunit start stop window nt submitted pull request may intended behaviour", "num": "4664", "d": "4/2014"}, {"title": "queryparamsnew array parameter gets stringified using linkto", "body": "take look following jsbin see clicking link button rendered helper makes array query parameter string clicking stringifies string", "num": "4663", "d": "4/2014"}, {"title": "ember sortfunction results typeerror", "body": "using ember sortfunction variable results typeerror even within core ember code see sortablemixin code sortfunction compare returns typeerror using sortfunction calculate result", "num": "4661", "d": "4/2014"}, {"title": "ember bound action issues iterated context late binding", "body": "bind property assumed current context opposed possible iterated context working amp work around using item controller giving real context section unfortunately must force context meaning ca nt say search working", "num": "4659", "d": "4/2014"}, {"title": "bindattr class strange behaviour mixed static classes", "body": "example unintuitive behaviour least know mixing static classes binded ones good idea maybe better warn user somehow also another one using static classes problems limitations current binding system htmlbars fix waiting much htmlbars", "num": "4657", "d": "4/2014"}, {"title": "log defaultresolverresolve", "body": "working ember app recently hard time knowing call things ember opinion things often end guessing around dark trying figure magical string today backendordersshipmentsmanifestitemcontroller discovered hacked app resolver causes output console gives pretty good indication ember assuming something lacking information clearly shows right names things think setting similar would great benefit like getting started ember", "num": "4654", "d": "4/2014"}, {"title": "transpile task broken windows", "body": "currently modulename generation done using pathjoin however windows path separator rather causing two things modules nt basepath removed module names entirely incorrect module names also include incorrectly escaped characters missing normal separators example one generated module name", "num": "4651", "d": "4/2014"}, {"title": "error safari chrome initializing promise route", "body": "sure whether bug appreciate guidance towards solution trying wrap nonpromise functionality promise object use part model function route finding even declaring causing safari error typeerror attempting configurable attribute unconfigurable property chrome nt seem issue see behavior creating new embercli project simply rewriting following export default emberrouteextend model function var promise new promise function resolve reject success resolve value article seems related issue directly applicable actually changing return value function", "num": "4650", "d": "4/2014"}, {"title": "additional documentation regarding location history", "body": "one need understand using bootstrap page indexhtml server needs serve page url app routing mechanism take otherwise urls failed load found use case better explanation", "num": "4649", "d": "4/2014"}, {"title": "global variables get reset transition external site", "body": "global variables get reset initialized values transition external site back via browser back button use case follows login route upon successful login set event handler handling server send event messages setup shown called upon successful login var app emberapplicationcreate es test applogincontroller embercontrollerextend setup appes new eventsource sse appesonmessage function event consolelog sse message received everything works fine navigate routes application messages going back forth ember server receive sse messages server problems navigate external site via tag eg wwwgooglecom back via browser back button es gets reset test sse messages longer received behavior nt sound right since es keeps value even refresh", "num": "4648", "d": "4/2014"}, {"title": "setting controller property undefined works", "body": "setting controller property undefined seem change property jsbin showing problem bin works use case setting property undefined rather false workaround problem set property bound contenteditable attribute false fails syntax error", "num": "4644", "d": "4/2014"}, {"title": "issue auto location", "body": "using hashes way routes setup try access page domaincomcustomers without login first get redirected domaincomlogin soon try use auto location maybe history location well scenario returns get customers", "num": "4643", "d": "4/2014"}, {"title": "embermixin behaves differently", "body": "noticed behaves differently sorry short writeup heading wanted get reported soon rather later jsbin look console output notice causes mixin patterns work properly", "num": "4641", "d": "4/2014"}, {"title": "linkto helper loses view context statement occurs within context", "body": "jsbin example issue", "num": "4637", "d": "4/2014"}, {"body": "chrisvariety known issue see temporary workaround remove assert", "d": "4/2014"}, {"body": "chrisvariety known intentional limitation initial release discussed decided nt breaking bug fix shipped completely broken nonhistory browsers nt actually work one several issues due rooturl passed autolocation digging bug discovered trailing slash rooturls actually correctly supported location classes autohistoryhash said see need plans fix started several reasons correctly support nontrailing slash roots one example location classes treat two different history states app boots user clicks browser history state incorrectly made url change historyhash means back button take back previous index state intended nutshell use case simply never considered location classes written", "d": "4/2014"}, {"body": "jayphelps thanks much makes sense seem like complicated problem totally missed going go head close one defer yonder", "d": "4/2014"}, {"body": "worth noting imo urls much consistent looking use ends trailing slash vs historyhash vs historyhash opinion servers default forcing trailing slash others default removing either case always configurable", "d": "4/2014"}, {"body": "totally agreed never even tested nonhistory browsers guess care experience little", "d": "4/2014"}, {"body": "chrisvariety thank reporting though even issue known us knowing real users experiencing something helps us prioritize things decide whether assumptions correct", "d": "4/2014"}, {"body": "jayphelps course thank thinking stuff nt wink", "d": "4/2014"}, {"body": "fixes modern browsers move away embertemplates completely eakecli users wont effect us templates stored modules retrieved via loader", "d": "4/2014"}, {"body": "either check property exists valid template name worst different perbrowser basis", "d": "4/2014"}, {"body": "even catch error user wo nt know tested failing browser opinion since nt care prototype allow property names save add check add new assert templates named hasownproperty nt troll ability check", "d": "4/2014"}, {"body": "speaking subtle trolls blow matter unless null prototype edit noticed machty references first post smile", "d": "4/2014"}, {"body": "need make sure stuff like emberinspector nt iterate embertemplates expect hasownproperty exist", "d": "4/2014"}, {"body": "recent discussion creating dictionaries using plain objects short version trying come solution appears nt try appears ton subtle bugs perbrowser basis people opposed creating dictionary implementationadopting one know correct pros guaranteed correctness cons code slower likely dealbreakingly slow require tweaks lots places inside ember cc ebryn", "d": "4/2014"}, {"body": "considered using mixin instead inheritance eg edit quite right get idea would recommend using second variable instead overwriting variable dragging eg", "d": "4/2014"}, {"body": "chrisvariety guess decent workaround", "d": "4/2014"}, {"body": "ebenroux assertion thrown helper used inside tag without specifying assertion introduced mentioned release blog hence nt issue", "d": "4/2014"}, {"body": "ah see thanks", "d": "4/2014"}, {"body": "changed controller template added template mycollectionviewtemplate added templatename mycollectionviewtemplate itemviewclass setup solved issue could someone confirm whether first setup deprecated solution meant used different situations", "d": "4/2014"}, {"body": "promisearrays extend arrayproxy implements mutablearray use promisearray anywhere could use mutablearray long fulfilled", "d": "4/2014"}, {"body": "seems invalid", "d": "4/2014"}, {"body": "closed already resolved", "d": "4/2014"}, {"body": "yes thank", "d": "4/2014"}, {"body": "able work temporary solution sure side effects guess since bound value changed could break things", "d": "4/2014"}, {"body": "rendering bound path supported moment assertion still firing jsbin completely agree would wonderful bound properly many edge cases would need thought took stab ago want review", "d": "4/2014"}, {"body": "well fact already job without tests yet", "d": "4/2014"}, {"body": "interest usecase wanting", "d": "4/2014"}, {"body": "use case implementing hook reducecomputedarraycomputed properties handle changes nonarray dependencies changes array dependencies handled right happens cp completely invalidated recomputed scratch key triggered change available allows decide must trigger action think situations knowing helpful basically free performance terms since already data", "d": "4/2014"}, {"body": "definitely seems like bug believe issue reported bcardarella", "d": "4/2014"}, {"body": "yep behaviour described looks exactly one mentioned ps", "d": "4/2014"}, {"body": "closing favour", "d": "4/2014"}, {"body": "runbind needed promise chains legacy callback foreign libraries introduce async please note rsvp promise already provide runloop juice need", "d": "4/2014"}, {"body": "api nt seem mention whether promise chain execute within run loop resolve reject functions invoked outside look right controller function", "d": "4/2014"}, {"body": "docs explain somewhere gladly review pr doc additions clarify usage correct promises internally already put actions queue run loop present spawn autorun creates runloop us means actually impossible rsvppromise thencatchfinally handles invoke runloop want pedantic concerned autoruns following correct tl dr want wrap root fresh call stack runloop", "d": "4/2014"}, {"body": "x stefanpenner wish could help way technically deficient think want write something nt mind completely totally wrong lot working happily create pr thoughts would welcome", "d": "4/2014"}, {"body": "julianleviston gladly work submit pr cc gladly work", "d": "4/2014"}, {"body": "hiya curious use case needs two simultaneous router states also clear defining multiple states cases nt nested routing handle use cases part issue nt browser handle history mechanism pretty sure traverse history ember using brower history api good enough definitely trivially build url caching mechanism simply appending array willtransition something tho work within ember app might help bit", "d": "4/2014"}, {"body": "use new query params feature bind params application controller needs side panel controller rendered sidebar outlet", "d": "4/2014"}, {"body": "hi thank answer truth new ember also statecharts like idea statecharts read book ian horrocks constructing user interface statecharts try implement one example namely student database short table students data edit delete add new persist remote database saving see statechart diagram explanation application started summary screen entered student records fetched database displayed scrolling list student records database delete edit buttons disabled records database delete edit buttons enabled save button summary screen enabled disabled based whether user made changes student records application enter changes made student records state either delete button summary screen clicked ok button details screen clicked save button clicked changes made student records committed database application return changes made student records state user clicks cancel button details screen changes made student record details screen updated database application returns last summary screen state since two parts summary screen statechart history symbol appears twice sorry long post ps maybe could solve handling save button state setting flag changes made records feel like complex situation could easily led spaghetti code way want avoid statecharts first place nt mean storing states variables around", "d": "4/2014"}, {"body": "sounds lot looking computed properties compute state based upon constituent properties controller set individual boolean property time one described actions occurs use input computed property determines whether particular action allowed also make computed properties based upon number records receive well information found ember guides nonember code setting flag like would likely lead lot messy code computed properties ember really clean recommending closed bug please feel free reach personally glad work simple js bin still desire additional help smile wagenet rjackson nominate closing controllers provide enough state use case even nt got coming wink", "d": "4/2014"}, {"body": "nathanhammond agree however nt want marginalize heads write stack overflow andor message could continue discussion good fit source code issue tracker though particular issue referenced years old iirc fairly sure find clue community use cases bit higher ie high level use cases closer user core ember might find could find easy solution issue", "d": "4/2014"}, {"body": "julianleviston yep also encouraged get touch band always hated issues closed without comment smile", "d": "4/2014"}, {"body": "nathanhammond good form love things directed community much possible want catch use cases hopefully distill documentation least deal much known unknowns possible comes people getting stuck stumbling block people guides cookbooks", "d": "4/2014"}, {"body": "thank guys accept close ticket continue eg based asked days ago nobody answered maybe ember forum get bigger attention", "d": "4/2014"}, {"body": "created topic ember forum continue think nathanhammond think contact soon", "d": "4/2014"}, {"body": "replied question hopefully reasonably comprehensively", "d": "4/2014"}, {"body": "second workaround setting array still work forced use first workaround resolved", "d": "4/2014"}, {"body": "probably use variable name help reduce collisions trolling developers believe would twoline change ca nt vouch rest codebase expecting property exist alternatively somewhere", "d": "4/2014"}, {"body": "resolution today transition although may want deprecate one release release recall many checks peoples code cc krisselden", "d": "4/2014"}, {"body": "discussed core team meeting today definitely agree preventing usage change release cycle allow deprecation first", "d": "4/2014"}, {"body": "rjackson coordinate comments", "d": "4/2014"}, {"body": "gh sucks realtime", "d": "4/2014"}, {"body": "unfortunately yes think nt thoroughly thought suspect future iterations improve", "d": "4/2014"}, {"body": "ok thanks driving crazy thinking done something wrong suppose promise rejections nt thing error use sideeffects drive behavior agree would nice promise tree designed favor resolutions expected outcomes leave open marker possible improvement", "d": "4/2014"}, {"body": "promise rejections errors case router using incorrectly", "d": "4/2014"}, {"body": "yes leave open future improvement extra noise confuses debugging bug", "d": "4/2014"}, {"body": "definitely messed thank reporting yanked published please close confirmed", "d": "4/2014"}, {"body": "looks good thanks", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "source obviously reference api uses dsl think ie method property router canoncial reference router grant particularly comprehensive", "d": "4/2014"}, {"body": "thank look source looked guide could see way make optional dynamic segment see issue missing something", "d": "4/2014"}, {"body": "mean optional dynamic segment better open stack overflow question point sounds like usage problem rather issue source projects try clear descriptive possible using explicit examples stackoverflow question stefanpenner mentioned issue opened router microlibrary worth looking project see explains trying opening stack overflow try help link close issue", "d": "4/2014"}, {"body": "mean set param route someroute param somerouteparam nothing follows someroute get weird error upon trying build app breaks everything looking project seeing nothing far major problem posted stack overflow nobody responding yet old issue solution pretty awful hoping built optional param functionality every router", "d": "4/2014"}, {"body": "mgenev ember nt frameworks nt necessarily behave way expect need learn works assume works like something else seen think question reasonable answer also nt link stack overflow quesiton like asked close issue", "d": "4/2014"}, {"body": "sorry ember nt frameworks nt necessarily behave way expect sounds pretty cultish ember tool designed help wise knowing entity routers web development need params optional otherwise quite difficult things many scenarios stack overflow question", "d": "4/2014"}, {"body": "ya great absolutely must documented docs must readily available easy find would course hope api self describing cases possible", "d": "4/2014"}, {"body": "mgenev maybe someday make knowing entity far ai attempts nt successful", "d": "4/2014"}, {"body": "mgenev cultish piece software like software learn works", "d": "4/2014"}, {"body": "stefanpenner lt", "d": "4/2014"}, {"body": "julianleviston learning works appears missing key functionality makes write ton extra code go around hence filing issues", "d": "4/2014"}, {"body": "stefanpenner thanks understanding", "d": "4/2014"}, {"body": "mgenev apologies man feel pain actually trying help", "d": "4/2014"}, {"body": "julianleviston thanks appreciate attention", "d": "4/2014"}, {"body": "mgenev dude check well might help huge amount", "d": "4/2014"}, {"body": "sorry confusion part ember actually resides microlibrary likely better idea open issue repo", "d": "4/2014"}, {"body": "wasting hours still solution really really bad usage docs area fundamental thing", "d": "4/2014"}, {"body": "mgenev really sorry hear man please paste code jsbin put stack overflow simple example see help try modify docs help people issues reckon", "d": "4/2014"}, {"body": "made repo public linked stack overflow framework needs changing imo docs", "d": "4/2014"}, {"body": "thing takes express strange errors waste time routes directly data want", "d": "4/2014"}, {"body": "mgenev sorry overly familiar express nt understand http verb okay sec google node based server side framework gets server handling requests important keep mind ember clientside framework requests perse actions amp events responses actions amp events usually formed bindings andor functions mentioned issue created lot routing taken care fact ember uses data binding get massive wins take look todomvc example get feel much ordinarily multiple requestresponse flow nt ember bindings best example give probably routes normally responses view edit new actions three cases could handle template ember fact route differences slight provided conditionals handlebars templates example name field might presented like template isediting textarea name else name end thanks making repo public providing context really helps", "d": "4/2014"}, {"body": "small nodejs app test serving without trailing slash", "d": "4/2014"}, {"body": "example found assume ends trailing slash even though neither assert demonstrated navigating clicking index new browser history state created even though nt left needs addressed well unrelated", "d": "4/2014"}, {"body": "hosted example configured remove trailing slashes server side note assert added removed order get app boot", "d": "4/2014"}, {"body": "plan provide ember module first need ensure exposed module hierarchy want expose change also afterwards due semver", "d": "4/2014"}, {"body": "ppcano working converting build tooling use broccoli see progress part process converted ember package moved vendored files separate packages current internally used module names public api certainly fine use custom build process generate amd builds application please realize update module names application likely break intend rename modules use much saner amp consistent api", "d": "4/2014"}, {"body": "rjackson stefanpenner guys discussed import specific vendor packages git submodules example routerjs rsvpjs would find easier debug understand packages imported way", "d": "4/2014"}, {"body": "longer term plan import wip branch moved standalone packages starting point would like import via bower store ember repo bower nt wonderful story locking dependencies may resort submodules manually cloning needed eventually", "d": "4/2014"}, {"body": "nt see deprecation warnings provide steps reproduce", "d": "4/2014"}, {"body": "sorry open browsers console jsbin click redyellowblue list show depreciated defaultcontainer warning autogens view lines causing var v thisget quad createchildview view attr thisget quad pushobject v", "d": "4/2014"}, {"body": "version ember rsvp", "d": "4/2014"}, {"body": "known bugs releatively new versions ember could provide steps reproduce preferably jsbin data persistence library version tell us version ember amp rsvp using suspect unrelated", "d": "4/2014"}, {"body": "julianleviston sorry forgot put versions post ember ember data handlebars jquery stefanpenner try create scenario using jsbin report back thanks instant reaction", "d": "4/2014"}, {"body": "keep posted reproducible steps able figure would quickly", "d": "4/2014"}, {"body": "stefanpenner would kind provide private email would send project trustworthy ember core team member imo could test running common suspects etc able see working correctly chrome failing firefox safari write email alexdaquino gmail com reply file", "d": "4/2014"}, {"body": "intuitivepixel stefanpenner gmailcom fyi im currently epic internet issues home likely going relocate somewhere else bit likely investigate", "d": "4/2014"}, {"body": "stefanpenner forgot say user amp password use ever want", "d": "4/2014"}, {"body": "firefox safari get full stack error originates buildtopology failure appears pushing data store retrieval nt think ember rsvp problem", "d": "4/2014"}, {"body": "humm perform work reducecomputed invalidation different goal similar reasons see", "d": "4/2014"}, {"body": "mmun hjdivad planning chat hours rope ping gtalk stefanpenner gmailcom irc iamstef", "d": "4/2014"}, {"body": "well depending many hours could hard barcelona right fairly night owl much sweat ping tomorrow know decided", "d": "4/2014"}, {"body": "stefanpenner hjdivad yesterday meeting conclusion", "d": "4/2014"}, {"body": "per krisselden hjdivad mmun reverted fix performance regression still leaves original issue outstanding time simple way fix without performance hit mmun time pr revert master stable branches", "d": "4/2014"}, {"body": "rjackson note plan solve original problem take time act mmun hjdivad krisselden time permits could post discourse post something outline plans", "d": "4/2014"}, {"body": "stefanpenner mean reply existing post issue new topic general idea use primitive trackedarray layers arrayproxy collectionview details whole observing flushing consume later bit need working", "d": "4/2014"}, {"body": "issue tracker source code forum technical support use stack overflow issue tracker cases specific bug report reproduce explain detail also probably supply jsbin least source code routes example stack overflow question", "d": "4/2014"}, {"body": "thanks tip future googlers posted", "d": "4/2014"}, {"body": "nt query params bug need define catsindexroute returns array model", "d": "4/2014"}, {"body": "machty thought routes inherited parent works fine attribute commented perhaps misunderstanding happily corrected pr route inheritance", "d": "4/2014"}, {"body": "ah totally right strange investigate", "d": "4/2014"}, {"body": "looks like entering setupcontroller hook passed context query params object instead inherited model", "d": "4/2014"}, {"body": "machty tried narrow scope one finally find inconsistency model hook iterating object containing object function return object queryparams property consequence model hook nt look parent model later setupcontroller called queryparam property context nt know bug paramsfor model hook hope helps", "d": "4/2014"}, {"body": "machty friendly ping sly finding help", "d": "4/2014"}, {"body": "sandstrom yes check thanks", "d": "4/2014"}, {"body": "behaving correctly believe one behaves closely looking property application controller", "d": "4/2014"}, {"body": "ca nt see classnamebindings jsbin maybe posted incorrect version", "d": "4/2014"}, {"body": "also nt think bug likely stack overflow better place ask", "d": "4/2014"}, {"body": "oops linked wrong one sorry update post", "d": "4/2014"}, {"body": "think would nice actually worked correctly would love hear others thoughts", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "viable solution", "d": "4/2014"}, {"body": "actually right solution works stupid still think bug anyway thanks help", "d": "4/2014"}, {"body": "would love feature smarter filtering great use case stefanpenner exactly talking earlier", "d": "4/2014"}, {"body": "cibernox want discuss implementation feel free ping irc emberjsdev although feel comfortable internals happy look pr come", "d": "4/2014"}, {"body": "already looked internals reducecomputed yesterday try write initial implementation weekend ping irc need advice", "d": "4/2014"}, {"body": "closing favor", "d": "4/2014"}, {"body": "seems like emberdata thing", "d": "4/2014"}, {"body": "agree concept", "d": "4/2014"}, {"body": "fyi use emberobject accomplish", "d": "4/2014"}, {"body": "machty good know although sure simpler solution desired longrun", "d": "4/2014"}, {"body": "dunno pretty easy define config obj one place reuse many different routes reopen might preferable expanding api surface dunno shall see", "d": "4/2014"}, {"body": "closing given got workable solution using ember primitives", "d": "4/2014"}, {"body": "looks like dup", "d": "4/2014"}, {"body": "closing favor pr", "d": "4/2014"}, {"body": "closing duplicate", "d": "4/2014"}, {"body": "top file suggest", "d": "4/2014"}, {"body": "assume referring code examples examples written specifically rsvp standpoint trying infer native promise object agree perhaps clarification made examples", "d": "4/2014"}, {"body": "rjackson yea everyone clicking source code first example generated api doc uses thanks", "d": "4/2014"}, {"body": "asaf still referring rsvp promise agree confusing stefanpenner docs actually rsvp docs think reason nt namespaces context nt global thoughts", "d": "4/2014"}, {"body": "wagenet correct add rsvp rsvp though although plan iswas share docs mdn promise section hence leaving ideal solution ember specific blurb top think", "d": "4/2014"}, {"body": "stefanpenner suggest docs generated straight rsvp library", "d": "4/2014"}, {"body": "ya unsure could nt think good solution wrote docs imported", "d": "4/2014"}, {"body": "shallow oneway expected behavior", "d": "4/2014"}, {"body": "makepanic good point though probably document better clarify shallow willing submit doc pr cc stefanpenner", "d": "4/2014"}, {"body": "lots controllers proxies adding delegate reserves yet another word moved away api also nt see improvement existing computed macros alias readonly oneway", "d": "4/2014"}, {"body": "would likely fine party addon designed mixin", "d": "4/2014"}, {"body": "exactly improvement current api syntax sugar avoid repeating many ruby programmer quite used use delegation fact part rails ruby find familiar therefore like nt know deserves builtin core line blurry", "d": "4/2014"}, {"body": "javascript var alias embercomputedalias appdashboardcontroller emberobjectcontrollerextend needs application name alias controllersapplicationname version alias controllersapplicationversion currentpath alias controllersapplicationcurrentpath", "d": "4/2014"}, {"body": "rjackson indeed use", "d": "4/2014"}, {"body": "suggestion would mixin wont conflict proxied values inlcuded multiple times different delegations think inheriting delegates easily addon", "d": "4/2014"}, {"body": "stefanpenner like zzarcon think general consensus cool idea implemented mixin nt need use private internals live iterate faster addon folks use apps closing issue please link project", "d": "4/2014"}, {"body": "stefanpenner rjackson thanks fast feedback thought mixin approach ended internal think common thing continue thinking different way maybe like stefanpenner proposal however library forget put link issue description", "d": "4/2014"}, {"body": "zzarcon actually like much mixin nt clutter much nt mess ember class way extend existing class mixin would attribute maybe would work", "d": "4/2014"}, {"body": "note anyone else eventualbuddha know issue working resolve", "d": "4/2014"}, {"body": "eventualbuddha jayphelps progress like cut today would like include fix release", "d": "4/2014"}, {"body": "eventualbuddha l free today help cc rjackson", "d": "4/2014"}, {"body": "jayphelps rjackson made progress fix nt quite work main commit fix branch fix updated sample app illustrates bug vendor fixed ember version gets stuck redirect loop rootdir rootdir url built version ember vendored app cherrypicking commit onto tag running wedding go today unlikely able finish one want take far run happy pass baton", "d": "4/2014"}, {"body": "eventualbuddha jayphelps chatted issue irc minutes ago thinks way around issue update back things progress", "d": "4/2014"}, {"body": "rjackson ended happening", "d": "4/2014"}, {"body": "eventualbuddha rjackson minutes fix top ready", "d": "4/2014"}, {"body": "rjackson eventualbuddha tested seems good pushed changes morning make sure got latest needing manual merge conflicts", "d": "4/2014"}, {"body": "also created question bug please close accordingly ca nt really find anything related", "d": "4/2014"}, {"body": "machty ping", "d": "4/2014"}, {"body": "regression ie location stuff may address cc rjackson", "d": "4/2014"}, {"body": "aiampogi stefanpenner wagenet machty rjackson everyoneintheworld looked cause privy code path recently sorry long post indeed bug regression related autolocation ie bug stepping code see called click destroyer link contains happens notice published version ember back would update url state null created fix mixonic though appears fixing iframe reasons bug master stable yet code accidentally lost cherrypick conflict merge stable fixed adding missing changes stable brings indeed fixed waiting demos fixed", "d": "4/2014"}, {"body": "jayphelps lt thank tracking confirming fixed stablebetamaster", "d": "4/2014"}, {"body": "thanks jayphelps looking forward", "d": "4/2014"}, {"body": "believe fixed master rjackson think fixed confirm", "d": "4/2014"}, {"body": "canary still exhibits behaviour computed property available bare context ie computedvalue calls computedvalue itemcontroller obviously doenst output anything yeah stefanpenner canary build master", "d": "4/2014"}, {"body": "stefanpenner believe fix referring related still pending final kris guess issue though dig morning confirm", "d": "4/2014"}, {"body": "two cents think jsbin contains mistake last ncomputedvalue computedvalue next object understand correcly refer external controller index controller seems good use case access itemcontroller", "d": "4/2014"}, {"body": "expected controller proxied passed object like objectcontroller model route case computedvalue available ncomputedvalue", "d": "4/2014"}, {"body": "rjackson get dig", "d": "4/2014"}, {"body": "looks like merged jsbin still nt working guessing nt fix also confirm seen issue number times apps", "d": "4/2014"}, {"body": "leepfrog nt callback function resource add empty function create route automatically", "d": "4/2014"}, {"body": "comment nt need create postindexroute documentation presented incorrect updated", "d": "4/2014"}, {"body": "docs look fine specifically see issue screenshot would help", "d": "4/2014"}, {"body": "oh gah eyes see index appears children routes underneath correct", "d": "4/2014"}, {"body": "yes even nt children callback function get index route", "d": "4/2014"}, {"body": "ok clearly issue close thanks", "d": "4/2014"}, {"body": "machty ping", "d": "4/2014"}, {"body": "tusharmaini could please get code working jsbin demonstrates issue", "d": "4/2014"}, {"body": "machty requested jsbin demo check console log time tranistion brother route sister route parent route redirect hook triggered mentioned nt case ember lt", "d": "4/2014"}, {"body": "confirm think surprised people nt reported", "d": "4/2014"}, {"body": "candidate stack overflow bug ember please open issue stack overflow link close issue", "d": "4/2014"}, {"body": "futur users", "d": "4/2014"}, {"body": "cedriclombardot thanks", "d": "4/2014"}, {"body": "fyi found error put bad settimeout instead using emberrunlater", "d": "4/2014"}, {"body": "made work defining route explicitly setting use template javascript approutermap function thisroute applicationloading appapplicationloadingroute emberrouteextend rendertemplate function thisrender loading reason though would appreciate feedback author machty", "d": "4/2014"}, {"body": "ok bit confused thought routetemplate since mentioned docs see separate route application load useful", "d": "4/2014"}, {"body": "reading source think found workaround case though means ever update emberdata one pushing data", "d": "4/2014"}, {"body": "hjdivad ping", "d": "4/2014"}, {"body": "searls meant link something perhaps jsbin still exhibit failing behaviour getting following console", "d": "4/2014"}, {"body": "sorry totally lost bin apparently see approach dk property apparently processed last whole summary displays correctly compare one dk computed array updated", "d": "4/2014"}, {"body": "declared content never deserialized data object", "d": "4/2014"}, {"body": "ah believe issue persist afk wed apr pm martin mu\u00f1oz notifications githubcom wrote declared content never deserialized data object reply email directly view github", "d": "4/2014"}, {"body": "nevermind right reason app nt work jsbin reproduce issue thought closing get reproduce whatever happening app thank", "d": "4/2014"}, {"body": "well took quite bit complexity accurately model real application issue appears related handlebars binding aggressively updating arraycomputed payload pushed requires method called instance hydrated layman theory anyhow new jsbin cc jasonkarns", "d": "4/2014"}, {"body": "first glance looks like getting call called creates empty record calling actually load", "d": "4/2014"}, {"body": "right arraycomputed listen property changes object worked around using instead dependent key", "d": "4/2014"}, {"body": "hey mmun able get workaround mostly work case side effect calling twice item means store item instancemeta say actually pointing instead previous item considered kosher additem called twice item", "d": "4/2014"}, {"body": "searls yes additem called every time property changes case added undefined second time ember data calls setupdata reducecomputed concept updating changing property changes object removed readded ie fire removeditem addeditem hooks", "d": "4/2014"}, {"body": "hmm okay clear would case dk messages right original problem arraycomputed fired setupdata wed apr pm martin mu\u00f1oz notifications githubcom wrote searls yes additem called every time property changes case added undefined second time ember data calls setupdata reply email directly view github", "d": "4/2014"}, {"body": "searls right original problem new record added record array setupdata called seems like something could changed ember data may reasons current order", "d": "4/2014"}, {"body": "current behavior obviously desirable exact case cc ask intentionality emberdata wed apr pm martin mu\u00f1oz notifications githubcom wrote searls right original problem new record added record array setupdata called seems like something could changed ember data may reasons current order reply email directly view github", "d": "4/2014"}, {"body": "think behavior side effect implementation prepromisified version emberdata object eagercreated isloading state detected issue begins hint upon resolve record updated via pointed look implementation notice wearing two hats first glance seems like could remove upsert behavior turns methods relying like make go friday curious ifhow step branch anyone insight", "d": "4/2014"}, {"body": "nt problem stack overflow problem framework specifically point say illustration jsbin pastiebin maybe ember source code issue tracker nt appropriate place", "d": "4/2014"}, {"body": "thank yes created one issue ticket stack overflow well", "d": "4/2014"}, {"body": "closing favor post", "d": "4/2014"}, {"body": "think elementid set ember guid nt set trying think need say thisget element want get element computed property get element coffeescript", "d": "4/2014"}, {"body": "ah green showing thanks", "d": "4/2014"}, {"body": "pleasure glad", "d": "4/2014"}, {"body": "fact think check object existence content array nt see scenario would call addobject arraycontroller itemcontroller instance created arraycontroller", "d": "4/2014"}, {"body": "denisnazarov agree bitten past well would care take crack pr", "d": "4/2014"}, {"body": "rjackson sure time later week", "d": "4/2014"}, {"body": "denisnazarov thank pr would wonderful closing favor pr time", "d": "4/2014"}, {"body": "note problem", "d": "4/2014"}, {"body": "see", "d": "4/2014"}, {"body": "simple fix line emberjs change pull requesting ruby working well mac sure breaking something else changing still love ember though", "d": "4/2014"}, {"body": "think khis kind question better fit stackoverflow instead monkey patching embertextsupport simply reopen embertextarea class like maybe also ways want nt think issue anyway", "d": "4/2014"}, {"body": "thanks edit said think issue needed improvement", "d": "4/2014"}, {"body": "benjaminn unsure make change default internally definitely obvious get behavior could submit pr clearly document done", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "yea could something like", "d": "4/2014"}, {"body": "wow two great answers thanks helping mmun alexdiliberto", "d": "4/2014"}, {"body": "whoa", "d": "4/2014"}, {"body": "stuck meetings right ca nt confirm clicking links mobile leads believe bugfixes unit tests nt get cut maybe though obviously hash worked even borked dunno maybe partial merge", "d": "4/2014"}, {"body": "dig tonight jayphelps likely correct could related bad merge missed commit refactoring late series", "d": "4/2014"}, {"body": "jayphelps rjackson looks case looking release build nt see latest updates noticing nuances autolocation probably related could otherwise fine latest", "d": "4/2014"}, {"body": "irony true code missed contained unit tests catch", "d": "4/2014"}, {"body": "rjackson tl dr shit indeed broke need get release asap quickly write bugfix path nt remove hash method truly hope former considering test coverage fixes tell moar tell situation includes autolocationrelated prs original docs bugfix security bugfix missing pr heavily refactors things support full unit test coverage time fixing several bugs found writing tests merged master indirectly rjackson prolly hard track backwards pr onto issue described able reproduce well custom build using production claims really nt canary diff two able easily see causing issue whatever reason wrote started chopping hash nt equal expected value even though outcome example sort check obviously note doubled slash since cut previously missing pr fact fix issue test coverage path", "d": "4/2014"}, {"body": "jayphelps thanks taking look seems pretty critical think pulled rather patching found little things wrong cancelrouter stuff working correctly even history browsers", "d": "4/2014"}, {"body": "tried running autolocationrelated issues go away", "d": "4/2014"}, {"body": "btw anyone reading sorry pushing bad code weary", "d": "4/2014"}, {"body": "jayphelps still lt", "d": "4/2014"}, {"body": "agreed working pull release branch unsure make yet review rest core", "d": "4/2014"}, {"body": "rjackson cool might good idea someone audit make sure trading one bug others etc would shame release whatevs say hey fixed oh shit kidding", "d": "4/2014"}, {"body": "jayphelps looks good original issue actually issue far", "d": "4/2014"}, {"body": "found little things wrong cancelrouter stuff working correctly even history browsers ignore", "d": "4/2014"}, {"body": "jayphelps yea sorry fine observation", "d": "4/2014"}, {"body": "discussed core team meeting missing commit pulled stable branch releasing", "d": "4/2014"}, {"body": "rjackson", "d": "4/2014"}, {"body": "beers", "d": "4/2014"}, {"body": "awesome begone custom fork mine fri apr pm garth poitras notifications githubcom wrote beers reply email directly view github", "d": "4/2014"}, {"body": "rjackson wonder consider including fix related bug quite", "d": "4/2014"}, {"body": "eventualbuddha patch safe thoroughly tested happen otherwise wil need wait", "d": "4/2014"}, {"body": "eventualbuddha would definitely prefer fix long fix easy reason tested seems good chat irc closing issue since offending commit merged release channel cut next couple days", "d": "4/2014"}, {"body": "rjackson latest thinking cut", "d": "4/2014"}, {"body": "nothing comes mind provide reproducible steps please", "d": "4/2014"}, {"body": "aware changes caused breakage terencerocks need jsbin failing test demonstrating issue fully understand reporting", "d": "4/2014"}, {"body": "figured bug least anything directly related resolver close issue sorry confusion posterity using custom resolver tripped recent change called basically calling common helper function took applicable super function argument ember implementation seem allow us pass way simply use code inside method works", "d": "4/2014"}, {"body": "recently tried document wildcardglobbing route perhaps enough understand works globbing path one dynamic segment replace entire url tried work around jsbin excepting third case think works cc machty", "d": "4/2014"}, {"body": "thanks taking look working documentation immediate case happy enough passing string long term think way pass list models glob default method serializing url segment example route resolved reasonable default would would make consistent singular route segments", "d": "4/2014"}, {"body": "blayto believe already done via route serialize hook", "d": "4/2014"}, {"body": "closing think bug would definitely welcome documentation updates area", "d": "4/2014"}, {"body": "rjackson trying make argument default serialize hook behavior route globs sorry nt clear", "d": "4/2014"}, {"body": "blatyo worries nt understand point issue also pretty simple implement manually think common enough case merit embedding default route hook perhaps addon make simple including mixin would useful others help make case common enough include", "d": "4/2014"}, {"body": "mfeckie solution seems good would mind submitting pr would need prefix", "d": "4/2014"}, {"body": "pr solution looks good", "d": "4/2014"}, {"body": "thanks rjackson amp stefanpenner submit pr soon", "d": "4/2014"}, {"body": "ran issue ggohierroy come workaround seems like change default param instead fixes formatting handle server side kind hacky", "d": "4/2014"}, {"body": "provide jsbin demonstrating issue", "d": "4/2014"}, {"body": "try give minutes found one calls error originates within emberrun sequence could problem", "d": "4/2014"}, {"body": "seems work though clue current application code fails nextsuper problem nt pre releases", "d": "4/2014"}, {"body": "implementation changed unfortunately new implementation function expected async scenarios see following issues bit detail michaelvdheeren confirm issues", "d": "4/2014"}, {"body": "could cause first function mentioned pushpayload triggered async using sse please one related sortfunction within sortable mixin one within arrangeable mixin could easily adapt question remains solved", "d": "4/2014"}, {"body": "debugging seems like enter foreach loop within orderby function sortablemixin undefined hence code fails thisnextsuper", "d": "4/2014"}, {"body": "michaelvdheeren info reproduce jsbin", "d": "4/2014"}, {"body": "test written correct happened create new arrangeable mixin using arrayproxycreatemixin sortablemixin used arrangeable mixin arraycontroller", "d": "4/2014"}, {"body": "michaelvdheeren yeah first issue nt understand tests still pass definitely seems like broke somehow hum see app seems work refers window beta undefined maybe also broken something", "d": "4/2014"}, {"body": "rjackson ping", "d": "4/2014"}, {"body": "michaelvdheeren fixed", "d": "4/2014"}, {"body": "additionally sure appropriate switch assert false", "d": "4/2014"}, {"body": "addresses", "d": "4/2014"}, {"body": "closing favor", "d": "4/2014"}, {"body": "thinking something like optionsboundproperty actionname resolveparams optionsparameterscontext actionnameorpath types id data optionsparametersoptionsdata instead optionsboundproperty actionname handlebarsget target actionnameorpath optionsoptions need check additional use cases checked params without params bound seems fine far keep investigating", "d": "4/2014"}, {"body": "changed target current context merged master beta branch", "d": "4/2014"}, {"body": "rjackson works property exists current context aka would still break used would get context", "d": "4/2014"}, {"body": "great point thanks pr", "d": "4/2014"}, {"body": "nt mix instead htmlbars flexibility also warn sensible way handlebars nt enough awareness html", "d": "4/2014"}, {"body": "stefanpenner thanks explanation curious maybe better make change docs warning behavior could second example harmless could expectable first one wasted lot time thought something wrong controller property binding htmlbars around corner need bother", "d": "4/2014"}, {"body": "yeah needs big red show magic pretty button similar rails routes rake task better ie magically connected created objects rails needs tbh magic one things stops people jumping gap total beginner intermediate advanced", "d": "4/2014"}, {"body": "ya tried ember debugger browser plugin thu apr pm julianleviston notifications githubcomwrote image yeah needs big red show magic pretty button similar rails routes rake task better ie magically connected created objects rails needs tbh magic one things stops people jumping gap total beginner intermediate advanced reply email directly view github", "d": "4/2014"}, {"body": "ulisesrmzroche link chrome extension yes tried show assumed names controllers", "d": "4/2014"}, {"body": "see console controller last item list defined notice line generic objectcontroller associated hints controller name would ordershipmentscontroller", "d": "4/2014"}, {"body": "resolver names correctly though wonder bug chrome extension like defining routescontrollersviewsetc nt seen thu apr pm ryan bigg notifications githubcom wrote see console controller last item list defined notice line generic objectcontroller associated hints controller name would ordershipmentscontroller reply email directly view github", "d": "4/2014"}, {"body": "implemented", "d": "4/2014"}, {"body": "think emberinspector updated use resolvers function feasible agree definitely simpler find", "d": "4/2014"}, {"body": "yeah would nicer way open issue one done yet fri apr robert jackson notifications githubcomwrote think emberinspector updated use resolvers lookupdescription function feasible agree definitely simpler find reply email directly view github", "d": "4/2014"}, {"body": "thank much rjackson ulisesrmzroche", "d": "4/2014"}, {"body": "rjackson tackling", "d": "4/2014"}, {"body": "yep", "d": "4/2014"}, {"body": "found issue safari must referred fully closing ticket leaving future reference appreciate guidance difference browsers", "d": "4/2014"}, {"body": "tboyko browser using ember use emberrsvppromise promise works correctly ember runloop addition currently also much faster work correctly way back", "d": "4/2014"}, {"body": "gotcha thanks great talk emberconf btw", "d": "4/2014"}, {"body": "tboyko thanks", "d": "4/2014"}, {"body": "rlopes could link documentation referring referenced several places know none incredible job explaining require server serve ember app available routesbut particularly interested reading nt miss spot reference mdn nt seem mention eitherit difficult concept fully explain cause requires understanding sort hack http protocol uris explain person numerous times ultimately ended confusing people maybe provide common support examples like wildcard rewrite rule rails wildcard route etc would give people aha moment", "d": "4/2014"}, {"body": "thanks btw letting us know nt clear dancers", "d": "4/2014"}, {"body": "back case looked guide first looked router yes believe nt get straight first time besides lacking brain cells lack references even around time big plus ember cover details topic lacks details elsewhere thanks", "d": "4/2014"}, {"body": "would really helpful documentation common servers like apache iis etc", "d": "4/2014"}, {"body": "leave ember app navigating external site current state lost navigating back via browsers back button ember application starting scratch exactly initial load fundamental way browsers work bug ember", "d": "4/2014"}, {"body": "know case refresh button sure case back button tried following turn browser caching navigate parent route application see ember requesting data server side load hasmany records call expected navigate back forth parent route children routes without seeing ember request additional data navigate external site eg wwwgooglecom hit back button ember still able display everything correctly without going back server data based comment since browser nt caching data seeing request ember server data hit back button nt see request server side ember seems retained data somehow actually filed issue based observation", "d": "4/2014"}, {"body": "digging probz seems lie lines added commit cc stefanpenner", "d": "4/2014"}, {"body": "kategengler workaround try setting property explicitly controller updated jsbin", "d": "4/2014"}, {"body": "selvagsz thanks finding one add set test suite change conditional falsy", "d": "4/2014"}, {"body": "selvagsz thank looking finding workaround", "d": "4/2014"}, {"body": "closing issue favor seems like correct fix", "d": "4/2014"}, {"body": "rlopes understand problem correctly server must provide support handle possible url reloads direct navigation attempts", "d": "4/2014"}, {"body": "well moment running dev server provided grunt task nt understand difference behaviour capabilities hash location auto location still need test history location might limitation", "d": "4/2014"}, {"body": "idea behind location use location type client browser supports fall back location via browser sniffingdetection basically ensure server supports location setup application generally means wildcard route setup utilize use possible still support older browsers", "d": "4/2014"}, {"body": "yes get picture complete understanding could describe needed server side support history impression browser thing", "d": "4/2014"}, {"body": "using history first navigate wwwexamplecomlogin server try service request ember app chance get action need serve indexhtml whatever ember app bootstrapped every appropriate request served indexhtml ember router navigate login nt issue hash location since wwwexamplecom login handled server request indexhtml grunt task since grunt task using express app covers add wildcard handler serve indexhtml something like tasksexpressserverjs appget function req res resredirect distindexhtml think work april richard lopes notifications githubcom wrote yes get picture complete understanding could describe needed server side support history impression browser thing reply email directly view github", "d": "4/2014"}, {"body": "seems like documentation issue describe detail place nt already", "d": "4/2014"}, {"body": "finally get dumb thanks lot answers documentation love history option would welcome indeed however probably close issue time", "d": "4/2014"}, {"body": "rlopes want open new ticket improved documentation", "d": "4/2014"}, {"body": "may yes think benefit people getting started", "d": "4/2014"}, {"body": "digging real clear intended behavior actually used within ember docs vague usages could find wild looking code seems perhaps intention retroactively mixin things object eg swear though old docs mentioned using way instantiate mixins intention using wrong happy close otherwise leave open resolution", "d": "4/2014"}, {"body": "embermixin applies mixins embermixincreate way create mixin", "d": "4/2014"}, {"body": "yea swear old old old old docs website single page made mention using create mixins worked perhaps documentation actually would good idea", "d": "4/2014"}, {"body": "seems like helper somehow override view keyword think wrongly refers linkto view maybe linkto helper propagate correctly view keyword inside nested helpers workaround using ugly see debugging appears helper rendered emberhandlebarsboundview keywords cloned view keyword always overriden related concreteview linkview case see sure fix could maybe override view keyword already exists perhaps linkview beeing concrete view underlying issue cc stefanpenner", "d": "4/2014"}, {"body": "closing issue since looks like pr cover", "d": "4/2014"}, {"body": "ninjatronic excuse knowing already trying", "d": "4/2014"}, {"body": "want user able edit object since cope objects controller provides array keyvalue pairs used keyvaluepair added deleted array change detected computed property setter called however existing keyvalue pair edited example changing value header change detected computed property setter called trying detect change reflected object make sense", "d": "4/2014"}, {"body": "ninjatronic think sort question best asked stackoverflow thanks", "d": "4/2014"}, {"body": "think scenario keyword itemcontroller specified ever worked properly definitely right submitted resolve issue", "d": "4/2014"}, {"body": "aw crap probably breaking change lot people yes even though bug fix", "d": "4/2014"}, {"body": "ya may doit across releases warnsdeprecates thats possible", "d": "4/2014"}, {"body": "prior implementation meant context always changed content item controller even keyword case plain wrong honestly unsure often keyword used together need much possible ensure least impact folks think way deprecate number different code paths identifying exact scenario nontrivial", "d": "4/2014"}, {"body": "rjackson depends one looks one way looking specifying itemcontroller actually replaces outer controller another way looking itemcontroller behaves decorator outer controller documentation would really welcome discussion kind uncovers bit ember way actions events property req bubble template views controllers right route would possible multiple encapsulated controllers feels bit like sorts issues part makes things difficult grok beginning words clearly explained overall approach would solve problem obvious seems ember project nt described simple single overall approach yet similar nt kill matz pols principle least surprise really ie router controller views template unless itemcontrollers components partials multiple views render etc components really answer particular question though one wants replace context use component isolatespartitions context otherwise one interested maintaining context therefore decorator pattern good", "d": "4/2014"}, {"body": "think anyone could successfully argue current implementation correct scenario make sense completely clobber context using keywords originally felt specified itemcontroller would wrap outercontext context template essentially buffer two likely infer arguments earlier stefanpenner made clear context inside template untouched using keyword scenario", "d": "4/2014"}, {"body": "closing favor pr", "d": "4/2014"}, {"body": "seem problem function within arrangeable mixin created happens sortfunction called code sort function moment equal embercompare orderby function var result sortproperties get sortproperties sortascending get sortascending sortfunction get sortfunction", "d": "4/2014"}, {"body": "wycats maybe revert new super go back requirement use super mixin ensure mix super nt know state worse cc mixonic", "d": "4/2014"}, {"body": "krisselden inadvertently introduced regression say go back old behavior ship new evaluate semver", "d": "4/2014"}, {"body": "first let make clear agree reverting likely right choice said reverting complicated potentially error prone worried reverting change weeks point could potentially cause issues would nt benefit week cycle folks reviewing", "d": "4/2014"}, {"body": "rjackson agree wycats inclined revert mixin behavior super vexing hard debug lived longer ie think users depending calling super async people need apply mixin function sometimes overrides sometimes nt workaround need apply mixin provides base want apply mixin calling super", "d": "4/2014"}, {"body": "krisselden agree concern ensuring resulting point release likely stable without longer vetting process standard release cycle provides", "d": "4/2014"}, {"body": "reason inclined linked super approach trolled hard exception throwing old super reset code pointless since nt actually work use super unwrapped function", "d": "4/2014"}, {"body": "original bugfix", "d": "4/2014"}, {"body": "bit braindump plans firstly nt think number people bit asyncsuper broken large number worried think number somewhere around people reporting problem via github ticket plus krisselden ebryn whatever worth original issue single reporter seem like clear path behaves way might expect coming classbased oo languages current implementation suffers two faults state super next stored context object means bad things async usage function nt test worked yet raised exception inside function called via super could leave object state bad way future calls first item think stuck acceptable second may able improve would like keep current implementation broken async violation semver users dubious things inheritance chain look exception issue might improved ideas like explore document limitations current solution workarounds limitations docs code blog posts start discussing future super solution avoids mess time go might something could implement allow live alongside deprecated path krisselden ideas api probably simple discussion build step could maybe help consistency asyncsync usage simple understandable implementation unlittered stack traces would tradeoff less magical api feedback", "d": "4/2014"}, {"body": "question calling super mixin could mixed something method fixed prior infinite loop calling super function async seems incredibly hacky common also recovers better thrown exception old method issue called thissuper try catch around invoking another method changed thissuper workaround setting var super thissuper calling trycatch happens super state throw exception method calls super", "d": "4/2014"}, {"body": "would think best place put kind discussion would item controllers discussed maaaaaybe array proxies discussed tbh nt know array proxies discussed directly guides api docs", "d": "4/2014"}, {"body": "updated jsbin references ember bug still persists looks like indexing gone whack internal array", "d": "4/2014"}, {"body": "looking problem actually nothing stated earlier looking problem jsbin completing steps click companies check checkbox component first first item acme ltd click delete main view click box sidebar remaining item found handler invoked stepping code point executed checkbox clicked look see tracking array arrayoperation count items undefined type arrayoperation count items array type r leads called index wrong couple things appear wrong nt think tracked array deleted operation means called also wrong thoughts", "d": "4/2014"}, {"body": "hjdivad created failing test trying track code nt think code cleared correctly isdestroyed flag set true setuppropertyobservers function dependentkey itempropertykeys var dependentarray get thisinstancemetacontext dependentkey length get dependentarray length observercontexts new array length observer fires delete operation index deleted object change property object deleted stop using filterby real world project revert something else bug would great get cleared show stopper", "d": "4/2014"}, {"body": "simplified jsbin illustrates issue", "d": "4/2014"}, {"body": "confirm repro failing test case looks good take look see easy fix call hjdivad backup ca nt trace", "d": "4/2014"}, {"body": "nathanhammond look previous comment think tracked happening sure happening", "d": "4/2014"}, {"body": "yep ton useful information anything discover likely virtue fresh pair eyes", "d": "4/2014"}, {"body": "thanks nathanhammond mmun patience investigating problem meant avoid pointlessly walking retain n case however incorrectly considers delete retain nm case retain n bc first operation applied second operation become retain n fix pass operation index check first ie index operation writing test cover also wishing ember broccoli nom nom", "d": "4/2014"}, {"body": "hjdivad thank looking hopefully fixing also complete broccoli conversion tests passing ancillary build things still need done progress", "d": "4/2014"}, {"body": "hjdivad good stuff rjackson could get code think something broken surprised one else flagged", "d": "4/2014"}, {"body": "leave agenda core team meeting friday initial thought would pull stable branch generate new build unsure cut release", "d": "4/2014"}, {"body": "rjackson let know retag", "d": "4/2014"}, {"body": "hjdivad please even nt cut get stable branch imho", "d": "4/2014"}, {"body": "rjackson done", "d": "4/2014"}, {"body": "mmun nathanhammond others curious", "d": "4/2014"}, {"body": "nt need another expertsexchange hands", "d": "4/2014"}, {"body": "could someone point right direction within ember codebase making feature addition", "d": "4/2014"}, {"body": "good point think issue actual url change since canonical url globs", "d": "4/2014"}, {"body": "makes sense think trying change url route name could good enough actually behavior see use case handling unknown url", "d": "4/2014"}, {"body": "might work however think robust solution would somehow allow glob route canonical url might overcomplicating things love hear machty thinks also rjackson maybe discuss core team meeting", "d": "4/2014"}, {"body": "ah actually possible transition globbing route like target route dynamic segment need provide object param case string path want use globbed segment leaving open though code clearly going bizarro path rather giving useful error message nt provide error message actually makes think related presentday limitation handlebars fixed htmlbars ready described gon na spend little time see clean way detect scenario provide better message", "d": "4/2014"}, {"body": "yeah definitely going code path get error message providing enough context objects would alerted everyone thread passing path ca nt presentday handlebars put error check many unavoidable gotchas particularly pertaining linkto involving inner helpers firing even though parent helpers invalidated eg parent block turned false furthermore looks like zero docs created issue website", "d": "4/2014"}, {"body": "machty thanks lot investigation think dynamic segment thing write least starting point doc evening", "d": "4/2014"}, {"body": "closing definitely reopen details", "d": "4/2014"}, {"body": "closing favor pr", "d": "4/2014"}, {"body": "jefflage supports exactly deprecated original strategy longer valid taken bit longer ought tl dr rewritten use think depends supporting sort function property", "d": "4/2014"}, {"body": "jefflage please let know misunderstood actually solve needs", "d": "4/2014"}, {"body": "think understood using embertable adepar first glance seems may fairly tightly coupled sortable mixin actually tried decouple yet ill let know thanks jeffrey lage hart st beverly farms email jefflage mecom iphone apr david j hamilton notifications githubcom wrote jefflage please let know misunderstood emcomputedsort actually solve needs reply email directly view github", "d": "4/2014"}, {"body": "bug confirmed exist greatly simplified reduction appears issue unloading previous route cleanup ember loses track object might related believe krisselden right person look", "d": "4/2014"}, {"body": "nathanhammond likely machty question", "d": "4/2014"}, {"body": "closing discussion pr", "d": "4/2014"}, {"body": "orospakr try array", "d": "4/2014"}, {"body": "annoying sounds like obscure browser bug", "d": "4/2014"}, {"body": "wagenet agreed", "d": "4/2014"}, {"body": "aehrjames version ios tried exact version ios devices", "d": "4/2014"}, {"body": "sorry wrong issue exactly sure pretty sure latest update boss reported showed replicate probably big help huh", "d": "4/2014"}, {"body": "aehrjames additional information give us would definitely helpful", "d": "4/2014"}, {"body": "see fixed backburner included next ember release", "d": "4/2014"}, {"body": "believe labeled bugfix beta", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "upgraded ember app release experiencing exact behavior route returns promise loading route never shown breaking change app resulting route appears load promise resolves js bin demonstrates loading route showing edit better js bin", "d": "4/2014"}, {"body": "cc nathanhammond rjackson stefanpenner", "d": "4/2014"}, {"body": "mutewinter loading route name provided seems incorrect loading substates always going siblings parents route actually slowly loading need name loading lightly modified jsbin seems work correctly", "d": "4/2014"}, {"body": "must bug canary release app running tophat machty", "d": "4/2014"}, {"body": "additional semirelated information tripped nt know made ember yet", "d": "4/2014"}, {"body": "bitten case error redirect causes transitionaborted redirect happens even flashes screen briefly transition error route anyway", "d": "4/2014"}, {"body": "bisected bug introduced machty query params rewrite nt narrow much pretty big patch", "d": "4/2014"}, {"body": "jsbin example wonder seeing related issue basically query parameter default value first time model hook gets called application starts value parameter parameter value want use parameter query server means value query click nextpage button transition time change query parameter time query parameter string value kind weird case would still want value easily verifiy parameter value query finally click button transition time setting value query parameter whatever value value null use value construct query string query", "d": "4/2014"}, {"body": "raytiley wrote note", "d": "4/2014"}, {"body": "set qp explicitly cast string model hook nt seem right since represent value individual want null string create based value otherwise want pass qps values", "d": "4/2014"}, {"body": "leaving open remember still try get backburner upgrade", "d": "4/2014"}, {"body": "closing favor mixonic pr", "d": "4/2014"}, {"body": "closed favor", "d": "4/2014"}, {"body": "machty something else alley", "d": "4/2014"}, {"body": "record seeing also firefox", "d": "4/2014"}, {"body": "stefanpenner thoughts", "d": "4/2014"}, {"body": "could related least class problem", "d": "4/2014"}, {"body": "machty work", "d": "4/2014"}, {"body": "nixme seems specifically tested could identify lacking test case failing could assemble jsbin demonstrate issue", "d": "4/2014"}, {"body": "closing reproduced jsbin", "d": "4/2014"}, {"body": "told observer watch object nt change therefore observer never fires changing observer makes everything work aside find using lot observers probably making things difficult necessary ember would typically want handle things like properties smile wagenet issue closed", "d": "4/2014"}, {"body": "create jsbinjsfiddle", "d": "4/2014"}, {"body": "ilovett works based closely describe issue also works view direct descendant view reproduce base test case wish glad take look otherwise vote close without working reduction cc wagenet", "d": "4/2014"}, {"body": "would call expected behavior route fires loading route pivot route virtue resource route exists used whether anything userprovided present easily demonstrated multiple peer routes zoo nt bug feature smile seriously old loading route story machty fixed unfortunate though look like emulate using method described guides machty wagenet rjackson nominate closing", "d": "4/2014"}, {"body": "loading substates pivot route transition nt get entered mentioned trying want substate possibly addition toplevel substate", "d": "4/2014"}, {"body": "would get eyes discussemberjscom nonsensery would mind starting thread reopen open new issue something actionable", "d": "4/2014"}, {"body": "yeah sounds like great idea", "d": "4/2014"}, {"body": "matchy got thoughts together posted discussion topic thanks giving reason finally sit think things", "d": "4/2014"}, {"body": "confirm difference behavior exists whether classified bug entirely different story matter opinion smile happening becomes quite clear js bin default browser form behavior pressing enter inside submits form internet explorer guessing since nt create form element guess triggering click whichever button first included dom example wrapped section element also gets interesting behavior chrome double events action handled enter form submission ie form submission button events fire generally would rely ie behavior would try override enter handling input text seems brittle nevertheless difference functionality probably deal interestingly might considered jquery bug opposed ember bug without tracing wagenet optional close probably get seconds thought core team meeting going address itpunt somebody else", "d": "4/2014"}, {"body": "rjackson ping", "d": "4/2014"}, {"body": "sorry long delay time go absolutely correct mutable enumerable tests run thank pointing fixed master beta channels dentuzhik double check fix indeed work submit pr changes review detail", "d": "4/2014"}, {"body": "rjackson thanks try submit pr resolving issue asap", "d": "4/2014"}, {"body": "awesome thank sorry delay", "d": "4/2014"}, {"body": "rjackson issues seems fixed last commit still nt know handle failing tests without enabled prototype extensions removed usage newobject method acts like wrapper prevents failing without prototype extensions used test case nt fail used tests fail reason also fail disabled prototype extensions since native array nt method needs resolved somehow ideas", "d": "4/2014"}, {"body": "create pr issue tests resolved", "d": "4/2014"}, {"body": "believe another ticket dealing issue", "d": "4/2014"}, {"body": "closing favor fixing pr", "d": "4/2014"}, {"body": "related", "d": "4/2014"}, {"body": "difference property interchangeable tell code quoted gordonkristan see jquery blog post details implemented jquery expected behavior nominating closing cc wagenet", "d": "4/2014"}, {"body": "stevekinney depends trying trying array accessed across instances put call extend ie defining class prototype want accessible particular instance pass template using component could well deal documentation around constant source pain beginning programmers js ember nt seem see difference defining class something creating object thus myobj emberobjectextend sharedarray var myobjcreate var b myobjcreate aget sharedarray unshift hi aget sharedarray gt hi bget sharedarray gt hi ie array exact object effectively created class variable called sharedarray variable shared prototype problem javascript makes super easy thing people nt usually create class variable makes trickier thing people quite often make new instance class gets unique array set copy data like contrast prior example following myobj emberobjectextend nonsharedarray null init function thissuper thisset nonsharedarray var myobjcreate var b myobjcreate aget nonsharedarray unshift hi aget nonsharedarray gt hi bget nonsharedarray gt case people would expect happen ie time create object set instance variable new fresh copy default value works init function nt get evaluated class creation time evaluated instance creation time therefore array instance exists inside body init function nt actually exist actually created afresh every single time init function called averse previous example class creation created one across instances think common use case perhaps worth adding feature ember provide easy walk door speak new users also ease veteran js programmers needless repetition perhaps something like object set prototype called instanceproperties without given much thought set ember go create new objects objects using prototypes nt know still think worth discussing tho nt want change javascript ordinary behaviour language works want make easier things time hopefully", "d": "4/2014"}, {"body": "makes ton sense helps clear things setting array method makes sense recall correctly backbone similar javascript thing think na\u00efvely thought maybe using would avoid problem upon reflection reason would ended creating arrays controller passing components arguments probably better approach needed communicate contents array back controller anyway perfect world wish way pull without call got weird feel end world edit hit reply wrong email wrote something nonsensical", "d": "4/2014"}, {"body": "stevekinney sorry nt follow", "d": "4/2014"}, {"body": "julianleviston sorry toddler trying help use gmail shortcuts ended replying wrong email super embarrassing updated comment something ontopic sensical posterity", "d": "4/2014"}, {"body": "stevekinney want avoid calling super possibility rely init event clear beahave appmyobj emberobjectextend myarray null init function thissuper thisset myarray appmyobj emberobjectextend myarray null myfunctiononinit function thisset myarray init", "d": "4/2014"}, {"body": "timevans able provide reduced test case", "d": "4/2014"}, {"body": "wagenet seems cause affect thing using ember data reducecomputed property set model save properties model marked dirty may changed sees property changed flushes changes rerenders view seems bugs either implementation side effect work causes issue tldr could nt provide reduced test case", "d": "4/2014"}, {"body": "still seems like bug item array probably nt removed middle", "d": "4/2014"}, {"body": "hjdivad thoughts", "d": "4/2014"}, {"body": "wagenet problem exactly timevans described issue twofold emberdata invalidates dependency attributes although observers triggered properties set existing values triggered dependencies chains changed even nt result changes actual value fixing doable think stefanpenner iirc talked attribute depend rather calling something vaguely like fixing probably good idea bit work could make ignore values previous values worry semantics diverging much regular cps interim solution could something bit hacky removing items whose values changed depending upstream implementation knowing ignore exactly one additional insertion seems like reasonable localised workaround wagenet stefanpenner think", "d": "4/2014"}, {"body": "think related issue occurs depends model state changes dirty change also triggered causes filter recomputed viewelements redrawn ie someone types something input field immediately loses focus stepbystep explanation issue", "d": "4/2014"}, {"body": "fraserkillip verify still happens latest release also jsbin jsfiddle would great", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "mspoerer seems fixed latest builds fiddle working fiddle", "d": "4/2014"}, {"body": "selvagsz thank confirming", "d": "4/2014"}, {"body": "ping", "d": "4/2014"}, {"body": "recreate problem upgrading close still similar problem", "d": "4/2014"}, {"body": "rjackson status", "d": "4/2014"}, {"body": "definitely major goal need wait module layout refactored build system updated gon na keep open loose track blocked moment things", "d": "4/2014"}, {"body": "machty ping", "d": "4/2014"}, {"body": "tomclose still issue really hard time following example seems like actually end would expect thing seems bug way application controller computed issue nt see anything actually broken behavior clarify", "d": "4/2014"}, {"body": "still issue end checkout path forgotten id order reproduce navigate click checkout note link click login redirected checkout url order id lost url redirected ago since looked think time decided trying transition instead actual transition wanted", "d": "4/2014"}, {"body": "got working bout push fix", "d": "4/2014"}, {"body": "closing dup", "d": "4/2014"}, {"body": "krisselden ping", "d": "4/2014"}, {"body": "matter reversing alias making controllers use instead since cps work consumption content proxies consume model users set controllers anyone review", "d": "4/2014"}, {"body": "closing favor pr", "d": "4/2014"}, {"body": "machty ebryn status", "d": "4/2014"}, {"body": "nt builtin solution works pretty well implemented ghost admin rewrite theory active checking stuff could moved mixin allow easier usage custom components views handlebars helpers etc", "d": "4/2014"}, {"body": "rjackson really like neat little trick create binding property component linkview reads nicely handlebars still feels like hack need reopen add component add active class seems bit heavy noticed solution accepts dependent keys optional first parameters currently documented intentional add pull request", "d": "4/2014"}, {"body": "manuelmitasch agree difficult needs illustration could nt completely suck prefer reopen think presence custom component issue though example duplicate route args helper well linkto would use went custom component route name args needed template exactly components great two specific pr mind extract active logic mixin easy use component directly without reopening allowing use specify custom view class linkto helper would allow us implement custom linkview special logic", "d": "4/2014"}, {"body": "htmlbars subexpressions make piece cake", "d": "4/2014"}, {"body": "see also", "d": "4/2014"}, {"body": "issue component targetobject childroute whereby alternate childroutes component losing targetobject using emberrunnext component though", "d": "4/2014"}, {"body": "tried reproducing jsbin works fine found issue lingering google map event handlers caused refer old component instance emberjs sorry", "d": "4/2014"}, {"body": "work round problem fix suggested verdict bug", "d": "4/2014"}, {"body": "stefanpenner ping", "d": "4/2014"}, {"body": "closing since issue seems dead related pr", "d": "4/2014"}, {"body": "closing favor pr", "d": "4/2014"}, {"body": "queryparmas included release builds sorry annoying question trying decide wait days use routes need product reliability stability quite important", "d": "4/2014"}, {"body": "xypaul ready nt rush things nearly ember contributions labour love happened individuals time note require least full release cycle enabled default beta days another thing note core team builds apps canary bugs arise usually fixed quickly aspects canary stable stable releases contains many bug fixes yet stable comfort level allows", "d": "4/2014"}, {"body": "rjackson status", "d": "4/2014"}, {"body": "keep issue open actionable", "d": "4/2014"}, {"body": "wagenet say issue broad also curious animations talk emberconf", "d": "4/2014"}, {"body": "actionable likely split already support animating transitions eventually smarter emberdata education via better docs fixing way tremendously backwardscompatibility breaking change every app built would break block loading far longer intended could add new router hook would trigger time model called always fired implemented deferring behavior allow people optin smoothing hook want willing write", "d": "4/2014"}, {"body": "ok going go ahead close issue think one points nt well captured elsewhere please open new ticket", "d": "4/2014"}, {"body": "also youtube style progress top page looks really awesome ember apps without loading templates nt get flickr", "d": "4/2014"}, {"body": "honest aware could use helper iterate keys object standard handelbars utilizing helper comes handlebars using independent helper see object key iteration semantics one linked believe fundamental difference ember helper handlebars helper really bug happy reopen something missing", "d": "4/2014"}, {"body": "stefanpenner next step", "d": "4/2014"}, {"body": "machty thoughts", "d": "4/2014"}, {"body": "wagenet et al nt really routing thing something needs fixed helper believe unless something actually desirable behavior ca nt think renamed issue assigning rjackson know done semirecent work might fresh brain feel free reassign", "d": "4/2014"}, {"body": "destroy controller created singleton controller may able destroy additional controller long case instantiated", "d": "4/2014"}, {"body": "stefanpenner latter case meant refer renamed title renaming", "d": "4/2014"}, {"body": "always instantiates new controller case theory even may work", "d": "4/2014"}, {"body": "timevans nt want remove stuff resolver cache cache factories instances", "d": "4/2014"}, {"body": "still got error", "d": "4/2014"}, {"body": "query params requires handlebars", "d": "4/2014"}, {"body": "eldilibra ping", "d": "4/2014"}, {"body": "lukemelia ping", "d": "4/2014"}, {"body": "alas one passed us closing reopen helpful test case", "d": "4/2014"}, {"body": "definitely seems inconsistent", "d": "4/2014"}, {"body": "closing favor resolves discrepancy", "d": "4/2014"}, {"body": "hjdivad closed", "d": "4/2014"}, {"body": "wagenet yeah need manually", "d": "4/2014"}, {"body": "closing favor fixing issue", "d": "4/2014"}, {"body": "hey cool thanks fixing time filed bug nt really sure whole pullrequest process worked nice ride shotgun one speak", "d": "4/2014"}, {"body": "ebryn keep mind htmlbars", "d": "4/2014"}, {"body": "see also", "d": "4/2014"}, {"body": "machty ping", "d": "4/2014"}, {"body": "machty ping", "d": "4/2014"}, {"body": "closing adds nice assertion metamorph tag parentage differenct start end tags", "d": "4/2014"}, {"body": "closing favor pr", "d": "4/2014"}, {"body": "updated fiddle implementing arrangedcontent sorting ran issue using sortproperties", "d": "4/2014"}, {"body": "bcardarella going close since inactive let know still something want pursue", "d": "4/2014"}, {"body": "wagenet sorry let go jsbin demonstrating issue see user object defined indexcontroller deferred object resolves second user id shows properly template however hover link href problematic styling urls based upon visited status simply demo would reallife situation async relationship emberdata", "d": "4/2014"}, {"body": "note solved wrapping helpers deferred object ultimately might proper way interested feedback", "d": "4/2014"}, {"body": "going reopen rjackson maybe quickly discuss core decide bug", "d": "4/2014"}, {"body": "linktext update path object property promise resolves fixable linkto level debugging", "d": "4/2014"}, {"body": "moving problem description issue believe following rjackson suggestion exactly problem assuming model related user object want make link user page template may write something like work perfectly good long user object wont replaced one like happens link update text keep old invalid href example workaround attached example would force linkto synchronization giving direct path object helper like please verify consider bug happy work fix ps noticed possibly related behaviour causing linkto href object id difference may due usage ember data async relations thus dspromiseobject able replicate", "d": "4/2014"}, {"body": "note somewhere observer seems setup incorrectly", "d": "4/2014"}, {"body": "add linkview seems update href properly guys think", "d": "4/2014"}, {"body": "add test submit pr sure might break tests definitely step right direction", "d": "4/2014"}, {"body": "sure try today", "d": "4/2014"}, {"body": "machty ping", "d": "4/2014"}, {"body": "mikepack interesting idea start discussion forums someone open pr ready", "d": "4/2014"}, {"body": "encountered issue thanks clarifying movement documenting clearly", "d": "4/2014"}, {"body": "machty keep open", "d": "4/2014"}, {"body": "fighting emberselect found issue expected behavior easy enough explain necessarily implement like see update content emberselect view recheck selection variable set selection", "d": "4/2014"}, {"body": "rjackson consensus", "d": "4/2014"}, {"body": "seeing happen anymore current canary", "d": "4/2014"}, {"body": "wagenet confirmed appears fixed", "d": "4/2014"}, {"body": "around basically unchanged since pretty old method said according api docs strings relative", "d": "4/2014"}, {"body": "wagenet relative source object target object right", "d": "4/2014"}, {"body": "aaronshaf strings relative source nt see different using old syntax globals required", "d": "4/2014"}, {"body": "stefanpenner canonical backburner", "d": "4/2014"}, {"body": "would say", "d": "4/2014"}, {"body": "rjackson working moving things broccoli", "d": "4/2014"}, {"body": "stefanpenner looking possibility creating custom view itemcontroller template created typeview nt work briefly looked fix using collectionview idea come soon edit nevermind inserting instead", "d": "4/2014"}, {"body": "jayphelps status", "d": "4/2014"}, {"body": "wagenet laid ground work ok history paths extra hashes hash paths doubled hashes eg needs love support still planning fix finally adding test coverage since likely find several edgecase bugs likely project start end week lasting week two start pr day two track progress thanks nudge smile", "d": "4/2014"}, {"body": "stefanpenner hjdivad ping", "d": "4/2014"}, {"body": "think todos fix compare types least inequality probably fine inequality give unspecified ordering use b implement comparator falls back underlying content personally would strongly favour option b think gives much natural semantics object proxies still escaped desired manually checking type extracting content need less invasive change would go option ie implement stefanpenner todo list look right", "d": "4/2014"}, {"body": "hjdivad theoritcally huge advocate using comparablemixin dealing proxies slightly nervous pandora box open feel may better box open current one one concern nt think proxies maybe nt matter us maybe proxyvalueof", "d": "4/2014"}, {"body": "going close since inactive still interested pr", "d": "4/2014"}, {"body": "ebryn krisselden ping", "d": "4/2014"}, {"body": "nt may never work ember correctly preserve context cc rjackson", "d": "4/2014"}, {"body": "confirm previously using item controller always modified context longer case canarybeta builds", "d": "4/2014"}, {"body": "fixed current error attempt use nonarray arraycontroller jsbin", "d": "4/2014"}, {"body": "bfbriggs something going work", "d": "4/2014"}, {"body": "bfbriggs yuno docs", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "lt", "d": "4/2014"}, {"body": "machty still issue router refactoring going", "d": "4/2014"}, {"body": "stefanpenner plans fixing", "d": "4/2014"}, {"body": "would love refactor area keeping issue open nt providing much value", "d": "4/2014"}, {"body": "need revamp emberselect since nt appear critical bug going close", "d": "4/2014"}, {"body": "rjackson ping", "d": "4/2014"}, {"body": "closing due inactivity", "d": "4/2014"}, {"body": "tested jquery matters seems resolved", "d": "4/2014"}, {"body": "closing sounds like workaround cleaning select view future", "d": "4/2014"}, {"body": "punished extra closing div error punishes bad feel bad would like error even vague misleading kidding", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "stefanpenner ping", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "hjdivad anything actionable", "d": "4/2014"}, {"body": "wagenet yeah need fix two things listed thanks reminder", "d": "4/2014"}, {"body": "krisselden ping", "d": "4/2014"}, {"body": "ctimmerm give feedback reviewed jsbin parentview handling case nt assumes chains could added parentview leaves chains childview setup unfinished parentview giving unfullyinitialized createchildview installing chain observer", "d": "4/2014"}, {"body": "clarify finishing chains nodes metachainwatchers starting metachains", "d": "4/2014"}, {"body": "krisselden needs done", "d": "4/2014"}, {"body": "wagenet problem error message already downstream error happens already fixed cases result message issue breaking point causes different", "d": "4/2014"}, {"body": "mixonic still something want pursue", "d": "4/2014"}, {"body": "stefanpenner ping", "d": "4/2014"}, {"body": "curious gets registered injected resolved later seems like solution create entity initializer bother register potentially need reference later create entity initializer register instance preserved", "d": "4/2014"}, {"body": "closing favor", "d": "4/2014"}, {"body": "would great get reports investigation", "d": "4/2014"}, {"body": "jasonmit status", "d": "4/2014"}, {"body": "view keyword handled correctly pointing internal yield view yield context view simple fix", "d": "4/2014"}, {"body": "think jasonmit solution good one context object fixed krisselden saying dev env ember nt setup anymore new laptop rush finish work deploy noone find time fix love fix days least", "d": "4/2014"}, {"body": "made basic jsfiddle show problem", "d": "4/2014"}, {"body": "removed needs feedback since given unverified since know problem", "d": "4/2014"}, {"body": "clarify view keyword generally antipattern usually suggests need child controller like render item controller array controller using view using component", "d": "4/2014"}, {"body": "well purpose simple example showing problem application component used configurable scrolling area optional custom scrollbars buttons used scroll need set class held view whole template logically working component block inside course view configurable display stuff differently render used", "d": "4/2014"}, {"body": "wrote test issue trying fix looks like view good one retrieved method class reason becomes function rendered template looking deeper first look makes thinking easy fix thought hehe", "d": "4/2014"}, {"body": "wow freaking weird added template log renaming property sure nt property name problem got weird output got right view got component object console instead", "d": "4/2014"}, {"body": "sorry spam logging view template returns correct correct property correctly set", "d": "4/2014"}, {"body": "oh forget missing test angry also think found way fix run unit tests create pr soon pass", "d": "4/2014"}, {"body": "closing since sure issue issue pretty much inactive", "d": "4/2014"}, {"body": "rjackson correct fixed", "d": "4/2014"}, {"body": "knownasilya still interested", "d": "4/2014"}, {"body": "seems issue still present ember thanks quickfix mattmarcum could solve", "d": "4/2014"}, {"body": "machty know still issue", "d": "4/2014"}, {"body": "closing since date gustavopaes still issues let know", "d": "4/2014"}, {"body": "rjackson add core team agenda easy decide find worth pursuing", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "kselden status", "d": "4/2014"}, {"body": "solved htmlbars", "d": "4/2014"}, {"body": "issue wo nt resolved metamorph code removed something like get around", "d": "4/2014"}, {"body": "htmlbars remove metamorphs someone wants submit pr fix htmlbars lands probably merge stopgap", "d": "4/2014"}, {"body": "wagenet bumped last week may take stab still interest supporting layout containerviews correect", "d": "4/2014"}, {"body": "realizing feature clashes idea call multiple times layouts makes sense templated views since render template n times nt make sense managing set view instances could probably assert limit layouts container view single call somehow inconsistency nt great probably leave since called often workaround pretty simple", "d": "4/2014"}, {"body": "wonder steffen bren trying solve similar issue around also probably broken issue wagenet mentioned", "d": "4/2014"}, {"body": "stefanpenner fixed yet", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "ebryn kselden htmlbars affect", "d": "4/2014"}, {"body": "yes fixed htmlbars work", "d": "4/2014"}, {"body": "closing since solve", "d": "4/2014"}, {"body": "stefanpenner ebryn guys know even intend support", "d": "4/2014"}, {"body": "im supporting ca nt use keywords accomplish thing", "d": "4/2014"}, {"body": "discuss krisselden", "d": "4/2014"}, {"body": "johnkpaul know still issue", "d": "4/2014"}, {"body": "still issue", "d": "4/2014"}, {"body": "mixonic could give insight guys find tests exercise runloop scheduling eg emberrunlater super flaky describe might improve thank", "d": "4/2014"}, {"body": "someone investigate see side effects would", "d": "4/2014"}, {"body": "maybe brain slow fail see latency compared multiple todomvc examples without noticing anything", "d": "4/2014"}, {"body": "krajsnick obviously long time ago remember browser using", "d": "4/2014"}, {"body": "probably safari apr kl skrev peter wagenet notifications githubcom krajsnick obviously long time ago remember browser using reply email directly view github", "d": "4/2014"}, {"body": "hi guys im issue using firefox aswell imagine also happens safari frameworkside solution issue works modern browsers", "d": "4/2014"}, {"body": "matiasdecarli works great guessing chrome autofills insert right callback fired", "d": "4/2014"}, {"body": "aehrjames working version emberhandlebars using", "d": "4/2014"}, {"body": "aehrjames matiasdecarli working also chrome ember", "d": "4/2014"}, {"body": "ember latest chrome dev branch stopped working sure robust way maybe repo link", "d": "4/2014"}, {"body": "believe need cross browser solution also ember handlebars issue js issue", "d": "4/2014"}, {"body": "latest chrome version mac osx fire change event automatically fixed also issues safari unfortunately current beta ist failing nt check stableprevious versions though", "d": "4/2014"}, {"body": "ebryn confirm htmlbars solve", "d": "4/2014"}, {"body": "yes", "d": "4/2014"}, {"body": "krisselden ebryn want leave sort issues open", "d": "4/2014"}, {"body": "solved", "d": "4/2014"}, {"body": "rjackson also depends decided meeting", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "stefanpenner updates", "d": "4/2014"}, {"body": "believe improved refactor code factories way issue sane way without breaking backwards compat", "d": "4/2014"}, {"body": "ebryn want keep open close", "d": "4/2014"}, {"body": "solved", "d": "4/2014"}, {"body": "machty stefanpenner ping", "d": "4/2014"}, {"body": "nt think issue anymore one seems complaining nice ember inspector tracing promises reopen necessary", "d": "4/2014"}, {"body": "eh leaving open still promiseswallowing sadness promiseland", "d": "4/2014"}, {"body": "feel like probably fixed stefanpenner know", "d": "4/2014"}, {"body": "believe nearly occurrences result something strange binding globals leaving intervalstimers running cleaning object destroyed closing individual problems show triage needed", "d": "4/2014"}, {"body": "aw yiss", "d": "4/2014"}, {"body": "unfortunately async call stacks solve virtualstack stitching though", "d": "4/2014"}, {"body": "well crap guess callbacks sit queue run ignoreme", "d": "4/2014"}, {"body": "slindberg correct bb preserve stack traces debug mode manual tedious better nothing see bb repo details hopefully proper support land soon", "d": "4/2014"}, {"body": "stefanpenner status", "d": "4/2014"}, {"body": "stefanpenner happened", "d": "4/2014"}, {"body": "nothing core changed since us eakecli users enjoying consistent naming conventions real solution transition ember users similar naming conventions steps outlined previous comment", "d": "4/2014"}, {"body": "stefanpenner even make sense anymore", "d": "4/2014"}, {"body": "think move towards embercli much likely let handled external component", "d": "4/2014"}, {"body": "rjackson know discussed meeting today decide", "d": "4/2014"}, {"body": "wagenet trying catch wycats rethinking select story wip component addresses speed issue likely others think current plan replacement ready deprecate add new handlebars helper current wip jsbin curious", "d": "4/2014"}, {"body": "rjackson make new issue close issues point one", "d": "4/2014"}, {"body": "teddyzeenny stefanpenner ping", "d": "4/2014"}, {"body": "wagenet working logging library hopefully take logging ember", "d": "4/2014"}, {"body": "teddyzeenny project looks great think room coordinate internal logging flags make sure ready small shim replace specifically number different flags enable logging moment passed others think rework bit prepare using new log manager thoughts", "d": "4/2014"}, {"body": "logmanager introduces named logging names follow certain hierarchy inheritance also matter levels sometimes want logging prefer skip certain noisy level hoping would lead clearer flags instead something like loggers inherit levels parents unless levels explicitly set far final api logmanager early stage think", "d": "4/2014"}, {"body": "teddyzeenny awesome going go ahead close ticket stuff ready send pr", "d": "4/2014"}, {"body": "ran today longer issue htmlbars correct", "d": "4/2014"}, {"body": "samselikoff correct", "d": "4/2014"}, {"body": "confirm get issue using emberfastclickjs easiest fix simply use anchor tag instead button particular action", "d": "4/2014"}, {"body": "ghempton ping", "d": "4/2014"}, {"body": "aside bad naming applypartial means mixin applied prototype nt done design object create call finishpartial point required checks done", "d": "4/2014"}, {"body": "still case iterating object build forms setting id value attributes fundamental ability", "d": "4/2014"}, {"body": "might possible using sexpressions handlebars nt actually tried", "d": "4/2014"}]