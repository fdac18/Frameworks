[{"title": "start tracking newly added property vm", "body": "hi custom directive create new property vm gets updated changes propagated controls see example console see vm gets updated controls nt get fresh values example create passing directive everything works fine model changes passed controls imagine problem caused fact vm augumented getterssetters order propagate model changes enforce process adding new members vm directive", "num": "250", "d": "4/2014"}, {"title": "separate inside component templates nt work", "body": "hi trying render tabular data row data price quantity computed values net amount taxes discounts etc crude example logically like row component computed properties handled cleanly row component look like component replace true html individual tags inside templates working tags simply disappear tried many combinations root element individual etc nothing seems work pointers", "num": "248", "d": "4/2014"}, {"title": "key filter breaks vm components", "body": "really weird bug ran boiled simple test case really seem legit bug vm property set filters used directives component template root template cease function properly simple test case notice run example see console logging hit enter text fields however console lines logged delete template property vm definition rerun example single text input rendered console lines logged hit enter seems totally crazy could presence components root vm stop key filters working drove nuts hour wacky", "num": "247", "d": "4/2014"}, {"title": "recollect dependencies evaluating computed properties", "body": "lead", "num": "246", "d": "4/2014"}, {"title": "parent data updated", "body": "nt know iseditmode true even set false home component thanks", "num": "245", "d": "4/2014"}, {"title": "select element multiple attribute vrepeat", "body": "select binding nt work right use select element multiple attribute vrepeat also refs two traces update calls first initial data update works bigger app second applied view switch nt work", "num": "244", "d": "4/2014"}, {"title": "conditionals templates", "body": "possible something like checks equals color shows otherwise show text", "num": "243", "d": "4/2014"}, {"title": "directive method calls nt support object params", "body": "directive calls sort method passes object options get two errors would expect work instead accepting primitive params", "num": "242", "d": "4/2014"}, {"title": "browserify fails syntaxerror compilerjs", "body": "running browserify entry point calls fails syntaxerror following reproduces issue npm install vue npm http get npm http vue nodemodulesvue cat lt lt eof gt indexjs var vue require vue eof browserify indexjs buildjs syntaxerror line unexpected string parsing nodemodulesvuesrccompilerjs browserify node", "num": "241", "d": "4/2014"}, {"title": "made simple wizard component", "body": "hi implemented simple wizard component rather draft fully fledged component anyway goes however problem transclusion placeholders content tags make component useful accept different numbers wizard pages right hardcoded four pages nt know loop content tag combine content tag vrepeat apply varying number transclusion points depeding actual state component data also tried another approach remainings method putpagecontents extract raw contents fragment compile also failed smile seems according source code compilercompile method accepts html element decorated v attributes method compile whole html fragment matter root element decorated vue attribs", "num": "240", "d": "4/2014"}, {"title": "argumentslength greater", "body": "self dispatch applicationprogressupdate start handle event applicationprogressupdate function true arguments start undefined argumentslength expected behavior", "num": "239", "d": "4/2014"}, {"title": "index primitive values tracked properly", "body": "happens duplicates", "num": "238", "d": "4/2014"}, {"title": "support post render event", "body": "using jqueryui ui components dynamically created library based markup need trigger rendering jqui components every time vue updates dom based data change far tried getting executed rendering really useful", "num": "237", "d": "4/2014"}, {"title": "problem computed property inside vattr", "body": "example markup imageid changed img src getting updated works dependent property included markup explicitly", "num": "236", "d": "4/2014"}, {"title": "looking example vrepeat css animation directives", "body": "hi could anyone explain use animation directives vtransition vanimation nt care right smile vrepeat desired effect animation may simple fade effect using opacity changes creating new item fadein removing existing item fadeout list thanks advance smile", "num": "235", "d": "4/2014"}, {"title": "problem nested vrepeat directives", "body": "hi nest vrepeat directives inner directive contents recreated every model update apart form performance penalty results loosing html input focus take look", "num": "234", "d": "4/2014"}, {"title": "destroy event", "body": "hi destroy event triggered destroy called", "num": "233", "d": "4/2014"}, {"title": "rendering lot nested views compontents", "body": "looking fiddle seems vue rendering cases nested objects repeating element best way test fiddle simple type something one inputs basically entire view renders reason make seem every time type input blur event occurs needing reselect input", "num": "232", "d": "4/2014"}, {"title": "short form tags", "body": "sure intended two components render properly template uses long form tags render properly define short form tags case renders minor inconvenience otherwise excellent framework", "num": "231", "d": "4/2014"}, {"title": "catch events", "body": "hi possibility use vm method catch incoming events would even cooler enable wildcards like thisvm delete function catch events starting delete right functionality useful diagnostics think would useful several scenarios well", "num": "230", "d": "4/2014"}, {"title": "context nested view objects", "body": "nt figured good way deal issue problem nested objects within array nt seem context individual object referenced methods actual vue object example actual code trying get work like typesgeneral object either context property parameter passed error method vue object right nt seem possible instead entire vue object passed context parameters added typesgeneral directly referenced versus iterating trying figure heck going html key singlekeykey error singlekeydescription", "num": "229", "d": "4/2014"}, {"title": "multiple clauses custom directives creates multiple instances directive", "body": "ideally great get args amp data passed one instantiation", "num": "228", "d": "4/2014"}, {"title": "vrepeat without creating new html elements", "body": "way force vrepeat directive create new html element data item behavior sometimes required tables want produce one element per data item example wrong since divs allowed tbody angularjs possible apply binding expression html comment comments allowed everwhere workaroud issue", "num": "227", "d": "4/2014"}, {"title": "recommended way communication vms", "body": "hi two vms members vm hierarchy totally independent components communicate together afaik event communication mechanism works within vm hierachy suggested solution", "num": "226", "d": "4/2014"}, {"title": "error parsing expression", "body": "tried use inline javascript expression described vue throws warning error parsing expression messagelength gt browser chrome tried use saw issue related previous version upd sorry forgot read databinding directives", "num": "225", "d": "4/2014"}, {"title": "track changes arraylist elements", "body": "hi need create directive accepts list array binding similar vrepeat recommended way determining actually changed bound list let say want remove one element middle list api detecting changes actually list changed three options valid elements one removed elements inserted elements changed positions index combination would great kind builtin mechanism detecting changes arraylike parameters", "num": "224", "d": "4/2014"}, {"title": "directive vview used already instantiated vm root node", "body": "hi component instantiated vcomponent directive root indexhtml file root vm component instantiates another component using vview directive results warning directive vview used already instantiated vm root node use parent template instead workaround imo nested vviews essential true composability btw vuejs great", "num": "223", "d": "4/2014"}, {"title": "vif multiple expressions", "body": "use vif multiple conditions currently working workarounds", "num": "222", "d": "4/2014"}, {"title": "prefix v windows application", "body": "people wants develop windows app vuejs instead winjs careful v prefix inserted template like component windows runtime nt like throw error unable add dynamic content rather use data prefix better datav prefix template perhaps custom data nt want vuejs warn unknown directive", "num": "221", "d": "4/2014"}, {"title": "ajax amp vue", "body": "made small example utilize promises ajaxing content use vue sure want post wiki figured people would want know good pattern edit reformatted example bit follow commonjs style utilize qjs promise batcher", "num": "220", "d": "4/2014"}, {"title": "input value changed javascript nt change data", "body": "using custom plugin date select select happens writes selected value input element change detected vue library event must triggered vue pick change another way", "num": "219", "d": "4/2014"}, {"title": "vref amp vif problem child access", "body": "hi issue using vref vif simply put vif directive node childs node whit vrepeat vref accessible parent view remove vif directive everything works fine html something like prepare fiddle needed submenubuttons never accessible vif directive dom understand list instantiated vif condition falsy even condition became truthy reference set parent intended behaviour many thanks", "num": "218", "d": "4/2014"}, {"title": "lazily load extended viewmodels", "body": "hi often define classes going use backbone models views etc dom ready way cut amount options need pass order instantiate later actually use however make sure happens dom ready etc recently trying something similar vue thinking would work similarly see live demo referring surprised find vue trying look dom elements template id configured use via actually used viewmodel happens templates processed realize workarounds get behavior want would nicetohave unless behavior design thanks", "num": "217", "d": "4/2014"}, {"title": "vwith object value iterator wo nt work", "body": "hi tried pass object component inside vrepeat iterator success example parent template component template html type optionstype color optionscolor vwith work strings numbers iterator gave quick blast codebase try fix failed far although someone wants reproduce issue forked repo branched added tests prove bug fork branch tests commit note first test pass second break", "num": "216", "d": "4/2014"}, {"body": "hellojosh try person name instead person person work", "d": "4/2014"}, {"body": "marfalkov thanks looking miss typed variable name fixed edit first textbox values change edit second textbox values change", "d": "4/2014"}, {"body": "hellojosh ahh see think", "d": "4/2014"}, {"body": "twarogowski would seem like something outlined would answer working said reason vue setting getter setter new property object seems happen method well lifecycle methods ready attached", "d": "4/2014"}, {"body": "see fiddle data objects augmented methods property additiondeletion properly tracked experimental feature fully documented yet", "d": "4/2014"}, {"body": "works indeed thanks smile methods make way stable api assume second argument add may also complex object whole newlyadded graph augumented", "d": "4/2014"}, {"body": "twarogowski actually already latest release officially documented complex object yes recursively tracks new object", "d": "4/2014"}, {"body": "superb thanks detailed answer smile vue great", "d": "4/2014"}, {"body": "closest could find issue nt use components also tried using root element component template tried repeat tags also nt work", "d": "4/2014"}, {"body": "think component template compiled documentfragment added document tree removed browser", "d": "4/2014"}, {"body": "ok seems generic problem dom interesting thing jquery seems coping well", "d": "4/2014"}, {"body": "okay tried latest works perfect release note says rocks", "d": "4/2014"}, {"body": "located source bug fix soon indeed wacky one", "d": "4/2014"}, {"body": "nt set parent values always sets values current vm general nt recommend changing parents state within child since makes tightlycoupled use events possible", "d": "4/2014"}, {"body": "thanks evan", "d": "4/2014"}, {"body": "seems fiddles working properly latest release let know things still break", "d": "4/2014"}, {"body": "sorry nt work example second example select list data group items group page initialization", "d": "4/2014"}, {"body": "due compiled compiled yet option elements present initial data manipulate set value hook work properly", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "got work hopefully cleaner way", "d": "4/2014"}, {"body": "something thinking involves different parsing strategy compared current implementation nt got time test yet syntaxwise probably go handlebarslike style since current syntax mustacheinspired", "d": "4/2014"}, {"body": "caused parser treating identifier current solution use method instead inline expression gets fixed", "d": "4/2014"}, {"body": "sounds good", "d": "4/2014"}, {"body": "reverting removes error allows browserify successful include vue build versions result error", "d": "4/2014"}, {"body": "also problem resolved updating browserify", "d": "4/2014"}, {"body": "thanks updated browserify error longer occurs", "d": "4/2014"}, {"body": "think similar spirit challenge containers arbitrary vue content work", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "reason happening line emitterjs see sure args explicity passed need digging src", "d": "4/2014"}, {"body": "yeah trick greatly improved internal emitter performance fixed amount args much faster guess case causes confusion user make external version use instead", "d": "4/2014"}, {"body": "fixed", "d": "4/2014"}, {"body": "use callback wait render", "d": "4/2014"}, {"body": "nt role vuenexttick", "d": "4/2014"}, {"body": "ayamflow ah yes using better safer", "d": "4/2014"}, {"body": "documented", "d": "4/2014"}, {"body": "", "d": "4/2014"}, {"body": "ah missed somehow thanks exactly wanted", "d": "4/2014"}, {"body": "seems working make jsfiddle reproduce issue", "d": "4/2014"}, {"body": "tried works sorry bothering", "d": "4/2014"}, {"body": "basic example basically modify achieve whatever css effect want", "d": "4/2014"}, {"body": "great thank", "d": "4/2014"}, {"body": "yes happens identifiers used know causing issue try fix time", "d": "4/2014"}, {"body": "ok fact issue caused using primitive values arrays use objects instead primitive values bug nt occur general find better way handle primitive arrays", "d": "4/2014"}, {"body": "true wrapping primitive ints object see improvement recreating whole array dom elements however first update captured changes reflected vm please take look modified fiddle first keystroke reflected vm subsequent changes ignored try modify value text input first character gets updated", "d": "4/2014"}, {"body": "yes two events documentation", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "amchang imo problem occurs whenever nest vrepeat directives nt matter use components see issue", "d": "4/2014"}, {"body": "seems fiddle issue outer used object look time", "d": "4/2014"}, {"body": "merged", "d": "4/2014"}, {"body": "short tag syntax exist see element one void elements element foreign element may single solidus character character effect void elements foreign elements marks start tag selfclosing custom element foreign element void element case remove final get browser try close tags exactly get firefox dom inspector", "d": "4/2014"}, {"body": "thanks bpierre", "d": "4/2014"}, {"body": "thought maybe regex fits better case wildcards", "d": "4/2014"}, {"body": "pretty hacky way take look fairly easy understand introducing wildcardsregex emitter implementation would bring performance concerns since emitter central observation implementation called lot", "d": "4/2014"}, {"body": "thanks kind hacky solution good enough smile", "d": "4/2014"}, {"body": "never mind anyone else problem look response closing", "d": "4/2014"}, {"body": "multiple clauses meant create multiple instances otherwise pretty messy logic imo inside directives", "d": "4/2014"}, {"body": "could use semantically correct nested table hard say solve issue clear understanding trying accomplish without fiddle example", "d": "4/2014"}, {"body": "thanks brandon table expert imo nesting table solve problem proper aligning column widths better use multiple tbody sections within one table", "d": "4/2014"}, {"body": "depends components setup generally something like following inside child component dispatches event root vm trickle children vm another component could listen event like see technically could also add pub sub library communicate either way works matter personal preference point", "d": "4/2014"}, {"body": "thanks clarification", "d": "4/2014"}, {"body": "array callback second parameter exists means array mutated object containing mutation info", "d": "4/2014"}, {"body": "works fine many thanks", "d": "4/2014"}, {"body": "clarification get warnings try use vview vrepeat together like however vcomponent works fine problem need dynamic capabilities vview chance sort", "d": "4/2014"}, {"body": "question like would greatly helpful include fiddle trying accomplish number ways go trying", "d": "4/2014"}, {"body": "brandonpierce right narrowed problem let explain working sample problematic sample lists working difference fact latter example vview vrepeat directives applied element however change vview directive vcomponent works reason vcomponent mixed vrepeat within html element vview bug intended behavior", "d": "4/2014"}, {"body": "ok think got right vview recreates vm replaces html element would conflict vrepeat also creates new vms correct", "d": "4/2014"}, {"body": "essentially wrap method mustache binding vue knows evaluate value compile time see", "d": "4/2014"}, {"body": "thanks", "d": "4/2014"}, {"body": "tried computed properties", "d": "4/2014"}, {"body": "yes trying right computed value nt get updated one conditions change", "d": "4/2014"}, {"body": "need reference explicitly variables thislock true first pass thisstatus observed see end link javascript get function thislock thisstatus return thislock thisstatus", "d": "4/2014"}, {"body": "yes works thank", "d": "4/2014"}, {"body": "thanks sharing tip ljonathanl reminder kind discussion could posted since sourcecode related", "d": "4/2014"}, {"body": "brandonpierce awesome work cool", "d": "4/2014"}, {"body": "obsoleter thanks side note looks much cleaner decoupled used nodejs browserify environment", "d": "4/2014"}, {"body": "thumbsup", "d": "4/2014"}, {"body": "hey guys vacation lately nt active take closer look back work", "d": "4/2014"}, {"body": "problem read short dispatch native browser event input imo convenient", "d": "4/2014"}, {"body": "reasoning explained issue linked vue picks native events plugin probably firing jqueryonly events simply relay events manually", "d": "4/2014"}, {"body": "definitely create fiddle", "d": "4/2014"}, {"body": "see console first call menubuttons returns proper array buttons second instead submenubuttons returns undefined remove vif directive works expected", "d": "4/2014"}, {"body": "also creates intermediate vm wrap conditional block nt thought way make intuitive yet rough solution would give block access list", "d": "4/2014"}, {"body": "reason vue looks template definition converts string actual documentfragment internally easy solution put templates head find semantic yes nt hurt make lazy load", "d": "4/2014"}, {"body": "hi try", "d": "4/2014"}, {"body": "tried seems give result", "d": "4/2014"}, {"body": "ok seems happen nt reference elsewhere parent template weird bad guess nt need fixing mine probably bit edge case", "d": "4/2014"}, {"body": "try name component hyphen like explained example tagfruit example works javascript vuecomponent tagfruit template type optionstype color optionscolor var fruits new vue el fruits data fruits type banana color yellow type orange color orange", "d": "4/2014"}, {"body": "yeah seems work way guess incorrect use thanks mate", "d": "4/2014"}, {"body": "doc value primitive value arrays containing primitive values access value simply value", "d": "4/2014"}, {"body": "brandonjpierce make component text area accomplish using compiler nt think much documentation yet", "d": "4/2014"}, {"body": "yeah textarea currently handles one time evaluation compile time reason since textarea twoway binding modified user content evaluated longer possible determine part content considered bindings", "d": "4/2014"}, {"body": "problem thanks clarification", "d": "4/2014"}, {"body": "yeah add something like", "d": "4/2014"}, {"body": "ljonathanl think intended behavior assign part viewmodel data converted object intercepts array methods getterssetters objects keeping reference item list keep ability insert value back two questions would expect happen instead use case keeping references list items around list purged use empty array instead splice truly new array viewmodel old reference affect", "d": "4/2014"}, {"body": "thank answer agree data model belong vue see update fiddle item created added list list purged item modified another vue example business part secondly think bug modify item frame waiting vuenexttick example list kept empty good behavior empty array solution data model belong vue example set listitems empty array lost reference model", "d": "4/2014"}, {"body": "use manual compilation note partial compilations partially undone bindings released entire vm destroyed", "d": "4/2014"}, {"body": "thanks thoughts approach tab generic panelling component maybe panel tab could generic vm manually call compile injected dom content", "d": "4/2014"}, {"body": "unsafecode please upvote hah would excellent support vue scoped callback use", "d": "4/2014"}, {"body": "need revisit vue definition problems run defined var amp functions generate gettersetters different api location typescript wants understand behavior statically dynamic nature limits type benefits across codebase examples vue new vue data title todos vuetitle new location title variable shifts configuration runtime use configdatatitle vuetitle true methods vue configuration object must object literal modules classes typescript uses functions define internal structures thus makes approach incompatible working make generation object literal dynamic pass strongly typed class reflects runtime api vue yet generates object literal vue constructor feel approach work requires shimconversion code construction planning use vue typescript app thus need get complete soon estimate weeks time remains", "d": "4/2014"}, {"body": "great hear working looked definitelytyped contribution guide important really top page links page codeplex wiki handy patterns inspiration recently added sure cached", "d": "4/2014"}, {"body": "plan submit definitely typed really want get api right typescript weakness applying metadata driven apis extangularvue side effects find important often go beyond definition making typescript features mesh framework ton value modulesclasses ts large frameworks ship oop model within framework used work sencha worked mapping typescript extjs core issue typing metadata class abstraction tough puts heavy burden compiler saw build times generated definition files ext find real benefit wrapping framework apis vs raw definition simplifies development model exposes deeper typing support speeds compilation time ext wrote wrapper called exts strongly typed proxy ext apis net effect get proxy performance hit app startup construction get really clean compiletime errors option use moduleclass patterns ts provides definitions great small complexity rises find wrapping often better approach tsvue wrapper vue attempts ts class approach vue todomvc app ts module approach vue todomvc app class approach work need get object literal generation working correctly fri apr bart van der schoor lt notifications githubcom wrote great hear youre working looked definitelytyped contribution guide important really top page links page codeplex wiki handy patterns inspiration recently added sure cached reply email directly view github", "d": "4/2014"}, {"body": "cool know stuff personal experience modelling meta data driven systems know angularjs ts defs dt popular highly rated never used though looking forward solution vue quite sure would work practice requires runtime code might suited dt project dt typings preference either way world would like combine vue typescript way works great", "d": "4/2014"}, {"body": "hey updates typescript definitions quite keen integrate two", "d": "4/2014"}, {"body": "nothing report expect good state month active project depends thu apr nathan ridley notifications githubcomwrote hey updates typescript definitions quite keen integrate two reply email directly view github", "d": "4/2014"}, {"body": "img tag affiliated windowdocument document setting imgsrc wo nt trigger download give try", "d": "4/2014"}]