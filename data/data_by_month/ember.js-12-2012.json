[{"title": "nonsingleton controller discussion", "body": "want open discussion around could possibly implemented api would look like especially light new injection container router canonical use case conjunction helper requires objectcontroller item stands think two ways implement use custom subclass wraps item controller subclass intercepts array change events handle bookkeeping controllers method currently use apps use injection container nonsingleton controllers simply register controller container nonsingleton lookup normal open problem cleanup controllers option mind consider following handlebars snippet assumes existence helper see also think would good eventually give render semantics snippet helpful discussion controller registered nonsingleton container snippet hypothetically function expected fact added benefit things like could entirely agnostic whether singleton nonsingleton controller backing problem nonsingleton controllers never destroyed therefore order option viable needs mechanism track controllers clean appropriate three possibilities immediately come mind bookkeep view layer bookkeep route level bookkeep content layer eg permodel basis view layer poor option due fact controller would destroyed rerender route level could plausible seems unnecessarily tied routing system perhaps bookkeeping permodel basis best option render semantics could nonsingleton controllers listener created destroys controller time model destroyed emberdata sort storecache clearing mechanism see making lot sense also ways similar using thoughts", "num": "1637", "d": "12/2012"}, {"title": "handlebars linkto helper propagate click event", "body": "linkviewclick returns false calling emroutertransitionto preventing click event bubbling dom problem using linkfor within popup dropdown menus come bootstrap menu dismissed click event propagate returning true linkviewclick fixes sure negative sideeffects", "num": "1636", "d": "12/2012"}, {"title": "context associated controller early", "body": "currently connection controller content occurs nt controller matches template get generic controller routes model content later implementing custom specify custom controller use content never set model", "num": "1635", "d": "12/2012"}, {"title": "uncaught error object path controller could found destroyed", "body": "router api merged get following error try spin simple ember app uncaught error object path controller could found destroyed setpath set emberobservableembermixincreateset codecampsessionsrouteemberrouteextendsetupcontrollers superwrapper emberrouteemberobjectextendsetup eachhandler setupcontexts collectobjects proceed collectobjects routerhandleurl emberrouteremberobjectextendstartrouting emberapplicationembernamespaceextendstartrouting emberapplicationembernamespaceextenddidbecomeready runloopprev emberhandleerrors invoke invokeoncetimer runloopprev emberhandleerrors invoke iter runloopflush runloopend tryable embertryfinally emberrunend autorun drop debugger see new router appear know controller setupcontrollers line seems good starting point remove setupcontrollers route error described goes away ember modelviewcontrollerroute question codecampsession dsmodelextend name dsattr string codecampsessionsview emberviewextend templatename sessions codecampsessionscontroller emberarraycontrollerextend content codecamproutermap function match match sessions codecampsessionsroute emberrouteextend setupcontrollers function thisset controllercontent basic handlebars template session controller sessionname", "num": "1630", "d": "12/2012"}, {"title": "missing docs concatenated properties emberobject", "body": "documentation properties emberview class appears following text reference concatenated properties emberobject docs would love contribute writing english good", "num": "1627", "d": "12/2012"}, {"title": "objectconstructor returns unkown mixin causing failure emberdata", "body": "using ember emberdata master emberdata stops working since url creation uses construtor create url latest ember return type returns unknown mixin", "num": "1625", "d": "12/2012"}, {"title": "difficulty adding new templating engines", "body": "know likely current roadmap interest difficult would integrate different templating engines ember along autoupdating twoway bindings work big siliconvalley company early stages adopting dustjs frontend templating absolutely love push ember used internally experience using side projects extremely positive would dust support get nowhere trying persuade company use different templating engine like handlebars even happy work love get thoughts viable would tightly coupled ember handlebars present thanks input", "num": "1624", "d": "12/2012"}, {"title": "calling viewrendertobuffer view already destroyed", "body": "function dommanager replacing view javascript var dommanager messed replace function view var morph viewmorph get called even object view already destroyed since condition comes late reason order condition put rendertobuffer call use emberviews minor modifications get notified error", "num": "1622", "d": "12/2012"}, {"title": "emberobjectcreate longer supports defining methods call super naive", "body": "merry christmas new ember user started getting message emberobjectcreate longer supports defining methods call super using coffeescript coffee commitdrawcommands documentview output js commitdrawcommands function documentview var draws ranfirstredo undostack thisdrawslength return undostack documentviewget undostack null return draws map thisdraws identity ranfirstredo false undostackpush new function super undocommand return thisdraws used emberobjectcreate see coffeescript uses term super implement extension mechanism ember sees token super throws error check naive better solution required", "num": "1621", "d": "12/2012"}, {"title": "removing already removed observer", "body": "sure bug expected behavior older version ember fine call twice watching counter decremented regardless observer presence jsfiddle illustration", "num": "1620", "d": "12/2012"}, {"title": "test fails latest build cst dec master", "body": "cst dec checked latest version master commit built code test failed following message running package emberrouting f module failed routing basic mapping test failed able map path string assertion failed died test file undefined object evaluating emberroutehandlerextend time total passed failed comment test rest run fine", "num": "1619", "d": "12/2012"}, {"title": "using restadapter expressjs server returning error invalid json", "body": "sure problem express end reason default restadapters function causes express return error modifying default content type fixes issue", "num": "1615", "d": "12/2012"}, {"title": "using arrowmodifier keys textfield bound number property frustrating", "body": "embertextfield always updates values keyup bound ember data model object type number cause value get updated response arrowshiftcontroletc keys desired thus resetting value moving cursor end makes extremely painful edit numeric values fix would change interpretkeyevents call elementvaluedidchange keys actually would modify value arrows modifier keys", "num": "1613", "d": "12/2012"}, {"title": "poor error message emberget undefined path", "body": "", "num": "1612", "d": "12/2012"}, {"title": "super param work superclass", "body": "", "num": "1611", "d": "12/2012"}, {"title": "router able prevent transitions triggered url changes", "body": "ember router presently allows specify valid transitions states via router actions method far know developer totally mercy certain class userinitiated transition requests nt really adhere constraints set router actions course referring url changes explicitly keyboard less via backwards forwards buttons dug around source latestlatest router refactoring around last months nt seem elegant way cancel invalid transition request via url change backforward button eg user finalized onetime signup form nt really want navigating back form app could considered invalid state wondering smart way reign urlbased transitions would decouple urlresponsiveness application state managerconnectoutlets side things particular could give router whatever called responsibility translate url changes actions states decide respond via form basically could still dynamic segments defined similar way old router way new unreleased router way translate requests another state manager connectoutlets sort stuff eg user clicks back button url changes url interpreter translates action calls statemanagersend tofinalizemembership states would actually respond transition rest could safely ignore url interpreter could revert url would also allow things like blocking navigation user filling form etc etc sentence router presently seems little tightly coupled url changes makes hard developers keep apps valid state think ideassuggestions go forth code alternative", "num": "1606", "d": "12/2012"}, {"title": "proxied properties ignored using context", "body": "sure good way write code appbook dsmodelextend title dsattr string appproxy dsobjectproxyextend isviewing false appbookview emberviewextend contextbinding content view view appbookview contentbinding book book proxied book bookviewhandlebars title yields title isviewing yields undef contentisviewing yields false problem ca nt refer properties objectproxy wo specifying content", "num": "1604", "d": "12/2012"}, {"title": "document preferred idiom destructors releasing resources", "body": "see possible places hook dispose resources eg windowglobal event bindings like onbeforeuload web sockets weak references etc would great document approach es isare recommended seem work fine current emberjs sure know enough evaluate proscons well predict future potential changes behavior happy submit pr improved documentation destruction somebody indicate approach preferred overriding coreobjectdestroy destroy function thiscleanupresources thissuper tailcall super case coreobjectdestroy immediately invalidates objects future overriding coreobjectwilldestroy willdestroy function thissuper thiscleanupresrouces observing isdestroyed cleanupresources function use object like normal metadata etc object undefined halfdestroyed state observes isdestroyed", "num": "1603", "d": "12/2012"}, {"title": "sibling outlet cleared exit", "body": "demonstration controlling bootstrap modal state using router outlet connected modal showed correctly switching sibling states view willdestroyelement nt act expected connect new outlet willdestroyelement called", "num": "1600", "d": "12/2012"}, {"title": "emselect multiple true nt work content binding", "body": "simple demonstration data binding selected value nt seem working", "num": "1599", "d": "12/2012"}, {"title": "class name bindings still fire controller change triggers rerender", "body": "view dynamicallycreated controller bound particular property view also class name binding property javascript apppersonview emberviewextend classnamebindings persontype controller function var persontype thisget persontype controllername emberstringclassify persontype controller property persontype example controllers appusercontroller emberobjectcontrollerextend appadmincontroller emberobjectcontrollerextend bound property changed subsequent change controller triggers rerender temporarily puts view prerender state also triggers removal class name binding observer unfortunately seems class name binding observer scheduled run controllertriggered rerender could remove time view put prerender state observer runs attempting modify class name element via function available prerender state causing break line nb far unable build properly failing demo outside application simply changing bound person example view enough advice trigger scheduling class name binding observer controller property rebuild triggers rerender would much appreciated", "num": "1598", "d": "12/2012"}, {"title": "emberrouter transitionto connectoutlets change url", "body": "problems transitioning another state shownew emberroutetransitionto newroot new emberrouteextend route new root emberrouteextend route connectoutlets function router routertransitionto group groupname title group emberrouteextend route groupname connectoutlets function router consolelog connected send action router enter url stay instead works directly transition would like let root route know context pass looks like bug maybe something wrong maybe problem comes multiple calls jsfiddle work transition newroot code show jsfiddle work transition newgroup code show", "num": "1597", "d": "12/2012"}, {"title": "infinite loop objectcontrollers content bound property", "body": "objectcontroller go infinite loop trying get content property content property tries load value bound property consider connectionstatebinding nt actually create property name connectionstate means attempt find property using objectcontroller unknownproperty turn attempt get content property starting everything fiddle workaround problem use computed property instead binding appsomecontroller emobjectcontrollerextend connectionstate function appget connectionstate property appconnectionstate", "num": "1596", "d": "12/2012"}, {"title": "proper pattern updates objectcontrollers content attribute sought", "body": "conceivable objectcontroller subclass would instantiated via router based lazily loaded attribute presumably \u00e0 la ember data would return plain empty js object moments later selfsame js object would updated content would reflected view demonstrates concept use console issue one easily imagine subsituting call call trouble example mind user bears responsibility iterating new data hash example case held better way perform change iteration required better way one used example", "num": "1594", "d": "12/2012"}, {"title": "bindattr working initial view load", "body": "using unless propthatreturnsfalse clearly false unless problem view first loads bindattr adding class myclassname div element notice class somedynamicclass added false condition b yet view first loads unless works perfectly fine printing clearly false course attribute unless bindings work fine property propthatreturnsfalse modified first load bindattr nt seem working false condition injecting class bug ember something wrong jsfiddle", "num": "1593", "d": "12/2012"}, {"title": "default setter induce unexpected wrong behaviour", "body": "default setter introduced induce unexpected behaviour manifests last emberselect computed macros issue setter use overwrite custom getter implementation issue getter dependencies expected behaviour recompute using getter implementation dependency change", "num": "1592", "d": "12/2012"}, {"title": "inconsistent behavior defining computed properties root namespace", "body": "see fiddle demonstrates several surprising behaviors deadly skull assert never fires handlebars call myapproutermagiccontrollerselectedword always works myappmagicword works initial render behavior inconsistent ember complain warn document inconsistencies somehow notification behaving expected", "num": "1591", "d": "12/2012"}, {"title": "handlebars view helper using child context evaluating bindings", "body": "including view template handlebars helper method new context binding passed via helper method invocation value used righthandside context bindings set helper invocation past would bind view context binds view context work around use following working example bisecting appears issue may introduced", "num": "1590", "d": "12/2012"}, {"title": "bindattr amp amp possible", "body": "hi emberjs team possible enable boolean operations within bindattr something like course could create new virtual property include isdisabled isnotallowed nt seem right use cases", "num": "1589", "d": "12/2012"}, {"title": "cannont perform operations metamorph dom", "body": "started running bleeding latest site erratic errors started showing repro", "num": "1588", "d": "12/2012"}, {"title": "testing views children nested properties templates", "body": "testing parent view child view html view appchildview child view context bound controller nested property template html foobar destroying child test teardown getting error deep ember demonstration issue problem stems fact view classes controller dependencies injected test setup without controller context child view defaults gets set context certain lowlevel function calls causes default thus becomes target nested property observers template might argue view classes controller dependencies set instantiating tests nt completely disagree feel raises two issues neither solution problem way obvious error thrown seems sketchy tests one view perform much setup children inclusion template feels like implementation detail prefer test views integrated fashion requires children worktm global would technically solve still seems excessive mention inefficient", "num": "1587", "d": "12/2012"}, {"title": "contenteditable perform operations metamorph dom bug", "body": "contenteditable view focusout get html entered save remove text contenteditable focus get error uncaught error perform operations metamorph dom please see jsfiddle delete text focus anyone help best regards rick", "num": "1582", "d": "12/2012"}, {"title": "html comments handlebars templates cause error", "body": "temporarily commented html template commented code contained couple variables like causes error perform operations metamorph dom error happens view disconnected outlet sure fix often comment html development would say needs handled version", "num": "1580", "d": "12/2012"}, {"title": "loop behave inconsistently", "body": "times array inside change loop temporary solution inverse loop chainsdidchange javascript function chainsdidchange obj keyname arg mhasownproperty chainwatchers return nothing var nodes mchainwatchers nodes nodes keyname nodes return var l nodeslength lt l nodes didchange arg javascript function chainsdidchange obj keyname arg mhasownproperty chainwatchers return nothing var nodes mchainwatchers nodes nodes keyname nodes return var nodeslength gt nodes didchange arg", "num": "1579", "d": "12/2012"}, {"title": "computed setter messes property caching", "body": "computed properties getters setters somehow messes property cache small code triggers problem javascript var obj emberobjectcreate hidden old consolelog set objget test objset test new consolelog set objget test result printed chrome adding property produces right behaviour however properties work tested", "num": "1578", "d": "12/2012"}, {"title": "todos sample work", "body": "ca nt get todos example work todos sample work apparent problem handlebar binding work checkbox uses works well thanks", "num": "1577", "d": "12/2012"}, {"title": "unsafe javascript error chorme iframe js sth else single hyper link", "body": "set sites test site site one static html page hyper link content single link iframe js sth else hyper link href target blanck gt site b site b site b emberjs starterkit site problem click hyper link site site b opened new tab ok also got error chrome console unsafe javascript attempt access frame url frame url domains protocols ports must match confused enter siteb url chrome address bar press enter ok open site b via clicking link sites error aways issue causes flash file uploader work site situation sorry poor english know talking please let know thank help", "num": "1576", "d": "12/2012"}, {"title": "ember nt work uiwebview", "body": "see post reproduce well okay found post ember borked uiwebview may try take stab working issue new ember guidance put guard place successfully would helpful cheers jason", "num": "1575", "d": "12/2012"}, {"title": "issue using emberjs jwplayer", "body": "issue using ember jwplayer flash mode found related issue sent patch jwpayer support team looks like jwplayer thrilled add patch means way use ember something could done ember side also", "num": "1567", "d": "12/2012"}, {"title": "broken", "body": "updated app view seems work anymore example get correct amount items item data fields empty started checking examples examplestodos nt work either works ok replace older version javascript console nt errors code looks like nothing special appuserscontroller view appuserview userbinding", "num": "1566", "d": "12/2012"}, {"body": "digging around code found offending lines remove statement things work expected", "d": "12/2012"}, {"body": "something related worth skimming may guice injection scopes", "d": "12/2012"}, {"body": "stefanpenner essentially already scopes singleton option problem see call nonsingleton scoped controllers", "d": "12/2012"}, {"body": "ghempton would nt scope bound lifecycle object like good fit singleton could viewed scope bound lifecycle entire application", "d": "12/2012"}, {"body": "stefanpenner makes sense opted go nonsingleton controllers lifecycles tied objects could picture implemented sort scope", "d": "12/2012"}, {"body": "literally hourlong discussion lunch today try write thoughts", "d": "12/2012"}, {"body": "tomdale cool looking forward hearing", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "thoughts controllers want remember models store persistent state controllers store application state application state state saved entire runtime application persistent state saved even user closes app later reopens controllers also present models views augmenting model properties application survive destruction particular view let use simple motivating example involving expanded state also case reusable views discuss separately handlebars isexpanded title body contract post else title show would controller like js apppostcontroller emberobjectcontrollerextend isexpanded false function thisset isexpanded true less function thisset isexpanded false example even template torn rerendered expanded state post would preserved general using controllers state ensures state coupled lifecycle view backbone applications people store state like nonpersistable models ember call objects controllers unfortunately like punxsutawney phil groundhog day problem pops try apply similar strategy inside helper case current controller controller expanding single post would invoke action controller property shared across elements loop solve problem today bad options save property model treating model like controller easy solution want use model multiple contexts namespace expanded properties keeping track ends junk drawer application state wrong place define new view class store property approach good want expanded state reset every time leave reenter current route tied view lifecycle cases however would produce subpar user experience override try wrap new object controller approach would work getting exactly right avoiding memory leaks invalidating caches underlying array changes etc tricky realm framework code application code proposed solution ghempton proposed option addresses issue common case want state persist across navigation changes short framework would supply property property set would automatically wrap new contents specified class whenever underlying array changes eg model ed associated would thrown away via frameworkprovided mechanism short would get benefits bad option without pitfalls implementing reusable views reusable views different problem particular really want viewspecified controller class wraps model controller provided parent template example imagine calendar view used thusly default imagine ui framework providing default controller view expects wrapped framework may ask subclass controller order implement certain hooks eg date ranges greyed currently way provide controller class view currently controller template bound would required know many instances template create named instances controller subclass widget instead propose would create instance widget would tied lifecycle widget", "d": "12/2012"}, {"body": "one things everyone thinks contradictory usecase obviously correct going default links actions bubbling add parameter use stop propagation", "d": "12/2012"}, {"body": "got issue", "d": "12/2012"}, {"body": "toranb rockwood one put together failing test case jsfiddlejsbin demonstrate", "d": "12/2012"}, {"body": "passed controller worked fine eg", "d": "12/2012"}, {"body": "interesting true bug router work going forward need update docs show setup controller within route anyone update let us know done", "d": "12/2012"}, {"body": "confirm well w controller passed fabriciotav showed also nice unit testing sake question still remains possible bug initially thought", "d": "12/2012"}, {"body": "approach seems right way gist tom dale updated merging new router uses approach initial code work based section tom code takes similar pattern original code", "d": "12/2012"}, {"body": "gist nt see tom injecting controller fabriciotav suggests see actually working master currently code snippet show explict thisset controllerhours work controller available route", "d": "12/2012"}, {"body": "yeah stumbled upon earlier forked updated gist match original gist made months ago sure api probably evolved since created", "d": "12/2012"}, {"body": "would love contribute opposite problem js ninja yet though native english speaker would happy help however", "d": "12/2012"}, {"body": "javierav want pr first pass would happy edit english", "d": "12/2012"}, {"body": "removing ember booted fixes issue sure classtostring function var namespace embernamespace namespace todo namespace really metal namespace amp amp emberbooted", "d": "12/2012"}, {"body": "issue production build development build fine looks like introduced tomdale ideas", "d": "12/2012"}, {"body": "tightly coupled view function like mature template systems browser handlebars compiles function gets called function must accept object rendering context return string outputted html would job write dust helpers handle live updating areas content updates emberhandelbars uses external library denoting dynamic sections page might get replaced", "d": "12/2012"}, {"body": "bluepnume basically basically reimplement love able advertise multiple templating languages ember though support additional languages would third parties", "d": "12/2012"}, {"body": "bluepnume sure others would agree fwiw easy enough wrap existing html generating language something compiles handlebars template hamlbars example planning writing identationbased templating language ember compile handlebars templates got build process nt really see downside going route", "d": "12/2012"}, {"body": "machty also viable option could see either working depending exact scenario", "d": "12/2012"}, {"body": "commit changed provides context time look later unless someone beats poke poke tomdale wycats", "d": "12/2012"}, {"body": "oh super annoying har har seems like checking rather since super calls usually invoked coffeescript seems use argument variable thoughts", "d": "12/2012"}, {"body": "solution vanilla coffeescript class extension imo still naive could easily define custom class within method emberobject able thissuper totally legally believe could even emberobjectextend object use super legally outer object would complain really sure could fixed said super help one specific case though thanks committing", "d": "12/2012"}, {"body": "reference comment also relevant", "d": "12/2012"}, {"body": "kselden ebryn et al guys look", "d": "12/2012"}, {"body": "tests run fine commit previous one", "d": "12/2012"}, {"body": "sorry wasted time whatever reason checking previous version attempt see point tests might stopped working tests running fine latest build master cloned repo another folder verify run fine well", "d": "12/2012"}, {"body": "worries troll best times mind closing issue", "d": "12/2012"}, {"body": "requests", "d": "12/2012"}, {"body": "filed", "d": "12/2012"}, {"body": "trek yea getting also totally meant submit emberdata project", "d": "12/2012"}, {"body": "pretty sure issue", "d": "12/2012"}, {"body": "wagenet thank", "d": "12/2012"}, {"body": "actually issue worse use arrow keys move middle number value updated type cursor moves end", "d": "12/2012"}, {"body": "solution override interpretkeyevents subclass textfield blank implementation", "d": "12/2012"}, {"body": "going tackle need something light work today", "d": "12/2012"}, {"body": "go town", "d": "12/2012"}, {"body": "would wiser display error nonexistent object primitive datatype return undefined maybe later would consistent considering requesting nonexistent nested property also returns undefined eg", "d": "12/2012"}, {"body": "machty probably lead really hard debug errors used heavily internally already know understand invalid path means something thought object returned get message least referenced typeerror read property foo undefined nt know would get close understanding seeing", "d": "12/2012"}, {"body": "machty definitely think throw", "d": "12/2012"}, {"body": "although interestingly machty suggestion might original implementation untested docs note obj method simply return", "d": "12/2012"}, {"body": "behavior emberobjectcreate changed getting error thrown notifying please refer commit message details", "d": "12/2012"}, {"body": "support idea conceptually router state machine one valuable tools ember kit addressing areas crippled good idea machty suggests kind thing advanced feature stays way nt need", "d": "12/2012"}, {"body": "provide simple example backwardforward breaks app state sure follow", "d": "12/2012"}, {"body": "anytime app calls nonreversible state transition write pretty heroic validation logic per state make sure actually supposed state time already state breaks whole paradigm depriving lot benefits otherwise wellsealed statebased design change url imo much user initiated event mouse click keystroke latter group bound constraints state manager design via router actions change url hand slips right cracks url changed back previous router presently blindly go along perform miracle oneway transitions damned examples include user logs url changes nt able press back see dashboard happens minus validation heroics full page refresh writing bank app user submitted transfer another account url changes success banner top user presses back get quick reassuring glance transfer amount even server validation place preventing duplicate transfers rather displaying confirmation screen might want intersect request transition back confirm transition transaction detail page instead etc etc examples endless think could reduce lot headaches get lot mileage translating urls router actions allowing states decide happen someone attempts perform action last example pressing back would translate action state positively respond state redirect transaction detail page clarify things", "d": "12/2012"}, {"body": "machty looked new router sure addresses worth taking look", "d": "12/2012"}, {"body": "wagenet took look gather concept state machine involved new router way decoupled state machine url recognizer far still seems make jump hoops validate consider user event changing url going think lot ways like new router api seems like accomplish router third confusion also concept funneling user interactions routerdefined actions still seems intact weird zombie pseudo state machine sort way think way step away suggesting convert url changes statemachine actions via ideas swirling head overriding default assumptions design accomplish suggesting need little time familiarize code present certainty", "d": "12/2012"}, {"body": "like machty thinking felt yesterday made simple project involved two urls setups user queries projects focused project accessible login since state client side simply hitting refresh cleans loggedin user result hit refresh url ember transition state since user logged application blows think one way separate url parsing application state machine like application asks router another state url parser also request application state machine transitionto mapped state upto application state machine decide whether state reachable current one transition request denied url parser simply resets url point current active state application proceeds usual right specific problem writing validation manually transitioning safe state error occurs would amazing ember add magic process", "d": "12/2012"}, {"body": "updated title since getting newrouter main goal short newcomers router transitions caused url changes backwardsforwardsetc preventable imo best way would convert url changes actions default transition mappedto route eg url change resolves action default transitions router admin state connectsoutlets etc etc actions overridden prevent certain transitions though seems like newrouter taking step away tight coupling state machine way would worked oldrouter would root level define action would perform authentication redirect appropriate passthru could define state would shared among substates love get tomdale thoughts newrouter way accommodating use case go long way towards sealing currently unchecked leakiness", "d": "12/2012"}, {"body": "seems going things wrong way transitional states uris example uri userisdead information stored elsewhere uri user navigate uri show current state user dead alive take account confirmation example site would handled thus assign uuid account immediately confirmation page handling account simply account uuid user goes page app checks see status account confirmation required displays confirmation page displays account information account deleted displays equivalent perhaps redirect accounts page never store transitional state verb confirm uri violates restful practices system simple matter capturing click back button calling appropriate route rather allowing client display cached page push state hashes anyway right nt see reason complicate router code something like stick rest wrt uris store current state db local andor remote easy also avoid post idempotent app loaded fills queue uuids server queue gets certain number say adds another way uuids generated db consistent instead using post create new item return uuid assign uuid immediately shifting queue put server server simply puts item previous item uuid overwritten none existed new one created manner resubmit request without creating duplicate results problem back button creating second third unwanted result eliminated way create another pull another uuid queue means starting blank form find eliminating post otherwise keeping verbs transitional states uri solves problems robust scalable uuids key encountered lot resistance idea people seem wedded post ca nt seem grasp benefit idempotency really ca nt explain seems like nobrainer", "d": "12/2012"}, {"body": "chasm thank input points unless counting event way capture back button click interpret value hash already changed router nt presently give neat way override hence suggestion convert overridable actions also even assuming events afaik routers old new nt really provide means capture events anything passthru unchecked transition particularly tied example routable uri merely thinking instance something irreversible happened devs would want prevent user say clicking back button back requiring validation within alreadytransitionedto state impractical breaks state machine paradigm totally preventable via action approach brings next point sure wisdom rest applied resourceoriented server api translates frontend apps stateful form add new favorite restcompliant either way linkable uri backforwardbuttonable uri seems like suggesting superstate requires validation route forfeit uri course could also converted still need perform sorts user validation heroics still presently would need take place within router sees alreadytransitionedto state ie ok transitioned newfavorites route let first make sure current user logged dead crap dead lets tell midtransition state machine transition somewhere else definitely number apps call approach suggested immediately assigning ids maintaining transient users db nt default workaround something could easily elegantly prevented firmer adherence overridable state transitions gatekeepers nt want complicate router already handling posttransition validations going usher additional complexity matter currently tools presented break state machine paradigm best practices perform midtransition validations transitions find clever way prevent alreadytransitioned substates running callbacks forfeit linkable refreshable backforwardbuttonable restcompliant uris going gets tough suggesting third tool like others totally optional otherwise transparent right tool need handle situations", "d": "12/2012"}, {"body": "agree conceptually monkey patched router add functionality use primarily prevent someone leaving page unsaved changes found lot users use back forward navigation app nav bar app navigation", "d": "12/2012"}, {"body": "believe preferred", "d": "12/2012"}, {"body": "thanks document submit pr", "d": "12/2012"}, {"body": "wo nt filling specific outlet entering new state use previous state event", "d": "12/2012"}, {"body": "thanks trek precise answer", "d": "12/2012"}, {"body": "data binding working fine trying display array string see", "d": "12/2012"}, {"body": "pivotalmedici last bit read far unable", "d": "12/2012"}, {"body": "aye", "d": "12/2012"}, {"body": "lcoq route needs nested route confused hopefully upcoming new router api less confusing respect", "d": "12/2012"}, {"body": "thanks answer lukemelia completely solve problem moving route route avoid user go url could find state path guess ca nt route state leaf state saw consequently url example would like keep valid url believe could classic scenario handled ember could consider bug", "d": "12/2012"}, {"body": "klaaspieter nt bug property explicitly defined try proxy set proxies obvious infinite loop simpler alternative cp define controller means wo nt proxy see", "d": "12/2012"}, {"body": "fiddle linked work asking would set content controller without connectoutlet controllerset content mycontent asking find controller", "d": "12/2012"}, {"body": "kselden follow fiddle url open console console btw better way accomplish fiddle see behavior default set displayed ms later updated means update using within function question better way update payload iterating elements", "d": "12/2012"}, {"body": "sgharms following steps produce behavior either", "d": "12/2012"}, {"body": "kselden gavacho need make sure running code right iframe context", "d": "12/2012"}, {"body": "sgharms though get fiddle working admit still clue actual issue", "d": "12/2012"}, {"body": "resolved oneonone sgharms", "d": "12/2012"}, {"body": "viewing request guidance means implemented recommended wagenet suggested store data property called provide kvo accessors ultimately strongest recommendation go ember data smile", "d": "12/2012"}, {"body": "produce fiddle", "d": "12/2012"}, {"body": "sorry example missing information modified example added jsfiddle", "d": "12/2012"}, {"body": "accidentally stumbling stackoverflow question understand correct solution unless propthatreturnsfalse clearly false unless listed online documentation anywhere", "d": "12/2012"}, {"body": "wanted chain multiple static classes would", "d": "12/2012"}, {"body": "rukspin able include multiple static classes unless propthatreturnsfalse clearly false unless understanding question please elaborate stackoverflow preferred channel questions", "d": "12/2012"}, {"body": "rukspin bindattr helper nt know anything context since string template nt parsed try parsing jquery solution dgeb said output one class attribute", "d": "12/2012"}, {"body": "indeed documented", "d": "12/2012"}, {"body": "tchak use case custom getter custom setter explicit sets nt want permanent discussing change concluded cases far solution make property custom setter also since tests pass cp setter changes probably least update ticket add failing tests", "d": "12/2012"}, {"body": "use case framework change right", "d": "12/2012"}, {"body": "tchak need failing test emberselect need old behavior leave explicit setter", "d": "12/2012"}, {"body": "kselden tonight app lot properties like object controllers toto function return something property titi tata bound views titi tata usually coming behave unreliably change unless put explicit key value something nt", "d": "12/2012"}, {"body": "tchak way binding coming", "d": "12/2012"}, {"body": "emberselect problem fixed rest intentional", "d": "12/2012"}, {"body": "hey duplicate", "d": "12/2012"}, {"body": "cool thanks pointer embercore place could catch failure type could put guard people bloodying walls head", "d": "12/2012"}, {"body": "hmm perhaps result set problem valid property value", "d": "12/2012"}, {"body": "could tell difference return return undefined could cache input value return", "d": "12/2012"}, {"body": "ran today", "d": "12/2012"}, {"body": "thinking use helper shift context andor make keyword assuming asking way set context view bindings parents context use case revert commit like explicitly tested wycats", "d": "12/2012"}, {"body": "works worked longer works nt tested worked", "d": "12/2012"}, {"body": "helps child view controller often case righthandsides bindings evaluated relative child view matter template view included may writing righthandsides relative context ca nt intuit template alone javascript approuterchildcontroller emberobjectcontrollercreate baz omega appchildview emberviewextend controller approuterchildcontroller even template equals alpha value property child view still set omega suggestion use would nt help controller preempts parent view context words nt appear way refer template controller remove believe crucial functionality feels counterintuitive reading template expect property paths see relative template context may change context temporarily always able trust context see part template", "d": "12/2012"}, {"body": "kselden pointed could use make available view helper righthandsides restores desired functionality however user emberhandlebars clear necessary repetition makes look like noop fact needed makes feel like voodoo", "d": "12/2012"}, {"body": "hi kind feature really good pushes much logic templates would prefer put logic controller example", "d": "12/2012"}, {"body": "correct would go controller perhaps view object highly unlikely handlebars ever include logic exists", "d": "12/2012"}, {"body": "trek thank much answers", "d": "12/2012"}, {"body": "case gist dies repro html lt gt hello emberjs lt gt viewshow viewshow viewthingxxx js javascript var app emberapplicationcreate var thing emberobjectextend appapplicationcontroller embercontrollerextend appapplicationview emberviewextend templatename application show true thing thingcreate approuter emberrouterextend root emberrouteextend index emberrouteextend route", "d": "12/2012"}, {"body": "simple fix", "d": "12/2012"}, {"body": "hi like help solving issue need help contribute somehow please let know", "d": "12/2012"}, {"body": "using actually creates view using metamorph metamorph uses tags mark location change content via end removing tags view goes update content ca nt find tags anymore get error see information metamorphs strongly recommend avoiding using handlebars helpers content", "d": "12/2012"}, {"body": "sure think seen handlebars line comments using could try tell works line comments handlebars see", "d": "12/2012"}, {"body": "yes work problem case noted nt mentioned anywhere find documentation problem html comments allowed handlebars templates perhaps fix easy documenting cause error thrown", "d": "12/2012"}, {"body": "phpaddiction issue handlebars aware surrounding code nt know inside comment sets binding infrastructure master version handlebars support block comments long term best solution use prevent handlebars blocks inside interpreted like add comment issue docs happy pr", "d": "12/2012"}, {"body": "sounds like comment emberjs handlebars docs would good enough couple hour time sink figure perhaps little info debug version exception possible cause error perform operations metamorph dom handlebars site nothing lead think would issue comments resulting output like comments show use html comments gt output comment output anyway thanks taking look", "d": "12/2012"}, {"body": "phpaddiction metamorph issue specific ember however blocks html comments still processed standard handlebars unless wrapped block handlebars comment", "d": "12/2012"}, {"body": "makes sense nt used handlebars outside ember nt sure happy reason avoid", "d": "12/2012"}, {"body": "yeah sorry trouble ideally get useful error message see", "d": "12/2012"}, {"body": "fixed", "d": "12/2012"}, {"body": "thing happened today chainswillchange made tests least temporarily loop nodes empty loop copy", "d": "12/2012"}, {"body": "return value setter", "d": "12/2012"}, {"body": "thanks bit weird return value setter going close issue", "d": "12/2012"}, {"body": "problem computed property allowed alter value set need return", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "kselden thanks behindthescenes explanation looking", "d": "12/2012"}, {"body": "examples date limited usefulness probably remove", "d": "12/2012"}, {"body": "wagenet think fast avoid people get confused ember mainly learning yet", "d": "12/2012"}, {"body": "brunocoelho deferring learning emberjs version api stabilizes think lots people kind situation wrong examples suck", "d": "12/2012"}, {"body": "tomdale plate weekend either updating removing got stymied bit friday slow start favor removing public view", "d": "12/2012"}, {"body": "definitely agree remove bring update ready people work get stumped looking old example", "d": "12/2012"}, {"body": "merge pull request community get samples work", "d": "12/2012"}, {"body": "xqiu could definitely work personally think little emphasis api documentation including samples helps lot sample application feel sample application brings people shows around lets make whether want delve deeper still wrapping head around concepts ember already started try put together samples feel help make intricate areas emberjs little easier understand planning setup pr documentation enough go enough confidence work well", "d": "12/2012"}, {"body": "agree karlbright useful good api documentation ember improving days started ember useful api documentation sample applications", "d": "12/2012"}, {"body": "removed outdated examples website repo however still show site sure long github clears cache xqiu find link examples", "d": "12/2012"}, {"body": "wagenet found examples", "d": "12/2012"}, {"body": "ah see examples repo links website", "d": "12/2012"}, {"body": "added deprecation notice examples repo readme", "d": "12/2012"}, {"body": "update chrome browser flash player problem gone tt", "d": "12/2012"}, {"body": "sorry opened still confused want know reason old version chrome updated automaticly new version ca nt reproduce issue fixed", "d": "12/2012"}, {"body": "yaohuiji unable reproduce consider closed", "d": "12/2012"}, {"body": "mean consider fixed able get something consistently reproducible let us know reopen ticket", "d": "12/2012"}, {"body": "older version ember circa working correctly uiwebview appstore app would guess need configure router attempt manipulate url page since url visible guess ought configure router please reopen issue nt resolve problem seeing", "d": "12/2012"}, {"body": "could set false prototype extension really root cause", "d": "12/2012"}, {"body": "limit ember", "d": "12/2012"}, {"body": "nt extend object prototype nt see issue", "d": "12/2012"}, {"body": "please look following file wrapped line block condition objhasownproperty item created custom build fix works example fix flash mode nt work custom build fix", "d": "12/2012"}, {"body": "extending array causes issue adding setting solved conflict", "d": "12/2012"}, {"body": "excellent although missing handy array extensions frowning issue resolved feel free close", "d": "12/2012"}, {"body": "thanks help", "d": "12/2012"}, {"body": "word warning performance impact creating observable arrays another note terrible way iterate array instead submitting patch submit patch loops using vs merits nothing ember", "d": "12/2012"}, {"body": "looks like jwplayer team fixed issue exactly removed legacy code including file patched caused issue next version conflict ember thanks comments", "d": "12/2012"}, {"body": "take look view context changes changed pre old way longer supported snippet short fix use viewuseremail", "d": "12/2012"}, {"body": "ok thanks prompt reply", "d": "12/2012"}, {"body": "verified issue latest master", "d": "12/2012"}, {"body": "also experiencing problem jsfiddle created debugging isue clickhandler example works first time press show view b stops working show view c clicked eimermusic explained view elementid destroyed run loop following creation", "d": "12/2012"}, {"body": "seems resolved latest libraries see times briefly switches never stays", "d": "12/2012"}, {"body": "since view registers emberviewviews needs defined run nt indom state master uses assign semantics instead define call computed property setter instead overriding uses define semantics passed props old create fire change events initial values expected call ones want run proposed adding flag observers opt called init questions around ordering create object initial state point function", "d": "12/2012"}, {"body": "definitely issue", "d": "12/2012"}, {"body": "still issue master", "d": "12/2012"}, {"body": "think would interesting see pr makes support", "d": "12/2012"}, {"body": "", "d": "12/2012"}, {"body": "forgotten would make sense override function level level", "d": "12/2012"}, {"body": "mehulkar question exactly expect returned would basic array instance class called something else", "d": "12/2012"}, {"body": "expect instance class called eg", "d": "12/2012"}, {"body": "mehulkar seems bit harder open someone attempting solution", "d": "12/2012"}, {"body": "adaptivdesign trek actually exact issue models apprequest loaded displayed collectionview apprequest hasmany appmaterial every appmaterial belongsto appvendor one appvendor properties name template displays apprequest try display viewcontentmaterialsfirstobjectvendorname fails something tried replace expression inserted dom error see replicate jsfiddle", "d": "12/2012"}, {"body": "turns fairly simple way resolve issue", "d": "12/2012"}, {"body": "sounds like resolved let know mistaken", "d": "12/2012"}, {"body": "still issue latest master indeed look like bug", "d": "12/2012"}, {"body": "using incorrectly intended used getter updated jsbin shows correct usage", "d": "12/2012"}, {"body": "clarify use good number questions caused", "d": "12/2012"}, {"body": "fixed closure copied local var cleared createwithmixins create", "d": "12/2012"}, {"body": "yes bizzaroearth auditing actions ones wrong urls allow transitions states without passing context led user seeing weird page parts showed cases solution action contexts load asynchronously change time trouble thinking way around nt lead unintentional errors", "d": "12/2012"}, {"body": "closing since sounds like wycats wants address another way", "d": "12/2012"}, {"body": "older version ember working least using location history router configuration however stopped working sure ember point javascript approuter emberrouterextend enablelogging true location history nt use routes instead rails pass anything appropriate root emberrouteextend etc javascript appproviderscontroller emberarraycontrollerextend connectproviders function router var loc routerlocationlocationhref var findparams q url loc param q page url loc param page pretty new ember happy take stab fix someone points right direction", "d": "12/2012"}, {"body": "actually appears fixed latest master", "d": "12/2012"}, {"body": "still issue", "d": "12/2012"}, {"body": "lukemelia know stuff refactored still issue", "d": "12/2012"}, {"body": "fixed master", "d": "12/2012"}, {"body": "icholy sure understand bug make jsfiddle latest master demonstrates issue", "d": "12/2012"}, {"body": "updated fiddle master longer reproduce error", "d": "12/2012"}, {"body": "still case though nt see simple fix offhand", "d": "12/2012"}, {"body": "still point confusion actual bug", "d": "12/2012"}, {"body": "wagenet rlivsey said child route runs parent route workaround assign controller data parent route looking weird also load data yeah could check data already loaded simply pass parent dynamic segments children like rails developers assume default", "d": "12/2012"}, {"body": "nt really ember issue probably wise call docs", "d": "12/2012"}, {"body": "still issue kselden knows fix nt time either wait someone consult fix", "d": "12/2012"}, {"body": "yeah tried use emberrequired didnt understand didnt work beeing almost sure something wrong anyway kselden considering time explain fix understand work would happy contribute", "d": "12/2012"}, {"body": "trek think good place", "d": "12/2012"}, {"body": "looks like whole area undergoing changes lets see shakes", "d": "12/2012"}, {"body": "fixed", "d": "12/2012"}, {"body": "kselden thoughts still", "d": "12/2012"}, {"body": "kselden thoughts make sure use autoinit consistent recent change reflected", "d": "12/2012"}, {"body": "hi trying run ember precompiler play framework getting affected usage volatile keyword error given rhino orgmozillajavascriptevaluatorexception missing name operator definition computedpropertyprototypevolatile changing language version rhino effect could reconsider changing name", "d": "12/2012"}, {"body": "run closure compiler well add following plovr config experimentalcompileroptions languagein", "d": "12/2012"}, {"body": "seems like resolved new router", "d": "12/2012"}, {"body": "probably changed already change new router lets revisit merged", "d": "12/2012"}, {"body": "seems like still concern", "d": "12/2012"}, {"body": "tchak play new router", "d": "12/2012"}, {"body": "see new router affects", "d": "12/2012"}, {"body": "looks like latest master nt suspect something intend add support said want put together pr support definitely consider", "d": "12/2012"}, {"body": "since given using handlebars agnostic approach templates limiting seems key thing missed starting ember feasible make app crawled search engines point ember suited humble opinion applications websites drew conclusion looked ember homepage nt case ember website would ember ruby tl dr use handlebars makes life much simpler", "d": "12/2012"}, {"body": "sinisterminister possible make searchable sites definitely bit work probably something write", "d": "12/2012"}, {"body": "latest master performance improvements make noticeable difference overall", "d": "12/2012"}, {"body": "learning ember advice amp instruction use emberjs trek solves moving script end file purplegit comment must coincidence change names solved using local files", "d": "12/2012"}, {"body": "still issue", "d": "12/2012"}, {"body": "need issue label come back check thing lands", "d": "12/2012"}, {"body": "confirmed lukemelia still issue", "d": "12/2012"}, {"body": "kselden still think issue know guys made improvements performance sure affects", "d": "12/2012"}, {"body": "largely works described", "d": "12/2012"}, {"body": "pretty sure things behave requested", "d": "12/2012"}, {"body": "painful especially since solved adding meaningless link imho supporting ios box value project especially since took several different google searches find thread", "d": "12/2012"}, {"body": "kselden ebryn could please take look question", "d": "12/2012"}, {"body": "still busted latest master", "d": "12/2012"}, {"body": "nothing done super rare someone bind emberlookup instead key", "d": "12/2012"}, {"body": "normalizing code chains emwatch myappmefoo called", "d": "12/2012"}, {"body": "yeah agree nt high priority still unexpected behavior", "d": "12/2012"}, {"body": "agree mailing lists successful judging sproutcore mailing list would nt much success people qualified respond generally start ignoring mailing list much traffic mailing lists also nt good tracking threads unless use client sort another thing us track think pretty set nt think likely change time soon said want discuss best practices would actually say ok open ticket something need pin write documentation cover documentation issues github nt see could nt cover github issues also gives us good way track discussion publicly available source gets vote", "d": "12/2012"}, {"body": "also reiterate want everything foster good communication given past experience believe mailing list appropriate way time", "d": "12/2012"}, {"body": "thumbsdown mailing lists ones participated always ended like wagenet mentions either novice looking help get reply thus x developers assholes totally unhelpful someone could offer help get overwhelmed yetanothernoobaskingthesamehowdoigetstartedquestionomgwhydonttheyjustgoogleit disengage nt start way rainbows kittens start slowly fall apart basically already reached end game people clamoring mailing list ember contributors politely saying nt time help people looking mailing list disappointed mailing list nt goal tool reach goals got solution works us", "d": "12/2012"}]