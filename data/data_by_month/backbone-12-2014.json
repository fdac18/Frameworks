[{"title": "backbone route permission denied", "body": "project permission denied exceptions code like problems put function another router project permission denied exceptions eg", "num": "3428", "d": "12/2014"}, {"title": "urierror parsing url params encoded encodeuricomponent", "body": "appears decodeuri called urls extractparameters calls decodeuricomponent params extracted url cause urierror param already partially decoded contain character would nt legal uri example url fix works us though confident tested router backbone history options using", "num": "3426", "d": "12/2014"}, {"title": "address bar shows mobile safari calling routernavigate", "body": "sure bug seems always router updates url safari shows address bar possible somehow disable backbone", "num": "3422", "d": "12/2014"}, {"title": "view attributes recalculate render", "body": "hi nt know bug purpose nt seem like attributes recalculated views rendered simple use case list views handling selection base model childviews want set ariaselected attribute view element based model property seems doable callback render would great could specify attributes function recalculated every time view renders makes sense seems obvious wonder overlooked makes stupid thing", "num": "3418", "d": "12/2014"}, {"title": "error folder creation vm", "body": "getting error cloudera vm error please help thanks advance", "num": "3417", "d": "12/2014"}, {"title": "left scrollbar working safari os x yosemite", "body": "debugging issue also checked backbonejsorg see sites issue", "num": "3416", "d": "12/2014"}, {"title": "create register new user ejabberd ejabberd client like xmpppy sleekxmpp using api call", "body": "", "num": "3414", "d": "12/2014"}, {"title": "collectionset iteration tests variable model iteration", "body": "hello thanks work see version see collectionset see loop l modelslength lt l iteration line suppose attrs instance model gt variable model set line variable model set iteration line suppose attrs instance model gt variable model changed line test attrs attrs model modelattributes attrs gt attrs iteration test model iteration", "num": "3413", "d": "12/2014"}, {"title": "collections wiped responses models parsed", "body": "type bug description backbone wipes collections responses returned server calling andor collection models parsed may harmless certain situations expected behavior backbone empty collection backbone nt call parse model still triggers event situations wat response servers configured return modified response response means version resource server one client behavior distinct clientside caching typically means making ajax request serverside caching typically means hitting database sometimes even application interfacing database rather like handshake client server feature work according specification server client must configured appropriately server must store one two things resource time last modified etag etag unique identity resource given url note completely independent arbitrary caching times configured server modified dates etags must reference specific versions resources request made client api always return full resource unless one two headers passed header header headers correspond computed last modified timestamp etag value server respectively server use values determine whether client outdated version resource server determines resource changed returns response cares right well final piece response contains empty body problems backbone stem situation client supposed keep current version resource whole process convenient blog post may better job explaining details backbone go wrong backbone goes wrong always sets data successful callback even responses return data collections get wiped due behavior models get called inefficient could reasonably throw errors nt checking empty responses within nt enough information determine whether actually empty response method never relied upon make distinction hooks prevent make work backbone wraps success callback pass success callback erases data way get around wrap backbone wrapped method overriding example way works updates empty response value cached sets response time backbone code accesses nt even realize response actually empty fine standpoint functionality still causes unnecessary code executed ideally nothing happens backbone saying ok ur good firing success callbacks see example following example use jquery option configure jquery automatically manage caching us means jquery automatically send appropriate headers along every request words handles client side things us also use github api configured manage server role feature see backbone wipes collection second fetch wherein server informs us resource uptodate js configure jquery backbone ajaxsetup ifmodified true define instantiate collection var gists backbonecollectionextend url var gists new gists fetch twice log length fetch gistsfetch function logs consolelog first fetch gistslength gistsfetch function logs consolelog second fetch gistslength switching things bit create model parse called unnecessarily situation problem data remains parse function nt checking responses nt think might calculate incorrect data js configure jquery backbone ajaxsetup ifmodified true define instantiate model w parse var model backbonemodelextend url parse function data consolelog parse called return data var model new model fetch twice log attributes fetch modelfetch function consolelog first fetch modelattributes modelfetch function consolelog second fetch modelattributes fix one idea revert reverted pred pr braddunbar gives counterexample shows backbone appearing functioning correctly issue example twofold server following specification return resource nt changed based headers arbitrary caching times correct response situation response data caching layer nt exist even server returned correct response empty unreasonable conceive situations could cause method error otherwise calculate incorrect value concerns pr pr requires specific convention using models model created destroyed reason pr provide new hooks fetch data cache rather assumes current version model still data last fetch jquery fetches uri get rid model instance otherwise make new one unable get new data model unless reference original model external cache fine apps use backbone maybe folks destroying instantiating models point uri", "num": "3412", "d": "12/2014"}, {"title": "collectionget model id eg constructor", "body": "ran issue today collection terms generated body text contained model interfaces object call get back constructor object could certainly work around issue something like wanted ask first see behavior expected might convenient add safeguard", "num": "3411", "d": "12/2014"}, {"title": "unsaved attributes available model via overridden methods save wait true", "body": "looking changes occurred fix saving wait true understand expected behavior working however unsure correct fix implemented would assume expected behavior saving model attributes touched way backend responds current behavior temporarily sets attributes property model new attributes sets asynchronous call resets attributes looks fine good looking progression code initial fix solidified given home believe interesting inconsistencies introduced namely since methods available via model prototype overridden technically access model attributes invalidnot yet saved use case use name attribute well id attribute determine model save fashion method evaluate since name temporarily saved changing value synchronize thus calling update post occur realize examples relies stretching intent believe best exemplifies issue think used cloning via extend model attributes passed attributes sending call via would preferred realize probably theoretical fundamental reasons ie nt using save attributes new models implementation made would love better understand however think appropriate prototype methods overridden see attributes model told via set heard back backend", "num": "3409", "d": "12/2014"}, {"title": "model method without prototype backbonecollection causes crash", "body": "discussed previously however discussed context think confused discussion issue actually happens whenever function lacks property example var mycollection backbonecollectionextend initialize function thismodelprototype null new mycollection backbone errors line nt exist obviously people would write lot people might write also removes prototype backbone able handle case seems like pretty straightforward line also check existence think", "num": "3408", "d": "12/2014"}, {"title": "plans roadmap", "body": "wondering plans roadmap schedule maybe list future features many thanks", "num": "3405", "d": "12/2014"}, {"title": "backbone support blob datatype", "body": "lack support blob data type like images pdf etc inconvenient unpleasant experience support would awesome thing kitty indeed much need thingy imho", "num": "3404", "d": "12/2014"}, {"title": "release schedule", "body": "wondering release schedule plans next release backbone reason asking current release writing bug models custom fix master specify collection without new release dependency tools like bower wo nt get unless point master nt want", "num": "3403", "d": "12/2014"}, {"title": "best way show data database leaflet pop", "body": "good day wan na ask little question ahmm show data database leaflet pop code php select command date usertime address lat lng iconname tblmarker rs db query sql rs echo sql error occuredn exit rows array r rs fetch pdo fetchassoc rows r name r name userdate r userdate usertime r usertime address r address iconname r iconname print jsonencode rows db null code showing marker map database function getinfo getjson getinfophp function data var lt datalength var location new llatlng data lat data lng var marker new lmarker location icon var markergetlatlng markerbindpopup name userdate usertime address iconname addto map thought works refresh marker database shows map click marker pop pop shows like name userdate whats wrong code missing something tyfh ia", "num": "3402", "d": "12/2014"}, {"body": "hi spyropress please use mailing list stackoverflow questions github issues maintaining framework", "d": "12/2014"}, {"body": "think issue cant use default param use initialize function model set property new collection backbone cloning default attributes javascript pass value reference clone defaults well", "d": "12/2014"}, {"body": "hard tell issue looks like may misunderstanding way javascript prototypes work example demonstrate js var model backbonemodelextend items var new model b new model consolelog aitems bitems aitemspush consolelog aitems bitems references objects stored prototype shared amongst instances js var model backbonemodelextend initialize function thisitems var new model b new model consolelog aitems bitems aitemspush consolelog aitems bitems", "d": "12/2014"}, {"body": "doubt research let us know", "d": "12/2014"}, {"body": "giving thought totally understand inappropriate thanks reasonable gatekeeper jashkenas", "d": "12/2014"}, {"body": "cheers buddy", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "reproduce though scrollbar safari safari version yosemite", "d": "12/2014"}, {"body": "steps reproduce right side scrolled top page scroll right side page anywhere nt scroll top page table contents scroll even apparent scroll table contents first scroll right side", "d": "12/2014"}, {"body": "clarify scrollbar content left column scroll mouse scroll wheel", "d": "12/2014"}, {"body": "ahh thanks jridgewell reproducing", "d": "12/2014"}, {"body": "remember problem safari ios idea carried desktop looks like whatever focused clicked last control scroll really bug safari since works fine every browser click one elements drag scroll bar scroll bar focus", "d": "12/2014"}, {"body": "would rather set beginning loop necessary since case take second condition ternary", "d": "12/2014"}, {"body": "concerns pr written application success callback provided still called app could perform update cache needed would think typical usecase namely use ifmodified flag situations know still old data loaded refresh changed scenario nt want overburden default backbone sync code cache handling something could added consensus folks think needs provide better caching hook ok stands reasonable job solving problem thanks thorough presentation issues", "d": "12/2014"}, {"body": "parse example second instantiation example apply models collections javascript configure jquery backbone ajaxsetup ifmodified true define instantiate collection var gists backbonecollectionextend url parse function data consolelog data return data var gists new gists fetch twice log length fetch gistsfetch function consolelog gistslength return gistsfetch function consolelog gistslength gists new gists fetch function consolelog gistslength var gist backbonemodelextend urlroot parse function data consolelog data return data var gist new gist id fetch twice log attributes fetch gistfetch function consolelog gistattributes return gistfetch function consolelog gistattributes gist new gist id fetch function consolelog gistattributes think comes differences unset attributes default removes models default getting second request one returns called since unset default model attributes changed called since removes default collection models removed jashkenas braddunbar worth changing behavior stopgap use prevent models removed present json response javascript configure jquery backbone ajaxsetup ifmodified true define instantiate collection var gists backbonecollectionextend url var gists new gists fetch twice log length fetch gistsfetch function logs consolelog first fetch gistslength gistsfetch remove false function logs consolelog second fetch gistslength concerns think scope backbone going need sort caching layer catches sets data whatever returned last time cache stopgap use fetching first time", "d": "12/2014"}, {"body": "parse example second instantiation example apply models collections true true explicit two problems called returned passing empty data models collections collections likely wiped problem ca nt differentiate actually empty data simply nt enough information action think comes differences model set collection set right second problem affects collections worth changing behavior nt think anyone wants behavior change suggesting stopgap stopgap proposed insufficient handle problem sure works example data nt changed server imagine situation delete gist two requests get response gists collection updated reflect change option passed going need sort caching layer catches sets data whatever returned last time cache true although correct works best caching system client shows pretty reasonable way solve problem without introducing caching layer stopgap use collectionfetch ifmodified false fetching first time ca nt imagine anyone would want use sometimes passing first time noop system works first request", "d": "12/2014"}, {"body": "nt think anyone wants behavior set change suggesting arguing either saying would stop collection wiped would directly mirror new models would added akin new attributes added existing models would updated akin existing attributes updated removed models would left alone akin removed attributes ignored data nt changed server imagine situation delete gist two requests still want data match exactly true although correct works best caching system client shows pretty reasonable way solve problem without introducing caching layer nt solve issue second instantiation meant fetching first time javascript var gists new gists gistsfetch var new gists empty passing first fetch would grab new data needed second instance caching layer would solve since empty response body would replaced original request", "d": "12/2014"}, {"body": "ah gotcha thanks clarifying jridgewell", "d": "12/2014"}, {"body": "jmeas call fire event collections model attached deleted", "d": "12/2014"}, {"body": "stephanebachelier elaborate mean understand destroy works sure relates convo", "d": "12/2014"}, {"body": "jmeas nt remember say forget cite know sure know destroy works answer probably complete request collection destroy model collection server informed requesting first collection trigger collection changed", "d": "12/2014"}, {"body": "brought numerous times", "d": "12/2014"}, {"body": "yep thanks jmeas general nt using arbitrary strings model ids stick backendgenerated integers uuids fine", "d": "12/2014"}, {"body": "jmeas thanks assumed worked like given tradeoff simplicity thoroughness seems backboney favor simplicity mention performance", "d": "12/2014"}, {"body": "please submit failing test case demonstrates undesirable behavior glad merge discuss", "d": "12/2014"}, {"body": "think bigger issue model function returns instance meant could fixed making since uses reference model handy since released would easy make change", "d": "12/2014"}, {"body": "actually issue would method", "d": "12/2014"}, {"body": "always little curious nt receive model instance might handy pr setting nt think supporting really necessary functions property object anything else nt seem like good javascript", "d": "12/2014"}, {"body": "jridgewell return functions without property sure functions thing saying anything else nt seem like good javascript flies face underscorejs library", "d": "12/2014"}, {"body": "johnfn trying bind function anyways", "d": "12/2014"}, {"body": "thejameskyle wanted use property set inside", "d": "12/2014"}, {"body": "hmm make sense potentially change constructor way nt functions return model instances correct", "d": "12/2014"}, {"body": "obviously people would write thismodelprototype null lot people might write thismodel bind thismodel also removes prototype backbone able handle case read code jumped discussion sorry finished reading changing would nt worse thing", "d": "12/2014"}, {"body": "jridgewell nt see helps", "d": "12/2014"}, {"body": "guard null return default though think edge", "d": "12/2014"}, {"body": "means still problem custom bound method function returns model instance", "d": "12/2014"}, {"body": "deemed acceptable trying get rid error base think going end left define custom going provide true constructor function hell lot better setting landed", "d": "12/2014"}, {"body": "since released potential pass model handle use case better although sure handle use case storing reference various container looking", "d": "12/2014"}, {"body": "realize forgot access also thinking make sense takes model attributes since id really dependent attributes etc may places using unnecessary though since always date", "d": "12/2014"}, {"body": "jridgewell essentially exists today update collections could determine uniqueness ids instead models see", "d": "12/2014"}, {"body": "moral story avoid especially nt bind unnecessary calls already get passed correct native functionprototypebind nt give result proper prototype instance need rethink way modelid works", "d": "12/2014"}, {"body": "nt binding binding always gets called", "d": "12/2014"}, {"body": "ok issue johnfn collection looked like instead also expect work right js var mycollection backbonecollectionextend initialize function thismodelprototype null", "d": "12/2014"}, {"body": "shrug like mentioned think bigger issue specifying model method returns instance make fail silently fix case along great", "d": "12/2014"}, {"body": "make modelid fail silently using idattribute using factory model different override bit confusing nothing documentation ca nt fix", "d": "12/2014"}, {"body": "bit confusing nothing documentation ca nt fix nt aware prior issue good need rethink way modelid works think makes much sense", "d": "12/2014"}, {"body": "usually add documentation cut release pull open may may get used docs add case makes much sense explain make sense pass model attributes instances called use uses uses benefit", "d": "12/2014"}, {"body": "agree probably accept model instance master different times nt need accept since getting model edge cases though would need drop support favor think standard use case anyways would need way perform bookkeeping changing model id separated could done pretty easily would also fix", "d": "12/2014"}, {"body": "would need drop support thisget id thisget type id favor thisget thisget want able call unparsed attributes collection would also fix real issue though think argument time nt use arbitrary strings ids given persistence layer integer uuid etc", "d": "12/2014"}, {"body": "would need drop support thisget id thisget type id favor thisget thisget yeah nt want get rid either think issue multiple model types wanting know type dealing although nt know common multiple types collection different", "d": "12/2014"}, {"body": "want able call get unparsed attributes set damn forgot search places using could get around instantiating model mean unnecessary object finds existing collection attributemethods collection attributemethods real issue though need able quickly grab model old id eg would kill two birds", "d": "12/2014"}, {"body": "actually could instantiate model", "d": "12/2014"}, {"body": "strongly disagree nt side effects change completely breaks contract", "d": "12/2014"}, {"body": "nt view instantiating object side effect adding model collection creating passed really thought could still support edge case", "d": "12/2014"}, {"body": "scratch comments wo nt work well due argument may require closest able get letting determine argument model attributes hash id model existing model model continue id thismodelid modelattributes id thismodelid model order amp amp modelisnew modelmap id orderpush model get model set id get function obj obj null return void var id thismodelid thisismodel obj objattributes obj return thisbyid obj thisbyid id thisbyid objcid return thisbyid obj thisbyid objcid thisbyid thismodelid obj modelid function attrs return attrs thismodelprototypeidattribute id modelid function model var idattribute result thismodelprototype idattribute id return thisismodel model modelid model idattribute internal method create model ties collection addreference function model options thisbyid modelcid model var id thismodelid modelattributes var id thismodelid model id null thisbyid id model modelon thisonmodelevent event destroy thisremove model options event change var previd thismodelid modelpreviousattributes var id thismodelid modelattributes var id thismodelid model previd id previd null delete thisbyid previd id null thisbyid id model diff git testcollectionjs testcollectionjs index testcollectionjs testcollectionjs thisismodel attrs attrs attrsattributes return attrstype attrsid", "d": "12/2014"}, {"body": "although nt know common multiple types collection different idattributes agreed though counter anecdote recently worked project tracks keyed db artists albums etc live backbone collection depends backend could get around instantiating model nope gone path horrible built class creator skillshare using older version backbone behavior hack around correctly parsing ids even temporarily persisting cids get models show correctly behavior want grateful eventually fixed change seems natural fan polluting way makes interface ugly especially nt like part sometimes passing model sometimes passing attributes", "d": "12/2014"}, {"body": "nope gone path horrible finding leaving method signature though may want check existence prototype trying grab leave end dev override use factory built class creator skillshare using older version backbone behavior forgot danapplegate mentioned worked skillshare", "d": "12/2014"}, {"body": "would idattribute ever function goal using result guard plain js", "d": "12/2014"}, {"body": "guard", "d": "12/2014"}, {"body": "ok sure looks like back started say looks like case useful overriding anyway add doc note", "d": "12/2014"}, {"body": "prefer second option personally sure looks like back started say looks like case useful overriding model anyway add doc note think appropriate", "d": "12/2014"}, {"body": "nt currently plan would major revamping features interface nt seem like good idea needed one next release changes far", "d": "12/2014"}, {"body": "ok got thanks jeremy", "d": "12/2014"}, {"body": "eta", "d": "12/2014"}, {"body": "soon get around wrapping graphic morning hoping look bit backbone afternoon events may intervene tend", "d": "12/2014"}, {"body": "fingers crossed thanks wed dec pm jeremy ashkenas notifications githubcom wrote soon get around wrapping graphic morning hoping look bit backbone afternoon events may intervene tend reply email directly view github", "d": "12/2014"}, {"body": "mean getset whatever want including used storing raster tiles store issue example", "d": "12/2014"}, {"body": "megawac first thanks quick response well use react view component use case persist change serverside thorugh backbone model like way instead file metadata hash sent server value avatar key contrary thanks answer get handle file serverside gets persisted set pic attribute difference two ways communicating missing something wrong", "d": "12/2014"}, {"body": "hmm thats case problem interesting suspected kept blob client side never sent back pipe either way big first class support bb belong core yet another extension overriding sync someone nt beat see reproduce behaviour jsbin tonight seems like interesting problem cold snowy evening", "d": "12/2014"}, {"body": "megawac use bb react views rails backend bb plugins added override behaviour interesting seen people raising issue stackoverflow deciding workarounds raising issue seek suggestions also appreciate thoughts bb works nested bb model associations say user model association bb profile model replication rails resource say profile nested resource user serverside case explicitly orchestrated association bb talk serverside guess picture got problem thanks time appreciate thoughts experience", "d": "12/2014"}, {"body": "backbone model attributes supposed serializeable json sticking types stuff responsible legwork case overriding might right thing better answer stick file handles attributes first place serialize first", "d": "12/2014"}, {"body": "yessir backboneconf third two weeks cut either", "d": "12/2014"}, {"body": "awesome", "d": "12/2014"}, {"body": "dependency tools like bower wo nt get unless point master nt want fwiw point specific commit hash bower npm want grab untagged version nt want take risk point master", "d": "12/2014"}, {"body": "awesome", "d": "12/2014"}, {"body": "please use stackoverflow mailing list irc channel questions github issues developing framework", "d": "12/2014"}, {"body": "models designed support view ui seemed obvious use change event model attribute order drive web form example user moves slider number times called view seems implementation significantly limits use models anything data interchange w server", "d": "12/2014"}, {"body": "thesmart understand correctly said store previous state model form submit perhaps", "d": "12/2014"}, {"body": "thanks tips also looks like accept attributes object compare going write plugin looks like someone beat", "d": "12/2014"}, {"body": "sort found solution works clean right modified version backbone historynavigate method library updated extension might need different yeah comment seems work fine hope helps javascript extend backbonehistory navigate function fragment options cached regex stripping urls hash var pathstripper", "d": "12/2014"}, {"body": "extend router js navigate function fragment var options backbonehistoryoptions ret much simpler", "d": "12/2014"}, {"body": "probably even get away setting router property directly", "d": "12/2014"}, {"body": "would nt recommend depends leading trailing slash changing assumption could cause strange results avryl curious technical reason want slash included purely aesthetic fine aesthetic technical reason love hear smiley", "d": "12/2014"}, {"body": "braddunbar purely aesthetic urls trailing slash weird root nt removing trailing slash urls option", "d": "12/2014"}, {"body": "backbone allows set root trailing slash nt behave differently", "d": "12/2014"}, {"body": "got aesthetic prefer drop special case well shrugs", "d": "12/2014"}, {"body": "prefer drop special case well sure mean special case thu dec pm brad dunbar notifications githubcom wrote got aesthetic prefer drop special case well shrugs reply email directly view github", "d": "12/2014"}, {"body": "listening click events see url child root requiring trailing slash backbonehistoryroot breaks default route root", "d": "12/2014"}, {"body": "referring code", "d": "12/2014"}, {"body": "issue", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "hi project try implement objectobserve backbone model project modify event asynchronous separate via objectobserve feature project also support objectprototypewatch performance well use benchmark test performance least double growth use objectobserve chrome gt nt growth node gt unittest migrated project backbone change event asynchronous advises thanks jone casper", "d": "12/2014"}, {"body": "yeah retrospect wish stood ground one like revert add note wiki page conversation worth think current set continues problematic folks trying load libraries build top backbone within browser think better", "d": "12/2014"}, {"body": "agreed think confusing commonjs mode load underscore jquery amd global mode load enough client side code days uses commonjs think time re\u00ebxamine", "d": "12/2014"}, {"body": "add noise thread based volume issues questions raised marionette land directly related change reverting commit would save many people time make lives much easier", "d": "12/2014"}, {"body": "agreed think confusing commonjs mode load underscore jquery amd global mode load big difference backbone officially dependency underscore included packagejson jquery nt adding optional require code everybody uses browserify obligated expose least module jquery dependency otherwise build wo nt even work", "d": "12/2014"}, {"body": "guys want change feel free open new pull request desired change made full description rationale explanation going work play different environments", "d": "12/2014"}, {"body": "pr open quite time", "d": "12/2014"}, {"body": "pr try jquery fully describe explain going work different environments want change let put elbow grease really explain idiot like going able push merge button something resembling confidence", "d": "12/2014"}, {"body": "laptop genius bar next days someone doesnt open pr add main gist want common case loading jquery work without issue folks nt need jquery tell build tool ignore require node done throwing error catch ignore browserify webpack config option backbone variable still available ender zepto etc", "d": "12/2014"}, {"body": "", "d": "12/2014"}, {"body": "browserify webpack config option famiar option would look like", "d": "12/2014"}, {"body": "somebody please help understand jquery go packagejson like dependencies try catch surprises weirdness server side takes insignificant amount space time load browser somebody using dom library jquery onus person swap library choice browserify done easily browserifyshim sure webpack must way like put together pr simple case w examples handle nonjquerydomlibs con seeing considered", "d": "12/2014"}, {"body": "somebody please help understand jquery go packagejson like dependencies good question obviously regarding people nt use jquery curious aliasing similar distasteful things really break rereading thread nt see mention actual breakage included said using routerapp time bit odd nt problems", "d": "12/2014"}, {"body": "somebody please help understand jquery go packagejson like dependencies asking question time know issues folks server two minor inconveniences mentioned sure current setup favoring use case although jashkenas described usecase think something problematic comes client sec said using backbone require jquery routerapp time bit odd nt problems using backbone problem issue comes load library like marionette depends backbone defined marionette work backbone say webpack environment force webpack inject dep configuration difficult folks trying get set may experts module bundlers browserify webpack config option curious see familiar alias option would easily let people swap jquery say zepto admit sure one would configure backbone ignore jquery change set include packagejson add line problem mentioned earlier post", "d": "12/2014"}, {"body": "also want backbone use zepto still use jquery areas aliasing work case", "d": "12/2014"}, {"body": "issue comes load library like marionette depends backbone defined always set loading marionette chaplin thorax ideal certainly tedious", "d": "12/2014"}, {"body": "exactly also plugins use jquery directly seems one rely directly instead using way upgrade separately without fear breakage least done past", "d": "12/2014"}, {"body": "also plugins use jquery directly seems one rely directly instead using way upgrade separately without fear breakage disagree marionette using jquery backbone jquery app becomes absolute mess view property different rest app plugins etc metaframeworks always use variable instead trying require jquery", "d": "12/2014"}, {"body": "fair enough smiley", "d": "12/2014"}, {"body": "famiar option would look like webpack throw runtime error like node", "d": "12/2014"}, {"body": "project permission denied exceptions code like problems put function another router project permission denied exceptions eg", "d": "12/2014"}, {"body": "issue using backbone using parse sdk extends backbone call fetch collection get resetoverwritten rather appending", "d": "12/2014"}, {"body": "sorry comment longclosed issue really fail see even case provided braddunbar using following snippet var model new backbonemodel modelon change function consolelog change modelset b change b function consolelog b change modelset modelset produces output using model set method related question regard care weigh", "d": "12/2014"}, {"body": "feel free use objectdefineproperty directly tried adding new properties directly defineproperties long set enumerable seems generally work show one glitch always generates change event even property writeable nt tried real code yet general think might reasonable approach simple computed properties model new backbonemodel apple modelset b boy objectdefineproperty modelattributes c value cat enumerable true writable true objectdefineproperty modelattributes c get function return thisctouppercase enumerable true objectdefineproperty modelattributes get function return new date enumerable true modeltojson", "d": "12/2014"}]